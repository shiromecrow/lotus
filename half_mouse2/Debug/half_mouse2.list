
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024cb4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000930  08024e98  08024e98  00034e98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080257c8  080257c8  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  080257c8  080257c8  000357c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080257d0  080257d0  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080257d0  080257d0  000357d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080257d4  080257d4  000357d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  080257d8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fbe4  200001fc  080259d4  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000fde0  080259d4  0004fde0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027b0b  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000060ca  00000000  00000000  00067d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ff8  00000000  00000000  0006de08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001d00  00000000  00000000  0006fe00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028834  00000000  00000000  00071b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032244  00000000  00000000  0009a334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb461  00000000  00000000  000cc578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b79d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b34  00000000  00000000  001b7a2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08024e7c 	.word	0x08024e7c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	08024e7c 	.word	0x08024e7c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
//float angle_R_database[ANGLE_MEAN_SIZE];

//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <reset_distance+0x5c>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b14      	ldr	r3, [pc, #80]	; (8000ffc <reset_distance+0x60>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <reset_distance+0x64>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <reset_distance+0x68>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <reset_distance+0x6c>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <reset_distance+0x70>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <reset_distance+0x74>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <reset_distance+0x78>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0d      	ldr	r3, [pc, #52]	; (8001018 <reset_distance+0x7c>)
 8000fe2:	4a0e      	ldr	r2, [pc, #56]	; (800101c <reset_distance+0x80>)
 8000fe4:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <reset_distance+0x84>)
 8000fe8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000fec:	601a      	str	r2, [r3, #0]

}
 8000fee:	bf00      	nop
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	20000220 	.word	0x20000220
 8000ffc:	20000224 	.word	0x20000224
 8001000:	20000230 	.word	0x20000230
 8001004:	20000234 	.word	0x20000234
 8001008:	20000240 	.word	0x20000240
 800100c:	20000244 	.word	0x20000244
 8001010:	20000250 	.word	0x20000250
 8001014:	20000254 	.word	0x20000254
 8001018:	20000260 	.word	0x20000260
 800101c:	3f59999a 	.word	0x3f59999a
 8001020:	20000264 	.word	0x20000264

08001024 <reset_speed>:

void reset_speed(void) {
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <reset_speed+0x4c>)
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001030:	4b10      	ldr	r3, [pc, #64]	; (8001074 <reset_speed+0x50>)
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <reset_speed+0x54>)
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001040:	4b0e      	ldr	r3, [pc, #56]	; (800107c <reset_speed+0x58>)
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 8001048:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <reset_speed+0x5c>)
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <reset_speed+0x60>)
 8001052:	f04f 0200 	mov.w	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8001058:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <reset_speed+0x64>)
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <reset_speed+0x68>)
 800105c:	601a      	str	r2, [r3, #0]
	theta_comp_gain=1;
 800105e:	4b0c      	ldr	r3, [pc, #48]	; (8001090 <reset_speed+0x6c>)
 8001060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001064:	601a      	str	r2, [r3, #0]
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	20000248 	.word	0x20000248
 8001074:	2000024c 	.word	0x2000024c
 8001078:	20000238 	.word	0x20000238
 800107c:	2000023c 	.word	0x2000023c
 8001080:	20000258 	.word	0x20000258
 8001084:	2000025c 	.word	0x2000025c
 8001088:	20000260 	.word	0x20000260
 800108c:	3f59999a 	.word	0x3f59999a
 8001090:	20000264 	.word	0x20000264
 8001094:	00000000 	.word	0x00000000

08001098 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	float angle_R_mean,angle_L_mean;
	angle_R=encoder_R-encoder_R0;
 80010a0:	4be5      	ldr	r3, [pc, #916]	; (8001438 <interupt_calEncoder+0x3a0>)
 80010a2:	ed93 7a00 	vldr	s14, [r3]
 80010a6:	4be5      	ldr	r3, [pc, #916]	; (800143c <interupt_calEncoder+0x3a4>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 80010b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b8:	ed9f 7ae1 	vldr	s14, [pc, #900]	; 8001440 <interupt_calEncoder+0x3a8>
 80010bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c4:	dd07      	ble.n	80010d6 <interupt_calEncoder+0x3e>
 80010c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ca:	ed9f 7ade 	vldr	s14, [pc, #888]	; 8001444 <interupt_calEncoder+0x3ac>
 80010ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010d2:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010d6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010da:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8001448 <interupt_calEncoder+0x3b0>
 80010de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	d507      	bpl.n	80010f8 <interupt_calEncoder+0x60>
 80010e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ec:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 8001444 <interupt_calEncoder+0x3ac>
 80010f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010f4:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010f8:	4bd4      	ldr	r3, [pc, #848]	; (800144c <interupt_calEncoder+0x3b4>)
 80010fa:	ed93 7a00 	vldr	s14, [r3]
 80010fe:	4bd4      	ldr	r3, [pc, #848]	; (8001450 <interupt_calEncoder+0x3b8>)
 8001100:	edd3 7a00 	vldr	s15, [r3]
 8001104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001108:	eef1 7a67 	vneg.f32	s15, s15
 800110c:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 8001110:	edd7 7a00 	vldr	s15, [r7]
 8001114:	ed9f 7aca 	vldr	s14, [pc, #808]	; 8001440 <interupt_calEncoder+0x3a8>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd07      	ble.n	8001132 <interupt_calEncoder+0x9a>
 8001122:	edd7 7a00 	vldr	s15, [r7]
 8001126:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8001444 <interupt_calEncoder+0x3ac>
 800112a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800112e:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001132:	edd7 7a00 	vldr	s15, [r7]
 8001136:	ed9f 7ac4 	vldr	s14, [pc, #784]	; 8001448 <interupt_calEncoder+0x3b0>
 800113a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800113e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001142:	d507      	bpl.n	8001154 <interupt_calEncoder+0xbc>
 8001144:	edd7 7a00 	vldr	s15, [r7]
 8001148:	ed9f 7abe 	vldr	s14, [pc, #760]	; 8001444 <interupt_calEncoder+0x3ac>
 800114c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001150:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 8001154:	6838      	ldr	r0, [r7, #0]
 8001156:	f7ff fa1f 	bl	8000598 <__aeabi_f2d>
 800115a:	a39d      	add	r3, pc, #628	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa72 	bl	8000648 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	4bb8      	ldr	r3, [pc, #736]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001172:	f7ff fb93 	bl	800089c <__aeabi_ddiv>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a396      	add	r3, pc, #600	; (adr r3, 80013d8 <interupt_calEncoder+0x340>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa60 	bl	8000648 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	a393      	add	r3, pc, #588	; (adr r3, 80013e0 <interupt_calEncoder+0x348>)
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	f7ff fa57 	bl	8000648 <__aeabi_dmul>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	a391      	add	r3, pc, #580	; (adr r3, 80013e8 <interupt_calEncoder+0x350>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fa4e 	bl	8000648 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	a38e      	add	r3, pc, #568	; (adr r3, 80013f0 <interupt_calEncoder+0x358>)
 80011b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ba:	f7ff fb6f 	bl	800089c <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4ba3      	ldr	r3, [pc, #652]	; (8001458 <interupt_calEncoder+0x3c0>)
 80011cc:	f7ff fa3c 	bl	8000648 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	a387      	add	r3, pc, #540	; (adr r3, 80013f8 <interupt_calEncoder+0x360>)
 80011da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011de:	f7ff fb5d 	bl	800089c <__aeabi_ddiv>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	f04f 0200 	mov.w	r2, #0
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <interupt_calEncoder+0x3c4>)
 80011f0:	f7ff fa2a 	bl	8000648 <__aeabi_dmul>
 80011f4:	4602      	mov	r2, r0
 80011f6:	460b      	mov	r3, r1
 80011f8:	4610      	mov	r0, r2
 80011fa:	4619      	mov	r1, r3
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b97      	ldr	r3, [pc, #604]	; (8001460 <interupt_calEncoder+0x3c8>)
 8001202:	f7ff fb4b 	bl	800089c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4610      	mov	r0, r2
 800120c:	4619      	mov	r1, r3
 800120e:	a37c      	add	r3, pc, #496	; (adr r3, 8001400 <interupt_calEncoder+0x368>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff fa18 	bl	8000648 <__aeabi_dmul>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a379      	add	r3, pc, #484	; (adr r3, 8001408 <interupt_calEncoder+0x370>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb39 	bl	800089c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800123a:	f7ff fb2f 	bl	800089c <__aeabi_ddiv>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b86      	ldr	r3, [pc, #536]	; (8001464 <interupt_calEncoder+0x3cc>)
 800124c:	f7ff f9fc 	bl	8000648 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	a36d      	add	r3, pc, #436	; (adr r3, 8001410 <interupt_calEncoder+0x378>)
 800125a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800125e:	f7ff fb1d 	bl	800089c <__aeabi_ddiv>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	a36b      	add	r3, pc, #428	; (adr r3, 8001418 <interupt_calEncoder+0x380>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9ea 	bl	8000648 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4690      	mov	r8, r2
 800127a:	4699      	mov	r9, r3
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800127c:	4b7a      	ldr	r3, [pc, #488]	; (8001468 <interupt_calEncoder+0x3d0>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f989 	bl	8000598 <__aeabi_f2d>
 8001286:	4604      	mov	r4, r0
 8001288:	460d      	mov	r5, r1
 800128a:	4b70      	ldr	r3, [pc, #448]	; (800144c <interupt_calEncoder+0x3b4>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f982 	bl	8000598 <__aeabi_f2d>
 8001294:	a34e      	add	r3, pc, #312	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f7ff f9d5 	bl	8000648 <__aeabi_dmul>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	4b6a      	ldr	r3, [pc, #424]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012ac:	f7ff faf6 	bl	800089c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	ec43 2b17 	vmov	d7, r2, r3
 80012b8:	eeb0 0a47 	vmov.f32	s0, s14
 80012bc:	eef0 0a67 	vmov.f32	s1, s15
 80012c0:	f022 fb8a 	bl	80239d8 <sin>
 80012c4:	ec51 0b10 	vmov	r0, r1, d0
 80012c8:	a355      	add	r3, pc, #340	; (adr r3, 8001420 <interupt_calEncoder+0x388>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f9bb 	bl	8000648 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4692      	mov	sl, r2
 80012d8:	469b      	mov	fp, r3
 80012da:	4b5c      	ldr	r3, [pc, #368]	; (800144c <interupt_calEncoder+0x3b4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f95a 	bl	8000598 <__aeabi_f2d>
 80012e4:	a33a      	add	r3, pc, #232	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f9ad 	bl	8000648 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4610      	mov	r0, r2
 80012f4:	4619      	mov	r1, r3
 80012f6:	f04f 0200 	mov.w	r2, #0
 80012fa:	4b56      	ldr	r3, [pc, #344]	; (8001454 <interupt_calEncoder+0x3bc>)
 80012fc:	f7ff face 	bl	800089c <__aeabi_ddiv>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	ec43 2b17 	vmov	d7, r2, r3
 8001308:	eeb0 0a47 	vmov.f32	s0, s14
 800130c:	eef0 0a67 	vmov.f32	s1, s15
 8001310:	f022 fb0e 	bl	8023930 <cos>
 8001314:	ec51 0b10 	vmov	r0, r1, d0
 8001318:	a343      	add	r3, pc, #268	; (adr r3, 8001428 <interupt_calEncoder+0x390>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff f993 	bl	8000648 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4650      	mov	r0, sl
 8001328:	4659      	mov	r1, fp
 800132a:	f7fe ffd7 	bl	80002dc <__adddf3>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4692      	mov	sl, r2
 8001334:	469b      	mov	fp, r3

	+THETA_COMP_L3*sin(2*encoder_L*pi/180)+THETA_COMP_L4*cos(2*encoder_L*pi/180)));
 8001336:	4b45      	ldr	r3, [pc, #276]	; (800144c <interupt_calEncoder+0x3b4>)
 8001338:	edd3 7a00 	vldr	s15, [r3]
 800133c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001340:	ee17 0a90 	vmov	r0, s15
 8001344:	f7ff f928 	bl	8000598 <__aeabi_f2d>
 8001348:	a321      	add	r3, pc, #132	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f97b 	bl	8000648 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4610      	mov	r0, r2
 8001358:	4619      	mov	r1, r3
 800135a:	f04f 0200 	mov.w	r2, #0
 800135e:	4b3d      	ldr	r3, [pc, #244]	; (8001454 <interupt_calEncoder+0x3bc>)
 8001360:	f7ff fa9c 	bl	800089c <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	ec43 2b17 	vmov	d7, r2, r3
 800136c:	eeb0 0a47 	vmov.f32	s0, s14
 8001370:	eef0 0a67 	vmov.f32	s1, s15
 8001374:	f022 fb30 	bl	80239d8 <sin>
 8001378:	ec51 0b10 	vmov	r0, r1, d0
 800137c:	a32c      	add	r3, pc, #176	; (adr r3, 8001430 <interupt_calEncoder+0x398>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	f7ff f961 	bl	8000648 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4650      	mov	r0, sl
 800138c:	4659      	mov	r1, fp
 800138e:	f7fe ffa5 	bl	80002dc <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4692      	mov	sl, r2
 8001398:	469b      	mov	fp, r3
 800139a:	4b2c      	ldr	r3, [pc, #176]	; (800144c <interupt_calEncoder+0x3b4>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013a4:	ee17 0a90 	vmov	r0, s15
 80013a8:	f7ff f8f6 	bl	8000598 <__aeabi_f2d>
 80013ac:	a308      	add	r3, pc, #32	; (adr r3, 80013d0 <interupt_calEncoder+0x338>)
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f7ff f949 	bl	8000648 <__aeabi_dmul>
 80013b6:	4602      	mov	r2, r0
 80013b8:	460b      	mov	r3, r1
 80013ba:	4610      	mov	r0, r2
 80013bc:	4619      	mov	r1, r3
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b24      	ldr	r3, [pc, #144]	; (8001454 <interupt_calEncoder+0x3bc>)
 80013c4:	f7ff fa6a 	bl	800089c <__aeabi_ddiv>
 80013c8:	e050      	b.n	800146c <interupt_calEncoder+0x3d4>
 80013ca:	bf00      	nop
 80013cc:	f3af 8000 	nop.w
 80013d0:	54411744 	.word	0x54411744
 80013d4:	400921fb 	.word	0x400921fb
 80013d8:	4e70a65b 	.word	0x4e70a65b
 80013dc:	3f882f36 	.word	0x3f882f36
 80013e0:	a858793e 	.word	0xa858793e
 80013e4:	3ff1cd35 	.word	0x3ff1cd35
 80013e8:	00000000 	.word	0x00000000
 80013ec:	4078c000 	.word	0x4078c000
 80013f0:	147ae148 	.word	0x147ae148
 80013f4:	4078fbae 	.word	0x4078fbae
 80013f8:	0a3d70a4 	.word	0x0a3d70a4
 80013fc:	4078efd7 	.word	0x4078efd7
 8001400:	00000000 	.word	0x00000000
 8001404:	4125eb2e 	.word	0x4125eb2e
 8001408:	33333333 	.word	0x33333333
 800140c:	4125f7be 	.word	0x4125f7be
 8001410:	d2f1a9fc 	.word	0xd2f1a9fc
 8001414:	3f50624d 	.word	0x3f50624d
 8001418:	d0353719 	.word	0xd0353719
 800141c:	409a862c 	.word	0x409a862c
 8001420:	aa14ef84 	.word	0xaa14ef84
 8001424:	400ca14f 	.word	0x400ca14f
 8001428:	74decf2e 	.word	0x74decf2e
 800142c:	c05a4d26 	.word	0xc05a4d26
 8001430:	19d7419b 	.word	0x19d7419b
 8001434:	c0710f5a 	.word	0xc0710f5a
 8001438:	200006e4 	.word	0x200006e4
 800143c:	20000218 	.word	0x20000218
 8001440:	43340000 	.word	0x43340000
 8001444:	43b40000 	.word	0x43b40000
 8001448:	c3340000 	.word	0xc3340000
 800144c:	200006e8 	.word	0x200006e8
 8001450:	2000021c 	.word	0x2000021c
 8001454:	40668000 	.word	0x40668000
 8001458:	40790000 	.word	0x40790000
 800145c:	40870800 	.word	0x40870800
 8001460:	40868000 	.word	0x40868000
 8001464:	408f4000 	.word	0x408f4000
 8001468:	20000264 	.word	0x20000264
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	ec43 2b17 	vmov	d7, r2, r3
 8001474:	eeb0 0a47 	vmov.f32	s0, s14
 8001478:	eef0 0a67 	vmov.f32	s1, s15
 800147c:	f022 fa58 	bl	8023930 <cos>
 8001480:	ec51 0b10 	vmov	r0, r1, d0
 8001484:	a3fd      	add	r3, pc, #1012	; (adr r3, 800187c <interupt_calEncoder+0x7e4>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff f8dd 	bl	8000648 <__aeabi_dmul>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4650      	mov	r0, sl
 8001494:	4659      	mov	r1, fp
 8001496:	f7fe ff21 	bl	80002dc <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
			/(THETA_COMP_L0 + theta_comp_gain*(THETA_COMP_L1*sin(encoder_L*pi/180)+THETA_COMP_L2*cos(encoder_L*pi/180)
 800149e:	4620      	mov	r0, r4
 80014a0:	4629      	mov	r1, r5
 80014a2:	f7ff f8d1 	bl	8000648 <__aeabi_dmul>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4610      	mov	r0, r2
 80014ac:	4619      	mov	r1, r3
 80014ae:	a3f5      	add	r3, pc, #980	; (adr r3, 8001884 <interupt_calEncoder+0x7ec>)
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f7fe ff12 	bl	80002dc <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	4640      	mov	r0, r8
 80014be:	4649      	mov	r1, r9
 80014c0:	f7ff f9ec 	bl	800089c <__aeabi_ddiv>
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fb94 	bl	8000bf8 <__aeabi_d2f>
 80014d0:	4603      	mov	r3, r0
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME*THETA_COMP_L0
 80014d2:	4adf      	ldr	r2, [pc, #892]	; (8001850 <interupt_calEncoder+0x7b8>)
 80014d4:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	a3c4      	add	r3, pc, #784	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7ff f8b1 	bl	8000648 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	4bd8      	ldr	r3, [pc, #864]	; (8001854 <interupt_calEncoder+0x7bc>)
 80014f4:	f7ff f9d2 	bl	800089c <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	a3bd      	add	r3, pc, #756	; (adr r3, 80017f8 <interupt_calEncoder+0x760>)
 8001502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001506:	f7ff f89f 	bl	8000648 <__aeabi_dmul>
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4610      	mov	r0, r2
 8001510:	4619      	mov	r1, r3
 8001512:	a3bb      	add	r3, pc, #748	; (adr r3, 8001800 <interupt_calEncoder+0x768>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f896 	bl	8000648 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	a3b8      	add	r3, pc, #736	; (adr r3, 8001808 <interupt_calEncoder+0x770>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7ff f88d 	bl	8000648 <__aeabi_dmul>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	a3b6      	add	r3, pc, #728	; (adr r3, 8001810 <interupt_calEncoder+0x778>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7ff f9ae 	bl	800089c <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4610      	mov	r0, r2
 8001546:	4619      	mov	r1, r3
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4bc2      	ldr	r3, [pc, #776]	; (8001858 <interupt_calEncoder+0x7c0>)
 800154e:	f7ff f87b 	bl	8000648 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	a3af      	add	r3, pc, #700	; (adr r3, 8001818 <interupt_calEncoder+0x780>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f99c 	bl	800089c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4bba      	ldr	r3, [pc, #744]	; (800185c <interupt_calEncoder+0x7c4>)
 8001572:	f7ff f869 	bl	8000648 <__aeabi_dmul>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	4bb7      	ldr	r3, [pc, #732]	; (8001860 <interupt_calEncoder+0x7c8>)
 8001584:	f7ff f98a 	bl	800089c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f980 	bl	800089c <__aeabi_ddiv>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4bae      	ldr	r3, [pc, #696]	; (8001864 <interupt_calEncoder+0x7cc>)
 80015aa:	f7ff f84d 	bl	8000648 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	a39a      	add	r3, pc, #616	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f7ff f96e 	bl	800089c <__aeabi_ddiv>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4610      	mov	r0, r2
 80015c6:	4619      	mov	r1, r3
 80015c8:	a397      	add	r3, pc, #604	; (adr r3, 8001828 <interupt_calEncoder+0x790>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4690      	mov	r8, r2
 80015d8:	4699      	mov	r9, r3
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 80015da:	4ba3      	ldr	r3, [pc, #652]	; (8001868 <interupt_calEncoder+0x7d0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7fe ffda 	bl	8000598 <__aeabi_f2d>
 80015e4:	4604      	mov	r4, r0
 80015e6:	460d      	mov	r5, r1
 80015e8:	4ba0      	ldr	r3, [pc, #640]	; (800186c <interupt_calEncoder+0x7d4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffd3 	bl	8000598 <__aeabi_f2d>
 80015f2:	a37f      	add	r3, pc, #508	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7ff f826 	bl	8000648 <__aeabi_dmul>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b92      	ldr	r3, [pc, #584]	; (8001854 <interupt_calEncoder+0x7bc>)
 800160a:	f7ff f947 	bl	800089c <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	ec43 2b17 	vmov	d7, r2, r3
 8001616:	eeb0 0a47 	vmov.f32	s0, s14
 800161a:	eef0 0a67 	vmov.f32	s1, s15
 800161e:	f022 f9db 	bl	80239d8 <sin>
 8001622:	ec51 0b10 	vmov	r0, r1, d0
 8001626:	a382      	add	r3, pc, #520	; (adr r3, 8001830 <interupt_calEncoder+0x798>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7ff f80c 	bl	8000648 <__aeabi_dmul>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4692      	mov	sl, r2
 8001636:	469b      	mov	fp, r3
 8001638:	4b8c      	ldr	r3, [pc, #560]	; (800186c <interupt_calEncoder+0x7d4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ffab 	bl	8000598 <__aeabi_f2d>
 8001642:	a36b      	add	r3, pc, #428	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe fffe 	bl	8000648 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4610      	mov	r0, r2
 8001652:	4619      	mov	r1, r3
 8001654:	f04f 0200 	mov.w	r2, #0
 8001658:	4b7e      	ldr	r3, [pc, #504]	; (8001854 <interupt_calEncoder+0x7bc>)
 800165a:	f7ff f91f 	bl	800089c <__aeabi_ddiv>
 800165e:	4602      	mov	r2, r0
 8001660:	460b      	mov	r3, r1
 8001662:	ec43 2b17 	vmov	d7, r2, r3
 8001666:	eeb0 0a47 	vmov.f32	s0, s14
 800166a:	eef0 0a67 	vmov.f32	s1, s15
 800166e:	f022 f95f 	bl	8023930 <cos>
 8001672:	ec51 0b10 	vmov	r0, r1, d0
 8001676:	a370      	add	r3, pc, #448	; (adr r3, 8001838 <interupt_calEncoder+0x7a0>)
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	f7fe ffe4 	bl	8000648 <__aeabi_dmul>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4650      	mov	r0, sl
 8001686:	4659      	mov	r1, fp
 8001688:	f7fe fe28 	bl	80002dc <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4692      	mov	sl, r2
 8001692:	469b      	mov	fp, r3
							  +THETA_COMP_R3*sin(2*encoder_R*pi/180)+THETA_COMP_R4*cos(2*encoder_R*pi/180)));
 8001694:	4b75      	ldr	r3, [pc, #468]	; (800186c <interupt_calEncoder+0x7d4>)
 8001696:	edd3 7a00 	vldr	s15, [r3]
 800169a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe ff79 	bl	8000598 <__aeabi_f2d>
 80016a6:	a352      	add	r3, pc, #328	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7fe ffcc 	bl	8000648 <__aeabi_dmul>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	4b65      	ldr	r3, [pc, #404]	; (8001854 <interupt_calEncoder+0x7bc>)
 80016be:	f7ff f8ed 	bl	800089c <__aeabi_ddiv>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	ec43 2b17 	vmov	d7, r2, r3
 80016ca:	eeb0 0a47 	vmov.f32	s0, s14
 80016ce:	eef0 0a67 	vmov.f32	s1, s15
 80016d2:	f022 f981 	bl	80239d8 <sin>
 80016d6:	ec51 0b10 	vmov	r0, r1, d0
 80016da:	a359      	add	r3, pc, #356	; (adr r3, 8001840 <interupt_calEncoder+0x7a8>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4650      	mov	r0, sl
 80016ea:	4659      	mov	r1, fp
 80016ec:	f7fe fdf6 	bl	80002dc <__adddf3>
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4692      	mov	sl, r2
 80016f6:	469b      	mov	fp, r3
 80016f8:	4b5c      	ldr	r3, [pc, #368]	; (800186c <interupt_calEncoder+0x7d4>)
 80016fa:	edd3 7a00 	vldr	s15, [r3]
 80016fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001702:	ee17 0a90 	vmov	r0, s15
 8001706:	f7fe ff47 	bl	8000598 <__aeabi_f2d>
 800170a:	a339      	add	r3, pc, #228	; (adr r3, 80017f0 <interupt_calEncoder+0x758>)
 800170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001710:	f7fe ff9a 	bl	8000648 <__aeabi_dmul>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b4c      	ldr	r3, [pc, #304]	; (8001854 <interupt_calEncoder+0x7bc>)
 8001722:	f7ff f8bb 	bl	800089c <__aeabi_ddiv>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	ec43 2b17 	vmov	d7, r2, r3
 800172e:	eeb0 0a47 	vmov.f32	s0, s14
 8001732:	eef0 0a67 	vmov.f32	s1, s15
 8001736:	f022 f8fb 	bl	8023930 <cos>
 800173a:	ec51 0b10 	vmov	r0, r1, d0
 800173e:	a342      	add	r3, pc, #264	; (adr r3, 8001848 <interupt_calEncoder+0x7b0>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff80 	bl	8000648 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4650      	mov	r0, sl
 800174e:	4659      	mov	r1, fp
 8001750:	f7fe fdc4 	bl	80002dc <__adddf3>
 8001754:	4602      	mov	r2, r0
 8001756:	460b      	mov	r3, r1
			/ (THETA_COMP_R0 + theta_comp_gain*(THETA_COMP_R1*sin(encoder_R*pi/180)+THETA_COMP_R2*cos(encoder_R*pi/180)
 8001758:	4620      	mov	r0, r4
 800175a:	4629      	mov	r1, r5
 800175c:	f7fe ff74 	bl	8000648 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4610      	mov	r0, r2
 8001766:	4619      	mov	r1, r3
 8001768:	a32f      	add	r3, pc, #188	; (adr r3, 8001828 <interupt_calEncoder+0x790>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe fdb5 	bl	80002dc <__adddf3>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4640      	mov	r0, r8
 8001778:	4649      	mov	r1, r9
 800177a:	f7ff f88f 	bl	800089c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	4610      	mov	r0, r2
 8001784:	4619      	mov	r1, r3
 8001786:	f7ff fa37 	bl	8000bf8 <__aeabi_d2f>
 800178a:	4603      	mov	r3, r0
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME*THETA_COMP_R0
 800178c:	4a38      	ldr	r2, [pc, #224]	; (8001870 <interupt_calEncoder+0x7d8>)
 800178e:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001790:	4b38      	ldr	r3, [pc, #224]	; (8001874 <interupt_calEncoder+0x7dc>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe feff 	bl	8000598 <__aeabi_f2d>
 800179a:	4604      	mov	r4, r0
 800179c:	460d      	mov	r5, r1
 800179e:	4b2c      	ldr	r3, [pc, #176]	; (8001850 <interupt_calEncoder+0x7b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fef8 	bl	8000598 <__aeabi_f2d>
 80017a8:	a31d      	add	r3, pc, #116	; (adr r3, 8001820 <interupt_calEncoder+0x788>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff4b 	bl	8000648 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4620      	mov	r0, r4
 80017b8:	4629      	mov	r1, r5
 80017ba:	f7fe fd8f 	bl	80002dc <__adddf3>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4610      	mov	r0, r2
 80017c4:	4619      	mov	r1, r3
 80017c6:	f7ff fa17 	bl	8000bf8 <__aeabi_d2f>
 80017ca:	4603      	mov	r3, r0
 80017cc:	4a29      	ldr	r2, [pc, #164]	; (8001874 <interupt_calEncoder+0x7dc>)
 80017ce:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 80017d0:	4b29      	ldr	r3, [pc, #164]	; (8001878 <interupt_calEncoder+0x7e0>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fedf 	bl	8000598 <__aeabi_f2d>
 80017da:	4604      	mov	r4, r0
 80017dc:	460d      	mov	r5, r1
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <interupt_calEncoder+0x7d8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fed8 	bl	8000598 <__aeabi_f2d>
 80017e8:	e050      	b.n	800188c <interupt_calEncoder+0x7f4>
 80017ea:	bf00      	nop
 80017ec:	f3af 8000 	nop.w
 80017f0:	54411744 	.word	0x54411744
 80017f4:	400921fb 	.word	0x400921fb
 80017f8:	4e70a65b 	.word	0x4e70a65b
 80017fc:	3f882f36 	.word	0x3f882f36
 8001800:	a858793e 	.word	0xa858793e
 8001804:	3ff1cd35 	.word	0x3ff1cd35
 8001808:	00000000 	.word	0x00000000
 800180c:	4078c000 	.word	0x4078c000
 8001810:	147ae148 	.word	0x147ae148
 8001814:	4078fbae 	.word	0x4078fbae
 8001818:	5c28f5c3 	.word	0x5c28f5c3
 800181c:	40792a8f 	.word	0x40792a8f
 8001820:	d2f1a9fc 	.word	0xd2f1a9fc
 8001824:	3f50624d 	.word	0x3f50624d
 8001828:	11d3671b 	.word	0x11d3671b
 800182c:	409c0a10 	.word	0x409c0a10
 8001830:	27aee802 	.word	0x27aee802
 8001834:	c0234be5 	.word	0xc0234be5
 8001838:	578a2a91 	.word	0x578a2a91
 800183c:	405f0f59 	.word	0x405f0f59
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	404d0ccc 	.word	0x404d0ccc
 8001848:	45e8419d 	.word	0x45e8419d
 800184c:	4075ef32 	.word	0x4075ef32
 8001850:	20000228 	.word	0x20000228
 8001854:	40668000 	.word	0x40668000
 8001858:	40790000 	.word	0x40790000
 800185c:	40870800 	.word	0x40870800
 8001860:	40868000 	.word	0x40868000
 8001864:	408f4000 	.word	0x408f4000
 8001868:	20000264 	.word	0x20000264
 800186c:	200006e4 	.word	0x200006e4
 8001870:	2000022c 	.word	0x2000022c
 8001874:	20000220 	.word	0x20000220
 8001878:	20000224 	.word	0x20000224
 800187c:	a96b73c1 	.word	0xa96b73c1
 8001880:	4058baae 	.word	0x4058baae
 8001884:	d0353719 	.word	0xd0353719
 8001888:	409a862c 	.word	0x409a862c
 800188c:	a315      	add	r3, pc, #84	; (adr r3, 80018e4 <interupt_calEncoder+0x84c>)
 800188e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001892:	f7fe fed9 	bl	8000648 <__aeabi_dmul>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7fe fd1d 	bl	80002dc <__adddf3>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	f7ff f9a5 	bl	8000bf8 <__aeabi_d2f>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <interupt_calEncoder+0x838>)
 80018b2:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 80018b4:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <interupt_calEncoder+0x83c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <interupt_calEncoder+0x840>)
 80018ba:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <interupt_calEncoder+0x844>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a07      	ldr	r2, [pc, #28]	; (80018e0 <interupt_calEncoder+0x848>)
 80018c2:	6013      	str	r3, [r2, #0]

}
 80018c4:	bf00      	nop
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018ce:	bf00      	nop
 80018d0:	20000224 	.word	0x20000224
 80018d4:	200006e8 	.word	0x200006e8
 80018d8:	2000021c 	.word	0x2000021c
 80018dc:	200006e4 	.word	0x200006e4
 80018e0:	20000218 	.word	0x20000218
 80018e4:	d2f1a9fc 	.word	0xd2f1a9fc
 80018e8:	3f50624d 	.word	0x3f50624d
 80018ec:	00000000 	.word	0x00000000

080018f0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80018f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018f4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80018f6:	4ba4      	ldr	r3, [pc, #656]	; (8001b88 <interupt_calFusion+0x298>)
 80018f8:	ed93 7a00 	vldr	s14, [r3]
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <interupt_calFusion+0x29c>)
 80018fe:	edd3 7a00 	vldr	s15, [r3]
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	4ba0      	ldr	r3, [pc, #640]	; (8001b88 <interupt_calFusion+0x298>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001910:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001914:	4b9e      	ldr	r3, [pc, #632]	; (8001b90 <interupt_calFusion+0x2a0>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800191e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001922:	4b9a      	ldr	r3, [pc, #616]	; (8001b8c <interupt_calFusion+0x29c>)
 8001924:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001928:	4b97      	ldr	r3, [pc, #604]	; (8001b88 <interupt_calFusion+0x298>)
 800192a:	ed93 7a00 	vldr	s14, [r3]
 800192e:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <interupt_calFusion+0x2a4>)
 8001930:	edd3 7a00 	vldr	s15, [r3]
 8001934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001938:	4b93      	ldr	r3, [pc, #588]	; (8001b88 <interupt_calFusion+0x298>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001942:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001946:	4b94      	ldr	r3, [pc, #592]	; (8001b98 <interupt_calFusion+0x2a8>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001954:	4b8f      	ldr	r3, [pc, #572]	; (8001b94 <interupt_calFusion+0x2a4>)
 8001956:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800195a:	4b90      	ldr	r3, [pc, #576]	; (8001b9c <interupt_calFusion+0x2ac>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fe1a 	bl	8000598 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <interupt_calFusion+0x29c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4618      	mov	r0, r3
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a383      	add	r3, pc, #524	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fcaa 	bl	80002dc <__adddf3>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f932 	bl	8000bf8 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4a81      	ldr	r2, [pc, #516]	; (8001b9c <interupt_calFusion+0x2ac>)
 8001998:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800199a:	4b81      	ldr	r3, [pc, #516]	; (8001ba0 <interupt_calFusion+0x2b0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fdfa 	bl	8000598 <__aeabi_f2d>
 80019a4:	4604      	mov	r4, r0
 80019a6:	460d      	mov	r5, r1
 80019a8:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <interupt_calFusion+0x2a4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdf3 	bl	8000598 <__aeabi_f2d>
 80019b2:	a373      	add	r3, pc, #460	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 80019b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b8:	f7fe fe46 	bl	8000648 <__aeabi_dmul>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4620      	mov	r0, r4
 80019c2:	4629      	mov	r1, r5
 80019c4:	f7fe fc8a 	bl	80002dc <__adddf3>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4610      	mov	r0, r2
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff f912 	bl	8000bf8 <__aeabi_d2f>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a72      	ldr	r2, [pc, #456]	; (8001ba0 <interupt_calFusion+0x2b0>)
 80019d8:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 80019da:	4b6b      	ldr	r3, [pc, #428]	; (8001b88 <interupt_calFusion+0x298>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdda 	bl	8000598 <__aeabi_f2d>
 80019e4:	4604      	mov	r4, r0
 80019e6:	460d      	mov	r5, r1
 80019e8:	4b6e      	ldr	r3, [pc, #440]	; (8001ba4 <interupt_calFusion+0x2b4>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdd3 	bl	8000598 <__aeabi_f2d>
 80019f2:	4680      	mov	r8, r0
 80019f4:	4689      	mov	r9, r1
 80019f6:	4b6c      	ldr	r3, [pc, #432]	; (8001ba8 <interupt_calFusion+0x2b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7fe fdcc 	bl	8000598 <__aeabi_f2d>
 8001a00:	a35f      	add	r3, pc, #380	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a06:	f7fe fe1f 	bl	8000648 <__aeabi_dmul>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	4640      	mov	r0, r8
 8001a10:	4649      	mov	r1, r9
 8001a12:	f7fe fc63 	bl	80002dc <__adddf3>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f7fe fe13 	bl	8000648 <__aeabi_dmul>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4614      	mov	r4, r2
 8001a28:	461d      	mov	r5, r3
 8001a2a:	4b57      	ldr	r3, [pc, #348]	; (8001b88 <interupt_calFusion+0x298>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001a34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a38:	4b55      	ldr	r3, [pc, #340]	; (8001b90 <interupt_calFusion+0x2a0>)
 8001a3a:	edd3 7a00 	vldr	s15, [r3]
 8001a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a42:	ee17 0a90 	vmov	r0, s15
 8001a46:	f7fe fda7 	bl	8000598 <__aeabi_f2d>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4620      	mov	r0, r4
 8001a50:	4629      	mov	r1, r5
 8001a52:	f7fe fc43 	bl	80002dc <__adddf3>
 8001a56:	4602      	mov	r2, r0
 8001a58:	460b      	mov	r3, r1
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	f7ff f8cb 	bl	8000bf8 <__aeabi_d2f>
 8001a62:	4603      	mov	r3, r0
 8001a64:	4a4f      	ldr	r2, [pc, #316]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001a66:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001a68:	4b47      	ldr	r3, [pc, #284]	; (8001b88 <interupt_calFusion+0x298>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd93 	bl	8000598 <__aeabi_f2d>
 8001a72:	4604      	mov	r4, r0
 8001a74:	460d      	mov	r5, r1
 8001a76:	4b4b      	ldr	r3, [pc, #300]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7fe fd8c 	bl	8000598 <__aeabi_f2d>
 8001a80:	4680      	mov	r8, r0
 8001a82:	4689      	mov	r9, r1
 8001a84:	4b48      	ldr	r3, [pc, #288]	; (8001ba8 <interupt_calFusion+0x2b8>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd85 	bl	8000598 <__aeabi_f2d>
 8001a8e:	a33c      	add	r3, pc, #240	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a94:	f7fe fdd8 	bl	8000648 <__aeabi_dmul>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	4640      	mov	r0, r8
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	f7fe fc1c 	bl	80002dc <__adddf3>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fdcc 	bl	8000648 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4614      	mov	r4, r2
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <interupt_calFusion+0x298>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <interupt_calFusion+0x2a8>)
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	ee17 0a90 	vmov	r0, s15
 8001ad4:	f7fe fd60 	bl	8000598 <__aeabi_f2d>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4620      	mov	r0, r4
 8001ade:	4629      	mov	r1, r5
 8001ae0:	f7fe fbfc 	bl	80002dc <__adddf3>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f884 	bl	8000bf8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4a2e      	ldr	r2, [pc, #184]	; (8001bac <interupt_calFusion+0x2bc>)
 8001af4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001af6:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <interupt_calFusion+0x2c0>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd4c 	bl	8000598 <__aeabi_f2d>
 8001b00:	4604      	mov	r4, r0
 8001b02:	460d      	mov	r5, r1
 8001b04:	4b27      	ldr	r3, [pc, #156]	; (8001ba4 <interupt_calFusion+0x2b4>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7fe fd45 	bl	8000598 <__aeabi_f2d>
 8001b0e:	a31c      	add	r3, pc, #112	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd98 	bl	8000648 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	4629      	mov	r1, r5
 8001b20:	f7fe fbdc 	bl	80002dc <__adddf3>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4610      	mov	r0, r2
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	f7ff f864 	bl	8000bf8 <__aeabi_d2f>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a1f      	ldr	r2, [pc, #124]	; (8001bb0 <interupt_calFusion+0x2c0>)
 8001b34:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 8001b36:	4b1f      	ldr	r3, [pc, #124]	; (8001bb4 <interupt_calFusion+0x2c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd2c 	bl	8000598 <__aeabi_f2d>
 8001b40:	4604      	mov	r4, r0
 8001b42:	460d      	mov	r5, r1
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <interupt_calFusion+0x2bc>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd25 	bl	8000598 <__aeabi_f2d>
 8001b4e:	a30c      	add	r3, pc, #48	; (adr r3, 8001b80 <interupt_calFusion+0x290>)
 8001b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b54:	f7fe fd78 	bl	8000648 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fbbc 	bl	80002dc <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f7ff f844 	bl	8000bf8 <__aeabi_d2f>
 8001b70:	4603      	mov	r3, r0
 8001b72:	4a10      	ldr	r2, [pc, #64]	; (8001bb4 <interupt_calFusion+0x2c4>)
 8001b74:	6013      	str	r3, [r2, #0]

}
 8001b76:	bf00      	nop
 8001b78:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b7c:	f3af 8000 	nop.w
 8001b80:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b84:	3f50624d 	.word	0x3f50624d
 8001b88:	20000260 	.word	0x20000260
 8001b8c:	20000238 	.word	0x20000238
 8001b90:	20000228 	.word	0x20000228
 8001b94:	2000023c 	.word	0x2000023c
 8001b98:	2000022c 	.word	0x2000022c
 8001b9c:	20000230 	.word	0x20000230
 8001ba0:	20000234 	.word	0x20000234
 8001ba4:	20000258 	.word	0x20000258
 8001ba8:	20000284 	.word	0x20000284
 8001bac:	2000025c 	.word	0x2000025c
 8001bb0:	20000250 	.word	0x20000250
 8001bb4:	20000254 	.word	0x20000254

08001bb8 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
	int s = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001bc2:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <reset_gyro+0xfc>)
 8001bc4:	f04f 0200 	mov.w	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001bca:	4b3b      	ldr	r3, [pc, #236]	; (8001cb8 <reset_gyro+0x100>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	607b      	str	r3, [r7, #4]
 8001bd6:	e026      	b.n	8001c26 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001bd8:	4b38      	ldr	r3, [pc, #224]	; (8001cbc <reset_gyro+0x104>)
 8001bda:	ed93 7a02 	vldr	s14, [r3, #8]
 8001bde:	4b36      	ldr	r3, [pc, #216]	; (8001cb8 <reset_gyro+0x100>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	4b33      	ldr	r3, [pc, #204]	; (8001cb8 <reset_gyro+0x100>)
 8001bea:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001bee:	4b33      	ldr	r3, [pc, #204]	; (8001cbc <reset_gyro+0x104>)
 8001bf0:	ed93 7a00 	vldr	s14, [r3]
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <reset_gyro+0x108>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfe:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <reset_gyro+0x108>)
 8001c00:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 8001c04:	4b2d      	ldr	r3, [pc, #180]	; (8001cbc <reset_gyro+0x104>)
 8001c06:	ed93 7a04 	vldr	s14, [r3, #16]
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	; (8001cc4 <reset_gyro+0x10c>)
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <reset_gyro+0x10c>)
 8001c16:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	f006 ff98 	bl	8008b50 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3301      	adds	r3, #1
 8001c24:	607b      	str	r3, [r7, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c2c:	ddd4      	ble.n	8001bd8 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001c2e:	4b22      	ldr	r3, [pc, #136]	; (8001cb8 <reset_gyro+0x100>)
 8001c30:	ed93 7a00 	vldr	s14, [r3]
 8001c34:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001cc8 <reset_gyro+0x110>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	4b1e      	ldr	r3, [pc, #120]	; (8001cb8 <reset_gyro+0x100>)
 8001c3e:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <reset_gyro+0x108>)
 8001c44:	ed93 7a00 	vldr	s14, [r3]
 8001c48:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001cc8 <reset_gyro+0x110>
 8001c4c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c50:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <reset_gyro+0x108>)
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001c56:	4b1b      	ldr	r3, [pc, #108]	; (8001cc4 <reset_gyro+0x10c>)
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001cc8 <reset_gyro+0x110>
 8001c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c64:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <reset_gyro+0x10c>)
 8001c66:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 8001c6a:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <reset_gyro+0xfc>)
 8001c6c:	f04f 0200 	mov.w	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001c72:	4b16      	ldr	r3, [pc, #88]	; (8001ccc <reset_gyro+0x114>)
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <reset_gyro+0x118>)
 8001c7c:	f04f 0200 	mov.w	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001c82:	4b14      	ldr	r3, [pc, #80]	; (8001cd4 <reset_gyro+0x11c>)
 8001c84:	f04f 0200 	mov.w	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	607b      	str	r3, [r7, #4]
 8001c8e:	e009      	b.n	8001ca4 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001c90:	4a11      	ldr	r2, [pc, #68]	; (8001cd8 <reset_gyro+0x120>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b09      	cmp	r3, #9
 8001ca8:	ddf2      	ble.n	8001c90 <reset_gyro+0xd8>
	}
}
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	20000268 	.word	0x20000268
 8001cb8:	2000028c 	.word	0x2000028c
 8001cbc:	200006f0 	.word	0x200006f0
 8001cc0:	20000288 	.word	0x20000288
 8001cc4:	20000290 	.word	0x20000290
 8001cc8:	447a0000 	.word	0x447a0000
 8001ccc:	20000270 	.word	0x20000270
 8001cd0:	2000027c 	.word	0x2000027c
 8001cd4:	20000280 	.word	0x20000280
 8001cd8:	20000294 	.word	0x20000294
 8001cdc:	00000000 	.word	0x00000000

08001ce0 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
	int j = 9;
 8001ce6:	2309      	movs	r3, #9
 8001ce8:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001cea:	2309      	movs	r3, #9
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	e00d      	b.n	8001d0c <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	4aa6      	ldr	r2, [pc, #664]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001cf6:	009b      	lsls	r3, r3, #2
 8001cf8:	4413      	add	r3, r2
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	49a4      	ldr	r1, [pc, #656]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	440b      	add	r3, r1
 8001d04:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	dcee      	bgt.n	8001cf0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 8001d12:	4ba0      	ldr	r3, [pc, #640]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d14:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d18:	4b9f      	ldr	r3, [pc, #636]	; (8001f98 <interrupt_calGyro+0x2b8>)
 8001d1a:	edd3 7a00 	vldr	s15, [r3]
 8001d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fc37 	bl	8000598 <__aeabi_f2d>
 8001d2a:	a387      	add	r3, pc, #540	; (adr r3, 8001f48 <interrupt_calGyro+0x268>)
 8001d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d30:	f7fe fc8a 	bl	8000648 <__aeabi_dmul>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	a384      	add	r3, pc, #528	; (adr r3, 8001f50 <interrupt_calGyro+0x270>)
 8001d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d42:	f7fe fc81 	bl	8000648 <__aeabi_dmul>
 8001d46:	4602      	mov	r2, r0
 8001d48:	460b      	mov	r3, r1
 8001d4a:	4610      	mov	r0, r2
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	a382      	add	r3, pc, #520	; (adr r3, 8001f58 <interrupt_calGyro+0x278>)
 8001d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d54:	f7fe fda2 	bl	800089c <__aeabi_ddiv>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe ff4a 	bl	8000bf8 <__aeabi_d2f>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a8a      	ldr	r2, [pc, #552]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001d68:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 8001d6a:	4b89      	ldr	r3, [pc, #548]	; (8001f90 <interrupt_calGyro+0x2b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a8b      	ldr	r2, [pc, #556]	; (8001f9c <interrupt_calGyro+0x2bc>)
 8001d70:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001d72:	4b88      	ldr	r3, [pc, #544]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a8a      	ldr	r2, [pc, #552]	; (8001fa0 <interrupt_calGyro+0x2c0>)
 8001d78:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 8001d7a:	4b86      	ldr	r3, [pc, #536]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001d7c:	ed93 7a00 	vldr	s14, [r3]
 8001d80:	4b88      	ldr	r3, [pc, #544]	; (8001fa4 <interrupt_calGyro+0x2c4>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	4b87      	ldr	r3, [pc, #540]	; (8001fa8 <interrupt_calGyro+0x2c8>)
 8001d8c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001d90:	4b86      	ldr	r3, [pc, #536]	; (8001fac <interrupt_calGyro+0x2cc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbff 	bl	8000598 <__aeabi_f2d>
 8001d9a:	4604      	mov	r4, r0
 8001d9c:	460d      	mov	r5, r1
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <interrupt_calGyro+0x2bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbf8 	bl	8000598 <__aeabi_f2d>
 8001da8:	a36d      	add	r3, pc, #436	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dae:	f7fe fc4b 	bl	8000648 <__aeabi_dmul>
 8001db2:	4602      	mov	r2, r0
 8001db4:	460b      	mov	r3, r1
 8001db6:	4620      	mov	r0, r4
 8001db8:	4629      	mov	r1, r5
 8001dba:	f7fe fa8f 	bl	80002dc <__adddf3>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	4610      	mov	r0, r2
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	f7fe ff17 	bl	8000bf8 <__aeabi_d2f>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a77      	ldr	r2, [pc, #476]	; (8001fac <interrupt_calGyro+0x2cc>)
 8001dce:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001dd0:	4b77      	ldr	r3, [pc, #476]	; (8001fb0 <interrupt_calGyro+0x2d0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fbdf 	bl	8000598 <__aeabi_f2d>
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <interrupt_calGyro+0x2c4>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dee:	ee17 0a90 	vmov	r0, s15
 8001df2:	f7fe fbd1 	bl	8000598 <__aeabi_f2d>
 8001df6:	a35a      	add	r3, pc, #360	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc24 	bl	8000648 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4620      	mov	r0, r4
 8001e06:	4629      	mov	r1, r5
 8001e08:	f7fe fa68 	bl	80002dc <__adddf3>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f7fe fef0 	bl	8000bf8 <__aeabi_d2f>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	4a65      	ldr	r2, [pc, #404]	; (8001fb0 <interrupt_calGyro+0x2d0>)
 8001e1c:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001e1e:	4b5d      	ldr	r3, [pc, #372]	; (8001f94 <interrupt_calGyro+0x2b4>)
 8001e20:	ed93 7a04 	vldr	s14, [r3, #16]
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <interrupt_calGyro+0x2d4>)
 8001e26:	edd3 7a00 	vldr	s15, [r3]
 8001e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fbb1 	bl	8000598 <__aeabi_f2d>
 8001e36:	a34c      	add	r3, pc, #304	; (adr r3, 8001f68 <interrupt_calGyro+0x288>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fc04 	bl	8000648 <__aeabi_dmul>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	a349      	add	r3, pc, #292	; (adr r3, 8001f70 <interrupt_calGyro+0x290>)
 8001e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4e:	f7fe fbfb 	bl	8000648 <__aeabi_dmul>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4610      	mov	r0, r2
 8001e58:	4619      	mov	r1, r3
 8001e5a:	a347      	add	r3, pc, #284	; (adr r3, 8001f78 <interrupt_calGyro+0x298>)
 8001e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e60:	f7fe fd1c 	bl	800089c <__aeabi_ddiv>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4610      	mov	r0, r2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	4b51      	ldr	r3, [pc, #324]	; (8001fb8 <interrupt_calGyro+0x2d8>)
 8001e72:	f7fe fbe9 	bl	8000648 <__aeabi_dmul>
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	a340      	add	r3, pc, #256	; (adr r3, 8001f80 <interrupt_calGyro+0x2a0>)
 8001e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e84:	f7fe fd0a 	bl	800089c <__aeabi_ddiv>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4610      	mov	r0, r2
 8001e8e:	4619      	mov	r1, r3
 8001e90:	f04f 0200 	mov.w	r2, #0
 8001e94:	4b49      	ldr	r3, [pc, #292]	; (8001fbc <interrupt_calGyro+0x2dc>)
 8001e96:	f7fe fbd7 	bl	8000648 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	a339      	add	r3, pc, #228	; (adr r3, 8001f88 <interrupt_calGyro+0x2a8>)
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f7fe fbce 	bl	8000648 <__aeabi_dmul>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f7fe fea0 	bl	8000bf8 <__aeabi_d2f>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4a41      	ldr	r2, [pc, #260]	; (8001fc0 <interrupt_calGyro+0x2e0>)
 8001ebc:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001ebe:	4b41      	ldr	r3, [pc, #260]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb68 	bl	8000598 <__aeabi_f2d>
 8001ec8:	4604      	mov	r4, r0
 8001eca:	460d      	mov	r5, r1
 8001ecc:	4b3c      	ldr	r3, [pc, #240]	; (8001fc0 <interrupt_calGyro+0x2e0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb61 	bl	8000598 <__aeabi_f2d>
 8001ed6:	a322      	add	r3, pc, #136	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fbb4 	bl	8000648 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4620      	mov	r0, r4
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	f7fe f9f8 	bl	80002dc <__adddf3>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fe80 	bl	8000bf8 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4a32      	ldr	r2, [pc, #200]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001efc:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <interrupt_calGyro+0x2e8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb48 	bl	8000598 <__aeabi_f2d>
 8001f08:	4604      	mov	r4, r0
 8001f0a:	460d      	mov	r5, r1
 8001f0c:	4b2d      	ldr	r3, [pc, #180]	; (8001fc4 <interrupt_calGyro+0x2e4>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7fe fb41 	bl	8000598 <__aeabi_f2d>
 8001f16:	a312      	add	r3, pc, #72	; (adr r3, 8001f60 <interrupt_calGyro+0x280>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb94 	bl	8000648 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4620      	mov	r0, r4
 8001f26:	4629      	mov	r1, r5
 8001f28:	f7fe f9d8 	bl	80002dc <__adddf3>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4610      	mov	r0, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	f7fe fe60 	bl	8000bf8 <__aeabi_d2f>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4a23      	ldr	r2, [pc, #140]	; (8001fc8 <interrupt_calGyro+0x2e8>)
 8001f3c:	6013      	str	r3, [r2, #0]




}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bdb0      	pop	{r4, r5, r7, pc}
 8001f46:	bf00      	nop
 8001f48:	70a3d70a 	.word	0x70a3d70a
 8001f4c:	3fef0a3d 	.word	0x3fef0a3d
 8001f50:	00000000 	.word	0x00000000
 8001f54:	40acd400 	.word	0x40acd400
 8001f58:	00000000 	.word	0x00000000
 8001f5c:	40ac2000 	.word	0x40ac2000
 8001f60:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f64:	3f50624d 	.word	0x3f50624d
 8001f68:	0fcf80dc 	.word	0x0fcf80dc
 8001f6c:	3ff0a423 	.word	0x3ff0a423
 8001f70:	00000000 	.word	0x00000000
 8001f74:	4078c000 	.word	0x4078c000
 8001f78:	00000000 	.word	0x00000000
 8001f7c:	4077d000 	.word	0x4077d000
 8001f80:	00000000 	.word	0x00000000
 8001f84:	407a7000 	.word	0x407a7000
 8001f88:	3a92a305 	.word	0x3a92a305
 8001f8c:	40239d01 	.word	0x40239d01
 8001f90:	20000294 	.word	0x20000294
 8001f94:	200006f0 	.word	0x200006f0
 8001f98:	2000028c 	.word	0x2000028c
 8001f9c:	2000026c 	.word	0x2000026c
 8001fa0:	20000274 	.word	0x20000274
 8001fa4:	20000288 	.word	0x20000288
 8001fa8:	20000278 	.word	0x20000278
 8001fac:	20000268 	.word	0x20000268
 8001fb0:	20000270 	.word	0x20000270
 8001fb4:	20000290 	.word	0x20000290
 8001fb8:	40790000 	.word	0x40790000
 8001fbc:	408f4000 	.word	0x408f4000
 8001fc0:	20000284 	.word	0x20000284
 8001fc4:	2000027c 	.word	0x2000027c
 8001fc8:	20000280 	.word	0x20000280
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	607b      	str	r3, [r7, #4]
 8001fda:	e00f      	b.n	8001ffc <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001fdc:	f006 fb5c 	bl	8008698 <pl_getbatt>
 8001fe0:	eef0 7a40 	vmov.f32	s15, s0
 8001fe4:	4a34      	ldr	r2, [pc, #208]	; (80020b8 <battcheak+0xe8>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ff0:	200a      	movs	r0, #10
 8001ff2:	f006 fd69 	bl	8008ac8 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b13      	cmp	r3, #19
 8002000:	ddec      	ble.n	8001fdc <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <battcheak+0xec>)
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 800200a:	2300      	movs	r3, #0
 800200c:	607b      	str	r3, [r7, #4]
 800200e:	e010      	b.n	8002032 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8002010:	4a29      	ldr	r2, [pc, #164]	; (80020b8 <battcheak+0xe8>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	4413      	add	r3, r2
 8002018:	ed93 7a00 	vldr	s14, [r3]
 800201c:	4b27      	ldr	r3, [pc, #156]	; (80020bc <battcheak+0xec>)
 800201e:	edd3 7a00 	vldr	s15, [r3]
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	4b25      	ldr	r3, [pc, #148]	; (80020bc <battcheak+0xec>)
 8002028:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b13      	cmp	r3, #19
 8002036:	ddeb      	ble.n	8002010 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <battcheak+0xec>)
 800203a:	ed93 7a00 	vldr	s14, [r3]
 800203e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002042:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002046:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <battcheak+0xec>)
 8002048:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 800204c:	4b1b      	ldr	r3, [pc, #108]	; (80020bc <battcheak+0xec>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe faa1 	bl	8000598 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4819      	ldr	r0, [pc, #100]	; (80020c0 <battcheak+0xf0>)
 800205c:	f01f fa5a 	bl	8021514 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <battcheak+0xec>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa97 	bl	8000598 <__aeabi_f2d>
 800206a:	a311      	add	r3, pc, #68	; (adr r3, 80020b0 <battcheak+0xe0>)
 800206c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002070:	f7fe fd66 	bl	8000b40 <__aeabi_dcmple>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d100      	bne.n	800207c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 800207a:	e014      	b.n	80020a6 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 800207c:	2001      	movs	r0, #1
 800207e:	f005 fda7 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8002082:	2001      	movs	r0, #1
 8002084:	f005 fdb6 	bl	8007bf4 <pl_l_blue_LED>
		wait_ms(500);
 8002088:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800208c:	f006 fd1c 	bl	8008ac8 <wait_ms>
		pl_r_blue_LED(OFF);
 8002090:	2000      	movs	r0, #0
 8002092:	f005 fd9d 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8002096:	2000      	movs	r0, #0
 8002098:	f005 fdac 	bl	8007bf4 <pl_l_blue_LED>
		wait_ms(500);
 800209c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80020a0:	f006 fd12 	bl	8008ac8 <wait_ms>
		pl_r_blue_LED(ON);
 80020a4:	e7ea      	b.n	800207c <battcheak+0xac>
}
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	f3af 8000 	nop.w
 80020b0:	9999999a 	.word	0x9999999a
 80020b4:	400d9999 	.word	0x400d9999
 80020b8:	20000488 	.word	0x20000488
 80020bc:	200004d8 	.word	0x200004d8
 80020c0:	08024e98 	.word	0x08024e98

080020c4 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 80020ca:	f006 fc83 	bl	80089d4 <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 80020ce:	2313      	movs	r3, #19
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	e037      	b.n	8002144 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4a56      	ldr	r2, [pc, #344]	; (8002234 <interupt_calSensor+0x170>)
 80020da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020de:	4955      	ldr	r1, [pc, #340]	; (8002234 <interupt_calSensor+0x170>)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3b01      	subs	r3, #1
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <interupt_calSensor+0x170>)
 80020ec:	3314      	adds	r3, #20
 80020ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80020f2:	4950      	ldr	r1, [pc, #320]	; (8002234 <interupt_calSensor+0x170>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3314      	adds	r3, #20
 80020f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3b01      	subs	r3, #1
 8002100:	4a4c      	ldr	r2, [pc, #304]	; (8002234 <interupt_calSensor+0x170>)
 8002102:	3328      	adds	r3, #40	; 0x28
 8002104:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002108:	494a      	ldr	r1, [pc, #296]	; (8002234 <interupt_calSensor+0x170>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3328      	adds	r3, #40	; 0x28
 800210e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3b01      	subs	r3, #1
 8002116:	4a47      	ldr	r2, [pc, #284]	; (8002234 <interupt_calSensor+0x170>)
 8002118:	333c      	adds	r3, #60	; 0x3c
 800211a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800211e:	4945      	ldr	r1, [pc, #276]	; (8002234 <interupt_calSensor+0x170>)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	333c      	adds	r3, #60	; 0x3c
 8002124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3b01      	subs	r3, #1
 800212c:	4a41      	ldr	r2, [pc, #260]	; (8002234 <interupt_calSensor+0x170>)
 800212e:	3350      	adds	r3, #80	; 0x50
 8002130:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002134:	493f      	ldr	r1, [pc, #252]	; (8002234 <interupt_calSensor+0x170>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3350      	adds	r3, #80	; 0x50
 800213a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	3b01      	subs	r3, #1
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2b00      	cmp	r3, #0
 8002148:	dcc4      	bgt.n	80020d4 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 800214a:	4b3b      	ldr	r3, [pc, #236]	; (8002238 <interupt_calSensor+0x174>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	4b3a      	ldr	r3, [pc, #232]	; (800223c <interupt_calSensor+0x178>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	4a37      	ldr	r2, [pc, #220]	; (8002234 <interupt_calSensor+0x170>)
 8002158:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 800215a:	4b37      	ldr	r3, [pc, #220]	; (8002238 <interupt_calSensor+0x174>)
 800215c:	885b      	ldrh	r3, [r3, #2]
 800215e:	461a      	mov	r2, r3
 8002160:	4b36      	ldr	r3, [pc, #216]	; (800223c <interupt_calSensor+0x178>)
 8002162:	885b      	ldrh	r3, [r3, #2]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a33      	ldr	r2, [pc, #204]	; (8002234 <interupt_calSensor+0x170>)
 8002168:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 800216a:	4b33      	ldr	r3, [pc, #204]	; (8002238 <interupt_calSensor+0x174>)
 800216c:	889b      	ldrh	r3, [r3, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	4b32      	ldr	r3, [pc, #200]	; (800223c <interupt_calSensor+0x178>)
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	4a2f      	ldr	r2, [pc, #188]	; (8002234 <interupt_calSensor+0x170>)
 8002178:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 800217c:	4b2e      	ldr	r3, [pc, #184]	; (8002238 <interupt_calSensor+0x174>)
 800217e:	88db      	ldrh	r3, [r3, #6]
 8002180:	461a      	mov	r2, r3
 8002182:	4b2e      	ldr	r3, [pc, #184]	; (800223c <interupt_calSensor+0x178>)
 8002184:	88db      	ldrh	r3, [r3, #6]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <interupt_calSensor+0x170>)
 800218a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 800218e:	4b2a      	ldr	r3, [pc, #168]	; (8002238 <interupt_calSensor+0x174>)
 8002190:	891b      	ldrh	r3, [r3, #8]
 8002192:	461a      	mov	r2, r3
 8002194:	4b29      	ldr	r3, [pc, #164]	; (800223c <interupt_calSensor+0x178>)
 8002196:	891b      	ldrh	r3, [r3, #8]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <interupt_calSensor+0x170>)
 800219c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	e03d      	b.n	8002222 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 80021a6:	4923      	ldr	r1, [pc, #140]	; (8002234 <interupt_calSensor+0x170>)
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	4613      	mov	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4413      	add	r3, r2
 80021b0:	011b      	lsls	r3, r3, #4
 80021b2:	440b      	add	r3, r1
 80021b4:	6819      	ldr	r1, [r3, #0]
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <interupt_calSensor+0x170>)
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	4403      	add	r3, r0
 80021c4:	332c      	adds	r3, #44	; 0x2c
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	1aca      	subs	r2, r1, r3
 80021ca:	491d      	ldr	r1, [pc, #116]	; (8002240 <interupt_calSensor+0x17c>)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 80021d2:	4918      	ldr	r1, [pc, #96]	; (8002234 <interupt_calSensor+0x170>)
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	440b      	add	r3, r1
 80021e0:	6819      	ldr	r1, [r3, #0]
 80021e2:	4814      	ldr	r0, [pc, #80]	; (8002234 <interupt_calSensor+0x170>)
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	4413      	add	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	4403      	add	r3, r0
 80021f0:	3304      	adds	r3, #4
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4419      	add	r1, r3
 80021f6:	480f      	ldr	r0, [pc, #60]	; (8002234 <interupt_calSensor+0x170>)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	011b      	lsls	r3, r3, #4
 8002202:	4403      	add	r3, r0
 8002204:	3308      	adds	r3, #8
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	440b      	add	r3, r1
 800220a:	4a0e      	ldr	r2, [pc, #56]	; (8002244 <interupt_calSensor+0x180>)
 800220c:	fb82 1203 	smull	r1, r2, r2, r3
 8002210:	17db      	asrs	r3, r3, #31
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	490c      	ldr	r1, [pc, #48]	; (8002248 <interupt_calSensor+0x184>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3301      	adds	r3, #1
 8002220:	607b      	str	r3, [r7, #4]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b04      	cmp	r3, #4
 8002226:	ddbe      	ble.n	80021a6 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8002228:	bf00      	nop
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002bc 	.word	0x200002bc
 8002238:	20000718 	.word	0x20000718
 800223c:	20000724 	.word	0x20000724
 8002240:	2000044c 	.word	0x2000044c
 8002244:	55555556 	.word	0x55555556
 8002248:	20000474 	.word	0x20000474

0800224c <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0

	modeacc = 0;
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <Control_mode_Init+0x28>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <Control_mode_Init+0x2c>)
 8002258:	2200      	movs	r2, #0
 800225a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <Control_mode_Init+0x30>)
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <Control_mode_Init+0x34>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]

}
 800226a:	bf00      	nop
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	20000534 	.word	0x20000534
 8002278:	20000811 	.word	0x20000811
 800227c:	2000080c 	.word	0x2000080c
 8002280:	20000535 	.word	0x20000535

08002284 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	ed87 0a03 	vstr	s0, [r7, #12]
 800228e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8002296:	edd7 7a03 	vldr	s15, [r7, #12]
 800229a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a2:	db14      	blt.n	80022ce <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f006 f92d 	bl	8008504 <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 80022aa:	4b3d      	ldr	r3, [pc, #244]	; (80023a0 <get_duty+0x11c>)
 80022ac:	ed93 7a00 	vldr	s14, [r3]
 80022b0:	edd7 6a03 	vldr	s13, [r7, #12]
 80022b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b8:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80023a4 <get_duty+0x120>
 80022bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022c4:	ee17 2a90 	vmov	r2, s15
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	e015      	b.n	80022fa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 80022ce:	2002      	movs	r0, #2
 80022d0:	f006 f918 	bl	8008504 <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 80022d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80022d8:	eef1 6a67 	vneg.f32	s13, s15
 80022dc:	4b30      	ldr	r3, [pc, #192]	; (80023a0 <get_duty+0x11c>)
 80022de:	ed93 7a00 	vldr	s14, [r3]
 80022e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80023a4 <get_duty+0x120>
 80022ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022f2:	ee17 2a90 	vmov	r2, s15
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 80022fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80022fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002306:	db14      	blt.n	8002332 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8002308:	2001      	movs	r0, #1
 800230a:	f006 f923 	bl	8008554 <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 800230e:	4b24      	ldr	r3, [pc, #144]	; (80023a0 <get_duty+0x11c>)
 8002310:	ed93 7a00 	vldr	s14, [r3]
 8002314:	edd7 6a02 	vldr	s13, [r7, #8]
 8002318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800231c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80023a4 <get_duty+0x120>
 8002320:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002324:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002328:	ee17 2a90 	vmov	r2, s15
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e015      	b.n	800235e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8002332:	2002      	movs	r0, #2
 8002334:	f006 f90e 	bl	8008554 <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8002338:	edd7 7a02 	vldr	s15, [r7, #8]
 800233c:	eef1 6a67 	vneg.f32	s13, s15
 8002340:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <get_duty+0x11c>)
 8002342:	ed93 7a00 	vldr	s14, [r3]
 8002346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800234a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80023a4 <get_duty+0x120>
 800234e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002352:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002356:	ee17 2a90 	vmov	r2, s15
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f240 628c 	movw	r2, #1676	; 0x68c
 8002376:	4293      	cmp	r3, r2
 8002378:	dd03      	ble.n	8002382 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f240 628d 	movw	r2, #1677	; 0x68d
 8002380:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f240 628c 	movw	r2, #1676	; 0x68c
 800238a:	4293      	cmp	r3, r2
 800238c:	dd03      	ble.n	8002396 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f240 628d 	movw	r2, #1677	; 0x68d
 8002394:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8002396:	bf00      	nop
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200004d8 	.word	0x200004d8
 80023a4:	44d1e000 	.word	0x44d1e000

080023a8 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 80023a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ac:	b08e      	sub	sp, #56	; 0x38
 80023ae:	af04      	add	r7, sp, #16
	int duty_L=0, duty_R=0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 80023b8:	f04f 0300 	mov.w	r3, #0
 80023bc:	627b      	str	r3, [r7, #36]	; 0x24
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 80023c4:	f04f 0300 	mov.w	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 80023d6:	4bd2      	ldr	r3, [pc, #840]	; (8002720 <interupt_DriveMotor+0x378>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d108      	bne.n	80023f0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 80023de:	4bd1      	ldr	r3, [pc, #836]	; (8002724 <interupt_DriveMotor+0x37c>)
 80023e0:	2204      	movs	r2, #4
 80023e2:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 80023e4:	4bd0      	ldr	r3, [pc, #832]	; (8002728 <interupt_DriveMotor+0x380>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80023ea:	4bd0      	ldr	r3, [pc, #832]	; (800272c <interupt_DriveMotor+0x384>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 80023f0:	4bcb      	ldr	r3, [pc, #812]	; (8002720 <interupt_DriveMotor+0x378>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	f040 8293 	bne.w	8002920 <interupt_DriveMotor+0x578>
		g_wallCut_mode=1;
 80023fa:	4bcc      	ldr	r3, [pc, #816]	; (800272c <interupt_DriveMotor+0x384>)
 80023fc:	2201      	movs	r2, #1
 80023fe:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002400:	4bcb      	ldr	r3, [pc, #812]	; (8002730 <interupt_DriveMotor+0x388>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	3301      	adds	r3, #1
 8002406:	4aca      	ldr	r2, [pc, #808]	; (8002730 <interupt_DriveMotor+0x388>)
 8002408:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800240a:	4bca      	ldr	r3, [pc, #808]	; (8002734 <interupt_DriveMotor+0x38c>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe f8c2 	bl	8000598 <__aeabi_f2d>
 8002414:	4604      	mov	r4, r0
 8002416:	460d      	mov	r5, r1
 8002418:	4bc6      	ldr	r3, [pc, #792]	; (8002734 <interupt_DriveMotor+0x38c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8bb 	bl	8000598 <__aeabi_f2d>
 8002422:	a3bb      	add	r3, pc, #748	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	f7fe f90e 	bl	8000648 <__aeabi_dmul>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4690      	mov	r8, r2
 8002432:	4699      	mov	r9, r3
 8002434:	4bbf      	ldr	r3, [pc, #764]	; (8002734 <interupt_DriveMotor+0x38c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	a3b4      	add	r3, pc, #720	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f7fe f900 	bl	8000648 <__aeabi_dmul>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4610      	mov	r0, r2
 800244e:	4619      	mov	r1, r3
 8002450:	a3af      	add	r3, pc, #700	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	f7fe f8f7 	bl	8000648 <__aeabi_dmul>
 800245a:	4602      	mov	r2, r0
 800245c:	460b      	mov	r3, r1
 800245e:	4610      	mov	r0, r2
 8002460:	4619      	mov	r1, r3
 8002462:	f04f 0200 	mov.w	r2, #0
 8002466:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800246a:	f7fe fa17 	bl	800089c <__aeabi_ddiv>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4640      	mov	r0, r8
 8002474:	4649      	mov	r1, r9
 8002476:	f7fd ff31 	bl	80002dc <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fd ff2b 	bl	80002dc <__adddf3>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f7fe fbb3 	bl	8000bf8 <__aeabi_d2f>
 8002492:	4603      	mov	r3, r0
 8002494:	4aa7      	ldr	r2, [pc, #668]	; (8002734 <interupt_DriveMotor+0x38c>)
 8002496:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002498:	4ba6      	ldr	r3, [pc, #664]	; (8002734 <interupt_DriveMotor+0x38c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe f87b 	bl	8000598 <__aeabi_f2d>
 80024a2:	4604      	mov	r4, r0
 80024a4:	460d      	mov	r5, r1
 80024a6:	4ba3      	ldr	r3, [pc, #652]	; (8002734 <interupt_DriveMotor+0x38c>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe f874 	bl	8000598 <__aeabi_f2d>
 80024b0:	a397      	add	r3, pc, #604	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f7fe f8c7 	bl	8000648 <__aeabi_dmul>
 80024ba:	4602      	mov	r2, r0
 80024bc:	460b      	mov	r3, r1
 80024be:	4620      	mov	r0, r4
 80024c0:	4629      	mov	r1, r5
 80024c2:	f7fd ff0b 	bl	80002dc <__adddf3>
 80024c6:	4602      	mov	r2, r0
 80024c8:	460b      	mov	r3, r1
 80024ca:	4610      	mov	r0, r2
 80024cc:	4619      	mov	r1, r3
 80024ce:	f7fe fb93 	bl	8000bf8 <__aeabi_d2f>
 80024d2:	4603      	mov	r3, r0
 80024d4:	4a97      	ldr	r2, [pc, #604]	; (8002734 <interupt_DriveMotor+0x38c>)
 80024d6:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024d8:	4b97      	ldr	r3, [pc, #604]	; (8002738 <interupt_DriveMotor+0x390>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fe f85b 	bl	8000598 <__aeabi_f2d>
 80024e2:	4604      	mov	r4, r0
 80024e4:	460d      	mov	r5, r1
 80024e6:	4b94      	ldr	r3, [pc, #592]	; (8002738 <interupt_DriveMotor+0x390>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe f854 	bl	8000598 <__aeabi_f2d>
 80024f0:	a387      	add	r3, pc, #540	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 80024f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f6:	f7fe f8a7 	bl	8000648 <__aeabi_dmul>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4690      	mov	r8, r2
 8002500:	4699      	mov	r9, r3
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <interupt_DriveMotor+0x390>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4618      	mov	r0, r3
 8002508:	f7fe f846 	bl	8000598 <__aeabi_f2d>
 800250c:	a380      	add	r3, pc, #512	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	f7fe f899 	bl	8000648 <__aeabi_dmul>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4610      	mov	r0, r2
 800251c:	4619      	mov	r1, r3
 800251e:	a37c      	add	r3, pc, #496	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002524:	f7fe f890 	bl	8000648 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4610      	mov	r0, r2
 800252e:	4619      	mov	r1, r3
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002538:	f7fe f9b0 	bl	800089c <__aeabi_ddiv>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4640      	mov	r0, r8
 8002542:	4649      	mov	r1, r9
 8002544:	f7fd feca 	bl	80002dc <__adddf3>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	4620      	mov	r0, r4
 800254e:	4629      	mov	r1, r5
 8002550:	f7fd fec4 	bl	80002dc <__adddf3>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4610      	mov	r0, r2
 800255a:	4619      	mov	r1, r3
 800255c:	f7fe fb4c 	bl	8000bf8 <__aeabi_d2f>
 8002560:	4603      	mov	r3, r0
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <interupt_DriveMotor+0x390>)
 8002564:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002566:	4b74      	ldr	r3, [pc, #464]	; (8002738 <interupt_DriveMotor+0x390>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe f814 	bl	8000598 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <interupt_DriveMotor+0x390>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe f80d 	bl	8000598 <__aeabi_f2d>
 800257e:	a364      	add	r3, pc, #400	; (adr r3, 8002710 <interupt_DriveMotor+0x368>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe f860 	bl	8000648 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4620      	mov	r0, r4
 800258e:	4629      	mov	r1, r5
 8002590:	f7fd fea4 	bl	80002dc <__adddf3>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4610      	mov	r0, r2
 800259a:	4619      	mov	r1, r3
 800259c:	f7fe fb2c 	bl	8000bf8 <__aeabi_d2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4a65      	ldr	r2, [pc, #404]	; (8002738 <interupt_DriveMotor+0x390>)
 80025a4:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 80025a6:	4b65      	ldr	r3, [pc, #404]	; (800273c <interupt_DriveMotor+0x394>)
 80025a8:	4a62      	ldr	r2, [pc, #392]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025aa:	9202      	str	r2, [sp, #8]
 80025ac:	466c      	mov	r4, sp
 80025ae:	f103 0210 	add.w	r2, r3, #16
 80025b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025b6:	e884 0003 	stmia.w	r4, {r0, r1}
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	f006 fc82 	bl	8008ec4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80025c0:	4b5c      	ldr	r3, [pc, #368]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025c2:	edd3 7a00 	vldr	s15, [r3]
 80025c6:	4b5c      	ldr	r3, [pc, #368]	; (8002738 <interupt_DriveMotor+0x390>)
 80025c8:	ed93 7a00 	vldr	s14, [r3]
 80025cc:	f107 020c 	add.w	r2, r7, #12
 80025d0:	f107 0310 	add.w	r3, r7, #16
 80025d4:	eef0 0a47 	vmov.f32	s1, s14
 80025d8:	eeb0 0a67 	vmov.f32	s0, s15
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 fe1a 	bl	8005218 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80025e4:	4b56      	ldr	r3, [pc, #344]	; (8002740 <interupt_DriveMotor+0x398>)
 80025e6:	ed93 7a00 	vldr	s14, [r3]
 80025ea:	4b56      	ldr	r3, [pc, #344]	; (8002744 <interupt_DriveMotor+0x39c>)
 80025ec:	edd3 7a00 	vldr	s15, [r3]
 80025f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025f4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80025f8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80025fc:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <interupt_DriveMotor+0x38c>)
 80025fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <interupt_DriveMotor+0x3a0>)
 8002604:	edd3 6a00 	vldr	s13, [r3]
 8002608:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <interupt_DriveMotor+0x390>)
 800260a:	ed93 6a01 	vldr	s12, [r3, #4]
 800260e:	1d3a      	adds	r2, r7, #4
 8002610:	f107 0308 	add.w	r3, r7, #8
 8002614:	eef0 1a46 	vmov.f32	s3, s12
 8002618:	eeb0 1a66 	vmov.f32	s2, s13
 800261c:	4611      	mov	r1, r2
 800261e:	eef0 0a67 	vmov.f32	s1, s15
 8002622:	eeb0 0a47 	vmov.f32	s0, s14
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fb4a 	bl	8004cc0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 800262c:	f003 f80c 	bl	8005648 <calWallConrol>
 8002630:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 8002634:	ed97 7a04 	vldr	s14, [r7, #16]
 8002638:	edd7 7a03 	vldr	s15, [r7, #12]
 800263c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002640:	edd7 7a07 	vldr	s15, [r7, #28]
 8002644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002648:	edd7 7a02 	vldr	s15, [r7, #8]
 800264c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002650:	edd7 7a01 	vldr	s15, [r7, #4]
 8002654:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002658:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 800265c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002660:	edd7 7a03 	vldr	s15, [r7, #12]
 8002664:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002668:	edd7 7a07 	vldr	s15, [r7, #28]
 800266c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002670:	edd7 7a02 	vldr	s15, [r7, #8]
 8002674:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002678:	edd7 7a01 	vldr	s15, [r7, #4]
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002684:	ed97 7a04 	vldr	s14, [r7, #16]
 8002688:	edd7 7a02 	vldr	s15, [r7, #8]
 800268c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002690:	ee17 0a90 	vmov	r0, s15
 8002694:	f7fd ff80 	bl	8000598 <__aeabi_f2d>
 8002698:	4604      	mov	r4, r0
 800269a:	460d      	mov	r5, r1
 800269c:	4b2b      	ldr	r3, [pc, #172]	; (800274c <interupt_DriveMotor+0x3a4>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd ff79 	bl	8000598 <__aeabi_f2d>
 80026a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002718 <interupt_DriveMotor+0x370>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ffcc 	bl	8000648 <__aeabi_dmul>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fe fa56 	bl	8000b68 <__aeabi_dcmpgt>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 808c 	beq.w	80027dc <interupt_DriveMotor+0x434>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80026c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026c6:	f7fd ff67 	bl	8000598 <__aeabi_f2d>
 80026ca:	4604      	mov	r4, r0
 80026cc:	460d      	mov	r5, r1
 80026ce:	4b1f      	ldr	r3, [pc, #124]	; (800274c <interupt_DriveMotor+0x3a4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff60 	bl	8000598 <__aeabi_f2d>
 80026d8:	a30f      	add	r3, pc, #60	; (adr r3, 8002718 <interupt_DriveMotor+0x370>)
 80026da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026de:	f7fd ffb3 	bl	8000648 <__aeabi_dmul>
 80026e2:	4602      	mov	r2, r0
 80026e4:	460b      	mov	r3, r1
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80026ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026f6:	ee17 0a90 	vmov	r0, s15
 80026fa:	f7fd ff4d 	bl	8000598 <__aeabi_f2d>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4640      	mov	r0, r8
 8002704:	4649      	mov	r1, r9
 8002706:	f7fd fde7 	bl	80002d8 <__aeabi_dsub>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	e01f      	b.n	8002750 <interupt_DriveMotor+0x3a8>
 8002710:	d2f1a9fc 	.word	0xd2f1a9fc
 8002714:	3f50624d 	.word	0x3f50624d
 8002718:	d916872b 	.word	0xd916872b
 800271c:	3feff7ce 	.word	0x3feff7ce
 8002720:	20000534 	.word	0x20000534
 8002724:	20000810 	.word	0x20000810
 8002728:	2000059c 	.word	0x2000059c
 800272c:	2000059e 	.word	0x2000059e
 8002730:	20000530 	.word	0x20000530
 8002734:	200004dc 	.word	0x200004dc
 8002738:	200004e8 	.word	0x200004e8
 800273c:	200004f4 	.word	0x200004f4
 8002740:	20000238 	.word	0x20000238
 8002744:	2000023c 	.word	0x2000023c
 8002748:	2000026c 	.word	0x2000026c
 800274c:	200004d8 	.word	0x200004d8
 8002750:	4620      	mov	r0, r4
 8002752:	4629      	mov	r1, r5
 8002754:	f7fd fdc2 	bl	80002dc <__adddf3>
 8002758:	4602      	mov	r2, r0
 800275a:	460b      	mov	r3, r1
 800275c:	4610      	mov	r0, r2
 800275e:	4619      	mov	r1, r3
 8002760:	f7fe fa4a 	bl	8000bf8 <__aeabi_d2f>
 8002764:	4603      	mov	r3, r0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002768:	6a38      	ldr	r0, [r7, #32]
 800276a:	f7fd ff15 	bl	8000598 <__aeabi_f2d>
 800276e:	4604      	mov	r4, r0
 8002770:	460d      	mov	r5, r1
 8002772:	4b19      	ldr	r3, [pc, #100]	; (80027d8 <interupt_DriveMotor+0x430>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7fd ff0e 	bl	8000598 <__aeabi_f2d>
 800277c:	a314      	add	r3, pc, #80	; (adr r3, 80027d0 <interupt_DriveMotor+0x428>)
 800277e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002782:	f7fd ff61 	bl	8000648 <__aeabi_dmul>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4690      	mov	r8, r2
 800278c:	4699      	mov	r9, r3
 800278e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002792:	edd7 7a02 	vldr	s15, [r7, #8]
 8002796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800279a:	ee17 0a90 	vmov	r0, s15
 800279e:	f7fd fefb 	bl	8000598 <__aeabi_f2d>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4640      	mov	r0, r8
 80027a8:	4649      	mov	r1, r9
 80027aa:	f7fd fd95 	bl	80002d8 <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4620      	mov	r0, r4
 80027b4:	4629      	mov	r1, r5
 80027b6:	f7fd fd91 	bl	80002dc <__adddf3>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	f7fe fa19 	bl	8000bf8 <__aeabi_d2f>
 80027c6:	4603      	mov	r3, r0
 80027c8:	623b      	str	r3, [r7, #32]
 80027ca:	e097      	b.n	80028fc <interupt_DriveMotor+0x554>
 80027cc:	f3af 8000 	nop.w
 80027d0:	d916872b 	.word	0xd916872b
 80027d4:	3feff7ce 	.word	0x3feff7ce
 80027d8:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80027dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80027e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e8:	ee17 0a90 	vmov	r0, s15
 80027ec:	f7fd fed4 	bl	8000598 <__aeabi_f2d>
 80027f0:	4604      	mov	r4, r0
 80027f2:	460d      	mov	r5, r1
 80027f4:	4bd0      	ldr	r3, [pc, #832]	; (8002b38 <interupt_DriveMotor+0x790>)
 80027f6:	edd3 7a00 	vldr	s15, [r3]
 80027fa:	eef1 7a67 	vneg.f32	s15, s15
 80027fe:	ee17 3a90 	vmov	r3, s15
 8002802:	4618      	mov	r0, r3
 8002804:	f7fd fec8 	bl	8000598 <__aeabi_f2d>
 8002808:	a3c7      	add	r3, pc, #796	; (adr r3, 8002b28 <interupt_DriveMotor+0x780>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd ff1b 	bl	8000648 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4620      	mov	r0, r4
 8002818:	4629      	mov	r1, r5
 800281a:	f7fe f987 	bl	8000b2c <__aeabi_dcmplt>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d06b      	beq.n	80028fc <interupt_DriveMotor+0x554>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002824:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002826:	f7fd feb7 	bl	8000598 <__aeabi_f2d>
 800282a:	4604      	mov	r4, r0
 800282c:	460d      	mov	r5, r1
 800282e:	4bc2      	ldr	r3, [pc, #776]	; (8002b38 <interupt_DriveMotor+0x790>)
 8002830:	edd3 7a00 	vldr	s15, [r3]
 8002834:	eef1 7a67 	vneg.f32	s15, s15
 8002838:	ee17 3a90 	vmov	r3, s15
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd feab 	bl	8000598 <__aeabi_f2d>
 8002842:	a3b9      	add	r3, pc, #740	; (adr r3, 8002b28 <interupt_DriveMotor+0x780>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fefe 	bl	8000648 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4690      	mov	r8, r2
 8002852:	4699      	mov	r9, r3
 8002854:	ed97 7a04 	vldr	s14, [r7, #16]
 8002858:	edd7 7a02 	vldr	s15, [r7, #8]
 800285c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002860:	ee17 0a90 	vmov	r0, s15
 8002864:	f7fd fe98 	bl	8000598 <__aeabi_f2d>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4640      	mov	r0, r8
 800286e:	4649      	mov	r1, r9
 8002870:	f7fd fd32 	bl	80002d8 <__aeabi_dsub>
 8002874:	4602      	mov	r2, r0
 8002876:	460b      	mov	r3, r1
 8002878:	4620      	mov	r0, r4
 800287a:	4629      	mov	r1, r5
 800287c:	f7fd fd2e 	bl	80002dc <__adddf3>
 8002880:	4602      	mov	r2, r0
 8002882:	460b      	mov	r3, r1
 8002884:	4610      	mov	r0, r2
 8002886:	4619      	mov	r1, r3
 8002888:	f7fe f9b6 	bl	8000bf8 <__aeabi_d2f>
 800288c:	4603      	mov	r3, r0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002890:	6a38      	ldr	r0, [r7, #32]
 8002892:	f7fd fe81 	bl	8000598 <__aeabi_f2d>
 8002896:	4604      	mov	r4, r0
 8002898:	460d      	mov	r5, r1
 800289a:	4ba7      	ldr	r3, [pc, #668]	; (8002b38 <interupt_DriveMotor+0x790>)
 800289c:	edd3 7a00 	vldr	s15, [r3]
 80028a0:	eef1 7a67 	vneg.f32	s15, s15
 80028a4:	ee17 3a90 	vmov	r3, s15
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7fd fe75 	bl	8000598 <__aeabi_f2d>
 80028ae:	a39e      	add	r3, pc, #632	; (adr r3, 8002b28 <interupt_DriveMotor+0x780>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	f7fd fec8 	bl	8000648 <__aeabi_dmul>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4690      	mov	r8, r2
 80028be:	4699      	mov	r9, r3
 80028c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80028c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028cc:	ee17 0a90 	vmov	r0, s15
 80028d0:	f7fd fe62 	bl	8000598 <__aeabi_f2d>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4640      	mov	r0, r8
 80028da:	4649      	mov	r1, r9
 80028dc:	f7fd fcfc 	bl	80002d8 <__aeabi_dsub>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4620      	mov	r0, r4
 80028e6:	4629      	mov	r1, r5
 80028e8:	f7fd fcf8 	bl	80002dc <__adddf3>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7fe f980 	bl	8000bf8 <__aeabi_d2f>
 80028f8:	4603      	mov	r3, r0
 80028fa:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80028fc:	f107 0214 	add.w	r2, r7, #20
 8002900:	f107 0318 	add.w	r3, r7, #24
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	edd7 0a08 	vldr	s1, [r7, #32]
 800290c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002910:	f7ff fcb8 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f005 fe5c 	bl	80085d8 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002920:	4b86      	ldr	r3, [pc, #536]	; (8002b3c <interupt_DriveMotor+0x794>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d004      	beq.n	8002932 <interupt_DriveMotor+0x58a>
 8002928:	4b84      	ldr	r3, [pc, #528]	; (8002b3c <interupt_DriveMotor+0x794>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	f040 828d 	bne.w	8002e4c <interupt_DriveMotor+0xaa4>
		g_WallControl_mode=0;
 8002932:	4b83      	ldr	r3, [pc, #524]	; (8002b40 <interupt_DriveMotor+0x798>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002938:	4b82      	ldr	r3, [pc, #520]	; (8002b44 <interupt_DriveMotor+0x79c>)
 800293a:	2200      	movs	r2, #0
 800293c:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 800293e:	4b82      	ldr	r3, [pc, #520]	; (8002b48 <interupt_DriveMotor+0x7a0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	4a80      	ldr	r2, [pc, #512]	; (8002b48 <interupt_DriveMotor+0x7a0>)
 8002946:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002948:	4b80      	ldr	r3, [pc, #512]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fd fe23 	bl	8000598 <__aeabi_f2d>
 8002952:	4604      	mov	r4, r0
 8002954:	460d      	mov	r5, r1
 8002956:	4b7d      	ldr	r3, [pc, #500]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd fe1c 	bl	8000598 <__aeabi_f2d>
 8002960:	a373      	add	r3, pc, #460	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002966:	f7fd fe6f 	bl	8000648 <__aeabi_dmul>
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	4690      	mov	r8, r2
 8002970:	4699      	mov	r9, r3
 8002972:	4b76      	ldr	r3, [pc, #472]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fd fe0e 	bl	8000598 <__aeabi_f2d>
 800297c:	a36c      	add	r3, pc, #432	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fe61 	bl	8000648 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	a368      	add	r3, pc, #416	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	f7fd fe58 	bl	8000648 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4610      	mov	r0, r2
 800299e:	4619      	mov	r1, r3
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80029a8:	f7fd ff78 	bl	800089c <__aeabi_ddiv>
 80029ac:	4602      	mov	r2, r0
 80029ae:	460b      	mov	r3, r1
 80029b0:	4640      	mov	r0, r8
 80029b2:	4649      	mov	r1, r9
 80029b4:	f7fd fc92 	bl	80002dc <__adddf3>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fd fc8c 	bl	80002dc <__adddf3>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4610      	mov	r0, r2
 80029ca:	4619      	mov	r1, r3
 80029cc:	f7fe f914 	bl	8000bf8 <__aeabi_d2f>
 80029d0:	4603      	mov	r3, r0
 80029d2:	4a5e      	ldr	r2, [pc, #376]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 80029d4:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80029d6:	4b5d      	ldr	r3, [pc, #372]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fddc 	bl	8000598 <__aeabi_f2d>
 80029e0:	4604      	mov	r4, r0
 80029e2:	460d      	mov	r5, r1
 80029e4:	4b59      	ldr	r3, [pc, #356]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fdd5 	bl	8000598 <__aeabi_f2d>
 80029ee:	a350      	add	r3, pc, #320	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 80029f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f4:	f7fd fe28 	bl	8000648 <__aeabi_dmul>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4620      	mov	r0, r4
 80029fe:	4629      	mov	r1, r5
 8002a00:	f7fd fc6c 	bl	80002dc <__adddf3>
 8002a04:	4602      	mov	r2, r0
 8002a06:	460b      	mov	r3, r1
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7fe f8f4 	bl	8000bf8 <__aeabi_d2f>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 8002a14:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a16:	4b4e      	ldr	r3, [pc, #312]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	4604      	mov	r4, r0
 8002a22:	460d      	mov	r5, r1
 8002a24:	4b4a      	ldr	r3, [pc, #296]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fdb5 	bl	8000598 <__aeabi_f2d>
 8002a2e:	a340      	add	r3, pc, #256	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a34:	f7fd fe08 	bl	8000648 <__aeabi_dmul>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4690      	mov	r8, r2
 8002a3e:	4699      	mov	r9, r3
 8002a40:	4b43      	ldr	r3, [pc, #268]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fd fda7 	bl	8000598 <__aeabi_f2d>
 8002a4a:	a339      	add	r3, pc, #228	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	f7fd fdfa 	bl	8000648 <__aeabi_dmul>
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4610      	mov	r0, r2
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	a334      	add	r3, pc, #208	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a62:	f7fd fdf1 	bl	8000648 <__aeabi_dmul>
 8002a66:	4602      	mov	r2, r0
 8002a68:	460b      	mov	r3, r1
 8002a6a:	4610      	mov	r0, r2
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 0200 	mov.w	r2, #0
 8002a72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a76:	f7fd ff11 	bl	800089c <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4640      	mov	r0, r8
 8002a80:	4649      	mov	r1, r9
 8002a82:	f7fd fc2b 	bl	80002dc <__adddf3>
 8002a86:	4602      	mov	r2, r0
 8002a88:	460b      	mov	r3, r1
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4629      	mov	r1, r5
 8002a8e:	f7fd fc25 	bl	80002dc <__adddf3>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f8ad 	bl	8000bf8 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002aa2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002aa4:	4b2a      	ldr	r3, [pc, #168]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	4604      	mov	r4, r0
 8002ab0:	460d      	mov	r5, r1
 8002ab2:	4b27      	ldr	r3, [pc, #156]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fd fd6e 	bl	8000598 <__aeabi_f2d>
 8002abc:	a31c      	add	r3, pc, #112	; (adr r3, 8002b30 <interupt_DriveMotor+0x788>)
 8002abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ac2:	f7fd fdc1 	bl	8000648 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4620      	mov	r0, r4
 8002acc:	4629      	mov	r1, r5
 8002ace:	f7fd fc05 	bl	80002dc <__adddf3>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	4619      	mov	r1, r3
 8002ada:	f7fe f88d 	bl	8000bf8 <__aeabi_d2f>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4a1b      	ldr	r2, [pc, #108]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002ae2:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002ae4:	4b1b      	ldr	r3, [pc, #108]	; (8002b54 <interupt_DriveMotor+0x7ac>)
 8002ae6:	4a1a      	ldr	r2, [pc, #104]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002ae8:	9202      	str	r2, [sp, #8]
 8002aea:	466c      	mov	r4, sp
 8002aec:	f103 0210 	add.w	r2, r3, #16
 8002af0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002af4:	e884 0003 	stmia.w	r4, {r0, r1}
 8002af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002afa:	f006 f9e3 	bl	8008ec4 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002afe:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <interupt_DriveMotor+0x7a4>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <interupt_DriveMotor+0x7a8>)
 8002b06:	ed93 7a00 	vldr	s14, [r3]
 8002b0a:	f107 020c 	add.w	r2, r7, #12
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	eef0 0a47 	vmov.f32	s1, s14
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	4611      	mov	r1, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 fb7b 	bl	8005218 <EncoderGyro_PID>
 8002b22:	e019      	b.n	8002b58 <interupt_DriveMotor+0x7b0>
 8002b24:	f3af 8000 	nop.w
 8002b28:	d916872b 	.word	0xd916872b
 8002b2c:	3feff7ce 	.word	0x3feff7ce
 8002b30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b34:	3f50624d 	.word	0x3f50624d
 8002b38:	200004d8 	.word	0x200004d8
 8002b3c:	20000534 	.word	0x20000534
 8002b40:	2000059c 	.word	0x2000059c
 8002b44:	2000059e 	.word	0x2000059e
 8002b48:	20000530 	.word	0x20000530
 8002b4c:	200004dc 	.word	0x200004dc
 8002b50:	200004e8 	.word	0x200004e8
 8002b54:	2000050c 	.word	0x2000050c
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002b58:	4b65      	ldr	r3, [pc, #404]	; (8002cf0 <interupt_DriveMotor+0x948>)
 8002b5a:	ed93 7a00 	vldr	s14, [r3]
 8002b5e:	4b65      	ldr	r3, [pc, #404]	; (8002cf4 <interupt_DriveMotor+0x94c>)
 8002b60:	edd3 7a00 	vldr	s15, [r3]
 8002b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b68:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002b6c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002b70:	4b61      	ldr	r3, [pc, #388]	; (8002cf8 <interupt_DriveMotor+0x950>)
 8002b72:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <interupt_DriveMotor+0x954>)
 8002b78:	edd3 6a00 	vldr	s13, [r3]
 8002b7c:	4b60      	ldr	r3, [pc, #384]	; (8002d00 <interupt_DriveMotor+0x958>)
 8002b7e:	ed93 6a01 	vldr	s12, [r3, #4]
 8002b82:	1d3a      	adds	r2, r7, #4
 8002b84:	f107 0308 	add.w	r3, r7, #8
 8002b88:	eef0 1a46 	vmov.f32	s3, s12
 8002b8c:	eeb0 1a66 	vmov.f32	s2, s13
 8002b90:	4611      	mov	r1, r2
 8002b92:	eef0 0a67 	vmov.f32	s1, s15
 8002b96:	eeb0 0a47 	vmov.f32	s0, s14
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f002 f890 	bl	8004cc0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ba0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002ba4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bbc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002bc0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bc4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bcc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bdc:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002be0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002be4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bec:	ee17 0a90 	vmov	r0, s15
 8002bf0:	f7fd fcd2 	bl	8000598 <__aeabi_f2d>
 8002bf4:	4604      	mov	r4, r0
 8002bf6:	460d      	mov	r5, r1
 8002bf8:	4b42      	ldr	r3, [pc, #264]	; (8002d04 <interupt_DriveMotor+0x95c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fccb 	bl	8000598 <__aeabi_f2d>
 8002c02:	a339      	add	r3, pc, #228	; (adr r3, 8002ce8 <interupt_DriveMotor+0x940>)
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f7fd fd1e 	bl	8000648 <__aeabi_dmul>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4620      	mov	r0, r4
 8002c12:	4629      	mov	r1, r5
 8002c14:	f7fd ffa8 	bl	8000b68 <__aeabi_dcmpgt>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d074      	beq.n	8002d08 <interupt_DriveMotor+0x960>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c20:	f7fd fcba 	bl	8000598 <__aeabi_f2d>
 8002c24:	4604      	mov	r4, r0
 8002c26:	460d      	mov	r5, r1
 8002c28:	4b36      	ldr	r3, [pc, #216]	; (8002d04 <interupt_DriveMotor+0x95c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fcb3 	bl	8000598 <__aeabi_f2d>
 8002c32:	a32d      	add	r3, pc, #180	; (adr r3, 8002ce8 <interupt_DriveMotor+0x940>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fd06 	bl	8000648 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4690      	mov	r8, r2
 8002c42:	4699      	mov	r9, r3
 8002c44:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c48:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c50:	ee17 0a90 	vmov	r0, s15
 8002c54:	f7fd fca0 	bl	8000598 <__aeabi_f2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd fb3a 	bl	80002d8 <__aeabi_dsub>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd fb36 	bl	80002dc <__adddf3>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ffbe 	bl	8000bf8 <__aeabi_d2f>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002c80:	6a38      	ldr	r0, [r7, #32]
 8002c82:	f7fd fc89 	bl	8000598 <__aeabi_f2d>
 8002c86:	4604      	mov	r4, r0
 8002c88:	460d      	mov	r5, r1
 8002c8a:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <interupt_DriveMotor+0x95c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7fd fc82 	bl	8000598 <__aeabi_f2d>
 8002c94:	a314      	add	r3, pc, #80	; (adr r3, 8002ce8 <interupt_DriveMotor+0x940>)
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f7fd fcd5 	bl	8000648 <__aeabi_dmul>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4690      	mov	r8, r2
 8002ca4:	4699      	mov	r9, r3
 8002ca6:	ed97 7a04 	vldr	s14, [r7, #16]
 8002caa:	edd7 7a02 	vldr	s15, [r7, #8]
 8002cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb2:	ee17 0a90 	vmov	r0, s15
 8002cb6:	f7fd fc6f 	bl	8000598 <__aeabi_f2d>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4640      	mov	r0, r8
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	f7fd fb09 	bl	80002d8 <__aeabi_dsub>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f7fd fb05 	bl	80002dc <__adddf3>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	f7fd ff8d 	bl	8000bf8 <__aeabi_d2f>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	623b      	str	r3, [r7, #32]
 8002ce2:	e0a1      	b.n	8002e28 <interupt_DriveMotor+0xa80>
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	d916872b 	.word	0xd916872b
 8002cec:	3feff7ce 	.word	0x3feff7ce
 8002cf0:	20000238 	.word	0x20000238
 8002cf4:	2000023c 	.word	0x2000023c
 8002cf8:	200004dc 	.word	0x200004dc
 8002cfc:	2000026c 	.word	0x2000026c
 8002d00:	200004e8 	.word	0x200004e8
 8002d04:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002d08:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d14:	ee17 0a90 	vmov	r0, s15
 8002d18:	f7fd fc3e 	bl	8000598 <__aeabi_f2d>
 8002d1c:	4604      	mov	r4, r0
 8002d1e:	460d      	mov	r5, r1
 8002d20:	4bd5      	ldr	r3, [pc, #852]	; (8003078 <interupt_DriveMotor+0xcd0>)
 8002d22:	edd3 7a00 	vldr	s15, [r3]
 8002d26:	eef1 7a67 	vneg.f32	s15, s15
 8002d2a:	ee17 3a90 	vmov	r3, s15
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fd fc32 	bl	8000598 <__aeabi_f2d>
 8002d34:	a3cc      	add	r3, pc, #816	; (adr r3, 8003068 <interupt_DriveMotor+0xcc0>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4620      	mov	r0, r4
 8002d44:	4629      	mov	r1, r5
 8002d46:	f7fd fef1 	bl	8000b2c <__aeabi_dcmplt>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d06b      	beq.n	8002e28 <interupt_DriveMotor+0xa80>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002d50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d52:	f7fd fc21 	bl	8000598 <__aeabi_f2d>
 8002d56:	4604      	mov	r4, r0
 8002d58:	460d      	mov	r5, r1
 8002d5a:	4bc7      	ldr	r3, [pc, #796]	; (8003078 <interupt_DriveMotor+0xcd0>)
 8002d5c:	edd3 7a00 	vldr	s15, [r3]
 8002d60:	eef1 7a67 	vneg.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7fd fc15 	bl	8000598 <__aeabi_f2d>
 8002d6e:	a3be      	add	r3, pc, #760	; (adr r3, 8003068 <interupt_DriveMotor+0xcc0>)
 8002d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d74:	f7fd fc68 	bl	8000648 <__aeabi_dmul>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	4699      	mov	r9, r3
 8002d80:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d8c:	ee17 0a90 	vmov	r0, s15
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	4602      	mov	r2, r0
 8002d96:	460b      	mov	r3, r1
 8002d98:	4640      	mov	r0, r8
 8002d9a:	4649      	mov	r1, r9
 8002d9c:	f7fd fa9c 	bl	80002d8 <__aeabi_dsub>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4620      	mov	r0, r4
 8002da6:	4629      	mov	r1, r5
 8002da8:	f7fd fa98 	bl	80002dc <__adddf3>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fd ff20 	bl	8000bf8 <__aeabi_d2f>
 8002db8:	4603      	mov	r3, r0
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002dbc:	6a38      	ldr	r0, [r7, #32]
 8002dbe:	f7fd fbeb 	bl	8000598 <__aeabi_f2d>
 8002dc2:	4604      	mov	r4, r0
 8002dc4:	460d      	mov	r5, r1
 8002dc6:	4bac      	ldr	r3, [pc, #688]	; (8003078 <interupt_DriveMotor+0xcd0>)
 8002dc8:	edd3 7a00 	vldr	s15, [r3]
 8002dcc:	eef1 7a67 	vneg.f32	s15, s15
 8002dd0:	ee17 3a90 	vmov	r3, s15
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd fbdf 	bl	8000598 <__aeabi_f2d>
 8002dda:	a3a3      	add	r3, pc, #652	; (adr r3, 8003068 <interupt_DriveMotor+0xcc0>)
 8002ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de0:	f7fd fc32 	bl	8000648 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4690      	mov	r8, r2
 8002dea:	4699      	mov	r9, r3
 8002dec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002df0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df8:	ee17 0a90 	vmov	r0, s15
 8002dfc:	f7fd fbcc 	bl	8000598 <__aeabi_f2d>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4640      	mov	r0, r8
 8002e06:	4649      	mov	r1, r9
 8002e08:	f7fd fa66 	bl	80002d8 <__aeabi_dsub>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd fa62 	bl	80002dc <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7fd feea 	bl	8000bf8 <__aeabi_d2f>
 8002e24:	4603      	mov	r3, r0
 8002e26:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002e28:	f107 0214 	add.w	r2, r7, #20
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	edd7 0a08 	vldr	s1, [r7, #32]
 8002e38:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002e3c:	f7ff fa22 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f005 fbc6 	bl	80085d8 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002e4c:	4b8b      	ldr	r3, [pc, #556]	; (800307c <interupt_DriveMotor+0xcd4>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	f040 8135 	bne.w	80030c0 <interupt_DriveMotor+0xd18>
		g_WallControl_mode=0;
 8002e56:	4b8a      	ldr	r3, [pc, #552]	; (8003080 <interupt_DriveMotor+0xcd8>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002e5c:	4b89      	ldr	r3, [pc, #548]	; (8003084 <interupt_DriveMotor+0xcdc>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8002e62:	4b89      	ldr	r3, [pc, #548]	; (8003088 <interupt_DriveMotor+0xce0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a87      	ldr	r2, [pc, #540]	; (8003088 <interupt_DriveMotor+0xce0>)
 8002e6a:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e6c:	4b87      	ldr	r3, [pc, #540]	; (800308c <interupt_DriveMotor+0xce4>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb91 	bl	8000598 <__aeabi_f2d>
 8002e76:	4604      	mov	r4, r0
 8002e78:	460d      	mov	r5, r1
 8002e7a:	4b84      	ldr	r3, [pc, #528]	; (800308c <interupt_DriveMotor+0xce4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fd fb8a 	bl	8000598 <__aeabi_f2d>
 8002e84:	a37a      	add	r3, pc, #488	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	f7fd fbdd 	bl	8000648 <__aeabi_dmul>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4690      	mov	r8, r2
 8002e94:	4699      	mov	r9, r3
 8002e96:	4b7d      	ldr	r3, [pc, #500]	; (800308c <interupt_DriveMotor+0xce4>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb7c 	bl	8000598 <__aeabi_f2d>
 8002ea0:	a373      	add	r3, pc, #460	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea6:	f7fd fbcf 	bl	8000648 <__aeabi_dmul>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	a36f      	add	r3, pc, #444	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb8:	f7fd fbc6 	bl	8000648 <__aeabi_dmul>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	4610      	mov	r0, r2
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ecc:	f7fd fce6 	bl	800089c <__aeabi_ddiv>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4640      	mov	r0, r8
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	f7fd fa00 	bl	80002dc <__adddf3>
 8002edc:	4602      	mov	r2, r0
 8002ede:	460b      	mov	r3, r1
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	4629      	mov	r1, r5
 8002ee4:	f7fd f9fa 	bl	80002dc <__adddf3>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f7fd fe82 	bl	8000bf8 <__aeabi_d2f>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4a65      	ldr	r2, [pc, #404]	; (800308c <interupt_DriveMotor+0xce4>)
 8002ef8:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002efa:	4b64      	ldr	r3, [pc, #400]	; (800308c <interupt_DriveMotor+0xce4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7fd fb4a 	bl	8000598 <__aeabi_f2d>
 8002f04:	4604      	mov	r4, r0
 8002f06:	460d      	mov	r5, r1
 8002f08:	4b60      	ldr	r3, [pc, #384]	; (800308c <interupt_DriveMotor+0xce4>)
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fb43 	bl	8000598 <__aeabi_f2d>
 8002f12:	a357      	add	r3, pc, #348	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f18:	f7fd fb96 	bl	8000648 <__aeabi_dmul>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	460b      	mov	r3, r1
 8002f20:	4620      	mov	r0, r4
 8002f22:	4629      	mov	r1, r5
 8002f24:	f7fd f9da 	bl	80002dc <__adddf3>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	f7fd fe62 	bl	8000bf8 <__aeabi_d2f>
 8002f34:	4603      	mov	r3, r0
 8002f36:	4a55      	ldr	r2, [pc, #340]	; (800308c <interupt_DriveMotor+0xce4>)
 8002f38:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002f3a:	4b55      	ldr	r3, [pc, #340]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb2a 	bl	8000598 <__aeabi_f2d>
 8002f44:	4604      	mov	r4, r0
 8002f46:	460d      	mov	r5, r1
 8002f48:	4b51      	ldr	r3, [pc, #324]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fb23 	bl	8000598 <__aeabi_f2d>
 8002f52:	a347      	add	r3, pc, #284	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f58:	f7fd fb76 	bl	8000648 <__aeabi_dmul>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	460b      	mov	r3, r1
 8002f60:	4690      	mov	r8, r2
 8002f62:	4699      	mov	r9, r3
 8002f64:	4b4a      	ldr	r3, [pc, #296]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fb15 	bl	8000598 <__aeabi_f2d>
 8002f6e:	a340      	add	r3, pc, #256	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f7fd fb68 	bl	8000648 <__aeabi_dmul>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	4619      	mov	r1, r3
 8002f80:	a33b      	add	r3, pc, #236	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd fb5f 	bl	8000648 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	f04f 0200 	mov.w	r2, #0
 8002f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f9a:	f7fd fc7f 	bl	800089c <__aeabi_ddiv>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd f999 	bl	80002dc <__adddf3>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4620      	mov	r0, r4
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	f7fd f993 	bl	80002dc <__adddf3>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	4610      	mov	r0, r2
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	f7fd fe1b 	bl	8000bf8 <__aeabi_d2f>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	4a32      	ldr	r2, [pc, #200]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002fc6:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002fc8:	4b31      	ldr	r3, [pc, #196]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fae3 	bl	8000598 <__aeabi_f2d>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <interupt_DriveMotor+0xce8>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fadc 	bl	8000598 <__aeabi_f2d>
 8002fe0:	a323      	add	r3, pc, #140	; (adr r3, 8003070 <interupt_DriveMotor+0xcc8>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fb2f 	bl	8000648 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	f7fd f973 	bl	80002dc <__adddf3>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	f7fd fdfb 	bl	8000bf8 <__aeabi_d2f>
 8003002:	4603      	mov	r3, r0
 8003004:	4a22      	ldr	r2, [pc, #136]	; (8003090 <interupt_DriveMotor+0xce8>)
 8003006:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003008:	4b20      	ldr	r3, [pc, #128]	; (800308c <interupt_DriveMotor+0xce4>)
 800300a:	edd3 7a00 	vldr	s15, [r3]
 800300e:	4b20      	ldr	r3, [pc, #128]	; (8003090 <interupt_DriveMotor+0xce8>)
 8003010:	ed93 7a00 	vldr	s14, [r3]
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	f107 0310 	add.w	r3, r7, #16
 800301c:	eef0 0a47 	vmov.f32	s1, s14
 8003020:	eeb0 0a67 	vmov.f32	s0, s15
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f002 f8f6 	bl	8005218 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800302c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003030:	edd7 7a03 	vldr	s15, [r7, #12]
 8003034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003038:	edd7 7a02 	vldr	s15, [r7, #8]
 800303c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003040:	edd7 7a01 	vldr	s15, [r7, #4]
 8003044:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003048:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800304c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003050:	edd7 7a03 	vldr	s15, [r7, #12]
 8003054:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003058:	edd7 7a02 	vldr	s15, [r7, #8]
 800305c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003060:	edd7 7a01 	vldr	s15, [r7, #4]
 8003064:	e016      	b.n	8003094 <interupt_DriveMotor+0xcec>
 8003066:	bf00      	nop
 8003068:	d916872b 	.word	0xd916872b
 800306c:	3feff7ce 	.word	0x3feff7ce
 8003070:	d2f1a9fc 	.word	0xd2f1a9fc
 8003074:	3f50624d 	.word	0x3f50624d
 8003078:	200004d8 	.word	0x200004d8
 800307c:	20000534 	.word	0x20000534
 8003080:	2000059c 	.word	0x2000059c
 8003084:	2000059e 	.word	0x2000059e
 8003088:	20000530 	.word	0x20000530
 800308c:	200004dc 	.word	0x200004dc
 8003090:	200004e8 	.word	0x200004e8
 8003094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003098:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800309c:	f107 0214 	add.w	r2, r7, #20
 80030a0:	f107 0318 	add.w	r3, r7, #24
 80030a4:	4611      	mov	r1, r2
 80030a6:	4618      	mov	r0, r3
 80030a8:	edd7 0a08 	vldr	s1, [r7, #32]
 80030ac:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80030b0:	f7ff f8e8 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4611      	mov	r1, r2
 80030ba:	4618      	mov	r0, r3
 80030bc:	f005 fa8c 	bl	80085d8 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 80030c0:	4bd3      	ldr	r3, [pc, #844]	; (8003410 <interupt_DriveMotor+0x1068>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d137      	bne.n	8003138 <interupt_DriveMotor+0xd90>
		g_WallControl_mode=0;
 80030c8:	4bd2      	ldr	r3, [pc, #840]	; (8003414 <interupt_DriveMotor+0x106c>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80030ce:	4bd2      	ldr	r3, [pc, #840]	; (8003418 <interupt_DriveMotor+0x1070>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80030d4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80030e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80030e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80030ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80030f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80030f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80030fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003100:	edd7 7a02 	vldr	s15, [r7, #8]
 8003104:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003108:	edd7 7a01 	vldr	s15, [r7, #4]
 800310c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003110:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003114:	f107 0214 	add.w	r2, r7, #20
 8003118:	f107 0318 	add.w	r3, r7, #24
 800311c:	4611      	mov	r1, r2
 800311e:	4618      	mov	r0, r3
 8003120:	edd7 0a08 	vldr	s1, [r7, #32]
 8003124:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003128:	f7ff f8ac 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4611      	mov	r1, r2
 8003132:	4618      	mov	r0, r3
 8003134:	f005 fa50 	bl	80085d8 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8003138:	4bb5      	ldr	r3, [pc, #724]	; (8003410 <interupt_DriveMotor+0x1068>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b06      	cmp	r3, #6
 800313e:	f040 8105 	bne.w	800334c <interupt_DriveMotor+0xfa4>
		g_WallControl_mode=0;
 8003142:	4bb4      	ldr	r3, [pc, #720]	; (8003414 <interupt_DriveMotor+0x106c>)
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8003148:	4bb3      	ldr	r3, [pc, #716]	; (8003418 <interupt_DriveMotor+0x1070>)
 800314a:	2200      	movs	r2, #0
 800314c:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800314e:	4bb3      	ldr	r3, [pc, #716]	; (800341c <interupt_DriveMotor+0x1074>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f7fd fa20 	bl	8000598 <__aeabi_f2d>
 8003158:	4604      	mov	r4, r0
 800315a:	460d      	mov	r5, r1
 800315c:	4baf      	ldr	r3, [pc, #700]	; (800341c <interupt_DriveMotor+0x1074>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4618      	mov	r0, r3
 8003162:	f7fd fa19 	bl	8000598 <__aeabi_f2d>
 8003166:	a3a8      	add	r3, pc, #672	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 8003168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800316c:	f7fd fa6c 	bl	8000648 <__aeabi_dmul>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4690      	mov	r8, r2
 8003176:	4699      	mov	r9, r3
 8003178:	4ba8      	ldr	r3, [pc, #672]	; (800341c <interupt_DriveMotor+0x1074>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	4618      	mov	r0, r3
 800317e:	f7fd fa0b 	bl	8000598 <__aeabi_f2d>
 8003182:	a3a1      	add	r3, pc, #644	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f7fd fa5e 	bl	8000648 <__aeabi_dmul>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	a39c      	add	r3, pc, #624	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 8003196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319a:	f7fd fa55 	bl	8000648 <__aeabi_dmul>
 800319e:	4602      	mov	r2, r0
 80031a0:	460b      	mov	r3, r1
 80031a2:	4610      	mov	r0, r2
 80031a4:	4619      	mov	r1, r3
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031ae:	f7fd fb75 	bl	800089c <__aeabi_ddiv>
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4640      	mov	r0, r8
 80031b8:	4649      	mov	r1, r9
 80031ba:	f7fd f88f 	bl	80002dc <__adddf3>
 80031be:	4602      	mov	r2, r0
 80031c0:	460b      	mov	r3, r1
 80031c2:	4620      	mov	r0, r4
 80031c4:	4629      	mov	r1, r5
 80031c6:	f7fd f889 	bl	80002dc <__adddf3>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4610      	mov	r0, r2
 80031d0:	4619      	mov	r1, r3
 80031d2:	f7fd fd11 	bl	8000bf8 <__aeabi_d2f>
 80031d6:	4603      	mov	r3, r0
 80031d8:	4a90      	ldr	r2, [pc, #576]	; (800341c <interupt_DriveMotor+0x1074>)
 80031da:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <interupt_DriveMotor+0x1074>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f9d9 	bl	8000598 <__aeabi_f2d>
 80031e6:	4604      	mov	r4, r0
 80031e8:	460d      	mov	r5, r1
 80031ea:	4b8c      	ldr	r3, [pc, #560]	; (800341c <interupt_DriveMotor+0x1074>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd f9d2 	bl	8000598 <__aeabi_f2d>
 80031f4:	a384      	add	r3, pc, #528	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 80031f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fa:	f7fd fa25 	bl	8000648 <__aeabi_dmul>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4620      	mov	r0, r4
 8003204:	4629      	mov	r1, r5
 8003206:	f7fd f869 	bl	80002dc <__adddf3>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	f7fd fcf1 	bl	8000bf8 <__aeabi_d2f>
 8003216:	4603      	mov	r3, r0
 8003218:	4a80      	ldr	r2, [pc, #512]	; (800341c <interupt_DriveMotor+0x1074>)
 800321a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800321c:	4b80      	ldr	r3, [pc, #512]	; (8003420 <interupt_DriveMotor+0x1078>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fd f9b9 	bl	8000598 <__aeabi_f2d>
 8003226:	4604      	mov	r4, r0
 8003228:	460d      	mov	r5, r1
 800322a:	4b7d      	ldr	r3, [pc, #500]	; (8003420 <interupt_DriveMotor+0x1078>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f9b2 	bl	8000598 <__aeabi_f2d>
 8003234:	a374      	add	r3, pc, #464	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	f7fd fa05 	bl	8000648 <__aeabi_dmul>
 800323e:	4602      	mov	r2, r0
 8003240:	460b      	mov	r3, r1
 8003242:	4620      	mov	r0, r4
 8003244:	4629      	mov	r1, r5
 8003246:	f7fd f849 	bl	80002dc <__adddf3>
 800324a:	4602      	mov	r2, r0
 800324c:	460b      	mov	r3, r1
 800324e:	4610      	mov	r0, r2
 8003250:	4619      	mov	r1, r3
 8003252:	f7fd fcd1 	bl	8000bf8 <__aeabi_d2f>
 8003256:	4603      	mov	r3, r0
 8003258:	4a71      	ldr	r2, [pc, #452]	; (8003420 <interupt_DriveMotor+0x1078>)
 800325a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 800325c:	4b71      	ldr	r3, [pc, #452]	; (8003424 <interupt_DriveMotor+0x107c>)
 800325e:	edd3 6a00 	vldr	s13, [r3]
 8003262:	ed93 7a01 	vldr	s14, [r3, #4]
 8003266:	edd3 7a02 	vldr	s15, [r3, #8]
 800326a:	486d      	ldr	r0, [pc, #436]	; (8003420 <interupt_DriveMotor+0x1078>)
 800326c:	eeb0 0a66 	vmov.f32	s0, s13
 8003270:	eef0 0a47 	vmov.f32	s1, s14
 8003274:	eeb0 1a67 	vmov.f32	s2, s15
 8003278:	f006 fc92 	bl	8009ba0 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800327c:	4b67      	ldr	r3, [pc, #412]	; (800341c <interupt_DriveMotor+0x1074>)
 800327e:	edd3 7a00 	vldr	s15, [r3]
 8003282:	4b67      	ldr	r3, [pc, #412]	; (8003420 <interupt_DriveMotor+0x1078>)
 8003284:	ed93 7a00 	vldr	s14, [r3]
 8003288:	f107 020c 	add.w	r2, r7, #12
 800328c:	f107 0310 	add.w	r3, r7, #16
 8003290:	eef0 0a47 	vmov.f32	s1, s14
 8003294:	eeb0 0a67 	vmov.f32	s0, s15
 8003298:	4611      	mov	r1, r2
 800329a:	4618      	mov	r0, r3
 800329c:	f001 ffbc 	bl	8005218 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80032a0:	4b61      	ldr	r3, [pc, #388]	; (8003428 <interupt_DriveMotor+0x1080>)
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	4b61      	ldr	r3, [pc, #388]	; (800342c <interupt_DriveMotor+0x1084>)
 80032a8:	edd3 7a00 	vldr	s15, [r3]
 80032ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80032b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80032b8:	4b58      	ldr	r3, [pc, #352]	; (800341c <interupt_DriveMotor+0x1074>)
 80032ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80032be:	4b5c      	ldr	r3, [pc, #368]	; (8003430 <interupt_DriveMotor+0x1088>)
 80032c0:	edd3 6a00 	vldr	s13, [r3]
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <interupt_DriveMotor+0x1078>)
 80032c6:	ed93 6a01 	vldr	s12, [r3, #4]
 80032ca:	1d3a      	adds	r2, r7, #4
 80032cc:	f107 0308 	add.w	r3, r7, #8
 80032d0:	eef0 1a46 	vmov.f32	s3, s12
 80032d4:	eeb0 1a66 	vmov.f32	s2, s13
 80032d8:	4611      	mov	r1, r2
 80032da:	eef0 0a67 	vmov.f32	s1, s15
 80032de:	eeb0 0a47 	vmov.f32	s0, s14
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fcec 	bl	8004cc0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80032e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80032ec:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80032f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003304:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003308:	ed97 7a04 	vldr	s14, [r7, #16]
 800330c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003310:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003314:	edd7 7a02 	vldr	s15, [r7, #8]
 8003318:	ee37 7a27 	vadd.f32	s14, s14, s15
 800331c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003324:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003328:	f107 0214 	add.w	r2, r7, #20
 800332c:	f107 0318 	add.w	r3, r7, #24
 8003330:	4611      	mov	r1, r2
 8003332:	4618      	mov	r0, r3
 8003334:	edd7 0a08 	vldr	s1, [r7, #32]
 8003338:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800333c:	f7fe ffa2 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f005 f946 	bl	80085d8 <pl_DriveMotor_duty>

	}if (modeacc == 7) {
 800334c:	4b30      	ldr	r3, [pc, #192]	; (8003410 <interupt_DriveMotor+0x1068>)
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b07      	cmp	r3, #7
 8003352:	f040 829d 	bne.w	8003890 <interupt_DriveMotor+0x14e8>
		g_wallCut_mode=1;
 8003356:	4b30      	ldr	r3, [pc, #192]	; (8003418 <interupt_DriveMotor+0x1070>)
 8003358:	2201      	movs	r2, #1
 800335a:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <interupt_DriveMotor+0x108c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a34      	ldr	r2, [pc, #208]	; (8003434 <interupt_DriveMotor+0x108c>)
 8003364:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8003366:	4b2d      	ldr	r3, [pc, #180]	; (800341c <interupt_DriveMotor+0x1074>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f914 	bl	8000598 <__aeabi_f2d>
 8003370:	4604      	mov	r4, r0
 8003372:	460d      	mov	r5, r1
 8003374:	4b29      	ldr	r3, [pc, #164]	; (800341c <interupt_DriveMotor+0x1074>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f90d 	bl	8000598 <__aeabi_f2d>
 800337e:	a322      	add	r3, pc, #136	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 8003380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003384:	f7fd f960 	bl	8000648 <__aeabi_dmul>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4690      	mov	r8, r2
 800338e:	4699      	mov	r9, r3
 8003390:	4b22      	ldr	r3, [pc, #136]	; (800341c <interupt_DriveMotor+0x1074>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8ff 	bl	8000598 <__aeabi_f2d>
 800339a:	a31b      	add	r3, pc, #108	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	f7fd f952 	bl	8000648 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4610      	mov	r0, r2
 80033aa:	4619      	mov	r1, r3
 80033ac:	a316      	add	r3, pc, #88	; (adr r3, 8003408 <interupt_DriveMotor+0x1060>)
 80033ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b2:	f7fd f949 	bl	8000648 <__aeabi_dmul>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f04f 0200 	mov.w	r2, #0
 80033c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80033c6:	f7fd fa69 	bl	800089c <__aeabi_ddiv>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4640      	mov	r0, r8
 80033d0:	4649      	mov	r1, r9
 80033d2:	f7fc ff83 	bl	80002dc <__adddf3>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4620      	mov	r0, r4
 80033dc:	4629      	mov	r1, r5
 80033de:	f7fc ff7d 	bl	80002dc <__adddf3>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	f7fd fc05 	bl	8000bf8 <__aeabi_d2f>
 80033ee:	4603      	mov	r3, r0
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <interupt_DriveMotor+0x1074>)
 80033f2:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <interupt_DriveMotor+0x1074>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f8cd 	bl	8000598 <__aeabi_f2d>
 80033fe:	4604      	mov	r4, r0
 8003400:	460d      	mov	r5, r1
 8003402:	e019      	b.n	8003438 <interupt_DriveMotor+0x1090>
 8003404:	f3af 8000 	nop.w
 8003408:	d2f1a9fc 	.word	0xd2f1a9fc
 800340c:	3f50624d 	.word	0x3f50624d
 8003410:	20000534 	.word	0x20000534
 8003414:	2000059c 	.word	0x2000059c
 8003418:	2000059e 	.word	0x2000059e
 800341c:	200004dc 	.word	0x200004dc
 8003420:	200004e8 	.word	0x200004e8
 8003424:	20000524 	.word	0x20000524
 8003428:	20000238 	.word	0x20000238
 800342c:	2000023c 	.word	0x2000023c
 8003430:	2000026c 	.word	0x2000026c
 8003434:	20000530 	.word	0x20000530
 8003438:	4bbd      	ldr	r3, [pc, #756]	; (8003730 <interupt_DriveMotor+0x1388>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd f8ab 	bl	8000598 <__aeabi_f2d>
 8003442:	a3b7      	add	r3, pc, #732	; (adr r3, 8003720 <interupt_DriveMotor+0x1378>)
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f7fd f8fe 	bl	8000648 <__aeabi_dmul>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4620      	mov	r0, r4
 8003452:	4629      	mov	r1, r5
 8003454:	f7fc ff42 	bl	80002dc <__adddf3>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4610      	mov	r0, r2
 800345e:	4619      	mov	r1, r3
 8003460:	f7fd fbca 	bl	8000bf8 <__aeabi_d2f>
 8003464:	4603      	mov	r3, r0
 8003466:	4ab2      	ldr	r2, [pc, #712]	; (8003730 <interupt_DriveMotor+0x1388>)
 8003468:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800346a:	4bb2      	ldr	r3, [pc, #712]	; (8003734 <interupt_DriveMotor+0x138c>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fd f892 	bl	8000598 <__aeabi_f2d>
 8003474:	4604      	mov	r4, r0
 8003476:	460d      	mov	r5, r1
 8003478:	4bae      	ldr	r3, [pc, #696]	; (8003734 <interupt_DriveMotor+0x138c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7fd f88b 	bl	8000598 <__aeabi_f2d>
 8003482:	a3a7      	add	r3, pc, #668	; (adr r3, 8003720 <interupt_DriveMotor+0x1378>)
 8003484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003488:	f7fd f8de 	bl	8000648 <__aeabi_dmul>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4690      	mov	r8, r2
 8003492:	4699      	mov	r9, r3
 8003494:	4ba7      	ldr	r3, [pc, #668]	; (8003734 <interupt_DriveMotor+0x138c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4618      	mov	r0, r3
 800349a:	f7fd f87d 	bl	8000598 <__aeabi_f2d>
 800349e:	a3a0      	add	r3, pc, #640	; (adr r3, 8003720 <interupt_DriveMotor+0x1378>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	f7fd f8d0 	bl	8000648 <__aeabi_dmul>
 80034a8:	4602      	mov	r2, r0
 80034aa:	460b      	mov	r3, r1
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	a39b      	add	r3, pc, #620	; (adr r3, 8003720 <interupt_DriveMotor+0x1378>)
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f7fd f8c7 	bl	8000648 <__aeabi_dmul>
 80034ba:	4602      	mov	r2, r0
 80034bc:	460b      	mov	r3, r1
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80034ca:	f7fd f9e7 	bl	800089c <__aeabi_ddiv>
 80034ce:	4602      	mov	r2, r0
 80034d0:	460b      	mov	r3, r1
 80034d2:	4640      	mov	r0, r8
 80034d4:	4649      	mov	r1, r9
 80034d6:	f7fc ff01 	bl	80002dc <__adddf3>
 80034da:	4602      	mov	r2, r0
 80034dc:	460b      	mov	r3, r1
 80034de:	4620      	mov	r0, r4
 80034e0:	4629      	mov	r1, r5
 80034e2:	f7fc fefb 	bl	80002dc <__adddf3>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f7fd fb83 	bl	8000bf8 <__aeabi_d2f>
 80034f2:	4603      	mov	r3, r0
 80034f4:	4a8f      	ldr	r2, [pc, #572]	; (8003734 <interupt_DriveMotor+0x138c>)
 80034f6:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80034f8:	4b8e      	ldr	r3, [pc, #568]	; (8003734 <interupt_DriveMotor+0x138c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f84b 	bl	8000598 <__aeabi_f2d>
 8003502:	4604      	mov	r4, r0
 8003504:	460d      	mov	r5, r1
 8003506:	4b8b      	ldr	r3, [pc, #556]	; (8003734 <interupt_DriveMotor+0x138c>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd f844 	bl	8000598 <__aeabi_f2d>
 8003510:	a383      	add	r3, pc, #524	; (adr r3, 8003720 <interupt_DriveMotor+0x1378>)
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f7fd f897 	bl	8000648 <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4620      	mov	r0, r4
 8003520:	4629      	mov	r1, r5
 8003522:	f7fc fedb 	bl	80002dc <__adddf3>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f7fd fb63 	bl	8000bf8 <__aeabi_d2f>
 8003532:	4603      	mov	r3, r0
 8003534:	4a7f      	ldr	r2, [pc, #508]	; (8003734 <interupt_DriveMotor+0x138c>)
 8003536:	6013      	str	r3, [r2, #0]
		cal_table_dis(Trapezoid_straight,&straight);
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <interupt_DriveMotor+0x1390>)
 800353a:	4a7d      	ldr	r2, [pc, #500]	; (8003730 <interupt_DriveMotor+0x1388>)
 800353c:	9202      	str	r2, [sp, #8]
 800353e:	466c      	mov	r4, sp
 8003540:	f103 0210 	add.w	r2, r3, #16
 8003544:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003548:	e884 0003 	stmia.w	r4, {r0, r1}
 800354c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800354e:	f006 f811 	bl	8009574 <cal_table_dis>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8003552:	4b77      	ldr	r3, [pc, #476]	; (8003730 <interupt_DriveMotor+0x1388>)
 8003554:	edd3 7a00 	vldr	s15, [r3]
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <interupt_DriveMotor+0x138c>)
 800355a:	ed93 7a00 	vldr	s14, [r3]
 800355e:	f107 020c 	add.w	r2, r7, #12
 8003562:	f107 0310 	add.w	r3, r7, #16
 8003566:	eef0 0a47 	vmov.f32	s1, s14
 800356a:	eeb0 0a67 	vmov.f32	s0, s15
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f001 fe51 	bl	8005218 <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8003576:	4b71      	ldr	r3, [pc, #452]	; (800373c <interupt_DriveMotor+0x1394>)
 8003578:	ed93 7a00 	vldr	s14, [r3]
 800357c:	4b70      	ldr	r3, [pc, #448]	; (8003740 <interupt_DriveMotor+0x1398>)
 800357e:	edd3 7a00 	vldr	s15, [r3]
 8003582:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003586:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800358a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800358e:	4b68      	ldr	r3, [pc, #416]	; (8003730 <interupt_DriveMotor+0x1388>)
 8003590:	edd3 7a01 	vldr	s15, [r3, #4]
 8003594:	4b6b      	ldr	r3, [pc, #428]	; (8003744 <interupt_DriveMotor+0x139c>)
 8003596:	edd3 6a00 	vldr	s13, [r3]
 800359a:	4b66      	ldr	r3, [pc, #408]	; (8003734 <interupt_DriveMotor+0x138c>)
 800359c:	ed93 6a01 	vldr	s12, [r3, #4]
 80035a0:	1d3a      	adds	r2, r7, #4
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	eef0 1a46 	vmov.f32	s3, s12
 80035aa:	eeb0 1a66 	vmov.f32	s2, s13
 80035ae:	4611      	mov	r1, r2
 80035b0:	eef0 0a67 	vmov.f32	s1, s15
 80035b4:	eeb0 0a47 	vmov.f32	s0, s14
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fb81 	bl	8004cc0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		//feedforward_straight = BATT_MAX;
		PID_w = calWallConrol();
 80035be:	f002 f843 	bl	8005648 <calWallConrol>
 80035c2:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80035c6:	ed97 7a04 	vldr	s14, [r7, #16]
 80035ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80035ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80035d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035da:	edd7 7a02 	vldr	s15, [r7, #8]
 80035de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80035e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035ea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80035ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80035f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80035f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80035fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003602:	edd7 7a02 	vldr	s15, [r7, #8]
 8003606:	ee37 7a27 	vadd.f32	s14, s14, s15
 800360a:	edd7 7a01 	vldr	s15, [r7, #4]
 800360e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003612:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003616:	ed97 7a04 	vldr	s14, [r7, #16]
 800361a:	edd7 7a02 	vldr	s15, [r7, #8]
 800361e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003622:	ee17 0a90 	vmov	r0, s15
 8003626:	f7fc ffb7 	bl	8000598 <__aeabi_f2d>
 800362a:	4604      	mov	r4, r0
 800362c:	460d      	mov	r5, r1
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <interupt_DriveMotor+0x13a0>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ffb0 	bl	8000598 <__aeabi_f2d>
 8003638:	a33b      	add	r3, pc, #236	; (adr r3, 8003728 <interupt_DriveMotor+0x1380>)
 800363a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800363e:	f7fd f803 	bl	8000648 <__aeabi_dmul>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	4620      	mov	r0, r4
 8003648:	4629      	mov	r1, r5
 800364a:	f7fd fa8d 	bl	8000b68 <__aeabi_dcmpgt>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d07b      	beq.n	800374c <interupt_DriveMotor+0x13a4>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003656:	f7fc ff9f 	bl	8000598 <__aeabi_f2d>
 800365a:	4604      	mov	r4, r0
 800365c:	460d      	mov	r5, r1
 800365e:	4b3a      	ldr	r3, [pc, #232]	; (8003748 <interupt_DriveMotor+0x13a0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f7fc ff98 	bl	8000598 <__aeabi_f2d>
 8003668:	a32f      	add	r3, pc, #188	; (adr r3, 8003728 <interupt_DriveMotor+0x1380>)
 800366a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366e:	f7fc ffeb 	bl	8000648 <__aeabi_dmul>
 8003672:	4602      	mov	r2, r0
 8003674:	460b      	mov	r3, r1
 8003676:	4690      	mov	r8, r2
 8003678:	4699      	mov	r9, r3
 800367a:	ed97 7a04 	vldr	s14, [r7, #16]
 800367e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003686:	ee17 0a90 	vmov	r0, s15
 800368a:	f7fc ff85 	bl	8000598 <__aeabi_f2d>
 800368e:	4602      	mov	r2, r0
 8003690:	460b      	mov	r3, r1
 8003692:	4640      	mov	r0, r8
 8003694:	4649      	mov	r1, r9
 8003696:	f7fc fe1f 	bl	80002d8 <__aeabi_dsub>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4620      	mov	r0, r4
 80036a0:	4629      	mov	r1, r5
 80036a2:	f7fc fe1b 	bl	80002dc <__adddf3>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f7fd faa3 	bl	8000bf8 <__aeabi_d2f>
 80036b2:	4603      	mov	r3, r0
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80036b6:	6a38      	ldr	r0, [r7, #32]
 80036b8:	f7fc ff6e 	bl	8000598 <__aeabi_f2d>
 80036bc:	4604      	mov	r4, r0
 80036be:	460d      	mov	r5, r1
 80036c0:	4b21      	ldr	r3, [pc, #132]	; (8003748 <interupt_DriveMotor+0x13a0>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff67 	bl	8000598 <__aeabi_f2d>
 80036ca:	a317      	add	r3, pc, #92	; (adr r3, 8003728 <interupt_DriveMotor+0x1380>)
 80036cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d0:	f7fc ffba 	bl	8000648 <__aeabi_dmul>
 80036d4:	4602      	mov	r2, r0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4690      	mov	r8, r2
 80036da:	4699      	mov	r9, r3
 80036dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80036e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80036e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036e8:	ee17 0a90 	vmov	r0, s15
 80036ec:	f7fc ff54 	bl	8000598 <__aeabi_f2d>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	4640      	mov	r0, r8
 80036f6:	4649      	mov	r1, r9
 80036f8:	f7fc fdee 	bl	80002d8 <__aeabi_dsub>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4620      	mov	r0, r4
 8003702:	4629      	mov	r1, r5
 8003704:	f7fc fdea 	bl	80002dc <__adddf3>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f7fd fa72 	bl	8000bf8 <__aeabi_d2f>
 8003714:	4603      	mov	r3, r0
 8003716:	623b      	str	r3, [r7, #32]
 8003718:	e0a8      	b.n	800386c <interupt_DriveMotor+0x14c4>
 800371a:	bf00      	nop
 800371c:	f3af 8000 	nop.w
 8003720:	d2f1a9fc 	.word	0xd2f1a9fc
 8003724:	3f50624d 	.word	0x3f50624d
 8003728:	d916872b 	.word	0xd916872b
 800372c:	3feff7ce 	.word	0x3feff7ce
 8003730:	200004dc 	.word	0x200004dc
 8003734:	200004e8 	.word	0x200004e8
 8003738:	200004f4 	.word	0x200004f4
 800373c:	20000238 	.word	0x20000238
 8003740:	2000023c 	.word	0x2000023c
 8003744:	2000026c 	.word	0x2000026c
 8003748:	200004d8 	.word	0x200004d8
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800374c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003750:	edd7 7a02 	vldr	s15, [r7, #8]
 8003754:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003758:	ee17 0a90 	vmov	r0, s15
 800375c:	f7fc ff1c 	bl	8000598 <__aeabi_f2d>
 8003760:	4604      	mov	r4, r0
 8003762:	460d      	mov	r5, r1
 8003764:	4b7a      	ldr	r3, [pc, #488]	; (8003950 <interupt_DriveMotor+0x15a8>)
 8003766:	edd3 7a00 	vldr	s15, [r3]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	ee17 3a90 	vmov	r3, s15
 8003772:	4618      	mov	r0, r3
 8003774:	f7fc ff10 	bl	8000598 <__aeabi_f2d>
 8003778:	a373      	add	r3, pc, #460	; (adr r3, 8003948 <interupt_DriveMotor+0x15a0>)
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f7fc ff63 	bl	8000648 <__aeabi_dmul>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4620      	mov	r0, r4
 8003788:	4629      	mov	r1, r5
 800378a:	f7fd f9cf 	bl	8000b2c <__aeabi_dcmplt>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d06b      	beq.n	800386c <interupt_DriveMotor+0x14c4>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003794:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003796:	f7fc feff 	bl	8000598 <__aeabi_f2d>
 800379a:	4604      	mov	r4, r0
 800379c:	460d      	mov	r5, r1
 800379e:	4b6c      	ldr	r3, [pc, #432]	; (8003950 <interupt_DriveMotor+0x15a8>)
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	eef1 7a67 	vneg.f32	s15, s15
 80037a8:	ee17 3a90 	vmov	r3, s15
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fef3 	bl	8000598 <__aeabi_f2d>
 80037b2:	a365      	add	r3, pc, #404	; (adr r3, 8003948 <interupt_DriveMotor+0x15a0>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	f7fc ff46 	bl	8000648 <__aeabi_dmul>
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	4690      	mov	r8, r2
 80037c2:	4699      	mov	r9, r3
 80037c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80037c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	ee17 0a90 	vmov	r0, s15
 80037d4:	f7fc fee0 	bl	8000598 <__aeabi_f2d>
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4640      	mov	r0, r8
 80037de:	4649      	mov	r1, r9
 80037e0:	f7fc fd7a 	bl	80002d8 <__aeabi_dsub>
 80037e4:	4602      	mov	r2, r0
 80037e6:	460b      	mov	r3, r1
 80037e8:	4620      	mov	r0, r4
 80037ea:	4629      	mov	r1, r5
 80037ec:	f7fc fd76 	bl	80002dc <__adddf3>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	f7fd f9fe 	bl	8000bf8 <__aeabi_d2f>
 80037fc:	4603      	mov	r3, r0
 80037fe:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003800:	6a38      	ldr	r0, [r7, #32]
 8003802:	f7fc fec9 	bl	8000598 <__aeabi_f2d>
 8003806:	4604      	mov	r4, r0
 8003808:	460d      	mov	r5, r1
 800380a:	4b51      	ldr	r3, [pc, #324]	; (8003950 <interupt_DriveMotor+0x15a8>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eef1 7a67 	vneg.f32	s15, s15
 8003814:	ee17 3a90 	vmov	r3, s15
 8003818:	4618      	mov	r0, r3
 800381a:	f7fc febd 	bl	8000598 <__aeabi_f2d>
 800381e:	a34a      	add	r3, pc, #296	; (adr r3, 8003948 <interupt_DriveMotor+0x15a0>)
 8003820:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003824:	f7fc ff10 	bl	8000648 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4690      	mov	r8, r2
 800382e:	4699      	mov	r9, r3
 8003830:	ed97 7a04 	vldr	s14, [r7, #16]
 8003834:	edd7 7a02 	vldr	s15, [r7, #8]
 8003838:	ee77 7a27 	vadd.f32	s15, s14, s15
 800383c:	ee17 0a90 	vmov	r0, s15
 8003840:	f7fc feaa 	bl	8000598 <__aeabi_f2d>
 8003844:	4602      	mov	r2, r0
 8003846:	460b      	mov	r3, r1
 8003848:	4640      	mov	r0, r8
 800384a:	4649      	mov	r1, r9
 800384c:	f7fc fd44 	bl	80002d8 <__aeabi_dsub>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fd40 	bl	80002dc <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	f7fd f9c8 	bl	8000bf8 <__aeabi_d2f>
 8003868:	4603      	mov	r3, r0
 800386a:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800386c:	f107 0214 	add.w	r2, r7, #20
 8003870:	f107 0318 	add.w	r3, r7, #24
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	edd7 0a08 	vldr	s1, [r7, #32]
 800387c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003880:	f7fe fd00 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f004 fea4 	bl	80085d8 <pl_DriveMotor_duty>
	}
	if (modeacc == 100) {
 8003890:	4b30      	ldr	r3, [pc, #192]	; (8003954 <interupt_DriveMotor+0x15ac>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b64      	cmp	r3, #100	; 0x64
 8003896:	d14b      	bne.n	8003930 <interupt_DriveMotor+0x1588>
		straight.velocity = 0;
 8003898:	4b2f      	ldr	r3, [pc, #188]	; (8003958 <interupt_DriveMotor+0x15b0>)
 800389a:	f04f 0200 	mov.w	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 80038a0:	4b2e      	ldr	r3, [pc, #184]	; (800395c <interupt_DriveMotor+0x15b4>)
 80038a2:	f04f 0200 	mov.w	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <interupt_DriveMotor+0x15b0>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	4b2b      	ldr	r3, [pc, #172]	; (800395c <interupt_DriveMotor+0x15b4>)
 80038b0:	ed93 7a00 	vldr	s14, [r3]
 80038b4:	f107 020c 	add.w	r2, r7, #12
 80038b8:	f107 0310 	add.w	r3, r7, #16
 80038bc:	eef0 0a47 	vmov.f32	s1, s14
 80038c0:	eeb0 0a67 	vmov.f32	s0, s15
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fca6 	bl	8005218 <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80038cc:	ed97 7a04 	vldr	s14, [r7, #16]
 80038d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80038d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038e8:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 80038ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80038f0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80038fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003900:	edd7 7a01 	vldr	s15, [r7, #4]
 8003904:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003908:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 800390c:	f107 0214 	add.w	r2, r7, #20
 8003910:	f107 0318 	add.w	r3, r7, #24
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	edd7 0a08 	vldr	s1, [r7, #32]
 800391c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003920:	f7fe fcb0 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4611      	mov	r1, r2
 800392a:	4618      	mov	r0, r3
 800392c:	f004 fe54 	bl	80085d8 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003930:	4a0b      	ldr	r2, [pc, #44]	; (8003960 <interupt_DriveMotor+0x15b8>)
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8003936:	4a0b      	ldr	r2, [pc, #44]	; (8003964 <interupt_DriveMotor+0x15bc>)
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	6013      	str	r3, [r2, #0]



}
 800393c:	bf00      	nop
 800393e:	3728      	adds	r7, #40	; 0x28
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003946:	bf00      	nop
 8003948:	d916872b 	.word	0xd916872b
 800394c:	3feff7ce 	.word	0x3feff7ce
 8003950:	200004d8 	.word	0x200004d8
 8003954:	20000534 	.word	0x20000534
 8003958:	200004dc 	.word	0x200004dc
 800395c:	200004e8 	.word	0x200004e8
 8003960:	20000538 	.word	0x20000538
 8003964:	2000053c 	.word	0x2000053c

08003968 <straight_table_max>:

float straight_table_max(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration, float input_deceleration,MOTOR_MODE motor_mode) {
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af00      	add	r7, sp, #0
 800396e:	ed87 0a07 	vstr	s0, [r7, #28]
 8003972:	edc7 0a06 	vstr	s1, [r7, #24]
 8003976:	ed87 1a05 	vstr	s2, [r7, #20]
 800397a:	edc7 1a04 	vstr	s3, [r7, #16]
 800397e:	ed87 2a03 	vstr	s4, [r7, #12]
 8003982:	edc7 2a02 	vstr	s5, [r7, #8]
 8003986:	6078      	str	r0, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003988:	edd7 7a05 	vldr	s15, [r7, #20]
 800398c:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003990:	edd7 7a06 	vldr	s15, [r7, #24]
 8003994:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003998:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800399c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80039a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80039a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80039a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039ac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80039b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80039b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039bc:	d505      	bpl.n	80039ca <straight_table_max+0x62>
 80039be:	edd7 7a03 	vldr	s15, [r7, #12]
 80039c2:	eef1 7a67 	vneg.f32	s15, s15
 80039c6:	edc7 7a03 	vstr	s15, [r7, #12]
	if (input_deceleration < 0){input_deceleration=-input_deceleration;}//減速が負
 80039ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80039ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d6:	d505      	bpl.n	80039e4 <straight_table_max+0x7c>
 80039d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80039dc:	eef1 7a67 	vneg.f32	s15, s15
 80039e0:	edc7 7a02 	vstr	s15, [r7, #8]


	Trapezoid_straight.displacement = input_displacement;
 80039e4:	4a71      	ldr	r2, [pc, #452]	; (8003bac <straight_table_max+0x244>)
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80039ea:	4a70      	ldr	r2, [pc, #448]	; (8003bac <straight_table_max+0x244>)
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80039f0:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <straight_table_max+0x244>)
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80039f6:	4a6d      	ldr	r2, [pc, #436]	; (8003bac <straight_table_max+0x244>)
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80039fc:	4a6b      	ldr	r2, [pc, #428]	; (8003bac <straight_table_max+0x244>)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6113      	str	r3, [r2, #16]
	Trapezoid_straight.deceleration = input_deceleration;
 8003a02:	4a6a      	ldr	r2, [pc, #424]	; (8003bac <straight_table_max+0x244>)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	6153      	str	r3, [r2, #20]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003a08:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a0c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a14:	db03      	blt.n	8003a1e <straight_table_max+0xb6>
 8003a16:	4a66      	ldr	r2, [pc, #408]	; (8003bb0 <straight_table_max+0x248>)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6053      	str	r3, [r2, #4]
 8003a1c:	e006      	b.n	8003a2c <straight_table_max+0xc4>
	}else{straight.acceleration = -input_acceleration;}
 8003a1e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a22:	eef1 7a67 	vneg.f32	s15, s15
 8003a26:	4b62      	ldr	r3, [pc, #392]	; (8003bb0 <straight_table_max+0x248>)
 8003a28:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003a2c:	4a60      	ldr	r2, [pc, #384]	; (8003bb0 <straight_table_max+0x248>)
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003a32:	4b5f      	ldr	r3, [pc, #380]	; (8003bb0 <straight_table_max+0x248>)
 8003a34:	f04f 0200 	mov.w	r2, #0
 8003a38:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003a3a:	4b5e      	ldr	r3, [pc, #376]	; (8003bb4 <straight_table_max+0x24c>)
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <straight_table_max+0x24c>)
 8003a44:	f04f 0200 	mov.w	r2, #0
 8003a48:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003a4a:	4b5a      	ldr	r3, [pc, #360]	; (8003bb4 <straight_table_max+0x24c>)
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003a52:	4b59      	ldr	r3, [pc, #356]	; (8003bb8 <straight_table_max+0x250>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003a58:	4b58      	ldr	r3, [pc, #352]	; (8003bbc <straight_table_max+0x254>)
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003a5e:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	dd0e      	ble.n	8003a8a <straight_table_max+0x122>
 8003a6c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a70:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7c:	dd05      	ble.n	8003a8a <straight_table_max+0x122>
 8003a7e:	4b4f      	ldr	r3, [pc, #316]	; (8003bbc <straight_table_max+0x254>)
 8003a80:	2205      	movs	r2, #5
 8003a82:	701a      	strb	r2, [r3, #0]
 8003a84:	4a4a      	ldr	r2, [pc, #296]	; (8003bb0 <straight_table_max+0x248>)
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003a8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	dd14      	ble.n	8003ac2 <straight_table_max+0x15a>
 8003a98:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a9c:	eef1 7a67 	vneg.f32	s15, s15
 8003aa0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aac:	d509      	bpl.n	8003ac2 <straight_table_max+0x15a>
 8003aae:	4b43      	ldr	r3, [pc, #268]	; (8003bbc <straight_table_max+0x254>)
 8003ab0:	2206      	movs	r2, #6
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ab8:	eef1 7a67 	vneg.f32	s15, s15
 8003abc:	4b3c      	ldr	r3, [pc, #240]	; (8003bb0 <straight_table_max+0x248>)
 8003abe:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003ac2:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ac6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ace:	d514      	bpl.n	8003afa <straight_table_max+0x192>
 8003ad0:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ad4:	eef1 7a67 	vneg.f32	s15, s15
 8003ad8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	dd09      	ble.n	8003afa <straight_table_max+0x192>
 8003ae6:	4b35      	ldr	r3, [pc, #212]	; (8003bbc <straight_table_max+0x254>)
 8003ae8:	2205      	movs	r2, #5
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003af0:	eef1 7a67 	vneg.f32	s15, s15
 8003af4:	4b2e      	ldr	r3, [pc, #184]	; (8003bb0 <straight_table_max+0x248>)
 8003af6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003afa:	edd7 7a07 	vldr	s15, [r7, #28]
 8003afe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b06:	d50e      	bpl.n	8003b26 <straight_table_max+0x1be>
 8003b08:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003b0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	d505      	bpl.n	8003b26 <straight_table_max+0x1be>
 8003b1a:	4b28      	ldr	r3, [pc, #160]	; (8003bbc <straight_table_max+0x254>)
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	701a      	strb	r2, [r3, #0]
 8003b20:	4a23      	ldr	r2, [pc, #140]	; (8003bb0 <straight_table_max+0x248>)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6053      	str	r3, [r2, #4]
	modeacc = 7;
 8003b26:	4b26      	ldr	r3, [pc, #152]	; (8003bc0 <straight_table_max+0x258>)
 8003b28:	2207      	movs	r2, #7
 8003b2a:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003b2c:	793a      	ldrb	r2, [r7, #4]
 8003b2e:	4b25      	ldr	r3, [pc, #148]	; (8003bc4 <straight_table_max+0x25c>)
 8003b30:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003b32:	f004 fd35 	bl	80085a0 <pl_DriveMotor_start>

	while (g_acc_flag!=4){
 8003b36:	bf00      	nop
 8003b38:	4b20      	ldr	r3, [pc, #128]	; (8003bbc <straight_table_max+0x254>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b04      	cmp	r3, #4
 8003b40:	d1fa      	bne.n	8003b38 <straight_table_max+0x1d0>


	}
	if(input_end_velocity==0){//BREAK
 8003b42:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b46:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	d10e      	bne.n	8003b6e <straight_table_max+0x206>
		wait_ms_NoReset(100);
 8003b50:	2064      	movs	r0, #100	; 0x64
 8003b52:	f004 fffd 	bl	8008b50 <wait_ms_NoReset>
		modeacc = 0;
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <straight_table_max+0x258>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8003b5c:	2003      	movs	r0, #3
 8003b5e:	f004 fcf9 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8003b62:	2003      	movs	r0, #3
 8003b64:	f004 fcce 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	f004 fff1 	bl	8008b50 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <straight_table_max+0x260>)
 8003b70:	ed93 7a00 	vldr	s14, [r3]
 8003b74:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7c:	4b12      	ldr	r3, [pc, #72]	; (8003bc8 <straight_table_max+0x260>)
 8003b7e:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003b82:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <straight_table_max+0x264>)
 8003b84:	ed93 7a00 	vldr	s14, [r3]
 8003b88:	edd7 7a07 	vldr	s15, [r7, #28]
 8003b8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b90:	4b0e      	ldr	r3, [pc, #56]	; (8003bcc <straight_table_max+0x264>)
 8003b92:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003b96:	f004 fd11 	bl	80085bc <pl_DriveMotor_stop>



	return straight.velocity;
 8003b9a:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <straight_table_max+0x248>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	ee07 3a90 	vmov	s15, r3



}
 8003ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba6:	3728      	adds	r7, #40	; 0x28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	200004f4 	.word	0x200004f4
 8003bb0:	200004dc 	.word	0x200004dc
 8003bb4:	200004e8 	.word	0x200004e8
 8003bb8:	20000811 	.word	0x20000811
 8003bbc:	20000810 	.word	0x20000810
 8003bc0:	20000534 	.word	0x20000534
 8003bc4:	2000059c 	.word	0x2000059c
 8003bc8:	20000220 	.word	0x20000220
 8003bcc:	20000224 	.word	0x20000224

08003bd0 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	ed87 0a05 	vstr	s0, [r7, #20]
 8003bda:	edc7 0a04 	vstr	s1, [r7, #16]
 8003bde:	ed87 1a03 	vstr	s2, [r7, #12]
 8003be2:	edc7 1a02 	vstr	s3, [r7, #8]
 8003be6:	ed87 2a01 	vstr	s4, [r7, #4]
 8003bea:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8003bf0:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003bf4:	edd7 7a04 	vldr	s15, [r7, #16]
 8003bf8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003bfc:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c00:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c04:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c08:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c10:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c14:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	d505      	bpl.n	8003c2e <straight_table2+0x5e>
 8003c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c26:	eef1 7a67 	vneg.f32	s15, s15
 8003c2a:	edc7 7a01 	vstr	s15, [r7, #4]

	if(noGoalPillarMode==1 && motor_mode.WallCutMode==1){
 8003c2e:	4bba      	ldr	r3, [pc, #744]	; (8003f18 <straight_table2+0x348>)
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d10c      	bne.n	8003c50 <straight_table2+0x80>
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d109      	bne.n	8003c50 <straight_table2+0x80>
		motor_mode.WallCutMode=0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	70fb      	strb	r3, [r7, #3]
		input_displacement=input_displacement-MAZE_OFFSET;
 8003c40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003c44:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003c48:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c4c:	edc7 7a05 	vstr	s15, [r7, #20]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003c50:	4ab2      	ldr	r2, [pc, #712]	; (8003f1c <straight_table2+0x34c>)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003c56:	4ab1      	ldr	r2, [pc, #708]	; (8003f1c <straight_table2+0x34c>)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003c5c:	4aaf      	ldr	r2, [pc, #700]	; (8003f1c <straight_table2+0x34c>)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003c62:	4aae      	ldr	r2, [pc, #696]	; (8003f1c <straight_table2+0x34c>)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003c68:	4aac      	ldr	r2, [pc, #688]	; (8003f1c <straight_table2+0x34c>)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003c6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	db03      	blt.n	8003c84 <straight_table2+0xb4>
 8003c7c:	4aa8      	ldr	r2, [pc, #672]	; (8003f20 <straight_table2+0x350>)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6053      	str	r3, [r2, #4]
 8003c82:	e006      	b.n	8003c92 <straight_table2+0xc2>
	}else{straight.acceleration = -input_acceleration;}
 8003c84:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c88:	eef1 7a67 	vneg.f32	s15, s15
 8003c8c:	4ba4      	ldr	r3, [pc, #656]	; (8003f20 <straight_table2+0x350>)
 8003c8e:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003c92:	4aa3      	ldr	r2, [pc, #652]	; (8003f20 <straight_table2+0x350>)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003c98:	4ba1      	ldr	r3, [pc, #644]	; (8003f20 <straight_table2+0x350>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003ca0:	4ba0      	ldr	r3, [pc, #640]	; (8003f24 <straight_table2+0x354>)
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003ca8:	4b9e      	ldr	r3, [pc, #632]	; (8003f24 <straight_table2+0x354>)
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8003cb0:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <straight_table2+0x354>)
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cb8:	4b9b      	ldr	r3, [pc, #620]	; (8003f28 <straight_table2+0x358>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cbe:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <straight_table2+0x35c>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003cc4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd0:	dd0e      	ble.n	8003cf0 <straight_table2+0x120>
 8003cd2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cd6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ce2:	dd05      	ble.n	8003cf0 <straight_table2+0x120>
 8003ce4:	4b91      	ldr	r3, [pc, #580]	; (8003f2c <straight_table2+0x35c>)
 8003ce6:	2205      	movs	r2, #5
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	4a8d      	ldr	r2, [pc, #564]	; (8003f20 <straight_table2+0x350>)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003cf0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cf4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cfc:	dd14      	ble.n	8003d28 <straight_table2+0x158>
 8003cfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d02:	eef1 7a67 	vneg.f32	s15, s15
 8003d06:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d12:	d509      	bpl.n	8003d28 <straight_table2+0x158>
 8003d14:	4b85      	ldr	r3, [pc, #532]	; (8003f2c <straight_table2+0x35c>)
 8003d16:	2206      	movs	r2, #6
 8003d18:	701a      	strb	r2, [r3, #0]
 8003d1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d1e:	eef1 7a67 	vneg.f32	s15, s15
 8003d22:	4b7f      	ldr	r3, [pc, #508]	; (8003f20 <straight_table2+0x350>)
 8003d24:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d34:	d514      	bpl.n	8003d60 <straight_table2+0x190>
 8003d36:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d3a:	eef1 7a67 	vneg.f32	s15, s15
 8003d3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d4a:	dd09      	ble.n	8003d60 <straight_table2+0x190>
 8003d4c:	4b77      	ldr	r3, [pc, #476]	; (8003f2c <straight_table2+0x35c>)
 8003d4e:	2205      	movs	r2, #5
 8003d50:	701a      	strb	r2, [r3, #0]
 8003d52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d56:	eef1 7a67 	vneg.f32	s15, s15
 8003d5a:	4b71      	ldr	r3, [pc, #452]	; (8003f20 <straight_table2+0x350>)
 8003d5c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003d60:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6c:	d50e      	bpl.n	8003d8c <straight_table2+0x1bc>
 8003d6e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d72:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d7e:	d505      	bpl.n	8003d8c <straight_table2+0x1bc>
 8003d80:	4b6a      	ldr	r3, [pc, #424]	; (8003f2c <straight_table2+0x35c>)
 8003d82:	2206      	movs	r2, #6
 8003d84:	701a      	strb	r2, [r3, #0]
 8003d86:	4a66      	ldr	r2, [pc, #408]	; (8003f20 <straight_table2+0x350>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003d8c:	4b68      	ldr	r3, [pc, #416]	; (8003f30 <straight_table2+0x360>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003d92:	783a      	ldrb	r2, [r7, #0]
 8003d94:	4b67      	ldr	r3, [pc, #412]	; (8003f34 <straight_table2+0x364>)
 8003d96:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003d98:	f004 fc02 	bl	80085a0 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	f040 80d4 	bne.w	8003f4c <straight_table2+0x37c>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003da4:	4b64      	ldr	r3, [pc, #400]	; (8003f38 <straight_table2+0x368>)
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003dac:	4b5f      	ldr	r3, [pc, #380]	; (8003f2c <straight_table2+0x35c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003db2:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <straight_table2+0x350>)
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003dba:	bf00      	nop
 8003dbc:	4b5f      	ldr	r3, [pc, #380]	; (8003f3c <straight_table2+0x36c>)
 8003dbe:	edd3 7a00 	vldr	s15, [r3]
 8003dc2:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003dc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dce:	d409      	bmi.n	8003de4 <straight_table2+0x214>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	; (8003f3c <straight_table2+0x36c>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003dd6:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003f40 <straight_table2+0x370>
 8003dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de2:	dd18      	ble.n	8003e16 <straight_table2+0x246>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003de4:	4b57      	ldr	r3, [pc, #348]	; (8003f44 <straight_table2+0x374>)
 8003de6:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003dea:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8003dee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	d409      	bmi.n	8003e0c <straight_table2+0x23c>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003df8:	4b52      	ldr	r3, [pc, #328]	; (8003f44 <straight_table2+0x374>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 8003dfe:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8003f40 <straight_table2+0x370>
 8003e02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e0a:	dd04      	ble.n	8003e16 <straight_table2+0x246>
			  front_wall_break_90==0){}
 8003e0c:	4b4e      	ldr	r3, [pc, #312]	; (8003f48 <straight_table2+0x378>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0d2      	beq.n	8003dbc <straight_table2+0x1ec>
		straight.displacement=0;
 8003e16:	4b42      	ldr	r3, [pc, #264]	; (8003f20 <straight_table2+0x350>)
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003e1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	db03      	blt.n	8003e34 <straight_table2+0x264>
 8003e2c:	4a3c      	ldr	r2, [pc, #240]	; (8003f20 <straight_table2+0x350>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6053      	str	r3, [r2, #4]
 8003e32:	e006      	b.n	8003e42 <straight_table2+0x272>
			}else{straight.acceleration = -input_acceleration;}
 8003e34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e38:	eef1 7a67 	vneg.f32	s15, s15
 8003e3c:	4b38      	ldr	r3, [pc, #224]	; (8003f20 <straight_table2+0x350>)
 8003e3e:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <straight_table2+0x35c>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003e48:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e54:	dd0e      	ble.n	8003e74 <straight_table2+0x2a4>
 8003e56:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e66:	dd05      	ble.n	8003e74 <straight_table2+0x2a4>
 8003e68:	4b30      	ldr	r3, [pc, #192]	; (8003f2c <straight_table2+0x35c>)
 8003e6a:	2205      	movs	r2, #5
 8003e6c:	701a      	strb	r2, [r3, #0]
 8003e6e:	4a2c      	ldr	r2, [pc, #176]	; (8003f20 <straight_table2+0x350>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003e74:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e80:	dd14      	ble.n	8003eac <straight_table2+0x2dc>
 8003e82:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e86:	eef1 7a67 	vneg.f32	s15, s15
 8003e8a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	d509      	bpl.n	8003eac <straight_table2+0x2dc>
 8003e98:	4b24      	ldr	r3, [pc, #144]	; (8003f2c <straight_table2+0x35c>)
 8003e9a:	2206      	movs	r2, #6
 8003e9c:	701a      	strb	r2, [r3, #0]
 8003e9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003ea2:	eef1 7a67 	vneg.f32	s15, s15
 8003ea6:	4b1e      	ldr	r3, [pc, #120]	; (8003f20 <straight_table2+0x350>)
 8003ea8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003eac:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb8:	d514      	bpl.n	8003ee4 <straight_table2+0x314>
 8003eba:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ebe:	eef1 7a67 	vneg.f32	s15, s15
 8003ec2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ec6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ece:	dd09      	ble.n	8003ee4 <straight_table2+0x314>
 8003ed0:	4b16      	ldr	r3, [pc, #88]	; (8003f2c <straight_table2+0x35c>)
 8003ed2:	2205      	movs	r2, #5
 8003ed4:	701a      	strb	r2, [r3, #0]
 8003ed6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003eda:	eef1 7a67 	vneg.f32	s15, s15
 8003ede:	4b10      	ldr	r3, [pc, #64]	; (8003f20 <straight_table2+0x350>)
 8003ee0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003ee4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef0:	f140 825c 	bpl.w	80043ac <straight_table2+0x7dc>
 8003ef4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ef8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003efc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f04:	f140 8252 	bpl.w	80043ac <straight_table2+0x7dc>
 8003f08:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <straight_table2+0x35c>)
 8003f0a:	2206      	movs	r2, #6
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	4a04      	ldr	r2, [pc, #16]	; (8003f20 <straight_table2+0x350>)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6053      	str	r3, [r2, #4]
 8003f14:	e24a      	b.n	80043ac <straight_table2+0x7dc>
 8003f16:	bf00      	nop
 8003f18:	20000535 	.word	0x20000535
 8003f1c:	200004f4 	.word	0x200004f4
 8003f20:	200004dc 	.word	0x200004dc
 8003f24:	200004e8 	.word	0x200004e8
 8003f28:	20000811 	.word	0x20000811
 8003f2c:	20000810 	.word	0x20000810
 8003f30:	20000534 	.word	0x20000534
 8003f34:	2000059c 	.word	0x2000059c
 8003f38:	20000540 	.word	0x20000540
 8003f3c:	200005d8 	.word	0x200005d8
 8003f40:	425c0000 	.word	0x425c0000
 8003f44:	200005dc 	.word	0x200005dc
 8003f48:	200005fe 	.word	0x200005fe
	}else if(motor_mode.WallCutMode==2){
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 80c9 	bne.w	80040e6 <straight_table2+0x516>
		//左壁or右壁がstart～endの中にあれば抜ける
		g_acc_flag=0;
 8003f54:	4bb8      	ldr	r3, [pc, #736]	; (8004238 <straight_table2+0x668>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003f5a:	4bb8      	ldr	r3, [pc, #736]	; (800423c <straight_table2+0x66c>)
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003f62:	bf00      	nop
 8003f64:	4bb6      	ldr	r3, [pc, #728]	; (8004240 <straight_table2+0x670>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f72:	d913      	bls.n	8003f9c <straight_table2+0x3cc>
 8003f74:	4bb2      	ldr	r3, [pc, #712]	; (8004240 <straight_table2+0x670>)
 8003f76:	edd3 7a00 	vldr	s15, [r3]
 8003f7a:	eeba 7a00 	vmov.f32	s14, #160	; 0xc1000000 -8.0
 8003f7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f86:	d909      	bls.n	8003f9c <straight_table2+0x3cc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003f88:	4bad      	ldr	r3, [pc, #692]	; (8004240 <straight_table2+0x670>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003f8e:	ed9f 7aad 	vldr	s14, [pc, #692]	; 8004244 <straight_table2+0x674>
 8003f92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	db20      	blt.n	8003fde <straight_table2+0x40e>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003f9c:	4baa      	ldr	r3, [pc, #680]	; (8004248 <straight_table2+0x678>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003fa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	d913      	bls.n	8003fd4 <straight_table2+0x404>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003fac:	4ba6      	ldr	r3, [pc, #664]	; (8004248 <straight_table2+0x678>)
 8003fae:	edd3 7a00 	vldr	s15, [r3]
 8003fb2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8003fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fbe:	d909      	bls.n	8003fd4 <straight_table2+0x404>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003fc0:	4ba1      	ldr	r3, [pc, #644]	; (8004248 <straight_table2+0x678>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003fc6:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004244 <straight_table2+0x674>
 8003fca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd2:	db04      	blt.n	8003fde <straight_table2+0x40e>
			  front_wall_break_45==0){}
 8003fd4:	4b9d      	ldr	r3, [pc, #628]	; (800424c <straight_table2+0x67c>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0c2      	beq.n	8003f64 <straight_table2+0x394>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		enc.sigma_error=0;
 8003fde:	4b9c      	ldr	r3, [pc, #624]	; (8004250 <straight_table2+0x680>)
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8003fe6:	4b95      	ldr	r3, [pc, #596]	; (800423c <straight_table2+0x66c>)
 8003fe8:	f04f 0200 	mov.w	r2, #0
 8003fec:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003fee:	edd7 7a02 	vldr	s15, [r7, #8]
 8003ff2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ffa:	db03      	blt.n	8004004 <straight_table2+0x434>
 8003ffc:	4a8f      	ldr	r2, [pc, #572]	; (800423c <straight_table2+0x66c>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6053      	str	r3, [r2, #4]
 8004002:	e006      	b.n	8004012 <straight_table2+0x442>
			}else{straight.acceleration = -input_acceleration;}
 8004004:	edd7 7a01 	vldr	s15, [r7, #4]
 8004008:	eef1 7a67 	vneg.f32	s15, s15
 800400c:	4b8b      	ldr	r3, [pc, #556]	; (800423c <straight_table2+0x66c>)
 800400e:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8004012:	4b89      	ldr	r3, [pc, #548]	; (8004238 <straight_table2+0x668>)
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004018:	edd7 7a05 	vldr	s15, [r7, #20]
 800401c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004024:	dd0e      	ble.n	8004044 <straight_table2+0x474>
 8004026:	ed97 7a07 	vldr	s14, [r7, #28]
 800402a:	edd7 7a05 	vldr	s15, [r7, #20]
 800402e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	dd05      	ble.n	8004044 <straight_table2+0x474>
 8004038:	4b7f      	ldr	r3, [pc, #508]	; (8004238 <straight_table2+0x668>)
 800403a:	2205      	movs	r2, #5
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	4a7f      	ldr	r2, [pc, #508]	; (800423c <straight_table2+0x66c>)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004044:	edd7 7a05 	vldr	s15, [r7, #20]
 8004048:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800404c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004050:	dd14      	ble.n	800407c <straight_table2+0x4ac>
 8004052:	edd7 7a05 	vldr	s15, [r7, #20]
 8004056:	eef1 7a67 	vneg.f32	s15, s15
 800405a:	ed97 7a07 	vldr	s14, [r7, #28]
 800405e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d509      	bpl.n	800407c <straight_table2+0x4ac>
 8004068:	4b73      	ldr	r3, [pc, #460]	; (8004238 <straight_table2+0x668>)
 800406a:	2206      	movs	r2, #6
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004072:	eef1 7a67 	vneg.f32	s15, s15
 8004076:	4b71      	ldr	r3, [pc, #452]	; (800423c <straight_table2+0x66c>)
 8004078:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800407c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004080:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004088:	d514      	bpl.n	80040b4 <straight_table2+0x4e4>
 800408a:	edd7 7a05 	vldr	s15, [r7, #20]
 800408e:	eef1 7a67 	vneg.f32	s15, s15
 8004092:	ed97 7a07 	vldr	s14, [r7, #28]
 8004096:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409e:	dd09      	ble.n	80040b4 <straight_table2+0x4e4>
 80040a0:	4b65      	ldr	r3, [pc, #404]	; (8004238 <straight_table2+0x668>)
 80040a2:	2205      	movs	r2, #5
 80040a4:	701a      	strb	r2, [r3, #0]
 80040a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80040aa:	eef1 7a67 	vneg.f32	s15, s15
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <straight_table2+0x66c>)
 80040b0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80040b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80040b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040c0:	f140 8174 	bpl.w	80043ac <straight_table2+0x7dc>
 80040c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80040c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80040cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	f140 816a 	bpl.w	80043ac <straight_table2+0x7dc>
 80040d8:	4b57      	ldr	r3, [pc, #348]	; (8004238 <straight_table2+0x668>)
 80040da:	2206      	movs	r2, #6
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	4a57      	ldr	r2, [pc, #348]	; (800423c <straight_table2+0x66c>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6053      	str	r3, [r2, #4]
 80040e4:	e162      	b.n	80043ac <straight_table2+0x7dc>
	}else if(motor_mode.WallCutMode==3){
 80040e6:	78fb      	ldrb	r3, [r7, #3]
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	f040 80b9 	bne.w	8004260 <straight_table2+0x690>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 80040ee:	4b52      	ldr	r3, [pc, #328]	; (8004238 <straight_table2+0x668>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80040f4:	4b51      	ldr	r3, [pc, #324]	; (800423c <straight_table2+0x66c>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80040fc:	bf00      	nop
 80040fe:	4b55      	ldr	r3, [pc, #340]	; (8004254 <straight_table2+0x684>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800410c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004110:	d409      	bmi.n	8004126 <straight_table2+0x556>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8004112:	4b50      	ldr	r3, [pc, #320]	; (8004254 <straight_table2+0x684>)
 8004114:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8004118:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8004258 <straight_table2+0x688>
 800411c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	dd04      	ble.n	8004130 <straight_table2+0x560>
				  front_wall_break_45slant==0){}
 8004126:	4b4d      	ldr	r3, [pc, #308]	; (800425c <straight_table2+0x68c>)
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800412c:	2b00      	cmp	r3, #0
 800412e:	d0e6      	beq.n	80040fe <straight_table2+0x52e>
		enc.sigma_error=0;
 8004130:	4b47      	ldr	r3, [pc, #284]	; (8004250 <straight_table2+0x680>)
 8004132:	f04f 0200 	mov.w	r2, #0
 8004136:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 8004138:	4b40      	ldr	r3, [pc, #256]	; (800423c <straight_table2+0x66c>)
 800413a:	f04f 0200 	mov.w	r2, #0
 800413e:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8004140:	edd7 7a02 	vldr	s15, [r7, #8]
 8004144:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	db03      	blt.n	8004156 <straight_table2+0x586>
 800414e:	4a3b      	ldr	r2, [pc, #236]	; (800423c <straight_table2+0x66c>)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6053      	str	r3, [r2, #4]
 8004154:	e006      	b.n	8004164 <straight_table2+0x594>
			}else{straight.acceleration = -input_acceleration;}
 8004156:	edd7 7a01 	vldr	s15, [r7, #4]
 800415a:	eef1 7a67 	vneg.f32	s15, s15
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <straight_table2+0x66c>)
 8004160:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8004164:	4b34      	ldr	r3, [pc, #208]	; (8004238 <straight_table2+0x668>)
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800416a:	edd7 7a05 	vldr	s15, [r7, #20]
 800416e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	dd0e      	ble.n	8004196 <straight_table2+0x5c6>
 8004178:	ed97 7a07 	vldr	s14, [r7, #28]
 800417c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004180:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	dd05      	ble.n	8004196 <straight_table2+0x5c6>
 800418a:	4b2b      	ldr	r3, [pc, #172]	; (8004238 <straight_table2+0x668>)
 800418c:	2205      	movs	r2, #5
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	4a2a      	ldr	r2, [pc, #168]	; (800423c <straight_table2+0x66c>)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004196:	edd7 7a05 	vldr	s15, [r7, #20]
 800419a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800419e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a2:	dd14      	ble.n	80041ce <straight_table2+0x5fe>
 80041a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80041a8:	eef1 7a67 	vneg.f32	s15, s15
 80041ac:	ed97 7a07 	vldr	s14, [r7, #28]
 80041b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b8:	d509      	bpl.n	80041ce <straight_table2+0x5fe>
 80041ba:	4b1f      	ldr	r3, [pc, #124]	; (8004238 <straight_table2+0x668>)
 80041bc:	2206      	movs	r2, #6
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80041c4:	eef1 7a67 	vneg.f32	s15, s15
 80041c8:	4b1c      	ldr	r3, [pc, #112]	; (800423c <straight_table2+0x66c>)
 80041ca:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80041ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80041d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041da:	d514      	bpl.n	8004206 <straight_table2+0x636>
 80041dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80041e0:	eef1 7a67 	vneg.f32	s15, s15
 80041e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80041e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	dd09      	ble.n	8004206 <straight_table2+0x636>
 80041f2:	4b11      	ldr	r3, [pc, #68]	; (8004238 <straight_table2+0x668>)
 80041f4:	2205      	movs	r2, #5
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80041fc:	eef1 7a67 	vneg.f32	s15, s15
 8004200:	4b0e      	ldr	r3, [pc, #56]	; (800423c <straight_table2+0x66c>)
 8004202:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004206:	edd7 7a05 	vldr	s15, [r7, #20]
 800420a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004212:	f140 80cb 	bpl.w	80043ac <straight_table2+0x7dc>
 8004216:	ed97 7a07 	vldr	s14, [r7, #28]
 800421a:	edd7 7a05 	vldr	s15, [r7, #20]
 800421e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004226:	f140 80c1 	bpl.w	80043ac <straight_table2+0x7dc>
 800422a:	4b03      	ldr	r3, [pc, #12]	; (8004238 <straight_table2+0x668>)
 800422c:	2206      	movs	r2, #6
 800422e:	701a      	strb	r2, [r3, #0]
 8004230:	4a02      	ldr	r2, [pc, #8]	; (800423c <straight_table2+0x66c>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6053      	str	r3, [r2, #4]
 8004236:	e0b9      	b.n	80043ac <straight_table2+0x7dc>
 8004238:	20000810 	.word	0x20000810
 800423c:	200004dc 	.word	0x200004dc
 8004240:	200005e0 	.word	0x200005e0
 8004244:	42000000 	.word	0x42000000
 8004248:	200005e4 	.word	0x200005e4
 800424c:	200005ff 	.word	0x200005ff
 8004250:	20000540 	.word	0x20000540
 8004254:	200005f0 	.word	0x200005f0
 8004258:	420c0000 	.word	0x420c0000
 800425c:	20000600 	.word	0x20000600
	}else if(motor_mode.WallCutMode==4){
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b04      	cmp	r3, #4
 8004264:	f040 80a2 	bne.w	80043ac <straight_table2+0x7dc>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける

		g_acc_flag=0;
 8004268:	4baa      	ldr	r3, [pc, #680]	; (8004514 <straight_table2+0x944>)
 800426a:	2200      	movs	r2, #0
 800426c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800426e:	4baa      	ldr	r3, [pc, #680]	; (8004518 <straight_table2+0x948>)
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004276:	bf00      	nop
 8004278:	4ba8      	ldr	r3, [pc, #672]	; (800451c <straight_table2+0x94c>)
 800427a:	edd3 7a00 	vldr	s15, [r3]
 800427e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428a:	d409      	bmi.n	80042a0 <straight_table2+0x6d0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800428c:	4ba3      	ldr	r3, [pc, #652]	; (800451c <straight_table2+0x94c>)
 800428e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8004292:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8004520 <straight_table2+0x950>
 8004296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	dd04      	ble.n	80042aa <straight_table2+0x6da>
				  front_wall_break_45slant==0){}
 80042a0:	4ba0      	ldr	r3, [pc, #640]	; (8004524 <straight_table2+0x954>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0e6      	beq.n	8004278 <straight_table2+0x6a8>
		enc.sigma_error=0;
 80042aa:	4b9f      	ldr	r3, [pc, #636]	; (8004528 <straight_table2+0x958>)
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	609a      	str	r2, [r3, #8]
		straight.displacement=0;
 80042b2:	4b99      	ldr	r3, [pc, #612]	; (8004518 <straight_table2+0x948>)
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80042ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80042be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c6:	db03      	blt.n	80042d0 <straight_table2+0x700>
 80042c8:	4a93      	ldr	r2, [pc, #588]	; (8004518 <straight_table2+0x948>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6053      	str	r3, [r2, #4]
 80042ce:	e006      	b.n	80042de <straight_table2+0x70e>
			}else{straight.acceleration = -input_acceleration;}
 80042d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80042d4:	eef1 7a67 	vneg.f32	s15, s15
 80042d8:	4b8f      	ldr	r3, [pc, #572]	; (8004518 <straight_table2+0x948>)
 80042da:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80042de:	4b8d      	ldr	r3, [pc, #564]	; (8004514 <straight_table2+0x944>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80042e4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	dd0e      	ble.n	8004310 <straight_table2+0x740>
 80042f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80042f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80042fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004302:	dd05      	ble.n	8004310 <straight_table2+0x740>
 8004304:	4b83      	ldr	r3, [pc, #524]	; (8004514 <straight_table2+0x944>)
 8004306:	2205      	movs	r2, #5
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	4a83      	ldr	r2, [pc, #524]	; (8004518 <straight_table2+0x948>)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004310:	edd7 7a05 	vldr	s15, [r7, #20]
 8004314:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800431c:	dd14      	ble.n	8004348 <straight_table2+0x778>
 800431e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004322:	eef1 7a67 	vneg.f32	s15, s15
 8004326:	ed97 7a07 	vldr	s14, [r7, #28]
 800432a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	d509      	bpl.n	8004348 <straight_table2+0x778>
 8004334:	4b77      	ldr	r3, [pc, #476]	; (8004514 <straight_table2+0x944>)
 8004336:	2206      	movs	r2, #6
 8004338:	701a      	strb	r2, [r3, #0]
 800433a:	edd7 7a01 	vldr	s15, [r7, #4]
 800433e:	eef1 7a67 	vneg.f32	s15, s15
 8004342:	4b75      	ldr	r3, [pc, #468]	; (8004518 <straight_table2+0x948>)
 8004344:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8004348:	edd7 7a05 	vldr	s15, [r7, #20]
 800434c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004354:	d514      	bpl.n	8004380 <straight_table2+0x7b0>
 8004356:	edd7 7a05 	vldr	s15, [r7, #20]
 800435a:	eef1 7a67 	vneg.f32	s15, s15
 800435e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004362:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	dd09      	ble.n	8004380 <straight_table2+0x7b0>
 800436c:	4b69      	ldr	r3, [pc, #420]	; (8004514 <straight_table2+0x944>)
 800436e:	2205      	movs	r2, #5
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	edd7 7a01 	vldr	s15, [r7, #4]
 8004376:	eef1 7a67 	vneg.f32	s15, s15
 800437a:	4b67      	ldr	r3, [pc, #412]	; (8004518 <straight_table2+0x948>)
 800437c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8004380:	edd7 7a05 	vldr	s15, [r7, #20]
 8004384:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	d50e      	bpl.n	80043ac <straight_table2+0x7dc>
 800438e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004392:	edd7 7a05 	vldr	s15, [r7, #20]
 8004396:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800439a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800439e:	d505      	bpl.n	80043ac <straight_table2+0x7dc>
 80043a0:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <straight_table2+0x944>)
 80043a2:	2206      	movs	r2, #6
 80043a4:	701a      	strb	r2, [r3, #0]
 80043a6:	4a5c      	ldr	r2, [pc, #368]	; (8004518 <straight_table2+0x948>)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80043ac:	78bb      	ldrb	r3, [r7, #2]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f040 80a7 	bne.w	8004502 <straight_table2+0x932>
	while (g_acc_flag!=4){
 80043b4:	e074      	b.n	80044a0 <straight_table2+0x8d0>
		if(motor_mode.WallCutMode==1){
 80043b6:	78fb      	ldrb	r3, [r7, #3]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d120      	bne.n	80043fe <straight_table2+0x82e>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80043bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80043c0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80043c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043c8:	4b58      	ldr	r3, [pc, #352]	; (800452c <straight_table2+0x95c>)
 80043ca:	edd3 7a00 	vldr	s15, [r3]
 80043ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d90e      	bls.n	80043f6 <straight_table2+0x826>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80043d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80043dc:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80043e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80043e4:	4b52      	ldr	r3, [pc, #328]	; (8004530 <straight_table2+0x960>)
 80043e6:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80043ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f2:	d900      	bls.n	80043f6 <straight_table2+0x826>
 80043f4:	e054      	b.n	80044a0 <straight_table2+0x8d0>
				g_acc_flag=4;
 80043f6:	4b47      	ldr	r3, [pc, #284]	; (8004514 <straight_table2+0x944>)
 80043f8:	2204      	movs	r2, #4
 80043fa:	701a      	strb	r2, [r3, #0]
				break;
 80043fc:	e055      	b.n	80044aa <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==2){
 80043fe:	78fb      	ldrb	r3, [r7, #3]
 8004400:	2b02      	cmp	r3, #2
 8004402:	d121      	bne.n	8004448 <straight_table2+0x878>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8004404:	edd7 7a05 	vldr	s15, [r7, #20]
 8004408:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800440c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004410:	4b48      	ldr	r3, [pc, #288]	; (8004534 <straight_table2+0x964>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800441a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441e:	d900      	bls.n	8004422 <straight_table2+0x852>
 8004420:	e03e      	b.n	80044a0 <straight_table2+0x8d0>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8004422:	edd7 7a05 	vldr	s15, [r7, #20]
 8004426:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800442a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800442e:	4b42      	ldr	r3, [pc, #264]	; (8004538 <straight_table2+0x968>)
 8004430:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8004434:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443c:	d900      	bls.n	8004440 <straight_table2+0x870>
 800443e:	e02f      	b.n	80044a0 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004440:	4b34      	ldr	r3, [pc, #208]	; (8004514 <straight_table2+0x944>)
 8004442:	2204      	movs	r2, #4
 8004444:	701a      	strb	r2, [r3, #0]
				break;
 8004446:	e030      	b.n	80044aa <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==3){
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d112      	bne.n	8004474 <straight_table2+0x8a4>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 800444e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800445a:	4b38      	ldr	r3, [pc, #224]	; (800453c <straight_table2+0x96c>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004468:	d900      	bls.n	800446c <straight_table2+0x89c>
 800446a:	e019      	b.n	80044a0 <straight_table2+0x8d0>
				g_acc_flag=4;
 800446c:	4b29      	ldr	r3, [pc, #164]	; (8004514 <straight_table2+0x944>)
 800446e:	2204      	movs	r2, #4
 8004470:	701a      	strb	r2, [r3, #0]
				break;
 8004472:	e01a      	b.n	80044aa <straight_table2+0x8da>
			}
		}else if(motor_mode.WallCutMode==4){
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d112      	bne.n	80044a0 <straight_table2+0x8d0>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800447a:	edd7 7a05 	vldr	s15, [r7, #20]
 800447e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8004482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004486:	4b25      	ldr	r3, [pc, #148]	; (800451c <straight_table2+0x94c>)
 8004488:	edd3 7a00 	vldr	s15, [r3]
 800448c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004494:	d900      	bls.n	8004498 <straight_table2+0x8c8>
 8004496:	e003      	b.n	80044a0 <straight_table2+0x8d0>
				g_acc_flag=4;
 8004498:	4b1e      	ldr	r3, [pc, #120]	; (8004514 <straight_table2+0x944>)
 800449a:	2204      	movs	r2, #4
 800449c:	701a      	strb	r2, [r3, #0]
				break;
 800449e:	e004      	b.n	80044aa <straight_table2+0x8da>
	while (g_acc_flag!=4){
 80044a0:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <straight_table2+0x944>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d185      	bne.n	80043b6 <straight_table2+0x7e6>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 80044aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80044ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	d10e      	bne.n	80044d6 <straight_table2+0x906>
		wait_ms_NoReset(100);
 80044b8:	2064      	movs	r0, #100	; 0x64
 80044ba:	f004 fb49 	bl	8008b50 <wait_ms_NoReset>
		modeacc = 0;
 80044be:	4b20      	ldr	r3, [pc, #128]	; (8004540 <straight_table2+0x970>)
 80044c0:	2200      	movs	r2, #0
 80044c2:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 80044c4:	2003      	movs	r0, #3
 80044c6:	f004 f845 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 80044ca:	2003      	movs	r0, #3
 80044cc:	f004 f81a 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 80044d0:	2064      	movs	r0, #100	; 0x64
 80044d2:	f004 fb3d 	bl	8008b50 <wait_ms_NoReset>
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80044d6:	4b1b      	ldr	r3, [pc, #108]	; (8004544 <straight_table2+0x974>)
 80044d8:	ed93 7a00 	vldr	s14, [r3]
 80044dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80044e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044e4:	4b17      	ldr	r3, [pc, #92]	; (8004544 <straight_table2+0x974>)
 80044e6:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80044ea:	4b17      	ldr	r3, [pc, #92]	; (8004548 <straight_table2+0x978>)
 80044ec:	ed93 7a00 	vldr	s14, [r3]
 80044f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80044f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044f8:	4b13      	ldr	r3, [pc, #76]	; (8004548 <straight_table2+0x978>)
 80044fa:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80044fe:	f004 f85d 	bl	80085bc <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8004502:	4b05      	ldr	r3, [pc, #20]	; (8004518 <straight_table2+0x948>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	ee07 3a90 	vmov	s15, r3



}
 800450a:	eeb0 0a67 	vmov.f32	s0, s15
 800450e:	3720      	adds	r7, #32
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	20000810 	.word	0x20000810
 8004518:	200004dc 	.word	0x200004dc
 800451c:	200005f4 	.word	0x200005f4
 8004520:	420c0000 	.word	0x420c0000
 8004524:	20000600 	.word	0x20000600
 8004528:	20000540 	.word	0x20000540
 800452c:	200005dc 	.word	0x200005dc
 8004530:	200005d8 	.word	0x200005d8
 8004534:	200005e4 	.word	0x200005e4
 8004538:	200005e0 	.word	0x200005e0
 800453c:	200005f0 	.word	0x200005f0
 8004540:	20000534 	.word	0x20000534
 8004544:	20000220 	.word	0x20000220
 8004548:	20000224 	.word	0x20000224

0800454c <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	ed87 0a03 	vstr	s0, [r7, #12]
 8004556:	60b8      	str	r0, [r7, #8]
 8004558:	460b      	mov	r3, r1
 800455a:	71fb      	strb	r3, [r7, #7]
 800455c:	4613      	mov	r3, r2
 800455e:	71bb      	strb	r3, [r7, #6]
	if(noGoalPillarMode==1){
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <End_straight+0xc0>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d132      	bne.n	80045ce <End_straight+0x82>
		motor_mode.WallCutMode=0;
 8004568:	2300      	movs	r3, #0
 800456a:	72fb      	strb	r3, [r7, #11]
	}
	while (g_acc_flag!=4){
 800456c:	e02f      	b.n	80045ce <End_straight+0x82>
		if(right_wall == 0 || left_wall == 0){
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	f083 0301 	eor.w	r3, r3, #1
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d105      	bne.n	8004586 <End_straight+0x3a>
 800457a:	79bb      	ldrb	r3, [r7, #6]
 800457c:	f083 0301 	eor.w	r3, r3, #1
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d023      	beq.n	80045ce <End_straight+0x82>
		if(motor_mode.WallCutMode==1){
 8004586:	7afb      	ldrb	r3, [r7, #11]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d120      	bne.n	80045ce <End_straight+0x82>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 800458c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004590:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8004594:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004598:	4b1d      	ldr	r3, [pc, #116]	; (8004610 <End_straight+0xc4>)
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a6:	d90e      	bls.n	80045c6 <End_straight+0x7a>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 80045a8:	edd7 7a03 	vldr	s15, [r7, #12]
 80045ac:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80045b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <End_straight+0xc8>)
 80045b6:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80045ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c2:	d900      	bls.n	80045c6 <End_straight+0x7a>
 80045c4:	e003      	b.n	80045ce <End_straight+0x82>
						g_acc_flag=4;
 80045c6:	4b14      	ldr	r3, [pc, #80]	; (8004618 <End_straight+0xcc>)
 80045c8:	2204      	movs	r2, #4
 80045ca:	701a      	strb	r2, [r3, #0]
						break;
 80045cc:	e004      	b.n	80045d8 <End_straight+0x8c>
	while (g_acc_flag!=4){
 80045ce:	4b12      	ldr	r3, [pc, #72]	; (8004618 <End_straight+0xcc>)
 80045d0:	781b      	ldrb	r3, [r3, #0]
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b04      	cmp	r3, #4
 80045d6:	d1ca      	bne.n	800456e <End_straight+0x22>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80045d8:	4b10      	ldr	r3, [pc, #64]	; (800461c <End_straight+0xd0>)
 80045da:	ed93 7a00 	vldr	s14, [r3]
 80045de:	edd7 7a03 	vldr	s15, [r7, #12]
 80045e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <End_straight+0xd0>)
 80045e8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80045ec:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <End_straight+0xd4>)
 80045ee:	ed93 7a00 	vldr	s14, [r3]
 80045f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80045f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <End_straight+0xd4>)
 80045fc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004600:	f003 ffdc 	bl	80085bc <pl_DriveMotor_stop>
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	20000535 	.word	0x20000535
 8004610:	200005dc 	.word	0x200005dc
 8004614:	200005d8 	.word	0x200005d8
 8004618:	20000810 	.word	0x20000810
 800461c:	20000220 	.word	0x20000220
 8004620:	20000224 	.word	0x20000224

08004624 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004624:	b580      	push	{r7, lr}
 8004626:	b088      	sub	sp, #32
 8004628:	af00      	add	r7, sp, #0
 800462a:	ed87 0a05 	vstr	s0, [r7, #20]
 800462e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004632:	ed87 1a03 	vstr	s2, [r7, #12]
 8004636:	edc7 1a02 	vstr	s3, [r7, #8]
 800463a:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 800463e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004642:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8004646:	edd7 7a04 	vldr	s15, [r7, #16]
 800464a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800464e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004652:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004656:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800465a:	ed97 7a01 	vldr	s14, [r7, #4]
 800465e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004662:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8004666:	edd7 7a01 	vldr	s15, [r7, #4]
 800466a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800466e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004672:	d505      	bpl.n	8004680 <turning_table2+0x5c>
 8004674:	edd7 7a01 	vldr	s15, [r7, #4]
 8004678:	eef1 7a67 	vneg.f32	s15, s15
 800467c:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8004680:	4a6e      	ldr	r2, [pc, #440]	; (800483c <turning_table2+0x218>)
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8004686:	4a6d      	ldr	r2, [pc, #436]	; (800483c <turning_table2+0x218>)
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 800468c:	4a6b      	ldr	r2, [pc, #428]	; (800483c <turning_table2+0x218>)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004692:	4a6a      	ldr	r2, [pc, #424]	; (800483c <turning_table2+0x218>)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8004698:	4a68      	ldr	r2, [pc, #416]	; (800483c <turning_table2+0x218>)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 800469e:	edd7 7a02 	vldr	s15, [r7, #8]
 80046a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	db03      	blt.n	80046b4 <turning_table2+0x90>
 80046ac:	4a64      	ldr	r2, [pc, #400]	; (8004840 <turning_table2+0x21c>)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6053      	str	r3, [r2, #4]
 80046b2:	e006      	b.n	80046c2 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 80046b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80046b8:	eef1 7a67 	vneg.f32	s15, s15
 80046bc:	4b60      	ldr	r3, [pc, #384]	; (8004840 <turning_table2+0x21c>)
 80046be:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 80046c2:	4a5f      	ldr	r2, [pc, #380]	; (8004840 <turning_table2+0x21c>)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 80046c8:	4b5d      	ldr	r3, [pc, #372]	; (8004840 <turning_table2+0x21c>)
 80046ca:	f04f 0200 	mov.w	r2, #0
 80046ce:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 80046d0:	4b5c      	ldr	r3, [pc, #368]	; (8004844 <turning_table2+0x220>)
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 80046d8:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <turning_table2+0x220>)
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 80046e0:	4b58      	ldr	r3, [pc, #352]	; (8004844 <turning_table2+0x220>)
 80046e2:	f04f 0200 	mov.w	r2, #0
 80046e6:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80046e8:	4b57      	ldr	r3, [pc, #348]	; (8004848 <turning_table2+0x224>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80046ee:	4b57      	ldr	r3, [pc, #348]	; (800484c <turning_table2+0x228>)
 80046f0:	2201      	movs	r2, #1
 80046f2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 80046f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80046f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004700:	dd0e      	ble.n	8004720 <turning_table2+0xfc>
 8004702:	ed97 7a07 	vldr	s14, [r7, #28]
 8004706:	edd7 7a05 	vldr	s15, [r7, #20]
 800470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	dd05      	ble.n	8004720 <turning_table2+0xfc>
 8004714:	4b4d      	ldr	r3, [pc, #308]	; (800484c <turning_table2+0x228>)
 8004716:	2205      	movs	r2, #5
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	4a49      	ldr	r2, [pc, #292]	; (8004840 <turning_table2+0x21c>)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8004720:	edd7 7a05 	vldr	s15, [r7, #20]
 8004724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472c:	dd14      	ble.n	8004758 <turning_table2+0x134>
 800472e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004732:	eef1 7a67 	vneg.f32	s15, s15
 8004736:	ed97 7a07 	vldr	s14, [r7, #28]
 800473a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800473e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004742:	d509      	bpl.n	8004758 <turning_table2+0x134>
 8004744:	4b41      	ldr	r3, [pc, #260]	; (800484c <turning_table2+0x228>)
 8004746:	2206      	movs	r2, #6
 8004748:	701a      	strb	r2, [r3, #0]
 800474a:	edd7 7a01 	vldr	s15, [r7, #4]
 800474e:	eef1 7a67 	vneg.f32	s15, s15
 8004752:	4b3b      	ldr	r3, [pc, #236]	; (8004840 <turning_table2+0x21c>)
 8004754:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8004758:	edd7 7a05 	vldr	s15, [r7, #20]
 800475c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004764:	d514      	bpl.n	8004790 <turning_table2+0x16c>
 8004766:	edd7 7a05 	vldr	s15, [r7, #20]
 800476a:	eef1 7a67 	vneg.f32	s15, s15
 800476e:	ed97 7a07 	vldr	s14, [r7, #28]
 8004772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477a:	dd09      	ble.n	8004790 <turning_table2+0x16c>
 800477c:	4b33      	ldr	r3, [pc, #204]	; (800484c <turning_table2+0x228>)
 800477e:	2205      	movs	r2, #5
 8004780:	701a      	strb	r2, [r3, #0]
 8004782:	edd7 7a01 	vldr	s15, [r7, #4]
 8004786:	eef1 7a67 	vneg.f32	s15, s15
 800478a:	4b2d      	ldr	r3, [pc, #180]	; (8004840 <turning_table2+0x21c>)
 800478c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004790:	edd7 7a05 	vldr	s15, [r7, #20]
 8004794:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004798:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800479c:	d50e      	bpl.n	80047bc <turning_table2+0x198>
 800479e:	ed97 7a07 	vldr	s14, [r7, #28]
 80047a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80047a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ae:	d505      	bpl.n	80047bc <turning_table2+0x198>
 80047b0:	4b26      	ldr	r3, [pc, #152]	; (800484c <turning_table2+0x228>)
 80047b2:	2206      	movs	r2, #6
 80047b4:	701a      	strb	r2, [r3, #0]
 80047b6:	4a22      	ldr	r2, [pc, #136]	; (8004840 <turning_table2+0x21c>)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <turning_table2+0x22c>)
 80047be:	2202      	movs	r2, #2
 80047c0:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 80047c2:	f003 feed 	bl	80085a0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 80047c6:	bf00      	nop
 80047c8:	4b20      	ldr	r3, [pc, #128]	; (800484c <turning_table2+0x228>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b04      	cmp	r3, #4
 80047d0:	d1fa      	bne.n	80047c8 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 80047d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80047d6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80047da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047de:	d10f      	bne.n	8004800 <turning_table2+0x1dc>
		wait_ms_NoReset(300);
 80047e0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80047e4:	f004 f9b4 	bl	8008b50 <wait_ms_NoReset>
		modeacc = 0;
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <turning_table2+0x22c>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	701a      	strb	r2, [r3, #0]
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 80047ee:	2003      	movs	r0, #3
 80047f0:	f003 feb0 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 80047f4:	2003      	movs	r0, #3
 80047f6:	f003 fe85 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(100);
 80047fa:	2064      	movs	r0, #100	; 0x64
 80047fc:	f004 f9a8 	bl	8008b50 <wait_ms_NoReset>
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <turning_table2+0x230>)
 8004802:	ed93 7a00 	vldr	s14, [r3]
 8004806:	edd7 7a05 	vldr	s15, [r7, #20]
 800480a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <turning_table2+0x230>)
 8004810:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004814:	f003 fed2 	bl	80085bc <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004818:	4b0f      	ldr	r3, [pc, #60]	; (8004858 <turning_table2+0x234>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a0f      	ldr	r2, [pc, #60]	; (800485c <turning_table2+0x238>)
 800481e:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004820:	4b0f      	ldr	r3, [pc, #60]	; (8004860 <turning_table2+0x23c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a0f      	ldr	r2, [pc, #60]	; (8004864 <turning_table2+0x240>)
 8004826:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <turning_table2+0x21c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	ee07 3a90 	vmov	s15, r3
}
 8004830:	eeb0 0a67 	vmov.f32	s0, s15
 8004834:	3720      	adds	r7, #32
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000050c 	.word	0x2000050c
 8004840:	200004e8 	.word	0x200004e8
 8004844:	200004dc 	.word	0x200004dc
 8004848:	20000811 	.word	0x20000811
 800484c:	20000810 	.word	0x20000810
 8004850:	20000534 	.word	0x20000534
 8004854:	20000268 	.word	0x20000268
 8004858:	20000228 	.word	0x20000228
 800485c:	20000258 	.word	0x20000258
 8004860:	2000022c 	.word	0x2000022c
 8004864:	2000025c 	.word	0x2000025c

08004868 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b088      	sub	sp, #32
 800486c:	af00      	add	r7, sp, #0
 800486e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004872:	edc7 0a04 	vstr	s1, [r7, #16]
 8004876:	ed87 1a03 	vstr	s2, [r7, #12]
 800487a:	edc7 1a02 	vstr	s3, [r7, #8]
 800487e:	ed87 2a01 	vstr	s4, [r7, #4]
 8004882:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004886:	edd7 7a02 	vldr	s15, [r7, #8]
 800488a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800488e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004892:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004896:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800489a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800489e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80048a2:	ed97 7a00 	vldr	s14, [r7]
 80048a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048aa:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80048ae:	edd7 7a00 	vldr	s15, [r7]
 80048b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ba:	d505      	bpl.n	80048c8 <slalom_table2+0x60>
 80048bc:	edd7 7a00 	vldr	s15, [r7]
 80048c0:	eef1 7a67 	vneg.f32	s15, s15
 80048c4:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 80048c8:	4a5e      	ldr	r2, [pc, #376]	; (8004a44 <slalom_table2+0x1dc>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 80048ce:	4a5d      	ldr	r2, [pc, #372]	; (8004a44 <slalom_table2+0x1dc>)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 80048d4:	4a5b      	ldr	r2, [pc, #364]	; (8004a44 <slalom_table2+0x1dc>)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 80048da:	4a5a      	ldr	r2, [pc, #360]	; (8004a44 <slalom_table2+0x1dc>)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 80048e0:	4a58      	ldr	r2, [pc, #352]	; (8004a44 <slalom_table2+0x1dc>)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 80048e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80048ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048f2:	db03      	blt.n	80048fc <slalom_table2+0x94>
 80048f4:	4a54      	ldr	r2, [pc, #336]	; (8004a48 <slalom_table2+0x1e0>)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6053      	str	r3, [r2, #4]
 80048fa:	e006      	b.n	800490a <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 80048fc:	edd7 7a00 	vldr	s15, [r7]
 8004900:	eef1 7a67 	vneg.f32	s15, s15
 8004904:	4b50      	ldr	r3, [pc, #320]	; (8004a48 <slalom_table2+0x1e0>)
 8004906:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 800490a:	4a4f      	ldr	r2, [pc, #316]	; (8004a48 <slalom_table2+0x1e0>)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8004910:	4b4d      	ldr	r3, [pc, #308]	; (8004a48 <slalom_table2+0x1e0>)
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004918:	4a4c      	ldr	r2, [pc, #304]	; (8004a4c <slalom_table2+0x1e4>)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 800491e:	4b4b      	ldr	r3, [pc, #300]	; (8004a4c <slalom_table2+0x1e4>)
 8004920:	f04f 0200 	mov.w	r2, #0
 8004924:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004926:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <slalom_table2+0x1e4>)
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800492e:	4b48      	ldr	r3, [pc, #288]	; (8004a50 <slalom_table2+0x1e8>)
 8004930:	2200      	movs	r2, #0
 8004932:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004934:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <slalom_table2+0x1ec>)
 8004936:	2201      	movs	r2, #1
 8004938:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 800493a:	edd7 7a04 	vldr	s15, [r7, #16]
 800493e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004946:	dd0e      	ble.n	8004966 <slalom_table2+0xfe>
 8004948:	ed97 7a07 	vldr	s14, [r7, #28]
 800494c:	edd7 7a04 	vldr	s15, [r7, #16]
 8004950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004958:	dd05      	ble.n	8004966 <slalom_table2+0xfe>
 800495a:	4b3e      	ldr	r3, [pc, #248]	; (8004a54 <slalom_table2+0x1ec>)
 800495c:	2205      	movs	r2, #5
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	4a39      	ldr	r2, [pc, #228]	; (8004a48 <slalom_table2+0x1e0>)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8004966:	edd7 7a04 	vldr	s15, [r7, #16]
 800496a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800496e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004972:	dd14      	ble.n	800499e <slalom_table2+0x136>
 8004974:	edd7 7a04 	vldr	s15, [r7, #16]
 8004978:	eef1 7a67 	vneg.f32	s15, s15
 800497c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	d509      	bpl.n	800499e <slalom_table2+0x136>
 800498a:	4b32      	ldr	r3, [pc, #200]	; (8004a54 <slalom_table2+0x1ec>)
 800498c:	2206      	movs	r2, #6
 800498e:	701a      	strb	r2, [r3, #0]
 8004990:	edd7 7a00 	vldr	s15, [r7]
 8004994:	eef1 7a67 	vneg.f32	s15, s15
 8004998:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <slalom_table2+0x1e0>)
 800499a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 800499e:	edd7 7a04 	vldr	s15, [r7, #16]
 80049a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d514      	bpl.n	80049d6 <slalom_table2+0x16e>
 80049ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80049b0:	eef1 7a67 	vneg.f32	s15, s15
 80049b4:	ed97 7a07 	vldr	s14, [r7, #28]
 80049b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c0:	dd09      	ble.n	80049d6 <slalom_table2+0x16e>
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <slalom_table2+0x1ec>)
 80049c4:	2205      	movs	r2, #5
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	edd7 7a00 	vldr	s15, [r7]
 80049cc:	eef1 7a67 	vneg.f32	s15, s15
 80049d0:	4b1d      	ldr	r3, [pc, #116]	; (8004a48 <slalom_table2+0x1e0>)
 80049d2:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 80049d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80049da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e2:	d50e      	bpl.n	8004a02 <slalom_table2+0x19a>
 80049e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80049e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80049ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f4:	d505      	bpl.n	8004a02 <slalom_table2+0x19a>
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <slalom_table2+0x1ec>)
 80049f8:	2206      	movs	r2, #6
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <slalom_table2+0x1e0>)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8004a02:	4b15      	ldr	r3, [pc, #84]	; (8004a58 <slalom_table2+0x1f0>)
 8004a04:	2204      	movs	r2, #4
 8004a06:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8004a08:	f003 fdca 	bl	80085a0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004a0c:	bf00      	nop
 8004a0e:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <slalom_table2+0x1ec>)
 8004a10:	781b      	ldrb	r3, [r3, #0]
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d1fa      	bne.n	8004a0e <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8004a18:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <slalom_table2+0x1f4>)
 8004a1a:	ed93 7a00 	vldr	s14, [r3]
 8004a1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a26:	4b0d      	ldr	r3, [pc, #52]	; (8004a5c <slalom_table2+0x1f4>)
 8004a28:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004a2c:	f003 fdc6 	bl	80085bc <pl_DriveMotor_stop>

	return turning.velocity;
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <slalom_table2+0x1e0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	ee07 3a90 	vmov	s15, r3
}
 8004a38:	eeb0 0a67 	vmov.f32	s0, s15
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	2000050c 	.word	0x2000050c
 8004a48:	200004e8 	.word	0x200004e8
 8004a4c:	200004dc 	.word	0x200004dc
 8004a50:	20000811 	.word	0x20000811
 8004a54:	20000810 	.word	0x20000810
 8004a58:	20000534 	.word	0x20000534
 8004a5c:	20000268 	.word	0x20000268

08004a60 <no_angle>:

void no_angle(void){
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004a64:	4b20      	ldr	r3, [pc, #128]	; (8004ae8 <no_angle+0x88>)
 8004a66:	f04f 0200 	mov.w	r2, #0
 8004a6a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004a6c:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <no_angle+0x88>)
 8004a6e:	f04f 0200 	mov.w	r2, #0
 8004a72:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004a74:	4b1c      	ldr	r3, [pc, #112]	; (8004ae8 <no_angle+0x88>)
 8004a76:	f04f 0200 	mov.w	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <no_angle+0x8c>)
 8004a7e:	f04f 0200 	mov.w	r2, #0
 8004a82:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <no_angle+0x8c>)
 8004a86:	f04f 0200 	mov.w	r2, #0
 8004a8a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004a8c:	4b17      	ldr	r3, [pc, #92]	; (8004aec <no_angle+0x8c>)
 8004a8e:	f04f 0200 	mov.w	r2, #0
 8004a92:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8004a94:	4b16      	ldr	r3, [pc, #88]	; (8004af0 <no_angle+0x90>)
 8004a96:	2203      	movs	r2, #3
 8004a98:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004a9a:	f003 fd81 	bl	80085a0 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004a9e:	e002      	b.n	8004aa6 <no_angle+0x46>
		HAL_Delay(1);
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f014 fde5 	bl	8019670 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <no_angle+0x94>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004aae:	ddf7      	ble.n	8004aa0 <no_angle+0x40>
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <no_angle+0x94>)
 8004ab2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004ab6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004aba:	ddf1      	ble.n	8004aa0 <no_angle+0x40>
 8004abc:	4b0d      	ldr	r3, [pc, #52]	; (8004af4 <no_angle+0x94>)
 8004abe:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004ac2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8004ac6:	ddeb      	ble.n	8004aa0 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8004ac8:	4b09      	ldr	r3, [pc, #36]	; (8004af0 <no_angle+0x90>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004ace:	f003 fd75 	bl	80085bc <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004ad2:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <no_angle+0x98>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <no_angle+0x9c>)
 8004ad8:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004ada:	4b09      	ldr	r3, [pc, #36]	; (8004b00 <no_angle+0xa0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <no_angle+0xa4>)
 8004ae0:	6013      	str	r3, [r2, #0]

}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200004e8 	.word	0x200004e8
 8004aec:	200004dc 	.word	0x200004dc
 8004af0:	20000534 	.word	0x20000534
 8004af4:	200002bc 	.word	0x200002bc
 8004af8:	20000228 	.word	0x20000228
 8004afc:	20000258 	.word	0x20000258
 8004b00:	2000022c 	.word	0x2000022c
 8004b04:	2000025c 	.word	0x2000025c

08004b08 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8004b08:	b5b0      	push	{r4, r5, r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004b12:	edc7 0a02 	vstr	s1, [r7, #8]
 8004b16:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <mollifier_slalom_table+0x108>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8004b20:	4a3b      	ldr	r2, [pc, #236]	; (8004c10 <mollifier_slalom_table+0x108>)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8004b26:	4a3a      	ldr	r2, [pc, #232]	; (8004c10 <mollifier_slalom_table+0x108>)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8004b2c:	4b39      	ldr	r3, [pc, #228]	; (8004c14 <mollifier_slalom_table+0x10c>)
 8004b2e:	f04f 0200 	mov.w	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004b34:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <mollifier_slalom_table+0x10c>)
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8004b3c:	4a36      	ldr	r2, [pc, #216]	; (8004c18 <mollifier_slalom_table+0x110>)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8004b42:	4b35      	ldr	r3, [pc, #212]	; (8004c18 <mollifier_slalom_table+0x110>)
 8004b44:	f04f 0200 	mov.w	r2, #0
 8004b48:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004b4a:	4b33      	ldr	r3, [pc, #204]	; (8004c18 <mollifier_slalom_table+0x110>)
 8004b4c:	f04f 0200 	mov.w	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8004b52:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <mollifier_slalom_table+0x114>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004b58:	4b31      	ldr	r3, [pc, #196]	; (8004c20 <mollifier_slalom_table+0x118>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8004b5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004b62:	eef0 7ae7 	vabs.f32	s15, s15
 8004b66:	ee17 0a90 	vmov	r0, s15
 8004b6a:	f7fb fd15 	bl	8000598 <__aeabi_f2d>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4614      	mov	r4, r2
 8004b74:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8004b78:	a321      	add	r3, pc, #132	; (adr r3, 8004c00 <mollifier_slalom_table+0xf8>)
 8004b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b7e:	4620      	mov	r0, r4
 8004b80:	4629      	mov	r1, r5
 8004b82:	f7fb fe8b 	bl	800089c <__aeabi_ddiv>
 8004b86:	4602      	mov	r2, r0
 8004b88:	460b      	mov	r3, r1
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	a31e      	add	r3, pc, #120	; (adr r3, 8004c08 <mollifier_slalom_table+0x100>)
 8004b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b94:	f7fb fd58 	bl	8000648 <__aeabi_dmul>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	4614      	mov	r4, r2
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fb fcf9 	bl	8000598 <__aeabi_f2d>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4620      	mov	r0, r4
 8004bac:	4629      	mov	r1, r5
 8004bae:	f7fb fe75 	bl	800089c <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	4619      	mov	r1, r3
 8004bba:	f7fc f81d 	bl	8000bf8 <__aeabi_d2f>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	4a18      	ldr	r2, [pc, #96]	; (8004c24 <mollifier_slalom_table+0x11c>)
 8004bc2:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8004bc4:	4b18      	ldr	r3, [pc, #96]	; (8004c28 <mollifier_slalom_table+0x120>)
 8004bc6:	2206      	movs	r2, #6
 8004bc8:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004bca:	f003 fce9 	bl	80085a0 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8004bce:	bf00      	nop
 8004bd0:	4b13      	ldr	r3, [pc, #76]	; (8004c20 <mollifier_slalom_table+0x118>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d1fa      	bne.n	8004bd0 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <mollifier_slalom_table+0x124>)
 8004bdc:	ed93 7a00 	vldr	s14, [r3]
 8004be0:	edd7 7a02 	vldr	s15, [r7, #8]
 8004be4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004be8:	4b10      	ldr	r3, [pc, #64]	; (8004c2c <mollifier_slalom_table+0x124>)
 8004bea:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004bee:	f003 fce5 	bl	80085bc <pl_DriveMotor_stop>

}
 8004bf2:	bf00      	nop
 8004bf4:	3710      	adds	r7, #16
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w
 8004c00:	f9db22d1 	.word	0xf9db22d1
 8004c04:	3fdc6a7e 	.word	0x3fdc6a7e
 8004c08:	362cef38 	.word	0x362cef38
 8004c0c:	3fd78b56 	.word	0x3fd78b56
 8004c10:	20000524 	.word	0x20000524
 8004c14:	200004e8 	.word	0x200004e8
 8004c18:	200004dc 	.word	0x200004dc
 8004c1c:	20000811 	.word	0x20000811
 8004c20:	20000810 	.word	0x20000810
 8004c24:	2000080c 	.word	0x2000080c
 8004c28:	20000534 	.word	0x20000534
 8004c2c:	20000268 	.word	0x20000268

08004c30 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8004c34:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <no_frontwall_straight+0x70>)
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8004c3c:	4b18      	ldr	r3, [pc, #96]	; (8004ca0 <no_frontwall_straight+0x70>)
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004c44:	4b16      	ldr	r3, [pc, #88]	; (8004ca0 <no_frontwall_straight+0x70>)
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004c4c:	4b15      	ldr	r3, [pc, #84]	; (8004ca4 <no_frontwall_straight+0x74>)
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004c54:	4b13      	ldr	r3, [pc, #76]	; (8004ca4 <no_frontwall_straight+0x74>)
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <no_frontwall_straight+0x74>)
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004c64:	4b10      	ldr	r3, [pc, #64]	; (8004ca8 <no_frontwall_straight+0x78>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <no_frontwall_straight+0x7c>)
 8004c6c:	2205      	movs	r2, #5
 8004c6e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004c70:	f003 fc96 	bl	80085a0 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004c74:	2096      	movs	r0, #150	; 0x96
 8004c76:	f003 ff6b 	bl	8008b50 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ca8 <no_frontwall_straight+0x78>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <no_frontwall_straight+0x7c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004c86:	f003 fc99 	bl	80085bc <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <no_frontwall_straight+0x80>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a09      	ldr	r2, [pc, #36]	; (8004cb4 <no_frontwall_straight+0x84>)
 8004c90:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004c92:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <no_frontwall_straight+0x88>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a09      	ldr	r2, [pc, #36]	; (8004cbc <no_frontwall_straight+0x8c>)
 8004c98:	6013      	str	r3, [r2, #0]

}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	200004e8 	.word	0x200004e8
 8004ca4:	200004dc 	.word	0x200004dc
 8004ca8:	2000059d 	.word	0x2000059d
 8004cac:	20000534 	.word	0x20000534
 8004cb0:	20000228 	.word	0x20000228
 8004cb4:	20000258 	.word	0x20000258
 8004cb8:	2000022c 	.word	0x2000022c
 8004cbc:	2000025c 	.word	0x2000025c

08004cc0 <feedforward_const_accel>:
#include "fail_safe.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004cc0:	b5b0      	push	{r4, r5, r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6178      	str	r0, [r7, #20]
 8004cc8:	ed87 0a04 	vstr	s0, [r7, #16]
 8004ccc:	edc7 0a03 	vstr	s1, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	ed87 1a01 	vstr	s2, [r7, #4]
 8004cd6:	edc7 1a00 	vstr	s3, [r7]

float ImT;//0.00000116 //kg/m^2 ロータ慣性モーメントターン用

if(highspeed_mode == 1){
 8004cda:	4bd3      	ldr	r3, [pc, #844]	; (8005028 <feedforward_const_accel+0x368>)
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d102      	bne.n	8004ce8 <feedforward_const_accel+0x28>
	ImT=0.00000052;
 8004ce2:	4bd2      	ldr	r3, [pc, #840]	; (800502c <feedforward_const_accel+0x36c>)
 8004ce4:	61fb      	str	r3, [r7, #28]
 8004ce6:	e001      	b.n	8004cec <feedforward_const_accel+0x2c>
}else{
	ImT=0.00000035;
 8004ce8:	4bd1      	ldr	r3, [pc, #836]	; (8005030 <feedforward_const_accel+0x370>)
 8004cea:	61fb      	str	r3, [r7, #28]

}

	if (straight_velocity >= 0) {
 8004cec:	edd7 7a04 	vldr	s15, [r7, #16]
 8004cf0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cf8:	db7c      	blt.n	8004df4 <feedforward_const_accel+0x134>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f7fb fc4c 	bl	8000598 <__aeabi_f2d>
 8004d00:	a3bd      	add	r3, pc, #756	; (adr r3, 8004ff8 <feedforward_const_accel+0x338>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fc9f 	bl	8000648 <__aeabi_dmul>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	4610      	mov	r0, r2
 8004d10:	4619      	mov	r1, r3
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	4bc7      	ldr	r3, [pc, #796]	; (8005034 <feedforward_const_accel+0x374>)
 8004d18:	f7fb fdc0 	bl	800089c <__aeabi_ddiv>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	460b      	mov	r3, r1
 8004d20:	4610      	mov	r0, r2
 8004d22:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004d24:	a3b6      	add	r3, pc, #728	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2a:	f7fb fdb7 	bl	800089c <__aeabi_ddiv>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	460b      	mov	r3, r1
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	f04f 0200 	mov.w	r2, #0
 8004d3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d3e:	f7fb fdad 	bl	800089c <__aeabi_ddiv>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	a3af      	add	r3, pc, #700	; (adr r3, 8005008 <feedforward_const_accel+0x348>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fac4 	bl	80002dc <__adddf3>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8005010 <feedforward_const_accel+0x350>)
 8004d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d62:	f7fb fc71 	bl	8000648 <__aeabi_dmul>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	a3aa      	add	r3, pc, #680	; (adr r3, 8005018 <feedforward_const_accel+0x358>)
 8004d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d74:	f7fb fd92 	bl	800089c <__aeabi_ddiv>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4614      	mov	r4, r2
 8004d7e:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004d80:	ed97 7a04 	vldr	s14, [r7, #16]
 8004d84:	eddf 6aad 	vldr	s13, [pc, #692]	; 800503c <feedforward_const_accel+0x37c>
 8004d88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004d8c:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8005038 <feedforward_const_accel+0x378>
 8004d90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d94:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004d98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d9c:	ee16 0a90 	vmov	r0, s13
 8004da0:	f7fb fbfa 	bl	8000598 <__aeabi_f2d>
 8004da4:	a39e      	add	r3, pc, #632	; (adr r3, 8005020 <feedforward_const_accel+0x360>)
 8004da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004daa:	f7fb fc4d 	bl	8000648 <__aeabi_dmul>
 8004dae:	4602      	mov	r2, r0
 8004db0:	460b      	mov	r3, r1
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	a392      	add	r3, pc, #584	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dbc:	f7fb fd6e 	bl	800089c <__aeabi_ddiv>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4610      	mov	r0, r2
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	f04f 0200 	mov.w	r2, #0
 8004dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dd0:	f7fb fd64 	bl	800089c <__aeabi_ddiv>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	4620      	mov	r0, r4
 8004dda:	4629      	mov	r1, r5
 8004ddc:	f7fb fa7e 	bl	80002dc <__adddf3>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	4610      	mov	r0, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7fb ff06 	bl	8000bf8 <__aeabi_d2f>
 8004dec:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	601a      	str	r2, [r3, #0]
 8004df2:	e07b      	b.n	8004eec <feedforward_const_accel+0x22c>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f7fb fbcf 	bl	8000598 <__aeabi_f2d>
 8004dfa:	a37f      	add	r3, pc, #508	; (adr r3, 8004ff8 <feedforward_const_accel+0x338>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb fc22 	bl	8000648 <__aeabi_dmul>
 8004e04:	4602      	mov	r2, r0
 8004e06:	460b      	mov	r3, r1
 8004e08:	4610      	mov	r0, r2
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	f04f 0200 	mov.w	r2, #0
 8004e10:	4b88      	ldr	r3, [pc, #544]	; (8005034 <feedforward_const_accel+0x374>)
 8004e12:	f7fb fd43 	bl	800089c <__aeabi_ddiv>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004e1e:	a378      	add	r3, pc, #480	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e24:	f7fb fd3a 	bl	800089c <__aeabi_ddiv>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4610      	mov	r0, r2
 8004e2e:	4619      	mov	r1, r3
 8004e30:	f04f 0200 	mov.w	r2, #0
 8004e34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e38:	f7fb fd30 	bl	800089c <__aeabi_ddiv>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	460b      	mov	r3, r1
 8004e40:	4610      	mov	r0, r2
 8004e42:	4619      	mov	r1, r3
 8004e44:	a370      	add	r3, pc, #448	; (adr r3, 8005008 <feedforward_const_accel+0x348>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	f7fb fa45 	bl	80002d8 <__aeabi_dsub>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	a36e      	add	r3, pc, #440	; (adr r3, 8005010 <feedforward_const_accel+0x350>)
 8004e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5c:	f7fb fbf4 	bl	8000648 <__aeabi_dmul>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	4610      	mov	r0, r2
 8004e66:	4619      	mov	r1, r3
 8004e68:	a36b      	add	r3, pc, #428	; (adr r3, 8005018 <feedforward_const_accel+0x358>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	f7fb fd15 	bl	800089c <__aeabi_ddiv>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4614      	mov	r4, r2
 8004e78:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004e7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8004e7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800503c <feedforward_const_accel+0x37c>
 8004e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e86:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8005038 <feedforward_const_accel+0x378>
 8004e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e8e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004e92:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004e96:	ee16 0a90 	vmov	r0, s13
 8004e9a:	f7fb fb7d 	bl	8000598 <__aeabi_f2d>
 8004e9e:	a360      	add	r3, pc, #384	; (adr r3, 8005020 <feedforward_const_accel+0x360>)
 8004ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea4:	f7fb fbd0 	bl	8000648 <__aeabi_dmul>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	460b      	mov	r3, r1
 8004eac:	4610      	mov	r0, r2
 8004eae:	4619      	mov	r1, r3
 8004eb0:	a353      	add	r3, pc, #332	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb fcf1 	bl	800089c <__aeabi_ddiv>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004eca:	f7fb fce7 	bl	800089c <__aeabi_ddiv>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fa01 	bl	80002dc <__adddf3>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fb fe89 	bl	8000bf8 <__aeabi_d2f>
 8004ee6:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 8004eec:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ef0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	f2c0 80a2 	blt.w	8005040 <feedforward_const_accel+0x380>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004efc:	edd7 7a07 	vldr	s15, [r7, #28]
 8004f00:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005038 <feedforward_const_accel+0x378>
 8004f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f08:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8004f0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f10:	edd7 7a00 	vldr	s15, [r7]
 8004f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f18:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800503c <feedforward_const_accel+0x37c>
 8004f1c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004f20:	ee16 0a90 	vmov	r0, s13
 8004f24:	f7fb fb38 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004f28:	a335      	add	r3, pc, #212	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fcb5 	bl	800089c <__aeabi_ddiv>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f04f 0200 	mov.w	r2, #0
 8004f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f42:	f7fb fcab 	bl	800089c <__aeabi_ddiv>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	a32e      	add	r3, pc, #184	; (adr r3, 8005008 <feedforward_const_accel+0x348>)
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f7fb f9c2 	bl	80002dc <__adddf3>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	a32b      	add	r3, pc, #172	; (adr r3, 8005010 <feedforward_const_accel+0x350>)
 8004f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f66:	f7fb fb6f 	bl	8000648 <__aeabi_dmul>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	4610      	mov	r0, r2
 8004f70:	4619      	mov	r1, r3
 8004f72:	a329      	add	r3, pc, #164	; (adr r3, 8005018 <feedforward_const_accel+0x358>)
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f7fb fc90 	bl	800089c <__aeabi_ddiv>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	460b      	mov	r3, r1
 8004f80:	4614      	mov	r4, r2
 8004f82:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004f84:	ed97 7a01 	vldr	s14, [r7, #4]
 8004f88:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800503c <feedforward_const_accel+0x37c>
 8004f8c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004f90:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005038 <feedforward_const_accel+0x378>
 8004f94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f98:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004f9c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004fa0:	ee16 0a90 	vmov	r0, s13
 8004fa4:	f7fb faf8 	bl	8000598 <__aeabi_f2d>
 8004fa8:	a31d      	add	r3, pc, #116	; (adr r3, 8005020 <feedforward_const_accel+0x360>)
 8004faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fae:	f7fb fb4b 	bl	8000648 <__aeabi_dmul>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	a311      	add	r3, pc, #68	; (adr r3, 8005000 <feedforward_const_accel+0x340>)
 8004fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc0:	f7fb fc6c 	bl	800089c <__aeabi_ddiv>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	460b      	mov	r3, r1
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004fd4:	f7fb fc62 	bl	800089c <__aeabi_ddiv>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	460b      	mov	r3, r1
 8004fdc:	4620      	mov	r0, r4
 8004fde:	4629      	mov	r1, r5
 8004fe0:	f7fb f97c 	bl	80002dc <__adddf3>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4610      	mov	r0, r2
 8004fea:	4619      	mov	r1, r3
 8004fec:	f7fb fe04 	bl	8000bf8 <__aeabi_d2f>
 8004ff0:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 8004ff6:	e0a0      	b.n	800513a <feedforward_const_accel+0x47a>
 8004ff8:	7df8b79b 	.word	0x7df8b79b
 8004ffc:	3ed5fdfc 	.word	0x3ed5fdfc
 8005000:	ca619631 	.word	0xca619631
 8005004:	3f9b3322 	.word	0x3f9b3322
 8005008:	eb1c432d 	.word	0xeb1c432d
 800500c:	3f1a36e2 	.word	0x3f1a36e2
 8005010:	51eb851f 	.word	0x51eb851f
 8005014:	3ff11eb8 	.word	0x3ff11eb8
 8005018:	b7952d23 	.word	0xb7952d23
 800501c:	3f569c23 	.word	0x3f569c23
 8005020:	761b0f50 	.word	0x761b0f50
 8005024:	3f66bf29 	.word	0x3f66bf29
 8005028:	20000814 	.word	0x20000814
 800502c:	350b9621 	.word	0x350b9621
 8005030:	34bbe7a2 	.word	0x34bbe7a2
 8005034:	408f4000 	.word	0x408f4000
 8005038:	421c0000 	.word	0x421c0000
 800503c:	447a0000 	.word	0x447a0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8005040:	edd7 7a07 	vldr	s15, [r7, #28]
 8005044:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 8005038 <feedforward_const_accel+0x378>
 8005048:	ee67 7a87 	vmul.f32	s15, s15, s14
 800504c:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 8005050:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005054:	edd7 7a00 	vldr	s15, [r7]
 8005058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800505c:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 800503c <feedforward_const_accel+0x37c>
 8005060:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005064:	ee16 0a90 	vmov	r0, s13
 8005068:	f7fb fa96 	bl	8000598 <__aeabi_f2d>
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800506c:	a338      	add	r3, pc, #224	; (adr r3, 8005150 <feedforward_const_accel+0x490>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f7fb fc13 	bl	800089c <__aeabi_ddiv>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4610      	mov	r0, r2
 800507c:	4619      	mov	r1, r3
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005086:	f7fb fc09 	bl	800089c <__aeabi_ddiv>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	4610      	mov	r0, r2
 8005090:	4619      	mov	r1, r3
 8005092:	a333      	add	r3, pc, #204	; (adr r3, 8005160 <feedforward_const_accel+0x4a0>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	f7fb f91e 	bl	80002d8 <__aeabi_dsub>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4610      	mov	r0, r2
 80050a2:	4619      	mov	r1, r3
 80050a4:	a330      	add	r3, pc, #192	; (adr r3, 8005168 <feedforward_const_accel+0x4a8>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb facd 	bl	8000648 <__aeabi_dmul>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4610      	mov	r0, r2
 80050b4:	4619      	mov	r1, r3
 80050b6:	a32e      	add	r3, pc, #184	; (adr r3, 8005170 <feedforward_const_accel+0x4b0>)
 80050b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050bc:	f7fb fbee 	bl	800089c <__aeabi_ddiv>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4614      	mov	r4, r2
 80050c6:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 80050c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80050cc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8005158 <feedforward_const_accel+0x498>
 80050d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800515c <feedforward_const_accel+0x49c>
 80050d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050dc:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80050e0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80050e4:	ee16 0a90 	vmov	r0, s13
 80050e8:	f7fb fa56 	bl	8000598 <__aeabi_f2d>
 80050ec:	a316      	add	r3, pc, #88	; (adr r3, 8005148 <feedforward_const_accel+0x488>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb faa9 	bl	8000648 <__aeabi_dmul>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	a314      	add	r3, pc, #80	; (adr r3, 8005150 <feedforward_const_accel+0x490>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb fbca 	bl	800089c <__aeabi_ddiv>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4610      	mov	r0, r2
 800510e:	4619      	mov	r1, r3
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005118:	f7fb fbc0 	bl	800089c <__aeabi_ddiv>
 800511c:	4602      	mov	r2, r0
 800511e:	460b      	mov	r3, r1
 8005120:	4620      	mov	r0, r4
 8005122:	4629      	mov	r1, r5
 8005124:	f7fb f8da 	bl	80002dc <__adddf3>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4610      	mov	r0, r2
 800512e:	4619      	mov	r1, r3
 8005130:	f7fb fd62 	bl	8000bf8 <__aeabi_d2f>
 8005134:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	601a      	str	r2, [r3, #0]
}
 800513a:	bf00      	nop
 800513c:	3720      	adds	r7, #32
 800513e:	46bd      	mov	sp, r7
 8005140:	bdb0      	pop	{r4, r5, r7, pc}
 8005142:	bf00      	nop
 8005144:	f3af 8000 	nop.w
 8005148:	761b0f50 	.word	0x761b0f50
 800514c:	3f66bf29 	.word	0x3f66bf29
 8005150:	ca619631 	.word	0xca619631
 8005154:	3f9b3322 	.word	0x3f9b3322
 8005158:	447a0000 	.word	0x447a0000
 800515c:	421c0000 	.word	0x421c0000
 8005160:	eb1c432d 	.word	0xeb1c432d
 8005164:	3f1a36e2 	.word	0x3f1a36e2
 8005168:	51eb851f 	.word	0x51eb851f
 800516c:	3ff11eb8 	.word	0x3ff11eb8
 8005170:	b7952d23 	.word	0xb7952d23
 8005174:	3f569c23 	.word	0x3f569c23

08005178 <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 800517c:	4b0f      	ldr	r3, [pc, #60]	; (80051bc <PID_Init+0x44>)
 800517e:	4a10      	ldr	r2, [pc, #64]	; (80051c0 <PID_Init+0x48>)
 8005180:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8005182:	4b10      	ldr	r3, [pc, #64]	; (80051c4 <PID_Init+0x4c>)
 8005184:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <PID_Init+0x50>)
 8005186:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 8005188:	4b10      	ldr	r3, [pc, #64]	; (80051cc <PID_Init+0x54>)
 800518a:	f04f 0200 	mov.w	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8005190:	4b0f      	ldr	r3, [pc, #60]	; (80051d0 <PID_Init+0x58>)
 8005192:	4a10      	ldr	r2, [pc, #64]	; (80051d4 <PID_Init+0x5c>)
 8005194:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 8005196:	4b10      	ldr	r3, [pc, #64]	; (80051d8 <PID_Init+0x60>)
 8005198:	4a10      	ldr	r2, [pc, #64]	; (80051dc <PID_Init+0x64>)
 800519a:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 800519c:	4b10      	ldr	r3, [pc, #64]	; (80051e0 <PID_Init+0x68>)
 800519e:	4a11      	ldr	r2, [pc, #68]	; (80051e4 <PID_Init+0x6c>)
 80051a0:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 80051a2:	4b11      	ldr	r3, [pc, #68]	; (80051e8 <PID_Init+0x70>)
 80051a4:	f04f 0200 	mov.w	r2, #0
 80051a8:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <PID_Init+0x74>)
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]

}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000560 	.word	0x20000560
 80051c0:	40466666 	.word	0x40466666
 80051c4:	20000564 	.word	0x20000564
 80051c8:	3da3d70a 	.word	0x3da3d70a
 80051cc:	20000568 	.word	0x20000568
 80051d0:	2000056c 	.word	0x2000056c
 80051d4:	3fcccccd 	.word	0x3fcccccd
 80051d8:	20000570 	.word	0x20000570
 80051dc:	3d75c28f 	.word	0x3d75c28f
 80051e0:	20000574 	.word	0x20000574
 80051e4:	3b03126f 	.word	0x3b03126f
 80051e8:	20000540 	.word	0x20000540
 80051ec:	20000550 	.word	0x20000550

080051f0 <clear_Ierror>:

void clear_Ierror(void) {
 80051f0:	b480      	push	{r7}
 80051f2:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80051f4:	4b06      	ldr	r3, [pc, #24]	; (8005210 <clear_Ierror+0x20>)
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80051fc:	4b05      	ldr	r3, [pc, #20]	; (8005214 <clear_Ierror+0x24>)
 80051fe:	f04f 0200 	mov.w	r2, #0
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	20000540 	.word	0x20000540
 8005214:	20000550 	.word	0x20000550

08005218 <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	ed87 0a01 	vstr	s0, [r7, #4]
 8005226:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 800522a:	f04f 0300 	mov.w	r3, #0
 800522e:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 8005236:	4b80      	ldr	r3, [pc, #512]	; (8005438 <EncoderGyro_PID+0x220>)
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b01      	cmp	r3, #1
 800523c:	d111      	bne.n	8005262 <EncoderGyro_PID+0x4a>
		Ksp = 5.7; //3//P項の制御量直進*****************************************************
 800523e:	4b7f      	ldr	r3, [pc, #508]	; (800543c <EncoderGyro_PID+0x224>)
 8005240:	4a7f      	ldr	r2, [pc, #508]	; (8005440 <EncoderGyro_PID+0x228>)
 8005242:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 8005244:	4b7f      	ldr	r3, [pc, #508]	; (8005444 <EncoderGyro_PID+0x22c>)
 8005246:	4a80      	ldr	r2, [pc, #512]	; (8005448 <EncoderGyro_PID+0x230>)
 8005248:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 800524a:	4b80      	ldr	r3, [pc, #512]	; (800544c <EncoderGyro_PID+0x234>)
 800524c:	4a80      	ldr	r2, [pc, #512]	; (8005450 <EncoderGyro_PID+0x238>)
 800524e:	601a      	str	r2, [r3, #0]
		Ktp = 4.6; //295//P項の制御量旋回*****************************************************
 8005250:	4b80      	ldr	r3, [pc, #512]	; (8005454 <EncoderGyro_PID+0x23c>)
 8005252:	4a81      	ldr	r2, [pc, #516]	; (8005458 <EncoderGyro_PID+0x240>)
 8005254:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 8005256:	4b81      	ldr	r3, [pc, #516]	; (800545c <EncoderGyro_PID+0x244>)
 8005258:	4a81      	ldr	r2, [pc, #516]	; (8005460 <EncoderGyro_PID+0x248>)
 800525a:	601a      	str	r2, [r3, #0]
		Ktd = -0.01; //205//D項の制御量旋回*****************************************************
 800525c:	4b81      	ldr	r3, [pc, #516]	; (8005464 <EncoderGyro_PID+0x24c>)
 800525e:	4a82      	ldr	r2, [pc, #520]	; (8005468 <EncoderGyro_PID+0x250>)
 8005260:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8005262:	edd7 7a01 	vldr	s15, [r7, #4]
 8005266:	eef5 7a40 	vcmp.f32	s15, #0.0
 800526a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526e:	d101      	bne.n	8005274 <EncoderGyro_PID+0x5c>
		reset_speed();
 8005270:	f7fb fed8 	bl	8001024 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8005274:	4b7d      	ldr	r3, [pc, #500]	; (800546c <EncoderGyro_PID+0x254>)
 8005276:	edd3 7a00 	vldr	s15, [r3]
 800527a:	eef0 7ae7 	vabs.f32	s15, s15
 800527e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005470 <EncoderGyro_PID+0x258>
 8005282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800528a:	d520      	bpl.n	80052ce <EncoderGyro_PID+0xb6>
 800528c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005290:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8005474 <EncoderGyro_PID+0x25c>
 8005294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800529c:	db17      	blt.n	80052ce <EncoderGyro_PID+0xb6>
 800529e:	4b76      	ldr	r3, [pc, #472]	; (8005478 <EncoderGyro_PID+0x260>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d013      	beq.n	80052ce <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 80052a6:	4b75      	ldr	r3, [pc, #468]	; (800547c <EncoderGyro_PID+0x264>)
 80052a8:	ed93 7a00 	vldr	s14, [r3]
 80052ac:	4b74      	ldr	r3, [pc, #464]	; (8005480 <EncoderGyro_PID+0x268>)
 80052ae:	edd3 7a00 	vldr	s15, [r3]
 80052b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80052ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052be:	ed97 7a01 	vldr	s14, [r7, #4]
 80052c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052c6:	4b6f      	ldr	r3, [pc, #444]	; (8005484 <EncoderGyro_PID+0x26c>)
 80052c8:	edc3 7a00 	vstr	s15, [r3]
 80052cc:	e01a      	b.n	8005304 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 80052ce:	4b6e      	ldr	r3, [pc, #440]	; (8005488 <EncoderGyro_PID+0x270>)
 80052d0:	ed93 7a00 	vldr	s14, [r3]
 80052d4:	4b6d      	ldr	r3, [pc, #436]	; (800548c <EncoderGyro_PID+0x274>)
 80052d6:	edd3 7a00 	vldr	s15, [r3]
 80052da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80052de:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80052e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052e6:	ed97 7a01 	vldr	s14, [r7, #4]
 80052ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ee:	4b65      	ldr	r3, [pc, #404]	; (8005484 <EncoderGyro_PID+0x26c>)
 80052f0:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80052f4:	4b66      	ldr	r3, [pc, #408]	; (8005490 <EncoderGyro_PID+0x278>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a61      	ldr	r2, [pc, #388]	; (8005480 <EncoderGyro_PID+0x268>)
 80052fa:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80052fc:	4b65      	ldr	r3, [pc, #404]	; (8005494 <EncoderGyro_PID+0x27c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a5e      	ldr	r2, [pc, #376]	; (800547c <EncoderGyro_PID+0x264>)
 8005302:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8005304:	4b5f      	ldr	r3, [pc, #380]	; (8005484 <EncoderGyro_PID+0x26c>)
 8005306:	ed93 7a00 	vldr	s14, [r3]
 800530a:	4b5e      	ldr	r3, [pc, #376]	; (8005484 <EncoderGyro_PID+0x26c>)
 800530c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005310:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005314:	4b5b      	ldr	r3, [pc, #364]	; (8005484 <EncoderGyro_PID+0x26c>)
 8005316:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 800531a:	4b5a      	ldr	r3, [pc, #360]	; (8005484 <EncoderGyro_PID+0x26c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a59      	ldr	r2, [pc, #356]	; (8005484 <EncoderGyro_PID+0x26c>)
 8005320:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8005322:	4b58      	ldr	r3, [pc, #352]	; (8005484 <EncoderGyro_PID+0x26c>)
 8005324:	ed93 7a02 	vldr	s14, [r3, #8]
 8005328:	4b56      	ldr	r3, [pc, #344]	; (8005484 <EncoderGyro_PID+0x26c>)
 800532a:	edd3 7a00 	vldr	s15, [r3]
 800532e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005332:	4b54      	ldr	r3, [pc, #336]	; (8005484 <EncoderGyro_PID+0x26c>)
 8005334:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8005338:	4b52      	ldr	r3, [pc, #328]	; (8005484 <EncoderGyro_PID+0x26c>)
 800533a:	ed93 7a00 	vldr	s14, [r3]
 800533e:	4b3f      	ldr	r3, [pc, #252]	; (800543c <EncoderGyro_PID+0x224>)
 8005340:	edd3 7a00 	vldr	s15, [r3]
 8005344:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005348:	4b4e      	ldr	r3, [pc, #312]	; (8005484 <EncoderGyro_PID+0x26c>)
 800534a:	edd3 6a02 	vldr	s13, [r3, #8]
 800534e:	4b3d      	ldr	r3, [pc, #244]	; (8005444 <EncoderGyro_PID+0x22c>)
 8005350:	edd3 7a00 	vldr	s15, [r3]
 8005354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005358:	ee37 7a27 	vadd.f32	s14, s14, s15
 800535c:	4b49      	ldr	r3, [pc, #292]	; (8005484 <EncoderGyro_PID+0x26c>)
 800535e:	edd3 6a03 	vldr	s13, [r3, #12]
 8005362:	4b3a      	ldr	r3, [pc, #232]	; (800544c <EncoderGyro_PID+0x234>)
 8005364:	edd3 7a00 	vldr	s15, [r3]
 8005368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800536c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005370:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8005374:	4b3d      	ldr	r3, [pc, #244]	; (800546c <EncoderGyro_PID+0x254>)
 8005376:	edd3 7a00 	vldr	s15, [r3]
 800537a:	ed97 7a00 	vldr	s14, [r7]
 800537e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005382:	4b45      	ldr	r3, [pc, #276]	; (8005498 <EncoderGyro_PID+0x280>)
 8005384:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8005388:	4b43      	ldr	r3, [pc, #268]	; (8005498 <EncoderGyro_PID+0x280>)
 800538a:	ed93 7a00 	vldr	s14, [r3]
 800538e:	4b42      	ldr	r3, [pc, #264]	; (8005498 <EncoderGyro_PID+0x280>)
 8005390:	edd3 7a01 	vldr	s15, [r3, #4]
 8005394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005398:	4b3f      	ldr	r3, [pc, #252]	; (8005498 <EncoderGyro_PID+0x280>)
 800539a:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 800539e:	4b3e      	ldr	r3, [pc, #248]	; (8005498 <EncoderGyro_PID+0x280>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a3d      	ldr	r2, [pc, #244]	; (8005498 <EncoderGyro_PID+0x280>)
 80053a4:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 80053a6:	4b3c      	ldr	r3, [pc, #240]	; (8005498 <EncoderGyro_PID+0x280>)
 80053a8:	ed93 7a02 	vldr	s14, [r3, #8]
 80053ac:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <EncoderGyro_PID+0x280>)
 80053ae:	edd3 7a00 	vldr	s15, [r3]
 80053b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053b6:	4b38      	ldr	r3, [pc, #224]	; (8005498 <EncoderGyro_PID+0x280>)
 80053b8:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <EncoderGyro_PID+0x280>)
 80053be:	ed93 7a00 	vldr	s14, [r3]
 80053c2:	4b24      	ldr	r3, [pc, #144]	; (8005454 <EncoderGyro_PID+0x23c>)
 80053c4:	edd3 7a00 	vldr	s15, [r3]
 80053c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80053cc:	4b32      	ldr	r3, [pc, #200]	; (8005498 <EncoderGyro_PID+0x280>)
 80053ce:	edd3 6a02 	vldr	s13, [r3, #8]
 80053d2:	4b22      	ldr	r3, [pc, #136]	; (800545c <EncoderGyro_PID+0x244>)
 80053d4:	edd3 7a00 	vldr	s15, [r3]
 80053d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80053dc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 80053e0:	4b2d      	ldr	r3, [pc, #180]	; (8005498 <EncoderGyro_PID+0x280>)
 80053e2:	edd3 6a03 	vldr	s13, [r3, #12]
 80053e6:	4b1f      	ldr	r3, [pc, #124]	; (8005464 <EncoderGyro_PID+0x24c>)
 80053e8:	edd3 7a00 	vldr	s15, [r3]
 80053ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80053f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053f4:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80053f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80053fc:	eddf 6a27 	vldr	s13, [pc, #156]	; 800549c <EncoderGyro_PID+0x284>
 8005400:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005404:	4b26      	ldr	r3, [pc, #152]	; (80054a0 <EncoderGyro_PID+0x288>)
 8005406:	edd3 7a00 	vldr	s15, [r3]
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8005414:	edd7 7a04 	vldr	s15, [r7, #16]
 8005418:	eddf 6a20 	vldr	s13, [pc, #128]	; 800549c <EncoderGyro_PID+0x284>
 800541c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005420:	4b1f      	ldr	r3, [pc, #124]	; (80054a0 <EncoderGyro_PID+0x288>)
 8005422:	edd3 7a00 	vldr	s15, [r3]
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	edc3 7a00 	vstr	s15, [r3]

}
 8005430:	bf00      	nop
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	20000814 	.word	0x20000814
 800543c:	20000560 	.word	0x20000560
 8005440:	40b66666 	.word	0x40b66666
 8005444:	20000564 	.word	0x20000564
 8005448:	3db851ec 	.word	0x3db851ec
 800544c:	20000568 	.word	0x20000568
 8005450:	bbe56042 	.word	0xbbe56042
 8005454:	2000056c 	.word	0x2000056c
 8005458:	40933333 	.word	0x40933333
 800545c:	20000570 	.word	0x20000570
 8005460:	3d8f5c29 	.word	0x3d8f5c29
 8005464:	20000574 	.word	0x20000574
 8005468:	bc23d70a 	.word	0xbc23d70a
 800546c:	2000026c 	.word	0x2000026c
 8005470:	42f00000 	.word	0x42f00000
 8005474:	42c80000 	.word	0x42c80000
 8005478:	20000534 	.word	0x20000534
 800547c:	2000025c 	.word	0x2000025c
 8005480:	20000258 	.word	0x20000258
 8005484:	20000540 	.word	0x20000540
 8005488:	2000022c 	.word	0x2000022c
 800548c:	20000228 	.word	0x20000228
 8005490:	20000238 	.word	0x20000238
 8005494:	2000023c 	.word	0x2000023c
 8005498:	20000550 	.word	0x20000550
 800549c:	44d1e000 	.word	0x44d1e000
 80054a0:	200004d8 	.word	0x200004d8

080054a4 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 80054a4:	b480      	push	{r7}
 80054a6:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 80054a8:	4b3f      	ldr	r3, [pc, #252]	; (80055a8 <init_WallControl+0x104>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 80054ae:	4b3f      	ldr	r3, [pc, #252]	; (80055ac <init_WallControl+0x108>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 80054b4:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <init_WallControl+0x10c>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 80054ba:	4b3e      	ldr	r3, [pc, #248]	; (80055b4 <init_WallControl+0x110>)
 80054bc:	2200      	movs	r2, #0
 80054be:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 80054c0:	4b3d      	ldr	r3, [pc, #244]	; (80055b8 <init_WallControl+0x114>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 80054c6:	4b3d      	ldr	r3, [pc, #244]	; (80055bc <init_WallControl+0x118>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 80054cc:	4b3c      	ldr	r3, [pc, #240]	; (80055c0 <init_WallControl+0x11c>)
 80054ce:	2200      	movs	r2, #0
 80054d0:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 80054d2:	4b3c      	ldr	r3, [pc, #240]	; (80055c4 <init_WallControl+0x120>)
 80054d4:	4a3c      	ldr	r2, [pc, #240]	; (80055c8 <init_WallControl+0x124>)
 80054d6:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 80054d8:	4b3c      	ldr	r3, [pc, #240]	; (80055cc <init_WallControl+0x128>)
 80054da:	4a3d      	ldr	r2, [pc, #244]	; (80055d0 <init_WallControl+0x12c>)
 80054dc:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 80054de:	4b3d      	ldr	r3, [pc, #244]	; (80055d4 <init_WallControl+0x130>)
 80054e0:	4a3d      	ldr	r2, [pc, #244]	; (80055d8 <init_WallControl+0x134>)
 80054e2:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 80054e4:	4b3d      	ldr	r3, [pc, #244]	; (80055dc <init_WallControl+0x138>)
 80054e6:	2200      	movs	r2, #0
 80054e8:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <init_WallControl+0x13c>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80054f0:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <init_WallControl+0x140>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80054f6:	4b3c      	ldr	r3, [pc, #240]	; (80055e8 <init_WallControl+0x144>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80054fc:	4b3b      	ldr	r3, [pc, #236]	; (80055ec <init_WallControl+0x148>)
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8005502:	4b3b      	ldr	r3, [pc, #236]	; (80055f0 <init_WallControl+0x14c>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8005508:	4b3a      	ldr	r3, [pc, #232]	; (80055f4 <init_WallControl+0x150>)
 800550a:	f04f 0200 	mov.w	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8005510:	4b39      	ldr	r3, [pc, #228]	; (80055f8 <init_WallControl+0x154>)
 8005512:	f04f 0200 	mov.w	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8005518:	4b38      	ldr	r3, [pc, #224]	; (80055fc <init_WallControl+0x158>)
 800551a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800551e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8005520:	4b37      	ldr	r3, [pc, #220]	; (8005600 <init_WallControl+0x15c>)
 8005522:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8005526:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8005528:	4b36      	ldr	r3, [pc, #216]	; (8005604 <init_WallControl+0x160>)
 800552a:	f04f 0200 	mov.w	r2, #0
 800552e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <init_WallControl+0x164>)
 8005532:	f04f 0200 	mov.w	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8005538:	4b34      	ldr	r3, [pc, #208]	; (800560c <init_WallControl+0x168>)
 800553a:	f04f 0200 	mov.w	r2, #0
 800553e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8005540:	4b33      	ldr	r3, [pc, #204]	; (8005610 <init_WallControl+0x16c>)
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8005548:	4b32      	ldr	r3, [pc, #200]	; (8005614 <init_WallControl+0x170>)
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 800554e:	4b32      	ldr	r3, [pc, #200]	; (8005618 <init_WallControl+0x174>)
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8005554:	4b31      	ldr	r3, [pc, #196]	; (800561c <init_WallControl+0x178>)
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800555a:	4b31      	ldr	r3, [pc, #196]	; (8005620 <init_WallControl+0x17c>)
 800555c:	2200      	movs	r2, #0
 800555e:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8005560:	4b30      	ldr	r3, [pc, #192]	; (8005624 <init_WallControl+0x180>)
 8005562:	2200      	movs	r2, #0
 8005564:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8005566:	4b30      	ldr	r3, [pc, #192]	; (8005628 <init_WallControl+0x184>)
 8005568:	2200      	movs	r2, #0
 800556a:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 800556c:	4b2f      	ldr	r3, [pc, #188]	; (800562c <init_WallControl+0x188>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8005572:	4b2f      	ldr	r3, [pc, #188]	; (8005630 <init_WallControl+0x18c>)
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8005578:	4b2e      	ldr	r3, [pc, #184]	; (8005634 <init_WallControl+0x190>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 800557e:	4b2e      	ldr	r3, [pc, #184]	; (8005638 <init_WallControl+0x194>)
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8005586:	4b2d      	ldr	r3, [pc, #180]	; (800563c <init_WallControl+0x198>)
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 800558e:	4b2c      	ldr	r3, [pc, #176]	; (8005640 <init_WallControl+0x19c>)
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8005596:	4b2b      	ldr	r3, [pc, #172]	; (8005644 <init_WallControl+0x1a0>)
 8005598:	f04f 0200 	mov.w	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
}
 800559e:	bf00      	nop
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr
 80055a8:	2000059c 	.word	0x2000059c
 80055ac:	2000059d 	.word	0x2000059d
 80055b0:	2000059f 	.word	0x2000059f
 80055b4:	2000059e 	.word	0x2000059e
 80055b8:	200005a1 	.word	0x200005a1
 80055bc:	200005a2 	.word	0x200005a2
 80055c0:	200005a3 	.word	0x200005a3
 80055c4:	200005a4 	.word	0x200005a4
 80055c8:	44be6000 	.word	0x44be6000
 80055cc:	200005a8 	.word	0x200005a8
 80055d0:	44974000 	.word	0x44974000
 80055d4:	200005ac 	.word	0x200005ac
 80055d8:	41a00000 	.word	0x41a00000
 80055dc:	200005c4 	.word	0x200005c4
 80055e0:	200005c0 	.word	0x200005c0
 80055e4:	200005cc 	.word	0x200005cc
 80055e8:	200005c8 	.word	0x200005c8
 80055ec:	200005d4 	.word	0x200005d4
 80055f0:	200005d0 	.word	0x200005d0
 80055f4:	200005dc 	.word	0x200005dc
 80055f8:	200005d8 	.word	0x200005d8
 80055fc:	200005e4 	.word	0x200005e4
 8005600:	200005e0 	.word	0x200005e0
 8005604:	200005ec 	.word	0x200005ec
 8005608:	200005e8 	.word	0x200005e8
 800560c:	200005f4 	.word	0x200005f4
 8005610:	200005f0 	.word	0x200005f0
 8005614:	200005f8 	.word	0x200005f8
 8005618:	200005f9 	.word	0x200005f9
 800561c:	200005fa 	.word	0x200005fa
 8005620:	200005fb 	.word	0x200005fb
 8005624:	200005fc 	.word	0x200005fc
 8005628:	200005fd 	.word	0x200005fd
 800562c:	200005fe 	.word	0x200005fe
 8005630:	200005ff 	.word	0x200005ff
 8005634:	20000600 	.word	0x20000600
 8005638:	20000604 	.word	0x20000604
 800563c:	20000608 	.word	0x20000608
 8005640:	2000060c 	.word	0x2000060c
 8005644:	20000610 	.word	0x20000610

08005648 <calWallConrol>:


float calWallConrol(void) {
 8005648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800564c:	b0aa      	sub	sp, #168	; 0xa8
 800564e:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8005650:	4ba1      	ldr	r3, [pc, #644]	; (80058d8 <calWallConrol+0x290>)
 8005652:	781b      	ldrb	r3, [r3, #0]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d13d      	bne.n	80056d4 <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8005658:	4ba0      	ldr	r3, [pc, #640]	; (80058dc <calWallConrol+0x294>)
 800565a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 800565e:	4ba0      	ldr	r3, [pc, #640]	; (80058e0 <calWallConrol+0x298>)
 8005660:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8005664:	4b9f      	ldr	r3, [pc, #636]	; (80058e4 <calWallConrol+0x29c>)
 8005666:	edd3 7a00 	vldr	s15, [r3]
 800566a:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 80058e8 <calWallConrol+0x2a0>
 800566e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005676:	dd06      	ble.n	8005686 <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8005678:	4b9c      	ldr	r3, [pc, #624]	; (80058ec <calWallConrol+0x2a4>)
 800567a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 800567e:	4b9c      	ldr	r3, [pc, #624]	; (80058f0 <calWallConrol+0x2a8>)
 8005680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005684:	e052      	b.n	800572c <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8005686:	4b97      	ldr	r3, [pc, #604]	; (80058e4 <calWallConrol+0x29c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fa ff84 	bl	8000598 <__aeabi_f2d>
 8005690:	a389      	add	r3, pc, #548	; (adr r3, 80058b8 <calWallConrol+0x270>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa ffd7 	bl	8000648 <__aeabi_dmul>
 800569a:	4602      	mov	r2, r0
 800569c:	460b      	mov	r3, r1
 800569e:	4610      	mov	r0, r2
 80056a0:	4619      	mov	r1, r3
 80056a2:	f7fb faa9 	bl	8000bf8 <__aeabi_d2f>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 80056ac:	4b8d      	ldr	r3, [pc, #564]	; (80058e4 <calWallConrol+0x29c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7fa ff71 	bl	8000598 <__aeabi_f2d>
 80056b6:	a382      	add	r3, pc, #520	; (adr r3, 80058c0 <calWallConrol+0x278>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7fa ffc4 	bl	8000648 <__aeabi_dmul>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4610      	mov	r0, r2
 80056c6:	4619      	mov	r1, r3
 80056c8:	f7fb fa96 	bl	8000bf8 <__aeabi_d2f>
 80056cc:	4603      	mov	r3, r0
 80056ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056d2:	e02b      	b.n	800572c <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 80056d4:	4b87      	ldr	r3, [pc, #540]	; (80058f4 <calWallConrol+0x2ac>)
 80056d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 80056da:	4b87      	ldr	r3, [pc, #540]	; (80058f8 <calWallConrol+0x2b0>)
 80056dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 80056e0:	4b80      	ldr	r3, [pc, #512]	; (80058e4 <calWallConrol+0x29c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fa ff57 	bl	8000598 <__aeabi_f2d>
 80056ea:	a377      	add	r3, pc, #476	; (adr r3, 80058c8 <calWallConrol+0x280>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	f7fa ffaa 	bl	8000648 <__aeabi_dmul>
 80056f4:	4602      	mov	r2, r0
 80056f6:	460b      	mov	r3, r1
 80056f8:	4610      	mov	r0, r2
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fb fa7c 	bl	8000bf8 <__aeabi_d2f>
 8005700:	4603      	mov	r3, r0
 8005702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8005706:	4b77      	ldr	r3, [pc, #476]	; (80058e4 <calWallConrol+0x29c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4618      	mov	r0, r3
 800570c:	f7fa ff44 	bl	8000598 <__aeabi_f2d>
 8005710:	a36f      	add	r3, pc, #444	; (adr r3, 80058d0 <calWallConrol+0x288>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa ff97 	bl	8000648 <__aeabi_dmul>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4610      	mov	r0, r2
 8005720:	4619      	mov	r1, r3
 8005722:	f7fb fa69 	bl	8000bf8 <__aeabi_d2f>
 8005726:	4603      	mov	r3, r0
 8005728:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 800572c:	4b73      	ldr	r3, [pc, #460]	; (80058fc <calWallConrol+0x2b4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f240 2289 	movw	r2, #649	; 0x289
 8005734:	4293      	cmp	r3, r2
 8005736:	dc03      	bgt.n	8005740 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8005738:	4b71      	ldr	r3, [pc, #452]	; (8005900 <calWallConrol+0x2b8>)
 800573a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800573e:	e011      	b.n	8005764 <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8005740:	4b6e      	ldr	r3, [pc, #440]	; (80058fc <calWallConrol+0x2b4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005748:	4293      	cmp	r3, r2
 800574a:	dd03      	ble.n	8005754 <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 800574c:	4b6d      	ldr	r3, [pc, #436]	; (8005904 <calWallConrol+0x2bc>)
 800574e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005752:	e007      	b.n	8005764 <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8005754:	4b69      	ldr	r3, [pc, #420]	; (80058fc <calWallConrol+0x2b4>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	ee07 3a90 	vmov	s15, r3
 800575c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005760:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8005764:	4b65      	ldr	r3, [pc, #404]	; (80058fc <calWallConrol+0x2b4>)
 8005766:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800576a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800576e:	da03      	bge.n	8005778 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8005770:	4b65      	ldr	r3, [pc, #404]	; (8005908 <calWallConrol+0x2c0>)
 8005772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005776:	e012      	b.n	800579e <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8005778:	4b60      	ldr	r3, [pc, #384]	; (80058fc <calWallConrol+0x2b4>)
 800577a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800577e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8005782:	dd03      	ble.n	800578c <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8005784:	4b61      	ldr	r3, [pc, #388]	; (800590c <calWallConrol+0x2c4>)
 8005786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800578a:	e008      	b.n	800579e <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 800578c:	4b5b      	ldr	r3, [pc, #364]	; (80058fc <calWallConrol+0x2b4>)
 800578e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005792:	ee07 3a90 	vmov	s15, r3
 8005796:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800579a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 80057ac:	4b58      	ldr	r3, [pc, #352]	; (8005910 <calWallConrol+0x2c8>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d11c      	bne.n	80057ee <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 80057b4:	4b57      	ldr	r3, [pc, #348]	; (8005914 <calWallConrol+0x2cc>)
 80057b6:	2200      	movs	r2, #0
 80057b8:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 80057ba:	4b57      	ldr	r3, [pc, #348]	; (8005918 <calWallConrol+0x2d0>)
 80057bc:	2200      	movs	r2, #0
 80057be:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 80057c0:	4b56      	ldr	r3, [pc, #344]	; (800591c <calWallConrol+0x2d4>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 80057c6:	4b56      	ldr	r3, [pc, #344]	; (8005920 <calWallConrol+0x2d8>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 80057cc:	4b55      	ldr	r3, [pc, #340]	; (8005924 <calWallConrol+0x2dc>)
 80057ce:	4a56      	ldr	r2, [pc, #344]	; (8005928 <calWallConrol+0x2e0>)
 80057d0:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 80057d2:	4b56      	ldr	r3, [pc, #344]	; (800592c <calWallConrol+0x2e4>)
 80057d4:	4a56      	ldr	r2, [pc, #344]	; (8005930 <calWallConrol+0x2e8>)
 80057d6:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 80057d8:	4b56      	ldr	r3, [pc, #344]	; (8005934 <calWallConrol+0x2ec>)
 80057da:	4a57      	ldr	r2, [pc, #348]	; (8005938 <calWallConrol+0x2f0>)
 80057dc:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 80057e6:	f002 f909 	bl	80079fc <pl_yellow_LED_off>
 80057ea:	f001 ba4c 	b.w	8006c86 <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 80057ee:	4b48      	ldr	r3, [pc, #288]	; (8005910 <calWallConrol+0x2c8>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	f040 82ef 	bne.w	8005dd6 <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 80057f8:	4b46      	ldr	r3, [pc, #280]	; (8005914 <calWallConrol+0x2cc>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 809d 	beq.w	8005940 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8005806:	4b3d      	ldr	r3, [pc, #244]	; (80058fc <calWallConrol+0x2b4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800580e:	db16      	blt.n	800583e <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8005810:	4b4a      	ldr	r3, [pc, #296]	; (800593c <calWallConrol+0x2f4>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f7fa fead 	bl	8000574 <__aeabi_i2d>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4690      	mov	r8, r2
 8005820:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8005824:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005828:	f7fa feb6 	bl	8000598 <__aeabi_f2d>
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	4640      	mov	r0, r8
 8005832:	4649      	mov	r1, r9
 8005834:	f7fb f998 	bl	8000b68 <__aeabi_dcmpgt>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d037      	beq.n	80058ae <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 800583e:	4b35      	ldr	r3, [pc, #212]	; (8005914 <calWallConrol+0x2cc>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b33      	ldr	r3, [pc, #204]	; (8005914 <calWallConrol+0x2cc>)
 8005848:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 800584a:	4b36      	ldr	r3, [pc, #216]	; (8005924 <calWallConrol+0x2dc>)
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8005852:	2300      	movs	r3, #0
 8005854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005858:	e021      	b.n	800589e <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 800585a:	4a28      	ldr	r2, [pc, #160]	; (80058fc <calWallConrol+0x2b4>)
 800585c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005864:	ee07 3a90 	vmov	s15, r3
 8005868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <calWallConrol+0x2dc>)
 800586e:	edd3 7a00 	vldr	s15, [r3]
 8005872:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005876:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587a:	dd0b      	ble.n	8005894 <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 800587c:	4a1f      	ldr	r2, [pc, #124]	; (80058fc <calWallConrol+0x2b4>)
 800587e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005886:	ee07 3a90 	vmov	s15, r3
 800588a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800588e:	4b25      	ldr	r3, [pc, #148]	; (8005924 <calWallConrol+0x2dc>)
 8005890:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005894:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005898:	3301      	adds	r3, #1
 800589a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800589e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058a2:	2b13      	cmp	r3, #19
 80058a4:	ddd9      	ble.n	800585a <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 80058a6:	4b23      	ldr	r3, [pc, #140]	; (8005934 <calWallConrol+0x2ec>)
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 80058ae:	4b1b      	ldr	r3, [pc, #108]	; (800591c <calWallConrol+0x2d4>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	e066      	b.n	8005984 <calWallConrol+0x33c>
 80058b6:	bf00      	nop
 80058b8:	33333333 	.word	0x33333333
 80058bc:	3fd33333 	.word	0x3fd33333
 80058c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80058c4:	bf70624d 	.word	0xbf70624d
 80058c8:	33333333 	.word	0x33333333
 80058cc:	3fe33333 	.word	0x3fe33333
 80058d0:	bc6a7efa 	.word	0xbc6a7efa
 80058d4:	3f789374 	.word	0x3f789374
 80058d8:	20000814 	.word	0x20000814
 80058dc:	435c0000 	.word	0x435c0000
 80058e0:	43480000 	.word	0x43480000
 80058e4:	200004dc 	.word	0x200004dc
 80058e8:	447a0000 	.word	0x447a0000
 80058ec:	43960000 	.word	0x43960000
 80058f0:	c0800000 	.word	0xc0800000
 80058f4:	431d0000 	.word	0x431d0000
 80058f8:	42dc0000 	.word	0x42dc0000
 80058fc:	200002bc 	.word	0x200002bc
 8005900:	44228000 	.word	0x44228000
 8005904:	450fc000 	.word	0x450fc000
 8005908:	44160000 	.word	0x44160000
 800590c:	44fa0000 	.word	0x44fa0000
 8005910:	2000059c 	.word	0x2000059c
 8005914:	2000059f 	.word	0x2000059f
 8005918:	200005a1 	.word	0x200005a1
 800591c:	200005a2 	.word	0x200005a2
 8005920:	200005a3 	.word	0x200005a3
 8005924:	200005a4 	.word	0x200005a4
 8005928:	44be6000 	.word	0x44be6000
 800592c:	200005a8 	.word	0x200005a8
 8005930:	44974000 	.word	0x44974000
 8005934:	200005ac 	.word	0x200005ac
 8005938:	41a00000 	.word	0x41a00000
 800593c:	2000044c 	.word	0x2000044c
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005940:	4bbf      	ldr	r3, [pc, #764]	; (8005c40 <calWallConrol+0x5f8>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8005948:	dd1c      	ble.n	8005984 <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 800594a:	4bbe      	ldr	r3, [pc, #760]	; (8005c44 <calWallConrol+0x5fc>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fa fe10 	bl	8000574 <__aeabi_i2d>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	4614      	mov	r4, r2
 800595a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800595e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005962:	f7fa fe19 	bl	8000598 <__aeabi_f2d>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	4620      	mov	r0, r4
 800596c:	4629      	mov	r1, r5
 800596e:	f7fb f8dd 	bl	8000b2c <__aeabi_dcmplt>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d005      	beq.n	8005984 <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005978:	4bb3      	ldr	r3, [pc, #716]	; (8005c48 <calWallConrol+0x600>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	3301      	adds	r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	4bb1      	ldr	r3, [pc, #708]	; (8005c48 <calWallConrol+0x600>)
 8005982:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8005984:	4bb0      	ldr	r3, [pc, #704]	; (8005c48 <calWallConrol+0x600>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	085b      	lsrs	r3, r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d05c      	beq.n	8005a4e <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8005994:	4baa      	ldr	r3, [pc, #680]	; (8005c40 <calWallConrol+0x5f8>)
 8005996:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800599a:	f240 2225 	movw	r2, #549	; 0x225
 800599e:	4293      	cmp	r3, r2
 80059a0:	dd17      	ble.n	80059d2 <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80059a2:	4ba8      	ldr	r3, [pc, #672]	; (8005c44 <calWallConrol+0x5fc>)
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f7fa fde4 	bl	8000574 <__aeabi_i2d>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	613a      	str	r2, [r7, #16]
 80059b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 80059b8:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80059bc:	f7fa fdec 	bl	8000598 <__aeabi_f2d>
 80059c0:	4602      	mov	r2, r0
 80059c2:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80059c4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80059c8:	f7fb f8ce 	bl	8000b68 <__aeabi_dcmpgt>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d039      	beq.n	8005a46 <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 80059d2:	4b9d      	ldr	r3, [pc, #628]	; (8005c48 <calWallConrol+0x600>)
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	3b02      	subs	r3, #2
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	4b9b      	ldr	r3, [pc, #620]	; (8005c48 <calWallConrol+0x600>)
 80059dc:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 80059de:	4b9b      	ldr	r3, [pc, #620]	; (8005c4c <calWallConrol+0x604>)
 80059e0:	f04f 0200 	mov.w	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80059e6:	2300      	movs	r3, #0
 80059e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059ec:	e023      	b.n	8005a36 <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 80059ee:	4a94      	ldr	r2, [pc, #592]	; (8005c40 <calWallConrol+0x5f8>)
 80059f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059f4:	3350      	adds	r3, #80	; 0x50
 80059f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059fa:	ee07 3a90 	vmov	s15, r3
 80059fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005a02:	4b92      	ldr	r3, [pc, #584]	; (8005c4c <calWallConrol+0x604>)
 8005a04:	edd3 7a00 	vldr	s15, [r3]
 8005a08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a10:	dd0c      	ble.n	8005a2c <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005a12:	4a8b      	ldr	r2, [pc, #556]	; (8005c40 <calWallConrol+0x5f8>)
 8005a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a18:	3350      	adds	r3, #80	; 0x50
 8005a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a1e:	ee07 3a90 	vmov	s15, r3
 8005a22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a26:	4b89      	ldr	r3, [pc, #548]	; (8005c4c <calWallConrol+0x604>)
 8005a28:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005a2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a30:	3301      	adds	r3, #1
 8005a32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a3a:	2b13      	cmp	r3, #19
 8005a3c:	ddd7      	ble.n	80059ee <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8005a3e:	4b84      	ldr	r3, [pc, #528]	; (8005c50 <calWallConrol+0x608>)
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8005a46:	4b83      	ldr	r3, [pc, #524]	; (8005c54 <calWallConrol+0x60c>)
 8005a48:	2200      	movs	r2, #0
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e024      	b.n	8005a98 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8005a4e:	4b7c      	ldr	r3, [pc, #496]	; (8005c40 <calWallConrol+0x5f8>)
 8005a50:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005a54:	f240 2226 	movw	r2, #550	; 0x226
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	dd1d      	ble.n	8005a98 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a5c:	4b79      	ldr	r3, [pc, #484]	; (8005c44 <calWallConrol+0x5fc>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	4618      	mov	r0, r3
 8005a62:	f7fa fd87 	bl	8000574 <__aeabi_i2d>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	60ba      	str	r2, [r7, #8]
 8005a6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a70:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8005a72:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8005a76:	f7fa fd8f 	bl	8000598 <__aeabi_f2d>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005a7e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a82:	f7fb f853 	bl	8000b2c <__aeabi_dcmplt>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8005a8c:	4b6e      	ldr	r3, [pc, #440]	; (8005c48 <calWallConrol+0x600>)
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	3302      	adds	r3, #2
 8005a92:	b2da      	uxtb	r2, r3
 8005a94:	4b6c      	ldr	r3, [pc, #432]	; (8005c48 <calWallConrol+0x600>)
 8005a96:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8005a98:	4b6b      	ldr	r3, [pc, #428]	; (8005c48 <calWallConrol+0x600>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	f201 80f2 	bhi.w	8006c86 <calWallConrol+0x163e>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <calWallConrol+0x460>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005bbf 	.word	0x08005bbf
 8005ab0:	08005c6d 	.word	0x08005c6d
 8005ab4:	08005cd7 	.word	0x08005cd7
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8005ab8:	4b65      	ldr	r3, [pc, #404]	; (8005c50 <calWallConrol+0x608>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7fa fd6b 	bl	8000598 <__aeabi_f2d>
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	460d      	mov	r5, r1
 8005ac6:	4b64      	ldr	r3, [pc, #400]	; (8005c58 <calWallConrol+0x610>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fa fd64 	bl	8000598 <__aeabi_f2d>
 8005ad0:	a357      	add	r3, pc, #348	; (adr r3, 8005c30 <calWallConrol+0x5e8>)
 8005ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad6:	f7fa fdb7 	bl	8000648 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4620      	mov	r0, r4
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	f7fa fbfb 	bl	80002dc <__adddf3>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	f7fb f883 	bl	8000bf8 <__aeabi_d2f>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4a56      	ldr	r2, [pc, #344]	; (8005c50 <calWallConrol+0x608>)
 8005af6:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8005af8:	4b55      	ldr	r3, [pc, #340]	; (8005c50 <calWallConrol+0x608>)
 8005afa:	edd3 7a00 	vldr	s15, [r3]
 8005afe:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005b02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b0a:	d52e      	bpl.n	8005b6a <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005b0c:	4b53      	ldr	r3, [pc, #332]	; (8005c5c <calWallConrol+0x614>)
 8005b0e:	edd3 7a00 	vldr	s15, [r3]
 8005b12:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005c60 <calWallConrol+0x618>
 8005b16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b1a:	eef1 6a67 	vneg.f32	s13, s15
 8005b1e:	4b4f      	ldr	r3, [pc, #316]	; (8005c5c <calWallConrol+0x614>)
 8005b20:	edd3 7a00 	vldr	s15, [r3]
 8005b24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <calWallConrol+0x604>)
 8005b2a:	edd3 7a00 	vldr	s15, [r3]
 8005b2e:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c68 <calWallConrol+0x620>
 8005b32:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8005b36:	4b45      	ldr	r3, [pc, #276]	; (8005c4c <calWallConrol+0x604>)
 8005b38:	edd3 6a00 	vldr	s13, [r3]
 8005b3c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b44:	ee17 0a90 	vmov	r0, s15
 8005b48:	f7fa fd26 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005b4c:	a33a      	add	r3, pc, #232	; (adr r3, 8005c38 <calWallConrol+0x5f0>)
 8005b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b52:	f7fa fd79 	bl	8000648 <__aeabi_dmul>
 8005b56:	4602      	mov	r2, r0
 8005b58:	460b      	mov	r3, r1
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fb f84b 	bl	8000bf8 <__aeabi_d2f>
 8005b62:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005b64:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <calWallConrol+0x61c>)
 8005b66:	6013      	str	r3, [r2, #0]
 8005b68:	e003      	b.n	8005b72 <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8005b6a:	4b3e      	ldr	r3, [pc, #248]	; (8005c64 <calWallConrol+0x61c>)
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005b72:	4b3c      	ldr	r3, [pc, #240]	; (8005c64 <calWallConrol+0x61c>)
 8005b74:	ed93 7a00 	vldr	s14, [r3]
 8005b78:	4b3a      	ldr	r3, [pc, #232]	; (8005c64 <calWallConrol+0x61c>)
 8005b7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005b7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <calWallConrol+0x61c>)
 8005b84:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005b88:	4b36      	ldr	r3, [pc, #216]	; (8005c64 <calWallConrol+0x61c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a35      	ldr	r2, [pc, #212]	; (8005c64 <calWallConrol+0x61c>)
 8005b8e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005b90:	4b34      	ldr	r3, [pc, #208]	; (8005c64 <calWallConrol+0x61c>)
 8005b92:	ed93 7a00 	vldr	s14, [r3]
 8005b96:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005b9a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <calWallConrol+0x61c>)
 8005ba0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ba4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	f001 ff5b 	bl	8007a70 <pl_yellow_LED_count>
			break;
 8005bba:	f001 b864 	b.w	8006c86 <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005bbe:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005bc2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005c60 <calWallConrol+0x618>
 8005bc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bca:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8005bce:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8005bd2:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8005bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8005bda:	4b22      	ldr	r3, [pc, #136]	; (8005c64 <calWallConrol+0x61c>)
 8005bdc:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005be0:	4b20      	ldr	r3, [pc, #128]	; (8005c64 <calWallConrol+0x61c>)
 8005be2:	ed93 7a00 	vldr	s14, [r3]
 8005be6:	4b1f      	ldr	r3, [pc, #124]	; (8005c64 <calWallConrol+0x61c>)
 8005be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf0:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <calWallConrol+0x61c>)
 8005bf2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005bf6:	4b1b      	ldr	r3, [pc, #108]	; (8005c64 <calWallConrol+0x61c>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <calWallConrol+0x61c>)
 8005bfc:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005bfe:	4b19      	ldr	r3, [pc, #100]	; (8005c64 <calWallConrol+0x61c>)
 8005c00:	ed93 7a00 	vldr	s14, [r3]
 8005c04:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005c08:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005c0c:	4b15      	ldr	r3, [pc, #84]	; (8005c64 <calWallConrol+0x61c>)
 8005c0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005c12:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005c1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c1e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8005c22:	2080      	movs	r0, #128	; 0x80
 8005c24:	f001 ff24 	bl	8007a70 <pl_yellow_LED_count>
			break;
 8005c28:	f001 b82d 	b.w	8006c86 <calWallConrol+0x163e>
 8005c2c:	f3af 8000 	nop.w
 8005c30:	d2f1a9fc 	.word	0xd2f1a9fc
 8005c34:	3f50624d 	.word	0x3f50624d
 8005c38:	66666666 	.word	0x66666666
 8005c3c:	3fe66666 	.word	0x3fe66666
 8005c40:	200002bc 	.word	0x200002bc
 8005c44:	2000044c 	.word	0x2000044c
 8005c48:	2000059f 	.word	0x2000059f
 8005c4c:	200005a8 	.word	0x200005a8
 8005c50:	200005ac 	.word	0x200005ac
 8005c54:	200005a3 	.word	0x200005a3
 8005c58:	200004dc 	.word	0x200004dc
 8005c5c:	200005a4 	.word	0x200005a4
 8005c60:	44be6000 	.word	0x44be6000
 8005c64:	20000578 	.word	0x20000578
 8005c68:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005c6c:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005c70:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005c68 <calWallConrol+0x620>
 8005c74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c78:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005c7c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005c84:	4baa      	ldr	r3, [pc, #680]	; (8005f30 <calWallConrol+0x8e8>)
 8005c86:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005c8a:	4ba9      	ldr	r3, [pc, #676]	; (8005f30 <calWallConrol+0x8e8>)
 8005c8c:	ed93 7a00 	vldr	s14, [r3]
 8005c90:	4ba7      	ldr	r3, [pc, #668]	; (8005f30 <calWallConrol+0x8e8>)
 8005c92:	edd3 7a01 	vldr	s15, [r3, #4]
 8005c96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c9a:	4ba5      	ldr	r3, [pc, #660]	; (8005f30 <calWallConrol+0x8e8>)
 8005c9c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005ca0:	4ba3      	ldr	r3, [pc, #652]	; (8005f30 <calWallConrol+0x8e8>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4aa2      	ldr	r2, [pc, #648]	; (8005f30 <calWallConrol+0x8e8>)
 8005ca6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005ca8:	4ba1      	ldr	r3, [pc, #644]	; (8005f30 <calWallConrol+0x8e8>)
 8005caa:	ed93 7a00 	vldr	s14, [r3]
 8005cae:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005cb2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005cb6:	4b9e      	ldr	r3, [pc, #632]	; (8005f30 <calWallConrol+0x8e8>)
 8005cb8:	edd3 6a02 	vldr	s13, [r3, #8]
 8005cbc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005cc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005cc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cc8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005ccc:	2001      	movs	r0, #1
 8005cce:	f001 fecf 	bl	8007a70 <pl_yellow_LED_count>
			break;
 8005cd2:	f000 bfd8 	b.w	8006c86 <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 8005cd6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005cda:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005f34 <calWallConrol+0x8ec>
 8005cde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ce2:	eef1 6a67 	vneg.f32	s13, s15
 8005ce6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005cee:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005cf2:	eddf 6a91 	vldr	s13, [pc, #580]	; 8005f38 <calWallConrol+0x8f0>
 8005cf6:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 8005cfa:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005cfe:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005d02:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 8005d06:	4b8a      	ldr	r3, [pc, #552]	; (8005f30 <calWallConrol+0x8e8>)
 8005d08:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005d0c:	4b88      	ldr	r3, [pc, #544]	; (8005f30 <calWallConrol+0x8e8>)
 8005d0e:	ed93 7a00 	vldr	s14, [r3]
 8005d12:	4b87      	ldr	r3, [pc, #540]	; (8005f30 <calWallConrol+0x8e8>)
 8005d14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d1c:	4b84      	ldr	r3, [pc, #528]	; (8005f30 <calWallConrol+0x8e8>)
 8005d1e:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005d22:	4b83      	ldr	r3, [pc, #524]	; (8005f30 <calWallConrol+0x8e8>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a82      	ldr	r2, [pc, #520]	; (8005f30 <calWallConrol+0x8e8>)
 8005d28:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005d2a:	4b81      	ldr	r3, [pc, #516]	; (8005f30 <calWallConrol+0x8e8>)
 8005d2c:	ed93 7a00 	vldr	s14, [r3]
 8005d30:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005d34:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005d38:	4b7d      	ldr	r3, [pc, #500]	; (8005f30 <calWallConrol+0x8e8>)
 8005d3a:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d3e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005d42:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8005d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d4a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005d4e:	2081      	movs	r0, #129	; 0x81
 8005d50:	f001 fe8e 	bl	8007a70 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005d54:	4b79      	ldr	r3, [pc, #484]	; (8005f3c <calWallConrol+0x8f4>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7fa fc0b 	bl	8000574 <__aeabi_i2d>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	460b      	mov	r3, r1
 8005d62:	603a      	str	r2, [r7, #0]
 8005d64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d68:	607b      	str	r3, [r7, #4]
 8005d6a:	f04f 0200 	mov.w	r2, #0
 8005d6e:	4b74      	ldr	r3, [pc, #464]	; (8005f40 <calWallConrol+0x8f8>)
 8005d70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d74:	f7fa feda 	bl	8000b2c <__aeabi_dcmplt>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01a      	beq.n	8005db4 <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8005d7e:	4b6f      	ldr	r3, [pc, #444]	; (8005f3c <calWallConrol+0x8f4>)
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fbf6 	bl	8000574 <__aeabi_i2d>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	460b      	mov	r3, r1
 8005d8c:	4692      	mov	sl, r2
 8005d8e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8005d92:	f04f 0200 	mov.w	r2, #0
 8005d96:	4b6a      	ldr	r3, [pc, #424]	; (8005f40 <calWallConrol+0x8f8>)
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fec6 	bl	8000b2c <__aeabi_dcmplt>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d006      	beq.n	8005db4 <calWallConrol+0x76c>
				StabilityCount_reset++;
 8005da6:	4b67      	ldr	r3, [pc, #412]	; (8005f44 <calWallConrol+0x8fc>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	3301      	adds	r3, #1
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4b65      	ldr	r3, [pc, #404]	; (8005f44 <calWallConrol+0x8fc>)
 8005db0:	701a      	strb	r2, [r3, #0]
 8005db2:	e002      	b.n	8005dba <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 8005db4:	4b63      	ldr	r3, [pc, #396]	; (8005f44 <calWallConrol+0x8fc>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005dba:	4b62      	ldr	r3, [pc, #392]	; (8005f44 <calWallConrol+0x8fc>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b18      	cmp	r3, #24
 8005dc0:	f240 8760 	bls.w	8006c84 <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 8005dc4:	4b60      	ldr	r3, [pc, #384]	; (8005f48 <calWallConrol+0x900>)
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005dcc:	4b5d      	ldr	r3, [pc, #372]	; (8005f44 <calWallConrol+0x8fc>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
			}
			break;
 8005dd2:	f000 bf57 	b.w	8006c84 <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 8005dd6:	4b5d      	ldr	r3, [pc, #372]	; (8005f4c <calWallConrol+0x904>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	f000 8753 	beq.w	8006c86 <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005de0:	4b5a      	ldr	r3, [pc, #360]	; (8005f4c <calWallConrol+0x904>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	f040 874e 	bne.w	8006c86 <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 8005dea:	4b59      	ldr	r3, [pc, #356]	; (8005f50 <calWallConrol+0x908>)
 8005dec:	edd3 7a00 	vldr	s15, [r3]
 8005df0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005f54 <calWallConrol+0x90c>
 8005df4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfc:	dd05      	ble.n	8005e0a <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 8005dfe:	4b56      	ldr	r3, [pc, #344]	; (8005f58 <calWallConrol+0x910>)
 8005e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 8005e04:	4b55      	ldr	r3, [pc, #340]	; (8005f5c <calWallConrol+0x914>)
 8005e06:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005e08:	e024      	b.n	8005e54 <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 8005e0a:	4b51      	ldr	r3, [pc, #324]	; (8005f50 <calWallConrol+0x908>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fa fbc2 	bl	8000598 <__aeabi_f2d>
 8005e14:	a342      	add	r3, pc, #264	; (adr r3, 8005f20 <calWallConrol+0x8d8>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	f7fa fc15 	bl	8000648 <__aeabi_dmul>
 8005e1e:	4602      	mov	r2, r0
 8005e20:	460b      	mov	r3, r1
 8005e22:	4610      	mov	r0, r2
 8005e24:	4619      	mov	r1, r3
 8005e26:	f7fa fee7 	bl	8000bf8 <__aeabi_d2f>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 8005e30:	4b47      	ldr	r3, [pc, #284]	; (8005f50 <calWallConrol+0x908>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fa fbaf 	bl	8000598 <__aeabi_f2d>
 8005e3a:	a33b      	add	r3, pc, #236	; (adr r3, 8005f28 <calWallConrol+0x8e0>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fc02 	bl	8000648 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4610      	mov	r0, r2
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f7fa fed4 	bl	8000bf8 <__aeabi_d2f>
 8005e50:	4603      	mov	r3, r0
 8005e52:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 8005e54:	4b42      	ldr	r3, [pc, #264]	; (8005f60 <calWallConrol+0x918>)
 8005e56:	edd3 7a00 	vldr	s15, [r3]
 8005e5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e66:	dd12      	ble.n	8005e8e <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005e68:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <calWallConrol+0x918>)
 8005e6a:	edd3 7a00 	vldr	s15, [r3]
 8005e6e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005e72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e7a:	d808      	bhi.n	8005e8e <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005e7c:	4b39      	ldr	r3, [pc, #228]	; (8005f64 <calWallConrol+0x91c>)
 8005e7e:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005e80:	4b39      	ldr	r3, [pc, #228]	; (8005f68 <calWallConrol+0x920>)
 8005e82:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 8005e84:	4b39      	ldr	r3, [pc, #228]	; (8005f6c <calWallConrol+0x924>)
 8005e86:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005e88:	4b39      	ldr	r3, [pc, #228]	; (8005f70 <calWallConrol+0x928>)
 8005e8a:	657b      	str	r3, [r7, #84]	; 0x54
 8005e8c:	e0a7      	b.n	8005fde <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 8005e8e:	4b34      	ldr	r3, [pc, #208]	; (8005f60 <calWallConrol+0x918>)
 8005e90:	edd3 7a00 	vldr	s15, [r3]
 8005e94:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8005f74 <calWallConrol+0x92c>
 8005e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea0:	dd12      	ble.n	8005ec8 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 8005ea2:	4b2f      	ldr	r3, [pc, #188]	; (8005f60 <calWallConrol+0x918>)
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005f78 <calWallConrol+0x930>
 8005eac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb4:	d808      	bhi.n	8005ec8 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005eb6:	4b31      	ldr	r3, [pc, #196]	; (8005f7c <calWallConrol+0x934>)
 8005eb8:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005eba:	4b31      	ldr	r3, [pc, #196]	; (8005f80 <calWallConrol+0x938>)
 8005ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005ebe:	4b31      	ldr	r3, [pc, #196]	; (8005f84 <calWallConrol+0x93c>)
 8005ec0:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 8005ec2:	4b31      	ldr	r3, [pc, #196]	; (8005f88 <calWallConrol+0x940>)
 8005ec4:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec6:	e08a      	b.n	8005fde <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005ec8:	4b25      	ldr	r3, [pc, #148]	; (8005f60 <calWallConrol+0x918>)
 8005eca:	edd3 7a00 	vldr	s15, [r3]
 8005ece:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005f8c <calWallConrol+0x944>
 8005ed2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eda:	dd12      	ble.n	8005f02 <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005edc:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <calWallConrol+0x918>)
 8005ede:	edd3 7a00 	vldr	s15, [r3]
 8005ee2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005f90 <calWallConrol+0x948>
 8005ee6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eee:	d808      	bhi.n	8005f02 <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 8005ef0:	4b28      	ldr	r3, [pc, #160]	; (8005f94 <calWallConrol+0x94c>)
 8005ef2:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 8005ef4:	4b28      	ldr	r3, [pc, #160]	; (8005f98 <calWallConrol+0x950>)
 8005ef6:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005ef8:	4b28      	ldr	r3, [pc, #160]	; (8005f9c <calWallConrol+0x954>)
 8005efa:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005efc:	4b28      	ldr	r3, [pc, #160]	; (8005fa0 <calWallConrol+0x958>)
 8005efe:	657b      	str	r3, [r7, #84]	; 0x54
 8005f00:	e06d      	b.n	8005fde <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 8005f02:	4b28      	ldr	r3, [pc, #160]	; (8005fa4 <calWallConrol+0x95c>)
 8005f04:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005f08:	2bb4      	cmp	r3, #180	; 0xb4
 8005f0a:	dd4f      	ble.n	8005fac <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005f0c:	4b26      	ldr	r3, [pc, #152]	; (8005fa8 <calWallConrol+0x960>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	f043 0302 	orr.w	r3, r3, #2
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	4b24      	ldr	r3, [pc, #144]	; (8005fa8 <calWallConrol+0x960>)
 8005f18:	701a      	strb	r2, [r3, #0]
 8005f1a:	e04e      	b.n	8005fba <calWallConrol+0x972>
 8005f1c:	f3af 8000 	nop.w
 8005f20:	66666666 	.word	0x66666666
 8005f24:	3fe66666 	.word	0x3fe66666
 8005f28:	1eb851ec 	.word	0x1eb851ec
 8005f2c:	bfb1eb85 	.word	0xbfb1eb85
 8005f30:	20000578 	.word	0x20000578
 8005f34:	44be6000 	.word	0x44be6000
 8005f38:	44974000 	.word	0x44974000
 8005f3c:	2000044c 	.word	0x2000044c
 8005f40:	403e0000 	.word	0x403e0000
 8005f44:	200005a1 	.word	0x200005a1
 8005f48:	20000550 	.word	0x20000550
 8005f4c:	2000059c 	.word	0x2000059c
 8005f50:	200004dc 	.word	0x200004dc
 8005f54:	447a0000 	.word	0x447a0000
 8005f58:	442f0000 	.word	0x442f0000
 8005f5c:	c28c0000 	.word	0xc28c0000
 8005f60:	200005e8 	.word	0x200005e8
 8005f64:	4519d2f5 	.word	0x4519d2f5
 8005f68:	c40e02ec 	.word	0xc40e02ec
 8005f6c:	423da41a 	.word	0x423da41a
 8005f70:	bfa28f5c 	.word	0xbfa28f5c
 8005f74:	420c0000 	.word	0x420c0000
 8005f78:	42700000 	.word	0x42700000
 8005f7c:	440d1857 	.word	0x440d1857
 8005f80:	c181619b 	.word	0xc181619b
 8005f84:	3eaab6f2 	.word	0x3eaab6f2
 8005f88:	bacaf00f 	.word	0xbacaf00f
 8005f8c:	42c80000 	.word	0x42c80000
 8005f90:	42f00000 	.word	0x42f00000
 8005f94:	4559c991 	.word	0x4559c991
 8005f98:	41cef541 	.word	0x41cef541
 8005f9c:	bfbda504 	.word	0xbfbda504
 8005fa0:	3c22339c 	.word	0x3c22339c
 8005fa4:	200002bc 	.word	0x200002bc
 8005fa8:	2000059f 	.word	0x2000059f
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005fac:	4b79      	ldr	r3, [pc, #484]	; (8006194 <calWallConrol+0xb4c>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	f023 0302 	bic.w	r3, r3, #2
 8005fb4:	b2da      	uxtb	r2, r3
 8005fb6:	4b77      	ldr	r3, [pc, #476]	; (8006194 <calWallConrol+0xb4c>)
 8005fb8:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005fba:	4b77      	ldr	r3, [pc, #476]	; (8006198 <calWallConrol+0xb50>)
 8005fbc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005fc0:	ee07 3a90 	vmov	s15, r3
 8005fc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fc8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005fcc:	f04f 0300 	mov.w	r3, #0
 8005fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 8005fd2:	f04f 0300 	mov.w	r3, #0
 8005fd6:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005fde:	4b6f      	ldr	r3, [pc, #444]	; (800619c <calWallConrol+0xb54>)
 8005fe0:	edd3 7a00 	vldr	s15, [r3]
 8005fe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff0:	dd12      	ble.n	8006018 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 8005ff2:	4b6a      	ldr	r3, [pc, #424]	; (800619c <calWallConrol+0xb54>)
 8005ff4:	edd3 7a00 	vldr	s15, [r3]
 8005ff8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8005ffc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006004:	d808      	bhi.n	8006018 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 8006006:	4b66      	ldr	r3, [pc, #408]	; (80061a0 <calWallConrol+0xb58>)
 8006008:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 800600a:	4b66      	ldr	r3, [pc, #408]	; (80061a4 <calWallConrol+0xb5c>)
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 800600e:	4b66      	ldr	r3, [pc, #408]	; (80061a8 <calWallConrol+0xb60>)
 8006010:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 8006012:	4b66      	ldr	r3, [pc, #408]	; (80061ac <calWallConrol+0xb64>)
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
 8006016:	e05d      	b.n	80060d4 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 8006018:	4b60      	ldr	r3, [pc, #384]	; (800619c <calWallConrol+0xb54>)
 800601a:	edd3 7a00 	vldr	s15, [r3]
 800601e:	ed9f 7a64 	vldr	s14, [pc, #400]	; 80061b0 <calWallConrol+0xb68>
 8006022:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800602a:	dd12      	ble.n	8006052 <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 800602c:	4b5b      	ldr	r3, [pc, #364]	; (800619c <calWallConrol+0xb54>)
 800602e:	edd3 7a00 	vldr	s15, [r3]
 8006032:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80061b4 <calWallConrol+0xb6c>
 8006036:	eef4 7ac7 	vcmpe.f32	s15, s14
 800603a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603e:	d808      	bhi.n	8006052 <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 8006040:	4b5d      	ldr	r3, [pc, #372]	; (80061b8 <calWallConrol+0xb70>)
 8006042:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 8006044:	4b5d      	ldr	r3, [pc, #372]	; (80061bc <calWallConrol+0xb74>)
 8006046:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <calWallConrol+0xb78>)
 800604a:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 800604c:	4b5d      	ldr	r3, [pc, #372]	; (80061c4 <calWallConrol+0xb7c>)
 800604e:	647b      	str	r3, [r7, #68]	; 0x44
 8006050:	e040      	b.n	80060d4 <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 8006052:	4b52      	ldr	r3, [pc, #328]	; (800619c <calWallConrol+0xb54>)
 8006054:	edd3 7a00 	vldr	s15, [r3]
 8006058:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 80061c8 <calWallConrol+0xb80>
 800605c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006064:	dd12      	ble.n	800608c <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8006066:	4b4d      	ldr	r3, [pc, #308]	; (800619c <calWallConrol+0xb54>)
 8006068:	edd3 7a00 	vldr	s15, [r3]
 800606c:	ed9f 7a57 	vldr	s14, [pc, #348]	; 80061cc <calWallConrol+0xb84>
 8006070:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006078:	d808      	bhi.n	800608c <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 800607a:	4b55      	ldr	r3, [pc, #340]	; (80061d0 <calWallConrol+0xb88>)
 800607c:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 800607e:	4b55      	ldr	r3, [pc, #340]	; (80061d4 <calWallConrol+0xb8c>)
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 8006082:	4b55      	ldr	r3, [pc, #340]	; (80061d8 <calWallConrol+0xb90>)
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 8006086:	4b55      	ldr	r3, [pc, #340]	; (80061dc <calWallConrol+0xb94>)
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
 800608a:	e023      	b.n	80060d4 <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 800608c:	4b42      	ldr	r3, [pc, #264]	; (8006198 <calWallConrol+0xb50>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2bb4      	cmp	r3, #180	; 0xb4
 8006092:	dd07      	ble.n	80060a4 <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8006094:	4b3f      	ldr	r3, [pc, #252]	; (8006194 <calWallConrol+0xb4c>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	f043 0301 	orr.w	r3, r3, #1
 800609c:	b2da      	uxtb	r2, r3
 800609e:	4b3d      	ldr	r3, [pc, #244]	; (8006194 <calWallConrol+0xb4c>)
 80060a0:	701a      	strb	r2, [r3, #0]
 80060a2:	e006      	b.n	80060b2 <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80060a4:	4b3b      	ldr	r3, [pc, #236]	; (8006194 <calWallConrol+0xb4c>)
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	f023 0301 	bic.w	r3, r3, #1
 80060ac:	b2da      	uxtb	r2, r3
 80060ae:	4b39      	ldr	r3, [pc, #228]	; (8006194 <calWallConrol+0xb4c>)
 80060b0:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <calWallConrol+0xb50>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060be:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 80060c2:	f04f 0300 	mov.w	r3, #0
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 80060c8:	f04f 0300 	mov.w	r3, #0
 80060cc:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 80060ce:	f04f 0300 	mov.w	r3, #0
 80060d2:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 80060d4:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 80060d8:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80060dc:	4b40      	ldr	r3, [pc, #256]	; (80061e0 <calWallConrol+0xb98>)
 80060de:	edd3 7a00 	vldr	s15, [r3]
 80060e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060e6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80060ea:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80060ee:	4b3c      	ldr	r3, [pc, #240]	; (80061e0 <calWallConrol+0xb98>)
 80060f0:	edd3 7a00 	vldr	s15, [r3]
 80060f4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80060f8:	4b39      	ldr	r3, [pc, #228]	; (80061e0 <calWallConrol+0xb98>)
 80060fa:	edd3 7a00 	vldr	s15, [r3]
 80060fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 8006102:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 8006106:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 800610a:	4b35      	ldr	r3, [pc, #212]	; (80061e0 <calWallConrol+0xb98>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8006114:	4b32      	ldr	r3, [pc, #200]	; (80061e0 <calWallConrol+0xb98>)
 8006116:	edd3 7a00 	vldr	s15, [r3]
 800611a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 800611e:	4b30      	ldr	r3, [pc, #192]	; (80061e0 <calWallConrol+0xb98>)
 8006120:	edd3 7a00 	vldr	s15, [r3]
 8006124:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 8006128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800612c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 8006130:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 8006134:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8006138:	4b18      	ldr	r3, [pc, #96]	; (800619c <calWallConrol+0xb54>)
 800613a:	edd3 7a00 	vldr	s15, [r3]
 800613e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006142:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8006146:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 800614a:	4b14      	ldr	r3, [pc, #80]	; (800619c <calWallConrol+0xb54>)
 800614c:	edd3 7a00 	vldr	s15, [r3]
 8006150:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006154:	4b11      	ldr	r3, [pc, #68]	; (800619c <calWallConrol+0xb54>)
 8006156:	edd3 7a00 	vldr	s15, [r3]
 800615a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 800615e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8006162:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <calWallConrol+0xb54>)
 8006168:	edd3 7a00 	vldr	s15, [r3]
 800616c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006170:	4b0a      	ldr	r3, [pc, #40]	; (800619c <calWallConrol+0xb54>)
 8006172:	edd3 7a00 	vldr	s15, [r3]
 8006176:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800617a:	4b08      	ldr	r3, [pc, #32]	; (800619c <calWallConrol+0xb54>)
 800617c:	edd3 7a00 	vldr	s15, [r3]
 8006180:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8006184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006188:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 800618c:	230b      	movs	r3, #11
 800618e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006190:	e041      	b.n	8006216 <calWallConrol+0xbce>
 8006192:	bf00      	nop
 8006194:	2000059f 	.word	0x2000059f
 8006198:	200002bc 	.word	0x200002bc
 800619c:	200005ec 	.word	0x200005ec
 80061a0:	44f286e9 	.word	0x44f286e9
 80061a4:	c3c54757 	.word	0xc3c54757
 80061a8:	41e9f1c4 	.word	0x41e9f1c4
 80061ac:	bf307804 	.word	0xbf307804
 80061b0:	420c0000 	.word	0x420c0000
 80061b4:	42700000 	.word	0x42700000
 80061b8:	43b4a7f9 	.word	0x43b4a7f9
 80061bc:	c04f43da 	.word	0xc04f43da
 80061c0:	3a9164ed 	.word	0x3a9164ed
 80061c4:	3a8c6aa9 	.word	0x3a8c6aa9
 80061c8:	42c80000 	.word	0x42c80000
 80061cc:	42f00000 	.word	0x42f00000
 80061d0:	478c2a26 	.word	0x478c2a26
 80061d4:	c4fbb229 	.word	0xc4fbb229
 80061d8:	4195b611 	.word	0x4195b611
 80061dc:	bd67d567 	.word	0xbd67d567
 80061e0:	200005e8 	.word	0x200005e8
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 80061e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e6:	3b01      	subs	r3, #1
 80061e8:	4a9c      	ldr	r2, [pc, #624]	; (800645c <calWallConrol+0xe14>)
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	499a      	ldr	r1, [pc, #616]	; (800645c <calWallConrol+0xe14>)
 80061f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	440b      	add	r3, r1
 80061f8:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80061fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fc:	3b01      	subs	r3, #1
 80061fe:	4a98      	ldr	r2, [pc, #608]	; (8006460 <calWallConrol+0xe18>)
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	4996      	ldr	r1, [pc, #600]	; (8006460 <calWallConrol+0xe18>)
 8006208:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	440b      	add	r3, r1
 800620e:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8006210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006212:	3b01      	subs	r3, #1
 8006214:	67bb      	str	r3, [r7, #120]	; 0x78
 8006216:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006218:	2b00      	cmp	r3, #0
 800621a:	dce3      	bgt.n	80061e4 <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 800621c:	4a8f      	ldr	r2, [pc, #572]	; (800645c <calWallConrol+0xe14>)
 800621e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006220:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8006222:	4a8f      	ldr	r2, [pc, #572]	; (8006460 <calWallConrol+0xe18>)
 8006224:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006226:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8006228:	4b8c      	ldr	r3, [pc, #560]	; (800645c <calWallConrol+0xe14>)
 800622a:	ed93 7a00 	vldr	s14, [r3]
 800622e:	4b8b      	ldr	r3, [pc, #556]	; (800645c <calWallConrol+0xe14>)
 8006230:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006238:	4b8a      	ldr	r3, [pc, #552]	; (8006464 <calWallConrol+0xe1c>)
 800623a:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 800623e:	4b88      	ldr	r3, [pc, #544]	; (8006460 <calWallConrol+0xe18>)
 8006240:	ed93 7a00 	vldr	s14, [r3]
 8006244:	4b86      	ldr	r3, [pc, #536]	; (8006460 <calWallConrol+0xe18>)
 8006246:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800624a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800624e:	4b86      	ldr	r3, [pc, #536]	; (8006468 <calWallConrol+0xe20>)
 8006250:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8006254:	4b85      	ldr	r3, [pc, #532]	; (800646c <calWallConrol+0xe24>)
 8006256:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800625a:	2bb4      	cmp	r3, #180	; 0xb4
 800625c:	dd1a      	ble.n	8006294 <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 800625e:	4b84      	ldr	r3, [pc, #528]	; (8006470 <calWallConrol+0xe28>)
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800626a:	4b7e      	ldr	r3, [pc, #504]	; (8006464 <calWallConrol+0xe1c>)
 800626c:	edd3 7a00 	vldr	s15, [r3]
 8006270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006274:	eef0 7ae7 	vabs.f32	s15, s15
 8006278:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8006474 <calWallConrol+0xe2c>
 800627c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006284:	d506      	bpl.n	8006294 <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8006286:	4b7c      	ldr	r3, [pc, #496]	; (8006478 <calWallConrol+0xe30>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	b2da      	uxtb	r2, r3
 8006290:	4b79      	ldr	r3, [pc, #484]	; (8006478 <calWallConrol+0xe30>)
 8006292:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8006294:	4b75      	ldr	r3, [pc, #468]	; (800646c <calWallConrol+0xe24>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2bb4      	cmp	r3, #180	; 0xb4
 800629a:	dd1a      	ble.n	80062d2 <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800629c:	4b74      	ldr	r3, [pc, #464]	; (8006470 <calWallConrol+0xe28>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	ee07 3a90 	vmov	s15, r3
 80062a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062a8:	4b6f      	ldr	r3, [pc, #444]	; (8006468 <calWallConrol+0xe20>)
 80062aa:	edd3 7a00 	vldr	s15, [r3]
 80062ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b2:	eef0 7ae7 	vabs.f32	s15, s15
 80062b6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8006474 <calWallConrol+0xe2c>
 80062ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062c2:	d506      	bpl.n	80062d2 <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 80062c4:	4b6c      	ldr	r3, [pc, #432]	; (8006478 <calWallConrol+0xe30>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	f043 0301 	orr.w	r3, r3, #1
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	4b6a      	ldr	r3, [pc, #424]	; (8006478 <calWallConrol+0xe30>)
 80062d0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 80062d2:	4b66      	ldr	r3, [pc, #408]	; (800646c <calWallConrol+0xe24>)
 80062d4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80062d8:	2bb3      	cmp	r3, #179	; 0xb3
 80062da:	dd13      	ble.n	8006304 <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 80062dc:	4b64      	ldr	r3, [pc, #400]	; (8006470 <calWallConrol+0xe28>)
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	ee07 3a90 	vmov	s15, r3
 80062e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062e8:	4b5e      	ldr	r3, [pc, #376]	; (8006464 <calWallConrol+0xe1c>)
 80062ea:	edd3 7a00 	vldr	s15, [r3]
 80062ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062f2:	eef0 7ae7 	vabs.f32	s15, s15
 80062f6:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8006474 <calWallConrol+0xe2c>
 80062fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006302:	dd06      	ble.n	8006312 <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8006304:	4b5c      	ldr	r3, [pc, #368]	; (8006478 <calWallConrol+0xe30>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f023 0302 	bic.w	r3, r3, #2
 800630c:	b2da      	uxtb	r2, r3
 800630e:	4b5a      	ldr	r3, [pc, #360]	; (8006478 <calWallConrol+0xe30>)
 8006310:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8006312:	4b56      	ldr	r3, [pc, #344]	; (800646c <calWallConrol+0xe24>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2bb3      	cmp	r3, #179	; 0xb3
 8006318:	dd13      	ble.n	8006342 <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 800631a:	4b55      	ldr	r3, [pc, #340]	; (8006470 <calWallConrol+0xe28>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006326:	4b50      	ldr	r3, [pc, #320]	; (8006468 <calWallConrol+0xe20>)
 8006328:	edd3 7a00 	vldr	s15, [r3]
 800632c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006330:	eef0 7ae7 	vabs.f32	s15, s15
 8006334:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8006474 <calWallConrol+0xe2c>
 8006338:	eef4 7ac7 	vcmpe.f32	s15, s14
 800633c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006340:	dd06      	ble.n	8006350 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8006342:	4b4d      	ldr	r3, [pc, #308]	; (8006478 <calWallConrol+0xe30>)
 8006344:	781b      	ldrb	r3, [r3, #0]
 8006346:	f023 0301 	bic.w	r3, r3, #1
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <calWallConrol+0xe30>)
 800634e:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8006350:	4b49      	ldr	r3, [pc, #292]	; (8006478 <calWallConrol+0xe30>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2b03      	cmp	r3, #3
 8006356:	f200 813d 	bhi.w	80065d4 <calWallConrol+0xf8c>
 800635a:	a201      	add	r2, pc, #4	; (adr r2, 8006360 <calWallConrol+0xd18>)
 800635c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006360:	08006371 	.word	0x08006371
 8006364:	080063c5 	.word	0x080063c5
 8006368:	08006489 	.word	0x08006489
 800636c:	0800651f 	.word	0x0800651f
		case 0:			//両壁なし
			PID_wall = 0;
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8006378:	2000      	movs	r0, #0
 800637a:	f001 faf7 	bl	800796c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800637e:	2000      	movs	r0, #0
 8006380:	f001 fb2a 	bl	80079d8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8006384:	4b39      	ldr	r3, [pc, #228]	; (800646c <calWallConrol+0xe24>)
 8006386:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006392:	4b3a      	ldr	r3, [pc, #232]	; (800647c <calWallConrol+0xe34>)
 8006394:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8006398:	4b34      	ldr	r3, [pc, #208]	; (800646c <calWallConrol+0xe24>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	ee07 3a90 	vmov	s15, r3
 80063a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063a4:	4b36      	ldr	r3, [pc, #216]	; (8006480 <calWallConrol+0xe38>)
 80063a6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 80063aa:	4b36      	ldr	r3, [pc, #216]	; (8006484 <calWallConrol+0xe3c>)
 80063ac:	f04f 0200 	mov.w	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 80063b2:	4b34      	ldr	r3, [pc, #208]	; (8006484 <calWallConrol+0xe3c>)
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 80063ba:	4b32      	ldr	r3, [pc, #200]	; (8006484 <calWallConrol+0xe3c>)
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	605a      	str	r2, [r3, #4]
			break;
 80063c2:	e107      	b.n	80065d4 <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 80063c4:	2000      	movs	r0, #0
 80063c6:	f001 fad1 	bl	800796c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80063ca:	2001      	movs	r0, #1
 80063cc:	f001 fb04 	bl	80079d8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 80063d0:	4b26      	ldr	r3, [pc, #152]	; (800646c <calWallConrol+0xe24>)
 80063d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80063d6:	ee07 3a90 	vmov	s15, r3
 80063da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063de:	4b27      	ldr	r3, [pc, #156]	; (800647c <calWallConrol+0xe34>)
 80063e0:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 80063e4:	4a26      	ldr	r2, [pc, #152]	; (8006480 <calWallConrol+0xe38>)
 80063e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e8:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80063ea:	4b20      	ldr	r3, [pc, #128]	; (800646c <calWallConrol+0xe24>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	ee07 3a90 	vmov	s15, r3
 80063f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063f6:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80063fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80063fe:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8006402:	4b1a      	ldr	r3, [pc, #104]	; (800646c <calWallConrol+0xe24>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	ee07 3a90 	vmov	s15, r3
 800640a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800640e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006412:	4b1c      	ldr	r3, [pc, #112]	; (8006484 <calWallConrol+0xe3c>)
 8006414:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006418:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <calWallConrol+0xe3c>)
 800641a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800641e:	4b19      	ldr	r3, [pc, #100]	; (8006484 <calWallConrol+0xe3c>)
 8006420:	edd3 7a01 	vldr	s15, [r3, #4]
 8006424:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8006428:	4b16      	ldr	r3, [pc, #88]	; (8006484 <calWallConrol+0xe3c>)
 800642a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800642e:	4b15      	ldr	r3, [pc, #84]	; (8006484 <calWallConrol+0xe3c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a14      	ldr	r2, [pc, #80]	; (8006484 <calWallConrol+0xe3c>)
 8006434:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006436:	4b13      	ldr	r3, [pc, #76]	; (8006484 <calWallConrol+0xe3c>)
 8006438:	ed93 7a00 	vldr	s14, [r3]
 800643c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006440:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <calWallConrol+0xe3c>)
 8006446:	edd3 6a02 	vldr	s13, [r3, #8]
 800644a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800644e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006452:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006456:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800645a:	e0bb      	b.n	80065d4 <calWallConrol+0xf8c>
 800645c:	20000614 	.word	0x20000614
 8006460:	20000644 	.word	0x20000644
 8006464:	200006d4 	.word	0x200006d4
 8006468:	200006d8 	.word	0x200006d8
 800646c:	200002bc 	.word	0x200002bc
 8006470:	2000044c 	.word	0x2000044c
 8006474:	42a00000 	.word	0x42a00000
 8006478:	2000059f 	.word	0x2000059f
 800647c:	200005b8 	.word	0x200005b8
 8006480:	200005bc 	.word	0x200005bc
 8006484:	20000584 	.word	0x20000584
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8006488:	2001      	movs	r0, #1
 800648a:	f001 fa6f 	bl	800796c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 800648e:	2000      	movs	r0, #0
 8006490:	f001 faa2 	bl	80079d8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8006494:	4aa4      	ldr	r2, [pc, #656]	; (8006728 <calWallConrol+0x10e0>)
 8006496:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006498:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 800649a:	4ba4      	ldr	r3, [pc, #656]	; (800672c <calWallConrol+0x10e4>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064a6:	4ba2      	ldr	r3, [pc, #648]	; (8006730 <calWallConrol+0x10e8>)
 80064a8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80064ac:	4b9f      	ldr	r3, [pc, #636]	; (800672c <calWallConrol+0x10e4>)
 80064ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ba:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80064be:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 80064c2:	4b9a      	ldr	r3, [pc, #616]	; (800672c <calWallConrol+0x10e4>)
 80064c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 80064d4:	4b97      	ldr	r3, [pc, #604]	; (8006734 <calWallConrol+0x10ec>)
 80064d6:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80064da:	4b96      	ldr	r3, [pc, #600]	; (8006734 <calWallConrol+0x10ec>)
 80064dc:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80064e0:	4b94      	ldr	r3, [pc, #592]	; (8006734 <calWallConrol+0x10ec>)
 80064e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80064e6:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80064ea:	4b92      	ldr	r3, [pc, #584]	; (8006734 <calWallConrol+0x10ec>)
 80064ec:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80064f0:	4b90      	ldr	r3, [pc, #576]	; (8006734 <calWallConrol+0x10ec>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a8f      	ldr	r2, [pc, #572]	; (8006734 <calWallConrol+0x10ec>)
 80064f6:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80064f8:	4b8e      	ldr	r3, [pc, #568]	; (8006734 <calWallConrol+0x10ec>)
 80064fa:	ed93 7a00 	vldr	s14, [r3]
 80064fe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8006502:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8006506:	4b8b      	ldr	r3, [pc, #556]	; (8006734 <calWallConrol+0x10ec>)
 8006508:	edd3 6a02 	vldr	s13, [r3, #8]
 800650c:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8006510:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8006514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006518:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800651c:	e05a      	b.n	80065d4 <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 800651e:	2001      	movs	r0, #1
 8006520:	f001 fa24 	bl	800796c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8006524:	2001      	movs	r0, #1
 8006526:	f001 fa57 	bl	80079d8 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 800652a:	4a7f      	ldr	r2, [pc, #508]	; (8006728 <calWallConrol+0x10e0>)
 800652c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800652e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8006530:	4a7f      	ldr	r2, [pc, #508]	; (8006730 <calWallConrol+0x10e8>)
 8006532:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006534:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8006536:	4b7d      	ldr	r3, [pc, #500]	; (800672c <calWallConrol+0x10e4>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006542:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8006546:	ee77 7a67 	vsub.f32	s15, s14, s15
 800654a:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 800654e:	4b77      	ldr	r3, [pc, #476]	; (800672c <calWallConrol+0x10e4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800655a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800655e:	4b73      	ldr	r3, [pc, #460]	; (800672c <calWallConrol+0x10e4>)
 8006560:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006564:	ee07 3a90 	vmov	s15, r3
 8006568:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800656c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8006570:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8006574:	4b6d      	ldr	r3, [pc, #436]	; (800672c <calWallConrol+0x10e4>)
 8006576:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006582:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8006586:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 800658a:	4b6a      	ldr	r3, [pc, #424]	; (8006734 <calWallConrol+0x10ec>)
 800658c:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8006590:	4b68      	ldr	r3, [pc, #416]	; (8006734 <calWallConrol+0x10ec>)
 8006592:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8006596:	4b67      	ldr	r3, [pc, #412]	; (8006734 <calWallConrol+0x10ec>)
 8006598:	edd3 7a01 	vldr	s15, [r3, #4]
 800659c:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80065a0:	4b64      	ldr	r3, [pc, #400]	; (8006734 <calWallConrol+0x10ec>)
 80065a2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80065a6:	4b63      	ldr	r3, [pc, #396]	; (8006734 <calWallConrol+0x10ec>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a62      	ldr	r2, [pc, #392]	; (8006734 <calWallConrol+0x10ec>)
 80065ac:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80065ae:	4b61      	ldr	r3, [pc, #388]	; (8006734 <calWallConrol+0x10ec>)
 80065b0:	ed93 7a00 	vldr	s14, [r3]
 80065b4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80065b8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80065bc:	4b5d      	ldr	r3, [pc, #372]	; (8006734 <calWallConrol+0x10ec>)
 80065be:	edd3 6a02 	vldr	s13, [r3, #8]
 80065c2:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80065c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80065ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80065ce:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80065d2:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 80065d4:	4b58      	ldr	r3, [pc, #352]	; (8006738 <calWallConrol+0x10f0>)
 80065d6:	edd3 7a00 	vldr	s15, [r3]
 80065da:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800673c <calWallConrol+0x10f4>
 80065de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80065e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e6:	dd04      	ble.n	80065f2 <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 80065e8:	4b55      	ldr	r3, [pc, #340]	; (8006740 <calWallConrol+0x10f8>)
 80065ea:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 80065ec:	4b55      	ldr	r3, [pc, #340]	; (8006744 <calWallConrol+0x10fc>)
 80065ee:	673b      	str	r3, [r7, #112]	; 0x70
 80065f0:	e023      	b.n	800663a <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 80065f2:	4b51      	ldr	r3, [pc, #324]	; (8006738 <calWallConrol+0x10f0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 ffce 	bl	8000598 <__aeabi_f2d>
 80065fc:	a346      	add	r3, pc, #280	; (adr r3, 8006718 <calWallConrol+0x10d0>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	f7fa f821 	bl	8000648 <__aeabi_dmul>
 8006606:	4602      	mov	r2, r0
 8006608:	460b      	mov	r3, r1
 800660a:	4610      	mov	r0, r2
 800660c:	4619      	mov	r1, r3
 800660e:	f7fa faf3 	bl	8000bf8 <__aeabi_d2f>
 8006612:	4603      	mov	r3, r0
 8006614:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8006616:	4b48      	ldr	r3, [pc, #288]	; (8006738 <calWallConrol+0x10f0>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4618      	mov	r0, r3
 800661c:	f7f9 ffbc 	bl	8000598 <__aeabi_f2d>
 8006620:	a33f      	add	r3, pc, #252	; (adr r3, 8006720 <calWallConrol+0x10d8>)
 8006622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006626:	f7fa f80f 	bl	8000648 <__aeabi_dmul>
 800662a:	4602      	mov	r2, r0
 800662c:	460b      	mov	r3, r1
 800662e:	4610      	mov	r0, r2
 8006630:	4619      	mov	r1, r3
 8006632:	f7fa fae1 	bl	8000bf8 <__aeabi_d2f>
 8006636:	4603      	mov	r3, r0
 8006638:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 800663a:	4b43      	ldr	r3, [pc, #268]	; (8006748 <calWallConrol+0x1100>)
 800663c:	edd3 7a00 	vldr	s15, [r3]
 8006640:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800664c:	dd12      	ble.n	8006674 <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 800664e:	4b3e      	ldr	r3, [pc, #248]	; (8006748 <calWallConrol+0x1100>)
 8006650:	edd3 7a00 	vldr	s15, [r3]
 8006654:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800674c <calWallConrol+0x1104>
 8006658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800665c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006660:	d808      	bhi.n	8006674 <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8006662:	4b3b      	ldr	r3, [pc, #236]	; (8006750 <calWallConrol+0x1108>)
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8006666:	4b3b      	ldr	r3, [pc, #236]	; (8006754 <calWallConrol+0x110c>)
 8006668:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 800666a:	4b3b      	ldr	r3, [pc, #236]	; (8006758 <calWallConrol+0x1110>)
 800666c:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 800666e:	4b3b      	ldr	r3, [pc, #236]	; (800675c <calWallConrol+0x1114>)
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
 8006672:	e025      	b.n	80066c0 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006674:	4b2d      	ldr	r3, [pc, #180]	; (800672c <calWallConrol+0x10e4>)
 8006676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800667a:	2bdc      	cmp	r3, #220	; 0xdc
 800667c:	dd07      	ble.n	800668e <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 800667e:	4b38      	ldr	r3, [pc, #224]	; (8006760 <calWallConrol+0x1118>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f043 0302 	orr.w	r3, r3, #2
 8006686:	b2da      	uxtb	r2, r3
 8006688:	4b35      	ldr	r3, [pc, #212]	; (8006760 <calWallConrol+0x1118>)
 800668a:	701a      	strb	r2, [r3, #0]
 800668c:	e006      	b.n	800669c <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 800668e:	4b34      	ldr	r3, [pc, #208]	; (8006760 <calWallConrol+0x1118>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	f023 0302 	bic.w	r3, r3, #2
 8006696:	b2da      	uxtb	r2, r3
 8006698:	4b31      	ldr	r3, [pc, #196]	; (8006760 <calWallConrol+0x1118>)
 800669a:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 800669c:	4b23      	ldr	r3, [pc, #140]	; (800672c <calWallConrol+0x10e4>)
 800669e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80066a2:	ee07 3a90 	vmov	s15, r3
 80066a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066aa:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 80066ae:	f04f 0300 	mov.w	r3, #0
 80066b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 80066b4:	f04f 0300 	mov.w	r3, #0
 80066b8:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 80066ba:	f04f 0300 	mov.w	r3, #0
 80066be:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 80066c0:	4b28      	ldr	r3, [pc, #160]	; (8006764 <calWallConrol+0x111c>)
 80066c2:	edd3 7a00 	vldr	s15, [r3]
 80066c6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80066ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d2:	dd12      	ble.n	80066fa <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 80066d4:	4b23      	ldr	r3, [pc, #140]	; (8006764 <calWallConrol+0x111c>)
 80066d6:	edd3 7a00 	vldr	s15, [r3]
 80066da:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800674c <calWallConrol+0x1104>
 80066de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066e6:	d808      	bhi.n	80066fa <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 80066e8:	4b1f      	ldr	r3, [pc, #124]	; (8006768 <calWallConrol+0x1120>)
 80066ea:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 80066ec:	4b1f      	ldr	r3, [pc, #124]	; (800676c <calWallConrol+0x1124>)
 80066ee:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 80066f0:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <calWallConrol+0x1128>)
 80066f2:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 80066f4:	4b1f      	ldr	r3, [pc, #124]	; (8006774 <calWallConrol+0x112c>)
 80066f6:	627b      	str	r3, [r7, #36]	; 0x24
 80066f8:	e056      	b.n	80067a8 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 80066fa:	4b0c      	ldr	r3, [pc, #48]	; (800672c <calWallConrol+0x10e4>)
 80066fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fe:	2bdc      	cmp	r3, #220	; 0xdc
 8006700:	dd3a      	ble.n	8006778 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006702:	4b17      	ldr	r3, [pc, #92]	; (8006760 <calWallConrol+0x1118>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	4b14      	ldr	r3, [pc, #80]	; (8006760 <calWallConrol+0x1118>)
 800670e:	701a      	strb	r2, [r3, #0]
 8006710:	e039      	b.n	8006786 <calWallConrol+0x113e>
 8006712:	bf00      	nop
 8006714:	f3af 8000 	nop.w
 8006718:	33333333 	.word	0x33333333
 800671c:	3fe33333 	.word	0x3fe33333
 8006720:	eb851eb8 	.word	0xeb851eb8
 8006724:	bfaeb851 	.word	0xbfaeb851
 8006728:	200005b8 	.word	0x200005b8
 800672c:	200002bc 	.word	0x200002bc
 8006730:	200005bc 	.word	0x200005bc
 8006734:	20000584 	.word	0x20000584
 8006738:	200004dc 	.word	0x200004dc
 800673c:	447a0000 	.word	0x447a0000
 8006740:	44160000 	.word	0x44160000
 8006744:	c2700000 	.word	0xc2700000
 8006748:	200005e8 	.word	0x200005e8
 800674c:	42a00000 	.word	0x42a00000
 8006750:	43e7e73c 	.word	0x43e7e73c
 8006754:	c0f9d45b 	.word	0xc0f9d45b
 8006758:	3e043787 	.word	0x3e043787
 800675c:	b83cbe62 	.word	0xb83cbe62
 8006760:	200005a0 	.word	0x200005a0
 8006764:	200005ec 	.word	0x200005ec
 8006768:	440fa6b0 	.word	0x440fa6b0
 800676c:	c1892199 	.word	0xc1892199
 8006770:	3ea1604b 	.word	0x3ea1604b
 8006774:	baa12c1b 	.word	0xbaa12c1b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006778:	4bb5      	ldr	r3, [pc, #724]	; (8006a50 <calWallConrol+0x1408>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	4bb3      	ldr	r3, [pc, #716]	; (8006a50 <calWallConrol+0x1408>)
 8006784:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8006786:	4bb3      	ldr	r3, [pc, #716]	; (8006a54 <calWallConrol+0x140c>)
 8006788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006792:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 80067a2:	f04f 0300 	mov.w	r3, #0
 80067a6:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 80067a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 80067ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80067b0:	4ba9      	ldr	r3, [pc, #676]	; (8006a58 <calWallConrol+0x1410>)
 80067b2:	edd3 7a00 	vldr	s15, [r3]
 80067b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80067ba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 80067be:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80067c2:	4ba5      	ldr	r3, [pc, #660]	; (8006a58 <calWallConrol+0x1410>)
 80067c4:	edd3 7a00 	vldr	s15, [r3]
 80067c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80067cc:	4ba2      	ldr	r3, [pc, #648]	; (8006a58 <calWallConrol+0x1410>)
 80067ce:	edd3 7a00 	vldr	s15, [r3]
 80067d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 80067d6:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 80067da:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80067de:	4b9e      	ldr	r3, [pc, #632]	; (8006a58 <calWallConrol+0x1410>)
 80067e0:	edd3 7a00 	vldr	s15, [r3]
 80067e4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80067e8:	4b9b      	ldr	r3, [pc, #620]	; (8006a58 <calWallConrol+0x1410>)
 80067ea:	edd3 7a00 	vldr	s15, [r3]
 80067ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80067f2:	4b99      	ldr	r3, [pc, #612]	; (8006a58 <calWallConrol+0x1410>)
 80067f4:	edd3 7a00 	vldr	s15, [r3]
 80067f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 80067fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006800:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8006804:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8006808:	edd7 6a07 	vldr	s13, [r7, #28]
 800680c:	4b93      	ldr	r3, [pc, #588]	; (8006a5c <calWallConrol+0x1414>)
 800680e:	edd3 7a00 	vldr	s15, [r3]
 8006812:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006816:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 800681a:	edd7 6a08 	vldr	s13, [r7, #32]
 800681e:	4b8f      	ldr	r3, [pc, #572]	; (8006a5c <calWallConrol+0x1414>)
 8006820:	edd3 7a00 	vldr	s15, [r3]
 8006824:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006828:	4b8c      	ldr	r3, [pc, #560]	; (8006a5c <calWallConrol+0x1414>)
 800682a:	edd3 7a00 	vldr	s15, [r3]
 800682e:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8006832:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8006836:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800683a:	4b88      	ldr	r3, [pc, #544]	; (8006a5c <calWallConrol+0x1414>)
 800683c:	edd3 7a00 	vldr	s15, [r3]
 8006840:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006844:	4b85      	ldr	r3, [pc, #532]	; (8006a5c <calWallConrol+0x1414>)
 8006846:	edd3 7a00 	vldr	s15, [r3]
 800684a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800684e:	4b83      	ldr	r3, [pc, #524]	; (8006a5c <calWallConrol+0x1414>)
 8006850:	edd3 7a00 	vldr	s15, [r3]
 8006854:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800685c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8006860:	230b      	movs	r3, #11
 8006862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006864:	e018      	b.n	8006898 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8006866:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006868:	3b01      	subs	r3, #1
 800686a:	4a7d      	ldr	r2, [pc, #500]	; (8006a60 <calWallConrol+0x1418>)
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	497b      	ldr	r1, [pc, #492]	; (8006a60 <calWallConrol+0x1418>)
 8006874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	440b      	add	r3, r1
 800687a:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 800687c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800687e:	3b01      	subs	r3, #1
 8006880:	4a78      	ldr	r2, [pc, #480]	; (8006a64 <calWallConrol+0x141c>)
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	4976      	ldr	r1, [pc, #472]	; (8006a64 <calWallConrol+0x141c>)
 800688a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	440b      	add	r3, r1
 8006890:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8006892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006894:	3b01      	subs	r3, #1
 8006896:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006898:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800689a:	2b00      	cmp	r3, #0
 800689c:	dce3      	bgt.n	8006866 <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 800689e:	4a70      	ldr	r2, [pc, #448]	; (8006a60 <calWallConrol+0x1418>)
 80068a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068a2:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 80068a4:	4a6f      	ldr	r2, [pc, #444]	; (8006a64 <calWallConrol+0x141c>)
 80068a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80068a8:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 80068aa:	4b6d      	ldr	r3, [pc, #436]	; (8006a60 <calWallConrol+0x1418>)
 80068ac:	ed93 7a00 	vldr	s14, [r3]
 80068b0:	4b6b      	ldr	r3, [pc, #428]	; (8006a60 <calWallConrol+0x1418>)
 80068b2:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80068b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ba:	4b6b      	ldr	r3, [pc, #428]	; (8006a68 <calWallConrol+0x1420>)
 80068bc:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 80068c0:	4b68      	ldr	r3, [pc, #416]	; (8006a64 <calWallConrol+0x141c>)
 80068c2:	ed93 7a00 	vldr	s14, [r3]
 80068c6:	4b67      	ldr	r3, [pc, #412]	; (8006a64 <calWallConrol+0x141c>)
 80068c8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80068cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068d0:	4b66      	ldr	r3, [pc, #408]	; (8006a6c <calWallConrol+0x1424>)
 80068d2:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 80068d6:	4b5f      	ldr	r3, [pc, #380]	; (8006a54 <calWallConrol+0x140c>)
 80068d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068dc:	2bdc      	cmp	r3, #220	; 0xdc
 80068de:	dd1a      	ble.n	8006916 <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80068e0:	4b63      	ldr	r3, [pc, #396]	; (8006a70 <calWallConrol+0x1428>)
 80068e2:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068ec:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <calWallConrol+0x1420>)
 80068ee:	edd3 7a00 	vldr	s15, [r3]
 80068f2:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80068f6:	eef0 7ae7 	vabs.f32	s15, s15
 80068fa:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006a74 <calWallConrol+0x142c>
 80068fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006906:	d506      	bpl.n	8006916 <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8006908:	4b51      	ldr	r3, [pc, #324]	; (8006a50 <calWallConrol+0x1408>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f043 0302 	orr.w	r3, r3, #2
 8006910:	b2da      	uxtb	r2, r3
 8006912:	4b4f      	ldr	r3, [pc, #316]	; (8006a50 <calWallConrol+0x1408>)
 8006914:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8006916:	4b4f      	ldr	r3, [pc, #316]	; (8006a54 <calWallConrol+0x140c>)
 8006918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800691a:	2bdc      	cmp	r3, #220	; 0xdc
 800691c:	dd1a      	ble.n	8006954 <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 800691e:	4b54      	ldr	r3, [pc, #336]	; (8006a70 <calWallConrol+0x1428>)
 8006920:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8006922:	ee07 3a90 	vmov	s15, r3
 8006926:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800692a:	4b50      	ldr	r3, [pc, #320]	; (8006a6c <calWallConrol+0x1424>)
 800692c:	edd3 7a00 	vldr	s15, [r3]
 8006930:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006934:	eef0 7ae7 	vabs.f32	s15, s15
 8006938:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006a74 <calWallConrol+0x142c>
 800693c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006944:	d506      	bpl.n	8006954 <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006946:	4b42      	ldr	r3, [pc, #264]	; (8006a50 <calWallConrol+0x1408>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f043 0301 	orr.w	r3, r3, #1
 800694e:	b2da      	uxtb	r2, r3
 8006950:	4b3f      	ldr	r3, [pc, #252]	; (8006a50 <calWallConrol+0x1408>)
 8006952:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8006954:	4b3f      	ldr	r3, [pc, #252]	; (8006a54 <calWallConrol+0x140c>)
 8006956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800695a:	2bdb      	cmp	r3, #219	; 0xdb
 800695c:	dd13      	ble.n	8006986 <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 800695e:	4b44      	ldr	r3, [pc, #272]	; (8006a70 <calWallConrol+0x1428>)
 8006960:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800696a:	4b3f      	ldr	r3, [pc, #252]	; (8006a68 <calWallConrol+0x1420>)
 800696c:	edd3 7a00 	vldr	s15, [r3]
 8006970:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006974:	eef0 7ae7 	vabs.f32	s15, s15
 8006978:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006a74 <calWallConrol+0x142c>
 800697c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006984:	dd06      	ble.n	8006994 <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006986:	4b32      	ldr	r3, [pc, #200]	; (8006a50 <calWallConrol+0x1408>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	f023 0302 	bic.w	r3, r3, #2
 800698e:	b2da      	uxtb	r2, r3
 8006990:	4b2f      	ldr	r3, [pc, #188]	; (8006a50 <calWallConrol+0x1408>)
 8006992:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8006994:	4b2f      	ldr	r3, [pc, #188]	; (8006a54 <calWallConrol+0x140c>)
 8006996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006998:	2bdb      	cmp	r3, #219	; 0xdb
 800699a:	dd13      	ble.n	80069c4 <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <calWallConrol+0x1428>)
 800699e:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80069a0:	ee07 3a90 	vmov	s15, r3
 80069a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a8:	4b30      	ldr	r3, [pc, #192]	; (8006a6c <calWallConrol+0x1424>)
 80069aa:	edd3 7a00 	vldr	s15, [r3]
 80069ae:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 80069b2:	eef0 7ae7 	vabs.f32	s15, s15
 80069b6:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006a74 <calWallConrol+0x142c>
 80069ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c2:	dd06      	ble.n	80069d2 <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 80069c4:	4b22      	ldr	r3, [pc, #136]	; (8006a50 <calWallConrol+0x1408>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	f023 0301 	bic.w	r3, r3, #1
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	4b20      	ldr	r3, [pc, #128]	; (8006a50 <calWallConrol+0x1408>)
 80069d0:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 80069d2:	4b1f      	ldr	r3, [pc, #124]	; (8006a50 <calWallConrol+0x1408>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b03      	cmp	r3, #3
 80069d8:	f200 8155 	bhi.w	8006c86 <calWallConrol+0x163e>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <calWallConrol+0x139c>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	080069f5 	.word	0x080069f5
 80069e8:	08006a89 	.word	0x08006a89
 80069ec:	08006b29 	.word	0x08006b29
 80069f0:	08006bc7 	.word	0x08006bc7
		case 0:			//両壁なし
			PID_wall += 0;
 80069f4:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80069f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006a78 <calWallConrol+0x1430>
 80069fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a00:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8006a04:	2000      	movs	r0, #0
 8006a06:	f000 ffc3 	bl	8007990 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f000 ffd2 	bl	80079b4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006a10:	4b10      	ldr	r3, [pc, #64]	; (8006a54 <calWallConrol+0x140c>)
 8006a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a1e:	4b17      	ldr	r3, [pc, #92]	; (8006a7c <calWallConrol+0x1434>)
 8006a20:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006a24:	4b0b      	ldr	r3, [pc, #44]	; (8006a54 <calWallConrol+0x140c>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	ee07 3a90 	vmov	s15, r3
 8006a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a30:	4b13      	ldr	r3, [pc, #76]	; (8006a80 <calWallConrol+0x1438>)
 8006a32:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <calWallConrol+0x143c>)
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8006a3e:	4b11      	ldr	r3, [pc, #68]	; (8006a84 <calWallConrol+0x143c>)
 8006a40:	f04f 0200 	mov.w	r2, #0
 8006a44:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <calWallConrol+0x143c>)
 8006a48:	f04f 0200 	mov.w	r2, #0
 8006a4c:	605a      	str	r2, [r3, #4]
			break;
 8006a4e:	e11a      	b.n	8006c86 <calWallConrol+0x163e>
 8006a50:	200005a0 	.word	0x200005a0
 8006a54:	200002bc 	.word	0x200002bc
 8006a58:	200005e8 	.word	0x200005e8
 8006a5c:	200005ec 	.word	0x200005ec
 8006a60:	20000674 	.word	0x20000674
 8006a64:	200006a4 	.word	0x200006a4
 8006a68:	200006dc 	.word	0x200006dc
 8006a6c:	200006e0 	.word	0x200006e0
 8006a70:	2000044c 	.word	0x2000044c
 8006a74:	42a00000 	.word	0x42a00000
 8006a78:	00000000 	.word	0x00000000
 8006a7c:	200005b0 	.word	0x200005b0
 8006a80:	200005b4 	.word	0x200005b4
 8006a84:	20000590 	.word	0x20000590
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006a88:	2000      	movs	r0, #0
 8006a8a:	f000 ff81 	bl	8007990 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006a8e:	2001      	movs	r0, #1
 8006a90:	f000 ff90 	bl	80079b4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006a94:	4b87      	ldr	r3, [pc, #540]	; (8006cb4 <calWallConrol+0x166c>)
 8006a96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006aa2:	4b85      	ldr	r3, [pc, #532]	; (8006cb8 <calWallConrol+0x1670>)
 8006aa4:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006aa8:	4a84      	ldr	r2, [pc, #528]	; (8006cbc <calWallConrol+0x1674>)
 8006aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006aac:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8006aae:	4b81      	ldr	r3, [pc, #516]	; (8006cb4 <calWallConrol+0x166c>)
 8006ab0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aba:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006abe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ac2:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8006ac6:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <calWallConrol+0x166c>)
 8006ac8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8006ad6:	4b7a      	ldr	r3, [pc, #488]	; (8006cc0 <calWallConrol+0x1678>)
 8006ad8:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006adc:	4b78      	ldr	r3, [pc, #480]	; (8006cc0 <calWallConrol+0x1678>)
 8006ade:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006ae2:	4b77      	ldr	r3, [pc, #476]	; (8006cc0 <calWallConrol+0x1678>)
 8006ae4:	edd3 7a01 	vldr	s15, [r3, #4]
 8006ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006aec:	4b74      	ldr	r3, [pc, #464]	; (8006cc0 <calWallConrol+0x1678>)
 8006aee:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006af2:	4b73      	ldr	r3, [pc, #460]	; (8006cc0 <calWallConrol+0x1678>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a72      	ldr	r2, [pc, #456]	; (8006cc0 <calWallConrol+0x1678>)
 8006af8:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006afa:	4b71      	ldr	r3, [pc, #452]	; (8006cc0 <calWallConrol+0x1678>)
 8006afc:	ed93 7a00 	vldr	s14, [r3]
 8006b00:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006b04:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006b08:	4b6d      	ldr	r3, [pc, #436]	; (8006cc0 <calWallConrol+0x1678>)
 8006b0a:	edd3 6a02 	vldr	s13, [r3, #8]
 8006b0e:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006b12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006b16:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006b1a:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b22:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006b26:	e0ae      	b.n	8006c86 <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006b28:	2001      	movs	r0, #1
 8006b2a:	f000 ff31 	bl	8007990 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8006b2e:	2000      	movs	r0, #0
 8006b30:	f000 ff40 	bl	80079b4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006b34:	4a60      	ldr	r2, [pc, #384]	; (8006cb8 <calWallConrol+0x1670>)
 8006b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b38:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006b3a:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <calWallConrol+0x166c>)
 8006b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b46:	4b5d      	ldr	r3, [pc, #372]	; (8006cbc <calWallConrol+0x1674>)
 8006b48:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006b4c:	4b59      	ldr	r3, [pc, #356]	; (8006cb4 <calWallConrol+0x166c>)
 8006b4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b52:	ee07 3a90 	vmov	s15, r3
 8006b56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b5a:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006b5e:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006b62:	4b54      	ldr	r3, [pc, #336]	; (8006cb4 <calWallConrol+0x166c>)
 8006b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b70:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006b74:	4b52      	ldr	r3, [pc, #328]	; (8006cc0 <calWallConrol+0x1678>)
 8006b76:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006b7a:	4b51      	ldr	r3, [pc, #324]	; (8006cc0 <calWallConrol+0x1678>)
 8006b7c:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006b80:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <calWallConrol+0x1678>)
 8006b82:	edd3 7a01 	vldr	s15, [r3, #4]
 8006b86:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006b8a:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <calWallConrol+0x1678>)
 8006b8c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006b90:	4b4b      	ldr	r3, [pc, #300]	; (8006cc0 <calWallConrol+0x1678>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a4a      	ldr	r2, [pc, #296]	; (8006cc0 <calWallConrol+0x1678>)
 8006b96:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006b98:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <calWallConrol+0x1678>)
 8006b9a:	ed93 7a00 	vldr	s14, [r3]
 8006b9e:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006ba6:	4b46      	ldr	r3, [pc, #280]	; (8006cc0 <calWallConrol+0x1678>)
 8006ba8:	edd3 6a02 	vldr	s13, [r3, #8]
 8006bac:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006bb8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006bbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bc0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006bc4:	e05f      	b.n	8006c86 <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f000 fee2 	bl	8007990 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8006bcc:	2001      	movs	r0, #1
 8006bce:	f000 fef1 	bl	80079b4 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006bd2:	4a39      	ldr	r2, [pc, #228]	; (8006cb8 <calWallConrol+0x1670>)
 8006bd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006bd8:	4a38      	ldr	r2, [pc, #224]	; (8006cbc <calWallConrol+0x1674>)
 8006bda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bdc:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006bde:	4b35      	ldr	r3, [pc, #212]	; (8006cb4 <calWallConrol+0x166c>)
 8006be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006be2:	ee07 3a90 	vmov	s15, r3
 8006be6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bea:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8006bee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bf2:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8006bf6:	4b2f      	ldr	r3, [pc, #188]	; (8006cb4 <calWallConrol+0x166c>)
 8006bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bfa:	ee07 3a90 	vmov	s15, r3
 8006bfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006c06:	4b2b      	ldr	r3, [pc, #172]	; (8006cb4 <calWallConrol+0x166c>)
 8006c08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006c14:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8006c18:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8006c1c:	4b25      	ldr	r3, [pc, #148]	; (8006cb4 <calWallConrol+0x166c>)
 8006c1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c22:	ee07 3a90 	vmov	s15, r3
 8006c26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006c2a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8006c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8006c32:	4b23      	ldr	r3, [pc, #140]	; (8006cc0 <calWallConrol+0x1678>)
 8006c34:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006c38:	4b21      	ldr	r3, [pc, #132]	; (8006cc0 <calWallConrol+0x1678>)
 8006c3a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <calWallConrol+0x1678>)
 8006c40:	edd3 7a01 	vldr	s15, [r3, #4]
 8006c44:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006c48:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <calWallConrol+0x1678>)
 8006c4a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006c4e:	4b1c      	ldr	r3, [pc, #112]	; (8006cc0 <calWallConrol+0x1678>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a1b      	ldr	r2, [pc, #108]	; (8006cc0 <calWallConrol+0x1678>)
 8006c54:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c56:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <calWallConrol+0x1678>)
 8006c58:	ed93 7a00 	vldr	s14, [r3]
 8006c5c:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006c60:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006c64:	4b16      	ldr	r3, [pc, #88]	; (8006cc0 <calWallConrol+0x1678>)
 8006c66:	edd3 6a02 	vldr	s13, [r3, #8]
 8006c6a:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006c6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c72:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006c76:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c7e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006c82:	e000      	b.n	8006c86 <calWallConrol+0x163e>
			break;
 8006c84:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006c86:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006c8a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006cc4 <calWallConrol+0x167c>
 8006c8e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006c92:	4b0d      	ldr	r3, [pc, #52]	; (8006cc8 <calWallConrol+0x1680>)
 8006c94:	edd3 7a00 	vldr	s15, [r3]
 8006c98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c9c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006ca0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ca2:	ee07 3a90 	vmov	s15, r3
}
 8006ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8006caa:	37a8      	adds	r7, #168	; 0xa8
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200002bc 	.word	0x200002bc
 8006cb8:	200005b0 	.word	0x200005b0
 8006cbc:	200005b4 	.word	0x200005b4
 8006cc0:	20000590 	.word	0x20000590
 8006cc4:	44d1e000 	.word	0x44d1e000
 8006cc8:	200004d8 	.word	0x200004d8
 8006ccc:	00000000 	.word	0x00000000

08006cd0 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006cd0:	b5b0      	push	{r4, r5, r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 8006cd6:	4ba2      	ldr	r3, [pc, #648]	; (8006f60 <interrupt_WallCut+0x290>)
 8006cd8:	edd3 7a00 	vldr	s15, [r3]
 8006cdc:	eef0 7ae7 	vabs.f32	s15, s15
 8006ce0:	ee17 0a90 	vmov	r0, s15
 8006ce4:	f7f9 fc58 	bl	8000598 <__aeabi_f2d>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	460b      	mov	r3, r1
 8006cec:	a198      	add	r1, pc, #608	; (adr r1, 8006f50 <interrupt_WallCut+0x280>)
 8006cee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cf2:	f7f9 fdd3 	bl	800089c <__aeabi_ddiv>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	ec43 2b17 	vmov	d7, r2, r3
 8006cfe:	eeb0 0a47 	vmov.f32	s0, s14
 8006d02:	eef0 0a67 	vmov.f32	s1, s15
 8006d06:	f01c fd8f 	bl	8023828 <ceil>
 8006d0a:	ec53 2b10 	vmov	r2, r3, d0
 8006d0e:	4610      	mov	r0, r2
 8006d10:	4619      	mov	r1, r3
 8006d12:	f7f9 ff49 	bl	8000ba8 <__aeabi_d2iz>
 8006d16:	4603      	mov	r3, r0
 8006d18:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b0a      	cmp	r3, #10
 8006d1e:	dd01      	ble.n	8006d24 <interrupt_WallCut+0x54>
 8006d20:	230b      	movs	r3, #11
 8006d22:	617b      	str	r3, [r7, #20]
	if(del_time<=4){del_time=4;}
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	2b04      	cmp	r3, #4
 8006d28:	dc01      	bgt.n	8006d2e <interrupt_WallCut+0x5e>
 8006d2a:	2304      	movs	r3, #4
 8006d2c:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 8006d2e:	2300      	movs	r3, #0
 8006d30:	613b      	str	r3, [r7, #16]
 8006d32:	e019      	b.n	8006d68 <interrupt_WallCut+0x98>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 8006d34:	498b      	ldr	r1, [pc, #556]	; (8006f64 <interrupt_WallCut+0x294>)
 8006d36:	693a      	ldr	r2, [r7, #16]
 8006d38:	4613      	mov	r3, r2
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	4413      	add	r3, r2
 8006d3e:	011b      	lsls	r3, r3, #4
 8006d40:	440b      	add	r3, r1
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	4887      	ldr	r0, [pc, #540]	; (8006f64 <interrupt_WallCut+0x294>)
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	009b      	lsls	r3, r3, #2
 8006d4c:	4413      	add	r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4413      	add	r3, r2
 8006d54:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006d58:	1aca      	subs	r2, r1, r3
 8006d5a:	4983      	ldr	r1, [pc, #524]	; (8006f68 <interrupt_WallCut+0x298>)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3301      	adds	r3, #1
 8006d66:	613b      	str	r3, [r7, #16]
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	2b04      	cmp	r3, #4
 8006d6c:	dde2      	ble.n	8006d34 <interrupt_WallCut+0x64>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 8006d6e:	4b7f      	ldr	r3, [pc, #508]	; (8006f6c <interrupt_WallCut+0x29c>)
 8006d70:	781b      	ldrb	r3, [r3, #0]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	f040 8555 	bne.w	8007822 <interrupt_WallCut+0xb52>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006d78:	4b7a      	ldr	r3, [pc, #488]	; (8006f64 <interrupt_WallCut+0x294>)
 8006d7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d82:	dd03      	ble.n	8006d8c <interrupt_WallCut+0xbc>
			front_wall_break_90 = 1;
 8006d84:	4b7a      	ldr	r3, [pc, #488]	; (8006f70 <interrupt_WallCut+0x2a0>)
 8006d86:	2201      	movs	r2, #1
 8006d88:	701a      	strb	r2, [r3, #0]
 8006d8a:	e002      	b.n	8006d92 <interrupt_WallCut+0xc2>
		} else {
			front_wall_break_90 = 0;
 8006d8c:	4b78      	ldr	r3, [pc, #480]	; (8006f70 <interrupt_WallCut+0x2a0>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006d92:	4b74      	ldr	r3, [pc, #464]	; (8006f64 <interrupt_WallCut+0x294>)
 8006d94:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006d98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006d9c:	dd03      	ble.n	8006da6 <interrupt_WallCut+0xd6>
			front_wall_break_45 = 1;
 8006d9e:	4b75      	ldr	r3, [pc, #468]	; (8006f74 <interrupt_WallCut+0x2a4>)
 8006da0:	2201      	movs	r2, #1
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	e002      	b.n	8006dac <interrupt_WallCut+0xdc>
		} else {
			front_wall_break_45 = 0;
 8006da6:	4b73      	ldr	r3, [pc, #460]	; (8006f74 <interrupt_WallCut+0x2a4>)
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 8006dac:	4b6d      	ldr	r3, [pc, #436]	; (8006f64 <interrupt_WallCut+0x294>)
 8006dae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006db2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006db6:	dd03      	ble.n	8006dc0 <interrupt_WallCut+0xf0>
			front_wall_break_45slant = 1;
 8006db8:	4b6f      	ldr	r3, [pc, #444]	; (8006f78 <interrupt_WallCut+0x2a8>)
 8006dba:	2201      	movs	r2, #1
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	e002      	b.n	8006dc6 <interrupt_WallCut+0xf6>
		} else {
			front_wall_break_45slant = 0;
 8006dc0:	4b6d      	ldr	r3, [pc, #436]	; (8006f78 <interrupt_WallCut+0x2a8>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006dc6:	4b67      	ldr	r3, [pc, #412]	; (8006f64 <interrupt_WallCut+0x294>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8006dce:	da30      	bge.n	8006e32 <interrupt_WallCut+0x162>
			NoWallCountL90++;
 8006dd0:	4b6a      	ldr	r3, [pc, #424]	; (8006f7c <interrupt_WallCut+0x2ac>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a69      	ldr	r2, [pc, #420]	; (8006f7c <interrupt_WallCut+0x2ac>)
 8006dd8:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006dda:	4b69      	ldr	r3, [pc, #420]	; (8006f80 <interrupt_WallCut+0x2b0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f7f9 fbda 	bl	8000598 <__aeabi_f2d>
 8006de4:	4604      	mov	r4, r0
 8006de6:	460d      	mov	r5, r1
 8006de8:	4b66      	ldr	r3, [pc, #408]	; (8006f84 <interrupt_WallCut+0x2b4>)
 8006dea:	ed93 7a00 	vldr	s14, [r3]
 8006dee:	4b66      	ldr	r3, [pc, #408]	; (8006f88 <interrupt_WallCut+0x2b8>)
 8006df0:	edd3 7a00 	vldr	s15, [r3]
 8006df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006df8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006dfc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e00:	ee16 0a90 	vmov	r0, s13
 8006e04:	f7f9 fbc8 	bl	8000598 <__aeabi_f2d>
 8006e08:	a353      	add	r3, pc, #332	; (adr r3, 8006f58 <interrupt_WallCut+0x288>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fc1b 	bl	8000648 <__aeabi_dmul>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4620      	mov	r0, r4
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7f9 fa5f 	bl	80002dc <__adddf3>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4610      	mov	r0, r2
 8006e24:	4619      	mov	r1, r3
 8006e26:	f7f9 fee7 	bl	8000bf8 <__aeabi_d2f>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	4a54      	ldr	r2, [pc, #336]	; (8006f80 <interrupt_WallCut+0x2b0>)
 8006e2e:	6013      	str	r3, [r2, #0]
 8006e30:	e006      	b.n	8006e40 <interrupt_WallCut+0x170>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 8006e32:	4b52      	ldr	r3, [pc, #328]	; (8006f7c <interrupt_WallCut+0x2ac>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 8006e38:	4b51      	ldr	r3, [pc, #324]	; (8006f80 <interrupt_WallCut+0x2b0>)
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 8006e40:	4b48      	ldr	r3, [pc, #288]	; (8006f64 <interrupt_WallCut+0x294>)
 8006e42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8006e46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006e4a:	da30      	bge.n	8006eae <interrupt_WallCut+0x1de>
			NoWallCountR90++;
 8006e4c:	4b4f      	ldr	r3, [pc, #316]	; (8006f8c <interrupt_WallCut+0x2bc>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	4a4e      	ldr	r2, [pc, #312]	; (8006f8c <interrupt_WallCut+0x2bc>)
 8006e54:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006e56:	4b4e      	ldr	r3, [pc, #312]	; (8006f90 <interrupt_WallCut+0x2c0>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7f9 fb9c 	bl	8000598 <__aeabi_f2d>
 8006e60:	4604      	mov	r4, r0
 8006e62:	460d      	mov	r5, r1
 8006e64:	4b47      	ldr	r3, [pc, #284]	; (8006f84 <interrupt_WallCut+0x2b4>)
 8006e66:	ed93 7a00 	vldr	s14, [r3]
 8006e6a:	4b47      	ldr	r3, [pc, #284]	; (8006f88 <interrupt_WallCut+0x2b8>)
 8006e6c:	edd3 7a00 	vldr	s15, [r3]
 8006e70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e74:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006e78:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006e7c:	ee16 0a90 	vmov	r0, s13
 8006e80:	f7f9 fb8a 	bl	8000598 <__aeabi_f2d>
 8006e84:	a334      	add	r3, pc, #208	; (adr r3, 8006f58 <interrupt_WallCut+0x288>)
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f7f9 fbdd 	bl	8000648 <__aeabi_dmul>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 fa21 	bl	80002dc <__adddf3>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	f7f9 fea9 	bl	8000bf8 <__aeabi_d2f>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	4a39      	ldr	r2, [pc, #228]	; (8006f90 <interrupt_WallCut+0x2c0>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	e006      	b.n	8006ebc <interrupt_WallCut+0x1ec>
		} else {
			NoWallCountR90 = 0;
 8006eae:	4b37      	ldr	r3, [pc, #220]	; (8006f8c <interrupt_WallCut+0x2bc>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006eb4:	4b36      	ldr	r3, [pc, #216]	; (8006f90 <interrupt_WallCut+0x2c0>)
 8006eb6:	f04f 0200 	mov.w	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8006ebc:	4b2a      	ldr	r3, [pc, #168]	; (8006f68 <interrupt_WallCut+0x298>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006ec4:	da03      	bge.n	8006ece <interrupt_WallCut+0x1fe>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006ec6:	4b27      	ldr	r3, [pc, #156]	; (8006f64 <interrupt_WallCut+0x294>)
 8006ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eca:	2bc8      	cmp	r3, #200	; 0xc8
 8006ecc:	dd37      	ble.n	8006f3e <interrupt_WallCut+0x26e>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 8006ece:	4b31      	ldr	r3, [pc, #196]	; (8006f94 <interrupt_WallCut+0x2c4>)
 8006ed0:	f04f 0200 	mov.w	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006ed6:	4b30      	ldr	r3, [pc, #192]	; (8006f98 <interrupt_WallCut+0x2c8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3301      	adds	r3, #1
 8006edc:	4a2e      	ldr	r2, [pc, #184]	; (8006f98 <interrupt_WallCut+0x2c8>)
 8006ede:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 8006ee0:	4b2e      	ldr	r3, [pc, #184]	; (8006f9c <interrupt_WallCut+0x2cc>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006ee6:	4b2e      	ldr	r3, [pc, #184]	; (8006fa0 <interrupt_WallCut+0x2d0>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7f9 fb54 	bl	8000598 <__aeabi_f2d>
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	4b23      	ldr	r3, [pc, #140]	; (8006f84 <interrupt_WallCut+0x2b4>)
 8006ef6:	ed93 7a00 	vldr	s14, [r3]
 8006efa:	4b23      	ldr	r3, [pc, #140]	; (8006f88 <interrupt_WallCut+0x2b8>)
 8006efc:	edd3 7a00 	vldr	s15, [r3]
 8006f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006f08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006f0c:	ee16 0a90 	vmov	r0, s13
 8006f10:	f7f9 fb42 	bl	8000598 <__aeabi_f2d>
 8006f14:	a310      	add	r3, pc, #64	; (adr r3, 8006f58 <interrupt_WallCut+0x288>)
 8006f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1a:	f7f9 fb95 	bl	8000648 <__aeabi_dmul>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4620      	mov	r0, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	f7f9 f9d9 	bl	80002dc <__adddf3>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4610      	mov	r0, r2
 8006f30:	4619      	mov	r1, r3
 8006f32:	f7f9 fe61 	bl	8000bf8 <__aeabi_d2f>
 8006f36:	4603      	mov	r3, r0
 8006f38:	4a19      	ldr	r2, [pc, #100]	; (8006fa0 <interrupt_WallCut+0x2d0>)
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	e09f      	b.n	800707e <interrupt_WallCut+0x3ae>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 8006f3e:	4b17      	ldr	r3, [pc, #92]	; (8006f9c <interrupt_WallCut+0x2cc>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d16b      	bne.n	800701e <interrupt_WallCut+0x34e>
				for (int i = 0; i <= 19; i++) {
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
 8006f4a:	e04b      	b.n	8006fe4 <interrupt_WallCut+0x314>
 8006f4c:	f3af 8000 	nop.w
 8006f50:	00000000 	.word	0x00000000
 8006f54:	40ab5800 	.word	0x40ab5800
 8006f58:	d2f1a9fc 	.word	0xd2f1a9fc
 8006f5c:	3f50624d 	.word	0x3f50624d
 8006f60:	200004dc 	.word	0x200004dc
 8006f64:	200002bc 	.word	0x200002bc
 8006f68:	20000460 	.word	0x20000460
 8006f6c:	2000059e 	.word	0x2000059e
 8006f70:	200005fe 	.word	0x200005fe
 8006f74:	200005ff 	.word	0x200005ff
 8006f78:	20000600 	.word	0x20000600
 8006f7c:	200005c4 	.word	0x200005c4
 8006f80:	200005dc 	.word	0x200005dc
 8006f84:	20000258 	.word	0x20000258
 8006f88:	2000025c 	.word	0x2000025c
 8006f8c:	200005c0 	.word	0x200005c0
 8006f90:	200005d8 	.word	0x200005d8
 8006f94:	20000604 	.word	0x20000604
 8006f98:	200005cc 	.word	0x200005cc
 8006f9c:	200005f8 	.word	0x200005f8
 8006fa0:	200005e4 	.word	0x200005e4
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006fa4:	4a7c      	ldr	r2, [pc, #496]	; (8007198 <interrupt_WallCut+0x4c8>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	3314      	adds	r3, #20
 8006faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fae:	ee07 3a90 	vmov	s15, r3
 8006fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fb6:	4b79      	ldr	r3, [pc, #484]	; (800719c <interrupt_WallCut+0x4cc>)
 8006fb8:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 8006fbc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	dd0b      	ble.n	8006fde <interrupt_WallCut+0x30e>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006fc6:	4a74      	ldr	r2, [pc, #464]	; (8007198 <interrupt_WallCut+0x4c8>)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3314      	adds	r3, #20
 8006fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fd0:	ee07 3a90 	vmov	s15, r3
 8006fd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006fd8:	4b70      	ldr	r3, [pc, #448]	; (800719c <interrupt_WallCut+0x4cc>)
 8006fda:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	60fb      	str	r3, [r7, #12]
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2b13      	cmp	r3, #19
 8006fe8:	dddc      	ble.n	8006fa4 <interrupt_WallCut+0x2d4>
					}
				}
				NoWallCountL45 = 0;
 8006fea:	4b6d      	ldr	r3, [pc, #436]	; (80071a0 <interrupt_WallCut+0x4d0>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 8006ff0:	4b6c      	ldr	r3, [pc, #432]	; (80071a4 <interrupt_WallCut+0x4d4>)
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 8006ff6:	4b69      	ldr	r3, [pc, #420]	; (800719c <interrupt_WallCut+0x4cc>)
 8006ff8:	edd3 7a00 	vldr	s15, [r3]
 8006ffc:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80071a8 <interrupt_WallCut+0x4d8>
 8007000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007004:	ed9f 7a69 	vldr	s14, [pc, #420]	; 80071ac <interrupt_WallCut+0x4dc>
 8007008:	ee67 6a87 	vmul.f32	s13, s15, s14
 800700c:	4b63      	ldr	r3, [pc, #396]	; (800719c <interrupt_WallCut+0x4cc>)
 800700e:	ed93 7a00 	vldr	s14, [r3]
 8007012:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 8007016:	4b66      	ldr	r3, [pc, #408]	; (80071b0 <interrupt_WallCut+0x4e0>)
 8007018:	edc3 7a00 	vstr	s15, [r3]
 800701c:	e02f      	b.n	800707e <interrupt_WallCut+0x3ae>
			} else {
				NoWallCountL45++;
 800701e:	4b60      	ldr	r3, [pc, #384]	; (80071a0 <interrupt_WallCut+0x4d0>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	4a5e      	ldr	r2, [pc, #376]	; (80071a0 <interrupt_WallCut+0x4d0>)
 8007026:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8007028:	4b61      	ldr	r3, [pc, #388]	; (80071b0 <interrupt_WallCut+0x4e0>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 fab3 	bl	8000598 <__aeabi_f2d>
 8007032:	4604      	mov	r4, r0
 8007034:	460d      	mov	r5, r1
 8007036:	4b5f      	ldr	r3, [pc, #380]	; (80071b4 <interrupt_WallCut+0x4e4>)
 8007038:	ed93 7a00 	vldr	s14, [r3]
 800703c:	4b5e      	ldr	r3, [pc, #376]	; (80071b8 <interrupt_WallCut+0x4e8>)
 800703e:	edd3 7a00 	vldr	s15, [r3]
 8007042:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 8007046:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800704a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800704e:	ee16 0a90 	vmov	r0, s13
 8007052:	f7f9 faa1 	bl	8000598 <__aeabi_f2d>
 8007056:	a34e      	add	r3, pc, #312	; (adr r3, 8007190 <interrupt_WallCut+0x4c0>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 faf4 	bl	8000648 <__aeabi_dmul>
 8007060:	4602      	mov	r2, r0
 8007062:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 f938 	bl	80002dc <__adddf3>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	4610      	mov	r0, r2
 8007072:	4619      	mov	r1, r3
 8007074:	f7f9 fdc0 	bl	8000bf8 <__aeabi_d2f>
 8007078:	4603      	mov	r3, r0
 800707a:	4a4d      	ldr	r2, [pc, #308]	; (80071b0 <interrupt_WallCut+0x4e0>)
 800707c:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800707e:	4b4f      	ldr	r3, [pc, #316]	; (80071bc <interrupt_WallCut+0x4ec>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f113 0f45 	cmn.w	r3, #69	; 0x45
 8007086:	da05      	bge.n	8007094 <interrupt_WallCut+0x3c4>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8007088:	4b43      	ldr	r3, [pc, #268]	; (8007198 <interrupt_WallCut+0x4c8>)
 800708a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800708e:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8007092:	dd37      	ble.n	8007104 <interrupt_WallCut+0x434>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 8007094:	4b4a      	ldr	r3, [pc, #296]	; (80071c0 <interrupt_WallCut+0x4f0>)
 8007096:	f04f 0200 	mov.w	r2, #0
 800709a:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 800709c:	4b49      	ldr	r3, [pc, #292]	; (80071c4 <interrupt_WallCut+0x4f4>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	4a48      	ldr	r2, [pc, #288]	; (80071c4 <interrupt_WallCut+0x4f4>)
 80070a4:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 80070a6:	4b48      	ldr	r3, [pc, #288]	; (80071c8 <interrupt_WallCut+0x4f8>)
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 80070ac:	4b47      	ldr	r3, [pc, #284]	; (80071cc <interrupt_WallCut+0x4fc>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7f9 fa71 	bl	8000598 <__aeabi_f2d>
 80070b6:	4604      	mov	r4, r0
 80070b8:	460d      	mov	r5, r1
 80070ba:	4b3e      	ldr	r3, [pc, #248]	; (80071b4 <interrupt_WallCut+0x4e4>)
 80070bc:	ed93 7a00 	vldr	s14, [r3]
 80070c0:	4b3d      	ldr	r3, [pc, #244]	; (80071b8 <interrupt_WallCut+0x4e8>)
 80070c2:	edd3 7a00 	vldr	s15, [r3]
 80070c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070ca:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80070ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80070d2:	ee16 0a90 	vmov	r0, s13
 80070d6:	f7f9 fa5f 	bl	8000598 <__aeabi_f2d>
 80070da:	a32d      	add	r3, pc, #180	; (adr r3, 8007190 <interrupt_WallCut+0x4c0>)
 80070dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e0:	f7f9 fab2 	bl	8000648 <__aeabi_dmul>
 80070e4:	4602      	mov	r2, r0
 80070e6:	460b      	mov	r3, r1
 80070e8:	4620      	mov	r0, r4
 80070ea:	4629      	mov	r1, r5
 80070ec:	f7f9 f8f6 	bl	80002dc <__adddf3>
 80070f0:	4602      	mov	r2, r0
 80070f2:	460b      	mov	r3, r1
 80070f4:	4610      	mov	r0, r2
 80070f6:	4619      	mov	r1, r3
 80070f8:	f7f9 fd7e 	bl	8000bf8 <__aeabi_d2f>
 80070fc:	4603      	mov	r3, r0
 80070fe:	4a33      	ldr	r2, [pc, #204]	; (80071cc <interrupt_WallCut+0x4fc>)
 8007100:	6013      	str	r3, [r2, #0]
 8007102:	e097      	b.n	8007234 <interrupt_WallCut+0x564>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 8007104:	4b30      	ldr	r3, [pc, #192]	; (80071c8 <interrupt_WallCut+0x4f8>)
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d163      	bne.n	80071d4 <interrupt_WallCut+0x504>
				for (int i = 0; i <= 19; i++) {
 800710c:	2300      	movs	r3, #0
 800710e:	60bb      	str	r3, [r7, #8]
 8007110:	e01f      	b.n	8007152 <interrupt_WallCut+0x482>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8007112:	4a21      	ldr	r2, [pc, #132]	; (8007198 <interrupt_WallCut+0x4c8>)
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	333c      	adds	r3, #60	; 0x3c
 8007118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800711c:	ee07 3a90 	vmov	s15, r3
 8007120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007124:	4b26      	ldr	r3, [pc, #152]	; (80071c0 <interrupt_WallCut+0x4f0>)
 8007126:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 800712a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800712e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007132:	dd0b      	ble.n	800714c <interrupt_WallCut+0x47c>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8007134:	4a18      	ldr	r2, [pc, #96]	; (8007198 <interrupt_WallCut+0x4c8>)
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	333c      	adds	r3, #60	; 0x3c
 800713a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 8007146:	4b1e      	ldr	r3, [pc, #120]	; (80071c0 <interrupt_WallCut+0x4f0>)
 8007148:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	3301      	adds	r3, #1
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	2b13      	cmp	r3, #19
 8007156:	dddc      	ble.n	8007112 <interrupt_WallCut+0x442>
					}
				}
				NoWallCountR45 = 0;
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <interrupt_WallCut+0x4f4>)
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 800715e:	4b1a      	ldr	r3, [pc, #104]	; (80071c8 <interrupt_WallCut+0x4f8>)
 8007160:	2201      	movs	r2, #1
 8007162:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 8007164:	4b16      	ldr	r3, [pc, #88]	; (80071c0 <interrupt_WallCut+0x4f0>)
 8007166:	edd3 7a00 	vldr	s15, [r3]
 800716a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80071d0 <interrupt_WallCut+0x500>
 800716e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007172:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80071ac <interrupt_WallCut+0x4dc>
 8007176:	ee67 6a87 	vmul.f32	s13, s15, s14
 800717a:	4b11      	ldr	r3, [pc, #68]	; (80071c0 <interrupt_WallCut+0x4f0>)
 800717c:	ed93 7a00 	vldr	s14, [r3]
 8007180:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8007184:	4b11      	ldr	r3, [pc, #68]	; (80071cc <interrupt_WallCut+0x4fc>)
 8007186:	edc3 7a00 	vstr	s15, [r3]
 800718a:	e053      	b.n	8007234 <interrupt_WallCut+0x564>
 800718c:	f3af 8000 	nop.w
 8007190:	d2f1a9fc 	.word	0xd2f1a9fc
 8007194:	3f50624d 	.word	0x3f50624d
 8007198:	200002bc 	.word	0x200002bc
 800719c:	20000604 	.word	0x20000604
 80071a0:	200005cc 	.word	0x200005cc
 80071a4:	200005f8 	.word	0x200005f8
 80071a8:	43f68000 	.word	0x43f68000
 80071ac:	00000000 	.word	0x00000000
 80071b0:	200005e4 	.word	0x200005e4
 80071b4:	20000258 	.word	0x20000258
 80071b8:	2000025c 	.word	0x2000025c
 80071bc:	20000460 	.word	0x20000460
 80071c0:	20000608 	.word	0x20000608
 80071c4:	200005c8 	.word	0x200005c8
 80071c8:	200005f9 	.word	0x200005f9
 80071cc:	200005e0 	.word	0x200005e0
 80071d0:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 80071d4:	4b94      	ldr	r3, [pc, #592]	; (8007428 <interrupt_WallCut+0x758>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	3301      	adds	r3, #1
 80071da:	4a93      	ldr	r2, [pc, #588]	; (8007428 <interrupt_WallCut+0x758>)
 80071dc:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80071de:	4b93      	ldr	r3, [pc, #588]	; (800742c <interrupt_WallCut+0x75c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7f9 f9d8 	bl	8000598 <__aeabi_f2d>
 80071e8:	4604      	mov	r4, r0
 80071ea:	460d      	mov	r5, r1
 80071ec:	4b90      	ldr	r3, [pc, #576]	; (8007430 <interrupt_WallCut+0x760>)
 80071ee:	ed93 7a00 	vldr	s14, [r3]
 80071f2:	4b90      	ldr	r3, [pc, #576]	; (8007434 <interrupt_WallCut+0x764>)
 80071f4:	edd3 7a00 	vldr	s15, [r3]
 80071f8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80071fc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007200:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007204:	ee16 0a90 	vmov	r0, s13
 8007208:	f7f9 f9c6 	bl	8000598 <__aeabi_f2d>
 800720c:	a384      	add	r3, pc, #528	; (adr r3, 8007420 <interrupt_WallCut+0x750>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 fa19 	bl	8000648 <__aeabi_dmul>
 8007216:	4602      	mov	r2, r0
 8007218:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f85d 	bl	80002dc <__adddf3>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	f7f9 fce5 	bl	8000bf8 <__aeabi_d2f>
 800722e:	4603      	mov	r3, r0
 8007230:	4a7e      	ldr	r2, [pc, #504]	; (800742c <interrupt_WallCut+0x75c>)
 8007232:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 8007234:	4b80      	ldr	r3, [pc, #512]	; (8007438 <interrupt_WallCut+0x768>)
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f113 0fef 	cmn.w	r3, #239	; 0xef
 800723c:	db5f      	blt.n	80072fe <interrupt_WallCut+0x62e>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 800723e:	4b7f      	ldr	r3, [pc, #508]	; (800743c <interrupt_WallCut+0x76c>)
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 8007246:	4b7e      	ldr	r3, [pc, #504]	; (8007440 <interrupt_WallCut+0x770>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3301      	adds	r3, #1
 800724c:	4a7c      	ldr	r2, [pc, #496]	; (8007440 <interrupt_WallCut+0x770>)
 800724e:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8007250:	2000      	movs	r0, #0
 8007252:	f000 fccf 	bl	8007bf4 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <interrupt_WallCut+0x774>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800725c:	4b7a      	ldr	r3, [pc, #488]	; (8007448 <interrupt_WallCut+0x778>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f7f9 f999 	bl	8000598 <__aeabi_f2d>
 8007266:	4604      	mov	r4, r0
 8007268:	460d      	mov	r5, r1
 800726a:	4b71      	ldr	r3, [pc, #452]	; (8007430 <interrupt_WallCut+0x760>)
 800726c:	ed93 7a00 	vldr	s14, [r3]
 8007270:	4b70      	ldr	r3, [pc, #448]	; (8007434 <interrupt_WallCut+0x764>)
 8007272:	edd3 7a00 	vldr	s15, [r3]
 8007276:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800727a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800727e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007282:	ee16 0a90 	vmov	r0, s13
 8007286:	f7f9 f987 	bl	8000598 <__aeabi_f2d>
 800728a:	a365      	add	r3, pc, #404	; (adr r3, 8007420 <interrupt_WallCut+0x750>)
 800728c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007290:	f7f9 f9da 	bl	8000648 <__aeabi_dmul>
 8007294:	4602      	mov	r2, r0
 8007296:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8007298:	4620      	mov	r0, r4
 800729a:	4629      	mov	r1, r5
 800729c:	f7f9 f81e 	bl	80002dc <__adddf3>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	4610      	mov	r0, r2
 80072a6:	4619      	mov	r1, r3
 80072a8:	f7f9 fca6 	bl	8000bf8 <__aeabi_d2f>
 80072ac:	4603      	mov	r3, r0
 80072ae:	4a66      	ldr	r2, [pc, #408]	; (8007448 <interrupt_WallCut+0x778>)
 80072b0:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 80072b2:	4b66      	ldr	r3, [pc, #408]	; (800744c <interrupt_WallCut+0x77c>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	2b01      	cmp	r3, #1
 80072b8:	f040 812b 	bne.w	8007512 <interrupt_WallCut+0x842>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80072bc:	4b64      	ldr	r3, [pc, #400]	; (8007450 <interrupt_WallCut+0x780>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f7f9 f969 	bl	8000598 <__aeabi_f2d>
 80072c6:	4604      	mov	r4, r0
 80072c8:	460d      	mov	r5, r1
 80072ca:	4b62      	ldr	r3, [pc, #392]	; (8007454 <interrupt_WallCut+0x784>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4618      	mov	r0, r3
 80072d0:	f7f9 f962 	bl	8000598 <__aeabi_f2d>
 80072d4:	a352      	add	r3, pc, #328	; (adr r3, 8007420 <interrupt_WallCut+0x750>)
 80072d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072da:	f7f9 f9b5 	bl	8000648 <__aeabi_dmul>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4620      	mov	r0, r4
 80072e4:	4629      	mov	r1, r5
 80072e6:	f7f8 fff9 	bl	80002dc <__adddf3>
 80072ea:	4602      	mov	r2, r0
 80072ec:	460b      	mov	r3, r1
 80072ee:	4610      	mov	r0, r2
 80072f0:	4619      	mov	r1, r3
 80072f2:	f7f9 fc81 	bl	8000bf8 <__aeabi_d2f>
 80072f6:	4603      	mov	r3, r0
 80072f8:	4a55      	ldr	r2, [pc, #340]	; (8007450 <interrupt_WallCut+0x780>)
 80072fa:	6013      	str	r3, [r2, #0]
 80072fc:	e109      	b.n	8007512 <interrupt_WallCut+0x842>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80072fe:	4b51      	ldr	r3, [pc, #324]	; (8007444 <interrupt_WallCut+0x774>)
 8007300:	781b      	ldrb	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	f040 80ae 	bne.w	8007464 <interrupt_WallCut+0x794>
				for (int i = 0; i <= 19; i++) {
 8007308:	2300      	movs	r3, #0
 800730a:	607b      	str	r3, [r7, #4]
 800730c:	e01f      	b.n	800734e <interrupt_WallCut+0x67e>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 800730e:	4a52      	ldr	r2, [pc, #328]	; (8007458 <interrupt_WallCut+0x788>)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	3314      	adds	r3, #20
 8007314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007320:	4b46      	ldr	r3, [pc, #280]	; (800743c <interrupt_WallCut+0x76c>)
 8007322:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 8007326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800732a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800732e:	dd0b      	ble.n	8007348 <interrupt_WallCut+0x678>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8007330:	4a49      	ldr	r2, [pc, #292]	; (8007458 <interrupt_WallCut+0x788>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3314      	adds	r3, #20
 8007336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 8007342:	4b3e      	ldr	r3, [pc, #248]	; (800743c <interrupt_WallCut+0x76c>)
 8007344:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3301      	adds	r3, #1
 800734c:	607b      	str	r3, [r7, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b13      	cmp	r3, #19
 8007352:	dddc      	ble.n	800730e <interrupt_WallCut+0x63e>
					}
				}
				NoWallCountL45slant = 0;
 8007354:	4b3a      	ldr	r3, [pc, #232]	; (8007440 <interrupt_WallCut+0x770>)
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 800735a:	4b3a      	ldr	r3, [pc, #232]	; (8007444 <interrupt_WallCut+0x774>)
 800735c:	2201      	movs	r2, #1
 800735e:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8007360:	2001      	movs	r0, #1
 8007362:	f000 fc47 	bl	8007bf4 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8007366:	4b35      	ldr	r3, [pc, #212]	; (800743c <interrupt_WallCut+0x76c>)
 8007368:	edd3 7a00 	vldr	s15, [r3]
 800736c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800745c <interrupt_WallCut+0x78c>
 8007370:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007374:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800737c:	db26      	blt.n	80073cc <interrupt_WallCut+0x6fc>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800737e:	4b2f      	ldr	r3, [pc, #188]	; (800743c <interrupt_WallCut+0x76c>)
 8007380:	edd3 7a00 	vldr	s15, [r3]
 8007384:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800745c <interrupt_WallCut+0x78c>
 8007388:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800738c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8007460 <interrupt_WallCut+0x790>
 8007390:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007394:	4b29      	ldr	r3, [pc, #164]	; (800743c <interrupt_WallCut+0x76c>)
 8007396:	ed93 7a00 	vldr	s14, [r3]
 800739a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 800739e:	4b2c      	ldr	r3, [pc, #176]	; (8007450 <interrupt_WallCut+0x780>)
 80073a0:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80073a4:	4b25      	ldr	r3, [pc, #148]	; (800743c <interrupt_WallCut+0x76c>)
 80073a6:	edd3 7a00 	vldr	s15, [r3]
 80073aa:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800745c <interrupt_WallCut+0x78c>
 80073ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073b2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007460 <interrupt_WallCut+0x790>
 80073b6:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80073ba:	4b20      	ldr	r3, [pc, #128]	; (800743c <interrupt_WallCut+0x76c>)
 80073bc:	ed93 7a00 	vldr	s14, [r3]
 80073c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 80073c4:	4b20      	ldr	r3, [pc, #128]	; (8007448 <interrupt_WallCut+0x778>)
 80073c6:	edc3 7a00 	vstr	s15, [r3]
 80073ca:	e09f      	b.n	800750c <interrupt_WallCut+0x83c>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80073cc:	4b1b      	ldr	r3, [pc, #108]	; (800743c <interrupt_WallCut+0x76c>)
 80073ce:	edd3 7a00 	vldr	s15, [r3]
 80073d2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800745c <interrupt_WallCut+0x78c>
 80073d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073da:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007460 <interrupt_WallCut+0x790>
 80073de:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80073e2:	4b16      	ldr	r3, [pc, #88]	; (800743c <interrupt_WallCut+0x76c>)
 80073e4:	ed93 7a00 	vldr	s14, [r3]
 80073e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <interrupt_WallCut+0x780>)
 80073ee:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <interrupt_WallCut+0x76c>)
 80073f4:	edd3 7a00 	vldr	s15, [r3]
 80073f8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800745c <interrupt_WallCut+0x78c>
 80073fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007400:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8007460 <interrupt_WallCut+0x790>
 8007404:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8007408:	4b0c      	ldr	r3, [pc, #48]	; (800743c <interrupt_WallCut+0x76c>)
 800740a:	ed93 7a00 	vldr	s14, [r3]
 800740e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 8007412:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <interrupt_WallCut+0x778>)
 8007414:	edc3 7a00 	vstr	s15, [r3]
 8007418:	e078      	b.n	800750c <interrupt_WallCut+0x83c>
 800741a:	bf00      	nop
 800741c:	f3af 8000 	nop.w
 8007420:	d2f1a9fc 	.word	0xd2f1a9fc
 8007424:	3f50624d 	.word	0x3f50624d
 8007428:	200005c8 	.word	0x200005c8
 800742c:	200005e0 	.word	0x200005e0
 8007430:	20000258 	.word	0x20000258
 8007434:	2000025c 	.word	0x2000025c
 8007438:	20000460 	.word	0x20000460
 800743c:	2000060c 	.word	0x2000060c
 8007440:	200005d4 	.word	0x200005d4
 8007444:	200005fa 	.word	0x200005fa
 8007448:	200005f4 	.word	0x200005f4
 800744c:	200005fc 	.word	0x200005fc
 8007450:	200005ec 	.word	0x200005ec
 8007454:	200004dc 	.word	0x200004dc
 8007458:	200002bc 	.word	0x200002bc
 800745c:	455ac000 	.word	0x455ac000
 8007460:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8007464:	4bac      	ldr	r3, [pc, #688]	; (8007718 <interrupt_WallCut+0xa48>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3301      	adds	r3, #1
 800746a:	4aab      	ldr	r2, [pc, #684]	; (8007718 <interrupt_WallCut+0xa48>)
 800746c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800746e:	4bab      	ldr	r3, [pc, #684]	; (800771c <interrupt_WallCut+0xa4c>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4618      	mov	r0, r3
 8007474:	f7f9 f890 	bl	8000598 <__aeabi_f2d>
 8007478:	4604      	mov	r4, r0
 800747a:	460d      	mov	r5, r1
 800747c:	4ba8      	ldr	r3, [pc, #672]	; (8007720 <interrupt_WallCut+0xa50>)
 800747e:	ed93 7a00 	vldr	s14, [r3]
 8007482:	4ba8      	ldr	r3, [pc, #672]	; (8007724 <interrupt_WallCut+0xa54>)
 8007484:	edd3 7a00 	vldr	s15, [r3]
 8007488:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800748c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007490:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007494:	ee16 0a90 	vmov	r0, s13
 8007498:	f7f9 f87e 	bl	8000598 <__aeabi_f2d>
 800749c:	a39c      	add	r3, pc, #624	; (adr r3, 8007710 <interrupt_WallCut+0xa40>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f9 f8d1 	bl	8000648 <__aeabi_dmul>
 80074a6:	4602      	mov	r2, r0
 80074a8:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 80074aa:	4620      	mov	r0, r4
 80074ac:	4629      	mov	r1, r5
 80074ae:	f7f8 ff15 	bl	80002dc <__adddf3>
 80074b2:	4602      	mov	r2, r0
 80074b4:	460b      	mov	r3, r1
 80074b6:	4610      	mov	r0, r2
 80074b8:	4619      	mov	r1, r3
 80074ba:	f7f9 fb9d 	bl	8000bf8 <__aeabi_d2f>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a96      	ldr	r2, [pc, #600]	; (800771c <interrupt_WallCut+0xa4c>)
 80074c2:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 80074c4:	4b98      	ldr	r3, [pc, #608]	; (8007728 <interrupt_WallCut+0xa58>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	d11f      	bne.n	800750c <interrupt_WallCut+0x83c>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 80074cc:	4b97      	ldr	r3, [pc, #604]	; (800772c <interrupt_WallCut+0xa5c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 f861 	bl	8000598 <__aeabi_f2d>
 80074d6:	4604      	mov	r4, r0
 80074d8:	460d      	mov	r5, r1
 80074da:	4b95      	ldr	r3, [pc, #596]	; (8007730 <interrupt_WallCut+0xa60>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f7f9 f85a 	bl	8000598 <__aeabi_f2d>
 80074e4:	a38a      	add	r3, pc, #552	; (adr r3, 8007710 <interrupt_WallCut+0xa40>)
 80074e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074ea:	f7f9 f8ad 	bl	8000648 <__aeabi_dmul>
 80074ee:	4602      	mov	r2, r0
 80074f0:	460b      	mov	r3, r1
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f8 fef1 	bl	80002dc <__adddf3>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4610      	mov	r0, r2
 8007500:	4619      	mov	r1, r3
 8007502:	f7f9 fb79 	bl	8000bf8 <__aeabi_d2f>
 8007506:	4603      	mov	r3, r0
 8007508:	4a88      	ldr	r2, [pc, #544]	; (800772c <interrupt_WallCut+0xa5c>)
 800750a:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 800750c:	4b86      	ldr	r3, [pc, #536]	; (8007728 <interrupt_WallCut+0xa58>)
 800750e:	2201      	movs	r2, #1
 8007510:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 8007512:	4b88      	ldr	r3, [pc, #544]	; (8007734 <interrupt_WallCut+0xa64>)
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	f113 0fef 	cmn.w	r3, #239	; 0xef
 800751a:	db6a      	blt.n	80075f2 <interrupt_WallCut+0x922>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 800751c:	4b86      	ldr	r3, [pc, #536]	; (8007738 <interrupt_WallCut+0xa68>)
 800751e:	f04f 0200 	mov.w	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 8007524:	4b85      	ldr	r3, [pc, #532]	; (800773c <interrupt_WallCut+0xa6c>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3301      	adds	r3, #1
 800752a:	4a84      	ldr	r2, [pc, #528]	; (800773c <interrupt_WallCut+0xa6c>)
 800752c:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 800752e:	2000      	movs	r0, #0
 8007530:	f000 fb4e 	bl	8007bd0 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 8007534:	4b82      	ldr	r3, [pc, #520]	; (8007740 <interrupt_WallCut+0xa70>)
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 800753a:	4b82      	ldr	r3, [pc, #520]	; (8007744 <interrupt_WallCut+0xa74>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4618      	mov	r0, r3
 8007540:	f7f9 f82a 	bl	8000598 <__aeabi_f2d>
 8007544:	4604      	mov	r4, r0
 8007546:	460d      	mov	r5, r1
 8007548:	4b75      	ldr	r3, [pc, #468]	; (8007720 <interrupt_WallCut+0xa50>)
 800754a:	ed93 7a00 	vldr	s14, [r3]
 800754e:	4b75      	ldr	r3, [pc, #468]	; (8007724 <interrupt_WallCut+0xa54>)
 8007550:	edd3 7a00 	vldr	s15, [r3]
 8007554:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8007558:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800755c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007560:	ee16 0a90 	vmov	r0, s13
 8007564:	f7f9 f818 	bl	8000598 <__aeabi_f2d>
 8007568:	a369      	add	r3, pc, #420	; (adr r3, 8007710 <interrupt_WallCut+0xa40>)
 800756a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756e:	f7f9 f86b 	bl	8000648 <__aeabi_dmul>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007576:	4620      	mov	r0, r4
 8007578:	4629      	mov	r1, r5
 800757a:	f7f8 feaf 	bl	80002dc <__adddf3>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4610      	mov	r0, r2
 8007584:	4619      	mov	r1, r3
 8007586:	f7f9 fb37 	bl	8000bf8 <__aeabi_d2f>
 800758a:	4603      	mov	r3, r0
 800758c:	4a6d      	ldr	r2, [pc, #436]	; (8007744 <interrupt_WallCut+0xa74>)
 800758e:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8007590:	4b6d      	ldr	r3, [pc, #436]	; (8007748 <interrupt_WallCut+0xa78>)
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	f040 81a4 	bne.w	80078e2 <interrupt_WallCut+0xc12>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800759a:	4b6c      	ldr	r3, [pc, #432]	; (800774c <interrupt_WallCut+0xa7c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f7f8 fffa 	bl	8000598 <__aeabi_f2d>
 80075a4:	4604      	mov	r4, r0
 80075a6:	460d      	mov	r5, r1
 80075a8:	4b5d      	ldr	r3, [pc, #372]	; (8007720 <interrupt_WallCut+0xa50>)
 80075aa:	ed93 7a00 	vldr	s14, [r3]
 80075ae:	4b5d      	ldr	r3, [pc, #372]	; (8007724 <interrupt_WallCut+0xa54>)
 80075b0:	edd3 7a00 	vldr	s15, [r3]
 80075b4:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 80075b8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80075bc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80075c0:	ee16 0a90 	vmov	r0, s13
 80075c4:	f7f8 ffe8 	bl	8000598 <__aeabi_f2d>
 80075c8:	a351      	add	r3, pc, #324	; (adr r3, 8007710 <interrupt_WallCut+0xa40>)
 80075ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ce:	f7f9 f83b 	bl	8000648 <__aeabi_dmul>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80075d6:	4620      	mov	r0, r4
 80075d8:	4629      	mov	r1, r5
 80075da:	f7f8 fe7f 	bl	80002dc <__adddf3>
 80075de:	4602      	mov	r2, r0
 80075e0:	460b      	mov	r3, r1
 80075e2:	4610      	mov	r0, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	f7f9 fb07 	bl	8000bf8 <__aeabi_d2f>
 80075ea:	4603      	mov	r3, r0
 80075ec:	4a57      	ldr	r2, [pc, #348]	; (800774c <interrupt_WallCut+0xa7c>)
 80075ee:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 80075f0:	e177      	b.n	80078e2 <interrupt_WallCut+0xc12>
			if (NoWallCountR45slant_flag == 0) {
 80075f2:	4b53      	ldr	r3, [pc, #332]	; (8007740 <interrupt_WallCut+0xa70>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 80b0 	bne.w	800775c <interrupt_WallCut+0xa8c>
				for (int i = 0; i <= 19; i++) {
 80075fc:	2300      	movs	r3, #0
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	e01f      	b.n	8007642 <interrupt_WallCut+0x972>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 8007602:	4a53      	ldr	r2, [pc, #332]	; (8007750 <interrupt_WallCut+0xa80>)
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	333c      	adds	r3, #60	; 0x3c
 8007608:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800760c:	ee07 3a90 	vmov	s15, r3
 8007610:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007614:	4b48      	ldr	r3, [pc, #288]	; (8007738 <interrupt_WallCut+0xa68>)
 8007616:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 800761a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800761e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007622:	dd0b      	ble.n	800763c <interrupt_WallCut+0x96c>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 8007624:	4a4a      	ldr	r2, [pc, #296]	; (8007750 <interrupt_WallCut+0xa80>)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	333c      	adds	r3, #60	; 0x3c
 800762a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 8007636:	4b40      	ldr	r3, [pc, #256]	; (8007738 <interrupt_WallCut+0xa68>)
 8007638:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	3301      	adds	r3, #1
 8007640:	603b      	str	r3, [r7, #0]
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b13      	cmp	r3, #19
 8007646:	dddc      	ble.n	8007602 <interrupt_WallCut+0x932>
				NoWallCountR45slant = 0;
 8007648:	4b3c      	ldr	r3, [pc, #240]	; (800773c <interrupt_WallCut+0xa6c>)
 800764a:	2200      	movs	r2, #0
 800764c:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 800764e:	4b3c      	ldr	r3, [pc, #240]	; (8007740 <interrupt_WallCut+0xa70>)
 8007650:	2201      	movs	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8007654:	2001      	movs	r0, #1
 8007656:	f000 fabb 	bl	8007bd0 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 800765a:	4b37      	ldr	r3, [pc, #220]	; (8007738 <interrupt_WallCut+0xa68>)
 800765c:	edd3 7a00 	vldr	s15, [r3]
 8007660:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007754 <interrupt_WallCut+0xa84>
 8007664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800766c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007670:	db26      	blt.n	80076c0 <interrupt_WallCut+0x9f0>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007672:	4b31      	ldr	r3, [pc, #196]	; (8007738 <interrupt_WallCut+0xa68>)
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007754 <interrupt_WallCut+0xa84>
 800767c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007680:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8007758 <interrupt_WallCut+0xa88>
 8007684:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8007688:	4b2b      	ldr	r3, [pc, #172]	; (8007738 <interrupt_WallCut+0xa68>)
 800768a:	ed93 7a00 	vldr	s14, [r3]
 800768e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <interrupt_WallCut+0xa7c>)
 8007694:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8007698:	4b27      	ldr	r3, [pc, #156]	; (8007738 <interrupt_WallCut+0xa68>)
 800769a:	edd3 7a00 	vldr	s15, [r3]
 800769e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8007754 <interrupt_WallCut+0xa84>
 80076a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076a6:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007758 <interrupt_WallCut+0xa88>
 80076aa:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80076ae:	4b22      	ldr	r3, [pc, #136]	; (8007738 <interrupt_WallCut+0xa68>)
 80076b0:	ed93 7a00 	vldr	s14, [r3]
 80076b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 80076b8:	4b22      	ldr	r3, [pc, #136]	; (8007744 <interrupt_WallCut+0xa74>)
 80076ba:	edc3 7a00 	vstr	s15, [r3]
 80076be:	e0ac      	b.n	800781a <interrupt_WallCut+0xb4a>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 80076c0:	4b1d      	ldr	r3, [pc, #116]	; (8007738 <interrupt_WallCut+0xa68>)
 80076c2:	edd3 7a00 	vldr	s15, [r3]
 80076c6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007754 <interrupt_WallCut+0xa84>
 80076ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076ce:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8007758 <interrupt_WallCut+0xa88>
 80076d2:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <interrupt_WallCut+0xa68>)
 80076d8:	ed93 7a00 	vldr	s14, [r3]
 80076dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 80076e0:	4b1a      	ldr	r3, [pc, #104]	; (800774c <interrupt_WallCut+0xa7c>)
 80076e2:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 80076e6:	4b14      	ldr	r3, [pc, #80]	; (8007738 <interrupt_WallCut+0xa68>)
 80076e8:	edd3 7a00 	vldr	s15, [r3]
 80076ec:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8007754 <interrupt_WallCut+0xa84>
 80076f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80076f4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8007758 <interrupt_WallCut+0xa88>
 80076f8:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 80076fc:	4b0e      	ldr	r3, [pc, #56]	; (8007738 <interrupt_WallCut+0xa68>)
 80076fe:	ed93 7a00 	vldr	s14, [r3]
 8007702:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8007706:	4b0f      	ldr	r3, [pc, #60]	; (8007744 <interrupt_WallCut+0xa74>)
 8007708:	edc3 7a00 	vstr	s15, [r3]
 800770c:	e085      	b.n	800781a <interrupt_WallCut+0xb4a>
 800770e:	bf00      	nop
 8007710:	d2f1a9fc 	.word	0xd2f1a9fc
 8007714:	3f50624d 	.word	0x3f50624d
 8007718:	200005d4 	.word	0x200005d4
 800771c:	200005f4 	.word	0x200005f4
 8007720:	20000258 	.word	0x20000258
 8007724:	2000025c 	.word	0x2000025c
 8007728:	200005fc 	.word	0x200005fc
 800772c:	200005ec 	.word	0x200005ec
 8007730:	200004dc 	.word	0x200004dc
 8007734:	20000460 	.word	0x20000460
 8007738:	20000610 	.word	0x20000610
 800773c:	200005d0 	.word	0x200005d0
 8007740:	200005fb 	.word	0x200005fb
 8007744:	200005f0 	.word	0x200005f0
 8007748:	200005fd 	.word	0x200005fd
 800774c:	200005e8 	.word	0x200005e8
 8007750:	200002bc 	.word	0x200002bc
 8007754:	455ac000 	.word	0x455ac000
 8007758:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 800775c:	4b66      	ldr	r3, [pc, #408]	; (80078f8 <interrupt_WallCut+0xc28>)
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3301      	adds	r3, #1
 8007762:	4a65      	ldr	r2, [pc, #404]	; (80078f8 <interrupt_WallCut+0xc28>)
 8007764:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8007766:	4b65      	ldr	r3, [pc, #404]	; (80078fc <interrupt_WallCut+0xc2c>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4618      	mov	r0, r3
 800776c:	f7f8 ff14 	bl	8000598 <__aeabi_f2d>
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	4b62      	ldr	r3, [pc, #392]	; (8007900 <interrupt_WallCut+0xc30>)
 8007776:	ed93 7a00 	vldr	s14, [r3]
 800777a:	4b62      	ldr	r3, [pc, #392]	; (8007904 <interrupt_WallCut+0xc34>)
 800777c:	edd3 7a00 	vldr	s15, [r3]
 8007780:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8007784:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007788:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800778c:	ee16 0a90 	vmov	r0, s13
 8007790:	f7f8 ff02 	bl	8000598 <__aeabi_f2d>
 8007794:	a356      	add	r3, pc, #344	; (adr r3, 80078f0 <interrupt_WallCut+0xc20>)
 8007796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779a:	f7f8 ff55 	bl	8000648 <__aeabi_dmul>
 800779e:	4602      	mov	r2, r0
 80077a0:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80077a2:	4620      	mov	r0, r4
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7f8 fd99 	bl	80002dc <__adddf3>
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4610      	mov	r0, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	f7f9 fa21 	bl	8000bf8 <__aeabi_d2f>
 80077b6:	4603      	mov	r3, r0
 80077b8:	4a50      	ldr	r2, [pc, #320]	; (80078fc <interrupt_WallCut+0xc2c>)
 80077ba:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 80077bc:	4b52      	ldr	r3, [pc, #328]	; (8007908 <interrupt_WallCut+0xc38>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b01      	cmp	r3, #1
 80077c2:	d12a      	bne.n	800781a <interrupt_WallCut+0xb4a>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 80077c4:	4b51      	ldr	r3, [pc, #324]	; (800790c <interrupt_WallCut+0xc3c>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7f8 fee5 	bl	8000598 <__aeabi_f2d>
 80077ce:	4604      	mov	r4, r0
 80077d0:	460d      	mov	r5, r1
 80077d2:	4b4b      	ldr	r3, [pc, #300]	; (8007900 <interrupt_WallCut+0xc30>)
 80077d4:	ed93 7a00 	vldr	s14, [r3]
 80077d8:	4b4a      	ldr	r3, [pc, #296]	; (8007904 <interrupt_WallCut+0xc34>)
 80077da:	edd3 7a00 	vldr	s15, [r3]
 80077de:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 80077e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80077e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077ea:	ee16 0a90 	vmov	r0, s13
 80077ee:	f7f8 fed3 	bl	8000598 <__aeabi_f2d>
 80077f2:	a33f      	add	r3, pc, #252	; (adr r3, 80078f0 <interrupt_WallCut+0xc20>)
 80077f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f8:	f7f8 ff26 	bl	8000648 <__aeabi_dmul>
 80077fc:	4602      	mov	r2, r0
 80077fe:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8007800:	4620      	mov	r0, r4
 8007802:	4629      	mov	r1, r5
 8007804:	f7f8 fd6a 	bl	80002dc <__adddf3>
 8007808:	4602      	mov	r2, r0
 800780a:	460b      	mov	r3, r1
 800780c:	4610      	mov	r0, r2
 800780e:	4619      	mov	r1, r3
 8007810:	f7f9 f9f2 	bl	8000bf8 <__aeabi_d2f>
 8007814:	4603      	mov	r3, r0
 8007816:	4a3d      	ldr	r2, [pc, #244]	; (800790c <interrupt_WallCut+0xc3c>)
 8007818:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 800781a:	4b3b      	ldr	r3, [pc, #236]	; (8007908 <interrupt_WallCut+0xc38>)
 800781c:	2201      	movs	r2, #1
 800781e:	701a      	strb	r2, [r3, #0]
}
 8007820:	e05f      	b.n	80078e2 <interrupt_WallCut+0xc12>
		NoWallCountL90 = 0;
 8007822:	4b3b      	ldr	r3, [pc, #236]	; (8007910 <interrupt_WallCut+0xc40>)
 8007824:	2200      	movs	r2, #0
 8007826:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8007828:	4b3a      	ldr	r3, [pc, #232]	; (8007914 <interrupt_WallCut+0xc44>)
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 800782e:	4b3a      	ldr	r3, [pc, #232]	; (8007918 <interrupt_WallCut+0xc48>)
 8007830:	2200      	movs	r2, #0
 8007832:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8007834:	4b39      	ldr	r3, [pc, #228]	; (800791c <interrupt_WallCut+0xc4c>)
 8007836:	2200      	movs	r2, #0
 8007838:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 800783a:	4b39      	ldr	r3, [pc, #228]	; (8007920 <interrupt_WallCut+0xc50>)
 800783c:	2200      	movs	r2, #0
 800783e:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8007840:	4b2d      	ldr	r3, [pc, #180]	; (80078f8 <interrupt_WallCut+0xc28>)
 8007842:	2200      	movs	r2, #0
 8007844:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8007846:	4b37      	ldr	r3, [pc, #220]	; (8007924 <interrupt_WallCut+0xc54>)
 8007848:	f04f 0200 	mov.w	r2, #0
 800784c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 800784e:	4b36      	ldr	r3, [pc, #216]	; (8007928 <interrupt_WallCut+0xc58>)
 8007850:	f04f 0200 	mov.w	r2, #0
 8007854:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8007856:	4b35      	ldr	r3, [pc, #212]	; (800792c <interrupt_WallCut+0xc5c>)
 8007858:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 800785c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 800785e:	4b34      	ldr	r3, [pc, #208]	; (8007930 <interrupt_WallCut+0xc60>)
 8007860:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8007864:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8007866:	4b33      	ldr	r3, [pc, #204]	; (8007934 <interrupt_WallCut+0xc64>)
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 800786e:	4b27      	ldr	r3, [pc, #156]	; (800790c <interrupt_WallCut+0xc3c>)
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8007876:	4b30      	ldr	r3, [pc, #192]	; (8007938 <interrupt_WallCut+0xc68>)
 8007878:	f04f 0200 	mov.w	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 800787e:	4b1f      	ldr	r3, [pc, #124]	; (80078fc <interrupt_WallCut+0xc2c>)
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8007886:	4b2d      	ldr	r3, [pc, #180]	; (800793c <interrupt_WallCut+0xc6c>)
 8007888:	2200      	movs	r2, #0
 800788a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 800788c:	4b2c      	ldr	r3, [pc, #176]	; (8007940 <interrupt_WallCut+0xc70>)
 800788e:	2200      	movs	r2, #0
 8007890:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8007892:	4b2c      	ldr	r3, [pc, #176]	; (8007944 <interrupt_WallCut+0xc74>)
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8007898:	4b2b      	ldr	r3, [pc, #172]	; (8007948 <interrupt_WallCut+0xc78>)
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 800789e:	4b2b      	ldr	r3, [pc, #172]	; (800794c <interrupt_WallCut+0xc7c>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 80078a4:	4b18      	ldr	r3, [pc, #96]	; (8007908 <interrupt_WallCut+0xc38>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 80078aa:	4b29      	ldr	r3, [pc, #164]	; (8007950 <interrupt_WallCut+0xc80>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 80078b0:	4b28      	ldr	r3, [pc, #160]	; (8007954 <interrupt_WallCut+0xc84>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80078b6:	4b28      	ldr	r3, [pc, #160]	; (8007958 <interrupt_WallCut+0xc88>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 80078bc:	4b26      	ldr	r3, [pc, #152]	; (8007958 <interrupt_WallCut+0xc88>)
 80078be:	2200      	movs	r2, #0
 80078c0:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 80078c2:	4b26      	ldr	r3, [pc, #152]	; (800795c <interrupt_WallCut+0xc8c>)
 80078c4:	f04f 0200 	mov.w	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 80078ca:	4b25      	ldr	r3, [pc, #148]	; (8007960 <interrupt_WallCut+0xc90>)
 80078cc:	f04f 0200 	mov.w	r2, #0
 80078d0:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 80078d2:	4b24      	ldr	r3, [pc, #144]	; (8007964 <interrupt_WallCut+0xc94>)
 80078d4:	f04f 0200 	mov.w	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 80078da:	4b23      	ldr	r3, [pc, #140]	; (8007968 <interrupt_WallCut+0xc98>)
 80078dc:	f04f 0200 	mov.w	r2, #0
 80078e0:	601a      	str	r2, [r3, #0]
}
 80078e2:	bf00      	nop
 80078e4:	3718      	adds	r7, #24
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bdb0      	pop	{r4, r5, r7, pc}
 80078ea:	bf00      	nop
 80078ec:	f3af 8000 	nop.w
 80078f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80078f4:	3f50624d 	.word	0x3f50624d
 80078f8:	200005d0 	.word	0x200005d0
 80078fc:	200005f0 	.word	0x200005f0
 8007900:	20000258 	.word	0x20000258
 8007904:	2000025c 	.word	0x2000025c
 8007908:	200005fd 	.word	0x200005fd
 800790c:	200005e8 	.word	0x200005e8
 8007910:	200005c4 	.word	0x200005c4
 8007914:	200005c0 	.word	0x200005c0
 8007918:	200005cc 	.word	0x200005cc
 800791c:	200005c8 	.word	0x200005c8
 8007920:	200005d4 	.word	0x200005d4
 8007924:	200005dc 	.word	0x200005dc
 8007928:	200005d8 	.word	0x200005d8
 800792c:	200005e4 	.word	0x200005e4
 8007930:	200005e0 	.word	0x200005e0
 8007934:	200005ec 	.word	0x200005ec
 8007938:	200005f4 	.word	0x200005f4
 800793c:	200005f8 	.word	0x200005f8
 8007940:	200005f9 	.word	0x200005f9
 8007944:	200005fa 	.word	0x200005fa
 8007948:	200005fb 	.word	0x200005fb
 800794c:	200005fc 	.word	0x200005fc
 8007950:	200005fe 	.word	0x200005fe
 8007954:	200005ff 	.word	0x200005ff
 8007958:	20000600 	.word	0x20000600
 800795c:	20000604 	.word	0x20000604
 8007960:	20000608 	.word	0x20000608
 8007964:	2000060c 	.word	0x2000060c
 8007968:	20000610 	.word	0x20000610

0800796c <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800797e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007982:	f015 f831 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 8007986:	bf00      	nop
 8007988:	3708      	adds	r7, #8
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	b2db      	uxtb	r3, r3
 800799c:	461a      	mov	r2, r3
 800799e:	2140      	movs	r1, #64	; 0x40
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <pl_yellow_LED_3+0x20>)
 80079a2:	f015 f821 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	48000800 	.word	0x48000800

080079b4 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	461a      	mov	r2, r3
 80079c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80079c6:	4803      	ldr	r0, [pc, #12]	; (80079d4 <pl_yellow_LED_6+0x20>)
 80079c8:	f015 f80e 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	48000400 	.word	0x48000400

080079d8 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 80079d8:	b580      	push	{r7, lr}
 80079da:	b082      	sub	sp, #8
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	461a      	mov	r2, r3
 80079e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80079ea:	4803      	ldr	r0, [pc, #12]	; (80079f8 <pl_yellow_LED_8+0x20>)
 80079ec:	f014 fffc 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 80079f0:	bf00      	nop
 80079f2:	3708      	adds	r7, #8
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	48000400 	.word	0x48000400

080079fc <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 80079fc:	b580      	push	{r7, lr}
 80079fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007a00:	2200      	movs	r2, #0
 8007a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a0a:	f014 ffed 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007a18:	f014 ffe6 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	2140      	movs	r1, #64	; 0x40
 8007a20:	4811      	ldr	r0, [pc, #68]	; (8007a68 <pl_yellow_LED_off+0x6c>)
 8007a22:	f014 ffe1 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007a26:	2200      	movs	r2, #0
 8007a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007a2c:	480f      	ldr	r0, [pc, #60]	; (8007a6c <pl_yellow_LED_off+0x70>)
 8007a2e:	f014 ffdb 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007a32:	2200      	movs	r2, #0
 8007a34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007a38:	480c      	ldr	r0, [pc, #48]	; (8007a6c <pl_yellow_LED_off+0x70>)
 8007a3a:	f014 ffd5 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007a44:	4809      	ldr	r0, [pc, #36]	; (8007a6c <pl_yellow_LED_off+0x70>)
 8007a46:	f014 ffcf 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007a50:	4806      	ldr	r0, [pc, #24]	; (8007a6c <pl_yellow_LED_off+0x70>)
 8007a52:	f014 ffc9 	bl	801c9e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007a56:	2200      	movs	r2, #0
 8007a58:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <pl_yellow_LED_off+0x70>)
 8007a5e:	f014 ffc3 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 8007a62:	bf00      	nop
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	48000800 	.word	0x48000800
 8007a6c:	48000400 	.word	0x48000400

08007a70 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8007a7a:	79fb      	ldrb	r3, [r7, #7]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8007a82:	79fb      	ldrb	r3, [r7, #7]
 8007a84:	f003 0302 	and.w	r3, r3, #2
 8007a88:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8007a8a:	79fb      	ldrb	r3, [r7, #7]
 8007a8c:	f003 0304 	and.w	r3, r3, #4
 8007a90:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8007a92:	79fb      	ldrb	r3, [r7, #7]
 8007a94:	f003 0308 	and.w	r3, r3, #8
 8007a98:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f003 0310 	and.w	r3, r3, #16
 8007aa0:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8007aa2:	79fb      	ldrb	r3, [r7, #7]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8007aaa:	79fb      	ldrb	r3, [r7, #7]
 8007aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ab0:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007ab8:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ac6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aca:	f014 ff8d 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007ace:	e006      	b.n	8007ade <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ad6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007ada:	f014 ff85 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8007ade:	7bbb      	ldrb	r3, [r7, #14]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007aee:	f014 ff7b 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007af2:	e006      	b.n	8007b02 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8007af4:	2200      	movs	r2, #0
 8007af6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007afe:	f014 ff73 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8007b02:	7b7b      	ldrb	r3, [r7, #13]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8007b08:	2201      	movs	r2, #1
 8007b0a:	2140      	movs	r1, #64	; 0x40
 8007b0c:	482e      	ldr	r0, [pc, #184]	; (8007bc8 <pl_yellow_LED_count+0x158>)
 8007b0e:	f014 ff6b 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007b12:	e004      	b.n	8007b1e <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8007b14:	2200      	movs	r2, #0
 8007b16:	2140      	movs	r1, #64	; 0x40
 8007b18:	482b      	ldr	r0, [pc, #172]	; (8007bc8 <pl_yellow_LED_count+0x158>)
 8007b1a:	f014 ff65 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8007b1e:	7b3b      	ldrb	r3, [r7, #12]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8007b24:	2201      	movs	r2, #1
 8007b26:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b2a:	4828      	ldr	r0, [pc, #160]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b2c:	f014 ff5c 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007b30:	e005      	b.n	8007b3e <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8007b32:	2200      	movs	r2, #0
 8007b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b38:	4824      	ldr	r0, [pc, #144]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b3a:	f014 ff55 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d006      	beq.n	8007b52 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8007b44:	2201      	movs	r2, #1
 8007b46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b4a:	4820      	ldr	r0, [pc, #128]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b4c:	f014 ff4c 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007b50:	e005      	b.n	8007b5e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8007b52:	2200      	movs	r2, #0
 8007b54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b58:	481c      	ldr	r0, [pc, #112]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b5a:	f014 ff45 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8007b5e:	7abb      	ldrb	r3, [r7, #10]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d006      	beq.n	8007b72 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8007b64:	2201      	movs	r2, #1
 8007b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b6a:	4818      	ldr	r0, [pc, #96]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b6c:	f014 ff3c 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007b70:	e005      	b.n	8007b7e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8007b72:	2200      	movs	r2, #0
 8007b74:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007b78:	4814      	ldr	r0, [pc, #80]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b7a:	f014 ff35 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8007b7e:	7a7b      	ldrb	r3, [r7, #9]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d006      	beq.n	8007b92 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8007b84:	2201      	movs	r2, #1
 8007b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b8a:	4810      	ldr	r0, [pc, #64]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b8c:	f014 ff2c 	bl	801c9e8 <HAL_GPIO_WritePin>
 8007b90:	e005      	b.n	8007b9e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8007b92:	2200      	movs	r2, #0
 8007b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b98:	480c      	ldr	r0, [pc, #48]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007b9a:	f014 ff25 	bl	801c9e8 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8007b9e:	7a3b      	ldrb	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d006      	beq.n	8007bb2 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007baa:	4808      	ldr	r0, [pc, #32]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007bac:	f014 ff1c 	bl	801c9e8 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8007bb0:	e005      	b.n	8007bbe <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bb8:	4804      	ldr	r0, [pc, #16]	; (8007bcc <pl_yellow_LED_count+0x15c>)
 8007bba:	f014 ff15 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 8007bbe:	bf00      	nop
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	48000800 	.word	0x48000800
 8007bcc:	48000400 	.word	0x48000400

08007bd0 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007be2:	4803      	ldr	r0, [pc, #12]	; (8007bf0 <pl_r_blue_LED+0x20>)
 8007be4:	f014 ff00 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 8007be8:	bf00      	nop
 8007bea:	3708      	adds	r7, #8
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	48000800 	.word	0x48000800

08007bf4 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	2104      	movs	r1, #4
 8007c04:	4803      	ldr	r0, [pc, #12]	; (8007c14 <pl_l_blue_LED+0x20>)
 8007c06:	f014 feef 	bl	801c9e8 <HAL_GPIO_WritePin>
}
 8007c0a:	bf00      	nop
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	48000400 	.word	0x48000400

08007c18 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	460a      	mov	r2, r1
 8007c22:	80fb      	strh	r3, [r7, #6]
 8007c24:	4613      	mov	r3, r2
 8007c26:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007c28:	2200      	movs	r2, #0
 8007c2a:	2110      	movs	r1, #16
 8007c2c:	4833      	ldr	r0, [pc, #204]	; (8007cfc <encoder_read_byte_R+0xe4>)
 8007c2e:	f014 fedb 	bl	801c9e8 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007c32:	88fb      	ldrh	r3, [r7, #6]
 8007c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c38:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61bb      	str	r3, [r7, #24]
 8007c42:	e00d      	b.n	8007c60 <encoder_read_byte_R+0x48>
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	fa42 f303 	asr.w	r3, r2, r3
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	8bfb      	ldrh	r3, [r7, #30]
 8007c56:	4413      	add	r3, r2
 8007c58:	83fb      	strh	r3, [r7, #30]
 8007c5a:	69bb      	ldr	r3, [r7, #24]
 8007c5c:	3301      	adds	r3, #1
 8007c5e:	61bb      	str	r3, [r7, #24]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	2b0e      	cmp	r3, #14
 8007c64:	ddee      	ble.n	8007c44 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007c66:	8bfb      	ldrh	r3, [r7, #30]
 8007c68:	03db      	lsls	r3, r3, #15
 8007c6a:	b21a      	sxth	r2, r3
 8007c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	b21b      	sxth	r3, r3
 8007c74:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007c76:	88fb      	ldrh	r3, [r7, #6]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007c80:	88fb      	ldrh	r3, [r7, #6]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007c86:	f107 0110 	add.w	r1, r7, #16
 8007c8a:	2332      	movs	r3, #50	; 0x32
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	481c      	ldr	r0, [pc, #112]	; (8007d00 <encoder_read_byte_R+0xe8>)
 8007c90:	f015 ff8d 	bl	801dbae <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007c94:	2201      	movs	r2, #1
 8007c96:	2110      	movs	r1, #16
 8007c98:	4818      	ldr	r0, [pc, #96]	; (8007cfc <encoder_read_byte_R+0xe4>)
 8007c9a:	f014 fea5 	bl	801c9e8 <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	617b      	str	r3, [r7, #20]
 8007ca2:	e002      	b.n	8007caa <encoder_read_byte_R+0x92>
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	617b      	str	r3, [r7, #20]
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b31      	cmp	r3, #49	; 0x31
 8007cae:	ddf9      	ble.n	8007ca4 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2110      	movs	r1, #16
 8007cb4:	4811      	ldr	r0, [pc, #68]	; (8007cfc <encoder_read_byte_R+0xe4>)
 8007cb6:	f014 fe97 	bl	801c9e8 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 8007cba:	88bb      	ldrh	r3, [r7, #4]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007cc4:	88bb      	ldrh	r3, [r7, #4]
 8007cc6:	b2db      	uxtb	r3, r3
 8007cc8:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007cca:	f107 010c 	add.w	r1, r7, #12
 8007cce:	2332      	movs	r3, #50	; 0x32
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	480b      	ldr	r0, [pc, #44]	; (8007d00 <encoder_read_byte_R+0xe8>)
 8007cd4:	f016 f8d9 	bl	801de8a <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007cd8:	7b3b      	ldrb	r3, [r7, #12]
 8007cda:	021b      	lsls	r3, r3, #8
 8007cdc:	b21a      	sxth	r2, r3
 8007cde:	7b7b      	ldrb	r3, [r7, #13]
 8007ce0:	b21b      	sxth	r3, r3
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	b21b      	sxth	r3, r3
 8007ce6:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007ce8:	2201      	movs	r2, #1
 8007cea:	2110      	movs	r1, #16
 8007cec:	4803      	ldr	r0, [pc, #12]	; (8007cfc <encoder_read_byte_R+0xe4>)
 8007cee:	f014 fe7b 	bl	801c9e8 <HAL_GPIO_WritePin>

	return data;
 8007cf2:	88bb      	ldrh	r3, [r7, #4]

}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3720      	adds	r7, #32
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	48000400 	.word	0x48000400
 8007d00:	2000f2f8 	.word	0x2000f2f8

08007d04 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	460a      	mov	r2, r1
 8007d0e:	80fb      	strh	r3, [r7, #6]
 8007d10:	4613      	mov	r3, r2
 8007d12:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007d14:	2200      	movs	r2, #0
 8007d16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d1e:	f014 fe63 	bl	801c9e8 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8007d22:	88fb      	ldrh	r3, [r7, #6]
 8007d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d28:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]
 8007d32:	e00d      	b.n	8007d50 <encoder_read_byte_L+0x4c>
 8007d34:	88fa      	ldrh	r2, [r7, #6]
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	fa42 f303 	asr.w	r3, r2, r3
 8007d3c:	b29b      	uxth	r3, r3
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	8bfb      	ldrh	r3, [r7, #30]
 8007d46:	4413      	add	r3, r2
 8007d48:	83fb      	strh	r3, [r7, #30]
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	61bb      	str	r3, [r7, #24]
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	2b0e      	cmp	r3, #14
 8007d54:	ddee      	ble.n	8007d34 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007d56:	8bfb      	ldrh	r3, [r7, #30]
 8007d58:	03db      	lsls	r3, r3, #15
 8007d5a:	b21a      	sxth	r2, r3
 8007d5c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007d60:	4313      	orrs	r3, r2
 8007d62:	b21b      	sxth	r3, r3
 8007d64:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007d66:	88fb      	ldrh	r3, [r7, #6]
 8007d68:	0a1b      	lsrs	r3, r3, #8
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007d70:	88fb      	ldrh	r3, [r7, #6]
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 50);
 8007d76:	f107 0110 	add.w	r1, r7, #16
 8007d7a:	2332      	movs	r3, #50	; 0x32
 8007d7c:	2202      	movs	r2, #2
 8007d7e:	481e      	ldr	r0, [pc, #120]	; (8007df8 <encoder_read_byte_L+0xf4>)
 8007d80:	f015 ff15 	bl	801dbae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007d84:	2201      	movs	r2, #1
 8007d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d8e:	f014 fe2b 	bl	801c9e8 <HAL_GPIO_WritePin>

	for(int i=0;i<50;i++){}
 8007d92:	2300      	movs	r3, #0
 8007d94:	617b      	str	r3, [r7, #20]
 8007d96:	e002      	b.n	8007d9e <encoder_read_byte_L+0x9a>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b31      	cmp	r3, #49	; 0x31
 8007da2:	ddf9      	ble.n	8007d98 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007da4:	2200      	movs	r2, #0
 8007da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007daa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dae:	f014 fe1b 	bl	801c9e8 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007db2:	88bb      	ldrh	r3, [r7, #4]
 8007db4:	0a1b      	lsrs	r3, r3, #8
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007dbc:	88bb      	ldrh	r3, [r7, #4]
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 50);
 8007dc2:	f107 010c 	add.w	r1, r7, #12
 8007dc6:	2332      	movs	r3, #50	; 0x32
 8007dc8:	2202      	movs	r2, #2
 8007dca:	480b      	ldr	r0, [pc, #44]	; (8007df8 <encoder_read_byte_L+0xf4>)
 8007dcc:	f016 f85d 	bl	801de8a <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007dd0:	7b3b      	ldrb	r3, [r7, #12]
 8007dd2:	021b      	lsls	r3, r3, #8
 8007dd4:	b21a      	sxth	r2, r3
 8007dd6:	7b7b      	ldrb	r3, [r7, #13]
 8007dd8:	b21b      	sxth	r3, r3
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	b21b      	sxth	r3, r3
 8007dde:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007de0:	2201      	movs	r2, #1
 8007de2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007de6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007dea:	f014 fdfd 	bl	801c9e8 <HAL_GPIO_WritePin>

	return data;
 8007dee:	88bb      	ldrh	r3, [r7, #4]

}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3720      	adds	r7, #32
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	2000f2f8 	.word	0x2000f2f8

08007dfc <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007e00:	2100      	movs	r1, #0
 8007e02:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007e06:	f7ff ff07 	bl	8007c18 <encoder_read_byte_R>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e10:	ee07 3a90 	vmov	s15, r3
 8007e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e18:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007e60 <AS5047_DataUpdate+0x64>
 8007e1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e20:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007e64 <AS5047_DataUpdate+0x68>
 8007e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e28:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <AS5047_DataUpdate+0x6c>)
 8007e2a:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8007e2e:	2100      	movs	r1, #0
 8007e30:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8007e34:	f7ff ff66 	bl	8007d04 <encoder_read_byte_L>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8007e3e:	ee07 3a90 	vmov	s15, r3
 8007e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007e46:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007e60 <AS5047_DataUpdate+0x64>
 8007e4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007e4e:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007e64 <AS5047_DataUpdate+0x68>
 8007e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007e56:	4b05      	ldr	r3, [pc, #20]	; (8007e6c <AS5047_DataUpdate+0x70>)
 8007e58:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8007e5c:	bf00      	nop
 8007e5e:	bd80      	pop	{r7, pc}
 8007e60:	43b40000 	.word	0x43b40000
 8007e64:	46800000 	.word	0x46800000
 8007e68:	200006e4 	.word	0x200006e4
 8007e6c:	200006e8 	.word	0x200006e8

08007e70 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007e70:	b580      	push	{r7, lr}
 8007e72:	af00      	add	r7, sp, #0
		  record_out();
 8007e74:	f000 f914 	bl	80080a0 <record_out>
		  maze_display();
 8007e78:	f00d fb9a 	bl	80155b0 <maze_display>
		  flash_record_init();
 8007e7c:	f000 f9b6 	bl	80081ec <flash_record_init>
		  record_in();
 8007e80:	f000 f858 	bl	8007f34 <record_in>
}
 8007e84:	bf00      	nop
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <eraseFlash>:


void eraseFlash( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b086      	sub	sp, #24
 8007e8c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007e92:	2301      	movs	r3, #1
 8007e94:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007e96:	23fe      	movs	r3, #254	; 0xfe
 8007e98:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007ea2:	1d3a      	adds	r2, r7, #4
 8007ea4:	f107 0308 	add.w	r3, r7, #8
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f014 faf4 	bl	801c498 <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007eb0:	bf00      	nop
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007eb8:	b5b0      	push	{r4, r5, r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	607a      	str	r2, [r7, #4]
 8007ec4:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007ec6:	f014 f9fb 	bl	801c2c0 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 8007eca:	78fb      	ldrb	r3, [r7, #3]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d101      	bne.n	8007ed4 <writeFlash+0x1c>
 8007ed0:	f7ff ffda 	bl	8007e88 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	617b      	str	r3, [r7, #20]
 8007ed8:	e00f      	b.n	8007efa <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	17da      	asrs	r2, r3, #31
 8007ede:	461c      	mov	r4, r3
 8007ee0:	4615      	mov	r5, r2
 8007ee2:	4622      	mov	r2, r4
 8007ee4:	462b      	mov	r3, r5
 8007ee6:	6979      	ldr	r1, [r7, #20]
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f014 f993 	bl	801c214 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	3320      	adds	r3, #32
 8007ef2:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	3308      	adds	r3, #8
 8007ef8:	617b      	str	r3, [r7, #20]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4413      	add	r3, r2
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d3e9      	bcc.n	8007eda <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 8007f06:	f014 f9fd 	bl	801c304 <HAL_FLASH_Lock>

}
 8007f0a:	bf00      	nop
 8007f0c:	3718      	adds	r7, #24
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bdb0      	pop	{r4, r5, r7, pc}

08007f12 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 8007f12:	b580      	push	{r7, lr}
 8007f14:	b084      	sub	sp, #16
 8007f16:	af00      	add	r7, sp, #0
 8007f18:	60f8      	str	r0, [r7, #12]
 8007f1a:	60b9      	str	r1, [r7, #8]
 8007f1c:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	687a      	ldr	r2, [r7, #4]
 8007f22:	4619      	mov	r1, r3
 8007f24:	68b8      	ldr	r0, [r7, #8]
 8007f26:	f018 fe75 	bl	8020c14 <memcpy>

}
 8007f2a:	bf00      	nop
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
	...

08007f34 <record_in>:


void record_in(void) {
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af00      	add	r7, sp, #0
	int t = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007f3e:	4b55      	ldr	r3, [pc, #340]	; (8008094 <record_in+0x160>)
 8007f40:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 8007f42:	e016      	b.n	8007f72 <record_in+0x3e>
		record.row[t] = wall.row[t];
 8007f44:	4a54      	ldr	r2, [pc, #336]	; (8008098 <record_in+0x164>)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f4c:	4953      	ldr	r1, [pc, #332]	; (800809c <record_in+0x168>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[t] = wall.column[t];
 8007f54:	4a50      	ldr	r2, [pc, #320]	; (8008098 <record_in+0x164>)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	330e      	adds	r3, #14
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	4413      	add	r3, r2
 8007f5e:	685a      	ldr	r2, [r3, #4]
 8007f60:	494e      	ldr	r1, [pc, #312]	; (800809c <record_in+0x168>)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	330e      	adds	r3, #14
 8007f66:	009b      	lsls	r3, r3, #2
 8007f68:	440b      	add	r3, r1
 8007f6a:	605a      	str	r2, [r3, #4]
		t++;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	3301      	adds	r3, #1
 8007f70:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b0e      	cmp	r3, #14
 8007f76:	dde5      	ble.n	8007f44 <record_in+0x10>
	}
	t = 0;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007f7c:	e018      	b.n	8007fb0 <record_in+0x7c>
		record.row_look[t] = wall.row_look[t];
 8007f7e:	4a46      	ldr	r2, [pc, #280]	; (8008098 <record_in+0x164>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	331e      	adds	r3, #30
 8007f84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007f88:	4944      	ldr	r1, [pc, #272]	; (800809c <record_in+0x168>)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	331e      	adds	r3, #30
 8007f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[t] = wall.column_look[t];
 8007f92:	4a41      	ldr	r2, [pc, #260]	; (8008098 <record_in+0x164>)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	332c      	adds	r3, #44	; 0x2c
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	493f      	ldr	r1, [pc, #252]	; (800809c <record_in+0x168>)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	332c      	adds	r3, #44	; 0x2c
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	605a      	str	r2, [r3, #4]
		t++;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	3301      	adds	r3, #1
 8007fae:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b0e      	cmp	r3, #14
 8007fb4:	dde3      	ble.n	8007f7e <record_in+0x4a>
	}
	t = 0;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007fba:	4b38      	ldr	r3, [pc, #224]	; (800809c <record_in+0x168>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	6838      	ldr	r0, [r7, #0]
 8007fc6:	f7ff ff77 	bl	8007eb8 <writeFlash>
	address+=16;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	3310      	adds	r3, #16
 8007fce:	603b      	str	r3, [r7, #0]
	t=1;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 8007fd4:	e00f      	b.n	8007ff6 <record_in+0xc2>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007fd6:	4a31      	ldr	r2, [pc, #196]	; (800809c <record_in+0x168>)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	6838      	ldr	r0, [r7, #0]
 8007fe6:	f7ff ff67 	bl	8007eb8 <writeFlash>
	address+=16;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	3310      	adds	r3, #16
 8007fee:	603b      	str	r3, [r7, #0]
	t++;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b0e      	cmp	r3, #14
 8007ffa:	ddec      	ble.n	8007fd6 <record_in+0xa2>
	}

	t=0;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008000:	e011      	b.n	8008026 <record_in+0xf2>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 8008002:	4a26      	ldr	r2, [pc, #152]	; (800809c <record_in+0x168>)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	330e      	adds	r3, #14
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	4413      	add	r3, r2
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	4619      	mov	r1, r3
 8008010:	2300      	movs	r3, #0
 8008012:	2201      	movs	r2, #1
 8008014:	6838      	ldr	r0, [r7, #0]
 8008016:	f7ff ff4f 	bl	8007eb8 <writeFlash>
	address+=16;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	3310      	adds	r3, #16
 800801e:	603b      	str	r3, [r7, #0]
	t++;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	3301      	adds	r3, #1
 8008024:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b0e      	cmp	r3, #14
 800802a:	ddea      	ble.n	8008002 <record_in+0xce>
	}

	t=0;
 800802c:	2300      	movs	r3, #0
 800802e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008030:	e010      	b.n	8008054 <record_in+0x120>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 8008032:	4a1a      	ldr	r2, [pc, #104]	; (800809c <record_in+0x168>)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	331e      	adds	r3, #30
 8008038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803c:	4619      	mov	r1, r3
 800803e:	2300      	movs	r3, #0
 8008040:	2201      	movs	r2, #1
 8008042:	6838      	ldr	r0, [r7, #0]
 8008044:	f7ff ff38 	bl	8007eb8 <writeFlash>
	address+=16;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	3310      	adds	r3, #16
 800804c:	603b      	str	r3, [r7, #0]
	t++;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	3301      	adds	r3, #1
 8008052:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b0e      	cmp	r3, #14
 8008058:	ddeb      	ble.n	8008032 <record_in+0xfe>
	}

	t=0;
 800805a:	2300      	movs	r3, #0
 800805c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800805e:	e011      	b.n	8008084 <record_in+0x150>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 8008060:	4a0e      	ldr	r2, [pc, #56]	; (800809c <record_in+0x168>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	332c      	adds	r3, #44	; 0x2c
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4619      	mov	r1, r3
 800806e:	2300      	movs	r3, #0
 8008070:	2201      	movs	r2, #1
 8008072:	6838      	ldr	r0, [r7, #0]
 8008074:	f7ff ff20 	bl	8007eb8 <writeFlash>
	address+=16;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	3310      	adds	r3, #16
 800807c:	603b      	str	r3, [r7, #0]
	t++;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	3301      	adds	r3, #1
 8008082:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b0e      	cmp	r3, #14
 8008088:	ddea      	ble.n	8008060 <record_in+0x12c>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 800808a:	bf00      	nop
 800808c:	bf00      	nop
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}
 8008094:	0807f000 	.word	0x0807f000
 8008098:	20001010 	.word	0x20001010
 800809c:	20001100 	.word	0x20001100

080080a0 <record_out>:


void record_out(void) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b082      	sub	sp, #8
 80080a4:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 80080a6:	2300      	movs	r3, #0
 80080a8:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80080aa:	4b4d      	ldr	r3, [pc, #308]	; (80081e0 <record_out+0x140>)
 80080ac:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 80080ae:	e00e      	b.n	80080ce <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	4a4b      	ldr	r2, [pc, #300]	; (80081e4 <record_out+0x144>)
 80080b6:	4413      	add	r3, r2
 80080b8:	2202      	movs	r2, #2
 80080ba:	4619      	mov	r1, r3
 80080bc:	6838      	ldr	r0, [r7, #0]
 80080be:	f7ff ff28 	bl	8007f12 <loadFlash>
	address+=16;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	3310      	adds	r3, #16
 80080c6:	603b      	str	r3, [r7, #0]
	t++;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	3301      	adds	r3, #1
 80080cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2b0e      	cmp	r3, #14
 80080d2:	dded      	ble.n	80080b0 <record_out+0x10>
	}

	t=0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080d8:	e010      	b.n	80080fc <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	330e      	adds	r3, #14
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4a40      	ldr	r2, [pc, #256]	; (80081e4 <record_out+0x144>)
 80080e2:	4413      	add	r3, r2
 80080e4:	3304      	adds	r3, #4
 80080e6:	2202      	movs	r2, #2
 80080e8:	4619      	mov	r1, r3
 80080ea:	6838      	ldr	r0, [r7, #0]
 80080ec:	f7ff ff11 	bl	8007f12 <loadFlash>
	address+=16;
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	3310      	adds	r3, #16
 80080f4:	603b      	str	r3, [r7, #0]
	t++;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3301      	adds	r3, #1
 80080fa:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2b0e      	cmp	r3, #14
 8008100:	ddeb      	ble.n	80080da <record_out+0x3a>
	}

	t=0;
 8008102:	2300      	movs	r3, #0
 8008104:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008106:	e00f      	b.n	8008128 <record_out+0x88>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	331e      	adds	r3, #30
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4a35      	ldr	r2, [pc, #212]	; (80081e4 <record_out+0x144>)
 8008110:	4413      	add	r3, r2
 8008112:	2202      	movs	r2, #2
 8008114:	4619      	mov	r1, r3
 8008116:	6838      	ldr	r0, [r7, #0]
 8008118:	f7ff fefb 	bl	8007f12 <loadFlash>
		address+=16;
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	3310      	adds	r3, #16
 8008120:	603b      	str	r3, [r7, #0]
		t++;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3301      	adds	r3, #1
 8008126:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b0e      	cmp	r3, #14
 800812c:	ddec      	ble.n	8008108 <record_out+0x68>
	}

	t=0;
 800812e:	2300      	movs	r3, #0
 8008130:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008132:	e010      	b.n	8008156 <record_out+0xb6>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	332c      	adds	r3, #44	; 0x2c
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	4a2a      	ldr	r2, [pc, #168]	; (80081e4 <record_out+0x144>)
 800813c:	4413      	add	r3, r2
 800813e:	3304      	adds	r3, #4
 8008140:	2202      	movs	r2, #2
 8008142:	4619      	mov	r1, r3
 8008144:	6838      	ldr	r0, [r7, #0]
 8008146:	f7ff fee4 	bl	8007f12 <loadFlash>
		address+=16;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	3310      	adds	r3, #16
 800814e:	603b      	str	r3, [r7, #0]
		t++;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	3301      	adds	r3, #1
 8008154:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2b0e      	cmp	r3, #14
 800815a:	ddeb      	ble.n	8008134 <record_out+0x94>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 800815c:	2300      	movs	r3, #0
 800815e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008160:	e016      	b.n	8008190 <record_out+0xf0>
		wall.row[t] = record.row[t];
 8008162:	4a20      	ldr	r2, [pc, #128]	; (80081e4 <record_out+0x144>)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800816a:	491f      	ldr	r1, [pc, #124]	; (80081e8 <record_out+0x148>)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8008172:	4a1c      	ldr	r2, [pc, #112]	; (80081e4 <record_out+0x144>)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	330e      	adds	r3, #14
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	4413      	add	r3, r2
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	491a      	ldr	r1, [pc, #104]	; (80081e8 <record_out+0x148>)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	330e      	adds	r3, #14
 8008184:	009b      	lsls	r3, r3, #2
 8008186:	440b      	add	r3, r1
 8008188:	605a      	str	r2, [r3, #4]
		t++;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	3301      	adds	r3, #1
 800818e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2b0e      	cmp	r3, #14
 8008194:	dde5      	ble.n	8008162 <record_out+0xc2>
	}
	t = 0;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800819a:	e018      	b.n	80081ce <record_out+0x12e>
		wall.row_look[t] = record.row_look[t];
 800819c:	4a11      	ldr	r2, [pc, #68]	; (80081e4 <record_out+0x144>)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	331e      	adds	r3, #30
 80081a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80081a6:	4910      	ldr	r1, [pc, #64]	; (80081e8 <record_out+0x148>)
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	331e      	adds	r3, #30
 80081ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = record.column_look[t];
 80081b0:	4a0c      	ldr	r2, [pc, #48]	; (80081e4 <record_out+0x144>)
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	332c      	adds	r3, #44	; 0x2c
 80081b6:	009b      	lsls	r3, r3, #2
 80081b8:	4413      	add	r3, r2
 80081ba:	685a      	ldr	r2, [r3, #4]
 80081bc:	490a      	ldr	r1, [pc, #40]	; (80081e8 <record_out+0x148>)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	332c      	adds	r3, #44	; 0x2c
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	440b      	add	r3, r1
 80081c6:	605a      	str	r2, [r3, #4]
		t++;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	3301      	adds	r3, #1
 80081cc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2b0e      	cmp	r3, #14
 80081d2:	dde3      	ble.n	800819c <record_out+0xfc>
	}

	t = 0;
 80081d4:	2300      	movs	r3, #0
 80081d6:	607b      	str	r3, [r7, #4]

}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	0807f000 	.word	0x0807f000
 80081e4:	20001100 	.word	0x20001100
 80081e8:	20001010 	.word	0x20001010

080081ec <flash_record_init>:

void flash_record_init(void){
 80081ec:	b480      	push	{r7}
 80081ee:	b083      	sub	sp, #12
 80081f0:	af00      	add	r7, sp, #0
	int t = 0;
 80081f2:	2300      	movs	r3, #0
 80081f4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80081f6:	e011      	b.n	800821c <flash_record_init+0x30>
		wall.row[t] = 0b111100011;
 80081f8:	4a1a      	ldr	r2, [pc, #104]	; (8008264 <flash_record_init+0x78>)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f240 11e3 	movw	r1, #483	; 0x1e3
 8008200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[t] = t*2;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4619      	mov	r1, r3
 800820a:	4a16      	ldr	r2, [pc, #88]	; (8008264 <flash_record_init+0x78>)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	330e      	adds	r3, #14
 8008210:	009b      	lsls	r3, r3, #2
 8008212:	4413      	add	r3, r2
 8008214:	6059      	str	r1, [r3, #4]
		t++;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3301      	adds	r3, #1
 800821a:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2b0e      	cmp	r3, #14
 8008220:	ddea      	ble.n	80081f8 <flash_record_init+0xc>
	}
	t = 0;
 8008222:	2300      	movs	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008226:	e013      	b.n	8008250 <flash_record_init+0x64>
		wall.row_look[t] = t*4;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	4619      	mov	r1, r3
 800822e:	4a0d      	ldr	r2, [pc, #52]	; (8008264 <flash_record_init+0x78>)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	331e      	adds	r3, #30
 8008234:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[t] = t*8;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	4619      	mov	r1, r3
 800823e:	4a09      	ldr	r2, [pc, #36]	; (8008264 <flash_record_init+0x78>)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	332c      	adds	r3, #44	; 0x2c
 8008244:	009b      	lsls	r3, r3, #2
 8008246:	4413      	add	r3, r2
 8008248:	6059      	str	r1, [r3, #4]
		t++;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	3301      	adds	r3, #1
 800824e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2b0e      	cmp	r3, #14
 8008254:	dde8      	ble.n	8008228 <flash_record_init+0x3c>
	}

}
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr
 8008264:	20001010 	.word	0x20001010

08008268 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	4603      	mov	r3, r0
 8008270:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8008272:	2200      	movs	r2, #0
 8008274:	2110      	movs	r1, #16
 8008276:	4810      	ldr	r0, [pc, #64]	; (80082b8 <gyro_read_byte+0x50>)
 8008278:	f014 fbb6 	bl	801c9e8 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 800827c:	79fb      	ldrb	r3, [r7, #7]
 800827e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008282:	b2db      	uxtb	r3, r3
 8008284:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8008286:	f107 010f 	add.w	r1, r7, #15
 800828a:	2364      	movs	r3, #100	; 0x64
 800828c:	2201      	movs	r2, #1
 800828e:	480b      	ldr	r0, [pc, #44]	; (80082bc <gyro_read_byte+0x54>)
 8008290:	f015 fc8d 	bl	801dbae <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8008294:	f107 010e 	add.w	r1, r7, #14
 8008298:	2364      	movs	r3, #100	; 0x64
 800829a:	2201      	movs	r2, #1
 800829c:	4807      	ldr	r0, [pc, #28]	; (80082bc <gyro_read_byte+0x54>)
 800829e:	f015 fdf4 	bl	801de8a <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 80082a2:	2201      	movs	r2, #1
 80082a4:	2110      	movs	r1, #16
 80082a6:	4804      	ldr	r0, [pc, #16]	; (80082b8 <gyro_read_byte+0x50>)
 80082a8:	f014 fb9e 	bl	801c9e8 <HAL_GPIO_WritePin>

	return val;
 80082ac:	7bbb      	ldrb	r3, [r7, #14]

}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	48000800 	.word	0x48000800
 80082bc:	2000f294 	.word	0x2000f294

080082c0 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	4603      	mov	r3, r0
 80082c8:	460a      	mov	r2, r1
 80082ca:	71fb      	strb	r3, [r7, #7]
 80082cc:	4613      	mov	r3, r2
 80082ce:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 80082d0:	79fb      	ldrb	r3, [r7, #7]
 80082d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80082da:	2200      	movs	r2, #0
 80082dc:	2110      	movs	r1, #16
 80082de:	480c      	ldr	r0, [pc, #48]	; (8008310 <gyro_write_byte+0x50>)
 80082e0:	f014 fb82 	bl	801c9e8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80082e4:	f107 010f 	add.w	r1, r7, #15
 80082e8:	2364      	movs	r3, #100	; 0x64
 80082ea:	2201      	movs	r2, #1
 80082ec:	4809      	ldr	r0, [pc, #36]	; (8008314 <gyro_write_byte+0x54>)
 80082ee:	f015 fc5e 	bl	801dbae <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80082f2:	1db9      	adds	r1, r7, #6
 80082f4:	2364      	movs	r3, #100	; 0x64
 80082f6:	2201      	movs	r2, #1
 80082f8:	4806      	ldr	r0, [pc, #24]	; (8008314 <gyro_write_byte+0x54>)
 80082fa:	f015 fc58 	bl	801dbae <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80082fe:	2201      	movs	r2, #1
 8008300:	2110      	movs	r1, #16
 8008302:	4803      	ldr	r0, [pc, #12]	; (8008310 <gyro_write_byte+0x50>)
 8008304:	f014 fb70 	bl	801c9e8 <HAL_GPIO_WritePin>

}
 8008308:	bf00      	nop
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	48000800 	.word	0x48000800
 8008314:	2000f294 	.word	0x2000f294

08008318 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8008322:	2075      	movs	r0, #117	; 0x75
 8008324:	f7ff ffa0 	bl	8008268 <gyro_read_byte>
 8008328:	4603      	mov	r3, r0
 800832a:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 800832c:	79fb      	ldrb	r3, [r7, #7]
 800832e:	4619      	mov	r1, r3
 8008330:	481b      	ldr	r0, [pc, #108]	; (80083a0 <pl_gyro_init+0x88>)
 8008332:	f019 f8ef 	bl	8021514 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8008336:	79fb      	ldrb	r3, [r7, #7]
 8008338:	2b98      	cmp	r3, #152	; 0x98
 800833a:	d00e      	beq.n	800835a <pl_gyro_init+0x42>

		HAL_Delay(100);
 800833c:	2064      	movs	r0, #100	; 0x64
 800833e:	f011 f997 	bl	8019670 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8008342:	2075      	movs	r0, #117	; 0x75
 8008344:	f7ff ff90 	bl	8008268 <gyro_read_byte>
 8008348:	4603      	mov	r3, r0
 800834a:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 800834c:	79fb      	ldrb	r3, [r7, #7]
 800834e:	2b98      	cmp	r3, #152	; 0x98
 8008350:	d003      	beq.n	800835a <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8008352:	4814      	ldr	r0, [pc, #80]	; (80083a4 <pl_gyro_init+0x8c>)
 8008354:	f019 f8de 	bl	8021514 <iprintf>
 8008358:	e7fb      	b.n	8008352 <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 800835a:	2100      	movs	r1, #0
 800835c:	206b      	movs	r0, #107	; 0x6b
 800835e:	f7ff ffaf 	bl	80082c0 <gyro_write_byte>

	HAL_Delay(50);
 8008362:	2032      	movs	r0, #50	; 0x32
 8008364:	f011 f984 	bl	8019670 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8008368:	2100      	movs	r1, #0
 800836a:	206c      	movs	r0, #108	; 0x6c
 800836c:	f7ff ffa8 	bl	80082c0 <gyro_write_byte>

	HAL_Delay(50);
 8008370:	2032      	movs	r0, #50	; 0x32
 8008372:	f011 f97d 	bl	8019670 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8008376:	2118      	movs	r1, #24
 8008378:	201b      	movs	r0, #27
 800837a:	f7ff ffa1 	bl	80082c0 <gyro_write_byte>

	HAL_Delay(50);
 800837e:	2032      	movs	r0, #50	; 0x32
 8008380:	f011 f976 	bl	8019670 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8008384:	2118      	movs	r1, #24
 8008386:	201c      	movs	r0, #28
 8008388:	f7ff ff9a 	bl	80082c0 <gyro_write_byte>

	HAL_Delay(50);
 800838c:	2032      	movs	r0, #50	; 0x32
 800838e:	f011 f96f 	bl	8019670 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 8008392:	4b05      	ldr	r3, [pc, #20]	; (80083a8 <pl_gyro_init+0x90>)
 8008394:	2201      	movs	r2, #1
 8008396:	701a      	strb	r2, [r3, #0]

}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08024ef8 	.word	0x08024ef8
 80083a4:	08024f0c 	.word	0x08024f0c
 80083a8:	200006ec 	.word	0x200006ec

080083ac <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 80083ac:	b590      	push	{r4, r7, lr}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff ff55 	bl	8008268 <gyro_read_byte>
 80083be:	4603      	mov	r3, r0
 80083c0:	021b      	lsls	r3, r3, #8
 80083c2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	3301      	adds	r3, #1
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7ff ff4c 	bl	8008268 <gyro_read_byte>
 80083d0:	4603      	mov	r3, r0
 80083d2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80083d4:	4323      	orrs	r3, r4
 80083d6:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 80083d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80083dc:	ee07 3a90 	vmov	s15, r3
 80083e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083e4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008400 <ICM20602_GYRO_READ+0x54>
 80083e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083ec:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	ee07 3a90 	vmov	s15, r3

}
 80083f6:	eeb0 0a67 	vmov.f32	s0, s15
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd90      	pop	{r4, r7, pc}
 8008400:	41833333 	.word	0x41833333

08008404 <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8008404:	b590      	push	{r4, r7, lr}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	4618      	mov	r0, r3
 8008412:	f7ff ff29 	bl	8008268 <gyro_read_byte>
 8008416:	4603      	mov	r3, r0
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800841c:	79fb      	ldrb	r3, [r7, #7]
 800841e:	3301      	adds	r3, #1
 8008420:	b2db      	uxtb	r3, r3
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff ff20 	bl	8008268 <gyro_read_byte>
 8008428:	4603      	mov	r3, r0
 800842a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800842c:	4323      	orrs	r3, r4
 800842e:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8008430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008434:	ee07 3a90 	vmov	s15, r3
 8008438:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800843c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8008458 <ICM20602_ACCEL_READ+0x54>
 8008440:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008444:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	ee07 3a90 	vmov	s15, r3

}
 800844e:	eeb0 0a67 	vmov.f32	s0, s15
 8008452:	3714      	adds	r7, #20
 8008454:	46bd      	mov	sp, r7
 8008456:	bd90      	pop	{r4, r7, pc}
 8008458:	45000000 	.word	0x45000000

0800845c <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 800845c:	b580      	push	{r7, lr}
 800845e:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8008460:	4b0e      	ldr	r3, [pc, #56]	; (800849c <ICM20602_DataUpdate+0x40>)
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d117      	bne.n	8008498 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8008468:	2045      	movs	r0, #69	; 0x45
 800846a:	f7ff ff9f 	bl	80083ac <ICM20602_GYRO_READ>
 800846e:	eef0 7a40 	vmov.f32	s15, s0
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <ICM20602_DataUpdate+0x44>)
 8008474:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8008478:	2047      	movs	r0, #71	; 0x47
 800847a:	f7ff ff97 	bl	80083ac <ICM20602_GYRO_READ>
 800847e:	eef0 7a40 	vmov.f32	s15, s0
 8008482:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <ICM20602_DataUpdate+0x44>)
 8008484:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8008488:	203b      	movs	r0, #59	; 0x3b
 800848a:	f7ff ffbb 	bl	8008404 <ICM20602_ACCEL_READ>
 800848e:	eef0 7a40 	vmov.f32	s15, s0
 8008492:	4b03      	ldr	r3, [pc, #12]	; (80084a0 <ICM20602_DataUpdate+0x44>)
 8008494:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8008498:	bf00      	nop
 800849a:	bd80      	pop	{r7, pc}
 800849c:	200006ec 	.word	0x200006ec
 80084a0:	200006f0 	.word	0x200006f0

080084a4 <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 80084a8:	480f      	ldr	r0, [pc, #60]	; (80084e8 <pl_motor_init+0x44>)
 80084aa:	f016 fa45 	bl	801e938 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 80084ae:	480e      	ldr	r0, [pc, #56]	; (80084e8 <pl_motor_init+0x44>)
 80084b0:	f00f ff6a 	bl	8018388 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 80084b4:	480d      	ldr	r0, [pc, #52]	; (80084ec <pl_motor_init+0x48>)
 80084b6:	f016 fa3f 	bl	801e938 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 80084ba:	480c      	ldr	r0, [pc, #48]	; (80084ec <pl_motor_init+0x48>)
 80084bc:	f00f ff64 	bl	8018388 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 80084c0:	2001      	movs	r0, #1
 80084c2:	f000 f81f 	bl	8008504 <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 80084c6:	4b08      	ldr	r3, [pc, #32]	; (80084e8 <pl_motor_init+0x44>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	225a      	movs	r2, #90	; 0x5a
 80084cc:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 80084ce:	2001      	movs	r0, #1
 80084d0:	f000 f840 	bl	8008554 <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 80084d4:	4b04      	ldr	r3, [pc, #16]	; (80084e8 <pl_motor_init+0x44>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	225a      	movs	r2, #90	; 0x5a
 80084da:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 80084dc:	4b03      	ldr	r3, [pc, #12]	; (80084ec <pl_motor_init+0x48>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	221e      	movs	r2, #30
 80084e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80084e4:	bf00      	nop
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	2000f3ac 	.word	0x2000f3ac
 80084ec:	2000f3f8 	.word	0x2000f3f8

080084f0 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80084f8:	bf00      	nop
 80084fa:	370c      	adds	r7, #12
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr

08008504 <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2b03      	cmp	r3, #3
 8008510:	d819      	bhi.n	8008546 <pl_L_DriveMotor_mode+0x42>
 8008512:	a201      	add	r2, pc, #4	; (adr r2, 8008518 <pl_L_DriveMotor_mode+0x14>)
 8008514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008518:	08008545 	.word	0x08008545
 800851c:	08008529 	.word	0x08008529
 8008520:	08008537 	.word	0x08008537
 8008524:	08008545 	.word	0x08008545
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8008528:	2200      	movs	r2, #0
 800852a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800852e:	4808      	ldr	r0, [pc, #32]	; (8008550 <pl_L_DriveMotor_mode+0x4c>)
 8008530:	f014 fa5a 	bl	801c9e8 <HAL_GPIO_WritePin>
break;
 8008534:	e007      	b.n	8008546 <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8008536:	2201      	movs	r2, #1
 8008538:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800853c:	4804      	ldr	r0, [pc, #16]	; (8008550 <pl_L_DriveMotor_mode+0x4c>)
 800853e:	f014 fa53 	bl	801c9e8 <HAL_GPIO_WritePin>
break;
 8008542:	e000      	b.n	8008546 <pl_L_DriveMotor_mode+0x42>
break;
 8008544:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	48000800 	.word	0x48000800

08008554 <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2b03      	cmp	r3, #3
 8008560:	d817      	bhi.n	8008592 <pl_R_DriveMotor_mode+0x3e>
 8008562:	a201      	add	r2, pc, #4	; (adr r2, 8008568 <pl_R_DriveMotor_mode+0x14>)
 8008564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008568:	08008591 	.word	0x08008591
 800856c:	08008579 	.word	0x08008579
 8008570:	08008585 	.word	0x08008585
 8008574:	08008591 	.word	0x08008591
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8008578:	2201      	movs	r2, #1
 800857a:	2180      	movs	r1, #128	; 0x80
 800857c:	4807      	ldr	r0, [pc, #28]	; (800859c <pl_R_DriveMotor_mode+0x48>)
 800857e:	f014 fa33 	bl	801c9e8 <HAL_GPIO_WritePin>
break;
 8008582:	e006      	b.n	8008592 <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8008584:	2200      	movs	r2, #0
 8008586:	2180      	movs	r1, #128	; 0x80
 8008588:	4804      	ldr	r0, [pc, #16]	; (800859c <pl_R_DriveMotor_mode+0x48>)
 800858a:	f014 fa2d 	bl	801c9e8 <HAL_GPIO_WritePin>
break;
 800858e:	e000      	b.n	8008592 <pl_R_DriveMotor_mode+0x3e>
break;
 8008590:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8008592:	bf00      	nop
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	48000400 	.word	0x48000400

080085a0 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 80085a0:	b580      	push	{r7, lr}
 80085a2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80085a4:	2108      	movs	r1, #8
 80085a6:	4804      	ldr	r0, [pc, #16]	; (80085b8 <pl_DriveMotor_start+0x18>)
 80085a8:	f016 fa8e 	bl	801eac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80085ac:	2100      	movs	r1, #0
 80085ae:	4802      	ldr	r0, [pc, #8]	; (80085b8 <pl_DriveMotor_start+0x18>)
 80085b0:	f016 fa8a 	bl	801eac8 <HAL_TIM_PWM_Start>
}
 80085b4:	bf00      	nop
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	2000f3ac 	.word	0x2000f3ac

080085bc <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 80085c0:	2108      	movs	r1, #8
 80085c2:	4804      	ldr	r0, [pc, #16]	; (80085d4 <pl_DriveMotor_stop+0x18>)
 80085c4:	f016 fb8c 	bl	801ece0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80085c8:	2100      	movs	r1, #0
 80085ca:	4802      	ldr	r0, [pc, #8]	; (80085d4 <pl_DriveMotor_stop+0x18>)
 80085cc:	f016 fb88 	bl	801ece0 <HAL_TIM_PWM_Stop>
}
 80085d0:	bf00      	nop
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	2000f3ac 	.word	0x2000f3ac

080085d8 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 80085d8:	b480      	push	{r7}
 80085da:	b083      	sub	sp, #12
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80085e2:	4b07      	ldr	r3, [pc, #28]	; (8008600 <pl_DriveMotor_duty+0x28>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80085ea:	4b05      	ldr	r3, [pc, #20]	; (8008600 <pl_DriveMotor_duty+0x28>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000f3ac 	.word	0x2000f3ac

08008604 <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8008604:	b580      	push	{r7, lr}
 8008606:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8008608:	2100      	movs	r1, #0
 800860a:	4802      	ldr	r0, [pc, #8]	; (8008614 <pl_FunMotor_start+0x10>)
 800860c:	f016 fa5c 	bl	801eac8 <HAL_TIM_PWM_Start>
}
 8008610:	bf00      	nop
 8008612:	bd80      	pop	{r7, pc}
 8008614:	2000f3f8 	.word	0x2000f3f8

08008618 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8008618:	b580      	push	{r7, lr}
 800861a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 800861c:	2100      	movs	r1, #0
 800861e:	4802      	ldr	r0, [pc, #8]	; (8008628 <pl_FunMotor_stop+0x10>)
 8008620:	f016 fb5e 	bl	801ece0 <HAL_TIM_PWM_Stop>
}
 8008624:	bf00      	nop
 8008626:	bd80      	pop	{r7, pc}
 8008628:	2000f3f8 	.word	0x2000f3f8

0800862c <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 800862c:	b480      	push	{r7}
 800862e:	b085      	sub	sp, #20
 8008630:	af00      	add	r7, sp, #0
 8008632:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8008636:	edd7 7a01 	vldr	s15, [r7, #4]
 800863a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8008670 <pl_FunMotor_duty+0x44>
 800863e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008642:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008646:	ee17 3a90 	vmov	r3, s15
 800864a:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <pl_FunMotor_duty+0x48>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2264      	movs	r2, #100	; 0x64
 8008652:	62da      	str	r2, [r3, #44]	; 0x2c
 8008654:	4b07      	ldr	r3, [pc, #28]	; (8008674 <pl_FunMotor_duty+0x48>)
 8008656:	2264      	movs	r2, #100	; 0x64
 8008658:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 800865a:	4b06      	ldr	r3, [pc, #24]	; (8008674 <pl_FunMotor_duty+0x48>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	635a      	str	r2, [r3, #52]	; 0x34

}
 8008662:	bf00      	nop
 8008664:	3714      	adds	r7, #20
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	42c80000 	.word	0x42c80000
 8008674:	2000f3f8 	.word	0x2000f3f8

08008678 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
	AD_step=0;
 800867c:	4b04      	ldr	r3, [pc, #16]	; (8008690 <pl_sensor_init+0x18>)
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8008682:	217f      	movs	r1, #127	; 0x7f
 8008684:	4803      	ldr	r0, [pc, #12]	; (8008694 <pl_sensor_init+0x1c>)
 8008686:	f013 f86d 	bl	801b764 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 800868a:	bf00      	nop
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000714 	.word	0x20000714
 8008694:	20000740 	.word	0x20000740

08008698 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 800869e:	483c      	ldr	r0, [pc, #240]	; (8008790 <pl_getbatt+0xf8>)
 80086a0:	f011 fc4e 	bl	8019f40 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 80086a4:	2132      	movs	r1, #50	; 0x32
 80086a6:	483a      	ldr	r0, [pc, #232]	; (8008790 <pl_getbatt+0xf8>)
 80086a8:	f011 fd48 	bl	801a13c <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 80086ac:	4838      	ldr	r0, [pc, #224]	; (8008790 <pl_getbatt+0xf8>)
 80086ae:	f011 ff64 	bl	801a57a <HAL_ADC_GetValue>
 80086b2:	4603      	mov	r3, r0
 80086b4:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 80086b6:	4836      	ldr	r0, [pc, #216]	; (8008790 <pl_getbatt+0xf8>)
 80086b8:	f011 fd0c 	bl	801a0d4 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 80086bc:	88fb      	ldrh	r3, [r7, #6]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	ee17 0a90 	vmov	r0, s15
 80086ca:	f7f7 ff65 	bl	8000598 <__aeabi_f2d>
 80086ce:	a326      	add	r3, pc, #152	; (adr r3, 8008768 <pl_getbatt+0xd0>)
 80086d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d4:	f7f7 ffb8 	bl	8000648 <__aeabi_dmul>
 80086d8:	4602      	mov	r2, r0
 80086da:	460b      	mov	r3, r1
 80086dc:	4610      	mov	r0, r2
 80086de:	4619      	mov	r1, r3
 80086e0:	a323      	add	r3, pc, #140	; (adr r3, 8008770 <pl_getbatt+0xd8>)
 80086e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e6:	f7f8 f8d9 	bl	800089c <__aeabi_ddiv>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	4610      	mov	r0, r2
 80086f0:	4619      	mov	r1, r3
 80086f2:	f04f 0200 	mov.w	r2, #0
 80086f6:	4b27      	ldr	r3, [pc, #156]	; (8008794 <pl_getbatt+0xfc>)
 80086f8:	f7f7 ffa6 	bl	8000648 <__aeabi_dmul>
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	4610      	mov	r0, r2
 8008702:	4619      	mov	r1, r3
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	4b23      	ldr	r3, [pc, #140]	; (8008798 <pl_getbatt+0x100>)
 800870a:	f7f8 f8c7 	bl	800089c <__aeabi_ddiv>
 800870e:	4602      	mov	r2, r0
 8008710:	460b      	mov	r3, r1
 8008712:	4610      	mov	r0, r2
 8008714:	4619      	mov	r1, r3
 8008716:	a318      	add	r3, pc, #96	; (adr r3, 8008778 <pl_getbatt+0xe0>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff94 	bl	8000648 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4610      	mov	r0, r2
 8008726:	4619      	mov	r1, r3
 8008728:	a315      	add	r3, pc, #84	; (adr r3, 8008780 <pl_getbatt+0xe8>)
 800872a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872e:	f7f7 ff8b 	bl	8000648 <__aeabi_dmul>
 8008732:	4602      	mov	r2, r0
 8008734:	460b      	mov	r3, r1
 8008736:	4610      	mov	r0, r2
 8008738:	4619      	mov	r1, r3
 800873a:	a313      	add	r3, pc, #76	; (adr r3, 8008788 <pl_getbatt+0xf0>)
 800873c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008740:	f7f8 f8ac 	bl	800089c <__aeabi_ddiv>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4610      	mov	r0, r2
 800874a:	4619      	mov	r1, r3
 800874c:	f7f8 fa54 	bl	8000bf8 <__aeabi_d2f>
 8008750:	4603      	mov	r3, r0
 8008752:	603b      	str	r3, [r7, #0]
return batt;
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	ee07 3a90 	vmov	s15, r3
}
 800875a:	eeb0 0a67 	vmov.f32	s0, s15
 800875e:	3708      	adds	r7, #8
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	f3af 8000 	nop.w
 8008768:	66666666 	.word	0x66666666
 800876c:	400a6666 	.word	0x400a6666
 8008770:	00000000 	.word	0x00000000
 8008774:	40affe00 	.word	0x40affe00
 8008778:	66666666 	.word	0x66666666
 800877c:	3ff26666 	.word	0x3ff26666
 8008780:	9999999a 	.word	0x9999999a
 8008784:	400d9999 	.word	0x400d9999
 8008788:	ae147ae1 	.word	0xae147ae1
 800878c:	400ee147 	.word	0x400ee147
 8008790:	20000740 	.word	0x20000740
 8008794:	40340000 	.word	0x40340000
 8008798:	40240000 	.word	0x40240000
 800879c:	00000000 	.word	0x00000000

080087a0 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 80087a6:	4882      	ldr	r0, [pc, #520]	; (80089b0 <pl_callback_getSensor+0x210>)
 80087a8:	f011 fe86 	bl	801a4b8 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 80087ac:	4b81      	ldr	r3, [pc, #516]	; (80089b4 <pl_callback_getSensor+0x214>)
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	f200 80d9 	bhi.w	8008968 <pl_callback_getSensor+0x1c8>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <pl_callback_getSensor+0x1c>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	080087d1 	.word	0x080087d1
 80087c0:	08008809 	.word	0x08008809
 80087c4:	08008869 	.word	0x08008869
 80087c8:	080088a9 	.word	0x080088a9
 80087cc:	08008969 	.word	0x08008969
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 80087d0:	2201      	movs	r2, #1
 80087d2:	2102      	movs	r1, #2
 80087d4:	4878      	ldr	r0, [pc, #480]	; (80089b8 <pl_callback_getSensor+0x218>)
 80087d6:	f014 f907 	bl	801c9e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80087da:	2200      	movs	r2, #0
 80087dc:	2110      	movs	r1, #16
 80087de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80087e2:	f014 f901 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80087e6:	2200      	movs	r2, #0
 80087e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80087ec:	4873      	ldr	r0, [pc, #460]	; (80089bc <pl_callback_getSensor+0x21c>)
 80087ee:	f014 f8fb 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80087f6:	e002      	b.n	80087fe <pl_callback_getSensor+0x5e>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	3301      	adds	r3, #1
 80087fc:	607b      	str	r3, [r7, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008804:	ddf8      	ble.n	80087f8 <pl_callback_getSensor+0x58>
		break;
 8008806:	e0af      	b.n	8008968 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8008808:	4b6d      	ldr	r3, [pc, #436]	; (80089c0 <pl_callback_getSensor+0x220>)
 800880a:	885a      	ldrh	r2, [r3, #2]
 800880c:	4b6d      	ldr	r3, [pc, #436]	; (80089c4 <pl_callback_getSensor+0x224>)
 800880e:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8008810:	4b6b      	ldr	r3, [pc, #428]	; (80089c0 <pl_callback_getSensor+0x220>)
 8008812:	889a      	ldrh	r2, [r3, #4]
 8008814:	4b6b      	ldr	r3, [pc, #428]	; (80089c4 <pl_callback_getSensor+0x224>)
 8008816:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8008818:	4b69      	ldr	r3, [pc, #420]	; (80089c0 <pl_callback_getSensor+0x220>)
 800881a:	88da      	ldrh	r2, [r3, #6]
 800881c:	4b6a      	ldr	r3, [pc, #424]	; (80089c8 <pl_callback_getSensor+0x228>)
 800881e:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8008820:	4b67      	ldr	r3, [pc, #412]	; (80089c0 <pl_callback_getSensor+0x220>)
 8008822:	891a      	ldrh	r2, [r3, #8]
 8008824:	4b68      	ldr	r3, [pc, #416]	; (80089c8 <pl_callback_getSensor+0x228>)
 8008826:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8008828:	4b65      	ldr	r3, [pc, #404]	; (80089c0 <pl_callback_getSensor+0x220>)
 800882a:	895a      	ldrh	r2, [r3, #10]
 800882c:	4b66      	ldr	r3, [pc, #408]	; (80089c8 <pl_callback_getSensor+0x228>)
 800882e:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008830:	2200      	movs	r2, #0
 8008832:	2102      	movs	r1, #2
 8008834:	4860      	ldr	r0, [pc, #384]	; (80089b8 <pl_callback_getSensor+0x218>)
 8008836:	f014 f8d7 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 800883a:	2201      	movs	r2, #1
 800883c:	2110      	movs	r1, #16
 800883e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008842:	f014 f8d1 	bl	801c9e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8008846:	2200      	movs	r2, #0
 8008848:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800884c:	485b      	ldr	r0, [pc, #364]	; (80089bc <pl_callback_getSensor+0x21c>)
 800884e:	f014 f8cb 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8008852:	2300      	movs	r3, #0
 8008854:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8008856:	e002      	b.n	800885e <pl_callback_getSensor+0xbe>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	3301      	adds	r3, #1
 800885c:	607b      	str	r3, [r7, #4]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008864:	ddf8      	ble.n	8008858 <pl_callback_getSensor+0xb8>
		break;
 8008866:	e07f      	b.n	8008968 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8008868:	4b55      	ldr	r3, [pc, #340]	; (80089c0 <pl_callback_getSensor+0x220>)
 800886a:	88da      	ldrh	r2, [r3, #6]
 800886c:	4b55      	ldr	r3, [pc, #340]	; (80089c4 <pl_callback_getSensor+0x224>)
 800886e:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8008870:	2200      	movs	r2, #0
 8008872:	2102      	movs	r1, #2
 8008874:	4850      	ldr	r0, [pc, #320]	; (80089b8 <pl_callback_getSensor+0x218>)
 8008876:	f014 f8b7 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 800887a:	2200      	movs	r2, #0
 800887c:	2110      	movs	r1, #16
 800887e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008882:	f014 f8b1 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8008886:	2201      	movs	r2, #1
 8008888:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800888c:	484b      	ldr	r0, [pc, #300]	; (80089bc <pl_callback_getSensor+0x21c>)
 800888e:	f014 f8ab 	bl	801c9e8 <HAL_GPIO_WritePin>
		j=0;
 8008892:	2300      	movs	r3, #0
 8008894:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8008896:	e002      	b.n	800889e <pl_callback_getSensor+0xfe>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	3301      	adds	r3, #1
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80088a4:	ddf8      	ble.n	8008898 <pl_callback_getSensor+0xf8>
		break;
 80088a6:	e05f      	b.n	8008968 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 80088a8:	4b45      	ldr	r3, [pc, #276]	; (80089c0 <pl_callback_getSensor+0x220>)
 80088aa:	885a      	ldrh	r2, [r3, #2]
 80088ac:	4b46      	ldr	r3, [pc, #280]	; (80089c8 <pl_callback_getSensor+0x228>)
 80088ae:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 80088b0:	4b43      	ldr	r3, [pc, #268]	; (80089c0 <pl_callback_getSensor+0x220>)
 80088b2:	889a      	ldrh	r2, [r3, #4]
 80088b4:	4b44      	ldr	r3, [pc, #272]	; (80089c8 <pl_callback_getSensor+0x228>)
 80088b6:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 80088b8:	4b41      	ldr	r3, [pc, #260]	; (80089c0 <pl_callback_getSensor+0x220>)
 80088ba:	891a      	ldrh	r2, [r3, #8]
 80088bc:	4b41      	ldr	r3, [pc, #260]	; (80089c4 <pl_callback_getSensor+0x224>)
 80088be:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 80088c0:	4b3f      	ldr	r3, [pc, #252]	; (80089c0 <pl_callback_getSensor+0x220>)
 80088c2:	895a      	ldrh	r2, [r3, #10]
 80088c4:	4b3f      	ldr	r3, [pc, #252]	; (80089c4 <pl_callback_getSensor+0x224>)
 80088c6:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80088c8:	2200      	movs	r2, #0
 80088ca:	2102      	movs	r1, #2
 80088cc:	483a      	ldr	r0, [pc, #232]	; (80089b8 <pl_callback_getSensor+0x218>)
 80088ce:	f014 f88b 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80088d2:	2200      	movs	r2, #0
 80088d4:	2110      	movs	r1, #16
 80088d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088da:	f014 f885 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80088de:	2200      	movs	r2, #0
 80088e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80088e4:	4835      	ldr	r0, [pc, #212]	; (80089bc <pl_callback_getSensor+0x21c>)
 80088e6:	f014 f87f 	bl	801c9e8 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 80088ee:	e002      	b.n	80088f6 <pl_callback_getSensor+0x156>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2b32      	cmp	r3, #50	; 0x32
 80088fa:	ddf9      	ble.n	80088f0 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 80088fc:	4b30      	ldr	r3, [pc, #192]	; (80089c0 <pl_callback_getSensor+0x220>)
 80088fe:	881b      	ldrh	r3, [r3, #0]
 8008900:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8008902:	887b      	ldrh	r3, [r7, #2]
 8008904:	ee07 3a90 	vmov	s15, r3
 8008908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890c:	ee17 0a90 	vmov	r0, s15
 8008910:	f7f7 fe42 	bl	8000598 <__aeabi_f2d>
 8008914:	a320      	add	r3, pc, #128	; (adr r3, 8008998 <pl_callback_getSensor+0x1f8>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 fe95 	bl	8000648 <__aeabi_dmul>
 800891e:	4602      	mov	r2, r0
 8008920:	460b      	mov	r3, r1
 8008922:	4610      	mov	r0, r2
 8008924:	4619      	mov	r1, r3
 8008926:	a31e      	add	r3, pc, #120	; (adr r3, 80089a0 <pl_callback_getSensor+0x200>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 ffb6 	bl	800089c <__aeabi_ddiv>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4610      	mov	r0, r2
 8008936:	4619      	mov	r1, r3
 8008938:	a31b      	add	r3, pc, #108	; (adr r3, 80089a8 <pl_callback_getSensor+0x208>)
 800893a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800893e:	f7f7 fe83 	bl	8000648 <__aeabi_dmul>
 8008942:	4602      	mov	r2, r0
 8008944:	460b      	mov	r3, r1
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	f04f 0200 	mov.w	r2, #0
 800894e:	4b1f      	ldr	r3, [pc, #124]	; (80089cc <pl_callback_getSensor+0x22c>)
 8008950:	f7f7 ffa4 	bl	800089c <__aeabi_ddiv>
 8008954:	4602      	mov	r2, r0
 8008956:	460b      	mov	r3, r1
 8008958:	4610      	mov	r0, r2
 800895a:	4619      	mov	r1, r3
 800895c:	f7f8 f94c 	bl	8000bf8 <__aeabi_d2f>
 8008960:	4603      	mov	r3, r0
 8008962:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <pl_callback_getSensor+0x230>)
 8008964:	6013      	str	r3, [r2, #0]
		break;
 8008966:	bf00      	nop

		break;
	}


	AD_step++;
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <pl_callback_getSensor+0x214>)
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	3301      	adds	r3, #1
 800896e:	b2da      	uxtb	r2, r3
 8008970:	4b10      	ldr	r3, [pc, #64]	; (80089b4 <pl_callback_getSensor+0x214>)
 8008972:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <pl_callback_getSensor+0x214>)
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	2b04      	cmp	r3, #4
 800897a:	d005      	beq.n	8008988 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 800897c:	2206      	movs	r2, #6
 800897e:	4910      	ldr	r1, [pc, #64]	; (80089c0 <pl_callback_getSensor+0x220>)
 8008980:	480b      	ldr	r0, [pc, #44]	; (80089b0 <pl_callback_getSensor+0x210>)
 8008982:	f011 fccf 	bl	801a324 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8008986:	e002      	b.n	800898e <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <pl_callback_getSensor+0x214>)
 800898a:	2200      	movs	r2, #0
 800898c:	701a      	strb	r2, [r3, #0]
}
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	66666666 	.word	0x66666666
 800899c:	400a6666 	.word	0x400a6666
 80089a0:	00000000 	.word	0x00000000
 80089a4:	40affe00 	.word	0x40affe00
 80089a8:	00000000 	.word	0x00000000
 80089ac:	4062c000 	.word	0x4062c000
 80089b0:	20000740 	.word	0x20000740
 80089b4:	20000714 	.word	0x20000714
 80089b8:	48000400 	.word	0x48000400
 80089bc:	48000800 	.word	0x48000800
 80089c0:	20000708 	.word	0x20000708
 80089c4:	20000718 	.word	0x20000718
 80089c8:	20000724 	.word	0x20000724
 80089cc:	40490000 	.word	0x40490000
 80089d0:	20000730 	.word	0x20000730

080089d4 <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 80089d4:	b580      	push	{r7, lr}
 80089d6:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80089d8:	2206      	movs	r2, #6
 80089da:	4903      	ldr	r1, [pc, #12]	; (80089e8 <pl_interupt_getSensor+0x14>)
 80089dc:	4803      	ldr	r0, [pc, #12]	; (80089ec <pl_interupt_getSensor+0x18>)
 80089de:	f011 fca1 	bl	801a324 <HAL_ADC_Start_DMA>

}
 80089e2:	bf00      	nop
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20000708 	.word	0x20000708
 80089ec:	20000740 	.word	0x20000740

080089f0 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 80089f0:	b580      	push	{r7, lr}
 80089f2:	af00      	add	r7, sp, #0
	count_mode=0;
 80089f4:	4b05      	ldr	r3, [pc, #20]	; (8008a0c <pl_timer_init+0x1c>)
 80089f6:	2200      	movs	r2, #0
 80089f8:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80089fa:	4b05      	ldr	r3, [pc, #20]	; (8008a10 <pl_timer_init+0x20>)
 80089fc:	f04f 0200 	mov.w	r2, #0
 8008a00:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8008a02:	4804      	ldr	r0, [pc, #16]	; (8008a14 <pl_timer_init+0x24>)
 8008a04:	f015 ff98 	bl	801e938 <HAL_TIM_Base_Start_IT>
}
 8008a08:	bf00      	nop
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	2000073c 	.word	0x2000073c
 8008a10:	20000738 	.word	0x20000738
 8008a14:	2000f360 	.word	0x2000f360

08008a18 <interrupt_timer>:

void interrupt_timer(void){
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0
	g_timCount++;
 8008a1c:	4b10      	ldr	r3, [pc, #64]	; (8008a60 <interrupt_timer+0x48>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	3301      	adds	r3, #1
 8008a22:	4a0f      	ldr	r2, [pc, #60]	; (8008a60 <interrupt_timer+0x48>)
 8008a24:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <interrupt_timer+0x4c>)
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d112      	bne.n	8008a54 <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <interrupt_timer+0x50>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f7 fdb0 	bl	8000598 <__aeabi_f2d>
 8008a38:	a307      	add	r3, pc, #28	; (adr r3, 8008a58 <interrupt_timer+0x40>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fc4d 	bl	80002dc <__adddf3>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4610      	mov	r0, r2
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f7f8 f8d5 	bl	8000bf8 <__aeabi_d2f>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4a05      	ldr	r2, [pc, #20]	; (8008a68 <interrupt_timer+0x50>)
 8008a52:	6013      	str	r3, [r2, #0]
	}

}
 8008a54:	bf00      	nop
 8008a56:	bd80      	pop	{r7, pc}
 8008a58:	d2f1a9fc 	.word	0xd2f1a9fc
 8008a5c:	3f50624d 	.word	0x3f50624d
 8008a60:	20000734 	.word	0x20000734
 8008a64:	2000073c 	.word	0x2000073c
 8008a68:	20000738 	.word	0x20000738

08008a6c <tic_timer>:

void tic_timer(void){
 8008a6c:	b480      	push	{r7}
 8008a6e:	af00      	add	r7, sp, #0
	count_mode=1;
 8008a70:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <tic_timer+0x1c>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008a76:	4b05      	ldr	r3, [pc, #20]	; (8008a8c <tic_timer+0x20>)
 8008a78:	f04f 0200 	mov.w	r2, #0
 8008a7c:	601a      	str	r2, [r3, #0]
}
 8008a7e:	bf00      	nop
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	2000073c 	.word	0x2000073c
 8008a8c:	20000738 	.word	0x20000738

08008a90 <toc_timer>:

float toc_timer(void){
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <toc_timer+0x30>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8008a9c:	4b09      	ldr	r3, [pc, #36]	; (8008ac4 <toc_timer+0x34>)
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8008aa2:	4b07      	ldr	r3, [pc, #28]	; (8008ac0 <toc_timer+0x30>)
 8008aa4:	f04f 0200 	mov.w	r2, #0
 8008aa8:	601a      	str	r2, [r3, #0]
	return timer;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	ee07 3a90 	vmov	s15, r3
}
 8008ab0:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab4:	370c      	adds	r7, #12
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	20000738 	.word	0x20000738
 8008ac4:	2000073c 	.word	0x2000073c

08008ac8 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8008ac8:	b5b0      	push	{r4, r5, r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008ad0:	4b1d      	ldr	r3, [pc, #116]	; (8008b48 <wait_ms+0x80>)
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <wait_ms+0x84>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2200      	movs	r2, #0
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008ade:	bf00      	nop
 8008ae0:	4b19      	ldr	r3, [pc, #100]	; (8008b48 <wait_ms+0x80>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	ee07 3a90 	vmov	s15, r3
 8008ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aec:	ee17 0a90 	vmov	r0, s15
 8008af0:	f7f7 fd52 	bl	8000598 <__aeabi_f2d>
 8008af4:	a312      	add	r3, pc, #72	; (adr r3, 8008b40 <wait_ms+0x78>)
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f7f7 fda5 	bl	8000648 <__aeabi_dmul>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	4610      	mov	r0, r2
 8008b04:	4619      	mov	r1, r3
 8008b06:	a30e      	add	r3, pc, #56	; (adr r3, 8008b40 <wait_ms+0x78>)
 8008b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b0c:	f7f7 fec6 	bl	800089c <__aeabi_ddiv>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4614      	mov	r4, r2
 8008b16:	461d      	mov	r5, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f7f7 fd1b 	bl	8000554 <__aeabi_ui2d>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4620      	mov	r0, r4
 8008b24:	4629      	mov	r1, r5
 8008b26:	f7f8 f801 	bl	8000b2c <__aeabi_dcmplt>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1d7      	bne.n	8008ae0 <wait_ms+0x18>
        }

}
 8008b30:	bf00      	nop
 8008b32:	bf00      	nop
 8008b34:	3708      	adds	r7, #8
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bdb0      	pop	{r4, r5, r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	f3af 8000 	nop.w
 8008b40:	d2f1a9fc 	.word	0xd2f1a9fc
 8008b44:	3f50624d 	.word	0x3f50624d
 8008b48:	20000734 	.word	0x20000734
 8008b4c:	2000f360 	.word	0x2000f360

08008b50 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8008b50:	b5b0      	push	{r4, r5, r7, lr}
 8008b52:	b082      	sub	sp, #8
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8008b58:	4b1b      	ldr	r3, [pc, #108]	; (8008bc8 <wait_ms_NoReset+0x78>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8008b5e:	bf00      	nop
 8008b60:	4b19      	ldr	r3, [pc, #100]	; (8008bc8 <wait_ms_NoReset+0x78>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	ee07 3a90 	vmov	s15, r3
 8008b68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b6c:	ee17 0a90 	vmov	r0, s15
 8008b70:	f7f7 fd12 	bl	8000598 <__aeabi_f2d>
 8008b74:	a312      	add	r3, pc, #72	; (adr r3, 8008bc0 <wait_ms_NoReset+0x70>)
 8008b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7a:	f7f7 fd65 	bl	8000648 <__aeabi_dmul>
 8008b7e:	4602      	mov	r2, r0
 8008b80:	460b      	mov	r3, r1
 8008b82:	4610      	mov	r0, r2
 8008b84:	4619      	mov	r1, r3
 8008b86:	a30e      	add	r3, pc, #56	; (adr r3, 8008bc0 <wait_ms_NoReset+0x70>)
 8008b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b8c:	f7f7 fe86 	bl	800089c <__aeabi_ddiv>
 8008b90:	4602      	mov	r2, r0
 8008b92:	460b      	mov	r3, r1
 8008b94:	4614      	mov	r4, r2
 8008b96:	461d      	mov	r5, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f7f7 fcdb 	bl	8000554 <__aeabi_ui2d>
 8008b9e:	4602      	mov	r2, r0
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	4620      	mov	r0, r4
 8008ba4:	4629      	mov	r1, r5
 8008ba6:	f7f7 ffc1 	bl	8000b2c <__aeabi_dcmplt>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d1d7      	bne.n	8008b60 <wait_ms_NoReset+0x10>
        }

}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdb0      	pop	{r4, r5, r7, pc}
 8008bba:	bf00      	nop
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008bc4:	3f50624d 	.word	0x3f50624d
 8008bc8:	20000734 	.word	0x20000734

08008bcc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08c      	sub	sp, #48	; 0x30
 8008bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8008bd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8008bde:	1d3b      	adds	r3, r7, #4
 8008be0:	2220      	movs	r2, #32
 8008be2:	2100      	movs	r1, #0
 8008be4:	4618      	mov	r0, r3
 8008be6:	f018 f823 	bl	8020c30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8008bea:	4b56      	ldr	r3, [pc, #344]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008bec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bf0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8008bf2:	4b54      	ldr	r3, [pc, #336]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008bf4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008bf8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008bfa:	4b52      	ldr	r3, [pc, #328]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008c00:	4b50      	ldr	r3, [pc, #320]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8008c06:	4b4f      	ldr	r3, [pc, #316]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c08:	2200      	movs	r2, #0
 8008c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008c0c:	4b4d      	ldr	r3, [pc, #308]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c0e:	2201      	movs	r2, #1
 8008c10:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8008c12:	4b4c      	ldr	r3, [pc, #304]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c14:	2208      	movs	r2, #8
 8008c16:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8008c18:	4b4a      	ldr	r3, [pc, #296]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8008c1e:	4b49      	ldr	r3, [pc, #292]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c20:	2201      	movs	r2, #1
 8008c22:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8008c24:	4b47      	ldr	r3, [pc, #284]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c26:	2206      	movs	r2, #6
 8008c28:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008c2a:	4b46      	ldr	r3, [pc, #280]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008c32:	4b44      	ldr	r3, [pc, #272]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008c38:	4b42      	ldr	r3, [pc, #264]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008c3e:	4b41      	ldr	r3, [pc, #260]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8008c46:	4b3f      	ldr	r3, [pc, #252]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c48:	2200      	movs	r2, #0
 8008c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008c4c:	4b3d      	ldr	r3, [pc, #244]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008c54:	483b      	ldr	r0, [pc, #236]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c56:	f010 ffbf 	bl	8019bd8 <HAL_ADC_Init>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d001      	beq.n	8008c64 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008c60:	f001 fddb 	bl	800a81a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8008c64:	2300      	movs	r3, #0
 8008c66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008c68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	4835      	ldr	r0, [pc, #212]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c70:	f012 fe0c 	bl	801b88c <HAL_ADCEx_MultiModeConfigChannel>
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d001      	beq.n	8008c7e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008c7a:	f001 fdce 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008c7e:	4b32      	ldr	r3, [pc, #200]	; (8008d48 <MX_ADC1_Init+0x17c>)
 8008c80:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8008c82:	2306      	movs	r3, #6
 8008c84:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8008c86:	2301      	movs	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008c8a:	237f      	movs	r3, #127	; 0x7f
 8008c8c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008c8e:	2304      	movs	r3, #4
 8008c90:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8008c92:	2300      	movs	r3, #0
 8008c94:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	482a      	ldr	r0, [pc, #168]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008c9c:	f011 fed2 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8008ca6:	f001 fdb8 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008caa:	4b28      	ldr	r3, [pc, #160]	; (8008d4c <MX_ADC1_Init+0x180>)
 8008cac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008cae:	230c      	movs	r3, #12
 8008cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	4823      	ldr	r0, [pc, #140]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008cb8:	f011 fec4 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8008cc2:	f001 fdaa 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8008cc6:	4b22      	ldr	r3, [pc, #136]	; (8008d50 <MX_ADC1_Init+0x184>)
 8008cc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8008cca:	2312      	movs	r3, #18
 8008ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008cce:	1d3b      	adds	r3, r7, #4
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	481c      	ldr	r0, [pc, #112]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008cd4:	f011 feb6 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d001      	beq.n	8008ce2 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 8008cde:	f001 fd9c 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8008ce2:	4b1c      	ldr	r3, [pc, #112]	; (8008d54 <MX_ADC1_Init+0x188>)
 8008ce4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8008ce6:	2318      	movs	r3, #24
 8008ce8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	4619      	mov	r1, r3
 8008cee:	4815      	ldr	r0, [pc, #84]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008cf0:	f011 fea8 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8008cfa:	f001 fd8e 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8008cfe:	4b16      	ldr	r3, [pc, #88]	; (8008d58 <MX_ADC1_Init+0x18c>)
 8008d00:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8008d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d08:	1d3b      	adds	r3, r7, #4
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	480d      	ldr	r0, [pc, #52]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008d0e:	f011 fe99 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008d12:	4603      	mov	r3, r0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 8008d18:	f001 fd7f 	bl	800a81a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8008d1c:	4b0f      	ldr	r3, [pc, #60]	; (8008d5c <MX_ADC1_Init+0x190>)
 8008d1e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8008d20:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008d24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4806      	ldr	r0, [pc, #24]	; (8008d44 <MX_ADC1_Init+0x178>)
 8008d2c:	f011 fe8a 	bl	801aa44 <HAL_ADC_ConfigChannel>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8008d36:	f001 fd70 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008d3a:	bf00      	nop
 8008d3c:	3730      	adds	r7, #48	; 0x30
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	bd80      	pop	{r7, pc}
 8008d42:	bf00      	nop
 8008d44:	20000740 	.word	0x20000740
 8008d48:	2e300800 	.word	0x2e300800
 8008d4c:	3ef08000 	.word	0x3ef08000
 8008d50:	10c00010 	.word	0x10c00010
 8008d54:	0c900008 	.word	0x0c900008
 8008d58:	08600004 	.word	0x08600004
 8008d5c:	04300002 	.word	0x04300002

08008d60 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b09e      	sub	sp, #120	; 0x78
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	601a      	str	r2, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	60da      	str	r2, [r3, #12]
 8008d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008d78:	f107 0314 	add.w	r3, r7, #20
 8008d7c:	2250      	movs	r2, #80	; 0x50
 8008d7e:	2100      	movs	r1, #0
 8008d80:	4618      	mov	r0, r3
 8008d82:	f017 ff55 	bl	8020c30 <memset>
  if(adcHandle->Instance==ADC1)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d8e:	f040 8082 	bne.w	8008e96 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8008d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008d98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008d9c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008d9e:	f107 0314 	add.w	r3, r7, #20
 8008da2:	4618      	mov	r0, r3
 8008da4:	f014 fc1c 	bl	801d5e0 <HAL_RCCEx_PeriphCLKConfig>
 8008da8:	4603      	mov	r3, r0
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008dae:	f001 fd34 	bl	800a81a <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8008db2:	4b3b      	ldr	r3, [pc, #236]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db6:	4a3a      	ldr	r2, [pc, #232]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008db8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dbe:	4b38      	ldr	r3, [pc, #224]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dc6:	613b      	str	r3, [r7, #16]
 8008dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dca:	4b35      	ldr	r3, [pc, #212]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dce:	4a34      	ldr	r2, [pc, #208]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008dd0:	f043 0301 	orr.w	r3, r3, #1
 8008dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dd6:	4b32      	ldr	r3, [pc, #200]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dda:	f003 0301 	and.w	r3, r3, #1
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008de2:	4b2f      	ldr	r3, [pc, #188]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008de6:	4a2e      	ldr	r2, [pc, #184]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008de8:	f043 0302 	orr.w	r3, r3, #2
 8008dec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dee:	4b2c      	ldr	r3, [pc, #176]	; (8008ea0 <HAL_ADC_MspInit+0x140>)
 8008df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 8008dfa:	230f      	movs	r3, #15
 8008dfc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e10:	f013 fc68 	bl	801c6e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 8008e14:	f241 0301 	movw	r3, #4097	; 0x1001
 8008e18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008e22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008e26:	4619      	mov	r1, r3
 8008e28:	481e      	ldr	r0, [pc, #120]	; (8008ea4 <HAL_ADC_MspInit+0x144>)
 8008e2a:	f013 fc5b 	bl	801c6e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e30:	4a1e      	ldr	r2, [pc, #120]	; (8008eac <HAL_ADC_MspInit+0x14c>)
 8008e32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8008e34:	4b1c      	ldr	r3, [pc, #112]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e36:	2205      	movs	r2, #5
 8008e38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008e3a:	4b1b      	ldr	r3, [pc, #108]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e40:	4b19      	ldr	r3, [pc, #100]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e42:	2200      	movs	r2, #0
 8008e44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008e46:	4b18      	ldr	r3, [pc, #96]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e48:	2280      	movs	r2, #128	; 0x80
 8008e4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008e4c:	4b16      	ldr	r3, [pc, #88]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008e54:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008e5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008e5c:	4b12      	ldr	r3, [pc, #72]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e5e:	2220      	movs	r2, #32
 8008e60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8008e62:	4b11      	ldr	r3, [pc, #68]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008e68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008e6a:	480f      	ldr	r0, [pc, #60]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e6c:	f012 ff06 	bl	801bc7c <HAL_DMA_Init>
 8008e70:	4603      	mov	r3, r0
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d001      	beq.n	8008e7a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8008e76:	f001 fcd0 	bl	800a81a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a0a      	ldr	r2, [pc, #40]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e7e:	655a      	str	r2, [r3, #84]	; 0x54
 8008e80:	4a09      	ldr	r2, [pc, #36]	; (8008ea8 <HAL_ADC_MspInit+0x148>)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8008e86:	2200      	movs	r2, #0
 8008e88:	2100      	movs	r1, #0
 8008e8a:	2012      	movs	r0, #18
 8008e8c:	f012 fec1 	bl	801bc12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008e90:	2012      	movs	r0, #18
 8008e92:	f012 fed8 	bl	801bc46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008e96:	bf00      	nop
 8008e98:	3778      	adds	r7, #120	; 0x78
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40021000 	.word	0x40021000
 8008ea4:	48000400 	.word	0x48000400
 8008ea8:	200007ac 	.word	0x200007ac
 8008eac:	40020008 	.word	0x40020008

08008eb0 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008eb8:	f7ff fc72 	bl	80087a0 <pl_callback_getSensor>
}
 8008ebc:	bf00      	nop
 8008ebe:	3708      	adds	r7, #8
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	f107 0420 	add.w	r4, r7, #32
 8008ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8008ed6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008eda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ee2:	f2c0 819d 	blt.w	8009220 <cal_table+0x35c>
	switch (g_acc_flag) {
 8008ee6:	4bcd      	ldr	r3, [pc, #820]	; (800921c <cal_table+0x358>)
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	2b06      	cmp	r3, #6
 8008eee:	f200 833a 	bhi.w	8009566 <cal_table+0x6a2>
 8008ef2:	a201      	add	r2, pc, #4	; (adr r2, 8008ef8 <cal_table+0x34>)
 8008ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ef8:	08009559 	.word	0x08009559
 8008efc:	08008f15 	.word	0x08008f15
 8008f00:	08009087 	.word	0x08009087
 8008f04:	080091a5 	.word	0x080091a5
 8008f08:	08009559 	.word	0x08009559
 8008f0c:	080091d1 	.word	0x080091d1
 8008f10:	080091f7 	.word	0x080091f7
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 8008f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f16:	ed93 7a00 	vldr	s14, [r3]
 8008f1a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008f1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f26:	db0a      	blt.n	8008f3e <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008f28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f2c:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f30:	f04f 0200 	mov.w	r2, #0
 8008f34:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8008f36:	4bb9      	ldr	r3, [pc, #740]	; (800921c <cal_table+0x358>)
 8008f38:	2202      	movs	r2, #2
 8008f3a:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008f3c:	e313      	b.n	8009566 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008f3e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	edd3 7a00 	vldr	s15, [r3]
 8008f48:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f4e:	edd3 7a00 	vldr	s15, [r3]
 8008f52:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8008f56:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008f5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f5e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008f62:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8008f66:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008f6a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008f6e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008f72:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8008f76:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008f7a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008f7e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008f82:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008f86:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008f8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f8e:	d900      	bls.n	8008f92 <cal_table+0xce>
		break;
 8008f90:	e2e9      	b.n	8009566 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	edd3 7a00 	vldr	s15, [r3]
 8008f98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f9e:	edd3 7a00 	vldr	s15, [r3]
 8008fa2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8008fa6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008faa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008fae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fb2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8008fb6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008fba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008fbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008fc2:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8008fc6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008fca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008fce:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8008fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fd6:	edd7 7a08 	vldr	s15, [r7, #32]
 8008fda:	ee77 6a67 	vsub.f32	s13, s14, s15
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8008fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fe8:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7f7 fad1 	bl	8000598 <__aeabi_f2d>
 8008ff6:	4604      	mov	r4, r0
 8008ff8:	460d      	mov	r5, r1
 8008ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f7f7 facb 	bl	8000598 <__aeabi_f2d>
 8009002:	f04f 0200 	mov.w	r2, #0
 8009006:	f04f 0300 	mov.w	r3, #0
 800900a:	f7f7 fb1d 	bl	8000648 <__aeabi_dmul>
 800900e:	4602      	mov	r2, r0
 8009010:	460b      	mov	r3, r1
 8009012:	4690      	mov	r8, r2
 8009014:	4699      	mov	r9, r3
 8009016:	edd7 7a01 	vldr	s15, [r7, #4]
 800901a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800901e:	ee17 0a90 	vmov	r0, s15
 8009022:	f7f7 fab9 	bl	8000598 <__aeabi_f2d>
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	4640      	mov	r0, r8
 800902c:	4649      	mov	r1, r9
 800902e:	f7f7 fb0b 	bl	8000648 <__aeabi_dmul>
 8009032:	4602      	mov	r2, r0
 8009034:	460b      	mov	r3, r1
 8009036:	4620      	mov	r0, r4
 8009038:	4629      	mov	r1, r5
 800903a:	f7f7 f94d 	bl	80002d8 <__aeabi_dsub>
 800903e:	4602      	mov	r2, r0
 8009040:	460b      	mov	r3, r1
 8009042:	4610      	mov	r0, r2
 8009044:	4619      	mov	r1, r3
 8009046:	f7f7 fdd7 	bl	8000bf8 <__aeabi_d2f>
 800904a:	4602      	mov	r2, r0
 800904c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800904e:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8009050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009052:	ed93 7a00 	vldr	s14, [r3]
 8009056:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800905a:	edd7 7a01 	vldr	s15, [r7, #4]
 800905e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009062:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800906a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800906c:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8009070:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009074:	eef1 7a67 	vneg.f32	s15, s15
 8009078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800907a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800907e:	4b67      	ldr	r3, [pc, #412]	; (800921c <cal_table+0x358>)
 8009080:	2203      	movs	r2, #3
 8009082:	701a      	strb	r2, [r3, #0]
		break;
 8009084:	e26f      	b.n	8009566 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8009086:	ed97 7a08 	vldr	s14, [r7, #32]
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	edd3 7a02 	vldr	s15, [r3, #8]
 8009090:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8009094:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009098:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800909c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80090a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80090a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80090ac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80090b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80090b4:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80090b8:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80090bc:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 80090c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80090c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090c8:	d900      	bls.n	80090cc <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80090ca:	e24c      	b.n	8009566 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80090cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80090d2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80090d6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80090da:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80090de:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80090e2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80090e6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80090ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80090ee:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80090f2:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80090f6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80090fa:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80090fe:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8009102:	edd7 7a08 	vldr	s15, [r7, #32]
 8009106:	ee77 6a67 	vsub.f32	s13, s14, s15
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 8009110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009114:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	4618      	mov	r0, r3
 800911e:	f7f7 fa3b 	bl	8000598 <__aeabi_f2d>
 8009122:	4604      	mov	r4, r0
 8009124:	460d      	mov	r5, r1
 8009126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009128:	4618      	mov	r0, r3
 800912a:	f7f7 fa35 	bl	8000598 <__aeabi_f2d>
 800912e:	f04f 0200 	mov.w	r2, #0
 8009132:	f04f 0300 	mov.w	r3, #0
 8009136:	f7f7 fa87 	bl	8000648 <__aeabi_dmul>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	4690      	mov	r8, r2
 8009140:	4699      	mov	r9, r3
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f7f7 fa28 	bl	8000598 <__aeabi_f2d>
 8009148:	4602      	mov	r2, r0
 800914a:	460b      	mov	r3, r1
 800914c:	4640      	mov	r0, r8
 800914e:	4649      	mov	r1, r9
 8009150:	f7f7 fa7a 	bl	8000648 <__aeabi_dmul>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	4620      	mov	r0, r4
 800915a:	4629      	mov	r1, r5
 800915c:	f7f7 f8bc 	bl	80002d8 <__aeabi_dsub>
 8009160:	4602      	mov	r2, r0
 8009162:	460b      	mov	r3, r1
 8009164:	4610      	mov	r0, r2
 8009166:	4619      	mov	r1, r3
 8009168:	f7f7 fd46 	bl	8000bf8 <__aeabi_d2f>
 800916c:	4602      	mov	r2, r0
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8009172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009174:	ed93 7a00 	vldr	s14, [r3]
 8009178:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800917c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009180:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009184:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 800918e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009192:	eef1 7a67 	vneg.f32	s15, s15
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 800919c:	4b1f      	ldr	r3, [pc, #124]	; (800921c <cal_table+0x358>)
 800919e:	2203      	movs	r2, #3
 80091a0:	701a      	strb	r2, [r3, #0]
		break;
 80091a2:	e1e0      	b.n	8009566 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	ed93 7a00 	vldr	s14, [r3]
 80091aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80091ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091b6:	d900      	bls.n	80091ba <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80091b8:	e1d5      	b.n	8009566 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80091ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091be:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	f04f 0200 	mov.w	r2, #0
 80091c6:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80091c8:	4b14      	ldr	r3, [pc, #80]	; (800921c <cal_table+0x358>)
 80091ca:	2204      	movs	r2, #4
 80091cc:	701a      	strb	r2, [r3, #0]
		break;
 80091ce:	e1ca      	b.n	8009566 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80091d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80091d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80091da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80091de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091e2:	da00      	bge.n	80091e6 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80091e4:	e1bf      	b.n	8009566 <cal_table+0x6a2>
			target->acceleration = 0;
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	f04f 0200 	mov.w	r2, #0
 80091ec:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80091ee:	4b0b      	ldr	r3, [pc, #44]	; (800921c <cal_table+0x358>)
 80091f0:	2204      	movs	r2, #4
 80091f2:	701a      	strb	r2, [r3, #0]
		break;
 80091f4:	e1b7      	b.n	8009566 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80091f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f8:	ed93 7a02 	vldr	s14, [r3, #8]
 80091fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8009200:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009208:	da00      	bge.n	800920c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800920a:	e1ac      	b.n	8009566 <cal_table+0x6a2>
			target->acceleration = 0;
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	f04f 0200 	mov.w	r2, #0
 8009212:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009214:	4b01      	ldr	r3, [pc, #4]	; (800921c <cal_table+0x358>)
 8009216:	2204      	movs	r2, #4
 8009218:	701a      	strb	r2, [r3, #0]
		break;
 800921a:	e1a4      	b.n	8009566 <cal_table+0x6a2>
 800921c:	20000810 	.word	0x20000810
	}
}else{
	switch (g_acc_flag) {
 8009220:	4bce      	ldr	r3, [pc, #824]	; (800955c <cal_table+0x698>)
 8009222:	781b      	ldrb	r3, [r3, #0]
 8009224:	b2db      	uxtb	r3, r3
 8009226:	2b06      	cmp	r3, #6
 8009228:	f200 819d 	bhi.w	8009566 <cal_table+0x6a2>
 800922c:	a201      	add	r2, pc, #4	; (adr r2, 8009234 <cal_table+0x370>)
 800922e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009232:	bf00      	nop
 8009234:	08009565 	.word	0x08009565
 8009238:	08009251 	.word	0x08009251
 800923c:	080093c3 	.word	0x080093c3
 8009240:	080094d9 	.word	0x080094d9
 8009244:	08009505 	.word	0x08009505
 8009248:	0800950d 	.word	0x0800950d
 800924c:	08009533 	.word	0x08009533
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8009250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009252:	ed93 7a00 	vldr	s14, [r3]
 8009256:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800925a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800925e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009262:	d80a      	bhi.n	800927a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8009264:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009268:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	f04f 0200 	mov.w	r2, #0
 8009270:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8009272:	4bba      	ldr	r3, [pc, #744]	; (800955c <cal_table+0x698>)
 8009274:	2202      	movs	r2, #2
 8009276:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8009278:	e175      	b.n	8009566 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800927a:	edd7 7a08 	vldr	s15, [r7, #32]
 800927e:	eeb1 7a67 	vneg.f32	s14, s15
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	edd3 7a00 	vldr	s15, [r3]
 8009288:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800928c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928e:	edd3 7a00 	vldr	s15, [r3]
 8009292:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8009296:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800929a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800929e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80092a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80092a6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80092aa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80092ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80092b2:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 80092b6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80092ba:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80092be:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80092c2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 80092c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ce:	d900      	bls.n	80092d2 <cal_table+0x40e>
		break;
 80092d0:	e149      	b.n	8009566 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 80092d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d4:	edd3 7a00 	vldr	s15, [r3]
 80092d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	edd3 7a00 	vldr	s15, [r3]
 80092e2:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80092e6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80092ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f2:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80092f6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80092fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80092fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009302:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8009306:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800930a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800930e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009312:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800931a:	edd7 7a08 	vldr	s15, [r7, #32]
 800931e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8009328:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800932c:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	4618      	mov	r0, r3
 8009336:	f7f7 f92f 	bl	8000598 <__aeabi_f2d>
 800933a:	4604      	mov	r4, r0
 800933c:	460d      	mov	r5, r1
 800933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009340:	4618      	mov	r0, r3
 8009342:	f7f7 f929 	bl	8000598 <__aeabi_f2d>
 8009346:	f04f 0200 	mov.w	r2, #0
 800934a:	f04f 0300 	mov.w	r3, #0
 800934e:	f7f7 f97b 	bl	8000648 <__aeabi_dmul>
 8009352:	4602      	mov	r2, r0
 8009354:	460b      	mov	r3, r1
 8009356:	4690      	mov	r8, r2
 8009358:	4699      	mov	r9, r3
 800935a:	edd7 7a01 	vldr	s15, [r7, #4]
 800935e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009362:	ee17 0a90 	vmov	r0, s15
 8009366:	f7f7 f917 	bl	8000598 <__aeabi_f2d>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	4640      	mov	r0, r8
 8009370:	4649      	mov	r1, r9
 8009372:	f7f7 f969 	bl	8000648 <__aeabi_dmul>
 8009376:	4602      	mov	r2, r0
 8009378:	460b      	mov	r3, r1
 800937a:	4620      	mov	r0, r4
 800937c:	4629      	mov	r1, r5
 800937e:	f7f6 ffad 	bl	80002dc <__adddf3>
 8009382:	4602      	mov	r2, r0
 8009384:	460b      	mov	r3, r1
 8009386:	4610      	mov	r0, r2
 8009388:	4619      	mov	r1, r3
 800938a:	f7f7 fc35 	bl	8000bf8 <__aeabi_d2f>
 800938e:	4602      	mov	r2, r0
 8009390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009392:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8009394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009396:	ed93 7a00 	vldr	s14, [r3]
 800939a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800939e:	edd7 7a01 	vldr	s15, [r7, #4]
 80093a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80093a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80093aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80093ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b0:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 80093b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093b8:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80093ba:	4b68      	ldr	r3, [pc, #416]	; (800955c <cal_table+0x698>)
 80093bc:	2203      	movs	r2, #3
 80093be:	701a      	strb	r2, [r3, #0]
		break;
 80093c0:	e0d1      	b.n	8009566 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 80093c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80093c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80093cc:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80093d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80093d4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80093d8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80093dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80093e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80093e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80093e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80093ec:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093f0:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80093f4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80093f8:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80093fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009404:	d900      	bls.n	8009408 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8009406:	e0ae      	b.n	8009566 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8009408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940a:	ed93 7a02 	vldr	s14, [r3, #8]
 800940e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009412:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009416:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800941a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800941e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009422:	ee66 7a27 	vmul.f32	s15, s12, s15
 8009426:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800942a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800942e:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8009432:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009436:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800943a:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 800943e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009442:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 800944c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009450:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009456:	689b      	ldr	r3, [r3, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f7f7 f89d 	bl	8000598 <__aeabi_f2d>
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	4618      	mov	r0, r3
 8009466:	f7f7 f897 	bl	8000598 <__aeabi_f2d>
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	f04f 0300 	mov.w	r3, #0
 8009472:	f7f7 f8e9 	bl	8000648 <__aeabi_dmul>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4690      	mov	r8, r2
 800947c:	4699      	mov	r9, r3
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f7f7 f88a 	bl	8000598 <__aeabi_f2d>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 f8dc 	bl	8000648 <__aeabi_dmul>
 8009490:	4602      	mov	r2, r0
 8009492:	460b      	mov	r3, r1
 8009494:	4620      	mov	r0, r4
 8009496:	4629      	mov	r1, r5
 8009498:	f7f6 ff20 	bl	80002dc <__adddf3>
 800949c:	4602      	mov	r2, r0
 800949e:	460b      	mov	r3, r1
 80094a0:	4610      	mov	r0, r2
 80094a2:	4619      	mov	r1, r3
 80094a4:	f7f7 fba8 	bl	8000bf8 <__aeabi_d2f>
 80094a8:	4602      	mov	r2, r0
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 80094ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b0:	ed93 7a00 	vldr	s14, [r3]
 80094b4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80094b8:	edd7 7a01 	vldr	s15, [r7, #4]
 80094bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80094c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80094c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c6:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80094ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ce:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 80094d0:	4b22      	ldr	r3, [pc, #136]	; (800955c <cal_table+0x698>)
 80094d2:	2203      	movs	r2, #3
 80094d4:	701a      	strb	r2, [r3, #0]
		break;
 80094d6:	e046      	b.n	8009566 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 80094d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094da:	ed93 7a00 	vldr	s14, [r3]
 80094de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80094e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80094e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ea:	da00      	bge.n	80094ee <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80094ec:	e03b      	b.n	8009566 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80094ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f2:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f04f 0200 	mov.w	r2, #0
 80094fa:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80094fc:	4b17      	ldr	r3, [pc, #92]	; (800955c <cal_table+0x698>)
 80094fe:	2204      	movs	r2, #4
 8009500:	701a      	strb	r2, [r3, #0]
		break;
 8009502:	e030      	b.n	8009566 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8009504:	4b16      	ldr	r3, [pc, #88]	; (8009560 <cal_table+0x69c>)
 8009506:	2201      	movs	r2, #1
 8009508:	701a      	strb	r2, [r3, #0]
		break;
 800950a:	e02c      	b.n	8009566 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	ed93 7a02 	vldr	s14, [r3, #8]
 8009512:	edd7 7a08 	vldr	s15, [r7, #32]
 8009516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800951a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800951e:	d900      	bls.n	8009522 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009520:	e021      	b.n	8009566 <cal_table+0x6a2>
			target->acceleration = 0;
 8009522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009524:	f04f 0200 	mov.w	r2, #0
 8009528:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <cal_table+0x698>)
 800952c:	2204      	movs	r2, #4
 800952e:	701a      	strb	r2, [r3, #0]
		break;
 8009530:	e019      	b.n	8009566 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8009532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009534:	ed93 7a02 	vldr	s14, [r3, #8]
 8009538:	edd7 7a08 	vldr	s15, [r7, #32]
 800953c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009544:	d900      	bls.n	8009548 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009546:	e00e      	b.n	8009566 <cal_table+0x6a2>
			target->acceleration = 0;
 8009548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009550:	4b02      	ldr	r3, [pc, #8]	; (800955c <cal_table+0x698>)
 8009552:	2204      	movs	r2, #4
 8009554:	701a      	strb	r2, [r3, #0]
		break;
 8009556:	e006      	b.n	8009566 <cal_table+0x6a2>
		break;
 8009558:	bf00      	nop
 800955a:	e004      	b.n	8009566 <cal_table+0x6a2>
 800955c:	20000810 	.word	0x20000810
 8009560:	20000811 	.word	0x20000811
		break;
 8009564:	bf00      	nop
	}

}

}
 8009566:	bf00      	nop
 8009568:	3708      	adds	r7, #8
 800956a:	46bd      	mov	sp, r7
 800956c:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009570:	b004      	add	sp, #16
 8009572:	4770      	bx	lr

08009574 <cal_table_dis>:



// 減速をより速くした機能を追加
void cal_table_dis(TRAPEZOID input,TARGET *target){
 8009574:	b084      	sub	sp, #16
 8009576:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
float acc_distance;//初速度から現在の速度に達するまでに使った距離
float dec_distance;//現在の速度から終端速度になるのに必要なた距離
float velocity=(fusion_speedL+fusion_speedR)/2;
 8009586:	4bb6      	ldr	r3, [pc, #728]	; (8009860 <cal_table_dis+0x2ec>)
 8009588:	ed93 7a00 	vldr	s14, [r3]
 800958c:	4bb5      	ldr	r3, [pc, #724]	; (8009864 <cal_table_dis+0x2f0>)
 800958e:	edd3 7a00 	vldr	s15, [r3]
 8009592:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009596:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800959a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800959e:	edc7 7a03 	vstr	s15, [r7, #12]
if (input.displacement>=0){
 80095a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80095a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80095aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ae:	f2c0 813f 	blt.w	8009830 <cal_table_dis+0x2bc>
	switch (g_acc_flag) {
 80095b2:	4bad      	ldr	r3, [pc, #692]	; (8009868 <cal_table_dis+0x2f4>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b06      	cmp	r3, #6
 80095ba:	f200 82e6 	bhi.w	8009b8a <cal_table_dis+0x616>
 80095be:	a201      	add	r2, pc, #4	; (adr r2, 80095c4 <cal_table_dis+0x50>)
 80095c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095c4:	08009b81 	.word	0x08009b81
 80095c8:	080095e1 	.word	0x080095e1
 80095cc:	0800968b 	.word	0x0800968b
 80095d0:	080097b9 	.word	0x080097b9
 80095d4:	08009b81 	.word	0x08009b81
 80095d8:	080097e5 	.word	0x080097e5
 80095dc:	0800980b 	.word	0x0800980b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			acc_distance = (velocity*velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 80095e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80095e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80095e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80095ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80095f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80095f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80095f8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80095fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009600:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009608:	edc7 7a02 	vstr	s15, [r7, #8]
			dec_distance = (velocity*velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 800960c:	edd7 7a03 	vldr	s15, [r7, #12]
 8009610:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8009614:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009618:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800961c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009620:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009624:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009628:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800962c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009634:	edc7 7a01 	vstr	s15, [r7, #4]
			target->velocity = velocity;
 8009638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800963a:	68fa      	ldr	r2, [r7, #12]
 800963c:	601a      	str	r2, [r3, #0]
			target->acceleration = 30000;
 800963e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009640:	4a8a      	ldr	r2, [pc, #552]	; (800986c <cal_table_dis+0x2f8>)
 8009642:	605a      	str	r2, [r3, #4]
			if (velocity >= input.count_velocity){
 8009644:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009648:	ed97 7a03 	vldr	s14, [r7, #12]
 800964c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009654:	f280 8296 	bge.w	8009b84 <cal_table_dis+0x610>
//				velocity = input.count_velocity;
//				target->acceleration = 0;
//				g_acc_flag=2;
			}
			else if(input.displacement <= (acc_distance + dec_distance)){
 8009658:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800965c:	edd7 6a02 	vldr	s13, [r7, #8]
 8009660:	edd7 7a01 	vldr	s15, [r7, #4]
 8009664:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800966c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009670:	d900      	bls.n	8009674 <cal_table_dis+0x100>
//				velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.deceleration;
				g_acc_flag=3;
			}
		break;
 8009672:	e287      	b.n	8009b84 <cal_table_dis+0x610>
				target->acceleration = -input.deceleration;
 8009674:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8009678:	eef1 7a67 	vneg.f32	s15, s15
 800967c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800967e:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8009682:	4b79      	ldr	r3, [pc, #484]	; (8009868 <cal_table_dis+0x2f4>)
 8009684:	2203      	movs	r2, #3
 8009686:	701a      	strb	r2, [r3, #0]
		break;
 8009688:	e27c      	b.n	8009b84 <cal_table_dis+0x610>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 800968a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800968e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009692:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009696:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800969a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800969e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80096b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096b6:	edc7 7a02 	vstr	s15, [r7, #8]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 80096ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80096be:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80096c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80096c6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80096ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80096ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80096d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096d6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80096da:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80096de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80096e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096e6:	edc7 7a01 	vstr	s15, [r7, #4]
		if (input.displacement-target->displacement <= dec_distance) {
 80096ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80096ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096f0:	edd3 7a02 	vldr	s15, [r3, #8]
 80096f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f8:	ed97 7a01 	vldr	s14, [r7, #4]
 80096fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009700:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009704:	da00      	bge.n	8009708 <cal_table_dis+0x194>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.deceleration;
			g_acc_flag=3;
		}
		break;
 8009706:	e240      	b.n	8009b8a <cal_table_dis+0x616>
			time_over=(target->displacement+dec_distance-input.displacement)/target->velocity;
 8009708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800970a:	ed93 7a02 	vldr	s14, [r3, #8]
 800970e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009712:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009716:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800971a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800971e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009720:	ed93 7a00 	vldr	s14, [r3]
 8009724:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009728:	edc7 7a00 	vstr	s15, [r7]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800972c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	4618      	mov	r0, r3
 8009732:	f7f6 ff31 	bl	8000598 <__aeabi_f2d>
 8009736:	4604      	mov	r4, r0
 8009738:	460d      	mov	r5, r1
 800973a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800973c:	4618      	mov	r0, r3
 800973e:	f7f6 ff2b 	bl	8000598 <__aeabi_f2d>
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	f7f6 ff7d 	bl	8000648 <__aeabi_dmul>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4690      	mov	r8, r2
 8009754:	4699      	mov	r9, r3
 8009756:	6838      	ldr	r0, [r7, #0]
 8009758:	f7f6 ff1e 	bl	8000598 <__aeabi_f2d>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4640      	mov	r0, r8
 8009762:	4649      	mov	r1, r9
 8009764:	f7f6 ff70 	bl	8000648 <__aeabi_dmul>
 8009768:	4602      	mov	r2, r0
 800976a:	460b      	mov	r3, r1
 800976c:	4620      	mov	r0, r4
 800976e:	4629      	mov	r1, r5
 8009770:	f7f6 fdb2 	bl	80002d8 <__aeabi_dsub>
 8009774:	4602      	mov	r2, r0
 8009776:	460b      	mov	r3, r1
 8009778:	4610      	mov	r0, r2
 800977a:	4619      	mov	r1, r3
 800977c:	f7f7 fa3c 	bl	8000bf8 <__aeabi_d2f>
 8009780:	4602      	mov	r2, r0
 8009782:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009784:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8009786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009788:	ed93 7a00 	vldr	s14, [r3]
 800978c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009790:	edd7 7a00 	vldr	s15, [r7]
 8009794:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009798:	ee77 7a67 	vsub.f32	s15, s14, s15
 800979c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800979e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.deceleration;
 80097a2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80097a6:	eef1 7a67 	vneg.f32	s15, s15
 80097aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ac:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 80097b0:	4b2d      	ldr	r3, [pc, #180]	; (8009868 <cal_table_dis+0x2f4>)
 80097b2:	2203      	movs	r2, #3
 80097b4:	701a      	strb	r2, [r3, #0]
		break;
 80097b6:	e1e8      	b.n	8009b8a <cal_table_dis+0x616>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 80097b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097ba:	ed93 7a00 	vldr	s14, [r3]
 80097be:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80097c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097ca:	d900      	bls.n	80097ce <cal_table_dis+0x25a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80097cc:	e1dd      	b.n	8009b8a <cal_table_dis+0x616>
			target->velocity = input.end_velocity;
 80097ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d2:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80097d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097d6:	f04f 0200 	mov.w	r2, #0
 80097da:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80097dc:	4b22      	ldr	r3, [pc, #136]	; (8009868 <cal_table_dis+0x2f4>)
 80097de:	2204      	movs	r2, #4
 80097e0:	701a      	strb	r2, [r3, #0]
		break;
 80097e2:	e1d2      	b.n	8009b8a <cal_table_dis+0x616>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80097e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80097ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80097ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097f6:	da00      	bge.n	80097fa <cal_table_dis+0x286>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80097f8:	e1c7      	b.n	8009b8a <cal_table_dis+0x616>
			target->acceleration = 0;
 80097fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009802:	4b19      	ldr	r3, [pc, #100]	; (8009868 <cal_table_dis+0x2f4>)
 8009804:	2204      	movs	r2, #4
 8009806:	701a      	strb	r2, [r3, #0]
		break;
 8009808:	e1bf      	b.n	8009b8a <cal_table_dis+0x616>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 800980a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800980c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009810:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009814:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009818:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800981c:	da00      	bge.n	8009820 <cal_table_dis+0x2ac>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800981e:	e1b4      	b.n	8009b8a <cal_table_dis+0x616>
			target->acceleration = 0;
 8009820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009822:	f04f 0200 	mov.w	r2, #0
 8009826:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009828:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <cal_table_dis+0x2f4>)
 800982a:	2204      	movs	r2, #4
 800982c:	701a      	strb	r2, [r3, #0]
		break;
 800982e:	e1ac      	b.n	8009b8a <cal_table_dis+0x616>
	}
}else{
	switch (g_acc_flag) {
 8009830:	4b0d      	ldr	r3, [pc, #52]	; (8009868 <cal_table_dis+0x2f4>)
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b06      	cmp	r3, #6
 8009838:	f200 81a7 	bhi.w	8009b8a <cal_table_dis+0x616>
 800983c:	a201      	add	r2, pc, #4	; (adr r2, 8009844 <cal_table_dis+0x2d0>)
 800983e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009842:	bf00      	nop
 8009844:	08009b89 	.word	0x08009b89
 8009848:	08009871 	.word	0x08009871
 800984c:	080099db 	.word	0x080099db
 8009850:	08009b01 	.word	0x08009b01
 8009854:	08009b2d 	.word	0x08009b2d
 8009858:	08009b35 	.word	0x08009b35
 800985c:	08009b5b 	.word	0x08009b5b
 8009860:	20000258 	.word	0x20000258
 8009864:	2000025c 	.word	0x2000025c
 8009868:	20000810 	.word	0x20000810
 800986c:	46ea6000 	.word	0x46ea6000
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
		acc_distance = (target->velocity*target->velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 8009870:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009872:	ed93 7a00 	vldr	s14, [r3]
 8009876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009878:	edd3 7a00 	vldr	s15, [r3]
 800987c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009880:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8009884:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8009888:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800988c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009890:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009894:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009898:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800989c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a0:	edc7 7a02 	vstr	s15, [r7, #8]
		dec_distance = (target->velocity*target->velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 80098a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a6:	ed93 7a00 	vldr	s14, [r3]
 80098aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098ac:	edd3 7a00 	vldr	s15, [r3]
 80098b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80098b4:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80098b8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80098bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80098c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098c4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80098c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80098cc:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80098d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098d4:	edc7 7a01 	vstr	s15, [r7, #4]
			if (target->velocity <= input.count_velocity){
 80098d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098da:	ed93 7a00 	vldr	s14, [r3]
 80098de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80098e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098ea:	d80a      	bhi.n	8009902 <cal_table_dis+0x38e>
				target->velocity = input.count_velocity;
 80098ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80098ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f0:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80098f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098f4:	f04f 0200 	mov.w	r2, #0
 80098f8:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80098fa:	4ba7      	ldr	r3, [pc, #668]	; (8009b98 <cal_table_dis+0x624>)
 80098fc:	2202      	movs	r2, #2
 80098fe:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.deceleration;
				g_acc_flag=3;
			}
		break;
 8009900:	e143      	b.n	8009b8a <cal_table_dis+0x616>
			else if(-input.displacement <= (acc_distance + dec_distance)){
 8009902:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009906:	eeb1 7a67 	vneg.f32	s14, s15
 800990a:	edd7 6a02 	vldr	s13, [r7, #8]
 800990e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009916:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991e:	d900      	bls.n	8009922 <cal_table_dis+0x3ae>
		break;
 8009920:	e133      	b.n	8009b8a <cal_table_dis+0x616>
				time_over=( -acc_distance - dec_distance - input.displacement)/target->velocity;
 8009922:	edd7 7a02 	vldr	s15, [r7, #8]
 8009926:	eeb1 7a67 	vneg.f32	s14, s15
 800992a:	edd7 7a01 	vldr	s15, [r7, #4]
 800992e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009936:	ee77 6a67 	vsub.f32	s13, s14, s15
 800993a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800993c:	ed93 7a00 	vldr	s14, [r3]
 8009940:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009944:	edc7 7a00 	vstr	s15, [r7]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8009948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800994a:	689b      	ldr	r3, [r3, #8]
 800994c:	4618      	mov	r0, r3
 800994e:	f7f6 fe23 	bl	8000598 <__aeabi_f2d>
 8009952:	4604      	mov	r4, r0
 8009954:	460d      	mov	r5, r1
 8009956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009958:	4618      	mov	r0, r3
 800995a:	f7f6 fe1d 	bl	8000598 <__aeabi_f2d>
 800995e:	f04f 0200 	mov.w	r2, #0
 8009962:	f04f 0300 	mov.w	r3, #0
 8009966:	f7f6 fe6f 	bl	8000648 <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4690      	mov	r8, r2
 8009970:	4699      	mov	r9, r3
 8009972:	edd7 7a00 	vldr	s15, [r7]
 8009976:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800997a:	ee17 0a90 	vmov	r0, s15
 800997e:	f7f6 fe0b 	bl	8000598 <__aeabi_f2d>
 8009982:	4602      	mov	r2, r0
 8009984:	460b      	mov	r3, r1
 8009986:	4640      	mov	r0, r8
 8009988:	4649      	mov	r1, r9
 800998a:	f7f6 fe5d 	bl	8000648 <__aeabi_dmul>
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	4620      	mov	r0, r4
 8009994:	4629      	mov	r1, r5
 8009996:	f7f6 fca1 	bl	80002dc <__adddf3>
 800999a:	4602      	mov	r2, r0
 800999c:	460b      	mov	r3, r1
 800999e:	4610      	mov	r0, r2
 80099a0:	4619      	mov	r1, r3
 80099a2:	f7f7 f929 	bl	8000bf8 <__aeabi_d2f>
 80099a6:	4602      	mov	r2, r0
 80099a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099aa:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 80099ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099ae:	ed93 7a00 	vldr	s14, [r3]
 80099b2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 80099b6:	edd7 7a00 	vldr	s15, [r7]
 80099ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80099be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80099c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099c8:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.deceleration;
 80099cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099d0:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 80099d2:	4b71      	ldr	r3, [pc, #452]	; (8009b98 <cal_table_dis+0x624>)
 80099d4:	2203      	movs	r2, #3
 80099d6:	701a      	strb	r2, [r3, #0]
		break;
 80099d8:	e0d7      	b.n	8009b8a <cal_table_dis+0x616>
	case 2:
		//定常
		acc_distance = (input.count_velocity*input.count_velocity-input.start_velocity*input.start_velocity)/2/input.acceleration;
 80099da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80099de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80099e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80099e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80099ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80099ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80099f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80099f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80099fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80099fe:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8009a02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a06:	edc7 7a02 	vstr	s15, [r7, #8]
		dec_distance = (input.count_velocity*input.count_velocity-input.end_velocity*input.end_velocity)/2/input.deceleration;
 8009a0a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8009a0e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8009a12:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009a16:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8009a1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a2e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8009a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a36:	edc7 7a01 	vstr	s15, [r7, #4]
		if (-input.displacement+target->displacement <= dec_distance) {
 8009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a48:	ed97 7a01 	vldr	s14, [r7, #4]
 8009a4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	da00      	bge.n	8009a58 <cal_table_dis+0x4e4>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.deceleration;
			g_acc_flag=3;
		}
		break;
 8009a56:	e098      	b.n	8009b8a <cal_table_dis+0x616>
			time_over=(target->displacement-dec_distance-input.displacement)/target->velocity;
 8009a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a5a:	ed93 7a02 	vldr	s14, [r3, #8]
 8009a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009a62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009a66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009a6a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8009a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a70:	ed93 7a00 	vldr	s14, [r3]
 8009a74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a78:	edc7 7a00 	vstr	s15, [r7]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8009a7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	4618      	mov	r0, r3
 8009a82:	f7f6 fd89 	bl	8000598 <__aeabi_f2d>
 8009a86:	4604      	mov	r4, r0
 8009a88:	460d      	mov	r5, r1
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7f6 fd83 	bl	8000598 <__aeabi_f2d>
 8009a92:	f04f 0200 	mov.w	r2, #0
 8009a96:	f04f 0300 	mov.w	r3, #0
 8009a9a:	f7f6 fdd5 	bl	8000648 <__aeabi_dmul>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	460b      	mov	r3, r1
 8009aa2:	4690      	mov	r8, r2
 8009aa4:	4699      	mov	r9, r3
 8009aa6:	6838      	ldr	r0, [r7, #0]
 8009aa8:	f7f6 fd76 	bl	8000598 <__aeabi_f2d>
 8009aac:	4602      	mov	r2, r0
 8009aae:	460b      	mov	r3, r1
 8009ab0:	4640      	mov	r0, r8
 8009ab2:	4649      	mov	r1, r9
 8009ab4:	f7f6 fdc8 	bl	8000648 <__aeabi_dmul>
 8009ab8:	4602      	mov	r2, r0
 8009aba:	460b      	mov	r3, r1
 8009abc:	4620      	mov	r0, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	f7f6 fc0c 	bl	80002dc <__adddf3>
 8009ac4:	4602      	mov	r2, r0
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	4610      	mov	r0, r2
 8009aca:	4619      	mov	r1, r3
 8009acc:	f7f7 f894 	bl	8000bf8 <__aeabi_d2f>
 8009ad0:	4602      	mov	r2, r0
 8009ad2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad4:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8009ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ad8:	ed93 7a00 	vldr	s14, [r3]
 8009adc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8009ae0:	edd7 7a00 	vldr	s15, [r7]
 8009ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aee:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.deceleration;
 8009af2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009af6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8009af8:	4b27      	ldr	r3, [pc, #156]	; (8009b98 <cal_table_dis+0x624>)
 8009afa:	2203      	movs	r2, #3
 8009afc:	701a      	strb	r2, [r3, #0]
		break;
 8009afe:	e044      	b.n	8009b8a <cal_table_dis+0x616>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8009b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b02:	ed93 7a00 	vldr	s14, [r3]
 8009b06:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8009b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	da00      	bge.n	8009b16 <cal_table_dis+0x5a2>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009b14:	e039      	b.n	8009b8a <cal_table_dis+0x616>
			target->velocity = input.end_velocity;
 8009b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1a:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8009b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b1e:	f04f 0200 	mov.w	r2, #0
 8009b22:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009b24:	4b1c      	ldr	r3, [pc, #112]	; (8009b98 <cal_table_dis+0x624>)
 8009b26:	2204      	movs	r2, #4
 8009b28:	701a      	strb	r2, [r3, #0]
		break;
 8009b2a:	e02e      	b.n	8009b8a <cal_table_dis+0x616>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8009b2c:	4b1b      	ldr	r3, [pc, #108]	; (8009b9c <cal_table_dis+0x628>)
 8009b2e:	2201      	movs	r2, #1
 8009b30:	701a      	strb	r2, [r3, #0]
		break;
 8009b32:	e02a      	b.n	8009b8a <cal_table_dis+0x616>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8009b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b36:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	d900      	bls.n	8009b4a <cal_table_dis+0x5d6>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009b48:	e01f      	b.n	8009b8a <cal_table_dis+0x616>
			target->acceleration = 0;
 8009b4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b4c:	f04f 0200 	mov.w	r2, #0
 8009b50:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009b52:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <cal_table_dis+0x624>)
 8009b54:	2204      	movs	r2, #4
 8009b56:	701a      	strb	r2, [r3, #0]
		break;
 8009b58:	e017      	b.n	8009b8a <cal_table_dis+0x616>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8009b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b5c:	ed93 7a02 	vldr	s14, [r3, #8]
 8009b60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009b64:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b6c:	d900      	bls.n	8009b70 <cal_table_dis+0x5fc>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8009b6e:	e00c      	b.n	8009b8a <cal_table_dis+0x616>
			target->acceleration = 0;
 8009b70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009b72:	f04f 0200 	mov.w	r2, #0
 8009b76:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <cal_table_dis+0x624>)
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	701a      	strb	r2, [r3, #0]
		break;
 8009b7e:	e004      	b.n	8009b8a <cal_table_dis+0x616>
		break;
 8009b80:	bf00      	nop
 8009b82:	e002      	b.n	8009b8a <cal_table_dis+0x616>
		break;
 8009b84:	bf00      	nop
 8009b86:	e000      	b.n	8009b8a <cal_table_dis+0x616>
		break;
 8009b88:	bf00      	nop
	}

}

}
 8009b8a:	bf00      	nop
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8009b94:	b004      	add	sp, #16
 8009b96:	4770      	bx	lr
 8009b98:	20000810 	.word	0x20000810
 8009b9c:	20000811 	.word	0x20000811

08009ba0 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8009ba0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009ba4:	b088      	sub	sp, #32
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	eef0 6a40 	vmov.f32	s13, s0
 8009bac:	eeb0 7a60 	vmov.f32	s14, s1
 8009bb0:	eef0 7a41 	vmov.f32	s15, s2
 8009bb4:	6038      	str	r0, [r7, #0]
 8009bb6:	edc7 6a01 	vstr	s13, [r7, #4]
 8009bba:	ed87 7a02 	vstr	s14, [r7, #8]
 8009bbe:	edc7 7a03 	vstr	s15, [r7, #12]

float mollifier_T;
float old_velocity;
float time_delay=12;
 8009bc2:	4bbf      	ldr	r3, [pc, #764]	; (8009ec0 <cal_mollifier_table+0x320>)
 8009bc4:	61fb      	str	r3, [r7, #28]
float time_delay2=-10;
 8009bc6:	4bbf      	ldr	r3, [pc, #764]	; (8009ec4 <cal_mollifier_table+0x324>)
 8009bc8:	61bb      	str	r3, [r7, #24]
	mollifier_timer+=INTERRUPT_TIME;
 8009bca:	4bbf      	ldr	r3, [pc, #764]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f6 fce2 	bl	8000598 <__aeabi_f2d>
 8009bd4:	a3b2      	add	r3, pc, #712	; (adr r3, 8009ea0 <cal_mollifier_table+0x300>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fb7f 	bl	80002dc <__adddf3>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	f7f7 f807 	bl	8000bf8 <__aeabi_d2f>
 8009bea:	4603      	mov	r3, r0
 8009bec:	4ab6      	ldr	r2, [pc, #728]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009bee:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8009bf0:	edd7 7a01 	vldr	s15, [r7, #4]
 8009bf4:	eef0 7ae7 	vabs.f32	s15, s15
 8009bf8:	ee17 0a90 	vmov	r0, s15
 8009bfc:	f7f6 fccc 	bl	8000598 <__aeabi_f2d>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	f7f6 fb6a 	bl	80002dc <__adddf3>
 8009c08:	4602      	mov	r2, r0
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4619      	mov	r1, r3
 8009c10:	a3a5      	add	r3, pc, #660	; (adr r3, 8009ea8 <cal_mollifier_table+0x308>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 fe41 	bl	800089c <__aeabi_ddiv>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4610      	mov	r0, r2
 8009c20:	4619      	mov	r1, r3
 8009c22:	a3a3      	add	r3, pc, #652	; (adr r3, 8009eb0 <cal_mollifier_table+0x310>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	f7f6 fd0e 	bl	8000648 <__aeabi_dmul>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	460b      	mov	r3, r1
 8009c30:	4614      	mov	r4, r2
 8009c32:	461d      	mov	r5, r3
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	4618      	mov	r0, r3
 8009c38:	f7f6 fcae 	bl	8000598 <__aeabi_f2d>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4620      	mov	r0, r4
 8009c42:	4629      	mov	r1, r5
 8009c44:	f7f6 fe2a 	bl	800089c <__aeabi_ddiv>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	4610      	mov	r0, r2
 8009c4e:	4619      	mov	r1, r3
 8009c50:	f7f6 ffd2 	bl	8000bf8 <__aeabi_d2f>
 8009c54:	4603      	mov	r3, r0
 8009c56:	617b      	str	r3, [r7, #20]
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8009c58:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c5c:	eef1 7a67 	vneg.f32	s15, s15
 8009c60:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009c64:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c68:	4b97      	ldr	r3, [pc, #604]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009c6a:	edd3 7a00 	vldr	s15, [r3]
 8009c6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	f140 81a2 	bpl.w	8009fbe <cal_mollifier_table+0x41e>
 8009c7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8009c7e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009c82:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009c86:	4b90      	ldr	r3, [pc, #576]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009c88:	edd3 7a00 	vldr	s15, [r3]
 8009c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c94:	f340 8193 	ble.w	8009fbe <cal_mollifier_table+0x41e>
			old_velocity=target->velocity;
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	613b      	str	r3, [r7, #16]
			target->velocity = cal_mollifier_velocity(mollifier_timer,mollifier_T,input.displacement);
 8009c9e:	4b8a      	ldr	r3, [pc, #552]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009ca0:	edd3 7a00 	vldr	s15, [r3]
 8009ca4:	ed97 7a01 	vldr	s14, [r7, #4]
 8009ca8:	eeb0 1a47 	vmov.f32	s2, s14
 8009cac:	edd7 0a05 	vldr	s1, [r7, #20]
 8009cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8009cb4:	f000 f9ac 	bl	800a010 <cal_mollifier_velocity>
 8009cb8:	eef0 7a40 	vmov.f32	s15, s0
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	edc3 7a00 	vstr	s15, [r3]

			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009cc2:	4b81      	ldr	r3, [pc, #516]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7f6 fc66 	bl	8000598 <__aeabi_f2d>
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	edd7 7a05 	vldr	s15, [r7, #20]
 8009cd4:	eef1 7a67 	vneg.f32	s15, s15
 8009cd8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009cdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ce0:	ee16 0a90 	vmov	r0, s13
 8009ce4:	f7f6 fc58 	bl	8000598 <__aeabi_f2d>
 8009ce8:	a373      	add	r3, pc, #460	; (adr r3, 8009eb8 <cal_mollifier_table+0x318>)
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	f7f6 fdd5 	bl	800089c <__aeabi_ddiv>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	4690      	mov	r8, r2
 8009cf8:	4699      	mov	r9, r3
 8009cfa:	69f8      	ldr	r0, [r7, #28]
 8009cfc:	f7f6 fc4c 	bl	8000598 <__aeabi_f2d>
 8009d00:	a367      	add	r3, pc, #412	; (adr r3, 8009ea0 <cal_mollifier_table+0x300>)
 8009d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d06:	f7f6 fc9f 	bl	8000648 <__aeabi_dmul>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	4640      	mov	r0, r8
 8009d10:	4649      	mov	r1, r9
 8009d12:	f7f6 fae3 	bl	80002dc <__adddf3>
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	4629      	mov	r1, r5
 8009d1e:	f7f6 ff05 	bl	8000b2c <__aeabi_dcmplt>
 8009d22:	4603      	mov	r3, r0
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d027      	beq.n	8009d78 <cal_mollifier_table+0x1d8>
				target->acceleration = cal_mollifier_acceleration(-mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009d28:	edd7 7a05 	vldr	s15, [r7, #20]
 8009d2c:	eef1 7a67 	vneg.f32	s15, s15
 8009d30:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009d34:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009d38:	ee16 0a90 	vmov	r0, s13
 8009d3c:	f7f6 fc2c 	bl	8000598 <__aeabi_f2d>
 8009d40:	a35d      	add	r3, pc, #372	; (adr r3, 8009eb8 <cal_mollifier_table+0x318>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fda9 	bl	800089c <__aeabi_ddiv>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	460b      	mov	r3, r1
 8009d4e:	4610      	mov	r0, r2
 8009d50:	4619      	mov	r1, r3
 8009d52:	f7f6 ff51 	bl	8000bf8 <__aeabi_d2f>
 8009d56:	4603      	mov	r3, r0
 8009d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8009d5c:	eeb0 1a67 	vmov.f32	s2, s15
 8009d60:	edd7 0a05 	vldr	s1, [r7, #20]
 8009d64:	ee00 3a10 	vmov	s0, r3
 8009d68:	f000 f9b2 	bl	800a0d0 <cal_mollifier_acceleration>
 8009d6c:	eef0 7a40 	vmov.f32	s15, s0
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009d76:	e137      	b.n	8009fe8 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<0){
 8009d78:	4b53      	ldr	r3, [pc, #332]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009d7a:	edd3 7a00 	vldr	s15, [r3]
 8009d7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d86:	d52b      	bpl.n	8009de0 <cal_mollifier_table+0x240>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009d88:	4b4f      	ldr	r3, [pc, #316]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fc03 	bl	8000598 <__aeabi_f2d>
 8009d92:	4604      	mov	r4, r0
 8009d94:	460d      	mov	r5, r1
 8009d96:	69f8      	ldr	r0, [r7, #28]
 8009d98:	f7f6 fbfe 	bl	8000598 <__aeabi_f2d>
 8009d9c:	a340      	add	r3, pc, #256	; (adr r3, 8009ea0 <cal_mollifier_table+0x300>)
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	f7f6 fc51 	bl	8000648 <__aeabi_dmul>
 8009da6:	4602      	mov	r2, r0
 8009da8:	460b      	mov	r3, r1
 8009daa:	4620      	mov	r0, r4
 8009dac:	4629      	mov	r1, r5
 8009dae:	f7f6 fa93 	bl	80002d8 <__aeabi_dsub>
 8009db2:	4602      	mov	r2, r0
 8009db4:	460b      	mov	r3, r1
 8009db6:	4610      	mov	r0, r2
 8009db8:	4619      	mov	r1, r3
 8009dba:	f7f6 ff1d 	bl	8000bf8 <__aeabi_d2f>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8009dc4:	eeb0 1a67 	vmov.f32	s2, s15
 8009dc8:	edd7 0a05 	vldr	s1, [r7, #20]
 8009dcc:	ee00 3a10 	vmov	s0, r3
 8009dd0:	f000 f97e 	bl	800a0d0 <cal_mollifier_acceleration>
 8009dd4:	eef0 7a40 	vmov.f32	s15, s0
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009dde:	e103      	b.n	8009fe8 <cal_mollifier_table+0x448>
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009de0:	4b39      	ldr	r3, [pc, #228]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7f6 fbd7 	bl	8000598 <__aeabi_f2d>
 8009dea:	4604      	mov	r4, r0
 8009dec:	460d      	mov	r5, r1
 8009dee:	edd7 7a05 	vldr	s15, [r7, #20]
 8009df2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009df6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009dfa:	ee16 0a90 	vmov	r0, s13
 8009dfe:	f7f6 fbcb 	bl	8000598 <__aeabi_f2d>
 8009e02:	a32d      	add	r3, pc, #180	; (adr r3, 8009eb8 <cal_mollifier_table+0x318>)
 8009e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e08:	f7f6 fd48 	bl	800089c <__aeabi_ddiv>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	460b      	mov	r3, r1
 8009e10:	4690      	mov	r8, r2
 8009e12:	4699      	mov	r9, r3
 8009e14:	69b8      	ldr	r0, [r7, #24]
 8009e16:	f7f6 fbbf 	bl	8000598 <__aeabi_f2d>
 8009e1a:	a321      	add	r3, pc, #132	; (adr r3, 8009ea0 <cal_mollifier_table+0x300>)
 8009e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e20:	f7f6 fc12 	bl	8000648 <__aeabi_dmul>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	4640      	mov	r0, r8
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	f7f6 fa56 	bl	80002dc <__adddf3>
 8009e30:	4602      	mov	r2, r0
 8009e32:	460b      	mov	r3, r1
 8009e34:	4620      	mov	r0, r4
 8009e36:	4629      	mov	r1, r5
 8009e38:	f7f6 fe78 	bl	8000b2c <__aeabi_dcmplt>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d044      	beq.n	8009ecc <cal_mollifier_table+0x32c>
				target->acceleration = cal_mollifier_acceleration(mollifier_timer-INTERRUPT_TIME*time_delay,mollifier_T,input.displacement);
 8009e42:	4b21      	ldr	r3, [pc, #132]	; (8009ec8 <cal_mollifier_table+0x328>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4618      	mov	r0, r3
 8009e48:	f7f6 fba6 	bl	8000598 <__aeabi_f2d>
 8009e4c:	4604      	mov	r4, r0
 8009e4e:	460d      	mov	r5, r1
 8009e50:	69f8      	ldr	r0, [r7, #28]
 8009e52:	f7f6 fba1 	bl	8000598 <__aeabi_f2d>
 8009e56:	a312      	add	r3, pc, #72	; (adr r3, 8009ea0 <cal_mollifier_table+0x300>)
 8009e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5c:	f7f6 fbf4 	bl	8000648 <__aeabi_dmul>
 8009e60:	4602      	mov	r2, r0
 8009e62:	460b      	mov	r3, r1
 8009e64:	4620      	mov	r0, r4
 8009e66:	4629      	mov	r1, r5
 8009e68:	f7f6 fa36 	bl	80002d8 <__aeabi_dsub>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	460b      	mov	r3, r1
 8009e70:	4610      	mov	r0, r2
 8009e72:	4619      	mov	r1, r3
 8009e74:	f7f6 fec0 	bl	8000bf8 <__aeabi_d2f>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009e7e:	eeb0 1a67 	vmov.f32	s2, s15
 8009e82:	edd7 0a05 	vldr	s1, [r7, #20]
 8009e86:	ee00 3a10 	vmov	s0, r3
 8009e8a:	f000 f921 	bl	800a0d0 <cal_mollifier_acceleration>
 8009e8e:	eef0 7a40 	vmov.f32	s15, s0
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009e98:	e0a6      	b.n	8009fe8 <cal_mollifier_table+0x448>
 8009e9a:	bf00      	nop
 8009e9c:	f3af 8000 	nop.w
 8009ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8009ea4:	3f50624d 	.word	0x3f50624d
 8009ea8:	f9db22d1 	.word	0xf9db22d1
 8009eac:	3fdc6a7e 	.word	0x3fdc6a7e
 8009eb0:	362cef38 	.word	0x362cef38
 8009eb4:	3fd78b56 	.word	0x3fd78b56
 8009eb8:	04189375 	.word	0x04189375
 8009ebc:	3ff50e56 	.word	0x3ff50e56
 8009ec0:	41400000 	.word	0x41400000
 8009ec4:	c1200000 	.word	0xc1200000
 8009ec8:	2000080c 	.word	0x2000080c
			}else if(mollifier_timer<mollifier_T/2+time_delay2*INTERRUPT_TIME){
 8009ecc:	4b4e      	ldr	r3, [pc, #312]	; (800a008 <cal_mollifier_table+0x468>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f6 fb61 	bl	8000598 <__aeabi_f2d>
 8009ed6:	4604      	mov	r4, r0
 8009ed8:	460d      	mov	r5, r1
 8009eda:	edd7 7a05 	vldr	s15, [r7, #20]
 8009ede:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009ee2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009ee6:	ee16 0a90 	vmov	r0, s13
 8009eea:	f7f6 fb55 	bl	8000598 <__aeabi_f2d>
 8009eee:	4680      	mov	r8, r0
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	69b8      	ldr	r0, [r7, #24]
 8009ef4:	f7f6 fb50 	bl	8000598 <__aeabi_f2d>
 8009ef8:	a33f      	add	r3, pc, #252	; (adr r3, 8009ff8 <cal_mollifier_table+0x458>)
 8009efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efe:	f7f6 fba3 	bl	8000648 <__aeabi_dmul>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4640      	mov	r0, r8
 8009f08:	4649      	mov	r1, r9
 8009f0a:	f7f6 f9e7 	bl	80002dc <__adddf3>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4620      	mov	r0, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	f7f6 fe09 	bl	8000b2c <__aeabi_dcmplt>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d028      	beq.n	8009f72 <cal_mollifier_table+0x3d2>
				time_delay=0;
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	61fb      	str	r3, [r7, #28]
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2/1.316,mollifier_T,input.displacement);
 8009f26:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f2a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f32:	ee16 0a90 	vmov	r0, s13
 8009f36:	f7f6 fb2f 	bl	8000598 <__aeabi_f2d>
 8009f3a:	a331      	add	r3, pc, #196	; (adr r3, 800a000 <cal_mollifier_table+0x460>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 fcac 	bl	800089c <__aeabi_ddiv>
 8009f44:	4602      	mov	r2, r0
 8009f46:	460b      	mov	r3, r1
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	f7f6 fe54 	bl	8000bf8 <__aeabi_d2f>
 8009f50:	4603      	mov	r3, r0
 8009f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8009f56:	eeb0 1a67 	vmov.f32	s2, s15
 8009f5a:	edd7 0a05 	vldr	s1, [r7, #20]
 8009f5e:	ee00 3a10 	vmov	s0, r3
 8009f62:	f000 f8b5 	bl	800a0d0 <cal_mollifier_acceleration>
 8009f66:	eef0 7a40 	vmov.f32	s15, s0
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009f70:	e03a      	b.n	8009fe8 <cal_mollifier_table+0x448>
			}else{
				target->acceleration = cal_mollifier_acceleration(mollifier_T/2-INTERRUPT_TIME,mollifier_T,input.displacement);
 8009f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8009f76:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8009f7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009f7e:	ee16 0a90 	vmov	r0, s13
 8009f82:	f7f6 fb09 	bl	8000598 <__aeabi_f2d>
 8009f86:	a31c      	add	r3, pc, #112	; (adr r3, 8009ff8 <cal_mollifier_table+0x458>)
 8009f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8c:	f7f6 f9a4 	bl	80002d8 <__aeabi_dsub>
 8009f90:	4602      	mov	r2, r0
 8009f92:	460b      	mov	r3, r1
 8009f94:	4610      	mov	r0, r2
 8009f96:	4619      	mov	r1, r3
 8009f98:	f7f6 fe2e 	bl	8000bf8 <__aeabi_d2f>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8009fa2:	eeb0 1a67 	vmov.f32	s2, s15
 8009fa6:	edd7 0a05 	vldr	s1, [r7, #20]
 8009faa:	ee00 3a10 	vmov	s0, r3
 8009fae:	f000 f88f 	bl	800a0d0 <cal_mollifier_acceleration>
 8009fb2:	eef0 7a40 	vmov.f32	s15, s0
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	edc3 7a01 	vstr	s15, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009fbc:	e014      	b.n	8009fe8 <cal_mollifier_table+0x448>
//			}
//			if(mollifier_timer>mollifier_T/2*0.9){
//							target->acceleration = -0.6*target->acceleration;
//			}
		}else{
			old_velocity=target->velocity;
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	613b      	str	r3, [r7, #16]
			target->velocity=0;
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	601a      	str	r2, [r3, #0]
			target->acceleration = -target->velocity+old_velocity;
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	edd3 7a00 	vldr	s15, [r3]
 8009fd2:	ed97 7a04 	vldr	s14, [r7, #16]
 8009fd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8009fe0:	4b0a      	ldr	r3, [pc, #40]	; (800a00c <cal_mollifier_table+0x46c>)
 8009fe2:	2204      	movs	r2, #4
 8009fe4:	701a      	strb	r2, [r3, #0]

		}

}
 8009fe6:	bf00      	nop
 8009fe8:	bf00      	nop
 8009fea:	3720      	adds	r7, #32
 8009fec:	46bd      	mov	sp, r7
 8009fee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009ff2:	bf00      	nop
 8009ff4:	f3af 8000 	nop.w
 8009ff8:	d2f1a9fc 	.word	0xd2f1a9fc
 8009ffc:	3f50624d 	.word	0x3f50624d
 800a000:	04189375 	.word	0x04189375
 800a004:	3ff50e56 	.word	0x3ff50e56
 800a008:	2000080c 	.word	0x2000080c
 800a00c:	20000810 	.word	0x20000810

0800a010 <cal_mollifier_velocity>:


float cal_mollifier_velocity(float t_now,float mollifier_T,float integral){
 800a010:	b5b0      	push	{r4, r5, r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	ed87 0a03 	vstr	s0, [r7, #12]
 800a01a:	edc7 0a02 	vstr	s1, [r7, #8]
 800a01e:	ed87 1a01 	vstr	s2, [r7, #4]
	float velocity;
	velocity=(2/mollifier_T)*integral/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a022:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a026:	edd7 7a02 	vldr	s15, [r7, #8]
 800a02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a02e:	edd7 7a01 	vldr	s15, [r7, #4]
 800a032:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a036:	ee17 0a90 	vmov	r0, s15
 800a03a:	f7f6 faad 	bl	8000598 <__aeabi_f2d>
 800a03e:	a322      	add	r3, pc, #136	; (adr r3, 800a0c8 <cal_mollifier_velocity+0xb8>)
 800a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a044:	f7f6 fc2a 	bl	800089c <__aeabi_ddiv>
 800a048:	4602      	mov	r2, r0
 800a04a:	460b      	mov	r3, r1
 800a04c:	4614      	mov	r4, r2
 800a04e:	461d      	mov	r5, r3
 800a050:	edd7 7a02 	vldr	s15, [r7, #8]
 800a054:	eeb1 7a67 	vneg.f32	s14, s15
 800a058:	edd7 7a02 	vldr	s15, [r7, #8]
 800a05c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a060:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a064:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a068:	edd7 7a02 	vldr	s15, [r7, #8]
 800a06c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a070:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a074:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a078:	edd7 7a03 	vldr	s15, [r7, #12]
 800a07c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a080:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a084:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a088:	ee16 0a90 	vmov	r0, s13
 800a08c:	f7f6 fa84 	bl	8000598 <__aeabi_f2d>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	ec43 2b10 	vmov	d0, r2, r3
 800a098:	f019 fcf6 	bl	8023a88 <exp>
 800a09c:	ec53 2b10 	vmov	r2, r3, d0
 800a0a0:	4620      	mov	r0, r4
 800a0a2:	4629      	mov	r1, r5
 800a0a4:	f7f6 fad0 	bl	8000648 <__aeabi_dmul>
 800a0a8:	4602      	mov	r2, r0
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	4610      	mov	r0, r2
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	f7f6 fda2 	bl	8000bf8 <__aeabi_d2f>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	617b      	str	r3, [r7, #20]
	return velocity;
 800a0b8:	697b      	ldr	r3, [r7, #20]
 800a0ba:	ee07 3a90 	vmov	s15, r3
}
 800a0be:	eeb0 0a67 	vmov.f32	s0, s15
 800a0c2:	3718      	adds	r7, #24
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bdb0      	pop	{r4, r5, r7, pc}
 800a0c8:	f9db22d1 	.word	0xf9db22d1
 800a0cc:	3fdc6a7e 	.word	0x3fdc6a7e

0800a0d0 <cal_mollifier_acceleration>:
float cal_mollifier_acceleration(float t_now,float mollifier_T,float integral){
 800a0d0:	b5b0      	push	{r4, r5, r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	ed87 0a03 	vstr	s0, [r7, #12]
 800a0da:	edc7 0a02 	vstr	s1, [r7, #8]
 800a0de:	ed87 1a01 	vstr	s2, [r7, #4]
	float acceleration;
	acceleration= integral/MOLLIFIER_INTEGRAL*(-mollifier_T*t_now/(mollifier_T*mollifier_T/4-t_now*t_now)/(mollifier_T*mollifier_T/4-t_now*t_now))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-t_now*t_now));
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f7f6 fa58 	bl	8000598 <__aeabi_f2d>
 800a0e8:	a33d      	add	r3, pc, #244	; (adr r3, 800a1e0 <cal_mollifier_acceleration+0x110>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	f7f6 fbd5 	bl	800089c <__aeabi_ddiv>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4614      	mov	r4, r2
 800a0f8:	461d      	mov	r5, r3
 800a0fa:	edd7 7a02 	vldr	s15, [r7, #8]
 800a0fe:	eeb1 7a67 	vneg.f32	s14, s15
 800a102:	edd7 7a03 	vldr	s15, [r7, #12]
 800a106:	ee67 6a27 	vmul.f32	s13, s14, s15
 800a10a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a10e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a112:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a116:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800a11a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a11e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a122:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a126:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a12a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a12e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a132:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a136:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a13a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a13e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a142:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a146:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a14a:	ee16 0a90 	vmov	r0, s13
 800a14e:	f7f6 fa23 	bl	8000598 <__aeabi_f2d>
 800a152:	4602      	mov	r2, r0
 800a154:	460b      	mov	r3, r1
 800a156:	4620      	mov	r0, r4
 800a158:	4629      	mov	r1, r5
 800a15a:	f7f6 fa75 	bl	8000648 <__aeabi_dmul>
 800a15e:	4602      	mov	r2, r0
 800a160:	460b      	mov	r3, r1
 800a162:	4614      	mov	r4, r2
 800a164:	461d      	mov	r5, r3
 800a166:	edd7 7a02 	vldr	s15, [r7, #8]
 800a16a:	eeb1 7a67 	vneg.f32	s14, s15
 800a16e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a172:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a176:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800a17a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a17e:	edd7 7a02 	vldr	s15, [r7, #8]
 800a182:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a186:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 800a18a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800a18e:	edd7 7a03 	vldr	s15, [r7, #12]
 800a192:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a196:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a19a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a19e:	ee16 0a90 	vmov	r0, s13
 800a1a2:	f7f6 f9f9 	bl	8000598 <__aeabi_f2d>
 800a1a6:	4602      	mov	r2, r0
 800a1a8:	460b      	mov	r3, r1
 800a1aa:	ec43 2b10 	vmov	d0, r2, r3
 800a1ae:	f019 fc6b 	bl	8023a88 <exp>
 800a1b2:	ec53 2b10 	vmov	r2, r3, d0
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	f7f6 fa45 	bl	8000648 <__aeabi_dmul>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	f7f6 fd17 	bl	8000bf8 <__aeabi_d2f>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	617b      	str	r3, [r7, #20]
	return acceleration;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	ee07 3a90 	vmov	s15, r3
}
 800a1d4:	eeb0 0a67 	vmov.f32	s0, s15
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bdb0      	pop	{r4, r5, r7, pc}
 800a1de:	bf00      	nop
 800a1e0:	f9db22d1 	.word	0xf9db22d1
 800a1e4:	3fdc6a7e 	.word	0x3fdc6a7e

0800a1e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a1ee:	4b12      	ldr	r3, [pc, #72]	; (800a238 <MX_DMA_Init+0x50>)
 800a1f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1f2:	4a11      	ldr	r2, [pc, #68]	; (800a238 <MX_DMA_Init+0x50>)
 800a1f4:	f043 0304 	orr.w	r3, r3, #4
 800a1f8:	6493      	str	r3, [r2, #72]	; 0x48
 800a1fa:	4b0f      	ldr	r3, [pc, #60]	; (800a238 <MX_DMA_Init+0x50>)
 800a1fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1fe:	f003 0304 	and.w	r3, r3, #4
 800a202:	607b      	str	r3, [r7, #4]
 800a204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a206:	4b0c      	ldr	r3, [pc, #48]	; (800a238 <MX_DMA_Init+0x50>)
 800a208:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a20a:	4a0b      	ldr	r2, [pc, #44]	; (800a238 <MX_DMA_Init+0x50>)
 800a20c:	f043 0301 	orr.w	r3, r3, #1
 800a210:	6493      	str	r3, [r2, #72]	; 0x48
 800a212:	4b09      	ldr	r3, [pc, #36]	; (800a238 <MX_DMA_Init+0x50>)
 800a214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	603b      	str	r3, [r7, #0]
 800a21c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a21e:	2200      	movs	r2, #0
 800a220:	2100      	movs	r1, #0
 800a222:	200b      	movs	r0, #11
 800a224:	f011 fcf5 	bl	801bc12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a228:	200b      	movs	r0, #11
 800a22a:	f011 fd0c 	bl	801bc46 <HAL_NVIC_EnableIRQ>

}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	40021000 	.word	0x40021000

0800a23c <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 800a23c:	b480      	push	{r7}
 800a23e:	af00      	add	r7, sp, #0
	error_mode=0;
 800a240:	4b11      	ldr	r3, [pc, #68]	; (800a288 <init_FailSafe+0x4c>)
 800a242:	2200      	movs	r2, #0
 800a244:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 800a246:	4b11      	ldr	r3, [pc, #68]	; (800a28c <init_FailSafe+0x50>)
 800a248:	2200      	movs	r2, #0
 800a24a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800a24c:	4b10      	ldr	r3, [pc, #64]	; (800a290 <init_FailSafe+0x54>)
 800a24e:	2200      	movs	r2, #0
 800a250:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 800a252:	4b10      	ldr	r3, [pc, #64]	; (800a294 <init_FailSafe+0x58>)
 800a254:	2200      	movs	r2, #0
 800a256:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 800a258:	4b0f      	ldr	r3, [pc, #60]	; (800a298 <init_FailSafe+0x5c>)
 800a25a:	4a10      	ldr	r2, [pc, #64]	; (800a29c <init_FailSafe+0x60>)
 800a25c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800a25e:	4b10      	ldr	r3, [pc, #64]	; (800a2a0 <init_FailSafe+0x64>)
 800a260:	4a10      	ldr	r2, [pc, #64]	; (800a2a4 <init_FailSafe+0x68>)
 800a262:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 800a264:	4b10      	ldr	r3, [pc, #64]	; (800a2a8 <init_FailSafe+0x6c>)
 800a266:	4a0d      	ldr	r2, [pc, #52]	; (800a29c <init_FailSafe+0x60>)
 800a268:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800a26a:	4b10      	ldr	r3, [pc, #64]	; (800a2ac <init_FailSafe+0x70>)
 800a26c:	4a10      	ldr	r2, [pc, #64]	; (800a2b0 <init_FailSafe+0x74>)
 800a26e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 800a270:	4b10      	ldr	r3, [pc, #64]	; (800a2b4 <init_FailSafe+0x78>)
 800a272:	4a11      	ldr	r2, [pc, #68]	; (800a2b8 <init_FailSafe+0x7c>)
 800a274:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 800a276:	4b11      	ldr	r3, [pc, #68]	; (800a2bc <init_FailSafe+0x80>)
 800a278:	4a0f      	ldr	r2, [pc, #60]	; (800a2b8 <init_FailSafe+0x7c>)
 800a27a:	601a      	str	r2, [r3, #0]
}
 800a27c:	bf00      	nop
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20000813 	.word	0x20000813
 800a28c:	20000812 	.word	0x20000812
 800a290:	20000814 	.word	0x20000814
 800a294:	20000830 	.word	0x20000830
 800a298:	20000818 	.word	0x20000818
 800a29c:	44bb8000 	.word	0x44bb8000
 800a2a0:	2000081c 	.word	0x2000081c
 800a2a4:	44480000 	.word	0x44480000
 800a2a8:	20000820 	.word	0x20000820
 800a2ac:	20000824 	.word	0x20000824
 800a2b0:	455ac000 	.word	0x455ac000
 800a2b4:	20000828 	.word	0x20000828
 800a2b8:	44ed8000 	.word	0x44ed8000
 800a2bc:	2000082c 	.word	0x2000082c

0800a2c0 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b084      	sub	sp, #16
 800a2c4:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 800a2c6:	4b6e      	ldr	r3, [pc, #440]	; (800a480 <interrupt_FailSafe+0x1c0>)
 800a2c8:	781b      	ldrb	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800a2ce:	4b6d      	ldr	r3, [pc, #436]	; (800a484 <interrupt_FailSafe+0x1c4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 800a2d4:	4b6c      	ldr	r3, [pc, #432]	; (800a488 <interrupt_FailSafe+0x1c8>)
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800a2da:	4b6c      	ldr	r3, [pc, #432]	; (800a48c <interrupt_FailSafe+0x1cc>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	607b      	str	r3, [r7, #4]
 800a2e0:	e008      	b.n	800a2f4 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 800a2e2:	4b6b      	ldr	r3, [pc, #428]	; (800a490 <interrupt_FailSafe+0x1d0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 800a2e8:	4b6a      	ldr	r3, [pc, #424]	; (800a494 <interrupt_FailSafe+0x1d4>)
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 800a2ee:	4b6a      	ldr	r3, [pc, #424]	; (800a498 <interrupt_FailSafe+0x1d8>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 800a2f4:	4b69      	ldr	r3, [pc, #420]	; (800a49c <interrupt_FailSafe+0x1dc>)
 800a2f6:	781b      	ldrb	r3, [r3, #0]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d062      	beq.n	800a3c2 <interrupt_FailSafe+0x102>
 800a2fc:	4b67      	ldr	r3, [pc, #412]	; (800a49c <interrupt_FailSafe+0x1dc>)
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	2b03      	cmp	r3, #3
 800a302:	d05e      	beq.n	800a3c2 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 800a304:	4b66      	ldr	r3, [pc, #408]	; (800a4a0 <interrupt_FailSafe+0x1e0>)
 800a306:	781b      	ldrb	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d15a      	bne.n	800a3c2 <interrupt_FailSafe+0x102>
 800a30c:	4b65      	ldr	r3, [pc, #404]	; (800a4a4 <interrupt_FailSafe+0x1e4>)
 800a30e:	781b      	ldrb	r3, [r3, #0]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d156      	bne.n	800a3c2 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 800a314:	4b64      	ldr	r3, [pc, #400]	; (800a4a8 <interrupt_FailSafe+0x1e8>)
 800a316:	ed93 7a00 	vldr	s14, [r3]
 800a31a:	4b64      	ldr	r3, [pc, #400]	; (800a4ac <interrupt_FailSafe+0x1ec>)
 800a31c:	edd3 7a00 	vldr	s15, [r3]
 800a320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a324:	eef0 7ae7 	vabs.f32	s15, s15
 800a328:	ed97 7a02 	vldr	s14, [r7, #8]
 800a32c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a334:	d809      	bhi.n	800a34a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a336:	f7fe f96f 	bl	8008618 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 800a33a:	2001      	movs	r0, #1
 800a33c:	f7fd fb98 	bl	8007a70 <pl_yellow_LED_count>
						error_mode = 1;
 800a340:	4b58      	ldr	r3, [pc, #352]	; (800a4a4 <interrupt_FailSafe+0x1e4>)
 800a342:	2201      	movs	r2, #1
 800a344:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a346:	f7fa ff53 	bl	80051f0 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800a34a:	4b59      	ldr	r3, [pc, #356]	; (800a4b0 <interrupt_FailSafe+0x1f0>)
 800a34c:	edd3 7a00 	vldr	s15, [r3]
 800a350:	ed97 7a01 	vldr	s14, [r7, #4]
 800a354:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a35c:	d809      	bhi.n	800a372 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a35e:	f7fe f95b 	bl	8008618 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 800a362:	2002      	movs	r0, #2
 800a364:	f7fd fb84 	bl	8007a70 <pl_yellow_LED_count>
						error_mode = 1;
 800a368:	4b4e      	ldr	r3, [pc, #312]	; (800a4a4 <interrupt_FailSafe+0x1e4>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a36e:	f7fa ff3f 	bl	80051f0 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 800a372:	4b50      	ldr	r3, [pc, #320]	; (800a4b4 <interrupt_FailSafe+0x1f4>)
 800a374:	ed93 7a00 	vldr	s14, [r3]
 800a378:	4b4f      	ldr	r3, [pc, #316]	; (800a4b8 <interrupt_FailSafe+0x1f8>)
 800a37a:	edd3 6a00 	vldr	s13, [r3]
 800a37e:	4b4f      	ldr	r3, [pc, #316]	; (800a4bc <interrupt_FailSafe+0x1fc>)
 800a380:	edd3 7a00 	vldr	s15, [r3]
 800a384:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800a388:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a38c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800a390:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a394:	eef0 7ae7 	vabs.f32	s15, s15
 800a398:	ed97 7a03 	vldr	s14, [r7, #12]
 800a39c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a3a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3a4:	d80d      	bhi.n	800a3c2 <interrupt_FailSafe+0x102>
 800a3a6:	4b3d      	ldr	r3, [pc, #244]	; (800a49c <interrupt_FailSafe+0x1dc>)
 800a3a8:	781b      	ldrb	r3, [r3, #0]
 800a3aa:	2b01      	cmp	r3, #1
 800a3ac:	d109      	bne.n	800a3c2 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800a3ae:	f7fe f933 	bl	8008618 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 800a3b2:	2004      	movs	r0, #4
 800a3b4:	f7fd fb5c 	bl	8007a70 <pl_yellow_LED_count>
						error_mode = 1;
 800a3b8:	4b3a      	ldr	r3, [pc, #232]	; (800a4a4 <interrupt_FailSafe+0x1e4>)
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800a3be:	f7fa ff17 	bl	80051f0 <clear_Ierror>

				}

	}

	if(error_mode==1){
 800a3c2:	4b38      	ldr	r3, [pc, #224]	; (800a4a4 <interrupt_FailSafe+0x1e4>)
 800a3c4:	781b      	ldrb	r3, [r3, #0]
 800a3c6:	2b01      	cmp	r3, #1
 800a3c8:	d153      	bne.n	800a472 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800a3ca:	4b3d      	ldr	r3, [pc, #244]	; (800a4c0 <interrupt_FailSafe+0x200>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 800a3d0:	4b3c      	ldr	r3, [pc, #240]	; (800a4c4 <interrupt_FailSafe+0x204>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3301      	adds	r3, #1
 800a3d6:	4a3b      	ldr	r2, [pc, #236]	; (800a4c4 <interrupt_FailSafe+0x204>)
 800a3d8:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800a3da:	4b3a      	ldr	r3, [pc, #232]	; (800a4c4 <interrupt_FailSafe+0x204>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3e2:	dc05      	bgt.n	800a3f0 <interrupt_FailSafe+0x130>
			init_WallControl();
 800a3e4:	f7fb f85e 	bl	80054a4 <init_WallControl>
			modeacc=100;//エラー用
 800a3e8:	4b2c      	ldr	r3, [pc, #176]	; (800a49c <interrupt_FailSafe+0x1dc>)
 800a3ea:	2264      	movs	r2, #100	; 0x64
 800a3ec:	701a      	strb	r2, [r3, #0]
 800a3ee:	e009      	b.n	800a404 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	f7fe f87d 	bl	80084f0 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 800a3f6:	f7fe f8e1 	bl	80085bc <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 800a3fa:	f7fe f90d 	bl	8008618 <pl_FunMotor_stop>
			modeacc=0;
 800a3fe:	4b27      	ldr	r3, [pc, #156]	; (800a49c <interrupt_FailSafe+0x1dc>)
 800a400:	2200      	movs	r2, #0
 800a402:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 800a404:	4b30      	ldr	r3, [pc, #192]	; (800a4c8 <interrupt_FailSafe+0x208>)
 800a406:	f04f 32ff 	mov.w	r2, #4294967295
 800a40a:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 800a40c:	4b2f      	ldr	r3, [pc, #188]	; (800a4cc <interrupt_FailSafe+0x20c>)
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295
 800a412:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 800a414:	4b2e      	ldr	r3, [pc, #184]	; (800a4d0 <interrupt_FailSafe+0x210>)
 800a416:	f04f 32ff 	mov.w	r2, #4294967295
 800a41a:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 800a41c:	4b2d      	ldr	r3, [pc, #180]	; (800a4d4 <interrupt_FailSafe+0x214>)
 800a41e:	f04f 32ff 	mov.w	r2, #4294967295
 800a422:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 800a424:	4b2c      	ldr	r3, [pc, #176]	; (800a4d8 <interrupt_FailSafe+0x218>)
 800a426:	f04f 32ff 	mov.w	r2, #4294967295
 800a42a:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 800a42c:	4b2b      	ldr	r3, [pc, #172]	; (800a4dc <interrupt_FailSafe+0x21c>)
 800a42e:	f04f 32ff 	mov.w	r2, #4294967295
 800a432:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 800a434:	4b2a      	ldr	r3, [pc, #168]	; (800a4e0 <interrupt_FailSafe+0x220>)
 800a436:	4a2b      	ldr	r2, [pc, #172]	; (800a4e4 <interrupt_FailSafe+0x224>)
 800a438:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 800a43a:	4b2b      	ldr	r3, [pc, #172]	; (800a4e8 <interrupt_FailSafe+0x228>)
 800a43c:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <interrupt_FailSafe+0x224>)
 800a43e:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 800a440:	4b2a      	ldr	r3, [pc, #168]	; (800a4ec <interrupt_FailSafe+0x22c>)
 800a442:	4a2b      	ldr	r2, [pc, #172]	; (800a4f0 <interrupt_FailSafe+0x230>)
 800a444:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 800a446:	4b2b      	ldr	r3, [pc, #172]	; (800a4f4 <interrupt_FailSafe+0x234>)
 800a448:	4a29      	ldr	r2, [pc, #164]	; (800a4f0 <interrupt_FailSafe+0x230>)
 800a44a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 800a44c:	4b2a      	ldr	r3, [pc, #168]	; (800a4f8 <interrupt_FailSafe+0x238>)
 800a44e:	4a2b      	ldr	r2, [pc, #172]	; (800a4fc <interrupt_FailSafe+0x23c>)
 800a450:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 800a452:	4b2b      	ldr	r3, [pc, #172]	; (800a500 <interrupt_FailSafe+0x240>)
 800a454:	4a29      	ldr	r2, [pc, #164]	; (800a4fc <interrupt_FailSafe+0x23c>)
 800a456:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 800a458:	4b2a      	ldr	r3, [pc, #168]	; (800a504 <interrupt_FailSafe+0x244>)
 800a45a:	4a28      	ldr	r2, [pc, #160]	; (800a4fc <interrupt_FailSafe+0x23c>)
 800a45c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 800a45e:	4b2a      	ldr	r3, [pc, #168]	; (800a508 <interrupt_FailSafe+0x248>)
 800a460:	4a26      	ldr	r2, [pc, #152]	; (800a4fc <interrupt_FailSafe+0x23c>)
 800a462:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 800a464:	4b29      	ldr	r3, [pc, #164]	; (800a50c <interrupt_FailSafe+0x24c>)
 800a466:	2204      	movs	r2, #4
 800a468:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 800a46a:	4b29      	ldr	r3, [pc, #164]	; (800a510 <interrupt_FailSafe+0x250>)
 800a46c:	2200      	movs	r2, #0
 800a46e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 800a470:	e002      	b.n	800a478 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 800a472:	4b14      	ldr	r3, [pc, #80]	; (800a4c4 <interrupt_FailSafe+0x204>)
 800a474:	2200      	movs	r2, #0
 800a476:	601a      	str	r2, [r3, #0]
}
 800a478:	bf00      	nop
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}
 800a480:	20000814 	.word	0x20000814
 800a484:	20000818 	.word	0x20000818
 800a488:	2000081c 	.word	0x2000081c
 800a48c:	20000820 	.word	0x20000820
 800a490:	20000824 	.word	0x20000824
 800a494:	20000828 	.word	0x20000828
 800a498:	2000082c 	.word	0x2000082c
 800a49c:	20000534 	.word	0x20000534
 800a4a0:	20000812 	.word	0x20000812
 800a4a4:	20000813 	.word	0x20000813
 800a4a8:	200004e8 	.word	0x200004e8
 800a4ac:	2000026c 	.word	0x2000026c
 800a4b0:	20000278 	.word	0x20000278
 800a4b4:	200004dc 	.word	0x200004dc
 800a4b8:	2000025c 	.word	0x2000025c
 800a4bc:	20000258 	.word	0x20000258
 800a4c0:	2000f284 	.word	0x2000f284
 800a4c4:	20000830 	.word	0x20000830
 800a4c8:	200005c4 	.word	0x200005c4
 800a4cc:	200005c0 	.word	0x200005c0
 800a4d0:	200005cc 	.word	0x200005cc
 800a4d4:	200005c8 	.word	0x200005c8
 800a4d8:	200005d4 	.word	0x200005d4
 800a4dc:	200005d0 	.word	0x200005d0
 800a4e0:	200005dc 	.word	0x200005dc
 800a4e4:	42480000 	.word	0x42480000
 800a4e8:	200005d8 	.word	0x200005d8
 800a4ec:	200005e4 	.word	0x200005e4
 800a4f0:	41a00000 	.word	0x41a00000
 800a4f4:	200005e0 	.word	0x200005e0
 800a4f8:	200005ec 	.word	0x200005ec
 800a4fc:	420c0000 	.word	0x420c0000
 800a500:	200005e8 	.word	0x200005e8
 800a504:	200005f4 	.word	0x200005f4
 800a508:	200005f0 	.word	0x200005f0
 800a50c:	20000810 	.word	0x20000810
 800a510:	2000059e 	.word	0x2000059e

0800a514 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b08a      	sub	sp, #40	; 0x28
 800a518:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a51a:	f107 0314 	add.w	r3, r7, #20
 800a51e:	2200      	movs	r2, #0
 800a520:	601a      	str	r2, [r3, #0]
 800a522:	605a      	str	r2, [r3, #4]
 800a524:	609a      	str	r2, [r3, #8]
 800a526:	60da      	str	r2, [r3, #12]
 800a528:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a52a:	4b3a      	ldr	r3, [pc, #232]	; (800a614 <MX_GPIO_Init+0x100>)
 800a52c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a52e:	4a39      	ldr	r2, [pc, #228]	; (800a614 <MX_GPIO_Init+0x100>)
 800a530:	f043 0304 	orr.w	r3, r3, #4
 800a534:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a536:	4b37      	ldr	r3, [pc, #220]	; (800a614 <MX_GPIO_Init+0x100>)
 800a538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a53a:	f003 0304 	and.w	r3, r3, #4
 800a53e:	613b      	str	r3, [r7, #16]
 800a540:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a542:	4b34      	ldr	r3, [pc, #208]	; (800a614 <MX_GPIO_Init+0x100>)
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	4a33      	ldr	r2, [pc, #204]	; (800a614 <MX_GPIO_Init+0x100>)
 800a548:	f043 0320 	orr.w	r3, r3, #32
 800a54c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a54e:	4b31      	ldr	r3, [pc, #196]	; (800a614 <MX_GPIO_Init+0x100>)
 800a550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a552:	f003 0320 	and.w	r3, r3, #32
 800a556:	60fb      	str	r3, [r7, #12]
 800a558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a55a:	4b2e      	ldr	r3, [pc, #184]	; (800a614 <MX_GPIO_Init+0x100>)
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	4a2d      	ldr	r2, [pc, #180]	; (800a614 <MX_GPIO_Init+0x100>)
 800a560:	f043 0301 	orr.w	r3, r3, #1
 800a564:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a566:	4b2b      	ldr	r3, [pc, #172]	; (800a614 <MX_GPIO_Init+0x100>)
 800a568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56a:	f003 0301 	and.w	r3, r3, #1
 800a56e:	60bb      	str	r3, [r7, #8]
 800a570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a572:	4b28      	ldr	r3, [pc, #160]	; (800a614 <MX_GPIO_Init+0x100>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	4a27      	ldr	r2, [pc, #156]	; (800a614 <MX_GPIO_Init+0x100>)
 800a578:	f043 0302 	orr.w	r3, r3, #2
 800a57c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a57e:	4b25      	ldr	r3, [pc, #148]	; (800a614 <MX_GPIO_Init+0x100>)
 800a580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a582:	f003 0302 	and.w	r3, r3, #2
 800a586:	607b      	str	r3, [r7, #4]
 800a588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a58a:	2200      	movs	r2, #0
 800a58c:	f24e 0150 	movw	r1, #57424	; 0xe050
 800a590:	4821      	ldr	r0, [pc, #132]	; (800a618 <MX_GPIO_Init+0x104>)
 800a592:	f012 fa29 	bl	801c9e8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 800a596:	2200      	movs	r2, #0
 800a598:	f648 1110 	movw	r1, #35088	; 0x8910
 800a59c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5a0:	f012 fa22 	bl	801c9e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a5a4:	2200      	movs	r2, #0
 800a5a6:	f64e 4196 	movw	r1, #60566	; 0xec96
 800a5aa:	481c      	ldr	r0, [pc, #112]	; (800a61c <MX_GPIO_Init+0x108>)
 800a5ac:	f012 fa1c 	bl	801c9e8 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800a5b0:	f24e 0350 	movw	r3, #57424	; 0xe050
 800a5b4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4813      	ldr	r0, [pc, #76]	; (800a618 <MX_GPIO_Init+0x104>)
 800a5ca:	f012 f88b 	bl	801c6e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 800a5ce:	f648 1310 	movw	r3, #35088	; 0x8910
 800a5d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5e0:	f107 0314 	add.w	r3, r7, #20
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5ea:	f012 f87b 	bl	801c6e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 800a5ee:	f64e 4396 	movw	r3, #60566	; 0xec96
 800a5f2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a600:	f107 0314 	add.w	r3, r7, #20
 800a604:	4619      	mov	r1, r3
 800a606:	4805      	ldr	r0, [pc, #20]	; (800a61c <MX_GPIO_Init+0x108>)
 800a608:	f012 f86c 	bl	801c6e4 <HAL_GPIO_Init>

}
 800a60c:	bf00      	nop
 800a60e:	3728      	adds	r7, #40	; 0x28
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	40021000 	.word	0x40021000
 800a618:	48000800 	.word	0x48000800
 800a61c:	48000400 	.word	0x48000400

0800a620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a620:	b590      	push	{r4, r7, lr}
 800a622:	b089      	sub	sp, #36	; 0x24
 800a624:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a626:	f00e ffab 	bl	8019580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a62a:	f000 f8ab 	bl	800a784 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 800a62e:	f7ff fddb 	bl	800a1e8 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a632:	f7ff ff6f 	bl	800a514 <MX_GPIO_Init>
  MX_ADC1_Init();
 800a636:	f7fe fac9 	bl	8008bcc <MX_ADC1_Init>
  MX_SPI1_Init();
 800a63a:	f00d faaf 	bl	8017b9c <MX_SPI1_Init>
  MX_TIM6_Init();
 800a63e:	f00d fd1b 	bl	8018078 <MX_TIM6_Init>
  MX_TIM8_Init();
 800a642:	f00d fd4f 	bl	80180e4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 800a646:	f00e fecd 	bl	80193e4 <MX_USART1_UART_Init>
  MX_DMA_Init();
 800a64a:	f7ff fdcd 	bl	800a1e8 <MX_DMA_Init>
  MX_SPI3_Init();
 800a64e:	f00d fae3 	bl	8017c18 <MX_SPI3_Init>
  MX_TIM16_Init();
 800a652:	f00d fde7 	bl	8018224 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 800a656:	f7fe f9cb 	bl	80089f0 <pl_timer_init>
  pl_gyro_init();
 800a65a:	f7fd fe5d 	bl	8008318 <pl_gyro_init>
  pl_sensor_init();
 800a65e:	f7fe f80b 	bl	8008678 <pl_sensor_init>
  reset_distance();
 800a662:	f7f6 fc9b 	bl	8000f9c <reset_distance>
  reset_gyro();
 800a666:	f7f7 faa7 	bl	8001bb8 <reset_gyro>
  reset_speed();
 800a66a:	f7f6 fcdb 	bl	8001024 <reset_speed>
  record_reset();
 800a66e:	f00c ffe7 	bl	8017640 <record_reset>
  pl_motor_init();
 800a672:	f7fd ff17 	bl	80084a4 <pl_motor_init>
  PID_Init();
 800a676:	f7fa fd7f 	bl	8005178 <PID_Init>
  init_WallControl();
 800a67a:	f7fa ff13 	bl	80054a4 <init_WallControl>
  Control_mode_Init();
 800a67e:	f7f7 fde5 	bl	800224c <Control_mode_Init>
  init_FailSafe();
 800a682:	f7ff fddb 	bl	800a23c <init_FailSafe>
  input_parameter();
 800a686:	f00d ffad 	bl	80185e4 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800a68a:	2300      	movs	r3, #0
 800a68c:	617b      	str	r3, [r7, #20]
  int a=0;
 800a68e:	2300      	movs	r3, #0
 800a690:	607b      	str	r3, [r7, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a692:	4b38      	ldr	r3, [pc, #224]	; (800a774 <main+0x154>)
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a698:	4b36      	ldr	r3, [pc, #216]	; (800a774 <main+0x154>)
 800a69a:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a69c:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a69e:	4b35      	ldr	r3, [pc, #212]	; (800a774 <main+0x154>)
 800a6a0:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a6a2:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a6a4:	4b33      	ldr	r3, [pc, #204]	; (800a774 <main+0x154>)
 800a6a6:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a6a8:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800a6aa:	4b32      	ldr	r3, [pc, #200]	; (800a774 <main+0x154>)
 800a6ac:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800a6ae:	9301      	str	r3, [sp, #4]
 800a6b0:	9200      	str	r2, [sp, #0]
 800a6b2:	4623      	mov	r3, r4
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	4830      	ldr	r0, [pc, #192]	; (800a778 <main+0x158>)
 800a6b8:	f016 ff2c 	bl	8021514 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a6bc:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <main+0x15c>)
 800a6be:	881b      	ldrh	r3, [r3, #0]
 800a6c0:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a6c2:	4b2e      	ldr	r3, [pc, #184]	; (800a77c <main+0x15c>)
 800a6c4:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a6c6:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a6c8:	4b2c      	ldr	r3, [pc, #176]	; (800a77c <main+0x15c>)
 800a6ca:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a6cc:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a6ce:	4b2b      	ldr	r3, [pc, #172]	; (800a77c <main+0x15c>)
 800a6d0:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a6d2:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800a6d4:	4b29      	ldr	r3, [pc, #164]	; (800a77c <main+0x15c>)
 800a6d6:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800a6d8:	9301      	str	r3, [sp, #4]
 800a6da:	9200      	str	r2, [sp, #0]
 800a6dc:	4623      	mov	r3, r4
 800a6de:	4602      	mov	r2, r0
 800a6e0:	4827      	ldr	r0, [pc, #156]	; (800a780 <main+0x160>)
 800a6e2:	f016 ff17 	bl	8021514 <iprintf>
	battcheak();
 800a6e6:	f7f7 fc73 	bl	8001fd0 <battcheak>

//起動cheak
	int yellow_count=1;
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	60fb      	str	r3, [r7, #12]
 800a6f2:	e00d      	b.n	800a710 <main+0xf0>
		pl_yellow_LED_count(yellow_count);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fd f9b9 	bl	8007a70 <pl_yellow_LED_count>
		HAL_Delay(50);
 800a6fe:	2032      	movs	r0, #50	; 0x32
 800a700:	f00e ffb6 	bl	8019670 <HAL_Delay>
		yellow_count=yellow_count*2;
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	005b      	lsls	r3, r3, #1
 800a708:	613b      	str	r3, [r7, #16]
	for(int i=0;i<8;i++){
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	3301      	adds	r3, #1
 800a70e:	60fb      	str	r3, [r7, #12]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b07      	cmp	r3, #7
 800a714:	ddee      	ble.n	800a6f4 <main+0xd4>
	}
	for(int i=0;i<9;i++){
 800a716:	2300      	movs	r3, #0
 800a718:	60bb      	str	r3, [r7, #8]
 800a71a:	e00f      	b.n	800a73c <main+0x11c>
			pl_yellow_LED_count(yellow_count);
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	4618      	mov	r0, r3
 800a722:	f7fd f9a5 	bl	8007a70 <pl_yellow_LED_count>
			HAL_Delay(50);
 800a726:	2032      	movs	r0, #50	; 0x32
 800a728:	f00e ffa2 	bl	8019670 <HAL_Delay>
			yellow_count=yellow_count/2;
 800a72c:	693b      	ldr	r3, [r7, #16]
 800a72e:	0fda      	lsrs	r2, r3, #31
 800a730:	4413      	add	r3, r2
 800a732:	105b      	asrs	r3, r3, #1
 800a734:	613b      	str	r3, [r7, #16]
	for(int i=0;i<9;i++){
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	3301      	adds	r3, #1
 800a73a:	60bb      	str	r3, [r7, #8]
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	2b08      	cmp	r3, #8
 800a740:	ddec      	ble.n	800a71c <main+0xfc>
//		tim1 = toc_timer();
//		maze_display();
//		maze_display_Dijkstra();
//		printf("tim1=%f,tim2=%f\n", tim1, tim2);

	  		mode=mode_decision(mode);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	b2db      	uxtb	r3, r3
 800a746:	4618      	mov	r0, r3
 800a748:	f00b f92a 	bl	80159a0 <mode_decision>
 800a74c:	4603      	mov	r3, r0
 800a74e:	617b      	str	r3, [r7, #20]
//	  		clear_Ierror();
	  		reset_distance();
 800a750:	f7f6 fc24 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 800a754:	f7f7 fa30 	bl	8001bb8 <reset_gyro>
	  		reset_speed();
 800a758:	f7f6 fc64 	bl	8001024 <reset_speed>

	  		mode_execution(mode);
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	4618      	mov	r0, r3
 800a762:	f00b fa17 	bl	8015b94 <mode_execution>

// failsafe後の修理
	  		Control_mode_Init();
 800a766:	f7f7 fd71 	bl	800224c <Control_mode_Init>
	  		init_WallControl();
 800a76a:	f7fa fe9b 	bl	80054a4 <init_WallControl>
	  		init_FailSafe();
 800a76e:	f7ff fd65 	bl	800a23c <init_FailSafe>
	  		mode=mode_decision(mode);
 800a772:	e7e6      	b.n	800a742 <main+0x122>
 800a774:	20000718 	.word	0x20000718
 800a778:	08024f18 	.word	0x08024f18
 800a77c:	20000724 	.word	0x20000724
 800a780:	08024f44 	.word	0x08024f44

0800a784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b094      	sub	sp, #80	; 0x50
 800a788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a78a:	f107 0318 	add.w	r3, r7, #24
 800a78e:	2238      	movs	r2, #56	; 0x38
 800a790:	2100      	movs	r1, #0
 800a792:	4618      	mov	r0, r3
 800a794:	f016 fa4c 	bl	8020c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a798:	1d3b      	adds	r3, r7, #4
 800a79a:	2200      	movs	r2, #0
 800a79c:	601a      	str	r2, [r3, #0]
 800a79e:	605a      	str	r2, [r3, #4]
 800a7a0:	609a      	str	r2, [r3, #8]
 800a7a2:	60da      	str	r2, [r3, #12]
 800a7a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	f012 f936 	bl	801ca18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a7b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a7b4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800a7be:	2304      	movs	r3, #4
 800a7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800a7c2:	2355      	movs	r3, #85	; 0x55
 800a7c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a7c6:	2302      	movs	r3, #2
 800a7c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a7d2:	f107 0318 	add.w	r3, r7, #24
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f012 f9d2 	bl	801cb80 <HAL_RCC_OscConfig>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800a7e2:	f000 f81a 	bl	800a81a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a7e6:	230f      	movs	r3, #15
 800a7e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a7ea:	2303      	movs	r3, #3
 800a7ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a7f2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800a7f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a7f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a7fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a7fe:	1d3b      	adds	r3, r7, #4
 800a800:	2104      	movs	r1, #4
 800a802:	4618      	mov	r0, r3
 800a804:	f012 fcd4 	bl	801d1b0 <HAL_RCC_ClockConfig>
 800a808:	4603      	mov	r3, r0
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800a80e:	f000 f804 	bl	800a81a <Error_Handler>
  }
}
 800a812:	bf00      	nop
 800a814:	3750      	adds	r7, #80	; 0x50
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}

0800a81a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a81a:	b480      	push	{r7}
 800a81c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800a81e:	b672      	cpsid	i
}
 800a820:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800a822:	e7fe      	b.n	800a822 <Error_Handler+0x8>

0800a824 <backTurn_controlWall>:
	}
	wait_ms_NoReset(150);

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 800a824:	b580      	push	{r7, lr}
 800a826:	b084      	sub	sp, #16
 800a828:	af00      	add	r7, sp, #0
 800a82a:	ed87 0a03 	vstr	s0, [r7, #12]
 800a82e:	edc7 0a02 	vstr	s1, [r7, #8]
 800a832:	4603      	mov	r3, r0
 800a834:	71fb      	strb	r3, [r7, #7]
 800a836:	460b      	mov	r3, r1
 800a838:	71bb      	strb	r3, [r7, #6]
 800a83a:	4613      	mov	r3, r2
 800a83c:	717b      	strb	r3, [r7, #5]
	no_safty = 1;
 800a83e:	4b5e      	ldr	r3, [pc, #376]	; (800a9b8 <backTurn_controlWall+0x194>)
 800a840:	2201      	movs	r2, #1
 800a842:	701a      	strb	r2, [r3, #0]
	if(front_wall){
 800a844:	79fb      	ldrb	r3, [r7, #7]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d00a      	beq.n	800a860 <backTurn_controlWall+0x3c>
		no_frontwall_straight();
 800a84a:	f7fa f9f1 	bl	8004c30 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a84e:	2003      	movs	r0, #3
 800a850:	f7fd fe80 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a854:	2003      	movs	r0, #3
 800a856:	f7fd fe55 	bl	8008504 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a85a:	2032      	movs	r0, #50	; 0x32
 800a85c:	f7fe f978 	bl	8008b50 <wait_ms_NoReset>
	}
	if(left_wall){
 800a860:	79bb      	ldrb	r3, [r7, #6]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d02c      	beq.n	800a8c0 <backTurn_controlWall+0x9c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a866:	ed97 2a02 	vldr	s4, [r7, #8]
 800a86a:	edd7 1a03 	vldr	s3, [r7, #12]
 800a86e:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800a9bc <backTurn_controlWall+0x198>
 800a872:	eddf 0a52 	vldr	s1, [pc, #328]	; 800a9bc <backTurn_controlWall+0x198>
 800a876:	ed9f 0a52 	vldr	s0, [pc, #328]	; 800a9c0 <backTurn_controlWall+0x19c>
 800a87a:	f7f9 fed3 	bl	8004624 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a87e:	2003      	movs	r0, #3
 800a880:	f7fd fe68 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a884:	2003      	movs	r0, #3
 800a886:	f7fd fe3d 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a88a:	2032      	movs	r0, #50	; 0x32
 800a88c:	f7fe f960 	bl	8008b50 <wait_ms_NoReset>
		no_frontwall_straight();
 800a890:	f7fa f9ce 	bl	8004c30 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a894:	2003      	movs	r0, #3
 800a896:	f7fd fe5d 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a89a:	2003      	movs	r0, #3
 800a89c:	f7fd fe32 	bl	8008504 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a8a0:	2032      	movs	r0, #50	; 0x32
 800a8a2:	f7fe f955 	bl	8008b50 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a8a6:	ed97 2a02 	vldr	s4, [r7, #8]
 800a8aa:	edd7 1a03 	vldr	s3, [r7, #12]
 800a8ae:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800a9bc <backTurn_controlWall+0x198>
 800a8b2:	eddf 0a42 	vldr	s1, [pc, #264]	; 800a9bc <backTurn_controlWall+0x198>
 800a8b6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800a9c0 <backTurn_controlWall+0x19c>
 800a8ba:	f7f9 feb3 	bl	8004624 <turning_table2>
 800a8be:	e06a      	b.n	800a996 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall){
 800a8c0:	79bb      	ldrb	r3, [r7, #6]
 800a8c2:	f083 0301 	eor.w	r3, r3, #1
 800a8c6:	b2db      	uxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d037      	beq.n	800a93c <backTurn_controlWall+0x118>
 800a8cc:	797b      	ldrb	r3, [r7, #5]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d034      	beq.n	800a93c <backTurn_controlWall+0x118>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a8d2:	edd7 7a03 	vldr	s15, [r7, #12]
 800a8d6:	eef1 7a67 	vneg.f32	s15, s15
 800a8da:	ed97 2a02 	vldr	s4, [r7, #8]
 800a8de:	eef0 1a67 	vmov.f32	s3, s15
 800a8e2:	ed9f 1a36 	vldr	s2, [pc, #216]	; 800a9bc <backTurn_controlWall+0x198>
 800a8e6:	eddf 0a35 	vldr	s1, [pc, #212]	; 800a9bc <backTurn_controlWall+0x198>
 800a8ea:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800a9c4 <backTurn_controlWall+0x1a0>
 800a8ee:	f7f9 fe99 	bl	8004624 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a8f2:	2003      	movs	r0, #3
 800a8f4:	f7fd fe2e 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a8f8:	2003      	movs	r0, #3
 800a8fa:	f7fd fe03 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a8fe:	2032      	movs	r0, #50	; 0x32
 800a900:	f7fe f926 	bl	8008b50 <wait_ms_NoReset>
		no_frontwall_straight();
 800a904:	f7fa f994 	bl	8004c30 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a908:	2003      	movs	r0, #3
 800a90a:	f7fd fe23 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a90e:	2003      	movs	r0, #3
 800a910:	f7fd fdf8 	bl	8008504 <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 800a914:	2032      	movs	r0, #50	; 0x32
 800a916:	f7fe f91b 	bl	8008b50 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800a91a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a91e:	eef1 7a67 	vneg.f32	s15, s15
 800a922:	ed97 2a02 	vldr	s4, [r7, #8]
 800a926:	eef0 1a67 	vmov.f32	s3, s15
 800a92a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 800a9bc <backTurn_controlWall+0x198>
 800a92e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800a9bc <backTurn_controlWall+0x198>
 800a932:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800a9c4 <backTurn_controlWall+0x1a0>
 800a936:	f7f9 fe75 	bl	8004624 <turning_table2>
 800a93a:	e02c      	b.n	800a996 <backTurn_controlWall+0x172>
	}else if(left_wall==0 && right_wall==0){
 800a93c:	79bb      	ldrb	r3, [r7, #6]
 800a93e:	f083 0301 	eor.w	r3, r3, #1
 800a942:	b2db      	uxtb	r3, r3
 800a944:	2b00      	cmp	r3, #0
 800a946:	d026      	beq.n	800a996 <backTurn_controlWall+0x172>
 800a948:	797b      	ldrb	r3, [r7, #5]
 800a94a:	f083 0301 	eor.w	r3, r3, #1
 800a94e:	b2db      	uxtb	r3, r3
 800a950:	2b00      	cmp	r3, #0
 800a952:	d020      	beq.n	800a996 <backTurn_controlWall+0x172>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a954:	ed97 2a02 	vldr	s4, [r7, #8]
 800a958:	edd7 1a03 	vldr	s3, [r7, #12]
 800a95c:	ed9f 1a17 	vldr	s2, [pc, #92]	; 800a9bc <backTurn_controlWall+0x198>
 800a960:	eddf 0a16 	vldr	s1, [pc, #88]	; 800a9bc <backTurn_controlWall+0x198>
 800a964:	ed9f 0a16 	vldr	s0, [pc, #88]	; 800a9c0 <backTurn_controlWall+0x19c>
 800a968:	f7f9 fe5c 	bl	8004624 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a96c:	2003      	movs	r0, #3
 800a96e:	f7fd fdf1 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a972:	2003      	movs	r0, #3
 800a974:	f7fd fdc6 	bl	8008504 <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 800a978:	2032      	movs	r0, #50	; 0x32
 800a97a:	f7fe f8e9 	bl	8008b50 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800a97e:	ed97 2a02 	vldr	s4, [r7, #8]
 800a982:	edd7 1a03 	vldr	s3, [r7, #12]
 800a986:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 800a9bc <backTurn_controlWall+0x198>
 800a98a:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800a9bc <backTurn_controlWall+0x198>
 800a98e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800a9c0 <backTurn_controlWall+0x19c>
 800a992:	f7f9 fe47 	bl	8004624 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800a996:	2003      	movs	r0, #3
 800a998:	f7fd fddc 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800a99c:	2003      	movs	r0, #3
 800a99e:	f7fd fdb1 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(150);
 800a9a2:	2096      	movs	r0, #150	; 0x96
 800a9a4:	f7fe f8d4 	bl	8008b50 <wait_ms_NoReset>
	no_safty = 0;
 800a9a8:	4b03      	ldr	r3, [pc, #12]	; (800a9b8 <backTurn_controlWall+0x194>)
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	701a      	strb	r2, [r3, #0]
}
 800a9ae:	bf00      	nop
 800a9b0:	3710      	adds	r7, #16
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	20000812 	.word	0x20000812
 800a9bc:	00000000 	.word	0x00000000
 800a9c0:	42b40000 	.word	0x42b40000
 800a9c4:	c2b40000 	.word	0xc2b40000

0800a9c8 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	b5b0      	push	{r4, r5, r7, lr}
 800a9cc:	ed2d 8b02 	vpush	{d8}
 800a9d0:	b084      	sub	sp, #16
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9dc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a9e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	f040 80f5 	bne.w	800abd4 <slalomR+0x20c>
		highspeed_mode = 0;
 800a9ea:	4be3      	ldr	r3, [pc, #908]	; (800ad78 <slalomR+0x3b0>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800aa00:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d11f      	bne.n	800aa48 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aa08:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa0c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa14:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa18:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa1c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa20:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aa24:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800ad7c <slalomR+0x3b4>
 800aa28:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	eeb0 2a47 	vmov.f32	s4, s14
 800aa32:	eef0 1a46 	vmov.f32	s3, s12
 800aa36:	eeb0 1a66 	vmov.f32	s2, s13
 800aa3a:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800ad80 <slalomR+0x3b8>
 800aa3e:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800ad84 <slalomR+0x3bc>
 800aa42:	f7f9 f8c5 	bl	8003bd0 <straight_table2>
 800aa46:	e01e      	b.n	800aa86 <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aa48:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa4c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa5c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa60:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800aa64:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800ad7c <slalomR+0x3b4>
 800aa68:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	eeb0 2a47 	vmov.f32	s4, s14
 800aa72:	eef0 1a46 	vmov.f32	s3, s12
 800aa76:	eeb0 1a66 	vmov.f32	s2, s13
 800aa7a:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800ad80 <slalomR+0x3b8>
 800aa7e:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800ad88 <slalomR+0x3c0>
 800aa82:	f7f9 f8a5 	bl	8003bd0 <straight_table2>
		}
		wallmode.WallCutMode=1;
 800aa86:	2301      	movs	r3, #1
 800aa88:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800aa8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d127      	bne.n	800aae6 <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa96:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aa9a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800aa9e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aaa2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aaa6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aaaa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaae:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aab2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aab6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aaba:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aabe:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aac2:	eddf 4aae 	vldr	s9, [pc, #696]	; 800ad7c <slalomR+0x3b4>
 800aac6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	eeb0 2a47 	vmov.f32	s4, s14
 800aad0:	eef0 1a45 	vmov.f32	s3, s10
 800aad4:	eeb0 1a65 	vmov.f32	s2, s11
 800aad8:	eef0 0a46 	vmov.f32	s1, s12
 800aadc:	eeb0 0a66 	vmov.f32	s0, s13
 800aae0:	f7f9 f876 	bl	8003bd0 <straight_table2>
 800aae4:	e022      	b.n	800ab2c <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aae6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aaea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aaee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aaf2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aaf6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aafa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aafe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab02:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab06:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab0a:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800ad7c <slalomR+0x3b4>
 800ab0e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	eeb0 2a47 	vmov.f32	s4, s14
 800ab18:	eef0 1a45 	vmov.f32	s3, s10
 800ab1c:	eeb0 1a65 	vmov.f32	s2, s11
 800ab20:	eef0 0a46 	vmov.f32	s1, s12
 800ab24:	eeb0 0a66 	vmov.f32	s0, s13
 800ab28:	f7f9 f852 	bl	8003bd0 <straight_table2>
		}
		if(mollifier_mode == ON){
 800ab2c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ab30:	2b01      	cmp	r3, #1
 800ab32:	d10c      	bne.n	800ab4e <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ab34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ab3c:	eeb0 1a47 	vmov.f32	s2, s14
 800ab40:	eddf 0a92 	vldr	s1, [pc, #584]	; 800ad8c <slalomR+0x3c4>
 800ab44:	eeb0 0a67 	vmov.f32	s0, s15
 800ab48:	f7f9 ffde 	bl	8004b08 <mollifier_slalom_table>
 800ab4c:	e015      	b.n	800ab7a <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ab4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab52:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab56:	eef1 7a67 	vneg.f32	s15, s15
 800ab5a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ab5e:	eef0 2a66 	vmov.f32	s5, s13
 800ab62:	eeb0 2a67 	vmov.f32	s4, s15
 800ab66:	eddf 1a86 	vldr	s3, [pc, #536]	; 800ad80 <slalomR+0x3b8>
 800ab6a:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800ad80 <slalomR+0x3b8>
 800ab6e:	eddf 0a87 	vldr	s1, [pc, #540]	; 800ad8c <slalomR+0x3c4>
 800ab72:	eeb0 0a47 	vmov.f32	s0, s14
 800ab76:	f7f9 fe77 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab82:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab86:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800ad7c <slalomR+0x3b4>
 800ab8a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ab8e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab92:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab96:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aba2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800aba6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800abaa:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800ad7c <slalomR+0x3b4>
 800abae:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800abb2:	68f8      	ldr	r0, [r7, #12]
 800abb4:	eeb0 2a47 	vmov.f32	s4, s14
 800abb8:	eef0 1a65 	vmov.f32	s3, s11
 800abbc:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800ad80 <slalomR+0x3b8>
 800abc0:	eef0 0a46 	vmov.f32	s1, s12
 800abc4:	eeb0 0a66 	vmov.f32	s0, s13
 800abc8:	f7f9 f802 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800abcc:	4b6a      	ldr	r3, [pc, #424]	; (800ad78 <slalomR+0x3b0>)
 800abce:	2200      	movs	r2, #0
 800abd0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800abd2:	e0c8      	b.n	800ad66 <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800abd4:	2300      	movs	r3, #0
 800abd6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800abd8:	2300      	movs	r3, #0
 800abda:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800abdc:	2301      	movs	r3, #1
 800abde:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800abe4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d127      	bne.n	800ac3c <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800abec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800abf0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800abf4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800abf8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800abfc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac00:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac04:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac08:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac10:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac14:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac18:	eddf 4a58 	vldr	s9, [pc, #352]	; 800ad7c <slalomR+0x3b4>
 800ac1c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac20:	68f8      	ldr	r0, [r7, #12]
 800ac22:	eeb0 2a47 	vmov.f32	s4, s14
 800ac26:	eef0 1a45 	vmov.f32	s3, s10
 800ac2a:	eeb0 1a65 	vmov.f32	s2, s11
 800ac2e:	eef0 0a46 	vmov.f32	s1, s12
 800ac32:	eeb0 0a66 	vmov.f32	s0, s13
 800ac36:	f7f8 ffcb 	bl	8003bd0 <straight_table2>
 800ac3a:	e022      	b.n	800ac82 <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac3c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ac40:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ac44:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ac48:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ac4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ac50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac58:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ac5c:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ac60:	eddf 4a46 	vldr	s9, [pc, #280]	; 800ad7c <slalomR+0x3b4>
 800ac64:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ac68:	68f8      	ldr	r0, [r7, #12]
 800ac6a:	eeb0 2a47 	vmov.f32	s4, s14
 800ac6e:	eef0 1a45 	vmov.f32	s3, s10
 800ac72:	eeb0 1a65 	vmov.f32	s2, s11
 800ac76:	eef0 0a46 	vmov.f32	s1, s12
 800ac7a:	eeb0 0a66 	vmov.f32	s0, s13
 800ac7e:	f7f8 ffa7 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800ac82:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ac86:	2b01      	cmp	r3, #1
 800ac88:	d10c      	bne.n	800aca4 <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800ac8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac8e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ac92:	eeb0 1a47 	vmov.f32	s2, s14
 800ac96:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800ad8c <slalomR+0x3c4>
 800ac9a:	eeb0 0a67 	vmov.f32	s0, s15
 800ac9e:	f7f9 ff33 	bl	8004b08 <mollifier_slalom_table>
 800aca2:	e015      	b.n	800acd0 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800aca4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aca8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800acac:	eef1 7a67 	vneg.f32	s15, s15
 800acb0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800acb4:	eef0 2a66 	vmov.f32	s5, s13
 800acb8:	eeb0 2a67 	vmov.f32	s4, s15
 800acbc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ad80 <slalomR+0x3b8>
 800acc0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ad80 <slalomR+0x3b8>
 800acc4:	eddf 0a31 	vldr	s1, [pc, #196]	; 800ad8c <slalomR+0x3c4>
 800acc8:	eeb0 0a47 	vmov.f32	s0, s14
 800accc:	f7f9 fdcc 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800acd0:	2300      	movs	r3, #0
 800acd2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800acd4:	2300      	movs	r3, #0
 800acd6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800acd8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800acdc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800ace0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ace4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ace8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acec:	edd7 7a01 	vldr	s15, [r7, #4]
 800acf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800acf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acf8:	eef0 7ae7 	vabs.f32	s15, s15
 800acfc:	ee17 0a90 	vmov	r0, s15
 800ad00:	f7f5 fc4a 	bl	8000598 <__aeabi_f2d>
 800ad04:	f04f 0200 	mov.w	r2, #0
 800ad08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ad0c:	f7f5 fdc6 	bl	800089c <__aeabi_ddiv>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4614      	mov	r4, r2
 800ad16:	461d      	mov	r5, r3
 800ad18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7f5 fc3c 	bl	8000598 <__aeabi_f2d>
 800ad20:	4602      	mov	r2, r0
 800ad22:	460b      	mov	r3, r1
 800ad24:	4620      	mov	r0, r4
 800ad26:	4629      	mov	r1, r5
 800ad28:	f7f5 fdb8 	bl	800089c <__aeabi_ddiv>
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	460b      	mov	r3, r1
 800ad30:	4610      	mov	r0, r2
 800ad32:	4619      	mov	r1, r3
 800ad34:	f04f 0200 	mov.w	r2, #0
 800ad38:	4b15      	ldr	r3, [pc, #84]	; (800ad90 <slalomR+0x3c8>)
 800ad3a:	f7f5 facf 	bl	80002dc <__adddf3>
 800ad3e:	4602      	mov	r2, r0
 800ad40:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ad42:	4610      	mov	r0, r2
 800ad44:	4619      	mov	r1, r3
 800ad46:	f7f5 ff57 	bl	8000bf8 <__aeabi_d2f>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	ee02 3a10 	vmov	s4, r3
 800ad52:	edd7 1a01 	vldr	s3, [r7, #4]
 800ad56:	ed97 1a01 	vldr	s2, [r7, #4]
 800ad5a:	eef0 0a68 	vmov.f32	s1, s17
 800ad5e:	eeb0 0a48 	vmov.f32	s0, s16
 800ad62:	f7f8 ff35 	bl	8003bd0 <straight_table2>
}
 800ad66:	bf00      	nop
 800ad68:	3710      	adds	r7, #16
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	ecbd 8b02 	vpop	{d8}
 800ad70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ad74:	b004      	add	sp, #16
 800ad76:	4770      	bx	lr
 800ad78:	20000814 	.word	0x20000814
 800ad7c:	42340000 	.word	0x42340000
 800ad80:	00000000 	.word	0x00000000
 800ad84:	431b8000 	.word	0x431b8000
 800ad88:	43138000 	.word	0x43138000
 800ad8c:	c2b40000 	.word	0xc2b40000
 800ad90:	408f4000 	.word	0x408f4000

0800ad94 <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800ad94:	b084      	sub	sp, #16
 800ad96:	b5b0      	push	{r4, r5, r7, lr}
 800ad98:	ed2d 8b02 	vpush	{d8}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ada4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ada8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800adac:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	f040 80f3 	bne.w	800af9c <slalomL+0x208>
		highspeed_mode = 0;
 800adb6:	4be1      	ldr	r3, [pc, #900]	; (800b13c <slalomL+0x3a8>)
 800adb8:	2200      	movs	r2, #0
 800adba:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800adbc:	2301      	movs	r3, #1
 800adbe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800adc0:	2300      	movs	r3, #0
 800adc2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800adc8:	2300      	movs	r3, #0
 800adca:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800adcc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d11f      	bne.n	800ae14 <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800add4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800add8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800addc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ade0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ade4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ade8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800adec:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800adf0:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800b140 <slalomL+0x3ac>
 800adf4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	eeb0 2a47 	vmov.f32	s4, s14
 800adfe:	eef0 1a46 	vmov.f32	s3, s12
 800ae02:	eeb0 1a66 	vmov.f32	s2, s13
 800ae06:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b144 <slalomL+0x3b0>
 800ae0a:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800b148 <slalomL+0x3b4>
 800ae0e:	f7f8 fedf 	bl	8003bd0 <straight_table2>
 800ae12:	e01e      	b.n	800ae52 <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ae14:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ae18:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae1c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae24:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae28:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ae2c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800ae30:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800b140 <slalomL+0x3ac>
 800ae34:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	eeb0 2a47 	vmov.f32	s4, s14
 800ae3e:	eef0 1a46 	vmov.f32	s3, s12
 800ae42:	eeb0 1a66 	vmov.f32	s2, s13
 800ae46:	eddf 0abf 	vldr	s1, [pc, #764]	; 800b144 <slalomL+0x3b0>
 800ae4a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800b14c <slalomL+0x3b8>
 800ae4e:	f7f8 febf 	bl	8003bd0 <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800ae52:	2300      	movs	r3, #0
 800ae54:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800ae5a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d127      	bne.n	800aeb2 <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae62:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ae66:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800ae6a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ae6e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae72:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae76:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae7a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae82:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae86:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae8a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae8e:	eddf 4aac 	vldr	s9, [pc, #688]	; 800b140 <slalomL+0x3ac>
 800ae92:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae96:	68f8      	ldr	r0, [r7, #12]
 800ae98:	eeb0 2a47 	vmov.f32	s4, s14
 800ae9c:	eef0 1a45 	vmov.f32	s3, s10
 800aea0:	eeb0 1a65 	vmov.f32	s2, s11
 800aea4:	eef0 0a46 	vmov.f32	s1, s12
 800aea8:	eeb0 0a66 	vmov.f32	s0, s13
 800aeac:	f7f8 fe90 	bl	8003bd0 <straight_table2>
 800aeb0:	e022      	b.n	800aef8 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aeb2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aeb6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aeba:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aebe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aec2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aec6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aeca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aece:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aed2:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aed6:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800b140 <slalomL+0x3ac>
 800aeda:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	eeb0 2a47 	vmov.f32	s4, s14
 800aee4:	eef0 1a45 	vmov.f32	s3, s10
 800aee8:	eeb0 1a65 	vmov.f32	s2, s11
 800aeec:	eef0 0a46 	vmov.f32	s1, s12
 800aef0:	eeb0 0a66 	vmov.f32	s0, s13
 800aef4:	f7f8 fe6c 	bl	8003bd0 <straight_table2>
		}
		if(mollifier_mode == ON){
 800aef8:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d10c      	bne.n	800af1a <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800af00:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af04:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af08:	eeb0 1a47 	vmov.f32	s2, s14
 800af0c:	eddf 0a90 	vldr	s1, [pc, #576]	; 800b150 <slalomL+0x3bc>
 800af10:	eeb0 0a67 	vmov.f32	s0, s15
 800af14:	f7f9 fdf8 	bl	8004b08 <mollifier_slalom_table>
 800af18:	e013      	b.n	800af42 <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800af1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800af22:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800af26:	eef0 2a66 	vmov.f32	s5, s13
 800af2a:	eeb0 2a47 	vmov.f32	s4, s14
 800af2e:	eddf 1a85 	vldr	s3, [pc, #532]	; 800b144 <slalomL+0x3b0>
 800af32:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800b144 <slalomL+0x3b0>
 800af36:	eddf 0a86 	vldr	s1, [pc, #536]	; 800b150 <slalomL+0x3bc>
 800af3a:	eeb0 0a67 	vmov.f32	s0, s15
 800af3e:	f7f9 fc93 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800af42:	2300      	movs	r3, #0
 800af44:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800af4a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af4e:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800b140 <slalomL+0x3ac>
 800af52:	ee77 6a87 	vadd.f32	s13, s15, s14
 800af56:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800af5a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800af5e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800af62:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800af66:	ee27 7a27 	vmul.f32	s14, s14, s15
 800af6a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800af6e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800af72:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800b140 <slalomL+0x3ac>
 800af76:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	eeb0 2a47 	vmov.f32	s4, s14
 800af80:	eef0 1a65 	vmov.f32	s3, s11
 800af84:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b144 <slalomL+0x3b0>
 800af88:	eef0 0a46 	vmov.f32	s1, s12
 800af8c:	eeb0 0a66 	vmov.f32	s0, s13
 800af90:	f7f8 fe1e 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800af94:	4b69      	ldr	r3, [pc, #420]	; (800b13c <slalomL+0x3a8>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800af9a:	e0c6      	b.n	800b12a <slalomL+0x396>
		wallmode.WallControlMode=0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800afa4:	2301      	movs	r3, #1
 800afa6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afa8:	2300      	movs	r3, #0
 800afaa:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800afac:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d127      	bne.n	800b004 <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afb4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800afb8:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800afbc:	ee77 6a87 	vadd.f32	s13, s15, s14
 800afc0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800afc4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800afc8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afcc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afd0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afd8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800afdc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afe0:	eddf 4a57 	vldr	s9, [pc, #348]	; 800b140 <slalomL+0x3ac>
 800afe4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	eeb0 2a47 	vmov.f32	s4, s14
 800afee:	eef0 1a45 	vmov.f32	s3, s10
 800aff2:	eeb0 1a65 	vmov.f32	s2, s11
 800aff6:	eef0 0a46 	vmov.f32	s1, s12
 800affa:	eeb0 0a66 	vmov.f32	s0, s13
 800affe:	f7f8 fde7 	bl	8003bd0 <straight_table2>
 800b002:	e022      	b.n	800b04a <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b004:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b008:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b00c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b010:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b014:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b018:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b01c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b020:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b024:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b028:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b140 <slalomL+0x3ac>
 800b02c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b030:	68f8      	ldr	r0, [r7, #12]
 800b032:	eeb0 2a47 	vmov.f32	s4, s14
 800b036:	eef0 1a45 	vmov.f32	s3, s10
 800b03a:	eeb0 1a65 	vmov.f32	s2, s11
 800b03e:	eef0 0a46 	vmov.f32	s1, s12
 800b042:	eeb0 0a66 	vmov.f32	s0, s13
 800b046:	f7f8 fdc3 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b04a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d10c      	bne.n	800b06c <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b052:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b056:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b05a:	eeb0 1a47 	vmov.f32	s2, s14
 800b05e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b150 <slalomL+0x3bc>
 800b062:	eeb0 0a67 	vmov.f32	s0, s15
 800b066:	f7f9 fd4f 	bl	8004b08 <mollifier_slalom_table>
 800b06a:	e013      	b.n	800b094 <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b06c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b070:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b074:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b078:	eef0 2a66 	vmov.f32	s5, s13
 800b07c:	eeb0 2a47 	vmov.f32	s4, s14
 800b080:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b144 <slalomL+0x3b0>
 800b084:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b144 <slalomL+0x3b0>
 800b088:	eddf 0a31 	vldr	s1, [pc, #196]	; 800b150 <slalomL+0x3bc>
 800b08c:	eeb0 0a67 	vmov.f32	s0, s15
 800b090:	f7f9 fbea 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800b094:	2300      	movs	r3, #0
 800b096:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b098:	2300      	movs	r3, #0
 800b09a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b09c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b0a0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b0a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0b0:	edd7 7a01 	vldr	s15, [r7, #4]
 800b0b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0bc:	eef0 7ae7 	vabs.f32	s15, s15
 800b0c0:	ee17 0a90 	vmov	r0, s15
 800b0c4:	f7f5 fa68 	bl	8000598 <__aeabi_f2d>
 800b0c8:	f04f 0200 	mov.w	r2, #0
 800b0cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0d0:	f7f5 fbe4 	bl	800089c <__aeabi_ddiv>
 800b0d4:	4602      	mov	r2, r0
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4614      	mov	r4, r2
 800b0da:	461d      	mov	r5, r3
 800b0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7f5 fa5a 	bl	8000598 <__aeabi_f2d>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	460b      	mov	r3, r1
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	4629      	mov	r1, r5
 800b0ec:	f7f5 fbd6 	bl	800089c <__aeabi_ddiv>
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	4610      	mov	r0, r2
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	f04f 0200 	mov.w	r2, #0
 800b0fc:	4b15      	ldr	r3, [pc, #84]	; (800b154 <slalomL+0x3c0>)
 800b0fe:	f7f5 f8ed 	bl	80002dc <__adddf3>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b106:	4610      	mov	r0, r2
 800b108:	4619      	mov	r1, r3
 800b10a:	f7f5 fd75 	bl	8000bf8 <__aeabi_d2f>
 800b10e:	4603      	mov	r3, r0
 800b110:	68f8      	ldr	r0, [r7, #12]
 800b112:	ee02 3a10 	vmov	s4, r3
 800b116:	edd7 1a01 	vldr	s3, [r7, #4]
 800b11a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b11e:	eef0 0a68 	vmov.f32	s1, s17
 800b122:	eeb0 0a48 	vmov.f32	s0, s16
 800b126:	f7f8 fd53 	bl	8003bd0 <straight_table2>
}
 800b12a:	bf00      	nop
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	ecbd 8b02 	vpop	{d8}
 800b134:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b138:	b004      	add	sp, #16
 800b13a:	4770      	bx	lr
 800b13c:	20000814 	.word	0x20000814
 800b140:	42340000 	.word	0x42340000
 800b144:	00000000 	.word	0x00000000
 800b148:	431b8000 	.word	0x431b8000
 800b14c:	43138000 	.word	0x43138000
 800b150:	42b40000 	.word	0x42b40000
 800b154:	408f4000 	.word	0x408f4000

0800b158 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b158:	b084      	sub	sp, #16
 800b15a:	b5b0      	push	{r4, r5, r7, lr}
 800b15c:	ed2d 8b02 	vpush	{d8}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b168:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b16c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b170:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b174:	2b01      	cmp	r3, #1
 800b176:	f040 80a5 	bne.w	800b2c4 <turn90R+0x16c>
		highspeed_mode = 1;
 800b17a:	4ba5      	ldr	r3, [pc, #660]	; (800b410 <turn90R+0x2b8>)
 800b17c:	2201      	movs	r2, #1
 800b17e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b180:	2301      	movs	r3, #1
 800b182:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b184:	2300      	movs	r3, #0
 800b186:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b188:	2300      	movs	r3, #0
 800b18a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b18c:	2300      	movs	r3, #0
 800b18e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b190:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b194:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b198:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1a4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b1a8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b1ac:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b414 <turn90R+0x2bc>
 800b1b0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	eeb0 2a47 	vmov.f32	s4, s14
 800b1ba:	eef0 1a46 	vmov.f32	s3, s12
 800b1be:	eeb0 1a66 	vmov.f32	s2, s13
 800b1c2:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b418 <turn90R+0x2c0>
 800b1c6:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b41c <turn90R+0x2c4>
 800b1ca:	f7f8 fd01 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b1d2:	2302      	movs	r3, #2
 800b1d4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1d6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b1da:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b1de:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b1e2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b1e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b1ea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b1f2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b1f6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b1fa:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b414 <turn90R+0x2bc>
 800b1fe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	eeb0 2a47 	vmov.f32	s4, s14
 800b208:	eef0 1a45 	vmov.f32	s3, s10
 800b20c:	eeb0 1a65 	vmov.f32	s2, s11
 800b210:	eef0 0a46 	vmov.f32	s1, s12
 800b214:	eeb0 0a66 	vmov.f32	s0, s13
 800b218:	f7f8 fcda 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b21c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b220:	2b01      	cmp	r3, #1
 800b222:	d10c      	bne.n	800b23e <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b224:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b228:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b22c:	eeb0 1a47 	vmov.f32	s2, s14
 800b230:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b420 <turn90R+0x2c8>
 800b234:	eeb0 0a67 	vmov.f32	s0, s15
 800b238:	f7f9 fc66 	bl	8004b08 <mollifier_slalom_table>
 800b23c:	e015      	b.n	800b26a <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b23e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b242:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b246:	eef1 7a67 	vneg.f32	s15, s15
 800b24a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b24e:	eef0 2a66 	vmov.f32	s5, s13
 800b252:	eeb0 2a67 	vmov.f32	s4, s15
 800b256:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b418 <turn90R+0x2c0>
 800b25a:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b418 <turn90R+0x2c0>
 800b25e:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b420 <turn90R+0x2c8>
 800b262:	eeb0 0a47 	vmov.f32	s0, s14
 800b266:	f7f9 faff 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b26a:	2300      	movs	r3, #0
 800b26c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b26e:	2300      	movs	r3, #0
 800b270:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b272:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b276:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b424 <turn90R+0x2cc>
 800b27a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b27e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b282:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b286:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b28a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b28e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b292:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b296:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b29a:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b414 <turn90R+0x2bc>
 800b29e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b2a2:	68f8      	ldr	r0, [r7, #12]
 800b2a4:	eeb0 2a47 	vmov.f32	s4, s14
 800b2a8:	eef0 1a65 	vmov.f32	s3, s11
 800b2ac:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b418 <turn90R+0x2c0>
 800b2b0:	eef0 0a46 	vmov.f32	s1, s12
 800b2b4:	eeb0 0a66 	vmov.f32	s0, s13
 800b2b8:	f7f8 fc8a 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800b2bc:	4b54      	ldr	r3, [pc, #336]	; (800b410 <turn90R+0x2b8>)
 800b2be:	2200      	movs	r2, #0
 800b2c0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b2c2:	e09c      	b.n	800b3fe <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2d4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2d8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2dc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2e0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2f0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2f4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2f8:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b414 <turn90R+0x2bc>
 800b2fc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	eeb0 2a47 	vmov.f32	s4, s14
 800b306:	eef0 1a45 	vmov.f32	s3, s10
 800b30a:	eeb0 1a65 	vmov.f32	s2, s11
 800b30e:	eef0 0a46 	vmov.f32	s1, s12
 800b312:	eeb0 0a66 	vmov.f32	s0, s13
 800b316:	f7f8 fc5b 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b31a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b31e:	2b01      	cmp	r3, #1
 800b320:	d10c      	bne.n	800b33c <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800b322:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b326:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b32a:	eeb0 1a47 	vmov.f32	s2, s14
 800b32e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b420 <turn90R+0x2c8>
 800b332:	eeb0 0a67 	vmov.f32	s0, s15
 800b336:	f7f9 fbe7 	bl	8004b08 <mollifier_slalom_table>
 800b33a:	e015      	b.n	800b368 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b33c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b340:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b344:	eef1 7a67 	vneg.f32	s15, s15
 800b348:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b34c:	eef0 2a66 	vmov.f32	s5, s13
 800b350:	eeb0 2a67 	vmov.f32	s4, s15
 800b354:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b418 <turn90R+0x2c0>
 800b358:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b418 <turn90R+0x2c0>
 800b35c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b420 <turn90R+0x2c8>
 800b360:	eeb0 0a47 	vmov.f32	s0, s14
 800b364:	f7f9 fa80 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b368:	2301      	movs	r3, #1
 800b36a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b36c:	2300      	movs	r3, #0
 800b36e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b370:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b374:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b378:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b37c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b380:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b384:	edd7 7a01 	vldr	s15, [r7, #4]
 800b388:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b38c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b390:	eef0 7ae7 	vabs.f32	s15, s15
 800b394:	ee17 0a90 	vmov	r0, s15
 800b398:	f7f5 f8fe 	bl	8000598 <__aeabi_f2d>
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b3a4:	f7f5 fa7a 	bl	800089c <__aeabi_ddiv>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4614      	mov	r4, r2
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f7f5 f8f0 	bl	8000598 <__aeabi_f2d>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	460b      	mov	r3, r1
 800b3bc:	4620      	mov	r0, r4
 800b3be:	4629      	mov	r1, r5
 800b3c0:	f7f5 fa6c 	bl	800089c <__aeabi_ddiv>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	f04f 0200 	mov.w	r2, #0
 800b3d0:	4b15      	ldr	r3, [pc, #84]	; (800b428 <turn90R+0x2d0>)
 800b3d2:	f7f4 ff83 	bl	80002dc <__adddf3>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b3da:	4610      	mov	r0, r2
 800b3dc:	4619      	mov	r1, r3
 800b3de:	f7f5 fc0b 	bl	8000bf8 <__aeabi_d2f>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	ee02 3a10 	vmov	s4, r3
 800b3ea:	edd7 1a01 	vldr	s3, [r7, #4]
 800b3ee:	ed97 1a01 	vldr	s2, [r7, #4]
 800b3f2:	eef0 0a68 	vmov.f32	s1, s17
 800b3f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b3fa:	f7f8 fbe9 	bl	8003bd0 <straight_table2>
}
 800b3fe:	bf00      	nop
 800b400:	3710      	adds	r7, #16
 800b402:	46bd      	mov	sp, r7
 800b404:	ecbd 8b02 	vpop	{d8}
 800b408:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b40c:	b004      	add	sp, #16
 800b40e:	4770      	bx	lr
 800b410:	20000814 	.word	0x20000814
 800b414:	42340000 	.word	0x42340000
 800b418:	00000000 	.word	0x00000000
 800b41c:	42cd0000 	.word	0x42cd0000
 800b420:	c2b40000 	.word	0xc2b40000
 800b424:	42b40000 	.word	0x42b40000
 800b428:	408f4000 	.word	0x408f4000

0800b42c <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b42c:	b084      	sub	sp, #16
 800b42e:	b5b0      	push	{r4, r5, r7, lr}
 800b430:	ed2d 8b02 	vpush	{d8}
 800b434:	b084      	sub	sp, #16
 800b436:	af00      	add	r7, sp, #0
 800b438:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b43c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b440:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b444:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b448:	2b01      	cmp	r3, #1
 800b44a:	f040 80a3 	bne.w	800b594 <turn90L+0x168>
		highspeed_mode = 1;
 800b44e:	4ba3      	ldr	r3, [pc, #652]	; (800b6dc <turn90L+0x2b0>)
 800b450:	2201      	movs	r2, #1
 800b452:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b454:	2301      	movs	r3, #1
 800b456:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b458:	2300      	movs	r3, #0
 800b45a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b460:	2300      	movs	r3, #0
 800b462:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b464:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b468:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b46c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b470:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b474:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b478:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b47c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b480:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b6e0 <turn90L+0x2b4>
 800b484:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	eeb0 2a47 	vmov.f32	s4, s14
 800b48e:	eef0 1a46 	vmov.f32	s3, s12
 800b492:	eeb0 1a66 	vmov.f32	s2, s13
 800b496:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b6e4 <turn90L+0x2b8>
 800b49a:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b6e8 <turn90L+0x2bc>
 800b49e:	f7f8 fb97 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b4a6:	2302      	movs	r3, #2
 800b4a8:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b4ae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b4b2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b4b6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b4ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b4be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b4c6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b4ca:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b4ce:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b6e0 <turn90L+0x2b4>
 800b4d2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	eeb0 2a47 	vmov.f32	s4, s14
 800b4dc:	eef0 1a45 	vmov.f32	s3, s10
 800b4e0:	eeb0 1a65 	vmov.f32	s2, s11
 800b4e4:	eef0 0a46 	vmov.f32	s1, s12
 800b4e8:	eeb0 0a66 	vmov.f32	s0, s13
 800b4ec:	f7f8 fb70 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b4f0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b4f4:	2b01      	cmp	r3, #1
 800b4f6:	d10c      	bne.n	800b512 <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b4f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b4fc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b500:	eeb0 1a47 	vmov.f32	s2, s14
 800b504:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b6ec <turn90L+0x2c0>
 800b508:	eeb0 0a67 	vmov.f32	s0, s15
 800b50c:	f7f9 fafc 	bl	8004b08 <mollifier_slalom_table>
 800b510:	e013      	b.n	800b53a <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b512:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b516:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b51a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b51e:	eef0 2a66 	vmov.f32	s5, s13
 800b522:	eeb0 2a47 	vmov.f32	s4, s14
 800b526:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b6e4 <turn90L+0x2b8>
 800b52a:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b6e4 <turn90L+0x2b8>
 800b52e:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b6ec <turn90L+0x2c0>
 800b532:	eeb0 0a67 	vmov.f32	s0, s15
 800b536:	f7f9 f997 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b53e:	2300      	movs	r3, #0
 800b540:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b542:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b546:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800b6ec <turn90L+0x2c0>
 800b54a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b54e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b552:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b556:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b55a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b55e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b562:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b566:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b56a:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b6e0 <turn90L+0x2b4>
 800b56e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b572:	68f8      	ldr	r0, [r7, #12]
 800b574:	eeb0 2a47 	vmov.f32	s4, s14
 800b578:	eef0 1a65 	vmov.f32	s3, s11
 800b57c:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b6e4 <turn90L+0x2b8>
 800b580:	eef0 0a46 	vmov.f32	s1, s12
 800b584:	eeb0 0a66 	vmov.f32	s0, s13
 800b588:	f7f8 fb22 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800b58c:	4b53      	ldr	r3, [pc, #332]	; (800b6dc <turn90L+0x2b0>)
 800b58e:	2200      	movs	r2, #0
 800b590:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b592:	e09a      	b.n	800b6ca <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b594:	2300      	movs	r3, #0
 800b596:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b598:	2300      	movs	r3, #0
 800b59a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b59c:	2302      	movs	r3, #2
 800b59e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b5a4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b5a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b5ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b5b0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b5b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b5c0:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b5c4:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b5c8:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b6e0 <turn90L+0x2b4>
 800b5cc:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b5d0:	68f8      	ldr	r0, [r7, #12]
 800b5d2:	eeb0 2a47 	vmov.f32	s4, s14
 800b5d6:	eef0 1a45 	vmov.f32	s3, s10
 800b5da:	eeb0 1a65 	vmov.f32	s2, s11
 800b5de:	eef0 0a46 	vmov.f32	s1, s12
 800b5e2:	eeb0 0a66 	vmov.f32	s0, s13
 800b5e6:	f7f8 faf3 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b5ea:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d10c      	bne.n	800b60c <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800b5f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5f6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5fa:	eeb0 1a47 	vmov.f32	s2, s14
 800b5fe:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b6ec <turn90L+0x2c0>
 800b602:	eeb0 0a67 	vmov.f32	s0, s15
 800b606:	f7f9 fa7f 	bl	8004b08 <mollifier_slalom_table>
 800b60a:	e013      	b.n	800b634 <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b60c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b610:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b614:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b618:	eef0 2a66 	vmov.f32	s5, s13
 800b61c:	eeb0 2a47 	vmov.f32	s4, s14
 800b620:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b6e4 <turn90L+0x2b8>
 800b624:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b6e4 <turn90L+0x2b8>
 800b628:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b6ec <turn90L+0x2c0>
 800b62c:	eeb0 0a67 	vmov.f32	s0, s15
 800b630:	f7f9 f91a 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b634:	2301      	movs	r3, #1
 800b636:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b638:	2300      	movs	r3, #0
 800b63a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b63c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b640:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b644:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b648:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b64c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b650:	edd7 7a01 	vldr	s15, [r7, #4]
 800b654:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b658:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b65c:	eef0 7ae7 	vabs.f32	s15, s15
 800b660:	ee17 0a90 	vmov	r0, s15
 800b664:	f7f4 ff98 	bl	8000598 <__aeabi_f2d>
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b670:	f7f5 f914 	bl	800089c <__aeabi_ddiv>
 800b674:	4602      	mov	r2, r0
 800b676:	460b      	mov	r3, r1
 800b678:	4614      	mov	r4, r2
 800b67a:	461d      	mov	r5, r3
 800b67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b67e:	4618      	mov	r0, r3
 800b680:	f7f4 ff8a 	bl	8000598 <__aeabi_f2d>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4620      	mov	r0, r4
 800b68a:	4629      	mov	r1, r5
 800b68c:	f7f5 f906 	bl	800089c <__aeabi_ddiv>
 800b690:	4602      	mov	r2, r0
 800b692:	460b      	mov	r3, r1
 800b694:	4610      	mov	r0, r2
 800b696:	4619      	mov	r1, r3
 800b698:	f04f 0200 	mov.w	r2, #0
 800b69c:	4b14      	ldr	r3, [pc, #80]	; (800b6f0 <turn90L+0x2c4>)
 800b69e:	f7f4 fe1d 	bl	80002dc <__adddf3>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b6a6:	4610      	mov	r0, r2
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	f7f5 faa5 	bl	8000bf8 <__aeabi_d2f>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	68f8      	ldr	r0, [r7, #12]
 800b6b2:	ee02 3a10 	vmov	s4, r3
 800b6b6:	edd7 1a01 	vldr	s3, [r7, #4]
 800b6ba:	ed97 1a01 	vldr	s2, [r7, #4]
 800b6be:	eef0 0a68 	vmov.f32	s1, s17
 800b6c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b6c6:	f7f8 fa83 	bl	8003bd0 <straight_table2>
}
 800b6ca:	bf00      	nop
 800b6cc:	3710      	adds	r7, #16
 800b6ce:	46bd      	mov	sp, r7
 800b6d0:	ecbd 8b02 	vpop	{d8}
 800b6d4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6d8:	b004      	add	sp, #16
 800b6da:	4770      	bx	lr
 800b6dc:	20000814 	.word	0x20000814
 800b6e0:	42340000 	.word	0x42340000
 800b6e4:	00000000 	.word	0x00000000
 800b6e8:	42cd0000 	.word	0x42cd0000
 800b6ec:	42b40000 	.word	0x42b40000
 800b6f0:	408f4000 	.word	0x408f4000

0800b6f4 <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	b5b0      	push	{r4, r5, r7, lr}
 800b6f8:	ed2d 8b02 	vpush	{d8}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b704:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b708:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b70c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b710:	2b01      	cmp	r3, #1
 800b712:	f040 80a5 	bne.w	800b860 <turn180R+0x16c>
		highspeed_mode = 1;
 800b716:	4ba5      	ldr	r3, [pc, #660]	; (800b9ac <turn180R+0x2b8>)
 800b718:	2201      	movs	r2, #1
 800b71a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b71c:	2301      	movs	r3, #1
 800b71e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b720:	2300      	movs	r3, #0
 800b722:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b724:	2300      	movs	r3, #0
 800b726:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b728:	2300      	movs	r3, #0
 800b72a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b72c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b730:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b734:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b738:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b73c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b740:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b744:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b748:	eddf 5a99 	vldr	s11, [pc, #612]	; 800b9b0 <turn180R+0x2bc>
 800b74c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	eeb0 2a47 	vmov.f32	s4, s14
 800b756:	eef0 1a46 	vmov.f32	s3, s12
 800b75a:	eeb0 1a66 	vmov.f32	s2, s13
 800b75e:	eddf 0a95 	vldr	s1, [pc, #596]	; 800b9b4 <turn180R+0x2c0>
 800b762:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800b9b8 <turn180R+0x2c4>
 800b766:	f7f8 fa33 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b76e:	2302      	movs	r3, #2
 800b770:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b772:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b776:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b77a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b77e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b782:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b786:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b78a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b78e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b792:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b796:	eddf 4a86 	vldr	s9, [pc, #536]	; 800b9b0 <turn180R+0x2bc>
 800b79a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b79e:	68f8      	ldr	r0, [r7, #12]
 800b7a0:	eeb0 2a47 	vmov.f32	s4, s14
 800b7a4:	eef0 1a45 	vmov.f32	s3, s10
 800b7a8:	eeb0 1a65 	vmov.f32	s2, s11
 800b7ac:	eef0 0a46 	vmov.f32	s1, s12
 800b7b0:	eeb0 0a66 	vmov.f32	s0, s13
 800b7b4:	f7f8 fa0c 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b7b8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d10c      	bne.n	800b7da <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b7c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7c4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7c8:	eeb0 1a47 	vmov.f32	s2, s14
 800b7cc:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800b9bc <turn180R+0x2c8>
 800b7d0:	eeb0 0a67 	vmov.f32	s0, s15
 800b7d4:	f7f9 f998 	bl	8004b08 <mollifier_slalom_table>
 800b7d8:	e015      	b.n	800b806 <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b7da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b7de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b7e2:	eef1 7a67 	vneg.f32	s15, s15
 800b7e6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7ea:	eef0 2a66 	vmov.f32	s5, s13
 800b7ee:	eeb0 2a67 	vmov.f32	s4, s15
 800b7f2:	eddf 1a70 	vldr	s3, [pc, #448]	; 800b9b4 <turn180R+0x2c0>
 800b7f6:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800b9b4 <turn180R+0x2c0>
 800b7fa:	eddf 0a70 	vldr	s1, [pc, #448]	; 800b9bc <turn180R+0x2c8>
 800b7fe:	eeb0 0a47 	vmov.f32	s0, s14
 800b802:	f7f9 f831 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b806:	2300      	movs	r3, #0
 800b808:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b80a:	2300      	movs	r3, #0
 800b80c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b80e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b812:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800b9c0 <turn180R+0x2cc>
 800b816:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b81a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b81e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b822:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b826:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b82a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b82e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b832:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b836:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800b9b0 <turn180R+0x2bc>
 800b83a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	eeb0 2a47 	vmov.f32	s4, s14
 800b844:	eef0 1a65 	vmov.f32	s3, s11
 800b848:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800b9b4 <turn180R+0x2c0>
 800b84c:	eef0 0a46 	vmov.f32	s1, s12
 800b850:	eeb0 0a66 	vmov.f32	s0, s13
 800b854:	f7f8 f9bc 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800b858:	4b54      	ldr	r3, [pc, #336]	; (800b9ac <turn180R+0x2b8>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b85e:	e09c      	b.n	800b99a <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b860:	2300      	movs	r3, #0
 800b862:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b864:	2300      	movs	r3, #0
 800b866:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b868:	2302      	movs	r3, #2
 800b86a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b86c:	2300      	movs	r3, #0
 800b86e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b870:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b874:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b878:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b87c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b880:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b884:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b888:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b88c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b890:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b894:	eddf 4a46 	vldr	s9, [pc, #280]	; 800b9b0 <turn180R+0x2bc>
 800b898:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	eeb0 2a47 	vmov.f32	s4, s14
 800b8a2:	eef0 1a45 	vmov.f32	s3, s10
 800b8a6:	eeb0 1a65 	vmov.f32	s2, s11
 800b8aa:	eef0 0a46 	vmov.f32	s1, s12
 800b8ae:	eeb0 0a66 	vmov.f32	s0, s13
 800b8b2:	f7f8 f98d 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800b8b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8ba:	2b01      	cmp	r3, #1
 800b8bc:	d10c      	bne.n	800b8d8 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800b8be:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8c2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8c6:	eeb0 1a47 	vmov.f32	s2, s14
 800b8ca:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800b9bc <turn180R+0x2c8>
 800b8ce:	eeb0 0a67 	vmov.f32	s0, s15
 800b8d2:	f7f9 f919 	bl	8004b08 <mollifier_slalom_table>
 800b8d6:	e015      	b.n	800b904 <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b8d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b8dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b8e0:	eef1 7a67 	vneg.f32	s15, s15
 800b8e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8e8:	eef0 2a66 	vmov.f32	s5, s13
 800b8ec:	eeb0 2a67 	vmov.f32	s4, s15
 800b8f0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b9b4 <turn180R+0x2c0>
 800b8f4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b9b4 <turn180R+0x2c0>
 800b8f8:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b9bc <turn180R+0x2c8>
 800b8fc:	eeb0 0a47 	vmov.f32	s0, s14
 800b900:	f7f8 ffb2 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b904:	2301      	movs	r3, #1
 800b906:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b908:	2300      	movs	r3, #0
 800b90a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b90c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b910:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b914:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b91c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b920:	edd7 7a01 	vldr	s15, [r7, #4]
 800b924:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b928:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b92c:	eef0 7ae7 	vabs.f32	s15, s15
 800b930:	ee17 0a90 	vmov	r0, s15
 800b934:	f7f4 fe30 	bl	8000598 <__aeabi_f2d>
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b940:	f7f4 ffac 	bl	800089c <__aeabi_ddiv>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4614      	mov	r4, r2
 800b94a:	461d      	mov	r5, r3
 800b94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94e:	4618      	mov	r0, r3
 800b950:	f7f4 fe22 	bl	8000598 <__aeabi_f2d>
 800b954:	4602      	mov	r2, r0
 800b956:	460b      	mov	r3, r1
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	f7f4 ff9e 	bl	800089c <__aeabi_ddiv>
 800b960:	4602      	mov	r2, r0
 800b962:	460b      	mov	r3, r1
 800b964:	4610      	mov	r0, r2
 800b966:	4619      	mov	r1, r3
 800b968:	f04f 0200 	mov.w	r2, #0
 800b96c:	4b15      	ldr	r3, [pc, #84]	; (800b9c4 <turn180R+0x2d0>)
 800b96e:	f7f4 fcb5 	bl	80002dc <__adddf3>
 800b972:	4602      	mov	r2, r0
 800b974:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b976:	4610      	mov	r0, r2
 800b978:	4619      	mov	r1, r3
 800b97a:	f7f5 f93d 	bl	8000bf8 <__aeabi_d2f>
 800b97e:	4603      	mov	r3, r0
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	ee02 3a10 	vmov	s4, r3
 800b986:	edd7 1a01 	vldr	s3, [r7, #4]
 800b98a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b98e:	eef0 0a68 	vmov.f32	s1, s17
 800b992:	eeb0 0a48 	vmov.f32	s0, s16
 800b996:	f7f8 f91b 	bl	8003bd0 <straight_table2>
}
 800b99a:	bf00      	nop
 800b99c:	3710      	adds	r7, #16
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	ecbd 8b02 	vpop	{d8}
 800b9a4:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b9a8:	b004      	add	sp, #16
 800b9aa:	4770      	bx	lr
 800b9ac:	20000814 	.word	0x20000814
 800b9b0:	42340000 	.word	0x42340000
 800b9b4:	00000000 	.word	0x00000000
 800b9b8:	42cd0000 	.word	0x42cd0000
 800b9bc:	c3340000 	.word	0xc3340000
 800b9c0:	42b40000 	.word	0x42b40000
 800b9c4:	408f4000 	.word	0x408f4000

0800b9c8 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b9c8:	b084      	sub	sp, #16
 800b9ca:	b5b0      	push	{r4, r5, r7, lr}
 800b9cc:	ed2d 8b02 	vpush	{d8}
 800b9d0:	b084      	sub	sp, #16
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b9d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b9dc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b9e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	f040 80a3 	bne.w	800bb30 <turn180L+0x168>
		highspeed_mode = 1;
 800b9ea:	4ba3      	ldr	r3, [pc, #652]	; (800bc78 <turn180L+0x2b0>)
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba00:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ba04:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba08:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba0c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba10:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba14:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ba18:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ba1c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800bc7c <turn180L+0x2b4>
 800ba20:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ba24:	68f8      	ldr	r0, [r7, #12]
 800ba26:	eeb0 2a47 	vmov.f32	s4, s14
 800ba2a:	eef0 1a46 	vmov.f32	s3, s12
 800ba2e:	eeb0 1a66 	vmov.f32	s2, s13
 800ba32:	eddf 0a93 	vldr	s1, [pc, #588]	; 800bc80 <turn180L+0x2b8>
 800ba36:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800bc84 <turn180L+0x2bc>
 800ba3a:	f7f8 f8c9 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ba42:	2302      	movs	r3, #2
 800ba44:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba46:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ba4a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ba4e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ba52:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba56:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba5e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba62:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba66:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba6a:	eddf 4a84 	vldr	s9, [pc, #528]	; 800bc7c <turn180L+0x2b4>
 800ba6e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	eeb0 2a47 	vmov.f32	s4, s14
 800ba78:	eef0 1a45 	vmov.f32	s3, s10
 800ba7c:	eeb0 1a65 	vmov.f32	s2, s11
 800ba80:	eef0 0a46 	vmov.f32	s1, s12
 800ba84:	eeb0 0a66 	vmov.f32	s0, s13
 800ba88:	f7f8 f8a2 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800ba8c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d10c      	bne.n	800baae <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800ba94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba98:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba9c:	eeb0 1a47 	vmov.f32	s2, s14
 800baa0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800bc88 <turn180L+0x2c0>
 800baa4:	eeb0 0a67 	vmov.f32	s0, s15
 800baa8:	f7f9 f82e 	bl	8004b08 <mollifier_slalom_table>
 800baac:	e013      	b.n	800bad6 <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800baae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bab2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bab6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800baba:	eef0 2a66 	vmov.f32	s5, s13
 800babe:	eeb0 2a47 	vmov.f32	s4, s14
 800bac2:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800bc80 <turn180L+0x2b8>
 800bac6:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800bc80 <turn180L+0x2b8>
 800baca:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800bc88 <turn180L+0x2c0>
 800bace:	eeb0 0a67 	vmov.f32	s0, s15
 800bad2:	f7f8 fec9 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bad6:	2300      	movs	r3, #0
 800bad8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bada:	2300      	movs	r3, #0
 800badc:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bade:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800bae2:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800bc8c <turn180L+0x2c4>
 800bae6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800baea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800baee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baf2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bafa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bafe:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb02:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bb06:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800bc7c <turn180L+0x2b4>
 800bb0a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb0e:	68f8      	ldr	r0, [r7, #12]
 800bb10:	eeb0 2a47 	vmov.f32	s4, s14
 800bb14:	eef0 1a65 	vmov.f32	s3, s11
 800bb18:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800bc80 <turn180L+0x2b8>
 800bb1c:	eef0 0a46 	vmov.f32	s1, s12
 800bb20:	eeb0 0a66 	vmov.f32	s0, s13
 800bb24:	f7f8 f854 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800bb28:	4b53      	ldr	r3, [pc, #332]	; (800bc78 <turn180L+0x2b0>)
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800bb2e:	e09a      	b.n	800bc66 <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bb30:	2300      	movs	r3, #0
 800bb32:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb34:	2300      	movs	r3, #0
 800bb36:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bb38:	2302      	movs	r3, #2
 800bb3a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb40:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bb44:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bb48:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bb4c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb54:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb58:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb5c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bb60:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb64:	eddf 4a45 	vldr	s9, [pc, #276]	; 800bc7c <turn180L+0x2b4>
 800bb68:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bb6c:	68f8      	ldr	r0, [r7, #12]
 800bb6e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb72:	eef0 1a45 	vmov.f32	s3, s10
 800bb76:	eeb0 1a65 	vmov.f32	s2, s11
 800bb7a:	eef0 0a46 	vmov.f32	s1, s12
 800bb7e:	eeb0 0a66 	vmov.f32	s0, s13
 800bb82:	f7f8 f825 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800bb86:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bb8a:	2b01      	cmp	r3, #1
 800bb8c:	d10c      	bne.n	800bba8 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800bb8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb92:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bb96:	eeb0 1a47 	vmov.f32	s2, s14
 800bb9a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800bc88 <turn180L+0x2c0>
 800bb9e:	eeb0 0a67 	vmov.f32	s0, s15
 800bba2:	f7f8 ffb1 	bl	8004b08 <mollifier_slalom_table>
 800bba6:	e013      	b.n	800bbd0 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800bba8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bbb0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bbb4:	eef0 2a66 	vmov.f32	s5, s13
 800bbb8:	eeb0 2a47 	vmov.f32	s4, s14
 800bbbc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800bc80 <turn180L+0x2b8>
 800bbc0:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800bc80 <turn180L+0x2b8>
 800bbc4:	eddf 0a30 	vldr	s1, [pc, #192]	; 800bc88 <turn180L+0x2c0>
 800bbc8:	eeb0 0a67 	vmov.f32	s0, s15
 800bbcc:	f7f8 fe4c 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bbd8:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bbdc:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bbe0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbec:	edd7 7a01 	vldr	s15, [r7, #4]
 800bbf0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bbf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bbf8:	eef0 7ae7 	vabs.f32	s15, s15
 800bbfc:	ee17 0a90 	vmov	r0, s15
 800bc00:	f7f4 fcca 	bl	8000598 <__aeabi_f2d>
 800bc04:	f04f 0200 	mov.w	r2, #0
 800bc08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc0c:	f7f4 fe46 	bl	800089c <__aeabi_ddiv>
 800bc10:	4602      	mov	r2, r0
 800bc12:	460b      	mov	r3, r1
 800bc14:	4614      	mov	r4, r2
 800bc16:	461d      	mov	r5, r3
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f7f4 fcbc 	bl	8000598 <__aeabi_f2d>
 800bc20:	4602      	mov	r2, r0
 800bc22:	460b      	mov	r3, r1
 800bc24:	4620      	mov	r0, r4
 800bc26:	4629      	mov	r1, r5
 800bc28:	f7f4 fe38 	bl	800089c <__aeabi_ddiv>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4610      	mov	r0, r2
 800bc32:	4619      	mov	r1, r3
 800bc34:	f04f 0200 	mov.w	r2, #0
 800bc38:	4b15      	ldr	r3, [pc, #84]	; (800bc90 <turn180L+0x2c8>)
 800bc3a:	f7f4 fb4f 	bl	80002dc <__adddf3>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bc42:	4610      	mov	r0, r2
 800bc44:	4619      	mov	r1, r3
 800bc46:	f7f4 ffd7 	bl	8000bf8 <__aeabi_d2f>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	68f8      	ldr	r0, [r7, #12]
 800bc4e:	ee02 3a10 	vmov	s4, r3
 800bc52:	edd7 1a01 	vldr	s3, [r7, #4]
 800bc56:	ed97 1a01 	vldr	s2, [r7, #4]
 800bc5a:	eef0 0a68 	vmov.f32	s1, s17
 800bc5e:	eeb0 0a48 	vmov.f32	s0, s16
 800bc62:	f7f7 ffb5 	bl	8003bd0 <straight_table2>
}
 800bc66:	bf00      	nop
 800bc68:	3710      	adds	r7, #16
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	ecbd 8b02 	vpop	{d8}
 800bc70:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bc74:	b004      	add	sp, #16
 800bc76:	4770      	bx	lr
 800bc78:	20000814 	.word	0x20000814
 800bc7c:	42340000 	.word	0x42340000
 800bc80:	00000000 	.word	0x00000000
 800bc84:	42cd0000 	.word	0x42cd0000
 800bc88:	43340000 	.word	0x43340000
 800bc8c:	42b40000 	.word	0x42b40000
 800bc90:	408f4000 	.word	0x408f4000
 800bc94:	00000000 	.word	0x00000000

0800bc98 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bc98:	b084      	sub	sp, #16
 800bc9a:	b5b0      	push	{r4, r5, r7, lr}
 800bc9c:	ed2d 8b02 	vpush	{d8}
 800bca0:	b084      	sub	sp, #16
 800bca2:	af00      	add	r7, sp, #0
 800bca4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bcac:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bcb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcb4:	2b01      	cmp	r3, #1
 800bcb6:	f040 80ae 	bne.w	800be16 <turn45inR+0x17e>
		highspeed_mode = 1;
 800bcba:	4bdd      	ldr	r3, [pc, #884]	; (800c030 <turn45inR+0x398>)
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bcd0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bcd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcd8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcdc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bce0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bce4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bce8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bcec:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c034 <turn45inR+0x39c>
 800bcf0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	eeb0 2a47 	vmov.f32	s4, s14
 800bcfa:	eef0 1a46 	vmov.f32	s3, s12
 800bcfe:	eeb0 1a66 	vmov.f32	s2, s13
 800bd02:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c040 <turn45inR+0x3a8>
 800bd06:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c038 <turn45inR+0x3a0>
 800bd0a:	f7f7 ff61 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bd12:	2302      	movs	r3, #2
 800bd14:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd16:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bd1a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bd1e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bd22:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bd26:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd2a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd32:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd36:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd3a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c034 <turn45inR+0x39c>
 800bd3e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd42:	68f8      	ldr	r0, [r7, #12]
 800bd44:	eeb0 2a47 	vmov.f32	s4, s14
 800bd48:	eef0 1a45 	vmov.f32	s3, s10
 800bd4c:	eeb0 1a65 	vmov.f32	s2, s11
 800bd50:	eef0 0a46 	vmov.f32	s1, s12
 800bd54:	eeb0 0a66 	vmov.f32	s0, s13
 800bd58:	f7f7 ff3a 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800bd5c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d10c      	bne.n	800bd7e <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800bd64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd68:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd6c:	eeb0 1a47 	vmov.f32	s2, s14
 800bd70:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c044 <turn45inR+0x3ac>
 800bd74:	eeb0 0a67 	vmov.f32	s0, s15
 800bd78:	f7f8 fec6 	bl	8004b08 <mollifier_slalom_table>
 800bd7c:	e015      	b.n	800bdaa <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd82:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd86:	eef1 7a67 	vneg.f32	s15, s15
 800bd8a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd8e:	eef0 2a66 	vmov.f32	s5, s13
 800bd92:	eeb0 2a67 	vmov.f32	s4, s15
 800bd96:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c040 <turn45inR+0x3a8>
 800bd9a:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c040 <turn45inR+0x3a8>
 800bd9e:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c044 <turn45inR+0x3ac>
 800bda2:	eeb0 0a47 	vmov.f32	s0, s14
 800bda6:	f7f8 fd5f 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7f4 fbef 	bl	8000598 <__aeabi_f2d>
 800bdba:	a39b      	add	r3, pc, #620	; (adr r3, 800c028 <turn45inR+0x390>)
 800bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdc0:	f7f4 fa8c 	bl	80002dc <__adddf3>
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	4610      	mov	r0, r2
 800bdca:	4619      	mov	r1, r3
 800bdcc:	f7f4 ff14 	bl	8000bf8 <__aeabi_d2f>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bdd6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bdda:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bdde:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bde2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bde6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bdea:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bdee:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c034 <turn45inR+0x39c>
 800bdf2:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bdf6:	68f8      	ldr	r0, [r7, #12]
 800bdf8:	eeb0 2a47 	vmov.f32	s4, s14
 800bdfc:	eef0 1a46 	vmov.f32	s3, s12
 800be00:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c040 <turn45inR+0x3a8>
 800be04:	eef0 0a66 	vmov.f32	s1, s13
 800be08:	ee00 3a10 	vmov	s0, r3
 800be0c:	f7f7 fee0 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800be10:	4b87      	ldr	r3, [pc, #540]	; (800c030 <turn45inR+0x398>)
 800be12:	2200      	movs	r2, #0
 800be14:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800be16:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	f040 809d 	bne.w	800bf5a <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800be20:	2300      	movs	r3, #0
 800be22:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be24:	2300      	movs	r3, #0
 800be26:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800be28:	2302      	movs	r3, #2
 800be2a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be2c:	2300      	movs	r3, #0
 800be2e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be30:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be34:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be38:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be3c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be40:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be44:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be48:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be4c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be50:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be54:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c034 <turn45inR+0x39c>
 800be58:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800be5c:	68f8      	ldr	r0, [r7, #12]
 800be5e:	eeb0 2a47 	vmov.f32	s4, s14
 800be62:	eef0 1a45 	vmov.f32	s3, s10
 800be66:	eeb0 1a65 	vmov.f32	s2, s11
 800be6a:	eef0 0a46 	vmov.f32	s1, s12
 800be6e:	eeb0 0a66 	vmov.f32	s0, s13
 800be72:	f7f7 fead 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800be76:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800be7a:	2b01      	cmp	r3, #1
 800be7c:	d10c      	bne.n	800be98 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800be7e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800be86:	eeb0 1a47 	vmov.f32	s2, s14
 800be8a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c044 <turn45inR+0x3ac>
 800be8e:	eeb0 0a67 	vmov.f32	s0, s15
 800be92:	f7f8 fe39 	bl	8004b08 <mollifier_slalom_table>
 800be96:	e015      	b.n	800bec4 <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800be98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be9c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bea0:	eef1 7a67 	vneg.f32	s15, s15
 800bea4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bea8:	eef0 2a66 	vmov.f32	s5, s13
 800beac:	eeb0 2a67 	vmov.f32	s4, s15
 800beb0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c040 <turn45inR+0x3a8>
 800beb4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c040 <turn45inR+0x3a8>
 800beb8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c044 <turn45inR+0x3ac>
 800bebc:	eeb0 0a47 	vmov.f32	s0, s14
 800bec0:	f7f8 fcd2 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bec4:	2303      	movs	r3, #3
 800bec6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bec8:	2300      	movs	r3, #0
 800beca:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800becc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bed0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bed4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bed8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bedc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bee0:	edd7 7a01 	vldr	s15, [r7, #4]
 800bee4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beec:	eef0 7ae7 	vabs.f32	s15, s15
 800bef0:	ee17 0a90 	vmov	r0, s15
 800bef4:	f7f4 fb50 	bl	8000598 <__aeabi_f2d>
 800bef8:	f04f 0200 	mov.w	r2, #0
 800befc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bf00:	f7f4 fccc 	bl	800089c <__aeabi_ddiv>
 800bf04:	4602      	mov	r2, r0
 800bf06:	460b      	mov	r3, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	461d      	mov	r5, r3
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7f4 fb42 	bl	8000598 <__aeabi_f2d>
 800bf14:	4602      	mov	r2, r0
 800bf16:	460b      	mov	r3, r1
 800bf18:	4620      	mov	r0, r4
 800bf1a:	4629      	mov	r1, r5
 800bf1c:	f7f4 fcbe 	bl	800089c <__aeabi_ddiv>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	4610      	mov	r0, r2
 800bf26:	4619      	mov	r1, r3
 800bf28:	f04f 0200 	mov.w	r2, #0
 800bf2c:	4b43      	ldr	r3, [pc, #268]	; (800c03c <turn45inR+0x3a4>)
 800bf2e:	f7f4 f9d5 	bl	80002dc <__adddf3>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bf36:	4610      	mov	r0, r2
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7f4 fe5d 	bl	8000bf8 <__aeabi_d2f>
 800bf3e:	4603      	mov	r3, r0
 800bf40:	68f8      	ldr	r0, [r7, #12]
 800bf42:	ee02 3a10 	vmov	s4, r3
 800bf46:	edd7 1a01 	vldr	s3, [r7, #4]
 800bf4a:	ed97 1a01 	vldr	s2, [r7, #4]
 800bf4e:	eef0 0a68 	vmov.f32	s1, s17
 800bf52:	eeb0 0a48 	vmov.f32	s0, s16
 800bf56:	f7f7 fe3b 	bl	8003bd0 <straight_table2>

	}
	if (test_mode >= 2) {
 800bf5a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	f240 80d0 	bls.w	800c104 <turn45inR+0x46c>

		highspeed_mode = 1;
 800bf64:	4b32      	ldr	r3, [pc, #200]	; (800c030 <turn45inR+0x398>)
 800bf66:	2201      	movs	r2, #1
 800bf68:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf7a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf7e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf8e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bf92:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bf96:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c034 <turn45inR+0x39c>
 800bf9a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bf9e:	68f8      	ldr	r0, [r7, #12]
 800bfa0:	eeb0 2a47 	vmov.f32	s4, s14
 800bfa4:	eef0 1a46 	vmov.f32	s3, s12
 800bfa8:	eeb0 1a66 	vmov.f32	s2, s13
 800bfac:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c040 <turn45inR+0x3a8>
 800bfb0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c038 <turn45inR+0x3a0>
 800bfb4:	f7f7 fe0c 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800bfb8:	2300      	movs	r3, #0
 800bfba:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bfbc:	2302      	movs	r3, #2
 800bfbe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfc0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bfc4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bfc8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bfcc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bfd0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bfd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bfd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfdc:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bfe0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bfe4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c034 <turn45inR+0x39c>
 800bfe8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bfec:	68f8      	ldr	r0, [r7, #12]
 800bfee:	eeb0 2a47 	vmov.f32	s4, s14
 800bff2:	eef0 1a45 	vmov.f32	s3, s10
 800bff6:	eeb0 1a65 	vmov.f32	s2, s11
 800bffa:	eef0 0a46 	vmov.f32	s1, s12
 800bffe:	eeb0 0a66 	vmov.f32	s0, s13
 800c002:	f7f7 fde5 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c006:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c00a:	2b01      	cmp	r3, #1
 800c00c:	d11c      	bne.n	800c048 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c00e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c012:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c016:	eeb0 1a47 	vmov.f32	s2, s14
 800c01a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c044 <turn45inR+0x3ac>
 800c01e:	eeb0 0a67 	vmov.f32	s0, s15
 800c022:	f7f8 fd71 	bl	8004b08 <mollifier_slalom_table>
 800c026:	e025      	b.n	800c074 <turn45inR+0x3dc>
 800c028:	c022ec18 	.word	0xc022ec18
 800c02c:	405fd1de 	.word	0x405fd1de
 800c030:	20000814 	.word	0x20000814
 800c034:	42340000 	.word	0x42340000
 800c038:	42cd0000 	.word	0x42cd0000
 800c03c:	408f4000 	.word	0x408f4000
 800c040:	00000000 	.word	0x00000000
 800c044:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c048:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c04c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c050:	eef1 7a67 	vneg.f32	s15, s15
 800c054:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c058:	eef0 2a66 	vmov.f32	s5, s13
 800c05c:	eeb0 2a67 	vmov.f32	s4, s15
 800c060:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c040 <turn45inR+0x3a8>
 800c064:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c040 <turn45inR+0x3a8>
 800c068:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c044 <turn45inR+0x3ac>
 800c06c:	eeb0 0a47 	vmov.f32	s0, s14
 800c070:	f7f8 fbfa 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c074:	2300      	movs	r3, #0
 800c076:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c078:	2300      	movs	r3, #0
 800c07a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c07c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c080:	3b02      	subs	r3, #2
 800c082:	4618      	mov	r0, r3
 800c084:	f7f4 fa76 	bl	8000574 <__aeabi_i2d>
 800c088:	a325      	add	r3, pc, #148	; (adr r3, 800c120 <turn45inR+0x488>)
 800c08a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08e:	f7f4 fadb 	bl	8000648 <__aeabi_dmul>
 800c092:	4602      	mov	r2, r0
 800c094:	460b      	mov	r3, r1
 800c096:	4614      	mov	r4, r2
 800c098:	461d      	mov	r5, r3
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	4618      	mov	r0, r3
 800c09e:	f7f4 fa7b 	bl	8000598 <__aeabi_f2d>
 800c0a2:	4602      	mov	r2, r0
 800c0a4:	460b      	mov	r3, r1
 800c0a6:	4620      	mov	r0, r4
 800c0a8:	4629      	mov	r1, r5
 800c0aa:	f7f4 f917 	bl	80002dc <__adddf3>
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	4610      	mov	r0, r2
 800c0b4:	4619      	mov	r1, r3
 800c0b6:	f7f4 fd9f 	bl	8000bf8 <__aeabi_d2f>
 800c0ba:	4603      	mov	r3, r0
 800c0bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c0c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c0c4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c0c8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c0cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c0d4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c0d8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c0dc:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c118 <turn45inR+0x480>
 800c0e0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	eeb0 2a47 	vmov.f32	s4, s14
 800c0ea:	eef0 1a65 	vmov.f32	s3, s11
 800c0ee:	eeb0 1a46 	vmov.f32	s2, s12
 800c0f2:	eef0 0a66 	vmov.f32	s1, s13
 800c0f6:	ee00 3a10 	vmov	s0, r3
 800c0fa:	f7f7 fd69 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800c0fe:	4b07      	ldr	r3, [pc, #28]	; (800c11c <turn45inR+0x484>)
 800c100:	2200      	movs	r2, #0
 800c102:	701a      	strb	r2, [r3, #0]
	}

}
 800c104:	bf00      	nop
 800c106:	3710      	adds	r7, #16
 800c108:	46bd      	mov	sp, r7
 800c10a:	ecbd 8b02 	vpop	{d8}
 800c10e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c112:	b004      	add	sp, #16
 800c114:	4770      	bx	lr
 800c116:	bf00      	nop
 800c118:	42340000 	.word	0x42340000
 800c11c:	20000814 	.word	0x20000814
 800c120:	c022ec18 	.word	0xc022ec18
 800c124:	404fd1de 	.word	0x404fd1de

0800c128 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c128:	b084      	sub	sp, #16
 800c12a:	b5b0      	push	{r4, r5, r7, lr}
 800c12c:	ed2d 8b02 	vpush	{d8}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c138:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c13c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c140:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c144:	2b01      	cmp	r3, #1
 800c146:	f040 80ac 	bne.w	800c2a2 <turn45inL+0x17a>
		highspeed_mode = 1;
 800c14a:	4bdb      	ldr	r3, [pc, #876]	; (800c4b8 <turn45inL+0x390>)
 800c14c:	2201      	movs	r2, #1
 800c14e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c150:	2301      	movs	r3, #1
 800c152:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c154:	2300      	movs	r3, #0
 800c156:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c158:	2300      	movs	r3, #0
 800c15a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c15c:	2300      	movs	r3, #0
 800c15e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c160:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c164:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c168:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c16c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c170:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c174:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c178:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c17c:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800c4c8 <turn45inL+0x3a0>
 800c180:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c184:	68f8      	ldr	r0, [r7, #12]
 800c186:	eeb0 2a47 	vmov.f32	s4, s14
 800c18a:	eef0 1a46 	vmov.f32	s3, s12
 800c18e:	eeb0 1a66 	vmov.f32	s2, s13
 800c192:	eddf 0acc 	vldr	s1, [pc, #816]	; 800c4c4 <turn45inL+0x39c>
 800c196:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800c4bc <turn45inL+0x394>
 800c19a:	f7f7 fd19 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c1a2:	2302      	movs	r3, #2
 800c1a4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1a6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c1aa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c1ae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c1b2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c1b6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c1ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1be:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c1c2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c1c6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c1ca:	eddf 4abf 	vldr	s9, [pc, #764]	; 800c4c8 <turn45inL+0x3a0>
 800c1ce:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	eeb0 2a47 	vmov.f32	s4, s14
 800c1d8:	eef0 1a45 	vmov.f32	s3, s10
 800c1dc:	eeb0 1a65 	vmov.f32	s2, s11
 800c1e0:	eef0 0a46 	vmov.f32	s1, s12
 800c1e4:	eeb0 0a66 	vmov.f32	s0, s13
 800c1e8:	f7f7 fcf2 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c1ec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1f0:	2b01      	cmp	r3, #1
 800c1f2:	d10c      	bne.n	800c20e <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c1f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1fc:	eeb0 1a47 	vmov.f32	s2, s14
 800c200:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800c4c8 <turn45inL+0x3a0>
 800c204:	eeb0 0a67 	vmov.f32	s0, s15
 800c208:	f7f8 fc7e 	bl	8004b08 <mollifier_slalom_table>
 800c20c:	e013      	b.n	800c236 <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c20e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c212:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c216:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c21a:	eef0 2a66 	vmov.f32	s5, s13
 800c21e:	eeb0 2a47 	vmov.f32	s4, s14
 800c222:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800c4c4 <turn45inL+0x39c>
 800c226:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800c4c4 <turn45inL+0x39c>
 800c22a:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800c4c8 <turn45inL+0x3a0>
 800c22e:	eeb0 0a67 	vmov.f32	s0, s15
 800c232:	f7f8 fb19 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c236:	2300      	movs	r3, #0
 800c238:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c23a:	2300      	movs	r3, #0
 800c23c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c23e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c240:	4618      	mov	r0, r3
 800c242:	f7f4 f9a9 	bl	8000598 <__aeabi_f2d>
 800c246:	a39a      	add	r3, pc, #616	; (adr r3, 800c4b0 <turn45inL+0x388>)
 800c248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c24c:	f7f4 f846 	bl	80002dc <__adddf3>
 800c250:	4602      	mov	r2, r0
 800c252:	460b      	mov	r3, r1
 800c254:	4610      	mov	r0, r2
 800c256:	4619      	mov	r1, r3
 800c258:	f7f4 fcce 	bl	8000bf8 <__aeabi_d2f>
 800c25c:	4603      	mov	r3, r0
 800c25e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c262:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c266:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c26a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c272:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c276:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c27a:	eddf 5a93 	vldr	s11, [pc, #588]	; 800c4c8 <turn45inL+0x3a0>
 800c27e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c282:	68f8      	ldr	r0, [r7, #12]
 800c284:	eeb0 2a47 	vmov.f32	s4, s14
 800c288:	eef0 1a46 	vmov.f32	s3, s12
 800c28c:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800c4c4 <turn45inL+0x39c>
 800c290:	eef0 0a66 	vmov.f32	s1, s13
 800c294:	ee00 3a10 	vmov	s0, r3
 800c298:	f7f7 fc9a 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800c29c:	4b86      	ldr	r3, [pc, #536]	; (800c4b8 <turn45inL+0x390>)
 800c29e:	2200      	movs	r2, #0
 800c2a0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c2a2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	f040 809b 	bne.w	800c3e2 <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c2b4:	2302      	movs	r3, #2
 800c2b6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2bc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c2c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c2c4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c2c8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2cc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2d8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c2dc:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c2e0:	eddf 4a79 	vldr	s9, [pc, #484]	; 800c4c8 <turn45inL+0x3a0>
 800c2e4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	eeb0 2a47 	vmov.f32	s4, s14
 800c2ee:	eef0 1a45 	vmov.f32	s3, s10
 800c2f2:	eeb0 1a65 	vmov.f32	s2, s11
 800c2f6:	eef0 0a46 	vmov.f32	s1, s12
 800c2fa:	eeb0 0a66 	vmov.f32	s0, s13
 800c2fe:	f7f7 fc67 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c302:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c306:	2b01      	cmp	r3, #1
 800c308:	d10c      	bne.n	800c324 <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c30a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c30e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c312:	eeb0 1a47 	vmov.f32	s2, s14
 800c316:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800c4c8 <turn45inL+0x3a0>
 800c31a:	eeb0 0a67 	vmov.f32	s0, s15
 800c31e:	f7f8 fbf3 	bl	8004b08 <mollifier_slalom_table>
 800c322:	e013      	b.n	800c34c <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c328:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c32c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c330:	eef0 2a66 	vmov.f32	s5, s13
 800c334:	eeb0 2a47 	vmov.f32	s4, s14
 800c338:	eddf 1a62 	vldr	s3, [pc, #392]	; 800c4c4 <turn45inL+0x39c>
 800c33c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800c4c4 <turn45inL+0x39c>
 800c340:	eddf 0a61 	vldr	s1, [pc, #388]	; 800c4c8 <turn45inL+0x3a0>
 800c344:	eeb0 0a67 	vmov.f32	s0, s15
 800c348:	f7f8 fa8e 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c34c:	2303      	movs	r3, #3
 800c34e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c350:	2300      	movs	r3, #0
 800c352:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c354:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c358:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c35c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c360:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c364:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c368:	edd7 7a01 	vldr	s15, [r7, #4]
 800c36c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c370:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c374:	eef0 7ae7 	vabs.f32	s15, s15
 800c378:	ee17 0a90 	vmov	r0, s15
 800c37c:	f7f4 f90c 	bl	8000598 <__aeabi_f2d>
 800c380:	f04f 0200 	mov.w	r2, #0
 800c384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c388:	f7f4 fa88 	bl	800089c <__aeabi_ddiv>
 800c38c:	4602      	mov	r2, r0
 800c38e:	460b      	mov	r3, r1
 800c390:	4614      	mov	r4, r2
 800c392:	461d      	mov	r5, r3
 800c394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c396:	4618      	mov	r0, r3
 800c398:	f7f4 f8fe 	bl	8000598 <__aeabi_f2d>
 800c39c:	4602      	mov	r2, r0
 800c39e:	460b      	mov	r3, r1
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	4629      	mov	r1, r5
 800c3a4:	f7f4 fa7a 	bl	800089c <__aeabi_ddiv>
 800c3a8:	4602      	mov	r2, r0
 800c3aa:	460b      	mov	r3, r1
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	f04f 0200 	mov.w	r2, #0
 800c3b4:	4b42      	ldr	r3, [pc, #264]	; (800c4c0 <turn45inL+0x398>)
 800c3b6:	f7f3 ff91 	bl	80002dc <__adddf3>
 800c3ba:	4602      	mov	r2, r0
 800c3bc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c3be:	4610      	mov	r0, r2
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	f7f4 fc19 	bl	8000bf8 <__aeabi_d2f>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	68f8      	ldr	r0, [r7, #12]
 800c3ca:	ee02 3a10 	vmov	s4, r3
 800c3ce:	edd7 1a01 	vldr	s3, [r7, #4]
 800c3d2:	ed97 1a01 	vldr	s2, [r7, #4]
 800c3d6:	eef0 0a68 	vmov.f32	s1, s17
 800c3da:	eeb0 0a48 	vmov.f32	s0, s16
 800c3de:	f7f7 fbf7 	bl	8003bd0 <straight_table2>

	}
	if (test_mode >= 2) {
 800c3e2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3e6:	2b01      	cmp	r3, #1
 800c3e8:	f240 80cc 	bls.w	800c584 <turn45inL+0x45c>

		highspeed_mode = 1;
 800c3ec:	4b32      	ldr	r3, [pc, #200]	; (800c4b8 <turn45inL+0x390>)
 800c3ee:	2201      	movs	r2, #1
 800c3f0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c3fe:	2300      	movs	r3, #0
 800c400:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c402:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c406:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c40a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c40e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c412:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c416:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c41a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c41e:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800c4c8 <turn45inL+0x3a0>
 800c422:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	eeb0 2a47 	vmov.f32	s4, s14
 800c42c:	eef0 1a46 	vmov.f32	s3, s12
 800c430:	eeb0 1a66 	vmov.f32	s2, s13
 800c434:	eddf 0a23 	vldr	s1, [pc, #140]	; 800c4c4 <turn45inL+0x39c>
 800c438:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800c4bc <turn45inL+0x394>
 800c43c:	f7f7 fbc8 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800c440:	2300      	movs	r3, #0
 800c442:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c444:	2302      	movs	r3, #2
 800c446:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c448:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c44c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c450:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c454:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c458:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c45c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c460:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c464:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c468:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c46c:	eddf 4a16 	vldr	s9, [pc, #88]	; 800c4c8 <turn45inL+0x3a0>
 800c470:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c474:	68f8      	ldr	r0, [r7, #12]
 800c476:	eeb0 2a47 	vmov.f32	s4, s14
 800c47a:	eef0 1a45 	vmov.f32	s3, s10
 800c47e:	eeb0 1a65 	vmov.f32	s2, s11
 800c482:	eef0 0a46 	vmov.f32	s1, s12
 800c486:	eeb0 0a66 	vmov.f32	s0, s13
 800c48a:	f7f7 fba1 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c48e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c492:	2b01      	cmp	r3, #1
 800c494:	d11a      	bne.n	800c4cc <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c496:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c49a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c49e:	eeb0 1a47 	vmov.f32	s2, s14
 800c4a2:	eddf 0a09 	vldr	s1, [pc, #36]	; 800c4c8 <turn45inL+0x3a0>
 800c4a6:	eeb0 0a67 	vmov.f32	s0, s15
 800c4aa:	f7f8 fb2d 	bl	8004b08 <mollifier_slalom_table>
 800c4ae:	e021      	b.n	800c4f4 <turn45inL+0x3cc>
 800c4b0:	c022ec18 	.word	0xc022ec18
 800c4b4:	405fd1de 	.word	0x405fd1de
 800c4b8:	20000814 	.word	0x20000814
 800c4bc:	42cd0000 	.word	0x42cd0000
 800c4c0:	408f4000 	.word	0x408f4000
 800c4c4:	00000000 	.word	0x00000000
 800c4c8:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c4cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c4d4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c4d8:	eef0 2a66 	vmov.f32	s5, s13
 800c4dc:	eeb0 2a47 	vmov.f32	s4, s14
 800c4e0:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c4c4 <turn45inL+0x39c>
 800c4e4:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c4c4 <turn45inL+0x39c>
 800c4e8:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c4c8 <turn45inL+0x3a0>
 800c4ec:	eeb0 0a67 	vmov.f32	s0, s15
 800c4f0:	f7f8 f9ba 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4fc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c500:	3b02      	subs	r3, #2
 800c502:	4618      	mov	r0, r3
 800c504:	f7f4 f836 	bl	8000574 <__aeabi_i2d>
 800c508:	a325      	add	r3, pc, #148	; (adr r3, 800c5a0 <turn45inL+0x478>)
 800c50a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c50e:	f7f4 f89b 	bl	8000648 <__aeabi_dmul>
 800c512:	4602      	mov	r2, r0
 800c514:	460b      	mov	r3, r1
 800c516:	4614      	mov	r4, r2
 800c518:	461d      	mov	r5, r3
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	4618      	mov	r0, r3
 800c51e:	f7f4 f83b 	bl	8000598 <__aeabi_f2d>
 800c522:	4602      	mov	r2, r0
 800c524:	460b      	mov	r3, r1
 800c526:	4620      	mov	r0, r4
 800c528:	4629      	mov	r1, r5
 800c52a:	f7f3 fed7 	bl	80002dc <__adddf3>
 800c52e:	4602      	mov	r2, r0
 800c530:	460b      	mov	r3, r1
 800c532:	4610      	mov	r0, r2
 800c534:	4619      	mov	r1, r3
 800c536:	f7f4 fb5f 	bl	8000bf8 <__aeabi_d2f>
 800c53a:	4603      	mov	r3, r0
 800c53c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c540:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c544:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c548:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c54c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c550:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c554:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c558:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c55c:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800c598 <turn45inL+0x470>
 800c560:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	eeb0 2a47 	vmov.f32	s4, s14
 800c56a:	eef0 1a65 	vmov.f32	s3, s11
 800c56e:	eeb0 1a46 	vmov.f32	s2, s12
 800c572:	eef0 0a66 	vmov.f32	s1, s13
 800c576:	ee00 3a10 	vmov	s0, r3
 800c57a:	f7f7 fb29 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800c57e:	4b07      	ldr	r3, [pc, #28]	; (800c59c <turn45inL+0x474>)
 800c580:	2200      	movs	r2, #0
 800c582:	701a      	strb	r2, [r3, #0]
	}

}
 800c584:	bf00      	nop
 800c586:	3710      	adds	r7, #16
 800c588:	46bd      	mov	sp, r7
 800c58a:	ecbd 8b02 	vpop	{d8}
 800c58e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c592:	b004      	add	sp, #16
 800c594:	4770      	bx	lr
 800c596:	bf00      	nop
 800c598:	42340000 	.word	0x42340000
 800c59c:	20000814 	.word	0x20000814
 800c5a0:	c022ec18 	.word	0xc022ec18
 800c5a4:	404fd1de 	.word	0x404fd1de

0800c5a8 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800c5a8:	b084      	sub	sp, #16
 800c5aa:	b5b0      	push	{r4, r5, r7, lr}
 800c5ac:	ed2d 8b02 	vpush	{d8}
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c5b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c5bc:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c5c0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	f040 80ae 	bne.w	800c726 <turn135inR+0x17e>
		highspeed_mode = 1;
 800c5ca:	4bdd      	ldr	r3, [pc, #884]	; (800c940 <turn135inR+0x398>)
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c5e0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c5e4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c5e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c5f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5f4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c5f8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c5fc:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800c944 <turn135inR+0x39c>
 800c600:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c604:	68f8      	ldr	r0, [r7, #12]
 800c606:	eeb0 2a47 	vmov.f32	s4, s14
 800c60a:	eef0 1a46 	vmov.f32	s3, s12
 800c60e:	eeb0 1a66 	vmov.f32	s2, s13
 800c612:	eddf 0acf 	vldr	s1, [pc, #828]	; 800c950 <turn135inR+0x3a8>
 800c616:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800c948 <turn135inR+0x3a0>
 800c61a:	f7f7 fad9 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800c61e:	2300      	movs	r3, #0
 800c620:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c622:	2302      	movs	r3, #2
 800c624:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c626:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c62a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c62e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c632:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c636:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c63a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c63e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c642:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c646:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c64a:	eddf 4abe 	vldr	s9, [pc, #760]	; 800c944 <turn135inR+0x39c>
 800c64e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c652:	68f8      	ldr	r0, [r7, #12]
 800c654:	eeb0 2a47 	vmov.f32	s4, s14
 800c658:	eef0 1a45 	vmov.f32	s3, s10
 800c65c:	eeb0 1a65 	vmov.f32	s2, s11
 800c660:	eef0 0a46 	vmov.f32	s1, s12
 800c664:	eeb0 0a66 	vmov.f32	s0, s13
 800c668:	f7f7 fab2 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c66c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c670:	2b01      	cmp	r3, #1
 800c672:	d10c      	bne.n	800c68e <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c678:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c67c:	eeb0 1a47 	vmov.f32	s2, s14
 800c680:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c954 <turn135inR+0x3ac>
 800c684:	eeb0 0a67 	vmov.f32	s0, s15
 800c688:	f7f8 fa3e 	bl	8004b08 <mollifier_slalom_table>
 800c68c:	e015      	b.n	800c6ba <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c68e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c692:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c696:	eef1 7a67 	vneg.f32	s15, s15
 800c69a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c69e:	eef0 2a66 	vmov.f32	s5, s13
 800c6a2:	eeb0 2a67 	vmov.f32	s4, s15
 800c6a6:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800c950 <turn135inR+0x3a8>
 800c6aa:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800c950 <turn135inR+0x3a8>
 800c6ae:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800c954 <turn135inR+0x3ac>
 800c6b2:	eeb0 0a47 	vmov.f32	s0, s14
 800c6b6:	f7f8 f8d7 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f7f3 ff67 	bl	8000598 <__aeabi_f2d>
 800c6ca:	a39b      	add	r3, pc, #620	; (adr r3, 800c938 <turn135inR+0x390>)
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f7f3 fe04 	bl	80002dc <__adddf3>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4610      	mov	r0, r2
 800c6da:	4619      	mov	r1, r3
 800c6dc:	f7f4 fa8c 	bl	8000bf8 <__aeabi_d2f>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c6e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6ea:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6f6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c6fa:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6fe:	eddf 5a91 	vldr	s11, [pc, #580]	; 800c944 <turn135inR+0x39c>
 800c702:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	eeb0 2a47 	vmov.f32	s4, s14
 800c70c:	eef0 1a46 	vmov.f32	s3, s12
 800c710:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800c950 <turn135inR+0x3a8>
 800c714:	eef0 0a66 	vmov.f32	s1, s13
 800c718:	ee00 3a10 	vmov	s0, r3
 800c71c:	f7f7 fa58 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800c720:	4b87      	ldr	r3, [pc, #540]	; (800c940 <turn135inR+0x398>)
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c726:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	f040 809d 	bne.w	800c86a <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c730:	2300      	movs	r3, #0
 800c732:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c734:	2300      	movs	r3, #0
 800c736:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c738:	2302      	movs	r3, #2
 800c73a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c740:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c744:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c748:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c74c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c750:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c75c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c760:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c764:	eddf 4a77 	vldr	s9, [pc, #476]	; 800c944 <turn135inR+0x39c>
 800c768:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c76c:	68f8      	ldr	r0, [r7, #12]
 800c76e:	eeb0 2a47 	vmov.f32	s4, s14
 800c772:	eef0 1a45 	vmov.f32	s3, s10
 800c776:	eeb0 1a65 	vmov.f32	s2, s11
 800c77a:	eef0 0a46 	vmov.f32	s1, s12
 800c77e:	eeb0 0a66 	vmov.f32	s0, s13
 800c782:	f7f7 fa25 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c786:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c78a:	2b01      	cmp	r3, #1
 800c78c:	d10c      	bne.n	800c7a8 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c78e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c792:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c796:	eeb0 1a47 	vmov.f32	s2, s14
 800c79a:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800c954 <turn135inR+0x3ac>
 800c79e:	eeb0 0a67 	vmov.f32	s0, s15
 800c7a2:	f7f8 f9b1 	bl	8004b08 <mollifier_slalom_table>
 800c7a6:	e015      	b.n	800c7d4 <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c7a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c7b0:	eef1 7a67 	vneg.f32	s15, s15
 800c7b4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c7b8:	eef0 2a66 	vmov.f32	s5, s13
 800c7bc:	eeb0 2a67 	vmov.f32	s4, s15
 800c7c0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c950 <turn135inR+0x3a8>
 800c7c4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c950 <turn135inR+0x3a8>
 800c7c8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c954 <turn135inR+0x3ac>
 800c7cc:	eeb0 0a47 	vmov.f32	s0, s14
 800c7d0:	f7f8 f84a 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c7dc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c7e0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c7e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c7e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c7ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7f0:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7fc:	eef0 7ae7 	vabs.f32	s15, s15
 800c800:	ee17 0a90 	vmov	r0, s15
 800c804:	f7f3 fec8 	bl	8000598 <__aeabi_f2d>
 800c808:	f04f 0200 	mov.w	r2, #0
 800c80c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c810:	f7f4 f844 	bl	800089c <__aeabi_ddiv>
 800c814:	4602      	mov	r2, r0
 800c816:	460b      	mov	r3, r1
 800c818:	4614      	mov	r4, r2
 800c81a:	461d      	mov	r5, r3
 800c81c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81e:	4618      	mov	r0, r3
 800c820:	f7f3 feba 	bl	8000598 <__aeabi_f2d>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	4620      	mov	r0, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7f4 f836 	bl	800089c <__aeabi_ddiv>
 800c830:	4602      	mov	r2, r0
 800c832:	460b      	mov	r3, r1
 800c834:	4610      	mov	r0, r2
 800c836:	4619      	mov	r1, r3
 800c838:	f04f 0200 	mov.w	r2, #0
 800c83c:	4b43      	ldr	r3, [pc, #268]	; (800c94c <turn135inR+0x3a4>)
 800c83e:	f7f3 fd4d 	bl	80002dc <__adddf3>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c846:	4610      	mov	r0, r2
 800c848:	4619      	mov	r1, r3
 800c84a:	f7f4 f9d5 	bl	8000bf8 <__aeabi_d2f>
 800c84e:	4603      	mov	r3, r0
 800c850:	68f8      	ldr	r0, [r7, #12]
 800c852:	ee02 3a10 	vmov	s4, r3
 800c856:	edd7 1a01 	vldr	s3, [r7, #4]
 800c85a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c85e:	eef0 0a68 	vmov.f32	s1, s17
 800c862:	eeb0 0a48 	vmov.f32	s0, s16
 800c866:	f7f7 f9b3 	bl	8003bd0 <straight_table2>

	}
	if (test_mode >= 2) {
 800c86a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c86e:	2b01      	cmp	r3, #1
 800c870:	f240 80d0 	bls.w	800ca14 <turn135inR+0x46c>

		highspeed_mode = 1;
 800c874:	4b32      	ldr	r3, [pc, #200]	; (800c940 <turn135inR+0x398>)
 800c876:	2201      	movs	r2, #1
 800c878:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c87a:	2301      	movs	r3, #1
 800c87c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c87e:	2300      	movs	r3, #0
 800c880:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c882:	2300      	movs	r3, #0
 800c884:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c886:	2300      	movs	r3, #0
 800c888:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c88a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c88e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c892:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c896:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c89a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c89e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c8a2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c8a6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c944 <turn135inR+0x39c>
 800c8aa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8ae:	68f8      	ldr	r0, [r7, #12]
 800c8b0:	eeb0 2a47 	vmov.f32	s4, s14
 800c8b4:	eef0 1a46 	vmov.f32	s3, s12
 800c8b8:	eeb0 1a66 	vmov.f32	s2, s13
 800c8bc:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c950 <turn135inR+0x3a8>
 800c8c0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c948 <turn135inR+0x3a0>
 800c8c4:	f7f7 f984 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c8cc:	2302      	movs	r3, #2
 800c8ce:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8d0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8d4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8d8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8dc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8e4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8ec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8f0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8f4:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c944 <turn135inR+0x39c>
 800c8f8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	eeb0 2a47 	vmov.f32	s4, s14
 800c902:	eef0 1a45 	vmov.f32	s3, s10
 800c906:	eeb0 1a65 	vmov.f32	s2, s11
 800c90a:	eef0 0a46 	vmov.f32	s1, s12
 800c90e:	eeb0 0a66 	vmov.f32	s0, s13
 800c912:	f7f7 f95d 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800c916:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c91a:	2b01      	cmp	r3, #1
 800c91c:	d11c      	bne.n	800c958 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800c91e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c922:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c926:	eeb0 1a47 	vmov.f32	s2, s14
 800c92a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c954 <turn135inR+0x3ac>
 800c92e:	eeb0 0a67 	vmov.f32	s0, s15
 800c932:	f7f8 f8e9 	bl	8004b08 <mollifier_slalom_table>
 800c936:	e025      	b.n	800c984 <turn135inR+0x3dc>
 800c938:	c022ec18 	.word	0xc022ec18
 800c93c:	405fd1de 	.word	0x405fd1de
 800c940:	20000814 	.word	0x20000814
 800c944:	42340000 	.word	0x42340000
 800c948:	42cd0000 	.word	0x42cd0000
 800c94c:	408f4000 	.word	0x408f4000
 800c950:	00000000 	.word	0x00000000
 800c954:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c958:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c95c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c960:	eef1 7a67 	vneg.f32	s15, s15
 800c964:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c968:	eef0 2a66 	vmov.f32	s5, s13
 800c96c:	eeb0 2a67 	vmov.f32	s4, s15
 800c970:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800c950 <turn135inR+0x3a8>
 800c974:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800c950 <turn135inR+0x3a8>
 800c978:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800c954 <turn135inR+0x3ac>
 800c97c:	eeb0 0a47 	vmov.f32	s0, s14
 800c980:	f7f7 ff72 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c984:	2300      	movs	r3, #0
 800c986:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c988:	2300      	movs	r3, #0
 800c98a:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c98c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c990:	3b02      	subs	r3, #2
 800c992:	4618      	mov	r0, r3
 800c994:	f7f3 fdee 	bl	8000574 <__aeabi_i2d>
 800c998:	a325      	add	r3, pc, #148	; (adr r3, 800ca30 <turn135inR+0x488>)
 800c99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c99e:	f7f3 fe53 	bl	8000648 <__aeabi_dmul>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	460b      	mov	r3, r1
 800c9a6:	4614      	mov	r4, r2
 800c9a8:	461d      	mov	r5, r3
 800c9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f7f3 fdf3 	bl	8000598 <__aeabi_f2d>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	4629      	mov	r1, r5
 800c9ba:	f7f3 fc8f 	bl	80002dc <__adddf3>
 800c9be:	4602      	mov	r2, r0
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	4610      	mov	r0, r2
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f7f4 f917 	bl	8000bf8 <__aeabi_d2f>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c9d0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9d4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9d8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9e4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c9e8:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9ec:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800ca28 <turn135inR+0x480>
 800c9f0:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c9f4:	68f8      	ldr	r0, [r7, #12]
 800c9f6:	eeb0 2a47 	vmov.f32	s4, s14
 800c9fa:	eef0 1a65 	vmov.f32	s3, s11
 800c9fe:	eeb0 1a46 	vmov.f32	s2, s12
 800ca02:	eef0 0a66 	vmov.f32	s1, s13
 800ca06:	ee00 3a10 	vmov	s0, r3
 800ca0a:	f7f7 f8e1 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800ca0e:	4b07      	ldr	r3, [pc, #28]	; (800ca2c <turn135inR+0x484>)
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
	}

}
 800ca14:	bf00      	nop
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	ecbd 8b02 	vpop	{d8}
 800ca1e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ca22:	b004      	add	sp, #16
 800ca24:	4770      	bx	lr
 800ca26:	bf00      	nop
 800ca28:	42340000 	.word	0x42340000
 800ca2c:	20000814 	.word	0x20000814
 800ca30:	c022ec18 	.word	0xc022ec18
 800ca34:	404fd1de 	.word	0x404fd1de

0800ca38 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ca38:	b084      	sub	sp, #16
 800ca3a:	b5b0      	push	{r4, r5, r7, lr}
 800ca3c:	ed2d 8b02 	vpush	{d8}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ca48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ca4c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800ca50:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ca54:	2b01      	cmp	r3, #1
 800ca56:	f040 80ac 	bne.w	800cbb2 <turn135inL+0x17a>
		highspeed_mode = 1;
 800ca5a:	4bdb      	ldr	r3, [pc, #876]	; (800cdc8 <turn135inL+0x390>)
 800ca5c:	2201      	movs	r2, #1
 800ca5e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800ca60:	2301      	movs	r3, #1
 800ca62:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ca64:	2300      	movs	r3, #0
 800ca66:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800ca68:	2300      	movs	r3, #0
 800ca6a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ca70:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ca74:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca84:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ca88:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800ca8c:	eddf 5acf 	vldr	s11, [pc, #828]	; 800cdcc <turn135inL+0x394>
 800ca90:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	eeb0 2a47 	vmov.f32	s4, s14
 800ca9a:	eef0 1a46 	vmov.f32	s3, s12
 800ca9e:	eeb0 1a66 	vmov.f32	s2, s13
 800caa2:	eddf 0acd 	vldr	s1, [pc, #820]	; 800cdd8 <turn135inL+0x3a0>
 800caa6:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800cdd0 <turn135inL+0x398>
 800caaa:	f7f7 f891 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800caae:	2300      	movs	r3, #0
 800cab0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cab2:	2302      	movs	r3, #2
 800cab4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cab6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800caba:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cabe:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cac2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cac6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800caca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cace:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cad2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cad6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cada:	eddf 4abc 	vldr	s9, [pc, #752]	; 800cdcc <turn135inL+0x394>
 800cade:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	eeb0 2a47 	vmov.f32	s4, s14
 800cae8:	eef0 1a45 	vmov.f32	s3, s10
 800caec:	eeb0 1a65 	vmov.f32	s2, s11
 800caf0:	eef0 0a46 	vmov.f32	s1, s12
 800caf4:	eeb0 0a66 	vmov.f32	s0, s13
 800caf8:	f7f7 f86a 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800cafc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb00:	2b01      	cmp	r3, #1
 800cb02:	d10c      	bne.n	800cb1e <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cb04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb08:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb0c:	eeb0 1a47 	vmov.f32	s2, s14
 800cb10:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800cddc <turn135inL+0x3a4>
 800cb14:	eeb0 0a67 	vmov.f32	s0, s15
 800cb18:	f7f7 fff6 	bl	8004b08 <mollifier_slalom_table>
 800cb1c:	e013      	b.n	800cb46 <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb22:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb26:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb2a:	eef0 2a66 	vmov.f32	s5, s13
 800cb2e:	eeb0 2a47 	vmov.f32	s4, s14
 800cb32:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800cdd8 <turn135inL+0x3a0>
 800cb36:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800cdd8 <turn135inL+0x3a0>
 800cb3a:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800cddc <turn135inL+0x3a4>
 800cb3e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb42:	f7f7 fe91 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cb46:	2300      	movs	r3, #0
 800cb48:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7f3 fd21 	bl	8000598 <__aeabi_f2d>
 800cb56:	a39a      	add	r3, pc, #616	; (adr r3, 800cdc0 <turn135inL+0x388>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	f7f3 fbbe 	bl	80002dc <__adddf3>
 800cb60:	4602      	mov	r2, r0
 800cb62:	460b      	mov	r3, r1
 800cb64:	4610      	mov	r0, r2
 800cb66:	4619      	mov	r1, r3
 800cb68:	f7f4 f846 	bl	8000bf8 <__aeabi_d2f>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cb72:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cb76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb82:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cb86:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cb8a:	eddf 5a90 	vldr	s11, [pc, #576]	; 800cdcc <turn135inL+0x394>
 800cb8e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cb92:	68f8      	ldr	r0, [r7, #12]
 800cb94:	eeb0 2a47 	vmov.f32	s4, s14
 800cb98:	eef0 1a46 	vmov.f32	s3, s12
 800cb9c:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800cdd8 <turn135inL+0x3a0>
 800cba0:	eef0 0a66 	vmov.f32	s1, s13
 800cba4:	ee00 3a10 	vmov	s0, r3
 800cba8:	f7f7 f812 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800cbac:	4b86      	ldr	r3, [pc, #536]	; (800cdc8 <turn135inL+0x390>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800cbb2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	f040 809b 	bne.w	800ccf2 <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cbcc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cbd0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cbd4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cbd8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cbdc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cbe0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cbe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cbe8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cbec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cbf0:	eddf 4a76 	vldr	s9, [pc, #472]	; 800cdcc <turn135inL+0x394>
 800cbf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	eeb0 2a47 	vmov.f32	s4, s14
 800cbfe:	eef0 1a45 	vmov.f32	s3, s10
 800cc02:	eeb0 1a65 	vmov.f32	s2, s11
 800cc06:	eef0 0a46 	vmov.f32	s1, s12
 800cc0a:	eeb0 0a66 	vmov.f32	s0, s13
 800cc0e:	f7f6 ffdf 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800cc12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d10c      	bne.n	800cc34 <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cc1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cc22:	eeb0 1a47 	vmov.f32	s2, s14
 800cc26:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800cddc <turn135inL+0x3a4>
 800cc2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cc2e:	f7f7 ff6b 	bl	8004b08 <mollifier_slalom_table>
 800cc32:	e013      	b.n	800cc5c <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cc34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cc3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cc40:	eef0 2a66 	vmov.f32	s5, s13
 800cc44:	eeb0 2a47 	vmov.f32	s4, s14
 800cc48:	eddf 1a63 	vldr	s3, [pc, #396]	; 800cdd8 <turn135inL+0x3a0>
 800cc4c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800cdd8 <turn135inL+0x3a0>
 800cc50:	eddf 0a62 	vldr	s1, [pc, #392]	; 800cddc <turn135inL+0x3a4>
 800cc54:	eeb0 0a67 	vmov.f32	s0, s15
 800cc58:	f7f7 fe06 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800cc5c:	2303      	movs	r3, #3
 800cc5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cc64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cc68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cc6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc78:	edd7 7a01 	vldr	s15, [r7, #4]
 800cc7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cc80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cc84:	eef0 7ae7 	vabs.f32	s15, s15
 800cc88:	ee17 0a90 	vmov	r0, s15
 800cc8c:	f7f3 fc84 	bl	8000598 <__aeabi_f2d>
 800cc90:	f04f 0200 	mov.w	r2, #0
 800cc94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cc98:	f7f3 fe00 	bl	800089c <__aeabi_ddiv>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4614      	mov	r4, r2
 800cca2:	461d      	mov	r5, r3
 800cca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7f3 fc76 	bl	8000598 <__aeabi_f2d>
 800ccac:	4602      	mov	r2, r0
 800ccae:	460b      	mov	r3, r1
 800ccb0:	4620      	mov	r0, r4
 800ccb2:	4629      	mov	r1, r5
 800ccb4:	f7f3 fdf2 	bl	800089c <__aeabi_ddiv>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	460b      	mov	r3, r1
 800ccbc:	4610      	mov	r0, r2
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	f04f 0200 	mov.w	r2, #0
 800ccc4:	4b43      	ldr	r3, [pc, #268]	; (800cdd4 <turn135inL+0x39c>)
 800ccc6:	f7f3 fb09 	bl	80002dc <__adddf3>
 800ccca:	4602      	mov	r2, r0
 800cccc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ccce:	4610      	mov	r0, r2
 800ccd0:	4619      	mov	r1, r3
 800ccd2:	f7f3 ff91 	bl	8000bf8 <__aeabi_d2f>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	68f8      	ldr	r0, [r7, #12]
 800ccda:	ee02 3a10 	vmov	s4, r3
 800ccde:	edd7 1a01 	vldr	s3, [r7, #4]
 800cce2:	ed97 1a01 	vldr	s2, [r7, #4]
 800cce6:	eef0 0a68 	vmov.f32	s1, s17
 800ccea:	eeb0 0a48 	vmov.f32	s0, s16
 800ccee:	f7f6 ff6f 	bl	8003bd0 <straight_table2>

	}
	if (test_mode >= 2) {
 800ccf2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	f240 80ce 	bls.w	800ce98 <turn135inL+0x460>

		highspeed_mode = 1;
 800ccfc:	4b32      	ldr	r3, [pc, #200]	; (800cdc8 <turn135inL+0x390>)
 800ccfe:	2201      	movs	r2, #1
 800cd00:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800cd02:	2301      	movs	r3, #1
 800cd04:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd06:	2300      	movs	r3, #0
 800cd08:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cd12:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cd16:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd1e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd22:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd26:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cd2a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800cd2e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800cdcc <turn135inL+0x394>
 800cd32:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cd36:	68f8      	ldr	r0, [r7, #12]
 800cd38:	eeb0 2a47 	vmov.f32	s4, s14
 800cd3c:	eef0 1a46 	vmov.f32	s3, s12
 800cd40:	eeb0 1a66 	vmov.f32	s2, s13
 800cd44:	eddf 0a24 	vldr	s1, [pc, #144]	; 800cdd8 <turn135inL+0x3a0>
 800cd48:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800cdd0 <turn135inL+0x398>
 800cd4c:	f7f6 ff40 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800cd50:	2300      	movs	r3, #0
 800cd52:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800cd54:	2302      	movs	r3, #2
 800cd56:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd58:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cd5c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd60:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cd64:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd68:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd6c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd70:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd74:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cd78:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cd7c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800cdcc <turn135inL+0x394>
 800cd80:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	eeb0 2a47 	vmov.f32	s4, s14
 800cd8a:	eef0 1a45 	vmov.f32	s3, s10
 800cd8e:	eeb0 1a65 	vmov.f32	s2, s11
 800cd92:	eef0 0a46 	vmov.f32	s1, s12
 800cd96:	eeb0 0a66 	vmov.f32	s0, s13
 800cd9a:	f7f6 ff19 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800cd9e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d11c      	bne.n	800cde0 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800cda6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdaa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdae:	eeb0 1a47 	vmov.f32	s2, s14
 800cdb2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800cddc <turn135inL+0x3a4>
 800cdb6:	eeb0 0a67 	vmov.f32	s0, s15
 800cdba:	f7f7 fea5 	bl	8004b08 <mollifier_slalom_table>
 800cdbe:	e023      	b.n	800ce08 <turn135inL+0x3d0>
 800cdc0:	c022ec18 	.word	0xc022ec18
 800cdc4:	405fd1de 	.word	0x405fd1de
 800cdc8:	20000814 	.word	0x20000814
 800cdcc:	42340000 	.word	0x42340000
 800cdd0:	42cd0000 	.word	0x42cd0000
 800cdd4:	408f4000 	.word	0x408f4000
 800cdd8:	00000000 	.word	0x00000000
 800cddc:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cde0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cde4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cde8:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cdec:	eef0 2a66 	vmov.f32	s5, s13
 800cdf0:	eeb0 2a47 	vmov.f32	s4, s14
 800cdf4:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800cdd8 <turn135inL+0x3a0>
 800cdf8:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800cdd8 <turn135inL+0x3a0>
 800cdfc:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800cddc <turn135inL+0x3a4>
 800ce00:	eeb0 0a67 	vmov.f32	s0, s15
 800ce04:	f7f7 fd30 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce10:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ce14:	3b02      	subs	r3, #2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7f3 fbac 	bl	8000574 <__aeabi_i2d>
 800ce1c:	a326      	add	r3, pc, #152	; (adr r3, 800ceb8 <turn135inL+0x480>)
 800ce1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce22:	f7f3 fc11 	bl	8000648 <__aeabi_dmul>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	4614      	mov	r4, r2
 800ce2c:	461d      	mov	r5, r3
 800ce2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7f3 fbb1 	bl	8000598 <__aeabi_f2d>
 800ce36:	4602      	mov	r2, r0
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4620      	mov	r0, r4
 800ce3c:	4629      	mov	r1, r5
 800ce3e:	f7f3 fa4d 	bl	80002dc <__adddf3>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4610      	mov	r0, r2
 800ce48:	4619      	mov	r1, r3
 800ce4a:	f7f3 fed5 	bl	8000bf8 <__aeabi_d2f>
 800ce4e:	4603      	mov	r3, r0
 800ce50:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800ce54:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce58:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce68:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce6c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ce70:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800ceb0 <turn135inL+0x478>
 800ce74:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce78:	68f8      	ldr	r0, [r7, #12]
 800ce7a:	eeb0 2a47 	vmov.f32	s4, s14
 800ce7e:	eef0 1a65 	vmov.f32	s3, s11
 800ce82:	eeb0 1a46 	vmov.f32	s2, s12
 800ce86:	eef0 0a66 	vmov.f32	s1, s13
 800ce8a:	ee00 3a10 	vmov	s0, r3
 800ce8e:	f7f6 fe9f 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <turn135inL+0x47c>)
 800ce94:	2200      	movs	r2, #0
 800ce96:	701a      	strb	r2, [r3, #0]
	}

}
 800ce98:	bf00      	nop
 800ce9a:	3710      	adds	r7, #16
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	ecbd 8b02 	vpop	{d8}
 800cea2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cea6:	b004      	add	sp, #16
 800cea8:	4770      	bx	lr
 800ceaa:	bf00      	nop
 800ceac:	f3af 8000 	nop.w
 800ceb0:	42340000 	.word	0x42340000
 800ceb4:	20000814 	.word	0x20000814
 800ceb8:	c022ec18 	.word	0xc022ec18
 800cebc:	404fd1de 	.word	0x404fd1de

0800cec0 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cec0:	b084      	sub	sp, #16
 800cec2:	b5b0      	push	{r4, r5, r7, lr}
 800cec4:	ed2d 8b02 	vpush	{d8}
 800cec8:	b084      	sub	sp, #16
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800ced0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800ced4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800ced8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cedc:	2b01      	cmp	r3, #1
 800cede:	f040 80a5 	bne.w	800d02c <turn45outR+0x16c>
		highspeed_mode = 1;
 800cee2:	4be9      	ldr	r3, [pc, #932]	; (800d288 <turn45outR+0x3c8>)
 800cee4:	2201      	movs	r2, #1
 800cee6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cee8:	2300      	movs	r3, #0
 800ceea:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ceec:	2300      	movs	r3, #0
 800ceee:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cef4:	2300      	movs	r3, #0
 800cef6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cef8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cefc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf0c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cf10:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cf14:	eddf 5add 	vldr	s11, [pc, #884]	; 800d28c <turn45outR+0x3cc>
 800cf18:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cf1c:	68f8      	ldr	r0, [r7, #12]
 800cf1e:	eeb0 2a47 	vmov.f32	s4, s14
 800cf22:	eef0 1a46 	vmov.f32	s3, s12
 800cf26:	eeb0 1a66 	vmov.f32	s2, s13
 800cf2a:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800d290 <turn45outR+0x3d0>
 800cf2e:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800d294 <turn45outR+0x3d4>
 800cf32:	f7f6 fe4d 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800cf36:	2300      	movs	r3, #0
 800cf38:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf3e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cf42:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cf46:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cf4a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cf4e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf52:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf56:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf5a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cf5e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cf62:	eddf 4aca 	vldr	s9, [pc, #808]	; 800d28c <turn45outR+0x3cc>
 800cf66:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cf6a:	68f8      	ldr	r0, [r7, #12]
 800cf6c:	eeb0 2a47 	vmov.f32	s4, s14
 800cf70:	eef0 1a45 	vmov.f32	s3, s10
 800cf74:	eeb0 1a65 	vmov.f32	s2, s11
 800cf78:	eef0 0a46 	vmov.f32	s1, s12
 800cf7c:	eeb0 0a66 	vmov.f32	s0, s13
 800cf80:	f7f6 fe26 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800cf84:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cf88:	2b01      	cmp	r3, #1
 800cf8a:	d10c      	bne.n	800cfa6 <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800cf8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf90:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cf94:	eeb0 1a47 	vmov.f32	s2, s14
 800cf98:	eddf 0abf 	vldr	s1, [pc, #764]	; 800d298 <turn45outR+0x3d8>
 800cf9c:	eeb0 0a67 	vmov.f32	s0, s15
 800cfa0:	f7f7 fdb2 	bl	8004b08 <mollifier_slalom_table>
 800cfa4:	e015      	b.n	800cfd2 <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cfa6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cfaa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cfae:	eef1 7a67 	vneg.f32	s15, s15
 800cfb2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cfb6:	eef0 2a66 	vmov.f32	s5, s13
 800cfba:	eeb0 2a67 	vmov.f32	s4, s15
 800cfbe:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800d290 <turn45outR+0x3d0>
 800cfc2:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800d290 <turn45outR+0x3d0>
 800cfc6:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800d298 <turn45outR+0x3d8>
 800cfca:	eeb0 0a47 	vmov.f32	s0, s14
 800cfce:	f7f7 fc4b 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cfda:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cfde:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800d29c <turn45outR+0x3dc>
 800cfe2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cfe6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cfea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cfee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cff2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cff6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cffa:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cffe:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d002:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800d28c <turn45outR+0x3cc>
 800d006:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	eeb0 2a47 	vmov.f32	s4, s14
 800d010:	eef0 1a65 	vmov.f32	s3, s11
 800d014:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800d290 <turn45outR+0x3d0>
 800d018:	eef0 0a46 	vmov.f32	s1, s12
 800d01c:	eeb0 0a66 	vmov.f32	s0, s13
 800d020:	f7f6 fdd6 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800d024:	4b98      	ldr	r3, [pc, #608]	; (800d288 <turn45outR+0x3c8>)
 800d026:	2200      	movs	r2, #0
 800d028:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d02a:	e123      	b.n	800d274 <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800d02c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d030:	2b01      	cmp	r3, #1
 800d032:	f240 8082 	bls.w	800d13a <turn45outR+0x27a>
		highspeed_mode = 1;
 800d036:	4b94      	ldr	r3, [pc, #592]	; (800d288 <turn45outR+0x3c8>)
 800d038:	2201      	movs	r2, #1
 800d03a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d03c:	2300      	movs	r3, #0
 800d03e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d040:	2300      	movs	r3, #0
 800d042:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d044:	2303      	movs	r3, #3
 800d046:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d048:	2300      	movs	r3, #0
 800d04a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d04c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d050:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d054:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d058:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d05c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d060:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d064:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d068:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d06c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d070:	eddf 4a86 	vldr	s9, [pc, #536]	; 800d28c <turn45outR+0x3cc>
 800d074:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	eeb0 2a47 	vmov.f32	s4, s14
 800d07e:	eef0 1a45 	vmov.f32	s3, s10
 800d082:	eeb0 1a65 	vmov.f32	s2, s11
 800d086:	eef0 0a46 	vmov.f32	s1, s12
 800d08a:	eeb0 0a66 	vmov.f32	s0, s13
 800d08e:	f7f6 fd9f 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d092:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d096:	2b01      	cmp	r3, #1
 800d098:	d10c      	bne.n	800d0b4 <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d09a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d09e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0a2:	eeb0 1a47 	vmov.f32	s2, s14
 800d0a6:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800d298 <turn45outR+0x3d8>
 800d0aa:	eeb0 0a67 	vmov.f32	s0, s15
 800d0ae:	f7f7 fd2b 	bl	8004b08 <mollifier_slalom_table>
 800d0b2:	e015      	b.n	800d0e0 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d0b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d0b8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0bc:	eef1 7a67 	vneg.f32	s15, s15
 800d0c0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0c4:	eef0 2a66 	vmov.f32	s5, s13
 800d0c8:	eeb0 2a67 	vmov.f32	s4, s15
 800d0cc:	eddf 1a70 	vldr	s3, [pc, #448]	; 800d290 <turn45outR+0x3d0>
 800d0d0:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800d290 <turn45outR+0x3d0>
 800d0d4:	eddf 0a70 	vldr	s1, [pc, #448]	; 800d298 <turn45outR+0x3d8>
 800d0d8:	eeb0 0a47 	vmov.f32	s0, s14
 800d0dc:	f7f7 fbc4 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d0e8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0ec:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d29c <turn45outR+0x3dc>
 800d0f0:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d0f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d0f8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d0fc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d100:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d104:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d108:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d10c:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d110:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800d28c <turn45outR+0x3cc>
 800d114:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d118:	68f8      	ldr	r0, [r7, #12]
 800d11a:	eeb0 2a47 	vmov.f32	s4, s14
 800d11e:	eef0 1a65 	vmov.f32	s3, s11
 800d122:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800d290 <turn45outR+0x3d0>
 800d126:	eef0 0a46 	vmov.f32	s1, s12
 800d12a:	eeb0 0a66 	vmov.f32	s0, s13
 800d12e:	f7f6 fd4f 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800d132:	4b55      	ldr	r3, [pc, #340]	; (800d288 <turn45outR+0x3c8>)
 800d134:	2200      	movs	r2, #0
 800d136:	701a      	strb	r2, [r3, #0]
}
 800d138:	e09c      	b.n	800d274 <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d13a:	2300      	movs	r3, #0
 800d13c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d13e:	2300      	movs	r3, #0
 800d140:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d142:	2303      	movs	r3, #3
 800d144:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d146:	2300      	movs	r3, #0
 800d148:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d14a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d14e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d152:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d156:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d15a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d15e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d162:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d166:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d16a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d16e:	eddf 4a47 	vldr	s9, [pc, #284]	; 800d28c <turn45outR+0x3cc>
 800d172:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	eeb0 2a47 	vmov.f32	s4, s14
 800d17c:	eef0 1a45 	vmov.f32	s3, s10
 800d180:	eeb0 1a65 	vmov.f32	s2, s11
 800d184:	eef0 0a46 	vmov.f32	s1, s12
 800d188:	eeb0 0a66 	vmov.f32	s0, s13
 800d18c:	f7f6 fd20 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d190:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d194:	2b01      	cmp	r3, #1
 800d196:	d10c      	bne.n	800d1b2 <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800d198:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1a0:	eeb0 1a47 	vmov.f32	s2, s14
 800d1a4:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800d298 <turn45outR+0x3d8>
 800d1a8:	eeb0 0a67 	vmov.f32	s0, s15
 800d1ac:	f7f7 fcac 	bl	8004b08 <mollifier_slalom_table>
 800d1b0:	e015      	b.n	800d1de <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d1b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1b6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d1ba:	eef1 7a67 	vneg.f32	s15, s15
 800d1be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1c2:	eef0 2a66 	vmov.f32	s5, s13
 800d1c6:	eeb0 2a67 	vmov.f32	s4, s15
 800d1ca:	eddf 1a31 	vldr	s3, [pc, #196]	; 800d290 <turn45outR+0x3d0>
 800d1ce:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800d290 <turn45outR+0x3d0>
 800d1d2:	eddf 0a31 	vldr	s1, [pc, #196]	; 800d298 <turn45outR+0x3d8>
 800d1d6:	eeb0 0a47 	vmov.f32	s0, s14
 800d1da:	f7f7 fb45 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d1e6:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d1ea:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d1ee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d1f2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1fa:	edd7 7a01 	vldr	s15, [r7, #4]
 800d1fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d202:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d206:	eef0 7ae7 	vabs.f32	s15, s15
 800d20a:	ee17 0a90 	vmov	r0, s15
 800d20e:	f7f3 f9c3 	bl	8000598 <__aeabi_f2d>
 800d212:	f04f 0200 	mov.w	r2, #0
 800d216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d21a:	f7f3 fb3f 	bl	800089c <__aeabi_ddiv>
 800d21e:	4602      	mov	r2, r0
 800d220:	460b      	mov	r3, r1
 800d222:	4614      	mov	r4, r2
 800d224:	461d      	mov	r5, r3
 800d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d228:	4618      	mov	r0, r3
 800d22a:	f7f3 f9b5 	bl	8000598 <__aeabi_f2d>
 800d22e:	4602      	mov	r2, r0
 800d230:	460b      	mov	r3, r1
 800d232:	4620      	mov	r0, r4
 800d234:	4629      	mov	r1, r5
 800d236:	f7f3 fb31 	bl	800089c <__aeabi_ddiv>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4610      	mov	r0, r2
 800d240:	4619      	mov	r1, r3
 800d242:	f04f 0200 	mov.w	r2, #0
 800d246:	4b16      	ldr	r3, [pc, #88]	; (800d2a0 <turn45outR+0x3e0>)
 800d248:	f7f3 f848 	bl	80002dc <__adddf3>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d250:	4610      	mov	r0, r2
 800d252:	4619      	mov	r1, r3
 800d254:	f7f3 fcd0 	bl	8000bf8 <__aeabi_d2f>
 800d258:	4603      	mov	r3, r0
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	ee02 3a10 	vmov	s4, r3
 800d260:	edd7 1a01 	vldr	s3, [r7, #4]
 800d264:	ed97 1a01 	vldr	s2, [r7, #4]
 800d268:	eef0 0a68 	vmov.f32	s1, s17
 800d26c:	eeb0 0a48 	vmov.f32	s0, s16
 800d270:	f7f6 fcae 	bl	8003bd0 <straight_table2>
}
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	ecbd 8b02 	vpop	{d8}
 800d27e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d282:	b004      	add	sp, #16
 800d284:	4770      	bx	lr
 800d286:	bf00      	nop
 800d288:	20000814 	.word	0x20000814
 800d28c:	42340000 	.word	0x42340000
 800d290:	00000000 	.word	0x00000000
 800d294:	42c4477b 	.word	0x42c4477b
 800d298:	c2340000 	.word	0xc2340000
 800d29c:	42b40000 	.word	0x42b40000
 800d2a0:	408f4000 	.word	0x408f4000

0800d2a4 <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d2a4:	b084      	sub	sp, #16
 800d2a6:	b5b0      	push	{r4, r5, r7, lr}
 800d2a8:	ed2d 8b02 	vpush	{d8}
 800d2ac:	b084      	sub	sp, #16
 800d2ae:	af00      	add	r7, sp, #0
 800d2b0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d2b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d2b8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d2bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d2c0:	2b01      	cmp	r3, #1
 800d2c2:	f040 80a3 	bne.w	800d40c <turn45outL+0x168>
			highspeed_mode = 1;
 800d2c6:	4be5      	ldr	r3, [pc, #916]	; (800d65c <turn45outL+0x3b8>)
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2dc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d2e0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d2e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2f0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d2f4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d2f8:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d660 <turn45outL+0x3bc>
 800d2fc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	eeb0 2a47 	vmov.f32	s4, s14
 800d306:	eef0 1a46 	vmov.f32	s3, s12
 800d30a:	eeb0 1a66 	vmov.f32	s2, s13
 800d30e:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d664 <turn45outL+0x3c0>
 800d312:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d668 <turn45outL+0x3c4>
 800d316:	f7f6 fc5b 	bl	8003bd0 <straight_table2>
			wallmode.WallControlMode=0;
 800d31a:	2300      	movs	r3, #0
 800d31c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800d31e:	2304      	movs	r3, #4
 800d320:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d322:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d326:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d32a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d32e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d332:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d336:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d33a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d33e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d342:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d346:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d660 <turn45outL+0x3bc>
 800d34a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d34e:	68f8      	ldr	r0, [r7, #12]
 800d350:	eeb0 2a47 	vmov.f32	s4, s14
 800d354:	eef0 1a45 	vmov.f32	s3, s10
 800d358:	eeb0 1a65 	vmov.f32	s2, s11
 800d35c:	eef0 0a46 	vmov.f32	s1, s12
 800d360:	eeb0 0a66 	vmov.f32	s0, s13
 800d364:	f7f6 fc34 	bl	8003bd0 <straight_table2>
			if(mollifier_mode == ON){
 800d368:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d10c      	bne.n	800d38a <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d370:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d374:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d378:	eeb0 1a47 	vmov.f32	s2, s14
 800d37c:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800d660 <turn45outL+0x3bc>
 800d380:	eeb0 0a67 	vmov.f32	s0, s15
 800d384:	f7f7 fbc0 	bl	8004b08 <mollifier_slalom_table>
 800d388:	e013      	b.n	800d3b2 <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d38a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d38e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d392:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d396:	eef0 2a66 	vmov.f32	s5, s13
 800d39a:	eeb0 2a47 	vmov.f32	s4, s14
 800d39e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d664 <turn45outL+0x3c0>
 800d3a2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d664 <turn45outL+0x3c0>
 800d3a6:	eddf 0aae 	vldr	s1, [pc, #696]	; 800d660 <turn45outL+0x3bc>
 800d3aa:	eeb0 0a67 	vmov.f32	s0, s15
 800d3ae:	f7f7 fa5b 	bl	8004868 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3ba:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d3be:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800d66c <turn45outL+0x3c8>
 800d3c2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d3c6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d3ca:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d3ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d3d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d3d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d3da:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d3de:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d3e2:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d660 <turn45outL+0x3bc>
 800d3e6:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d3ea:	68f8      	ldr	r0, [r7, #12]
 800d3ec:	eeb0 2a47 	vmov.f32	s4, s14
 800d3f0:	eef0 1a65 	vmov.f32	s3, s11
 800d3f4:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d664 <turn45outL+0x3c0>
 800d3f8:	eef0 0a46 	vmov.f32	s1, s12
 800d3fc:	eeb0 0a66 	vmov.f32	s0, s13
 800d400:	f7f6 fbe6 	bl	8003bd0 <straight_table2>
			highspeed_mode = 0;
 800d404:	4b95      	ldr	r3, [pc, #596]	; (800d65c <turn45outL+0x3b8>)
 800d406:	2200      	movs	r2, #0
 800d408:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d40a:	e11e      	b.n	800d64a <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800d40c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d410:	2b01      	cmp	r3, #1
 800d412:	d97f      	bls.n	800d514 <turn45outL+0x270>
		highspeed_mode = 1;
 800d414:	4b91      	ldr	r3, [pc, #580]	; (800d65c <turn45outL+0x3b8>)
 800d416:	2201      	movs	r2, #1
 800d418:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d41a:	2300      	movs	r3, #0
 800d41c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d41e:	2300      	movs	r3, #0
 800d420:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d422:	2304      	movs	r3, #4
 800d424:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d426:	2300      	movs	r3, #0
 800d428:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d42a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d42e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d432:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d436:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d43a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d43e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d442:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d446:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d44a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d44e:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d660 <turn45outL+0x3bc>
 800d452:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	eeb0 2a47 	vmov.f32	s4, s14
 800d45c:	eef0 1a45 	vmov.f32	s3, s10
 800d460:	eeb0 1a65 	vmov.f32	s2, s11
 800d464:	eef0 0a46 	vmov.f32	s1, s12
 800d468:	eeb0 0a66 	vmov.f32	s0, s13
 800d46c:	f7f6 fbb0 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d470:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d474:	2b01      	cmp	r3, #1
 800d476:	d10c      	bne.n	800d492 <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d478:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d47c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d480:	eeb0 1a47 	vmov.f32	s2, s14
 800d484:	eddf 0a76 	vldr	s1, [pc, #472]	; 800d660 <turn45outL+0x3bc>
 800d488:	eeb0 0a67 	vmov.f32	s0, s15
 800d48c:	f7f7 fb3c 	bl	8004b08 <mollifier_slalom_table>
 800d490:	e013      	b.n	800d4ba <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d492:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d496:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d49a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d49e:	eef0 2a66 	vmov.f32	s5, s13
 800d4a2:	eeb0 2a47 	vmov.f32	s4, s14
 800d4a6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d664 <turn45outL+0x3c0>
 800d4aa:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d664 <turn45outL+0x3c0>
 800d4ae:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800d660 <turn45outL+0x3bc>
 800d4b2:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b6:	f7f7 f9d7 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4c2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d4c6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800d66c <turn45outL+0x3c8>
 800d4ca:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d4ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d4d2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d4d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d4e2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d4e6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4ea:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d660 <turn45outL+0x3bc>
 800d4ee:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d4f2:	68f8      	ldr	r0, [r7, #12]
 800d4f4:	eeb0 2a47 	vmov.f32	s4, s14
 800d4f8:	eef0 1a65 	vmov.f32	s3, s11
 800d4fc:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d664 <turn45outL+0x3c0>
 800d500:	eef0 0a46 	vmov.f32	s1, s12
 800d504:	eeb0 0a66 	vmov.f32	s0, s13
 800d508:	f7f6 fb62 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800d50c:	4b53      	ldr	r3, [pc, #332]	; (800d65c <turn45outL+0x3b8>)
 800d50e:	2200      	movs	r2, #0
 800d510:	701a      	strb	r2, [r3, #0]
}
 800d512:	e09a      	b.n	800d64a <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d514:	2300      	movs	r3, #0
 800d516:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d518:	2300      	movs	r3, #0
 800d51a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d51c:	2304      	movs	r3, #4
 800d51e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d520:	2300      	movs	r3, #0
 800d522:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d524:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d528:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d52c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d530:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d534:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d538:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d53c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d540:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d544:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d548:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d660 <turn45outL+0x3bc>
 800d54c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	eeb0 2a47 	vmov.f32	s4, s14
 800d556:	eef0 1a45 	vmov.f32	s3, s10
 800d55a:	eeb0 1a65 	vmov.f32	s2, s11
 800d55e:	eef0 0a46 	vmov.f32	s1, s12
 800d562:	eeb0 0a66 	vmov.f32	s0, s13
 800d566:	f7f6 fb33 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d56a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d56e:	2b01      	cmp	r3, #1
 800d570:	d10c      	bne.n	800d58c <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800d572:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d576:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d57a:	eeb0 1a47 	vmov.f32	s2, s14
 800d57e:	eddf 0a38 	vldr	s1, [pc, #224]	; 800d660 <turn45outL+0x3bc>
 800d582:	eeb0 0a67 	vmov.f32	s0, s15
 800d586:	f7f7 fabf 	bl	8004b08 <mollifier_slalom_table>
 800d58a:	e013      	b.n	800d5b4 <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d590:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d594:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d598:	eef0 2a66 	vmov.f32	s5, s13
 800d59c:	eeb0 2a47 	vmov.f32	s4, s14
 800d5a0:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d664 <turn45outL+0x3c0>
 800d5a4:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d664 <turn45outL+0x3c0>
 800d5a8:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800d660 <turn45outL+0x3bc>
 800d5ac:	eeb0 0a67 	vmov.f32	s0, s15
 800d5b0:	f7f7 f95a 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d5bc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d5c0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d5c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5d0:	edd7 7a01 	vldr	s15, [r7, #4]
 800d5d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d5d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d5dc:	eef0 7ae7 	vabs.f32	s15, s15
 800d5e0:	ee17 0a90 	vmov	r0, s15
 800d5e4:	f7f2 ffd8 	bl	8000598 <__aeabi_f2d>
 800d5e8:	f04f 0200 	mov.w	r2, #0
 800d5ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d5f0:	f7f3 f954 	bl	800089c <__aeabi_ddiv>
 800d5f4:	4602      	mov	r2, r0
 800d5f6:	460b      	mov	r3, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	461d      	mov	r5, r3
 800d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7f2 ffca 	bl	8000598 <__aeabi_f2d>
 800d604:	4602      	mov	r2, r0
 800d606:	460b      	mov	r3, r1
 800d608:	4620      	mov	r0, r4
 800d60a:	4629      	mov	r1, r5
 800d60c:	f7f3 f946 	bl	800089c <__aeabi_ddiv>
 800d610:	4602      	mov	r2, r0
 800d612:	460b      	mov	r3, r1
 800d614:	4610      	mov	r0, r2
 800d616:	4619      	mov	r1, r3
 800d618:	f04f 0200 	mov.w	r2, #0
 800d61c:	4b14      	ldr	r3, [pc, #80]	; (800d670 <turn45outL+0x3cc>)
 800d61e:	f7f2 fe5d 	bl	80002dc <__adddf3>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d626:	4610      	mov	r0, r2
 800d628:	4619      	mov	r1, r3
 800d62a:	f7f3 fae5 	bl	8000bf8 <__aeabi_d2f>
 800d62e:	4603      	mov	r3, r0
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	ee02 3a10 	vmov	s4, r3
 800d636:	edd7 1a01 	vldr	s3, [r7, #4]
 800d63a:	ed97 1a01 	vldr	s2, [r7, #4]
 800d63e:	eef0 0a68 	vmov.f32	s1, s17
 800d642:	eeb0 0a48 	vmov.f32	s0, s16
 800d646:	f7f6 fac3 	bl	8003bd0 <straight_table2>
}
 800d64a:	bf00      	nop
 800d64c:	3710      	adds	r7, #16
 800d64e:	46bd      	mov	sp, r7
 800d650:	ecbd 8b02 	vpop	{d8}
 800d654:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d658:	b004      	add	sp, #16
 800d65a:	4770      	bx	lr
 800d65c:	20000814 	.word	0x20000814
 800d660:	42340000 	.word	0x42340000
 800d664:	00000000 	.word	0x00000000
 800d668:	42c4477b 	.word	0x42c4477b
 800d66c:	42b40000 	.word	0x42b40000
 800d670:	408f4000 	.word	0x408f4000

0800d674 <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d674:	b084      	sub	sp, #16
 800d676:	b5b0      	push	{r4, r5, r7, lr}
 800d678:	ed2d 8b02 	vpush	{d8}
 800d67c:	b084      	sub	sp, #16
 800d67e:	af00      	add	r7, sp, #0
 800d680:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d684:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d688:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d68c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d690:	2b01      	cmp	r3, #1
 800d692:	f040 80a5 	bne.w	800d7e0 <turn135outR+0x16c>
			highspeed_mode = 1;
 800d696:	4be9      	ldr	r3, [pc, #932]	; (800da3c <turn135outR+0x3c8>)
 800d698:	2201      	movs	r2, #1
 800d69a:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d69c:	2300      	movs	r3, #0
 800d69e:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d6ac:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d6b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d6b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d6b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6c0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d6c4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d6c8:	eddf 5add 	vldr	s11, [pc, #884]	; 800da40 <turn135outR+0x3cc>
 800d6cc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	eeb0 2a47 	vmov.f32	s4, s14
 800d6d6:	eef0 1a46 	vmov.f32	s3, s12
 800d6da:	eeb0 1a66 	vmov.f32	s2, s13
 800d6de:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800da44 <turn135outR+0x3d0>
 800d6e2:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800da48 <turn135outR+0x3d4>
 800d6e6:	f7f6 fa73 	bl	8003bd0 <straight_table2>
			wallmode.WallControlMode=0;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d6ee:	2303      	movs	r3, #3
 800d6f0:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d6f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d6fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d6fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d702:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d706:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d70e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d712:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d716:	eddf 4aca 	vldr	s9, [pc, #808]	; 800da40 <turn135outR+0x3cc>
 800d71a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d71e:	68f8      	ldr	r0, [r7, #12]
 800d720:	eeb0 2a47 	vmov.f32	s4, s14
 800d724:	eef0 1a45 	vmov.f32	s3, s10
 800d728:	eeb0 1a65 	vmov.f32	s2, s11
 800d72c:	eef0 0a46 	vmov.f32	s1, s12
 800d730:	eeb0 0a66 	vmov.f32	s0, s13
 800d734:	f7f6 fa4c 	bl	8003bd0 <straight_table2>
			if(mollifier_mode == ON){
 800d738:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d10c      	bne.n	800d75a <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d740:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d744:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d748:	eeb0 1a47 	vmov.f32	s2, s14
 800d74c:	eddf 0abf 	vldr	s1, [pc, #764]	; 800da4c <turn135outR+0x3d8>
 800d750:	eeb0 0a67 	vmov.f32	s0, s15
 800d754:	f7f7 f9d8 	bl	8004b08 <mollifier_slalom_table>
 800d758:	e015      	b.n	800d786 <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d75a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d75e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d762:	eef1 7a67 	vneg.f32	s15, s15
 800d766:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d76a:	eef0 2a66 	vmov.f32	s5, s13
 800d76e:	eeb0 2a67 	vmov.f32	s4, s15
 800d772:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800da44 <turn135outR+0x3d0>
 800d776:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800da44 <turn135outR+0x3d0>
 800d77a:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800da4c <turn135outR+0x3d8>
 800d77e:	eeb0 0a47 	vmov.f32	s0, s14
 800d782:	f7f7 f871 	bl	8004868 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d786:	2300      	movs	r3, #0
 800d788:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d78e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d792:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800da50 <turn135outR+0x3dc>
 800d796:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d79a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d79e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d7a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7ae:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d7b2:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d7b6:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800da40 <turn135outR+0x3cc>
 800d7ba:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d7be:	68f8      	ldr	r0, [r7, #12]
 800d7c0:	eeb0 2a47 	vmov.f32	s4, s14
 800d7c4:	eef0 1a65 	vmov.f32	s3, s11
 800d7c8:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800da44 <turn135outR+0x3d0>
 800d7cc:	eef0 0a46 	vmov.f32	s1, s12
 800d7d0:	eeb0 0a66 	vmov.f32	s0, s13
 800d7d4:	f7f6 f9fc 	bl	8003bd0 <straight_table2>
			highspeed_mode = 0;
 800d7d8:	4b98      	ldr	r3, [pc, #608]	; (800da3c <turn135outR+0x3c8>)
 800d7da:	2200      	movs	r2, #0
 800d7dc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d7de:	e123      	b.n	800da28 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800d7e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	f240 8082 	bls.w	800d8ee <turn135outR+0x27a>
		highspeed_mode = 1;
 800d7ea:	4b94      	ldr	r3, [pc, #592]	; (800da3c <turn135outR+0x3c8>)
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d800:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d804:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d808:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d80c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d810:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d814:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d818:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d81c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d820:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d824:	eddf 4a86 	vldr	s9, [pc, #536]	; 800da40 <turn135outR+0x3cc>
 800d828:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	eeb0 2a47 	vmov.f32	s4, s14
 800d832:	eef0 1a45 	vmov.f32	s3, s10
 800d836:	eeb0 1a65 	vmov.f32	s2, s11
 800d83a:	eef0 0a46 	vmov.f32	s1, s12
 800d83e:	eeb0 0a66 	vmov.f32	s0, s13
 800d842:	f7f6 f9c5 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d846:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d10c      	bne.n	800d868 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d84e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d852:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d856:	eeb0 1a47 	vmov.f32	s2, s14
 800d85a:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800da4c <turn135outR+0x3d8>
 800d85e:	eeb0 0a67 	vmov.f32	s0, s15
 800d862:	f7f7 f951 	bl	8004b08 <mollifier_slalom_table>
 800d866:	e015      	b.n	800d894 <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d868:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d86c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d870:	eef1 7a67 	vneg.f32	s15, s15
 800d874:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d878:	eef0 2a66 	vmov.f32	s5, s13
 800d87c:	eeb0 2a67 	vmov.f32	s4, s15
 800d880:	eddf 1a70 	vldr	s3, [pc, #448]	; 800da44 <turn135outR+0x3d0>
 800d884:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800da44 <turn135outR+0x3d0>
 800d888:	eddf 0a70 	vldr	s1, [pc, #448]	; 800da4c <turn135outR+0x3d8>
 800d88c:	eeb0 0a47 	vmov.f32	s0, s14
 800d890:	f7f6 ffea 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800d894:	2300      	movs	r3, #0
 800d896:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d898:	2300      	movs	r3, #0
 800d89a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d89c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d8a0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800da50 <turn135outR+0x3dc>
 800d8a4:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d8a8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d8ac:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d8b0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d8b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8bc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d8c0:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d8c4:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800da40 <turn135outR+0x3cc>
 800d8c8:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	eeb0 2a47 	vmov.f32	s4, s14
 800d8d2:	eef0 1a65 	vmov.f32	s3, s11
 800d8d6:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800da44 <turn135outR+0x3d0>
 800d8da:	eef0 0a46 	vmov.f32	s1, s12
 800d8de:	eeb0 0a66 	vmov.f32	s0, s13
 800d8e2:	f7f6 f975 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800d8e6:	4b55      	ldr	r3, [pc, #340]	; (800da3c <turn135outR+0x3c8>)
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	701a      	strb	r2, [r3, #0]
}
 800d8ec:	e09c      	b.n	800da28 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d8fe:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d902:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d906:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d90a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d90e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d912:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d91a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d91e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d922:	eddf 4a47 	vldr	s9, [pc, #284]	; 800da40 <turn135outR+0x3cc>
 800d926:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	eeb0 2a47 	vmov.f32	s4, s14
 800d930:	eef0 1a45 	vmov.f32	s3, s10
 800d934:	eeb0 1a65 	vmov.f32	s2, s11
 800d938:	eef0 0a46 	vmov.f32	s1, s12
 800d93c:	eeb0 0a66 	vmov.f32	s0, s13
 800d940:	f7f6 f946 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800d944:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d948:	2b01      	cmp	r3, #1
 800d94a:	d10c      	bne.n	800d966 <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800d94c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d950:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d954:	eeb0 1a47 	vmov.f32	s2, s14
 800d958:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800da4c <turn135outR+0x3d8>
 800d95c:	eeb0 0a67 	vmov.f32	s0, s15
 800d960:	f7f7 f8d2 	bl	8004b08 <mollifier_slalom_table>
 800d964:	e015      	b.n	800d992 <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d966:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d96a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d96e:	eef1 7a67 	vneg.f32	s15, s15
 800d972:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d976:	eef0 2a66 	vmov.f32	s5, s13
 800d97a:	eeb0 2a67 	vmov.f32	s4, s15
 800d97e:	eddf 1a31 	vldr	s3, [pc, #196]	; 800da44 <turn135outR+0x3d0>
 800d982:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800da44 <turn135outR+0x3d0>
 800d986:	eddf 0a31 	vldr	s1, [pc, #196]	; 800da4c <turn135outR+0x3d8>
 800d98a:	eeb0 0a47 	vmov.f32	s0, s14
 800d98e:	f7f6 ff6b 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d992:	2301      	movs	r3, #1
 800d994:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d996:	2300      	movs	r3, #0
 800d998:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d99a:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d99e:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d9a2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9a6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9ae:	edd7 7a01 	vldr	s15, [r7, #4]
 800d9b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d9b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ba:	eef0 7ae7 	vabs.f32	s15, s15
 800d9be:	ee17 0a90 	vmov	r0, s15
 800d9c2:	f7f2 fde9 	bl	8000598 <__aeabi_f2d>
 800d9c6:	f04f 0200 	mov.w	r2, #0
 800d9ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d9ce:	f7f2 ff65 	bl	800089c <__aeabi_ddiv>
 800d9d2:	4602      	mov	r2, r0
 800d9d4:	460b      	mov	r3, r1
 800d9d6:	4614      	mov	r4, r2
 800d9d8:	461d      	mov	r5, r3
 800d9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f7f2 fddb 	bl	8000598 <__aeabi_f2d>
 800d9e2:	4602      	mov	r2, r0
 800d9e4:	460b      	mov	r3, r1
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	4629      	mov	r1, r5
 800d9ea:	f7f2 ff57 	bl	800089c <__aeabi_ddiv>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	460b      	mov	r3, r1
 800d9f2:	4610      	mov	r0, r2
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	f04f 0200 	mov.w	r2, #0
 800d9fa:	4b16      	ldr	r3, [pc, #88]	; (800da54 <turn135outR+0x3e0>)
 800d9fc:	f7f2 fc6e 	bl	80002dc <__adddf3>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800da04:	4610      	mov	r0, r2
 800da06:	4619      	mov	r1, r3
 800da08:	f7f3 f8f6 	bl	8000bf8 <__aeabi_d2f>
 800da0c:	4603      	mov	r3, r0
 800da0e:	68f8      	ldr	r0, [r7, #12]
 800da10:	ee02 3a10 	vmov	s4, r3
 800da14:	edd7 1a01 	vldr	s3, [r7, #4]
 800da18:	ed97 1a01 	vldr	s2, [r7, #4]
 800da1c:	eef0 0a68 	vmov.f32	s1, s17
 800da20:	eeb0 0a48 	vmov.f32	s0, s16
 800da24:	f7f6 f8d4 	bl	8003bd0 <straight_table2>
}
 800da28:	bf00      	nop
 800da2a:	3710      	adds	r7, #16
 800da2c:	46bd      	mov	sp, r7
 800da2e:	ecbd 8b02 	vpop	{d8}
 800da32:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800da36:	b004      	add	sp, #16
 800da38:	4770      	bx	lr
 800da3a:	bf00      	nop
 800da3c:	20000814 	.word	0x20000814
 800da40:	42340000 	.word	0x42340000
 800da44:	00000000 	.word	0x00000000
 800da48:	42c4477b 	.word	0x42c4477b
 800da4c:	c3070000 	.word	0xc3070000
 800da50:	42b40000 	.word	0x42b40000
 800da54:	408f4000 	.word	0x408f4000

0800da58 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800da58:	b084      	sub	sp, #16
 800da5a:	b5b0      	push	{r4, r5, r7, lr}
 800da5c:	ed2d 8b02 	vpush	{d8}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800da68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800da6c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800da70:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800da74:	2b01      	cmp	r3, #1
 800da76:	f040 80a3 	bne.w	800dbc0 <turn135outL+0x168>
		highspeed_mode = 1;
 800da7a:	4be5      	ldr	r3, [pc, #916]	; (800de10 <turn135outL+0x3b8>)
 800da7c:	2201      	movs	r2, #1
 800da7e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800da80:	2300      	movs	r3, #0
 800da82:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da84:	2300      	movs	r3, #0
 800da86:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800da88:	2300      	movs	r3, #0
 800da8a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da8c:	2300      	movs	r3, #0
 800da8e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800da90:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da94:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da98:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daa4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800daa8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800daac:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800de14 <turn135outL+0x3bc>
 800dab0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800dab4:	68f8      	ldr	r0, [r7, #12]
 800dab6:	eeb0 2a47 	vmov.f32	s4, s14
 800daba:	eef0 1a46 	vmov.f32	s3, s12
 800dabe:	eeb0 1a66 	vmov.f32	s2, s13
 800dac2:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800de18 <turn135outL+0x3c0>
 800dac6:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800de1c <turn135outL+0x3c4>
 800daca:	f7f6 f881 	bl	8003bd0 <straight_table2>
		wallmode.WallControlMode=0;
 800dace:	2300      	movs	r3, #0
 800dad0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800dad2:	2304      	movs	r3, #4
 800dad4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dad6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dada:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dade:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dae2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dae6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800daea:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800daf2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daf6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dafa:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800de14 <turn135outL+0x3bc>
 800dafe:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	eeb0 2a47 	vmov.f32	s4, s14
 800db08:	eef0 1a45 	vmov.f32	s3, s10
 800db0c:	eeb0 1a65 	vmov.f32	s2, s11
 800db10:	eef0 0a46 	vmov.f32	s1, s12
 800db14:	eeb0 0a66 	vmov.f32	s0, s13
 800db18:	f7f6 f85a 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800db1c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800db20:	2b01      	cmp	r3, #1
 800db22:	d10c      	bne.n	800db3e <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800db24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db2c:	eeb0 1a47 	vmov.f32	s2, s14
 800db30:	eddf 0abb 	vldr	s1, [pc, #748]	; 800de20 <turn135outL+0x3c8>
 800db34:	eeb0 0a67 	vmov.f32	s0, s15
 800db38:	f7f6 ffe6 	bl	8004b08 <mollifier_slalom_table>
 800db3c:	e013      	b.n	800db66 <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db46:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db4a:	eef0 2a66 	vmov.f32	s5, s13
 800db4e:	eeb0 2a47 	vmov.f32	s4, s14
 800db52:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800de18 <turn135outL+0x3c0>
 800db56:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800de18 <turn135outL+0x3c0>
 800db5a:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800de20 <turn135outL+0x3c8>
 800db5e:	eeb0 0a67 	vmov.f32	s0, s15
 800db62:	f7f6 fe81 	bl	8004868 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800db66:	2300      	movs	r3, #0
 800db68:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800db6e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800db72:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800de24 <turn135outL+0x3cc>
 800db76:	ee77 6a87 	vadd.f32	s13, s15, s14
 800db7a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800db7e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800db82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db86:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db8e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800db92:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800db96:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800de14 <turn135outL+0x3bc>
 800db9a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	eeb0 2a47 	vmov.f32	s4, s14
 800dba4:	eef0 1a65 	vmov.f32	s3, s11
 800dba8:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800de18 <turn135outL+0x3c0>
 800dbac:	eef0 0a46 	vmov.f32	s1, s12
 800dbb0:	eeb0 0a66 	vmov.f32	s0, s13
 800dbb4:	f7f6 f80c 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800dbb8:	4b95      	ldr	r3, [pc, #596]	; (800de10 <turn135outL+0x3b8>)
 800dbba:	2200      	movs	r2, #0
 800dbbc:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dbbe:	e11e      	b.n	800ddfe <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800dbc0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dbc4:	2b01      	cmp	r3, #1
 800dbc6:	d97f      	bls.n	800dcc8 <turn135outL+0x270>
		highspeed_mode = 1;
 800dbc8:	4b91      	ldr	r3, [pc, #580]	; (800de10 <turn135outL+0x3b8>)
 800dbca:	2201      	movs	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dbd6:	2304      	movs	r3, #4
 800dbd8:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dbde:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dbe2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dbe6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dbea:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dbee:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dbf2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dbf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbfa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dbfe:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dc02:	eddf 4a84 	vldr	s9, [pc, #528]	; 800de14 <turn135outL+0x3bc>
 800dc06:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dc0a:	68f8      	ldr	r0, [r7, #12]
 800dc0c:	eeb0 2a47 	vmov.f32	s4, s14
 800dc10:	eef0 1a45 	vmov.f32	s3, s10
 800dc14:	eeb0 1a65 	vmov.f32	s2, s11
 800dc18:	eef0 0a46 	vmov.f32	s1, s12
 800dc1c:	eeb0 0a66 	vmov.f32	s0, s13
 800dc20:	f7f5 ffd6 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800dc24:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dc28:	2b01      	cmp	r3, #1
 800dc2a:	d10c      	bne.n	800dc46 <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dc2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc30:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc34:	eeb0 1a47 	vmov.f32	s2, s14
 800dc38:	eddf 0a79 	vldr	s1, [pc, #484]	; 800de20 <turn135outL+0x3c8>
 800dc3c:	eeb0 0a67 	vmov.f32	s0, s15
 800dc40:	f7f6 ff62 	bl	8004b08 <mollifier_slalom_table>
 800dc44:	e013      	b.n	800dc6e <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dc46:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc4a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dc4e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dc52:	eef0 2a66 	vmov.f32	s5, s13
 800dc56:	eeb0 2a47 	vmov.f32	s4, s14
 800dc5a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800de18 <turn135outL+0x3c0>
 800dc5e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800de18 <turn135outL+0x3c0>
 800dc62:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800de20 <turn135outL+0x3c8>
 800dc66:	eeb0 0a67 	vmov.f32	s0, s15
 800dc6a:	f7f6 fdfd 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dc72:	2300      	movs	r3, #0
 800dc74:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc76:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800dc7a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800de24 <turn135outL+0x3cc>
 800dc7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800dc82:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dc86:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dc8a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dc8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dc92:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dc96:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800dc9a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800dc9e:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800de14 <turn135outL+0x3bc>
 800dca2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800dca6:	68f8      	ldr	r0, [r7, #12]
 800dca8:	eeb0 2a47 	vmov.f32	s4, s14
 800dcac:	eef0 1a65 	vmov.f32	s3, s11
 800dcb0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800de18 <turn135outL+0x3c0>
 800dcb4:	eef0 0a46 	vmov.f32	s1, s12
 800dcb8:	eeb0 0a66 	vmov.f32	s0, s13
 800dcbc:	f7f5 ff88 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800dcc0:	4b53      	ldr	r3, [pc, #332]	; (800de10 <turn135outL+0x3b8>)
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	701a      	strb	r2, [r3, #0]
}
 800dcc6:	e09a      	b.n	800ddfe <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800dcc8:	2300      	movs	r3, #0
 800dcca:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dccc:	2300      	movs	r3, #0
 800dcce:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800dcd0:	2304      	movs	r3, #4
 800dcd2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dcd8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dcdc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dce0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dce4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dce8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dcec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dcf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dcf4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dcf8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dcfc:	eddf 4a45 	vldr	s9, [pc, #276]	; 800de14 <turn135outL+0x3bc>
 800dd00:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dd04:	68f8      	ldr	r0, [r7, #12]
 800dd06:	eeb0 2a47 	vmov.f32	s4, s14
 800dd0a:	eef0 1a45 	vmov.f32	s3, s10
 800dd0e:	eeb0 1a65 	vmov.f32	s2, s11
 800dd12:	eef0 0a46 	vmov.f32	s1, s12
 800dd16:	eeb0 0a66 	vmov.f32	s0, s13
 800dd1a:	f7f5 ff59 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800dd1e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	d10c      	bne.n	800dd40 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800dd26:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd2a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd2e:	eeb0 1a47 	vmov.f32	s2, s14
 800dd32:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800de20 <turn135outL+0x3c8>
 800dd36:	eeb0 0a67 	vmov.f32	s0, s15
 800dd3a:	f7f6 fee5 	bl	8004b08 <mollifier_slalom_table>
 800dd3e:	e013      	b.n	800dd68 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800dd40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd44:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800dd48:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800dd4c:	eef0 2a66 	vmov.f32	s5, s13
 800dd50:	eeb0 2a47 	vmov.f32	s4, s14
 800dd54:	eddf 1a30 	vldr	s3, [pc, #192]	; 800de18 <turn135outL+0x3c0>
 800dd58:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800de18 <turn135outL+0x3c0>
 800dd5c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800de20 <turn135outL+0x3c8>
 800dd60:	eeb0 0a67 	vmov.f32	s0, s15
 800dd64:	f7f6 fd80 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dd70:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800dd74:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800dd78:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dd7c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dd80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd84:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd88:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800dd8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd90:	eef0 7ae7 	vabs.f32	s15, s15
 800dd94:	ee17 0a90 	vmov	r0, s15
 800dd98:	f7f2 fbfe 	bl	8000598 <__aeabi_f2d>
 800dd9c:	f04f 0200 	mov.w	r2, #0
 800dda0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dda4:	f7f2 fd7a 	bl	800089c <__aeabi_ddiv>
 800dda8:	4602      	mov	r2, r0
 800ddaa:	460b      	mov	r3, r1
 800ddac:	4614      	mov	r4, r2
 800ddae:	461d      	mov	r5, r3
 800ddb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	f7f2 fbf0 	bl	8000598 <__aeabi_f2d>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	460b      	mov	r3, r1
 800ddbc:	4620      	mov	r0, r4
 800ddbe:	4629      	mov	r1, r5
 800ddc0:	f7f2 fd6c 	bl	800089c <__aeabi_ddiv>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4610      	mov	r0, r2
 800ddca:	4619      	mov	r1, r3
 800ddcc:	f04f 0200 	mov.w	r2, #0
 800ddd0:	4b15      	ldr	r3, [pc, #84]	; (800de28 <turn135outL+0x3d0>)
 800ddd2:	f7f2 fa83 	bl	80002dc <__adddf3>
 800ddd6:	4602      	mov	r2, r0
 800ddd8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ddda:	4610      	mov	r0, r2
 800dddc:	4619      	mov	r1, r3
 800ddde:	f7f2 ff0b 	bl	8000bf8 <__aeabi_d2f>
 800dde2:	4603      	mov	r3, r0
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	ee02 3a10 	vmov	s4, r3
 800ddea:	edd7 1a01 	vldr	s3, [r7, #4]
 800ddee:	ed97 1a01 	vldr	s2, [r7, #4]
 800ddf2:	eef0 0a68 	vmov.f32	s1, s17
 800ddf6:	eeb0 0a48 	vmov.f32	s0, s16
 800ddfa:	f7f5 fee9 	bl	8003bd0 <straight_table2>
}
 800ddfe:	bf00      	nop
 800de00:	3710      	adds	r7, #16
 800de02:	46bd      	mov	sp, r7
 800de04:	ecbd 8b02 	vpop	{d8}
 800de08:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800de0c:	b004      	add	sp, #16
 800de0e:	4770      	bx	lr
 800de10:	20000814 	.word	0x20000814
 800de14:	42340000 	.word	0x42340000
 800de18:	00000000 	.word	0x00000000
 800de1c:	42c4477b 	.word	0x42c4477b
 800de20:	43070000 	.word	0x43070000
 800de24:	42b40000 	.word	0x42b40000
 800de28:	408f4000 	.word	0x408f4000
 800de2c:	00000000 	.word	0x00000000

0800de30 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800de30:	b084      	sub	sp, #16
 800de32:	b5b0      	push	{r4, r5, r7, lr}
 800de34:	ed2d 8b02 	vpush	{d8}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800de40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800de44:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800de48:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	f040 80af 	bne.w	800dfb0 <V90R+0x180>
			highspeed_mode = 1;
 800de52:	4bc1      	ldr	r3, [pc, #772]	; (800e158 <V90R+0x328>)
 800de54:	2201      	movs	r2, #1
 800de56:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800de58:	2300      	movs	r3, #0
 800de5a:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800de5c:	2300      	movs	r3, #0
 800de5e:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800de60:	2300      	movs	r3, #0
 800de62:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800de64:	2300      	movs	r3, #0
 800de66:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800de68:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800de6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800de70:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800de74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800de78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800de7c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800de80:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800de84:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800e15c <V90R+0x32c>
 800de88:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	eeb0 2a47 	vmov.f32	s4, s14
 800de92:	eef0 1a46 	vmov.f32	s3, s12
 800de96:	eeb0 1a66 	vmov.f32	s2, s13
 800de9a:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800e164 <V90R+0x334>
 800de9e:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800e160 <V90R+0x330>
 800dea2:	f7f5 fe95 	bl	8003bd0 <straight_table2>
			wallmode.WallControlMode=0;
 800dea6:	2300      	movs	r3, #0
 800dea8:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800deaa:	2303      	movs	r3, #3
 800deac:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800deae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800deb2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800deb6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800deba:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800debe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dec2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dec6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800deca:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dece:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ded2:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800e15c <V90R+0x32c>
 800ded6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800deda:	68f8      	ldr	r0, [r7, #12]
 800dedc:	eeb0 2a47 	vmov.f32	s4, s14
 800dee0:	eef0 1a45 	vmov.f32	s3, s10
 800dee4:	eeb0 1a65 	vmov.f32	s2, s11
 800dee8:	eef0 0a46 	vmov.f32	s1, s12
 800deec:	eeb0 0a66 	vmov.f32	s0, s13
 800def0:	f7f5 fe6e 	bl	8003bd0 <straight_table2>
			if(mollifier_mode == ON){
 800def4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800def8:	2b01      	cmp	r3, #1
 800defa:	d10c      	bne.n	800df16 <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800defc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df00:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800df04:	eeb0 1a47 	vmov.f32	s2, s14
 800df08:	eddf 0a97 	vldr	s1, [pc, #604]	; 800e168 <V90R+0x338>
 800df0c:	eeb0 0a67 	vmov.f32	s0, s15
 800df10:	f7f6 fdfa 	bl	8004b08 <mollifier_slalom_table>
 800df14:	e015      	b.n	800df42 <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800df16:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df1a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800df1e:	eef1 7a67 	vneg.f32	s15, s15
 800df22:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800df26:	eef0 2a66 	vmov.f32	s5, s13
 800df2a:	eeb0 2a67 	vmov.f32	s4, s15
 800df2e:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800e164 <V90R+0x334>
 800df32:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800e164 <V90R+0x334>
 800df36:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800e168 <V90R+0x338>
 800df3a:	eeb0 0a47 	vmov.f32	s0, s14
 800df3e:	f7f6 fc93 	bl	8004868 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800df42:	2300      	movs	r3, #0
 800df44:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800df46:	2300      	movs	r3, #0
 800df48:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800df4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7f2 fb23 	bl	8000598 <__aeabi_f2d>
 800df52:	a37f      	add	r3, pc, #508	; (adr r3, 800e150 <V90R+0x320>)
 800df54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df58:	f7f2 f9c0 	bl	80002dc <__adddf3>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4610      	mov	r0, r2
 800df62:	4619      	mov	r1, r3
 800df64:	f7f2 fe48 	bl	8000bf8 <__aeabi_d2f>
 800df68:	4603      	mov	r3, r0
 800df6a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800df6e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800df72:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800df76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800df7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df7e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800df82:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800df86:	eddf 5a75 	vldr	s11, [pc, #468]	; 800e15c <V90R+0x32c>
 800df8a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800df8e:	68f8      	ldr	r0, [r7, #12]
 800df90:	eeb0 2a47 	vmov.f32	s4, s14
 800df94:	eef0 1a46 	vmov.f32	s3, s12
 800df98:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800e164 <V90R+0x334>
 800df9c:	eef0 0a66 	vmov.f32	s1, s13
 800dfa0:	ee00 3a10 	vmov	s0, r3
 800dfa4:	f7f5 fe14 	bl	8003bd0 <straight_table2>
			highspeed_mode = 0;
 800dfa8:	4b6b      	ldr	r3, [pc, #428]	; (800e158 <V90R+0x328>)
 800dfaa:	2200      	movs	r2, #0
 800dfac:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800dfae:	e13e      	b.n	800e22e <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800dfb0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800dfb4:	2b01      	cmp	r3, #1
 800dfb6:	f240 808c 	bls.w	800e0d2 <V90R+0x2a2>
		highspeed_mode = 1;
 800dfba:	4b67      	ldr	r3, [pc, #412]	; (800e158 <V90R+0x328>)
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800dfc8:	2303      	movs	r3, #3
 800dfca:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dfd0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800dfd4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800dfd8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800dfdc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800dfe0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800dfe4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dfe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dfec:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800dff0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dff4:	eddf 4a59 	vldr	s9, [pc, #356]	; 800e15c <V90R+0x32c>
 800dff8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dffc:	68f8      	ldr	r0, [r7, #12]
 800dffe:	eeb0 2a47 	vmov.f32	s4, s14
 800e002:	eef0 1a45 	vmov.f32	s3, s10
 800e006:	eeb0 1a65 	vmov.f32	s2, s11
 800e00a:	eef0 0a46 	vmov.f32	s1, s12
 800e00e:	eeb0 0a66 	vmov.f32	s0, s13
 800e012:	f7f5 fddd 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800e016:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e01a:	2b01      	cmp	r3, #1
 800e01c:	d10c      	bne.n	800e038 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e01e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e022:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e026:	eeb0 1a47 	vmov.f32	s2, s14
 800e02a:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800e168 <V90R+0x338>
 800e02e:	eeb0 0a67 	vmov.f32	s0, s15
 800e032:	f7f6 fd69 	bl	8004b08 <mollifier_slalom_table>
 800e036:	e015      	b.n	800e064 <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e038:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e03c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e040:	eef1 7a67 	vneg.f32	s15, s15
 800e044:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e048:	eef0 2a66 	vmov.f32	s5, s13
 800e04c:	eeb0 2a67 	vmov.f32	s4, s15
 800e050:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e164 <V90R+0x334>
 800e054:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e164 <V90R+0x334>
 800e058:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e168 <V90R+0x338>
 800e05c:	eeb0 0a47 	vmov.f32	s0, s14
 800e060:	f7f6 fc02 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800e064:	2300      	movs	r3, #0
 800e066:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e068:	2300      	movs	r3, #0
 800e06a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e06e:	4618      	mov	r0, r3
 800e070:	f7f2 fa92 	bl	8000598 <__aeabi_f2d>
 800e074:	a336      	add	r3, pc, #216	; (adr r3, 800e150 <V90R+0x320>)
 800e076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e07a:	f7f2 f92f 	bl	80002dc <__adddf3>
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4610      	mov	r0, r2
 800e084:	4619      	mov	r1, r3
 800e086:	f7f2 fdb7 	bl	8000bf8 <__aeabi_d2f>
 800e08a:	4603      	mov	r3, r0
 800e08c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e090:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e094:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e098:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e09c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0a0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e0a4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e0a8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e15c <V90R+0x32c>
 800e0ac:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e0b0:	68f8      	ldr	r0, [r7, #12]
 800e0b2:	eeb0 2a47 	vmov.f32	s4, s14
 800e0b6:	eef0 1a46 	vmov.f32	s3, s12
 800e0ba:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e164 <V90R+0x334>
 800e0be:	eef0 0a66 	vmov.f32	s1, s13
 800e0c2:	ee00 3a10 	vmov	s0, r3
 800e0c6:	f7f5 fd83 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800e0ca:	4b23      	ldr	r3, [pc, #140]	; (800e158 <V90R+0x328>)
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	701a      	strb	r2, [r3, #0]
}
 800e0d0:	e0ad      	b.n	800e22e <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800e0da:	2303      	movs	r3, #3
 800e0dc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e0e2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e0e6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e0ea:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e0ee:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e0f2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e0f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e0fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0fe:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e102:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e106:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e15c <V90R+0x32c>
 800e10a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e10e:	68f8      	ldr	r0, [r7, #12]
 800e110:	eeb0 2a47 	vmov.f32	s4, s14
 800e114:	eef0 1a45 	vmov.f32	s3, s10
 800e118:	eeb0 1a65 	vmov.f32	s2, s11
 800e11c:	eef0 0a46 	vmov.f32	s1, s12
 800e120:	eeb0 0a66 	vmov.f32	s0, s13
 800e124:	f7f5 fd54 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800e128:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e12c:	2b01      	cmp	r3, #1
 800e12e:	d11d      	bne.n	800e16c <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800e130:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e134:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e138:	eeb0 1a47 	vmov.f32	s2, s14
 800e13c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e168 <V90R+0x338>
 800e140:	eeb0 0a67 	vmov.f32	s0, s15
 800e144:	f7f6 fce0 	bl	8004b08 <mollifier_slalom_table>
 800e148:	e026      	b.n	800e198 <V90R+0x368>
 800e14a:	bf00      	nop
 800e14c:	f3af 8000 	nop.w
 800e150:	c022ec18 	.word	0xc022ec18
 800e154:	405fd1de 	.word	0x405fd1de
 800e158:	20000814 	.word	0x20000814
 800e15c:	42340000 	.word	0x42340000
 800e160:	42c4477b 	.word	0x42c4477b
 800e164:	00000000 	.word	0x00000000
 800e168:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800e16c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e170:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800e174:	eef1 7a67 	vneg.f32	s15, s15
 800e178:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e17c:	eef0 2a66 	vmov.f32	s5, s13
 800e180:	eeb0 2a67 	vmov.f32	s4, s15
 800e184:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800e164 <V90R+0x334>
 800e188:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800e164 <V90R+0x334>
 800e18c:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800e168 <V90R+0x338>
 800e190:	eeb0 0a47 	vmov.f32	s0, s14
 800e194:	f7f6 fb68 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e198:	2303      	movs	r3, #3
 800e19a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e1a0:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e1a4:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e1a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e1ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e1b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e1b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800e1b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e1bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1c0:	eef0 7ae7 	vabs.f32	s15, s15
 800e1c4:	ee17 0a90 	vmov	r0, s15
 800e1c8:	f7f2 f9e6 	bl	8000598 <__aeabi_f2d>
 800e1cc:	f04f 0200 	mov.w	r2, #0
 800e1d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1d4:	f7f2 fb62 	bl	800089c <__aeabi_ddiv>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	460b      	mov	r3, r1
 800e1dc:	4614      	mov	r4, r2
 800e1de:	461d      	mov	r5, r3
 800e1e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	f7f2 f9d8 	bl	8000598 <__aeabi_f2d>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	4629      	mov	r1, r5
 800e1f0:	f7f2 fb54 	bl	800089c <__aeabi_ddiv>
 800e1f4:	4602      	mov	r2, r0
 800e1f6:	460b      	mov	r3, r1
 800e1f8:	4610      	mov	r0, r2
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	f04f 0200 	mov.w	r2, #0
 800e200:	4b0f      	ldr	r3, [pc, #60]	; (800e240 <V90R+0x410>)
 800e202:	f7f2 f86b 	bl	80002dc <__adddf3>
 800e206:	4602      	mov	r2, r0
 800e208:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e20a:	4610      	mov	r0, r2
 800e20c:	4619      	mov	r1, r3
 800e20e:	f7f2 fcf3 	bl	8000bf8 <__aeabi_d2f>
 800e212:	4603      	mov	r3, r0
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	ee02 3a10 	vmov	s4, r3
 800e21a:	edd7 1a01 	vldr	s3, [r7, #4]
 800e21e:	ed97 1a01 	vldr	s2, [r7, #4]
 800e222:	eef0 0a68 	vmov.f32	s1, s17
 800e226:	eeb0 0a48 	vmov.f32	s0, s16
 800e22a:	f7f5 fcd1 	bl	8003bd0 <straight_table2>
}
 800e22e:	bf00      	nop
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	ecbd 8b02 	vpop	{d8}
 800e238:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e23c:	b004      	add	sp, #16
 800e23e:	4770      	bx	lr
 800e240:	408f4000 	.word	0x408f4000
 800e244:	00000000 	.word	0x00000000

0800e248 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800e248:	b084      	sub	sp, #16
 800e24a:	b5b0      	push	{r4, r5, r7, lr}
 800e24c:	ed2d 8b02 	vpush	{d8}
 800e250:	b084      	sub	sp, #16
 800e252:	af00      	add	r7, sp, #0
 800e254:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e258:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e25c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800e260:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e264:	2b01      	cmp	r3, #1
 800e266:	f040 80ad 	bne.w	800e3c4 <V90L+0x17c>
				highspeed_mode = 1;
 800e26a:	4bbf      	ldr	r3, [pc, #764]	; (800e568 <V90L+0x320>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800e270:	2300      	movs	r3, #0
 800e272:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800e274:	2300      	movs	r3, #0
 800e276:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800e278:	2300      	movs	r3, #0
 800e27a:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800e27c:	2300      	movs	r3, #0
 800e27e:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e280:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e284:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e288:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e290:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e294:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e298:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800e29c:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800e56c <V90L+0x324>
 800e2a0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e2a4:	68f8      	ldr	r0, [r7, #12]
 800e2a6:	eeb0 2a47 	vmov.f32	s4, s14
 800e2aa:	eef0 1a46 	vmov.f32	s3, s12
 800e2ae:	eeb0 1a66 	vmov.f32	s2, s13
 800e2b2:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800e574 <V90L+0x32c>
 800e2b6:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800e570 <V90L+0x328>
 800e2ba:	f7f5 fc89 	bl	8003bd0 <straight_table2>
				wallmode.WallControlMode=0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800e2c2:	2304      	movs	r3, #4
 800e2c4:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e2c6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e2ca:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e2ce:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e2d2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e2d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e2da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e2de:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2e2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e2e6:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e2ea:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800e56c <V90L+0x324>
 800e2ee:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e2f2:	68f8      	ldr	r0, [r7, #12]
 800e2f4:	eeb0 2a47 	vmov.f32	s4, s14
 800e2f8:	eef0 1a45 	vmov.f32	s3, s10
 800e2fc:	eeb0 1a65 	vmov.f32	s2, s11
 800e300:	eef0 0a46 	vmov.f32	s1, s12
 800e304:	eeb0 0a66 	vmov.f32	s0, s13
 800e308:	f7f5 fc62 	bl	8003bd0 <straight_table2>
				if(mollifier_mode == ON){
 800e30c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e310:	2b01      	cmp	r3, #1
 800e312:	d10c      	bne.n	800e32e <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e318:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e31c:	eeb0 1a47 	vmov.f32	s2, s14
 800e320:	eddf 0a95 	vldr	s1, [pc, #596]	; 800e578 <V90L+0x330>
 800e324:	eeb0 0a67 	vmov.f32	s0, s15
 800e328:	f7f6 fbee 	bl	8004b08 <mollifier_slalom_table>
 800e32c:	e013      	b.n	800e356 <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e32e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e332:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e336:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e33a:	eef0 2a66 	vmov.f32	s5, s13
 800e33e:	eeb0 2a47 	vmov.f32	s4, s14
 800e342:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800e574 <V90L+0x32c>
 800e346:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800e574 <V90L+0x32c>
 800e34a:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800e578 <V90L+0x330>
 800e34e:	eeb0 0a67 	vmov.f32	s0, s15
 800e352:	f7f6 fa89 	bl	8004868 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800e356:	2300      	movs	r3, #0
 800e358:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800e35a:	2300      	movs	r3, #0
 800e35c:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e360:	4618      	mov	r0, r3
 800e362:	f7f2 f919 	bl	8000598 <__aeabi_f2d>
 800e366:	a37e      	add	r3, pc, #504	; (adr r3, 800e560 <V90L+0x318>)
 800e368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36c:	f7f1 ffb6 	bl	80002dc <__adddf3>
 800e370:	4602      	mov	r2, r0
 800e372:	460b      	mov	r3, r1
 800e374:	4610      	mov	r0, r2
 800e376:	4619      	mov	r1, r3
 800e378:	f7f2 fc3e 	bl	8000bf8 <__aeabi_d2f>
 800e37c:	4603      	mov	r3, r0
 800e37e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e382:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e386:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e38a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e38e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e392:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e396:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e39a:	eddf 5a74 	vldr	s11, [pc, #464]	; 800e56c <V90L+0x324>
 800e39e:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e3a2:	68f8      	ldr	r0, [r7, #12]
 800e3a4:	eeb0 2a47 	vmov.f32	s4, s14
 800e3a8:	eef0 1a46 	vmov.f32	s3, s12
 800e3ac:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800e574 <V90L+0x32c>
 800e3b0:	eef0 0a66 	vmov.f32	s1, s13
 800e3b4:	ee00 3a10 	vmov	s0, r3
 800e3b8:	f7f5 fc0a 	bl	8003bd0 <straight_table2>
				highspeed_mode = 0;
 800e3bc:	4b6a      	ldr	r3, [pc, #424]	; (800e568 <V90L+0x320>)
 800e3be:	2200      	movs	r2, #0
 800e3c0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800e3c2:	e13a      	b.n	800e63a <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800e3c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	f240 808a 	bls.w	800e4e2 <V90L+0x29a>
		highspeed_mode = 1;
 800e3ce:	4b66      	ldr	r3, [pc, #408]	; (800e568 <V90L+0x320>)
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800e3d4:	2300      	movs	r3, #0
 800e3d6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e3dc:	2304      	movs	r3, #4
 800e3de:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e3e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e3e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e3ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e3f0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e3f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e3f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e3fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e400:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e404:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e408:	eddf 4a58 	vldr	s9, [pc, #352]	; 800e56c <V90L+0x324>
 800e40c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e410:	68f8      	ldr	r0, [r7, #12]
 800e412:	eeb0 2a47 	vmov.f32	s4, s14
 800e416:	eef0 1a45 	vmov.f32	s3, s10
 800e41a:	eeb0 1a65 	vmov.f32	s2, s11
 800e41e:	eef0 0a46 	vmov.f32	s1, s12
 800e422:	eeb0 0a66 	vmov.f32	s0, s13
 800e426:	f7f5 fbd3 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800e42a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d10c      	bne.n	800e44c <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e432:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e436:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e43a:	eeb0 1a47 	vmov.f32	s2, s14
 800e43e:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800e578 <V90L+0x330>
 800e442:	eeb0 0a67 	vmov.f32	s0, s15
 800e446:	f7f6 fb5f 	bl	8004b08 <mollifier_slalom_table>
 800e44a:	e013      	b.n	800e474 <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e44c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e450:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e454:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e458:	eef0 2a66 	vmov.f32	s5, s13
 800e45c:	eeb0 2a47 	vmov.f32	s4, s14
 800e460:	eddf 1a44 	vldr	s3, [pc, #272]	; 800e574 <V90L+0x32c>
 800e464:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800e574 <V90L+0x32c>
 800e468:	eddf 0a43 	vldr	s1, [pc, #268]	; 800e578 <V90L+0x330>
 800e46c:	eeb0 0a67 	vmov.f32	s0, s15
 800e470:	f7f6 f9fa 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=0;
 800e474:	2300      	movs	r3, #0
 800e476:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e478:	2300      	movs	r3, #0
 800e47a:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e47e:	4618      	mov	r0, r3
 800e480:	f7f2 f88a 	bl	8000598 <__aeabi_f2d>
 800e484:	a336      	add	r3, pc, #216	; (adr r3, 800e560 <V90L+0x318>)
 800e486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e48a:	f7f1 ff27 	bl	80002dc <__adddf3>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4610      	mov	r0, r2
 800e494:	4619      	mov	r1, r3
 800e496:	f7f2 fbaf 	bl	8000bf8 <__aeabi_d2f>
 800e49a:	4603      	mov	r3, r0
 800e49c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800e4a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e4a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e4a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e4ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e4b0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800e4b4:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800e4b8:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800e56c <V90L+0x324>
 800e4bc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800e4c0:	68f8      	ldr	r0, [r7, #12]
 800e4c2:	eeb0 2a47 	vmov.f32	s4, s14
 800e4c6:	eef0 1a46 	vmov.f32	s3, s12
 800e4ca:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800e574 <V90L+0x32c>
 800e4ce:	eef0 0a66 	vmov.f32	s1, s13
 800e4d2:	ee00 3a10 	vmov	s0, r3
 800e4d6:	f7f5 fb7b 	bl	8003bd0 <straight_table2>
		highspeed_mode = 0;
 800e4da:	4b23      	ldr	r3, [pc, #140]	; (800e568 <V90L+0x320>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
}
 800e4e0:	e0ab      	b.n	800e63a <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800e4ea:	2304      	movs	r3, #4
 800e4ec:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e4f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800e4f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800e4fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800e4fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800e502:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e506:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e50a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e50e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800e512:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800e516:	eddf 4a15 	vldr	s9, [pc, #84]	; 800e56c <V90L+0x324>
 800e51a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800e51e:	68f8      	ldr	r0, [r7, #12]
 800e520:	eeb0 2a47 	vmov.f32	s4, s14
 800e524:	eef0 1a45 	vmov.f32	s3, s10
 800e528:	eeb0 1a65 	vmov.f32	s2, s11
 800e52c:	eef0 0a46 	vmov.f32	s1, s12
 800e530:	eeb0 0a66 	vmov.f32	s0, s13
 800e534:	f7f5 fb4c 	bl	8003bd0 <straight_table2>
		if(mollifier_mode == ON){
 800e538:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800e53c:	2b01      	cmp	r3, #1
 800e53e:	d11d      	bne.n	800e57c <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800e540:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e544:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e548:	eeb0 1a47 	vmov.f32	s2, s14
 800e54c:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800e578 <V90L+0x330>
 800e550:	eeb0 0a67 	vmov.f32	s0, s15
 800e554:	f7f6 fad8 	bl	8004b08 <mollifier_slalom_table>
 800e558:	e024      	b.n	800e5a4 <V90L+0x35c>
 800e55a:	bf00      	nop
 800e55c:	f3af 8000 	nop.w
 800e560:	c022ec18 	.word	0xc022ec18
 800e564:	405fd1de 	.word	0x405fd1de
 800e568:	20000814 	.word	0x20000814
 800e56c:	42340000 	.word	0x42340000
 800e570:	42d4477b 	.word	0x42d4477b
 800e574:	00000000 	.word	0x00000000
 800e578:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800e57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e580:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e584:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800e588:	eef0 2a66 	vmov.f32	s5, s13
 800e58c:	eeb0 2a47 	vmov.f32	s4, s14
 800e590:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800e574 <V90L+0x32c>
 800e594:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800e574 <V90L+0x32c>
 800e598:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800e578 <V90L+0x330>
 800e59c:	eeb0 0a67 	vmov.f32	s0, s15
 800e5a0:	f7f6 f962 	bl	8004868 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800e5a4:	2303      	movs	r3, #3
 800e5a6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e5ac:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800e5b0:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800e5b4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e5b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800e5bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e5c0:	edd7 7a01 	vldr	s15, [r7, #4]
 800e5c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800e5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e5cc:	eef0 7ae7 	vabs.f32	s15, s15
 800e5d0:	ee17 0a90 	vmov	r0, s15
 800e5d4:	f7f1 ffe0 	bl	8000598 <__aeabi_f2d>
 800e5d8:	f04f 0200 	mov.w	r2, #0
 800e5dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e5e0:	f7f2 f95c 	bl	800089c <__aeabi_ddiv>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	4614      	mov	r4, r2
 800e5ea:	461d      	mov	r5, r3
 800e5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	f7f1 ffd2 	bl	8000598 <__aeabi_f2d>
 800e5f4:	4602      	mov	r2, r0
 800e5f6:	460b      	mov	r3, r1
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	4629      	mov	r1, r5
 800e5fc:	f7f2 f94e 	bl	800089c <__aeabi_ddiv>
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	4610      	mov	r0, r2
 800e606:	4619      	mov	r1, r3
 800e608:	f04f 0200 	mov.w	r2, #0
 800e60c:	4b0f      	ldr	r3, [pc, #60]	; (800e64c <V90L+0x404>)
 800e60e:	f7f1 fe65 	bl	80002dc <__adddf3>
 800e612:	4602      	mov	r2, r0
 800e614:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800e616:	4610      	mov	r0, r2
 800e618:	4619      	mov	r1, r3
 800e61a:	f7f2 faed 	bl	8000bf8 <__aeabi_d2f>
 800e61e:	4603      	mov	r3, r0
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	ee02 3a10 	vmov	s4, r3
 800e626:	edd7 1a01 	vldr	s3, [r7, #4]
 800e62a:	ed97 1a01 	vldr	s2, [r7, #4]
 800e62e:	eef0 0a68 	vmov.f32	s1, s17
 800e632:	eeb0 0a48 	vmov.f32	s0, s16
 800e636:	f7f5 facb 	bl	8003bd0 <straight_table2>
}
 800e63a:	bf00      	nop
 800e63c:	3710      	adds	r7, #16
 800e63e:	46bd      	mov	sp, r7
 800e640:	ecbd 8b02 	vpop	{d8}
 800e644:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800e648:	b004      	add	sp, #16
 800e64a:	4770      	bx	lr
 800e64c:	408f4000 	.word	0x408f4000

0800e650 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800e650:	b084      	sub	sp, #16
 800e652:	b580      	push	{r7, lr}
 800e654:	b086      	sub	sp, #24
 800e656:	af04      	add	r7, sp, #16
 800e658:	f107 0c10 	add.w	ip, r7, #16
 800e65c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e660:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800e664:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d116      	bne.n	800e69a <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800e66c:	2001      	movs	r0, #1
 800e66e:	f7f9 ff3f 	bl	80084f0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e672:	2003      	movs	r0, #3
 800e674:	f7f9 ff46 	bl	8008504 <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800e678:	ed97 0a01 	vldr	s0, [r7, #4]
 800e67c:	f7f9 ffd6 	bl	800862c <pl_FunMotor_duty>
		pl_FunMotor_start();
 800e680:	f7f9 ffc0 	bl	8008604 <pl_FunMotor_start>
		HAL_Delay(600);
 800e684:	f44f 7016 	mov.w	r0, #600	; 0x258
 800e688:	f00a fff2 	bl	8019670 <HAL_Delay>
		reset_gyro();
 800e68c:	f7f3 fa94 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800e690:	f7f2 fcc8 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e694:	f7f6 fdac 	bl	80051f0 <clear_Ierror>
 800e698:	e00b      	b.n	800e6b2 <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800e69a:	2001      	movs	r0, #1
 800e69c:	f7f9 ff28 	bl	80084f0 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e6a0:	2003      	movs	r0, #3
 800e6a2:	f7f9 ff2f 	bl	8008504 <pl_L_DriveMotor_mode>
		reset_gyro();
 800e6a6:	f7f3 fa87 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800e6aa:	f7f2 fcbb 	bl	8001024 <reset_speed>
		clear_Ierror();
 800e6ae:	f7f6 fd9f 	bl	80051f0 <clear_Ierror>

	}
	record_mode=12;
 800e6b2:	4ba8      	ldr	r3, [pc, #672]	; (800e954 <testturning+0x304>)
 800e6b4:	220c      	movs	r2, #12
 800e6b6:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800e6b8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d110      	bne.n	800e6e2 <testturning+0x92>
 800e6c0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e6c4:	9303      	str	r3, [sp, #12]
 800e6c6:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e6ca:	9302      	str	r3, [sp, #8]
 800e6cc:	2301      	movs	r3, #1
 800e6ce:	9301      	str	r3, [sp, #4]
 800e6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d2:	9300      	str	r3, [sp, #0]
 800e6d4:	f107 0318 	add.w	r3, r7, #24
 800e6d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6da:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800e958 <testturning+0x308>
 800e6de:	f7fc f973 	bl	800a9c8 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800e6e2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e6e6:	2b01      	cmp	r3, #1
 800e6e8:	d110      	bne.n	800e70c <testturning+0xbc>
 800e6ea:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e6ee:	9303      	str	r3, [sp, #12]
 800e6f0:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800e6f4:	9302      	str	r3, [sp, #8]
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	9301      	str	r3, [sp, #4]
 800e6fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6fc:	9300      	str	r3, [sp, #0]
 800e6fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800e702:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e704:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800e958 <testturning+0x308>
 800e708:	f7fc fb44 	bl	800ad94 <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800e70c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e710:	2b02      	cmp	r3, #2
 800e712:	d10d      	bne.n	800e730 <testturning+0xe0>
 800e714:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e718:	9302      	str	r3, [sp, #8]
 800e71a:	2301      	movs	r3, #1
 800e71c:	9301      	str	r3, [sp, #4]
 800e71e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800e726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e728:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800e958 <testturning+0x308>
 800e72c:	f7fc fd14 	bl	800b158 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800e730:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e734:	2b03      	cmp	r3, #3
 800e736:	d10d      	bne.n	800e754 <testturning+0x104>
 800e738:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e73c:	9302      	str	r3, [sp, #8]
 800e73e:	2301      	movs	r3, #1
 800e740:	9301      	str	r3, [sp, #4]
 800e742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e744:	9300      	str	r3, [sp, #0]
 800e746:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e74a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e74c:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800e958 <testturning+0x308>
 800e750:	f7fc fe6c 	bl	800b42c <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800e754:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e758:	2b04      	cmp	r3, #4
 800e75a:	d10d      	bne.n	800e778 <testturning+0x128>
 800e75c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e760:	9302      	str	r3, [sp, #8]
 800e762:	2301      	movs	r3, #1
 800e764:	9301      	str	r3, [sp, #4]
 800e766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e768:	9300      	str	r3, [sp, #0]
 800e76a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800e76e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e770:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800e958 <testturning+0x308>
 800e774:	f7fc ffbe 	bl	800b6f4 <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800e778:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e77c:	2b05      	cmp	r3, #5
 800e77e:	d10e      	bne.n	800e79e <testturning+0x14e>
 800e780:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e784:	9302      	str	r3, [sp, #8]
 800e786:	2301      	movs	r3, #1
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800e794:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e796:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800e958 <testturning+0x308>
 800e79a:	f7fd f915 	bl	800b9c8 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800e79e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7a2:	2b06      	cmp	r3, #6
 800e7a4:	d10e      	bne.n	800e7c4 <testturning+0x174>
 800e7a6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7aa:	9302      	str	r3, [sp, #8]
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	9301      	str	r3, [sp, #4]
 800e7b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e7b4:	9300      	str	r3, [sp, #0]
 800e7b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e7ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7bc:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800e958 <testturning+0x308>
 800e7c0:	f7fd fa6a 	bl	800bc98 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800e7c4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7c8:	2b07      	cmp	r3, #7
 800e7ca:	d10e      	bne.n	800e7ea <testturning+0x19a>
 800e7cc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7d0:	9302      	str	r3, [sp, #8]
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	9301      	str	r3, [sp, #4]
 800e7d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800e7da:	9300      	str	r3, [sp, #0]
 800e7dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800e7e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e7e2:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800e958 <testturning+0x308>
 800e7e6:	f7fd fc9f 	bl	800c128 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800e7ea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e7ee:	2b08      	cmp	r3, #8
 800e7f0:	d10e      	bne.n	800e810 <testturning+0x1c0>
 800e7f2:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e7f6:	9302      	str	r3, [sp, #8]
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	9301      	str	r3, [sp, #4]
 800e7fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e800:	9300      	str	r3, [sp, #0]
 800e802:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800e806:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e808:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800e958 <testturning+0x308>
 800e80c:	f7fd fecc 	bl	800c5a8 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800e810:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e814:	2b09      	cmp	r3, #9
 800e816:	d10e      	bne.n	800e836 <testturning+0x1e6>
 800e818:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e81c:	9302      	str	r3, [sp, #8]
 800e81e:	2301      	movs	r3, #1
 800e820:	9301      	str	r3, [sp, #4]
 800e822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e826:	9300      	str	r3, [sp, #0]
 800e828:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e82c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e82e:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800e958 <testturning+0x308>
 800e832:	f7fe f901 	bl	800ca38 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800e836:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e83a:	2b0a      	cmp	r3, #10
 800e83c:	d10e      	bne.n	800e85c <testturning+0x20c>
 800e83e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e842:	9302      	str	r3, [sp, #8]
 800e844:	2301      	movs	r3, #1
 800e846:	9301      	str	r3, [sp, #4]
 800e848:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800e84c:	9300      	str	r3, [sp, #0]
 800e84e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800e852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e854:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800e958 <testturning+0x308>
 800e858:	f7fe fb32 	bl	800cec0 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800e85c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e860:	2b0b      	cmp	r3, #11
 800e862:	d10e      	bne.n	800e882 <testturning+0x232>
 800e864:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e868:	9302      	str	r3, [sp, #8]
 800e86a:	2301      	movs	r3, #1
 800e86c:	9301      	str	r3, [sp, #4]
 800e86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800e872:	9300      	str	r3, [sp, #0]
 800e874:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800e878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e87a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800e958 <testturning+0x308>
 800e87e:	f7fe fd11 	bl	800d2a4 <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800e882:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e886:	2b0c      	cmp	r3, #12
 800e888:	d10e      	bne.n	800e8a8 <testturning+0x258>
 800e88a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e88e:	9302      	str	r3, [sp, #8]
 800e890:	2301      	movs	r3, #1
 800e892:	9301      	str	r3, [sp, #4]
 800e894:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800e898:	9300      	str	r3, [sp, #0]
 800e89a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800e89e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8a0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800e958 <testturning+0x308>
 800e8a4:	f7fe fee6 	bl	800d674 <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800e8a8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8ac:	2b0d      	cmp	r3, #13
 800e8ae:	d10e      	bne.n	800e8ce <testturning+0x27e>
 800e8b0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8b4:	9302      	str	r3, [sp, #8]
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	9301      	str	r3, [sp, #4]
 800e8ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e8be:	9300      	str	r3, [sp, #0]
 800e8c0:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800e8c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8c6:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800e958 <testturning+0x308>
 800e8ca:	f7ff f8c5 	bl	800da58 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800e8ce:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8d2:	2b0e      	cmp	r3, #14
 800e8d4:	d10e      	bne.n	800e8f4 <testturning+0x2a4>
 800e8d6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e8da:	9302      	str	r3, [sp, #8]
 800e8dc:	2301      	movs	r3, #1
 800e8de:	9301      	str	r3, [sp, #4]
 800e8e0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800e8e4:	9300      	str	r3, [sp, #0]
 800e8e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800e8ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e8ec:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800e958 <testturning+0x308>
 800e8f0:	f7ff fa9e 	bl	800de30 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800e8f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800e8f8:	2b0f      	cmp	r3, #15
 800e8fa:	d10e      	bne.n	800e91a <testturning+0x2ca>
 800e8fc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800e900:	9302      	str	r3, [sp, #8]
 800e902:	2301      	movs	r3, #1
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800e90a:	9300      	str	r3, [sp, #0]
 800e90c:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800e910:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e912:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800e958 <testturning+0x308>
 800e916:	f7ff fc97 	bl	800e248 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800e91a:	4b0e      	ldr	r3, [pc, #56]	; (800e954 <testturning+0x304>)
 800e91c:	2200      	movs	r2, #0
 800e91e:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e920:	2003      	movs	r0, #3
 800e922:	f7f9 fe17 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e926:	2003      	movs	r0, #3
 800e928:	f7f9 fdec 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800e92c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e930:	f7fa f90e 	bl	8008b50 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800e934:	f7f9 fe70 	bl	8008618 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800e938:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e93c:	f7fa f908 	bl	8008b50 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800e940:	2000      	movs	r0, #0
 800e942:	f7f9 fdd5 	bl	80084f0 <pl_DriveMotor_standby>

}
 800e946:	bf00      	nop
 800e948:	3708      	adds	r7, #8
 800e94a:	46bd      	mov	sp, r7
 800e94c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e950:	b004      	add	sp, #16
 800e952:	4770      	bx	lr
 800e954:	2000f284 	.word	0x2000f284
 800e958:	c2c80000 	.word	0xc2c80000

0800e95c <get_wallData_sensor>:





void get_wallData_sensor(_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 800e95c:	b480      	push	{r7}
 800e95e:	b085      	sub	sp, #20
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	60b9      	str	r1, [r7, #8]
 800e966:	607a      	str	r2, [r7, #4]

	*front_wall = (g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e968:	4b12      	ldr	r3, [pc, #72]	; (800e9b4 <get_wallData_sensor+0x58>)
 800e96a:	689b      	ldr	r3, [r3, #8]
 800e96c:	2b86      	cmp	r3, #134	; 0x86
 800e96e:	bfcc      	ite	gt
 800e970:	2301      	movgt	r3, #1
 800e972:	2300      	movle	r3, #0
 800e974:	b2da      	uxtb	r2, r3
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	701a      	strb	r2, [r3, #0]
	*right_wall = (g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e97a:	4b0e      	ldr	r3, [pc, #56]	; (800e9b4 <get_wallData_sensor+0x58>)
 800e97c:	691b      	ldr	r3, [r3, #16]
 800e97e:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e982:	4293      	cmp	r3, r2
 800e984:	bfcc      	ite	gt
 800e986:	2301      	movgt	r3, #1
 800e988:	2300      	movle	r3, #0
 800e98a:	b2da      	uxtb	r2, r3
 800e98c:	68bb      	ldr	r3, [r7, #8]
 800e98e:	701a      	strb	r2, [r3, #0]
	*left_wall  = (g_sensor_mean[SENSOR_LEFT]  >= L_PRESENCE);
 800e990:	4b08      	ldr	r3, [pc, #32]	; (800e9b4 <get_wallData_sensor+0x58>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e998:	4293      	cmp	r3, r2
 800e99a:	bfcc      	ite	gt
 800e99c:	2301      	movgt	r3, #1
 800e99e:	2300      	movle	r3, #0
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	701a      	strb	r2, [r3, #0]

}
 800e9a6:	bf00      	nop
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20000474 	.word	0x20000474

0800e9b8 <update_coordinate>:


void update_coordinate(int *x,int *y,int direction){
 800e9b8:	b480      	push	{r7}
 800e9ba:	b085      	sub	sp, #20
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	3b01      	subs	r3, #1
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	d823      	bhi.n	800ea14 <update_coordinate+0x5c>
 800e9cc:	a201      	add	r2, pc, #4	; (adr r2, 800e9d4 <update_coordinate+0x1c>)
 800e9ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9d2:	bf00      	nop
 800e9d4:	0800e9e5 	.word	0x0800e9e5
 800e9d8:	0800e9f1 	.word	0x0800e9f1
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800ea09 	.word	0x0800ea09
	case 1://北
		*y += 1;
 800e9e4:	68bb      	ldr	r3, [r7, #8]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	1c5a      	adds	r2, r3, #1
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	601a      	str	r2, [r3, #0]
		break;
 800e9ee:	e011      	b.n	800ea14 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	1c5a      	adds	r2, r3, #1
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	601a      	str	r2, [r3, #0]
		break;
 800e9fa:	e00b      	b.n	800ea14 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	1e5a      	subs	r2, r3, #1
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	601a      	str	r2, [r3, #0]
		break;
 800ea06:	e005      	b.n	800ea14 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	1e5a      	subs	r2, r3, #1
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	601a      	str	r2, [r3, #0]
		break;
 800ea12:	bf00      	nop
	}



}
 800ea14:	bf00      	nop
 800ea16:	3714      	adds	r7, #20
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1e:	4770      	bx	lr

0800ea20 <run_movement_continuity>:

void run_movement_continuity(int *direction,unsigned short front_count,unsigned short right_count,
		unsigned short back_count,unsigned short left_count,float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b08e      	sub	sp, #56	; 0x38
 800ea24:	af04      	add	r7, sp, #16
 800ea26:	61f8      	str	r0, [r7, #28]
 800ea28:	4608      	mov	r0, r1
 800ea2a:	4611      	mov	r1, r2
 800ea2c:	461a      	mov	r2, r3
 800ea2e:	ed87 0a04 	vstr	s0, [r7, #16]
 800ea32:	edc7 0a03 	vstr	s1, [r7, #12]
 800ea36:	ed87 1a02 	vstr	s2, [r7, #8]
 800ea3a:	edc7 1a01 	vstr	s3, [r7, #4]
 800ea3e:	4603      	mov	r3, r0
 800ea40:	837b      	strh	r3, [r7, #26]
 800ea42:	460b      	mov	r3, r1
 800ea44:	833b      	strh	r3, [r7, #24]
 800ea46:	4613      	mov	r3, r2
 800ea48:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ea4a:	8b7a      	ldrh	r2, [r7, #26]
 800ea4c:	8b3b      	ldrh	r3, [r7, #24]
 800ea4e:	429a      	cmp	r2, r3
 800ea50:	d81d      	bhi.n	800ea8e <run_movement_continuity+0x6e>
 800ea52:	8b7a      	ldrh	r2, [r7, #26]
 800ea54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d819      	bhi.n	800ea8e <run_movement_continuity+0x6e>
 800ea5a:	8b7a      	ldrh	r2, [r7, #26]
 800ea5c:	8afb      	ldrh	r3, [r7, #22]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d815      	bhi.n	800ea8e <run_movement_continuity+0x6e>
		// 直進
		mode.WallControlMode=1;
 800ea62:	2301      	movs	r3, #1
 800ea64:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea76:	ed97 2a02 	vldr	s4, [r7, #8]
 800ea7a:	edd7 1a04 	vldr	s3, [r7, #16]
 800ea7e:	ed97 1a04 	vldr	s2, [r7, #16]
 800ea82:	edd7 0a04 	vldr	s1, [r7, #16]
 800ea86:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800ec04 <run_movement_continuity+0x1e4>
 800ea8a:	f7f5 f8a1 	bl	8003bd0 <straight_table2>
	}
	if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ea8e:	8b3a      	ldrh	r2, [r7, #24]
 800ea90:	8b7b      	ldrh	r3, [r7, #26]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d21b      	bcs.n	800eace <run_movement_continuity+0xae>
 800ea96:	8b3a      	ldrh	r2, [r7, #24]
 800ea98:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d817      	bhi.n	800eace <run_movement_continuity+0xae>
 800ea9e:	8b3a      	ldrh	r2, [r7, #24]
 800eaa0:	8afb      	ldrh	r3, [r7, #22]
 800eaa2:	429a      	cmp	r2, r3
 800eaa4:	d813      	bhi.n	800eace <run_movement_continuity+0xae>
		// 右旋回
		slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	9303      	str	r3, [sp, #12]
 800eaaa:	2300      	movs	r3, #0
 800eaac:	9302      	str	r3, [sp, #8]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9301      	str	r3, [sp, #4]
 800eab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eab4:	9300      	str	r3, [sp, #0]
 800eab6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800eaba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eabc:	ed97 0a04 	vldr	s0, [r7, #16]
 800eac0:	f7fb ff82 	bl	800a9c8 <slalomR>
		*direction += 1;
 800eac4:	69fb      	ldr	r3, [r7, #28]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	1c5a      	adds	r2, r3, #1
 800eaca:	69fb      	ldr	r3, [r7, #28]
 800eacc:	601a      	str	r2, [r3, #0]
	}
	if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800eace:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ead0:	8b7b      	ldrh	r3, [r7, #26]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d21b      	bcs.n	800eb0e <run_movement_continuity+0xee>
 800ead6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ead8:	8b3b      	ldrh	r3, [r7, #24]
 800eada:	429a      	cmp	r2, r3
 800eadc:	d217      	bcs.n	800eb0e <run_movement_continuity+0xee>
 800eade:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800eae0:	8afb      	ldrh	r3, [r7, #22]
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d813      	bhi.n	800eb0e <run_movement_continuity+0xee>
		// 左旋回
		slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800eae6:	2300      	movs	r3, #0
 800eae8:	9303      	str	r3, [sp, #12]
 800eaea:	2300      	movs	r3, #0
 800eaec:	9302      	str	r3, [sp, #8]
 800eaee:	2300      	movs	r3, #0
 800eaf0:	9301      	str	r3, [sp, #4]
 800eaf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800eaf4:	9300      	str	r3, [sp, #0]
 800eaf6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800eafa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eafc:	ed97 0a04 	vldr	s0, [r7, #16]
 800eb00:	f7fc f948 	bl	800ad94 <slalomL>
		*direction -= 1;
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	1e5a      	subs	r2, r3, #1
 800eb0a:	69fb      	ldr	r3, [r7, #28]
 800eb0c:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800eb0e:	8afa      	ldrh	r2, [r7, #22]
 800eb10:	8b7b      	ldrh	r3, [r7, #26]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d272      	bcs.n	800ebfc <run_movement_continuity+0x1dc>
 800eb16:	8afa      	ldrh	r2, [r7, #22]
 800eb18:	8b3b      	ldrh	r3, [r7, #24]
 800eb1a:	429a      	cmp	r2, r3
 800eb1c:	d26e      	bcs.n	800ebfc <run_movement_continuity+0x1dc>
			&& back_count < left_count){
 800eb1e:	8afa      	ldrh	r2, [r7, #22]
 800eb20:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800eb22:	429a      	cmp	r2, r3
 800eb24:	d26a      	bcs.n	800ebfc <run_movement_continuity+0x1dc>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		mode.WallControlMode=1;
 800eb26:	2301      	movs	r3, #1
 800eb28:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		mode.calMazeMode=0;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		mode.WallCutMode=0;
 800eb32:	2300      	movs	r3, #0
 800eb34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb3a:	ed97 2a02 	vldr	s4, [r7, #8]
 800eb3e:	edd7 1a04 	vldr	s3, [r7, #16]
 800eb42:	ed9f 1a31 	vldr	s2, [pc, #196]	; 800ec08 <run_movement_continuity+0x1e8>
 800eb46:	edd7 0a04 	vldr	s1, [r7, #16]
 800eb4a:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800ec0c <run_movement_continuity+0x1ec>
 800eb4e:	f7f5 f83f 	bl	8003bd0 <straight_table2>
		create_DijkstraMap();
 800eb52:	f003 f9ed 	bl	8011f30 <create_DijkstraMap>
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800eb56:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800eb5a:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800eb5e:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800eb62:	4618      	mov	r0, r3
 800eb64:	edd7 0a01 	vldr	s1, [r7, #4]
 800eb68:	ed97 0a03 	vldr	s0, [r7, #12]
 800eb6c:	f7fb fe5a 	bl	800a824 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800eb70:	2064      	movs	r0, #100	; 0x64
 800eb72:	f7f9 ffed 	bl	8008b50 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800eb76:	2300      	movs	r3, #0
 800eb78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800eb7c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d024      	beq.n	800ebce <run_movement_continuity+0x1ae>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800eb84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eb86:	ed9f 2a22 	vldr	s4, [pc, #136]	; 800ec10 <run_movement_continuity+0x1f0>
 800eb8a:	eddf 1a22 	vldr	s3, [pc, #136]	; 800ec14 <run_movement_continuity+0x1f4>
 800eb8e:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 800ec08 <run_movement_continuity+0x1e8>
 800eb92:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ec08 <run_movement_continuity+0x1e8>
 800eb96:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800eb9a:	f7f5 f819 	bl	8003bd0 <straight_table2>
		wait_ms_NoReset(100);
 800eb9e:	2064      	movs	r0, #100	; 0x64
 800eba0:	f7f9 ffd6 	bl	8008b50 <wait_ms_NoReset>
		clear_Ierror();
 800eba4:	f7f6 fb24 	bl	80051f0 <clear_Ierror>
		reset_speed();
 800eba8:	f7f2 fa3c 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ebac:	2301      	movs	r3, #1
 800ebae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebb4:	ed97 2a02 	vldr	s4, [r7, #8]
 800ebb8:	edd7 1a04 	vldr	s3, [r7, #16]
 800ebbc:	ed97 1a04 	vldr	s2, [r7, #16]
 800ebc0:	eddf 0a11 	vldr	s1, [pc, #68]	; 800ec08 <run_movement_continuity+0x1e8>
 800ebc4:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800ec18 <run_movement_continuity+0x1f8>
 800ebc8:	f7f5 f802 	bl	8003bd0 <straight_table2>
 800ebcc:	e011      	b.n	800ebf2 <run_movement_continuity+0x1d2>
		}else{
			clear_Ierror();
 800ebce:	f7f6 fb0f 	bl	80051f0 <clear_Ierror>
			mode.WallControlMode=0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ebda:	ed97 2a02 	vldr	s4, [r7, #8]
 800ebde:	edd7 1a04 	vldr	s3, [r7, #16]
 800ebe2:	ed97 1a04 	vldr	s2, [r7, #16]
 800ebe6:	eddf 0a08 	vldr	s1, [pc, #32]	; 800ec08 <run_movement_continuity+0x1e8>
 800ebea:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800ec1c <run_movement_continuity+0x1fc>
 800ebee:	f7f4 ffef 	bl	8003bd0 <straight_table2>
		}
		*direction = *direction + 2;
 800ebf2:	69fb      	ldr	r3, [r7, #28]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	1c9a      	adds	r2, r3, #2
 800ebf8:	69fb      	ldr	r3, [r7, #28]
 800ebfa:	601a      	str	r2, [r3, #0]
	}

}
 800ebfc:	bf00      	nop
 800ebfe:	3728      	adds	r7, #40	; 0x28
 800ec00:	46bd      	mov	sp, r7
 800ec02:	bd80      	pop	{r7, pc}
 800ec04:	42a40000 	.word	0x42a40000
 800ec08:	00000000 	.word	0x00000000
 800ec0c:	42140000 	.word	0x42140000
 800ec10:	447a0000 	.word	0x447a0000
 800ec14:	c3160000 	.word	0xc3160000
 800ec18:	42830000 	.word	0x42830000
 800ec1c:	42540000 	.word	0x42540000

0800ec20 <run_movement_suspension>:
void run_movement_suspension(int *direction, unsigned short front_count,
		unsigned short right_count, unsigned short back_count,
		unsigned short left_count, float input_StraightVelocity,
		float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,
		_Bool front_wall, _Bool right_wall, _Bool left_wall,int x,int y,uint8_t MazeRecord_mode,uint8_t Dijkstra_mode) {
 800ec20:	b580      	push	{r7, lr}
 800ec22:	b08e      	sub	sp, #56	; 0x38
 800ec24:	af04      	add	r7, sp, #16
 800ec26:	61f8      	str	r0, [r7, #28]
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4611      	mov	r1, r2
 800ec2c:	461a      	mov	r2, r3
 800ec2e:	ed87 0a04 	vstr	s0, [r7, #16]
 800ec32:	edc7 0a03 	vstr	s1, [r7, #12]
 800ec36:	ed87 1a02 	vstr	s2, [r7, #8]
 800ec3a:	edc7 1a01 	vstr	s3, [r7, #4]
 800ec3e:	4603      	mov	r3, r0
 800ec40:	837b      	strh	r3, [r7, #26]
 800ec42:	460b      	mov	r3, r1
 800ec44:	833b      	strh	r3, [r7, #24]
 800ec46:	4613      	mov	r3, r2
 800ec48:	82fb      	strh	r3, [r7, #22]
	MOTOR_MODE mode;
	// 移動の優先順位 ： 前→右→左→後
	mode.WallControlMode = 1;
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.calMazeMode = 0;
 800ec50:	2300      	movs	r3, #0
 800ec52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	mode.WallCutMode = 0;
 800ec56:	2300      	movs	r3, #0
 800ec58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	straight_table2(MAZE_SECTION / 2 - MAZE_OFFSET - (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), input_StraightVelocity, 0, input_StraightVelocity, input_StraightAcceleration, mode);
 800ec5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ec5e:	ed97 2a02 	vldr	s4, [r7, #8]
 800ec62:	edd7 1a04 	vldr	s3, [r7, #16]
 800ec66:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 800eef4 <run_movement_suspension+0x2d4>
 800ec6a:	edd7 0a04 	vldr	s1, [r7, #16]
 800ec6e:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800ec72:	f7f4 ffad 	bl	8003bd0 <straight_table2>

	if(MazeRecord_mode==1){
 800ec76:	f897 3190 	ldrb.w	r3, [r7, #400]	; 0x190
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d10e      	bne.n	800ec9c <run_movement_suspension+0x7c>
		if(error_mode==0){
 800ec7e:	4b9e      	ldr	r3, [pc, #632]	; (800eef8 <run_movement_suspension+0x2d8>)
 800ec80:	781b      	ldrb	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d101      	bne.n	800ec8a <run_movement_suspension+0x6a>
		record_in();
 800ec86:	f7f9 f955 	bl	8007f34 <record_in>
		}
		clear_Ierror();
 800ec8a:	f7f6 fab1 	bl	80051f0 <clear_Ierror>
		reset_gyro();
 800ec8e:	f7f2 ff93 	bl	8001bb8 <reset_gyro>
		reset_speed();
 800ec92:	f7f2 f9c7 	bl	8001024 <reset_speed>
		maze_mode = 1;
 800ec96:	4b99      	ldr	r3, [pc, #612]	; (800eefc <run_movement_suspension+0x2dc>)
 800ec98:	2201      	movs	r2, #1
 800ec9a:	701a      	strb	r2, [r3, #0]
	}

	if(Dijkstra_mode==1){
 800ec9c:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d144      	bne.n	800ed2e <run_movement_suspension+0x10e>
		create_DijkstraMap();
 800eca4:	f003 f944 	bl	8011f30 <create_DijkstraMap>
		route_Dijkstra(); //ダイクストラ法の結果から最短ルートをスタックに入れる
 800eca8:	f004 fe7c 	bl	80139a4 <route_Dijkstra>
		create_StepCountMap_unknown();
 800ecac:	f005 fb30 	bl	8014310 <create_StepCountMap_unknown>
		search_AroundWalkCount(&front_count, &right_count, &back_count, &left_count, x, y, *direction);
 800ecb0:	69fb      	ldr	r3, [r7, #28]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f107 0216 	add.w	r2, r7, #22
 800ecb8:	f107 0118 	add.w	r1, r7, #24
 800ecbc:	f107 001a 	add.w	r0, r7, #26
 800ecc0:	9302      	str	r3, [sp, #8]
 800ecc2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800ecc6:	9301      	str	r3, [sp, #4]
 800ecc8:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800eccc:	9300      	str	r3, [sp, #0]
 800ecce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ecd2:	f003 f805 	bl	8011ce0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800ecd6:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d001      	beq.n	800ece2 <run_movement_suspension+0xc2>
 800ecde:	23ff      	movs	r3, #255	; 0xff
 800ece0:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800ece2:	f897 3180 	ldrb.w	r3, [r7, #384]	; 0x180
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <run_movement_suspension+0xce>
 800ecea:	23ff      	movs	r3, #255	; 0xff
 800ecec:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800ecee:	f897 3184 	ldrb.w	r3, [r7, #388]	; 0x184
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <run_movement_suspension+0xda>
 800ecf6:	23ff      	movs	r3, #255	; 0xff
 800ecf8:	863b      	strh	r3, [r7, #48]	; 0x30
		if (front_count == MAX_WALKCOUNT && right_count == MAX_WALKCOUNT && left_count == MAX_WALKCOUNT && back_count == MAX_WALKCOUNT) {
 800ecfa:	8b7b      	ldrh	r3, [r7, #26]
 800ecfc:	2bff      	cmp	r3, #255	; 0xff
 800ecfe:	d116      	bne.n	800ed2e <run_movement_suspension+0x10e>
 800ed00:	8b3b      	ldrh	r3, [r7, #24]
 800ed02:	2bff      	cmp	r3, #255	; 0xff
 800ed04:	d113      	bne.n	800ed2e <run_movement_suspension+0x10e>
 800ed06:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed08:	2bff      	cmp	r3, #255	; 0xff
 800ed0a:	d110      	bne.n	800ed2e <run_movement_suspension+0x10e>
 800ed0c:	8afb      	ldrh	r3, [r7, #22]
 800ed0e:	2bff      	cmp	r3, #255	; 0xff
 800ed10:	d10d      	bne.n	800ed2e <run_movement_suspension+0x10e>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode = 1;
 800ed12:	4b79      	ldr	r3, [pc, #484]	; (800eef8 <run_movement_suspension+0x2d8>)
 800ed14:	2201      	movs	r2, #1
 800ed16:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode = 0;
 800ed18:	4b79      	ldr	r3, [pc, #484]	; (800ef00 <run_movement_suspension+0x2e0>)
 800ed1a:	2200      	movs	r2, #0
 800ed1c:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2 * 2 * 2 * 2 * 2);
 800ed1e:	2020      	movs	r0, #32
 800ed20:	f7f8 fea6 	bl	8007a70 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800ed24:	f7f9 fc4a 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800ed28:	2000      	movs	r0, #0
 800ed2a:	f7f9 fbe1 	bl	80084f0 <pl_DriveMotor_standby>
			//break;
		}
	}

if(error_mode==0){
 800ed2e:	4b72      	ldr	r3, [pc, #456]	; (800eef8 <run_movement_suspension+0x2d8>)
 800ed30:	781b      	ldrb	r3, [r3, #0]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	f040 80d9 	bne.w	800eeea <run_movement_suspension+0x2ca>
	mode.WallControlMode = 0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	mode.WallCutMode = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	mode.calMazeMode = 0;
 800ed44:	2300      	movs	r3, #0
 800ed46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (front_count <= right_count && front_count <= left_count && front_count <= back_count) {
 800ed4a:	8b7a      	ldrh	r2, [r7, #26]
 800ed4c:	8b3b      	ldrh	r3, [r7, #24]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d814      	bhi.n	800ed7c <run_movement_suspension+0x15c>
 800ed52:	8b7a      	ldrh	r2, [r7, #26]
 800ed54:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed56:	429a      	cmp	r2, r3
 800ed58:	d810      	bhi.n	800ed7c <run_movement_suspension+0x15c>
 800ed5a:	8b7a      	ldrh	r2, [r7, #26]
 800ed5c:	8afb      	ldrh	r3, [r7, #22]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d80c      	bhi.n	800ed7c <run_movement_suspension+0x15c>
		// 直進
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ed62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed64:	ed97 2a02 	vldr	s4, [r7, #8]
 800ed68:	edd7 1a04 	vldr	s3, [r7, #16]
 800ed6c:	ed97 1a04 	vldr	s2, [r7, #16]
 800ed70:	eddf 0a60 	vldr	s1, [pc, #384]	; 800eef4 <run_movement_suspension+0x2d4>
 800ed74:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800ef04 <run_movement_suspension+0x2e4>
 800ed78:	f7f4 ff2a 	bl	8003bd0 <straight_table2>
	}
	if (right_count < front_count && right_count <= left_count && right_count <= back_count) {
 800ed7c:	8b3a      	ldrh	r2, [r7, #24]
 800ed7e:	8b7b      	ldrh	r3, [r7, #26]
 800ed80:	429a      	cmp	r2, r3
 800ed82:	d229      	bcs.n	800edd8 <run_movement_suspension+0x1b8>
 800ed84:	8b3a      	ldrh	r2, [r7, #24]
 800ed86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d825      	bhi.n	800edd8 <run_movement_suspension+0x1b8>
 800ed8c:	8b3a      	ldrh	r2, [r7, #24]
 800ed8e:	8afb      	ldrh	r3, [r7, #22]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d821      	bhi.n	800edd8 <run_movement_suspension+0x1b8>
		// 右旋回
		turning_table2(-90, 0, 0, -input_TurningVelocity, input_TurningAcceleration);
 800ed94:	edd7 7a03 	vldr	s15, [r7, #12]
 800ed98:	eef1 7a67 	vneg.f32	s15, s15
 800ed9c:	ed97 2a01 	vldr	s4, [r7, #4]
 800eda0:	eef0 1a67 	vmov.f32	s3, s15
 800eda4:	ed9f 1a53 	vldr	s2, [pc, #332]	; 800eef4 <run_movement_suspension+0x2d4>
 800eda8:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eef4 <run_movement_suspension+0x2d4>
 800edac:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800ef08 <run_movement_suspension+0x2e8>
 800edb0:	f7f5 fc38 	bl	8004624 <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800edb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800edb6:	ed97 2a02 	vldr	s4, [r7, #8]
 800edba:	edd7 1a04 	vldr	s3, [r7, #16]
 800edbe:	ed97 1a04 	vldr	s2, [r7, #16]
 800edc2:	eddf 0a4c 	vldr	s1, [pc, #304]	; 800eef4 <run_movement_suspension+0x2d4>
 800edc6:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 800ef04 <run_movement_suspension+0x2e4>
 800edca:	f7f4 ff01 	bl	8003bd0 <straight_table2>
		*direction += 1;
 800edce:	69fb      	ldr	r3, [r7, #28]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	1c5a      	adds	r2, r3, #1
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	601a      	str	r2, [r3, #0]
	}
	if (left_count < front_count && left_count < right_count && left_count <= back_count) {
 800edd8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800edda:	8b7b      	ldrh	r3, [r7, #26]
 800eddc:	429a      	cmp	r2, r3
 800edde:	d225      	bcs.n	800ee2c <run_movement_suspension+0x20c>
 800ede0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800ede2:	8b3b      	ldrh	r3, [r7, #24]
 800ede4:	429a      	cmp	r2, r3
 800ede6:	d221      	bcs.n	800ee2c <run_movement_suspension+0x20c>
 800ede8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800edea:	8afb      	ldrh	r3, [r7, #22]
 800edec:	429a      	cmp	r2, r3
 800edee:	d81d      	bhi.n	800ee2c <run_movement_suspension+0x20c>
		// 左旋回
		turning_table2(90, 0, 0, input_TurningVelocity, input_TurningAcceleration);
 800edf0:	ed97 2a01 	vldr	s4, [r7, #4]
 800edf4:	edd7 1a03 	vldr	s3, [r7, #12]
 800edf8:	ed9f 1a3e 	vldr	s2, [pc, #248]	; 800eef4 <run_movement_suspension+0x2d4>
 800edfc:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800eef4 <run_movement_suspension+0x2d4>
 800ee00:	ed9f 0a42 	vldr	s0, [pc, #264]	; 800ef0c <run_movement_suspension+0x2ec>
 800ee04:	f7f5 fc0e 	bl	8004624 <turning_table2>
		straight_table2(MAZE_SECTION / 2 + (BACK_TO_CENTER - BACK_TO_CENTER_FRONT), 0, input_StraightVelocity, input_StraightVelocity, input_StraightAcceleration, mode);
 800ee08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee0a:	ed97 2a02 	vldr	s4, [r7, #8]
 800ee0e:	edd7 1a04 	vldr	s3, [r7, #16]
 800ee12:	ed97 1a04 	vldr	s2, [r7, #16]
 800ee16:	eddf 0a37 	vldr	s1, [pc, #220]	; 800eef4 <run_movement_suspension+0x2d4>
 800ee1a:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 800ef04 <run_movement_suspension+0x2e4>
 800ee1e:	f7f4 fed7 	bl	8003bd0 <straight_table2>
		*direction -= 1;
 800ee22:	69fb      	ldr	r3, [r7, #28]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	1e5a      	subs	r2, r3, #1
 800ee28:	69fb      	ldr	r3, [r7, #28]
 800ee2a:	601a      	str	r2, [r3, #0]
	}
	if(back_count < front_count && back_count < right_count
 800ee2c:	8afa      	ldrh	r2, [r7, #22]
 800ee2e:	8b7b      	ldrh	r3, [r7, #26]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d25a      	bcs.n	800eeea <run_movement_suspension+0x2ca>
 800ee34:	8afa      	ldrh	r2, [r7, #22]
 800ee36:	8b3b      	ldrh	r3, [r7, #24]
 800ee38:	429a      	cmp	r2, r3
 800ee3a:	d256      	bcs.n	800eeea <run_movement_suspension+0x2ca>
			&& back_count < left_count){
 800ee3c:	8afa      	ldrh	r2, [r7, #22]
 800ee3e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d252      	bcs.n	800eeea <run_movement_suspension+0x2ca>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ee44:	f897 2180 	ldrb.w	r2, [r7, #384]	; 0x180
 800ee48:	f897 1184 	ldrb.w	r1, [r7, #388]	; 0x184
 800ee4c:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ee50:	4618      	mov	r0, r3
 800ee52:	edd7 0a01 	vldr	s1, [r7, #4]
 800ee56:	ed97 0a03 	vldr	s0, [r7, #12]
 800ee5a:	f7fb fce3 	bl	800a824 <backTurn_controlWall>
		//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
		wait_ms_NoReset(100);
 800ee5e:	2064      	movs	r0, #100	; 0x64
 800ee60:	f7f9 fe76 	bl	8008b50 <wait_ms_NoReset>
		mode.WallControlMode=0;
 800ee64:	2300      	movs	r3, #0
 800ee66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(front_wall){
 800ee6a:	f897 317c 	ldrb.w	r3, [r7, #380]	; 0x17c
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d024      	beq.n	800eebc <run_movement_suspension+0x29c>
		straight_table2(-BACK_TO_CENTER_FRONT, 0,0,-150,1000, mode);
 800ee72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ee74:	ed9f 2a26 	vldr	s4, [pc, #152]	; 800ef10 <run_movement_suspension+0x2f0>
 800ee78:	eddf 1a26 	vldr	s3, [pc, #152]	; 800ef14 <run_movement_suspension+0x2f4>
 800ee7c:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800eef4 <run_movement_suspension+0x2d4>
 800ee80:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800eef4 <run_movement_suspension+0x2d4>
 800ee84:	eeba 0a09 	vmov.f32	s0, #169	; 0xc1480000 -12.5
 800ee88:	f7f4 fea2 	bl	8003bd0 <straight_table2>
		wait_ms_NoReset(100);
 800ee8c:	2064      	movs	r0, #100	; 0x64
 800ee8e:	f7f9 fe5f 	bl	8008b50 <wait_ms_NoReset>
		clear_Ierror();
 800ee92:	f7f6 f9ad 	bl	80051f0 <clear_Ierror>
		reset_speed();
 800ee96:	f7f2 f8c5 	bl	8001024 <reset_speed>
		mode.WallControlMode=1;
 800ee9a:	2301      	movs	r3, #1
 800ee9c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		straight_table2(BACK_TO_CENTER +MAZE_SECTION/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eea2:	ed97 2a02 	vldr	s4, [r7, #8]
 800eea6:	edd7 1a04 	vldr	s3, [r7, #16]
 800eeaa:	ed97 1a04 	vldr	s2, [r7, #16]
 800eeae:	eddf 0a11 	vldr	s1, [pc, #68]	; 800eef4 <run_movement_suspension+0x2d4>
 800eeb2:	ed9f 0a19 	vldr	s0, [pc, #100]	; 800ef18 <run_movement_suspension+0x2f8>
 800eeb6:	f7f4 fe8b 	bl	8003bd0 <straight_table2>
 800eeba:	e011      	b.n	800eee0 <run_movement_suspension+0x2c0>
		}else{
			clear_Ierror();
 800eebc:	f7f6 f998 	bl	80051f0 <clear_Ierror>
			mode.WallControlMode=0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			straight_table2(MAZE_SECTION/2+BACK_TO_CENTER-BACK_TO_CENTER_FRONT,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800eec8:	ed97 2a02 	vldr	s4, [r7, #8]
 800eecc:	edd7 1a04 	vldr	s3, [r7, #16]
 800eed0:	ed97 1a04 	vldr	s2, [r7, #16]
 800eed4:	eddf 0a07 	vldr	s1, [pc, #28]	; 800eef4 <run_movement_suspension+0x2d4>
 800eed8:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ef04 <run_movement_suspension+0x2e4>
 800eedc:	f7f4 fe78 	bl	8003bd0 <straight_table2>
		}
		*direction = *direction + 2;
 800eee0:	69fb      	ldr	r3, [r7, #28]
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	1c9a      	adds	r2, r3, #2
 800eee6:	69fb      	ldr	r3, [r7, #28]
 800eee8:	601a      	str	r2, [r3, #0]
	}
}

}
 800eeea:	bf00      	nop
 800eeec:	3728      	adds	r7, #40	; 0x28
 800eeee:	46bd      	mov	sp, r7
 800eef0:	bd80      	pop	{r7, pc}
 800eef2:	bf00      	nop
 800eef4:	00000000 	.word	0x00000000
 800eef8:	20000813 	.word	0x20000813
 800eefc:	20000836 	.word	0x20000836
 800ef00:	2000059c 	.word	0x2000059c
 800ef04:	42540000 	.word	0x42540000
 800ef08:	c2b40000 	.word	0xc2b40000
 800ef0c:	42b40000 	.word	0x42b40000
 800ef10:	447a0000 	.word	0x447a0000
 800ef14:	c3160000 	.word	0xc3160000
 800ef18:	42830000 	.word	0x42830000

0800ef1c <AdatiWayReturn>:



void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800ef1c:	b084      	sub	sp, #16
 800ef1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef22:	b0ea      	sub	sp, #424	; 0x1a8
 800ef24:	af5a      	add	r7, sp, #360	; 0x168
 800ef26:	ed87 0a05 	vstr	s0, [r7, #20]
 800ef2a:	edc7 0a04 	vstr	s1, [r7, #16]
 800ef2e:	ed87 1a03 	vstr	s2, [r7, #12]
 800ef32:	edc7 1a02 	vstr	s3, [r7, #8]
 800ef36:	f107 0460 	add.w	r4, r7, #96	; 0x60
 800ef3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}



	//初期化
	maze_mode = 1; //迷路探索開始フラグ
 800ef3e:	4bb7      	ldr	r3, [pc, #732]	; (800f21c <AdatiWayReturn+0x300>)
 800ef40:	2201      	movs	r2, #1
 800ef42:	701a      	strb	r2, [r3, #0]
	unsigned short front_count, right_count, back_count, left_count;
	int x=0;//構造体にしたい
 800ef44:	2300      	movs	r3, #0
 800ef46:	633b      	str	r3, [r7, #48]	; 0x30
	int y=0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int direction=1;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	62bb      	str	r3, [r7, #40]	; 0x28
	_Bool front_wall,right_wall,left_wall;
	char timer_end_mode=0;
 800ef50:	2300      	movs	r3, #0
 800ef52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int kitiku_distance;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800ef56:	2301      	movs	r3, #1
 800ef58:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800ef62:	2300      	movs	r3, #0
 800ef64:	77bb      	strb	r3, [r7, #30]

	//モータenable
	pl_DriveMotor_standby(ON);
 800ef66:	2001      	movs	r0, #1
 800ef68:	f7f9 fac2 	bl	80084f0 <pl_DriveMotor_standby>
	wait_ms_NoReset(500);
 800ef6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ef70:	f7f9 fdee 	bl	8008b50 <wait_ms_NoReset>
	//初期位置のセンサー確認
	get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800ef74:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800ef78:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800ef7c:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800ef80:	4618      	mov	r0, r3
 800ef82:	f7ff fceb 	bl	800e95c <get_wallData_sensor>
	//初期位置での壁更新
	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800ef86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ef88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef8a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800ef8c:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800ef90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ef94:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800ef98:	9201      	str	r2, [sp, #4]
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	462b      	mov	r3, r5
 800ef9e:	4622      	mov	r2, r4
 800efa0:	f002 f9cc 	bl	801133c <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800efa4:	f005 fce6 	bl	8014974 <create_StepCountMap_queue>
	straight_table2(MAZE_SECTION/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800efa8:	69f8      	ldr	r0, [r7, #28]
 800efaa:	ed97 2a03 	vldr	s4, [r7, #12]
 800efae:	edd7 1a05 	vldr	s3, [r7, #20]
 800efb2:	ed97 1a05 	vldr	s2, [r7, #20]
 800efb6:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800f220 <AdatiWayReturn+0x304>
 800efba:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 800f224 <AdatiWayReturn+0x308>
 800efbe:	f7f4 fe07 	bl	8003bd0 <straight_table2>

	while (1) {

		update_coordinate(&x,&y,direction);
 800efc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efc4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800efc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efcc:	4618      	mov	r0, r3
 800efce:	f7ff fcf3 	bl	800e9b8 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800efd2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800efd6:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800efda:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800efde:	4618      	mov	r0, r3
 800efe0:	f7ff fcbc 	bl	800e95c <get_wallData_sensor>

		mode.WallControlMode=1;
 800efe4:	2301      	movs	r3, #1
 800efe6:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800efe8:	2301      	movs	r3, #1
 800efea:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800efec:	2300      	movs	r3, #0
 800efee:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eff0:	69f8      	ldr	r0, [r7, #28]
 800eff2:	ed97 2a03 	vldr	s4, [r7, #12]
 800eff6:	edd7 1a05 	vldr	s3, [r7, #20]
 800effa:	ed97 1a05 	vldr	s2, [r7, #20]
 800effe:	edd7 0a05 	vldr	s1, [r7, #20]
 800f002:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f006:	f7f4 fde3 	bl	8003bd0 <straight_table2>
		//走行中計算
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f00a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f00c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f00e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f010:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f018:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f01c:	9201      	str	r2, [sp, #4]
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	462b      	mov	r3, r5
 800f022:	4622      	mov	r2, r4
 800f024:	f002 f98a 	bl	801133c <update_wall>
		create_StepCountMap_queue();
 800f028:	f005 fca4 	bl	8014974 <create_StepCountMap_queue>
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f02e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f030:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f032:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f036:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f03a:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f03e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f042:	9102      	str	r1, [sp, #8]
 800f044:	9201      	str	r2, [sp, #4]
 800f046:	9300      	str	r3, [sp, #0]
 800f048:	4633      	mov	r3, r6
 800f04a:	462a      	mov	r2, r5
 800f04c:	4621      	mov	r1, r4
 800f04e:	f002 fe47 	bl	8011ce0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f052:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f056:	2b00      	cmp	r3, #0
 800f058:	d001      	beq.n	800f05e <AdatiWayReturn+0x142>
 800f05a:	23ff      	movs	r3, #255	; 0xff
 800f05c:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f05e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f062:	2b00      	cmp	r3, #0
 800f064:	d001      	beq.n	800f06a <AdatiWayReturn+0x14e>
 800f066:	23ff      	movs	r3, #255	; 0xff
 800f068:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f06a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <AdatiWayReturn+0x15a>
 800f072:	23ff      	movs	r3, #255	; 0xff
 800f074:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f076:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f078:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f07a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f07c:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f07e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f080:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f082:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f084:	9102      	str	r1, [sp, #8]
 800f086:	9201      	str	r2, [sp, #4]
 800f088:	9300      	str	r3, [sp, #0]
 800f08a:	4633      	mov	r3, r6
 800f08c:	462a      	mov	r2, r5
 800f08e:	4621      	mov	r1, r4
 800f090:	f001 fdfe 	bl	8010c90 <decision_kitiku>

		mode.WallCutMode=1;
 800f094:	2301      	movs	r3, #1
 800f096:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800f098:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f09c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	69f8      	ldr	r0, [r7, #28]
 800f0a4:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f0a8:	f7f5 fa50 	bl	800454c <End_straight>


		//異常終了
		if (x == 0 && y == 0) {
 800f0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10b      	bne.n	800f0ca <AdatiWayReturn+0x1ae>
 800f0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d108      	bne.n	800f0ca <AdatiWayReturn+0x1ae>
			error_mode=1;
 800f0b8:	4b5b      	ldr	r3, [pc, #364]	; (800f228 <AdatiWayReturn+0x30c>)
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f0be:	f7f9 fa7d 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f0c2:	2000      	movs	r0, #0
 800f0c4:	f7f9 fa14 	bl	80084f0 <pl_DriveMotor_standby>
			break;
 800f0c8:	e10b      	b.n	800f2e2 <AdatiWayReturn+0x3c6>
		}
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f0ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f0cc:	2bff      	cmp	r3, #255	; 0xff
 800f0ce:	d111      	bne.n	800f0f4 <AdatiWayReturn+0x1d8>
 800f0d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f0d2:	2bff      	cmp	r3, #255	; 0xff
 800f0d4:	d10e      	bne.n	800f0f4 <AdatiWayReturn+0x1d8>
 800f0d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f0d8:	2bff      	cmp	r3, #255	; 0xff
 800f0da:	d10b      	bne.n	800f0f4 <AdatiWayReturn+0x1d8>
 800f0dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f0de:	2bff      	cmp	r3, #255	; 0xff
 800f0e0:	d108      	bne.n	800f0f4 <AdatiWayReturn+0x1d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 800f0e2:	4b51      	ldr	r3, [pc, #324]	; (800f228 <AdatiWayReturn+0x30c>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	701a      	strb	r2, [r3, #0]
			pl_DriveMotor_stop();
 800f0e8:	f7f9 fa68 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f0ec:	2000      	movs	r0, #0
 800f0ee:	f7f9 f9ff 	bl	80084f0 <pl_DriveMotor_standby>
			break;
 800f0f2:	e0f6      	b.n	800f2e2 <AdatiWayReturn+0x3c6>
		}
		//　時間制限
		if (g_timCount_sec>240){
 800f0f4:	4b4d      	ldr	r3, [pc, #308]	; (800f22c <AdatiWayReturn+0x310>)
 800f0f6:	edd3 7a00 	vldr	s15, [r3]
 800f0fa:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f230 <AdatiWayReturn+0x314>
 800f0fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f106:	dd08      	ble.n	800f11a <AdatiWayReturn+0x1fe>
			timer_end_mode=1;
 800f108:	2301      	movs	r3, #1
 800f10a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f10e:	f7f9 fa55 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f112:	2000      	movs	r0, #0
 800f114:	f7f9 f9ec 	bl	80084f0 <pl_DriveMotor_standby>
			break;
 800f118:	e0e3      	b.n	800f2e2 <AdatiWayReturn+0x3c6>
		}
		//正常終了
		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f11c:	2b05      	cmp	r3, #5
 800f11e:	d002      	beq.n	800f126 <AdatiWayReturn+0x20a>
 800f120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f122:	2b06      	cmp	r3, #6
 800f124:	d146      	bne.n	800f1b4 <AdatiWayReturn+0x298>
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	2b04      	cmp	r3, #4
 800f12a:	d002      	beq.n	800f132 <AdatiWayReturn+0x216>
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	2b05      	cmp	r3, #5
 800f130:	d140      	bne.n	800f1b4 <AdatiWayReturn+0x298>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f132:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f136:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f13a:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f13e:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f144:	607b      	str	r3, [r7, #4]
 800f146:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f14a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f14e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f150:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f152:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f156:	2301      	movs	r3, #1
 800f158:	9359      	str	r3, [sp, #356]	; 0x164
 800f15a:	2301      	movs	r3, #1
 800f15c:	9358      	str	r3, [sp, #352]	; 0x160
 800f15e:	9557      	str	r5, [sp, #348]	; 0x15c
 800f160:	9056      	str	r0, [sp, #344]	; 0x158
 800f162:	9155      	str	r1, [sp, #340]	; 0x154
 800f164:	9254      	str	r2, [sp, #336]	; 0x150
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	9353      	str	r3, [sp, #332]	; 0x14c
 800f16a:	ab01      	add	r3, sp, #4
 800f16c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f170:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f174:	4618      	mov	r0, r3
 800f176:	f011 fd4d 	bl	8020c14 <memcpy>
 800f17a:	9400      	str	r4, [sp, #0]
 800f17c:	edd7 1a02 	vldr	s3, [r7, #8]
 800f180:	ed97 1a03 	vldr	s2, [r7, #12]
 800f184:	edd7 0a04 	vldr	s1, [r7, #16]
 800f188:	ed97 0a05 	vldr	s0, [r7, #20]
 800f18c:	4653      	mov	r3, sl
 800f18e:	464a      	mov	r2, r9
 800f190:	4641      	mov	r1, r8
 800f192:	4630      	mov	r0, r6
 800f194:	f7ff fd44 	bl	800ec20 <run_movement_suspension>
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 1, 1);
			if (direction >= 5) {direction = direction-4;}
 800f198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f19a:	2b04      	cmp	r3, #4
 800f19c:	dd02      	ble.n	800f1a4 <AdatiWayReturn+0x288>
 800f19e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a0:	3b04      	subs	r3, #4
 800f1a2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (direction <= 0) {direction = direction+4;}
 800f1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	f300 8098 	bgt.w	800f2dc <AdatiWayReturn+0x3c0>
 800f1ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ae:	3304      	adds	r3, #4
 800f1b0:	62bb      	str	r3, [r7, #40]	; 0x28
			break;
 800f1b2:	e093      	b.n	800f2dc <AdatiWayReturn+0x3c0>
		}

		if(know_mode==0){kitikukan = 0;}
 800f1b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d102      	bne.n	800f1c2 <AdatiWayReturn+0x2a6>
 800f1bc:	4b1d      	ldr	r3, [pc, #116]	; (800f234 <AdatiWayReturn+0x318>)
 800f1be:	2200      	movs	r2, #0
 800f1c0:	601a      	str	r2, [r3, #0]
		if (kitikukan == OFF) {
 800f1c2:	4b1c      	ldr	r3, [pc, #112]	; (800f234 <AdatiWayReturn+0x318>)
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d13a      	bne.n	800f240 <AdatiWayReturn+0x324>

			run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f1ca:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f1cc:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f1d0:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f1d4:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f1d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1da:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f1de:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f1e2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f1e6:	9155      	str	r1, [sp, #340]	; 0x154
 800f1e8:	9254      	str	r2, [sp, #336]	; 0x150
 800f1ea:	9353      	str	r3, [sp, #332]	; 0x14c
 800f1ec:	ab01      	add	r3, sp, #4
 800f1ee:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f1f2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f011 fd0c 	bl	8020c14 <memcpy>
 800f1fc:	9400      	str	r4, [sp, #0]
 800f1fe:	edd7 1a02 	vldr	s3, [r7, #8]
 800f202:	ed97 1a03 	vldr	s2, [r7, #12]
 800f206:	edd7 0a04 	vldr	s1, [r7, #16]
 800f20a:	ed97 0a05 	vldr	s0, [r7, #20]
 800f20e:	464b      	mov	r3, r9
 800f210:	4642      	mov	r2, r8
 800f212:	4631      	mov	r1, r6
 800f214:	4628      	mov	r0, r5
 800f216:	f7ff fc03 	bl	800ea20 <run_movement_continuity>
 800f21a:	e04e      	b.n	800f2ba <AdatiWayReturn+0x39e>
 800f21c:	20000836 	.word	0x20000836
 800f220:	00000000 	.word	0x00000000
 800f224:	42830000 	.word	0x42830000
 800f228:	20000813 	.word	0x20000813
 800f22c:	20000738 	.word	0x20000738
 800f230:	43700000 	.word	0x43700000
 800f234:	20000838 	.word	0x20000838
 800f238:	42140000 	.word	0x42140000
 800f23c:	44610000 	.word	0x44610000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall);

		} else {
			mode.WallControlMode=1;
 800f240:	2301      	movs	r3, #1
 800f242:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=1;
 800f244:	2301      	movs	r3, #1
 800f246:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f248:	2300      	movs	r3, #0
 800f24a:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f24c:	69f8      	ldr	r0, [r7, #28]
 800f24e:	ed97 2a03 	vldr	s4, [r7, #12]
 800f252:	edd7 1a05 	vldr	s3, [r7, #20]
 800f256:	ed97 1a05 	vldr	s2, [r7, #20]
 800f25a:	edd7 0a05 	vldr	s1, [r7, #20]
 800f25e:	ed1f 0a0a 	vldr	s0, [pc, #-40]	; 800f238 <AdatiWayReturn+0x31c>
 800f262:	f7f4 fcb5 	bl	8003bd0 <straight_table2>
			compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f266:	f107 0320 	add.w	r3, r7, #32
 800f26a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f26e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f272:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f276:	f001 fd7d 	bl	8010d74 <compress_kitiku>
			End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f27a:	2201      	movs	r2, #1
 800f27c:	2101      	movs	r1, #1
 800f27e:	69f8      	ldr	r0, [r7, #28]
 800f280:	ed1f 0a13 	vldr	s0, [pc, #-76]	; 800f238 <AdatiWayReturn+0x31c>
 800f284:	f7f5 f962 	bl	800454c <End_straight>
			mode.calMazeMode=0;
 800f288:	2300      	movs	r3, #0
 800f28a:	77bb      	strb	r3, [r7, #30]
			straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800f28c:	6a3a      	ldr	r2, [r7, #32]
 800f28e:	4613      	mov	r3, r2
 800f290:	005b      	lsls	r3, r3, #1
 800f292:	4413      	add	r3, r2
 800f294:	011a      	lsls	r2, r3, #4
 800f296:	1ad3      	subs	r3, r2, r3
 800f298:	ee07 3a90 	vmov	s15, r3
 800f29c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f2a0:	69f8      	ldr	r0, [r7, #28]
 800f2a2:	ed97 2a03 	vldr	s4, [r7, #12]
 800f2a6:	ed5f 1a1b 	vldr	s3, [pc, #-108]	; 800f23c <AdatiWayReturn+0x320>
 800f2aa:	ed97 1a05 	vldr	s2, [r7, #20]
 800f2ae:	edd7 0a05 	vldr	s1, [r7, #20]
 800f2b2:	eeb0 0a67 	vmov.f32	s0, s15
 800f2b6:	f7f4 fc8b 	bl	8003bd0 <straight_table2>
		}

		if (direction >= 5) {direction = direction-4;}
 800f2ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2bc:	2b04      	cmp	r3, #4
 800f2be:	dd02      	ble.n	800f2c6 <AdatiWayReturn+0x3aa>
 800f2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c2:	3b04      	subs	r3, #4
 800f2c4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f2c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	dc02      	bgt.n	800f2d2 <AdatiWayReturn+0x3b6>
 800f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2ce:	3304      	adds	r3, #4
 800f2d0:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f2d2:	4ba1      	ldr	r3, [pc, #644]	; (800f558 <AdatiWayReturn+0x63c>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	2b01      	cmp	r3, #1
 800f2d8:	d002      	beq.n	800f2e0 <AdatiWayReturn+0x3c4>
		update_coordinate(&x,&y,direction);
 800f2da:	e672      	b.n	800efc2 <AdatiWayReturn+0xa6>
			break;
 800f2dc:	bf00      	nop
 800f2de:	e000      	b.n	800f2e2 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f2e0:	bf00      	nop




	while (1) {
		update_coordinate(&x,&y,direction);
 800f2e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2e4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f2e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f7ff fb63 	bl	800e9b8 <update_coordinate>

		get_wallData_sensor(&front_wall,&right_wall,&left_wall);
 800f2f2:	f107 0225 	add.w	r2, r7, #37	; 0x25
 800f2f6:	f107 0126 	add.w	r1, r7, #38	; 0x26
 800f2fa:	f107 0327 	add.w	r3, r7, #39	; 0x27
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7ff fb2c 	bl	800e95c <get_wallData_sensor>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f306:	2b05      	cmp	r3, #5
 800f308:	d002      	beq.n	800f310 <AdatiWayReturn+0x3f4>
 800f30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f30c:	2b06      	cmp	r3, #6
 800f30e:	d109      	bne.n	800f324 <AdatiWayReturn+0x408>
 800f310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f312:	2b04      	cmp	r3, #4
 800f314:	d002      	beq.n	800f31c <AdatiWayReturn+0x400>
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	2b05      	cmp	r3, #5
 800f31a:	d103      	bne.n	800f324 <AdatiWayReturn+0x408>
			noGoalPillarMode=1;
 800f31c:	4b8f      	ldr	r3, [pc, #572]	; (800f55c <AdatiWayReturn+0x640>)
 800f31e:	2201      	movs	r2, #1
 800f320:	701a      	strb	r2, [r3, #0]
 800f322:	e002      	b.n	800f32a <AdatiWayReturn+0x40e>
		}else{
			noGoalPillarMode=0;
 800f324:	4b8d      	ldr	r3, [pc, #564]	; (800f55c <AdatiWayReturn+0x640>)
 800f326:	2200      	movs	r2, #0
 800f328:	701a      	strb	r2, [r3, #0]
		}

		mode.WallControlMode=1;
 800f32a:	2301      	movs	r3, #1
 800f32c:	773b      	strb	r3, [r7, #28]
		mode.calMazeMode=1;
 800f32e:	2301      	movs	r3, #1
 800f330:	77bb      	strb	r3, [r7, #30]
		mode.WallCutMode=0;
 800f332:	2300      	movs	r3, #0
 800f334:	77fb      	strb	r3, [r7, #31]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f336:	69f8      	ldr	r0, [r7, #28]
 800f338:	ed97 2a03 	vldr	s4, [r7, #12]
 800f33c:	edd7 1a05 	vldr	s3, [r7, #20]
 800f340:	ed97 1a05 	vldr	s2, [r7, #20]
 800f344:	edd7 0a05 	vldr	s1, [r7, #20]
 800f348:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f34c:	f7f4 fc40 	bl	8003bd0 <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800f350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f354:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800f356:	f897 5027 	ldrb.w	r5, [r7, #39]	; 0x27
 800f35a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f35e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f362:	9201      	str	r2, [sp, #4]
 800f364:	9300      	str	r3, [sp, #0]
 800f366:	462b      	mov	r3, r5
 800f368:	4622      	mov	r2, r4
 800f36a:	f001 ffe7 	bl	801133c <update_wall>
		if(Dijkstra_mode==1){
 800f36e:	f897 31ac 	ldrb.w	r3, [r7, #428]	; 0x1ac
 800f372:	2b01      	cmp	r3, #1
 800f374:	d104      	bne.n	800f380 <AdatiWayReturn+0x464>
			route_Dijkstra();//ダイクストラ法の結果から最短ルートをスタックに入れる
 800f376:	f004 fb15 	bl	80139a4 <route_Dijkstra>
			create_StepCountMap_unknown();
 800f37a:	f004 ffc9 	bl	8014310 <create_StepCountMap_unknown>
 800f37e:	e001      	b.n	800f384 <AdatiWayReturn+0x468>
		}else{
			create_StepCountMapBack_queue();
 800f380:	f005 fdde 	bl	8014f40 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f388:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f38a:	f107 0636 	add.w	r6, r7, #54	; 0x36
 800f38e:	f107 0538 	add.w	r5, r7, #56	; 0x38
 800f392:	f107 043a 	add.w	r4, r7, #58	; 0x3a
 800f396:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800f39a:	9102      	str	r1, [sp, #8]
 800f39c:	9201      	str	r2, [sp, #4]
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	4633      	mov	r3, r6
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	4621      	mov	r1, r4
 800f3a6:	f002 fc9b 	bl	8011ce0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800f3aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d001      	beq.n	800f3b6 <AdatiWayReturn+0x49a>
 800f3b2:	23ff      	movs	r3, #255	; 0xff
 800f3b4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800f3b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d001      	beq.n	800f3c2 <AdatiWayReturn+0x4a6>
 800f3be:	23ff      	movs	r3, #255	; 0xff
 800f3c0:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800f3c2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d001      	beq.n	800f3ce <AdatiWayReturn+0x4b2>
 800f3ca:	23ff      	movs	r3, #255	; 0xff
 800f3cc:	86fb      	strh	r3, [r7, #54]	; 0x36
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800f3ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f3d0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 800f3d2:	6abd      	ldr	r5, [r7, #40]	; 0x28
 800f3d4:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f3d6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f3d8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f3da:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800f3dc:	9102      	str	r1, [sp, #8]
 800f3de:	9201      	str	r2, [sp, #4]
 800f3e0:	9300      	str	r3, [sp, #0]
 800f3e2:	4633      	mov	r3, r6
 800f3e4:	462a      	mov	r2, r5
 800f3e6:	4621      	mov	r1, r4
 800f3e8:	f001 fc52 	bl	8010c90 <decision_kitiku>
		mode.WallCutMode=1;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	77fb      	strb	r3, [r7, #31]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800f3f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3f4:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	69f8      	ldr	r0, [r7, #28]
 800f3fc:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800f400:	f7f5 f8a4 	bl	800454c <End_straight>

		//異常終了
        if(back_count < front_count && back_count < right_count && back_count < left_count){
 800f404:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f406:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f408:	429a      	cmp	r2, r3
 800f40a:	d20a      	bcs.n	800f422 <AdatiWayReturn+0x506>
 800f40c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f40e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f410:	429a      	cmp	r2, r3
 800f412:	d206      	bcs.n	800f422 <AdatiWayReturn+0x506>
 800f414:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800f416:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f418:	429a      	cmp	r2, r3
 800f41a:	d202      	bcs.n	800f422 <AdatiWayReturn+0x506>
            Dijkstra_maker_flag=1;
 800f41c:	4b50      	ldr	r3, [pc, #320]	; (800f560 <AdatiWayReturn+0x644>)
 800f41e:	2201      	movs	r2, #1
 800f420:	701a      	strb	r2, [r3, #0]
        }
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800f422:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f424:	2bff      	cmp	r3, #255	; 0xff
 800f426:	d10b      	bne.n	800f440 <AdatiWayReturn+0x524>
 800f428:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f42a:	2bff      	cmp	r3, #255	; 0xff
 800f42c:	d108      	bne.n	800f440 <AdatiWayReturn+0x524>
 800f42e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f430:	2bff      	cmp	r3, #255	; 0xff
 800f432:	d105      	bne.n	800f440 <AdatiWayReturn+0x524>
 800f434:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800f436:	2bff      	cmp	r3, #255	; 0xff
 800f438:	d102      	bne.n	800f440 <AdatiWayReturn+0x524>
			// 迷路破損のため、ダイクストラ法更新
			Dijkstra_maker_flag=1;
 800f43a:	4b49      	ldr	r3, [pc, #292]	; (800f560 <AdatiWayReturn+0x644>)
 800f43c:	2201      	movs	r2, #1
 800f43e:	701a      	strb	r2, [r3, #0]
		}
		if (x<0 || y<0 || x>15 || y>15){
 800f440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f442:	2b00      	cmp	r3, #0
 800f444:	db08      	blt.n	800f458 <AdatiWayReturn+0x53c>
 800f446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f448:	2b00      	cmp	r3, #0
 800f44a:	db05      	blt.n	800f458 <AdatiWayReturn+0x53c>
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	2b0f      	cmp	r3, #15
 800f450:	dc02      	bgt.n	800f458 <AdatiWayReturn+0x53c>
 800f452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f454:	2b0f      	cmp	r3, #15
 800f456:	dd0e      	ble.n	800f476 <AdatiWayReturn+0x55a>
			// 自己位置の破損
			error_mode=1;
 800f458:	4b3f      	ldr	r3, [pc, #252]	; (800f558 <AdatiWayReturn+0x63c>)
 800f45a:	2201      	movs	r2, #1
 800f45c:	701a      	strb	r2, [r3, #0]
			g_WallControl_mode=0;
 800f45e:	4b41      	ldr	r3, [pc, #260]	; (800f564 <AdatiWayReturn+0x648>)
 800f460:	2200      	movs	r2, #0
 800f462:	701a      	strb	r2, [r3, #0]
			pl_yellow_LED_count(2*2*2*2);
 800f464:	2010      	movs	r0, #16
 800f466:	f7f8 fb03 	bl	8007a70 <pl_yellow_LED_count>
			pl_DriveMotor_stop();
 800f46a:	f7f9 f8a7 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f46e:	2000      	movs	r0, #0
 800f470:	f7f9 f83e 	bl	80084f0 <pl_DriveMotor_standby>
			break;
 800f474:	e105      	b.n	800f682 <AdatiWayReturn+0x766>
		}
		if (g_timCount_sec>240){
 800f476:	4b3c      	ldr	r3, [pc, #240]	; (800f568 <AdatiWayReturn+0x64c>)
 800f478:	edd3 7a00 	vldr	s15, [r3]
 800f47c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f56c <AdatiWayReturn+0x650>
 800f480:	eef4 7ac7 	vcmpe.f32	s15, s14
 800f484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f488:	dd08      	ble.n	800f49c <AdatiWayReturn+0x580>
			// 秒数エンド
			timer_end_mode=1;
 800f48a:	2301      	movs	r3, #1
 800f48c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			pl_DriveMotor_stop();
 800f490:	f7f9 f894 	bl	80085bc <pl_DriveMotor_stop>
			pl_DriveMotor_standby(OFF);
 800f494:	2000      	movs	r0, #0
 800f496:	f7f9 f82b 	bl	80084f0 <pl_DriveMotor_standby>
			break;
 800f49a:	e0f2      	b.n	800f682 <AdatiWayReturn+0x766>
		}
		//正常終了
		if(x == 0 && y == 0) {
 800f49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d122      	bne.n	800f4e8 <AdatiWayReturn+0x5cc>
 800f4a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d11f      	bne.n	800f4e8 <AdatiWayReturn+0x5cc>
			mode.WallControlMode=0;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	773b      	strb	r3, [r7, #28]
			mode.calMazeMode=0;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	77bb      	strb	r3, [r7, #30]
			mode.WallCutMode=0;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	77fb      	strb	r3, [r7, #31]
			straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800f4b4:	69f8      	ldr	r0, [r7, #28]
 800f4b6:	ed97 2a03 	vldr	s4, [r7, #12]
 800f4ba:	edd7 1a05 	vldr	s3, [r7, #20]
 800f4be:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 800f570 <AdatiWayReturn+0x654>
 800f4c2:	edd7 0a05 	vldr	s1, [r7, #20]
 800f4c6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800f574 <AdatiWayReturn+0x658>
 800f4ca:	f7f4 fb81 	bl	8003bd0 <straight_table2>
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800f4ce:	ed97 2a02 	vldr	s4, [r7, #8]
 800f4d2:	edd7 1a04 	vldr	s3, [r7, #16]
 800f4d6:	ed9f 1a26 	vldr	s2, [pc, #152]	; 800f570 <AdatiWayReturn+0x654>
 800f4da:	eddf 0a25 	vldr	s1, [pc, #148]	; 800f570 <AdatiWayReturn+0x654>
 800f4de:	ed9f 0a26 	vldr	s0, [pc, #152]	; 800f578 <AdatiWayReturn+0x65c>
 800f4e2:	f7f5 f89f 	bl	8004624 <turning_table2>
			break;
 800f4e6:	e0cc      	b.n	800f682 <AdatiWayReturn+0x766>
		}


		if(Dijkstra_maker_flag==1){
 800f4e8:	4b1d      	ldr	r3, [pc, #116]	; (800f560 <AdatiWayReturn+0x644>)
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	2b01      	cmp	r3, #1
 800f4ee:	d145      	bne.n	800f57c <AdatiWayReturn+0x660>
			run_movement_suspension(&direction,front_count,right_count,back_count,left_count,
 800f4f0:	f8b7 803c 	ldrh.w	r8, [r7, #60]	; 0x3c
 800f4f4:	f8b7 903a 	ldrh.w	r9, [r7, #58]	; 0x3a
 800f4f8:	f8b7 a038 	ldrh.w	sl, [r7, #56]	; 0x38
 800f4fc:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f4fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f502:	607b      	str	r3, [r7, #4]
 800f504:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f508:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f50e:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800f510:	f107 0628 	add.w	r6, r7, #40	; 0x28
 800f514:	2301      	movs	r3, #1
 800f516:	9359      	str	r3, [sp, #356]	; 0x164
 800f518:	2300      	movs	r3, #0
 800f51a:	9358      	str	r3, [sp, #352]	; 0x160
 800f51c:	9557      	str	r5, [sp, #348]	; 0x15c
 800f51e:	9056      	str	r0, [sp, #344]	; 0x158
 800f520:	9155      	str	r1, [sp, #340]	; 0x154
 800f522:	9254      	str	r2, [sp, #336]	; 0x150
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	9353      	str	r3, [sp, #332]	; 0x14c
 800f528:	ab01      	add	r3, sp, #4
 800f52a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f52e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f532:	4618      	mov	r0, r3
 800f534:	f011 fb6e 	bl	8020c14 <memcpy>
 800f538:	9400      	str	r4, [sp, #0]
 800f53a:	edd7 1a02 	vldr	s3, [r7, #8]
 800f53e:	ed97 1a03 	vldr	s2, [r7, #12]
 800f542:	edd7 0a04 	vldr	s1, [r7, #16]
 800f546:	ed97 0a05 	vldr	s0, [r7, #20]
 800f54a:	4653      	mov	r3, sl
 800f54c:	464a      	mov	r2, r9
 800f54e:	4641      	mov	r1, r8
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff fb65 	bl	800ec20 <run_movement_suspension>
 800f556:	e082      	b.n	800f65e <AdatiWayReturn+0x742>
 800f558:	20000813 	.word	0x20000813
 800f55c:	20000535 	.word	0x20000535
 800f560:	200011f0 	.word	0x200011f0
 800f564:	2000059c 	.word	0x2000059c
 800f568:	20000738 	.word	0x20000738
 800f56c:	43700000 	.word	0x43700000
 800f570:	00000000 	.word	0x00000000
 800f574:	42140000 	.word	0x42140000
 800f578:	43340000 	.word	0x43340000
					input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
					front_wall, right_wall, left_wall, x, y, 0, 1);
		}else{

			if(know_mode==0){kitikukan = 0;}
 800f57c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800f580:	2b00      	cmp	r3, #0
 800f582:	d102      	bne.n	800f58a <AdatiWayReturn+0x66e>
 800f584:	4b54      	ldr	r3, [pc, #336]	; (800f6d8 <AdatiWayReturn+0x7bc>)
 800f586:	2200      	movs	r2, #0
 800f588:	601a      	str	r2, [r3, #0]
			if (kitikukan == OFF) {
 800f58a:	4b53      	ldr	r3, [pc, #332]	; (800f6d8 <AdatiWayReturn+0x7bc>)
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d128      	bne.n	800f5e4 <AdatiWayReturn+0x6c8>
				run_movement_continuity(&direction,front_count,right_count,back_count,left_count,
 800f592:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
 800f594:	f8b7 803a 	ldrh.w	r8, [r7, #58]	; 0x3a
 800f598:	f8b7 9038 	ldrh.w	r9, [r7, #56]	; 0x38
 800f59c:	8efc      	ldrh	r4, [r7, #54]	; 0x36
 800f59e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f5a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800f5a6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f5aa:	f107 0528 	add.w	r5, r7, #40	; 0x28
 800f5ae:	9155      	str	r1, [sp, #340]	; 0x154
 800f5b0:	9254      	str	r2, [sp, #336]	; 0x150
 800f5b2:	9353      	str	r3, [sp, #332]	; 0x14c
 800f5b4:	ab01      	add	r3, sp, #4
 800f5b6:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f5ba:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f011 fb28 	bl	8020c14 <memcpy>
 800f5c4:	9400      	str	r4, [sp, #0]
 800f5c6:	edd7 1a02 	vldr	s3, [r7, #8]
 800f5ca:	ed97 1a03 	vldr	s2, [r7, #12]
 800f5ce:	edd7 0a04 	vldr	s1, [r7, #16]
 800f5d2:	ed97 0a05 	vldr	s0, [r7, #20]
 800f5d6:	464b      	mov	r3, r9
 800f5d8:	4642      	mov	r2, r8
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4628      	mov	r0, r5
 800f5de:	f7ff fa1f 	bl	800ea20 <run_movement_continuity>
 800f5e2:	e03c      	b.n	800f65e <AdatiWayReturn+0x742>
						input_StraightVelocity, input_TurningVelocity, input_StraightAcceleration, input_TurningAcceleration, howspeed,
						front_wall, right_wall, left_wall);
			} else {
				mode.WallControlMode=1;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	773b      	strb	r3, [r7, #28]
				mode.calMazeMode=1;
 800f5e8:	2301      	movs	r3, #1
 800f5ea:	77bb      	strb	r3, [r7, #30]
				mode.WallCutMode=0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	77fb      	strb	r3, [r7, #31]
				straight_table2(MAZE_SECTION/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800f5f0:	69f8      	ldr	r0, [r7, #28]
 800f5f2:	ed97 2a03 	vldr	s4, [r7, #12]
 800f5f6:	edd7 1a05 	vldr	s3, [r7, #20]
 800f5fa:	ed97 1a05 	vldr	s2, [r7, #20]
 800f5fe:	edd7 0a05 	vldr	s1, [r7, #20]
 800f602:	ed9f 0a36 	vldr	s0, [pc, #216]	; 800f6dc <AdatiWayReturn+0x7c0>
 800f606:	f7f4 fae3 	bl	8003bd0 <straight_table2>
				compress_kitiku(&x,&y,&direction,&kitiku_distance);
 800f60a:	f107 0320 	add.w	r3, r7, #32
 800f60e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f612:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800f616:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800f61a:	f001 fbab 	bl	8010d74 <compress_kitiku>
				End_straight(MAZE_SECTION/2-MAZE_OFFSET,mode,1,1);
 800f61e:	2201      	movs	r2, #1
 800f620:	2101      	movs	r1, #1
 800f622:	69f8      	ldr	r0, [r7, #28]
 800f624:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800f6dc <AdatiWayReturn+0x7c0>
 800f628:	f7f4 ff90 	bl	800454c <End_straight>
				mode.calMazeMode=0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	77bb      	strb	r3, [r7, #30]
				straight_table2((MAZE_SECTION/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800f630:	6a3a      	ldr	r2, [r7, #32]
 800f632:	4613      	mov	r3, r2
 800f634:	005b      	lsls	r3, r3, #1
 800f636:	4413      	add	r3, r2
 800f638:	011a      	lsls	r2, r3, #4
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	ee07 3a90 	vmov	s15, r3
 800f640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f644:	69f8      	ldr	r0, [r7, #28]
 800f646:	ed97 2a03 	vldr	s4, [r7, #12]
 800f64a:	eddf 1a25 	vldr	s3, [pc, #148]	; 800f6e0 <AdatiWayReturn+0x7c4>
 800f64e:	ed97 1a05 	vldr	s2, [r7, #20]
 800f652:	edd7 0a05 	vldr	s1, [r7, #20]
 800f656:	eeb0 0a67 	vmov.f32	s0, s15
 800f65a:	f7f4 fab9 	bl	8003bd0 <straight_table2>
			}

		}

		if (direction >= 5) {direction = direction-4;}
 800f65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f660:	2b04      	cmp	r3, #4
 800f662:	dd02      	ble.n	800f66a <AdatiWayReturn+0x74e>
 800f664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f666:	3b04      	subs	r3, #4
 800f668:	62bb      	str	r3, [r7, #40]	; 0x28
		if (direction <= 0) {direction = direction+4;}
 800f66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	dc02      	bgt.n	800f676 <AdatiWayReturn+0x75a>
 800f670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f672:	3304      	adds	r3, #4
 800f674:	62bb      	str	r3, [r7, #40]	; 0x28

		if(error_mode==1){break;}
 800f676:	4b1b      	ldr	r3, [pc, #108]	; (800f6e4 <AdatiWayReturn+0x7c8>)
 800f678:	781b      	ldrb	r3, [r3, #0]
 800f67a:	2b01      	cmp	r3, #1
 800f67c:	d000      	beq.n	800f680 <AdatiWayReturn+0x764>
		update_coordinate(&x,&y,direction);
 800f67e:	e630      	b.n	800f2e2 <AdatiWayReturn+0x3c6>
		if(error_mode==1){break;}
 800f680:	bf00      	nop

		}



	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800f682:	2000      	movs	r0, #0
 800f684:	f7f8 ff34 	bl	80084f0 <pl_DriveMotor_standby>
	maze_mode = 0;
 800f688:	4b17      	ldr	r3, [pc, #92]	; (800f6e8 <AdatiWayReturn+0x7cc>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(100);
 800f68e:	2064      	movs	r0, #100	; 0x64
 800f690:	f7f9 fa5e 	bl	8008b50 <wait_ms_NoReset>
	maze_display();
 800f694:	f005 ff8c 	bl	80155b0 <maze_display>
	create_StepCountMap_queue();
 800f698:	f005 f96c 	bl	8014974 <create_StepCountMap_queue>
	if(walk_count[0][0] == MAX_WALKCOUNT){
 800f69c:	4b13      	ldr	r3, [pc, #76]	; (800f6ec <AdatiWayReturn+0x7d0>)
 800f69e:	881b      	ldrh	r3, [r3, #0]
 800f6a0:	2bff      	cmp	r3, #255	; 0xff
 800f6a2:	d102      	bne.n	800f6aa <AdatiWayReturn+0x78e>
		error_mode = 1;
 800f6a4:	4b0f      	ldr	r3, [pc, #60]	; (800f6e4 <AdatiWayReturn+0x7c8>)
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800f6aa:	4b0e      	ldr	r3, [pc, #56]	; (800f6e4 <AdatiWayReturn+0x7c8>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	d102      	bne.n	800f6b8 <AdatiWayReturn+0x79c>
		record_in();
 800f6b2:	f7f8 fc3f 	bl	8007f34 <record_in>
		record_out();
	}else{
		record_in();
	}

}
 800f6b6:	e008      	b.n	800f6ca <AdatiWayReturn+0x7ae>
	} else if(timer_end_mode==0) {
 800f6b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d102      	bne.n	800f6c6 <AdatiWayReturn+0x7aa>
		record_out();
 800f6c0:	f7f8 fcee 	bl	80080a0 <record_out>
}
 800f6c4:	e001      	b.n	800f6ca <AdatiWayReturn+0x7ae>
		record_in();
 800f6c6:	f7f8 fc35 	bl	8007f34 <record_in>
}
 800f6ca:	bf00      	nop
 800f6cc:	3740      	adds	r7, #64	; 0x40
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f6d4:	b004      	add	sp, #16
 800f6d6:	4770      	bx	lr
 800f6d8:	20000838 	.word	0x20000838
 800f6dc:	42140000 	.word	0x42140000
 800f6e0:	447a0000 	.word	0x447a0000
 800f6e4:	20000813 	.word	0x20000813
 800f6e8:	20000836 	.word	0x20000836
 800f6ec:	200011f4 	.word	0x200011f4

0800f6f0 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800f6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6f2:	b08b      	sub	sp, #44	; 0x2c
 800f6f4:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	607b      	str	r3, [r7, #4]
	int y = 0;
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800f6fe:	2301      	movs	r3, #1
 800f700:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800f702:	4b8b      	ldr	r3, [pc, #556]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f704:	2200      	movs	r2, #0
 800f706:	801a      	strh	r2, [r3, #0]
	create_DijkstraMap();
 800f708:	f002 fc12 	bl	8011f30 <create_DijkstraMap>
	maze_display_Dijkstra();
 800f70c:	f006 f864 	bl	80157d8 <maze_display_Dijkstra>
	pass[0] = 1;
 800f710:	4b88      	ldr	r3, [pc, #544]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f712:	2201      	movs	r2, #1
 800f714:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800f716:	4639      	mov	r1, r7
 800f718:	1d3b      	adds	r3, r7, #4
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f7ff f94b 	bl	800e9b8 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b05      	cmp	r3, #5
 800f726:	d002      	beq.n	800f72e <pass_maker_Dijkstra+0x3e>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b06      	cmp	r3, #6
 800f72c:	d13a      	bne.n	800f7a4 <pass_maker_Dijkstra+0xb4>
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	2b04      	cmp	r3, #4
 800f732:	d002      	beq.n	800f73a <pass_maker_Dijkstra+0x4a>
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	2b05      	cmp	r3, #5
 800f738:	d134      	bne.n	800f7a4 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800f73a:	4b7d      	ldr	r3, [pc, #500]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f73c:	881b      	ldrh	r3, [r3, #0]
 800f73e:	461a      	mov	r2, r3
 800f740:	4b7c      	ldr	r3, [pc, #496]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f746:	2b00      	cmp	r3, #0
 800f748:	da05      	bge.n	800f756 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800f74a:	4b79      	ldr	r3, [pc, #484]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f74c:	881b      	ldrh	r3, [r3, #0]
 800f74e:	3301      	adds	r3, #1
 800f750:	b29a      	uxth	r2, r3
 800f752:	4b77      	ldr	r3, [pc, #476]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f754:	801a      	strh	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800f756:	4b76      	ldr	r3, [pc, #472]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f758:	881b      	ldrh	r3, [r3, #0]
 800f75a:	461a      	mov	r2, r3
 800f75c:	4b75      	ldr	r3, [pc, #468]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f75e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f762:	4a73      	ldr	r2, [pc, #460]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f764:	8812      	ldrh	r2, [r2, #0]
 800f766:	4611      	mov	r1, r2
 800f768:	3301      	adds	r3, #1
 800f76a:	4a72      	ldr	r2, [pc, #456]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f76c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	3302      	adds	r3, #2
 800f774:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	2b05      	cmp	r3, #5
 800f77a:	d101      	bne.n	800f780 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800f77c:	2301      	movs	r3, #1
 800f77e:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	2b06      	cmp	r3, #6
 800f784:	d101      	bne.n	800f78a <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800f786:	2302      	movs	r3, #2
 800f788:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d101      	bne.n	800f794 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800f790:	2304      	movs	r3, #4
 800f792:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f79a:	f040 80c2 	bne.w	800f922 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	617b      	str	r3, [r7, #20]
					}
					break;
 800f7a2:	e0be      	b.n	800f922 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	6839      	ldr	r1, [r7, #0]
 800f7a8:	f107 020b 	add.w	r2, r7, #11
 800f7ac:	f107 0309 	add.w	r3, r7, #9
 800f7b0:	9301      	str	r3, [sp, #4]
 800f7b2:	f107 030a 	add.w	r3, r7, #10
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	4613      	mov	r3, r2
 800f7ba:	697a      	ldr	r2, [r7, #20]
 800f7bc:	f001 ffd2 	bl	8011764 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	683a      	ldr	r2, [r7, #0]
 800f7c4:	f107 060c 	add.w	r6, r7, #12
 800f7c8:	f107 050e 	add.w	r5, r7, #14
 800f7cc:	f107 0410 	add.w	r4, r7, #16
 800f7d0:	f107 0012 	add.w	r0, r7, #18
 800f7d4:	6979      	ldr	r1, [r7, #20]
 800f7d6:	9102      	str	r1, [sp, #8]
 800f7d8:	9201      	str	r2, [sp, #4]
 800f7da:	9300      	str	r3, [sp, #0]
 800f7dc:	4633      	mov	r3, r6
 800f7de:	462a      	mov	r2, r5
 800f7e0:	4621      	mov	r1, r4
 800f7e2:	f002 fb0b 	bl	8011dfc <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f7e6:	7afb      	ldrb	r3, [r7, #11]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d002      	beq.n	800f7f2 <pass_maker_Dijkstra+0x102>
 800f7ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7f0:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f7f2:	7abb      	ldrb	r3, [r7, #10]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <pass_maker_Dijkstra+0x10e>
 800f7f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f7fc:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f7fe:	7a7b      	ldrb	r3, [r7, #9]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d002      	beq.n	800f80a <pass_maker_Dijkstra+0x11a>
 800f804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f808:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f80a:	8a7b      	ldrh	r3, [r7, #18]
 800f80c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f810:	4293      	cmp	r3, r2
 800f812:	d10e      	bne.n	800f832 <pass_maker_Dijkstra+0x142>
 800f814:	8a3b      	ldrh	r3, [r7, #16]
 800f816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d109      	bne.n	800f832 <pass_maker_Dijkstra+0x142>
 800f81e:	89bb      	ldrh	r3, [r7, #12]
 800f820:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f824:	4293      	cmp	r3, r2
 800f826:	d104      	bne.n	800f832 <pass_maker_Dijkstra+0x142>
 800f828:	89fb      	ldrh	r3, [r7, #14]
 800f82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f82e:	4293      	cmp	r3, r2
 800f830:	d079      	beq.n	800f926 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f832:	8a7a      	ldrh	r2, [r7, #18]
 800f834:	8a3b      	ldrh	r3, [r7, #16]
 800f836:	429a      	cmp	r2, r3
 800f838:	d822      	bhi.n	800f880 <pass_maker_Dijkstra+0x190>
 800f83a:	8a7a      	ldrh	r2, [r7, #18]
 800f83c:	89bb      	ldrh	r3, [r7, #12]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d81e      	bhi.n	800f880 <pass_maker_Dijkstra+0x190>
 800f842:	8a7a      	ldrh	r2, [r7, #18]
 800f844:	89fb      	ldrh	r3, [r7, #14]
 800f846:	429a      	cmp	r2, r3
 800f848:	d81a      	bhi.n	800f880 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f84a:	4b39      	ldr	r3, [pc, #228]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f84c:	881b      	ldrh	r3, [r3, #0]
 800f84e:	461a      	mov	r2, r3
 800f850:	4b38      	ldr	r3, [pc, #224]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f856:	2b00      	cmp	r3, #0
 800f858:	da05      	bge.n	800f866 <pass_maker_Dijkstra+0x176>
 800f85a:	4b35      	ldr	r3, [pc, #212]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f85c:	881b      	ldrh	r3, [r3, #0]
 800f85e:	3301      	adds	r3, #1
 800f860:	b29a      	uxth	r2, r3
 800f862:	4b33      	ldr	r3, [pc, #204]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f864:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f866:	4b32      	ldr	r3, [pc, #200]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f868:	881b      	ldrh	r3, [r3, #0]
 800f86a:	461a      	mov	r2, r3
 800f86c:	4b31      	ldr	r3, [pc, #196]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f86e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f872:	4a2f      	ldr	r2, [pc, #188]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f874:	8812      	ldrh	r2, [r2, #0]
 800f876:	4611      	mov	r1, r2
 800f878:	3302      	adds	r3, #2
 800f87a:	4a2e      	ldr	r2, [pc, #184]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f87c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f880:	8a3a      	ldrh	r2, [r7, #16]
 800f882:	8a7b      	ldrh	r3, [r7, #18]
 800f884:	429a      	cmp	r2, r3
 800f886:	d218      	bcs.n	800f8ba <pass_maker_Dijkstra+0x1ca>
 800f888:	8a3a      	ldrh	r2, [r7, #16]
 800f88a:	89bb      	ldrh	r3, [r7, #12]
 800f88c:	429a      	cmp	r2, r3
 800f88e:	d814      	bhi.n	800f8ba <pass_maker_Dijkstra+0x1ca>
 800f890:	8a3a      	ldrh	r2, [r7, #16]
 800f892:	89fb      	ldrh	r3, [r7, #14]
 800f894:	429a      	cmp	r2, r3
 800f896:	d810      	bhi.n	800f8ba <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f898:	4b25      	ldr	r3, [pc, #148]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f89a:	881b      	ldrh	r3, [r3, #0]
 800f89c:	3301      	adds	r3, #1
 800f89e:	b29a      	uxth	r2, r3
 800f8a0:	4b23      	ldr	r3, [pc, #140]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f8a2:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -2;
 800f8a4:	4b22      	ldr	r3, [pc, #136]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f8a6:	881b      	ldrh	r3, [r3, #0]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4b22      	ldr	r3, [pc, #136]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f8ac:	f06f 0201 	mvn.w	r2, #1
 800f8b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f8b4:	697b      	ldr	r3, [r7, #20]
 800f8b6:	3301      	adds	r3, #1
 800f8b8:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f8ba:	89ba      	ldrh	r2, [r7, #12]
 800f8bc:	8a7b      	ldrh	r3, [r7, #18]
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d218      	bcs.n	800f8f4 <pass_maker_Dijkstra+0x204>
 800f8c2:	89ba      	ldrh	r2, [r7, #12]
 800f8c4:	8a3b      	ldrh	r3, [r7, #16]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d214      	bcs.n	800f8f4 <pass_maker_Dijkstra+0x204>
 800f8ca:	89ba      	ldrh	r2, [r7, #12]
 800f8cc:	89fb      	ldrh	r3, [r7, #14]
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d810      	bhi.n	800f8f4 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f8d2:	4b17      	ldr	r3, [pc, #92]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	b29a      	uxth	r2, r3
 800f8da:	4b15      	ldr	r3, [pc, #84]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f8dc:	801a      	strh	r2, [r3, #0]
			pass[pass_count] = -3;
 800f8de:	4b14      	ldr	r3, [pc, #80]	; (800f930 <pass_maker_Dijkstra+0x240>)
 800f8e0:	881b      	ldrh	r3, [r3, #0]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	4b13      	ldr	r3, [pc, #76]	; (800f934 <pass_maker_Dijkstra+0x244>)
 800f8e6:	f06f 0202 	mvn.w	r2, #2
 800f8ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	3b01      	subs	r3, #1
 800f8f2:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f8f4:	697b      	ldr	r3, [r7, #20]
 800f8f6:	2b05      	cmp	r3, #5
 800f8f8:	d101      	bne.n	800f8fe <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b06      	cmp	r3, #6
 800f902:	d101      	bne.n	800f908 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f904:	2302      	movs	r3, #2
 800f906:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d101      	bne.n	800f912 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f90e:	2304      	movs	r3, #4
 800f910:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f918:	f47f aefd 	bne.w	800f716 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f91c:	2303      	movs	r3, #3
 800f91e:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f920:	e6f9      	b.n	800f716 <pass_maker_Dijkstra+0x26>
					break;
 800f922:	bf00      	nop
 800f924:	e000      	b.n	800f928 <pass_maker_Dijkstra+0x238>
			break;
 800f926:	bf00      	nop
		}

	}
}
 800f928:	bf00      	nop
 800f92a:	371c      	adds	r7, #28
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f930:	20000834 	.word	0x20000834
 800f934:	2000083c 	.word	0x2000083c

0800f938 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f938:	b5b0      	push	{r4, r5, r7, lr}
 800f93a:	b0e2      	sub	sp, #392	; 0x188
 800f93c:	af50      	add	r7, sp, #320	; 0x140
 800f93e:	ed87 0a05 	vstr	s0, [r7, #20]
 800f942:	edc7 0a04 	vstr	s1, [r7, #16]
 800f946:	60f8      	str	r0, [r7, #12]
 800f948:	4608      	mov	r0, r1
 800f94a:	4611      	mov	r1, r2
 800f94c:	461a      	mov	r2, r3
 800f94e:	ed87 1a01 	vstr	s2, [r7, #4]
 800f952:	4603      	mov	r3, r0
 800f954:	72fb      	strb	r3, [r7, #11]
 800f956:	460b      	mov	r3, r1
 800f958:	72bb      	strb	r3, [r7, #10]
 800f95a:	4613      	mov	r3, r2
 800f95c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f95e:	f06f 0301 	mvn.w	r3, #1
 800f962:	643b      	str	r3, [r7, #64]	; 0x40

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f964:	2301      	movs	r3, #1
 800f966:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 800f968:	2300      	movs	r3, #0
 800f96a:	777b      	strb	r3, [r7, #29]
	mode.WallCutMode=0;
 800f96c:	2300      	movs	r3, #0
 800f96e:	77fb      	strb	r3, [r7, #31]
	mode.calMazeMode=0;
 800f970:	2300      	movs	r3, #0
 800f972:	77bb      	strb	r3, [r7, #30]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f974:	2300      	movs	r3, #0
 800f976:	637b      	str	r3, [r7, #52]	; 0x34
 800f978:	e007      	b.n	800f98a <run_shortest+0x52>
 800f97a:	4a07      	ldr	r2, [pc, #28]	; (800f998 <run_shortest+0x60>)
 800f97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f97e:	2100      	movs	r1, #0
 800f980:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f986:	3301      	adds	r3, #1
 800f988:	637b      	str	r3, [r7, #52]	; 0x34
 800f98a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f98c:	2bfe      	cmp	r3, #254	; 0xfe
 800f98e:	ddf4      	ble.n	800f97a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f990:	2300      	movs	r3, #0
 800f992:	633b      	str	r3, [r7, #48]	; 0x30
 800f994:	e068      	b.n	800fa68 <run_shortest+0x130>
 800f996:	bf00      	nop
 800f998:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f99c:	4aa8      	ldr	r2, [pc, #672]	; (800fc40 <run_shortest+0x308>)
 800f99e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f9a4:	49a7      	ldr	r1, [pc, #668]	; (800fc44 <run_shortest+0x30c>)
 800f9a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column[i] = wall.column[i];
 800f9ac:	4aa4      	ldr	r2, [pc, #656]	; (800fc40 <run_shortest+0x308>)
 800f9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9b0:	330e      	adds	r3, #14
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	4413      	add	r3, r2
 800f9b6:	685a      	ldr	r2, [r3, #4]
 800f9b8:	49a2      	ldr	r1, [pc, #648]	; (800fc44 <run_shortest+0x30c>)
 800f9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9bc:	330e      	adds	r3, #14
 800f9be:	009b      	lsls	r3, r3, #2
 800f9c0:	440b      	add	r3, r1
 800f9c2:	605a      	str	r2, [r3, #4]
		record.row_look[i] = wall.row_look[i];
 800f9c4:	4a9e      	ldr	r2, [pc, #632]	; (800fc40 <run_shortest+0x308>)
 800f9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9c8:	331e      	adds	r3, #30
 800f9ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f9ce:	499d      	ldr	r1, [pc, #628]	; (800fc44 <run_shortest+0x30c>)
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	331e      	adds	r3, #30
 800f9d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		record.column_look[i] = wall.column_look[i];
 800f9d8:	4a99      	ldr	r2, [pc, #612]	; (800fc40 <run_shortest+0x308>)
 800f9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9dc:	332c      	adds	r3, #44	; 0x2c
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	4413      	add	r3, r2
 800f9e2:	685a      	ldr	r2, [r3, #4]
 800f9e4:	4997      	ldr	r1, [pc, #604]	; (800fc44 <run_shortest+0x30c>)
 800f9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9e8:	332c      	adds	r3, #44	; 0x2c
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	440b      	add	r3, r1
 800f9ee:	605a      	str	r2, [r3, #4]
		wall.row_look[i] = ~wall.row_look[i];
 800f9f0:	4a93      	ldr	r2, [pc, #588]	; (800fc40 <run_shortest+0x308>)
 800f9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9f4:	331e      	adds	r3, #30
 800f9f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9fa:	43da      	mvns	r2, r3
 800f9fc:	4990      	ldr	r1, [pc, #576]	; (800fc40 <run_shortest+0x308>)
 800f9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa00:	331e      	adds	r3, #30
 800fa02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[i] = ~wall.column_look[i];
 800fa06:	4a8e      	ldr	r2, [pc, #568]	; (800fc40 <run_shortest+0x308>)
 800fa08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa0a:	332c      	adds	r3, #44	; 0x2c
 800fa0c:	009b      	lsls	r3, r3, #2
 800fa0e:	4413      	add	r3, r2
 800fa10:	685b      	ldr	r3, [r3, #4]
 800fa12:	43da      	mvns	r2, r3
 800fa14:	498a      	ldr	r1, [pc, #552]	; (800fc40 <run_shortest+0x308>)
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	332c      	adds	r3, #44	; 0x2c
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	440b      	add	r3, r1
 800fa1e:	605a      	str	r2, [r3, #4]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800fa20:	4a87      	ldr	r2, [pc, #540]	; (800fc40 <run_shortest+0x308>)
 800fa22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa24:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fa28:	4985      	ldr	r1, [pc, #532]	; (800fc40 <run_shortest+0x308>)
 800fa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa2c:	331e      	adds	r3, #30
 800fa2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800fa32:	431a      	orrs	r2, r3
 800fa34:	4982      	ldr	r1, [pc, #520]	; (800fc40 <run_shortest+0x308>)
 800fa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800fa3c:	4a80      	ldr	r2, [pc, #512]	; (800fc40 <run_shortest+0x308>)
 800fa3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa40:	330e      	adds	r3, #14
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	685a      	ldr	r2, [r3, #4]
 800fa48:	497d      	ldr	r1, [pc, #500]	; (800fc40 <run_shortest+0x308>)
 800fa4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4c:	332c      	adds	r3, #44	; 0x2c
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	440b      	add	r3, r1
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	431a      	orrs	r2, r3
 800fa56:	497a      	ldr	r1, [pc, #488]	; (800fc40 <run_shortest+0x308>)
 800fa58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5a:	330e      	adds	r3, #14
 800fa5c:	009b      	lsls	r3, r3, #2
 800fa5e:	440b      	add	r3, r1
 800fa60:	605a      	str	r2, [r3, #4]
	for(int i = 0; i <= 14; i++){
 800fa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa64:	3301      	adds	r3, #1
 800fa66:	633b      	str	r3, [r7, #48]	; 0x30
 800fa68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa6a:	2b0e      	cmp	r3, #14
 800fa6c:	dd96      	ble.n	800f99c <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800fa6e:	f7ff fe3f 	bl	800f6f0 <pass_maker_Dijkstra>

	pass_count = 1;
 800fa72:	4b75      	ldr	r3, [pc, #468]	; (800fc48 <run_shortest+0x310>)
 800fa74:	2201      	movs	r2, #1
 800fa76:	801a      	strh	r2, [r3, #0]
if(pass_mode==1){
 800fa78:	7afb      	ldrb	r3, [r7, #11]
 800fa7a:	2b01      	cmp	r3, #1
 800fa7c:	f040 84b6 	bne.w	80103ec <run_shortest+0xab4>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800fa80:	4b71      	ldr	r3, [pc, #452]	; (800fc48 <run_shortest+0x310>)
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	461a      	mov	r2, r3
 800fa86:	4b71      	ldr	r3, [pc, #452]	; (800fc4c <run_shortest+0x314>)
 800fa88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	f000 813b 	beq.w	800fd08 <run_shortest+0x3d0>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800fa92:	4b6d      	ldr	r3, [pc, #436]	; (800fc48 <run_shortest+0x310>)
 800fa94:	881b      	ldrh	r3, [r3, #0]
 800fa96:	461a      	mov	r2, r3
 800fa98:	4b6c      	ldr	r3, [pc, #432]	; (800fc4c <run_shortest+0x314>)
 800fa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa9e:	f113 0f02 	cmn.w	r3, #2
 800faa2:	d131      	bne.n	800fb08 <run_shortest+0x1d0>
 800faa4:	4b68      	ldr	r3, [pc, #416]	; (800fc48 <run_shortest+0x310>)
 800faa6:	881b      	ldrh	r3, [r3, #0]
 800faa8:	3b01      	subs	r3, #1
 800faaa:	4a68      	ldr	r2, [pc, #416]	; (800fc4c <run_shortest+0x314>)
 800faac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	dd29      	ble.n	800fb08 <run_shortest+0x1d0>
		&& pass[pass_count + 1] >= 1) {
 800fab4:	4b64      	ldr	r3, [pc, #400]	; (800fc48 <run_shortest+0x310>)
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	3301      	adds	r3, #1
 800faba:	4a64      	ldr	r2, [pc, #400]	; (800fc4c <run_shortest+0x314>)
 800fabc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	dd21      	ble.n	800fb08 <run_shortest+0x1d0>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fac4:	4b60      	ldr	r3, [pc, #384]	; (800fc48 <run_shortest+0x310>)
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	3b01      	subs	r3, #1
 800faca:	4a60      	ldr	r2, [pc, #384]	; (800fc4c <run_shortest+0x314>)
 800facc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fad0:	4b5d      	ldr	r3, [pc, #372]	; (800fc48 <run_shortest+0x310>)
 800fad2:	881b      	ldrh	r3, [r3, #0]
 800fad4:	3b01      	subs	r3, #1
 800fad6:	3a01      	subs	r2, #1
 800fad8:	495c      	ldr	r1, [pc, #368]	; (800fc4c <run_shortest+0x314>)
 800fada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fade:	4b5a      	ldr	r3, [pc, #360]	; (800fc48 <run_shortest+0x310>)
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	3301      	adds	r3, #1
 800fae4:	4a59      	ldr	r2, [pc, #356]	; (800fc4c <run_shortest+0x314>)
 800fae6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800faea:	4b57      	ldr	r3, [pc, #348]	; (800fc48 <run_shortest+0x310>)
 800faec:	881b      	ldrh	r3, [r3, #0]
 800faee:	3301      	adds	r3, #1
 800faf0:	3a01      	subs	r2, #1
 800faf2:	4956      	ldr	r1, [pc, #344]	; (800fc4c <run_shortest+0x314>)
 800faf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800faf8:	4b53      	ldr	r3, [pc, #332]	; (800fc48 <run_shortest+0x310>)
 800fafa:	881b      	ldrh	r3, [r3, #0]
 800fafc:	4619      	mov	r1, r3
 800fafe:	4b53      	ldr	r3, [pc, #332]	; (800fc4c <run_shortest+0x314>)
 800fb00:	f06f 0203 	mvn.w	r2, #3
 800fb04:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800fb08:	4b4f      	ldr	r3, [pc, #316]	; (800fc48 <run_shortest+0x310>)
 800fb0a:	881b      	ldrh	r3, [r3, #0]
 800fb0c:	461a      	mov	r2, r3
 800fb0e:	4b4f      	ldr	r3, [pc, #316]	; (800fc4c <run_shortest+0x314>)
 800fb10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb14:	f113 0f03 	cmn.w	r3, #3
 800fb18:	d131      	bne.n	800fb7e <run_shortest+0x246>
 800fb1a:	4b4b      	ldr	r3, [pc, #300]	; (800fc48 <run_shortest+0x310>)
 800fb1c:	881b      	ldrh	r3, [r3, #0]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	4a4a      	ldr	r2, [pc, #296]	; (800fc4c <run_shortest+0x314>)
 800fb22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	dd29      	ble.n	800fb7e <run_shortest+0x246>
		&& pass[pass_count + 1] >= 1) {
 800fb2a:	4b47      	ldr	r3, [pc, #284]	; (800fc48 <run_shortest+0x310>)
 800fb2c:	881b      	ldrh	r3, [r3, #0]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	4a46      	ldr	r2, [pc, #280]	; (800fc4c <run_shortest+0x314>)
 800fb32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	dd21      	ble.n	800fb7e <run_shortest+0x246>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800fb3a:	4b43      	ldr	r3, [pc, #268]	; (800fc48 <run_shortest+0x310>)
 800fb3c:	881b      	ldrh	r3, [r3, #0]
 800fb3e:	3b01      	subs	r3, #1
 800fb40:	4a42      	ldr	r2, [pc, #264]	; (800fc4c <run_shortest+0x314>)
 800fb42:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb46:	4b40      	ldr	r3, [pc, #256]	; (800fc48 <run_shortest+0x310>)
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	3b01      	subs	r3, #1
 800fb4c:	3a01      	subs	r2, #1
 800fb4e:	493f      	ldr	r1, [pc, #252]	; (800fc4c <run_shortest+0x314>)
 800fb50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800fb54:	4b3c      	ldr	r3, [pc, #240]	; (800fc48 <run_shortest+0x310>)
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	3301      	adds	r3, #1
 800fb5a:	4a3c      	ldr	r2, [pc, #240]	; (800fc4c <run_shortest+0x314>)
 800fb5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb60:	4b39      	ldr	r3, [pc, #228]	; (800fc48 <run_shortest+0x310>)
 800fb62:	881b      	ldrh	r3, [r3, #0]
 800fb64:	3301      	adds	r3, #1
 800fb66:	3a01      	subs	r2, #1
 800fb68:	4938      	ldr	r1, [pc, #224]	; (800fc4c <run_shortest+0x314>)
 800fb6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800fb6e:	4b36      	ldr	r3, [pc, #216]	; (800fc48 <run_shortest+0x310>)
 800fb70:	881b      	ldrh	r3, [r3, #0]
 800fb72:	4619      	mov	r1, r3
 800fb74:	4b35      	ldr	r3, [pc, #212]	; (800fc4c <run_shortest+0x314>)
 800fb76:	f06f 0204 	mvn.w	r2, #4
 800fb7a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800fb7e:	4b32      	ldr	r3, [pc, #200]	; (800fc48 <run_shortest+0x310>)
 800fb80:	881b      	ldrh	r3, [r3, #0]
 800fb82:	3b01      	subs	r3, #1
 800fb84:	4a31      	ldr	r2, [pc, #196]	; (800fc4c <run_shortest+0x314>)
 800fb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	dd43      	ble.n	800fc16 <run_shortest+0x2de>
 800fb8e:	4b2e      	ldr	r3, [pc, #184]	; (800fc48 <run_shortest+0x310>)
 800fb90:	881b      	ldrh	r3, [r3, #0]
 800fb92:	461a      	mov	r2, r3
 800fb94:	4b2d      	ldr	r3, [pc, #180]	; (800fc4c <run_shortest+0x314>)
 800fb96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb9a:	f113 0f02 	cmn.w	r3, #2
 800fb9e:	d13a      	bne.n	800fc16 <run_shortest+0x2de>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800fba0:	4b29      	ldr	r3, [pc, #164]	; (800fc48 <run_shortest+0x310>)
 800fba2:	881b      	ldrh	r3, [r3, #0]
 800fba4:	3301      	adds	r3, #1
 800fba6:	4a29      	ldr	r2, [pc, #164]	; (800fc4c <run_shortest+0x314>)
 800fba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbac:	f113 0f02 	cmn.w	r3, #2
 800fbb0:	d131      	bne.n	800fc16 <run_shortest+0x2de>
 800fbb2:	4b25      	ldr	r3, [pc, #148]	; (800fc48 <run_shortest+0x310>)
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	3302      	adds	r3, #2
 800fbb8:	4a24      	ldr	r2, [pc, #144]	; (800fc4c <run_shortest+0x314>)
 800fbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	dd29      	ble.n	800fc16 <run_shortest+0x2de>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fbc2:	4b21      	ldr	r3, [pc, #132]	; (800fc48 <run_shortest+0x310>)
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	4a20      	ldr	r2, [pc, #128]	; (800fc4c <run_shortest+0x314>)
 800fbca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fbce:	4b1e      	ldr	r3, [pc, #120]	; (800fc48 <run_shortest+0x310>)
 800fbd0:	881b      	ldrh	r3, [r3, #0]
 800fbd2:	3b01      	subs	r3, #1
 800fbd4:	3a01      	subs	r2, #1
 800fbd6:	491d      	ldr	r1, [pc, #116]	; (800fc4c <run_shortest+0x314>)
 800fbd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800fbdc:	4b1a      	ldr	r3, [pc, #104]	; (800fc48 <run_shortest+0x310>)
 800fbde:	881b      	ldrh	r3, [r3, #0]
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	4b1a      	ldr	r3, [pc, #104]	; (800fc4c <run_shortest+0x314>)
 800fbe4:	f06f 0205 	mvn.w	r2, #5
 800fbe8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fbec:	4b16      	ldr	r3, [pc, #88]	; (800fc48 <run_shortest+0x310>)
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	3301      	adds	r3, #1
 800fbf2:	4a16      	ldr	r2, [pc, #88]	; (800fc4c <run_shortest+0x314>)
 800fbf4:	f04f 31ff 	mov.w	r1, #4294967295
 800fbf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fbfc:	4b12      	ldr	r3, [pc, #72]	; (800fc48 <run_shortest+0x310>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	3302      	adds	r3, #2
 800fc02:	4a12      	ldr	r2, [pc, #72]	; (800fc4c <run_shortest+0x314>)
 800fc04:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc08:	4b0f      	ldr	r3, [pc, #60]	; (800fc48 <run_shortest+0x310>)
 800fc0a:	881b      	ldrh	r3, [r3, #0]
 800fc0c:	3302      	adds	r3, #2
 800fc0e:	3a01      	subs	r2, #1
 800fc10:	490e      	ldr	r1, [pc, #56]	; (800fc4c <run_shortest+0x314>)
 800fc12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800fc16:	4b0c      	ldr	r3, [pc, #48]	; (800fc48 <run_shortest+0x310>)
 800fc18:	881b      	ldrh	r3, [r3, #0]
 800fc1a:	3b01      	subs	r3, #1
 800fc1c:	4a0b      	ldr	r2, [pc, #44]	; (800fc4c <run_shortest+0x314>)
 800fc1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	dd4c      	ble.n	800fcc0 <run_shortest+0x388>
 800fc26:	4b08      	ldr	r3, [pc, #32]	; (800fc48 <run_shortest+0x310>)
 800fc28:	881b      	ldrh	r3, [r3, #0]
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4b07      	ldr	r3, [pc, #28]	; (800fc4c <run_shortest+0x314>)
 800fc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc32:	f113 0f03 	cmn.w	r3, #3
 800fc36:	d143      	bne.n	800fcc0 <run_shortest+0x388>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800fc38:	4b03      	ldr	r3, [pc, #12]	; (800fc48 <run_shortest+0x310>)
 800fc3a:	881b      	ldrh	r3, [r3, #0]
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	e007      	b.n	800fc50 <run_shortest+0x318>
 800fc40:	20001010 	.word	0x20001010
 800fc44:	20001100 	.word	0x20001100
 800fc48:	20000834 	.word	0x20000834
 800fc4c:	2000083c 	.word	0x2000083c
 800fc50:	4a2b      	ldr	r2, [pc, #172]	; (800fd00 <run_shortest+0x3c8>)
 800fc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc56:	f113 0f03 	cmn.w	r3, #3
 800fc5a:	d131      	bne.n	800fcc0 <run_shortest+0x388>
 800fc5c:	4b29      	ldr	r3, [pc, #164]	; (800fd04 <run_shortest+0x3cc>)
 800fc5e:	881b      	ldrh	r3, [r3, #0]
 800fc60:	3302      	adds	r3, #2
 800fc62:	4a27      	ldr	r2, [pc, #156]	; (800fd00 <run_shortest+0x3c8>)
 800fc64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	dd29      	ble.n	800fcc0 <run_shortest+0x388>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fc6c:	4b25      	ldr	r3, [pc, #148]	; (800fd04 <run_shortest+0x3cc>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	3b01      	subs	r3, #1
 800fc72:	4a23      	ldr	r2, [pc, #140]	; (800fd00 <run_shortest+0x3c8>)
 800fc74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc78:	4b22      	ldr	r3, [pc, #136]	; (800fd04 <run_shortest+0x3cc>)
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	3b01      	subs	r3, #1
 800fc7e:	3a01      	subs	r2, #1
 800fc80:	491f      	ldr	r1, [pc, #124]	; (800fd00 <run_shortest+0x3c8>)
 800fc82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800fc86:	4b1f      	ldr	r3, [pc, #124]	; (800fd04 <run_shortest+0x3cc>)
 800fc88:	881b      	ldrh	r3, [r3, #0]
 800fc8a:	4619      	mov	r1, r3
 800fc8c:	4b1c      	ldr	r3, [pc, #112]	; (800fd00 <run_shortest+0x3c8>)
 800fc8e:	f06f 0206 	mvn.w	r2, #6
 800fc92:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800fc96:	4b1b      	ldr	r3, [pc, #108]	; (800fd04 <run_shortest+0x3cc>)
 800fc98:	881b      	ldrh	r3, [r3, #0]
 800fc9a:	3301      	adds	r3, #1
 800fc9c:	4a18      	ldr	r2, [pc, #96]	; (800fd00 <run_shortest+0x3c8>)
 800fc9e:	f04f 31ff 	mov.w	r1, #4294967295
 800fca2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800fca6:	4b17      	ldr	r3, [pc, #92]	; (800fd04 <run_shortest+0x3cc>)
 800fca8:	881b      	ldrh	r3, [r3, #0]
 800fcaa:	3302      	adds	r3, #2
 800fcac:	4a14      	ldr	r2, [pc, #80]	; (800fd00 <run_shortest+0x3c8>)
 800fcae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fcb2:	4b14      	ldr	r3, [pc, #80]	; (800fd04 <run_shortest+0x3cc>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	3302      	adds	r3, #2
 800fcb8:	3a01      	subs	r2, #1
 800fcba:	4911      	ldr	r1, [pc, #68]	; (800fd00 <run_shortest+0x3c8>)
 800fcbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800fcc0:	4b10      	ldr	r3, [pc, #64]	; (800fd04 <run_shortest+0x3cc>)
 800fcc2:	881b      	ldrh	r3, [r3, #0]
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	4b0e      	ldr	r3, [pc, #56]	; (800fd00 <run_shortest+0x3c8>)
 800fcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fccc:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800fcd0:	4b0c      	ldr	r3, [pc, #48]	; (800fd04 <run_shortest+0x3cc>)
 800fcd2:	881b      	ldrh	r3, [r3, #0]
 800fcd4:	3b01      	subs	r3, #1
 800fcd6:	4a0a      	ldr	r2, [pc, #40]	; (800fd00 <run_shortest+0x3c8>)
 800fcd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcdc:	2b00      	cmp	r3, #0
 800fcde:	d107      	bne.n	800fcf0 <run_shortest+0x3b8>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800fce0:	4b08      	ldr	r3, [pc, #32]	; (800fd04 <run_shortest+0x3cc>)
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	3b01      	subs	r3, #1
 800fce6:	4a06      	ldr	r2, [pc, #24]	; (800fd00 <run_shortest+0x3c8>)
 800fce8:	f04f 31ff 	mov.w	r1, #4294967295
 800fcec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800fcf0:	4b04      	ldr	r3, [pc, #16]	; (800fd04 <run_shortest+0x3cc>)
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	4b02      	ldr	r3, [pc, #8]	; (800fd04 <run_shortest+0x3cc>)
 800fcfa:	801a      	strh	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800fcfc:	e6c0      	b.n	800fa80 <run_shortest+0x148>
 800fcfe:	bf00      	nop
 800fd00:	2000083c 	.word	0x2000083c
 800fd04:	20000834 	.word	0x20000834
			break;
 800fd08:	bf00      	nop
	}

	pass_count = 1;
 800fd0a:	4b8c      	ldr	r3, [pc, #560]	; (800ff3c <run_shortest+0x604>)
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	801a      	strh	r2, [r3, #0]
	if (slant_mode == 1) {
 800fd10:	7a7b      	ldrb	r3, [r7, #9]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	f040 836a 	bne.w	80103ec <run_shortest+0xab4>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800fd18:	4b88      	ldr	r3, [pc, #544]	; (800ff3c <run_shortest+0x604>)
 800fd1a:	881b      	ldrh	r3, [r3, #0]
 800fd1c:	461a      	mov	r2, r3
 800fd1e:	4b88      	ldr	r3, [pc, #544]	; (800ff40 <run_shortest+0x608>)
 800fd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	f000 81f1 	beq.w	801010c <run_shortest+0x7d4>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800fd2a:	4b84      	ldr	r3, [pc, #528]	; (800ff3c <run_shortest+0x604>)
 800fd2c:	881b      	ldrh	r3, [r3, #0]
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	4a83      	ldr	r2, [pc, #524]	; (800ff40 <run_shortest+0x608>)
 800fd32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	f340 81dc 	ble.w	80100f4 <run_shortest+0x7bc>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800fd3c:	4b7f      	ldr	r3, [pc, #508]	; (800ff3c <run_shortest+0x604>)
 800fd3e:	881b      	ldrh	r3, [r3, #0]
 800fd40:	461a      	mov	r2, r3
 800fd42:	4b7f      	ldr	r3, [pc, #508]	; (800ff40 <run_shortest+0x608>)
 800fd44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd48:	f113 0f02 	cmn.w	r3, #2
 800fd4c:	d009      	beq.n	800fd62 <run_shortest+0x42a>
 800fd4e:	4b7b      	ldr	r3, [pc, #492]	; (800ff3c <run_shortest+0x604>)
 800fd50:	881b      	ldrh	r3, [r3, #0]
 800fd52:	461a      	mov	r2, r3
 800fd54:	4b7a      	ldr	r3, [pc, #488]	; (800ff40 <run_shortest+0x608>)
 800fd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5a:	f113 0f03 	cmn.w	r3, #3
 800fd5e:	f040 81c9 	bne.w	80100f4 <run_shortest+0x7bc>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800fd62:	4b76      	ldr	r3, [pc, #472]	; (800ff3c <run_shortest+0x604>)
 800fd64:	881b      	ldrh	r3, [r3, #0]
 800fd66:	461a      	mov	r2, r3
 800fd68:	4b75      	ldr	r3, [pc, #468]	; (800ff40 <run_shortest+0x608>)
 800fd6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd6e:	f113 0f02 	cmn.w	r3, #2
 800fd72:	d12d      	bne.n	800fdd0 <run_shortest+0x498>
 800fd74:	4b71      	ldr	r3, [pc, #452]	; (800ff3c <run_shortest+0x604>)
 800fd76:	881b      	ldrh	r3, [r3, #0]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	4a71      	ldr	r2, [pc, #452]	; (800ff40 <run_shortest+0x608>)
 800fd7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd80:	f113 0f03 	cmn.w	r3, #3
 800fd84:	d124      	bne.n	800fdd0 <run_shortest+0x498>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fd86:	4b6d      	ldr	r3, [pc, #436]	; (800ff3c <run_shortest+0x604>)
 800fd88:	881b      	ldrh	r3, [r3, #0]
 800fd8a:	3b01      	subs	r3, #1
 800fd8c:	4a6c      	ldr	r2, [pc, #432]	; (800ff40 <run_shortest+0x608>)
 800fd8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fd92:	4b6a      	ldr	r3, [pc, #424]	; (800ff3c <run_shortest+0x604>)
 800fd94:	881b      	ldrh	r3, [r3, #0]
 800fd96:	3b01      	subs	r3, #1
 800fd98:	3a01      	subs	r2, #1
 800fd9a:	4969      	ldr	r1, [pc, #420]	; (800ff40 <run_shortest+0x608>)
 800fd9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fda0:	4b66      	ldr	r3, [pc, #408]	; (800ff3c <run_shortest+0x604>)
 800fda2:	881b      	ldrh	r3, [r3, #0]
 800fda4:	3b01      	subs	r3, #1
 800fda6:	4a66      	ldr	r2, [pc, #408]	; (800ff40 <run_shortest+0x608>)
 800fda8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d107      	bne.n	800fdc0 <run_shortest+0x488>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fdb0:	4b62      	ldr	r3, [pc, #392]	; (800ff3c <run_shortest+0x604>)
 800fdb2:	881b      	ldrh	r3, [r3, #0]
 800fdb4:	3b01      	subs	r3, #1
 800fdb6:	4a62      	ldr	r2, [pc, #392]	; (800ff40 <run_shortest+0x608>)
 800fdb8:	f04f 31ff 	mov.w	r1, #4294967295
 800fdbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800fdc0:	4b5e      	ldr	r3, [pc, #376]	; (800ff3c <run_shortest+0x604>)
 800fdc2:	881b      	ldrh	r3, [r3, #0]
 800fdc4:	4619      	mov	r1, r3
 800fdc6:	4b5e      	ldr	r3, [pc, #376]	; (800ff40 <run_shortest+0x608>)
 800fdc8:	f06f 0207 	mvn.w	r2, #7
 800fdcc:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800fdd0:	4b5a      	ldr	r3, [pc, #360]	; (800ff3c <run_shortest+0x604>)
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	461a      	mov	r2, r3
 800fdd6:	4b5a      	ldr	r3, [pc, #360]	; (800ff40 <run_shortest+0x608>)
 800fdd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fddc:	f113 0f03 	cmn.w	r3, #3
 800fde0:	d12d      	bne.n	800fe3e <run_shortest+0x506>
 800fde2:	4b56      	ldr	r3, [pc, #344]	; (800ff3c <run_shortest+0x604>)
 800fde4:	881b      	ldrh	r3, [r3, #0]
 800fde6:	3301      	adds	r3, #1
 800fde8:	4a55      	ldr	r2, [pc, #340]	; (800ff40 <run_shortest+0x608>)
 800fdea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fdee:	f113 0f02 	cmn.w	r3, #2
 800fdf2:	d124      	bne.n	800fe3e <run_shortest+0x506>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fdf4:	4b51      	ldr	r3, [pc, #324]	; (800ff3c <run_shortest+0x604>)
 800fdf6:	881b      	ldrh	r3, [r3, #0]
 800fdf8:	3b01      	subs	r3, #1
 800fdfa:	4a51      	ldr	r2, [pc, #324]	; (800ff40 <run_shortest+0x608>)
 800fdfc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fe00:	4b4e      	ldr	r3, [pc, #312]	; (800ff3c <run_shortest+0x604>)
 800fe02:	881b      	ldrh	r3, [r3, #0]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	3a01      	subs	r2, #1
 800fe08:	494d      	ldr	r1, [pc, #308]	; (800ff40 <run_shortest+0x608>)
 800fe0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fe0e:	4b4b      	ldr	r3, [pc, #300]	; (800ff3c <run_shortest+0x604>)
 800fe10:	881b      	ldrh	r3, [r3, #0]
 800fe12:	3b01      	subs	r3, #1
 800fe14:	4a4a      	ldr	r2, [pc, #296]	; (800ff40 <run_shortest+0x608>)
 800fe16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d107      	bne.n	800fe2e <run_shortest+0x4f6>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fe1e:	4b47      	ldr	r3, [pc, #284]	; (800ff3c <run_shortest+0x604>)
 800fe20:	881b      	ldrh	r3, [r3, #0]
 800fe22:	3b01      	subs	r3, #1
 800fe24:	4a46      	ldr	r2, [pc, #280]	; (800ff40 <run_shortest+0x608>)
 800fe26:	f04f 31ff 	mov.w	r1, #4294967295
 800fe2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800fe2e:	4b43      	ldr	r3, [pc, #268]	; (800ff3c <run_shortest+0x604>)
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	4619      	mov	r1, r3
 800fe34:	4b42      	ldr	r3, [pc, #264]	; (800ff40 <run_shortest+0x608>)
 800fe36:	f06f 0208 	mvn.w	r2, #8
 800fe3a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800fe3e:	4b3f      	ldr	r3, [pc, #252]	; (800ff3c <run_shortest+0x604>)
 800fe40:	881b      	ldrh	r3, [r3, #0]
 800fe42:	461a      	mov	r2, r3
 800fe44:	4b3e      	ldr	r3, [pc, #248]	; (800ff40 <run_shortest+0x608>)
 800fe46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe4a:	f113 0f02 	cmn.w	r3, #2
 800fe4e:	d135      	bne.n	800febc <run_shortest+0x584>
 800fe50:	4b3a      	ldr	r3, [pc, #232]	; (800ff3c <run_shortest+0x604>)
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	3301      	adds	r3, #1
 800fe56:	4a3a      	ldr	r2, [pc, #232]	; (800ff40 <run_shortest+0x608>)
 800fe58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe5c:	f113 0f02 	cmn.w	r3, #2
 800fe60:	d12c      	bne.n	800febc <run_shortest+0x584>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fe62:	4b36      	ldr	r3, [pc, #216]	; (800ff3c <run_shortest+0x604>)
 800fe64:	881b      	ldrh	r3, [r3, #0]
 800fe66:	3b01      	subs	r3, #1
 800fe68:	4a35      	ldr	r2, [pc, #212]	; (800ff40 <run_shortest+0x608>)
 800fe6a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fe6e:	4b33      	ldr	r3, [pc, #204]	; (800ff3c <run_shortest+0x604>)
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	3b01      	subs	r3, #1
 800fe74:	3a01      	subs	r2, #1
 800fe76:	4932      	ldr	r1, [pc, #200]	; (800ff40 <run_shortest+0x608>)
 800fe78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fe7c:	4b2f      	ldr	r3, [pc, #188]	; (800ff3c <run_shortest+0x604>)
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	4a2f      	ldr	r2, [pc, #188]	; (800ff40 <run_shortest+0x608>)
 800fe84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d107      	bne.n	800fe9c <run_shortest+0x564>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800fe8c:	4b2b      	ldr	r3, [pc, #172]	; (800ff3c <run_shortest+0x604>)
 800fe8e:	881b      	ldrh	r3, [r3, #0]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	4a2b      	ldr	r2, [pc, #172]	; (800ff40 <run_shortest+0x608>)
 800fe94:	f04f 31ff 	mov.w	r1, #4294967295
 800fe98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800fe9c:	4b27      	ldr	r3, [pc, #156]	; (800ff3c <run_shortest+0x604>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	4619      	mov	r1, r3
 800fea2:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <run_shortest+0x608>)
 800fea4:	f06f 0209 	mvn.w	r2, #9
 800fea8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800feac:	4b23      	ldr	r3, [pc, #140]	; (800ff3c <run_shortest+0x604>)
 800feae:	881b      	ldrh	r3, [r3, #0]
 800feb0:	3301      	adds	r3, #1
 800feb2:	4a23      	ldr	r2, [pc, #140]	; (800ff40 <run_shortest+0x608>)
 800feb4:	f04f 31ff 	mov.w	r1, #4294967295
 800feb8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800febc:	4b1f      	ldr	r3, [pc, #124]	; (800ff3c <run_shortest+0x604>)
 800febe:	881b      	ldrh	r3, [r3, #0]
 800fec0:	461a      	mov	r2, r3
 800fec2:	4b1f      	ldr	r3, [pc, #124]	; (800ff40 <run_shortest+0x608>)
 800fec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fec8:	f113 0f03 	cmn.w	r3, #3
 800fecc:	d140      	bne.n	800ff50 <run_shortest+0x618>
 800fece:	4b1b      	ldr	r3, [pc, #108]	; (800ff3c <run_shortest+0x604>)
 800fed0:	881b      	ldrh	r3, [r3, #0]
 800fed2:	3301      	adds	r3, #1
 800fed4:	4a1a      	ldr	r2, [pc, #104]	; (800ff40 <run_shortest+0x608>)
 800fed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800feda:	f113 0f03 	cmn.w	r3, #3
 800fede:	d137      	bne.n	800ff50 <run_shortest+0x618>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800fee0:	4b16      	ldr	r3, [pc, #88]	; (800ff3c <run_shortest+0x604>)
 800fee2:	881b      	ldrh	r3, [r3, #0]
 800fee4:	3b01      	subs	r3, #1
 800fee6:	4a16      	ldr	r2, [pc, #88]	; (800ff40 <run_shortest+0x608>)
 800fee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800feec:	4b13      	ldr	r3, [pc, #76]	; (800ff3c <run_shortest+0x604>)
 800feee:	881b      	ldrh	r3, [r3, #0]
 800fef0:	3b01      	subs	r3, #1
 800fef2:	3a01      	subs	r2, #1
 800fef4:	4912      	ldr	r1, [pc, #72]	; (800ff40 <run_shortest+0x608>)
 800fef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800fefa:	4b10      	ldr	r3, [pc, #64]	; (800ff3c <run_shortest+0x604>)
 800fefc:	881b      	ldrh	r3, [r3, #0]
 800fefe:	3b01      	subs	r3, #1
 800ff00:	4a0f      	ldr	r2, [pc, #60]	; (800ff40 <run_shortest+0x608>)
 800ff02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d107      	bne.n	800ff1a <run_shortest+0x5e2>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800ff0a:	4b0c      	ldr	r3, [pc, #48]	; (800ff3c <run_shortest+0x604>)
 800ff0c:	881b      	ldrh	r3, [r3, #0]
 800ff0e:	3b01      	subs	r3, #1
 800ff10:	4a0b      	ldr	r2, [pc, #44]	; (800ff40 <run_shortest+0x608>)
 800ff12:	f04f 31ff 	mov.w	r1, #4294967295
 800ff16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800ff1a:	4b08      	ldr	r3, [pc, #32]	; (800ff3c <run_shortest+0x604>)
 800ff1c:	881b      	ldrh	r3, [r3, #0]
 800ff1e:	4619      	mov	r1, r3
 800ff20:	4b07      	ldr	r3, [pc, #28]	; (800ff40 <run_shortest+0x608>)
 800ff22:	f06f 020a 	mvn.w	r2, #10
 800ff26:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800ff2a:	4b04      	ldr	r3, [pc, #16]	; (800ff3c <run_shortest+0x604>)
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	3301      	adds	r3, #1
 800ff30:	4a03      	ldr	r2, [pc, #12]	; (800ff40 <run_shortest+0x608>)
 800ff32:	f04f 31ff 	mov.w	r1, #4294967295
 800ff36:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800ff3a:	e009      	b.n	800ff50 <run_shortest+0x618>
 800ff3c:	20000834 	.word	0x20000834
 800ff40:	2000083c 	.word	0x2000083c
						pass_count++;
 800ff44:	4b6f      	ldr	r3, [pc, #444]	; (8010104 <run_shortest+0x7cc>)
 800ff46:	881b      	ldrh	r3, [r3, #0]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	4b6d      	ldr	r3, [pc, #436]	; (8010104 <run_shortest+0x7cc>)
 800ff4e:	801a      	strh	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800ff50:	4b6c      	ldr	r3, [pc, #432]	; (8010104 <run_shortest+0x7cc>)
 800ff52:	881b      	ldrh	r3, [r3, #0]
 800ff54:	461a      	mov	r2, r3
 800ff56:	4b6c      	ldr	r3, [pc, #432]	; (8010108 <run_shortest+0x7d0>)
 800ff58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	dbf1      	blt.n	800ff44 <run_shortest+0x60c>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800ff60:	4b68      	ldr	r3, [pc, #416]	; (8010104 <run_shortest+0x7cc>)
 800ff62:	881b      	ldrh	r3, [r3, #0]
 800ff64:	3b01      	subs	r3, #1
 800ff66:	4a68      	ldr	r2, [pc, #416]	; (8010108 <run_shortest+0x7d0>)
 800ff68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff6c:	f113 0f02 	cmn.w	r3, #2
 800ff70:	d15b      	bne.n	801002a <run_shortest+0x6f2>
						if (pass[pass_count - 2] == -2) {
 800ff72:	4b64      	ldr	r3, [pc, #400]	; (8010104 <run_shortest+0x7cc>)
 800ff74:	881b      	ldrh	r3, [r3, #0]
 800ff76:	3b02      	subs	r3, #2
 800ff78:	4a63      	ldr	r2, [pc, #396]	; (8010108 <run_shortest+0x7d0>)
 800ff7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff7e:	f113 0f02 	cmn.w	r3, #2
 800ff82:	d12d      	bne.n	800ffe0 <run_shortest+0x6a8>
							pass[pass_count] = pass[pass_count] - 1;
 800ff84:	4b5f      	ldr	r3, [pc, #380]	; (8010104 <run_shortest+0x7cc>)
 800ff86:	881b      	ldrh	r3, [r3, #0]
 800ff88:	461a      	mov	r2, r3
 800ff8a:	4b5f      	ldr	r3, [pc, #380]	; (8010108 <run_shortest+0x7d0>)
 800ff8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff90:	4a5c      	ldr	r2, [pc, #368]	; (8010104 <run_shortest+0x7cc>)
 800ff92:	8812      	ldrh	r2, [r2, #0]
 800ff94:	4611      	mov	r1, r2
 800ff96:	3b01      	subs	r3, #1
 800ff98:	4a5b      	ldr	r2, [pc, #364]	; (8010108 <run_shortest+0x7d0>)
 800ff9a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800ff9e:	4b59      	ldr	r3, [pc, #356]	; (8010104 <run_shortest+0x7cc>)
 800ffa0:	881b      	ldrh	r3, [r3, #0]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	4b58      	ldr	r3, [pc, #352]	; (8010108 <run_shortest+0x7d0>)
 800ffa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d107      	bne.n	800ffbe <run_shortest+0x686>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800ffae:	4b55      	ldr	r3, [pc, #340]	; (8010104 <run_shortest+0x7cc>)
 800ffb0:	881b      	ldrh	r3, [r3, #0]
 800ffb2:	4619      	mov	r1, r3
 800ffb4:	4b54      	ldr	r3, [pc, #336]	; (8010108 <run_shortest+0x7d0>)
 800ffb6:	f04f 32ff 	mov.w	r2, #4294967295
 800ffba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800ffbe:	4b51      	ldr	r3, [pc, #324]	; (8010104 <run_shortest+0x7cc>)
 800ffc0:	881b      	ldrh	r3, [r3, #0]
 800ffc2:	3b01      	subs	r3, #1
 800ffc4:	4a50      	ldr	r2, [pc, #320]	; (8010108 <run_shortest+0x7d0>)
 800ffc6:	f06f 010d 	mvn.w	r1, #13
 800ffca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800ffce:	4b4d      	ldr	r3, [pc, #308]	; (8010104 <run_shortest+0x7cc>)
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	3b02      	subs	r3, #2
 800ffd4:	4a4c      	ldr	r2, [pc, #304]	; (8010108 <run_shortest+0x7d0>)
 800ffd6:	f04f 31ff 	mov.w	r1, #4294967295
 800ffda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800ffde:	e024      	b.n	801002a <run_shortest+0x6f2>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800ffe0:	4b48      	ldr	r3, [pc, #288]	; (8010104 <run_shortest+0x7cc>)
 800ffe2:	881b      	ldrh	r3, [r3, #0]
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	4b48      	ldr	r3, [pc, #288]	; (8010108 <run_shortest+0x7d0>)
 800ffe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffec:	4a45      	ldr	r2, [pc, #276]	; (8010104 <run_shortest+0x7cc>)
 800ffee:	8812      	ldrh	r2, [r2, #0]
 800fff0:	4611      	mov	r1, r2
 800fff2:	3b01      	subs	r3, #1
 800fff4:	4a44      	ldr	r2, [pc, #272]	; (8010108 <run_shortest+0x7d0>)
 800fff6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800fffa:	4b42      	ldr	r3, [pc, #264]	; (8010104 <run_shortest+0x7cc>)
 800fffc:	881b      	ldrh	r3, [r3, #0]
 800fffe:	461a      	mov	r2, r3
 8010000:	4b41      	ldr	r3, [pc, #260]	; (8010108 <run_shortest+0x7d0>)
 8010002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010006:	2b00      	cmp	r3, #0
 8010008:	d107      	bne.n	801001a <run_shortest+0x6e2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 801000a:	4b3e      	ldr	r3, [pc, #248]	; (8010104 <run_shortest+0x7cc>)
 801000c:	881b      	ldrh	r3, [r3, #0]
 801000e:	4619      	mov	r1, r3
 8010010:	4b3d      	ldr	r3, [pc, #244]	; (8010108 <run_shortest+0x7d0>)
 8010012:	f04f 32ff 	mov.w	r2, #4294967295
 8010016:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 801001a:	4b3a      	ldr	r3, [pc, #232]	; (8010104 <run_shortest+0x7cc>)
 801001c:	881b      	ldrh	r3, [r3, #0]
 801001e:	3b01      	subs	r3, #1
 8010020:	4a39      	ldr	r2, [pc, #228]	; (8010108 <run_shortest+0x7d0>)
 8010022:	f06f 010b 	mvn.w	r1, #11
 8010026:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 801002a:	4b36      	ldr	r3, [pc, #216]	; (8010104 <run_shortest+0x7cc>)
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	3b01      	subs	r3, #1
 8010030:	4a35      	ldr	r2, [pc, #212]	; (8010108 <run_shortest+0x7d0>)
 8010032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010036:	f113 0f03 	cmn.w	r3, #3
 801003a:	d15b      	bne.n	80100f4 <run_shortest+0x7bc>
						if (pass[pass_count - 2] == -3) {
 801003c:	4b31      	ldr	r3, [pc, #196]	; (8010104 <run_shortest+0x7cc>)
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	3b02      	subs	r3, #2
 8010042:	4a31      	ldr	r2, [pc, #196]	; (8010108 <run_shortest+0x7d0>)
 8010044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010048:	f113 0f03 	cmn.w	r3, #3
 801004c:	d12d      	bne.n	80100aa <run_shortest+0x772>
							pass[pass_count] = pass[pass_count] - 1;
 801004e:	4b2d      	ldr	r3, [pc, #180]	; (8010104 <run_shortest+0x7cc>)
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	461a      	mov	r2, r3
 8010054:	4b2c      	ldr	r3, [pc, #176]	; (8010108 <run_shortest+0x7d0>)
 8010056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801005a:	4a2a      	ldr	r2, [pc, #168]	; (8010104 <run_shortest+0x7cc>)
 801005c:	8812      	ldrh	r2, [r2, #0]
 801005e:	4611      	mov	r1, r2
 8010060:	3b01      	subs	r3, #1
 8010062:	4a29      	ldr	r2, [pc, #164]	; (8010108 <run_shortest+0x7d0>)
 8010064:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 8010068:	4b26      	ldr	r3, [pc, #152]	; (8010104 <run_shortest+0x7cc>)
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	461a      	mov	r2, r3
 801006e:	4b26      	ldr	r3, [pc, #152]	; (8010108 <run_shortest+0x7d0>)
 8010070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d107      	bne.n	8010088 <run_shortest+0x750>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 8010078:	4b22      	ldr	r3, [pc, #136]	; (8010104 <run_shortest+0x7cc>)
 801007a:	881b      	ldrh	r3, [r3, #0]
 801007c:	4619      	mov	r1, r3
 801007e:	4b22      	ldr	r3, [pc, #136]	; (8010108 <run_shortest+0x7d0>)
 8010080:	f04f 32ff 	mov.w	r2, #4294967295
 8010084:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 8010088:	4b1e      	ldr	r3, [pc, #120]	; (8010104 <run_shortest+0x7cc>)
 801008a:	881b      	ldrh	r3, [r3, #0]
 801008c:	3b01      	subs	r3, #1
 801008e:	4a1e      	ldr	r2, [pc, #120]	; (8010108 <run_shortest+0x7d0>)
 8010090:	f06f 010e 	mvn.w	r1, #14
 8010094:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 8010098:	4b1a      	ldr	r3, [pc, #104]	; (8010104 <run_shortest+0x7cc>)
 801009a:	881b      	ldrh	r3, [r3, #0]
 801009c:	3b02      	subs	r3, #2
 801009e:	4a1a      	ldr	r2, [pc, #104]	; (8010108 <run_shortest+0x7d0>)
 80100a0:	f04f 31ff 	mov.w	r1, #4294967295
 80100a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80100a8:	e024      	b.n	80100f4 <run_shortest+0x7bc>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 80100aa:	4b16      	ldr	r3, [pc, #88]	; (8010104 <run_shortest+0x7cc>)
 80100ac:	881b      	ldrh	r3, [r3, #0]
 80100ae:	461a      	mov	r2, r3
 80100b0:	4b15      	ldr	r3, [pc, #84]	; (8010108 <run_shortest+0x7d0>)
 80100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b6:	4a13      	ldr	r2, [pc, #76]	; (8010104 <run_shortest+0x7cc>)
 80100b8:	8812      	ldrh	r2, [r2, #0]
 80100ba:	4611      	mov	r1, r2
 80100bc:	3b01      	subs	r3, #1
 80100be:	4a12      	ldr	r2, [pc, #72]	; (8010108 <run_shortest+0x7d0>)
 80100c0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 80100c4:	4b0f      	ldr	r3, [pc, #60]	; (8010104 <run_shortest+0x7cc>)
 80100c6:	881b      	ldrh	r3, [r3, #0]
 80100c8:	461a      	mov	r2, r3
 80100ca:	4b0f      	ldr	r3, [pc, #60]	; (8010108 <run_shortest+0x7d0>)
 80100cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d107      	bne.n	80100e4 <run_shortest+0x7ac>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 80100d4:	4b0b      	ldr	r3, [pc, #44]	; (8010104 <run_shortest+0x7cc>)
 80100d6:	881b      	ldrh	r3, [r3, #0]
 80100d8:	4619      	mov	r1, r3
 80100da:	4b0b      	ldr	r3, [pc, #44]	; (8010108 <run_shortest+0x7d0>)
 80100dc:	f04f 32ff 	mov.w	r2, #4294967295
 80100e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 80100e4:	4b07      	ldr	r3, [pc, #28]	; (8010104 <run_shortest+0x7cc>)
 80100e6:	881b      	ldrh	r3, [r3, #0]
 80100e8:	3b01      	subs	r3, #1
 80100ea:	4a07      	ldr	r2, [pc, #28]	; (8010108 <run_shortest+0x7d0>)
 80100ec:	f06f 010c 	mvn.w	r1, #12
 80100f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 80100f4:	4b03      	ldr	r3, [pc, #12]	; (8010104 <run_shortest+0x7cc>)
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	3301      	adds	r3, #1
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	4b01      	ldr	r3, [pc, #4]	; (8010104 <run_shortest+0x7cc>)
 80100fe:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 8010100:	e60a      	b.n	800fd18 <run_shortest+0x3e0>
 8010102:	bf00      	nop
 8010104:	20000834 	.word	0x20000834
 8010108:	2000083c 	.word	0x2000083c
				break;
 801010c:	bf00      	nop
		}

		pass_count = 1;
 801010e:	4ba3      	ldr	r3, [pc, #652]	; (801039c <run_shortest+0xa64>)
 8010110:	2201      	movs	r2, #1
 8010112:	801a      	strh	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 8010114:	4ba1      	ldr	r3, [pc, #644]	; (801039c <run_shortest+0xa64>)
 8010116:	881b      	ldrh	r3, [r3, #0]
 8010118:	461a      	mov	r2, r3
 801011a:	4ba1      	ldr	r3, [pc, #644]	; (80103a0 <run_shortest+0xa68>)
 801011c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010120:	2b00      	cmp	r3, #0
 8010122:	f000 813f 	beq.w	80103a4 <run_shortest+0xa6c>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 8010126:	4b9d      	ldr	r3, [pc, #628]	; (801039c <run_shortest+0xa64>)
 8010128:	881b      	ldrh	r3, [r3, #0]
 801012a:	461a      	mov	r2, r3
 801012c:	4b9c      	ldr	r3, [pc, #624]	; (80103a0 <run_shortest+0xa68>)
 801012e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010132:	f113 0f08 	cmn.w	r3, #8
 8010136:	d01b      	beq.n	8010170 <run_shortest+0x838>
 8010138:	4b98      	ldr	r3, [pc, #608]	; (801039c <run_shortest+0xa64>)
 801013a:	881b      	ldrh	r3, [r3, #0]
 801013c:	461a      	mov	r2, r3
 801013e:	4b98      	ldr	r3, [pc, #608]	; (80103a0 <run_shortest+0xa68>)
 8010140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010144:	f113 0f09 	cmn.w	r3, #9
 8010148:	d012      	beq.n	8010170 <run_shortest+0x838>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 801014a:	4b94      	ldr	r3, [pc, #592]	; (801039c <run_shortest+0xa64>)
 801014c:	881b      	ldrh	r3, [r3, #0]
 801014e:	461a      	mov	r2, r3
 8010150:	4b93      	ldr	r3, [pc, #588]	; (80103a0 <run_shortest+0xa68>)
 8010152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010156:	f113 0f0a 	cmn.w	r3, #10
 801015a:	d009      	beq.n	8010170 <run_shortest+0x838>
 801015c:	4b8f      	ldr	r3, [pc, #572]	; (801039c <run_shortest+0xa64>)
 801015e:	881b      	ldrh	r3, [r3, #0]
 8010160:	461a      	mov	r2, r3
 8010162:	4b8f      	ldr	r3, [pc, #572]	; (80103a0 <run_shortest+0xa68>)
 8010164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010168:	f113 0f0b 	cmn.w	r3, #11
 801016c:	f040 810f 	bne.w	801038e <run_shortest+0xa56>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 8010170:	4b8a      	ldr	r3, [pc, #552]	; (801039c <run_shortest+0xa64>)
 8010172:	881b      	ldrh	r3, [r3, #0]
 8010174:	461a      	mov	r2, r3
 8010176:	4b8a      	ldr	r3, [pc, #552]	; (80103a0 <run_shortest+0xa68>)
 8010178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801017c:	f113 0f08 	cmn.w	r3, #8
 8010180:	d008      	beq.n	8010194 <run_shortest+0x85c>
 8010182:	4b86      	ldr	r3, [pc, #536]	; (801039c <run_shortest+0xa64>)
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	461a      	mov	r2, r3
 8010188:	4b85      	ldr	r3, [pc, #532]	; (80103a0 <run_shortest+0xa68>)
 801018a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801018e:	f113 0f0a 	cmn.w	r3, #10
 8010192:	d102      	bne.n	801019a <run_shortest+0x862>
					slant_direction = -3;
 8010194:	f06f 0302 	mvn.w	r3, #2
 8010198:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 801019a:	4b80      	ldr	r3, [pc, #512]	; (801039c <run_shortest+0xa64>)
 801019c:	881b      	ldrh	r3, [r3, #0]
 801019e:	461a      	mov	r2, r3
 80101a0:	4b7f      	ldr	r3, [pc, #508]	; (80103a0 <run_shortest+0xa68>)
 80101a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101a6:	f113 0f09 	cmn.w	r3, #9
 80101aa:	d008      	beq.n	80101be <run_shortest+0x886>
 80101ac:	4b7b      	ldr	r3, [pc, #492]	; (801039c <run_shortest+0xa64>)
 80101ae:	881b      	ldrh	r3, [r3, #0]
 80101b0:	461a      	mov	r2, r3
 80101b2:	4b7b      	ldr	r3, [pc, #492]	; (80103a0 <run_shortest+0xa68>)
 80101b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101b8:	f113 0f0b 	cmn.w	r3, #11
 80101bc:	d102      	bne.n	80101c4 <run_shortest+0x88c>
					slant_direction = -2;
 80101be:	f06f 0301 	mvn.w	r3, #1
 80101c2:	643b      	str	r3, [r7, #64]	; 0x40
				}
				pass_count++;
 80101c4:	4b75      	ldr	r3, [pc, #468]	; (801039c <run_shortest+0xa64>)
 80101c6:	881b      	ldrh	r3, [r3, #0]
 80101c8:	3301      	adds	r3, #1
 80101ca:	b29a      	uxth	r2, r3
 80101cc:	4b73      	ldr	r3, [pc, #460]	; (801039c <run_shortest+0xa64>)
 80101ce:	801a      	strh	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80101d0:	4b72      	ldr	r3, [pc, #456]	; (801039c <run_shortest+0xa64>)
 80101d2:	881b      	ldrh	r3, [r3, #0]
 80101d4:	461a      	mov	r2, r3
 80101d6:	4b72      	ldr	r3, [pc, #456]	; (80103a0 <run_shortest+0xa68>)
 80101d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101e0:	d105      	bne.n	80101ee <run_shortest+0x8b6>
					pass_count++;
 80101e2:	4b6e      	ldr	r3, [pc, #440]	; (801039c <run_shortest+0xa64>)
 80101e4:	881b      	ldrh	r3, [r3, #0]
 80101e6:	3301      	adds	r3, #1
 80101e8:	b29a      	uxth	r2, r3
 80101ea:	4b6c      	ldr	r3, [pc, #432]	; (801039c <run_shortest+0xa64>)
 80101ec:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 80101ee:	4b6b      	ldr	r3, [pc, #428]	; (801039c <run_shortest+0xa64>)
 80101f0:	881b      	ldrh	r3, [r3, #0]
 80101f2:	461a      	mov	r2, r3
 80101f4:	4b6a      	ldr	r3, [pc, #424]	; (80103a0 <run_shortest+0xa68>)
 80101f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fe:	d105      	bne.n	801020c <run_shortest+0x8d4>
					pass_count++;
 8010200:	4b66      	ldr	r3, [pc, #408]	; (801039c <run_shortest+0xa64>)
 8010202:	881b      	ldrh	r3, [r3, #0]
 8010204:	3301      	adds	r3, #1
 8010206:	b29a      	uxth	r2, r3
 8010208:	4b64      	ldr	r3, [pc, #400]	; (801039c <run_shortest+0xa64>)
 801020a:	801a      	strh	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 801020c:	4b63      	ldr	r3, [pc, #396]	; (801039c <run_shortest+0xa64>)
 801020e:	881b      	ldrh	r3, [r3, #0]
 8010210:	461a      	mov	r2, r3
 8010212:	4b63      	ldr	r3, [pc, #396]	; (80103a0 <run_shortest+0xa68>)
 8010214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010218:	f113 0f03 	cmn.w	r3, #3
 801021c:	f2c0 80ad 	blt.w	801037a <run_shortest+0xa42>
					slant_count = pass_count;
 8010220:	4b5e      	ldr	r3, [pc, #376]	; (801039c <run_shortest+0xa64>)
 8010222:	881b      	ldrh	r3, [r3, #0]
 8010224:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					pass[slant_count] = 51;
 8010228:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801022c:	4a5c      	ldr	r2, [pc, #368]	; (80103a0 <run_shortest+0xa68>)
 801022e:	2133      	movs	r1, #51	; 0x33
 8010230:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 8010234:	4b59      	ldr	r3, [pc, #356]	; (801039c <run_shortest+0xa64>)
 8010236:	881b      	ldrh	r3, [r3, #0]
 8010238:	3301      	adds	r3, #1
 801023a:	b29a      	uxth	r2, r3
 801023c:	4b57      	ldr	r3, [pc, #348]	; (801039c <run_shortest+0xa64>)
 801023e:	801a      	strh	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 8010240:	e09b      	b.n	801037a <run_shortest+0xa42>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 8010242:	4b56      	ldr	r3, [pc, #344]	; (801039c <run_shortest+0xa64>)
 8010244:	881b      	ldrh	r3, [r3, #0]
 8010246:	461a      	mov	r2, r3
 8010248:	4b55      	ldr	r3, [pc, #340]	; (80103a0 <run_shortest+0xa68>)
 801024a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801024e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010252:	d105      	bne.n	8010260 <run_shortest+0x928>
						pass_count++;
 8010254:	4b51      	ldr	r3, [pc, #324]	; (801039c <run_shortest+0xa64>)
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	3301      	adds	r3, #1
 801025a:	b29a      	uxth	r2, r3
 801025c:	4b4f      	ldr	r3, [pc, #316]	; (801039c <run_shortest+0xa64>)
 801025e:	801a      	strh	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 8010260:	4b4e      	ldr	r3, [pc, #312]	; (801039c <run_shortest+0xa64>)
 8010262:	881b      	ldrh	r3, [r3, #0]
 8010264:	461a      	mov	r2, r3
 8010266:	4b4e      	ldr	r3, [pc, #312]	; (80103a0 <run_shortest+0xa68>)
 8010268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801026c:	f113 0f0c 	cmn.w	r3, #12
 8010270:	f000 808d 	beq.w	801038e <run_shortest+0xa56>
 8010274:	4b49      	ldr	r3, [pc, #292]	; (801039c <run_shortest+0xa64>)
 8010276:	881b      	ldrh	r3, [r3, #0]
 8010278:	461a      	mov	r2, r3
 801027a:	4b49      	ldr	r3, [pc, #292]	; (80103a0 <run_shortest+0xa68>)
 801027c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010280:	f113 0f0d 	cmn.w	r3, #13
 8010284:	f000 8083 	beq.w	801038e <run_shortest+0xa56>
							|| pass[pass_count] == -14
 8010288:	4b44      	ldr	r3, [pc, #272]	; (801039c <run_shortest+0xa64>)
 801028a:	881b      	ldrh	r3, [r3, #0]
 801028c:	461a      	mov	r2, r3
 801028e:	4b44      	ldr	r3, [pc, #272]	; (80103a0 <run_shortest+0xa68>)
 8010290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010294:	f113 0f0e 	cmn.w	r3, #14
 8010298:	d079      	beq.n	801038e <run_shortest+0xa56>
							|| pass[pass_count] == -15) {
 801029a:	4b40      	ldr	r3, [pc, #256]	; (801039c <run_shortest+0xa64>)
 801029c:	881b      	ldrh	r3, [r3, #0]
 801029e:	461a      	mov	r2, r3
 80102a0:	4b3f      	ldr	r3, [pc, #252]	; (80103a0 <run_shortest+0xa68>)
 80102a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102a6:	f113 0f0f 	cmn.w	r3, #15
 80102aa:	d070      	beq.n	801038e <run_shortest+0xa56>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 80102ac:	4b3b      	ldr	r3, [pc, #236]	; (801039c <run_shortest+0xa64>)
 80102ae:	881b      	ldrh	r3, [r3, #0]
 80102b0:	461a      	mov	r2, r3
 80102b2:	4b3b      	ldr	r3, [pc, #236]	; (80103a0 <run_shortest+0xa68>)
 80102b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d127      	bne.n	801030e <run_shortest+0x9d6>
						pass[slant_count] = pass[slant_count] - 1;
 80102be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102c2:	4a37      	ldr	r2, [pc, #220]	; (80103a0 <run_shortest+0xa68>)
 80102c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80102c8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102cc:	3a01      	subs	r2, #1
 80102ce:	4934      	ldr	r1, [pc, #208]	; (80103a0 <run_shortest+0xa68>)
 80102d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 80102d4:	4b31      	ldr	r3, [pc, #196]	; (801039c <run_shortest+0xa64>)
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
						if (slant_direction == -2) {
 80102dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102de:	f113 0f02 	cmn.w	r3, #2
 80102e2:	d107      	bne.n	80102f4 <run_shortest+0x9bc>
							pass[pass_count] = -16;
 80102e4:	4b2d      	ldr	r3, [pc, #180]	; (801039c <run_shortest+0xa64>)
 80102e6:	881b      	ldrh	r3, [r3, #0]
 80102e8:	4619      	mov	r1, r3
 80102ea:	4b2d      	ldr	r3, [pc, #180]	; (80103a0 <run_shortest+0xa68>)
 80102ec:	f06f 020f 	mvn.w	r2, #15
 80102f0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 80102f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80102f6:	f113 0f03 	cmn.w	r3, #3
 80102fa:	d138      	bne.n	801036e <run_shortest+0xa36>
							pass[pass_count] = -17;
 80102fc:	4b27      	ldr	r3, [pc, #156]	; (801039c <run_shortest+0xa64>)
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	4619      	mov	r1, r3
 8010302:	4b27      	ldr	r3, [pc, #156]	; (80103a0 <run_shortest+0xa68>)
 8010304:	f06f 0210 	mvn.w	r2, #16
 8010308:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801030c:	e02f      	b.n	801036e <run_shortest+0xa36>
						}

					} else {
						if (pass[slant_count] >= 50) {
 801030e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010312:	4a23      	ldr	r2, [pc, #140]	; (80103a0 <run_shortest+0xa68>)
 8010314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010318:	2b31      	cmp	r3, #49	; 0x31
 801031a:	dd08      	ble.n	801032e <run_shortest+0x9f6>
							pass[pass_count] = -1;
 801031c:	4b1f      	ldr	r3, [pc, #124]	; (801039c <run_shortest+0xa64>)
 801031e:	881b      	ldrh	r3, [r3, #0]
 8010320:	4619      	mov	r1, r3
 8010322:	4b1f      	ldr	r3, [pc, #124]	; (80103a0 <run_shortest+0xa68>)
 8010324:	f04f 32ff 	mov.w	r2, #4294967295
 8010328:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801032c:	e009      	b.n	8010342 <run_shortest+0xa0a>
						} else {
							slant_count = pass_count;
 801032e:	4b1b      	ldr	r3, [pc, #108]	; (801039c <run_shortest+0xa64>)
 8010330:	881b      	ldrh	r3, [r3, #0]
 8010332:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							pass[slant_count] = 50;
 8010336:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 801033a:	4a19      	ldr	r2, [pc, #100]	; (80103a0 <run_shortest+0xa68>)
 801033c:	2132      	movs	r1, #50	; 0x32
 801033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 8010342:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010346:	4a16      	ldr	r2, [pc, #88]	; (80103a0 <run_shortest+0xa68>)
 8010348:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801034c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010350:	3201      	adds	r2, #1
 8010352:	4913      	ldr	r1, [pc, #76]	; (80103a0 <run_shortest+0xa68>)
 8010354:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 8010358:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801035a:	f113 0f02 	cmn.w	r3, #2
 801035e:	d103      	bne.n	8010368 <run_shortest+0xa30>
							slant_direction = -3;
 8010360:	f06f 0302 	mvn.w	r3, #2
 8010364:	643b      	str	r3, [r7, #64]	; 0x40
 8010366:	e002      	b.n	801036e <run_shortest+0xa36>
						} else {
							slant_direction = -2;
 8010368:	f06f 0301 	mvn.w	r3, #1
 801036c:	643b      	str	r3, [r7, #64]	; 0x40
						}

					}

					pass_count++;
 801036e:	4b0b      	ldr	r3, [pc, #44]	; (801039c <run_shortest+0xa64>)
 8010370:	881b      	ldrh	r3, [r3, #0]
 8010372:	3301      	adds	r3, #1
 8010374:	b29a      	uxth	r2, r3
 8010376:	4b09      	ldr	r3, [pc, #36]	; (801039c <run_shortest+0xa64>)
 8010378:	801a      	strh	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 801037a:	4b08      	ldr	r3, [pc, #32]	; (801039c <run_shortest+0xa64>)
 801037c:	881b      	ldrh	r3, [r3, #0]
 801037e:	461a      	mov	r2, r3
 8010380:	4b07      	ldr	r3, [pc, #28]	; (80103a0 <run_shortest+0xa68>)
 8010382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010386:	f113 0f03 	cmn.w	r3, #3
 801038a:	f6bf af5a 	bge.w	8010242 <run_shortest+0x90a>

			}

			//		if(){}

			pass_count++;
 801038e:	4b03      	ldr	r3, [pc, #12]	; (801039c <run_shortest+0xa64>)
 8010390:	881b      	ldrh	r3, [r3, #0]
 8010392:	3301      	adds	r3, #1
 8010394:	b29a      	uxth	r2, r3
 8010396:	4b01      	ldr	r3, [pc, #4]	; (801039c <run_shortest+0xa64>)
 8010398:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 801039a:	e6bb      	b.n	8010114 <run_shortest+0x7dc>
 801039c:	20000834 	.word	0x20000834
 80103a0:	2000083c 	.word	0x2000083c
				break;
 80103a4:	bf00      	nop
		}
		pass_count=0;
 80103a6:	4bb2      	ldr	r3, [pc, #712]	; (8010670 <run_shortest+0xd38>)
 80103a8:	2200      	movs	r2, #0
 80103aa:	801a      	strh	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 80103ac:	4bb0      	ldr	r3, [pc, #704]	; (8010670 <run_shortest+0xd38>)
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	461a      	mov	r2, r3
 80103b2:	4bb0      	ldr	r3, [pc, #704]	; (8010674 <run_shortest+0xd3c>)
 80103b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b8:	2b32      	cmp	r3, #50	; 0x32
 80103ba:	d107      	bne.n	80103cc <run_shortest+0xa94>
				pass[pass_count] =-1;
 80103bc:	4bac      	ldr	r3, [pc, #688]	; (8010670 <run_shortest+0xd38>)
 80103be:	881b      	ldrh	r3, [r3, #0]
 80103c0:	4619      	mov	r1, r3
 80103c2:	4bac      	ldr	r3, [pc, #688]	; (8010674 <run_shortest+0xd3c>)
 80103c4:	f04f 32ff 	mov.w	r2, #4294967295
 80103c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 80103cc:	4ba8      	ldr	r3, [pc, #672]	; (8010670 <run_shortest+0xd38>)
 80103ce:	881b      	ldrh	r3, [r3, #0]
 80103d0:	461a      	mov	r2, r3
 80103d2:	4ba8      	ldr	r3, [pc, #672]	; (8010674 <run_shortest+0xd3c>)
 80103d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d006      	beq.n	80103ea <run_shortest+0xab2>
				break;
			}
			pass_count++;
 80103dc:	4ba4      	ldr	r3, [pc, #656]	; (8010670 <run_shortest+0xd38>)
 80103de:	881b      	ldrh	r3, [r3, #0]
 80103e0:	3301      	adds	r3, #1
 80103e2:	b29a      	uxth	r2, r3
 80103e4:	4ba2      	ldr	r3, [pc, #648]	; (8010670 <run_shortest+0xd38>)
 80103e6:	801a      	strh	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 80103e8:	e7e0      	b.n	80103ac <run_shortest+0xa74>
				break;
 80103ea:	bf00      	nop
		}

	}
}
	int j = 0;
 80103ec:	2300      	movs	r3, #0
 80103ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 80103f0:	e00b      	b.n	801040a <run_shortest+0xad2>
		printf("pass_count %d pass %d\n", j, pass[j]);
 80103f2:	4aa0      	ldr	r2, [pc, #640]	; (8010674 <run_shortest+0xd3c>)
 80103f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103fa:	461a      	mov	r2, r3
 80103fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103fe:	489e      	ldr	r0, [pc, #632]	; (8010678 <run_shortest+0xd40>)
 8010400:	f011 f888 	bl	8021514 <iprintf>
		j++;
 8010404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010406:	3301      	adds	r3, #1
 8010408:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (pass[j] != 0) {
 801040a:	4a9a      	ldr	r2, [pc, #616]	; (8010674 <run_shortest+0xd3c>)
 801040c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1ed      	bne.n	80103f2 <run_shortest+0xaba>
	}
	int pass_count2;
	pass_count2=0;
 8010416:	2300      	movs	r3, #0
 8010418:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 801041a:	e002      	b.n	8010422 <run_shortest+0xaea>
		pass_count2++;
 801041c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041e:	3301      	adds	r3, #1
 8010420:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 8010422:	4a94      	ldr	r2, [pc, #592]	; (8010674 <run_shortest+0xd3c>)
 8010424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801042a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801042e:	d0f5      	beq.n	801041c <run_shortest+0xae4>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8010430:	4a90      	ldr	r2, [pc, #576]	; (8010674 <run_shortest+0xd3c>)
 8010432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010438:	934e      	str	r3, [sp, #312]	; 0x138
 801043a:	4668      	mov	r0, sp
 801043c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010440:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010444:	4619      	mov	r1, r3
 8010446:	f010 fbe5 	bl	8020c14 <memcpy>
 801044a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801044e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010450:	f008 f828 	bl	80184a4 <get_center_velocity>
 8010454:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	printf("%d,%f\n",pass_count2, end_velocity);
 8010458:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801045a:	f7f0 f89d 	bl	8000598 <__aeabi_f2d>
 801045e:	4602      	mov	r2, r0
 8010460:	460b      	mov	r3, r1
 8010462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010464:	4885      	ldr	r0, [pc, #532]	; (801067c <run_shortest+0xd44>)
 8010466:	f011 f855 	bl	8021514 <iprintf>

	wait_ms_NoReset(500);
 801046a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801046e:	f7f8 fb6f 	bl	8008b50 <wait_ms_NoReset>
	pl_DriveMotor_standby(ON);
 8010472:	2001      	movs	r0, #1
 8010474:	f7f8 f83c 	bl	80084f0 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8010478:	2003      	movs	r0, #3
 801047a:	f7f8 f86b 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801047e:	2003      	movs	r0, #3
 8010480:	f7f8 f840 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8010484:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8010488:	f7f8 fb62 	bl	8008b50 <wait_ms_NoReset>
	no_safty = 1;
 801048c:	4b7c      	ldr	r3, [pc, #496]	; (8010680 <run_shortest+0xd48>)
 801048e:	2201      	movs	r2, #1
 8010490:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 8010492:	4b7b      	ldr	r3, [pc, #492]	; (8010680 <run_shortest+0xd48>)
 8010494:	2200      	movs	r2, #0
 8010496:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 8010498:	f7f4 feaa 	bl	80051f0 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 801049c:	7abb      	ldrb	r3, [r7, #10]
 801049e:	2b01      	cmp	r3, #1
 80104a0:	d12d      	bne.n	80104fe <run_shortest+0xbc6>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7f0 f878 	bl	8000598 <__aeabi_f2d>
 80104a8:	a36f      	add	r3, pc, #444	; (adr r3, 8010668 <run_shortest+0xd30>)
 80104aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ae:	f7f0 f8cb 	bl	8000648 <__aeabi_dmul>
 80104b2:	4602      	mov	r2, r0
 80104b4:	460b      	mov	r3, r1
 80104b6:	4614      	mov	r4, r2
 80104b8:	461d      	mov	r5, r3
 80104ba:	4b72      	ldr	r3, [pc, #456]	; (8010684 <run_shortest+0xd4c>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	4618      	mov	r0, r3
 80104c0:	f7f0 f86a 	bl	8000598 <__aeabi_f2d>
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	4620      	mov	r0, r4
 80104ca:	4629      	mov	r1, r5
 80104cc:	f7f0 f9e6 	bl	800089c <__aeabi_ddiv>
 80104d0:	4602      	mov	r2, r0
 80104d2:	460b      	mov	r3, r1
 80104d4:	4610      	mov	r0, r2
 80104d6:	4619      	mov	r1, r3
 80104d8:	f7f0 fb8e 	bl	8000bf8 <__aeabi_d2f>
 80104dc:	4603      	mov	r3, r0
 80104de:	ee00 3a10 	vmov	s0, r3
 80104e2:	f7f8 f8a3 	bl	800862c <pl_FunMotor_duty>
		pl_FunMotor_start();
 80104e6:	f7f8 f88d 	bl	8008604 <pl_FunMotor_start>
		wait_ms_NoReset(600);
 80104ea:	f44f 7016 	mov.w	r0, #600	; 0x258
 80104ee:	f7f8 fb2f 	bl	8008b50 <wait_ms_NoReset>
		reset_gyro();
 80104f2:	f7f1 fb61 	bl	8001bb8 <reset_gyro>
		reset_speed();
 80104f6:	f7f0 fd95 	bl	8001024 <reset_speed>
		clear_Ierror();
 80104fa:	f7f4 fe79 	bl	80051f0 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						wait_ms_NoReset(2000);	//候補1

	}
	maze_mode = 1;
 80104fe:	4b62      	ldr	r3, [pc, #392]	; (8010688 <run_shortest+0xd50>)
 8010500:	2201      	movs	r2, #1
 8010502:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 8010504:	4b61      	ldr	r3, [pc, #388]	; (801068c <run_shortest+0xd54>)
 8010506:	2201      	movs	r2, #1
 8010508:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 801050a:	4b61      	ldr	r3, [pc, #388]	; (8010690 <run_shortest+0xd58>)
 801050c:	2212      	movs	r2, #18
 801050e:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	pass_count = 0;
 8010510:	4b57      	ldr	r3, [pc, #348]	; (8010670 <run_shortest+0xd38>)
 8010512:	2200      	movs	r2, #0
 8010514:	801a      	strh	r2, [r3, #0]


	mode.WallControlMode=1;
 8010516:	2301      	movs	r3, #1
 8010518:	773b      	strb	r3, [r7, #28]
	mode.WallControlStatus=0;
 801051a:	2300      	movs	r3, #0
 801051c:	777b      	strb	r3, [r7, #29]
	mode.calMazeMode=0;
 801051e:	2300      	movs	r3, #0
 8010520:	77bb      	strb	r3, [r7, #30]
	mode.WallCutMode=0;
 8010522:	2300      	movs	r3, #0
 8010524:	77fb      	strb	r3, [r7, #31]
	pass_count2=0;
 8010526:	2300      	movs	r3, #0
 8010528:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 801052a:	e002      	b.n	8010532 <run_shortest+0xbfa>
		pass_count2++;
 801052c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052e:	3301      	adds	r3, #1
 8010530:	62bb      	str	r3, [r7, #40]	; 0x28
	while(pass[pass_count2] == -1){
 8010532:	4a50      	ldr	r2, [pc, #320]	; (8010674 <run_shortest+0xd3c>)
 8010534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801053a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801053e:	d0f5      	beq.n	801052c <run_shortest+0xbf4>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 8010540:	4a4c      	ldr	r2, [pc, #304]	; (8010674 <run_shortest+0xd3c>)
 8010542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010548:	934e      	str	r3, [sp, #312]	; 0x138
 801054a:	4668      	mov	r0, sp
 801054c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010550:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010554:	4619      	mov	r1, r3
 8010556:	f010 fb5d 	bl	8020c14 <memcpy>
 801055a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801055e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010560:	f007 ffa0 	bl	80184a4 <get_center_velocity>
 8010564:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 8010568:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 801056c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8010570:	ee17 0a90 	vmov	r0, s15
 8010574:	f7f0 f810 	bl	8000598 <__aeabi_f2d>
 8010578:	f04f 0200 	mov.w	r2, #0
 801057c:	4b45      	ldr	r3, [pc, #276]	; (8010694 <run_shortest+0xd5c>)
 801057e:	f7f0 f98d 	bl	800089c <__aeabi_ddiv>
 8010582:	4602      	mov	r2, r0
 8010584:	460b      	mov	r3, r1
 8010586:	4610      	mov	r0, r2
 8010588:	4619      	mov	r1, r3
 801058a:	f04f 0200 	mov.w	r2, #0
 801058e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010592:	f7f0 f983 	bl	800089c <__aeabi_ddiv>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	4610      	mov	r0, r2
 801059c:	4619      	mov	r1, r3
 801059e:	f7f0 fb2b 	bl	8000bf8 <__aeabi_d2f>
 80105a2:	4603      	mov	r3, r0
 80105a4:	69f8      	ldr	r0, [r7, #28]
 80105a6:	ee02 3a10 	vmov	s4, r3
 80105aa:	edd7 1a0e 	vldr	s3, [r7, #56]	; 0x38
 80105ae:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 80105b2:	eddf 0a39 	vldr	s1, [pc, #228]	; 8010698 <run_shortest+0xd60>
 80105b6:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 80105ba:	f7f3 fb09 	bl	8003bd0 <straight_table2>


	while (pass_count <= 500) {
 80105be:	e2df      	b.n	8010b80 <run_shortest+0x1248>
		pass_count2=pass_count+1;
 80105c0:	4b2b      	ldr	r3, [pc, #172]	; (8010670 <run_shortest+0xd38>)
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	3301      	adds	r3, #1
 80105c6:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 80105c8:	e002      	b.n	80105d0 <run_shortest+0xc98>
			pass_count2++;
 80105ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105cc:	3301      	adds	r3, #1
 80105ce:	62bb      	str	r3, [r7, #40]	; 0x28
		while(pass[pass_count2] == -1){
 80105d0:	4a28      	ldr	r2, [pc, #160]	; (8010674 <run_shortest+0xd3c>)
 80105d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105dc:	d0f5      	beq.n	80105ca <run_shortest+0xc92>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 80105de:	4a25      	ldr	r2, [pc, #148]	; (8010674 <run_shortest+0xd3c>)
 80105e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80105e6:	934e      	str	r3, [sp, #312]	; 0x138
 80105e8:	4668      	mov	r0, sp
 80105ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105ee:	f44f 729c 	mov.w	r2, #312	; 0x138
 80105f2:	4619      	mov	r1, r3
 80105f4:	f010 fb0e 	bl	8020c14 <memcpy>
 80105f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80105fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80105fe:	f007 ff51 	bl	80184a4 <get_center_velocity>
 8010602:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38

		if (pass[pass_count] == -1) {
 8010606:	4b1a      	ldr	r3, [pc, #104]	; (8010670 <run_shortest+0xd38>)
 8010608:	881b      	ldrh	r3, [r3, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	4b19      	ldr	r3, [pc, #100]	; (8010674 <run_shortest+0xd3c>)
 801060e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010616:	d106      	bne.n	8010626 <run_shortest+0xcee>
			pass_count++;
 8010618:	4b15      	ldr	r3, [pc, #84]	; (8010670 <run_shortest+0xd38>)
 801061a:	881b      	ldrh	r3, [r3, #0]
 801061c:	3301      	adds	r3, #1
 801061e:	b29a      	uxth	r2, r3
 8010620:	4b13      	ldr	r3, [pc, #76]	; (8010670 <run_shortest+0xd38>)
 8010622:	801a      	strh	r2, [r3, #0]
 8010624:	e2a4      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -2) {
 8010626:	4b12      	ldr	r3, [pc, #72]	; (8010670 <run_shortest+0xd38>)
 8010628:	881b      	ldrh	r3, [r3, #0]
 801062a:	461a      	mov	r2, r3
 801062c:	4b11      	ldr	r3, [pc, #68]	; (8010674 <run_shortest+0xd3c>)
 801062e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010632:	f113 0f02 	cmn.w	r3, #2
 8010636:	d131      	bne.n	801069c <run_shortest+0xd64>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 8010638:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 801063c:	9303      	str	r3, [sp, #12]
 801063e:	2301      	movs	r3, #1
 8010640:	9302      	str	r3, [sp, #8]
 8010642:	2300      	movs	r3, #0
 8010644:	9301      	str	r3, [sp, #4]
 8010646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010648:	9300      	str	r3, [sp, #0]
 801064a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801064e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010650:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010654:	f7fa f9b8 	bl	800a9c8 <slalomR>

			pass_count++;
 8010658:	4b05      	ldr	r3, [pc, #20]	; (8010670 <run_shortest+0xd38>)
 801065a:	881b      	ldrh	r3, [r3, #0]
 801065c:	3301      	adds	r3, #1
 801065e:	b29a      	uxth	r2, r3
 8010660:	4b03      	ldr	r3, [pc, #12]	; (8010670 <run_shortest+0xd38>)
 8010662:	801a      	strh	r2, [r3, #0]
 8010664:	e284      	b.n	8010b70 <run_shortest+0x1238>
 8010666:	bf00      	nop
 8010668:	cccccccd 	.word	0xcccccccd
 801066c:	4010cccc 	.word	0x4010cccc
 8010670:	20000834 	.word	0x20000834
 8010674:	2000083c 	.word	0x2000083c
 8010678:	08024f74 	.word	0x08024f74
 801067c:	08024f8c 	.word	0x08024f8c
 8010680:	20000812 	.word	0x20000812
 8010684:	200004d8 	.word	0x200004d8
 8010688:	20000836 	.word	0x20000836
 801068c:	20000814 	.word	0x20000814
 8010690:	2000f284 	.word	0x2000f284
 8010694:	40290000 	.word	0x40290000
 8010698:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 801069c:	4b9b      	ldr	r3, [pc, #620]	; (801090c <run_shortest+0xfd4>)
 801069e:	881b      	ldrh	r3, [r3, #0]
 80106a0:	461a      	mov	r2, r3
 80106a2:	4b9b      	ldr	r3, [pc, #620]	; (8010910 <run_shortest+0xfd8>)
 80106a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106a8:	f113 0f03 	cmn.w	r3, #3
 80106ac:	d117      	bne.n	80106de <run_shortest+0xda6>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 80106ae:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80106b2:	9303      	str	r3, [sp, #12]
 80106b4:	2301      	movs	r3, #1
 80106b6:	9302      	str	r3, [sp, #8]
 80106b8:	2300      	movs	r3, #0
 80106ba:	9301      	str	r3, [sp, #4]
 80106bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80106c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80106c8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80106cc:	f7fa fb62 	bl	800ad94 <slalomL>

			pass_count++;
 80106d0:	4b8e      	ldr	r3, [pc, #568]	; (801090c <run_shortest+0xfd4>)
 80106d2:	881b      	ldrh	r3, [r3, #0]
 80106d4:	3301      	adds	r3, #1
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	4b8c      	ldr	r3, [pc, #560]	; (801090c <run_shortest+0xfd4>)
 80106da:	801a      	strh	r2, [r3, #0]
 80106dc:	e248      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -4) {
 80106de:	4b8b      	ldr	r3, [pc, #556]	; (801090c <run_shortest+0xfd4>)
 80106e0:	881b      	ldrh	r3, [r3, #0]
 80106e2:	461a      	mov	r2, r3
 80106e4:	4b8a      	ldr	r3, [pc, #552]	; (8010910 <run_shortest+0xfd8>)
 80106e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106ea:	f113 0f04 	cmn.w	r3, #4
 80106ee:	d115      	bne.n	801071c <run_shortest+0xde4>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 80106f0:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80106f4:	9302      	str	r3, [sp, #8]
 80106f6:	2300      	movs	r3, #0
 80106f8:	9301      	str	r3, [sp, #4]
 80106fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010704:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010706:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801070a:	f7fa fd25 	bl	800b158 <turn90R>
			pass_count++;
 801070e:	4b7f      	ldr	r3, [pc, #508]	; (801090c <run_shortest+0xfd4>)
 8010710:	881b      	ldrh	r3, [r3, #0]
 8010712:	3301      	adds	r3, #1
 8010714:	b29a      	uxth	r2, r3
 8010716:	4b7d      	ldr	r3, [pc, #500]	; (801090c <run_shortest+0xfd4>)
 8010718:	801a      	strh	r2, [r3, #0]
 801071a:	e229      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -5) {
 801071c:	4b7b      	ldr	r3, [pc, #492]	; (801090c <run_shortest+0xfd4>)
 801071e:	881b      	ldrh	r3, [r3, #0]
 8010720:	461a      	mov	r2, r3
 8010722:	4b7b      	ldr	r3, [pc, #492]	; (8010910 <run_shortest+0xfd8>)
 8010724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010728:	f113 0f05 	cmn.w	r3, #5
 801072c:	d115      	bne.n	801075a <run_shortest+0xe22>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 801072e:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8010732:	9302      	str	r3, [sp, #8]
 8010734:	2300      	movs	r3, #0
 8010736:	9301      	str	r3, [sp, #4]
 8010738:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801073c:	9300      	str	r3, [sp, #0]
 801073e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8010742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010744:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010748:	f7fa fe70 	bl	800b42c <turn90L>
			pass_count++;
 801074c:	4b6f      	ldr	r3, [pc, #444]	; (801090c <run_shortest+0xfd4>)
 801074e:	881b      	ldrh	r3, [r3, #0]
 8010750:	3301      	adds	r3, #1
 8010752:	b29a      	uxth	r2, r3
 8010754:	4b6d      	ldr	r3, [pc, #436]	; (801090c <run_shortest+0xfd4>)
 8010756:	801a      	strh	r2, [r3, #0]
 8010758:	e20a      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -6) {
 801075a:	4b6c      	ldr	r3, [pc, #432]	; (801090c <run_shortest+0xfd4>)
 801075c:	881b      	ldrh	r3, [r3, #0]
 801075e:	461a      	mov	r2, r3
 8010760:	4b6b      	ldr	r3, [pc, #428]	; (8010910 <run_shortest+0xfd8>)
 8010762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010766:	f113 0f06 	cmn.w	r3, #6
 801076a:	d115      	bne.n	8010798 <run_shortest+0xe60>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 801076c:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8010770:	9302      	str	r3, [sp, #8]
 8010772:	2300      	movs	r3, #0
 8010774:	9301      	str	r3, [sp, #4]
 8010776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801077a:	9300      	str	r3, [sp, #0]
 801077c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010780:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010782:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010786:	f7fa ffb5 	bl	800b6f4 <turn180R>
			pass_count++;
 801078a:	4b60      	ldr	r3, [pc, #384]	; (801090c <run_shortest+0xfd4>)
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	3301      	adds	r3, #1
 8010790:	b29a      	uxth	r2, r3
 8010792:	4b5e      	ldr	r3, [pc, #376]	; (801090c <run_shortest+0xfd4>)
 8010794:	801a      	strh	r2, [r3, #0]
 8010796:	e1eb      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -7) {
 8010798:	4b5c      	ldr	r3, [pc, #368]	; (801090c <run_shortest+0xfd4>)
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	461a      	mov	r2, r3
 801079e:	4b5c      	ldr	r3, [pc, #368]	; (8010910 <run_shortest+0xfd8>)
 80107a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107a4:	f113 0f07 	cmn.w	r3, #7
 80107a8:	d115      	bne.n	80107d6 <run_shortest+0xe9e>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 80107aa:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80107ae:	9302      	str	r3, [sp, #8]
 80107b0:	2300      	movs	r3, #0
 80107b2:	9301      	str	r3, [sp, #4]
 80107b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80107b8:	9300      	str	r3, [sp, #0]
 80107ba:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80107be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107c0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80107c4:	f7fb f900 	bl	800b9c8 <turn180L>
			pass_count++;
 80107c8:	4b50      	ldr	r3, [pc, #320]	; (801090c <run_shortest+0xfd4>)
 80107ca:	881b      	ldrh	r3, [r3, #0]
 80107cc:	3301      	adds	r3, #1
 80107ce:	b29a      	uxth	r2, r3
 80107d0:	4b4e      	ldr	r3, [pc, #312]	; (801090c <run_shortest+0xfd4>)
 80107d2:	801a      	strh	r2, [r3, #0]
 80107d4:	e1cc      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -8) { //入り45R
 80107d6:	4b4d      	ldr	r3, [pc, #308]	; (801090c <run_shortest+0xfd4>)
 80107d8:	881b      	ldrh	r3, [r3, #0]
 80107da:	461a      	mov	r2, r3
 80107dc:	4b4c      	ldr	r3, [pc, #304]	; (8010910 <run_shortest+0xfd8>)
 80107de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107e2:	f113 0f08 	cmn.w	r3, #8
 80107e6:	d115      	bne.n	8010814 <run_shortest+0xedc>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 80107e8:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80107ec:	9302      	str	r3, [sp, #8]
 80107ee:	2300      	movs	r3, #0
 80107f0:	9301      	str	r3, [sp, #4]
 80107f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80107fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107fe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010802:	f7fb fa49 	bl	800bc98 <turn45inR>
			pass_count++;
 8010806:	4b41      	ldr	r3, [pc, #260]	; (801090c <run_shortest+0xfd4>)
 8010808:	881b      	ldrh	r3, [r3, #0]
 801080a:	3301      	adds	r3, #1
 801080c:	b29a      	uxth	r2, r3
 801080e:	4b3f      	ldr	r3, [pc, #252]	; (801090c <run_shortest+0xfd4>)
 8010810:	801a      	strh	r2, [r3, #0]
 8010812:	e1ad      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -9) { //入り45L
 8010814:	4b3d      	ldr	r3, [pc, #244]	; (801090c <run_shortest+0xfd4>)
 8010816:	881b      	ldrh	r3, [r3, #0]
 8010818:	461a      	mov	r2, r3
 801081a:	4b3d      	ldr	r3, [pc, #244]	; (8010910 <run_shortest+0xfd8>)
 801081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010820:	f113 0f09 	cmn.w	r3, #9
 8010824:	d115      	bne.n	8010852 <run_shortest+0xf1a>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010826:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 801082a:	9302      	str	r3, [sp, #8]
 801082c:	2300      	movs	r3, #0
 801082e:	9301      	str	r3, [sp, #4]
 8010830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010834:	9300      	str	r3, [sp, #0]
 8010836:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 801083a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801083c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010840:	f7fb fc72 	bl	800c128 <turn45inL>
			pass_count++;
 8010844:	4b31      	ldr	r3, [pc, #196]	; (801090c <run_shortest+0xfd4>)
 8010846:	881b      	ldrh	r3, [r3, #0]
 8010848:	3301      	adds	r3, #1
 801084a:	b29a      	uxth	r2, r3
 801084c:	4b2f      	ldr	r3, [pc, #188]	; (801090c <run_shortest+0xfd4>)
 801084e:	801a      	strh	r2, [r3, #0]
 8010850:	e18e      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -10) { //入り135R
 8010852:	4b2e      	ldr	r3, [pc, #184]	; (801090c <run_shortest+0xfd4>)
 8010854:	881b      	ldrh	r3, [r3, #0]
 8010856:	461a      	mov	r2, r3
 8010858:	4b2d      	ldr	r3, [pc, #180]	; (8010910 <run_shortest+0xfd8>)
 801085a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801085e:	f113 0f0a 	cmn.w	r3, #10
 8010862:	d115      	bne.n	8010890 <run_shortest+0xf58>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 8010864:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8010868:	9302      	str	r3, [sp, #8]
 801086a:	2300      	movs	r3, #0
 801086c:	9301      	str	r3, [sp, #4]
 801086e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010872:	9300      	str	r3, [sp, #0]
 8010874:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8010878:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801087a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801087e:	f7fb fe93 	bl	800c5a8 <turn135inR>
			pass_count++;
 8010882:	4b22      	ldr	r3, [pc, #136]	; (801090c <run_shortest+0xfd4>)
 8010884:	881b      	ldrh	r3, [r3, #0]
 8010886:	3301      	adds	r3, #1
 8010888:	b29a      	uxth	r2, r3
 801088a:	4b20      	ldr	r3, [pc, #128]	; (801090c <run_shortest+0xfd4>)
 801088c:	801a      	strh	r2, [r3, #0]
 801088e:	e16f      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -11) { //入り135L
 8010890:	4b1e      	ldr	r3, [pc, #120]	; (801090c <run_shortest+0xfd4>)
 8010892:	881b      	ldrh	r3, [r3, #0]
 8010894:	461a      	mov	r2, r3
 8010896:	4b1e      	ldr	r3, [pc, #120]	; (8010910 <run_shortest+0xfd8>)
 8010898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801089c:	f113 0f0b 	cmn.w	r3, #11
 80108a0:	d115      	bne.n	80108ce <run_shortest+0xf96>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80108a2:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80108a6:	9302      	str	r3, [sp, #8]
 80108a8:	2300      	movs	r3, #0
 80108aa:	9301      	str	r3, [sp, #4]
 80108ac:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80108b0:	9300      	str	r3, [sp, #0]
 80108b2:	f507 738a 	add.w	r3, r7, #276	; 0x114
 80108b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108b8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80108bc:	f7fc f8bc 	bl	800ca38 <turn135inL>
			pass_count++;
 80108c0:	4b12      	ldr	r3, [pc, #72]	; (801090c <run_shortest+0xfd4>)
 80108c2:	881b      	ldrh	r3, [r3, #0]
 80108c4:	3301      	adds	r3, #1
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	4b10      	ldr	r3, [pc, #64]	; (801090c <run_shortest+0xfd4>)
 80108ca:	801a      	strh	r2, [r3, #0]
 80108cc:	e150      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -12) { //出り45R
 80108ce:	4b0f      	ldr	r3, [pc, #60]	; (801090c <run_shortest+0xfd4>)
 80108d0:	881b      	ldrh	r3, [r3, #0]
 80108d2:	461a      	mov	r2, r3
 80108d4:	4b0e      	ldr	r3, [pc, #56]	; (8010910 <run_shortest+0xfd8>)
 80108d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108da:	f113 0f0c 	cmn.w	r3, #12
 80108de:	d119      	bne.n	8010914 <run_shortest+0xfdc>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 80108e0:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80108e4:	9302      	str	r3, [sp, #8]
 80108e6:	2300      	movs	r3, #0
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80108ee:	9300      	str	r3, [sp, #0]
 80108f0:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80108f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80108f6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80108fa:	f7fc fae1 	bl	800cec0 <turn45outR>
			pass_count++;
 80108fe:	4b03      	ldr	r3, [pc, #12]	; (801090c <run_shortest+0xfd4>)
 8010900:	881b      	ldrh	r3, [r3, #0]
 8010902:	3301      	adds	r3, #1
 8010904:	b29a      	uxth	r2, r3
 8010906:	4b01      	ldr	r3, [pc, #4]	; (801090c <run_shortest+0xfd4>)
 8010908:	801a      	strh	r2, [r3, #0]
 801090a:	e131      	b.n	8010b70 <run_shortest+0x1238>
 801090c:	20000834 	.word	0x20000834
 8010910:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -13) { //出り45L
 8010914:	4ba0      	ldr	r3, [pc, #640]	; (8010b98 <run_shortest+0x1260>)
 8010916:	881b      	ldrh	r3, [r3, #0]
 8010918:	461a      	mov	r2, r3
 801091a:	4ba0      	ldr	r3, [pc, #640]	; (8010b9c <run_shortest+0x1264>)
 801091c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010920:	f113 0f0d 	cmn.w	r3, #13
 8010924:	d115      	bne.n	8010952 <run_shortest+0x101a>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010926:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 801092a:	9302      	str	r3, [sp, #8]
 801092c:	2300      	movs	r3, #0
 801092e:	9301      	str	r3, [sp, #4]
 8010930:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8010934:	9300      	str	r3, [sp, #0]
 8010936:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 801093a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801093c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010940:	f7fc fcb0 	bl	800d2a4 <turn45outL>
			pass_count++;
 8010944:	4b94      	ldr	r3, [pc, #592]	; (8010b98 <run_shortest+0x1260>)
 8010946:	881b      	ldrh	r3, [r3, #0]
 8010948:	3301      	adds	r3, #1
 801094a:	b29a      	uxth	r2, r3
 801094c:	4b92      	ldr	r3, [pc, #584]	; (8010b98 <run_shortest+0x1260>)
 801094e:	801a      	strh	r2, [r3, #0]
 8010950:	e10e      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -14) { //出り135R
 8010952:	4b91      	ldr	r3, [pc, #580]	; (8010b98 <run_shortest+0x1260>)
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	461a      	mov	r2, r3
 8010958:	4b90      	ldr	r3, [pc, #576]	; (8010b9c <run_shortest+0x1264>)
 801095a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801095e:	f113 0f0e 	cmn.w	r3, #14
 8010962:	d115      	bne.n	8010990 <run_shortest+0x1058>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 8010964:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8010968:	9302      	str	r3, [sp, #8]
 801096a:	2300      	movs	r3, #0
 801096c:	9301      	str	r3, [sp, #4]
 801096e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8010978:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801097a:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 801097e:	f7fc fe79 	bl	800d674 <turn135outR>
			pass_count++;
 8010982:	4b85      	ldr	r3, [pc, #532]	; (8010b98 <run_shortest+0x1260>)
 8010984:	881b      	ldrh	r3, [r3, #0]
 8010986:	3301      	adds	r3, #1
 8010988:	b29a      	uxth	r2, r3
 801098a:	4b83      	ldr	r3, [pc, #524]	; (8010b98 <run_shortest+0x1260>)
 801098c:	801a      	strh	r2, [r3, #0]
 801098e:	e0ef      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -15) { //出り135L
 8010990:	4b81      	ldr	r3, [pc, #516]	; (8010b98 <run_shortest+0x1260>)
 8010992:	881b      	ldrh	r3, [r3, #0]
 8010994:	461a      	mov	r2, r3
 8010996:	4b81      	ldr	r3, [pc, #516]	; (8010b9c <run_shortest+0x1264>)
 8010998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801099c:	f113 0f0f 	cmn.w	r3, #15
 80109a0:	d115      	bne.n	80109ce <run_shortest+0x1096>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80109a2:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80109a6:	9302      	str	r3, [sp, #8]
 80109a8:	2300      	movs	r3, #0
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80109b0:	9300      	str	r3, [sp, #0]
 80109b2:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 80109b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80109b8:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80109bc:	f7fd f84c 	bl	800da58 <turn135outL>
			pass_count++;
 80109c0:	4b75      	ldr	r3, [pc, #468]	; (8010b98 <run_shortest+0x1260>)
 80109c2:	881b      	ldrh	r3, [r3, #0]
 80109c4:	3301      	adds	r3, #1
 80109c6:	b29a      	uxth	r2, r3
 80109c8:	4b73      	ldr	r3, [pc, #460]	; (8010b98 <run_shortest+0x1260>)
 80109ca:	801a      	strh	r2, [r3, #0]
 80109cc:	e0d0      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -16) { //V90R
 80109ce:	4b72      	ldr	r3, [pc, #456]	; (8010b98 <run_shortest+0x1260>)
 80109d0:	881b      	ldrh	r3, [r3, #0]
 80109d2:	461a      	mov	r2, r3
 80109d4:	4b71      	ldr	r3, [pc, #452]	; (8010b9c <run_shortest+0x1264>)
 80109d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109da:	f113 0f10 	cmn.w	r3, #16
 80109de:	d115      	bne.n	8010a0c <run_shortest+0x10d4>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 80109e0:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 80109e4:	9302      	str	r3, [sp, #8]
 80109e6:	2300      	movs	r3, #0
 80109e8:	9301      	str	r3, [sp, #4]
 80109ea:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80109ee:	9300      	str	r3, [sp, #0]
 80109f0:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 80109f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80109f6:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 80109fa:	f7fd fa19 	bl	800de30 <V90R>
			pass_count++;
 80109fe:	4b66      	ldr	r3, [pc, #408]	; (8010b98 <run_shortest+0x1260>)
 8010a00:	881b      	ldrh	r3, [r3, #0]
 8010a02:	3301      	adds	r3, #1
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	4b64      	ldr	r3, [pc, #400]	; (8010b98 <run_shortest+0x1260>)
 8010a08:	801a      	strh	r2, [r3, #0]
 8010a0a:	e0b1      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] == -17) { //V90L
 8010a0c:	4b62      	ldr	r3, [pc, #392]	; (8010b98 <run_shortest+0x1260>)
 8010a0e:	881b      	ldrh	r3, [r3, #0]
 8010a10:	461a      	mov	r2, r3
 8010a12:	4b62      	ldr	r3, [pc, #392]	; (8010b9c <run_shortest+0x1264>)
 8010a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a18:	f113 0f11 	cmn.w	r3, #17
 8010a1c:	d115      	bne.n	8010a4a <run_shortest+0x1112>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010a1e:	f897 31a0 	ldrb.w	r3, [r7, #416]	; 0x1a0
 8010a22:	9302      	str	r3, [sp, #8]
 8010a24:	2300      	movs	r3, #0
 8010a26:	9301      	str	r3, [sp, #4]
 8010a28:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8010a2c:	9300      	str	r3, [sp, #0]
 8010a2e:	f507 73c6 	add.w	r3, r7, #396	; 0x18c
 8010a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010a34:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8010a38:	f7fd fc06 	bl	800e248 <V90L>
			pass_count++;
 8010a3c:	4b56      	ldr	r3, [pc, #344]	; (8010b98 <run_shortest+0x1260>)
 8010a3e:	881b      	ldrh	r3, [r3, #0]
 8010a40:	3301      	adds	r3, #1
 8010a42:	b29a      	uxth	r2, r3
 8010a44:	4b54      	ldr	r3, [pc, #336]	; (8010b98 <run_shortest+0x1260>)
 8010a46:	801a      	strh	r2, [r3, #0]
 8010a48:	e092      	b.n	8010b70 <run_shortest+0x1238>
		}
		else if (pass[pass_count] >= 1) {
 8010a4a:	4b53      	ldr	r3, [pc, #332]	; (8010b98 <run_shortest+0x1260>)
 8010a4c:	881b      	ldrh	r3, [r3, #0]
 8010a4e:	461a      	mov	r2, r3
 8010a50:	4b52      	ldr	r3, [pc, #328]	; (8010b9c <run_shortest+0x1264>)
 8010a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	f340 808a 	ble.w	8010b70 <run_shortest+0x1238>
			first_v = howspeed.TurnCentervelocity;
 8010a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
			last_v = howspeed.TurnCentervelocity;
 8010a60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010a62:	623b      	str	r3, [r7, #32]
			if (pass_count >= 1) {
 8010a64:	4b4c      	ldr	r3, [pc, #304]	; (8010b98 <run_shortest+0x1260>)
 8010a66:	881b      	ldrh	r3, [r3, #0]
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d013      	beq.n	8010a94 <run_shortest+0x115c>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 8010a6c:	4b4a      	ldr	r3, [pc, #296]	; (8010b98 <run_shortest+0x1260>)
 8010a6e:	881b      	ldrh	r3, [r3, #0]
 8010a70:	3b01      	subs	r3, #1
 8010a72:	4a4a      	ldr	r2, [pc, #296]	; (8010b9c <run_shortest+0x1264>)
 8010a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a78:	f113 0f02 	cmn.w	r3, #2
 8010a7c:	d008      	beq.n	8010a90 <run_shortest+0x1158>
 8010a7e:	4b46      	ldr	r3, [pc, #280]	; (8010b98 <run_shortest+0x1260>)
 8010a80:	881b      	ldrh	r3, [r3, #0]
 8010a82:	3b01      	subs	r3, #1
 8010a84:	4a45      	ldr	r2, [pc, #276]	; (8010b9c <run_shortest+0x1264>)
 8010a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a8a:	f113 0f03 	cmn.w	r3, #3
 8010a8e:	d101      	bne.n	8010a94 <run_shortest+0x115c>
					first_v = howspeed.SlalomCentervelocity;
 8010a90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a92:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 8010a94:	4b40      	ldr	r3, [pc, #256]	; (8010b98 <run_shortest+0x1260>)
 8010a96:	881b      	ldrh	r3, [r3, #0]
 8010a98:	3301      	adds	r3, #1
 8010a9a:	4a40      	ldr	r2, [pc, #256]	; (8010b9c <run_shortest+0x1264>)
 8010a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010aa0:	f113 0f02 	cmn.w	r3, #2
 8010aa4:	d008      	beq.n	8010ab8 <run_shortest+0x1180>
 8010aa6:	4b3c      	ldr	r3, [pc, #240]	; (8010b98 <run_shortest+0x1260>)
 8010aa8:	881b      	ldrh	r3, [r3, #0]
 8010aaa:	3301      	adds	r3, #1
 8010aac:	4a3b      	ldr	r2, [pc, #236]	; (8010b9c <run_shortest+0x1264>)
 8010aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010ab2:	f113 0f03 	cmn.w	r3, #3
 8010ab6:	d101      	bne.n	8010abc <run_shortest+0x1184>
				last_v = howspeed.SlalomCentervelocity;
 8010ab8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010aba:	623b      	str	r3, [r7, #32]
			}
			if (pass[pass_count] >= 50) {
 8010abc:	4b36      	ldr	r3, [pc, #216]	; (8010b98 <run_shortest+0x1260>)
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	461a      	mov	r2, r3
 8010ac2:	4b36      	ldr	r3, [pc, #216]	; (8010b9c <run_shortest+0x1264>)
 8010ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ac8:	2b31      	cmp	r3, #49	; 0x31
 8010aca:	dd29      	ble.n	8010b20 <run_shortest+0x11e8>
				mode.WallControlMode=3;
 8010acc:	2303      	movs	r3, #3
 8010ace:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010ad0:	2300      	movs	r3, #0
 8010ad2:	777b      	strb	r3, [r7, #29]
				//straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
				straight_table_max((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc,35000, mode);
 8010ad4:	4b30      	ldr	r3, [pc, #192]	; (8010b98 <run_shortest+0x1260>)
 8010ad6:	881b      	ldrh	r3, [r3, #0]
 8010ad8:	461a      	mov	r2, r3
 8010ada:	4b30      	ldr	r3, [pc, #192]	; (8010b9c <run_shortest+0x1264>)
 8010adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ae0:	3b32      	subs	r3, #50	; 0x32
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	f7ef fd46 	bl	8000574 <__aeabi_i2d>
 8010ae8:	a329      	add	r3, pc, #164	; (adr r3, 8010b90 <run_shortest+0x1258>)
 8010aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aee:	f7ef fdab 	bl	8000648 <__aeabi_dmul>
 8010af2:	4602      	mov	r2, r0
 8010af4:	460b      	mov	r3, r1
 8010af6:	4610      	mov	r0, r2
 8010af8:	4619      	mov	r1, r3
 8010afa:	f7f0 f87d 	bl	8000bf8 <__aeabi_d2f>
 8010afe:	4603      	mov	r3, r0
 8010b00:	69f8      	ldr	r0, [r7, #28]
 8010b02:	eddf 2a27 	vldr	s5, [pc, #156]	; 8010ba0 <run_shortest+0x1268>
 8010b06:	ed97 2a04 	vldr	s4, [r7, #16]
 8010b0a:	edd7 1a05 	vldr	s3, [r7, #20]
 8010b0e:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010b12:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010b16:	ee00 3a10 	vmov	s0, r3
 8010b1a:	f7f2 ff25 	bl	8003968 <straight_table_max>
 8010b1e:	e021      	b.n	8010b64 <run_shortest+0x122c>
			} else {
				mode.WallControlMode=1;
 8010b20:	2301      	movs	r3, #1
 8010b22:	773b      	strb	r3, [r7, #28]
				mode.WallControlStatus=0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	777b      	strb	r3, [r7, #29]
				//straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
				straight_table_max((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc,35000, mode);
 8010b28:	4b1b      	ldr	r3, [pc, #108]	; (8010b98 <run_shortest+0x1260>)
 8010b2a:	881b      	ldrh	r3, [r3, #0]
 8010b2c:	461a      	mov	r2, r3
 8010b2e:	4b1b      	ldr	r3, [pc, #108]	; (8010b9c <run_shortest+0x1264>)
 8010b30:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010b34:	4613      	mov	r3, r2
 8010b36:	005b      	lsls	r3, r3, #1
 8010b38:	4413      	add	r3, r2
 8010b3a:	011a      	lsls	r2, r3, #4
 8010b3c:	1ad3      	subs	r3, r2, r3
 8010b3e:	ee07 3a90 	vmov	s15, r3
 8010b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b46:	69f8      	ldr	r0, [r7, #28]
 8010b48:	eddf 2a15 	vldr	s5, [pc, #84]	; 8010ba0 <run_shortest+0x1268>
 8010b4c:	ed97 2a04 	vldr	s4, [r7, #16]
 8010b50:	edd7 1a05 	vldr	s3, [r7, #20]
 8010b54:	ed97 1a0e 	vldr	s2, [r7, #56]	; 0x38
 8010b58:	edd7 0a0f 	vldr	s1, [r7, #60]	; 0x3c
 8010b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8010b60:	f7f2 ff02 	bl	8003968 <straight_table_max>
			}

			pass_count++;
 8010b64:	4b0c      	ldr	r3, [pc, #48]	; (8010b98 <run_shortest+0x1260>)
 8010b66:	881b      	ldrh	r3, [r3, #0]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	b29a      	uxth	r2, r3
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	; (8010b98 <run_shortest+0x1260>)
 8010b6e:	801a      	strh	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 8010b70:	4b09      	ldr	r3, [pc, #36]	; (8010b98 <run_shortest+0x1260>)
 8010b72:	881b      	ldrh	r3, [r3, #0]
 8010b74:	461a      	mov	r2, r3
 8010b76:	4b09      	ldr	r3, [pc, #36]	; (8010b9c <run_shortest+0x1264>)
 8010b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d015      	beq.n	8010bac <run_shortest+0x1274>
	while (pass_count <= 500) {
 8010b80:	4b05      	ldr	r3, [pc, #20]	; (8010b98 <run_shortest+0x1260>)
 8010b82:	881b      	ldrh	r3, [r3, #0]
 8010b84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010b88:	f67f ad1a 	bls.w	80105c0 <run_shortest+0xc88>
 8010b8c:	e00f      	b.n	8010bae <run_shortest+0x1276>
 8010b8e:	bf00      	nop
 8010b90:	c022ec18 	.word	0xc022ec18
 8010b94:	404fd1de 	.word	0x404fd1de
 8010b98:	20000834 	.word	0x20000834
 8010b9c:	2000083c 	.word	0x2000083c
 8010ba0:	4708b800 	.word	0x4708b800
 8010ba4:	00000000 	.word	0x00000000
 8010ba8:	42b40000 	.word	0x42b40000
			break;
 8010bac:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 8010bae:	2301      	movs	r3, #1
 8010bb0:	773b      	strb	r3, [r7, #28]
		mode.WallControlStatus=0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	777b      	strb	r3, [r7, #29]
		straight_table2(MAZE_SECTION,end_velocity, 0,inspeed, inacc, mode);
 8010bb6:	69f8      	ldr	r0, [r7, #28]
 8010bb8:	ed97 2a04 	vldr	s4, [r7, #16]
 8010bbc:	edd7 1a05 	vldr	s3, [r7, #20]
 8010bc0:	ed1f 1a08 	vldr	s2, [pc, #-32]	; 8010ba4 <run_shortest+0x126c>
 8010bc4:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
 8010bc8:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 8010ba8 <run_shortest+0x1270>
 8010bcc:	f7f3 f800 	bl	8003bd0 <straight_table2>
		wait_ms_NoReset(700);
 8010bd0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8010bd4:	f7f7 ffbc 	bl	8008b50 <wait_ms_NoReset>
		pl_FunMotor_stop();
 8010bd8:	f7f7 fd1e 	bl	8008618 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 8010bdc:	4b27      	ldr	r3, [pc, #156]	; (8010c7c <run_shortest+0x1344>)
 8010bde:	2200      	movs	r2, #0
 8010be0:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8010be2:	4b27      	ldr	r3, [pc, #156]	; (8010c80 <run_shortest+0x1348>)
 8010be4:	2200      	movs	r2, #0
 8010be6:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 8010be8:	4b26      	ldr	r3, [pc, #152]	; (8010c84 <run_shortest+0x134c>)
 8010bea:	2200      	movs	r2, #0
 8010bec:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 8010bee:	2000      	movs	r0, #0
 8010bf0:	f7f7 fc7e 	bl	80084f0 <pl_DriveMotor_standby>
	int t = 0;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	627b      	str	r3, [r7, #36]	; 0x24

	while (t <= 14) {
 8010bf8:	e016      	b.n	8010c28 <run_shortest+0x12f0>
		wall.row[t] = record.row[t];
 8010bfa:	4a23      	ldr	r2, [pc, #140]	; (8010c88 <run_shortest+0x1350>)
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010c02:	4922      	ldr	r1, [pc, #136]	; (8010c8c <run_shortest+0x1354>)
 8010c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column[t] = record.column[t];
 8010c0a:	4a1f      	ldr	r2, [pc, #124]	; (8010c88 <run_shortest+0x1350>)
 8010c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c0e:	330e      	adds	r3, #14
 8010c10:	009b      	lsls	r3, r3, #2
 8010c12:	4413      	add	r3, r2
 8010c14:	685a      	ldr	r2, [r3, #4]
 8010c16:	491d      	ldr	r1, [pc, #116]	; (8010c8c <run_shortest+0x1354>)
 8010c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1a:	330e      	adds	r3, #14
 8010c1c:	009b      	lsls	r3, r3, #2
 8010c1e:	440b      	add	r3, r1
 8010c20:	605a      	str	r2, [r3, #4]
		t++;
 8010c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c24:	3301      	adds	r3, #1
 8010c26:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2a:	2b0e      	cmp	r3, #14
 8010c2c:	dde5      	ble.n	8010bfa <run_shortest+0x12c2>
	}
	t = 0;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c32:	e01a      	b.n	8010c6a <run_shortest+0x1332>
		wall.row_look[t] = ~wall.row_look[t];
 8010c34:	4a15      	ldr	r2, [pc, #84]	; (8010c8c <run_shortest+0x1354>)
 8010c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c38:	331e      	adds	r3, #30
 8010c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c3e:	43da      	mvns	r2, r3
 8010c40:	4912      	ldr	r1, [pc, #72]	; (8010c8c <run_shortest+0x1354>)
 8010c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c44:	331e      	adds	r3, #30
 8010c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		wall.column_look[t] = ~wall.column_look[t];
 8010c4a:	4a10      	ldr	r2, [pc, #64]	; (8010c8c <run_shortest+0x1354>)
 8010c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4e:	332c      	adds	r3, #44	; 0x2c
 8010c50:	009b      	lsls	r3, r3, #2
 8010c52:	4413      	add	r3, r2
 8010c54:	685b      	ldr	r3, [r3, #4]
 8010c56:	43da      	mvns	r2, r3
 8010c58:	490c      	ldr	r1, [pc, #48]	; (8010c8c <run_shortest+0x1354>)
 8010c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5c:	332c      	adds	r3, #44	; 0x2c
 8010c5e:	009b      	lsls	r3, r3, #2
 8010c60:	440b      	add	r3, r1
 8010c62:	605a      	str	r2, [r3, #4]
		t++;
 8010c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c66:	3301      	adds	r3, #1
 8010c68:	627b      	str	r3, [r7, #36]	; 0x24
	while (t <= 14) {
 8010c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c6c:	2b0e      	cmp	r3, #14
 8010c6e:	dde1      	ble.n	8010c34 <run_shortest+0x12fc>
	}

}
 8010c70:	bf00      	nop
 8010c72:	bf00      	nop
 8010c74:	3748      	adds	r7, #72	; 0x48
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bdb0      	pop	{r4, r5, r7, pc}
 8010c7a:	bf00      	nop
 8010c7c:	20000836 	.word	0x20000836
 8010c80:	20000814 	.word	0x20000814
 8010c84:	2000f284 	.word	0x2000f284
 8010c88:	20001100 	.word	0x20001100
 8010c8c:	20001010 	.word	0x20001010

08010c90 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 8010c90:	b580      	push	{r7, lr}
 8010c92:	b08a      	sub	sp, #40	; 0x28
 8010c94:	af02      	add	r7, sp, #8
 8010c96:	60f8      	str	r0, [r7, #12]
 8010c98:	60b9      	str	r1, [r7, #8]
 8010c9a:	607a      	str	r2, [r7, #4]
 8010c9c:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 8010ca2:	2301      	movs	r3, #1
 8010ca4:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010cb2:	f107 0114 	add.w	r1, r7, #20
 8010cb6:	f107 0318 	add.w	r3, r7, #24
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fd fe7b 	bl	800e9b8 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010cc2:	69b8      	ldr	r0, [r7, #24]
 8010cc4:	6979      	ldr	r1, [r7, #20]
 8010cc6:	f107 021e 	add.w	r2, r7, #30
 8010cca:	f107 031c 	add.w	r3, r7, #28
 8010cce:	9301      	str	r3, [sp, #4]
 8010cd0:	f107 031d 	add.w	r3, r7, #29
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	687a      	ldr	r2, [r7, #4]
 8010cda:	f000 fe9f 	bl	8011a1c <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8010cde:	7fbb      	ldrb	r3, [r7, #30]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d007      	beq.n	8010cf4 <decision_kitiku+0x64>
 8010ce4:	7f7b      	ldrb	r3, [r7, #29]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d004      	beq.n	8010cf4 <decision_kitiku+0x64>
 8010cea:	7f3b      	ldrb	r3, [r7, #28]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <decision_kitiku+0x64>
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	e000      	b.n	8010cf6 <decision_kitiku+0x66>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	77fb      	strb	r3, [r7, #31]
 8010cf8:	7ffb      	ldrb	r3, [r7, #31]
 8010cfa:	f003 0301 	and.w	r3, r3, #1
 8010cfe:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010d00:	7ffb      	ldrb	r3, [r7, #31]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d02b      	beq.n	8010d5e <decision_kitiku+0xce>
 8010d06:	887a      	ldrh	r2, [r7, #2]
 8010d08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010d0a:	429a      	cmp	r2, r3
 8010d0c:	d827      	bhi.n	8010d5e <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010d0e:	887a      	ldrh	r2, [r7, #2]
 8010d10:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d823      	bhi.n	8010d5e <decision_kitiku+0xce>
 8010d16:	887a      	ldrh	r2, [r7, #2]
 8010d18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010d1a:	429a      	cmp	r2, r3
 8010d1c:	d81f      	bhi.n	8010d5e <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	2b01      	cmp	r3, #1
 8010d22:	d102      	bne.n	8010d2a <decision_kitiku+0x9a>
 8010d24:	68bb      	ldr	r3, [r7, #8]
 8010d26:	2b0d      	cmp	r3, #13
 8010d28:	dc11      	bgt.n	8010d4e <decision_kitiku+0xbe>
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	2b02      	cmp	r3, #2
 8010d2e:	d102      	bne.n	8010d36 <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	2b0d      	cmp	r3, #13
 8010d34:	dc0b      	bgt.n	8010d4e <decision_kitiku+0xbe>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2b03      	cmp	r3, #3
 8010d3a:	d102      	bne.n	8010d42 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010d3c:	68bb      	ldr	r3, [r7, #8]
 8010d3e:	2b01      	cmp	r3, #1
 8010d40:	dd05      	ble.n	8010d4e <decision_kitiku+0xbe>
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	2b04      	cmp	r3, #4
 8010d46:	d106      	bne.n	8010d56 <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	2b01      	cmp	r3, #1
 8010d4c:	dc03      	bgt.n	8010d56 <decision_kitiku+0xc6>
			kitikukan = 0;
 8010d4e:	4b08      	ldr	r3, [pc, #32]	; (8010d70 <decision_kitiku+0xe0>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010d54:	e007      	b.n	8010d66 <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 8010d56:	4b06      	ldr	r3, [pc, #24]	; (8010d70 <decision_kitiku+0xe0>)
 8010d58:	2201      	movs	r2, #1
 8010d5a:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 8010d5c:	e003      	b.n	8010d66 <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 8010d5e:	4b04      	ldr	r3, [pc, #16]	; (8010d70 <decision_kitiku+0xe0>)
 8010d60:	2200      	movs	r2, #0
 8010d62:	601a      	str	r2, [r3, #0]
	}


}
 8010d64:	bf00      	nop
 8010d66:	bf00      	nop
 8010d68:	3720      	adds	r7, #32
 8010d6a:	46bd      	mov	sp, r7
 8010d6c:	bd80      	pop	{r7, pc}
 8010d6e:	bf00      	nop
 8010d70:	20000838 	.word	0x20000838

08010d74 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction,int *kitiku_distance) {
 8010d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d76:	b09b      	sub	sp, #108	; 0x6c
 8010d78:	af04      	add	r7, sp, #16
 8010d7a:	60f8      	str	r0, [r7, #12]
 8010d7c:	60b9      	str	r1, [r7, #8]
 8010d7e:	607a      	str	r2, [r7, #4]
 8010d80:	603b      	str	r3, [r7, #0]
	*kitiku_distance = 1;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	2201      	movs	r2, #1
 8010d86:	601a      	str	r2, [r3, #0]
	int kitiku = 1;
 8010d88:	2301      	movs	r3, #1
 8010d8a:	647b      	str	r3, [r7, #68]	; 0x44
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d92:	68bb      	ldr	r3, [r7, #8]
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	637b      	str	r3, [r7, #52]	; 0x34
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	657b      	str	r3, [r7, #84]	; 0x54
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 8010d9e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8010da2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010da6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010da8:	4618      	mov	r0, r3
 8010daa:	f7fd fe05 	bl	800e9b8 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db0:	633b      	str	r3, [r7, #48]	; 0x30
 8010db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010db4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db8:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8010dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dc0:	623b      	str	r3, [r7, #32]
 8010dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dc4:	61fb      	str	r3, [r7, #28]

		update_coordinate(&x_front,&y_front,direction_now);
 8010dc6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010dca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010dce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fd fdf1 	bl	800e9b8 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 8010dd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010dd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dda:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010dde:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010de2:	9301      	str	r3, [sp, #4]
 8010de4:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4613      	mov	r3, r2
 8010dec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010dee:	f000 fe15 	bl	8011a1c <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010df2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d009      	beq.n	8010e0e <compress_kitiku+0x9a>
 8010dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010dfe:	2b00      	cmp	r3, #0
 8010e00:	d005      	beq.n	8010e0e <compress_kitiku+0x9a>
 8010e02:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d001      	beq.n	8010e0e <compress_kitiku+0x9a>
 8010e0a:	2301      	movs	r3, #1
 8010e0c:	e000      	b.n	8010e10 <compress_kitiku+0x9c>
 8010e0e:	2300      	movs	r3, #0
 8010e10:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e22:	2b04      	cmp	r3, #4
 8010e24:	d102      	bne.n	8010e2c <compress_kitiku+0xb8>
 8010e26:	2301      	movs	r3, #1
 8010e28:	653b      	str	r3, [r7, #80]	; 0x50
 8010e2a:	e002      	b.n	8010e32 <compress_kitiku+0xbe>
 8010e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e2e:	3301      	adds	r3, #1
 8010e30:	653b      	str	r3, [r7, #80]	; 0x50
		update_coordinate(&x_right,&y_right,direction_right);
 8010e32:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010e36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010e3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fd fdbb 	bl	800e9b8 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010e42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e46:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010e4a:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010e4e:	9301      	str	r3, [sp, #4]
 8010e50:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010e54:	9300      	str	r3, [sp, #0]
 8010e56:	4613      	mov	r3, r2
 8010e58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010e5a:	f000 fddf 	bl	8011a1c <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 8010e5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d009      	beq.n	8010e7a <compress_kitiku+0x106>
 8010e66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d005      	beq.n	8010e7a <compress_kitiku+0x106>
 8010e6e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d001      	beq.n	8010e7a <compress_kitiku+0x106>
 8010e76:	2301      	movs	r3, #1
 8010e78:	e000      	b.n	8010e7c <compress_kitiku+0x108>
 8010e7a:	2300      	movs	r3, #0
 8010e7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 8010e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e8e:	2b01      	cmp	r3, #1
 8010e90:	d102      	bne.n	8010e98 <compress_kitiku+0x124>
 8010e92:	2304      	movs	r3, #4
 8010e94:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010e96:	e002      	b.n	8010e9e <compress_kitiku+0x12a>
 8010e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
		update_coordinate(&x_left,&y_left,direction_left);
 8010e9e:	f107 011c 	add.w	r1, r7, #28
 8010ea2:	f107 0320 	add.w	r3, r7, #32
 8010ea6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fd fd85 	bl	800e9b8 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010eae:	6a38      	ldr	r0, [r7, #32]
 8010eb0:	69f9      	ldr	r1, [r7, #28]
 8010eb2:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010eb6:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010eba:	9301      	str	r3, [sp, #4]
 8010ebc:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010ec0:	9300      	str	r3, [sp, #0]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010ec6:	f000 fda9 	bl	8011a1c <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 8010eca:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d009      	beq.n	8010ee6 <compress_kitiku+0x172>
 8010ed2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d005      	beq.n	8010ee6 <compress_kitiku+0x172>
 8010eda:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d001      	beq.n	8010ee6 <compress_kitiku+0x172>
 8010ee2:	2301      	movs	r3, #1
 8010ee4:	e000      	b.n	8010ee8 <compress_kitiku+0x174>
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
 8010eec:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8010ef0:	f003 0301 	and.w	r3, r3, #1
 8010ef4:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 8010ef8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010efa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010efc:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8010f00:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 8010f04:	9301      	str	r3, [sp, #4]
 8010f06:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 8010f0a:	9300      	str	r3, [sp, #0]
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010f10:	f000 fc28 	bl	8011764 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010f18:	f107 0614 	add.w	r6, r7, #20
 8010f1c:	f107 0516 	add.w	r5, r7, #22
 8010f20:	f107 0418 	add.w	r4, r7, #24
 8010f24:	f107 001a 	add.w	r0, r7, #26
 8010f28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010f2a:	9102      	str	r1, [sp, #8]
 8010f2c:	9201      	str	r2, [sp, #4]
 8010f2e:	9300      	str	r3, [sp, #0]
 8010f30:	4633      	mov	r3, r6
 8010f32:	462a      	mov	r2, r5
 8010f34:	4621      	mov	r1, r4
 8010f36:	f000 fed3 	bl	8011ce0 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 8010f3a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d001      	beq.n	8010f46 <compress_kitiku+0x1d2>
 8010f42:	23ff      	movs	r3, #255	; 0xff
 8010f44:	837b      	strh	r3, [r7, #26]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 8010f46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d001      	beq.n	8010f52 <compress_kitiku+0x1de>
 8010f4e:	23ff      	movs	r3, #255	; 0xff
 8010f50:	833b      	strh	r3, [r7, #24]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 8010f52:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010f56:	2b00      	cmp	r3, #0
 8010f58:	d001      	beq.n	8010f5e <compress_kitiku+0x1ea>
 8010f5a:	23ff      	movs	r3, #255	; 0xff
 8010f5c:	82bb      	strh	r3, [r7, #20]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 8010f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f62:	496c      	ldr	r1, [pc, #432]	; (8011114 <compress_kitiku+0x3a0>)
 8010f64:	0112      	lsls	r2, r2, #4
 8010f66:	4413      	add	r3, r2
 8010f68:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010f6c:	2b01      	cmp	r3, #1
 8010f6e:	f240 8099 	bls.w	80110a4 <compress_kitiku+0x330>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 8010f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d103      	bne.n	8010f80 <compress_kitiku+0x20c>
 8010f78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f7a:	2b0d      	cmp	r3, #13
 8010f7c:	f300 8094 	bgt.w	80110a8 <compress_kitiku+0x334>
		if (direction_now==2 && x_now>=14) {break;}
 8010f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f82:	2b02      	cmp	r3, #2
 8010f84:	d103      	bne.n	8010f8e <compress_kitiku+0x21a>
 8010f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f88:	2b0d      	cmp	r3, #13
 8010f8a:	f300 808f 	bgt.w	80110ac <compress_kitiku+0x338>
		if (direction_now==3 && y_now<=1) {break;}
 8010f8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f90:	2b03      	cmp	r3, #3
 8010f92:	d103      	bne.n	8010f9c <compress_kitiku+0x228>
 8010f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	f340 808a 	ble.w	80110b0 <compress_kitiku+0x33c>
		if (direction_now==4 && x_now<=1) {break;}
 8010f9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010f9e:	2b04      	cmp	r3, #4
 8010fa0:	d103      	bne.n	8010faa <compress_kitiku+0x236>
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa4:	2b01      	cmp	r3, #1
 8010fa6:	f340 8085 	ble.w	80110b4 <compress_kitiku+0x340>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 8010faa:	8b7b      	ldrh	r3, [r7, #26]
 8010fac:	2bff      	cmp	r3, #255	; 0xff
 8010fae:	d10c      	bne.n	8010fca <compress_kitiku+0x256>
 8010fb0:	8b3b      	ldrh	r3, [r7, #24]
 8010fb2:	2bff      	cmp	r3, #255	; 0xff
 8010fb4:	d109      	bne.n	8010fca <compress_kitiku+0x256>
 8010fb6:	8abb      	ldrh	r3, [r7, #20]
 8010fb8:	2bff      	cmp	r3, #255	; 0xff
 8010fba:	d106      	bne.n	8010fca <compress_kitiku+0x256>
 8010fbc:	8afb      	ldrh	r3, [r7, #22]
 8010fbe:	2bff      	cmp	r3, #255	; 0xff
 8010fc0:	d103      	bne.n	8010fca <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8010fc2:	4b55      	ldr	r3, [pc, #340]	; (8011118 <compress_kitiku+0x3a4>)
 8010fc4:	2201      	movs	r2, #1
 8010fc6:	701a      	strb	r2, [r3, #0]
		break;
 8010fc8:	e077      	b.n	80110ba <compress_kitiku+0x346>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8010fca:	8b7a      	ldrh	r2, [r7, #26]
 8010fcc:	8b3b      	ldrh	r3, [r7, #24]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d814      	bhi.n	8010ffc <compress_kitiku+0x288>
 8010fd2:	8b7a      	ldrh	r2, [r7, #26]
 8010fd4:	8abb      	ldrh	r3, [r7, #20]
 8010fd6:	429a      	cmp	r2, r3
 8010fd8:	d810      	bhi.n	8010ffc <compress_kitiku+0x288>
 8010fda:	8b7a      	ldrh	r2, [r7, #26]
 8010fdc:	8afb      	ldrh	r3, [r7, #22]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d80c      	bhi.n	8010ffc <compress_kitiku+0x288>
		// 直進
			if(look_f){
 8010fe2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	d005      	beq.n	8010ff6 <compress_kitiku+0x282>
				*kitiku_distance += 2;
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	1c9a      	adds	r2, r3, #2
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	601a      	str	r2, [r3, #0]
 8010ff4:	e002      	b.n	8010ffc <compress_kitiku+0x288>
			}else{
				kitiku = 0;
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8010ffa:	e05e      	b.n	80110ba <compress_kitiku+0x346>
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010ffc:	8b3a      	ldrh	r2, [r7, #24]
 8010ffe:	8b7b      	ldrh	r3, [r7, #26]
 8011000:	429a      	cmp	r2, r3
 8011002:	d211      	bcs.n	8011028 <compress_kitiku+0x2b4>
 8011004:	8b3a      	ldrh	r2, [r7, #24]
 8011006:	8abb      	ldrh	r3, [r7, #20]
 8011008:	429a      	cmp	r2, r3
 801100a:	d80d      	bhi.n	8011028 <compress_kitiku+0x2b4>
 801100c:	8b3a      	ldrh	r2, [r7, #24]
 801100e:	8afb      	ldrh	r3, [r7, #22]
 8011010:	429a      	cmp	r2, r3
 8011012:	d809      	bhi.n	8011028 <compress_kitiku+0x2b4>
		// 右旋回
			if(look_r){
 8011014:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8011018:	2b00      	cmp	r3, #0
 801101a:	d002      	beq.n	8011022 <compress_kitiku+0x2ae>
				kitiku = 0;
 801101c:	2300      	movs	r3, #0
 801101e:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011020:	e04b      	b.n	80110ba <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 8011022:	2300      	movs	r3, #0
 8011024:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011026:	e048      	b.n	80110ba <compress_kitiku+0x346>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8011028:	8aba      	ldrh	r2, [r7, #20]
 801102a:	8b7b      	ldrh	r3, [r7, #26]
 801102c:	429a      	cmp	r2, r3
 801102e:	d211      	bcs.n	8011054 <compress_kitiku+0x2e0>
 8011030:	8aba      	ldrh	r2, [r7, #20]
 8011032:	8b3b      	ldrh	r3, [r7, #24]
 8011034:	429a      	cmp	r2, r3
 8011036:	d20d      	bcs.n	8011054 <compress_kitiku+0x2e0>
 8011038:	8aba      	ldrh	r2, [r7, #20]
 801103a:	8afb      	ldrh	r3, [r7, #22]
 801103c:	429a      	cmp	r2, r3
 801103e:	d809      	bhi.n	8011054 <compress_kitiku+0x2e0>
		// 左旋回
			if(look_l){
 8011040:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <compress_kitiku+0x2da>
				kitiku = 0;
 8011048:	2300      	movs	r3, #0
 801104a:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 801104c:	e035      	b.n	80110ba <compress_kitiku+0x346>
			}else{
				kitiku = 0;
 801104e:	2300      	movs	r3, #0
 8011050:	647b      	str	r3, [r7, #68]	; 0x44
				break;
 8011052:	e032      	b.n	80110ba <compress_kitiku+0x346>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 8011054:	8afa      	ldrh	r2, [r7, #22]
 8011056:	8b7b      	ldrh	r3, [r7, #26]
 8011058:	429a      	cmp	r2, r3
 801105a:	d20a      	bcs.n	8011072 <compress_kitiku+0x2fe>
 801105c:	8afa      	ldrh	r2, [r7, #22]
 801105e:	8b3b      	ldrh	r3, [r7, #24]
 8011060:	429a      	cmp	r2, r3
 8011062:	d206      	bcs.n	8011072 <compress_kitiku+0x2fe>
								&& back_count < left_count){
 8011064:	8afa      	ldrh	r2, [r7, #22]
 8011066:	8abb      	ldrh	r3, [r7, #20]
 8011068:	429a      	cmp	r2, r3
 801106a:	d202      	bcs.n	8011072 <compress_kitiku+0x2fe>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 801106c:	2300      	movs	r3, #0
 801106e:	647b      	str	r3, [r7, #68]	; 0x44
			break;
 8011070:	e023      	b.n	80110ba <compress_kitiku+0x346>
			direction_now+=2;
		}


		if (direction_now == 5) {
 8011072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011074:	2b05      	cmp	r3, #5
 8011076:	d101      	bne.n	801107c <compress_kitiku+0x308>
			direction_now = 1;
 8011078:	2301      	movs	r3, #1
 801107a:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 6) {
 801107c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801107e:	2b06      	cmp	r3, #6
 8011080:	d101      	bne.n	8011086 <compress_kitiku+0x312>
			direction_now = 2;
 8011082:	2302      	movs	r3, #2
 8011084:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == 0) {
 8011086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011088:	2b00      	cmp	r3, #0
 801108a:	d101      	bne.n	8011090 <compress_kitiku+0x31c>
			direction_now = 4;
 801108c:	2304      	movs	r3, #4
 801108e:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (direction_now == -1) {
 8011090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011096:	d101      	bne.n	801109c <compress_kitiku+0x328>
			direction_now = 3;
 8011098:	2303      	movs	r3, #3
 801109a:	657b      	str	r3, [r7, #84]	; 0x54
		}
		if (kitiku == 0) {
 801109c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d00a      	beq.n	80110b8 <compress_kitiku+0x344>
		update_coordinate(&x_now,&y_now,direction_now);
 80110a2:	e67c      	b.n	8010d9e <compress_kitiku+0x2a>
			break;
 80110a4:	bf00      	nop
 80110a6:	e008      	b.n	80110ba <compress_kitiku+0x346>
		if (direction_now==1 && y_now>=14) {break;}
 80110a8:	bf00      	nop
 80110aa:	e006      	b.n	80110ba <compress_kitiku+0x346>
		if (direction_now==2 && x_now>=14) {break;}
 80110ac:	bf00      	nop
 80110ae:	e004      	b.n	80110ba <compress_kitiku+0x346>
		if (direction_now==3 && y_now<=1) {break;}
 80110b0:	bf00      	nop
 80110b2:	e002      	b.n	80110ba <compress_kitiku+0x346>
		if (direction_now==4 && x_now<=1) {break;}
 80110b4:	bf00      	nop
 80110b6:	e000      	b.n	80110ba <compress_kitiku+0x346>

			break;
 80110b8:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 80110ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110bc:	3302      	adds	r3, #2
 80110be:	64bb      	str	r3, [r7, #72]	; 0x48
	if (direction2 == 5) {
 80110c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110c2:	2b05      	cmp	r3, #5
 80110c4:	d101      	bne.n	80110ca <compress_kitiku+0x356>
				direction2 = 1;
 80110c6:	2301      	movs	r3, #1
 80110c8:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 6) {
 80110ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110cc:	2b06      	cmp	r3, #6
 80110ce:	d101      	bne.n	80110d4 <compress_kitiku+0x360>
				direction2 = 2;
 80110d0:	2302      	movs	r3, #2
 80110d2:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == 0) {
 80110d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d101      	bne.n	80110de <compress_kitiku+0x36a>
				direction2 = 4;
 80110da:	2304      	movs	r3, #4
 80110dc:	64bb      	str	r3, [r7, #72]	; 0x48
			}
			if (direction2 == -1) {
 80110de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80110e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110e4:	d101      	bne.n	80110ea <compress_kitiku+0x376>
				direction2 = 3;
 80110e6:	2303      	movs	r3, #3
 80110e8:	64bb      	str	r3, [r7, #72]	; 0x48
			}

	update_coordinate(&x_now,&y_now,direction2);
 80110ea:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80110ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80110f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80110f4:	4618      	mov	r0, r3
 80110f6:	f7fd fc5f 	bl	800e9b8 <update_coordinate>

	*x=x_now;
 80110fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8011100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011102:	68bb      	ldr	r3, [r7, #8]
 8011104:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801110a:	601a      	str	r2, [r3, #0]

}
 801110c:	bf00      	nop
 801110e:	375c      	adds	r7, #92	; 0x5c
 8011110:	46bd      	mov	sp, r7
 8011112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011114:	200011f4 	.word	0x200011f4
 8011118:	20000813 	.word	0x20000813

0801111c <maze_out_matlab>:
uint16_t walk_count[16][16]; //歩数いれる箱
DIJKSTRA Dijkstra;
STACK_T g_Goal_x;
STACK_T g_Goal_y;

void maze_out_matlab(void){
 801111c:	b580      	push	{r7, lr}
 801111e:	b082      	sub	sp, #8
 8011120:	af00      	add	r7, sp, #0

	int tt=0;
 8011122:	2300      	movs	r3, #0
 8011124:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 8011126:	e018      	b.n	801115a <maze_out_matlab+0x3e>
		printf("g_maze_row(%d) = %d;\n",tt+1,wall.row[tt]);
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	1c59      	adds	r1, r3, #1
 801112c:	4a0f      	ldr	r2, [pc, #60]	; (801116c <maze_out_matlab+0x50>)
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011134:	461a      	mov	r2, r3
 8011136:	480e      	ldr	r0, [pc, #56]	; (8011170 <maze_out_matlab+0x54>)
 8011138:	f010 f9ec 	bl	8021514 <iprintf>
		printf("g_maze_column(%d) = %d;\n",tt+1,wall.column[tt]);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	1c59      	adds	r1, r3, #1
 8011140:	4a0a      	ldr	r2, [pc, #40]	; (801116c <maze_out_matlab+0x50>)
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	330e      	adds	r3, #14
 8011146:	009b      	lsls	r3, r3, #2
 8011148:	4413      	add	r3, r2
 801114a:	685b      	ldr	r3, [r3, #4]
 801114c:	461a      	mov	r2, r3
 801114e:	4809      	ldr	r0, [pc, #36]	; (8011174 <maze_out_matlab+0x58>)
 8011150:	f010 f9e0 	bl	8021514 <iprintf>
		tt++;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	3301      	adds	r3, #1
 8011158:	607b      	str	r3, [r7, #4]
	while (tt <= 14) {
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b0e      	cmp	r3, #14
 801115e:	dde3      	ble.n	8011128 <maze_out_matlab+0xc>
	}
	tt = 0;
 8011160:	2300      	movs	r3, #0
 8011162:	607b      	str	r3, [r7, #4]

}
 8011164:	bf00      	nop
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	20001010 	.word	0x20001010
 8011170:	08024f94 	.word	0x08024f94
 8011174:	08024fac 	.word	0x08024fac

08011178 <maze_clear>:



void maze_clear(void) { //初期化
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0

	Dijkstra_maker_flag=0;
 801117e:	4b6c      	ldr	r3, [pc, #432]	; (8011330 <maze_clear+0x1b8>)
 8011180:	2200      	movs	r2, #0
 8011182:	701a      	strb	r2, [r3, #0]
	int tt = 0;
 8011184:	2300      	movs	r3, #0
 8011186:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 8011188:	e01b      	b.n	80111c2 <maze_clear+0x4a>
		wall.row[tt] = 0;
 801118a:	4a6a      	ldr	r2, [pc, #424]	; (8011334 <maze_clear+0x1bc>)
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	2100      	movs	r1, #0
 8011190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column[tt] = 0;
 8011194:	4a67      	ldr	r2, [pc, #412]	; (8011334 <maze_clear+0x1bc>)
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	330e      	adds	r3, #14
 801119a:	009b      	lsls	r3, r3, #2
 801119c:	4413      	add	r3, r2
 801119e:	2200      	movs	r2, #0
 80111a0:	605a      	str	r2, [r3, #4]
		wall.row_look[tt] = 0;
 80111a2:	4a64      	ldr	r2, [pc, #400]	; (8011334 <maze_clear+0x1bc>)
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	331e      	adds	r3, #30
 80111a8:	2100      	movs	r1, #0
 80111aa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		wall.column_look[tt] = 0;
 80111ae:	4a61      	ldr	r2, [pc, #388]	; (8011334 <maze_clear+0x1bc>)
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	332c      	adds	r3, #44	; 0x2c
 80111b4:	009b      	lsls	r3, r3, #2
 80111b6:	4413      	add	r3, r2
 80111b8:	2200      	movs	r2, #0
 80111ba:	605a      	str	r2, [r3, #4]
		tt++;
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	3301      	adds	r3, #1
 80111c0:	60fb      	str	r3, [r7, #12]
	while (tt <= 14) {
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2b0e      	cmp	r3, #14
 80111c6:	dde0      	ble.n	801118a <maze_clear+0x12>
	}
	tt = 0;
 80111c8:	2300      	movs	r3, #0
 80111ca:	60fb      	str	r3, [r7, #12]
//	wall.row[0]=0;wall.row[1]=2;wall.row[2]=32762;wall.row[3]=50;wall.row[4]=16320;wall.row[5]=423;wall.row[6]=105;wall.row[7]=32490;
//	wall.row[8]=469;wall.row[9]=533;wall.row[10]=1258;wall.row[11]=3182;wall.row[12]=7837;wall.row[13]=13818;wall.row[14]=57342;
//	wall.column[0] = 20499;wall.column[1] = 8301;wall.column[2] = 61;wall.column[3] = 50;wall.column[4] = 6261;wall.column[5] = 10130;wall.column[6] = 4117;wall.column[7] = 3149;
//	wall.column[8] = 16085;wall.column[9] = 365;wall.column[10] = 725;wall.column[11] = 9837;wall.column[12] = 2773;wall.column[13] = 23149;wall.column[14] = 16381;
	    wall.column[0] = 0b0000011000011011;
 80111cc:	4b59      	ldr	r3, [pc, #356]	; (8011334 <maze_clear+0x1bc>)
 80111ce:	f240 621b 	movw	r2, #1563	; 0x61b
 80111d2:	63da      	str	r2, [r3, #60]	; 0x3c
	    wall.column[1] = 0b0000000011001000;
 80111d4:	4b57      	ldr	r3, [pc, #348]	; (8011334 <maze_clear+0x1bc>)
 80111d6:	22c8      	movs	r2, #200	; 0xc8
 80111d8:	641a      	str	r2, [r3, #64]	; 0x40
	    wall.column[2] = 0b0000000110000100;
 80111da:	4b56      	ldr	r3, [pc, #344]	; (8011334 <maze_clear+0x1bc>)
 80111dc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80111e0:	645a      	str	r2, [r3, #68]	; 0x44
	    wall.column[3] = 0b0000011110110000;
 80111e2:	4b54      	ldr	r3, [pc, #336]	; (8011334 <maze_clear+0x1bc>)
 80111e4:	f44f 62f6 	mov.w	r2, #1968	; 0x7b0
 80111e8:	649a      	str	r2, [r3, #72]	; 0x48
	    wall.column[4] = 0b0000100100011000;
 80111ea:	4b52      	ldr	r3, [pc, #328]	; (8011334 <maze_clear+0x1bc>)
 80111ec:	f640 1218 	movw	r2, #2328	; 0x918
 80111f0:	64da      	str	r2, [r3, #76]	; 0x4c
	    wall.column[5] = 0b0000000000000000;
 80111f2:	4b50      	ldr	r3, [pc, #320]	; (8011334 <maze_clear+0x1bc>)
 80111f4:	2200      	movs	r2, #0
 80111f6:	651a      	str	r2, [r3, #80]	; 0x50
	    wall.column[6] = 0b0000000101000000;
 80111f8:	4b4e      	ldr	r3, [pc, #312]	; (8011334 <maze_clear+0x1bc>)
 80111fa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80111fe:	655a      	str	r2, [r3, #84]	; 0x54
	    wall.column[7] = 0b0011101111111110;
 8011200:	4b4c      	ldr	r3, [pc, #304]	; (8011334 <maze_clear+0x1bc>)
 8011202:	f643 32fe 	movw	r2, #15358	; 0x3bfe
 8011206:	659a      	str	r2, [r3, #88]	; 0x58
	    wall.column[8] = 0b0011111001011100;
 8011208:	4b4a      	ldr	r3, [pc, #296]	; (8011334 <maze_clear+0x1bc>)
 801120a:	f643 625c 	movw	r2, #15964	; 0x3e5c
 801120e:	65da      	str	r2, [r3, #92]	; 0x5c
	    wall.column[9] = 0b0000000000000000;
 8011210:	4b48      	ldr	r3, [pc, #288]	; (8011334 <maze_clear+0x1bc>)
 8011212:	2200      	movs	r2, #0
 8011214:	661a      	str	r2, [r3, #96]	; 0x60
	    wall.column[10] = 0b0000110110000000;
 8011216:	4b47      	ldr	r3, [pc, #284]	; (8011334 <maze_clear+0x1bc>)
 8011218:	f44f 6258 	mov.w	r2, #3456	; 0xd80
 801121c:	665a      	str	r2, [r3, #100]	; 0x64
	    wall.column[11] = 0b0000001001000100;
 801121e:	4b45      	ldr	r3, [pc, #276]	; (8011334 <maze_clear+0x1bc>)
 8011220:	f44f 7211 	mov.w	r2, #580	; 0x244
 8011224:	669a      	str	r2, [r3, #104]	; 0x68
	    wall.column[12] = 0b0110111001101010;
 8011226:	4b43      	ldr	r3, [pc, #268]	; (8011334 <maze_clear+0x1bc>)
 8011228:	f646 626a 	movw	r2, #28266	; 0x6e6a
 801122c:	66da      	str	r2, [r3, #108]	; 0x6c
	    wall.column[13] = 0b0011111111010100;
 801122e:	4b41      	ldr	r3, [pc, #260]	; (8011334 <maze_clear+0x1bc>)
 8011230:	f643 72d4 	movw	r2, #16340	; 0x3fd4
 8011234:	671a      	str	r2, [r3, #112]	; 0x70
	    wall.column[14] = 0b0111011010101000;
 8011236:	4b3f      	ldr	r3, [pc, #252]	; (8011334 <maze_clear+0x1bc>)
 8011238:	f247 62a8 	movw	r2, #30376	; 0x76a8
 801123c:	675a      	str	r2, [r3, #116]	; 0x74
	    wall.row[14] = 0b0110000000000000;
 801123e:	4b3d      	ldr	r3, [pc, #244]	; (8011334 <maze_clear+0x1bc>)
 8011240:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8011244:	639a      	str	r2, [r3, #56]	; 0x38
	    wall.row[13] = 0b0000000100000000;
 8011246:	4b3b      	ldr	r3, [pc, #236]	; (8011334 <maze_clear+0x1bc>)
 8011248:	f44f 7280 	mov.w	r2, #256	; 0x100
 801124c:	635a      	str	r2, [r3, #52]	; 0x34
	    wall.row[12] = 0b0000000000000000;
 801124e:	4b39      	ldr	r3, [pc, #228]	; (8011334 <maze_clear+0x1bc>)
 8011250:	2200      	movs	r2, #0
 8011252:	631a      	str	r2, [r3, #48]	; 0x30
	    wall.row[11] = 0b0000100000000110;
 8011254:	4b37      	ldr	r3, [pc, #220]	; (8011334 <maze_clear+0x1bc>)
 8011256:	f640 0206 	movw	r2, #2054	; 0x806
 801125a:	62da      	str	r2, [r3, #44]	; 0x2c
	    wall.row[10] = 0b0000000011101110;
 801125c:	4b35      	ldr	r3, [pc, #212]	; (8011334 <maze_clear+0x1bc>)
 801125e:	22ee      	movs	r2, #238	; 0xee
 8011260:	629a      	str	r2, [r3, #40]	; 0x28
	    wall.row[9] = 0b0000000011110000;
 8011262:	4b34      	ldr	r3, [pc, #208]	; (8011334 <maze_clear+0x1bc>)
 8011264:	22f0      	movs	r2, #240	; 0xf0
 8011266:	625a      	str	r2, [r3, #36]	; 0x24
	    wall.row[8] = 0b0001011001100110;
 8011268:	4b32      	ldr	r3, [pc, #200]	; (8011334 <maze_clear+0x1bc>)
 801126a:	f241 6266 	movw	r2, #5734	; 0x1666
 801126e:	621a      	str	r2, [r3, #32]
	    wall.row[7] = 0b0011001100000010;
 8011270:	4b30      	ldr	r3, [pc, #192]	; (8011334 <maze_clear+0x1bc>)
 8011272:	f243 3202 	movw	r2, #13058	; 0x3302
 8011276:	61da      	str	r2, [r3, #28]
	    wall.row[6] = 0b1011011000001000;
 8011278:	4b2e      	ldr	r3, [pc, #184]	; (8011334 <maze_clear+0x1bc>)
 801127a:	f24b 6208 	movw	r2, #46600	; 0xb608
 801127e:	619a      	str	r2, [r3, #24]
	    wall.row[5] = 0b0100111001111000;
 8011280:	4b2c      	ldr	r3, [pc, #176]	; (8011334 <maze_clear+0x1bc>)
 8011282:	f644 6278 	movw	r2, #20088	; 0x4e78
 8011286:	615a      	str	r2, [r3, #20]
	    wall.row[4] = 0b0101111001100001;
 8011288:	4b2a      	ldr	r3, [pc, #168]	; (8011334 <maze_clear+0x1bc>)
 801128a:	f645 6261 	movw	r2, #24161	; 0x5e61
 801128e:	611a      	str	r2, [r3, #16]
	    wall.row[3] = 0b0010000000001100;
 8011290:	4b28      	ldr	r3, [pc, #160]	; (8011334 <maze_clear+0x1bc>)
 8011292:	f242 020c 	movw	r2, #8204	; 0x200c
 8011296:	60da      	str	r2, [r3, #12]
	    wall.row[2] = 0b0101000000011010;
 8011298:	4b26      	ldr	r3, [pc, #152]	; (8011334 <maze_clear+0x1bc>)
 801129a:	f245 021a 	movw	r2, #20506	; 0x501a
 801129e:	609a      	str	r2, [r3, #8]
	    wall.row[1] = 0b0010011000000010;
 80112a0:	4b24      	ldr	r3, [pc, #144]	; (8011334 <maze_clear+0x1bc>)
 80112a2:	f242 6202 	movw	r2, #9730	; 0x2602
 80112a6:	605a      	str	r2, [r3, #4]
	    wall.row[0] = 0b0001101100000000;
 80112a8:	4b22      	ldr	r3, [pc, #136]	; (8011334 <maze_clear+0x1bc>)
 80112aa:	f44f 52d8 	mov.w	r2, #6912	; 0x1b00
 80112ae:	601a      	str	r2, [r3, #0]


	for(int i=0;i<=15;i++){
 80112b0:	2300      	movs	r3, #0
 80112b2:	60bb      	str	r3, [r7, #8]
 80112b4:	e022      	b.n	80112fc <maze_clear+0x184>
		for(int j=0;j<=14;j++){
 80112b6:	2300      	movs	r3, #0
 80112b8:	607b      	str	r3, [r7, #4]
 80112ba:	e019      	b.n	80112f0 <maze_clear+0x178>
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80112bc:	491e      	ldr	r1, [pc, #120]	; (8011338 <maze_clear+0x1c0>)
 80112be:	68ba      	ldr	r2, [r7, #8]
 80112c0:	4613      	mov	r3, r2
 80112c2:	011b      	lsls	r3, r3, #4
 80112c4:	1a9b      	subs	r3, r3, r2
 80112c6:	687a      	ldr	r2, [r7, #4]
 80112c8:	4413      	add	r3, r2
 80112ca:	33f0      	adds	r3, #240	; 0xf0
 80112cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112d0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 80112d4:	4918      	ldr	r1, [pc, #96]	; (8011338 <maze_clear+0x1c0>)
 80112d6:	68ba      	ldr	r2, [r7, #8]
 80112d8:	4613      	mov	r3, r2
 80112da:	011b      	lsls	r3, r3, #4
 80112dc:	1a9b      	subs	r3, r3, r2
 80112de:	687a      	ldr	r2, [r7, #4]
 80112e0:	4413      	add	r3, r2
 80112e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80112e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	3301      	adds	r3, #1
 80112ee:	607b      	str	r3, [r7, #4]
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b0e      	cmp	r3, #14
 80112f4:	dde2      	ble.n	80112bc <maze_clear+0x144>
	for(int i=0;i<=15;i++){
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	3301      	adds	r3, #1
 80112fa:	60bb      	str	r3, [r7, #8]
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2b0f      	cmp	r3, #15
 8011300:	ddd9      	ble.n	80112b6 <maze_clear+0x13e>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 8011302:	4b0d      	ldr	r3, [pc, #52]	; (8011338 <maze_clear+0x1c0>)
 8011304:	2200      	movs	r2, #0
 8011306:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 801130a:	4b0b      	ldr	r3, [pc, #44]	; (8011338 <maze_clear+0x1c0>)
 801130c:	2200      	movs	r2, #0
 801130e:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 8011312:	4b09      	ldr	r3, [pc, #36]	; (8011338 <maze_clear+0x1c0>)
 8011314:	2200      	movs	r2, #0
 8011316:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 801131a:	4b07      	ldr	r3, [pc, #28]	; (8011338 <maze_clear+0x1c0>)
 801131c:	2200      	movs	r2, #0
 801131e:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280


//ここから歩数マップの初期状態を作る．
create_StepCountMap_queue();
 8011322:	f003 fb27 	bl	8014974 <create_StepCountMap_queue>

//kokomade

}
 8011326:	bf00      	nop
 8011328:	3710      	adds	r7, #16
 801132a:	46bd      	mov	sp, r7
 801132c:	bd80      	pop	{r7, pc}
 801132e:	bf00      	nop
 8011330:	200011f0 	.word	0x200011f0
 8011334:	20001010 	.word	0x20001010
 8011338:	200013f4 	.word	0x200013f4

0801133c <update_wall>:



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 801133c:	b480      	push	{r7}
 801133e:	b085      	sub	sp, #20
 8011340:	af00      	add	r7, sp, #0
 8011342:	60f8      	str	r0, [r7, #12]
 8011344:	60b9      	str	r1, [r7, #8]
 8011346:	607a      	str	r2, [r7, #4]
 8011348:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	3b01      	subs	r3, #1
 801134e:	2b03      	cmp	r3, #3
 8011350:	f200 81ff 	bhi.w	8011752 <update_wall+0x416>
 8011354:	a201      	add	r2, pc, #4	; (adr r2, 801135c <update_wall+0x20>)
 8011356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801135a:	bf00      	nop
 801135c:	0801136d 	.word	0x0801136d
 8011360:	08011463 	.word	0x08011463
 8011364:	08011551 	.word	0x08011551
 8011368:	08011653 	.word	0x08011653
	case 1:
		if (y <= 14) {
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	2b0e      	cmp	r3, #14
 8011370:	dc1e      	bgt.n	80113b0 <update_wall+0x74>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8011372:	4a76      	ldr	r2, [pc, #472]	; (801154c <update_wall+0x210>)
 8011374:	68bb      	ldr	r3, [r7, #8]
 8011376:	331e      	adds	r3, #30
 8011378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801137c:	2101      	movs	r1, #1
 801137e:	68fa      	ldr	r2, [r7, #12]
 8011380:	fa01 f202 	lsl.w	r2, r1, r2
 8011384:	431a      	orrs	r2, r3
 8011386:	4971      	ldr	r1, [pc, #452]	; (801154c <update_wall+0x210>)
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	331e      	adds	r3, #30
 801138c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8011390:	78fb      	ldrb	r3, [r7, #3]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00c      	beq.n	80113b0 <update_wall+0x74>
 8011396:	4a6d      	ldr	r2, [pc, #436]	; (801154c <update_wall+0x210>)
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801139e:	2101      	movs	r1, #1
 80113a0:	68fa      	ldr	r2, [r7, #12]
 80113a2:	fa01 f202 	lsl.w	r2, r1, r2
 80113a6:	431a      	orrs	r2, r3
 80113a8:	4968      	ldr	r1, [pc, #416]	; (801154c <update_wall+0x210>)
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x >= 1) {
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	dd2a      	ble.n	801140c <update_wall+0xd0>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	3b01      	subs	r3, #1
 80113ba:	4a64      	ldr	r2, [pc, #400]	; (801154c <update_wall+0x210>)
 80113bc:	332c      	adds	r3, #44	; 0x2c
 80113be:	009b      	lsls	r3, r3, #2
 80113c0:	4413      	add	r3, r2
 80113c2:	685a      	ldr	r2, [r3, #4]
 80113c4:	2101      	movs	r1, #1
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	fa01 f303 	lsl.w	r3, r1, r3
 80113cc:	4619      	mov	r1, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	430a      	orrs	r2, r1
 80113d4:	495d      	ldr	r1, [pc, #372]	; (801154c <update_wall+0x210>)
 80113d6:	332c      	adds	r3, #44	; 0x2c
 80113d8:	009b      	lsls	r3, r3, #2
 80113da:	440b      	add	r3, r1
 80113dc:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 80113de:	7f3b      	ldrb	r3, [r7, #28]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d013      	beq.n	801140c <update_wall+0xd0>
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	3b01      	subs	r3, #1
 80113e8:	4a58      	ldr	r2, [pc, #352]	; (801154c <update_wall+0x210>)
 80113ea:	330e      	adds	r3, #14
 80113ec:	009b      	lsls	r3, r3, #2
 80113ee:	4413      	add	r3, r2
 80113f0:	685a      	ldr	r2, [r3, #4]
 80113f2:	2101      	movs	r1, #1
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	fa01 f303 	lsl.w	r3, r1, r3
 80113fa:	4619      	mov	r1, r3
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	3b01      	subs	r3, #1
 8011400:	430a      	orrs	r2, r1
 8011402:	4952      	ldr	r1, [pc, #328]	; (801154c <update_wall+0x210>)
 8011404:	330e      	adds	r3, #14
 8011406:	009b      	lsls	r3, r3, #2
 8011408:	440b      	add	r3, r1
 801140a:	605a      	str	r2, [r3, #4]
		}

		if (x <= 14) {
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	2b0e      	cmp	r3, #14
 8011410:	f300 8198 	bgt.w	8011744 <update_wall+0x408>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8011414:	4a4d      	ldr	r2, [pc, #308]	; (801154c <update_wall+0x210>)
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	332c      	adds	r3, #44	; 0x2c
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	4413      	add	r3, r2
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	2101      	movs	r1, #1
 8011422:	68ba      	ldr	r2, [r7, #8]
 8011424:	fa01 f202 	lsl.w	r2, r1, r2
 8011428:	431a      	orrs	r2, r3
 801142a:	4948      	ldr	r1, [pc, #288]	; (801154c <update_wall+0x210>)
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	332c      	adds	r3, #44	; 0x2c
 8011430:	009b      	lsls	r3, r3, #2
 8011432:	440b      	add	r3, r1
 8011434:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x] = wall.column[x] | (1 << y);}
 8011436:	7e3b      	ldrb	r3, [r7, #24]
 8011438:	2b00      	cmp	r3, #0
 801143a:	f000 8183 	beq.w	8011744 <update_wall+0x408>
 801143e:	4a43      	ldr	r2, [pc, #268]	; (801154c <update_wall+0x210>)
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	330e      	adds	r3, #14
 8011444:	009b      	lsls	r3, r3, #2
 8011446:	4413      	add	r3, r2
 8011448:	685b      	ldr	r3, [r3, #4]
 801144a:	2101      	movs	r1, #1
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	fa01 f202 	lsl.w	r2, r1, r2
 8011452:	431a      	orrs	r2, r3
 8011454:	493d      	ldr	r1, [pc, #244]	; (801154c <update_wall+0x210>)
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	330e      	adds	r3, #14
 801145a:	009b      	lsls	r3, r3, #2
 801145c:	440b      	add	r3, r1
 801145e:	605a      	str	r2, [r3, #4]
		}

		break;
 8011460:	e170      	b.n	8011744 <update_wall+0x408>
	case 2:
		if (x <= 14) {
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	2b0e      	cmp	r3, #14
 8011466:	dc24      	bgt.n	80114b2 <update_wall+0x176>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 8011468:	4a38      	ldr	r2, [pc, #224]	; (801154c <update_wall+0x210>)
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	332c      	adds	r3, #44	; 0x2c
 801146e:	009b      	lsls	r3, r3, #2
 8011470:	4413      	add	r3, r2
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	2101      	movs	r1, #1
 8011476:	68ba      	ldr	r2, [r7, #8]
 8011478:	fa01 f202 	lsl.w	r2, r1, r2
 801147c:	431a      	orrs	r2, r3
 801147e:	4933      	ldr	r1, [pc, #204]	; (801154c <update_wall+0x210>)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	332c      	adds	r3, #44	; 0x2c
 8011484:	009b      	lsls	r3, r3, #2
 8011486:	440b      	add	r3, r1
 8011488:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x] = wall.column[x] | (1 << y);}
 801148a:	78fb      	ldrb	r3, [r7, #3]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d010      	beq.n	80114b2 <update_wall+0x176>
 8011490:	4a2e      	ldr	r2, [pc, #184]	; (801154c <update_wall+0x210>)
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	330e      	adds	r3, #14
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	4413      	add	r3, r2
 801149a:	685b      	ldr	r3, [r3, #4]
 801149c:	2101      	movs	r1, #1
 801149e:	68ba      	ldr	r2, [r7, #8]
 80114a0:	fa01 f202 	lsl.w	r2, r1, r2
 80114a4:	431a      	orrs	r2, r3
 80114a6:	4929      	ldr	r1, [pc, #164]	; (801154c <update_wall+0x210>)
 80114a8:	68fb      	ldr	r3, [r7, #12]
 80114aa:	330e      	adds	r3, #14
 80114ac:	009b      	lsls	r3, r3, #2
 80114ae:	440b      	add	r3, r1
 80114b0:	605a      	str	r2, [r3, #4]
		}

		if (y <= 14) {
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	2b0e      	cmp	r3, #14
 80114b6:	dc1e      	bgt.n	80114f6 <update_wall+0x1ba>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 80114b8:	4a24      	ldr	r2, [pc, #144]	; (801154c <update_wall+0x210>)
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	331e      	adds	r3, #30
 80114be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114c2:	2101      	movs	r1, #1
 80114c4:	68fa      	ldr	r2, [r7, #12]
 80114c6:	fa01 f202 	lsl.w	r2, r1, r2
 80114ca:	431a      	orrs	r2, r3
 80114cc:	491f      	ldr	r1, [pc, #124]	; (801154c <update_wall+0x210>)
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	331e      	adds	r3, #30
 80114d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y] = wall.row[y] | (1 << x);}
 80114d6:	7f3b      	ldrb	r3, [r7, #28]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d00c      	beq.n	80114f6 <update_wall+0x1ba>
 80114dc:	4a1b      	ldr	r2, [pc, #108]	; (801154c <update_wall+0x210>)
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80114e4:	2101      	movs	r1, #1
 80114e6:	68fa      	ldr	r2, [r7, #12]
 80114e8:	fa01 f202 	lsl.w	r2, r1, r2
 80114ec:	431a      	orrs	r2, r3
 80114ee:	4917      	ldr	r1, [pc, #92]	; (801154c <update_wall+0x210>)
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y >= 1) {
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	f340 8125 	ble.w	8011748 <update_wall+0x40c>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	3b01      	subs	r3, #1
 8011502:	4a12      	ldr	r2, [pc, #72]	; (801154c <update_wall+0x210>)
 8011504:	331e      	adds	r3, #30
 8011506:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801150a:	2101      	movs	r1, #1
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	fa01 f303 	lsl.w	r3, r1, r3
 8011512:	4619      	mov	r1, r3
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	3b01      	subs	r3, #1
 8011518:	430a      	orrs	r2, r1
 801151a:	490c      	ldr	r1, [pc, #48]	; (801154c <update_wall+0x210>)
 801151c:	331e      	adds	r3, #30
 801151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 8011522:	7e3b      	ldrb	r3, [r7, #24]
 8011524:	2b00      	cmp	r3, #0
 8011526:	f000 810f 	beq.w	8011748 <update_wall+0x40c>
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	3b01      	subs	r3, #1
 801152e:	4a07      	ldr	r2, [pc, #28]	; (801154c <update_wall+0x210>)
 8011530:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011534:	2101      	movs	r1, #1
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	fa01 f303 	lsl.w	r3, r1, r3
 801153c:	4619      	mov	r1, r3
 801153e:	68bb      	ldr	r3, [r7, #8]
 8011540:	3b01      	subs	r3, #1
 8011542:	430a      	orrs	r2, r1
 8011544:	4901      	ldr	r1, [pc, #4]	; (801154c <update_wall+0x210>)
 8011546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 801154a:	e0fd      	b.n	8011748 <update_wall+0x40c>
 801154c:	20001010 	.word	0x20001010
	case 3:
		if (y >= 1) {
 8011550:	68bb      	ldr	r3, [r7, #8]
 8011552:	2b00      	cmp	r3, #0
 8011554:	dd24      	ble.n	80115a0 <update_wall+0x264>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	3b01      	subs	r3, #1
 801155a:	4a81      	ldr	r2, [pc, #516]	; (8011760 <update_wall+0x424>)
 801155c:	331e      	adds	r3, #30
 801155e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011562:	2101      	movs	r1, #1
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	fa01 f303 	lsl.w	r3, r1, r3
 801156a:	4619      	mov	r1, r3
 801156c:	68bb      	ldr	r3, [r7, #8]
 801156e:	3b01      	subs	r3, #1
 8011570:	430a      	orrs	r2, r1
 8011572:	497b      	ldr	r1, [pc, #492]	; (8011760 <update_wall+0x424>)
 8011574:	331e      	adds	r3, #30
 8011576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(front_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 801157a:	78fb      	ldrb	r3, [r7, #3]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d00f      	beq.n	80115a0 <update_wall+0x264>
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	3b01      	subs	r3, #1
 8011584:	4a76      	ldr	r2, [pc, #472]	; (8011760 <update_wall+0x424>)
 8011586:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801158a:	2101      	movs	r1, #1
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	fa01 f303 	lsl.w	r3, r1, r3
 8011592:	4619      	mov	r1, r3
 8011594:	68bb      	ldr	r3, [r7, #8]
 8011596:	3b01      	subs	r3, #1
 8011598:	430a      	orrs	r2, r1
 801159a:	4971      	ldr	r1, [pc, #452]	; (8011760 <update_wall+0x424>)
 801159c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (x <= 14) {
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b0e      	cmp	r3, #14
 80115a4:	dc24      	bgt.n	80115f0 <update_wall+0x2b4>
			wall.column_look[x] = wall.column_look[x] | (1 << y);
 80115a6:	4a6e      	ldr	r2, [pc, #440]	; (8011760 <update_wall+0x424>)
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	332c      	adds	r3, #44	; 0x2c
 80115ac:	009b      	lsls	r3, r3, #2
 80115ae:	4413      	add	r3, r2
 80115b0:	685b      	ldr	r3, [r3, #4]
 80115b2:	2101      	movs	r1, #1
 80115b4:	68ba      	ldr	r2, [r7, #8]
 80115b6:	fa01 f202 	lsl.w	r2, r1, r2
 80115ba:	431a      	orrs	r2, r3
 80115bc:	4968      	ldr	r1, [pc, #416]	; (8011760 <update_wall+0x424>)
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	332c      	adds	r3, #44	; 0x2c
 80115c2:	009b      	lsls	r3, r3, #2
 80115c4:	440b      	add	r3, r1
 80115c6:	605a      	str	r2, [r3, #4]
			if(left_wall){wall.column[x] = wall.column[x] | (1 << y);}
 80115c8:	7f3b      	ldrb	r3, [r7, #28]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d010      	beq.n	80115f0 <update_wall+0x2b4>
 80115ce:	4a64      	ldr	r2, [pc, #400]	; (8011760 <update_wall+0x424>)
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	330e      	adds	r3, #14
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	4413      	add	r3, r2
 80115d8:	685b      	ldr	r3, [r3, #4]
 80115da:	2101      	movs	r1, #1
 80115dc:	68ba      	ldr	r2, [r7, #8]
 80115de:	fa01 f202 	lsl.w	r2, r1, r2
 80115e2:	431a      	orrs	r2, r3
 80115e4:	495e      	ldr	r1, [pc, #376]	; (8011760 <update_wall+0x424>)
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	330e      	adds	r3, #14
 80115ea:	009b      	lsls	r3, r3, #2
 80115ec:	440b      	add	r3, r1
 80115ee:	605a      	str	r2, [r3, #4]
		}

		if (x >= 1) {
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	f340 80aa 	ble.w	801174c <update_wall+0x410>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	3b01      	subs	r3, #1
 80115fc:	4a58      	ldr	r2, [pc, #352]	; (8011760 <update_wall+0x424>)
 80115fe:	332c      	adds	r3, #44	; 0x2c
 8011600:	009b      	lsls	r3, r3, #2
 8011602:	4413      	add	r3, r2
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	2101      	movs	r1, #1
 8011608:	68bb      	ldr	r3, [r7, #8]
 801160a:	fa01 f303 	lsl.w	r3, r1, r3
 801160e:	4619      	mov	r1, r3
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	3b01      	subs	r3, #1
 8011614:	430a      	orrs	r2, r1
 8011616:	4952      	ldr	r1, [pc, #328]	; (8011760 <update_wall+0x424>)
 8011618:	332c      	adds	r3, #44	; 0x2c
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	440b      	add	r3, r1
 801161e:	605a      	str	r2, [r3, #4]
			if(right_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 8011620:	7e3b      	ldrb	r3, [r7, #24]
 8011622:	2b00      	cmp	r3, #0
 8011624:	f000 8092 	beq.w	801174c <update_wall+0x410>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	3b01      	subs	r3, #1
 801162c:	4a4c      	ldr	r2, [pc, #304]	; (8011760 <update_wall+0x424>)
 801162e:	330e      	adds	r3, #14
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	4413      	add	r3, r2
 8011634:	685a      	ldr	r2, [r3, #4]
 8011636:	2101      	movs	r1, #1
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	fa01 f303 	lsl.w	r3, r1, r3
 801163e:	4619      	mov	r1, r3
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	3b01      	subs	r3, #1
 8011644:	430a      	orrs	r2, r1
 8011646:	4946      	ldr	r1, [pc, #280]	; (8011760 <update_wall+0x424>)
 8011648:	330e      	adds	r3, #14
 801164a:	009b      	lsls	r3, r3, #2
 801164c:	440b      	add	r3, r1
 801164e:	605a      	str	r2, [r3, #4]
		}

		break;
 8011650:	e07c      	b.n	801174c <update_wall+0x410>
	case 4:
		if (x >= 1) {
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	2b00      	cmp	r3, #0
 8011656:	dd2a      	ble.n	80116ae <update_wall+0x372>
			wall.column_look[x - 1] = wall.column_look[x - 1] | (1 << y);
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	3b01      	subs	r3, #1
 801165c:	4a40      	ldr	r2, [pc, #256]	; (8011760 <update_wall+0x424>)
 801165e:	332c      	adds	r3, #44	; 0x2c
 8011660:	009b      	lsls	r3, r3, #2
 8011662:	4413      	add	r3, r2
 8011664:	685a      	ldr	r2, [r3, #4]
 8011666:	2101      	movs	r1, #1
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	fa01 f303 	lsl.w	r3, r1, r3
 801166e:	4619      	mov	r1, r3
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	3b01      	subs	r3, #1
 8011674:	430a      	orrs	r2, r1
 8011676:	493a      	ldr	r1, [pc, #232]	; (8011760 <update_wall+0x424>)
 8011678:	332c      	adds	r3, #44	; 0x2c
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	440b      	add	r3, r1
 801167e:	605a      	str	r2, [r3, #4]
			if(front_wall){wall.column[x - 1] = wall.column[x - 1] | (1 << y);}
 8011680:	78fb      	ldrb	r3, [r7, #3]
 8011682:	2b00      	cmp	r3, #0
 8011684:	d013      	beq.n	80116ae <update_wall+0x372>
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	3b01      	subs	r3, #1
 801168a:	4a35      	ldr	r2, [pc, #212]	; (8011760 <update_wall+0x424>)
 801168c:	330e      	adds	r3, #14
 801168e:	009b      	lsls	r3, r3, #2
 8011690:	4413      	add	r3, r2
 8011692:	685a      	ldr	r2, [r3, #4]
 8011694:	2101      	movs	r1, #1
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	fa01 f303 	lsl.w	r3, r1, r3
 801169c:	4619      	mov	r1, r3
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	3b01      	subs	r3, #1
 80116a2:	430a      	orrs	r2, r1
 80116a4:	492e      	ldr	r1, [pc, #184]	; (8011760 <update_wall+0x424>)
 80116a6:	330e      	adds	r3, #14
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	440b      	add	r3, r1
 80116ac:	605a      	str	r2, [r3, #4]
		}

		if (y >= 1) {
 80116ae:	68bb      	ldr	r3, [r7, #8]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	dd24      	ble.n	80116fe <update_wall+0x3c2>
			wall.row_look[y - 1] = wall.row_look[y - 1] | (1 << x);
 80116b4:	68bb      	ldr	r3, [r7, #8]
 80116b6:	3b01      	subs	r3, #1
 80116b8:	4a29      	ldr	r2, [pc, #164]	; (8011760 <update_wall+0x424>)
 80116ba:	331e      	adds	r3, #30
 80116bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80116c0:	2101      	movs	r1, #1
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	fa01 f303 	lsl.w	r3, r1, r3
 80116c8:	4619      	mov	r1, r3
 80116ca:	68bb      	ldr	r3, [r7, #8]
 80116cc:	3b01      	subs	r3, #1
 80116ce:	430a      	orrs	r2, r1
 80116d0:	4923      	ldr	r1, [pc, #140]	; (8011760 <update_wall+0x424>)
 80116d2:	331e      	adds	r3, #30
 80116d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(left_wall){wall.row[y - 1] = wall.row[y - 1] | (1 << x);}
 80116d8:	7f3b      	ldrb	r3, [r7, #28]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d00f      	beq.n	80116fe <update_wall+0x3c2>
 80116de:	68bb      	ldr	r3, [r7, #8]
 80116e0:	3b01      	subs	r3, #1
 80116e2:	4a1f      	ldr	r2, [pc, #124]	; (8011760 <update_wall+0x424>)
 80116e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80116e8:	2101      	movs	r1, #1
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	fa01 f303 	lsl.w	r3, r1, r3
 80116f0:	4619      	mov	r1, r3
 80116f2:	68bb      	ldr	r3, [r7, #8]
 80116f4:	3b01      	subs	r3, #1
 80116f6:	430a      	orrs	r2, r1
 80116f8:	4919      	ldr	r1, [pc, #100]	; (8011760 <update_wall+0x424>)
 80116fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		if (y <= 14) {
 80116fe:	68bb      	ldr	r3, [r7, #8]
 8011700:	2b0e      	cmp	r3, #14
 8011702:	dc25      	bgt.n	8011750 <update_wall+0x414>
			wall.row_look[y] = wall.row_look[y] | (1 << x);
 8011704:	4a16      	ldr	r2, [pc, #88]	; (8011760 <update_wall+0x424>)
 8011706:	68bb      	ldr	r3, [r7, #8]
 8011708:	331e      	adds	r3, #30
 801170a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801170e:	2101      	movs	r1, #1
 8011710:	68fa      	ldr	r2, [r7, #12]
 8011712:	fa01 f202 	lsl.w	r2, r1, r2
 8011716:	431a      	orrs	r2, r3
 8011718:	4911      	ldr	r1, [pc, #68]	; (8011760 <update_wall+0x424>)
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	331e      	adds	r3, #30
 801171e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(right_wall){wall.row[y] = wall.row[y] | (1 << x);}
 8011722:	7e3b      	ldrb	r3, [r7, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d013      	beq.n	8011750 <update_wall+0x414>
 8011728:	4a0d      	ldr	r2, [pc, #52]	; (8011760 <update_wall+0x424>)
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011730:	2101      	movs	r1, #1
 8011732:	68fa      	ldr	r2, [r7, #12]
 8011734:	fa01 f202 	lsl.w	r2, r1, r2
 8011738:	431a      	orrs	r2, r3
 801173a:	4909      	ldr	r1, [pc, #36]	; (8011760 <update_wall+0x424>)
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}

		break;
 8011742:	e005      	b.n	8011750 <update_wall+0x414>
		break;
 8011744:	bf00      	nop
 8011746:	e004      	b.n	8011752 <update_wall+0x416>
		break;
 8011748:	bf00      	nop
 801174a:	e002      	b.n	8011752 <update_wall+0x416>
		break;
 801174c:	bf00      	nop
 801174e:	e000      	b.n	8011752 <update_wall+0x416>
		break;
 8011750:	bf00      	nop

	}


}
 8011752:	bf00      	nop
 8011754:	3714      	adds	r7, #20
 8011756:	46bd      	mov	sp, r7
 8011758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801175c:	4770      	bx	lr
 801175e:	bf00      	nop
 8011760:	20001010 	.word	0x20001010

08011764 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011764:	b480      	push	{r7}
 8011766:	b085      	sub	sp, #20
 8011768:	af00      	add	r7, sp, #0
 801176a:	60f8      	str	r0, [r7, #12]
 801176c:	60b9      	str	r1, [r7, #8]
 801176e:	607a      	str	r2, [r7, #4]
 8011770:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	2201      	movs	r2, #1
 8011776:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011778:	69bb      	ldr	r3, [r7, #24]
 801177a:	2201      	movs	r2, #1
 801177c:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	2201      	movs	r2, #1
 8011782:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	3b01      	subs	r3, #1
 8011788:	2b03      	cmp	r3, #3
 801178a:	f200 813e 	bhi.w	8011a0a <get_wall+0x2a6>
 801178e:	a201      	add	r2, pc, #4	; (adr r2, 8011794 <get_wall+0x30>)
 8011790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011794:	080117a5 	.word	0x080117a5
 8011798:	0801183d 	.word	0x0801183d
 801179c:	080118d1 	.word	0x080118d1
 80117a0:	08011969 	.word	0x08011969
	case 1:
		if (y <= 14) {
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	2b0e      	cmp	r3, #14
 80117a8:	dc13      	bgt.n	80117d2 <get_wall+0x6e>
			*front_wall=((wall.row[y] & (1 << x)) == (1 << x));
 80117aa:	4a9b      	ldr	r2, [pc, #620]	; (8011a18 <get_wall+0x2b4>)
 80117ac:	68bb      	ldr	r3, [r7, #8]
 80117ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117b2:	2101      	movs	r1, #1
 80117b4:	68fa      	ldr	r2, [r7, #12]
 80117b6:	fa01 f202 	lsl.w	r2, r1, r2
 80117ba:	4013      	ands	r3, r2
 80117bc:	2101      	movs	r1, #1
 80117be:	68fa      	ldr	r2, [r7, #12]
 80117c0:	fa01 f202 	lsl.w	r2, r1, r2
 80117c4:	4293      	cmp	r3, r2
 80117c6:	bf0c      	ite	eq
 80117c8:	2301      	moveq	r3, #1
 80117ca:	2300      	movne	r3, #0
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	dd16      	ble.n	8011806 <get_wall+0xa2>
			*left_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	3b01      	subs	r3, #1
 80117dc:	4a8e      	ldr	r2, [pc, #568]	; (8011a18 <get_wall+0x2b4>)
 80117de:	330e      	adds	r3, #14
 80117e0:	009b      	lsls	r3, r3, #2
 80117e2:	4413      	add	r3, r2
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	2101      	movs	r1, #1
 80117e8:	68ba      	ldr	r2, [r7, #8]
 80117ea:	fa01 f202 	lsl.w	r2, r1, r2
 80117ee:	4013      	ands	r3, r2
 80117f0:	2101      	movs	r1, #1
 80117f2:	68ba      	ldr	r2, [r7, #8]
 80117f4:	fa01 f202 	lsl.w	r2, r1, r2
 80117f8:	4293      	cmp	r3, r2
 80117fa:	bf0c      	ite	eq
 80117fc:	2301      	moveq	r3, #1
 80117fe:	2300      	movne	r3, #0
 8011800:	b2da      	uxtb	r2, r3
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	2b0e      	cmp	r3, #14
 801180a:	f300 80f7 	bgt.w	80119fc <get_wall+0x298>
			*right_wall=((wall.column[x] & (1 << y)) == (1 << y));
 801180e:	4a82      	ldr	r2, [pc, #520]	; (8011a18 <get_wall+0x2b4>)
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	330e      	adds	r3, #14
 8011814:	009b      	lsls	r3, r3, #2
 8011816:	4413      	add	r3, r2
 8011818:	685b      	ldr	r3, [r3, #4]
 801181a:	2101      	movs	r1, #1
 801181c:	68ba      	ldr	r2, [r7, #8]
 801181e:	fa01 f202 	lsl.w	r2, r1, r2
 8011822:	4013      	ands	r3, r2
 8011824:	2101      	movs	r1, #1
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	fa01 f202 	lsl.w	r2, r1, r2
 801182c:	4293      	cmp	r3, r2
 801182e:	bf0c      	ite	eq
 8011830:	2301      	moveq	r3, #1
 8011832:	2300      	movne	r3, #0
 8011834:	b2da      	uxtb	r2, r3
 8011836:	69bb      	ldr	r3, [r7, #24]
 8011838:	701a      	strb	r2, [r3, #0]
		}
		break;
 801183a:	e0df      	b.n	80119fc <get_wall+0x298>
	case 2:
		if (x <= 14) {
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	2b0e      	cmp	r3, #14
 8011840:	dc15      	bgt.n	801186e <get_wall+0x10a>
			*front_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8011842:	4a75      	ldr	r2, [pc, #468]	; (8011a18 <get_wall+0x2b4>)
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	330e      	adds	r3, #14
 8011848:	009b      	lsls	r3, r3, #2
 801184a:	4413      	add	r3, r2
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	2101      	movs	r1, #1
 8011850:	68ba      	ldr	r2, [r7, #8]
 8011852:	fa01 f202 	lsl.w	r2, r1, r2
 8011856:	4013      	ands	r3, r2
 8011858:	2101      	movs	r1, #1
 801185a:	68ba      	ldr	r2, [r7, #8]
 801185c:	fa01 f202 	lsl.w	r2, r1, r2
 8011860:	4293      	cmp	r3, r2
 8011862:	bf0c      	ite	eq
 8011864:	2301      	moveq	r3, #1
 8011866:	2300      	movne	r3, #0
 8011868:	b2da      	uxtb	r2, r3
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 801186e:	68bb      	ldr	r3, [r7, #8]
 8011870:	2b0e      	cmp	r3, #14
 8011872:	dc13      	bgt.n	801189c <get_wall+0x138>
			*left_wall=((wall.row[y] & (1 << x)) == (1 << x));
 8011874:	4a68      	ldr	r2, [pc, #416]	; (8011a18 <get_wall+0x2b4>)
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801187c:	2101      	movs	r1, #1
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	fa01 f202 	lsl.w	r2, r1, r2
 8011884:	4013      	ands	r3, r2
 8011886:	2101      	movs	r1, #1
 8011888:	68fa      	ldr	r2, [r7, #12]
 801188a:	fa01 f202 	lsl.w	r2, r1, r2
 801188e:	4293      	cmp	r3, r2
 8011890:	bf0c      	ite	eq
 8011892:	2301      	moveq	r3, #1
 8011894:	2300      	movne	r3, #0
 8011896:	b2da      	uxtb	r2, r3
 8011898:	69fb      	ldr	r3, [r7, #28]
 801189a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	f340 80ae 	ble.w	8011a00 <get_wall+0x29c>
			*right_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80118a4:	68bb      	ldr	r3, [r7, #8]
 80118a6:	3b01      	subs	r3, #1
 80118a8:	4a5b      	ldr	r2, [pc, #364]	; (8011a18 <get_wall+0x2b4>)
 80118aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118ae:	2101      	movs	r1, #1
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	fa01 f202 	lsl.w	r2, r1, r2
 80118b6:	4013      	ands	r3, r2
 80118b8:	2101      	movs	r1, #1
 80118ba:	68fa      	ldr	r2, [r7, #12]
 80118bc:	fa01 f202 	lsl.w	r2, r1, r2
 80118c0:	4293      	cmp	r3, r2
 80118c2:	bf0c      	ite	eq
 80118c4:	2301      	moveq	r3, #1
 80118c6:	2300      	movne	r3, #0
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	69bb      	ldr	r3, [r7, #24]
 80118cc:	701a      	strb	r2, [r3, #0]
		}
		break;
 80118ce:	e097      	b.n	8011a00 <get_wall+0x29c>
	case 3:
		if (y >= 1) {
 80118d0:	68bb      	ldr	r3, [r7, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	dd14      	ble.n	8011900 <get_wall+0x19c>
			*front_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	3b01      	subs	r3, #1
 80118da:	4a4f      	ldr	r2, [pc, #316]	; (8011a18 <get_wall+0x2b4>)
 80118dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80118e0:	2101      	movs	r1, #1
 80118e2:	68fa      	ldr	r2, [r7, #12]
 80118e4:	fa01 f202 	lsl.w	r2, r1, r2
 80118e8:	4013      	ands	r3, r2
 80118ea:	2101      	movs	r1, #1
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	fa01 f202 	lsl.w	r2, r1, r2
 80118f2:	4293      	cmp	r3, r2
 80118f4:	bf0c      	ite	eq
 80118f6:	2301      	moveq	r3, #1
 80118f8:	2300      	movne	r3, #0
 80118fa:	b2da      	uxtb	r2, r3
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	2b0e      	cmp	r3, #14
 8011904:	dc15      	bgt.n	8011932 <get_wall+0x1ce>
			*left_wall=((wall.column[x] & (1 << y)) == (1 << y));
 8011906:	4a44      	ldr	r2, [pc, #272]	; (8011a18 <get_wall+0x2b4>)
 8011908:	68fb      	ldr	r3, [r7, #12]
 801190a:	330e      	adds	r3, #14
 801190c:	009b      	lsls	r3, r3, #2
 801190e:	4413      	add	r3, r2
 8011910:	685b      	ldr	r3, [r3, #4]
 8011912:	2101      	movs	r1, #1
 8011914:	68ba      	ldr	r2, [r7, #8]
 8011916:	fa01 f202 	lsl.w	r2, r1, r2
 801191a:	4013      	ands	r3, r2
 801191c:	2101      	movs	r1, #1
 801191e:	68ba      	ldr	r2, [r7, #8]
 8011920:	fa01 f202 	lsl.w	r2, r1, r2
 8011924:	4293      	cmp	r3, r2
 8011926:	bf0c      	ite	eq
 8011928:	2301      	moveq	r3, #1
 801192a:	2300      	movne	r3, #0
 801192c:	b2da      	uxtb	r2, r3
 801192e:	69fb      	ldr	r3, [r7, #28]
 8011930:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	dd65      	ble.n	8011a04 <get_wall+0x2a0>
			*right_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	3b01      	subs	r3, #1
 801193c:	4a36      	ldr	r2, [pc, #216]	; (8011a18 <get_wall+0x2b4>)
 801193e:	330e      	adds	r3, #14
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4413      	add	r3, r2
 8011944:	685b      	ldr	r3, [r3, #4]
 8011946:	2101      	movs	r1, #1
 8011948:	68ba      	ldr	r2, [r7, #8]
 801194a:	fa01 f202 	lsl.w	r2, r1, r2
 801194e:	4013      	ands	r3, r2
 8011950:	2101      	movs	r1, #1
 8011952:	68ba      	ldr	r2, [r7, #8]
 8011954:	fa01 f202 	lsl.w	r2, r1, r2
 8011958:	4293      	cmp	r3, r2
 801195a:	bf0c      	ite	eq
 801195c:	2301      	moveq	r3, #1
 801195e:	2300      	movne	r3, #0
 8011960:	b2da      	uxtb	r2, r3
 8011962:	69bb      	ldr	r3, [r7, #24]
 8011964:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011966:	e04d      	b.n	8011a04 <get_wall+0x2a0>
	case 4:
		if (x >= 1) {
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	dd16      	ble.n	801199c <get_wall+0x238>
			*front_wall=((wall.column[x - 1] & (1 << y)) == (1 << y));
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	3b01      	subs	r3, #1
 8011972:	4a29      	ldr	r2, [pc, #164]	; (8011a18 <get_wall+0x2b4>)
 8011974:	330e      	adds	r3, #14
 8011976:	009b      	lsls	r3, r3, #2
 8011978:	4413      	add	r3, r2
 801197a:	685b      	ldr	r3, [r3, #4]
 801197c:	2101      	movs	r1, #1
 801197e:	68ba      	ldr	r2, [r7, #8]
 8011980:	fa01 f202 	lsl.w	r2, r1, r2
 8011984:	4013      	ands	r3, r2
 8011986:	2101      	movs	r1, #1
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	fa01 f202 	lsl.w	r2, r1, r2
 801198e:	4293      	cmp	r3, r2
 8011990:	bf0c      	ite	eq
 8011992:	2301      	moveq	r3, #1
 8011994:	2300      	movne	r3, #0
 8011996:	b2da      	uxtb	r2, r3
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	dd14      	ble.n	80119cc <get_wall+0x268>
			*left_wall=((wall.row[y - 1] & (1 << x)) == (1 << x));
 80119a2:	68bb      	ldr	r3, [r7, #8]
 80119a4:	3b01      	subs	r3, #1
 80119a6:	4a1c      	ldr	r2, [pc, #112]	; (8011a18 <get_wall+0x2b4>)
 80119a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119ac:	2101      	movs	r1, #1
 80119ae:	68fa      	ldr	r2, [r7, #12]
 80119b0:	fa01 f202 	lsl.w	r2, r1, r2
 80119b4:	4013      	ands	r3, r2
 80119b6:	2101      	movs	r1, #1
 80119b8:	68fa      	ldr	r2, [r7, #12]
 80119ba:	fa01 f202 	lsl.w	r2, r1, r2
 80119be:	4293      	cmp	r3, r2
 80119c0:	bf0c      	ite	eq
 80119c2:	2301      	moveq	r3, #1
 80119c4:	2300      	movne	r3, #0
 80119c6:	b2da      	uxtb	r2, r3
 80119c8:	69fb      	ldr	r3, [r7, #28]
 80119ca:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 80119cc:	68bb      	ldr	r3, [r7, #8]
 80119ce:	2b0e      	cmp	r3, #14
 80119d0:	dc1a      	bgt.n	8011a08 <get_wall+0x2a4>
			*right_wall=((wall.row[y] & (1 << x)) == (1 << x));
 80119d2:	4a11      	ldr	r2, [pc, #68]	; (8011a18 <get_wall+0x2b4>)
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80119da:	2101      	movs	r1, #1
 80119dc:	68fa      	ldr	r2, [r7, #12]
 80119de:	fa01 f202 	lsl.w	r2, r1, r2
 80119e2:	4013      	ands	r3, r2
 80119e4:	2101      	movs	r1, #1
 80119e6:	68fa      	ldr	r2, [r7, #12]
 80119e8:	fa01 f202 	lsl.w	r2, r1, r2
 80119ec:	4293      	cmp	r3, r2
 80119ee:	bf0c      	ite	eq
 80119f0:	2301      	moveq	r3, #1
 80119f2:	2300      	movne	r3, #0
 80119f4:	b2da      	uxtb	r2, r3
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80119fa:	e005      	b.n	8011a08 <get_wall+0x2a4>
		break;
 80119fc:	bf00      	nop
 80119fe:	e004      	b.n	8011a0a <get_wall+0x2a6>
		break;
 8011a00:	bf00      	nop
 8011a02:	e002      	b.n	8011a0a <get_wall+0x2a6>
		break;
 8011a04:	bf00      	nop
 8011a06:	e000      	b.n	8011a0a <get_wall+0x2a6>
		break;
 8011a08:	bf00      	nop
	}

}
 8011a0a:	bf00      	nop
 8011a0c:	3714      	adds	r7, #20
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a14:	4770      	bx	lr
 8011a16:	bf00      	nop
 8011a18:	20001010 	.word	0x20001010

08011a1c <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011a1c:	b480      	push	{r7}
 8011a1e:	b085      	sub	sp, #20
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	60b9      	str	r1, [r7, #8]
 8011a26:	607a      	str	r2, [r7, #4]
 8011a28:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	2201      	movs	r2, #1
 8011a2e:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011a30:	69bb      	ldr	r3, [r7, #24]
 8011a32:	2201      	movs	r2, #1
 8011a34:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8011a36:	69fb      	ldr	r3, [r7, #28]
 8011a38:	2201      	movs	r2, #1
 8011a3a:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	2b03      	cmp	r3, #3
 8011a42:	f200 8144 	bhi.w	8011cce <get_wall_look+0x2b2>
 8011a46:	a201      	add	r2, pc, #4	; (adr r2, 8011a4c <get_wall_look+0x30>)
 8011a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a4c:	08011a5d 	.word	0x08011a5d
 8011a50:	08011af7 	.word	0x08011af7
 8011a54:	08011b8f 	.word	0x08011b8f
 8011a58:	08011c29 	.word	0x08011c29
	case 1:
		if (y <= 14) {
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2b0e      	cmp	r3, #14
 8011a60:	dc14      	bgt.n	8011a8c <get_wall_look+0x70>
			*front_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011a62:	4a9e      	ldr	r2, [pc, #632]	; (8011cdc <get_wall_look+0x2c0>)
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	331e      	adds	r3, #30
 8011a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a6c:	2101      	movs	r1, #1
 8011a6e:	68fa      	ldr	r2, [r7, #12]
 8011a70:	fa01 f202 	lsl.w	r2, r1, r2
 8011a74:	4013      	ands	r3, r2
 8011a76:	2101      	movs	r1, #1
 8011a78:	68fa      	ldr	r2, [r7, #12]
 8011a7a:	fa01 f202 	lsl.w	r2, r1, r2
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	bf0c      	ite	eq
 8011a82:	2301      	moveq	r3, #1
 8011a84:	2300      	movne	r3, #0
 8011a86:	b2da      	uxtb	r2, r3
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	dd16      	ble.n	8011ac0 <get_wall_look+0xa4>
			*left_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011a92:	68fb      	ldr	r3, [r7, #12]
 8011a94:	3b01      	subs	r3, #1
 8011a96:	4a91      	ldr	r2, [pc, #580]	; (8011cdc <get_wall_look+0x2c0>)
 8011a98:	332c      	adds	r3, #44	; 0x2c
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	4413      	add	r3, r2
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	2101      	movs	r1, #1
 8011aa2:	68ba      	ldr	r2, [r7, #8]
 8011aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8011aa8:	4013      	ands	r3, r2
 8011aaa:	2101      	movs	r1, #1
 8011aac:	68ba      	ldr	r2, [r7, #8]
 8011aae:	fa01 f202 	lsl.w	r2, r1, r2
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	bf0c      	ite	eq
 8011ab6:	2301      	moveq	r3, #1
 8011ab8:	2300      	movne	r3, #0
 8011aba:	b2da      	uxtb	r2, r3
 8011abc:	69fb      	ldr	r3, [r7, #28]
 8011abe:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	2b0e      	cmp	r3, #14
 8011ac4:	f300 80fc 	bgt.w	8011cc0 <get_wall_look+0x2a4>
			*right_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011ac8:	4a84      	ldr	r2, [pc, #528]	; (8011cdc <get_wall_look+0x2c0>)
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	332c      	adds	r3, #44	; 0x2c
 8011ace:	009b      	lsls	r3, r3, #2
 8011ad0:	4413      	add	r3, r2
 8011ad2:	685b      	ldr	r3, [r3, #4]
 8011ad4:	2101      	movs	r1, #1
 8011ad6:	68ba      	ldr	r2, [r7, #8]
 8011ad8:	fa01 f202 	lsl.w	r2, r1, r2
 8011adc:	4013      	ands	r3, r2
 8011ade:	2101      	movs	r1, #1
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	fa01 f202 	lsl.w	r2, r1, r2
 8011ae6:	4293      	cmp	r3, r2
 8011ae8:	bf0c      	ite	eq
 8011aea:	2301      	moveq	r3, #1
 8011aec:	2300      	movne	r3, #0
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011af4:	e0e4      	b.n	8011cc0 <get_wall_look+0x2a4>
	case 2:
		if (x <= 14) {
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	2b0e      	cmp	r3, #14
 8011afa:	dc15      	bgt.n	8011b28 <get_wall_look+0x10c>
			*front_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011afc:	4a77      	ldr	r2, [pc, #476]	; (8011cdc <get_wall_look+0x2c0>)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	332c      	adds	r3, #44	; 0x2c
 8011b02:	009b      	lsls	r3, r3, #2
 8011b04:	4413      	add	r3, r2
 8011b06:	685b      	ldr	r3, [r3, #4]
 8011b08:	2101      	movs	r1, #1
 8011b0a:	68ba      	ldr	r2, [r7, #8]
 8011b0c:	fa01 f202 	lsl.w	r2, r1, r2
 8011b10:	4013      	ands	r3, r2
 8011b12:	2101      	movs	r1, #1
 8011b14:	68ba      	ldr	r2, [r7, #8]
 8011b16:	fa01 f202 	lsl.w	r2, r1, r2
 8011b1a:	4293      	cmp	r3, r2
 8011b1c:	bf0c      	ite	eq
 8011b1e:	2301      	moveq	r3, #1
 8011b20:	2300      	movne	r3, #0
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	683b      	ldr	r3, [r7, #0]
 8011b26:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011b28:	68bb      	ldr	r3, [r7, #8]
 8011b2a:	2b0e      	cmp	r3, #14
 8011b2c:	dc14      	bgt.n	8011b58 <get_wall_look+0x13c>
			*left_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011b2e:	4a6b      	ldr	r2, [pc, #428]	; (8011cdc <get_wall_look+0x2c0>)
 8011b30:	68bb      	ldr	r3, [r7, #8]
 8011b32:	331e      	adds	r3, #30
 8011b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b38:	2101      	movs	r1, #1
 8011b3a:	68fa      	ldr	r2, [r7, #12]
 8011b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8011b40:	4013      	ands	r3, r2
 8011b42:	2101      	movs	r1, #1
 8011b44:	68fa      	ldr	r2, [r7, #12]
 8011b46:	fa01 f202 	lsl.w	r2, r1, r2
 8011b4a:	4293      	cmp	r3, r2
 8011b4c:	bf0c      	ite	eq
 8011b4e:	2301      	moveq	r3, #1
 8011b50:	2300      	movne	r3, #0
 8011b52:	b2da      	uxtb	r2, r3
 8011b54:	69fb      	ldr	r3, [r7, #28]
 8011b56:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011b58:	68bb      	ldr	r3, [r7, #8]
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	f340 80b2 	ble.w	8011cc4 <get_wall_look+0x2a8>
			*right_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	3b01      	subs	r3, #1
 8011b64:	4a5d      	ldr	r2, [pc, #372]	; (8011cdc <get_wall_look+0x2c0>)
 8011b66:	331e      	adds	r3, #30
 8011b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b6c:	2101      	movs	r1, #1
 8011b6e:	68fa      	ldr	r2, [r7, #12]
 8011b70:	fa01 f202 	lsl.w	r2, r1, r2
 8011b74:	4013      	ands	r3, r2
 8011b76:	2101      	movs	r1, #1
 8011b78:	68fa      	ldr	r2, [r7, #12]
 8011b7a:	fa01 f202 	lsl.w	r2, r1, r2
 8011b7e:	4293      	cmp	r3, r2
 8011b80:	bf0c      	ite	eq
 8011b82:	2301      	moveq	r3, #1
 8011b84:	2300      	movne	r3, #0
 8011b86:	b2da      	uxtb	r2, r3
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011b8c:	e09a      	b.n	8011cc4 <get_wall_look+0x2a8>
	case 3:
		if (y >= 1) {
 8011b8e:	68bb      	ldr	r3, [r7, #8]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dd15      	ble.n	8011bc0 <get_wall_look+0x1a4>
			*front_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011b94:	68bb      	ldr	r3, [r7, #8]
 8011b96:	3b01      	subs	r3, #1
 8011b98:	4a50      	ldr	r2, [pc, #320]	; (8011cdc <get_wall_look+0x2c0>)
 8011b9a:	331e      	adds	r3, #30
 8011b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ba0:	2101      	movs	r1, #1
 8011ba2:	68fa      	ldr	r2, [r7, #12]
 8011ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8011ba8:	4013      	ands	r3, r2
 8011baa:	2101      	movs	r1, #1
 8011bac:	68fa      	ldr	r2, [r7, #12]
 8011bae:	fa01 f202 	lsl.w	r2, r1, r2
 8011bb2:	4293      	cmp	r3, r2
 8011bb4:	bf0c      	ite	eq
 8011bb6:	2301      	moveq	r3, #1
 8011bb8:	2300      	movne	r3, #0
 8011bba:	b2da      	uxtb	r2, r3
 8011bbc:	683b      	ldr	r3, [r7, #0]
 8011bbe:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	2b0e      	cmp	r3, #14
 8011bc4:	dc15      	bgt.n	8011bf2 <get_wall_look+0x1d6>
			*left_wall=((wall.column_look[x] & (1 << y)) == (1 << y));
 8011bc6:	4a45      	ldr	r2, [pc, #276]	; (8011cdc <get_wall_look+0x2c0>)
 8011bc8:	68fb      	ldr	r3, [r7, #12]
 8011bca:	332c      	adds	r3, #44	; 0x2c
 8011bcc:	009b      	lsls	r3, r3, #2
 8011bce:	4413      	add	r3, r2
 8011bd0:	685b      	ldr	r3, [r3, #4]
 8011bd2:	2101      	movs	r1, #1
 8011bd4:	68ba      	ldr	r2, [r7, #8]
 8011bd6:	fa01 f202 	lsl.w	r2, r1, r2
 8011bda:	4013      	ands	r3, r2
 8011bdc:	2101      	movs	r1, #1
 8011bde:	68ba      	ldr	r2, [r7, #8]
 8011be0:	fa01 f202 	lsl.w	r2, r1, r2
 8011be4:	4293      	cmp	r3, r2
 8011be6:	bf0c      	ite	eq
 8011be8:	2301      	moveq	r3, #1
 8011bea:	2300      	movne	r3, #0
 8011bec:	b2da      	uxtb	r2, r3
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	dd67      	ble.n	8011cc8 <get_wall_look+0x2ac>
			*right_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	3b01      	subs	r3, #1
 8011bfc:	4a37      	ldr	r2, [pc, #220]	; (8011cdc <get_wall_look+0x2c0>)
 8011bfe:	332c      	adds	r3, #44	; 0x2c
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	4413      	add	r3, r2
 8011c04:	685b      	ldr	r3, [r3, #4]
 8011c06:	2101      	movs	r1, #1
 8011c08:	68ba      	ldr	r2, [r7, #8]
 8011c0a:	fa01 f202 	lsl.w	r2, r1, r2
 8011c0e:	4013      	ands	r3, r2
 8011c10:	2101      	movs	r1, #1
 8011c12:	68ba      	ldr	r2, [r7, #8]
 8011c14:	fa01 f202 	lsl.w	r2, r1, r2
 8011c18:	4293      	cmp	r3, r2
 8011c1a:	bf0c      	ite	eq
 8011c1c:	2301      	moveq	r3, #1
 8011c1e:	2300      	movne	r3, #0
 8011c20:	b2da      	uxtb	r2, r3
 8011c22:	69bb      	ldr	r3, [r7, #24]
 8011c24:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011c26:	e04f      	b.n	8011cc8 <get_wall_look+0x2ac>
	case 4:
		if (x >= 1) {
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	dd16      	ble.n	8011c5c <get_wall_look+0x240>
			*front_wall=((wall.column_look[x - 1] & (1 << y)) == (1 << y));
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	3b01      	subs	r3, #1
 8011c32:	4a2a      	ldr	r2, [pc, #168]	; (8011cdc <get_wall_look+0x2c0>)
 8011c34:	332c      	adds	r3, #44	; 0x2c
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	4413      	add	r3, r2
 8011c3a:	685b      	ldr	r3, [r3, #4]
 8011c3c:	2101      	movs	r1, #1
 8011c3e:	68ba      	ldr	r2, [r7, #8]
 8011c40:	fa01 f202 	lsl.w	r2, r1, r2
 8011c44:	4013      	ands	r3, r2
 8011c46:	2101      	movs	r1, #1
 8011c48:	68ba      	ldr	r2, [r7, #8]
 8011c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	bf0c      	ite	eq
 8011c52:	2301      	moveq	r3, #1
 8011c54:	2300      	movne	r3, #0
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	683b      	ldr	r3, [r7, #0]
 8011c5a:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	dd15      	ble.n	8011c8e <get_wall_look+0x272>
			*left_wall=((wall.row_look[y - 1] & (1 << x)) == (1 << x));
 8011c62:	68bb      	ldr	r3, [r7, #8]
 8011c64:	3b01      	subs	r3, #1
 8011c66:	4a1d      	ldr	r2, [pc, #116]	; (8011cdc <get_wall_look+0x2c0>)
 8011c68:	331e      	adds	r3, #30
 8011c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c6e:	2101      	movs	r1, #1
 8011c70:	68fa      	ldr	r2, [r7, #12]
 8011c72:	fa01 f202 	lsl.w	r2, r1, r2
 8011c76:	4013      	ands	r3, r2
 8011c78:	2101      	movs	r1, #1
 8011c7a:	68fa      	ldr	r2, [r7, #12]
 8011c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8011c80:	4293      	cmp	r3, r2
 8011c82:	bf0c      	ite	eq
 8011c84:	2301      	moveq	r3, #1
 8011c86:	2300      	movne	r3, #0
 8011c88:	b2da      	uxtb	r2, r3
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	2b0e      	cmp	r3, #14
 8011c92:	dc1b      	bgt.n	8011ccc <get_wall_look+0x2b0>
			*right_wall=((wall.row_look[y] & (1 << x)) == (1 << x));
 8011c94:	4a11      	ldr	r2, [pc, #68]	; (8011cdc <get_wall_look+0x2c0>)
 8011c96:	68bb      	ldr	r3, [r7, #8]
 8011c98:	331e      	adds	r3, #30
 8011c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c9e:	2101      	movs	r1, #1
 8011ca0:	68fa      	ldr	r2, [r7, #12]
 8011ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8011ca6:	4013      	ands	r3, r2
 8011ca8:	2101      	movs	r1, #1
 8011caa:	68fa      	ldr	r2, [r7, #12]
 8011cac:	fa01 f202 	lsl.w	r2, r1, r2
 8011cb0:	4293      	cmp	r3, r2
 8011cb2:	bf0c      	ite	eq
 8011cb4:	2301      	moveq	r3, #1
 8011cb6:	2300      	movne	r3, #0
 8011cb8:	b2da      	uxtb	r2, r3
 8011cba:	69bb      	ldr	r3, [r7, #24]
 8011cbc:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011cbe:	e005      	b.n	8011ccc <get_wall_look+0x2b0>
		break;
 8011cc0:	bf00      	nop
 8011cc2:	e004      	b.n	8011cce <get_wall_look+0x2b2>
		break;
 8011cc4:	bf00      	nop
 8011cc6:	e002      	b.n	8011cce <get_wall_look+0x2b2>
		break;
 8011cc8:	bf00      	nop
 8011cca:	e000      	b.n	8011cce <get_wall_look+0x2b2>
		break;
 8011ccc:	bf00      	nop
	}

}
 8011cce:	bf00      	nop
 8011cd0:	3714      	adds	r7, #20
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd8:	4770      	bx	lr
 8011cda:	bf00      	nop
 8011cdc:	20001010 	.word	0x20001010

08011ce0 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	607a      	str	r2, [r7, #4]
 8011cec:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 8011cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cf0:	2b0e      	cmp	r3, #14
 8011cf2:	dd02      	ble.n	8011cfa <search_AroundWalkCount+0x1a>
 8011cf4:	23ff      	movs	r3, #255	; 0xff
 8011cf6:	82fb      	strh	r3, [r7, #22]
 8011cf8:	e008      	b.n	8011d0c <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfc:	3301      	adds	r3, #1
 8011cfe:	493e      	ldr	r1, [pc, #248]	; (8011df8 <search_AroundWalkCount+0x118>)
 8011d00:	6a3a      	ldr	r2, [r7, #32]
 8011d02:	0112      	lsls	r2, r2, #4
 8011d04:	4413      	add	r3, r2
 8011d06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d0a:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 8011d0c:	6a3b      	ldr	r3, [r7, #32]
 8011d0e:	2b0e      	cmp	r3, #14
 8011d10:	dd02      	ble.n	8011d18 <search_AroundWalkCount+0x38>
 8011d12:	23ff      	movs	r3, #255	; 0xff
 8011d14:	82bb      	strh	r3, [r7, #20]
 8011d16:	e008      	b.n	8011d2a <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 8011d18:	6a3b      	ldr	r3, [r7, #32]
 8011d1a:	3301      	adds	r3, #1
 8011d1c:	4936      	ldr	r1, [pc, #216]	; (8011df8 <search_AroundWalkCount+0x118>)
 8011d1e:	011a      	lsls	r2, r3, #4
 8011d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d22:	4413      	add	r3, r2
 8011d24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d28:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 8011d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	dc02      	bgt.n	8011d36 <search_AroundWalkCount+0x56>
 8011d30:	23ff      	movs	r3, #255	; 0xff
 8011d32:	827b      	strh	r3, [r7, #18]
 8011d34:	e008      	b.n	8011d48 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 8011d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d38:	3b01      	subs	r3, #1
 8011d3a:	492f      	ldr	r1, [pc, #188]	; (8011df8 <search_AroundWalkCount+0x118>)
 8011d3c:	6a3a      	ldr	r2, [r7, #32]
 8011d3e:	0112      	lsls	r2, r2, #4
 8011d40:	4413      	add	r3, r2
 8011d42:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d46:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 8011d48:	6a3b      	ldr	r3, [r7, #32]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	dc02      	bgt.n	8011d54 <search_AroundWalkCount+0x74>
 8011d4e:	23ff      	movs	r3, #255	; 0xff
 8011d50:	823b      	strh	r3, [r7, #16]
 8011d52:	e008      	b.n	8011d66 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 8011d54:	6a3b      	ldr	r3, [r7, #32]
 8011d56:	3b01      	subs	r3, #1
 8011d58:	4927      	ldr	r1, [pc, #156]	; (8011df8 <search_AroundWalkCount+0x118>)
 8011d5a:	011a      	lsls	r2, r3, #4
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5e:	4413      	add	r3, r2
 8011d60:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011d64:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d68:	3b01      	subs	r3, #1
 8011d6a:	2b03      	cmp	r3, #3
 8011d6c:	d83e      	bhi.n	8011dec <search_AroundWalkCount+0x10c>
 8011d6e:	a201      	add	r2, pc, #4	; (adr r2, 8011d74 <search_AroundWalkCount+0x94>)
 8011d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d74:	08011d85 	.word	0x08011d85
 8011d78:	08011d9f 	.word	0x08011d9f
 8011d7c:	08011db9 	.word	0x08011db9
 8011d80:	08011dd3 	.word	0x08011dd3
	case 1:
		*front_count = north_count;
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	8afa      	ldrh	r2, [r7, #22]
 8011d88:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	8aba      	ldrh	r2, [r7, #20]
 8011d8e:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	8a7a      	ldrh	r2, [r7, #18]
 8011d94:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011d96:	683b      	ldr	r3, [r7, #0]
 8011d98:	8a3a      	ldrh	r2, [r7, #16]
 8011d9a:	801a      	strh	r2, [r3, #0]
		break;
 8011d9c:	e026      	b.n	8011dec <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	8aba      	ldrh	r2, [r7, #20]
 8011da2:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	8a7a      	ldrh	r2, [r7, #18]
 8011da8:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	8a3a      	ldrh	r2, [r7, #16]
 8011dae:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	8afa      	ldrh	r2, [r7, #22]
 8011db4:	801a      	strh	r2, [r3, #0]
		break;
 8011db6:	e019      	b.n	8011dec <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	8a7a      	ldrh	r2, [r7, #18]
 8011dbc:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011dbe:	68bb      	ldr	r3, [r7, #8]
 8011dc0:	8a3a      	ldrh	r2, [r7, #16]
 8011dc2:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	8afa      	ldrh	r2, [r7, #22]
 8011dc8:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	8aba      	ldrh	r2, [r7, #20]
 8011dce:	801a      	strh	r2, [r3, #0]
		break;
 8011dd0:	e00c      	b.n	8011dec <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	8a3a      	ldrh	r2, [r7, #16]
 8011dd6:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011dd8:	68bb      	ldr	r3, [r7, #8]
 8011dda:	8afa      	ldrh	r2, [r7, #22]
 8011ddc:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	8aba      	ldrh	r2, [r7, #20]
 8011de2:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011de4:	683b      	ldr	r3, [r7, #0]
 8011de6:	8a7a      	ldrh	r2, [r7, #18]
 8011de8:	801a      	strh	r2, [r3, #0]
		break;
 8011dea:	bf00      	nop

	}


}
 8011dec:	bf00      	nop
 8011dee:	371c      	adds	r7, #28
 8011df0:	46bd      	mov	sp, r7
 8011df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df6:	4770      	bx	lr
 8011df8:	200011f4 	.word	0x200011f4

08011dfc <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011dfc:	b480      	push	{r7}
 8011dfe:	b087      	sub	sp, #28
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	60f8      	str	r0, [r7, #12]
 8011e04:	60b9      	str	r1, [r7, #8]
 8011e06:	607a      	str	r2, [r7, #4]
 8011e08:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e0c:	2b0e      	cmp	r3, #14
 8011e0e:	dd03      	ble.n	8011e18 <search_AroundDijkstraCount+0x1c>
 8011e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e14:	82fb      	strh	r3, [r7, #22]
 8011e16:	e009      	b.n	8011e2c <search_AroundDijkstraCount+0x30>
	else {north_count = Dijkstra.row_count[x][y];}
 8011e18:	4944      	ldr	r1, [pc, #272]	; (8011f2c <search_AroundDijkstraCount+0x130>)
 8011e1a:	6a3a      	ldr	r2, [r7, #32]
 8011e1c:	4613      	mov	r3, r2
 8011e1e:	011b      	lsls	r3, r3, #4
 8011e20:	1a9b      	subs	r3, r3, r2
 8011e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e24:	4413      	add	r3, r2
 8011e26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e2a:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e2c:	6a3b      	ldr	r3, [r7, #32]
 8011e2e:	2b0e      	cmp	r3, #14
 8011e30:	dd03      	ble.n	8011e3a <search_AroundDijkstraCount+0x3e>
 8011e32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e36:	82bb      	strh	r3, [r7, #20]
 8011e38:	e00a      	b.n	8011e50 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.column_count[y][x];}
 8011e3a:	493c      	ldr	r1, [pc, #240]	; (8011f2c <search_AroundDijkstraCount+0x130>)
 8011e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e3e:	4613      	mov	r3, r2
 8011e40:	011b      	lsls	r3, r3, #4
 8011e42:	1a9b      	subs	r3, r3, r2
 8011e44:	6a3a      	ldr	r2, [r7, #32]
 8011e46:	4413      	add	r3, r2
 8011e48:	33f0      	adds	r3, #240	; 0xf0
 8011e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011e4e:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	dc03      	bgt.n	8011e5e <search_AroundDijkstraCount+0x62>
 8011e56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e5a:	827b      	strh	r3, [r7, #18]
 8011e5c:	e00a      	b.n	8011e74 <search_AroundDijkstraCount+0x78>
	else {south_count = Dijkstra.row_count[x][y-1];}
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e60:	1e59      	subs	r1, r3, #1
 8011e62:	4832      	ldr	r0, [pc, #200]	; (8011f2c <search_AroundDijkstraCount+0x130>)
 8011e64:	6a3a      	ldr	r2, [r7, #32]
 8011e66:	4613      	mov	r3, r2
 8011e68:	011b      	lsls	r3, r3, #4
 8011e6a:	1a9b      	subs	r3, r3, r2
 8011e6c:	440b      	add	r3, r1
 8011e6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e72:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT_DIJKSTRA;}
 8011e74:	6a3b      	ldr	r3, [r7, #32]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	dc03      	bgt.n	8011e82 <search_AroundDijkstraCount+0x86>
 8011e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011e7e:	823b      	strh	r3, [r7, #16]
 8011e80:	e00b      	b.n	8011e9a <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.column_count[y][x-1];}
 8011e82:	6a3b      	ldr	r3, [r7, #32]
 8011e84:	1e59      	subs	r1, r3, #1
 8011e86:	4829      	ldr	r0, [pc, #164]	; (8011f2c <search_AroundDijkstraCount+0x130>)
 8011e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	011b      	lsls	r3, r3, #4
 8011e8e:	1a9b      	subs	r3, r3, r2
 8011e90:	440b      	add	r3, r1
 8011e92:	33f0      	adds	r3, #240	; 0xf0
 8011e94:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011e98:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9c:	3b01      	subs	r3, #1
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d83e      	bhi.n	8011f20 <search_AroundDijkstraCount+0x124>
 8011ea2:	a201      	add	r2, pc, #4	; (adr r2, 8011ea8 <search_AroundDijkstraCount+0xac>)
 8011ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ea8:	08011eb9 	.word	0x08011eb9
 8011eac:	08011ed3 	.word	0x08011ed3
 8011eb0:	08011eed 	.word	0x08011eed
 8011eb4:	08011f07 	.word	0x08011f07
	case 1:
		*front_count = north_count;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	8afa      	ldrh	r2, [r7, #22]
 8011ebc:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	8aba      	ldrh	r2, [r7, #20]
 8011ec2:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	8a7a      	ldrh	r2, [r7, #18]
 8011ec8:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	8a3a      	ldrh	r2, [r7, #16]
 8011ece:	801a      	strh	r2, [r3, #0]
		break;
 8011ed0:	e026      	b.n	8011f20 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	8aba      	ldrh	r2, [r7, #20]
 8011ed6:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011ed8:	68bb      	ldr	r3, [r7, #8]
 8011eda:	8a7a      	ldrh	r2, [r7, #18]
 8011edc:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	8a3a      	ldrh	r2, [r7, #16]
 8011ee2:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	8afa      	ldrh	r2, [r7, #22]
 8011ee8:	801a      	strh	r2, [r3, #0]
		break;
 8011eea:	e019      	b.n	8011f20 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	8a7a      	ldrh	r2, [r7, #18]
 8011ef0:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011ef2:	68bb      	ldr	r3, [r7, #8]
 8011ef4:	8a3a      	ldrh	r2, [r7, #16]
 8011ef6:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	8afa      	ldrh	r2, [r7, #22]
 8011efc:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	8aba      	ldrh	r2, [r7, #20]
 8011f02:	801a      	strh	r2, [r3, #0]
		break;
 8011f04:	e00c      	b.n	8011f20 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	8a3a      	ldrh	r2, [r7, #16]
 8011f0a:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	8afa      	ldrh	r2, [r7, #22]
 8011f10:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	8aba      	ldrh	r2, [r7, #20]
 8011f16:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	8a7a      	ldrh	r2, [r7, #18]
 8011f1c:	801a      	strh	r2, [r3, #0]
		break;
 8011f1e:	bf00      	nop

	}


}
 8011f20:	bf00      	nop
 8011f22:	371c      	adds	r7, #28
 8011f24:	46bd      	mov	sp, r7
 8011f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2a:	4770      	bx	lr
 8011f2c:	200013f4 	.word	0x200013f4

08011f30 <create_DijkstraMap>:




void create_DijkstraMap(void){
 8011f30:	b590      	push	{r4, r7, lr}
 8011f32:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 8011f36:	b081      	sub	sp, #4
 8011f38:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 8011f3a:	23b4      	movs	r3, #180	; 0xb4
 8011f3c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f40:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011f44:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 8011f46:	237f      	movs	r3, #127	; 0x7f
 8011f48:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f4c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011f50:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 8011f52:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f56:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011f5a:	4a1d      	ldr	r2, [pc, #116]	; (8011fd0 <create_DijkstraMap+0xa0>)
 8011f5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f5e:	c303      	stmia	r3!, {r0, r1}
 8011f60:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011f62:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011f66:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011f6a:	4a1a      	ldr	r2, [pc, #104]	; (8011fd4 <create_DijkstraMap+0xa4>)
 8011f6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8011f6e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011f72:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011f76:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f003 fab4 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_y);
 8011f80:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011f84:	f103 0320 	add.w	r3, r3, #32
 8011f88:	3b0c      	subs	r3, #12
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	f003 faac 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011f90:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011f94:	3b14      	subs	r3, #20
 8011f96:	4618      	mov	r0, r3
 8011f98:	f003 faa6 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_direction);
 8011f9c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fa0:	3b3c      	subs	r3, #60	; 0x3c
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f003 faa0 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_cost);
 8011fa8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011fac:	3b64      	subs	r3, #100	; 0x64
 8011fae:	4618      	mov	r0, r3
 8011fb0:	f003 fa9a 	bl	80154e8 <initStack_walk>
	for(int i=0;i<=15;i++){
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011fba:	f102 0274 	add.w	r2, r2, #116	; 0x74
 8011fbe:	6013      	str	r3, [r2, #0]
 8011fc0:	e04e      	b.n	8012060 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011fc8:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011fcc:	6013      	str	r3, [r2, #0]
 8011fce:	e035      	b.n	801203c <create_DijkstraMap+0x10c>
 8011fd0:	08024fc8 	.word	0x08024fc8
 8011fd4:	08024fd4 	.word	0x08024fd4
			Dijkstra.column_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8011fd8:	49c7      	ldr	r1, [pc, #796]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8011fda:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fde:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011fe2:	681a      	ldr	r2, [r3, #0]
 8011fe4:	4613      	mov	r3, r2
 8011fe6:	011b      	lsls	r3, r3, #4
 8011fe8:	1a9b      	subs	r3, r3, r2
 8011fea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011fee:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011ff2:	6812      	ldr	r2, [r2, #0]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	33f0      	adds	r3, #240	; 0xf0
 8011ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011ffc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=MAX_WALKCOUNT_DIJKSTRA;
 8012000:	49bd      	ldr	r1, [pc, #756]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8012002:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012006:	f103 0374 	add.w	r3, r3, #116	; 0x74
 801200a:	681a      	ldr	r2, [r3, #0]
 801200c:	4613      	mov	r3, r2
 801200e:	011b      	lsls	r3, r3, #4
 8012010:	1a9b      	subs	r3, r3, r2
 8012012:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012016:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801201a:	6812      	ldr	r2, [r2, #0]
 801201c:	4413      	add	r3, r2
 801201e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012022:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 8012026:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801202a:	f103 0370 	add.w	r3, r3, #112	; 0x70
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	3301      	adds	r3, #1
 8012032:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012036:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801203a:	6013      	str	r3, [r2, #0]
 801203c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012040:	f103 0370 	add.w	r3, r3, #112	; 0x70
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	2b0e      	cmp	r3, #14
 8012048:	ddc6      	ble.n	8011fd8 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 801204a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801204e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	3301      	adds	r3, #1
 8012056:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801205a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801205e:	6013      	str	r3, [r2, #0]
 8012060:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012064:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2b0f      	cmp	r3, #15
 801206c:	dda9      	ble.n	8011fc2 <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.row_count[GOAL_X][GOAL_Y]=0;
 801206e:	4ba2      	ldr	r3, [pc, #648]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8012070:	2200      	movs	r2, #0
 8012072:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e
	Dijkstra.row_count[GOAL_X+1][GOAL_Y]=0;
 8012076:	4ba0      	ldr	r3, [pc, #640]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8012078:	2200      	movs	r2, #0
 801207a:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	Dijkstra.column_count[GOAL_Y][GOAL_X]=0;
 801207e:	4b9e      	ldr	r3, [pc, #632]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8012080:	2200      	movs	r2, #0
 8012082:	f8a3 2262 	strh.w	r2, [r3, #610]	; 0x262
	Dijkstra.column_count[GOAL_Y+1][GOAL_X]=0;
 8012086:	4b9c      	ldr	r3, [pc, #624]	; (80122f8 <create_DijkstraMap+0x3c8>)
 8012088:	2200      	movs	r2, #0
 801208a:	f8a3 2280 	strh.w	r2, [r3, #640]	; 0x280
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801208e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012092:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012096:	2105      	movs	r1, #5
 8012098:	4618      	mov	r0, r3
 801209a:	f003 fa35 	bl	8015508 <pushStack_walk>
 801209e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80120a2:	f103 0320 	add.w	r3, r3, #32
 80120a6:	3b0c      	subs	r3, #12
 80120a8:	2104      	movs	r1, #4
 80120aa:	4618      	mov	r0, r3
 80120ac:	f003 fa2c 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80120b0:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80120b4:	3b14      	subs	r3, #20
 80120b6:	2100      	movs	r1, #0
 80120b8:	4618      	mov	r0, r3
 80120ba:	f003 fa25 	bl	8015508 <pushStack_walk>
 80120be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80120c2:	3b3c      	subs	r3, #60	; 0x3c
 80120c4:	2108      	movs	r1, #8
 80120c6:	4618      	mov	r0, r3
 80120c8:	f003 fa1e 	bl	8015508 <pushStack_walk>
 80120cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80120d0:	3b64      	subs	r3, #100	; 0x64
 80120d2:	2100      	movs	r1, #0
 80120d4:	4618      	mov	r0, r3
 80120d6:	f003 fa17 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 80120da:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80120de:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80120e2:	2106      	movs	r1, #6
 80120e4:	4618      	mov	r0, r3
 80120e6:	f003 fa0f 	bl	8015508 <pushStack_walk>
 80120ea:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80120ee:	f103 0320 	add.w	r3, r3, #32
 80120f2:	3b0c      	subs	r3, #12
 80120f4:	2104      	movs	r1, #4
 80120f6:	4618      	mov	r0, r3
 80120f8:	f003 fa06 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80120fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012100:	3b14      	subs	r3, #20
 8012102:	2100      	movs	r1, #0
 8012104:	4618      	mov	r0, r3
 8012106:	f003 f9ff 	bl	8015508 <pushStack_walk>
 801210a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801210e:	3b3c      	subs	r3, #60	; 0x3c
 8012110:	2108      	movs	r1, #8
 8012112:	4618      	mov	r0, r3
 8012114:	f003 f9f8 	bl	8015508 <pushStack_walk>
 8012118:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801211c:	3b64      	subs	r3, #100	; 0x64
 801211e:	2100      	movs	r1, #0
 8012120:	4618      	mov	r0, r3
 8012122:	f003 f9f1 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8012126:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801212a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801212e:	2105      	movs	r1, #5
 8012130:	4618      	mov	r0, r3
 8012132:	f003 f9e9 	bl	8015508 <pushStack_walk>
 8012136:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801213a:	f103 0320 	add.w	r3, r3, #32
 801213e:	3b0c      	subs	r3, #12
 8012140:	2104      	movs	r1, #4
 8012142:	4618      	mov	r0, r3
 8012144:	f003 f9e0 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8012148:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801214c:	3b14      	subs	r3, #20
 801214e:	2101      	movs	r1, #1
 8012150:	4618      	mov	r0, r3
 8012152:	f003 f9d9 	bl	8015508 <pushStack_walk>
 8012156:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801215a:	3b3c      	subs	r3, #60	; 0x3c
 801215c:	2108      	movs	r1, #8
 801215e:	4618      	mov	r0, r3
 8012160:	f003 f9d2 	bl	8015508 <pushStack_walk>
 8012164:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012168:	3b64      	subs	r3, #100	; 0x64
 801216a:	2100      	movs	r1, #0
 801216c:	4618      	mov	r0, r3
 801216e:	f003 f9cb 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 8012172:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012176:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801217a:	2105      	movs	r1, #5
 801217c:	4618      	mov	r0, r3
 801217e:	f003 f9c3 	bl	8015508 <pushStack_walk>
 8012182:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012186:	f103 0320 	add.w	r3, r3, #32
 801218a:	3b0c      	subs	r3, #12
 801218c:	2105      	movs	r1, #5
 801218e:	4618      	mov	r0, r3
 8012190:	f003 f9ba 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8012194:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012198:	3b14      	subs	r3, #20
 801219a:	2101      	movs	r1, #1
 801219c:	4618      	mov	r0, r3
 801219e:	f003 f9b3 	bl	8015508 <pushStack_walk>
 80121a2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121a6:	3b3c      	subs	r3, #60	; 0x3c
 80121a8:	2108      	movs	r1, #8
 80121aa:	4618      	mov	r0, r3
 80121ac:	f003 f9ac 	bl	8015508 <pushStack_walk>
 80121b0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121b4:	3b64      	subs	r3, #100	; 0x64
 80121b6:	2100      	movs	r1, #0
 80121b8:	4618      	mov	r0, r3
 80121ba:	f003 f9a5 	bl	8015508 <pushStack_walk>



	unsigned short count_number = 1;
 80121be:	2301      	movs	r3, #1
 80121c0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121c4:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 80121c8:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 80121ca:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80121ce:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80121d2:	4618      	mov	r0, r3
 80121d4:	f003 f9c2 	bl	801555c <popStack_walk>
 80121d8:	4603      	mov	r3, r0
 80121da:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121de:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80121e2:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80121e4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80121e8:	f103 0320 	add.w	r3, r3, #32
 80121ec:	3b0c      	subs	r3, #12
 80121ee:	4618      	mov	r0, r3
 80121f0:	f003 f9b4 	bl	801555c <popStack_walk>
 80121f4:	4603      	mov	r3, r0
 80121f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121fa:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80121fe:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 8012200:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012204:	3b14      	subs	r3, #20
 8012206:	4618      	mov	r0, r3
 8012208:	f003 f9a8 	bl	801555c <popStack_walk>
 801220c:	4603      	mov	r3, r0
 801220e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012212:	f102 0268 	add.w	r2, r2, #104	; 0x68
 8012216:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 8012218:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801221c:	3b3c      	subs	r3, #60	; 0x3c
 801221e:	4618      	mov	r0, r3
 8012220:	f003 f99c 	bl	801555c <popStack_walk>
 8012224:	4603      	mov	r3, r0
 8012226:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801222a:	f102 0266 	add.w	r2, r2, #102	; 0x66
 801222e:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 8012230:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012234:	3b64      	subs	r3, #100	; 0x64
 8012236:	4618      	mov	r0, r3
 8012238:	f003 f990 	bl	801555c <popStack_walk>
 801223c:	4603      	mov	r3, r0
 801223e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012242:	f102 0264 	add.w	r2, r2, #100	; 0x64
 8012246:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8012248:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801224c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012250:	881b      	ldrh	r3, [r3, #0]
 8012252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012256:	4293      	cmp	r3, r2
 8012258:	f001 8399 	beq.w	801398e <create_DijkstraMap+0x1a5e>
 801225c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012260:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012264:	881b      	ldrh	r3, [r3, #0]
 8012266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801226a:	4293      	cmp	r3, r2
 801226c:	f001 838f 	beq.w	801398e <create_DijkstraMap+0x1a5e>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==ROW){
 8012270:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012274:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8012278:	881b      	ldrh	r3, [r3, #0]
 801227a:	2b00      	cmp	r3, #0
 801227c:	f040 85b8 	bne.w	8012df0 <create_DijkstraMap+0xec0>
			if(Ycoordinate <= 13){
 8012280:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012284:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	2b0d      	cmp	r3, #13
 801228c:	f200 80eb 	bhi.w	8012466 <create_DijkstraMap+0x536>
				if(Direction==SLANT_NORTH){
 8012290:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012294:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012298:	881b      	ldrh	r3, [r3, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d12e      	bne.n	80122fc <create_DijkstraMap+0x3cc>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 801229e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	3301      	adds	r3, #1
 80122aa:	b29b      	uxth	r3, r3
 80122ac:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122b0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122b4:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80122b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122ba:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122c2:	2b04      	cmp	r3, #4
 80122c4:	dd05      	ble.n	80122d2 <create_DijkstraMap+0x3a2>
 80122c6:	2304      	movs	r3, #4
 80122c8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122cc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80122d0:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80122d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122d6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80122da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122de:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80122e2:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80122e6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80122ea:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80122ee:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80122f2:	8013      	strh	r3, [r2, #0]
 80122f4:	e012      	b.n	801231c <create_DijkstraMap+0x3ec>
 80122f6:	bf00      	nop
 80122f8:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80122fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012300:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012304:	881b      	ldrh	r3, [r3, #0]
 8012306:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801230a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 801230e:	8013      	strh	r3, [r2, #0]
 8012310:	2300      	movs	r3, #0
 8012312:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012316:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801231a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate+1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 801231c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012320:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012324:	881b      	ldrh	r3, [r3, #0]
 8012326:	3301      	adds	r3, #1
 8012328:	4a6c      	ldr	r2, [pc, #432]	; (80124dc <create_DijkstraMap+0x5ac>)
 801232a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801232e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012332:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012336:	8812      	ldrh	r2, [r2, #0]
 8012338:	2101      	movs	r1, #1
 801233a:	fa01 f202 	lsl.w	r2, r1, r2
 801233e:	4013      	ands	r3, r2
 8012340:	2b00      	cmp	r3, #0
 8012342:	f040 8090 	bne.w	8012466 <create_DijkstraMap+0x536>
 8012346:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801234a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801234e:	881a      	ldrh	r2, [r3, #0]
 8012350:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012354:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012358:	881b      	ldrh	r3, [r3, #0]
 801235a:	1c59      	adds	r1, r3, #1
 801235c:	4860      	ldr	r0, [pc, #384]	; (80124e0 <create_DijkstraMap+0x5b0>)
 801235e:	4613      	mov	r3, r2
 8012360:	011b      	lsls	r3, r3, #4
 8012362:	1a9b      	subs	r3, r3, r2
 8012364:	440b      	add	r3, r1
 8012366:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801236a:	461c      	mov	r4, r3
 801236c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012370:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012374:	881a      	ldrh	r2, [r3, #0]
 8012376:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801237a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801237e:	8819      	ldrh	r1, [r3, #0]
 8012380:	4857      	ldr	r0, [pc, #348]	; (80124e0 <create_DijkstraMap+0x5b0>)
 8012382:	4613      	mov	r3, r2
 8012384:	011b      	lsls	r3, r3, #4
 8012386:	1a9b      	subs	r3, r3, r2
 8012388:	440b      	add	r3, r1
 801238a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801238e:	461a      	mov	r2, r3
 8012390:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012394:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012398:	f9b3 3000 	ldrsh.w	r3, [r3]
 801239c:	4413      	add	r3, r2
 801239e:	429c      	cmp	r4, r3
 80123a0:	dd61      	ble.n	8012466 <create_DijkstraMap+0x536>
					Dijkstra.row_count[Xcoordinate][Ycoordinate+1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 80123a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80123aa:	881a      	ldrh	r2, [r3, #0]
 80123ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80123b4:	8819      	ldrh	r1, [r3, #0]
 80123b6:	484a      	ldr	r0, [pc, #296]	; (80124e0 <create_DijkstraMap+0x5b0>)
 80123b8:	4613      	mov	r3, r2
 80123ba:	011b      	lsls	r3, r3, #4
 80123bc:	1a9b      	subs	r3, r3, r2
 80123be:	440b      	add	r3, r1
 80123c0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80123c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c8:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80123cc:	881b      	ldrh	r3, [r3, #0]
 80123ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123d2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80123d6:	8812      	ldrh	r2, [r2, #0]
 80123d8:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80123dc:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80123e0:	8809      	ldrh	r1, [r1, #0]
 80123e2:	3101      	adds	r1, #1
 80123e4:	4403      	add	r3, r0
 80123e6:	b29c      	uxth	r4, r3
 80123e8:	483d      	ldr	r0, [pc, #244]	; (80124e0 <create_DijkstraMap+0x5b0>)
 80123ea:	4613      	mov	r3, r2
 80123ec:	011b      	lsls	r3, r3, #4
 80123ee:	1a9b      	subs	r3, r3, r2
 80123f0:	440b      	add	r3, r1
 80123f2:	4622      	mov	r2, r4
 80123f4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80123f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123fc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012400:	881a      	ldrh	r2, [r3, #0]
 8012402:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012406:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801240a:	4611      	mov	r1, r2
 801240c:	4618      	mov	r0, r3
 801240e:	f003 f87b 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8012412:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012416:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801241a:	881b      	ldrh	r3, [r3, #0]
 801241c:	3301      	adds	r3, #1
 801241e:	b29a      	uxth	r2, r3
 8012420:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012424:	f103 0320 	add.w	r3, r3, #32
 8012428:	3b0c      	subs	r3, #12
 801242a:	4611      	mov	r1, r2
 801242c:	4618      	mov	r0, r3
 801242e:	f003 f86b 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012432:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012436:	3b14      	subs	r3, #20
 8012438:	2100      	movs	r1, #0
 801243a:	4618      	mov	r0, r3
 801243c:	f003 f864 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8012440:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012444:	3b3c      	subs	r3, #60	; 0x3c
 8012446:	2100      	movs	r1, #0
 8012448:	4618      	mov	r0, r3
 801244a:	f003 f85d 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801244e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012452:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012456:	881a      	ldrh	r2, [r3, #0]
 8012458:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801245c:	3b64      	subs	r3, #100	; 0x64
 801245e:	4611      	mov	r1, r2
 8012460:	4618      	mov	r0, r3
 8012462:	f003 f851 	bl	8015508 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8012466:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801246a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801246e:	881b      	ldrh	r3, [r3, #0]
 8012470:	2b00      	cmp	r3, #0
 8012472:	f000 80ec 	beq.w	801264e <create_DijkstraMap+0x71e>
				if(Direction==SLANT_SOUTH){
 8012476:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801247a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801247e:	881b      	ldrh	r3, [r3, #0]
 8012480:	2b04      	cmp	r3, #4
 8012482:	d12f      	bne.n	80124e4 <create_DijkstraMap+0x5b4>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012484:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012488:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801248c:	881b      	ldrh	r3, [r3, #0]
 801248e:	3301      	adds	r3, #1
 8012490:	b29b      	uxth	r3, r3
 8012492:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012496:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801249a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801249c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124a0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124a8:	2b04      	cmp	r3, #4
 80124aa:	dd05      	ble.n	80124b8 <create_DijkstraMap+0x588>
 80124ac:	2304      	movs	r3, #4
 80124ae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124b2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80124b6:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 80124b8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124bc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80124c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80124c4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80124c8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80124cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80124d0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124d4:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80124d8:	8013      	strh	r3, [r2, #0]
 80124da:	e013      	b.n	8012504 <create_DijkstraMap+0x5d4>
 80124dc:	20001010 	.word	0x20001010
 80124e0:	200013f4 	.word	0x200013f4
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 80124e4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80124e8:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80124ec:	881b      	ldrh	r3, [r3, #0]
 80124ee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124f2:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80124f6:	8013      	strh	r3, [r2, #0]
 80124f8:	2300      	movs	r3, #0
 80124fa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80124fe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012502:	8013      	strh	r3, [r2, #0]
				if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8012504:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012508:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801250c:	881b      	ldrh	r3, [r3, #0]
 801250e:	3b01      	subs	r3, #1
 8012510:	4a6c      	ldr	r2, [pc, #432]	; (80126c4 <create_DijkstraMap+0x794>)
 8012512:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012516:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801251a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801251e:	8812      	ldrh	r2, [r2, #0]
 8012520:	2101      	movs	r1, #1
 8012522:	fa01 f202 	lsl.w	r2, r1, r2
 8012526:	4013      	ands	r3, r2
 8012528:	2b00      	cmp	r3, #0
 801252a:	f040 8090 	bne.w	801264e <create_DijkstraMap+0x71e>
 801252e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012532:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012536:	881a      	ldrh	r2, [r3, #0]
 8012538:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801253c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012540:	881b      	ldrh	r3, [r3, #0]
 8012542:	1e59      	subs	r1, r3, #1
 8012544:	4860      	ldr	r0, [pc, #384]	; (80126c8 <create_DijkstraMap+0x798>)
 8012546:	4613      	mov	r3, r2
 8012548:	011b      	lsls	r3, r3, #4
 801254a:	1a9b      	subs	r3, r3, r2
 801254c:	440b      	add	r3, r1
 801254e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012552:	461c      	mov	r4, r3
 8012554:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012558:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801255c:	881a      	ldrh	r2, [r3, #0]
 801255e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012562:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012566:	8819      	ldrh	r1, [r3, #0]
 8012568:	4857      	ldr	r0, [pc, #348]	; (80126c8 <create_DijkstraMap+0x798>)
 801256a:	4613      	mov	r3, r2
 801256c:	011b      	lsls	r3, r3, #4
 801256e:	1a9b      	subs	r3, r3, r2
 8012570:	440b      	add	r3, r1
 8012572:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012576:	461a      	mov	r2, r3
 8012578:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801257c:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012584:	4413      	add	r3, r2
 8012586:	429c      	cmp	r4, r3
 8012588:	dd61      	ble.n	801264e <create_DijkstraMap+0x71e>
					Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+VerticalCost;
 801258a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801258e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012592:	881a      	ldrh	r2, [r3, #0]
 8012594:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012598:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801259c:	8819      	ldrh	r1, [r3, #0]
 801259e:	484a      	ldr	r0, [pc, #296]	; (80126c8 <create_DijkstraMap+0x798>)
 80125a0:	4613      	mov	r3, r2
 80125a2:	011b      	lsls	r3, r3, #4
 80125a4:	1a9b      	subs	r3, r3, r2
 80125a6:	440b      	add	r3, r1
 80125a8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80125ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125b0:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80125b4:	881b      	ldrh	r3, [r3, #0]
 80125b6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125ba:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80125be:	8812      	ldrh	r2, [r2, #0]
 80125c0:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80125c4:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80125c8:	8809      	ldrh	r1, [r1, #0]
 80125ca:	3901      	subs	r1, #1
 80125cc:	4403      	add	r3, r0
 80125ce:	b29c      	uxth	r4, r3
 80125d0:	483d      	ldr	r0, [pc, #244]	; (80126c8 <create_DijkstraMap+0x798>)
 80125d2:	4613      	mov	r3, r2
 80125d4:	011b      	lsls	r3, r3, #4
 80125d6:	1a9b      	subs	r3, r3, r2
 80125d8:	440b      	add	r3, r1
 80125da:	4622      	mov	r2, r4
 80125dc:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80125e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125e4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125e8:	881a      	ldrh	r2, [r3, #0]
 80125ea:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80125ee:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80125f2:	4611      	mov	r1, r2
 80125f4:	4618      	mov	r0, r3
 80125f6:	f002 ff87 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 80125fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125fe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012602:	881b      	ldrh	r3, [r3, #0]
 8012604:	3b01      	subs	r3, #1
 8012606:	b29a      	uxth	r2, r3
 8012608:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801260c:	f103 0320 	add.w	r3, r3, #32
 8012610:	3b0c      	subs	r3, #12
 8012612:	4611      	mov	r1, r2
 8012614:	4618      	mov	r0, r3
 8012616:	f002 ff77 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 801261a:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801261e:	3b14      	subs	r3, #20
 8012620:	2100      	movs	r1, #0
 8012622:	4618      	mov	r0, r3
 8012624:	f002 ff70 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8012628:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801262c:	3b3c      	subs	r3, #60	; 0x3c
 801262e:	2104      	movs	r1, #4
 8012630:	4618      	mov	r0, r3
 8012632:	f002 ff69 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012636:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801263a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801263e:	881a      	ldrh	r2, [r3, #0]
 8012640:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012644:	3b64      	subs	r3, #100	; 0x64
 8012646:	4611      	mov	r1, r2
 8012648:	4618      	mov	r0, r3
 801264a:	f002 ff5d 	bl	8015508 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 801264e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012652:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012656:	881b      	ldrh	r3, [r3, #0]
 8012658:	2b0e      	cmp	r3, #14
 801265a:	f200 81dc 	bhi.w	8012a16 <create_DijkstraMap+0xae6>
				if(Direction==SLANT_SOUTH_EAST){
 801265e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012662:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012666:	881b      	ldrh	r3, [r3, #0]
 8012668:	2b03      	cmp	r3, #3
 801266a:	d12f      	bne.n	80126cc <create_DijkstraMap+0x79c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 801266c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012670:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012674:	881b      	ldrh	r3, [r3, #0]
 8012676:	3301      	adds	r3, #1
 8012678:	b29b      	uxth	r3, r3
 801267a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801267e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012682:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012684:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012688:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801268c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012690:	2b05      	cmp	r3, #5
 8012692:	dd05      	ble.n	80126a0 <create_DijkstraMap+0x770>
 8012694:	2305      	movs	r3, #5
 8012696:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801269a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801269e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80126a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126a4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80126a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80126ac:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80126b0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80126b4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80126b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126bc:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80126c0:	8013      	strh	r3, [r2, #0]
 80126c2:	e013      	b.n	80126ec <create_DijkstraMap+0x7bc>
 80126c4:	20001010 	.word	0x20001010
 80126c8:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80126cc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80126d0:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80126d4:	881b      	ldrh	r3, [r3, #0]
 80126d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126da:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80126de:	8013      	strh	r3, [r2, #0]
 80126e0:	2300      	movs	r3, #0
 80126e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80126e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80126ea:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80126ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126f0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126f4:	881b      	ldrh	r3, [r3, #0]
 80126f6:	4a69      	ldr	r2, [pc, #420]	; (801289c <create_DijkstraMap+0x96c>)
 80126f8:	330e      	adds	r3, #14
 80126fa:	009b      	lsls	r3, r3, #2
 80126fc:	4413      	add	r3, r2
 80126fe:	685b      	ldr	r3, [r3, #4]
 8012700:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012704:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012708:	8812      	ldrh	r2, [r2, #0]
 801270a:	2101      	movs	r1, #1
 801270c:	fa01 f202 	lsl.w	r2, r1, r2
 8012710:	4013      	ands	r3, r2
 8012712:	2b00      	cmp	r3, #0
 8012714:	f040 808e 	bne.w	8012834 <create_DijkstraMap+0x904>
 8012718:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801271c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012720:	881a      	ldrh	r2, [r3, #0]
 8012722:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012726:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801272a:	8819      	ldrh	r1, [r3, #0]
 801272c:	485c      	ldr	r0, [pc, #368]	; (80128a0 <create_DijkstraMap+0x970>)
 801272e:	4613      	mov	r3, r2
 8012730:	011b      	lsls	r3, r3, #4
 8012732:	1a9b      	subs	r3, r3, r2
 8012734:	440b      	add	r3, r1
 8012736:	33f0      	adds	r3, #240	; 0xf0
 8012738:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801273c:	461c      	mov	r4, r3
 801273e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012742:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012746:	881a      	ldrh	r2, [r3, #0]
 8012748:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801274c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012750:	8819      	ldrh	r1, [r3, #0]
 8012752:	4853      	ldr	r0, [pc, #332]	; (80128a0 <create_DijkstraMap+0x970>)
 8012754:	4613      	mov	r3, r2
 8012756:	011b      	lsls	r3, r3, #4
 8012758:	1a9b      	subs	r3, r3, r2
 801275a:	440b      	add	r3, r1
 801275c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012760:	461a      	mov	r2, r3
 8012762:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012766:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801276a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801276e:	4413      	add	r3, r2
 8012770:	429c      	cmp	r4, r3
 8012772:	dd5f      	ble.n	8012834 <create_DijkstraMap+0x904>
					Dijkstra.column_count[Ycoordinate][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012774:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012778:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801277c:	881a      	ldrh	r2, [r3, #0]
 801277e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012782:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012786:	8819      	ldrh	r1, [r3, #0]
 8012788:	4845      	ldr	r0, [pc, #276]	; (80128a0 <create_DijkstraMap+0x970>)
 801278a:	4613      	mov	r3, r2
 801278c:	011b      	lsls	r3, r3, #4
 801278e:	1a9b      	subs	r3, r3, r2
 8012790:	440b      	add	r3, r1
 8012792:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012796:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801279a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801279e:	881b      	ldrh	r3, [r3, #0]
 80127a0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127a4:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80127a8:	8812      	ldrh	r2, [r2, #0]
 80127aa:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80127ae:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 80127b2:	8809      	ldrh	r1, [r1, #0]
 80127b4:	4403      	add	r3, r0
 80127b6:	b29c      	uxth	r4, r3
 80127b8:	4839      	ldr	r0, [pc, #228]	; (80128a0 <create_DijkstraMap+0x970>)
 80127ba:	4613      	mov	r3, r2
 80127bc:	011b      	lsls	r3, r3, #4
 80127be:	1a9b      	subs	r3, r3, r2
 80127c0:	440b      	add	r3, r1
 80127c2:	33f0      	adds	r3, #240	; 0xf0
 80127c4:	4622      	mov	r2, r4
 80127c6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80127ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127ce:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127d2:	881a      	ldrh	r2, [r3, #0]
 80127d4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80127d8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80127dc:	4611      	mov	r1, r2
 80127de:	4618      	mov	r0, r3
 80127e0:	f002 fe92 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 80127e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80127ec:	881a      	ldrh	r2, [r3, #0]
 80127ee:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80127f2:	f103 0320 	add.w	r3, r3, #32
 80127f6:	3b0c      	subs	r3, #12
 80127f8:	4611      	mov	r1, r2
 80127fa:	4618      	mov	r0, r3
 80127fc:	f002 fe84 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012800:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012804:	3b14      	subs	r3, #20
 8012806:	2101      	movs	r1, #1
 8012808:	4618      	mov	r0, r3
 801280a:	f002 fe7d 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 801280e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012812:	3b3c      	subs	r3, #60	; 0x3c
 8012814:	2103      	movs	r1, #3
 8012816:	4618      	mov	r0, r3
 8012818:	f002 fe76 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801281c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012820:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012824:	881a      	ldrh	r2, [r3, #0]
 8012826:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801282a:	3b64      	subs	r3, #100	; 0x64
 801282c:	4611      	mov	r1, r2
 801282e:	4618      	mov	r0, r3
 8012830:	f002 fe6a 	bl	8015508 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8012834:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012838:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801283c:	881b      	ldrh	r3, [r3, #0]
 801283e:	2b01      	cmp	r3, #1
 8012840:	d130      	bne.n	80128a4 <create_DijkstraMap+0x974>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012842:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012846:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801284a:	881b      	ldrh	r3, [r3, #0]
 801284c:	3301      	adds	r3, #1
 801284e:	b29b      	uxth	r3, r3
 8012850:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012854:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012858:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 801285a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801285e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012862:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012866:	2b05      	cmp	r3, #5
 8012868:	dd05      	ble.n	8012876 <create_DijkstraMap+0x946>
 801286a:	2305      	movs	r3, #5
 801286c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012870:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012874:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012876:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801287a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801287e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012882:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012886:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801288a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801288e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012892:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012896:	8013      	strh	r3, [r2, #0]
 8012898:	e014      	b.n	80128c4 <create_DijkstraMap+0x994>
 801289a:	bf00      	nop
 801289c:	20001010 	.word	0x20001010
 80128a0:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80128a4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80128a8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80128ac:	881b      	ldrh	r3, [r3, #0]
 80128ae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128b2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80128b6:	8013      	strh	r3, [r2, #0]
 80128b8:	2300      	movs	r3, #0
 80128ba:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128be:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80128c2:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 80128c4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128c8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128cc:	881b      	ldrh	r3, [r3, #0]
 80128ce:	4a6f      	ldr	r2, [pc, #444]	; (8012a8c <create_DijkstraMap+0xb5c>)
 80128d0:	330e      	adds	r3, #14
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4413      	add	r3, r2
 80128d6:	685b      	ldr	r3, [r3, #4]
 80128d8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128dc:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80128e0:	8812      	ldrh	r2, [r2, #0]
 80128e2:	3201      	adds	r2, #1
 80128e4:	2101      	movs	r1, #1
 80128e6:	fa01 f202 	lsl.w	r2, r1, r2
 80128ea:	4013      	ands	r3, r2
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	f040 8092 	bne.w	8012a16 <create_DijkstraMap+0xae6>
 80128f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128f6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128fa:	881b      	ldrh	r3, [r3, #0]
 80128fc:	1c5a      	adds	r2, r3, #1
 80128fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012902:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012906:	8819      	ldrh	r1, [r3, #0]
 8012908:	4861      	ldr	r0, [pc, #388]	; (8012a90 <create_DijkstraMap+0xb60>)
 801290a:	4613      	mov	r3, r2
 801290c:	011b      	lsls	r3, r3, #4
 801290e:	1a9b      	subs	r3, r3, r2
 8012910:	440b      	add	r3, r1
 8012912:	33f0      	adds	r3, #240	; 0xf0
 8012914:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012918:	461c      	mov	r4, r3
 801291a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801291e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012922:	881a      	ldrh	r2, [r3, #0]
 8012924:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012928:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801292c:	8819      	ldrh	r1, [r3, #0]
 801292e:	4858      	ldr	r0, [pc, #352]	; (8012a90 <create_DijkstraMap+0xb60>)
 8012930:	4613      	mov	r3, r2
 8012932:	011b      	lsls	r3, r3, #4
 8012934:	1a9b      	subs	r3, r3, r2
 8012936:	440b      	add	r3, r1
 8012938:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801293c:	461a      	mov	r2, r3
 801293e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012942:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012946:	f9b3 3000 	ldrsh.w	r3, [r3]
 801294a:	4413      	add	r3, r2
 801294c:	429c      	cmp	r4, r3
 801294e:	dd62      	ble.n	8012a16 <create_DijkstraMap+0xae6>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012950:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012954:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012958:	881a      	ldrh	r2, [r3, #0]
 801295a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801295e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012962:	8819      	ldrh	r1, [r3, #0]
 8012964:	484a      	ldr	r0, [pc, #296]	; (8012a90 <create_DijkstraMap+0xb60>)
 8012966:	4613      	mov	r3, r2
 8012968:	011b      	lsls	r3, r3, #4
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	440b      	add	r3, r1
 801296e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012972:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012976:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801297a:	881b      	ldrh	r3, [r3, #0]
 801297c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012980:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012984:	8812      	ldrh	r2, [r2, #0]
 8012986:	3201      	adds	r2, #1
 8012988:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801298c:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012990:	8809      	ldrh	r1, [r1, #0]
 8012992:	4403      	add	r3, r0
 8012994:	b29c      	uxth	r4, r3
 8012996:	483e      	ldr	r0, [pc, #248]	; (8012a90 <create_DijkstraMap+0xb60>)
 8012998:	4613      	mov	r3, r2
 801299a:	011b      	lsls	r3, r3, #4
 801299c:	1a9b      	subs	r3, r3, r2
 801299e:	440b      	add	r3, r1
 80129a0:	33f0      	adds	r3, #240	; 0xf0
 80129a2:	4622      	mov	r2, r4
 80129a4:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 80129a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80129b0:	881a      	ldrh	r2, [r3, #0]
 80129b2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80129b6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80129ba:	4611      	mov	r1, r2
 80129bc:	4618      	mov	r0, r3
 80129be:	f002 fda3 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 80129c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129c6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80129ca:	881b      	ldrh	r3, [r3, #0]
 80129cc:	3301      	adds	r3, #1
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80129d4:	f103 0320 	add.w	r3, r3, #32
 80129d8:	3b0c      	subs	r3, #12
 80129da:	4611      	mov	r1, r2
 80129dc:	4618      	mov	r0, r3
 80129de:	f002 fd93 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 80129e2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80129e6:	3b14      	subs	r3, #20
 80129e8:	2101      	movs	r1, #1
 80129ea:	4618      	mov	r0, r3
 80129ec:	f002 fd8c 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 80129f0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80129f4:	3b3c      	subs	r3, #60	; 0x3c
 80129f6:	2101      	movs	r1, #1
 80129f8:	4618      	mov	r0, r3
 80129fa:	f002 fd85 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80129fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a02:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a06:	881a      	ldrh	r2, [r3, #0]
 8012a08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012a0c:	3b64      	subs	r3, #100	; 0x64
 8012a0e:	4611      	mov	r1, r2
 8012a10:	4618      	mov	r0, r3
 8012a12:	f002 fd79 	bl	8015508 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 8012a16:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a1a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a1e:	881b      	ldrh	r3, [r3, #0]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	f000 81e5 	beq.w	8012df0 <create_DijkstraMap+0xec0>
				if(Direction==SLANT_SOUTH_WEST){
 8012a26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a2a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	2b05      	cmp	r3, #5
 8012a32:	d12f      	bne.n	8012a94 <create_DijkstraMap+0xb64>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012a34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a38:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012a3c:	881b      	ldrh	r3, [r3, #0]
 8012a3e:	3301      	adds	r3, #1
 8012a40:	b29b      	uxth	r3, r3
 8012a42:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a46:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a4a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012a4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a50:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a58:	2b05      	cmp	r3, #5
 8012a5a:	dd05      	ble.n	8012a68 <create_DijkstraMap+0xb38>
 8012a5c:	2305      	movs	r3, #5
 8012a5e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a62:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a66:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012a68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a6c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012a70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012a74:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a78:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a7c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012a80:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a84:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a88:	8013      	strh	r3, [r2, #0]
 8012a8a:	e013      	b.n	8012ab4 <create_DijkstraMap+0xb84>
 8012a8c:	20001010 	.word	0x20001010
 8012a90:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012a94:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a98:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a9c:	881b      	ldrh	r3, [r3, #0]
 8012a9e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aa2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012aa6:	8013      	strh	r3, [r2, #0]
 8012aa8:	2300      	movs	r3, #0
 8012aaa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012aae:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012ab2:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012ab4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ab8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012abc:	881b      	ldrh	r3, [r3, #0]
 8012abe:	3b01      	subs	r3, #1
 8012ac0:	4a6a      	ldr	r2, [pc, #424]	; (8012c6c <create_DijkstraMap+0xd3c>)
 8012ac2:	330e      	adds	r3, #14
 8012ac4:	009b      	lsls	r3, r3, #2
 8012ac6:	4413      	add	r3, r2
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ace:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012ad2:	8812      	ldrh	r2, [r2, #0]
 8012ad4:	2101      	movs	r1, #1
 8012ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8012ada:	4013      	ands	r3, r2
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	f040 8092 	bne.w	8012c06 <create_DijkstraMap+0xcd6>
 8012ae2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ae6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012aea:	881a      	ldrh	r2, [r3, #0]
 8012aec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012af0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012af4:	881b      	ldrh	r3, [r3, #0]
 8012af6:	1e59      	subs	r1, r3, #1
 8012af8:	485d      	ldr	r0, [pc, #372]	; (8012c70 <create_DijkstraMap+0xd40>)
 8012afa:	4613      	mov	r3, r2
 8012afc:	011b      	lsls	r3, r3, #4
 8012afe:	1a9b      	subs	r3, r3, r2
 8012b00:	440b      	add	r3, r1
 8012b02:	33f0      	adds	r3, #240	; 0xf0
 8012b04:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b08:	461c      	mov	r4, r3
 8012b0a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b0e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b12:	881a      	ldrh	r2, [r3, #0]
 8012b14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b18:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b1c:	8819      	ldrh	r1, [r3, #0]
 8012b1e:	4854      	ldr	r0, [pc, #336]	; (8012c70 <create_DijkstraMap+0xd40>)
 8012b20:	4613      	mov	r3, r2
 8012b22:	011b      	lsls	r3, r3, #4
 8012b24:	1a9b      	subs	r3, r3, r2
 8012b26:	440b      	add	r3, r1
 8012b28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012b2c:	461a      	mov	r2, r3
 8012b2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b32:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b3a:	4413      	add	r3, r2
 8012b3c:	429c      	cmp	r4, r3
 8012b3e:	dd62      	ble.n	8012c06 <create_DijkstraMap+0xcd6>
					Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012b40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b44:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b48:	881a      	ldrh	r2, [r3, #0]
 8012b4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b4e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b52:	8819      	ldrh	r1, [r3, #0]
 8012b54:	4846      	ldr	r0, [pc, #280]	; (8012c70 <create_DijkstraMap+0xd40>)
 8012b56:	4613      	mov	r3, r2
 8012b58:	011b      	lsls	r3, r3, #4
 8012b5a:	1a9b      	subs	r3, r3, r2
 8012b5c:	440b      	add	r3, r1
 8012b5e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012b62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b66:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012b6a:	881b      	ldrh	r3, [r3, #0]
 8012b6c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b70:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012b74:	8812      	ldrh	r2, [r2, #0]
 8012b76:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012b7a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012b7e:	8809      	ldrh	r1, [r1, #0]
 8012b80:	3901      	subs	r1, #1
 8012b82:	4403      	add	r3, r0
 8012b84:	b29c      	uxth	r4, r3
 8012b86:	483a      	ldr	r0, [pc, #232]	; (8012c70 <create_DijkstraMap+0xd40>)
 8012b88:	4613      	mov	r3, r2
 8012b8a:	011b      	lsls	r3, r3, #4
 8012b8c:	1a9b      	subs	r3, r3, r2
 8012b8e:	440b      	add	r3, r1
 8012b90:	33f0      	adds	r3, #240	; 0xf0
 8012b92:	4622      	mov	r2, r4
 8012b94:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012b98:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b9c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ba0:	881b      	ldrh	r3, [r3, #0]
 8012ba2:	3b01      	subs	r3, #1
 8012ba4:	b29a      	uxth	r2, r3
 8012ba6:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012baa:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012bae:	4611      	mov	r1, r2
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f002 fca9 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8012bb6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012bbe:	881a      	ldrh	r2, [r3, #0]
 8012bc0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012bc4:	f103 0320 	add.w	r3, r3, #32
 8012bc8:	3b0c      	subs	r3, #12
 8012bca:	4611      	mov	r1, r2
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f002 fc9b 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012bd2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012bd6:	3b14      	subs	r3, #20
 8012bd8:	2101      	movs	r1, #1
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f002 fc94 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012be0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012be4:	3b3c      	subs	r3, #60	; 0x3c
 8012be6:	2105      	movs	r1, #5
 8012be8:	4618      	mov	r0, r3
 8012bea:	f002 fc8d 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012bee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bf2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012bf6:	881a      	ldrh	r2, [r3, #0]
 8012bf8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012bfc:	3b64      	subs	r3, #100	; 0x64
 8012bfe:	4611      	mov	r1, r2
 8012c00:	4618      	mov	r0, r3
 8012c02:	f002 fc81 	bl	8015508 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 8012c06:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c0a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012c0e:	881b      	ldrh	r3, [r3, #0]
 8012c10:	2b07      	cmp	r3, #7
 8012c12:	d12f      	bne.n	8012c74 <create_DijkstraMap+0xd44>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012c14:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c18:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	3301      	adds	r3, #1
 8012c20:	b29b      	uxth	r3, r3
 8012c22:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c26:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c2a:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012c2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c30:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c38:	2b05      	cmp	r3, #5
 8012c3a:	dd05      	ble.n	8012c48 <create_DijkstraMap+0xd18>
 8012c3c:	2305      	movs	r3, #5
 8012c3e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c42:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c46:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012c48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c4c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012c50:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012c54:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c58:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c5c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012c60:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c64:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012c68:	8013      	strh	r3, [r2, #0]
 8012c6a:	e013      	b.n	8012c94 <create_DijkstraMap+0xd64>
 8012c6c:	20001010 	.word	0x20001010
 8012c70:	200013f4 	.word	0x200013f4
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012c74:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012c78:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012c7c:	881b      	ldrh	r3, [r3, #0]
 8012c7e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c82:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012c86:	8013      	strh	r3, [r2, #0]
 8012c88:	2300      	movs	r3, #0
 8012c8a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012c8e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c92:	8013      	strh	r3, [r2, #0]
				if((wall.column[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8012c94:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c98:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c9c:	881b      	ldrh	r3, [r3, #0]
 8012c9e:	3b01      	subs	r3, #1
 8012ca0:	4a75      	ldr	r2, [pc, #468]	; (8012e78 <create_DijkstraMap+0xf48>)
 8012ca2:	330e      	adds	r3, #14
 8012ca4:	009b      	lsls	r3, r3, #2
 8012ca6:	4413      	add	r3, r2
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cae:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012cb2:	8812      	ldrh	r2, [r2, #0]
 8012cb4:	3201      	adds	r2, #1
 8012cb6:	2101      	movs	r1, #1
 8012cb8:	fa01 f202 	lsl.w	r2, r1, r2
 8012cbc:	4013      	ands	r3, r2
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	f040 8096 	bne.w	8012df0 <create_DijkstraMap+0xec0>
 8012cc4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cc8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ccc:	881b      	ldrh	r3, [r3, #0]
 8012cce:	1c5a      	adds	r2, r3, #1
 8012cd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cd4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cd8:	881b      	ldrh	r3, [r3, #0]
 8012cda:	1e59      	subs	r1, r3, #1
 8012cdc:	4867      	ldr	r0, [pc, #412]	; (8012e7c <create_DijkstraMap+0xf4c>)
 8012cde:	4613      	mov	r3, r2
 8012ce0:	011b      	lsls	r3, r3, #4
 8012ce2:	1a9b      	subs	r3, r3, r2
 8012ce4:	440b      	add	r3, r1
 8012ce6:	33f0      	adds	r3, #240	; 0xf0
 8012ce8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012cec:	461c      	mov	r4, r3
 8012cee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cf2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cf6:	881a      	ldrh	r2, [r3, #0]
 8012cf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cfc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d00:	8819      	ldrh	r1, [r3, #0]
 8012d02:	485e      	ldr	r0, [pc, #376]	; (8012e7c <create_DijkstraMap+0xf4c>)
 8012d04:	4613      	mov	r3, r2
 8012d06:	011b      	lsls	r3, r3, #4
 8012d08:	1a9b      	subs	r3, r3, r2
 8012d0a:	440b      	add	r3, r1
 8012d0c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012d10:	461a      	mov	r2, r3
 8012d12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d16:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d1e:	4413      	add	r3, r2
 8012d20:	429c      	cmp	r4, r3
 8012d22:	dd65      	ble.n	8012df0 <create_DijkstraMap+0xec0>
					Dijkstra.column_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.row_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012d24:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d28:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d2c:	881a      	ldrh	r2, [r3, #0]
 8012d2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d32:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d36:	8819      	ldrh	r1, [r3, #0]
 8012d38:	4850      	ldr	r0, [pc, #320]	; (8012e7c <create_DijkstraMap+0xf4c>)
 8012d3a:	4613      	mov	r3, r2
 8012d3c:	011b      	lsls	r3, r3, #4
 8012d3e:	1a9b      	subs	r3, r3, r2
 8012d40:	440b      	add	r3, r1
 8012d42:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012d46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d4a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012d4e:	881b      	ldrh	r3, [r3, #0]
 8012d50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d54:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012d58:	8812      	ldrh	r2, [r2, #0]
 8012d5a:	3201      	adds	r2, #1
 8012d5c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012d60:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012d64:	8809      	ldrh	r1, [r1, #0]
 8012d66:	3901      	subs	r1, #1
 8012d68:	4403      	add	r3, r0
 8012d6a:	b29c      	uxth	r4, r3
 8012d6c:	4843      	ldr	r0, [pc, #268]	; (8012e7c <create_DijkstraMap+0xf4c>)
 8012d6e:	4613      	mov	r3, r2
 8012d70:	011b      	lsls	r3, r3, #4
 8012d72:	1a9b      	subs	r3, r3, r2
 8012d74:	440b      	add	r3, r1
 8012d76:	33f0      	adds	r3, #240	; 0xf0
 8012d78:	4622      	mov	r2, r4
 8012d7a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012d7e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d82:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	3b01      	subs	r3, #1
 8012d8a:	b29a      	uxth	r2, r3
 8012d8c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012d90:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012d94:	4611      	mov	r1, r2
 8012d96:	4618      	mov	r0, r3
 8012d98:	f002 fbb6 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012d9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012da0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012da4:	881b      	ldrh	r3, [r3, #0]
 8012da6:	3301      	adds	r3, #1
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012dae:	f103 0320 	add.w	r3, r3, #32
 8012db2:	3b0c      	subs	r3, #12
 8012db4:	4611      	mov	r1, r2
 8012db6:	4618      	mov	r0, r3
 8012db8:	f002 fba6 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8012dbc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012dc0:	3b14      	subs	r3, #20
 8012dc2:	2101      	movs	r1, #1
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	f002 fb9f 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012dca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012dce:	3b3c      	subs	r3, #60	; 0x3c
 8012dd0:	2107      	movs	r1, #7
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	f002 fb98 	bl	8015508 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8012dd8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ddc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012de0:	881a      	ldrh	r2, [r3, #0]
 8012de2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012de6:	3b64      	subs	r3, #100	; 0x64
 8012de8:	4611      	mov	r1, r2
 8012dea:	4618      	mov	r0, r3
 8012dec:	f002 fb8c 	bl	8015508 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==COLUMN){
 8012df0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012df4:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8012df8:	881b      	ldrh	r3, [r3, #0]
 8012dfa:	2b01      	cmp	r3, #1
 8012dfc:	f040 85ba 	bne.w	8013974 <create_DijkstraMap+0x1a44>
					if(Xcoordinate <= 13){
 8012e00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e04:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e08:	881b      	ldrh	r3, [r3, #0]
 8012e0a:	2b0d      	cmp	r3, #13
 8012e0c:	f200 80f3 	bhi.w	8012ff6 <create_DijkstraMap+0x10c6>
						if(Direction==SLANT_EAST){
 8012e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e14:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	2b02      	cmp	r3, #2
 8012e1c:	d130      	bne.n	8012e80 <create_DijkstraMap+0xf50>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8012e1e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e22:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012e26:	881b      	ldrh	r3, [r3, #0]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e30:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e34:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8012e36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e3a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e42:	2b04      	cmp	r3, #4
 8012e44:	dd05      	ble.n	8012e52 <create_DijkstraMap+0xf22>
 8012e46:	2304      	movs	r3, #4
 8012e48:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e4c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e50:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012e52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e56:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012e5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e5e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e62:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012e66:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012e6a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e6e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012e72:	8013      	strh	r3, [r2, #0]
 8012e74:	e014      	b.n	8012ea0 <create_DijkstraMap+0xf70>
 8012e76:	bf00      	nop
 8012e78:	20001010 	.word	0x20001010
 8012e7c:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012e80:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012e84:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012e88:	881b      	ldrh	r3, [r3, #0]
 8012e8a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e8e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012e92:	8013      	strh	r3, [r2, #0]
 8012e94:	2300      	movs	r3, #0
 8012e96:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012e9a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012e9e:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate+1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012ea0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ea4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ea8:	881b      	ldrh	r3, [r3, #0]
 8012eaa:	3301      	adds	r3, #1
 8012eac:	4a6f      	ldr	r2, [pc, #444]	; (801306c <create_DijkstraMap+0x113c>)
 8012eae:	330e      	adds	r3, #14
 8012eb0:	009b      	lsls	r3, r3, #2
 8012eb2:	4413      	add	r3, r2
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012eba:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012ebe:	8812      	ldrh	r2, [r2, #0]
 8012ec0:	2101      	movs	r1, #1
 8012ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8012ec6:	4013      	ands	r3, r2
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	f040 8094 	bne.w	8012ff6 <create_DijkstraMap+0x10c6>
 8012ece:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ed2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012ed6:	881a      	ldrh	r2, [r3, #0]
 8012ed8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012edc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	1c59      	adds	r1, r3, #1
 8012ee4:	4862      	ldr	r0, [pc, #392]	; (8013070 <create_DijkstraMap+0x1140>)
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	011b      	lsls	r3, r3, #4
 8012eea:	1a9b      	subs	r3, r3, r2
 8012eec:	440b      	add	r3, r1
 8012eee:	33f0      	adds	r3, #240	; 0xf0
 8012ef0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012ef4:	461c      	mov	r4, r3
 8012ef6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012efa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012efe:	881a      	ldrh	r2, [r3, #0]
 8012f00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f04:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f08:	8819      	ldrh	r1, [r3, #0]
 8012f0a:	4859      	ldr	r0, [pc, #356]	; (8013070 <create_DijkstraMap+0x1140>)
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	011b      	lsls	r3, r3, #4
 8012f10:	1a9b      	subs	r3, r3, r2
 8012f12:	440b      	add	r3, r1
 8012f14:	33f0      	adds	r3, #240	; 0xf0
 8012f16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012f1a:	461a      	mov	r2, r3
 8012f1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f20:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f28:	4413      	add	r3, r2
 8012f2a:	429c      	cmp	r4, r3
 8012f2c:	dd63      	ble.n	8012ff6 <create_DijkstraMap+0x10c6>
							Dijkstra.column_count[Ycoordinate][Xcoordinate+1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8012f2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f32:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f36:	881a      	ldrh	r2, [r3, #0]
 8012f38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f3c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f40:	8819      	ldrh	r1, [r3, #0]
 8012f42:	484b      	ldr	r0, [pc, #300]	; (8013070 <create_DijkstraMap+0x1140>)
 8012f44:	4613      	mov	r3, r2
 8012f46:	011b      	lsls	r3, r3, #4
 8012f48:	1a9b      	subs	r3, r3, r2
 8012f4a:	440b      	add	r3, r1
 8012f4c:	33f0      	adds	r3, #240	; 0xf0
 8012f4e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012f52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f56:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f60:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012f64:	8812      	ldrh	r2, [r2, #0]
 8012f66:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012f6a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012f6e:	8809      	ldrh	r1, [r1, #0]
 8012f70:	3101      	adds	r1, #1
 8012f72:	4403      	add	r3, r0
 8012f74:	b29c      	uxth	r4, r3
 8012f76:	483e      	ldr	r0, [pc, #248]	; (8013070 <create_DijkstraMap+0x1140>)
 8012f78:	4613      	mov	r3, r2
 8012f7a:	011b      	lsls	r3, r3, #4
 8012f7c:	1a9b      	subs	r3, r3, r2
 8012f7e:	440b      	add	r3, r1
 8012f80:	33f0      	adds	r3, #240	; 0xf0
 8012f82:	4622      	mov	r2, r4
 8012f84:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012f88:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f8c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012f90:	881b      	ldrh	r3, [r3, #0]
 8012f92:	3301      	adds	r3, #1
 8012f94:	b29a      	uxth	r2, r3
 8012f96:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012f9a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012f9e:	4611      	mov	r1, r2
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f002 fab1 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012fa6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012faa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fae:	881a      	ldrh	r2, [r3, #0]
 8012fb0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012fb4:	f103 0320 	add.w	r3, r3, #32
 8012fb8:	3b0c      	subs	r3, #12
 8012fba:	4611      	mov	r1, r2
 8012fbc:	4618      	mov	r0, r3
 8012fbe:	f002 faa3 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012fc2:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012fc6:	3b14      	subs	r3, #20
 8012fc8:	2101      	movs	r1, #1
 8012fca:	4618      	mov	r0, r3
 8012fcc:	f002 fa9c 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 8012fd0:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012fd4:	3b3c      	subs	r3, #60	; 0x3c
 8012fd6:	2102      	movs	r1, #2
 8012fd8:	4618      	mov	r0, r3
 8012fda:	f002 fa95 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012fde:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fe2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012fe6:	881a      	ldrh	r2, [r3, #0]
 8012fe8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012fec:	3b64      	subs	r3, #100	; 0x64
 8012fee:	4611      	mov	r1, r2
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	f002 fa89 	bl	8015508 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 8012ff6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ffa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ffe:	881b      	ldrh	r3, [r3, #0]
 8013000:	2b00      	cmp	r3, #0
 8013002:	f000 80f2 	beq.w	80131ea <create_DijkstraMap+0x12ba>
						if(Direction==SLANT_WEST){
 8013006:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801300a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801300e:	881b      	ldrh	r3, [r3, #0]
 8013010:	2b06      	cmp	r3, #6
 8013012:	d12f      	bne.n	8013074 <create_DijkstraMap+0x1144>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8013014:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013018:	f103 0364 	add.w	r3, r3, #100	; 0x64
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	3301      	adds	r3, #1
 8013020:	b29b      	uxth	r3, r3
 8013022:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013026:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801302a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 801302c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013030:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013034:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013038:	2b04      	cmp	r3, #4
 801303a:	dd05      	ble.n	8013048 <create_DijkstraMap+0x1118>
 801303c:	2304      	movs	r3, #4
 801303e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013042:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013046:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8013048:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801304c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013050:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013054:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013058:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801305c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013060:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013064:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8013068:	8013      	strh	r3, [r2, #0]
 801306a:	e013      	b.n	8013094 <create_DijkstraMap+0x1164>
 801306c:	20001010 	.word	0x20001010
 8013070:	200013f4 	.word	0x200013f4
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8013074:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013078:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801307c:	881b      	ldrh	r3, [r3, #0]
 801307e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013082:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8013086:	8013      	strh	r3, [r2, #0]
 8013088:	2300      	movs	r3, #0
 801308a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801308e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013092:	8013      	strh	r3, [r2, #0]
						if((wall.column[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.column_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8013094:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013098:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801309c:	881b      	ldrh	r3, [r3, #0]
 801309e:	3b01      	subs	r3, #1
 80130a0:	4a6f      	ldr	r2, [pc, #444]	; (8013260 <create_DijkstraMap+0x1330>)
 80130a2:	330e      	adds	r3, #14
 80130a4:	009b      	lsls	r3, r3, #2
 80130a6:	4413      	add	r3, r2
 80130a8:	685b      	ldr	r3, [r3, #4]
 80130aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80130ae:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80130b2:	8812      	ldrh	r2, [r2, #0]
 80130b4:	2101      	movs	r1, #1
 80130b6:	fa01 f202 	lsl.w	r2, r1, r2
 80130ba:	4013      	ands	r3, r2
 80130bc:	2b00      	cmp	r3, #0
 80130be:	f040 8094 	bne.w	80131ea <create_DijkstraMap+0x12ba>
 80130c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130c6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130ca:	881a      	ldrh	r2, [r3, #0]
 80130cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130d4:	881b      	ldrh	r3, [r3, #0]
 80130d6:	1e59      	subs	r1, r3, #1
 80130d8:	4862      	ldr	r0, [pc, #392]	; (8013264 <create_DijkstraMap+0x1334>)
 80130da:	4613      	mov	r3, r2
 80130dc:	011b      	lsls	r3, r3, #4
 80130de:	1a9b      	subs	r3, r3, r2
 80130e0:	440b      	add	r3, r1
 80130e2:	33f0      	adds	r3, #240	; 0xf0
 80130e4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80130e8:	461c      	mov	r4, r3
 80130ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130f2:	881a      	ldrh	r2, [r3, #0]
 80130f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130f8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130fc:	8819      	ldrh	r1, [r3, #0]
 80130fe:	4859      	ldr	r0, [pc, #356]	; (8013264 <create_DijkstraMap+0x1334>)
 8013100:	4613      	mov	r3, r2
 8013102:	011b      	lsls	r3, r3, #4
 8013104:	1a9b      	subs	r3, r3, r2
 8013106:	440b      	add	r3, r1
 8013108:	33f0      	adds	r3, #240	; 0xf0
 801310a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801310e:	461a      	mov	r2, r3
 8013110:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013114:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8013118:	f9b3 3000 	ldrsh.w	r3, [r3]
 801311c:	4413      	add	r3, r2
 801311e:	429c      	cmp	r4, r3
 8013120:	dd63      	ble.n	80131ea <create_DijkstraMap+0x12ba>
							Dijkstra.column_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+VerticalCost;
 8013122:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013126:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801312a:	881a      	ldrh	r2, [r3, #0]
 801312c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013130:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013134:	8819      	ldrh	r1, [r3, #0]
 8013136:	484b      	ldr	r0, [pc, #300]	; (8013264 <create_DijkstraMap+0x1334>)
 8013138:	4613      	mov	r3, r2
 801313a:	011b      	lsls	r3, r3, #4
 801313c:	1a9b      	subs	r3, r3, r2
 801313e:	440b      	add	r3, r1
 8013140:	33f0      	adds	r3, #240	; 0xf0
 8013142:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013146:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801314a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 801314e:	881b      	ldrh	r3, [r3, #0]
 8013150:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013154:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8013158:	8812      	ldrh	r2, [r2, #0]
 801315a:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801315e:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8013162:	8809      	ldrh	r1, [r1, #0]
 8013164:	3901      	subs	r1, #1
 8013166:	4403      	add	r3, r0
 8013168:	b29c      	uxth	r4, r3
 801316a:	483e      	ldr	r0, [pc, #248]	; (8013264 <create_DijkstraMap+0x1334>)
 801316c:	4613      	mov	r3, r2
 801316e:	011b      	lsls	r3, r3, #4
 8013170:	1a9b      	subs	r3, r3, r2
 8013172:	440b      	add	r3, r1
 8013174:	33f0      	adds	r3, #240	; 0xf0
 8013176:	4622      	mov	r2, r4
 8013178:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801317c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013180:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013184:	881b      	ldrh	r3, [r3, #0]
 8013186:	3b01      	subs	r3, #1
 8013188:	b29a      	uxth	r2, r3
 801318a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801318e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013192:	4611      	mov	r1, r2
 8013194:	4618      	mov	r0, r3
 8013196:	f002 f9b7 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801319a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801319e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80131a2:	881a      	ldrh	r2, [r3, #0]
 80131a4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131a8:	f103 0320 	add.w	r3, r3, #32
 80131ac:	3b0c      	subs	r3, #12
 80131ae:	4611      	mov	r1, r2
 80131b0:	4618      	mov	r0, r3
 80131b2:	f002 f9a9 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80131b6:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80131ba:	3b14      	subs	r3, #20
 80131bc:	2101      	movs	r1, #1
 80131be:	4618      	mov	r0, r3
 80131c0:	f002 f9a2 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 80131c4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80131c8:	3b3c      	subs	r3, #60	; 0x3c
 80131ca:	2106      	movs	r1, #6
 80131cc:	4618      	mov	r0, r3
 80131ce:	f002 f99b 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80131d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131d6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80131da:	881a      	ldrh	r2, [r3, #0]
 80131dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80131e0:	3b64      	subs	r3, #100	; 0x64
 80131e2:	4611      	mov	r1, r2
 80131e4:	4618      	mov	r0, r3
 80131e6:	f002 f98f 	bl	8015508 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 80131ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131ee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80131f2:	881b      	ldrh	r3, [r3, #0]
 80131f4:	2b0e      	cmp	r3, #14
 80131f6:	f200 81d8 	bhi.w	80135aa <create_DijkstraMap+0x167a>
						if(Direction==SLANT_NORTH_WEST){
 80131fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131fe:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8013202:	881b      	ldrh	r3, [r3, #0]
 8013204:	2b07      	cmp	r3, #7
 8013206:	d12f      	bne.n	8013268 <create_DijkstraMap+0x1338>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8013208:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801320c:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8013210:	881b      	ldrh	r3, [r3, #0]
 8013212:	3301      	adds	r3, #1
 8013214:	b29b      	uxth	r3, r3
 8013216:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801321a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801321e:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8013220:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013224:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013228:	f9b3 3000 	ldrsh.w	r3, [r3]
 801322c:	2b05      	cmp	r3, #5
 801322e:	dd05      	ble.n	801323c <create_DijkstraMap+0x130c>
 8013230:	2305      	movs	r3, #5
 8013232:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013236:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801323a:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801323c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013240:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013244:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013248:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801324c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013250:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013254:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013258:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801325c:	8013      	strh	r3, [r2, #0]
 801325e:	e013      	b.n	8013288 <create_DijkstraMap+0x1358>
 8013260:	20001010 	.word	0x20001010
 8013264:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013268:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801326c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013270:	881b      	ldrh	r3, [r3, #0]
 8013272:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013276:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801327a:	8013      	strh	r3, [r2, #0]
 801327c:	2300      	movs	r3, #0
 801327e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013282:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013286:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013288:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801328c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013290:	881b      	ldrh	r3, [r3, #0]
 8013292:	4a68      	ldr	r2, [pc, #416]	; (8013434 <create_DijkstraMap+0x1504>)
 8013294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013298:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801329c:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80132a0:	8812      	ldrh	r2, [r2, #0]
 80132a2:	2101      	movs	r1, #1
 80132a4:	fa01 f202 	lsl.w	r2, r1, r2
 80132a8:	4013      	ands	r3, r2
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	f040 808e 	bne.w	80133cc <create_DijkstraMap+0x149c>
 80132b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132b4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80132b8:	881a      	ldrh	r2, [r3, #0]
 80132ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132be:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80132c2:	8819      	ldrh	r1, [r3, #0]
 80132c4:	485c      	ldr	r0, [pc, #368]	; (8013438 <create_DijkstraMap+0x1508>)
 80132c6:	4613      	mov	r3, r2
 80132c8:	011b      	lsls	r3, r3, #4
 80132ca:	1a9b      	subs	r3, r3, r2
 80132cc:	440b      	add	r3, r1
 80132ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80132d2:	461c      	mov	r4, r3
 80132d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132d8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80132dc:	881a      	ldrh	r2, [r3, #0]
 80132de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132e2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80132e6:	8819      	ldrh	r1, [r3, #0]
 80132e8:	4853      	ldr	r0, [pc, #332]	; (8013438 <create_DijkstraMap+0x1508>)
 80132ea:	4613      	mov	r3, r2
 80132ec:	011b      	lsls	r3, r3, #4
 80132ee:	1a9b      	subs	r3, r3, r2
 80132f0:	440b      	add	r3, r1
 80132f2:	33f0      	adds	r3, #240	; 0xf0
 80132f4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80132f8:	461a      	mov	r2, r3
 80132fa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80132fe:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013302:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013306:	4413      	add	r3, r2
 8013308:	429c      	cmp	r4, r3
 801330a:	dd5f      	ble.n	80133cc <create_DijkstraMap+0x149c>
							Dijkstra.row_count[Xcoordinate][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 801330c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013310:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013314:	881a      	ldrh	r2, [r3, #0]
 8013316:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801331a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801331e:	8819      	ldrh	r1, [r3, #0]
 8013320:	4845      	ldr	r0, [pc, #276]	; (8013438 <create_DijkstraMap+0x1508>)
 8013322:	4613      	mov	r3, r2
 8013324:	011b      	lsls	r3, r3, #4
 8013326:	1a9b      	subs	r3, r3, r2
 8013328:	440b      	add	r3, r1
 801332a:	33f0      	adds	r3, #240	; 0xf0
 801332c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013330:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013334:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013338:	881b      	ldrh	r3, [r3, #0]
 801333a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801333e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013342:	8812      	ldrh	r2, [r2, #0]
 8013344:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013348:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 801334c:	8809      	ldrh	r1, [r1, #0]
 801334e:	4403      	add	r3, r0
 8013350:	b29c      	uxth	r4, r3
 8013352:	4839      	ldr	r0, [pc, #228]	; (8013438 <create_DijkstraMap+0x1508>)
 8013354:	4613      	mov	r3, r2
 8013356:	011b      	lsls	r3, r3, #4
 8013358:	1a9b      	subs	r3, r3, r2
 801335a:	440b      	add	r3, r1
 801335c:	4622      	mov	r2, r4
 801335e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8013362:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013366:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801336a:	881a      	ldrh	r2, [r3, #0]
 801336c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013370:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013374:	4611      	mov	r1, r2
 8013376:	4618      	mov	r0, r3
 8013378:	f002 f8c6 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801337c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013380:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013384:	881a      	ldrh	r2, [r3, #0]
 8013386:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801338a:	f103 0320 	add.w	r3, r3, #32
 801338e:	3b0c      	subs	r3, #12
 8013390:	4611      	mov	r1, r2
 8013392:	4618      	mov	r0, r3
 8013394:	f002 f8b8 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013398:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801339c:	3b14      	subs	r3, #20
 801339e:	2100      	movs	r1, #0
 80133a0:	4618      	mov	r0, r3
 80133a2:	f002 f8b1 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 80133a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80133aa:	3b3c      	subs	r3, #60	; 0x3c
 80133ac:	2107      	movs	r1, #7
 80133ae:	4618      	mov	r0, r3
 80133b0:	f002 f8aa 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 80133b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133b8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80133bc:	881a      	ldrh	r2, [r3, #0]
 80133be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80133c2:	3b64      	subs	r3, #100	; 0x64
 80133c4:	4611      	mov	r1, r2
 80133c6:	4618      	mov	r0, r3
 80133c8:	f002 f89e 	bl	8015508 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 80133cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133d0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	2b01      	cmp	r3, #1
 80133d8:	d130      	bne.n	801343c <create_DijkstraMap+0x150c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80133da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133de:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80133e2:	881b      	ldrh	r3, [r3, #0]
 80133e4:	3301      	adds	r3, #1
 80133e6:	b29b      	uxth	r3, r3
 80133e8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80133ec:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80133f0:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80133f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133f6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80133fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133fe:	2b05      	cmp	r3, #5
 8013400:	dd05      	ble.n	801340e <create_DijkstraMap+0x14de>
 8013402:	2305      	movs	r3, #5
 8013404:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013408:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801340c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 801340e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013412:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013416:	f9b3 2000 	ldrsh.w	r2, [r3]
 801341a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801341e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013422:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013426:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801342a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801342e:	8013      	strh	r3, [r2, #0]
 8013430:	e014      	b.n	801345c <create_DijkstraMap+0x152c>
 8013432:	bf00      	nop
 8013434:	20001010 	.word	0x20001010
 8013438:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801343c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013440:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013444:	881b      	ldrh	r3, [r3, #0]
 8013446:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801344a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801344e:	8013      	strh	r3, [r2, #0]
 8013450:	2300      	movs	r3, #0
 8013452:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013456:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801345a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801345c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013460:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	4a6e      	ldr	r2, [pc, #440]	; (8013620 <create_DijkstraMap+0x16f0>)
 8013468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801346c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013470:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013474:	8812      	ldrh	r2, [r2, #0]
 8013476:	3201      	adds	r2, #1
 8013478:	2101      	movs	r1, #1
 801347a:	fa01 f202 	lsl.w	r2, r1, r2
 801347e:	4013      	ands	r3, r2
 8013480:	2b00      	cmp	r3, #0
 8013482:	f040 8092 	bne.w	80135aa <create_DijkstraMap+0x167a>
 8013486:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801348a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801348e:	881b      	ldrh	r3, [r3, #0]
 8013490:	1c5a      	adds	r2, r3, #1
 8013492:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013496:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801349a:	8819      	ldrh	r1, [r3, #0]
 801349c:	4861      	ldr	r0, [pc, #388]	; (8013624 <create_DijkstraMap+0x16f4>)
 801349e:	4613      	mov	r3, r2
 80134a0:	011b      	lsls	r3, r3, #4
 80134a2:	1a9b      	subs	r3, r3, r2
 80134a4:	440b      	add	r3, r1
 80134a6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80134aa:	461c      	mov	r4, r3
 80134ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134b4:	881a      	ldrh	r2, [r3, #0]
 80134b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80134be:	8819      	ldrh	r1, [r3, #0]
 80134c0:	4858      	ldr	r0, [pc, #352]	; (8013624 <create_DijkstraMap+0x16f4>)
 80134c2:	4613      	mov	r3, r2
 80134c4:	011b      	lsls	r3, r3, #4
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	440b      	add	r3, r1
 80134ca:	33f0      	adds	r3, #240	; 0xf0
 80134cc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80134d0:	461a      	mov	r2, r3
 80134d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134d6:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80134da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134de:	4413      	add	r3, r2
 80134e0:	429c      	cmp	r4, r3
 80134e2:	dd62      	ble.n	80135aa <create_DijkstraMap+0x167a>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80134e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80134ec:	881a      	ldrh	r2, [r3, #0]
 80134ee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134f2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80134f6:	8819      	ldrh	r1, [r3, #0]
 80134f8:	484a      	ldr	r0, [pc, #296]	; (8013624 <create_DijkstraMap+0x16f4>)
 80134fa:	4613      	mov	r3, r2
 80134fc:	011b      	lsls	r3, r3, #4
 80134fe:	1a9b      	subs	r3, r3, r2
 8013500:	440b      	add	r3, r1
 8013502:	33f0      	adds	r3, #240	; 0xf0
 8013504:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013508:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801350c:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8013510:	881b      	ldrh	r3, [r3, #0]
 8013512:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013516:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801351a:	8812      	ldrh	r2, [r2, #0]
 801351c:	3201      	adds	r2, #1
 801351e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8013522:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013526:	8809      	ldrh	r1, [r1, #0]
 8013528:	4403      	add	r3, r0
 801352a:	b29c      	uxth	r4, r3
 801352c:	483d      	ldr	r0, [pc, #244]	; (8013624 <create_DijkstraMap+0x16f4>)
 801352e:	4613      	mov	r3, r2
 8013530:	011b      	lsls	r3, r3, #4
 8013532:	1a9b      	subs	r3, r3, r2
 8013534:	440b      	add	r3, r1
 8013536:	4622      	mov	r2, r4
 8013538:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 801353c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013540:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013544:	881b      	ldrh	r3, [r3, #0]
 8013546:	3301      	adds	r3, #1
 8013548:	b29a      	uxth	r2, r3
 801354a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801354e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013552:	4611      	mov	r1, r2
 8013554:	4618      	mov	r0, r3
 8013556:	f001 ffd7 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801355a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801355e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013562:	881a      	ldrh	r2, [r3, #0]
 8013564:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013568:	f103 0320 	add.w	r3, r3, #32
 801356c:	3b0c      	subs	r3, #12
 801356e:	4611      	mov	r1, r2
 8013570:	4618      	mov	r0, r3
 8013572:	f001 ffc9 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013576:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801357a:	3b14      	subs	r3, #20
 801357c:	2100      	movs	r1, #0
 801357e:	4618      	mov	r0, r3
 8013580:	f001 ffc2 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8013584:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013588:	3b3c      	subs	r3, #60	; 0x3c
 801358a:	2101      	movs	r1, #1
 801358c:	4618      	mov	r0, r3
 801358e:	f001 ffbb 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013592:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013596:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801359a:	881a      	ldrh	r2, [r3, #0]
 801359c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80135a0:	3b64      	subs	r3, #100	; 0x64
 80135a2:	4611      	mov	r1, r2
 80135a4:	4618      	mov	r0, r3
 80135a6:	f001 ffaf 	bl	8015508 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 80135aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135ae:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80135b2:	881b      	ldrh	r3, [r3, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	f000 81dd 	beq.w	8013974 <create_DijkstraMap+0x1a44>
						if(Direction==SLANT_SOUTH_WEST){
 80135ba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135be:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80135c2:	881b      	ldrh	r3, [r3, #0]
 80135c4:	2b05      	cmp	r3, #5
 80135c6:	d12f      	bne.n	8013628 <create_DijkstraMap+0x16f8>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80135c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135cc:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80135d0:	881b      	ldrh	r3, [r3, #0]
 80135d2:	3301      	adds	r3, #1
 80135d4:	b29b      	uxth	r3, r3
 80135d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80135da:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80135de:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80135e0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135e4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80135e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80135ec:	2b05      	cmp	r3, #5
 80135ee:	dd05      	ble.n	80135fc <create_DijkstraMap+0x16cc>
 80135f0:	2305      	movs	r3, #5
 80135f2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80135f6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80135fa:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80135fc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013600:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013604:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013608:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801360c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013610:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8013614:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013618:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801361c:	8013      	strh	r3, [r2, #0]
 801361e:	e013      	b.n	8013648 <create_DijkstraMap+0x1718>
 8013620:	20001010 	.word	0x20001010
 8013624:	200013f4 	.word	0x200013f4
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8013628:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801362c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013630:	881b      	ldrh	r3, [r3, #0]
 8013632:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013636:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801363a:	8013      	strh	r3, [r2, #0]
 801363c:	2300      	movs	r3, #0
 801363e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013642:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8013646:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.row_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8013648:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801364c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	3b01      	subs	r3, #1
 8013654:	4ad1      	ldr	r2, [pc, #836]	; (801399c <create_DijkstraMap+0x1a6c>)
 8013656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801365a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801365e:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013662:	8812      	ldrh	r2, [r2, #0]
 8013664:	2101      	movs	r1, #1
 8013666:	fa01 f202 	lsl.w	r2, r1, r2
 801366a:	4013      	ands	r3, r2
 801366c:	2b00      	cmp	r3, #0
 801366e:	f040 8092 	bne.w	8013796 <create_DijkstraMap+0x1866>
 8013672:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013676:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801367a:	881a      	ldrh	r2, [r3, #0]
 801367c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013680:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013684:	881b      	ldrh	r3, [r3, #0]
 8013686:	1e59      	subs	r1, r3, #1
 8013688:	48c5      	ldr	r0, [pc, #788]	; (80139a0 <create_DijkstraMap+0x1a70>)
 801368a:	4613      	mov	r3, r2
 801368c:	011b      	lsls	r3, r3, #4
 801368e:	1a9b      	subs	r3, r3, r2
 8013690:	440b      	add	r3, r1
 8013692:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013696:	461c      	mov	r4, r3
 8013698:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801369c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136a0:	881a      	ldrh	r2, [r3, #0]
 80136a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136aa:	8819      	ldrh	r1, [r3, #0]
 80136ac:	48bc      	ldr	r0, [pc, #752]	; (80139a0 <create_DijkstraMap+0x1a70>)
 80136ae:	4613      	mov	r3, r2
 80136b0:	011b      	lsls	r3, r3, #4
 80136b2:	1a9b      	subs	r3, r3, r2
 80136b4:	440b      	add	r3, r1
 80136b6:	33f0      	adds	r3, #240	; 0xf0
 80136b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80136bc:	461a      	mov	r2, r3
 80136be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136c2:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80136c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80136ca:	4413      	add	r3, r2
 80136cc:	429c      	cmp	r4, r3
 80136ce:	dd62      	ble.n	8013796 <create_DijkstraMap+0x1866>
							Dijkstra.row_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80136d0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136d4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80136d8:	881a      	ldrh	r2, [r3, #0]
 80136da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80136e2:	8819      	ldrh	r1, [r3, #0]
 80136e4:	48ae      	ldr	r0, [pc, #696]	; (80139a0 <create_DijkstraMap+0x1a70>)
 80136e6:	4613      	mov	r3, r2
 80136e8:	011b      	lsls	r3, r3, #4
 80136ea:	1a9b      	subs	r3, r3, r2
 80136ec:	440b      	add	r3, r1
 80136ee:	33f0      	adds	r3, #240	; 0xf0
 80136f0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80136f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136f8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80136fc:	881b      	ldrh	r3, [r3, #0]
 80136fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013702:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013706:	8812      	ldrh	r2, [r2, #0]
 8013708:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 801370c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8013710:	8809      	ldrh	r1, [r1, #0]
 8013712:	3901      	subs	r1, #1
 8013714:	4403      	add	r3, r0
 8013716:	b29c      	uxth	r4, r3
 8013718:	48a1      	ldr	r0, [pc, #644]	; (80139a0 <create_DijkstraMap+0x1a70>)
 801371a:	4613      	mov	r3, r2
 801371c:	011b      	lsls	r3, r3, #4
 801371e:	1a9b      	subs	r3, r3, r2
 8013720:	440b      	add	r3, r1
 8013722:	4622      	mov	r2, r4
 8013724:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8013728:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801372c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013730:	881a      	ldrh	r2, [r3, #0]
 8013732:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013736:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801373a:	4611      	mov	r1, r2
 801373c:	4618      	mov	r0, r3
 801373e:	f001 fee3 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8013742:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013746:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	3b01      	subs	r3, #1
 801374e:	b29a      	uxth	r2, r3
 8013750:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013754:	f103 0320 	add.w	r3, r3, #32
 8013758:	3b0c      	subs	r3, #12
 801375a:	4611      	mov	r1, r2
 801375c:	4618      	mov	r0, r3
 801375e:	f001 fed3 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013762:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013766:	3b14      	subs	r3, #20
 8013768:	2100      	movs	r1, #0
 801376a:	4618      	mov	r0, r3
 801376c:	f001 fecc 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8013770:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013774:	3b3c      	subs	r3, #60	; 0x3c
 8013776:	2105      	movs	r1, #5
 8013778:	4618      	mov	r0, r3
 801377a:	f001 fec5 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801377e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013782:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013786:	881a      	ldrh	r2, [r3, #0]
 8013788:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801378c:	3b64      	subs	r3, #100	; 0x64
 801378e:	4611      	mov	r1, r2
 8013790:	4618      	mov	r0, r3
 8013792:	f001 feb9 	bl	8015508 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8013796:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801379a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 801379e:	881b      	ldrh	r3, [r3, #0]
 80137a0:	2b03      	cmp	r3, #3
 80137a2:	d12b      	bne.n	80137fc <create_DijkstraMap+0x18cc>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80137a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137a8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80137ac:	881b      	ldrh	r3, [r3, #0]
 80137ae:	3301      	adds	r3, #1
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137b6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80137ba:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80137bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137c0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80137c8:	2b05      	cmp	r3, #5
 80137ca:	dd05      	ble.n	80137d8 <create_DijkstraMap+0x18a8>
 80137cc:	2305      	movs	r3, #5
 80137ce:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137d2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80137d6:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80137d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137dc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80137e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80137e4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80137e8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80137ec:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80137f0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80137f4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80137f8:	8013      	strh	r3, [r2, #0]
 80137fa:	e00f      	b.n	801381c <create_DijkstraMap+0x18ec>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 80137fc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8013800:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801380a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801380e:	8013      	strh	r3, [r2, #0]
 8013810:	2300      	movs	r3, #0
 8013812:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013816:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801381a:	8013      	strh	r3, [r2, #0]
						if((wall.row[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 801381c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013820:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	3b01      	subs	r3, #1
 8013828:	4a5c      	ldr	r2, [pc, #368]	; (801399c <create_DijkstraMap+0x1a6c>)
 801382a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801382e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013832:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013836:	8812      	ldrh	r2, [r2, #0]
 8013838:	3201      	adds	r2, #1
 801383a:	2101      	movs	r1, #1
 801383c:	fa01 f202 	lsl.w	r2, r1, r2
 8013840:	4013      	ands	r3, r2
 8013842:	2b00      	cmp	r3, #0
 8013844:	f040 8096 	bne.w	8013974 <create_DijkstraMap+0x1a44>
 8013848:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801384c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013850:	881b      	ldrh	r3, [r3, #0]
 8013852:	1c5a      	adds	r2, r3, #1
 8013854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013858:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801385c:	881b      	ldrh	r3, [r3, #0]
 801385e:	1e59      	subs	r1, r3, #1
 8013860:	484f      	ldr	r0, [pc, #316]	; (80139a0 <create_DijkstraMap+0x1a70>)
 8013862:	4613      	mov	r3, r2
 8013864:	011b      	lsls	r3, r3, #4
 8013866:	1a9b      	subs	r3, r3, r2
 8013868:	440b      	add	r3, r1
 801386a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801386e:	461c      	mov	r4, r3
 8013870:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013874:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013878:	881a      	ldrh	r2, [r3, #0]
 801387a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801387e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013882:	8819      	ldrh	r1, [r3, #0]
 8013884:	4846      	ldr	r0, [pc, #280]	; (80139a0 <create_DijkstraMap+0x1a70>)
 8013886:	4613      	mov	r3, r2
 8013888:	011b      	lsls	r3, r3, #4
 801388a:	1a9b      	subs	r3, r3, r2
 801388c:	440b      	add	r3, r1
 801388e:	33f0      	adds	r3, #240	; 0xf0
 8013890:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013894:	461a      	mov	r2, r3
 8013896:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801389a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801389e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80138a2:	4413      	add	r3, r2
 80138a4:	429c      	cmp	r4, r3
 80138a6:	dd65      	ble.n	8013974 <create_DijkstraMap+0x1a44>
							Dijkstra.row_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.column_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 80138a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138ac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80138b0:	881a      	ldrh	r2, [r3, #0]
 80138b2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138b6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80138ba:	8819      	ldrh	r1, [r3, #0]
 80138bc:	4838      	ldr	r0, [pc, #224]	; (80139a0 <create_DijkstraMap+0x1a70>)
 80138be:	4613      	mov	r3, r2
 80138c0:	011b      	lsls	r3, r3, #4
 80138c2:	1a9b      	subs	r3, r3, r2
 80138c4:	440b      	add	r3, r1
 80138c6:	33f0      	adds	r3, #240	; 0xf0
 80138c8:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80138cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80138d0:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80138d4:	881b      	ldrh	r3, [r3, #0]
 80138d6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80138da:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 80138de:	8812      	ldrh	r2, [r2, #0]
 80138e0:	3201      	adds	r2, #1
 80138e2:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80138e6:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80138ea:	8809      	ldrh	r1, [r1, #0]
 80138ec:	3901      	subs	r1, #1
 80138ee:	4403      	add	r3, r0
 80138f0:	b29c      	uxth	r4, r3
 80138f2:	482b      	ldr	r0, [pc, #172]	; (80139a0 <create_DijkstraMap+0x1a70>)
 80138f4:	4613      	mov	r3, r2
 80138f6:	011b      	lsls	r3, r3, #4
 80138f8:	1a9b      	subs	r3, r3, r2
 80138fa:	440b      	add	r3, r1
 80138fc:	4622      	mov	r2, r4
 80138fe:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 8013902:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013906:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	3301      	adds	r3, #1
 801390e:	b29a      	uxth	r2, r3
 8013910:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8013914:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8013918:	4611      	mov	r1, r2
 801391a:	4618      	mov	r0, r3
 801391c:	f001 fdf4 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 8013920:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013924:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013928:	881b      	ldrh	r3, [r3, #0]
 801392a:	3b01      	subs	r3, #1
 801392c:	b29a      	uxth	r2, r3
 801392e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013932:	f103 0320 	add.w	r3, r3, #32
 8013936:	3b0c      	subs	r3, #12
 8013938:	4611      	mov	r1, r2
 801393a:	4618      	mov	r0, r3
 801393c:	f001 fde4 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8013940:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013944:	3b14      	subs	r3, #20
 8013946:	2100      	movs	r1, #0
 8013948:	4618      	mov	r0, r3
 801394a:	f001 fddd 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 801394e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8013952:	3b3c      	subs	r3, #60	; 0x3c
 8013954:	2103      	movs	r1, #3
 8013956:	4618      	mov	r0, r3
 8013958:	f001 fdd6 	bl	8015508 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 801395c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013960:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013964:	881a      	ldrh	r2, [r3, #0]
 8013966:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801396a:	3b64      	subs	r3, #100	; 0x64
 801396c:	4611      	mov	r1, r2
 801396e:	4618      	mov	r0, r3
 8013970:	f001 fdca 	bl	8015508 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8013974:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013978:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 801397c:	881b      	ldrh	r3, [r3, #0]
 801397e:	3301      	adds	r3, #1
 8013980:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013984:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8013988:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 801398a:	f7fe bc1e 	b.w	80121ca <create_DijkstraMap+0x29a>

		}



}
 801398e:	bf00      	nop
 8013990:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8013994:	3704      	adds	r7, #4
 8013996:	46bd      	mov	sp, r7
 8013998:	bd90      	pop	{r4, r7, pc}
 801399a:	bf00      	nop
 801399c:	20001010 	.word	0x20001010
 80139a0:	200013f4 	.word	0x200013f4

080139a4 <route_Dijkstra>:





void route_Dijkstra(void){
 80139a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139a6:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 80139aa:	b089      	sub	sp, #36	; 0x24
 80139ac:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 80139ae:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139b2:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80139b6:	4618      	mov	r0, r3
 80139b8:	f001 fd96 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_y);
 80139bc:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80139c0:	f103 0310 	add.w	r3, r3, #16
 80139c4:	3b1c      	subs	r3, #28
 80139c6:	4618      	mov	r0, r3
 80139c8:	f001 fd8e 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_matrix);
 80139cc:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80139d0:	f103 0310 	add.w	r3, r3, #16
 80139d4:	3b04      	subs	r3, #4
 80139d6:	4618      	mov	r0, r3
 80139d8:	f001 fd86 	bl	80154e8 <initStack_walk>
	initStack_walk(&g_Goal_x);
 80139dc:	48be      	ldr	r0, [pc, #760]	; (8013cd8 <route_Dijkstra+0x334>)
 80139de:	f001 fd83 	bl	80154e8 <initStack_walk>
	initStack_walk(&g_Goal_y);
 80139e2:	48be      	ldr	r0, [pc, #760]	; (8013cdc <route_Dijkstra+0x338>)
 80139e4:	f001 fd80 	bl	80154e8 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80139e8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80139ec:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80139f0:	2100      	movs	r1, #0
 80139f2:	4618      	mov	r0, r3
 80139f4:	f001 fd88 	bl	8015508 <pushStack_walk>
 80139f8:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80139fc:	f103 0310 	add.w	r3, r3, #16
 8013a00:	3b1c      	subs	r3, #28
 8013a02:	2100      	movs	r1, #0
 8013a04:	4618      	mov	r0, r3
 8013a06:	f001 fd7f 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);
 8013a0a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013a0e:	f103 0310 	add.w	r3, r3, #16
 8013a12:	3b04      	subs	r3, #4
 8013a14:	2100      	movs	r1, #0
 8013a16:	4618      	mov	r0, r3
 8013a18:	f001 fd76 	bl	8015508 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int xd = 0;
 8013a1c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a20:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a24:	2200      	movs	r2, #0
 8013a26:	601a      	str	r2, [r3, #0]
	int yd = 0;
 8013a28:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a2c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013a30:	2200      	movs	r2, #0
 8013a32:	601a      	str	r2, [r3, #0]
	int direction_d = 1;
 8013a34:	2301      	movs	r3, #1
 8013a36:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013a3a:	f102 020c 	add.w	r2, r2, #12
 8013a3e:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&xd,&yd,direction_d);
 8013a40:	f107 0110 	add.w	r1, r7, #16
 8013a44:	390c      	subs	r1, #12
 8013a46:	f107 0310 	add.w	r3, r7, #16
 8013a4a:	3b08      	subs	r3, #8
 8013a4c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013a50:	f102 020c 	add.w	r2, r2, #12
 8013a54:	6812      	ldr	r2, [r2, #0]
 8013a56:	4618      	mov	r0, r3
 8013a58:	f7fa ffae 	bl	800e9b8 <update_coordinate>

		if((xd == GOAL_X || xd == GOAL_X+1) && (yd == GOAL_Y || yd == GOAL_Y+1)){
 8013a5c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a60:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	2b05      	cmp	r3, #5
 8013a68:	d006      	beq.n	8013a78 <route_Dijkstra+0xd4>
 8013a6a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a6e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	2b06      	cmp	r3, #6
 8013a76:	d10f      	bne.n	8013a98 <route_Dijkstra+0xf4>
 8013a78:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a7c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	2b04      	cmp	r3, #4
 8013a84:	f000 8331 	beq.w	80140ea <route_Dijkstra+0x746>
 8013a88:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a8c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	2b05      	cmp	r3, #5
 8013a94:	f000 8329 	beq.w	80140ea <route_Dijkstra+0x746>
					break;
		}


		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,xd,yd,direction_d);
 8013a98:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013a9c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013aa0:	6819      	ldr	r1, [r3, #0]
 8013aa2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013aa6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013aaa:	681c      	ldr	r4, [r3, #0]
 8013aac:	f107 0310 	add.w	r3, r7, #16
 8013ab0:	3b04      	subs	r3, #4
 8013ab2:	f107 0210 	add.w	r2, r7, #16
 8013ab6:	3a02      	subs	r2, #2
 8013ab8:	f107 0610 	add.w	r6, r7, #16
 8013abc:	f107 0090 	add.w	r0, r7, #144	; 0x90
 8013ac0:	387e      	subs	r0, #126	; 0x7e
 8013ac2:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 8013ac6:	f105 050c 	add.w	r5, r5, #12
 8013aca:	682d      	ldr	r5, [r5, #0]
 8013acc:	9502      	str	r5, [sp, #8]
 8013ace:	9401      	str	r4, [sp, #4]
 8013ad0:	9100      	str	r1, [sp, #0]
 8013ad2:	4631      	mov	r1, r6
 8013ad4:	f7fe f992 	bl	8011dfc <search_AroundDijkstraCount>
		//get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
		//if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
		//if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013ad8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013adc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013ae0:	881b      	ldrh	r3, [r3, #0]
 8013ae2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d11b      	bne.n	8013b22 <route_Dijkstra+0x17e>
 8013aea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013aee:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013af2:	881b      	ldrh	r3, [r3, #0]
 8013af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013af8:	4293      	cmp	r3, r2
 8013afa:	d112      	bne.n	8013b22 <route_Dijkstra+0x17e>
 8013afc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b00:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d109      	bne.n	8013b22 <route_Dijkstra+0x17e>
 8013b0e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b12:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	f000 82e3 	beq.w	80140e8 <route_Dijkstra+0x744>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 8013b22:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b26:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b2a:	881a      	ldrh	r2, [r3, #0]
 8013b2c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b30:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013b34:	881b      	ldrh	r3, [r3, #0]
 8013b36:	429a      	cmp	r2, r3
 8013b38:	f200 80d2 	bhi.w	8013ce0 <route_Dijkstra+0x33c>
 8013b3c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b40:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b44:	881a      	ldrh	r2, [r3, #0]
 8013b46:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b4a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013b4e:	881b      	ldrh	r3, [r3, #0]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	f200 80c5 	bhi.w	8013ce0 <route_Dijkstra+0x33c>
 8013b56:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b5a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013b5e:	881a      	ldrh	r2, [r3, #0]
 8013b60:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b64:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013b68:	881b      	ldrh	r3, [r3, #0]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	f200 80b8 	bhi.w	8013ce0 <route_Dijkstra+0x33c>
			// 直進
			switch (direction_d) {		//
 8013b70:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b74:	f103 030c 	add.w	r3, r3, #12
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	2b03      	cmp	r3, #3
 8013b7e:	f200 80b0 	bhi.w	8013ce2 <route_Dijkstra+0x33e>
 8013b82:	a201      	add	r2, pc, #4	; (adr r2, 8013b88 <route_Dijkstra+0x1e4>)
 8013b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b88:	08013b99 	.word	0x08013b99
 8013b8c:	08013be7 	.word	0x08013be7
 8013b90:	08013c35 	.word	0x08013c35
 8013b94:	08013c87 	.word	0x08013c87
			case 1:
				pushStack_walk(&stack_x,xd);
 8013b98:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013b9c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	b29a      	uxth	r2, r3
 8013ba4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013ba8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013bac:	4611      	mov	r1, r2
 8013bae:	4618      	mov	r0, r3
 8013bb0:	f001 fcaa 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013bb4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bb8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	b29a      	uxth	r2, r3
 8013bc0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013bc4:	f103 0310 	add.w	r3, r3, #16
 8013bc8:	3b1c      	subs	r3, #28
 8013bca:	4611      	mov	r1, r2
 8013bcc:	4618      	mov	r0, r3
 8013bce:	f001 fc9b 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013bd2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013bd6:	f103 0310 	add.w	r3, r3, #16
 8013bda:	3b04      	subs	r3, #4
 8013bdc:	2100      	movs	r1, #0
 8013bde:	4618      	mov	r0, r3
 8013be0:	f001 fc92 	bl	8015508 <pushStack_walk>
				break;
 8013be4:	e07d      	b.n	8013ce2 <route_Dijkstra+0x33e>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013be6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013bea:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	b29a      	uxth	r2, r3
 8013bf2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013bf6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013bfa:	4611      	mov	r1, r2
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f001 fc83 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013c02:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c06:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	b29a      	uxth	r2, r3
 8013c0e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c12:	f103 0310 	add.w	r3, r3, #16
 8013c16:	3b1c      	subs	r3, #28
 8013c18:	4611      	mov	r1, r2
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	f001 fc74 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013c20:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c24:	f103 0310 	add.w	r3, r3, #16
 8013c28:	3b04      	subs	r3, #4
 8013c2a:	2101      	movs	r1, #1
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f001 fc6b 	bl	8015508 <pushStack_walk>
				break;
 8013c32:	e056      	b.n	8013ce2 <route_Dijkstra+0x33e>
			case 3:
				pushStack_walk(&stack_x,xd);
 8013c34:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c38:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	b29a      	uxth	r2, r3
 8013c40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c44:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c48:	4611      	mov	r1, r2
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	f001 fc5c 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013c50:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c54:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	3b01      	subs	r3, #1
 8013c5e:	b29a      	uxth	r2, r3
 8013c60:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013c64:	f103 0310 	add.w	r3, r3, #16
 8013c68:	3b1c      	subs	r3, #28
 8013c6a:	4611      	mov	r1, r2
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f001 fc4b 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013c72:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013c76:	f103 0310 	add.w	r3, r3, #16
 8013c7a:	3b04      	subs	r3, #4
 8013c7c:	2100      	movs	r1, #0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f001 fc42 	bl	8015508 <pushStack_walk>
				break;
 8013c84:	e02d      	b.n	8013ce2 <route_Dijkstra+0x33e>
			case 4:
				pushStack_walk(&stack_x,xd-1);
 8013c86:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013c8a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013c8e:	681b      	ldr	r3, [r3, #0]
 8013c90:	b29b      	uxth	r3, r3
 8013c92:	3b01      	subs	r3, #1
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013c9a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013c9e:	4611      	mov	r1, r2
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f001 fc31 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013ca6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013caa:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	b29a      	uxth	r2, r3
 8013cb2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013cb6:	f103 0310 	add.w	r3, r3, #16
 8013cba:	3b1c      	subs	r3, #28
 8013cbc:	4611      	mov	r1, r2
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f001 fc22 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013cc4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013cc8:	f103 0310 	add.w	r3, r3, #16
 8013ccc:	3b04      	subs	r3, #4
 8013cce:	2101      	movs	r1, #1
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f001 fc19 	bl	8015508 <pushStack_walk>
				break;
 8013cd6:	e004      	b.n	8013ce2 <route_Dijkstra+0x33e>
 8013cd8:	200017b4 	.word	0x200017b4
 8013cdc:	2000275c 	.word	0x2000275c
			}

		}
 8013ce0:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013ce2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ce6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013cea:	881a      	ldrh	r2, [r3, #0]
 8013cec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013cf0:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013cf4:	881b      	ldrh	r3, [r3, #0]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	f080 80d9 	bcs.w	8013eae <route_Dijkstra+0x50a>
 8013cfc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d00:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d04:	881a      	ldrh	r2, [r3, #0]
 8013d06:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d0a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013d0e:	881b      	ldrh	r3, [r3, #0]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	f200 80cc 	bhi.w	8013eae <route_Dijkstra+0x50a>
 8013d16:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d1a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013d1e:	881a      	ldrh	r2, [r3, #0]
 8013d20:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d24:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013d28:	881b      	ldrh	r3, [r3, #0]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	f200 80bf 	bhi.w	8013eae <route_Dijkstra+0x50a>
			// 右旋回
			switch (direction_d) {		//
 8013d30:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013d34:	f103 030c 	add.w	r3, r3, #12
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	3b01      	subs	r3, #1
 8013d3c:	2b03      	cmp	r3, #3
 8013d3e:	f200 80ab 	bhi.w	8013e98 <route_Dijkstra+0x4f4>
 8013d42:	a201      	add	r2, pc, #4	; (adr r2, 8013d48 <route_Dijkstra+0x3a4>)
 8013d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d48:	08013d59 	.word	0x08013d59
 8013d4c:	08013da7 	.word	0x08013da7
 8013d50:	08013df9 	.word	0x08013df9
 8013d54:	08013e4b 	.word	0x08013e4b
			case 1:
				pushStack_walk(&stack_x,xd);
 8013d58:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d5c:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	b29a      	uxth	r2, r3
 8013d64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013d68:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013d6c:	4611      	mov	r1, r2
 8013d6e:	4618      	mov	r0, r3
 8013d70:	f001 fbca 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013d74:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013d78:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	b29a      	uxth	r2, r3
 8013d80:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013d84:	f103 0310 	add.w	r3, r3, #16
 8013d88:	3b1c      	subs	r3, #28
 8013d8a:	4611      	mov	r1, r2
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f001 fbbb 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013d92:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013d96:	f103 0310 	add.w	r3, r3, #16
 8013d9a:	3b04      	subs	r3, #4
 8013d9c:	2101      	movs	r1, #1
 8013d9e:	4618      	mov	r0, r3
 8013da0:	f001 fbb2 	bl	8015508 <pushStack_walk>
				break;
 8013da4:	e078      	b.n	8013e98 <route_Dijkstra+0x4f4>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013da6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013daa:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	b29a      	uxth	r2, r3
 8013db2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013db6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013dba:	4611      	mov	r1, r2
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f001 fba3 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 8013dc2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013dc6:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	b29b      	uxth	r3, r3
 8013dce:	3b01      	subs	r3, #1
 8013dd0:	b29a      	uxth	r2, r3
 8013dd2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013dd6:	f103 0310 	add.w	r3, r3, #16
 8013dda:	3b1c      	subs	r3, #28
 8013ddc:	4611      	mov	r1, r2
 8013dde:	4618      	mov	r0, r3
 8013de0:	f001 fb92 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013de4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013de8:	f103 0310 	add.w	r3, r3, #16
 8013dec:	3b04      	subs	r3, #4
 8013dee:	2100      	movs	r1, #0
 8013df0:	4618      	mov	r0, r3
 8013df2:	f001 fb89 	bl	8015508 <pushStack_walk>
				break;
 8013df6:	e04f      	b.n	8013e98 <route_Dijkstra+0x4f4>
			case 3:
				pushStack_walk(&stack_x,xd-1);
 8013df8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013dfc:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	b29b      	uxth	r3, r3
 8013e04:	3b01      	subs	r3, #1
 8013e06:	b29a      	uxth	r2, r3
 8013e08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e0c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f001 fb78 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013e18:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e1c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	b29a      	uxth	r2, r3
 8013e24:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e28:	f103 0310 	add.w	r3, r3, #16
 8013e2c:	3b1c      	subs	r3, #28
 8013e2e:	4611      	mov	r1, r2
 8013e30:	4618      	mov	r0, r3
 8013e32:	f001 fb69 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013e36:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e3a:	f103 0310 	add.w	r3, r3, #16
 8013e3e:	3b04      	subs	r3, #4
 8013e40:	2101      	movs	r1, #1
 8013e42:	4618      	mov	r0, r3
 8013e44:	f001 fb60 	bl	8015508 <pushStack_walk>
				break;
 8013e48:	e026      	b.n	8013e98 <route_Dijkstra+0x4f4>
			case 4:
				pushStack_walk(&stack_x,xd);
 8013e4a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e4e:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	b29a      	uxth	r2, r3
 8013e56:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013e5a:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013e5e:	4611      	mov	r1, r2
 8013e60:	4618      	mov	r0, r3
 8013e62:	f001 fb51 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013e66:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013e6a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	b29a      	uxth	r2, r3
 8013e72:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013e76:	f103 0310 	add.w	r3, r3, #16
 8013e7a:	3b1c      	subs	r3, #28
 8013e7c:	4611      	mov	r1, r2
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f001 fb42 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013e84:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013e88:	f103 0310 	add.w	r3, r3, #16
 8013e8c:	3b04      	subs	r3, #4
 8013e8e:	2100      	movs	r1, #0
 8013e90:	4618      	mov	r0, r3
 8013e92:	f001 fb39 	bl	8015508 <pushStack_walk>
				break;
 8013e96:	bf00      	nop
			}
			direction_d++;
 8013e98:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013e9c:	f103 030c 	add.w	r3, r3, #12
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	3301      	adds	r3, #1
 8013ea4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013ea8:	f102 020c 	add.w	r2, r2, #12
 8013eac:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8013eae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013eb2:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013eb6:	881a      	ldrh	r2, [r3, #0]
 8013eb8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ebc:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013ec0:	881b      	ldrh	r3, [r3, #0]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	f080 80d9 	bcs.w	801407a <route_Dijkstra+0x6d6>
 8013ec8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ecc:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013ed0:	881a      	ldrh	r2, [r3, #0]
 8013ed2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ed6:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	f080 80cc 	bcs.w	801407a <route_Dijkstra+0x6d6>
 8013ee2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ee6:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013eea:	881a      	ldrh	r2, [r3, #0]
 8013eec:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013ef0:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013ef4:	881b      	ldrh	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	f200 80bf 	bhi.w	801407a <route_Dijkstra+0x6d6>
			// 左旋回
			switch (direction_d) {		//
 8013efc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013f00:	f103 030c 	add.w	r3, r3, #12
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	3b01      	subs	r3, #1
 8013f08:	2b03      	cmp	r3, #3
 8013f0a:	f200 80ab 	bhi.w	8014064 <route_Dijkstra+0x6c0>
 8013f0e:	a201      	add	r2, pc, #4	; (adr r2, 8013f14 <route_Dijkstra+0x570>)
 8013f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f14:	08013f25 	.word	0x08013f25
 8013f18:	08013f77 	.word	0x08013f77
 8013f1c:	08013fc5 	.word	0x08013fc5
 8013f20:	08014013 	.word	0x08014013
			case 1:
				pushStack_walk(&stack_x,xd-1);
 8013f24:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f28:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	b29b      	uxth	r3, r3
 8013f30:	3b01      	subs	r3, #1
 8013f32:	b29a      	uxth	r2, r3
 8013f34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f38:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f001 fae2 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013f44:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f48:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	b29a      	uxth	r2, r3
 8013f50:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013f54:	f103 0310 	add.w	r3, r3, #16
 8013f58:	3b1c      	subs	r3, #28
 8013f5a:	4611      	mov	r1, r2
 8013f5c:	4618      	mov	r0, r3
 8013f5e:	f001 fad3 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013f62:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013f66:	f103 0310 	add.w	r3, r3, #16
 8013f6a:	3b04      	subs	r3, #4
 8013f6c:	2101      	movs	r1, #1
 8013f6e:	4618      	mov	r0, r3
 8013f70:	f001 faca 	bl	8015508 <pushStack_walk>
				break;
 8013f74:	e076      	b.n	8014064 <route_Dijkstra+0x6c0>
			case 2:
				pushStack_walk(&stack_x,xd);
 8013f76:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f7a:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	b29a      	uxth	r2, r3
 8013f82:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013f86:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013f8a:	4611      	mov	r1, r2
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f001 fabb 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013f92:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013f96:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	b29a      	uxth	r2, r3
 8013f9e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013fa2:	f103 0310 	add.w	r3, r3, #16
 8013fa6:	3b1c      	subs	r3, #28
 8013fa8:	4611      	mov	r1, r2
 8013faa:	4618      	mov	r0, r3
 8013fac:	f001 faac 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013fb0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013fb4:	f103 0310 	add.w	r3, r3, #16
 8013fb8:	3b04      	subs	r3, #4
 8013fba:	2100      	movs	r1, #0
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	f001 faa3 	bl	8015508 <pushStack_walk>
				break;
 8013fc2:	e04f      	b.n	8014064 <route_Dijkstra+0x6c0>
			case 3:
				pushStack_walk(&stack_x,xd);
 8013fc4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fc8:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	b29a      	uxth	r2, r3
 8013fd0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013fd4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013fd8:	4611      	mov	r1, r2
 8013fda:	4618      	mov	r0, r3
 8013fdc:	f001 fa94 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd);
 8013fe0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013fe4:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	b29a      	uxth	r2, r3
 8013fec:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013ff0:	f103 0310 	add.w	r3, r3, #16
 8013ff4:	3b1c      	subs	r3, #28
 8013ff6:	4611      	mov	r1, r2
 8013ff8:	4618      	mov	r0, r3
 8013ffa:	f001 fa85 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013ffe:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014002:	f103 0310 	add.w	r3, r3, #16
 8014006:	3b04      	subs	r3, #4
 8014008:	2101      	movs	r1, #1
 801400a:	4618      	mov	r0, r3
 801400c:	f001 fa7c 	bl	8015508 <pushStack_walk>
				break;
 8014010:	e028      	b.n	8014064 <route_Dijkstra+0x6c0>
			case 4:
				pushStack_walk(&stack_x,xd);
 8014012:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014016:	f6a3 6308 	subw	r3, r3, #3592	; 0xe08
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	b29a      	uxth	r2, r3
 801401e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8014022:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8014026:	4611      	mov	r1, r2
 8014028:	4618      	mov	r0, r3
 801402a:	f001 fa6d 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_y,yd-1);
 801402e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8014032:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	b29b      	uxth	r3, r3
 801403a:	3b01      	subs	r3, #1
 801403c:	b29a      	uxth	r2, r3
 801403e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014042:	f103 0310 	add.w	r3, r3, #16
 8014046:	3b1c      	subs	r3, #28
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f001 fa5c 	bl	8015508 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8014050:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014054:	f103 0310 	add.w	r3, r3, #16
 8014058:	3b04      	subs	r3, #4
 801405a:	2100      	movs	r1, #0
 801405c:	4618      	mov	r0, r3
 801405e:	f001 fa53 	bl	8015508 <pushStack_walk>
				break;
 8014062:	bf00      	nop
			}
			direction_d--;
 8014064:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014068:	f103 030c 	add.w	r3, r3, #12
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	3b01      	subs	r3, #1
 8014070:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014074:	f102 020c 	add.w	r2, r2, #12
 8014078:	6013      	str	r3, [r2, #0]
		}

		if (direction_d == 5) {
 801407a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801407e:	f103 030c 	add.w	r3, r3, #12
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b05      	cmp	r3, #5
 8014086:	d105      	bne.n	8014094 <route_Dijkstra+0x6f0>
			direction_d = 1;
 8014088:	2301      	movs	r3, #1
 801408a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801408e:	f102 020c 	add.w	r2, r2, #12
 8014092:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 6) {
 8014094:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014098:	f103 030c 	add.w	r3, r3, #12
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b06      	cmp	r3, #6
 80140a0:	d105      	bne.n	80140ae <route_Dijkstra+0x70a>
			direction_d = 2;
 80140a2:	2302      	movs	r3, #2
 80140a4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140a8:	f102 020c 	add.w	r2, r2, #12
 80140ac:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == 0) {
 80140ae:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140b2:	f103 030c 	add.w	r3, r3, #12
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d105      	bne.n	80140c8 <route_Dijkstra+0x724>
			direction_d = 4;
 80140bc:	2304      	movs	r3, #4
 80140be:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140c2:	f102 020c 	add.w	r2, r2, #12
 80140c6:	6013      	str	r3, [r2, #0]
		}
		if (direction_d == -1) {
 80140c8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80140cc:	f103 030c 	add.w	r3, r3, #12
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140d6:	f47f acb3 	bne.w	8013a40 <route_Dijkstra+0x9c>
			direction_d = 3;
 80140da:	2303      	movs	r3, #3
 80140dc:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140e0:	f102 020c 	add.w	r2, r2, #12
 80140e4:	6013      	str	r3, [r2, #0]
		update_coordinate(&xd,&yd,direction_d);
 80140e6:	e4ab      	b.n	8013a40 <route_Dijkstra+0x9c>
			break;
 80140e8:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 80140ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80140ee:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80140f2:	4618      	mov	r0, r3
 80140f4:	f001 fa32 	bl	801555c <popStack_walk>
 80140f8:	4603      	mov	r3, r0
 80140fa:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80140fe:	f102 020a 	add.w	r2, r2, #10
 8014102:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8014104:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8014108:	f103 0310 	add.w	r3, r3, #16
 801410c:	3b1c      	subs	r3, #28
 801410e:	4618      	mov	r0, r3
 8014110:	f001 fa24 	bl	801555c <popStack_walk>
 8014114:	4603      	mov	r3, r0
 8014116:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801411a:	f102 0208 	add.w	r2, r2, #8
 801411e:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8014120:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8014124:	f103 0310 	add.w	r3, r3, #16
 8014128:	3b04      	subs	r3, #4
 801412a:	4618      	mov	r0, r3
 801412c:	f001 fa16 	bl	801555c <popStack_walk>
 8014130:	4603      	mov	r3, r0
 8014132:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014136:	f102 0206 	add.w	r2, r2, #6
 801413a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 801413c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014140:	f103 030a 	add.w	r3, r3, #10
 8014144:	881b      	ldrh	r3, [r3, #0]
 8014146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801414a:	4293      	cmp	r3, r2
 801414c:	f000 80d2 	beq.w	80142f4 <route_Dijkstra+0x950>
 8014150:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014154:	f103 0308 	add.w	r3, r3, #8
 8014158:	881b      	ldrh	r3, [r3, #0]
 801415a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801415e:	4293      	cmp	r3, r2
 8014160:	f000 80c8 	beq.w	80142f4 <route_Dijkstra+0x950>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==ROW && ((wall.row_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 8014164:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014168:	f103 0306 	add.w	r3, r3, #6
 801416c:	881b      	ldrh	r3, [r3, #0]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d15a      	bne.n	8014228 <route_Dijkstra+0x884>
 8014172:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014176:	f103 0308 	add.w	r3, r3, #8
 801417a:	881b      	ldrh	r3, [r3, #0]
 801417c:	4a60      	ldr	r2, [pc, #384]	; (8014300 <route_Dijkstra+0x95c>)
 801417e:	331e      	adds	r3, #30
 8014180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014184:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014188:	f102 020a 	add.w	r2, r2, #10
 801418c:	8812      	ldrh	r2, [r2, #0]
 801418e:	2101      	movs	r1, #1
 8014190:	fa01 f202 	lsl.w	r2, r1, r2
 8014194:	4013      	ands	r3, r2
 8014196:	2b00      	cmp	r3, #0
 8014198:	d146      	bne.n	8014228 <route_Dijkstra+0x884>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 801419a:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801419e:	f103 030a 	add.w	r3, r3, #10
 80141a2:	881a      	ldrh	r2, [r3, #0]
 80141a4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141a8:	f103 0308 	add.w	r3, r3, #8
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	4955      	ldr	r1, [pc, #340]	; (8014304 <route_Dijkstra+0x960>)
 80141b0:	0112      	lsls	r2, r2, #4
 80141b2:	4413      	add	r3, r2
 80141b4:	2200      	movs	r2, #0
 80141b6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 80141ba:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141be:	f103 030a 	add.w	r3, r3, #10
 80141c2:	881a      	ldrh	r2, [r3, #0]
 80141c4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141c8:	f103 0308 	add.w	r3, r3, #8
 80141cc:	881b      	ldrh	r3, [r3, #0]
 80141ce:	3301      	adds	r3, #1
 80141d0:	494c      	ldr	r1, [pc, #304]	; (8014304 <route_Dijkstra+0x960>)
 80141d2:	0112      	lsls	r2, r2, #4
 80141d4:	4413      	add	r3, r2
 80141d6:	2200      	movs	r2, #0
 80141d8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80141dc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141e0:	f103 030a 	add.w	r3, r3, #10
 80141e4:	881b      	ldrh	r3, [r3, #0]
 80141e6:	4619      	mov	r1, r3
 80141e8:	4847      	ldr	r0, [pc, #284]	; (8014308 <route_Dijkstra+0x964>)
 80141ea:	f001 f98d 	bl	8015508 <pushStack_walk>
 80141ee:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80141f2:	f103 0308 	add.w	r3, r3, #8
 80141f6:	881b      	ldrh	r3, [r3, #0]
 80141f8:	4619      	mov	r1, r3
 80141fa:	4844      	ldr	r0, [pc, #272]	; (801430c <route_Dijkstra+0x968>)
 80141fc:	f001 f984 	bl	8015508 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8014200:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014204:	f103 030a 	add.w	r3, r3, #10
 8014208:	881b      	ldrh	r3, [r3, #0]
 801420a:	4619      	mov	r1, r3
 801420c:	483e      	ldr	r0, [pc, #248]	; (8014308 <route_Dijkstra+0x964>)
 801420e:	f001 f97b 	bl	8015508 <pushStack_walk>
 8014212:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014216:	f103 0308 	add.w	r3, r3, #8
 801421a:	881b      	ldrh	r3, [r3, #0]
 801421c:	3301      	adds	r3, #1
 801421e:	b29b      	uxth	r3, r3
 8014220:	4619      	mov	r1, r3
 8014222:	483a      	ldr	r0, [pc, #232]	; (801430c <route_Dijkstra+0x968>)
 8014224:	f001 f970 	bl	8015508 <pushStack_walk>
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8014228:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801422c:	f103 0306 	add.w	r3, r3, #6
 8014230:	881b      	ldrh	r3, [r3, #0]
 8014232:	2b01      	cmp	r3, #1
 8014234:	f47f af59 	bne.w	80140ea <route_Dijkstra+0x746>
 8014238:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801423c:	f103 030a 	add.w	r3, r3, #10
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	4a2f      	ldr	r2, [pc, #188]	; (8014300 <route_Dijkstra+0x95c>)
 8014244:	332c      	adds	r3, #44	; 0x2c
 8014246:	009b      	lsls	r3, r3, #2
 8014248:	4413      	add	r3, r2
 801424a:	685b      	ldr	r3, [r3, #4]
 801424c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8014250:	f102 0208 	add.w	r2, r2, #8
 8014254:	8812      	ldrh	r2, [r2, #0]
 8014256:	2101      	movs	r1, #1
 8014258:	fa01 f202 	lsl.w	r2, r1, r2
 801425c:	4013      	ands	r3, r2
 801425e:	2b00      	cmp	r3, #0
 8014260:	f47f af43 	bne.w	80140ea <route_Dijkstra+0x746>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8014264:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014268:	f103 030a 	add.w	r3, r3, #10
 801426c:	881a      	ldrh	r2, [r3, #0]
 801426e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014272:	f103 0308 	add.w	r3, r3, #8
 8014276:	881b      	ldrh	r3, [r3, #0]
 8014278:	4922      	ldr	r1, [pc, #136]	; (8014304 <route_Dijkstra+0x960>)
 801427a:	0112      	lsls	r2, r2, #4
 801427c:	4413      	add	r3, r2
 801427e:	2200      	movs	r2, #0
 8014280:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8014284:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014288:	f103 030a 	add.w	r3, r3, #10
 801428c:	881b      	ldrh	r3, [r3, #0]
 801428e:	1c5a      	adds	r2, r3, #1
 8014290:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8014294:	f103 0308 	add.w	r3, r3, #8
 8014298:	881b      	ldrh	r3, [r3, #0]
 801429a:	491a      	ldr	r1, [pc, #104]	; (8014304 <route_Dijkstra+0x960>)
 801429c:	0112      	lsls	r2, r2, #4
 801429e:	4413      	add	r3, r2
 80142a0:	2200      	movs	r2, #0
 80142a2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 80142a6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142aa:	f103 030a 	add.w	r3, r3, #10
 80142ae:	881b      	ldrh	r3, [r3, #0]
 80142b0:	4619      	mov	r1, r3
 80142b2:	4815      	ldr	r0, [pc, #84]	; (8014308 <route_Dijkstra+0x964>)
 80142b4:	f001 f928 	bl	8015508 <pushStack_walk>
 80142b8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142bc:	f103 0308 	add.w	r3, r3, #8
 80142c0:	881b      	ldrh	r3, [r3, #0]
 80142c2:	4619      	mov	r1, r3
 80142c4:	4811      	ldr	r0, [pc, #68]	; (801430c <route_Dijkstra+0x968>)
 80142c6:	f001 f91f 	bl	8015508 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 80142ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142ce:	f103 030a 	add.w	r3, r3, #10
 80142d2:	881b      	ldrh	r3, [r3, #0]
 80142d4:	3301      	adds	r3, #1
 80142d6:	b29b      	uxth	r3, r3
 80142d8:	4619      	mov	r1, r3
 80142da:	480b      	ldr	r0, [pc, #44]	; (8014308 <route_Dijkstra+0x964>)
 80142dc:	f001 f914 	bl	8015508 <pushStack_walk>
 80142e0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80142e4:	f103 0308 	add.w	r3, r3, #8
 80142e8:	881b      	ldrh	r3, [r3, #0]
 80142ea:	4619      	mov	r1, r3
 80142ec:	4807      	ldr	r0, [pc, #28]	; (801430c <route_Dijkstra+0x968>)
 80142ee:	f001 f90b 	bl	8015508 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 80142f2:	e6fa      	b.n	80140ea <route_Dijkstra+0x746>
			}
	}


}
 80142f4:	bf00      	nop
 80142f6:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 80142fa:	3714      	adds	r7, #20
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014300:	20001010 	.word	0x20001010
 8014304:	200011f4 	.word	0x200011f4
 8014308:	200017b4 	.word	0x200017b4
 801430c:	2000275c 	.word	0x2000275c

08014310 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8014310:	b580      	push	{r7, lr}
 8014312:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801431a:	2300      	movs	r3, #0
 801431c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014320:	f102 0207 	add.w	r2, r2, #7
 8014324:	7013      	strb	r3, [r2, #0]
 8014326:	e033      	b.n	8014390 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014328:	2300      	movs	r3, #0
 801432a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801432e:	f102 0206 	add.w	r2, r2, #6
 8014332:	7013      	strb	r3, [r2, #0]
 8014334:	e01a      	b.n	801436c <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8014336:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801433a:	f103 0307 	add.w	r3, r3, #7
 801433e:	781a      	ldrb	r2, [r3, #0]
 8014340:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014344:	f103 0306 	add.w	r3, r3, #6
 8014348:	781b      	ldrb	r3, [r3, #0]
 801434a:	4966      	ldr	r1, [pc, #408]	; (80144e4 <create_StepCountMap_unknown+0x1d4>)
 801434c:	0112      	lsls	r2, r2, #4
 801434e:	4413      	add	r3, r2
 8014350:	22ff      	movs	r2, #255	; 0xff
 8014352:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014356:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801435a:	f103 0306 	add.w	r3, r3, #6
 801435e:	781b      	ldrb	r3, [r3, #0]
 8014360:	3301      	adds	r3, #1
 8014362:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014366:	f102 0206 	add.w	r2, r2, #6
 801436a:	7013      	strb	r3, [r2, #0]
 801436c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014370:	f103 0306 	add.w	r3, r3, #6
 8014374:	781b      	ldrb	r3, [r3, #0]
 8014376:	2b0f      	cmp	r3, #15
 8014378:	d9dd      	bls.n	8014336 <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801437a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801437e:	f103 0307 	add.w	r3, r3, #7
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	3301      	adds	r3, #1
 8014386:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801438a:	f102 0207 	add.w	r2, r2, #7
 801438e:	7013      	strb	r3, [r2, #0]
 8014390:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014394:	f103 0307 	add.w	r3, r3, #7
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	2b0f      	cmp	r3, #15
 801439c:	d9c4      	bls.n	8014328 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 801439e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80143a2:	4618      	mov	r0, r3
 80143a4:	f001 f8a0 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_y);
 80143a8:	f107 0308 	add.w	r3, r7, #8
 80143ac:	3b04      	subs	r3, #4
 80143ae:	4618      	mov	r0, r3
 80143b0:	f001 f89a 	bl	80154e8 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 80143b4:	484c      	ldr	r0, [pc, #304]	; (80144e8 <create_StepCountMap_unknown+0x1d8>)
 80143b6:	f001 f8d1 	bl	801555c <popStack_walk>
 80143ba:	4603      	mov	r3, r0
 80143bc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143c0:	f102 021a 	add.w	r2, r2, #26
 80143c4:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 80143c6:	4849      	ldr	r0, [pc, #292]	; (80144ec <create_StepCountMap_unknown+0x1dc>)
 80143c8:	f001 f8c8 	bl	801555c <popStack_walk>
 80143cc:	4603      	mov	r3, r0
 80143ce:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143d2:	f102 0218 	add.w	r2, r2, #24
 80143d6:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == MAX_WALKCOUNT_DIJKSTRA || goalY == MAX_WALKCOUNT_DIJKSTRA) {
 80143d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143dc:	f103 031a 	add.w	r3, r3, #26
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143e6:	4293      	cmp	r3, r2
 80143e8:	d030      	beq.n	801444c <create_StepCountMap_unknown+0x13c>
 80143ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143ee:	f103 0318 	add.w	r3, r3, #24
 80143f2:	881b      	ldrh	r3, [r3, #0]
 80143f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143f8:	4293      	cmp	r3, r2
 80143fa:	d027      	beq.n	801444c <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 80143fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014400:	f103 031a 	add.w	r3, r3, #26
 8014404:	881a      	ldrh	r2, [r3, #0]
 8014406:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801440a:	f103 0318 	add.w	r3, r3, #24
 801440e:	881b      	ldrh	r3, [r3, #0]
 8014410:	4934      	ldr	r1, [pc, #208]	; (80144e4 <create_StepCountMap_unknown+0x1d4>)
 8014412:	0112      	lsls	r2, r2, #4
 8014414:	4413      	add	r3, r2
 8014416:	2200      	movs	r2, #0
 8014418:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 801441c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014420:	f103 031a 	add.w	r3, r3, #26
 8014424:	881a      	ldrh	r2, [r3, #0]
 8014426:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801442a:	4611      	mov	r1, r2
 801442c:	4618      	mov	r0, r3
 801442e:	f001 f86b 	bl	8015508 <pushStack_walk>
 8014432:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014436:	f103 0318 	add.w	r3, r3, #24
 801443a:	881a      	ldrh	r2, [r3, #0]
 801443c:	f107 0308 	add.w	r3, r7, #8
 8014440:	3b04      	subs	r3, #4
 8014442:	4611      	mov	r1, r2
 8014444:	4618      	mov	r0, r3
 8014446:	f001 f85f 	bl	8015508 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 801444a:	e7b3      	b.n	80143b4 <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 801444c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014450:	f103 0308 	add.w	r3, r3, #8
 8014454:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8014458:	685a      	ldr	r2, [r3, #4]
 801445a:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 801445e:	f103 0308 	add.w	r3, r3, #8
 8014462:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8014466:	681b      	ldr	r3, [r3, #0]
 8014468:	429a      	cmp	r2, r3
 801446a:	d11b      	bne.n	80144a4 <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 801446c:	4b1d      	ldr	r3, [pc, #116]	; (80144e4 <create_StepCountMap_unknown+0x1d4>)
 801446e:	2200      	movs	r2, #0
 8014470:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8014472:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014476:	2100      	movs	r1, #0
 8014478:	4618      	mov	r0, r3
 801447a:	f001 f845 	bl	8015508 <pushStack_walk>
 801447e:	f107 0308 	add.w	r3, r7, #8
 8014482:	3b04      	subs	r3, #4
 8014484:	2100      	movs	r1, #0
 8014486:	4618      	mov	r0, r3
 8014488:	f001 f83e 	bl	8015508 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 801448c:	4b18      	ldr	r3, [pc, #96]	; (80144f0 <create_StepCountMap_unknown+0x1e0>)
 801448e:	781b      	ldrb	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d003      	beq.n	801449c <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8014494:	4b16      	ldr	r3, [pc, #88]	; (80144f0 <create_StepCountMap_unknown+0x1e0>)
 8014496:	2202      	movs	r2, #2
 8014498:	701a      	strb	r2, [r3, #0]
 801449a:	e006      	b.n	80144aa <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 801449c:	4b14      	ldr	r3, [pc, #80]	; (80144f0 <create_StepCountMap_unknown+0x1e0>)
 801449e:	2201      	movs	r2, #1
 80144a0:	701a      	strb	r2, [r3, #0]
 80144a2:	e002      	b.n	80144aa <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 80144a4:	4b12      	ldr	r3, [pc, #72]	; (80144f0 <create_StepCountMap_unknown+0x1e0>)
 80144a6:	2200      	movs	r2, #0
 80144a8:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80144aa:	2301      	movs	r3, #1
 80144ac:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144b0:	f102 0204 	add.w	r2, r2, #4
 80144b4:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80144b6:	2301      	movs	r3, #1
 80144b8:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144bc:	f102 0202 	add.w	r2, r2, #2
 80144c0:	8013      	strh	r3, [r2, #0]
 80144c2:	2301      	movs	r3, #1
 80144c4:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80144c8:	8013      	strh	r3, [r2, #0]
 80144ca:	2301      	movs	r3, #1
 80144cc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80144d0:	f102 021e 	add.w	r2, r2, #30
 80144d4:	8013      	strh	r3, [r2, #0]
 80144d6:	2301      	movs	r3, #1
 80144d8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80144dc:	f102 021c 	add.w	r2, r2, #28
 80144e0:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80144e2:	e237      	b.n	8014954 <create_StepCountMap_unknown+0x644>
 80144e4:	200011f4 	.word	0x200011f4
 80144e8:	200017b4 	.word	0x200017b4
 80144ec:	2000275c 	.word	0x2000275c
 80144f0:	200011f0 	.word	0x200011f0

		Xcoordinate = popStack_walk(&stack_x);
 80144f4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80144f8:	4618      	mov	r0, r3
 80144fa:	f001 f82f 	bl	801555c <popStack_walk>
 80144fe:	4603      	mov	r3, r0
 8014500:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014504:	f102 0216 	add.w	r2, r2, #22
 8014508:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801450a:	f107 0308 	add.w	r3, r7, #8
 801450e:	3b04      	subs	r3, #4
 8014510:	4618      	mov	r0, r3
 8014512:	f001 f823 	bl	801555c <popStack_walk>
 8014516:	4603      	mov	r3, r0
 8014518:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801451c:	f102 0214 	add.w	r2, r2, #20
 8014520:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014522:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014526:	f103 0316 	add.w	r3, r3, #22
 801452a:	881b      	ldrh	r3, [r3, #0]
 801452c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014530:	4293      	cmp	r3, r2
 8014532:	f000 8217 	beq.w	8014964 <create_StepCountMap_unknown+0x654>
 8014536:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801453a:	f103 0314 	add.w	r3, r3, #20
 801453e:	881b      	ldrh	r3, [r3, #0]
 8014540:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014544:	4293      	cmp	r3, r2
 8014546:	f000 820d 	beq.w	8014964 <create_StepCountMap_unknown+0x654>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801454a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801454e:	f103 0314 	add.w	r3, r3, #20
 8014552:	881b      	ldrh	r3, [r3, #0]
 8014554:	2b0e      	cmp	r3, #14
 8014556:	d817      	bhi.n	8014588 <create_StepCountMap_unknown+0x278>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8014558:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801455c:	f103 0314 	add.w	r3, r3, #20
 8014560:	881b      	ldrh	r3, [r3, #0]
 8014562:	4acb      	ldr	r2, [pc, #812]	; (8014890 <create_StepCountMap_unknown+0x580>)
 8014564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014568:	b29a      	uxth	r2, r3
 801456a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456e:	f103 0316 	add.w	r3, r3, #22
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	2101      	movs	r1, #1
 8014576:	fa01 f303 	lsl.w	r3, r1, r3
 801457a:	b29b      	uxth	r3, r3
 801457c:	4013      	ands	r3, r2
 801457e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014582:	f102 0202 	add.w	r2, r2, #2
 8014586:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014588:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801458c:	f103 0314 	add.w	r3, r3, #20
 8014590:	881b      	ldrh	r3, [r3, #0]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d016      	beq.n	80145c4 <create_StepCountMap_unknown+0x2b4>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8014596:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801459a:	f103 0314 	add.w	r3, r3, #20
 801459e:	881b      	ldrh	r3, [r3, #0]
 80145a0:	3b01      	subs	r3, #1
 80145a2:	4abb      	ldr	r2, [pc, #748]	; (8014890 <create_StepCountMap_unknown+0x580>)
 80145a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80145a8:	b29a      	uxth	r2, r3
 80145aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ae:	f103 0316 	add.w	r3, r3, #22
 80145b2:	881b      	ldrh	r3, [r3, #0]
 80145b4:	2101      	movs	r1, #1
 80145b6:	fa01 f303 	lsl.w	r3, r1, r3
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	4013      	ands	r3, r2
 80145be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80145c2:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80145c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c8:	f103 0316 	add.w	r3, r3, #22
 80145cc:	881b      	ldrh	r3, [r3, #0]
 80145ce:	2b0e      	cmp	r3, #14
 80145d0:	d819      	bhi.n	8014606 <create_StepCountMap_unknown+0x2f6>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 80145d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145d6:	f103 0316 	add.w	r3, r3, #22
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	4aac      	ldr	r2, [pc, #688]	; (8014890 <create_StepCountMap_unknown+0x580>)
 80145de:	330e      	adds	r3, #14
 80145e0:	009b      	lsls	r3, r3, #2
 80145e2:	4413      	add	r3, r2
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ec:	f103 0314 	add.w	r3, r3, #20
 80145f0:	881b      	ldrh	r3, [r3, #0]
 80145f2:	2101      	movs	r1, #1
 80145f4:	fa01 f303 	lsl.w	r3, r1, r3
 80145f8:	b29b      	uxth	r3, r3
 80145fa:	4013      	ands	r3, r2
 80145fc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014600:	f102 021e 	add.w	r2, r2, #30
 8014604:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014606:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801460a:	f103 0316 	add.w	r3, r3, #22
 801460e:	881b      	ldrh	r3, [r3, #0]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d01a      	beq.n	801464a <create_StepCountMap_unknown+0x33a>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8014614:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014618:	f103 0316 	add.w	r3, r3, #22
 801461c:	881b      	ldrh	r3, [r3, #0]
 801461e:	3b01      	subs	r3, #1
 8014620:	4a9b      	ldr	r2, [pc, #620]	; (8014890 <create_StepCountMap_unknown+0x580>)
 8014622:	330e      	adds	r3, #14
 8014624:	009b      	lsls	r3, r3, #2
 8014626:	4413      	add	r3, r2
 8014628:	685b      	ldr	r3, [r3, #4]
 801462a:	b29a      	uxth	r2, r3
 801462c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014630:	f103 0314 	add.w	r3, r3, #20
 8014634:	881b      	ldrh	r3, [r3, #0]
 8014636:	2101      	movs	r1, #1
 8014638:	fa01 f303 	lsl.w	r3, r1, r3
 801463c:	b29b      	uxth	r3, r3
 801463e:	4013      	ands	r3, r2
 8014640:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014644:	f102 021c 	add.w	r2, r2, #28
 8014648:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 801464a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801464e:	f103 0316 	add.w	r3, r3, #22
 8014652:	881a      	ldrh	r2, [r3, #0]
 8014654:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014658:	f103 0314 	add.w	r3, r3, #20
 801465c:	881b      	ldrh	r3, [r3, #0]
 801465e:	3301      	adds	r3, #1
 8014660:	498c      	ldr	r1, [pc, #560]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014662:	0112      	lsls	r2, r2, #4
 8014664:	4413      	add	r3, r2
 8014666:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801466a:	2bff      	cmp	r3, #255	; 0xff
 801466c:	d148      	bne.n	8014700 <create_StepCountMap_unknown+0x3f0>
 801466e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014672:	f103 0314 	add.w	r3, r3, #20
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	2b0f      	cmp	r3, #15
 801467a:	d041      	beq.n	8014700 <create_StepCountMap_unknown+0x3f0>
 801467c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014680:	f103 0302 	add.w	r3, r3, #2
 8014684:	881b      	ldrh	r3, [r3, #0]
 8014686:	2b00      	cmp	r3, #0
 8014688:	d13a      	bne.n	8014700 <create_StepCountMap_unknown+0x3f0>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801468a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801468e:	f103 0316 	add.w	r3, r3, #22
 8014692:	881a      	ldrh	r2, [r3, #0]
 8014694:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014698:	f103 0314 	add.w	r3, r3, #20
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	497d      	ldr	r1, [pc, #500]	; (8014894 <create_StepCountMap_unknown+0x584>)
 80146a0:	0112      	lsls	r2, r2, #4
 80146a2:	4413      	add	r3, r2
 80146a4:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80146a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ac:	f103 0316 	add.w	r3, r3, #22
 80146b0:	881a      	ldrh	r2, [r3, #0]
 80146b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146b6:	f103 0314 	add.w	r3, r3, #20
 80146ba:	881b      	ldrh	r3, [r3, #0]
 80146bc:	3301      	adds	r3, #1
 80146be:	3101      	adds	r1, #1
 80146c0:	b288      	uxth	r0, r1
 80146c2:	4974      	ldr	r1, [pc, #464]	; (8014894 <create_StepCountMap_unknown+0x584>)
 80146c4:	0112      	lsls	r2, r2, #4
 80146c6:	4413      	add	r3, r2
 80146c8:	4602      	mov	r2, r0
 80146ca:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80146ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d2:	f103 0316 	add.w	r3, r3, #22
 80146d6:	881a      	ldrh	r2, [r3, #0]
 80146d8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80146dc:	4611      	mov	r1, r2
 80146de:	4618      	mov	r0, r3
 80146e0:	f000 ff12 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 80146e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146e8:	f103 0314 	add.w	r3, r3, #20
 80146ec:	881b      	ldrh	r3, [r3, #0]
 80146ee:	3301      	adds	r3, #1
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	f107 0308 	add.w	r3, r7, #8
 80146f6:	3b04      	subs	r3, #4
 80146f8:	4611      	mov	r1, r2
 80146fa:	4618      	mov	r0, r3
 80146fc:	f000 ff04 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014700:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014704:	f103 0316 	add.w	r3, r3, #22
 8014708:	881a      	ldrh	r2, [r3, #0]
 801470a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470e:	f103 0314 	add.w	r3, r3, #20
 8014712:	881b      	ldrh	r3, [r3, #0]
 8014714:	3b01      	subs	r3, #1
 8014716:	495f      	ldr	r1, [pc, #380]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014718:	0112      	lsls	r2, r2, #4
 801471a:	4413      	add	r3, r2
 801471c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014720:	2bff      	cmp	r3, #255	; 0xff
 8014722:	d146      	bne.n	80147b2 <create_StepCountMap_unknown+0x4a2>
 8014724:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014728:	f103 0314 	add.w	r3, r3, #20
 801472c:	881b      	ldrh	r3, [r3, #0]
 801472e:	2b00      	cmp	r3, #0
 8014730:	d03f      	beq.n	80147b2 <create_StepCountMap_unknown+0x4a2>
 8014732:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014736:	881b      	ldrh	r3, [r3, #0]
 8014738:	2b00      	cmp	r3, #0
 801473a:	d13a      	bne.n	80147b2 <create_StepCountMap_unknown+0x4a2>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801473c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014740:	f103 0316 	add.w	r3, r3, #22
 8014744:	881a      	ldrh	r2, [r3, #0]
 8014746:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801474a:	f103 0314 	add.w	r3, r3, #20
 801474e:	881b      	ldrh	r3, [r3, #0]
 8014750:	4950      	ldr	r1, [pc, #320]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014752:	0112      	lsls	r2, r2, #4
 8014754:	4413      	add	r3, r2
 8014756:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801475a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801475e:	f103 0316 	add.w	r3, r3, #22
 8014762:	881a      	ldrh	r2, [r3, #0]
 8014764:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014768:	f103 0314 	add.w	r3, r3, #20
 801476c:	881b      	ldrh	r3, [r3, #0]
 801476e:	3b01      	subs	r3, #1
 8014770:	3101      	adds	r1, #1
 8014772:	b288      	uxth	r0, r1
 8014774:	4947      	ldr	r1, [pc, #284]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014776:	0112      	lsls	r2, r2, #4
 8014778:	4413      	add	r3, r2
 801477a:	4602      	mov	r2, r0
 801477c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014780:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014784:	f103 0316 	add.w	r3, r3, #22
 8014788:	881a      	ldrh	r2, [r3, #0]
 801478a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801478e:	4611      	mov	r1, r2
 8014790:	4618      	mov	r0, r3
 8014792:	f000 feb9 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014796:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801479a:	f103 0314 	add.w	r3, r3, #20
 801479e:	881b      	ldrh	r3, [r3, #0]
 80147a0:	3b01      	subs	r3, #1
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	f107 0308 	add.w	r3, r7, #8
 80147a8:	3b04      	subs	r3, #4
 80147aa:	4611      	mov	r1, r2
 80147ac:	4618      	mov	r0, r3
 80147ae:	f000 feab 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 80147b2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147b6:	f103 0316 	add.w	r3, r3, #22
 80147ba:	881b      	ldrh	r3, [r3, #0]
 80147bc:	1c5a      	adds	r2, r3, #1
 80147be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147c2:	f103 0314 	add.w	r3, r3, #20
 80147c6:	881b      	ldrh	r3, [r3, #0]
 80147c8:	4932      	ldr	r1, [pc, #200]	; (8014894 <create_StepCountMap_unknown+0x584>)
 80147ca:	0112      	lsls	r2, r2, #4
 80147cc:	4413      	add	r3, r2
 80147ce:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80147d2:	2bff      	cmp	r3, #255	; 0xff
 80147d4:	d148      	bne.n	8014868 <create_StepCountMap_unknown+0x558>
 80147d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147da:	f103 0316 	add.w	r3, r3, #22
 80147de:	881b      	ldrh	r3, [r3, #0]
 80147e0:	2b0f      	cmp	r3, #15
 80147e2:	d041      	beq.n	8014868 <create_StepCountMap_unknown+0x558>
 80147e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147e8:	f103 031e 	add.w	r3, r3, #30
 80147ec:	881b      	ldrh	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d13a      	bne.n	8014868 <create_StepCountMap_unknown+0x558>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80147f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80147f6:	f103 0316 	add.w	r3, r3, #22
 80147fa:	881a      	ldrh	r2, [r3, #0]
 80147fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014800:	f103 0314 	add.w	r3, r3, #20
 8014804:	881b      	ldrh	r3, [r3, #0]
 8014806:	4923      	ldr	r1, [pc, #140]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014808:	0112      	lsls	r2, r2, #4
 801480a:	4413      	add	r3, r2
 801480c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014810:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014814:	f103 0316 	add.w	r3, r3, #22
 8014818:	881b      	ldrh	r3, [r3, #0]
 801481a:	1c5a      	adds	r2, r3, #1
 801481c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014820:	f103 0314 	add.w	r3, r3, #20
 8014824:	881b      	ldrh	r3, [r3, #0]
 8014826:	3101      	adds	r1, #1
 8014828:	b288      	uxth	r0, r1
 801482a:	491a      	ldr	r1, [pc, #104]	; (8014894 <create_StepCountMap_unknown+0x584>)
 801482c:	0112      	lsls	r2, r2, #4
 801482e:	4413      	add	r3, r2
 8014830:	4602      	mov	r2, r0
 8014832:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014836:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801483a:	f103 0316 	add.w	r3, r3, #22
 801483e:	881b      	ldrh	r3, [r3, #0]
 8014840:	3301      	adds	r3, #1
 8014842:	b29a      	uxth	r2, r3
 8014844:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014848:	4611      	mov	r1, r2
 801484a:	4618      	mov	r0, r3
 801484c:	f000 fe5c 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014850:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014854:	f103 0314 	add.w	r3, r3, #20
 8014858:	881a      	ldrh	r2, [r3, #0]
 801485a:	f107 0308 	add.w	r3, r7, #8
 801485e:	3b04      	subs	r3, #4
 8014860:	4611      	mov	r1, r2
 8014862:	4618      	mov	r0, r3
 8014864:	f000 fe50 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8014868:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801486c:	f103 0316 	add.w	r3, r3, #22
 8014870:	881b      	ldrh	r3, [r3, #0]
 8014872:	1e5a      	subs	r2, r3, #1
 8014874:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014878:	f103 0314 	add.w	r3, r3, #20
 801487c:	881b      	ldrh	r3, [r3, #0]
 801487e:	4905      	ldr	r1, [pc, #20]	; (8014894 <create_StepCountMap_unknown+0x584>)
 8014880:	0112      	lsls	r2, r2, #4
 8014882:	4413      	add	r3, r2
 8014884:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014888:	2bff      	cmp	r3, #255	; 0xff
 801488a:	d14e      	bne.n	801492a <create_StepCountMap_unknown+0x61a>
 801488c:	e004      	b.n	8014898 <create_StepCountMap_unknown+0x588>
 801488e:	bf00      	nop
 8014890:	20001010 	.word	0x20001010
 8014894:	200011f4 	.word	0x200011f4
 8014898:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801489c:	f103 0316 	add.w	r3, r3, #22
 80148a0:	881b      	ldrh	r3, [r3, #0]
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	d041      	beq.n	801492a <create_StepCountMap_unknown+0x61a>
 80148a6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148aa:	f103 031c 	add.w	r3, r3, #28
 80148ae:	881b      	ldrh	r3, [r3, #0]
 80148b0:	2b00      	cmp	r3, #0
 80148b2:	d13a      	bne.n	801492a <create_StepCountMap_unknown+0x61a>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80148b4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148b8:	f103 0316 	add.w	r3, r3, #22
 80148bc:	881a      	ldrh	r2, [r3, #0]
 80148be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148c2:	f103 0314 	add.w	r3, r3, #20
 80148c6:	881b      	ldrh	r3, [r3, #0]
 80148c8:	4929      	ldr	r1, [pc, #164]	; (8014970 <create_StepCountMap_unknown+0x660>)
 80148ca:	0112      	lsls	r2, r2, #4
 80148cc:	4413      	add	r3, r2
 80148ce:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80148d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148d6:	f103 0316 	add.w	r3, r3, #22
 80148da:	881b      	ldrh	r3, [r3, #0]
 80148dc:	1e5a      	subs	r2, r3, #1
 80148de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148e2:	f103 0314 	add.w	r3, r3, #20
 80148e6:	881b      	ldrh	r3, [r3, #0]
 80148e8:	3101      	adds	r1, #1
 80148ea:	b288      	uxth	r0, r1
 80148ec:	4920      	ldr	r1, [pc, #128]	; (8014970 <create_StepCountMap_unknown+0x660>)
 80148ee:	0112      	lsls	r2, r2, #4
 80148f0:	4413      	add	r3, r2
 80148f2:	4602      	mov	r2, r0
 80148f4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 80148f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148fc:	f103 0316 	add.w	r3, r3, #22
 8014900:	881b      	ldrh	r3, [r3, #0]
 8014902:	3b01      	subs	r3, #1
 8014904:	b29a      	uxth	r2, r3
 8014906:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801490a:	4611      	mov	r1, r2
 801490c:	4618      	mov	r0, r3
 801490e:	f000 fdfb 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014912:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014916:	f103 0314 	add.w	r3, r3, #20
 801491a:	881a      	ldrh	r2, [r3, #0]
 801491c:	f107 0308 	add.w	r3, r7, #8
 8014920:	3b04      	subs	r3, #4
 8014922:	4611      	mov	r1, r2
 8014924:	4618      	mov	r0, r3
 8014926:	f000 fdef 	bl	8015508 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801492a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801492e:	f103 0316 	add.w	r3, r3, #22
 8014932:	881a      	ldrh	r2, [r3, #0]
 8014934:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014938:	f103 0314 	add.w	r3, r3, #20
 801493c:	881b      	ldrh	r3, [r3, #0]
 801493e:	490c      	ldr	r1, [pc, #48]	; (8014970 <create_StepCountMap_unknown+0x660>)
 8014940:	0112      	lsls	r2, r2, #4
 8014942:	4413      	add	r3, r2
 8014944:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014948:	3301      	adds	r3, #1
 801494a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801494e:	f102 0204 	add.w	r2, r2, #4
 8014952:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014954:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014958:	f103 0304 	add.w	r3, r3, #4
 801495c:	881b      	ldrh	r3, [r3, #0]
 801495e:	2bfe      	cmp	r3, #254	; 0xfe
 8014960:	f67f adc8 	bls.w	80144f4 <create_StepCountMap_unknown+0x1e4>

		}

}
 8014964:	bf00      	nop
 8014966:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801496a:	3708      	adds	r7, #8
 801496c:	46bd      	mov	sp, r7
 801496e:	bd80      	pop	{r7, pc}
 8014970:	200011f4 	.word	0x200011f4

08014974 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 8014974:	b580      	push	{r7, lr}
 8014976:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 801497a:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 801497c:	2300      	movs	r3, #0
 801497e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014982:	f102 021f 	add.w	r2, r2, #31
 8014986:	7013      	strb	r3, [r2, #0]
 8014988:	e033      	b.n	80149f2 <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 801498a:	2300      	movs	r3, #0
 801498c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014990:	f102 021e 	add.w	r2, r2, #30
 8014994:	7013      	strb	r3, [r2, #0]
 8014996:	e01a      	b.n	80149ce <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8014998:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801499c:	f103 031f 	add.w	r3, r3, #31
 80149a0:	781a      	ldrb	r2, [r3, #0]
 80149a2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149a6:	f103 031e 	add.w	r3, r3, #30
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	4946      	ldr	r1, [pc, #280]	; (8014ac8 <create_StepCountMap_queue+0x154>)
 80149ae:	0112      	lsls	r2, r2, #4
 80149b0:	4413      	add	r3, r2
 80149b2:	22ff      	movs	r2, #255	; 0xff
 80149b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80149b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149bc:	f103 031e 	add.w	r3, r3, #30
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	3301      	adds	r3, #1
 80149c4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149c8:	f102 021e 	add.w	r2, r2, #30
 80149cc:	7013      	strb	r3, [r2, #0]
 80149ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149d2:	f103 031e 	add.w	r3, r3, #30
 80149d6:	781b      	ldrb	r3, [r3, #0]
 80149d8:	2b0f      	cmp	r3, #15
 80149da:	d9dd      	bls.n	8014998 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 80149dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149e0:	f103 031f 	add.w	r3, r3, #31
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	3301      	adds	r3, #1
 80149e8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149ec:	f102 021f 	add.w	r2, r2, #31
 80149f0:	7013      	strb	r3, [r2, #0]
 80149f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149f6:	f103 031f 	add.w	r3, r3, #31
 80149fa:	781b      	ldrb	r3, [r3, #0]
 80149fc:	2b0f      	cmp	r3, #15
 80149fe:	d9c4      	bls.n	801498a <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014a00:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a04:	4618      	mov	r0, r3
 8014a06:	f000 fd6f 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_y);
 8014a0a:	463b      	mov	r3, r7
 8014a0c:	4618      	mov	r0, r3
 8014a0e:	f000 fd6b 	bl	80154e8 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8014a12:	4b2d      	ldr	r3, [pc, #180]	; (8014ac8 <create_StepCountMap_queue+0x154>)
 8014a14:	2200      	movs	r2, #0
 8014a16:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014a1a:	4b2b      	ldr	r3, [pc, #172]	; (8014ac8 <create_StepCountMap_queue+0x154>)
 8014a1c:	2200      	movs	r2, #0
 8014a1e:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014a22:	4b29      	ldr	r3, [pc, #164]	; (8014ac8 <create_StepCountMap_queue+0x154>)
 8014a24:	2200      	movs	r2, #0
 8014a26:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8014a2a:	4b27      	ldr	r3, [pc, #156]	; (8014ac8 <create_StepCountMap_queue+0x154>)
 8014a2c:	2200      	movs	r2, #0
 8014a2e:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 8014a32:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a36:	2105      	movs	r1, #5
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f000 fd65 	bl	8015508 <pushStack_walk>
 8014a3e:	463b      	mov	r3, r7
 8014a40:	2104      	movs	r1, #4
 8014a42:	4618      	mov	r0, r3
 8014a44:	f000 fd60 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 8014a48:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a4c:	2106      	movs	r1, #6
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f000 fd5a 	bl	8015508 <pushStack_walk>
 8014a54:	463b      	mov	r3, r7
 8014a56:	2104      	movs	r1, #4
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f000 fd55 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014a5e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a62:	2105      	movs	r1, #5
 8014a64:	4618      	mov	r0, r3
 8014a66:	f000 fd4f 	bl	8015508 <pushStack_walk>
 8014a6a:	463b      	mov	r3, r7
 8014a6c:	2105      	movs	r1, #5
 8014a6e:	4618      	mov	r0, r3
 8014a70:	f000 fd4a 	bl	8015508 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 8014a74:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014a78:	2106      	movs	r1, #6
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	f000 fd44 	bl	8015508 <pushStack_walk>
 8014a80:	463b      	mov	r3, r7
 8014a82:	2105      	movs	r1, #5
 8014a84:	4618      	mov	r0, r3
 8014a86:	f000 fd3f 	bl	8015508 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8014a8a:	2301      	movs	r3, #1
 8014a8c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a90:	f102 021c 	add.w	r2, r2, #28
 8014a94:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014a96:	2301      	movs	r3, #1
 8014a98:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a9c:	f102 021a 	add.w	r2, r2, #26
 8014aa0:	8013      	strh	r3, [r2, #0]
 8014aa2:	2301      	movs	r3, #1
 8014aa4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014aa8:	f102 0218 	add.w	r2, r2, #24
 8014aac:	8013      	strh	r3, [r2, #0]
 8014aae:	2301      	movs	r3, #1
 8014ab0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ab4:	f102 0216 	add.w	r2, r2, #22
 8014ab8:	8013      	strh	r3, [r2, #0]
 8014aba:	2301      	movs	r3, #1
 8014abc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014ac0:	f102 0214 	add.w	r2, r2, #20
 8014ac4:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014ac6:	e22b      	b.n	8014f20 <create_StepCountMap_queue+0x5ac>
 8014ac8:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8014acc:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f000 fd43 	bl	801555c <popStack_walk>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014adc:	f102 0212 	add.w	r2, r2, #18
 8014ae0:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8014ae2:	463b      	mov	r3, r7
 8014ae4:	4618      	mov	r0, r3
 8014ae6:	f000 fd39 	bl	801555c <popStack_walk>
 8014aea:	4603      	mov	r3, r0
 8014aec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014af0:	f102 0210 	add.w	r2, r2, #16
 8014af4:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8014af6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014afa:	f103 0312 	add.w	r3, r3, #18
 8014afe:	881b      	ldrh	r3, [r3, #0]
 8014b00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b04:	4293      	cmp	r3, r2
 8014b06:	f000 8213 	beq.w	8014f30 <create_StepCountMap_queue+0x5bc>
 8014b0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b0e:	f103 0310 	add.w	r3, r3, #16
 8014b12:	881b      	ldrh	r3, [r3, #0]
 8014b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014b18:	4293      	cmp	r3, r2
 8014b1a:	f000 8209 	beq.w	8014f30 <create_StepCountMap_queue+0x5bc>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8014b1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b22:	f103 0310 	add.w	r3, r3, #16
 8014b26:	881b      	ldrh	r3, [r3, #0]
 8014b28:	2b0e      	cmp	r3, #14
 8014b2a:	d817      	bhi.n	8014b5c <create_StepCountMap_queue+0x1e8>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 8014b2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b30:	f103 0310 	add.w	r3, r3, #16
 8014b34:	881b      	ldrh	r3, [r3, #0]
 8014b36:	4aca      	ldr	r2, [pc, #808]	; (8014e60 <create_StepCountMap_queue+0x4ec>)
 8014b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b3c:	b29a      	uxth	r2, r3
 8014b3e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b42:	f103 0312 	add.w	r3, r3, #18
 8014b46:	881b      	ldrh	r3, [r3, #0]
 8014b48:	2101      	movs	r1, #1
 8014b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	4013      	ands	r3, r2
 8014b52:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b56:	f102 021a 	add.w	r2, r2, #26
 8014b5a:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014b5c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b60:	f103 0310 	add.w	r3, r3, #16
 8014b64:	881b      	ldrh	r3, [r3, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d018      	beq.n	8014b9c <create_StepCountMap_queue+0x228>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 8014b6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b6e:	f103 0310 	add.w	r3, r3, #16
 8014b72:	881b      	ldrh	r3, [r3, #0]
 8014b74:	3b01      	subs	r3, #1
 8014b76:	4aba      	ldr	r2, [pc, #744]	; (8014e60 <create_StepCountMap_queue+0x4ec>)
 8014b78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014b7c:	b29a      	uxth	r2, r3
 8014b7e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b82:	f103 0312 	add.w	r3, r3, #18
 8014b86:	881b      	ldrh	r3, [r3, #0]
 8014b88:	2101      	movs	r1, #1
 8014b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8014b8e:	b29b      	uxth	r3, r3
 8014b90:	4013      	ands	r3, r2
 8014b92:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014b96:	f102 0218 	add.w	r2, r2, #24
 8014b9a:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014b9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ba0:	f103 0312 	add.w	r3, r3, #18
 8014ba4:	881b      	ldrh	r3, [r3, #0]
 8014ba6:	2b0e      	cmp	r3, #14
 8014ba8:	d819      	bhi.n	8014bde <create_StepCountMap_queue+0x26a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8014baa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bae:	f103 0312 	add.w	r3, r3, #18
 8014bb2:	881b      	ldrh	r3, [r3, #0]
 8014bb4:	4aaa      	ldr	r2, [pc, #680]	; (8014e60 <create_StepCountMap_queue+0x4ec>)
 8014bb6:	330e      	adds	r3, #14
 8014bb8:	009b      	lsls	r3, r3, #2
 8014bba:	4413      	add	r3, r2
 8014bbc:	685b      	ldr	r3, [r3, #4]
 8014bbe:	b29a      	uxth	r2, r3
 8014bc0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc4:	f103 0310 	add.w	r3, r3, #16
 8014bc8:	881b      	ldrh	r3, [r3, #0]
 8014bca:	2101      	movs	r1, #1
 8014bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	4013      	ands	r3, r2
 8014bd4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014bd8:	f102 0216 	add.w	r2, r2, #22
 8014bdc:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014bde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014be2:	f103 0312 	add.w	r3, r3, #18
 8014be6:	881b      	ldrh	r3, [r3, #0]
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d01a      	beq.n	8014c22 <create_StepCountMap_queue+0x2ae>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8014bec:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bf0:	f103 0312 	add.w	r3, r3, #18
 8014bf4:	881b      	ldrh	r3, [r3, #0]
 8014bf6:	3b01      	subs	r3, #1
 8014bf8:	4a99      	ldr	r2, [pc, #612]	; (8014e60 <create_StepCountMap_queue+0x4ec>)
 8014bfa:	330e      	adds	r3, #14
 8014bfc:	009b      	lsls	r3, r3, #2
 8014bfe:	4413      	add	r3, r2
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c08:	f103 0310 	add.w	r3, r3, #16
 8014c0c:	881b      	ldrh	r3, [r3, #0]
 8014c0e:	2101      	movs	r1, #1
 8014c10:	fa01 f303 	lsl.w	r3, r1, r3
 8014c14:	b29b      	uxth	r3, r3
 8014c16:	4013      	ands	r3, r2
 8014c18:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014c1c:	f102 0214 	add.w	r2, r2, #20
 8014c20:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 8014c22:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c26:	f103 0312 	add.w	r3, r3, #18
 8014c2a:	881a      	ldrh	r2, [r3, #0]
 8014c2c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c30:	f103 0310 	add.w	r3, r3, #16
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	3301      	adds	r3, #1
 8014c38:	498a      	ldr	r1, [pc, #552]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014c3a:	0112      	lsls	r2, r2, #4
 8014c3c:	4413      	add	r3, r2
 8014c3e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c42:	2bff      	cmp	r3, #255	; 0xff
 8014c44:	d146      	bne.n	8014cd4 <create_StepCountMap_queue+0x360>
 8014c46:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c4a:	f103 0310 	add.w	r3, r3, #16
 8014c4e:	881b      	ldrh	r3, [r3, #0]
 8014c50:	2b0f      	cmp	r3, #15
 8014c52:	d03f      	beq.n	8014cd4 <create_StepCountMap_queue+0x360>
 8014c54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c58:	f103 031a 	add.w	r3, r3, #26
 8014c5c:	881b      	ldrh	r3, [r3, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d138      	bne.n	8014cd4 <create_StepCountMap_queue+0x360>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c62:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c66:	f103 0312 	add.w	r3, r3, #18
 8014c6a:	881a      	ldrh	r2, [r3, #0]
 8014c6c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c70:	f103 0310 	add.w	r3, r3, #16
 8014c74:	881b      	ldrh	r3, [r3, #0]
 8014c76:	497b      	ldr	r1, [pc, #492]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014c78:	0112      	lsls	r2, r2, #4
 8014c7a:	4413      	add	r3, r2
 8014c7c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014c80:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c84:	f103 0312 	add.w	r3, r3, #18
 8014c88:	881a      	ldrh	r2, [r3, #0]
 8014c8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c8e:	f103 0310 	add.w	r3, r3, #16
 8014c92:	881b      	ldrh	r3, [r3, #0]
 8014c94:	3301      	adds	r3, #1
 8014c96:	3101      	adds	r1, #1
 8014c98:	b288      	uxth	r0, r1
 8014c9a:	4972      	ldr	r1, [pc, #456]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014c9c:	0112      	lsls	r2, r2, #4
 8014c9e:	4413      	add	r3, r2
 8014ca0:	4602      	mov	r2, r0
 8014ca2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014ca6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014caa:	f103 0312 	add.w	r3, r3, #18
 8014cae:	881a      	ldrh	r2, [r3, #0]
 8014cb0:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014cb4:	4611      	mov	r1, r2
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f000 fc26 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014cbc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc0:	f103 0310 	add.w	r3, r3, #16
 8014cc4:	881b      	ldrh	r3, [r3, #0]
 8014cc6:	3301      	adds	r3, #1
 8014cc8:	b29a      	uxth	r2, r3
 8014cca:	463b      	mov	r3, r7
 8014ccc:	4611      	mov	r1, r2
 8014cce:	4618      	mov	r0, r3
 8014cd0:	f000 fc1a 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8014cd4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cd8:	f103 0312 	add.w	r3, r3, #18
 8014cdc:	881a      	ldrh	r2, [r3, #0]
 8014cde:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ce2:	f103 0310 	add.w	r3, r3, #16
 8014ce6:	881b      	ldrh	r3, [r3, #0]
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	495e      	ldr	r1, [pc, #376]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014cec:	0112      	lsls	r2, r2, #4
 8014cee:	4413      	add	r3, r2
 8014cf0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014cf4:	2bff      	cmp	r3, #255	; 0xff
 8014cf6:	d146      	bne.n	8014d86 <create_StepCountMap_queue+0x412>
 8014cf8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cfc:	f103 0310 	add.w	r3, r3, #16
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d03f      	beq.n	8014d86 <create_StepCountMap_queue+0x412>
 8014d06:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d0a:	f103 0318 	add.w	r3, r3, #24
 8014d0e:	881b      	ldrh	r3, [r3, #0]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d138      	bne.n	8014d86 <create_StepCountMap_queue+0x412>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d18:	f103 0312 	add.w	r3, r3, #18
 8014d1c:	881a      	ldrh	r2, [r3, #0]
 8014d1e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d22:	f103 0310 	add.w	r3, r3, #16
 8014d26:	881b      	ldrh	r3, [r3, #0]
 8014d28:	494e      	ldr	r1, [pc, #312]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014d2a:	0112      	lsls	r2, r2, #4
 8014d2c:	4413      	add	r3, r2
 8014d2e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014d32:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d36:	f103 0312 	add.w	r3, r3, #18
 8014d3a:	881a      	ldrh	r2, [r3, #0]
 8014d3c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d40:	f103 0310 	add.w	r3, r3, #16
 8014d44:	881b      	ldrh	r3, [r3, #0]
 8014d46:	3b01      	subs	r3, #1
 8014d48:	3101      	adds	r1, #1
 8014d4a:	b288      	uxth	r0, r1
 8014d4c:	4945      	ldr	r1, [pc, #276]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014d4e:	0112      	lsls	r2, r2, #4
 8014d50:	4413      	add	r3, r2
 8014d52:	4602      	mov	r2, r0
 8014d54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014d58:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d5c:	f103 0312 	add.w	r3, r3, #18
 8014d60:	881a      	ldrh	r2, [r3, #0]
 8014d62:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014d66:	4611      	mov	r1, r2
 8014d68:	4618      	mov	r0, r3
 8014d6a:	f000 fbcd 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014d6e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d72:	f103 0310 	add.w	r3, r3, #16
 8014d76:	881b      	ldrh	r3, [r3, #0]
 8014d78:	3b01      	subs	r3, #1
 8014d7a:	b29a      	uxth	r2, r3
 8014d7c:	463b      	mov	r3, r7
 8014d7e:	4611      	mov	r1, r2
 8014d80:	4618      	mov	r0, r3
 8014d82:	f000 fbc1 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8014d86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d8a:	f103 0312 	add.w	r3, r3, #18
 8014d8e:	881b      	ldrh	r3, [r3, #0]
 8014d90:	1c5a      	adds	r2, r3, #1
 8014d92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d96:	f103 0310 	add.w	r3, r3, #16
 8014d9a:	881b      	ldrh	r3, [r3, #0]
 8014d9c:	4931      	ldr	r1, [pc, #196]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014d9e:	0112      	lsls	r2, r2, #4
 8014da0:	4413      	add	r3, r2
 8014da2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014da6:	2bff      	cmp	r3, #255	; 0xff
 8014da8:	d146      	bne.n	8014e38 <create_StepCountMap_queue+0x4c4>
 8014daa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dae:	f103 0312 	add.w	r3, r3, #18
 8014db2:	881b      	ldrh	r3, [r3, #0]
 8014db4:	2b0f      	cmp	r3, #15
 8014db6:	d03f      	beq.n	8014e38 <create_StepCountMap_queue+0x4c4>
 8014db8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dbc:	f103 0316 	add.w	r3, r3, #22
 8014dc0:	881b      	ldrh	r3, [r3, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d138      	bne.n	8014e38 <create_StepCountMap_queue+0x4c4>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014dc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dca:	f103 0312 	add.w	r3, r3, #18
 8014dce:	881a      	ldrh	r2, [r3, #0]
 8014dd0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014dd4:	f103 0310 	add.w	r3, r3, #16
 8014dd8:	881b      	ldrh	r3, [r3, #0]
 8014dda:	4922      	ldr	r1, [pc, #136]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014ddc:	0112      	lsls	r2, r2, #4
 8014dde:	4413      	add	r3, r2
 8014de0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014de4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014de8:	f103 0312 	add.w	r3, r3, #18
 8014dec:	881b      	ldrh	r3, [r3, #0]
 8014dee:	1c5a      	adds	r2, r3, #1
 8014df0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014df4:	f103 0310 	add.w	r3, r3, #16
 8014df8:	881b      	ldrh	r3, [r3, #0]
 8014dfa:	3101      	adds	r1, #1
 8014dfc:	b288      	uxth	r0, r1
 8014dfe:	4919      	ldr	r1, [pc, #100]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014e00:	0112      	lsls	r2, r2, #4
 8014e02:	4413      	add	r3, r2
 8014e04:	4602      	mov	r2, r0
 8014e06:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014e0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e0e:	f103 0312 	add.w	r3, r3, #18
 8014e12:	881b      	ldrh	r3, [r3, #0]
 8014e14:	3301      	adds	r3, #1
 8014e16:	b29a      	uxth	r2, r3
 8014e18:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014e1c:	4611      	mov	r1, r2
 8014e1e:	4618      	mov	r0, r3
 8014e20:	f000 fb72 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014e24:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e28:	f103 0310 	add.w	r3, r3, #16
 8014e2c:	881a      	ldrh	r2, [r3, #0]
 8014e2e:	463b      	mov	r3, r7
 8014e30:	4611      	mov	r1, r2
 8014e32:	4618      	mov	r0, r3
 8014e34:	f000 fb68 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 8014e38:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e3c:	f103 0312 	add.w	r3, r3, #18
 8014e40:	881b      	ldrh	r3, [r3, #0]
 8014e42:	1e5a      	subs	r2, r3, #1
 8014e44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e48:	f103 0310 	add.w	r3, r3, #16
 8014e4c:	881b      	ldrh	r3, [r3, #0]
 8014e4e:	4905      	ldr	r1, [pc, #20]	; (8014e64 <create_StepCountMap_queue+0x4f0>)
 8014e50:	0112      	lsls	r2, r2, #4
 8014e52:	4413      	add	r3, r2
 8014e54:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e58:	2bff      	cmp	r3, #255	; 0xff
 8014e5a:	d14c      	bne.n	8014ef6 <create_StepCountMap_queue+0x582>
 8014e5c:	e004      	b.n	8014e68 <create_StepCountMap_queue+0x4f4>
 8014e5e:	bf00      	nop
 8014e60:	20001010 	.word	0x20001010
 8014e64:	200011f4 	.word	0x200011f4
 8014e68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e6c:	f103 0312 	add.w	r3, r3, #18
 8014e70:	881b      	ldrh	r3, [r3, #0]
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	d03f      	beq.n	8014ef6 <create_StepCountMap_queue+0x582>
 8014e76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e7a:	f103 0314 	add.w	r3, r3, #20
 8014e7e:	881b      	ldrh	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d138      	bne.n	8014ef6 <create_StepCountMap_queue+0x582>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014e84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e88:	f103 0312 	add.w	r3, r3, #18
 8014e8c:	881a      	ldrh	r2, [r3, #0]
 8014e8e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014e92:	f103 0310 	add.w	r3, r3, #16
 8014e96:	881b      	ldrh	r3, [r3, #0]
 8014e98:	4928      	ldr	r1, [pc, #160]	; (8014f3c <create_StepCountMap_queue+0x5c8>)
 8014e9a:	0112      	lsls	r2, r2, #4
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014ea2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ea6:	f103 0312 	add.w	r3, r3, #18
 8014eaa:	881b      	ldrh	r3, [r3, #0]
 8014eac:	1e5a      	subs	r2, r3, #1
 8014eae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014eb2:	f103 0310 	add.w	r3, r3, #16
 8014eb6:	881b      	ldrh	r3, [r3, #0]
 8014eb8:	3101      	adds	r1, #1
 8014eba:	b288      	uxth	r0, r1
 8014ebc:	491f      	ldr	r1, [pc, #124]	; (8014f3c <create_StepCountMap_queue+0x5c8>)
 8014ebe:	0112      	lsls	r2, r2, #4
 8014ec0:	4413      	add	r3, r2
 8014ec2:	4602      	mov	r2, r0
 8014ec4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014ec8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ecc:	f103 0312 	add.w	r3, r3, #18
 8014ed0:	881b      	ldrh	r3, [r3, #0]
 8014ed2:	3b01      	subs	r3, #1
 8014ed4:	b29a      	uxth	r2, r3
 8014ed6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014eda:	4611      	mov	r1, r2
 8014edc:	4618      	mov	r0, r3
 8014ede:	f000 fb13 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014ee2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ee6:	f103 0310 	add.w	r3, r3, #16
 8014eea:	881a      	ldrh	r2, [r3, #0]
 8014eec:	463b      	mov	r3, r7
 8014eee:	4611      	mov	r1, r2
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f000 fb09 	bl	8015508 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014ef6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014efa:	f103 0312 	add.w	r3, r3, #18
 8014efe:	881a      	ldrh	r2, [r3, #0]
 8014f00:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f04:	f103 0310 	add.w	r3, r3, #16
 8014f08:	881b      	ldrh	r3, [r3, #0]
 8014f0a:	490c      	ldr	r1, [pc, #48]	; (8014f3c <create_StepCountMap_queue+0x5c8>)
 8014f0c:	0112      	lsls	r2, r2, #4
 8014f0e:	4413      	add	r3, r2
 8014f10:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f14:	3301      	adds	r3, #1
 8014f16:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014f1a:	f102 021c 	add.w	r2, r2, #28
 8014f1e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014f20:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014f24:	f103 031c 	add.w	r3, r3, #28
 8014f28:	881b      	ldrh	r3, [r3, #0]
 8014f2a:	2bfe      	cmp	r3, #254	; 0xfe
 8014f2c:	f67f adce 	bls.w	8014acc <create_StepCountMap_queue+0x158>

		}

}
 8014f30:	bf00      	nop
 8014f32:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	200011f4 	.word	0x200011f4

08014f40 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 8014f40:	b580      	push	{r7, lr}
 8014f42:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8014f46:	b082      	sub	sp, #8
 8014f48:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014f4a:	2300      	movs	r3, #0
 8014f4c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014f50:	f102 0207 	add.w	r2, r2, #7
 8014f54:	7013      	strb	r3, [r2, #0]
 8014f56:	e033      	b.n	8014fc0 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014f58:	2300      	movs	r3, #0
 8014f5a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014f5e:	f102 0206 	add.w	r2, r2, #6
 8014f62:	7013      	strb	r3, [r2, #0]
 8014f64:	e01a      	b.n	8014f9c <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = MAX_WALKCOUNT;
 8014f66:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014f6a:	f103 0307 	add.w	r3, r3, #7
 8014f6e:	781a      	ldrb	r2, [r3, #0]
 8014f70:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014f74:	f103 0306 	add.w	r3, r3, #6
 8014f78:	781b      	ldrb	r3, [r3, #0]
 8014f7a:	4931      	ldr	r1, [pc, #196]	; (8015040 <create_StepCountMapBack_queue+0x100>)
 8014f7c:	0112      	lsls	r2, r2, #4
 8014f7e:	4413      	add	r3, r2
 8014f80:	22ff      	movs	r2, #255	; 0xff
 8014f82:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014f86:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014f8a:	f103 0306 	add.w	r3, r3, #6
 8014f8e:	781b      	ldrb	r3, [r3, #0]
 8014f90:	3301      	adds	r3, #1
 8014f92:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014f96:	f102 0206 	add.w	r2, r2, #6
 8014f9a:	7013      	strb	r3, [r2, #0]
 8014f9c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fa0:	f103 0306 	add.w	r3, r3, #6
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	2b0f      	cmp	r3, #15
 8014fa8:	d9dd      	bls.n	8014f66 <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8014faa:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fae:	f103 0307 	add.w	r3, r3, #7
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	3301      	adds	r3, #1
 8014fb6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014fba:	f102 0207 	add.w	r2, r2, #7
 8014fbe:	7013      	strb	r3, [r2, #0]
 8014fc0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014fc4:	f103 0307 	add.w	r3, r3, #7
 8014fc8:	781b      	ldrb	r3, [r3, #0]
 8014fca:	2b0f      	cmp	r3, #15
 8014fcc:	d9c4      	bls.n	8014f58 <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 8014fce:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014fd2:	4618      	mov	r0, r3
 8014fd4:	f000 fa88 	bl	80154e8 <initStack_walk>
	initStack_walk(&stack_y);
 8014fd8:	f107 0308 	add.w	r3, r7, #8
 8014fdc:	3b04      	subs	r3, #4
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f000 fa82 	bl	80154e8 <initStack_walk>


	walk_count[0][0] = 0;
 8014fe4:	4b16      	ldr	r3, [pc, #88]	; (8015040 <create_StepCountMapBack_queue+0x100>)
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8014fea:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014fee:	2100      	movs	r1, #0
 8014ff0:	4618      	mov	r0, r3
 8014ff2:	f000 fa89 	bl	8015508 <pushStack_walk>
 8014ff6:	f107 0308 	add.w	r3, r7, #8
 8014ffa:	3b04      	subs	r3, #4
 8014ffc:	2100      	movs	r1, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f000 fa82 	bl	8015508 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8015004:	2301      	movs	r3, #1
 8015006:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801500a:	f102 0204 	add.w	r2, r2, #4
 801500e:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8015010:	2301      	movs	r3, #1
 8015012:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015016:	f102 0202 	add.w	r2, r2, #2
 801501a:	8013      	strh	r3, [r2, #0]
 801501c:	2301      	movs	r3, #1
 801501e:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015022:	8013      	strh	r3, [r2, #0]
 8015024:	2301      	movs	r3, #1
 8015026:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801502a:	f102 021e 	add.w	r2, r2, #30
 801502e:	8013      	strh	r3, [r2, #0]
 8015030:	2301      	movs	r3, #1
 8015032:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015036:	f102 021c 	add.w	r2, r2, #28
 801503a:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 801503c:	e244      	b.n	80154c8 <create_StepCountMapBack_queue+0x588>
 801503e:	bf00      	nop
 8015040:	200011f4 	.word	0x200011f4

		Xcoordinate = popStack_walk(&stack_x);
 8015044:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015048:	4618      	mov	r0, r3
 801504a:	f000 fa87 	bl	801555c <popStack_walk>
 801504e:	4603      	mov	r3, r0
 8015050:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015054:	f102 021a 	add.w	r2, r2, #26
 8015058:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801505a:	f107 0308 	add.w	r3, r7, #8
 801505e:	3b04      	subs	r3, #4
 8015060:	4618      	mov	r0, r3
 8015062:	f000 fa7b 	bl	801555c <popStack_walk>
 8015066:	4603      	mov	r3, r0
 8015068:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801506c:	f102 0218 	add.w	r2, r2, #24
 8015070:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == MAX_WALKCOUNT_DIJKSTRA || Ycoordinate == MAX_WALKCOUNT_DIJKSTRA) {
 8015072:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015076:	f103 031a 	add.w	r3, r3, #26
 801507a:	881b      	ldrh	r3, [r3, #0]
 801507c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015080:	4293      	cmp	r3, r2
 8015082:	f000 8229 	beq.w	80154d8 <create_StepCountMapBack_queue+0x598>
 8015086:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801508a:	f103 0318 	add.w	r3, r3, #24
 801508e:	881b      	ldrh	r3, [r3, #0]
 8015090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015094:	4293      	cmp	r3, r2
 8015096:	f000 821f 	beq.w	80154d8 <create_StepCountMapBack_queue+0x598>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 801509a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801509e:	f103 031a 	add.w	r3, r3, #26
 80150a2:	881b      	ldrh	r3, [r3, #0]
 80150a4:	011b      	lsls	r3, r3, #4
 80150a6:	b29a      	uxth	r2, r3
 80150a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150ac:	f103 0318 	add.w	r3, r3, #24
 80150b0:	881b      	ldrh	r3, [r3, #0]
 80150b2:	4413      	add	r3, r2
 80150b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80150b8:	f102 0216 	add.w	r2, r2, #22
 80150bc:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 80150be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150c2:	f103 0318 	add.w	r3, r3, #24
 80150c6:	881b      	ldrh	r3, [r3, #0]
 80150c8:	2b0e      	cmp	r3, #14
 80150ca:	d817      	bhi.n	80150fc <create_StepCountMapBack_queue+0x1bc>
			wall_north = wall.row[Ycoordinate] & (1 << Xcoordinate);
 80150cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150d0:	f103 0318 	add.w	r3, r3, #24
 80150d4:	881b      	ldrh	r3, [r3, #0]
 80150d6:	4acb      	ldr	r2, [pc, #812]	; (8015404 <create_StepCountMapBack_queue+0x4c4>)
 80150d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80150dc:	b29a      	uxth	r2, r3
 80150de:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80150e2:	f103 031a 	add.w	r3, r3, #26
 80150e6:	881b      	ldrh	r3, [r3, #0]
 80150e8:	2101      	movs	r1, #1
 80150ea:	fa01 f303 	lsl.w	r3, r1, r3
 80150ee:	b29b      	uxth	r3, r3
 80150f0:	4013      	ands	r3, r2
 80150f2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80150f6:	f102 0202 	add.w	r2, r2, #2
 80150fa:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80150fc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015100:	f103 0318 	add.w	r3, r3, #24
 8015104:	881b      	ldrh	r3, [r3, #0]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d016      	beq.n	8015138 <create_StepCountMapBack_queue+0x1f8>
			wall_south = wall.row[Ycoordinate - 1] & (1 << Xcoordinate);
 801510a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801510e:	f103 0318 	add.w	r3, r3, #24
 8015112:	881b      	ldrh	r3, [r3, #0]
 8015114:	3b01      	subs	r3, #1
 8015116:	4abb      	ldr	r2, [pc, #748]	; (8015404 <create_StepCountMapBack_queue+0x4c4>)
 8015118:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801511c:	b29a      	uxth	r2, r3
 801511e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015122:	f103 031a 	add.w	r3, r3, #26
 8015126:	881b      	ldrh	r3, [r3, #0]
 8015128:	2101      	movs	r1, #1
 801512a:	fa01 f303 	lsl.w	r3, r1, r3
 801512e:	b29b      	uxth	r3, r3
 8015130:	4013      	ands	r3, r2
 8015132:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8015136:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8015138:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801513c:	f103 031a 	add.w	r3, r3, #26
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	2b0e      	cmp	r3, #14
 8015144:	d819      	bhi.n	801517a <create_StepCountMapBack_queue+0x23a>
			wall_east = wall.column[Xcoordinate] & (1 << Ycoordinate);
 8015146:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801514a:	f103 031a 	add.w	r3, r3, #26
 801514e:	881b      	ldrh	r3, [r3, #0]
 8015150:	4aac      	ldr	r2, [pc, #688]	; (8015404 <create_StepCountMapBack_queue+0x4c4>)
 8015152:	330e      	adds	r3, #14
 8015154:	009b      	lsls	r3, r3, #2
 8015156:	4413      	add	r3, r2
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	b29a      	uxth	r2, r3
 801515c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015160:	f103 0318 	add.w	r3, r3, #24
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	2101      	movs	r1, #1
 8015168:	fa01 f303 	lsl.w	r3, r1, r3
 801516c:	b29b      	uxth	r3, r3
 801516e:	4013      	ands	r3, r2
 8015170:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8015174:	f102 021e 	add.w	r2, r2, #30
 8015178:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 801517a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801517e:	f103 031a 	add.w	r3, r3, #26
 8015182:	881b      	ldrh	r3, [r3, #0]
 8015184:	2b00      	cmp	r3, #0
 8015186:	d01a      	beq.n	80151be <create_StepCountMapBack_queue+0x27e>
			wall_west = wall.column[Xcoordinate - 1] & (1 << Ycoordinate);
 8015188:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801518c:	f103 031a 	add.w	r3, r3, #26
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	3b01      	subs	r3, #1
 8015194:	4a9b      	ldr	r2, [pc, #620]	; (8015404 <create_StepCountMapBack_queue+0x4c4>)
 8015196:	330e      	adds	r3, #14
 8015198:	009b      	lsls	r3, r3, #2
 801519a:	4413      	add	r3, r2
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	b29a      	uxth	r2, r3
 80151a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151a4:	f103 0318 	add.w	r3, r3, #24
 80151a8:	881b      	ldrh	r3, [r3, #0]
 80151aa:	2101      	movs	r1, #1
 80151ac:	fa01 f303 	lsl.w	r3, r1, r3
 80151b0:	b29b      	uxth	r3, r3
 80151b2:	4013      	ands	r3, r2
 80151b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80151b8:	f102 021c 	add.w	r2, r2, #28
 80151bc:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == MAX_WALKCOUNT && Ycoordinate != 15 && wall_north == 0) {
 80151be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151c2:	f103 031a 	add.w	r3, r3, #26
 80151c6:	881a      	ldrh	r2, [r3, #0]
 80151c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151cc:	f103 0318 	add.w	r3, r3, #24
 80151d0:	881b      	ldrh	r3, [r3, #0]
 80151d2:	3301      	adds	r3, #1
 80151d4:	498c      	ldr	r1, [pc, #560]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 80151d6:	0112      	lsls	r2, r2, #4
 80151d8:	4413      	add	r3, r2
 80151da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151de:	2bff      	cmp	r3, #255	; 0xff
 80151e0:	d148      	bne.n	8015274 <create_StepCountMapBack_queue+0x334>
 80151e2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80151e6:	f103 0318 	add.w	r3, r3, #24
 80151ea:	881b      	ldrh	r3, [r3, #0]
 80151ec:	2b0f      	cmp	r3, #15
 80151ee:	d041      	beq.n	8015274 <create_StepCountMapBack_queue+0x334>
 80151f0:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80151f4:	f103 0302 	add.w	r3, r3, #2
 80151f8:	881b      	ldrh	r3, [r3, #0]
 80151fa:	2b00      	cmp	r3, #0
 80151fc:	d13a      	bne.n	8015274 <create_StepCountMapBack_queue+0x334>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80151fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015202:	f103 031a 	add.w	r3, r3, #26
 8015206:	881a      	ldrh	r2, [r3, #0]
 8015208:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801520c:	f103 0318 	add.w	r3, r3, #24
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	497d      	ldr	r1, [pc, #500]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 8015214:	0112      	lsls	r2, r2, #4
 8015216:	4413      	add	r3, r2
 8015218:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 801521c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015220:	f103 031a 	add.w	r3, r3, #26
 8015224:	881a      	ldrh	r2, [r3, #0]
 8015226:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801522a:	f103 0318 	add.w	r3, r3, #24
 801522e:	881b      	ldrh	r3, [r3, #0]
 8015230:	3301      	adds	r3, #1
 8015232:	3101      	adds	r1, #1
 8015234:	b288      	uxth	r0, r1
 8015236:	4974      	ldr	r1, [pc, #464]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 8015238:	0112      	lsls	r2, r2, #4
 801523a:	4413      	add	r3, r2
 801523c:	4602      	mov	r2, r0
 801523e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8015242:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015246:	f103 031a 	add.w	r3, r3, #26
 801524a:	881a      	ldrh	r2, [r3, #0]
 801524c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015250:	4611      	mov	r1, r2
 8015252:	4618      	mov	r0, r3
 8015254:	f000 f958 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8015258:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801525c:	f103 0318 	add.w	r3, r3, #24
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	3301      	adds	r3, #1
 8015264:	b29a      	uxth	r2, r3
 8015266:	f107 0308 	add.w	r3, r7, #8
 801526a:	3b04      	subs	r3, #4
 801526c:	4611      	mov	r1, r2
 801526e:	4618      	mov	r0, r3
 8015270:	f000 f94a 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == MAX_WALKCOUNT && Ycoordinate != 0 && wall_south == 0) {
 8015274:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015278:	f103 031a 	add.w	r3, r3, #26
 801527c:	881a      	ldrh	r2, [r3, #0]
 801527e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015282:	f103 0318 	add.w	r3, r3, #24
 8015286:	881b      	ldrh	r3, [r3, #0]
 8015288:	3b01      	subs	r3, #1
 801528a:	495f      	ldr	r1, [pc, #380]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 801528c:	0112      	lsls	r2, r2, #4
 801528e:	4413      	add	r3, r2
 8015290:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015294:	2bff      	cmp	r3, #255	; 0xff
 8015296:	d146      	bne.n	8015326 <create_StepCountMapBack_queue+0x3e6>
 8015298:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801529c:	f103 0318 	add.w	r3, r3, #24
 80152a0:	881b      	ldrh	r3, [r3, #0]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d03f      	beq.n	8015326 <create_StepCountMapBack_queue+0x3e6>
 80152a6:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80152aa:	881b      	ldrh	r3, [r3, #0]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d13a      	bne.n	8015326 <create_StepCountMapBack_queue+0x3e6>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80152b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152b4:	f103 031a 	add.w	r3, r3, #26
 80152b8:	881a      	ldrh	r2, [r3, #0]
 80152ba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152be:	f103 0318 	add.w	r3, r3, #24
 80152c2:	881b      	ldrh	r3, [r3, #0]
 80152c4:	4950      	ldr	r1, [pc, #320]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 80152c6:	0112      	lsls	r2, r2, #4
 80152c8:	4413      	add	r3, r2
 80152ca:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80152ce:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152d2:	f103 031a 	add.w	r3, r3, #26
 80152d6:	881a      	ldrh	r2, [r3, #0]
 80152d8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152dc:	f103 0318 	add.w	r3, r3, #24
 80152e0:	881b      	ldrh	r3, [r3, #0]
 80152e2:	3b01      	subs	r3, #1
 80152e4:	3101      	adds	r1, #1
 80152e6:	b288      	uxth	r0, r1
 80152e8:	4947      	ldr	r1, [pc, #284]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 80152ea:	0112      	lsls	r2, r2, #4
 80152ec:	4413      	add	r3, r2
 80152ee:	4602      	mov	r2, r0
 80152f0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80152f4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80152f8:	f103 031a 	add.w	r3, r3, #26
 80152fc:	881a      	ldrh	r2, [r3, #0]
 80152fe:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8015302:	4611      	mov	r1, r2
 8015304:	4618      	mov	r0, r3
 8015306:	f000 f8ff 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 801530a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801530e:	f103 0318 	add.w	r3, r3, #24
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	3b01      	subs	r3, #1
 8015316:	b29a      	uxth	r2, r3
 8015318:	f107 0308 	add.w	r3, r7, #8
 801531c:	3b04      	subs	r3, #4
 801531e:	4611      	mov	r1, r2
 8015320:	4618      	mov	r0, r3
 8015322:	f000 f8f1 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 15 && wall_east == 0) {
 8015326:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801532a:	f103 031a 	add.w	r3, r3, #26
 801532e:	881b      	ldrh	r3, [r3, #0]
 8015330:	1c5a      	adds	r2, r3, #1
 8015332:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015336:	f103 0318 	add.w	r3, r3, #24
 801533a:	881b      	ldrh	r3, [r3, #0]
 801533c:	4932      	ldr	r1, [pc, #200]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 801533e:	0112      	lsls	r2, r2, #4
 8015340:	4413      	add	r3, r2
 8015342:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015346:	2bff      	cmp	r3, #255	; 0xff
 8015348:	d148      	bne.n	80153dc <create_StepCountMapBack_queue+0x49c>
 801534a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801534e:	f103 031a 	add.w	r3, r3, #26
 8015352:	881b      	ldrh	r3, [r3, #0]
 8015354:	2b0f      	cmp	r3, #15
 8015356:	d041      	beq.n	80153dc <create_StepCountMapBack_queue+0x49c>
 8015358:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801535c:	f103 031e 	add.w	r3, r3, #30
 8015360:	881b      	ldrh	r3, [r3, #0]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d13a      	bne.n	80153dc <create_StepCountMapBack_queue+0x49c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015366:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801536a:	f103 031a 	add.w	r3, r3, #26
 801536e:	881a      	ldrh	r2, [r3, #0]
 8015370:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015374:	f103 0318 	add.w	r3, r3, #24
 8015378:	881b      	ldrh	r3, [r3, #0]
 801537a:	4923      	ldr	r1, [pc, #140]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 801537c:	0112      	lsls	r2, r2, #4
 801537e:	4413      	add	r3, r2
 8015380:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015384:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015388:	f103 031a 	add.w	r3, r3, #26
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	1c5a      	adds	r2, r3, #1
 8015390:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015394:	f103 0318 	add.w	r3, r3, #24
 8015398:	881b      	ldrh	r3, [r3, #0]
 801539a:	3101      	adds	r1, #1
 801539c:	b288      	uxth	r0, r1
 801539e:	491a      	ldr	r1, [pc, #104]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 80153a0:	0112      	lsls	r2, r2, #4
 80153a2:	4413      	add	r3, r2
 80153a4:	4602      	mov	r2, r0
 80153a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 80153aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153ae:	f103 031a 	add.w	r3, r3, #26
 80153b2:	881b      	ldrh	r3, [r3, #0]
 80153b4:	3301      	adds	r3, #1
 80153b6:	b29a      	uxth	r2, r3
 80153b8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80153bc:	4611      	mov	r1, r2
 80153be:	4618      	mov	r0, r3
 80153c0:	f000 f8a2 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80153c4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153c8:	f103 0318 	add.w	r3, r3, #24
 80153cc:	881a      	ldrh	r2, [r3, #0]
 80153ce:	f107 0308 	add.w	r3, r7, #8
 80153d2:	3b04      	subs	r3, #4
 80153d4:	4611      	mov	r1, r2
 80153d6:	4618      	mov	r0, r3
 80153d8:	f000 f896 	bl	8015508 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == MAX_WALKCOUNT && Xcoordinate != 0 && wall_west == 0) {
 80153dc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153e0:	f103 031a 	add.w	r3, r3, #26
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	1e5a      	subs	r2, r3, #1
 80153e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80153ec:	f103 0318 	add.w	r3, r3, #24
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	4905      	ldr	r1, [pc, #20]	; (8015408 <create_StepCountMapBack_queue+0x4c8>)
 80153f4:	0112      	lsls	r2, r2, #4
 80153f6:	4413      	add	r3, r2
 80153f8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80153fc:	2bff      	cmp	r3, #255	; 0xff
 80153fe:	d14e      	bne.n	801549e <create_StepCountMapBack_queue+0x55e>
 8015400:	e004      	b.n	801540c <create_StepCountMapBack_queue+0x4cc>
 8015402:	bf00      	nop
 8015404:	20001010 	.word	0x20001010
 8015408:	200011f4 	.word	0x200011f4
 801540c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015410:	f103 031a 	add.w	r3, r3, #26
 8015414:	881b      	ldrh	r3, [r3, #0]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d041      	beq.n	801549e <create_StepCountMapBack_queue+0x55e>
 801541a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801541e:	f103 031c 	add.w	r3, r3, #28
 8015422:	881b      	ldrh	r3, [r3, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d13a      	bne.n	801549e <create_StepCountMapBack_queue+0x55e>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8015428:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801542c:	f103 031a 	add.w	r3, r3, #26
 8015430:	881a      	ldrh	r2, [r3, #0]
 8015432:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015436:	f103 0318 	add.w	r3, r3, #24
 801543a:	881b      	ldrh	r3, [r3, #0]
 801543c:	4929      	ldr	r1, [pc, #164]	; (80154e4 <create_StepCountMapBack_queue+0x5a4>)
 801543e:	0112      	lsls	r2, r2, #4
 8015440:	4413      	add	r3, r2
 8015442:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8015446:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801544a:	f103 031a 	add.w	r3, r3, #26
 801544e:	881b      	ldrh	r3, [r3, #0]
 8015450:	1e5a      	subs	r2, r3, #1
 8015452:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015456:	f103 0318 	add.w	r3, r3, #24
 801545a:	881b      	ldrh	r3, [r3, #0]
 801545c:	3101      	adds	r1, #1
 801545e:	b288      	uxth	r0, r1
 8015460:	4920      	ldr	r1, [pc, #128]	; (80154e4 <create_StepCountMapBack_queue+0x5a4>)
 8015462:	0112      	lsls	r2, r2, #4
 8015464:	4413      	add	r3, r2
 8015466:	4602      	mov	r2, r0
 8015468:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801546c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8015470:	f103 031a 	add.w	r3, r3, #26
 8015474:	881b      	ldrh	r3, [r3, #0]
 8015476:	3b01      	subs	r3, #1
 8015478:	b29a      	uxth	r2, r3
 801547a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801547e:	4611      	mov	r1, r2
 8015480:	4618      	mov	r0, r3
 8015482:	f000 f841 	bl	8015508 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8015486:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801548a:	f103 0318 	add.w	r3, r3, #24
 801548e:	881a      	ldrh	r2, [r3, #0]
 8015490:	f107 0308 	add.w	r3, r7, #8
 8015494:	3b04      	subs	r3, #4
 8015496:	4611      	mov	r1, r2
 8015498:	4618      	mov	r0, r3
 801549a:	f000 f835 	bl	8015508 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801549e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154a2:	f103 031a 	add.w	r3, r3, #26
 80154a6:	881a      	ldrh	r2, [r3, #0]
 80154a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80154ac:	f103 0318 	add.w	r3, r3, #24
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	490c      	ldr	r1, [pc, #48]	; (80154e4 <create_StepCountMapBack_queue+0x5a4>)
 80154b4:	0112      	lsls	r2, r2, #4
 80154b6:	4413      	add	r3, r2
 80154b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80154bc:	3301      	adds	r3, #1
 80154be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80154c2:	f102 0204 	add.w	r2, r2, #4
 80154c6:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80154c8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80154cc:	f103 0304 	add.w	r3, r3, #4
 80154d0:	881b      	ldrh	r3, [r3, #0]
 80154d2:	2bfe      	cmp	r3, #254	; 0xfe
 80154d4:	f67f adb6 	bls.w	8015044 <create_StepCountMapBack_queue+0x104>

		}

}
 80154d8:	bf00      	nop
 80154da:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80154de:	3708      	adds	r7, #8
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}
 80154e4:	200011f4 	.word	0x200011f4

080154e8 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 80154e8:	b480      	push	{r7}
 80154ea:	b083      	sub	sp, #12
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2200      	movs	r2, #0
 80154fa:	605a      	str	r2, [r3, #4]
}
 80154fc:	bf00      	nop
 80154fe:	370c      	adds	r7, #12
 8015500:	46bd      	mov	sp, r7
 8015502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015506:	4770      	bx	lr

08015508 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	460b      	mov	r3, r1
 8015512:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	685a      	ldr	r2, [r3, #4]
 8015518:	8879      	ldrh	r1, [r7, #2]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	3202      	adds	r2, #2
 801551e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	685b      	ldr	r3, [r3, #4]
 8015526:	1c5a      	adds	r2, r3, #1
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8015534:	d102      	bne.n	801553c <pushStack_walk+0x34>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2200      	movs	r2, #0
 801553a:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	685a      	ldr	r2, [r3, #4]
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	429a      	cmp	r2, r3
 8015546:	d103      	bne.n	8015550 <pushStack_walk+0x48>
    	printf("stack_full\n");
 8015548:	4803      	ldr	r0, [pc, #12]	; (8015558 <pushStack_walk+0x50>)
 801554a:	f00c f87f 	bl	802164c <puts>
        return;
 801554e:	bf00      	nop
    }
}
 8015550:	3708      	adds	r7, #8
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}
 8015556:	bf00      	nop
 8015558:	08024fe0 	.word	0x08024fe0

0801555c <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 801555c:	b480      	push	{r7}
 801555e:	b085      	sub	sp, #20
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8015564:	2300      	movs	r3, #0
 8015566:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	685a      	ldr	r2, [r3, #4]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	429a      	cmp	r2, r3
 8015572:	d102      	bne.n	801557a <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return MAX_WALKCOUNT_DIJKSTRA;
 8015574:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015578:	e014      	b.n	80155a4 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	681a      	ldr	r2, [r3, #0]
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	3202      	adds	r2, #2
 8015582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015586:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	1c5a      	adds	r2, r3, #1
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801559a:	d102      	bne.n	80155a2 <popStack_walk+0x46>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	2200      	movs	r2, #0
 80155a0:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 80155a2:	89fb      	ldrh	r3, [r7, #14]
}
 80155a4:	4618      	mov	r0, r3
 80155a6:	3714      	adds	r7, #20
 80155a8:	46bd      	mov	sp, r7
 80155aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ae:	4770      	bx	lr

080155b0 <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0

	int tt = 14;
 80155b6:	230e      	movs	r3, #14
 80155b8:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80155ba:	2300      	movs	r3, #0
 80155bc:	603b      	str	r3, [r7, #0]

	printf(
 80155be:	487c      	ldr	r0, [pc, #496]	; (80157b0 <maze_display+0x200>)
 80155c0:	f00c f844 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80155c4:	230e      	movs	r3, #14
 80155c6:	607b      	str	r3, [r7, #4]
 80155c8:	e06a      	b.n	80156a0 <maze_display+0xf0>

		printf("|%5d", walk_count[0][tt + 1]);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	3301      	adds	r3, #1
 80155ce:	4a79      	ldr	r2, [pc, #484]	; (80157b4 <maze_display+0x204>)
 80155d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80155d4:	4619      	mov	r1, r3
 80155d6:	4878      	ldr	r0, [pc, #480]	; (80157b8 <maze_display+0x208>)
 80155d8:	f00b ff9c 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80155dc:	2300      	movs	r3, #0
 80155de:	603b      	str	r3, [r7, #0]
 80155e0:	e030      	b.n	8015644 <maze_display+0x94>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80155e2:	4a76      	ldr	r2, [pc, #472]	; (80157bc <maze_display+0x20c>)
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	330e      	adds	r3, #14
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	4413      	add	r3, r2
 80155ec:	685b      	ldr	r3, [r3, #4]
 80155ee:	687a      	ldr	r2, [r7, #4]
 80155f0:	3201      	adds	r2, #1
 80155f2:	2101      	movs	r1, #1
 80155f4:	fa01 f202 	lsl.w	r2, r1, r2
 80155f8:	4013      	ands	r3, r2
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	3201      	adds	r2, #1
 80155fe:	2101      	movs	r1, #1
 8015600:	fa01 f202 	lsl.w	r2, r1, r2
 8015604:	4293      	cmp	r3, r2
 8015606:	d10d      	bne.n	8015624 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8015608:	683b      	ldr	r3, [r7, #0]
 801560a:	1c5a      	adds	r2, r3, #1
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	3301      	adds	r3, #1
 8015610:	4968      	ldr	r1, [pc, #416]	; (80157b4 <maze_display+0x204>)
 8015612:	0112      	lsls	r2, r2, #4
 8015614:	4413      	add	r3, r2
 8015616:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801561a:	4619      	mov	r1, r3
 801561c:	4866      	ldr	r0, [pc, #408]	; (80157b8 <maze_display+0x208>)
 801561e:	f00b ff79 	bl	8021514 <iprintf>
 8015622:	e00c      	b.n	801563e <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8015624:	683b      	ldr	r3, [r7, #0]
 8015626:	1c5a      	adds	r2, r3, #1
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	3301      	adds	r3, #1
 801562c:	4961      	ldr	r1, [pc, #388]	; (80157b4 <maze_display+0x204>)
 801562e:	0112      	lsls	r2, r2, #4
 8015630:	4413      	add	r3, r2
 8015632:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015636:	4619      	mov	r1, r3
 8015638:	4861      	ldr	r0, [pc, #388]	; (80157c0 <maze_display+0x210>)
 801563a:	f00b ff6b 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801563e:	683b      	ldr	r3, [r7, #0]
 8015640:	3301      	adds	r3, #1
 8015642:	603b      	str	r3, [r7, #0]
 8015644:	683b      	ldr	r3, [r7, #0]
 8015646:	2b0e      	cmp	r3, #14
 8015648:	ddcb      	ble.n	80155e2 <maze_display+0x32>
			}
		}
		printf("|\n");
 801564a:	485e      	ldr	r0, [pc, #376]	; (80157c4 <maze_display+0x214>)
 801564c:	f00b fffe 	bl	802164c <puts>
		if (tt <= -1) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2b00      	cmp	r3, #0
 8015654:	db29      	blt.n	80156aa <maze_display+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015656:	2300      	movs	r3, #0
 8015658:	603b      	str	r3, [r7, #0]
 801565a:	e018      	b.n	801568e <maze_display+0xde>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 801565c:	4a57      	ldr	r2, [pc, #348]	; (80157bc <maze_display+0x20c>)
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015664:	2101      	movs	r1, #1
 8015666:	683a      	ldr	r2, [r7, #0]
 8015668:	fa01 f202 	lsl.w	r2, r1, r2
 801566c:	4013      	ands	r3, r2
 801566e:	2101      	movs	r1, #1
 8015670:	683a      	ldr	r2, [r7, #0]
 8015672:	fa01 f202 	lsl.w	r2, r1, r2
 8015676:	4293      	cmp	r3, r2
 8015678:	d103      	bne.n	8015682 <maze_display+0xd2>
				printf("+-----");
 801567a:	4853      	ldr	r0, [pc, #332]	; (80157c8 <maze_display+0x218>)
 801567c:	f00b ff4a 	bl	8021514 <iprintf>
 8015680:	e002      	b.n	8015688 <maze_display+0xd8>
			}else{
				printf("+     ");
 8015682:	4852      	ldr	r0, [pc, #328]	; (80157cc <maze_display+0x21c>)
 8015684:	f00b ff46 	bl	8021514 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015688:	683b      	ldr	r3, [r7, #0]
 801568a:	3301      	adds	r3, #1
 801568c:	603b      	str	r3, [r7, #0]
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	2b0f      	cmp	r3, #15
 8015692:	dde3      	ble.n	801565c <maze_display+0xac>
			}
		}

		printf("+\n");
 8015694:	484e      	ldr	r0, [pc, #312]	; (80157d0 <maze_display+0x220>)
 8015696:	f00b ffd9 	bl	802164c <puts>
	for (tt = 14;tt >= -1;tt--){
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	3b01      	subs	r3, #1
 801569e:	607b      	str	r3, [r7, #4]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156a6:	da90      	bge.n	80155ca <maze_display+0x1a>
 80156a8:	e000      	b.n	80156ac <maze_display+0xfc>
			break;
 80156aa:	bf00      	nop

	}

	printf(
 80156ac:	4849      	ldr	r0, [pc, #292]	; (80157d4 <maze_display+0x224>)
 80156ae:	f00b ffcd 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80156b2:	483f      	ldr	r0, [pc, #252]	; (80157b0 <maze_display+0x200>)
 80156b4:	f00b ffca 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 80156b8:	230e      	movs	r3, #14
 80156ba:	607b      	str	r3, [r7, #4]
 80156bc:	e06b      	b.n	8015796 <maze_display+0x1e6>
		printf("|%5d", walk_count[0][tt + 1]);
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	3301      	adds	r3, #1
 80156c2:	4a3c      	ldr	r2, [pc, #240]	; (80157b4 <maze_display+0x204>)
 80156c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80156c8:	4619      	mov	r1, r3
 80156ca:	483b      	ldr	r0, [pc, #236]	; (80157b8 <maze_display+0x208>)
 80156cc:	f00b ff22 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80156d0:	2300      	movs	r3, #0
 80156d2:	603b      	str	r3, [r7, #0]
 80156d4:	e030      	b.n	8015738 <maze_display+0x188>
			if ((wall.column_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80156d6:	4a39      	ldr	r2, [pc, #228]	; (80157bc <maze_display+0x20c>)
 80156d8:	683b      	ldr	r3, [r7, #0]
 80156da:	332c      	adds	r3, #44	; 0x2c
 80156dc:	009b      	lsls	r3, r3, #2
 80156de:	4413      	add	r3, r2
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	687a      	ldr	r2, [r7, #4]
 80156e4:	3201      	adds	r2, #1
 80156e6:	2101      	movs	r1, #1
 80156e8:	fa01 f202 	lsl.w	r2, r1, r2
 80156ec:	4013      	ands	r3, r2
 80156ee:	687a      	ldr	r2, [r7, #4]
 80156f0:	3201      	adds	r2, #1
 80156f2:	2101      	movs	r1, #1
 80156f4:	fa01 f202 	lsl.w	r2, r1, r2
 80156f8:	4293      	cmp	r3, r2
 80156fa:	d10d      	bne.n	8015718 <maze_display+0x168>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	1c5a      	adds	r2, r3, #1
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	3301      	adds	r3, #1
 8015704:	492b      	ldr	r1, [pc, #172]	; (80157b4 <maze_display+0x204>)
 8015706:	0112      	lsls	r2, r2, #4
 8015708:	4413      	add	r3, r2
 801570a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801570e:	4619      	mov	r1, r3
 8015710:	4829      	ldr	r0, [pc, #164]	; (80157b8 <maze_display+0x208>)
 8015712:	f00b feff 	bl	8021514 <iprintf>
 8015716:	e00c      	b.n	8015732 <maze_display+0x182>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8015718:	683b      	ldr	r3, [r7, #0]
 801571a:	1c5a      	adds	r2, r3, #1
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	3301      	adds	r3, #1
 8015720:	4924      	ldr	r1, [pc, #144]	; (80157b4 <maze_display+0x204>)
 8015722:	0112      	lsls	r2, r2, #4
 8015724:	4413      	add	r3, r2
 8015726:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801572a:	4619      	mov	r1, r3
 801572c:	4824      	ldr	r0, [pc, #144]	; (80157c0 <maze_display+0x210>)
 801572e:	f00b fef1 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	3301      	adds	r3, #1
 8015736:	603b      	str	r3, [r7, #0]
 8015738:	683b      	ldr	r3, [r7, #0]
 801573a:	2b0e      	cmp	r3, #14
 801573c:	ddcb      	ble.n	80156d6 <maze_display+0x126>
			}
		}
		printf("|\n");
 801573e:	4821      	ldr	r0, [pc, #132]	; (80157c4 <maze_display+0x214>)
 8015740:	f00b ff84 	bl	802164c <puts>
		if (tt <= -1) {
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	2b00      	cmp	r3, #0
 8015748:	db2a      	blt.n	80157a0 <maze_display+0x1f0>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 801574a:	2300      	movs	r3, #0
 801574c:	603b      	str	r3, [r7, #0]
 801574e:	e019      	b.n	8015784 <maze_display+0x1d4>
			if ((wall.row_look[tt] & (1 << ss)) == (1 << ss)){
 8015750:	4a1a      	ldr	r2, [pc, #104]	; (80157bc <maze_display+0x20c>)
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	331e      	adds	r3, #30
 8015756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801575a:	2101      	movs	r1, #1
 801575c:	683a      	ldr	r2, [r7, #0]
 801575e:	fa01 f202 	lsl.w	r2, r1, r2
 8015762:	4013      	ands	r3, r2
 8015764:	2101      	movs	r1, #1
 8015766:	683a      	ldr	r2, [r7, #0]
 8015768:	fa01 f202 	lsl.w	r2, r1, r2
 801576c:	4293      	cmp	r3, r2
 801576e:	d103      	bne.n	8015778 <maze_display+0x1c8>
				printf("+-----");
 8015770:	4815      	ldr	r0, [pc, #84]	; (80157c8 <maze_display+0x218>)
 8015772:	f00b fecf 	bl	8021514 <iprintf>
 8015776:	e002      	b.n	801577e <maze_display+0x1ce>
			}else{
				printf("+     ");
 8015778:	4814      	ldr	r0, [pc, #80]	; (80157cc <maze_display+0x21c>)
 801577a:	f00b fecb 	bl	8021514 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	3301      	adds	r3, #1
 8015782:	603b      	str	r3, [r7, #0]
 8015784:	683b      	ldr	r3, [r7, #0]
 8015786:	2b0f      	cmp	r3, #15
 8015788:	dde2      	ble.n	8015750 <maze_display+0x1a0>
			}
		}
		printf("+\n");
 801578a:	4811      	ldr	r0, [pc, #68]	; (80157d0 <maze_display+0x220>)
 801578c:	f00b ff5e 	bl	802164c <puts>
	for (tt = 14;tt >= -1;tt--){
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	3b01      	subs	r3, #1
 8015794:	607b      	str	r3, [r7, #4]
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	f1b3 3fff 	cmp.w	r3, #4294967295
 801579c:	da8f      	bge.n	80156be <maze_display+0x10e>
 801579e:	e000      	b.n	80157a2 <maze_display+0x1f2>
			break;
 80157a0:	bf00      	nop
	}

	printf(
 80157a2:	480c      	ldr	r0, [pc, #48]	; (80157d4 <maze_display+0x224>)
 80157a4:	f00b ff52 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 80157a8:	bf00      	nop
 80157aa:	3708      	adds	r7, #8
 80157ac:	46bd      	mov	sp, r7
 80157ae:	bd80      	pop	{r7, pc}
 80157b0:	08024fec 	.word	0x08024fec
 80157b4:	200011f4 	.word	0x200011f4
 80157b8:	08025050 	.word	0x08025050
 80157bc:	20001010 	.word	0x20001010
 80157c0:	08025058 	.word	0x08025058
 80157c4:	08025060 	.word	0x08025060
 80157c8:	08025064 	.word	0x08025064
 80157cc:	0802506c 	.word	0x0802506c
 80157d0:	08025074 	.word	0x08025074
 80157d4:	08025078 	.word	0x08025078

080157d8 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 80157d8:	b580      	push	{r7, lr}
 80157da:	b082      	sub	sp, #8
 80157dc:	af00      	add	r7, sp, #0

	int tt = 14;
 80157de:	230e      	movs	r3, #14
 80157e0:	607b      	str	r3, [r7, #4]
	int ss = 0;
 80157e2:	2300      	movs	r3, #0
 80157e4:	603b      	str	r3, [r7, #0]

	printf(
 80157e6:	4863      	ldr	r0, [pc, #396]	; (8015974 <maze_display_Dijkstra+0x19c>)
 80157e8:	f00b ff30 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80157ec:	230e      	movs	r3, #14
 80157ee:	607b      	str	r3, [r7, #4]
 80157f0:	e066      	b.n	80158c0 <maze_display_Dijkstra+0xe8>

		printf("|   ");//walk_count[tt + 1]
 80157f2:	4861      	ldr	r0, [pc, #388]	; (8015978 <maze_display_Dijkstra+0x1a0>)
 80157f4:	f00b fe8e 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80157f8:	2300      	movs	r3, #0
 80157fa:	603b      	str	r3, [r7, #0]
 80157fc:	e028      	b.n	8015850 <maze_display_Dijkstra+0x78>
			if ((wall.column[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 80157fe:	4a5f      	ldr	r2, [pc, #380]	; (801597c <maze_display_Dijkstra+0x1a4>)
 8015800:	683b      	ldr	r3, [r7, #0]
 8015802:	330e      	adds	r3, #14
 8015804:	009b      	lsls	r3, r3, #2
 8015806:	4413      	add	r3, r2
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	687a      	ldr	r2, [r7, #4]
 801580c:	3201      	adds	r2, #1
 801580e:	2101      	movs	r1, #1
 8015810:	fa01 f202 	lsl.w	r2, r1, r2
 8015814:	4013      	ands	r3, r2
 8015816:	687a      	ldr	r2, [r7, #4]
 8015818:	3201      	adds	r2, #1
 801581a:	2101      	movs	r1, #1
 801581c:	fa01 f202 	lsl.w	r2, r1, r2
 8015820:	4293      	cmp	r3, r2
 8015822:	d103      	bne.n	801582c <maze_display_Dijkstra+0x54>
				printf("  |   ");
 8015824:	4856      	ldr	r0, [pc, #344]	; (8015980 <maze_display_Dijkstra+0x1a8>)
 8015826:	f00b fe75 	bl	8021514 <iprintf>
 801582a:	e00e      	b.n	801584a <maze_display_Dijkstra+0x72>
			}else{
				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	1c5a      	adds	r2, r3, #1
 8015830:	4954      	ldr	r1, [pc, #336]	; (8015984 <maze_display_Dijkstra+0x1ac>)
 8015832:	4613      	mov	r3, r2
 8015834:	011b      	lsls	r3, r3, #4
 8015836:	1a9b      	subs	r3, r3, r2
 8015838:	683a      	ldr	r2, [r7, #0]
 801583a:	4413      	add	r3, r2
 801583c:	33f0      	adds	r3, #240	; 0xf0
 801583e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015842:	4619      	mov	r1, r3
 8015844:	4850      	ldr	r0, [pc, #320]	; (8015988 <maze_display_Dijkstra+0x1b0>)
 8015846:	f00b fe65 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	3301      	adds	r3, #1
 801584e:	603b      	str	r3, [r7, #0]
 8015850:	683b      	ldr	r3, [r7, #0]
 8015852:	2b0e      	cmp	r3, #14
 8015854:	ddd3      	ble.n	80157fe <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 8015856:	484d      	ldr	r0, [pc, #308]	; (801598c <maze_display_Dijkstra+0x1b4>)
 8015858:	f00b fef8 	bl	802164c <puts>
		if (tt <= -1) {
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	2b00      	cmp	r3, #0
 8015860:	db33      	blt.n	80158ca <maze_display_Dijkstra+0xf2>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015862:	2300      	movs	r3, #0
 8015864:	603b      	str	r3, [r7, #0]
 8015866:	e022      	b.n	80158ae <maze_display_Dijkstra+0xd6>
			if ((wall.row[tt] & (1 << ss)) == (1 << ss)){
 8015868:	4a44      	ldr	r2, [pc, #272]	; (801597c <maze_display_Dijkstra+0x1a4>)
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015870:	2101      	movs	r1, #1
 8015872:	683a      	ldr	r2, [r7, #0]
 8015874:	fa01 f202 	lsl.w	r2, r1, r2
 8015878:	4013      	ands	r3, r2
 801587a:	2101      	movs	r1, #1
 801587c:	683a      	ldr	r2, [r7, #0]
 801587e:	fa01 f202 	lsl.w	r2, r1, r2
 8015882:	4293      	cmp	r3, r2
 8015884:	d103      	bne.n	801588e <maze_display_Dijkstra+0xb6>
				printf("+-----");
 8015886:	4842      	ldr	r0, [pc, #264]	; (8015990 <maze_display_Dijkstra+0x1b8>)
 8015888:	f00b fe44 	bl	8021514 <iprintf>
 801588c:	e00c      	b.n	80158a8 <maze_display_Dijkstra+0xd0>
			}else{
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 801588e:	493d      	ldr	r1, [pc, #244]	; (8015984 <maze_display_Dijkstra+0x1ac>)
 8015890:	683a      	ldr	r2, [r7, #0]
 8015892:	4613      	mov	r3, r2
 8015894:	011b      	lsls	r3, r3, #4
 8015896:	1a9b      	subs	r3, r3, r2
 8015898:	687a      	ldr	r2, [r7, #4]
 801589a:	4413      	add	r3, r2
 801589c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80158a0:	4619      	mov	r1, r3
 80158a2:	483c      	ldr	r0, [pc, #240]	; (8015994 <maze_display_Dijkstra+0x1bc>)
 80158a4:	f00b fe36 	bl	8021514 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80158a8:	683b      	ldr	r3, [r7, #0]
 80158aa:	3301      	adds	r3, #1
 80158ac:	603b      	str	r3, [r7, #0]
 80158ae:	683b      	ldr	r3, [r7, #0]
 80158b0:	2b0f      	cmp	r3, #15
 80158b2:	ddd9      	ble.n	8015868 <maze_display_Dijkstra+0x90>
			}
		}

		printf("+\n");
 80158b4:	4838      	ldr	r0, [pc, #224]	; (8015998 <maze_display_Dijkstra+0x1c0>)
 80158b6:	f00b fec9 	bl	802164c <puts>
	for (tt = 14;tt >= -1;tt--){
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	3b01      	subs	r3, #1
 80158be:	607b      	str	r3, [r7, #4]
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158c6:	da94      	bge.n	80157f2 <maze_display_Dijkstra+0x1a>
 80158c8:	e000      	b.n	80158cc <maze_display_Dijkstra+0xf4>
			break;
 80158ca:	bf00      	nop

	}

	printf(
 80158cc:	4833      	ldr	r0, [pc, #204]	; (801599c <maze_display_Dijkstra+0x1c4>)
 80158ce:	f00b febd 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 80158d2:	4828      	ldr	r0, [pc, #160]	; (8015974 <maze_display_Dijkstra+0x19c>)
 80158d4:	f00b feba 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 80158d8:	230e      	movs	r3, #14
 80158da:	607b      	str	r3, [r7, #4]
 80158dc:	e03c      	b.n	8015958 <maze_display_Dijkstra+0x180>

		printf("|   ");//walk_count[tt + 1]
 80158de:	4826      	ldr	r0, [pc, #152]	; (8015978 <maze_display_Dijkstra+0x1a0>)
 80158e0:	f00b fe18 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80158e4:	2300      	movs	r3, #0
 80158e6:	603b      	str	r3, [r7, #0]
 80158e8:	e011      	b.n	801590e <maze_display_Dijkstra+0x136>

				printf("%5d ", Dijkstra.column_count[(tt + 1)][ss]);
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	1c5a      	adds	r2, r3, #1
 80158ee:	4925      	ldr	r1, [pc, #148]	; (8015984 <maze_display_Dijkstra+0x1ac>)
 80158f0:	4613      	mov	r3, r2
 80158f2:	011b      	lsls	r3, r3, #4
 80158f4:	1a9b      	subs	r3, r3, r2
 80158f6:	683a      	ldr	r2, [r7, #0]
 80158f8:	4413      	add	r3, r2
 80158fa:	33f0      	adds	r3, #240	; 0xf0
 80158fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015900:	4619      	mov	r1, r3
 8015902:	4821      	ldr	r0, [pc, #132]	; (8015988 <maze_display_Dijkstra+0x1b0>)
 8015904:	f00b fe06 	bl	8021514 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	3301      	adds	r3, #1
 801590c:	603b      	str	r3, [r7, #0]
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	2b0e      	cmp	r3, #14
 8015912:	ddea      	ble.n	80158ea <maze_display_Dijkstra+0x112>

		}
		printf("   |\n");
 8015914:	481d      	ldr	r0, [pc, #116]	; (801598c <maze_display_Dijkstra+0x1b4>)
 8015916:	f00b fe99 	bl	802164c <puts>
		if (tt <= -1) {
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	2b00      	cmp	r3, #0
 801591e:	db20      	blt.n	8015962 <maze_display_Dijkstra+0x18a>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8015920:	2300      	movs	r3, #0
 8015922:	603b      	str	r3, [r7, #0]
 8015924:	e00f      	b.n	8015946 <maze_display_Dijkstra+0x16e>
				printf("+%5d",Dijkstra.row_count[ss][tt]);
 8015926:	4917      	ldr	r1, [pc, #92]	; (8015984 <maze_display_Dijkstra+0x1ac>)
 8015928:	683a      	ldr	r2, [r7, #0]
 801592a:	4613      	mov	r3, r2
 801592c:	011b      	lsls	r3, r3, #4
 801592e:	1a9b      	subs	r3, r3, r2
 8015930:	687a      	ldr	r2, [r7, #4]
 8015932:	4413      	add	r3, r2
 8015934:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015938:	4619      	mov	r1, r3
 801593a:	4816      	ldr	r0, [pc, #88]	; (8015994 <maze_display_Dijkstra+0x1bc>)
 801593c:	f00b fdea 	bl	8021514 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	3301      	adds	r3, #1
 8015944:	603b      	str	r3, [r7, #0]
 8015946:	683b      	ldr	r3, [r7, #0]
 8015948:	2b0f      	cmp	r3, #15
 801594a:	ddec      	ble.n	8015926 <maze_display_Dijkstra+0x14e>
		}

		printf("+\n");
 801594c:	4812      	ldr	r0, [pc, #72]	; (8015998 <maze_display_Dijkstra+0x1c0>)
 801594e:	f00b fe7d 	bl	802164c <puts>
	for (tt = 14;tt >= -1;tt--){
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	3b01      	subs	r3, #1
 8015956:	607b      	str	r3, [r7, #4]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801595e:	dabe      	bge.n	80158de <maze_display_Dijkstra+0x106>
 8015960:	e000      	b.n	8015964 <maze_display_Dijkstra+0x18c>
			break;
 8015962:	bf00      	nop

	}

	printf(
 8015964:	480d      	ldr	r0, [pc, #52]	; (801599c <maze_display_Dijkstra+0x1c4>)
 8015966:	f00b fe71 	bl	802164c <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 801596a:	bf00      	nop
 801596c:	3708      	adds	r7, #8
 801596e:	46bd      	mov	sp, r7
 8015970:	bd80      	pop	{r7, pc}
 8015972:	bf00      	nop
 8015974:	08024fec 	.word	0x08024fec
 8015978:	080250dc 	.word	0x080250dc
 801597c:	20001010 	.word	0x20001010
 8015980:	080250e4 	.word	0x080250e4
 8015984:	200013f4 	.word	0x200013f4
 8015988:	080250ec 	.word	0x080250ec
 801598c:	080250f4 	.word	0x080250f4
 8015990:	08025064 	.word	0x08025064
 8015994:	080250fc 	.word	0x080250fc
 8015998:	08025074 	.word	0x08025074
 801599c:	08025078 	.word	0x08025078

080159a0 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 80159a0:	b580      	push	{r7, lr}
 80159a2:	b084      	sub	sp, #16
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	4603      	mov	r3, r0
 80159a8:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80159aa:	2300      	movs	r3, #0
 80159ac:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80159ae:	2300      	movs	r3, #0
 80159b0:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 80159b2:	2300      	movs	r3, #0
 80159b4:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 80159b6:	4b71      	ldr	r3, [pc, #452]	; (8015b7c <mode_decision+0x1dc>)
 80159b8:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 80159ba:	79fb      	ldrb	r3, [r7, #7]
 80159bc:	f003 030f 	and.w	r3, r3, #15
 80159c0:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80159c2:	79fb      	ldrb	r3, [r7, #7]
 80159c4:	091b      	lsrs	r3, r3, #4
 80159c6:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80159c8:	7bbb      	ldrb	r3, [r7, #14]
 80159ca:	011b      	lsls	r3, r3, #4
 80159cc:	b2da      	uxtb	r2, r3
 80159ce:	7bfb      	ldrb	r3, [r7, #15]
 80159d0:	4413      	add	r3, r2
 80159d2:	b2db      	uxtb	r3, r3
 80159d4:	4618      	mov	r0, r3
 80159d6:	f7f2 f84b 	bl	8007a70 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 80159da:	e07f      	b.n	8015adc <mode_decision+0x13c>
				HAL_Delay(1);
 80159dc:	2001      	movs	r0, #1
 80159de:	f003 fe47 	bl	8019670 <HAL_Delay>
				if (E_distanceR >= dis8) {
 80159e2:	4b67      	ldr	r3, [pc, #412]	; (8015b80 <mode_decision+0x1e0>)
 80159e4:	edd3 7a00 	vldr	s15, [r3]
 80159e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80159ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159f4:	d813      	bhi.n	8015a1e <mode_decision+0x7e>
					if (main_modeR == 15) {
 80159f6:	7bfb      	ldrb	r3, [r7, #15]
 80159f8:	2b0f      	cmp	r3, #15
 80159fa:	d102      	bne.n	8015a02 <mode_decision+0x62>
						main_modeR = 0;
 80159fc:	2300      	movs	r3, #0
 80159fe:	73fb      	strb	r3, [r7, #15]
 8015a00:	e002      	b.n	8015a08 <mode_decision+0x68>
					} else {
						main_modeR++;
 8015a02:	7bfb      	ldrb	r3, [r7, #15]
 8015a04:	3301      	adds	r3, #1
 8015a06:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015a08:	f7eb fac8 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	011b      	lsls	r3, r3, #4
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	7bfb      	ldrb	r3, [r7, #15]
 8015a14:	4413      	add	r3, r2
 8015a16:	b2db      	uxtb	r3, r3
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7f2 f829 	bl	8007a70 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 8015a1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a22:	eeb1 7a67 	vneg.f32	s14, s15
 8015a26:	4b56      	ldr	r3, [pc, #344]	; (8015b80 <mode_decision+0x1e0>)
 8015a28:	edd3 7a00 	vldr	s15, [r3]
 8015a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a34:	db13      	blt.n	8015a5e <mode_decision+0xbe>
					if (main_modeR == 0) {
 8015a36:	7bfb      	ldrb	r3, [r7, #15]
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d102      	bne.n	8015a42 <mode_decision+0xa2>
						main_modeR = 15;
 8015a3c:	230f      	movs	r3, #15
 8015a3e:	73fb      	strb	r3, [r7, #15]
 8015a40:	e002      	b.n	8015a48 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8015a42:	7bfb      	ldrb	r3, [r7, #15]
 8015a44:	3b01      	subs	r3, #1
 8015a46:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015a48:	f7eb faa8 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a4c:	7bbb      	ldrb	r3, [r7, #14]
 8015a4e:	011b      	lsls	r3, r3, #4
 8015a50:	b2da      	uxtb	r2, r3
 8015a52:	7bfb      	ldrb	r3, [r7, #15]
 8015a54:	4413      	add	r3, r2
 8015a56:	b2db      	uxtb	r3, r3
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7f2 f809 	bl	8007a70 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 8015a5e:	4b49      	ldr	r3, [pc, #292]	; (8015b84 <mode_decision+0x1e4>)
 8015a60:	edd3 7a00 	vldr	s15, [r3]
 8015a64:	ed97 7a02 	vldr	s14, [r7, #8]
 8015a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a70:	d813      	bhi.n	8015a9a <mode_decision+0xfa>
					if (main_modeL == 15) {
 8015a72:	7bbb      	ldrb	r3, [r7, #14]
 8015a74:	2b0f      	cmp	r3, #15
 8015a76:	d102      	bne.n	8015a7e <mode_decision+0xde>
						main_modeL = 0;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	73bb      	strb	r3, [r7, #14]
 8015a7c:	e002      	b.n	8015a84 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8015a7e:	7bbb      	ldrb	r3, [r7, #14]
 8015a80:	3301      	adds	r3, #1
 8015a82:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015a84:	f7eb fa8a 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015a88:	7bbb      	ldrb	r3, [r7, #14]
 8015a8a:	011b      	lsls	r3, r3, #4
 8015a8c:	b2da      	uxtb	r2, r3
 8015a8e:	7bfb      	ldrb	r3, [r7, #15]
 8015a90:	4413      	add	r3, r2
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7f1 ffeb 	bl	8007a70 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8015a9a:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a9e:	eeb1 7a67 	vneg.f32	s14, s15
 8015aa2:	4b38      	ldr	r3, [pc, #224]	; (8015b84 <mode_decision+0x1e4>)
 8015aa4:	edd3 7a00 	vldr	s15, [r3]
 8015aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ab0:	da00      	bge.n	8015ab4 <mode_decision+0x114>
 8015ab2:	e013      	b.n	8015adc <mode_decision+0x13c>
					if (main_modeL == 0) {
 8015ab4:	7bbb      	ldrb	r3, [r7, #14]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d102      	bne.n	8015ac0 <mode_decision+0x120>
						main_modeL = 15;
 8015aba:	230f      	movs	r3, #15
 8015abc:	73bb      	strb	r3, [r7, #14]
 8015abe:	e002      	b.n	8015ac6 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015ac0:	7bbb      	ldrb	r3, [r7, #14]
 8015ac2:	3b01      	subs	r3, #1
 8015ac4:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8015ac6:	f7eb fa69 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
 8015acc:	011b      	lsls	r3, r3, #4
 8015ace:	b2da      	uxtb	r2, r3
 8015ad0:	7bfb      	ldrb	r3, [r7, #15]
 8015ad2:	4413      	add	r3, r2
 8015ad4:	b2db      	uxtb	r3, r3
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7f1 ffca 	bl	8007a70 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8015adc:	4b2a      	ldr	r3, [pc, #168]	; (8015b88 <mode_decision+0x1e8>)
 8015ade:	edd3 7a00 	vldr	s15, [r3]
 8015ae2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8015b8c <mode_decision+0x1ec>
 8015ae6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015aee:	f67f af75 	bls.w	80159dc <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 8015af2:	f7f1 ff83 	bl	80079fc <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 8015af6:	2001      	movs	r0, #1
 8015af8:	f7f2 f86a 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015afc:	2001      	movs	r0, #1
 8015afe:	f7f2 f879 	bl	8007bf4 <pl_l_blue_LED>
			HAL_Delay(1000);
 8015b02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8015b06:	f003 fdb3 	bl	8019670 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b0a:	e011      	b.n	8015b30 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015b0c:	4b1e      	ldr	r3, [pc, #120]	; (8015b88 <mode_decision+0x1e8>)
 8015b0e:	edd3 7a00 	vldr	s15, [r3]
 8015b12:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015b8c <mode_decision+0x1ec>
 8015b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b1e:	db04      	blt.n	8015b2a <mode_decision+0x18a>
					main_modeL = 0;
 8015b20:	2300      	movs	r3, #0
 8015b22:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8015b24:	2300      	movs	r3, #0
 8015b26:	73fb      	strb	r3, [r7, #15]
					break;
 8015b28:	e013      	b.n	8015b52 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 8015b2a:	2001      	movs	r0, #1
 8015b2c:	f003 fda0 	bl	8019670 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015b30:	4b17      	ldr	r3, [pc, #92]	; (8015b90 <mode_decision+0x1f0>)
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b38:	dde8      	ble.n	8015b0c <mode_decision+0x16c>
 8015b3a:	4b15      	ldr	r3, [pc, #84]	; (8015b90 <mode_decision+0x1f0>)
 8015b3c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015b40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b44:	dde2      	ble.n	8015b0c <mode_decision+0x16c>
 8015b46:	4b12      	ldr	r3, [pc, #72]	; (8015b90 <mode_decision+0x1f0>)
 8015b48:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015b4c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015b50:	dddc      	ble.n	8015b0c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8015b52:	2000      	movs	r0, #0
 8015b54:	f7f2 f83c 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015b58:	2000      	movs	r0, #0
 8015b5a:	f7f2 f84b 	bl	8007bf4 <pl_l_blue_LED>
			pl_yellow_LED_off();
 8015b5e:	f7f1 ff4d 	bl	80079fc <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8015b62:	7bbb      	ldrb	r3, [r7, #14]
 8015b64:	011b      	lsls	r3, r3, #4
 8015b66:	b25a      	sxtb	r2, r3
 8015b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b6c:	4313      	orrs	r3, r2
 8015b6e:	b25b      	sxtb	r3, r3
 8015b70:	737b      	strb	r3, [r7, #13]

return main_mode;
 8015b72:	7b7b      	ldrb	r3, [r7, #13]
}
 8015b74:	4618      	mov	r0, r3
 8015b76:	3710      	adds	r7, #16
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	bd80      	pop	{r7, pc}
 8015b7c:	41200000 	.word	0x41200000
 8015b80:	20000224 	.word	0x20000224
 8015b84:	20000220 	.word	0x20000220
 8015b88:	20000274 	.word	0x20000274
 8015b8c:	43c80000 	.word	0x43c80000
 8015b90:	200002bc 	.word	0x200002bc

08015b94 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8015b94:	b590      	push	{r4, r7, lr}
 8015b96:	b0d7      	sub	sp, #348	; 0x15c
 8015b98:	af52      	add	r7, sp, #328	; 0x148
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015ba2:	2300      	movs	r3, #0
 8015ba4:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 8015ba6:	79fb      	ldrb	r3, [r7, #7]
 8015ba8:	f003 030f 	and.w	r3, r3, #15
 8015bac:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015bae:	79fb      	ldrb	r3, [r7, #7]
 8015bb0:	091b      	lsrs	r3, r3, #4
 8015bb2:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 8015bb4:	7bbb      	ldrb	r3, [r7, #14]
 8015bb6:	2b0f      	cmp	r3, #15
 8015bb8:	f200 809e 	bhi.w	8015cf8 <mode_execution+0x164>
 8015bbc:	a201      	add	r2, pc, #4	; (adr r2, 8015bc4 <mode_execution+0x30>)
 8015bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bc2:	bf00      	nop
 8015bc4:	08015c05 	.word	0x08015c05
 8015bc8:	08015c0f 	.word	0x08015c0f
 8015bcc:	08015cf7 	.word	0x08015cf7
 8015bd0:	08015c19 	.word	0x08015c19
 8015bd4:	08015c23 	.word	0x08015c23
 8015bd8:	08015c2d 	.word	0x08015c2d
 8015bdc:	08015c5d 	.word	0x08015c5d
 8015be0:	08015c67 	.word	0x08015c67
 8015be4:	08015c97 	.word	0x08015c97
 8015be8:	08015cc7 	.word	0x08015cc7
 8015bec:	08015cf7 	.word	0x08015cf7
 8015bf0:	08015cf7 	.word	0x08015cf7
 8015bf4:	08015cf7 	.word	0x08015cf7
 8015bf8:	08015cf7 	.word	0x08015cf7
 8015bfc:	08015cf7 	.word	0x08015cf7
 8015c00:	08015cf7 	.word	0x08015cf7
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8015c04:	7bfb      	ldrb	r3, [r7, #15]
 8015c06:	4618      	mov	r0, r3
 8015c08:	f000 f886 	bl	8015d18 <mode_PLtest>
	break;
 8015c0c:	e074      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8015c0e:	7bfb      	ldrb	r3, [r7, #15]
 8015c10:	4618      	mov	r0, r3
 8015c12:	f000 fa69 	bl	80160e8 <mode_Running>
	break;
 8015c16:	e06f      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 8015c18:	7bfb      	ldrb	r3, [r7, #15]
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f000 fc96 	bl	801654c <mode_Tuning0>
	break;
 8015c20:	e06a      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 8015c22:	7bfb      	ldrb	r3, [r7, #15]
 8015c24:	4618      	mov	r0, r3
 8015c26:	f001 f83f 	bl	8016ca8 <mode_WallSensorTuning>
	break;
 8015c2a:	e065      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 8015c2c:	7bfb      	ldrb	r3, [r7, #15]
 8015c2e:	4c34      	ldr	r4, [pc, #208]	; (8015d00 <mode_execution+0x16c>)
 8015c30:	2201      	movs	r2, #1
 8015c32:	9251      	str	r2, [sp, #324]	; 0x144
 8015c34:	2200      	movs	r2, #0
 8015c36:	9250      	str	r2, [sp, #320]	; 0x140
 8015c38:	2201      	movs	r2, #1
 8015c3a:	924f      	str	r2, [sp, #316]	; 0x13c
 8015c3c:	934e      	str	r3, [sp, #312]	; 0x138
 8015c3e:	4668      	mov	r0, sp
 8015c40:	f104 0310 	add.w	r3, r4, #16
 8015c44:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015c48:	4619      	mov	r1, r3
 8015c4a:	f00a ffe3 	bl	8020c14 <memcpy>
 8015c4e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015c52:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015d04 <mode_execution+0x170>
 8015c56:	f7f8 fcfb 	bl	800e650 <testturning>
	break;
 8015c5a:	e04d      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 8015c5c:	7bfb      	ldrb	r3, [r7, #15]
 8015c5e:	4618      	mov	r0, r3
 8015c60:	f001 fa5a 	bl	8017118 <mode_WallSensorTuning_fast>
	break;
 8015c64:	e048      	b.n	8015cf8 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015c66:	7bfb      	ldrb	r3, [r7, #15]
 8015c68:	4c27      	ldr	r4, [pc, #156]	; (8015d08 <mode_execution+0x174>)
 8015c6a:	2201      	movs	r2, #1
 8015c6c:	9251      	str	r2, [sp, #324]	; 0x144
 8015c6e:	2201      	movs	r2, #1
 8015c70:	9250      	str	r2, [sp, #320]	; 0x140
 8015c72:	2201      	movs	r2, #1
 8015c74:	924f      	str	r2, [sp, #316]	; 0x13c
 8015c76:	934e      	str	r3, [sp, #312]	; 0x138
 8015c78:	4668      	mov	r0, sp
 8015c7a:	f104 0310 	add.w	r3, r4, #16
 8015c7e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015c82:	4619      	mov	r1, r3
 8015c84:	f00a ffc6 	bl	8020c14 <memcpy>
 8015c88:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015c8c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015d0c <mode_execution+0x178>
 8015c90:	f7f8 fcde 	bl	800e650 <testturning>
	break;
 8015c94:	e030      	b.n	8015cf8 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015c96:	7bfb      	ldrb	r3, [r7, #15]
 8015c98:	4c1d      	ldr	r4, [pc, #116]	; (8015d10 <mode_execution+0x17c>)
 8015c9a:	2201      	movs	r2, #1
 8015c9c:	9251      	str	r2, [sp, #324]	; 0x144
 8015c9e:	2201      	movs	r2, #1
 8015ca0:	9250      	str	r2, [sp, #320]	; 0x140
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	924f      	str	r2, [sp, #316]	; 0x13c
 8015ca6:	934e      	str	r3, [sp, #312]	; 0x138
 8015ca8:	4668      	mov	r0, sp
 8015caa:	f104 0310 	add.w	r3, r4, #16
 8015cae:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015cb2:	4619      	mov	r1, r3
 8015cb4:	f00a ffae 	bl	8020c14 <memcpy>
 8015cb8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cbc:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015d0c <mode_execution+0x178>
 8015cc0:	f7f8 fcc6 	bl	800e650 <testturning>
	break;
 8015cc4:	e018      	b.n	8015cf8 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 8015cc6:	7bfb      	ldrb	r3, [r7, #15]
 8015cc8:	4c12      	ldr	r4, [pc, #72]	; (8015d14 <mode_execution+0x180>)
 8015cca:	2201      	movs	r2, #1
 8015ccc:	9251      	str	r2, [sp, #324]	; 0x144
 8015cce:	2201      	movs	r2, #1
 8015cd0:	9250      	str	r2, [sp, #320]	; 0x140
 8015cd2:	2201      	movs	r2, #1
 8015cd4:	924f      	str	r2, [sp, #316]	; 0x13c
 8015cd6:	934e      	str	r3, [sp, #312]	; 0x138
 8015cd8:	4668      	mov	r0, sp
 8015cda:	f104 0310 	add.w	r3, r4, #16
 8015cde:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	f00a ff96 	bl	8020c14 <memcpy>
 8015ce8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015cec:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015d0c <mode_execution+0x178>
 8015cf0:	f7f8 fcae 	bl	800e650 <testturning>
	break;
 8015cf4:	e000      	b.n	8015cf8 <mode_execution+0x164>
	break;
 8015cf6:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015cf8:	bf00      	nop
 8015cfa:	3714      	adds	r7, #20
 8015cfc:	46bd      	mov	sp, r7
 8015cfe:	bd90      	pop	{r4, r7, pc}
 8015d00:	2000f81c 	.word	0x2000f81c
 8015d04:	3f028f5c 	.word	0x3f028f5c
 8015d08:	2000f964 	.word	0x2000f964
 8015d0c:	3f7d70a4 	.word	0x3f7d70a4
 8015d10:	2000faac 	.word	0x2000faac
 8015d14:	2000fbf4 	.word	0x2000fbf4

08015d18 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8015d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d1c:	b092      	sub	sp, #72	; 0x48
 8015d1e:	af0a      	add	r7, sp, #40	; 0x28
 8015d20:	4603      	mov	r3, r0
 8015d22:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 8015d24:	2300      	movs	r3, #0
 8015d26:	61fb      	str	r3, [r7, #28]
 8015d28:	2300      	movs	r3, #0
 8015d2a:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 8015d2c:	7dfb      	ldrb	r3, [r7, #23]
 8015d2e:	2b0f      	cmp	r3, #15
 8015d30:	f200 81d2 	bhi.w	80160d8 <mode_PLtest+0x3c0>
 8015d34:	a201      	add	r2, pc, #4	; (adr r2, 8015d3c <mode_PLtest+0x24>)
 8015d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d3a:	bf00      	nop
 8015d3c:	080160d7 	.word	0x080160d7
 8015d40:	08015d7d 	.word	0x08015d7d
 8015d44:	08015daf 	.word	0x08015daf
 8015d48:	08015e2b 	.word	0x08015e2b
 8015d4c:	08015e8f 	.word	0x08015e8f
 8015d50:	08015f0f 	.word	0x08015f0f
 8015d54:	08015f15 	.word	0x08015f15
 8015d58:	080160d9 	.word	0x080160d9
 8015d5c:	080160d9 	.word	0x080160d9
 8015d60:	08015f9b 	.word	0x08015f9b
 8015d64:	08016003 	.word	0x08016003
 8015d68:	08016089 	.word	0x08016089
 8015d6c:	080160d9 	.word	0x080160d9
 8015d70:	080160d9 	.word	0x080160d9
 8015d74:	080160d9 	.word	0x080160d9
 8015d78:	080160d1 	.word	0x080160d1
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015d7c:	4bbb      	ldr	r3, [pc, #748]	; (801606c <mode_PLtest+0x354>)
 8015d7e:	6819      	ldr	r1, [r3, #0]
 8015d80:	4bba      	ldr	r3, [pc, #744]	; (801606c <mode_PLtest+0x354>)
 8015d82:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015d84:	4bb9      	ldr	r3, [pc, #740]	; (801606c <mode_PLtest+0x354>)
 8015d86:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015d8a:	4bb8      	ldr	r3, [pc, #736]	; (801606c <mode_PLtest+0x354>)
 8015d8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015d90:	4ab6      	ldr	r2, [pc, #728]	; (801606c <mode_PLtest+0x354>)
 8015d92:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8015d96:	9201      	str	r2, [sp, #4]
 8015d98:	9300      	str	r3, [sp, #0]
 8015d9a:	4623      	mov	r3, r4
 8015d9c:	4602      	mov	r2, r0
 8015d9e:	48b4      	ldr	r0, [pc, #720]	; (8016070 <mode_PLtest+0x358>)
 8015da0:	f00b fbb8 	bl	8021514 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 8015da4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015da8:	f7f2 fe8e 	bl	8008ac8 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015dac:	e7e6      	b.n	8015d7c <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8015dae:	2001      	movs	r0, #1
 8015db0:	f7f1 ff0e 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015db4:	2001      	movs	r0, #1
 8015db6:	f7f1 ff1d 	bl	8007bf4 <pl_l_blue_LED>
		record_mode = 1;
 8015dba:	4bae      	ldr	r3, [pc, #696]	; (8016074 <mode_PLtest+0x35c>)
 8015dbc:	2201      	movs	r2, #1
 8015dbe:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015dc0:	f44f 7161 	mov.w	r1, #900	; 0x384
 8015dc4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015dc8:	f7f2 fc06 	bl	80085d8 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8015dcc:	2001      	movs	r0, #1
 8015dce:	f7f2 fbc1 	bl	8008554 <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8015dd2:	2001      	movs	r0, #1
 8015dd4:	f7f2 fb96 	bl	8008504 <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015dd8:	f7f2 fbe2 	bl	80085a0 <pl_DriveMotor_start>
		wait_ms(2500);
 8015ddc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015de0:	f7f2 fe72 	bl	8008ac8 <wait_ms>
		pl_DriveMotor_stop();
 8015de4:	f7f2 fbea 	bl	80085bc <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015de8:	2000      	movs	r0, #0
 8015dea:	f7f1 fef1 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015dee:	2000      	movs	r0, #0
 8015df0:	f7f1 ff00 	bl	8007bf4 <pl_l_blue_LED>
		record_mode = 0;
 8015df4:	4b9f      	ldr	r3, [pc, #636]	; (8016074 <mode_PLtest+0x35c>)
 8015df6:	2200      	movs	r2, #0
 8015df8:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015dfa:	e002      	b.n	8015e02 <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015dfc:	2001      	movs	r0, #1
 8015dfe:	f7f2 fe63 	bl	8008ac8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e02:	4b9a      	ldr	r3, [pc, #616]	; (801606c <mode_PLtest+0x354>)
 8015e04:	681b      	ldr	r3, [r3, #0]
 8015e06:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e0a:	ddf7      	ble.n	8015dfc <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015e0c:	4b97      	ldr	r3, [pc, #604]	; (801606c <mode_PLtest+0x354>)
 8015e0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e12:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e16:	ddf1      	ble.n	8015dfc <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e18:	4b94      	ldr	r3, [pc, #592]	; (801606c <mode_PLtest+0x354>)
 8015e1a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015e1e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e22:	ddeb      	ble.n	8015dfc <mode_PLtest+0xe4>
		}
		record_print();
 8015e24:	f001 fc68 	bl	80176f8 <record_print>
		break;
 8015e28:	e156      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b0011:	//gyro
		reset_gyro();
 8015e2a:	f7eb fec5 	bl	8001bb8 <reset_gyro>
		reset_speed();
 8015e2e:	f7eb f8f9 	bl	8001024 <reset_speed>
		pl_r_blue_LED(ON);
 8015e32:	2001      	movs	r0, #1
 8015e34:	f7f1 fecc 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015e38:	2001      	movs	r0, #1
 8015e3a:	f7f1 fedb 	bl	8007bf4 <pl_l_blue_LED>
		record_mode = 2;
 8015e3e:	4b8d      	ldr	r3, [pc, #564]	; (8016074 <mode_PLtest+0x35c>)
 8015e40:	2202      	movs	r2, #2
 8015e42:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8015e44:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015e48:	f7f2 fe3e 	bl	8008ac8 <wait_ms>
		pl_r_blue_LED(OFF);
 8015e4c:	2000      	movs	r0, #0
 8015e4e:	f7f1 febf 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015e52:	2000      	movs	r0, #0
 8015e54:	f7f1 fece 	bl	8007bf4 <pl_l_blue_LED>
		record_mode = 0;
 8015e58:	4b86      	ldr	r3, [pc, #536]	; (8016074 <mode_PLtest+0x35c>)
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e5e:	e002      	b.n	8015e66 <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015e60:	2001      	movs	r0, #1
 8015e62:	f7f2 fe31 	bl	8008ac8 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015e66:	4b81      	ldr	r3, [pc, #516]	; (801606c <mode_PLtest+0x354>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e6e:	ddf7      	ble.n	8015e60 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015e70:	4b7e      	ldr	r3, [pc, #504]	; (801606c <mode_PLtest+0x354>)
 8015e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e7a:	ddf1      	ble.n	8015e60 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015e7c:	4b7b      	ldr	r3, [pc, #492]	; (801606c <mode_PLtest+0x354>)
 8015e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015e86:	ddeb      	ble.n	8015e60 <mode_PLtest+0x148>
		}
		record_print();
 8015e88:	f001 fc36 	bl	80176f8 <record_print>
		break;
 8015e8c:	e124      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015e8e:	4b7a      	ldr	r3, [pc, #488]	; (8016078 <mode_PLtest+0x360>)
 8015e90:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7ea fb80 	bl	8000598 <__aeabi_f2d>
 8015e98:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015e9c:	4b76      	ldr	r3, [pc, #472]	; (8016078 <mode_PLtest+0x360>)
 8015e9e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f7ea fb79 	bl	8000598 <__aeabi_f2d>
 8015ea6:	4604      	mov	r4, r0
 8015ea8:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015eaa:	4b73      	ldr	r3, [pc, #460]	; (8016078 <mode_PLtest+0x360>)
 8015eac:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015eae:	4618      	mov	r0, r3
 8015eb0:	f7ea fb72 	bl	8000598 <__aeabi_f2d>
 8015eb4:	4680      	mov	r8, r0
 8015eb6:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015eb8:	4b6f      	ldr	r3, [pc, #444]	; (8016078 <mode_PLtest+0x360>)
 8015eba:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7ea fb6b 	bl	8000598 <__aeabi_f2d>
 8015ec2:	4682      	mov	sl, r0
 8015ec4:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ec6:	4b6c      	ldr	r3, [pc, #432]	; (8016078 <mode_PLtest+0x360>)
 8015ec8:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7ea fb64 	bl	8000598 <__aeabi_f2d>
 8015ed0:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015ed4:	4b68      	ldr	r3, [pc, #416]	; (8016078 <mode_PLtest+0x360>)
 8015ed6:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7ea fb5d 	bl	8000598 <__aeabi_f2d>
 8015ede:	4602      	mov	r2, r0
 8015ee0:	460b      	mov	r3, r1
 8015ee2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8015ee6:	ed97 7b00 	vldr	d7, [r7]
 8015eea:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015eee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8015ef2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8015ef6:	e9cd 4500 	strd	r4, r5, [sp]
 8015efa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015efe:	485f      	ldr	r0, [pc, #380]	; (801607c <mode_PLtest+0x364>)
 8015f00:	f00b fb08 	bl	8021514 <iprintf>
			wait_ms(500);
 8015f04:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015f08:	f7f2 fdde 	bl	8008ac8 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015f0c:	e7bf      	b.n	8015e8e <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015f0e:	f7f1 ffaf 	bl	8007e70 <test_flash>
		break;
 8015f12:	e0e1      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b0110:
		record_mode=6;
 8015f14:	4b57      	ldr	r3, [pc, #348]	; (8016074 <mode_PLtest+0x35c>)
 8015f16:	2206      	movs	r2, #6
 8015f18:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 8015f1a:	2001      	movs	r0, #1
 8015f1c:	f7f1 fe58 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8015f20:	2001      	movs	r0, #1
 8015f22:	f7f1 fe67 	bl	8007bf4 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 8015f26:	f107 0218 	add.w	r2, r7, #24
 8015f2a:	f107 031c 	add.w	r3, r7, #28
 8015f2e:	4611      	mov	r1, r2
 8015f30:	4618      	mov	r0, r3
 8015f32:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8015f36:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f3a:	f7ec f9a3 	bl	8002284 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8015f3e:	69fb      	ldr	r3, [r7, #28]
 8015f40:	69ba      	ldr	r2, [r7, #24]
 8015f42:	4611      	mov	r1, r2
 8015f44:	4618      	mov	r0, r3
 8015f46:	f7f2 fb47 	bl	80085d8 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 8015f4a:	f7f2 fb29 	bl	80085a0 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f4e:	e00a      	b.n	8015f66 <mode_PLtest+0x24e>
			wait_ms(1);
 8015f50:	2001      	movs	r0, #1
 8015f52:	f7f2 fdb9 	bl	8008ac8 <wait_ms>
			if(record_rupe_flag==1){
 8015f56:	4b4a      	ldr	r3, [pc, #296]	; (8016080 <mode_PLtest+0x368>)
 8015f58:	781b      	ldrb	r3, [r3, #0]
 8015f5a:	2b01      	cmp	r3, #1
 8015f5c:	d103      	bne.n	8015f66 <mode_PLtest+0x24e>
				record_mode=0;
 8015f5e:	4b45      	ldr	r3, [pc, #276]	; (8016074 <mode_PLtest+0x35c>)
 8015f60:	2200      	movs	r2, #0
 8015f62:	701a      	strb	r2, [r3, #0]
				break;
 8015f64:	e010      	b.n	8015f88 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f66:	4b41      	ldr	r3, [pc, #260]	; (801606c <mode_PLtest+0x354>)
 8015f68:	681b      	ldr	r3, [r3, #0]
 8015f6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f6e:	ddef      	ble.n	8015f50 <mode_PLtest+0x238>
 8015f70:	4b3e      	ldr	r3, [pc, #248]	; (801606c <mode_PLtest+0x354>)
 8015f72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f7a:	dde9      	ble.n	8015f50 <mode_PLtest+0x238>
 8015f7c:	4b3b      	ldr	r3, [pc, #236]	; (801606c <mode_PLtest+0x354>)
 8015f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015f82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f86:	dde3      	ble.n	8015f50 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015f88:	f7f2 fb18 	bl	80085bc <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	f7f1 fe1f 	bl	8007bd0 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015f92:	2000      	movs	r0, #0
 8015f94:	f7f1 fe2e 	bl	8007bf4 <pl_l_blue_LED>

		break;
 8015f98:	e09e      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015f9a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015f9e:	f7f2 fb45 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015fa2:	f7f2 fb2f 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(2000);
 8015fa6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015faa:	f003 fb61 	bl	8019670 <HAL_Delay>
			reset_gyro();
 8015fae:	f7eb fe03 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8015fb2:	f7eb f837 	bl	8001024 <reset_speed>
			clear_Ierror();
 8015fb6:	f7ef f91b 	bl	80051f0 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015fba:	2001      	movs	r0, #1
 8015fbc:	f7f1 fe08 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015fc0:	2001      	movs	r0, #1
 8015fc2:	f7f1 fe17 	bl	8007bf4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fc6:	e002      	b.n	8015fce <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015fc8:	2001      	movs	r0, #1
 8015fca:	f003 fb51 	bl	8019670 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fce:	4b27      	ldr	r3, [pc, #156]	; (801606c <mode_PLtest+0x354>)
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fd6:	ddf7      	ble.n	8015fc8 <mode_PLtest+0x2b0>
 8015fd8:	4b24      	ldr	r3, [pc, #144]	; (801606c <mode_PLtest+0x354>)
 8015fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015fde:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fe2:	ddf1      	ble.n	8015fc8 <mode_PLtest+0x2b0>
 8015fe4:	4b21      	ldr	r3, [pc, #132]	; (801606c <mode_PLtest+0x354>)
 8015fe6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015fea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fee:	ddeb      	ble.n	8015fc8 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015ff0:	2000      	movs	r0, #0
 8015ff2:	f7f1 fded 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015ff6:	2000      	movs	r0, #0
 8015ff8:	f7f1 fdfc 	bl	8007bf4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015ffc:	f7f2 fb0c 	bl	8008618 <pl_FunMotor_stop>
		break;
 8016000:	e06a      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8016002:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8016084 <mode_PLtest+0x36c>
 8016006:	f7f2 fb11 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801600a:	f7f2 fafb 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(2000);
 801600e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016012:	f003 fb2d 	bl	8019670 <HAL_Delay>
			reset_gyro();
 8016016:	f7eb fdcf 	bl	8001bb8 <reset_gyro>
			reset_speed();
 801601a:	f7eb f803 	bl	8001024 <reset_speed>
			clear_Ierror();
 801601e:	f7ef f8e7 	bl	80051f0 <clear_Ierror>
			pl_r_blue_LED(ON);
 8016022:	2001      	movs	r0, #1
 8016024:	f7f1 fdd4 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8016028:	2001      	movs	r0, #1
 801602a:	f7f1 fde3 	bl	8007bf4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801602e:	e002      	b.n	8016036 <mode_PLtest+0x31e>
				HAL_Delay(1);
 8016030:	2001      	movs	r0, #1
 8016032:	f003 fb1d 	bl	8019670 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016036:	4b0d      	ldr	r3, [pc, #52]	; (801606c <mode_PLtest+0x354>)
 8016038:	681b      	ldr	r3, [r3, #0]
 801603a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801603e:	ddf7      	ble.n	8016030 <mode_PLtest+0x318>
 8016040:	4b0a      	ldr	r3, [pc, #40]	; (801606c <mode_PLtest+0x354>)
 8016042:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016046:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801604a:	ddf1      	ble.n	8016030 <mode_PLtest+0x318>
 801604c:	4b07      	ldr	r3, [pc, #28]	; (801606c <mode_PLtest+0x354>)
 801604e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016052:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016056:	ddeb      	ble.n	8016030 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 8016058:	2000      	movs	r0, #0
 801605a:	f7f1 fdb9 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801605e:	2000      	movs	r0, #0
 8016060:	f7f1 fdc8 	bl	8007bf4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8016064:	f7f2 fad8 	bl	8008618 <pl_FunMotor_stop>
		break;
 8016068:	e036      	b.n	80160d8 <mode_PLtest+0x3c0>
 801606a:	bf00      	nop
 801606c:	200002bc 	.word	0x200002bc
 8016070:	08025104 	.word	0x08025104
 8016074:	2000f284 	.word	0x2000f284
 8016078:	200006f0 	.word	0x200006f0
 801607c:	08025130 	.word	0x08025130
 8016080:	2000f290 	.word	0x2000f290
 8016084:	3f7d70a4 	.word	0x3f7d70a4
	case 0b1011://fun
			pl_FunMotor_duty(0.99);
 8016088:	ed1f 0a02 	vldr	s0, [pc, #-8]	; 8016084 <mode_PLtest+0x36c>
 801608c:	f7f2 face 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016090:	f7f2 fab8 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(2000);
 8016094:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8016098:	f003 faea 	bl	8019670 <HAL_Delay>
			reset_gyro();
 801609c:	f7eb fd8c 	bl	8001bb8 <reset_gyro>
			reset_speed();
 80160a0:	f7ea ffc0 	bl	8001024 <reset_speed>
			clear_Ierror();
 80160a4:	f7ef f8a4 	bl	80051f0 <clear_Ierror>
			record_mode=2;
 80160a8:	4b0e      	ldr	r3, [pc, #56]	; (80160e4 <mode_PLtest+0x3cc>)
 80160aa:	2202      	movs	r2, #2
 80160ac:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80160ae:	2001      	movs	r0, #1
 80160b0:	f7f1 fd8e 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80160b4:	2001      	movs	r0, #1
 80160b6:	f7f1 fd9d 	bl	8007bf4 <pl_l_blue_LED>
			no_angle();
 80160ba:	f7ee fcd1 	bl	8004a60 <no_angle>
			pl_r_blue_LED(OFF);
 80160be:	2000      	movs	r0, #0
 80160c0:	f7f1 fd86 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80160c4:	2000      	movs	r0, #0
 80160c6:	f7f1 fd95 	bl	8007bf4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80160ca:	f7f2 faa5 	bl	8008618 <pl_FunMotor_stop>
		break;
 80160ce:	e003      	b.n	80160d8 <mode_PLtest+0x3c0>
	case 0b1111:	//record_out
		record_print();
 80160d0:	f001 fb12 	bl	80176f8 <record_print>
		break;
 80160d4:	e000      	b.n	80160d8 <mode_PLtest+0x3c0>
		break;
 80160d6:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80160d8:	bf00      	nop
 80160da:	3720      	adds	r7, #32
 80160dc:	46bd      	mov	sp, r7
 80160de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80160e2:	bf00      	nop
 80160e4:	2000f284 	.word	0x2000f284

080160e8 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 80160e8:	b5b0      	push	{r4, r5, r7, lr}
 80160ea:	b0da      	sub	sp, #360	; 0x168
 80160ec:	af54      	add	r7, sp, #336	; 0x150
 80160ee:	4603      	mov	r3, r0
 80160f0:	71fb      	strb	r3, [r7, #7]

	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80160f2:	2003      	movs	r0, #3
 80160f4:	f7f2 fa06 	bl	8008504 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80160f8:	2003      	movs	r0, #3
 80160fa:	f7f2 fa2b 	bl	8008554 <pl_R_DriveMotor_mode>
	reset_gyro();
 80160fe:	f7eb fd5b 	bl	8001bb8 <reset_gyro>
	reset_speed();
 8016102:	f7ea ff8f 	bl	8001024 <reset_speed>
	reset_distance();
 8016106:	f7ea ff49 	bl	8000f9c <reset_distance>
	clear_Ierror();
 801610a:	f7ef f871 	bl	80051f0 <clear_Ierror>
	switch (main_modeR) {
 801610e:	79fb      	ldrb	r3, [r7, #7]
 8016110:	2b0f      	cmp	r3, #15
 8016112:	f200 81e7 	bhi.w	80164e4 <mode_Running+0x3fc>
 8016116:	a201      	add	r2, pc, #4	; (adr r2, 801611c <mode_Running+0x34>)
 8016118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801611c:	0801615d 	.word	0x0801615d
 8016120:	08016215 	.word	0x08016215
 8016124:	0801624d 	.word	0x0801624d
 8016128:	08016253 	.word	0x08016253
 801612c:	0801628b 	.word	0x0801628b
 8016130:	080162bd 	.word	0x080162bd
 8016134:	080162ef 	.word	0x080162ef
 8016138:	08016321 	.word	0x08016321
 801613c:	08016353 	.word	0x08016353
 8016140:	08016385 	.word	0x08016385
 8016144:	080163b7 	.word	0x080163b7
 8016148:	080163e9 	.word	0x080163e9
 801614c:	0801641b 	.word	0x0801641b
 8016150:	0801644d 	.word	0x0801644d
 8016154:	0801647f 	.word	0x0801647f
 8016158:	080164b1 	.word	0x080164b1
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			maze_clear();
 801615c:	f7fb f80c 	bl	8011178 <maze_clear>
			maze_out_matlab();
 8016160:	f7fa ffdc 	bl	801111c <maze_out_matlab>

			create_StepCountMap_queue();
 8016164:	f7fe fc06 	bl	8014974 <create_StepCountMap_queue>
			maze_display();
 8016168:	f7ff fa22 	bl	80155b0 <maze_display>

			create_DijkstraMap();
 801616c:	f7fb fee0 	bl	8011f30 <create_DijkstraMap>
			maze_display_Dijkstra();
 8016170:	f7ff fb32 	bl	80157d8 <maze_display_Dijkstra>

			route_Dijkstra();
 8016174:	f7fd fc16 	bl	80139a4 <route_Dijkstra>
			create_StepCountMap_unknown();
 8016178:	f7fe f8ca 	bl	8014310 <create_StepCountMap_unknown>
			maze_display();
 801617c:	f7ff fa18 	bl	80155b0 <maze_display>

			tic_timer();
 8016180:	f7f2 fc74 	bl	8008a6c <tic_timer>
			for(int j=0;j<5000;j++){
 8016184:	2300      	movs	r3, #0
 8016186:	617b      	str	r3, [r7, #20]
 8016188:	e004      	b.n	8016194 <mode_Running+0xac>
			create_StepCountMap_queue();
 801618a:	f7fe fbf3 	bl	8014974 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 801618e:	697b      	ldr	r3, [r7, #20]
 8016190:	3301      	adds	r3, #1
 8016192:	617b      	str	r3, [r7, #20]
 8016194:	697b      	ldr	r3, [r7, #20]
 8016196:	f241 3287 	movw	r2, #4999	; 0x1387
 801619a:	4293      	cmp	r3, r2
 801619c:	ddf5      	ble.n	801618a <mode_Running+0xa2>
			}
			float tim2 = toc_timer();
 801619e:	f7f2 fc77 	bl	8008a90 <toc_timer>
 80161a2:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80161a6:	f7ff fa03 	bl	80155b0 <maze_display>
			printf("tim2=%f\n", tim2);
 80161aa:	68f8      	ldr	r0, [r7, #12]
 80161ac:	f7ea f9f4 	bl	8000598 <__aeabi_f2d>
 80161b0:	4602      	mov	r2, r0
 80161b2:	460b      	mov	r3, r1
 80161b4:	48cd      	ldr	r0, [pc, #820]	; (80164ec <mode_Running+0x404>)
 80161b6:	f00b f9ad 	bl	8021514 <iprintf>
			tic_timer();
 80161ba:	f7f2 fc57 	bl	8008a6c <tic_timer>
			create_DijkstraMap();
 80161be:	f7fb feb7 	bl	8011f30 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80161c2:	2300      	movs	r3, #0
 80161c4:	613b      	str	r3, [r7, #16]
 80161c6:	e006      	b.n	80161d6 <mode_Running+0xee>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80161c8:	f7fd fbec 	bl	80139a4 <route_Dijkstra>
			create_StepCountMap_unknown();
 80161cc:	f7fe f8a0 	bl	8014310 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	3301      	adds	r3, #1
 80161d4:	613b      	str	r3, [r7, #16]
 80161d6:	693b      	ldr	r3, [r7, #16]
 80161d8:	f241 3287 	movw	r2, #4999	; 0x1387
 80161dc:	4293      	cmp	r3, r2
 80161de:	ddf3      	ble.n	80161c8 <mode_Running+0xe0>

			}
			float tim1 = toc_timer();
 80161e0:	f7f2 fc56 	bl	8008a90 <toc_timer>
 80161e4:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 80161e8:	f7ff f9e2 	bl	80155b0 <maze_display>
			maze_display_Dijkstra();
 80161ec:	f7ff faf4 	bl	80157d8 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 80161f0:	68b8      	ldr	r0, [r7, #8]
 80161f2:	f7ea f9d1 	bl	8000598 <__aeabi_f2d>
 80161f6:	4604      	mov	r4, r0
 80161f8:	460d      	mov	r5, r1
 80161fa:	68f8      	ldr	r0, [r7, #12]
 80161fc:	f7ea f9cc 	bl	8000598 <__aeabi_f2d>
 8016200:	4602      	mov	r2, r0
 8016202:	460b      	mov	r3, r1
 8016204:	e9cd 2300 	strd	r2, r3, [sp]
 8016208:	4622      	mov	r2, r4
 801620a:	462b      	mov	r3, r5
 801620c:	48b8      	ldr	r0, [pc, #736]	; (80164f0 <mode_Running+0x408>)
 801620e:	f00b f981 	bl	8021514 <iprintf>
		break;
 8016212:	e167      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0001://足立法(遅い)
			tic_timer();
 8016214:	f7f2 fc2a 	bl	8008a6c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8016218:	4cb6      	ldr	r4, [pc, #728]	; (80164f4 <mode_Running+0x40c>)
 801621a:	2300      	movs	r3, #0
 801621c:	934f      	str	r3, [sp, #316]	; 0x13c
 801621e:	2301      	movs	r3, #1
 8016220:	934e      	str	r3, [sp, #312]	; 0x138
 8016222:	4668      	mov	r0, sp
 8016224:	f104 0310 	add.w	r3, r4, #16
 8016228:	f44f 729c 	mov.w	r2, #312	; 0x138
 801622c:	4619      	mov	r1, r3
 801622e:	f00a fcf1 	bl	8020c14 <memcpy>
 8016232:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016236:	eddf 1ab0 	vldr	s3, [pc, #704]	; 80164f8 <mode_Running+0x410>
 801623a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 80164fc <mode_Running+0x414>
 801623e:	eddf 0ab0 	vldr	s1, [pc, #704]	; 8016500 <mode_Running+0x418>
 8016242:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8016504 <mode_Running+0x41c>
 8016246:	f7f8 fe69 	bl	800ef1c <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 801624a:	e14b      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0010://Flashから
			record_out();
 801624c:	f7f1 ff28 	bl	80080a0 <record_out>
		break;
 8016250:	e148      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0011://ゴミ
			tic_timer();
 8016252:	f7f2 fc0b 	bl	8008a6c <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8016256:	4ca7      	ldr	r4, [pc, #668]	; (80164f4 <mode_Running+0x40c>)
 8016258:	2301      	movs	r3, #1
 801625a:	934f      	str	r3, [sp, #316]	; 0x13c
 801625c:	2301      	movs	r3, #1
 801625e:	934e      	str	r3, [sp, #312]	; 0x138
 8016260:	4668      	mov	r0, sp
 8016262:	f104 0310 	add.w	r3, r4, #16
 8016266:	f44f 729c 	mov.w	r2, #312	; 0x138
 801626a:	4619      	mov	r1, r3
 801626c:	f00a fcd2 	bl	8020c14 <memcpy>
 8016270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016274:	eddf 1aa0 	vldr	s3, [pc, #640]	; 80164f8 <mode_Running+0x410>
 8016278:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 80164fc <mode_Running+0x414>
 801627c:	eddf 0aa0 	vldr	s1, [pc, #640]	; 8016500 <mode_Running+0x418>
 8016280:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8016504 <mode_Running+0x41c>
 8016284:	f7f8 fe4a 	bl	800ef1c <AdatiWayReturn>
		break;
 8016288:	e12c      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0100://ゴミ
			record_out();
 801628a:	f7f1 ff09 	bl	80080a0 <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 801628e:	2300      	movs	r3, #0
 8016290:	9352      	str	r3, [sp, #328]	; 0x148
 8016292:	4a9d      	ldr	r2, [pc, #628]	; (8016508 <mode_Running+0x420>)
 8016294:	466b      	mov	r3, sp
 8016296:	4611      	mov	r1, r2
 8016298:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801629c:	4618      	mov	r0, r3
 801629e:	f00a fcb9 	bl	8020c14 <memcpy>
 80162a2:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 801650c <mode_Running+0x424>
 80162a6:	2300      	movs	r3, #0
 80162a8:	2200      	movs	r2, #0
 80162aa:	2100      	movs	r1, #0
 80162ac:	2000      	movs	r0, #0
 80162ae:	eddf 0a92 	vldr	s1, [pc, #584]	; 80164f8 <mode_Running+0x410>
 80162b2:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016510 <mode_Running+0x428>
 80162b6:	f7f9 fb3f 	bl	800f938 <run_shortest>
		break;
 80162ba:	e113      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0101://
			record_out();
 80162bc:	f7f1 fef0 	bl	80080a0 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 80162c0:	2301      	movs	r3, #1
 80162c2:	9352      	str	r3, [sp, #328]	; 0x148
 80162c4:	4a93      	ldr	r2, [pc, #588]	; (8016514 <mode_Running+0x42c>)
 80162c6:	466b      	mov	r3, sp
 80162c8:	4611      	mov	r1, r2
 80162ca:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80162ce:	4618      	mov	r0, r3
 80162d0:	f00a fca0 	bl	8020c14 <memcpy>
 80162d4:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 801650c <mode_Running+0x424>
 80162d8:	2300      	movs	r3, #0
 80162da:	2200      	movs	r2, #0
 80162dc:	2101      	movs	r1, #1
 80162de:	2000      	movs	r0, #0
 80162e0:	eddf 0a85 	vldr	s1, [pc, #532]	; 80164f8 <mode_Running+0x410>
 80162e4:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016510 <mode_Running+0x428>
 80162e8:	f7f9 fb26 	bl	800f938 <run_shortest>
		break;
 80162ec:	e0fa      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0110://吸引なしで斜め走行
			record_out();
 80162ee:	f7f1 fed7 	bl	80080a0 <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 80162f2:	2301      	movs	r3, #1
 80162f4:	9352      	str	r3, [sp, #328]	; 0x148
 80162f6:	4a87      	ldr	r2, [pc, #540]	; (8016514 <mode_Running+0x42c>)
 80162f8:	466b      	mov	r3, sp
 80162fa:	4611      	mov	r1, r2
 80162fc:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016300:	4618      	mov	r0, r3
 8016302:	f00a fc87 	bl	8020c14 <memcpy>
 8016306:	ed9f 1a81 	vldr	s2, [pc, #516]	; 801650c <mode_Running+0x424>
 801630a:	2301      	movs	r3, #1
 801630c:	2200      	movs	r2, #0
 801630e:	2101      	movs	r1, #1
 8016310:	2000      	movs	r0, #0
 8016312:	eddf 0a79 	vldr	s1, [pc, #484]	; 80164f8 <mode_Running+0x410>
 8016316:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8016510 <mode_Running+0x428>
 801631a:	f7f9 fb0d 	bl	800f938 <run_shortest>
		break;
 801631e:	e0e1      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8016320:	f7f1 febe 	bl	80080a0 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8016324:	2301      	movs	r3, #1
 8016326:	9352      	str	r3, [sp, #328]	; 0x148
 8016328:	4a7b      	ldr	r2, [pc, #492]	; (8016518 <mode_Running+0x430>)
 801632a:	466b      	mov	r3, sp
 801632c:	4611      	mov	r1, r2
 801632e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016332:	4618      	mov	r0, r3
 8016334:	f00a fc6e 	bl	8020c14 <memcpy>
 8016338:	ed9f 1a78 	vldr	s2, [pc, #480]	; 801651c <mode_Running+0x434>
 801633c:	2301      	movs	r3, #1
 801633e:	2201      	movs	r2, #1
 8016340:	2101      	movs	r1, #1
 8016342:	2000      	movs	r0, #0
 8016344:	eddf 0a76 	vldr	s1, [pc, #472]	; 8016520 <mode_Running+0x438>
 8016348:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80164f8 <mode_Running+0x410>
 801634c:	f7f9 faf4 	bl	800f938 <run_shortest>
		break;
 8016350:	e0c8      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1000://
			record_out();
 8016352:	f7f1 fea5 	bl	80080a0 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8016356:	2301      	movs	r3, #1
 8016358:	9352      	str	r3, [sp, #328]	; 0x148
 801635a:	4a6f      	ldr	r2, [pc, #444]	; (8016518 <mode_Running+0x430>)
 801635c:	466b      	mov	r3, sp
 801635e:	4611      	mov	r1, r2
 8016360:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016364:	4618      	mov	r0, r3
 8016366:	f00a fc55 	bl	8020c14 <memcpy>
 801636a:	ed9f 1a6c 	vldr	s2, [pc, #432]	; 801651c <mode_Running+0x434>
 801636e:	2301      	movs	r3, #1
 8016370:	2201      	movs	r2, #1
 8016372:	2101      	movs	r1, #1
 8016374:	2000      	movs	r0, #0
 8016376:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8016524 <mode_Running+0x43c>
 801637a:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8016528 <mode_Running+0x440>
 801637e:	f7f9 fadb 	bl	800f938 <run_shortest>
		break;
 8016382:	e0af      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1001:
			record_out();
 8016384:	f7f1 fe8c 	bl	80080a0 <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8016388:	2301      	movs	r3, #1
 801638a:	9352      	str	r3, [sp, #328]	; 0x148
 801638c:	4a67      	ldr	r2, [pc, #412]	; (801652c <mode_Running+0x444>)
 801638e:	466b      	mov	r3, sp
 8016390:	4611      	mov	r1, r2
 8016392:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016396:	4618      	mov	r0, r3
 8016398:	f00a fc3c 	bl	8020c14 <memcpy>
 801639c:	ed9f 1a5f 	vldr	s2, [pc, #380]	; 801651c <mode_Running+0x434>
 80163a0:	2301      	movs	r3, #1
 80163a2:	2201      	movs	r2, #1
 80163a4:	2101      	movs	r1, #1
 80163a6:	2000      	movs	r0, #0
 80163a8:	eddf 0a5d 	vldr	s1, [pc, #372]	; 8016520 <mode_Running+0x438>
 80163ac:	ed9f 0a52 	vldr	s0, [pc, #328]	; 80164f8 <mode_Running+0x410>
 80163b0:	f7f9 fac2 	bl	800f938 <run_shortest>
		break;
 80163b4:	e096      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1010:
			record_out();
 80163b6:	f7f1 fe73 	bl	80080a0 <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 80163ba:	2301      	movs	r3, #1
 80163bc:	9352      	str	r3, [sp, #328]	; 0x148
 80163be:	4a5b      	ldr	r2, [pc, #364]	; (801652c <mode_Running+0x444>)
 80163c0:	466b      	mov	r3, sp
 80163c2:	4611      	mov	r1, r2
 80163c4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80163c8:	4618      	mov	r0, r3
 80163ca:	f00a fc23 	bl	8020c14 <memcpy>
 80163ce:	ed9f 1a53 	vldr	s2, [pc, #332]	; 801651c <mode_Running+0x434>
 80163d2:	2301      	movs	r3, #1
 80163d4:	2201      	movs	r2, #1
 80163d6:	2101      	movs	r1, #1
 80163d8:	2000      	movs	r0, #0
 80163da:	eddf 0a52 	vldr	s1, [pc, #328]	; 8016524 <mode_Running+0x43c>
 80163de:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8016528 <mode_Running+0x440>
 80163e2:	f7f9 faa9 	bl	800f938 <run_shortest>
		break;
 80163e6:	e07d      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1011:
			record_out();
 80163e8:	f7f1 fe5a 	bl	80080a0 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 80163ec:	2301      	movs	r3, #1
 80163ee:	9352      	str	r3, [sp, #328]	; 0x148
 80163f0:	4a49      	ldr	r2, [pc, #292]	; (8016518 <mode_Running+0x430>)
 80163f2:	466b      	mov	r3, sp
 80163f4:	4611      	mov	r1, r2
 80163f6:	f44f 72a4 	mov.w	r2, #328	; 0x148
 80163fa:	4618      	mov	r0, r3
 80163fc:	f00a fc0a 	bl	8020c14 <memcpy>
 8016400:	ed9f 1a46 	vldr	s2, [pc, #280]	; 801651c <mode_Running+0x434>
 8016404:	2301      	movs	r3, #1
 8016406:	2201      	movs	r2, #1
 8016408:	2101      	movs	r1, #1
 801640a:	2000      	movs	r0, #0
 801640c:	eddf 0a48 	vldr	s1, [pc, #288]	; 8016530 <mode_Running+0x448>
 8016410:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8016534 <mode_Running+0x44c>
 8016414:	f7f9 fa90 	bl	800f938 <run_shortest>
		break;
 8016418:	e064      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1100:
			record_out();
 801641a:	f7f1 fe41 	bl	80080a0 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 801641e:	2301      	movs	r3, #1
 8016420:	9352      	str	r3, [sp, #328]	; 0x148
 8016422:	4a42      	ldr	r2, [pc, #264]	; (801652c <mode_Running+0x444>)
 8016424:	466b      	mov	r3, sp
 8016426:	4611      	mov	r1, r2
 8016428:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801642c:	4618      	mov	r0, r3
 801642e:	f00a fbf1 	bl	8020c14 <memcpy>
 8016432:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 801651c <mode_Running+0x434>
 8016436:	2301      	movs	r3, #1
 8016438:	2201      	movs	r2, #1
 801643a:	2101      	movs	r1, #1
 801643c:	2000      	movs	r0, #0
 801643e:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8016530 <mode_Running+0x448>
 8016442:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016534 <mode_Running+0x44c>
 8016446:	f7f9 fa77 	bl	800f938 <run_shortest>
		break;
 801644a:	e04b      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1101:
			record_out();
 801644c:	f7f1 fe28 	bl	80080a0 <record_out>
			run_shortest(3100,11000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8016450:	2301      	movs	r3, #1
 8016452:	9352      	str	r3, [sp, #328]	; 0x148
 8016454:	4a38      	ldr	r2, [pc, #224]	; (8016538 <mode_Running+0x450>)
 8016456:	466b      	mov	r3, sp
 8016458:	4611      	mov	r1, r2
 801645a:	f44f 72a4 	mov.w	r2, #328	; 0x148
 801645e:	4618      	mov	r0, r3
 8016460:	f00a fbd8 	bl	8020c14 <memcpy>
 8016464:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 801651c <mode_Running+0x434>
 8016468:	2301      	movs	r3, #1
 801646a:	2201      	movs	r2, #1
 801646c:	2101      	movs	r1, #1
 801646e:	2000      	movs	r0, #0
 8016470:	eddf 0a32 	vldr	s1, [pc, #200]	; 801653c <mode_Running+0x454>
 8016474:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8016540 <mode_Running+0x458>
 8016478:	f7f9 fa5e 	bl	800f938 <run_shortest>
		break;
 801647c:	e032      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1110:
			record_out();
 801647e:	f7f1 fe0f 	bl	80080a0 <record_out>
			run_shortest(4000,17000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest_mollifier,0.99,1);
 8016482:	2301      	movs	r3, #1
 8016484:	9352      	str	r3, [sp, #328]	; 0x148
 8016486:	4a2c      	ldr	r2, [pc, #176]	; (8016538 <mode_Running+0x450>)
 8016488:	466b      	mov	r3, sp
 801648a:	4611      	mov	r1, r2
 801648c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8016490:	4618      	mov	r0, r3
 8016492:	f00a fbbf 	bl	8020c14 <memcpy>
 8016496:	ed9f 1a21 	vldr	s2, [pc, #132]	; 801651c <mode_Running+0x434>
 801649a:	2301      	movs	r3, #1
 801649c:	2201      	movs	r2, #1
 801649e:	2101      	movs	r1, #1
 80164a0:	2000      	movs	r0, #0
 80164a2:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016530 <mode_Running+0x448>
 80164a6:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016534 <mode_Running+0x44c>
 80164aa:	f7f9 fa45 	bl	800f938 <run_shortest>
		break;
 80164ae:	e019      	b.n	80164e4 <mode_Running+0x3fc>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 80164b0:	4c24      	ldr	r4, [pc, #144]	; (8016544 <mode_Running+0x45c>)
 80164b2:	2300      	movs	r3, #0
 80164b4:	934f      	str	r3, [sp, #316]	; 0x13c
 80164b6:	2301      	movs	r3, #1
 80164b8:	934e      	str	r3, [sp, #312]	; 0x138
 80164ba:	4668      	mov	r0, sp
 80164bc:	f104 0310 	add.w	r3, r4, #16
 80164c0:	f44f 729c 	mov.w	r2, #312	; 0x138
 80164c4:	4619      	mov	r1, r3
 80164c6:	f00a fba5 	bl	8020c14 <memcpy>
 80164ca:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80164ce:	eddf 1a0a 	vldr	s3, [pc, #40]	; 80164f8 <mode_Running+0x410>
 80164d2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80164fc <mode_Running+0x414>
 80164d6:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8016500 <mode_Running+0x418>
 80164da:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8016548 <mode_Running+0x460>
 80164de:	f7f8 fd1d 	bl	800ef1c <AdatiWayReturn>
		break;
 80164e2:	bf00      	nop
	}


}
 80164e4:	bf00      	nop
 80164e6:	3718      	adds	r7, #24
 80164e8:	46bd      	mov	sp, r7
 80164ea:	bdb0      	pop	{r4, r5, r7, pc}
 80164ec:	0802517c 	.word	0x0802517c
 80164f0:	08025188 	.word	0x08025188
 80164f4:	2000f444 	.word	0x2000f444
 80164f8:	453b8000 	.word	0x453b8000
 80164fc:	44fa0000 	.word	0x44fa0000
 8016500:	43c80000 	.word	0x43c80000
 8016504:	43960000 	.word	0x43960000
 8016508:	2000f6d4 	.word	0x2000f6d4
 801650c:	3e99999a 	.word	0x3e99999a
 8016510:	447a0000 	.word	0x447a0000
 8016514:	2000f81c 	.word	0x2000f81c
 8016518:	2000f964 	.word	0x2000f964
 801651c:	3f7d70a4 	.word	0x3f7d70a4
 8016520:	461c4000 	.word	0x461c4000
 8016524:	464b2000 	.word	0x464b2000
 8016528:	45480000 	.word	0x45480000
 801652c:	2000faac 	.word	0x2000faac
 8016530:	4684d000 	.word	0x4684d000
 8016534:	457a0000 	.word	0x457a0000
 8016538:	2000fbf4 	.word	0x2000fbf4
 801653c:	462be000 	.word	0x462be000
 8016540:	4541c000 	.word	0x4541c000
 8016544:	2000f58c 	.word	0x2000f58c
 8016548:	437a0000 	.word	0x437a0000

0801654c <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 801654c:	b590      	push	{r4, r7, lr}
 801654e:	b0db      	sub	sp, #364	; 0x16c
 8016550:	af52      	add	r7, sp, #328	; 0x148
 8016552:	4603      	mov	r3, r0
 8016554:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8016556:	2300      	movs	r3, #0
 8016558:	613b      	str	r3, [r7, #16]
 801655a:	2300      	movs	r3, #0
 801655c:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 801655e:	2300      	movs	r3, #0
 8016560:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8016562:	2300      	movs	r3, #0
 8016564:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8016566:	2300      	movs	r3, #0
 8016568:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 801656a:	2300      	movs	r3, #0
 801656c:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801656e:	2003      	movs	r0, #3
 8016570:	f7f1 ffc8 	bl	8008504 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016574:	2003      	movs	r0, #3
 8016576:	f7f1 ffed 	bl	8008554 <pl_R_DriveMotor_mode>
	reset_gyro();
 801657a:	f7eb fb1d 	bl	8001bb8 <reset_gyro>
	reset_speed();
 801657e:	f7ea fd51 	bl	8001024 <reset_speed>
	reset_distance();
 8016582:	f7ea fd0b 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8016586:	f7ee fe33 	bl	80051f0 <clear_Ierror>

	switch (main_modeR) {
 801658a:	79fb      	ldrb	r3, [r7, #7]
 801658c:	2b0f      	cmp	r3, #15
 801658e:	f200 832b 	bhi.w	8016be8 <mode_Tuning0+0x69c>
 8016592:	a201      	add	r2, pc, #4	; (adr r2, 8016598 <mode_Tuning0+0x4c>)
 8016594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016598:	080165d9 	.word	0x080165d9
 801659c:	08016663 	.word	0x08016663
 80165a0:	08016689 	.word	0x08016689
 80165a4:	080166af 	.word	0x080166af
 80165a8:	080166df 	.word	0x080166df
 80165ac:	0801670f 	.word	0x0801670f
 80165b0:	080167d9 	.word	0x080167d9
 80165b4:	0801682d 	.word	0x0801682d
 80165b8:	08016853 	.word	0x08016853
 80165bc:	08016877 	.word	0x08016877
 80165c0:	080168d3 	.word	0x080168d3
 80165c4:	080169d9 	.word	0x080169d9
 80165c8:	080169ff 	.word	0x080169ff
 80165cc:	08016a31 	.word	0x08016a31
 80165d0:	08016b49 	.word	0x08016b49
 80165d4:	08016b99 	.word	0x08016b99
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 80165d8:	4bd2      	ldr	r3, [pc, #840]	; (8016924 <mode_Tuning0+0x3d8>)
 80165da:	2203      	movs	r2, #3
 80165dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80165de:	2300      	movs	r3, #0
 80165e0:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 80165e2:	6978      	ldr	r0, [r7, #20]
 80165e4:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016928 <mode_Tuning0+0x3dc>
 80165e8:	eddf 1ad0 	vldr	s3, [pc, #832]	; 801692c <mode_Tuning0+0x3e0>
 80165ec:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8016930 <mode_Tuning0+0x3e4>
 80165f0:	eddf 0acf 	vldr	s1, [pc, #828]	; 8016930 <mode_Tuning0+0x3e4>
 80165f4:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016934 <mode_Tuning0+0x3e8>
 80165f8:	f7ed faea 	bl	8003bd0 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80165fc:	ed9f 2ace 	vldr	s4, [pc, #824]	; 8016938 <mode_Tuning0+0x3ec>
 8016600:	eddf 1ace 	vldr	s3, [pc, #824]	; 801693c <mode_Tuning0+0x3f0>
 8016604:	ed9f 1aca 	vldr	s2, [pc, #808]	; 8016930 <mode_Tuning0+0x3e4>
 8016608:	eddf 0ac9 	vldr	s1, [pc, #804]	; 8016930 <mode_Tuning0+0x3e4>
 801660c:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8016940 <mode_Tuning0+0x3f4>
 8016610:	f7ee f808 	bl	8004624 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8016614:	6978      	ldr	r0, [r7, #20]
 8016616:	ed9f 2acb 	vldr	s4, [pc, #812]	; 8016944 <mode_Tuning0+0x3f8>
 801661a:	eddf 1acb 	vldr	s3, [pc, #812]	; 8016948 <mode_Tuning0+0x3fc>
 801661e:	ed9f 1ac4 	vldr	s2, [pc, #784]	; 8016930 <mode_Tuning0+0x3e4>
 8016622:	eddf 0ac3 	vldr	s1, [pc, #780]	; 8016930 <mode_Tuning0+0x3e4>
 8016626:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8016934 <mode_Tuning0+0x3e8>
 801662a:	f7ed fad1 	bl	8003bd0 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 801662e:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016938 <mode_Tuning0+0x3ec>
 8016632:	eddf 1ac2 	vldr	s3, [pc, #776]	; 801693c <mode_Tuning0+0x3f0>
 8016636:	ed9f 1abe 	vldr	s2, [pc, #760]	; 8016930 <mode_Tuning0+0x3e4>
 801663a:	eddf 0abd 	vldr	s1, [pc, #756]	; 8016930 <mode_Tuning0+0x3e4>
 801663e:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8016940 <mode_Tuning0+0x3f4>
 8016642:	f7ed ffef 	bl	8004624 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8016646:	6978      	ldr	r0, [r7, #20]
 8016648:	ed9f 2ac0 	vldr	s4, [pc, #768]	; 801694c <mode_Tuning0+0x400>
 801664c:	eddf 1ac0 	vldr	s3, [pc, #768]	; 8016950 <mode_Tuning0+0x404>
 8016650:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8016930 <mode_Tuning0+0x3e4>
 8016654:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8016930 <mode_Tuning0+0x3e4>
 8016658:	ed9f 0ab6 	vldr	s0, [pc, #728]	; 8016934 <mode_Tuning0+0x3e8>
 801665c:	f7ed fab8 	bl	8003bd0 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8016660:	e2c2      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8016662:	4bb0      	ldr	r3, [pc, #704]	; (8016924 <mode_Tuning0+0x3d8>)
 8016664:	2205      	movs	r2, #5
 8016666:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016668:	2300      	movs	r3, #0
 801666a:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 801666c:	6978      	ldr	r0, [r7, #20]
 801666e:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016954 <mode_Tuning0+0x408>
 8016672:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8016958 <mode_Tuning0+0x40c>
 8016676:	ed9f 1aae 	vldr	s2, [pc, #696]	; 8016930 <mode_Tuning0+0x3e4>
 801667a:	eddf 0aad 	vldr	s1, [pc, #692]	; 8016930 <mode_Tuning0+0x3e4>
 801667e:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 801695c <mode_Tuning0+0x410>
 8016682:	f7ed faa5 	bl	8003bd0 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8016686:	e2af      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 2://壁制御
			record_mode=6;
 8016688:	4ba6      	ldr	r3, [pc, #664]	; (8016924 <mode_Tuning0+0x3d8>)
 801668a:	2206      	movs	r2, #6
 801668c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801668e:	2301      	movs	r3, #1
 8016690:	753b      	strb	r3, [r7, #20]
			straight_table2(90*15, 0, 0, 300, 6000,mode);
 8016692:	6978      	ldr	r0, [r7, #20]
 8016694:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 8016960 <mode_Tuning0+0x414>
 8016698:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8016964 <mode_Tuning0+0x418>
 801669c:	ed9f 1aa4 	vldr	s2, [pc, #656]	; 8016930 <mode_Tuning0+0x3e4>
 80166a0:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8016930 <mode_Tuning0+0x3e4>
 80166a4:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8016968 <mode_Tuning0+0x41c>
 80166a8:	f7ed fa92 	bl	8003bd0 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 80166ac:	e29c      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 80166ae:	4caf      	ldr	r4, [pc, #700]	; (801696c <mode_Tuning0+0x420>)
 80166b0:	2300      	movs	r3, #0
 80166b2:	9351      	str	r3, [sp, #324]	; 0x144
 80166b4:	2300      	movs	r3, #0
 80166b6:	9350      	str	r3, [sp, #320]	; 0x140
 80166b8:	2300      	movs	r3, #0
 80166ba:	934f      	str	r3, [sp, #316]	; 0x13c
 80166bc:	2300      	movs	r3, #0
 80166be:	934e      	str	r3, [sp, #312]	; 0x138
 80166c0:	4668      	mov	r0, sp
 80166c2:	f104 0310 	add.w	r3, r4, #16
 80166c6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80166ca:	4619      	mov	r1, r3
 80166cc:	f00a faa2 	bl	8020c14 <memcpy>
 80166d0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80166d4:	ed9f 0a96 	vldr	s0, [pc, #600]	; 8016930 <mode_Tuning0+0x3e4>
 80166d8:	f7f7 ffba 	bl	800e650 <testturning>
		break;
 80166dc:	e284      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 80166de:	4ca3      	ldr	r4, [pc, #652]	; (801696c <mode_Tuning0+0x420>)
 80166e0:	2300      	movs	r3, #0
 80166e2:	9351      	str	r3, [sp, #324]	; 0x144
 80166e4:	2300      	movs	r3, #0
 80166e6:	9350      	str	r3, [sp, #320]	; 0x140
 80166e8:	2300      	movs	r3, #0
 80166ea:	934f      	str	r3, [sp, #316]	; 0x13c
 80166ec:	2301      	movs	r3, #1
 80166ee:	934e      	str	r3, [sp, #312]	; 0x138
 80166f0:	4668      	mov	r0, sp
 80166f2:	f104 0310 	add.w	r3, r4, #16
 80166f6:	f44f 729c 	mov.w	r2, #312	; 0x138
 80166fa:	4619      	mov	r1, r3
 80166fc:	f00a fa8a 	bl	8020c14 <memcpy>
 8016700:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8016704:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016930 <mode_Tuning0+0x3e4>
 8016708:	f7f7 ffa2 	bl	800e650 <testturning>
		break;
 801670c:	e26c      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 5://直進(制御なし)
			highspeed_mode = 1;
 801670e:	4b98      	ldr	r3, [pc, #608]	; (8016970 <mode_Tuning0+0x424>)
 8016710:	2201      	movs	r2, #1
 8016712:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016714:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8016974 <mode_Tuning0+0x428>
 8016718:	f7f1 ff88 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 801671c:	f7f1 ff72 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(600);
 8016720:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016724:	f002 ffa4 	bl	8019670 <HAL_Delay>
			reset_gyro();
 8016728:	f7eb fa46 	bl	8001bb8 <reset_gyro>
			reset_speed();
 801672c:	f7ea fc7a 	bl	8001024 <reset_speed>
			reset_distance();
 8016730:	f7ea fc34 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016734:	f7ee fd5c 	bl	80051f0 <clear_Ierror>
			record_mode=6;
 8016738:	4b7a      	ldr	r3, [pc, #488]	; (8016924 <mode_Tuning0+0x3d8>)
 801673a:	2206      	movs	r2, #6
 801673c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801673e:	2301      	movs	r3, #1
 8016740:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8016742:	4b8d      	ldr	r3, [pc, #564]	; (8016978 <mode_Tuning0+0x42c>)
 8016744:	f04f 0200 	mov.w	r2, #0
 8016748:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 801674a:	6978      	ldr	r0, [r7, #20]
 801674c:	ed9f 2a8b 	vldr	s4, [pc, #556]	; 801697c <mode_Tuning0+0x430>
 8016750:	eddf 1a8b 	vldr	s3, [pc, #556]	; 8016980 <mode_Tuning0+0x434>
 8016754:	ed9f 1a76 	vldr	s2, [pc, #472]	; 8016930 <mode_Tuning0+0x3e4>
 8016758:	eddf 0a75 	vldr	s1, [pc, #468]	; 8016930 <mode_Tuning0+0x3e4>
 801675c:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8016984 <mode_Tuning0+0x438>
 8016760:	f7ed fa36 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8016764:	2300      	movs	r3, #0
 8016766:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=0;
 8016768:	4b83      	ldr	r3, [pc, #524]	; (8016978 <mode_Tuning0+0x42c>)
 801676a:	f04f 0200 	mov.w	r2, #0
 801676e:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 8016770:	6978      	ldr	r0, [r7, #20]
 8016772:	ed9f 2a85 	vldr	s4, [pc, #532]	; 8016988 <mode_Tuning0+0x43c>
 8016776:	eddf 1a85 	vldr	s3, [pc, #532]	; 801698c <mode_Tuning0+0x440>
 801677a:	ed9f 1a6d 	vldr	s2, [pc, #436]	; 8016930 <mode_Tuning0+0x3e4>
 801677e:	eddf 0a6c 	vldr	s1, [pc, #432]	; 8016930 <mode_Tuning0+0x3e4>
 8016782:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8016990 <mode_Tuning0+0x444>
 8016786:	f7ed fa23 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=1;
 801678a:	2301      	movs	r3, #1
 801678c:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 801678e:	4b7a      	ldr	r3, [pc, #488]	; (8016978 <mode_Tuning0+0x42c>)
 8016790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8016794:	601a      	str	r2, [r3, #0]
			straight_table2(90*8, 0, 0, 2800, 18000,mode);
 8016796:	6978      	ldr	r0, [r7, #20]
 8016798:	ed9f 2a78 	vldr	s4, [pc, #480]	; 801697c <mode_Tuning0+0x430>
 801679c:	eddf 1a78 	vldr	s3, [pc, #480]	; 8016980 <mode_Tuning0+0x434>
 80167a0:	ed9f 1a63 	vldr	s2, [pc, #396]	; 8016930 <mode_Tuning0+0x3e4>
 80167a4:	eddf 0a62 	vldr	s1, [pc, #392]	; 8016930 <mode_Tuning0+0x3e4>
 80167a8:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8016984 <mode_Tuning0+0x438>
 80167ac:	f7ed fa10 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 80167b0:	2300      	movs	r3, #0
 80167b2:	753b      	strb	r3, [r7, #20]
			theta_comp_gain=1;
 80167b4:	4b70      	ldr	r3, [pc, #448]	; (8016978 <mode_Tuning0+0x42c>)
 80167b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80167ba:	601a      	str	r2, [r3, #0]
			straight_table2(-90*8, 0, 0, -2000, 14000,mode);
 80167bc:	6978      	ldr	r0, [r7, #20]
 80167be:	ed9f 2a72 	vldr	s4, [pc, #456]	; 8016988 <mode_Tuning0+0x43c>
 80167c2:	eddf 1a72 	vldr	s3, [pc, #456]	; 801698c <mode_Tuning0+0x440>
 80167c6:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 8016930 <mode_Tuning0+0x3e4>
 80167ca:	eddf 0a59 	vldr	s1, [pc, #356]	; 8016930 <mode_Tuning0+0x3e4>
 80167ce:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8016990 <mode_Tuning0+0x444>
 80167d2:	f7ed f9fd 	bl	8003bd0 <straight_table2>

		break;
 80167d6:	e207      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 6://斜め直進(制御あり)
			highspeed_mode = 1;
 80167d8:	4b65      	ldr	r3, [pc, #404]	; (8016970 <mode_Tuning0+0x424>)
 80167da:	2201      	movs	r2, #1
 80167dc:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80167de:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016974 <mode_Tuning0+0x428>
 80167e2:	f7f1 ff23 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 80167e6:	f7f1 ff0d 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(600);
 80167ea:	f44f 7016 	mov.w	r0, #600	; 0x258
 80167ee:	f002 ff3f 	bl	8019670 <HAL_Delay>
			reset_gyro();
 80167f2:	f7eb f9e1 	bl	8001bb8 <reset_gyro>
			reset_speed();
 80167f6:	f7ea fc15 	bl	8001024 <reset_speed>
			reset_distance();
 80167fa:	f7ea fbcf 	bl	8000f9c <reset_distance>
			clear_Ierror();
 80167fe:	f7ee fcf7 	bl	80051f0 <clear_Ierror>
			record_mode=3;
 8016802:	4b48      	ldr	r3, [pc, #288]	; (8016924 <mode_Tuning0+0x3d8>)
 8016804:	2203      	movs	r2, #3
 8016806:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016808:	2301      	movs	r3, #1
 801680a:	753b      	strb	r3, [r7, #20]
			straight_table_max(90*8, 0, 0, 4000, 17000,40000,mode);
 801680c:	6978      	ldr	r0, [r7, #20]
 801680e:	eddf 2a61 	vldr	s5, [pc, #388]	; 8016994 <mode_Tuning0+0x448>
 8016812:	ed9f 2a61 	vldr	s4, [pc, #388]	; 8016998 <mode_Tuning0+0x44c>
 8016816:	eddf 1a48 	vldr	s3, [pc, #288]	; 8016938 <mode_Tuning0+0x3ec>
 801681a:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8016930 <mode_Tuning0+0x3e4>
 801681e:	eddf 0a44 	vldr	s1, [pc, #272]	; 8016930 <mode_Tuning0+0x3e4>
 8016822:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8016984 <mode_Tuning0+0x438>
 8016826:	f7ed f89f 	bl	8003968 <straight_table_max>
		break;
 801682a:	e1dd      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 801682c:	4b3d      	ldr	r3, [pc, #244]	; (8016924 <mode_Tuning0+0x3d8>)
 801682e:	2207      	movs	r2, #7
 8016830:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016832:	2303      	movs	r3, #3
 8016834:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8016836:	6978      	ldr	r0, [r7, #20]
 8016838:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8016960 <mode_Tuning0+0x414>
 801683c:	eddf 1a42 	vldr	s3, [pc, #264]	; 8016948 <mode_Tuning0+0x3fc>
 8016840:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8016930 <mode_Tuning0+0x3e4>
 8016844:	eddf 0a3a 	vldr	s1, [pc, #232]	; 8016930 <mode_Tuning0+0x3e4>
 8016848:	ed9f 0a54 	vldr	s0, [pc, #336]	; 801699c <mode_Tuning0+0x450>
 801684c:	f7ed f9c0 	bl	8003bd0 <straight_table2>
		break;
 8016850:	e1ca      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 8://宴会芸
			record_mode=2;
 8016852:	4b34      	ldr	r3, [pc, #208]	; (8016924 <mode_Tuning0+0x3d8>)
 8016854:	2202      	movs	r2, #2
 8016856:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8016858:	2001      	movs	r0, #1
 801685a:	f7f1 f9b9 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801685e:	2001      	movs	r0, #1
 8016860:	f7f1 f9c8 	bl	8007bf4 <pl_l_blue_LED>
			no_angle();
 8016864:	f7ee f8fc 	bl	8004a60 <no_angle>
			pl_r_blue_LED(OFF);
 8016868:	2000      	movs	r0, #0
 801686a:	f7f1 f9b1 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801686e:	2000      	movs	r0, #0
 8016870:	f7f1 f9c0 	bl	8007bf4 <pl_l_blue_LED>
		break;
 8016874:	e1b8      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 9://システム同定enc

			pl_r_blue_LED(ON);
 8016876:	2001      	movs	r0, #1
 8016878:	f7f1 f9aa 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 801687c:	2001      	movs	r0, #1
 801687e:	f7f1 f9b9 	bl	8007bf4 <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8016882:	f107 020c 	add.w	r2, r7, #12
 8016886:	f107 0310 	add.w	r3, r7, #16
 801688a:	4611      	mov	r1, r2
 801688c:	4618      	mov	r0, r3
 801688e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016892:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8016896:	f7eb fcf5 	bl	8002284 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 801689a:	693b      	ldr	r3, [r7, #16]
 801689c:	68fa      	ldr	r2, [r7, #12]
 801689e:	4611      	mov	r1, r2
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7f1 fe99 	bl	80085d8 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 80168a6:	f7f1 fe7b 	bl	80085a0 <pl_DriveMotor_start>
			wait_ms(3000);
 80168aa:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80168ae:	f7f2 f90b 	bl	8008ac8 <wait_ms>
			record_mode=11;
 80168b2:	4b1c      	ldr	r3, [pc, #112]	; (8016924 <mode_Tuning0+0x3d8>)
 80168b4:	220b      	movs	r2, #11
 80168b6:	701a      	strb	r2, [r3, #0]
			wait_ms(2000);
 80168b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80168bc:	f7f2 f904 	bl	8008ac8 <wait_ms>
//				wait_ms(1);
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
			pl_DriveMotor_stop();
 80168c0:	f7f1 fe7c 	bl	80085bc <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80168c4:	2000      	movs	r0, #0
 80168c6:	f7f1 f983 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80168ca:	2000      	movs	r0, #0
 80168cc:	f7f1 f992 	bl	8007bf4 <pl_l_blue_LED>
		break;
 80168d0:	e18a      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 10://システム同定gyro
			record_mode=6;
 80168d2:	4b14      	ldr	r3, [pc, #80]	; (8016924 <mode_Tuning0+0x3d8>)
 80168d4:	2206      	movs	r2, #6
 80168d6:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 80168d8:	2001      	movs	r0, #1
 80168da:	f7f1 f979 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80168de:	2001      	movs	r0, #1
 80168e0:	f7f1 f988 	bl	8007bf4 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 80168e4:	f107 020c 	add.w	r2, r7, #12
 80168e8:	f107 0310 	add.w	r3, r7, #16
 80168ec:	4611      	mov	r1, r2
 80168ee:	4618      	mov	r0, r3
 80168f0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80168f4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80168f8:	f7eb fcc4 	bl	8002284 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 80168fc:	693b      	ldr	r3, [r7, #16]
 80168fe:	68fa      	ldr	r2, [r7, #12]
 8016900:	4611      	mov	r1, r2
 8016902:	4618      	mov	r0, r3
 8016904:	f7f1 fe68 	bl	80085d8 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8016908:	f7f1 fe4a 	bl	80085a0 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801690c:	e04a      	b.n	80169a4 <mode_Tuning0+0x458>
				wait_ms(1);
 801690e:	2001      	movs	r0, #1
 8016910:	f7f2 f8da 	bl	8008ac8 <wait_ms>
				if(record_rupe_flag==1){
 8016914:	4b22      	ldr	r3, [pc, #136]	; (80169a0 <mode_Tuning0+0x454>)
 8016916:	781b      	ldrb	r3, [r3, #0]
 8016918:	2b01      	cmp	r3, #1
 801691a:	d143      	bne.n	80169a4 <mode_Tuning0+0x458>
					record_mode=0;
 801691c:	4b01      	ldr	r3, [pc, #4]	; (8016924 <mode_Tuning0+0x3d8>)
 801691e:	2200      	movs	r2, #0
 8016920:	701a      	strb	r2, [r3, #0]
					break;
 8016922:	e050      	b.n	80169c6 <mode_Tuning0+0x47a>
 8016924:	2000f284 	.word	0x2000f284
 8016928:	464b2000 	.word	0x464b2000
 801692c:	44c80000 	.word	0x44c80000
 8016930:	00000000 	.word	0x00000000
 8016934:	44070000 	.word	0x44070000
 8016938:	457a0000 	.word	0x457a0000
 801693c:	43c80000 	.word	0x43c80000
 8016940:	43340000 	.word	0x43340000
 8016944:	466a6000 	.word	0x466a6000
 8016948:	44fa0000 	.word	0x44fa0000
 801694c:	469c4000 	.word	0x469c4000
 8016950:	45160000 	.word	0x45160000
 8016954:	447a0000 	.word	0x447a0000
 8016958:	c3160000 	.word	0xc3160000
 801695c:	c1a40000 	.word	0xc1a40000
 8016960:	45bb8000 	.word	0x45bb8000
 8016964:	43960000 	.word	0x43960000
 8016968:	44a8c000 	.word	0x44a8c000
 801696c:	2000f444 	.word	0x2000f444
 8016970:	20000814 	.word	0x20000814
 8016974:	3f7d70a4 	.word	0x3f7d70a4
 8016978:	20000264 	.word	0x20000264
 801697c:	468ca000 	.word	0x468ca000
 8016980:	452f0000 	.word	0x452f0000
 8016984:	44340000 	.word	0x44340000
 8016988:	465ac000 	.word	0x465ac000
 801698c:	c4fa0000 	.word	0xc4fa0000
 8016990:	c4340000 	.word	0xc4340000
 8016994:	471c4000 	.word	0x471c4000
 8016998:	4684d000 	.word	0x4684d000
 801699c:	443eeb39 	.word	0x443eeb39
 80169a0:	2000f290 	.word	0x2000f290
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80169a4:	4bad      	ldr	r3, [pc, #692]	; (8016c5c <mode_Tuning0+0x710>)
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169ac:	ddaf      	ble.n	801690e <mode_Tuning0+0x3c2>
 80169ae:	4bab      	ldr	r3, [pc, #684]	; (8016c5c <mode_Tuning0+0x710>)
 80169b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80169b4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169b8:	dda9      	ble.n	801690e <mode_Tuning0+0x3c2>
 80169ba:	4ba8      	ldr	r3, [pc, #672]	; (8016c5c <mode_Tuning0+0x710>)
 80169bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80169c0:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80169c4:	dda3      	ble.n	801690e <mode_Tuning0+0x3c2>
				}
			}
			pl_DriveMotor_stop();
 80169c6:	f7f1 fdf9 	bl	80085bc <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 80169ca:	2000      	movs	r0, #0
 80169cc:	f7f1 f900 	bl	8007bd0 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80169d0:	2000      	movs	r0, #0
 80169d2:	f7f1 f90f 	bl	8007bf4 <pl_l_blue_LED>
		break;
 80169d6:	e107      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 11:
		record_mode=1;
 80169d8:	4ba1      	ldr	r3, [pc, #644]	; (8016c60 <mode_Tuning0+0x714>)
 80169da:	2201      	movs	r2, #1
 80169dc:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 80169de:	2300      	movs	r3, #0
 80169e0:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 80169e2:	6978      	ldr	r0, [r7, #20]
 80169e4:	ed9f 2a9f 	vldr	s4, [pc, #636]	; 8016c64 <mode_Tuning0+0x718>
 80169e8:	eddf 1a9f 	vldr	s3, [pc, #636]	; 8016c68 <mode_Tuning0+0x71c>
 80169ec:	ed9f 1a9f 	vldr	s2, [pc, #636]	; 8016c6c <mode_Tuning0+0x720>
 80169f0:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8016c6c <mode_Tuning0+0x720>
 80169f4:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8016c70 <mode_Tuning0+0x724>
 80169f8:	f7ed f8ea 	bl	8003bd0 <straight_table2>
		break;
 80169fc:	e0f4      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 12:
		record_mode=2;
 80169fe:	4b98      	ldr	r3, [pc, #608]	; (8016c60 <mode_Tuning0+0x714>)
 8016a00:	2202      	movs	r2, #2
 8016a02:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016a04:	2300      	movs	r3, #0
 8016a06:	61fb      	str	r3, [r7, #28]
 8016a08:	e00e      	b.n	8016a28 <mode_Tuning0+0x4dc>
		turning_table2(90, 0, 0, 400, 3000);
 8016a0a:	ed9f 2a9a 	vldr	s4, [pc, #616]	; 8016c74 <mode_Tuning0+0x728>
 8016a0e:	eddf 1a9a 	vldr	s3, [pc, #616]	; 8016c78 <mode_Tuning0+0x72c>
 8016a12:	ed9f 1a96 	vldr	s2, [pc, #600]	; 8016c6c <mode_Tuning0+0x720>
 8016a16:	eddf 0a95 	vldr	s1, [pc, #596]	; 8016c6c <mode_Tuning0+0x720>
 8016a1a:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8016c7c <mode_Tuning0+0x730>
 8016a1e:	f7ed fe01 	bl	8004624 <turning_table2>
		for(int i=0;i<40;i++){
 8016a22:	69fb      	ldr	r3, [r7, #28]
 8016a24:	3301      	adds	r3, #1
 8016a26:	61fb      	str	r3, [r7, #28]
 8016a28:	69fb      	ldr	r3, [r7, #28]
 8016a2a:	2b27      	cmp	r3, #39	; 0x27
 8016a2c:	dded      	ble.n	8016a0a <mode_Tuning0+0x4be>
		}
		break;
 8016a2e:	e0db      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 13:
			record_mode=2;
 8016a30:	4b8b      	ldr	r3, [pc, #556]	; (8016c60 <mode_Tuning0+0x714>)
 8016a32:	2202      	movs	r2, #2
 8016a34:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016a36:	2301      	movs	r3, #1
 8016a38:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016a3a:	4b91      	ldr	r3, [pc, #580]	; (8016c80 <mode_Tuning0+0x734>)
 8016a3c:	edd3 6a02 	vldr	s13, [r3, #8]
 8016a40:	4b8f      	ldr	r3, [pc, #572]	; (8016c80 <mode_Tuning0+0x734>)
 8016a42:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016a46:	4b8e      	ldr	r3, [pc, #568]	; (8016c80 <mode_Tuning0+0x734>)
 8016a48:	ed93 7a02 	vldr	s14, [r3, #8]
 8016a4c:	4b8c      	ldr	r3, [pc, #560]	; (8016c80 <mode_Tuning0+0x734>)
 8016a4e:	edd3 7a02 	vldr	s15, [r3, #8]
 8016a52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016a56:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016a5a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016a5e:	eddf 5a89 	vldr	s11, [pc, #548]	; 8016c84 <mode_Tuning0+0x738>
 8016a62:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016a66:	6978      	ldr	r0, [r7, #20]
 8016a68:	eeb0 2a47 	vmov.f32	s4, s14
 8016a6c:	eef0 1a46 	vmov.f32	s3, s12
 8016a70:	eeb0 1a66 	vmov.f32	s2, s13
 8016a74:	eddf 0a7d 	vldr	s1, [pc, #500]	; 8016c6c <mode_Tuning0+0x720>
 8016a78:	ed9f 0a83 	vldr	s0, [pc, #524]	; 8016c88 <mode_Tuning0+0x73c>
 8016a7c:	f7ed f8a8 	bl	8003bd0 <straight_table2>
			for(int i=0;i<40;i++){
 8016a80:	2300      	movs	r3, #0
 8016a82:	61bb      	str	r3, [r7, #24]
 8016a84:	e037      	b.n	8016af6 <mode_Tuning0+0x5aa>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016a86:	4b7e      	ldr	r3, [pc, #504]	; (8016c80 <mode_Tuning0+0x734>)
 8016a88:	edd3 6a02 	vldr	s13, [r3, #8]
 8016a8c:	4b7c      	ldr	r3, [pc, #496]	; (8016c80 <mode_Tuning0+0x734>)
 8016a8e:	ed93 6a02 	vldr	s12, [r3, #8]
 8016a92:	4b7b      	ldr	r3, [pc, #492]	; (8016c80 <mode_Tuning0+0x734>)
 8016a94:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016a98:	4b79      	ldr	r3, [pc, #484]	; (8016c80 <mode_Tuning0+0x734>)
 8016a9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8016a9e:	4b78      	ldr	r3, [pc, #480]	; (8016c80 <mode_Tuning0+0x734>)
 8016aa0:	edd3 7a02 	vldr	s15, [r3, #8]
 8016aa4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016aa8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016aac:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016ab0:	ed9f 5a74 	vldr	s10, [pc, #464]	; 8016c84 <mode_Tuning0+0x738>
 8016ab4:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8016ab8:	6978      	ldr	r0, [r7, #20]
 8016aba:	eeb0 2a47 	vmov.f32	s4, s14
 8016abe:	eef0 1a65 	vmov.f32	s3, s11
 8016ac2:	eeb0 1a46 	vmov.f32	s2, s12
 8016ac6:	eef0 0a66 	vmov.f32	s1, s13
 8016aca:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016ace:	f7ed f87f 	bl	8003bd0 <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 8016ad2:	4b6b      	ldr	r3, [pc, #428]	; (8016c80 <mode_Tuning0+0x734>)
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	9203      	str	r2, [sp, #12]
 8016ad8:	2200      	movs	r2, #0
 8016ada:	9202      	str	r2, [sp, #8]
 8016adc:	2200      	movs	r2, #0
 8016ade:	9201      	str	r2, [sp, #4]
 8016ae0:	699a      	ldr	r2, [r3, #24]
 8016ae2:	9200      	str	r2, [sp, #0]
 8016ae4:	3308      	adds	r3, #8
 8016ae6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ae8:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8016c68 <mode_Tuning0+0x71c>
 8016aec:	f7f3 ff6c 	bl	800a9c8 <slalomR>
			for(int i=0;i<40;i++){
 8016af0:	69bb      	ldr	r3, [r7, #24]
 8016af2:	3301      	adds	r3, #1
 8016af4:	61bb      	str	r3, [r7, #24]
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	2b27      	cmp	r3, #39	; 0x27
 8016afa:	ddc4      	ble.n	8016a86 <mode_Tuning0+0x53a>
			}
			mode.WallControlMode=0;
 8016afc:	2300      	movs	r3, #0
 8016afe:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016b00:	4b5f      	ldr	r3, [pc, #380]	; (8016c80 <mode_Tuning0+0x734>)
 8016b02:	edd3 6a02 	vldr	s13, [r3, #8]
 8016b06:	4b5e      	ldr	r3, [pc, #376]	; (8016c80 <mode_Tuning0+0x734>)
 8016b08:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016b0c:	4b5c      	ldr	r3, [pc, #368]	; (8016c80 <mode_Tuning0+0x734>)
 8016b0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8016b12:	4b5b      	ldr	r3, [pc, #364]	; (8016c80 <mode_Tuning0+0x734>)
 8016b14:	edd3 7a02 	vldr	s15, [r3, #8]
 8016b18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016b1c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016b20:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 8016b24:	eddf 5a57 	vldr	s11, [pc, #348]	; 8016c84 <mode_Tuning0+0x738>
 8016b28:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8016b2c:	6978      	ldr	r0, [r7, #20]
 8016b2e:	eeb0 2a47 	vmov.f32	s4, s14
 8016b32:	eef0 1a46 	vmov.f32	s3, s12
 8016b36:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 8016c6c <mode_Tuning0+0x720>
 8016b3a:	eef0 0a66 	vmov.f32	s1, s13
 8016b3e:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8016c84 <mode_Tuning0+0x738>
 8016b42:	f7ed f845 	bl	8003bd0 <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 8016b46:	e04f      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 8016b48:	4b50      	ldr	r3, [pc, #320]	; (8016c8c <mode_Tuning0+0x740>)
 8016b4a:	2201      	movs	r2, #1
 8016b4c:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016b4e:	ed9f 0a50 	vldr	s0, [pc, #320]	; 8016c90 <mode_Tuning0+0x744>
 8016b52:	f7f1 fd6b 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016b56:	f7f1 fd55 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(600);
 8016b5a:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016b5e:	f002 fd87 	bl	8019670 <HAL_Delay>
			reset_gyro();
 8016b62:	f7eb f829 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8016b66:	f7ea fa5d 	bl	8001024 <reset_speed>
			reset_distance();
 8016b6a:	f7ea fa17 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016b6e:	f7ee fb3f 	bl	80051f0 <clear_Ierror>
			record_mode=3;
 8016b72:	4b3b      	ldr	r3, [pc, #236]	; (8016c60 <mode_Tuning0+0x714>)
 8016b74:	2203      	movs	r2, #3
 8016b76:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016b78:	2301      	movs	r3, #1
 8016b7a:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 4000, 17000,mode);
 8016b7c:	6978      	ldr	r0, [r7, #20]
 8016b7e:	ed9f 2a45 	vldr	s4, [pc, #276]	; 8016c94 <mode_Tuning0+0x748>
 8016b82:	eddf 1a45 	vldr	s3, [pc, #276]	; 8016c98 <mode_Tuning0+0x74c>
 8016b86:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8016c6c <mode_Tuning0+0x720>
 8016b8a:	eddf 0a38 	vldr	s1, [pc, #224]	; 8016c6c <mode_Tuning0+0x720>
 8016b8e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8016c9c <mode_Tuning0+0x750>
 8016b92:	f7ed f81d 	bl	8003bd0 <straight_table2>
		break;
 8016b96:	e027      	b.n	8016be8 <mode_Tuning0+0x69c>
		case 15:
			highspeed_mode = 1;
 8016b98:	4b3c      	ldr	r3, [pc, #240]	; (8016c8c <mode_Tuning0+0x740>)
 8016b9a:	2201      	movs	r2, #1
 8016b9c:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 8016b9e:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016c90 <mode_Tuning0+0x744>
 8016ba2:	f7f1 fd43 	bl	800862c <pl_FunMotor_duty>
			pl_FunMotor_start();
 8016ba6:	f7f1 fd2d 	bl	8008604 <pl_FunMotor_start>
			HAL_Delay(600);
 8016baa:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016bae:	f002 fd5f 	bl	8019670 <HAL_Delay>
			reset_gyro();
 8016bb2:	f7eb f801 	bl	8001bb8 <reset_gyro>
			reset_speed();
 8016bb6:	f7ea fa35 	bl	8001024 <reset_speed>
			reset_distance();
 8016bba:	f7ea f9ef 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016bbe:	f7ee fb17 	bl	80051f0 <clear_Ierror>
			record_mode=3;
 8016bc2:	4b27      	ldr	r3, [pc, #156]	; (8016c60 <mode_Tuning0+0x714>)
 8016bc4:	2203      	movs	r2, #3
 8016bc6:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=3;
 8016bc8:	2303      	movs	r3, #3
 8016bca:	753b      	strb	r3, [r7, #20]
			straight_table2(90*7.5*sqrt(2), 0, 0, 4000, 20000,mode);
 8016bcc:	6978      	ldr	r0, [r7, #20]
 8016bce:	ed9f 2a34 	vldr	s4, [pc, #208]	; 8016ca0 <mode_Tuning0+0x754>
 8016bd2:	eddf 1a31 	vldr	s3, [pc, #196]	; 8016c98 <mode_Tuning0+0x74c>
 8016bd6:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8016c6c <mode_Tuning0+0x720>
 8016bda:	eddf 0a24 	vldr	s1, [pc, #144]	; 8016c6c <mode_Tuning0+0x720>
 8016bde:	ed9f 0a31 	vldr	s0, [pc, #196]	; 8016ca4 <mode_Tuning0+0x758>
 8016be2:	f7ec fff5 	bl	8003bd0 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8016be6:	bf00      	nop
	}
	record_mode=0;
 8016be8:	4b1d      	ldr	r3, [pc, #116]	; (8016c60 <mode_Tuning0+0x714>)
 8016bea:	2200      	movs	r2, #0
 8016bec:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016bee:	2003      	movs	r0, #3
 8016bf0:	f7f1 fcb0 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016bf4:	2003      	movs	r0, #3
 8016bf6:	f7f1 fc85 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016bfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016bfe:	f7f1 ffa7 	bl	8008b50 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016c02:	f7f1 fd09 	bl	8008618 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8016c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016c0a:	f7f1 ffa1 	bl	8008b50 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016c0e:	2000      	movs	r0, #0
 8016c10:	f7f1 fc6e 	bl	80084f0 <pl_DriveMotor_standby>
	record_mode=0;
 8016c14:	4b12      	ldr	r3, [pc, #72]	; (8016c60 <mode_Tuning0+0x714>)
 8016c16:	2200      	movs	r2, #0
 8016c18:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c1a:	e002      	b.n	8016c22 <mode_Tuning0+0x6d6>
		HAL_Delay(1);
 8016c1c:	2001      	movs	r0, #1
 8016c1e:	f002 fd27 	bl	8019670 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c22:	4b0e      	ldr	r3, [pc, #56]	; (8016c5c <mode_Tuning0+0x710>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c2a:	ddf7      	ble.n	8016c1c <mode_Tuning0+0x6d0>
 8016c2c:	4b0b      	ldr	r3, [pc, #44]	; (8016c5c <mode_Tuning0+0x710>)
 8016c2e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016c32:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c36:	ddf1      	ble.n	8016c1c <mode_Tuning0+0x6d0>
 8016c38:	4b08      	ldr	r3, [pc, #32]	; (8016c5c <mode_Tuning0+0x710>)
 8016c3a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016c3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c42:	ddeb      	ble.n	8016c1c <mode_Tuning0+0x6d0>
	}
	pl_r_blue_LED(ON);
 8016c44:	2001      	movs	r0, #1
 8016c46:	f7f0 ffc3 	bl	8007bd0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016c4a:	2001      	movs	r0, #1
 8016c4c:	f7f0 ffd2 	bl	8007bf4 <pl_l_blue_LED>
	record_print();
 8016c50:	f000 fd52 	bl	80176f8 <record_print>



}
 8016c54:	bf00      	nop
 8016c56:	3724      	adds	r7, #36	; 0x24
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd90      	pop	{r4, r7, pc}
 8016c5c:	200002bc 	.word	0x200002bc
 8016c60:	2000f284 	.word	0x2000f284
 8016c64:	45bb8000 	.word	0x45bb8000
 8016c68:	43960000 	.word	0x43960000
 8016c6c:	00000000 	.word	0x00000000
 8016c70:	420a0000 	.word	0x420a0000
 8016c74:	453b8000 	.word	0x453b8000
 8016c78:	43c80000 	.word	0x43c80000
 8016c7c:	42b40000 	.word	0x42b40000
 8016c80:	2000f444 	.word	0x2000f444
 8016c84:	42340000 	.word	0x42340000
 8016c88:	431b8000 	.word	0x431b8000
 8016c8c:	20000814 	.word	0x20000814
 8016c90:	3f7d70a4 	.word	0x3f7d70a4
 8016c94:	4684d000 	.word	0x4684d000
 8016c98:	457a0000 	.word	0x457a0000
 8016c9c:	44340000 	.word	0x44340000
 8016ca0:	469c4000 	.word	0x469c4000
 8016ca4:	446ea607 	.word	0x446ea607

08016ca8 <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	b084      	sub	sp, #16
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	4603      	mov	r3, r0
 8016cb0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016cb2:	2300      	movs	r3, #0
 8016cb4:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8016cb6:	2300      	movs	r3, #0
 8016cb8:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 8016cba:	2300      	movs	r3, #0
 8016cbc:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016cc2:	2001      	movs	r0, #1
 8016cc4:	f7f1 fc14 	bl	80084f0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016cc8:	2003      	movs	r0, #3
 8016cca:	f7f1 fc1b 	bl	8008504 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016cce:	2003      	movs	r0, #3
 8016cd0:	f7f1 fc40 	bl	8008554 <pl_R_DriveMotor_mode>
	reset_gyro();
 8016cd4:	f7ea ff70 	bl	8001bb8 <reset_gyro>
	reset_speed();
 8016cd8:	f7ea f9a4 	bl	8001024 <reset_speed>
	clear_Ierror();
 8016cdc:	f7ee fa88 	bl	80051f0 <clear_Ierror>

	switch (main_modeR) {
 8016ce0:	79fb      	ldrb	r3, [r7, #7]
 8016ce2:	2b0f      	cmp	r3, #15
 8016ce4:	f200 81b0 	bhi.w	8017048 <mode_WallSensorTuning+0x3a0>
 8016ce8:	a201      	add	r2, pc, #4	; (adr r2, 8016cf0 <mode_WallSensorTuning+0x48>)
 8016cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cee:	bf00      	nop
 8016cf0:	08016d31 	.word	0x08016d31
 8016cf4:	08016d57 	.word	0x08016d57
 8016cf8:	08016d6f 	.word	0x08016d6f
 8016cfc:	08016de5 	.word	0x08016de5
 8016d00:	08016e5b 	.word	0x08016e5b
 8016d04:	08016ed1 	.word	0x08016ed1
 8016d08:	08016f41 	.word	0x08016f41
 8016d0c:	08016f67 	.word	0x08016f67
 8016d10:	08016f8d 	.word	0x08016f8d
 8016d14:	08016fb3 	.word	0x08016fb3
 8016d18:	08017049 	.word	0x08017049
 8016d1c:	08017049 	.word	0x08017049
 8016d20:	08017049 	.word	0x08017049
 8016d24:	08017049 	.word	0x08017049
 8016d28:	08017049 	.word	0x08017049
 8016d2c:	08016fd9 	.word	0x08016fd9
		case 0://横壁追従制御
			record_mode=16;
 8016d30:	4bd2      	ldr	r3, [pc, #840]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016d32:	2210      	movs	r2, #16
 8016d34:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016d36:	2301      	movs	r3, #1
 8016d38:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 8016d3a:	68b8      	ldr	r0, [r7, #8]
 8016d3c:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8017080 <mode_WallSensorTuning+0x3d8>
 8016d40:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8016d44:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016d48:	eddf 0acf 	vldr	s1, [pc, #828]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016d4c:	ed9f 0acf 	vldr	s0, [pc, #828]	; 801708c <mode_WallSensorTuning+0x3e4>
 8016d50:	f7ec ff3e 	bl	8003bd0 <straight_table2>
		break;
 8016d54:	e178      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 8016d56:	2300      	movs	r3, #0
 8016d58:	60fb      	str	r3, [r7, #12]
 8016d5a:	e004      	b.n	8016d66 <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 8016d5c:	f7ed ff68 	bl	8004c30 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	3301      	adds	r3, #1
 8016d64:	60fb      	str	r3, [r7, #12]
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	2b14      	cmp	r3, #20
 8016d6a:	ddf7      	ble.n	8016d5c <mode_WallSensorTuning+0xb4>
			}
		break;
 8016d6c:	e16c      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016d6e:	4bc3      	ldr	r3, [pc, #780]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016d70:	2207      	movs	r2, #7
 8016d72:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016d74:	2300      	movs	r3, #0
 8016d76:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016d78:	2300      	movs	r3, #0
 8016d7a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016d80:	2300      	movs	r3, #0
 8016d82:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016d84:	68b8      	ldr	r0, [r7, #8]
 8016d86:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016d8a:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016d8e:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016d92:	eddf 0abd 	vldr	s1, [pc, #756]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016d96:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8017098 <mode_WallSensorTuning+0x3f0>
 8016d9a:	f7ec ff19 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=1;
 8016d9e:	2301      	movs	r3, #1
 8016da0:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016da2:	2300      	movs	r3, #0
 8016da4:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016da6:	68b8      	ldr	r0, [r7, #8]
 8016da8:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016dac:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016db0:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016db4:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016db8:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 801709c <mode_WallSensorTuning+0x3f4>
 8016dbc:	f7ec ff08 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8016dc0:	2300      	movs	r3, #0
 8016dc2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 8016dc8:	68b8      	ldr	r0, [r7, #8]
 8016dca:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016dce:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016dd2:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016dd6:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016dda:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 80170a0 <mode_WallSensorTuning+0x3f8>
 8016dde:	f7ec fef7 	bl	8003bd0 <straight_table2>
		break;
 8016de2:	e131      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016de4:	4ba5      	ldr	r3, [pc, #660]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016de6:	2208      	movs	r2, #8
 8016de8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016dea:	2300      	movs	r3, #0
 8016dec:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016dee:	2300      	movs	r3, #0
 8016df0:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016df2:	2300      	movs	r3, #0
 8016df4:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016df6:	2300      	movs	r3, #0
 8016df8:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 8016dfa:	68b8      	ldr	r0, [r7, #8]
 8016dfc:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016e00:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e04:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e08:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016e0c:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 80170a4 <mode_WallSensorTuning+0x3fc>
 8016e10:	f7ec fede 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=2;
 8016e14:	2302      	movs	r3, #2
 8016e16:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 8016e1c:	68b8      	ldr	r0, [r7, #8]
 8016e1e:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016e22:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e26:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e2a:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e2e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 801709c <mode_WallSensorTuning+0x3f4>
 8016e32:	f7ec fecd 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8016e36:	2300      	movs	r3, #0
 8016e38:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016e3a:	2300      	movs	r3, #0
 8016e3c:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 8016e3e:	68b8      	ldr	r0, [r7, #8]
 8016e40:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016e44:	eddf 1a93 	vldr	s3, [pc, #588]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e48:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016e4c:	eddf 0a91 	vldr	s1, [pc, #580]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e50:	ed9f 0a93 	vldr	s0, [pc, #588]	; 80170a0 <mode_WallSensorTuning+0x3f8>
 8016e54:	f7ec febc 	bl	8003bd0 <straight_table2>
		break;
 8016e58:	e0f6      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 8016e5a:	4b88      	ldr	r3, [pc, #544]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016e5c:	2208      	movs	r2, #8
 8016e5e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016e60:	2300      	movs	r3, #0
 8016e62:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016e64:	2300      	movs	r3, #0
 8016e66:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016e68:	2300      	movs	r3, #0
 8016e6a:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016e6c:	2300      	movs	r3, #0
 8016e6e:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016e70:	68b8      	ldr	r0, [r7, #8]
 8016e72:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016e76:	eddf 1a87 	vldr	s3, [pc, #540]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e7a:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e7e:	eddf 0a82 	vldr	s1, [pc, #520]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016e82:	ed9f 0a89 	vldr	s0, [pc, #548]	; 80170a8 <mode_WallSensorTuning+0x400>
 8016e86:	f7ec fea3 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=3;
 8016e8a:	2303      	movs	r3, #3
 8016e8c:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016e92:	68b8      	ldr	r0, [r7, #8]
 8016e94:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016e98:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016e9c:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016ea0:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016ea4:	ed9f 0a81 	vldr	s0, [pc, #516]	; 80170ac <mode_WallSensorTuning+0x404>
 8016ea8:	f7ec fe92 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8016eac:	2300      	movs	r3, #0
 8016eae:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016eb0:	2300      	movs	r3, #0
 8016eb2:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016eb4:	68b8      	ldr	r0, [r7, #8]
 8016eb6:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016eba:	eddf 1a76 	vldr	s3, [pc, #472]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016ebe:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016ec2:	eddf 0a74 	vldr	s1, [pc, #464]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016ec6:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80170b0 <mode_WallSensorTuning+0x408>
 8016eca:	f7ec fe81 	bl	8003bd0 <straight_table2>
		break;
 8016ece:	e0bb      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016ed4:	2300      	movs	r3, #0
 8016ed6:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016edc:	2300      	movs	r3, #0
 8016ede:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016ee0:	68b8      	ldr	r0, [r7, #8]
 8016ee2:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016ee6:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016eea:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016eee:	eddf 0a66 	vldr	s1, [pc, #408]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016ef2:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 80170a8 <mode_WallSensorTuning+0x400>
 8016ef6:	f7ec fe6b 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=4;
 8016efa:	2304      	movs	r3, #4
 8016efc:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016efe:	2300      	movs	r3, #0
 8016f00:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016f02:	68b8      	ldr	r0, [r7, #8]
 8016f04:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016f08:	eddf 1a62 	vldr	s3, [pc, #392]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f0c:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f10:	eddf 0a60 	vldr	s1, [pc, #384]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f14:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80170ac <mode_WallSensorTuning+0x404>
 8016f18:	f7ec fe5a 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016f20:	2300      	movs	r3, #0
 8016f22:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016f24:	68b8      	ldr	r0, [r7, #8]
 8016f26:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016f2a:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f2e:	ed9f 1a56 	vldr	s2, [pc, #344]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016f32:	eddf 0a58 	vldr	s1, [pc, #352]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f36:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80170b0 <mode_WallSensorTuning+0x408>
 8016f3a:	f7ec fe49 	bl	8003bd0 <straight_table2>
		break;
 8016f3e:	e083      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 8016f40:	4b4e      	ldr	r3, [pc, #312]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016f42:	2209      	movs	r2, #9
 8016f44:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016f46:	2300      	movs	r3, #0
 8016f48:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016f4a:	68b8      	ldr	r0, [r7, #8]
 8016f4c:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016f50:	eddf 1a50 	vldr	s3, [pc, #320]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f54:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016f58:	eddf 0a4b 	vldr	s1, [pc, #300]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016f5c:	ed9f 0a55 	vldr	s0, [pc, #340]	; 80170b4 <mode_WallSensorTuning+0x40c>
 8016f60:	f7ec fe36 	bl	8003bd0 <straight_table2>
		break;
 8016f64:	e070      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 8016f66:	4b45      	ldr	r3, [pc, #276]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016f68:	220a      	movs	r2, #10
 8016f6a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016f70:	68b8      	ldr	r0, [r7, #8]
 8016f72:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016f76:	eddf 1a47 	vldr	s3, [pc, #284]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016f7a:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016f7e:	eddf 0a42 	vldr	s1, [pc, #264]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016f82:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 80170b4 <mode_WallSensorTuning+0x40c>
 8016f86:	f7ec fe23 	bl	8003bd0 <straight_table2>

		break;
 8016f8a:	e05d      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016f8c:	4b3b      	ldr	r3, [pc, #236]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016f8e:	2207      	movs	r2, #7
 8016f90:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016f92:	2303      	movs	r3, #3
 8016f94:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016f96:	68b8      	ldr	r0, [r7, #8]
 8016f98:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8017090 <mode_WallSensorTuning+0x3e8>
 8016f9c:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8017094 <mode_WallSensorTuning+0x3ec>
 8016fa0:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016fa4:	eddf 0a38 	vldr	s1, [pc, #224]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016fa8:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80170b4 <mode_WallSensorTuning+0x40c>
 8016fac:	f7ec fe10 	bl	8003bd0 <straight_table2>
		break;
 8016fb0:	e04a      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8016fb2:	4b32      	ldr	r3, [pc, #200]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8016fb4:	2208      	movs	r2, #8
 8016fb6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016fb8:	2303      	movs	r3, #3
 8016fba:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016fbc:	68b8      	ldr	r0, [r7, #8]
 8016fbe:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 80170b8 <mode_WallSensorTuning+0x410>
 8016fc2:	eddf 1a3e 	vldr	s3, [pc, #248]	; 80170bc <mode_WallSensorTuning+0x414>
 8016fc6:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016fca:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016fce:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80170c0 <mode_WallSensorTuning+0x418>
 8016fd2:	f7ec fdfd 	bl	8003bd0 <straight_table2>
		break;
 8016fd6:	e037      	b.n	8017048 <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 8016fd8:	2305      	movs	r3, #5
 8016fda:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016fdc:	2300      	movs	r3, #0
 8016fde:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016fe4:	2300      	movs	r3, #0
 8016fe6:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 8016fe8:	68b8      	ldr	r0, [r7, #8]
 8016fea:	ed9f 2a36 	vldr	s4, [pc, #216]	; 80170c4 <mode_WallSensorTuning+0x41c>
 8016fee:	eddf 1a25 	vldr	s3, [pc, #148]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8016ff2:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8016ff6:	eddf 0a24 	vldr	s1, [pc, #144]	; 8017088 <mode_WallSensorTuning+0x3e0>
 8016ffa:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80170c8 <mode_WallSensorTuning+0x420>
 8016ffe:	f7ec fde7 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=2;
 8017002:	2302      	movs	r3, #2
 8017004:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8017006:	2300      	movs	r3, #0
 8017008:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801700a:	68b8      	ldr	r0, [r7, #8]
 801700c:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 80170c4 <mode_WallSensorTuning+0x41c>
 8017010:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8017014:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8017018:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8017084 <mode_WallSensorTuning+0x3dc>
 801701c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80170cc <mode_WallSensorTuning+0x424>
 8017020:	f7ec fdd6 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8017024:	2300      	movs	r3, #0
 8017026:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8017028:	2300      	movs	r3, #0
 801702a:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 801702c:	68b8      	ldr	r0, [r7, #8]
 801702e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 80170c4 <mode_WallSensorTuning+0x41c>
 8017032:	eddf 1a14 	vldr	s3, [pc, #80]	; 8017084 <mode_WallSensorTuning+0x3dc>
 8017036:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8017088 <mode_WallSensorTuning+0x3e0>
 801703a:	eddf 0a12 	vldr	s1, [pc, #72]	; 8017084 <mode_WallSensorTuning+0x3dc>
 801703e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80170d0 <mode_WallSensorTuning+0x428>
 8017042:	f7ec fdc5 	bl	8003bd0 <straight_table2>
		break;
 8017046:	bf00      	nop
	}
	record_mode=0;
 8017048:	4b0c      	ldr	r3, [pc, #48]	; (801707c <mode_WallSensorTuning+0x3d4>)
 801704a:	2200      	movs	r2, #0
 801704c:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801704e:	2003      	movs	r0, #3
 8017050:	f7f1 fa80 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8017054:	2003      	movs	r0, #3
 8017056:	f7f1 fa55 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801705a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801705e:	f7f1 fd77 	bl	8008b50 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8017062:	f7f1 fad9 	bl	8008618 <pl_FunMotor_stop>
	record_mode=0;
 8017066:	4b05      	ldr	r3, [pc, #20]	; (801707c <mode_WallSensorTuning+0x3d4>)
 8017068:	2200      	movs	r2, #0
 801706a:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 801706c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8017070:	f7f1 fd6e 	bl	8008b50 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8017074:	2000      	movs	r0, #0
 8017076:	f7f1 fa3b 	bl	80084f0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801707a:	e02e      	b.n	80170da <mode_WallSensorTuning+0x432>
 801707c:	2000f284 	.word	0x2000f284
 8017080:	459c4000 	.word	0x459c4000
 8017084:	43fa0000 	.word	0x43fa0000
 8017088:	00000000 	.word	0x00000000
 801708c:	44b40000 	.word	0x44b40000
 8017090:	453b8000 	.word	0x453b8000
 8017094:	43960000 	.word	0x43960000
 8017098:	431b8000 	.word	0x431b8000
 801709c:	41b40000 	.word	0x41b40000
 80170a0:	42870000 	.word	0x42870000
 80170a4:	42cd0000 	.word	0x42cd0000
 80170a8:	4329c77b 	.word	0x4329c77b
 80170ac:	41fe8ef6 	.word	0x41fe8ef6
 80170b0:	42beeb39 	.word	0x42beeb39
 80170b4:	43beeb39 	.word	0x43beeb39
 80170b8:	461c4000 	.word	0x461c4000
 80170bc:	442f0000 	.word	0x442f0000
 80170c0:	4484977b 	.word	0x4484977b
 80170c4:	44bb8000 	.word	0x44bb8000
 80170c8:	43488000 	.word	0x43488000
 80170cc:	42340000 	.word	0x42340000
 80170d0:	43070000 	.word	0x43070000
		HAL_Delay(1);
 80170d4:	2001      	movs	r0, #1
 80170d6:	f002 facb 	bl	8019670 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80170da:	4b0e      	ldr	r3, [pc, #56]	; (8017114 <mode_WallSensorTuning+0x46c>)
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80170e2:	ddf7      	ble.n	80170d4 <mode_WallSensorTuning+0x42c>
 80170e4:	4b0b      	ldr	r3, [pc, #44]	; (8017114 <mode_WallSensorTuning+0x46c>)
 80170e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80170ea:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80170ee:	ddf1      	ble.n	80170d4 <mode_WallSensorTuning+0x42c>
 80170f0:	4b08      	ldr	r3, [pc, #32]	; (8017114 <mode_WallSensorTuning+0x46c>)
 80170f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80170f6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80170fa:	ddeb      	ble.n	80170d4 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 80170fc:	2001      	movs	r0, #1
 80170fe:	f7f0 fd67 	bl	8007bd0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8017102:	2001      	movs	r0, #1
 8017104:	f7f0 fd76 	bl	8007bf4 <pl_l_blue_LED>
	record_print();
 8017108:	f000 faf6 	bl	80176f8 <record_print>



}
 801710c:	bf00      	nop
 801710e:	3710      	adds	r7, #16
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	200002bc 	.word	0x200002bc

08017118 <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 8017118:	b580      	push	{r7, lr}
 801711a:	b084      	sub	sp, #16
 801711c:	af00      	add	r7, sp, #0
 801711e:	4603      	mov	r3, r0
 8017120:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8017122:	2300      	movs	r3, #0
 8017124:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 8017126:	2300      	movs	r3, #0
 8017128:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 801712a:	2300      	movs	r3, #0
 801712c:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 801712e:	2300      	movs	r3, #0
 8017130:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8017132:	2001      	movs	r0, #1
 8017134:	f7f1 f9dc 	bl	80084f0 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8017138:	2003      	movs	r0, #3
 801713a:	f7f1 f9e3 	bl	8008504 <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 801713e:	2003      	movs	r0, #3
 8017140:	f7f1 fa08 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 8017144:	ed9f 0ae3 	vldr	s0, [pc, #908]	; 80174d4 <mode_WallSensorTuning_fast+0x3bc>
 8017148:	f7f1 fa70 	bl	800862c <pl_FunMotor_duty>
	pl_FunMotor_start();
 801714c:	f7f1 fa5a 	bl	8008604 <pl_FunMotor_start>
	HAL_Delay(600);
 8017150:	f44f 7016 	mov.w	r0, #600	; 0x258
 8017154:	f002 fa8c 	bl	8019670 <HAL_Delay>
	reset_gyro();
 8017158:	f7ea fd2e 	bl	8001bb8 <reset_gyro>
	reset_speed();
 801715c:	f7e9 ff62 	bl	8001024 <reset_speed>
	clear_Ierror();
 8017160:	f7ee f846 	bl	80051f0 <clear_Ierror>
	angle=0;
 8017164:	4bdc      	ldr	r3, [pc, #880]	; (80174d8 <mode_WallSensorTuning_fast+0x3c0>)
 8017166:	f04f 0200 	mov.w	r2, #0
 801716a:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 801716c:	79fb      	ldrb	r3, [r7, #7]
 801716e:	2b0f      	cmp	r3, #15
 8017170:	f200 821b 	bhi.w	80175aa <mode_WallSensorTuning_fast+0x492>
 8017174:	a201      	add	r2, pc, #4	; (adr r2, 801717c <mode_WallSensorTuning_fast+0x64>)
 8017176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801717a:	bf00      	nop
 801717c:	080171bd 	.word	0x080171bd
 8017180:	080171ef 	.word	0x080171ef
 8017184:	08017265 	.word	0x08017265
 8017188:	080172db 	.word	0x080172db
 801718c:	08017351 	.word	0x08017351
 8017190:	080173c7 	.word	0x080173c7
 8017194:	0801743d 	.word	0x0801743d
 8017198:	08017463 	.word	0x08017463
 801719c:	08017489 	.word	0x08017489
 80171a0:	080174af 	.word	0x080174af
 80171a4:	08017539 	.word	0x08017539
 80171a8:	0801755f 	.word	0x0801755f
 80171ac:	08017585 	.word	0x08017585
 80171b0:	080175ab 	.word	0x080175ab
 80171b4:	080175ab 	.word	0x080175ab
 80171b8:	080175ab 	.word	0x080175ab
		case 0://横壁追従制御
			record_mode=15;
 80171bc:	4bc7      	ldr	r3, [pc, #796]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 80171be:	220f      	movs	r2, #15
 80171c0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80171c2:	2301      	movs	r3, #1
 80171c4:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 80171c6:	4bc6      	ldr	r3, [pc, #792]	; (80174e0 <mode_WallSensorTuning_fast+0x3c8>)
 80171c8:	2201      	movs	r2, #1
 80171ca:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 80171cc:	68f8      	ldr	r0, [r7, #12]
 80171ce:	ed9f 2ac5 	vldr	s4, [pc, #788]	; 80174e4 <mode_WallSensorTuning_fast+0x3cc>
 80171d2:	eddf 1ac5 	vldr	s3, [pc, #788]	; 80174e8 <mode_WallSensorTuning_fast+0x3d0>
 80171d6:	ed9f 1ac5 	vldr	s2, [pc, #788]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80171da:	eddf 0ac4 	vldr	s1, [pc, #784]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80171de:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 80174f0 <mode_WallSensorTuning_fast+0x3d8>
 80171e2:	f7ec fcf5 	bl	8003bd0 <straight_table2>
			highspeed_mode=0;
 80171e6:	4bbe      	ldr	r3, [pc, #760]	; (80174e0 <mode_WallSensorTuning_fast+0x3c8>)
 80171e8:	2200      	movs	r2, #0
 80171ea:	701a      	strb	r2, [r3, #0]
		break;
 80171ec:	e1dd      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 1://なし
			record_mode=8;
 80171ee:	4bbb      	ldr	r3, [pc, #748]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 80171f0:	2208      	movs	r2, #8
 80171f2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80171f4:	2301      	movs	r3, #1
 80171f6:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80171f8:	2300      	movs	r3, #0
 80171fa:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80171fc:	2300      	movs	r3, #0
 80171fe:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017200:	2300      	movs	r3, #0
 8017202:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 8017204:	68f8      	ldr	r0, [r7, #12]
 8017206:	ed9f 2abb 	vldr	s4, [pc, #748]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 801720a:	eddf 1abb 	vldr	s3, [pc, #748]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 801720e:	ed9f 1aba 	vldr	s2, [pc, #744]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017212:	eddf 0ab6 	vldr	s1, [pc, #728]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017216:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 80174fc <mode_WallSensorTuning_fast+0x3e4>
 801721a:	f7ec fcd9 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=2;
 801721e:	2302      	movs	r3, #2
 8017220:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017222:	2300      	movs	r3, #0
 8017224:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 8017226:	68f8      	ldr	r0, [r7, #12]
 8017228:	ed9f 2ab2 	vldr	s4, [pc, #712]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 801722c:	eddf 1ab2 	vldr	s3, [pc, #712]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017230:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017234:	eddf 0ab0 	vldr	s1, [pc, #704]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017238:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8017500 <mode_WallSensorTuning_fast+0x3e8>
 801723c:	f7ec fcc8 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=1;
 8017240:	2301      	movs	r3, #1
 8017242:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8017244:	2300      	movs	r3, #0
 8017246:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 8017248:	68f8      	ldr	r0, [r7, #12]
 801724a:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 801724e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017252:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017256:	eddf 0aa8 	vldr	s1, [pc, #672]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 801725a:	ed9f 0aaa 	vldr	s0, [pc, #680]	; 8017504 <mode_WallSensorTuning_fast+0x3ec>
 801725e:	f7ec fcb7 	bl	8003bd0 <straight_table2>
		break;
 8017262:	e1a2      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 2://なし
			record_mode=8;
 8017264:	4b9d      	ldr	r3, [pc, #628]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 8017266:	2208      	movs	r2, #8
 8017268:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 801726a:	2301      	movs	r3, #1
 801726c:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801726e:	2300      	movs	r3, #0
 8017270:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8017272:	2300      	movs	r3, #0
 8017274:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017276:	2300      	movs	r3, #0
 8017278:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1200, 1200,10000,mode);
 801727a:	68f8      	ldr	r0, [r7, #12]
 801727c:	ed9f 2a9d 	vldr	s4, [pc, #628]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 8017280:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 8017284:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 8017288:	eddf 0a98 	vldr	s1, [pc, #608]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 801728c:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80174fc <mode_WallSensorTuning_fast+0x3e4>
 8017290:	f7ec fc9e 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=2;
 8017294:	2302      	movs	r3, #2
 8017296:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017298:	2300      	movs	r3, #0
 801729a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1200, 1200, 1200,10000,mode);
 801729c:	68f8      	ldr	r0, [r7, #12]
 801729e:	ed9f 2a95 	vldr	s4, [pc, #596]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 80172a2:	eddf 1a99 	vldr	s3, [pc, #612]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 80172a6:	ed9f 1a98 	vldr	s2, [pc, #608]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 80172aa:	eddf 0a97 	vldr	s1, [pc, #604]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 80172ae:	ed9f 0a94 	vldr	s0, [pc, #592]	; 8017500 <mode_WallSensorTuning_fast+0x3e8>
 80172b2:	f7ec fc8d 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=1;
 80172b6:	2301      	movs	r3, #1
 80172b8:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80172ba:	2300      	movs	r3, #0
 80172bc:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1200, 0, 1200,10000,mode);
 80172be:	68f8      	ldr	r0, [r7, #12]
 80172c0:	ed9f 2a8c 	vldr	s4, [pc, #560]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 80172c4:	eddf 1a90 	vldr	s3, [pc, #576]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 80172c8:	ed9f 1a88 	vldr	s2, [pc, #544]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80172cc:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8017508 <mode_WallSensorTuning_fast+0x3f0>
 80172d0:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8017504 <mode_WallSensorTuning_fast+0x3ec>
 80172d4:	f7ec fc7c 	bl	8003bd0 <straight_table2>
		break;
 80172d8:	e167      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 80172da:	4b80      	ldr	r3, [pc, #512]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 80172dc:	2208      	movs	r2, #8
 80172de:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80172e0:	2301      	movs	r3, #1
 80172e2:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80172e4:	2300      	movs	r3, #0
 80172e6:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80172e8:	2300      	movs	r3, #0
 80172ea:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80172ec:	2300      	movs	r3, #0
 80172ee:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1500, 1500,13000,mode);
 80172f0:	68f8      	ldr	r0, [r7, #12]
 80172f2:	ed9f 2a86 	vldr	s4, [pc, #536]	; 801750c <mode_WallSensorTuning_fast+0x3f4>
 80172f6:	eddf 1a86 	vldr	s3, [pc, #536]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 80172fa:	ed9f 1a85 	vldr	s2, [pc, #532]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 80172fe:	eddf 0a7b 	vldr	s1, [pc, #492]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017302:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80174fc <mode_WallSensorTuning_fast+0x3e4>
 8017306:	f7ec fc63 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=2;
 801730a:	2302      	movs	r3, #2
 801730c:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801730e:	2300      	movs	r3, #0
 8017310:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1500, 1500, 1500,13000,mode);
 8017312:	68f8      	ldr	r0, [r7, #12]
 8017314:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 801750c <mode_WallSensorTuning_fast+0x3f4>
 8017318:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 801731c:	ed9f 1a7c 	vldr	s2, [pc, #496]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 8017320:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 8017324:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8017500 <mode_WallSensorTuning_fast+0x3e8>
 8017328:	f7ec fc52 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=1;
 801732c:	2301      	movs	r3, #1
 801732e:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8017330:	2300      	movs	r3, #0
 8017332:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1500, 0, 1500,13000,mode);
 8017334:	68f8      	ldr	r0, [r7, #12]
 8017336:	ed9f 2a75 	vldr	s4, [pc, #468]	; 801750c <mode_WallSensorTuning_fast+0x3f4>
 801733a:	eddf 1a75 	vldr	s3, [pc, #468]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 801733e:	ed9f 1a6b 	vldr	s2, [pc, #428]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017342:	eddf 0a73 	vldr	s1, [pc, #460]	; 8017510 <mode_WallSensorTuning_fast+0x3f8>
 8017346:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8017504 <mode_WallSensorTuning_fast+0x3ec>
 801734a:	f7ec fc41 	bl	8003bd0 <straight_table2>
		break;
 801734e:	e12c      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 8017350:	4b62      	ldr	r3, [pc, #392]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 8017352:	2208      	movs	r2, #8
 8017354:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8017356:	2300      	movs	r3, #0
 8017358:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801735a:	2300      	movs	r3, #0
 801735c:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801735e:	2300      	movs	r3, #0
 8017360:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8017362:	2300      	movs	r3, #0
 8017364:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8017366:	68f8      	ldr	r0, [r7, #12]
 8017368:	ed9f 2a62 	vldr	s4, [pc, #392]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 801736c:	eddf 1a62 	vldr	s3, [pc, #392]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017370:	ed9f 1a61 	vldr	s2, [pc, #388]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017374:	eddf 0a5d 	vldr	s1, [pc, #372]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017378:	ed9f 0a66 	vldr	s0, [pc, #408]	; 8017514 <mode_WallSensorTuning_fast+0x3fc>
 801737c:	f7ec fc28 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=3;
 8017380:	2303      	movs	r3, #3
 8017382:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8017384:	2300      	movs	r3, #0
 8017386:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8017388:	68f8      	ldr	r0, [r7, #12]
 801738a:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 801738e:	eddf 1a5a 	vldr	s3, [pc, #360]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017392:	ed9f 1a59 	vldr	s2, [pc, #356]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017396:	eddf 0a58 	vldr	s1, [pc, #352]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 801739a:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8017518 <mode_WallSensorTuning_fast+0x400>
 801739e:	f7ec fc17 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 80173a2:	2300      	movs	r3, #0
 80173a4:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80173a6:	2300      	movs	r3, #0
 80173a8:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80173aa:	68f8      	ldr	r0, [r7, #12]
 80173ac:	ed9f 2a51 	vldr	s4, [pc, #324]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 80173b0:	eddf 1a51 	vldr	s3, [pc, #324]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 80173b4:	ed9f 1a4d 	vldr	s2, [pc, #308]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80173b8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 80173bc:	ed9f 0a57 	vldr	s0, [pc, #348]	; 801751c <mode_WallSensorTuning_fast+0x404>
 80173c0:	f7ec fc06 	bl	8003bd0 <straight_table2>
		break;
 80173c4:	e0f1      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 80173c6:	4b45      	ldr	r3, [pc, #276]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 80173c8:	2208      	movs	r2, #8
 80173ca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80173cc:	2300      	movs	r3, #0
 80173ce:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80173d0:	2300      	movs	r3, #0
 80173d2:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80173d4:	2300      	movs	r3, #0
 80173d6:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80173d8:	2300      	movs	r3, #0
 80173da:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 80173dc:	68f8      	ldr	r0, [r7, #12]
 80173de:	ed9f 2a45 	vldr	s4, [pc, #276]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 80173e2:	eddf 1a45 	vldr	s3, [pc, #276]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 80173e6:	ed9f 1a44 	vldr	s2, [pc, #272]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 80173ea:	eddf 0a40 	vldr	s1, [pc, #256]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80173ee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 8017514 <mode_WallSensorTuning_fast+0x3fc>
 80173f2:	f7ec fbed 	bl	8003bd0 <straight_table2>
			mode.WallCutMode=4;
 80173f6:	2304      	movs	r3, #4
 80173f8:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80173fa:	2300      	movs	r3, #0
 80173fc:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 80173fe:	68f8      	ldr	r0, [r7, #12]
 8017400:	ed9f 2a3c 	vldr	s4, [pc, #240]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 8017404:	eddf 1a3c 	vldr	s3, [pc, #240]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017408:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 801740c:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017410:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8017518 <mode_WallSensorTuning_fast+0x400>
 8017414:	f7ec fbdc 	bl	8003bd0 <straight_table2>
			mode.WallControlMode=0;
 8017418:	2300      	movs	r3, #0
 801741a:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801741c:	2300      	movs	r3, #0
 801741e:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8017420:	68f8      	ldr	r0, [r7, #12]
 8017422:	ed9f 2a34 	vldr	s4, [pc, #208]	; 80174f4 <mode_WallSensorTuning_fast+0x3dc>
 8017426:	eddf 1a34 	vldr	s3, [pc, #208]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 801742a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 801742e:	eddf 0a32 	vldr	s1, [pc, #200]	; 80174f8 <mode_WallSensorTuning_fast+0x3e0>
 8017432:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 801751c <mode_WallSensorTuning_fast+0x404>
 8017436:	f7ec fbcb 	bl	8003bd0 <straight_table2>
		break;
 801743a:	e0b6      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 6://斜め直進(制御なし計測用)
			record_mode=7;
 801743c:	4b27      	ldr	r3, [pc, #156]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 801743e:	2207      	movs	r2, #7
 8017440:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8017442:	2300      	movs	r3, #0
 8017444:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8017446:	68f8      	ldr	r0, [r7, #12]
 8017448:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8017520 <mode_WallSensorTuning_fast+0x408>
 801744c:	eddf 1a35 	vldr	s3, [pc, #212]	; 8017524 <mode_WallSensorTuning_fast+0x40c>
 8017450:	ed9f 1a26 	vldr	s2, [pc, #152]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017454:	eddf 0a25 	vldr	s1, [pc, #148]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 8017458:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8017528 <mode_WallSensorTuning_fast+0x410>
 801745c:	f7ec fbb8 	bl	8003bd0 <straight_table2>
		break;
 8017460:	e0a3      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 7://斜め直進(制御なし計測用)
			record_mode=9;
 8017462:	4b1e      	ldr	r3, [pc, #120]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 8017464:	2209      	movs	r2, #9
 8017466:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8017468:	2300      	movs	r3, #0
 801746a:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 801746c:	68f8      	ldr	r0, [r7, #12]
 801746e:	ed9f 2a2c 	vldr	s4, [pc, #176]	; 8017520 <mode_WallSensorTuning_fast+0x408>
 8017472:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8017524 <mode_WallSensorTuning_fast+0x40c>
 8017476:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 801747a:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 801747e:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8017528 <mode_WallSensorTuning_fast+0x410>
 8017482:	f7ec fba5 	bl	8003bd0 <straight_table2>

		break;
 8017486:	e090      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8017488:	4b14      	ldr	r3, [pc, #80]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 801748a:	2207      	movs	r2, #7
 801748c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801748e:	2303      	movs	r3, #3
 8017490:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8017492:	68f8      	ldr	r0, [r7, #12]
 8017494:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8017520 <mode_WallSensorTuning_fast+0x408>
 8017498:	eddf 1a24 	vldr	s3, [pc, #144]	; 801752c <mode_WallSensorTuning_fast+0x414>
 801749c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80174a0:	eddf 0a12 	vldr	s1, [pc, #72]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80174a4:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8017530 <mode_WallSensorTuning_fast+0x418>
 80174a8:	f7ec fb92 	bl	8003bd0 <straight_table2>
		break;
 80174ac:	e07d      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 9:
			record_mode=8;
 80174ae:	4b0b      	ldr	r3, [pc, #44]	; (80174dc <mode_WallSensorTuning_fast+0x3c4>)
 80174b0:	2208      	movs	r2, #8
 80174b2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 80174b4:	2303      	movs	r3, #3
 80174b6:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 80174b8:	68f8      	ldr	r0, [r7, #12]
 80174ba:	ed9f 2a19 	vldr	s4, [pc, #100]	; 8017520 <mode_WallSensorTuning_fast+0x408>
 80174be:	eddf 1a1b 	vldr	s3, [pc, #108]	; 801752c <mode_WallSensorTuning_fast+0x414>
 80174c2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80174c6:	eddf 0a09 	vldr	s1, [pc, #36]	; 80174ec <mode_WallSensorTuning_fast+0x3d4>
 80174ca:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8017534 <mode_WallSensorTuning_fast+0x41c>
 80174ce:	f7ec fb7f 	bl	8003bd0 <straight_table2>
		break;
 80174d2:	e06a      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
 80174d4:	3f7d70a4 	.word	0x3f7d70a4
 80174d8:	20000268 	.word	0x20000268
 80174dc:	2000f284 	.word	0x2000f284
 80174e0:	20000814 	.word	0x20000814
 80174e4:	46bb8000 	.word	0x46bb8000
 80174e8:	459c4000 	.word	0x459c4000
 80174ec:	00000000 	.word	0x00000000
 80174f0:	44e39000 	.word	0x44e39000
 80174f4:	461c4000 	.word	0x461c4000
 80174f8:	447a0000 	.word	0x447a0000
 80174fc:	42cd0000 	.word	0x42cd0000
 8017500:	41b40000 	.word	0x41b40000
 8017504:	42e10000 	.word	0x42e10000
 8017508:	44960000 	.word	0x44960000
 801750c:	464b2000 	.word	0x464b2000
 8017510:	44bb8000 	.word	0x44bb8000
 8017514:	4321c77b 	.word	0x4321c77b
 8017518:	41fe8ef6 	.word	0x41fe8ef6
 801751c:	42beeb39 	.word	0x42beeb39
 8017520:	469c4000 	.word	0x469c4000
 8017524:	44fa0000 	.word	0x44fa0000
 8017528:	445ebd17 	.word	0x445ebd17
 801752c:	455ac000 	.word	0x455ac000
 8017530:	443eeb39 	.word	0x443eeb39
 8017534:	4484977b 	.word	0x4484977b
		case 10:
			record_mode=10;
 8017538:	4b39      	ldr	r3, [pc, #228]	; (8017620 <mode_WallSensorTuning_fast+0x508>)
 801753a:	220a      	movs	r2, #10
 801753c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801753e:	2303      	movs	r3, #3
 8017540:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8017542:	68f8      	ldr	r0, [r7, #12]
 8017544:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8017624 <mode_WallSensorTuning_fast+0x50c>
 8017548:	eddf 1a37 	vldr	s3, [pc, #220]	; 8017628 <mode_WallSensorTuning_fast+0x510>
 801754c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 801762c <mode_WallSensorTuning_fast+0x514>
 8017550:	eddf 0a36 	vldr	s1, [pc, #216]	; 801762c <mode_WallSensorTuning_fast+0x514>
 8017554:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8017630 <mode_WallSensorTuning_fast+0x518>
 8017558:	f7ec fb3a 	bl	8003bd0 <straight_table2>
		break;
 801755c:	e025      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 11:
			record_mode=11;
 801755e:	4b30      	ldr	r3, [pc, #192]	; (8017620 <mode_WallSensorTuning_fast+0x508>)
 8017560:	220b      	movs	r2, #11
 8017562:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8017564:	2303      	movs	r3, #3
 8017566:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8017568:	68f8      	ldr	r0, [r7, #12]
 801756a:	ed9f 2a32 	vldr	s4, [pc, #200]	; 8017634 <mode_WallSensorTuning_fast+0x51c>
 801756e:	eddf 1a32 	vldr	s3, [pc, #200]	; 8017638 <mode_WallSensorTuning_fast+0x520>
 8017572:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 801762c <mode_WallSensorTuning_fast+0x514>
 8017576:	eddf 0a2d 	vldr	s1, [pc, #180]	; 801762c <mode_WallSensorTuning_fast+0x514>
 801757a:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8017630 <mode_WallSensorTuning_fast+0x518>
 801757e:	f7ec fb27 	bl	8003bd0 <straight_table2>
		break;
 8017582:	e012      	b.n	80175aa <mode_WallSensorTuning_fast+0x492>
		case 12:
			record_mode=12;
 8017584:	4b26      	ldr	r3, [pc, #152]	; (8017620 <mode_WallSensorTuning_fast+0x508>)
 8017586:	220c      	movs	r2, #12
 8017588:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801758a:	2303      	movs	r3, #3
 801758c:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 801758e:	68f8      	ldr	r0, [r7, #12]
 8017590:	ed9f 2a28 	vldr	s4, [pc, #160]	; 8017634 <mode_WallSensorTuning_fast+0x51c>
 8017594:	eddf 1a28 	vldr	s3, [pc, #160]	; 8017638 <mode_WallSensorTuning_fast+0x520>
 8017598:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801762c <mode_WallSensorTuning_fast+0x514>
 801759c:	eddf 0a23 	vldr	s1, [pc, #140]	; 801762c <mode_WallSensorTuning_fast+0x514>
 80175a0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8017630 <mode_WallSensorTuning_fast+0x518>
 80175a4:	f7ec fb14 	bl	8003bd0 <straight_table2>
		break;
 80175a8:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 80175aa:	4b1d      	ldr	r3, [pc, #116]	; (8017620 <mode_WallSensorTuning_fast+0x508>)
 80175ac:	2200      	movs	r2, #0
 80175ae:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80175b0:	2003      	movs	r0, #3
 80175b2:	f7f0 ffcf 	bl	8008554 <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80175b6:	2003      	movs	r0, #3
 80175b8:	f7f0 ffa4 	bl	8008504 <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80175bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175c0:	f7f1 fac6 	bl	8008b50 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80175c4:	f7f1 f828 	bl	8008618 <pl_FunMotor_stop>
	record_mode=0;
 80175c8:	4b15      	ldr	r3, [pc, #84]	; (8017620 <mode_WallSensorTuning_fast+0x508>)
 80175ca:	2200      	movs	r2, #0
 80175cc:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 80175ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80175d2:	f7f1 fabd 	bl	8008b50 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80175d6:	2000      	movs	r0, #0
 80175d8:	f7f0 ff8a 	bl	80084f0 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80175dc:	e002      	b.n	80175e4 <mode_WallSensorTuning_fast+0x4cc>
		HAL_Delay(1);
 80175de:	2001      	movs	r0, #1
 80175e0:	f002 f846 	bl	8019670 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80175e4:	4b15      	ldr	r3, [pc, #84]	; (801763c <mode_WallSensorTuning_fast+0x524>)
 80175e6:	681b      	ldr	r3, [r3, #0]
 80175e8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80175ec:	ddf7      	ble.n	80175de <mode_WallSensorTuning_fast+0x4c6>
 80175ee:	4b13      	ldr	r3, [pc, #76]	; (801763c <mode_WallSensorTuning_fast+0x524>)
 80175f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80175f4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80175f8:	ddf1      	ble.n	80175de <mode_WallSensorTuning_fast+0x4c6>
 80175fa:	4b10      	ldr	r3, [pc, #64]	; (801763c <mode_WallSensorTuning_fast+0x524>)
 80175fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017600:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8017604:	ddeb      	ble.n	80175de <mode_WallSensorTuning_fast+0x4c6>
	}
	pl_r_blue_LED(ON);
 8017606:	2001      	movs	r0, #1
 8017608:	f7f0 fae2 	bl	8007bd0 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 801760c:	2001      	movs	r0, #1
 801760e:	f7f0 faf1 	bl	8007bf4 <pl_l_blue_LED>
	record_print();
 8017612:	f000 f871 	bl	80176f8 <record_print>



}
 8017616:	bf00      	nop
 8017618:	3710      	adds	r7, #16
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
 801761e:	bf00      	nop
 8017620:	2000f284 	.word	0x2000f284
 8017624:	469c4000 	.word	0x469c4000
 8017628:	455ac000 	.word	0x455ac000
 801762c:	00000000 	.word	0x00000000
 8017630:	443eeb39 	.word	0x443eeb39
 8017634:	466a6000 	.word	0x466a6000
 8017638:	453b8000 	.word	0x453b8000
 801763c:	200002bc 	.word	0x200002bc

08017640 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8017640:	b480      	push	{r7}
 8017642:	af00      	add	r7, sp, #0
	record_mode = 0;
 8017644:	4b06      	ldr	r3, [pc, #24]	; (8017660 <record_reset+0x20>)
 8017646:	2200      	movs	r2, #0
 8017648:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 801764a:	4b06      	ldr	r3, [pc, #24]	; (8017664 <record_reset+0x24>)
 801764c:	2200      	movs	r2, #0
 801764e:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8017650:	4b05      	ldr	r3, [pc, #20]	; (8017668 <record_reset+0x28>)
 8017652:	2200      	movs	r2, #0
 8017654:	701a      	strb	r2, [r3, #0]
}
 8017656:	bf00      	nop
 8017658:	46bd      	mov	sp, r7
 801765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765e:	4770      	bx	lr
 8017660:	2000f284 	.word	0x2000f284
 8017664:	2000f288 	.word	0x2000f288
 8017668:	2000f290 	.word	0x2000f290

0801766c <record_data>:

void record_data(float *input_record_data, int numlen) {
 801766c:	b490      	push	{r4, r7}
 801766e:	b084      	sub	sp, #16
 8017670:	af00      	add	r7, sp, #0
 8017672:	6078      	str	r0, [r7, #4]
 8017674:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8017676:	2300      	movs	r3, #0
 8017678:	60fb      	str	r3, [r7, #12]
 801767a:	e013      	b.n	80176a4 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 801767c:	68fb      	ldr	r3, [r7, #12]
 801767e:	009b      	lsls	r3, r3, #2
 8017680:	687a      	ldr	r2, [r7, #4]
 8017682:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8017684:	4b18      	ldr	r3, [pc, #96]	; (80176e8 <record_data+0x7c>)
 8017686:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8017688:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 801768a:	4818      	ldr	r0, [pc, #96]	; (80176ec <record_data+0x80>)
 801768c:	68f9      	ldr	r1, [r7, #12]
 801768e:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8017692:	fb04 f101 	mul.w	r1, r4, r1
 8017696:	440b      	add	r3, r1
 8017698:	009b      	lsls	r3, r3, #2
 801769a:	4403      	add	r3, r0
 801769c:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	3301      	adds	r3, #1
 80176a2:	60fb      	str	r3, [r7, #12]
 80176a4:	68fa      	ldr	r2, [r7, #12]
 80176a6:	683b      	ldr	r3, [r7, #0]
 80176a8:	429a      	cmp	r2, r3
 80176aa:	dbe7      	blt.n	801767c <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 80176ac:	4b10      	ldr	r3, [pc, #64]	; (80176f0 <record_data+0x84>)
 80176ae:	781b      	ldrb	r3, [r3, #0]
 80176b0:	2b01      	cmp	r3, #1
 80176b2:	d103      	bne.n	80176bc <record_data+0x50>
		record_end_point = record_time;
 80176b4:	4b0c      	ldr	r3, [pc, #48]	; (80176e8 <record_data+0x7c>)
 80176b6:	681b      	ldr	r3, [r3, #0]
 80176b8:	4a0e      	ldr	r2, [pc, #56]	; (80176f4 <record_data+0x88>)
 80176ba:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 80176bc:	4b0a      	ldr	r3, [pc, #40]	; (80176e8 <record_data+0x7c>)
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	3301      	adds	r3, #1
 80176c2:	4a09      	ldr	r2, [pc, #36]	; (80176e8 <record_data+0x7c>)
 80176c4:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 80176c6:	4b08      	ldr	r3, [pc, #32]	; (80176e8 <record_data+0x7c>)
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80176ce:	4293      	cmp	r3, r2
 80176d0:	dd05      	ble.n	80176de <record_data+0x72>
		record_time = 0;
 80176d2:	4b05      	ldr	r3, [pc, #20]	; (80176e8 <record_data+0x7c>)
 80176d4:	2200      	movs	r2, #0
 80176d6:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 80176d8:	4b05      	ldr	r3, [pc, #20]	; (80176f0 <record_data+0x84>)
 80176da:	2201      	movs	r2, #1
 80176dc:	701a      	strb	r2, [r3, #0]
	}

}
 80176de:	bf00      	nop
 80176e0:	3710      	adds	r7, #16
 80176e2:	46bd      	mov	sp, r7
 80176e4:	bc90      	pop	{r4, r7}
 80176e6:	4770      	bx	lr
 80176e8:	2000f288 	.word	0x2000f288
 80176ec:	20003704 	.word	0x20003704
 80176f0:	2000f290 	.word	0x2000f290
 80176f4:	2000f28c 	.word	0x2000f28c

080176f8 <record_print>:

void record_print(void) {
 80176f8:	b580      	push	{r7, lr}
 80176fa:	b084      	sub	sp, #16
 80176fc:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 80176fe:	4b3a      	ldr	r3, [pc, #232]	; (80177e8 <record_print+0xf0>)
 8017700:	781b      	ldrb	r3, [r3, #0]
 8017702:	2b00      	cmp	r3, #0
 8017704:	d12e      	bne.n	8017764 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8017706:	2300      	movs	r3, #0
 8017708:	60fb      	str	r3, [r7, #12]
 801770a:	e025      	b.n	8017758 <record_print+0x60>

			printf("%d", a);
 801770c:	68f9      	ldr	r1, [r7, #12]
 801770e:	4837      	ldr	r0, [pc, #220]	; (80177ec <record_print+0xf4>)
 8017710:	f009 ff00 	bl	8021514 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8017714:	2300      	movs	r3, #0
 8017716:	607b      	str	r3, [r7, #4]
 8017718:	e015      	b.n	8017746 <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 801771a:	4935      	ldr	r1, [pc, #212]	; (80177f0 <record_print+0xf8>)
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8017722:	fb03 f202 	mul.w	r2, r3, r2
 8017726:	68fb      	ldr	r3, [r7, #12]
 8017728:	4413      	add	r3, r2
 801772a:	009b      	lsls	r3, r3, #2
 801772c:	440b      	add	r3, r1
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	4618      	mov	r0, r3
 8017732:	f7e8 ff31 	bl	8000598 <__aeabi_f2d>
 8017736:	4602      	mov	r2, r0
 8017738:	460b      	mov	r3, r1
 801773a:	482e      	ldr	r0, [pc, #184]	; (80177f4 <record_print+0xfc>)
 801773c:	f009 feea 	bl	8021514 <iprintf>
					record_count++) {
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	3301      	adds	r3, #1
 8017744:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b03      	cmp	r3, #3
 801774a:	dde6      	ble.n	801771a <record_print+0x22>
			}
			printf("\n");
 801774c:	200a      	movs	r0, #10
 801774e:	f009 fef9 	bl	8021544 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	3301      	adds	r3, #1
 8017756:	60fb      	str	r3, [r7, #12]
 8017758:	4b27      	ldr	r3, [pc, #156]	; (80177f8 <record_print+0x100>)
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	68fa      	ldr	r2, [r7, #12]
 801775e:	429a      	cmp	r2, r3
 8017760:	dbd4      	blt.n	801770c <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8017762:	e03c      	b.n	80177de <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8017764:	2300      	movs	r3, #0
 8017766:	60fb      	str	r3, [r7, #12]
 8017768:	e034      	b.n	80177d4 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 801776a:	4b24      	ldr	r3, [pc, #144]	; (80177fc <record_print+0x104>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	3301      	adds	r3, #1
 8017770:	68fa      	ldr	r2, [r7, #12]
 8017772:	4413      	add	r3, r2
 8017774:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8017776:	68bb      	ldr	r3, [r7, #8]
 8017778:	f640 32b7 	movw	r2, #2999	; 0xbb7
 801777c:	4293      	cmp	r3, r2
 801777e:	dd03      	ble.n	8017788 <record_print+0x90>
				time_index -= max_record_time;
 8017780:	68bb      	ldr	r3, [r7, #8]
 8017782:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8017786:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8017788:	68f9      	ldr	r1, [r7, #12]
 801778a:	4818      	ldr	r0, [pc, #96]	; (80177ec <record_print+0xf4>)
 801778c:	f009 fec2 	bl	8021514 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8017790:	2300      	movs	r3, #0
 8017792:	603b      	str	r3, [r7, #0]
 8017794:	e015      	b.n	80177c2 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8017796:	4916      	ldr	r1, [pc, #88]	; (80177f0 <record_print+0xf8>)
 8017798:	683b      	ldr	r3, [r7, #0]
 801779a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801779e:	fb03 f202 	mul.w	r2, r3, r2
 80177a2:	68bb      	ldr	r3, [r7, #8]
 80177a4:	4413      	add	r3, r2
 80177a6:	009b      	lsls	r3, r3, #2
 80177a8:	440b      	add	r3, r1
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	4618      	mov	r0, r3
 80177ae:	f7e8 fef3 	bl	8000598 <__aeabi_f2d>
 80177b2:	4602      	mov	r2, r0
 80177b4:	460b      	mov	r3, r1
 80177b6:	480f      	ldr	r0, [pc, #60]	; (80177f4 <record_print+0xfc>)
 80177b8:	f009 feac 	bl	8021514 <iprintf>
					record_count++) {
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	3301      	adds	r3, #1
 80177c0:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 80177c2:	683b      	ldr	r3, [r7, #0]
 80177c4:	2b03      	cmp	r3, #3
 80177c6:	dde6      	ble.n	8017796 <record_print+0x9e>
			printf("\n");
 80177c8:	200a      	movs	r0, #10
 80177ca:	f009 febb 	bl	8021544 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 80177ce:	68fb      	ldr	r3, [r7, #12]
 80177d0:	3301      	adds	r3, #1
 80177d2:	60fb      	str	r3, [r7, #12]
 80177d4:	68fb      	ldr	r3, [r7, #12]
 80177d6:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80177da:	4293      	cmp	r3, r2
 80177dc:	ddc5      	ble.n	801776a <record_print+0x72>
}
 80177de:	bf00      	nop
 80177e0:	3710      	adds	r7, #16
 80177e2:	46bd      	mov	sp, r7
 80177e4:	bd80      	pop	{r7, pc}
 80177e6:	bf00      	nop
 80177e8:	2000f290 	.word	0x2000f290
 80177ec:	0802519c 	.word	0x0802519c
 80177f0:	20003704 	.word	0x20003704
 80177f4:	080251a0 	.word	0x080251a0
 80177f8:	2000f288 	.word	0x2000f288
 80177fc:	2000f28c 	.word	0x2000f28c

08017800 <interrupt_record>:

void interrupt_record(void) {
 8017800:	b580      	push	{r7, lr}
 8017802:	b084      	sub	sp, #16
 8017804:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8017806:	4baf      	ldr	r3, [pc, #700]	; (8017ac4 <interrupt_record+0x2c4>)
 8017808:	781b      	ldrb	r3, [r3, #0]
 801780a:	2b01      	cmp	r3, #1
 801780c:	d110      	bne.n	8017830 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 801780e:	4bae      	ldr	r3, [pc, #696]	; (8017ac8 <interrupt_record+0x2c8>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8017814:	4bad      	ldr	r3, [pc, #692]	; (8017acc <interrupt_record+0x2cc>)
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 801781a:	4bad      	ldr	r3, [pc, #692]	; (8017ad0 <interrupt_record+0x2d0>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8017820:	4bac      	ldr	r3, [pc, #688]	; (8017ad4 <interrupt_record+0x2d4>)
 8017822:	681b      	ldr	r3, [r3, #0]
 8017824:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017826:	463b      	mov	r3, r7
 8017828:	2104      	movs	r1, #4
 801782a:	4618      	mov	r0, r3
 801782c:	f7ff ff1e 	bl	801766c <record_data>
		}
	if (record_mode == 2) {
 8017830:	4ba4      	ldr	r3, [pc, #656]	; (8017ac4 <interrupt_record+0x2c4>)
 8017832:	781b      	ldrb	r3, [r3, #0]
 8017834:	2b02      	cmp	r3, #2
 8017836:	d11b      	bne.n	8017870 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8017838:	4ba7      	ldr	r3, [pc, #668]	; (8017ad8 <interrupt_record+0x2d8>)
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 801783e:	4ba7      	ldr	r3, [pc, #668]	; (8017adc <interrupt_record+0x2dc>)
 8017840:	681b      	ldr	r3, [r3, #0]
 8017842:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8017844:	4ba6      	ldr	r3, [pc, #664]	; (8017ae0 <interrupt_record+0x2e0>)
 8017846:	681b      	ldr	r3, [r3, #0]
 8017848:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 801784a:	4ba6      	ldr	r3, [pc, #664]	; (8017ae4 <interrupt_record+0x2e4>)
 801784c:	ed93 7a00 	vldr	s14, [r3]
 8017850:	4ba5      	ldr	r3, [pc, #660]	; (8017ae8 <interrupt_record+0x2e8>)
 8017852:	edd3 7a00 	vldr	s15, [r3]
 8017856:	ee37 7a27 	vadd.f32	s14, s14, s15
 801785a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801785e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8017862:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8017866:	463b      	mov	r3, r7
 8017868:	2104      	movs	r1, #4
 801786a:	4618      	mov	r0, r3
 801786c:	f7ff fefe 	bl	801766c <record_data>
		}
	if (record_mode == 3) {
 8017870:	4b94      	ldr	r3, [pc, #592]	; (8017ac4 <interrupt_record+0x2c4>)
 8017872:	781b      	ldrb	r3, [r3, #0]
 8017874:	2b03      	cmp	r3, #3
 8017876:	d126      	bne.n	80178c6 <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8017878:	4b99      	ldr	r3, [pc, #612]	; (8017ae0 <interrupt_record+0x2e0>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 801787e:	4b98      	ldr	r3, [pc, #608]	; (8017ae0 <interrupt_record+0x2e0>)
 8017880:	689b      	ldr	r3, [r3, #8]
 8017882:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8017884:	4b97      	ldr	r3, [pc, #604]	; (8017ae4 <interrupt_record+0x2e4>)
 8017886:	ed93 7a00 	vldr	s14, [r3]
 801788a:	4b97      	ldr	r3, [pc, #604]	; (8017ae8 <interrupt_record+0x2e8>)
 801788c:	edd3 7a00 	vldr	s15, [r3]
 8017890:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017894:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8017898:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801789c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80178a0:	4b92      	ldr	r3, [pc, #584]	; (8017aec <interrupt_record+0x2ec>)
 80178a2:	ed93 7a00 	vldr	s14, [r3]
 80178a6:	4b92      	ldr	r3, [pc, #584]	; (8017af0 <interrupt_record+0x2f0>)
 80178a8:	edd3 7a00 	vldr	s15, [r3]
 80178ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80178b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80178b8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80178bc:	463b      	mov	r3, r7
 80178be:	2104      	movs	r1, #4
 80178c0:	4618      	mov	r0, r3
 80178c2:	f7ff fed3 	bl	801766c <record_data>
		}
	if (record_mode == 4) { //距離の比較
 80178c6:	4b7f      	ldr	r3, [pc, #508]	; (8017ac4 <interrupt_record+0x2c4>)
 80178c8:	781b      	ldrb	r3, [r3, #0]
 80178ca:	2b04      	cmp	r3, #4
 80178cc:	d126      	bne.n	801791c <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 80178ce:	4b84      	ldr	r3, [pc, #528]	; (8017ae0 <interrupt_record+0x2e0>)
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 80178d4:	4b7e      	ldr	r3, [pc, #504]	; (8017ad0 <interrupt_record+0x2d0>)
 80178d6:	ed93 7a00 	vldr	s14, [r3]
 80178da:	4b7e      	ldr	r3, [pc, #504]	; (8017ad4 <interrupt_record+0x2d4>)
 80178dc:	edd3 7a00 	vldr	s15, [r3]
 80178e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80178e4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80178e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80178ec:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 80178f0:	4b80      	ldr	r3, [pc, #512]	; (8017af4 <interrupt_record+0x2f4>)
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 80178f6:	4b7d      	ldr	r3, [pc, #500]	; (8017aec <interrupt_record+0x2ec>)
 80178f8:	ed93 7a00 	vldr	s14, [r3]
 80178fc:	4b7c      	ldr	r3, [pc, #496]	; (8017af0 <interrupt_record+0x2f0>)
 80178fe:	edd3 7a00 	vldr	s15, [r3]
 8017902:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017906:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801790a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801790e:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017912:	463b      	mov	r3, r7
 8017914:	2104      	movs	r1, #4
 8017916:	4618      	mov	r0, r3
 8017918:	f7ff fea8 	bl	801766c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 801791c:	4b69      	ldr	r3, [pc, #420]	; (8017ac4 <interrupt_record+0x2c4>)
 801791e:	781b      	ldrb	r3, [r3, #0]
 8017920:	2b05      	cmp	r3, #5
 8017922:	d110      	bne.n	8017946 <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8017924:	4b6e      	ldr	r3, [pc, #440]	; (8017ae0 <interrupt_record+0x2e0>)
 8017926:	689b      	ldr	r3, [r3, #8]
 8017928:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 801792a:	4b69      	ldr	r3, [pc, #420]	; (8017ad0 <interrupt_record+0x2d0>)
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8017930:	4b68      	ldr	r3, [pc, #416]	; (8017ad4 <interrupt_record+0x2d4>)
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017936:	4b6f      	ldr	r3, [pc, #444]	; (8017af4 <interrupt_record+0x2f4>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 801793c:	463b      	mov	r3, r7
 801793e:	2104      	movs	r1, #4
 8017940:	4618      	mov	r0, r3
 8017942:	f7ff fe93 	bl	801766c <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8017946:	4b5f      	ldr	r3, [pc, #380]	; (8017ac4 <interrupt_record+0x2c4>)
 8017948:	781b      	ldrb	r3, [r3, #0]
 801794a:	2b05      	cmp	r3, #5
 801794c:	d110      	bne.n	8017970 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 801794e:	4b6a      	ldr	r3, [pc, #424]	; (8017af8 <interrupt_record+0x2f8>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8017954:	4b5e      	ldr	r3, [pc, #376]	; (8017ad0 <interrupt_record+0x2d0>)
 8017956:	681b      	ldr	r3, [r3, #0]
 8017958:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 801795a:	4b5e      	ldr	r3, [pc, #376]	; (8017ad4 <interrupt_record+0x2d4>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8017960:	4b64      	ldr	r3, [pc, #400]	; (8017af4 <interrupt_record+0x2f4>)
 8017962:	681b      	ldr	r3, [r3, #0]
 8017964:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017966:	463b      	mov	r3, r7
 8017968:	2104      	movs	r1, #4
 801796a:	4618      	mov	r0, r3
 801796c:	f7ff fe7e 	bl	801766c <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8017970:	4b54      	ldr	r3, [pc, #336]	; (8017ac4 <interrupt_record+0x2c4>)
 8017972:	781b      	ldrb	r3, [r3, #0]
 8017974:	2b06      	cmp	r3, #6
 8017976:	d110      	bne.n	801799a <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8017978:	4b59      	ldr	r3, [pc, #356]	; (8017ae0 <interrupt_record+0x2e0>)
 801797a:	681b      	ldr	r3, [r3, #0]
 801797c:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 801797e:	4b5f      	ldr	r3, [pc, #380]	; (8017afc <interrupt_record+0x2fc>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8017984:	4b5e      	ldr	r3, [pc, #376]	; (8017b00 <interrupt_record+0x300>)
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 801798a:	4b5e      	ldr	r3, [pc, #376]	; (8017b04 <interrupt_record+0x304>)
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017990:	463b      	mov	r3, r7
 8017992:	2104      	movs	r1, #4
 8017994:	4618      	mov	r0, r3
 8017996:	f7ff fe69 	bl	801766c <record_data>
			}
	if (record_mode == 7) {
 801799a:	4b4a      	ldr	r3, [pc, #296]	; (8017ac4 <interrupt_record+0x2c4>)
 801799c:	781b      	ldrb	r3, [r3, #0]
 801799e:	2b07      	cmp	r3, #7
 80179a0:	d125      	bne.n	80179ee <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 80179a2:	4b59      	ldr	r3, [pc, #356]	; (8017b08 <interrupt_record+0x308>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	ee07 3a90 	vmov	s15, r3
 80179aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179ae:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 80179b2:	4b56      	ldr	r3, [pc, #344]	; (8017b0c <interrupt_record+0x30c>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	ee07 3a90 	vmov	s15, r3
 80179ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179be:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 80179c2:	4b51      	ldr	r3, [pc, #324]	; (8017b08 <interrupt_record+0x308>)
 80179c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80179c8:	ee07 3a90 	vmov	s15, r3
 80179cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179d0:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 80179d4:	4b4d      	ldr	r3, [pc, #308]	; (8017b0c <interrupt_record+0x30c>)
 80179d6:	691b      	ldr	r3, [r3, #16]
 80179d8:	ee07 3a90 	vmov	s15, r3
 80179dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179e0:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 80179e4:	463b      	mov	r3, r7
 80179e6:	2104      	movs	r1, #4
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7ff fe3f 	bl	801766c <record_data>
		}
	if (record_mode == 8) {
 80179ee:	4b35      	ldr	r3, [pc, #212]	; (8017ac4 <interrupt_record+0x2c4>)
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	2b08      	cmp	r3, #8
 80179f4:	d125      	bne.n	8017a42 <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80179f6:	4b44      	ldr	r3, [pc, #272]	; (8017b08 <interrupt_record+0x308>)
 80179f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80179fa:	ee07 3a90 	vmov	s15, r3
 80179fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a02:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 8017a06:	4b42      	ldr	r3, [pc, #264]	; (8017b10 <interrupt_record+0x310>)
 8017a08:	685b      	ldr	r3, [r3, #4]
 8017a0a:	ee07 3a90 	vmov	s15, r3
 8017a0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a12:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017a16:	4b3c      	ldr	r3, [pc, #240]	; (8017b08 <interrupt_record+0x308>)
 8017a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017a1c:	ee07 3a90 	vmov	s15, r3
 8017a20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a24:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017a28:	4b39      	ldr	r3, [pc, #228]	; (8017b10 <interrupt_record+0x310>)
 8017a2a:	68db      	ldr	r3, [r3, #12]
 8017a2c:	ee07 3a90 	vmov	s15, r3
 8017a30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a34:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017a38:	463b      	mov	r3, r7
 8017a3a:	2104      	movs	r1, #4
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7ff fe15 	bl	801766c <record_data>
		}
	if (record_mode == 9) { //90
 8017a42:	4b20      	ldr	r3, [pc, #128]	; (8017ac4 <interrupt_record+0x2c4>)
 8017a44:	781b      	ldrb	r3, [r3, #0]
 8017a46:	2b09      	cmp	r3, #9
 8017a48:	d11b      	bne.n	8017a82 <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017a4a:	4b2f      	ldr	r3, [pc, #188]	; (8017b08 <interrupt_record+0x308>)
 8017a4c:	681b      	ldr	r3, [r3, #0]
 8017a4e:	ee07 3a90 	vmov	s15, r3
 8017a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a56:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8017a5a:	4b2b      	ldr	r3, [pc, #172]	; (8017b08 <interrupt_record+0x308>)
 8017a5c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017a60:	ee07 3a90 	vmov	s15, r3
 8017a64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a68:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017a6c:	4b29      	ldr	r3, [pc, #164]	; (8017b14 <interrupt_record+0x314>)
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017a72:	4b29      	ldr	r3, [pc, #164]	; (8017b18 <interrupt_record+0x318>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017a78:	463b      	mov	r3, r7
 8017a7a:	2104      	movs	r1, #4
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7ff fdf5 	bl	801766c <record_data>
		}
	if (record_mode == 10) { //90
 8017a82:	4b10      	ldr	r3, [pc, #64]	; (8017ac4 <interrupt_record+0x2c4>)
 8017a84:	781b      	ldrb	r3, [r3, #0]
 8017a86:	2b0a      	cmp	r3, #10
 8017a88:	d148      	bne.n	8017b1c <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 8017a8a:	4b1f      	ldr	r3, [pc, #124]	; (8017b08 <interrupt_record+0x308>)
 8017a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a8e:	ee07 3a90 	vmov	s15, r3
 8017a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a96:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 8017a9a:	4b1b      	ldr	r3, [pc, #108]	; (8017b08 <interrupt_record+0x308>)
 8017a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017aa0:	ee07 3a90 	vmov	s15, r3
 8017aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017aa8:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017aac:	4b19      	ldr	r3, [pc, #100]	; (8017b14 <interrupt_record+0x314>)
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 8017ab2:	4b19      	ldr	r3, [pc, #100]	; (8017b18 <interrupt_record+0x318>)
 8017ab4:	681b      	ldr	r3, [r3, #0]
 8017ab6:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017ab8:	463b      	mov	r3, r7
 8017aba:	2104      	movs	r1, #4
 8017abc:	4618      	mov	r0, r3
 8017abe:	f7ff fdd5 	bl	801766c <record_data>
 8017ac2:	e02b      	b.n	8017b1c <interrupt_record+0x31c>
 8017ac4:	2000f284 	.word	0x2000f284
 8017ac8:	2000022c 	.word	0x2000022c
 8017acc:	20000228 	.word	0x20000228
 8017ad0:	20000224 	.word	0x20000224
 8017ad4:	20000220 	.word	0x20000220
 8017ad8:	200004e8 	.word	0x200004e8
 8017adc:	2000026c 	.word	0x2000026c
 8017ae0:	200004dc 	.word	0x200004dc
 8017ae4:	2000025c 	.word	0x2000025c
 8017ae8:	20000258 	.word	0x20000258
 8017aec:	20000254 	.word	0x20000254
 8017af0:	20000250 	.word	0x20000250
 8017af4:	20000280 	.word	0x20000280
 8017af8:	20000538 	.word	0x20000538
 8017afc:	20000238 	.word	0x20000238
 8017b00:	2000023c 	.word	0x2000023c
 8017b04:	2000027c 	.word	0x2000027c
 8017b08:	200002bc 	.word	0x200002bc
 8017b0c:	2000044c 	.word	0x2000044c
 8017b10:	20000460 	.word	0x20000460
 8017b14:	200005ec 	.word	0x200005ec
 8017b18:	200005e8 	.word	0x200005e8
		}
	if (record_mode == 11) { //距離の比較
 8017b1c:	4b16      	ldr	r3, [pc, #88]	; (8017b78 <interrupt_record+0x378>)
 8017b1e:	781b      	ldrb	r3, [r3, #0]
 8017b20:	2b0b      	cmp	r3, #11
 8017b22:	d110      	bne.n	8017b46 <interrupt_record+0x346>
				r_data[0] = E_speedL;
 8017b24:	4b15      	ldr	r3, [pc, #84]	; (8017b7c <interrupt_record+0x37c>)
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	603b      	str	r3, [r7, #0]
				r_data[1] = encoder_L;
 8017b2a:	4b15      	ldr	r3, [pc, #84]	; (8017b80 <interrupt_record+0x380>)
 8017b2c:	681b      	ldr	r3, [r3, #0]
 8017b2e:	607b      	str	r3, [r7, #4]
				r_data[2] = E_speedR;
 8017b30:	4b14      	ldr	r3, [pc, #80]	; (8017b84 <interrupt_record+0x384>)
 8017b32:	681b      	ldr	r3, [r3, #0]
 8017b34:	60bb      	str	r3, [r7, #8]
				r_data[3] = encoder_R;
 8017b36:	4b14      	ldr	r3, [pc, #80]	; (8017b88 <interrupt_record+0x388>)
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017b3c:	463b      	mov	r3, r7
 8017b3e:	2104      	movs	r1, #4
 8017b40:	4618      	mov	r0, r3
 8017b42:	f7ff fd93 	bl	801766c <record_data>
			}
	if (record_mode == 12) {
 8017b46:	4b0c      	ldr	r3, [pc, #48]	; (8017b78 <interrupt_record+0x378>)
 8017b48:	781b      	ldrb	r3, [r3, #0]
 8017b4a:	2b0c      	cmp	r3, #12
 8017b4c:	d110      	bne.n	8017b70 <interrupt_record+0x370>
		r_data[0] = turning.velocity;
 8017b4e:	4b0f      	ldr	r3, [pc, #60]	; (8017b8c <interrupt_record+0x38c>)
 8017b50:	681b      	ldr	r3, [r3, #0]
 8017b52:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8017b54:	4b0e      	ldr	r3, [pc, #56]	; (8017b90 <interrupt_record+0x390>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	607b      	str	r3, [r7, #4]
		r_data[2] = g_V_L;
 8017b5a:	4b0e      	ldr	r3, [pc, #56]	; (8017b94 <interrupt_record+0x394>)
 8017b5c:	681b      	ldr	r3, [r3, #0]
 8017b5e:	60bb      	str	r3, [r7, #8]
		r_data[3] = g_V_R;
 8017b60:	4b0d      	ldr	r3, [pc, #52]	; (8017b98 <interrupt_record+0x398>)
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8017b66:	463b      	mov	r3, r7
 8017b68:	2104      	movs	r1, #4
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	f7ff fd7e 	bl	801766c <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8017b70:	bf00      	nop
 8017b72:	3710      	adds	r7, #16
 8017b74:	46bd      	mov	sp, r7
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	2000f284 	.word	0x2000f284
 8017b7c:	20000228 	.word	0x20000228
 8017b80:	200006e8 	.word	0x200006e8
 8017b84:	2000022c 	.word	0x2000022c
 8017b88:	200006e4 	.word	0x200006e4
 8017b8c:	200004e8 	.word	0x200004e8
 8017b90:	2000026c 	.word	0x2000026c
 8017b94:	20000538 	.word	0x20000538
 8017b98:	2000053c 	.word	0x2000053c

08017b9c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017ba0:	4b1b      	ldr	r3, [pc, #108]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017ba2:	4a1c      	ldr	r2, [pc, #112]	; (8017c14 <MX_SPI1_Init+0x78>)
 8017ba4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017ba6:	4b1a      	ldr	r3, [pc, #104]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017ba8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017bac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017bae:	4b18      	ldr	r3, [pc, #96]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017bb4:	4b16      	ldr	r3, [pc, #88]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bb6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017bba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017bbc:	4b14      	ldr	r3, [pc, #80]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bbe:	2200      	movs	r2, #0
 8017bc0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017bc2:	4b13      	ldr	r3, [pc, #76]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017bc8:	4b11      	ldr	r3, [pc, #68]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017bd0:	4b0f      	ldr	r3, [pc, #60]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bd2:	2210      	movs	r2, #16
 8017bd4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017bd6:	4b0e      	ldr	r3, [pc, #56]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017bdc:	4b0c      	ldr	r3, [pc, #48]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bde:	2200      	movs	r2, #0
 8017be0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017be2:	4b0b      	ldr	r3, [pc, #44]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017be4:	2200      	movs	r2, #0
 8017be6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017be8:	4b09      	ldr	r3, [pc, #36]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bea:	2207      	movs	r2, #7
 8017bec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017bee:	4b08      	ldr	r3, [pc, #32]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bf0:	2200      	movs	r2, #0
 8017bf2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017bf4:	4b06      	ldr	r3, [pc, #24]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bf6:	2208      	movs	r2, #8
 8017bf8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8017bfa:	4805      	ldr	r0, [pc, #20]	; (8017c10 <MX_SPI1_Init+0x74>)
 8017bfc:	f005 ff2c 	bl	801da58 <HAL_SPI_Init>
 8017c00:	4603      	mov	r3, r0
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d001      	beq.n	8017c0a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8017c06:	f7f2 fe08 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8017c0a:	bf00      	nop
 8017c0c:	bd80      	pop	{r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	2000f294 	.word	0x2000f294
 8017c14:	40013000 	.word	0x40013000

08017c18 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8017c18:	b580      	push	{r7, lr}
 8017c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8017c1c:	4b1b      	ldr	r3, [pc, #108]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c1e:	4a1c      	ldr	r2, [pc, #112]	; (8017c90 <MX_SPI3_Init+0x78>)
 8017c20:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8017c22:	4b1a      	ldr	r3, [pc, #104]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c24:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017c28:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8017c2a:	4b18      	ldr	r3, [pc, #96]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8017c30:	4b16      	ldr	r3, [pc, #88]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c32:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017c36:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017c38:	4b14      	ldr	r3, [pc, #80]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c3a:	2200      	movs	r2, #0
 8017c3c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8017c3e:	4b13      	ldr	r3, [pc, #76]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c40:	2201      	movs	r2, #1
 8017c42:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8017c44:	4b11      	ldr	r3, [pc, #68]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c4a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017c4c:	4b0f      	ldr	r3, [pc, #60]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c4e:	2208      	movs	r2, #8
 8017c50:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017c52:	4b0e      	ldr	r3, [pc, #56]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c54:	2200      	movs	r2, #0
 8017c56:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8017c58:	4b0c      	ldr	r3, [pc, #48]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c5a:	2200      	movs	r2, #0
 8017c5c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017c5e:	4b0b      	ldr	r3, [pc, #44]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c60:	2200      	movs	r2, #0
 8017c62:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8017c64:	4b09      	ldr	r3, [pc, #36]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c66:	2207      	movs	r2, #7
 8017c68:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017c6a:	4b08      	ldr	r3, [pc, #32]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c6c:	2200      	movs	r2, #0
 8017c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017c70:	4b06      	ldr	r3, [pc, #24]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c72:	2200      	movs	r2, #0
 8017c74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017c76:	4805      	ldr	r0, [pc, #20]	; (8017c8c <MX_SPI3_Init+0x74>)
 8017c78:	f005 feee 	bl	801da58 <HAL_SPI_Init>
 8017c7c:	4603      	mov	r3, r0
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d001      	beq.n	8017c86 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8017c82:	f7f2 fdca 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017c86:	bf00      	nop
 8017c88:	bd80      	pop	{r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	2000f2f8 	.word	0x2000f2f8
 8017c90:	40003c00 	.word	0x40003c00

08017c94 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017c94:	b580      	push	{r7, lr}
 8017c96:	b08c      	sub	sp, #48	; 0x30
 8017c98:	af00      	add	r7, sp, #0
 8017c9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017c9c:	f107 031c 	add.w	r3, r7, #28
 8017ca0:	2200      	movs	r2, #0
 8017ca2:	601a      	str	r2, [r3, #0]
 8017ca4:	605a      	str	r2, [r3, #4]
 8017ca6:	609a      	str	r2, [r3, #8]
 8017ca8:	60da      	str	r2, [r3, #12]
 8017caa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	4a3d      	ldr	r2, [pc, #244]	; (8017da8 <HAL_SPI_MspInit+0x114>)
 8017cb2:	4293      	cmp	r3, r2
 8017cb4:	d129      	bne.n	8017d0a <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017cb6:	4b3d      	ldr	r3, [pc, #244]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017cba:	4a3c      	ldr	r2, [pc, #240]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8017cc2:	4b3a      	ldr	r3, [pc, #232]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017cca:	61bb      	str	r3, [r7, #24]
 8017ccc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017cce:	4b37      	ldr	r3, [pc, #220]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017cd2:	4a36      	ldr	r2, [pc, #216]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cd4:	f043 0301 	orr.w	r3, r3, #1
 8017cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017cda:	4b34      	ldr	r3, [pc, #208]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017cde:	f003 0301 	and.w	r3, r3, #1
 8017ce2:	617b      	str	r3, [r7, #20]
 8017ce4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017ce6:	23e0      	movs	r3, #224	; 0xe0
 8017ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017cea:	2302      	movs	r3, #2
 8017cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017cf2:	2300      	movs	r3, #0
 8017cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017cf6:	2305      	movs	r3, #5
 8017cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017cfa:	f107 031c 	add.w	r3, r7, #28
 8017cfe:	4619      	mov	r1, r3
 8017d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017d04:	f004 fcee 	bl	801c6e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8017d08:	e049      	b.n	8017d9e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	4a28      	ldr	r2, [pc, #160]	; (8017db0 <HAL_SPI_MspInit+0x11c>)
 8017d10:	4293      	cmp	r3, r2
 8017d12:	d144      	bne.n	8017d9e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8017d14:	4b25      	ldr	r3, [pc, #148]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d18:	4a24      	ldr	r2, [pc, #144]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8017d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8017d20:	4b22      	ldr	r3, [pc, #136]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8017d28:	613b      	str	r3, [r7, #16]
 8017d2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8017d2c:	4b1f      	ldr	r3, [pc, #124]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d30:	4a1e      	ldr	r2, [pc, #120]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d32:	f043 0304 	orr.w	r3, r3, #4
 8017d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d38:	4b1c      	ldr	r3, [pc, #112]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d3c:	f003 0304 	and.w	r3, r3, #4
 8017d40:	60fb      	str	r3, [r7, #12]
 8017d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8017d44:	4b19      	ldr	r3, [pc, #100]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d48:	4a18      	ldr	r2, [pc, #96]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d4a:	f043 0302 	orr.w	r3, r3, #2
 8017d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017d50:	4b16      	ldr	r3, [pc, #88]	; (8017dac <HAL_SPI_MspInit+0x118>)
 8017d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017d54:	f003 0302 	and.w	r3, r3, #2
 8017d58:	60bb      	str	r3, [r7, #8]
 8017d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8017d5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d62:	2302      	movs	r3, #2
 8017d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d66:	2300      	movs	r3, #0
 8017d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d6a:	2300      	movs	r3, #0
 8017d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017d6e:	2306      	movs	r3, #6
 8017d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017d72:	f107 031c 	add.w	r3, r7, #28
 8017d76:	4619      	mov	r1, r3
 8017d78:	480e      	ldr	r0, [pc, #56]	; (8017db4 <HAL_SPI_MspInit+0x120>)
 8017d7a:	f004 fcb3 	bl	801c6e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8017d7e:	2320      	movs	r3, #32
 8017d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017d82:	2302      	movs	r3, #2
 8017d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017d86:	2300      	movs	r3, #0
 8017d88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017d8a:	2300      	movs	r3, #0
 8017d8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8017d8e:	2306      	movs	r3, #6
 8017d90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017d92:	f107 031c 	add.w	r3, r7, #28
 8017d96:	4619      	mov	r1, r3
 8017d98:	4807      	ldr	r0, [pc, #28]	; (8017db8 <HAL_SPI_MspInit+0x124>)
 8017d9a:	f004 fca3 	bl	801c6e4 <HAL_GPIO_Init>
}
 8017d9e:	bf00      	nop
 8017da0:	3730      	adds	r7, #48	; 0x30
 8017da2:	46bd      	mov	sp, r7
 8017da4:	bd80      	pop	{r7, pc}
 8017da6:	bf00      	nop
 8017da8:	40013000 	.word	0x40013000
 8017dac:	40021000 	.word	0x40021000
 8017db0:	40003c00 	.word	0x40003c00
 8017db4:	48000800 	.word	0x48000800
 8017db8:	48000400 	.word	0x48000400

08017dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b082      	sub	sp, #8
 8017dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017dc2:	4b0f      	ldr	r3, [pc, #60]	; (8017e00 <HAL_MspInit+0x44>)
 8017dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017dc6:	4a0e      	ldr	r2, [pc, #56]	; (8017e00 <HAL_MspInit+0x44>)
 8017dc8:	f043 0301 	orr.w	r3, r3, #1
 8017dcc:	6613      	str	r3, [r2, #96]	; 0x60
 8017dce:	4b0c      	ldr	r3, [pc, #48]	; (8017e00 <HAL_MspInit+0x44>)
 8017dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017dd2:	f003 0301 	and.w	r3, r3, #1
 8017dd6:	607b      	str	r3, [r7, #4]
 8017dd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017dda:	4b09      	ldr	r3, [pc, #36]	; (8017e00 <HAL_MspInit+0x44>)
 8017ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dde:	4a08      	ldr	r2, [pc, #32]	; (8017e00 <HAL_MspInit+0x44>)
 8017de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017de4:	6593      	str	r3, [r2, #88]	; 0x58
 8017de6:	4b06      	ldr	r3, [pc, #24]	; (8017e00 <HAL_MspInit+0x44>)
 8017de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dee:	603b      	str	r3, [r7, #0]
 8017df0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017df2:	f004 feb5 	bl	801cb60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017df6:	bf00      	nop
 8017df8:	3708      	adds	r7, #8
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}
 8017dfe:	bf00      	nop
 8017e00:	40021000 	.word	0x40021000

08017e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017e04:	b480      	push	{r7}
 8017e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8017e08:	e7fe      	b.n	8017e08 <NMI_Handler+0x4>

08017e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017e0a:	b480      	push	{r7}
 8017e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017e0e:	e7fe      	b.n	8017e0e <HardFault_Handler+0x4>

08017e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017e10:	b480      	push	{r7}
 8017e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017e14:	e7fe      	b.n	8017e14 <MemManage_Handler+0x4>

08017e16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017e16:	b480      	push	{r7}
 8017e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017e1a:	e7fe      	b.n	8017e1a <BusFault_Handler+0x4>

08017e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017e1c:	b480      	push	{r7}
 8017e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017e20:	e7fe      	b.n	8017e20 <UsageFault_Handler+0x4>

08017e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017e22:	b480      	push	{r7}
 8017e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017e26:	bf00      	nop
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017e30:	b480      	push	{r7}
 8017e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017e34:	bf00      	nop
 8017e36:	46bd      	mov	sp, r7
 8017e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3c:	4770      	bx	lr

08017e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017e3e:	b480      	push	{r7}
 8017e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017e42:	bf00      	nop
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr

08017e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017e4c:	b580      	push	{r7, lr}
 8017e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017e50:	f001 fbf0 	bl	8019634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017e54:	bf00      	nop
 8017e56:	bd80      	pop	{r7, pc}

08017e58 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8017e58:	b580      	push	{r7, lr}
 8017e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8017e5c:	4802      	ldr	r0, [pc, #8]	; (8017e68 <DMA1_Channel1_IRQHandler+0x10>)
 8017e5e:	f004 f889 	bl	801bf74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017e62:	bf00      	nop
 8017e64:	bd80      	pop	{r7, pc}
 8017e66:	bf00      	nop
 8017e68:	200007ac 	.word	0x200007ac

08017e6c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017e70:	4802      	ldr	r0, [pc, #8]	; (8017e7c <ADC1_2_IRQHandler+0x10>)
 8017e72:	f002 fb8f 	bl	801a594 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8017e76:	bf00      	nop
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20000740 	.word	0x20000740

08017e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017e84:	480d      	ldr	r0, [pc, #52]	; (8017ebc <TIM6_DAC_IRQHandler+0x3c>)
 8017e86:	f006 ffc7 	bl	801ee18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 8017e8a:	f7f0 fdc5 	bl	8008a18 <interrupt_timer>
  interupt_calSensor();
 8017e8e:	f7ea f919 	bl	80020c4 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017e92:	f7f0 fae3 	bl	800845c <ICM20602_DataUpdate>
  interrupt_calGyro();
 8017e96:	f7e9 ff23 	bl	8001ce0 <interrupt_calGyro>
  AS5047_DataUpdate();
 8017e9a:	f7ef ffaf 	bl	8007dfc <AS5047_DataUpdate>
  interupt_calEncoder();
 8017e9e:	f7e9 f8fb 	bl	8001098 <interupt_calEncoder>
  interupt_calFusion();
 8017ea2:	f7e9 fd25 	bl	80018f0 <interupt_calFusion>
  interrupt_WallCut();
 8017ea6:	f7ee ff13 	bl	8006cd0 <interrupt_WallCut>
  interupt_DriveMotor();
 8017eaa:	f7ea fa7d 	bl	80023a8 <interupt_DriveMotor>

  interrupt_FailSafe();
 8017eae:	f7f2 fa07 	bl	800a2c0 <interrupt_FailSafe>
  interrupt_record();
 8017eb2:	f7ff fca5 	bl	8017800 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017eb6:	bf00      	nop
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	2000f360 	.word	0x2000f360

08017ec0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017ec0:	b480      	push	{r7}
 8017ec2:	af00      	add	r7, sp, #0
	return 1;
 8017ec4:	2301      	movs	r3, #1
}
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	46bd      	mov	sp, r7
 8017eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ece:	4770      	bx	lr

08017ed0 <_kill>:

int _kill(int pid, int sig)
{
 8017ed0:	b580      	push	{r7, lr}
 8017ed2:	b082      	sub	sp, #8
 8017ed4:	af00      	add	r7, sp, #0
 8017ed6:	6078      	str	r0, [r7, #4]
 8017ed8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017eda:	f008 fe71 	bl	8020bc0 <__errno>
 8017ede:	4603      	mov	r3, r0
 8017ee0:	2216      	movs	r2, #22
 8017ee2:	601a      	str	r2, [r3, #0]
	return -1;
 8017ee4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017ee8:	4618      	mov	r0, r3
 8017eea:	3708      	adds	r7, #8
 8017eec:	46bd      	mov	sp, r7
 8017eee:	bd80      	pop	{r7, pc}

08017ef0 <_exit>:

void _exit (int status)
{
 8017ef0:	b580      	push	{r7, lr}
 8017ef2:	b082      	sub	sp, #8
 8017ef4:	af00      	add	r7, sp, #0
 8017ef6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017ef8:	f04f 31ff 	mov.w	r1, #4294967295
 8017efc:	6878      	ldr	r0, [r7, #4]
 8017efe:	f7ff ffe7 	bl	8017ed0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017f02:	e7fe      	b.n	8017f02 <_exit+0x12>

08017f04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017f04:	b580      	push	{r7, lr}
 8017f06:	b086      	sub	sp, #24
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	60f8      	str	r0, [r7, #12]
 8017f0c:	60b9      	str	r1, [r7, #8]
 8017f0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f10:	2300      	movs	r3, #0
 8017f12:	617b      	str	r3, [r7, #20]
 8017f14:	e00a      	b.n	8017f2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017f16:	f3af 8000 	nop.w
 8017f1a:	4601      	mov	r1, r0
 8017f1c:	68bb      	ldr	r3, [r7, #8]
 8017f1e:	1c5a      	adds	r2, r3, #1
 8017f20:	60ba      	str	r2, [r7, #8]
 8017f22:	b2ca      	uxtb	r2, r1
 8017f24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f26:	697b      	ldr	r3, [r7, #20]
 8017f28:	3301      	adds	r3, #1
 8017f2a:	617b      	str	r3, [r7, #20]
 8017f2c:	697a      	ldr	r2, [r7, #20]
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	429a      	cmp	r2, r3
 8017f32:	dbf0      	blt.n	8017f16 <_read+0x12>
	}

return len;
 8017f34:	687b      	ldr	r3, [r7, #4]
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3718      	adds	r7, #24
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
	...

08017f40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b086      	sub	sp, #24
 8017f44:	af00      	add	r7, sp, #0
 8017f46:	60f8      	str	r0, [r7, #12]
 8017f48:	60b9      	str	r1, [r7, #8]
 8017f4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	617b      	str	r3, [r7, #20]
 8017f50:	e00a      	b.n	8017f68 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 8017f52:	68b9      	ldr	r1, [r7, #8]
 8017f54:	1c4b      	adds	r3, r1, #1
 8017f56:	60bb      	str	r3, [r7, #8]
 8017f58:	2301      	movs	r3, #1
 8017f5a:	2201      	movs	r2, #1
 8017f5c:	4807      	ldr	r0, [pc, #28]	; (8017f7c <_write+0x3c>)
 8017f5e:	f007 ffe5 	bl	801ff2c <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017f62:	697b      	ldr	r3, [r7, #20]
 8017f64:	3301      	adds	r3, #1
 8017f66:	617b      	str	r3, [r7, #20]
 8017f68:	697a      	ldr	r2, [r7, #20]
 8017f6a:	687b      	ldr	r3, [r7, #4]
 8017f6c:	429a      	cmp	r2, r3
 8017f6e:	dbf0      	blt.n	8017f52 <_write+0x12>
	}
	return len;
 8017f70:	687b      	ldr	r3, [r7, #4]
}
 8017f72:	4618      	mov	r0, r3
 8017f74:	3718      	adds	r7, #24
 8017f76:	46bd      	mov	sp, r7
 8017f78:	bd80      	pop	{r7, pc}
 8017f7a:	bf00      	nop
 8017f7c:	2000fd3c 	.word	0x2000fd3c

08017f80 <_close>:

int _close(int file)
{
 8017f80:	b480      	push	{r7}
 8017f82:	b083      	sub	sp, #12
 8017f84:	af00      	add	r7, sp, #0
 8017f86:	6078      	str	r0, [r7, #4]
	return -1;
 8017f88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr

08017f98 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017f98:	b480      	push	{r7}
 8017f9a:	b083      	sub	sp, #12
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
 8017fa0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017fa8:	605a      	str	r2, [r3, #4]
	return 0;
 8017faa:	2300      	movs	r3, #0
}
 8017fac:	4618      	mov	r0, r3
 8017fae:	370c      	adds	r7, #12
 8017fb0:	46bd      	mov	sp, r7
 8017fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb6:	4770      	bx	lr

08017fb8 <_isatty>:

int _isatty(int file)
{
 8017fb8:	b480      	push	{r7}
 8017fba:	b083      	sub	sp, #12
 8017fbc:	af00      	add	r7, sp, #0
 8017fbe:	6078      	str	r0, [r7, #4]
	return 1;
 8017fc0:	2301      	movs	r3, #1
}
 8017fc2:	4618      	mov	r0, r3
 8017fc4:	370c      	adds	r7, #12
 8017fc6:	46bd      	mov	sp, r7
 8017fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fcc:	4770      	bx	lr

08017fce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017fce:	b480      	push	{r7}
 8017fd0:	b085      	sub	sp, #20
 8017fd2:	af00      	add	r7, sp, #0
 8017fd4:	60f8      	str	r0, [r7, #12]
 8017fd6:	60b9      	str	r1, [r7, #8]
 8017fd8:	607a      	str	r2, [r7, #4]
	return 0;
 8017fda:	2300      	movs	r3, #0
}
 8017fdc:	4618      	mov	r0, r3
 8017fde:	3714      	adds	r7, #20
 8017fe0:	46bd      	mov	sp, r7
 8017fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fe6:	4770      	bx	lr

08017fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017fe8:	b580      	push	{r7, lr}
 8017fea:	b086      	sub	sp, #24
 8017fec:	af00      	add	r7, sp, #0
 8017fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017ff0:	4a14      	ldr	r2, [pc, #80]	; (8018044 <_sbrk+0x5c>)
 8017ff2:	4b15      	ldr	r3, [pc, #84]	; (8018048 <_sbrk+0x60>)
 8017ff4:	1ad3      	subs	r3, r2, r3
 8017ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017ff8:	697b      	ldr	r3, [r7, #20]
 8017ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017ffc:	4b13      	ldr	r3, [pc, #76]	; (801804c <_sbrk+0x64>)
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	2b00      	cmp	r3, #0
 8018002:	d102      	bne.n	801800a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018004:	4b11      	ldr	r3, [pc, #68]	; (801804c <_sbrk+0x64>)
 8018006:	4a12      	ldr	r2, [pc, #72]	; (8018050 <_sbrk+0x68>)
 8018008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801800a:	4b10      	ldr	r3, [pc, #64]	; (801804c <_sbrk+0x64>)
 801800c:	681a      	ldr	r2, [r3, #0]
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	4413      	add	r3, r2
 8018012:	693a      	ldr	r2, [r7, #16]
 8018014:	429a      	cmp	r2, r3
 8018016:	d207      	bcs.n	8018028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8018018:	f008 fdd2 	bl	8020bc0 <__errno>
 801801c:	4603      	mov	r3, r0
 801801e:	220c      	movs	r2, #12
 8018020:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018022:	f04f 33ff 	mov.w	r3, #4294967295
 8018026:	e009      	b.n	801803c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8018028:	4b08      	ldr	r3, [pc, #32]	; (801804c <_sbrk+0x64>)
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801802e:	4b07      	ldr	r3, [pc, #28]	; (801804c <_sbrk+0x64>)
 8018030:	681a      	ldr	r2, [r3, #0]
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4413      	add	r3, r2
 8018036:	4a05      	ldr	r2, [pc, #20]	; (801804c <_sbrk+0x64>)
 8018038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801803a:	68fb      	ldr	r3, [r7, #12]
}
 801803c:	4618      	mov	r0, r3
 801803e:	3718      	adds	r7, #24
 8018040:	46bd      	mov	sp, r7
 8018042:	bd80      	pop	{r7, pc}
 8018044:	2001c000 	.word	0x2001c000
 8018048:	00000400 	.word	0x00000400
 801804c:	2000f35c 	.word	0x2000f35c
 8018050:	2000fde0 	.word	0x2000fde0

08018054 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8018054:	b480      	push	{r7}
 8018056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8018058:	4b06      	ldr	r3, [pc, #24]	; (8018074 <SystemInit+0x20>)
 801805a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801805e:	4a05      	ldr	r2, [pc, #20]	; (8018074 <SystemInit+0x20>)
 8018060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8018064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018068:	bf00      	nop
 801806a:	46bd      	mov	sp, r7
 801806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018070:	4770      	bx	lr
 8018072:	bf00      	nop
 8018074:	e000ed00 	.word	0xe000ed00

08018078 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8018078:	b580      	push	{r7, lr}
 801807a:	b084      	sub	sp, #16
 801807c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801807e:	1d3b      	adds	r3, r7, #4
 8018080:	2200      	movs	r2, #0
 8018082:	601a      	str	r2, [r3, #0]
 8018084:	605a      	str	r2, [r3, #4]
 8018086:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8018088:	4b14      	ldr	r3, [pc, #80]	; (80180dc <MX_TIM6_Init+0x64>)
 801808a:	4a15      	ldr	r2, [pc, #84]	; (80180e0 <MX_TIM6_Init+0x68>)
 801808c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801808e:	4b13      	ldr	r3, [pc, #76]	; (80180dc <MX_TIM6_Init+0x64>)
 8018090:	2254      	movs	r2, #84	; 0x54
 8018092:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018094:	4b11      	ldr	r3, [pc, #68]	; (80180dc <MX_TIM6_Init+0x64>)
 8018096:	2200      	movs	r2, #0
 8018098:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801809a:	4b10      	ldr	r3, [pc, #64]	; (80180dc <MX_TIM6_Init+0x64>)
 801809c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80180a0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80180a2:	4b0e      	ldr	r3, [pc, #56]	; (80180dc <MX_TIM6_Init+0x64>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80180a8:	480c      	ldr	r0, [pc, #48]	; (80180dc <MX_TIM6_Init+0x64>)
 80180aa:	f006 fbed 	bl	801e888 <HAL_TIM_Base_Init>
 80180ae:	4603      	mov	r3, r0
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d001      	beq.n	80180b8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80180b4:	f7f2 fbb1 	bl	800a81a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80180b8:	2300      	movs	r3, #0
 80180ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80180bc:	2300      	movs	r3, #0
 80180be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80180c0:	1d3b      	adds	r3, r7, #4
 80180c2:	4619      	mov	r1, r3
 80180c4:	4805      	ldr	r0, [pc, #20]	; (80180dc <MX_TIM6_Init+0x64>)
 80180c6:	f007 fd5b 	bl	801fb80 <HAL_TIMEx_MasterConfigSynchronization>
 80180ca:	4603      	mov	r3, r0
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d001      	beq.n	80180d4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80180d0:	f7f2 fba3 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80180d4:	bf00      	nop
 80180d6:	3710      	adds	r7, #16
 80180d8:	46bd      	mov	sp, r7
 80180da:	bd80      	pop	{r7, pc}
 80180dc:	2000f360 	.word	0x2000f360
 80180e0:	40001000 	.word	0x40001000

080180e4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b098      	sub	sp, #96	; 0x60
 80180e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80180ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80180ee:	2200      	movs	r2, #0
 80180f0:	601a      	str	r2, [r3, #0]
 80180f2:	605a      	str	r2, [r3, #4]
 80180f4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80180f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80180fa:	2200      	movs	r2, #0
 80180fc:	601a      	str	r2, [r3, #0]
 80180fe:	605a      	str	r2, [r3, #4]
 8018100:	609a      	str	r2, [r3, #8]
 8018102:	60da      	str	r2, [r3, #12]
 8018104:	611a      	str	r2, [r3, #16]
 8018106:	615a      	str	r2, [r3, #20]
 8018108:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801810a:	1d3b      	adds	r3, r7, #4
 801810c:	2234      	movs	r2, #52	; 0x34
 801810e:	2100      	movs	r1, #0
 8018110:	4618      	mov	r0, r3
 8018112:	f008 fd8d 	bl	8020c30 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8018116:	4b41      	ldr	r3, [pc, #260]	; (801821c <MX_TIM8_Init+0x138>)
 8018118:	4a41      	ldr	r2, [pc, #260]	; (8018220 <MX_TIM8_Init+0x13c>)
 801811a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 801811c:	4b3f      	ldr	r3, [pc, #252]	; (801821c <MX_TIM8_Init+0x138>)
 801811e:	2201      	movs	r2, #1
 8018120:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018122:	4b3e      	ldr	r3, [pc, #248]	; (801821c <MX_TIM8_Init+0x138>)
 8018124:	2200      	movs	r2, #0
 8018126:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 8018128:	4b3c      	ldr	r3, [pc, #240]	; (801821c <MX_TIM8_Init+0x138>)
 801812a:	f240 628f 	movw	r2, #1679	; 0x68f
 801812e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018130:	4b3a      	ldr	r3, [pc, #232]	; (801821c <MX_TIM8_Init+0x138>)
 8018132:	2200      	movs	r2, #0
 8018134:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8018136:	4b39      	ldr	r3, [pc, #228]	; (801821c <MX_TIM8_Init+0x138>)
 8018138:	2200      	movs	r2, #0
 801813a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801813c:	4b37      	ldr	r3, [pc, #220]	; (801821c <MX_TIM8_Init+0x138>)
 801813e:	2200      	movs	r2, #0
 8018140:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8018142:	4836      	ldr	r0, [pc, #216]	; (801821c <MX_TIM8_Init+0x138>)
 8018144:	f006 fc68 	bl	801ea18 <HAL_TIM_PWM_Init>
 8018148:	4603      	mov	r3, r0
 801814a:	2b00      	cmp	r3, #0
 801814c:	d001      	beq.n	8018152 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 801814e:	f7f2 fb64 	bl	800a81a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8018152:	2300      	movs	r3, #0
 8018154:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8018156:	2300      	movs	r3, #0
 8018158:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801815a:	2300      	movs	r3, #0
 801815c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801815e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8018162:	4619      	mov	r1, r3
 8018164:	482d      	ldr	r0, [pc, #180]	; (801821c <MX_TIM8_Init+0x138>)
 8018166:	f007 fd0b 	bl	801fb80 <HAL_TIMEx_MasterConfigSynchronization>
 801816a:	4603      	mov	r3, r0
 801816c:	2b00      	cmp	r3, #0
 801816e:	d001      	beq.n	8018174 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8018170:	f7f2 fb53 	bl	800a81a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8018174:	2360      	movs	r3, #96	; 0x60
 8018176:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8018178:	f240 13a3 	movw	r3, #419	; 0x1a3
 801817c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801817e:	2300      	movs	r3, #0
 8018180:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8018182:	2300      	movs	r3, #0
 8018184:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8018186:	2300      	movs	r3, #0
 8018188:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801818a:	2300      	movs	r3, #0
 801818c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801818e:	2300      	movs	r3, #0
 8018190:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8018192:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8018196:	2200      	movs	r2, #0
 8018198:	4619      	mov	r1, r3
 801819a:	4820      	ldr	r0, [pc, #128]	; (801821c <MX_TIM8_Init+0x138>)
 801819c:	f006 ffbc 	bl	801f118 <HAL_TIM_PWM_ConfigChannel>
 80181a0:	4603      	mov	r3, r0
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d001      	beq.n	80181aa <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 80181a6:	f7f2 fb38 	bl	800a81a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80181aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80181ae:	2208      	movs	r2, #8
 80181b0:	4619      	mov	r1, r3
 80181b2:	481a      	ldr	r0, [pc, #104]	; (801821c <MX_TIM8_Init+0x138>)
 80181b4:	f006 ffb0 	bl	801f118 <HAL_TIM_PWM_ConfigChannel>
 80181b8:	4603      	mov	r3, r0
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d001      	beq.n	80181c2 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 80181be:	f7f2 fb2c 	bl	800a81a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80181c2:	2300      	movs	r3, #0
 80181c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80181c6:	2300      	movs	r3, #0
 80181c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80181ca:	2300      	movs	r3, #0
 80181cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80181ce:	2300      	movs	r3, #0
 80181d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80181d2:	2300      	movs	r3, #0
 80181d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80181d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80181da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80181dc:	2300      	movs	r3, #0
 80181de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80181e0:	2300      	movs	r3, #0
 80181e2:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80181e4:	2300      	movs	r3, #0
 80181e6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80181e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80181ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80181ee:	2300      	movs	r3, #0
 80181f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80181f2:	2300      	movs	r3, #0
 80181f4:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80181f6:	2300      	movs	r3, #0
 80181f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80181fa:	1d3b      	adds	r3, r7, #4
 80181fc:	4619      	mov	r1, r3
 80181fe:	4807      	ldr	r0, [pc, #28]	; (801821c <MX_TIM8_Init+0x138>)
 8018200:	f007 fd4c 	bl	801fc9c <HAL_TIMEx_ConfigBreakDeadTime>
 8018204:	4603      	mov	r3, r0
 8018206:	2b00      	cmp	r3, #0
 8018208:	d001      	beq.n	801820e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801820a:	f7f2 fb06 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 801820e:	4803      	ldr	r0, [pc, #12]	; (801821c <MX_TIM8_Init+0x138>)
 8018210:	f000 f8da 	bl	80183c8 <HAL_TIM_MspPostInit>

}
 8018214:	bf00      	nop
 8018216:	3760      	adds	r7, #96	; 0x60
 8018218:	46bd      	mov	sp, r7
 801821a:	bd80      	pop	{r7, pc}
 801821c:	2000f3ac 	.word	0x2000f3ac
 8018220:	40013400 	.word	0x40013400

08018224 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	b094      	sub	sp, #80	; 0x50
 8018228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 801822a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801822e:	2200      	movs	r2, #0
 8018230:	601a      	str	r2, [r3, #0]
 8018232:	605a      	str	r2, [r3, #4]
 8018234:	609a      	str	r2, [r3, #8]
 8018236:	60da      	str	r2, [r3, #12]
 8018238:	611a      	str	r2, [r3, #16]
 801823a:	615a      	str	r2, [r3, #20]
 801823c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801823e:	463b      	mov	r3, r7
 8018240:	2234      	movs	r2, #52	; 0x34
 8018242:	2100      	movs	r1, #0
 8018244:	4618      	mov	r0, r3
 8018246:	f008 fcf3 	bl	8020c30 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 801824a:	4b30      	ldr	r3, [pc, #192]	; (801830c <MX_TIM16_Init+0xe8>)
 801824c:	4a30      	ldr	r2, [pc, #192]	; (8018310 <MX_TIM16_Init+0xec>)
 801824e:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 8018250:	4b2e      	ldr	r3, [pc, #184]	; (801830c <MX_TIM16_Init+0xe8>)
 8018252:	2201      	movs	r2, #1
 8018254:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018256:	4b2d      	ldr	r3, [pc, #180]	; (801830c <MX_TIM16_Init+0xe8>)
 8018258:	2200      	movs	r2, #0
 801825a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 801825c:	4b2b      	ldr	r3, [pc, #172]	; (801830c <MX_TIM16_Init+0xe8>)
 801825e:	2264      	movs	r2, #100	; 0x64
 8018260:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018262:	4b2a      	ldr	r3, [pc, #168]	; (801830c <MX_TIM16_Init+0xe8>)
 8018264:	2200      	movs	r2, #0
 8018266:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8018268:	4b28      	ldr	r3, [pc, #160]	; (801830c <MX_TIM16_Init+0xe8>)
 801826a:	2200      	movs	r2, #0
 801826c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801826e:	4b27      	ldr	r3, [pc, #156]	; (801830c <MX_TIM16_Init+0xe8>)
 8018270:	2200      	movs	r2, #0
 8018272:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8018274:	4825      	ldr	r0, [pc, #148]	; (801830c <MX_TIM16_Init+0xe8>)
 8018276:	f006 fb07 	bl	801e888 <HAL_TIM_Base_Init>
 801827a:	4603      	mov	r3, r0
 801827c:	2b00      	cmp	r3, #0
 801827e:	d001      	beq.n	8018284 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8018280:	f7f2 facb 	bl	800a81a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8018284:	4821      	ldr	r0, [pc, #132]	; (801830c <MX_TIM16_Init+0xe8>)
 8018286:	f006 fbc7 	bl	801ea18 <HAL_TIM_PWM_Init>
 801828a:	4603      	mov	r3, r0
 801828c:	2b00      	cmp	r3, #0
 801828e:	d001      	beq.n	8018294 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8018290:	f7f2 fac3 	bl	800a81a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8018294:	2360      	movs	r3, #96	; 0x60
 8018296:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8018298:	231e      	movs	r3, #30
 801829a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801829c:	2300      	movs	r3, #0
 801829e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80182a0:	2300      	movs	r3, #0
 80182a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80182a4:	2300      	movs	r3, #0
 80182a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80182a8:	2300      	movs	r3, #0
 80182aa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80182ac:	2300      	movs	r3, #0
 80182ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80182b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80182b4:	2200      	movs	r2, #0
 80182b6:	4619      	mov	r1, r3
 80182b8:	4814      	ldr	r0, [pc, #80]	; (801830c <MX_TIM16_Init+0xe8>)
 80182ba:	f006 ff2d 	bl	801f118 <HAL_TIM_PWM_ConfigChannel>
 80182be:	4603      	mov	r3, r0
 80182c0:	2b00      	cmp	r3, #0
 80182c2:	d001      	beq.n	80182c8 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 80182c4:	f7f2 faa9 	bl	800a81a <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80182c8:	2300      	movs	r3, #0
 80182ca:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80182cc:	2300      	movs	r3, #0
 80182ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80182d0:	2300      	movs	r3, #0
 80182d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80182d4:	2300      	movs	r3, #0
 80182d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80182d8:	2300      	movs	r3, #0
 80182da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80182dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80182e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80182e2:	2300      	movs	r3, #0
 80182e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80182e6:	2300      	movs	r3, #0
 80182e8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80182ea:	463b      	mov	r3, r7
 80182ec:	4619      	mov	r1, r3
 80182ee:	4807      	ldr	r0, [pc, #28]	; (801830c <MX_TIM16_Init+0xe8>)
 80182f0:	f007 fcd4 	bl	801fc9c <HAL_TIMEx_ConfigBreakDeadTime>
 80182f4:	4603      	mov	r3, r0
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d001      	beq.n	80182fe <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 80182fa:	f7f2 fa8e 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80182fe:	4803      	ldr	r0, [pc, #12]	; (801830c <MX_TIM16_Init+0xe8>)
 8018300:	f000 f862 	bl	80183c8 <HAL_TIM_MspPostInit>

}
 8018304:	bf00      	nop
 8018306:	3750      	adds	r7, #80	; 0x50
 8018308:	46bd      	mov	sp, r7
 801830a:	bd80      	pop	{r7, pc}
 801830c:	2000f3f8 	.word	0x2000f3f8
 8018310:	40014400 	.word	0x40014400

08018314 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8018314:	b580      	push	{r7, lr}
 8018316:	b084      	sub	sp, #16
 8018318:	af00      	add	r7, sp, #0
 801831a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	681b      	ldr	r3, [r3, #0]
 8018320:	4a16      	ldr	r2, [pc, #88]	; (801837c <HAL_TIM_Base_MspInit+0x68>)
 8018322:	4293      	cmp	r3, r2
 8018324:	d114      	bne.n	8018350 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8018326:	4b16      	ldr	r3, [pc, #88]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 8018328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801832a:	4a15      	ldr	r2, [pc, #84]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 801832c:	f043 0310 	orr.w	r3, r3, #16
 8018330:	6593      	str	r3, [r2, #88]	; 0x58
 8018332:	4b13      	ldr	r3, [pc, #76]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 8018334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018336:	f003 0310 	and.w	r3, r3, #16
 801833a:	60fb      	str	r3, [r7, #12]
 801833c:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 801833e:	2200      	movs	r2, #0
 8018340:	2103      	movs	r1, #3
 8018342:	2036      	movs	r0, #54	; 0x36
 8018344:	f003 fc65 	bl	801bc12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8018348:	2036      	movs	r0, #54	; 0x36
 801834a:	f003 fc7c 	bl	801bc46 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 801834e:	e010      	b.n	8018372 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a0b      	ldr	r2, [pc, #44]	; (8018384 <HAL_TIM_Base_MspInit+0x70>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d10b      	bne.n	8018372 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 801835a:	4b09      	ldr	r3, [pc, #36]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 801835c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801835e:	4a08      	ldr	r2, [pc, #32]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 8018360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8018364:	6613      	str	r3, [r2, #96]	; 0x60
 8018366:	4b06      	ldr	r3, [pc, #24]	; (8018380 <HAL_TIM_Base_MspInit+0x6c>)
 8018368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801836a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801836e:	60bb      	str	r3, [r7, #8]
 8018370:	68bb      	ldr	r3, [r7, #8]
}
 8018372:	bf00      	nop
 8018374:	3710      	adds	r7, #16
 8018376:	46bd      	mov	sp, r7
 8018378:	bd80      	pop	{r7, pc}
 801837a:	bf00      	nop
 801837c:	40001000 	.word	0x40001000
 8018380:	40021000 	.word	0x40021000
 8018384:	40014400 	.word	0x40014400

08018388 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8018388:	b480      	push	{r7}
 801838a:	b085      	sub	sp, #20
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4a0a      	ldr	r2, [pc, #40]	; (80183c0 <HAL_TIM_PWM_MspInit+0x38>)
 8018396:	4293      	cmp	r3, r2
 8018398:	d10b      	bne.n	80183b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801839a:	4b0a      	ldr	r3, [pc, #40]	; (80183c4 <HAL_TIM_PWM_MspInit+0x3c>)
 801839c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801839e:	4a09      	ldr	r2, [pc, #36]	; (80183c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80183a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80183a4:	6613      	str	r3, [r2, #96]	; 0x60
 80183a6:	4b07      	ldr	r3, [pc, #28]	; (80183c4 <HAL_TIM_PWM_MspInit+0x3c>)
 80183a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80183aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80183ae:	60fb      	str	r3, [r7, #12]
 80183b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80183b2:	bf00      	nop
 80183b4:	3714      	adds	r7, #20
 80183b6:	46bd      	mov	sp, r7
 80183b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183bc:	4770      	bx	lr
 80183be:	bf00      	nop
 80183c0:	40013400 	.word	0x40013400
 80183c4:	40021000 	.word	0x40021000

080183c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80183c8:	b580      	push	{r7, lr}
 80183ca:	b08a      	sub	sp, #40	; 0x28
 80183cc:	af00      	add	r7, sp, #0
 80183ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80183d0:	f107 0314 	add.w	r3, r7, #20
 80183d4:	2200      	movs	r2, #0
 80183d6:	601a      	str	r2, [r3, #0]
 80183d8:	605a      	str	r2, [r3, #4]
 80183da:	609a      	str	r2, [r3, #8]
 80183dc:	60da      	str	r2, [r3, #12]
 80183de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	4a2b      	ldr	r2, [pc, #172]	; (8018494 <HAL_TIM_MspPostInit+0xcc>)
 80183e6:	4293      	cmp	r3, r2
 80183e8:	d12d      	bne.n	8018446 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80183ea:	4b2b      	ldr	r3, [pc, #172]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 80183ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183ee:	4a2a      	ldr	r2, [pc, #168]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 80183f0:	f043 0302 	orr.w	r3, r3, #2
 80183f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80183f6:	4b28      	ldr	r3, [pc, #160]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 80183f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80183fa:	f003 0302 	and.w	r3, r3, #2
 80183fe:	613b      	str	r3, [r7, #16]
 8018400:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 8018402:	2340      	movs	r3, #64	; 0x40
 8018404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018406:	2302      	movs	r3, #2
 8018408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801840a:	2300      	movs	r3, #0
 801840c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801840e:	2300      	movs	r3, #0
 8018410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8018412:	2305      	movs	r3, #5
 8018414:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8018416:	f107 0314 	add.w	r3, r7, #20
 801841a:	4619      	mov	r1, r3
 801841c:	481f      	ldr	r0, [pc, #124]	; (801849c <HAL_TIM_MspPostInit+0xd4>)
 801841e:	f004 f961 	bl	801c6e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 8018422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018428:	2302      	movs	r3, #2
 801842a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801842c:	2300      	movs	r3, #0
 801842e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018430:	2300      	movs	r3, #0
 8018432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 8018434:	230a      	movs	r3, #10
 8018436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8018438:	f107 0314 	add.w	r3, r7, #20
 801843c:	4619      	mov	r1, r3
 801843e:	4817      	ldr	r0, [pc, #92]	; (801849c <HAL_TIM_MspPostInit+0xd4>)
 8018440:	f004 f950 	bl	801c6e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8018444:	e022      	b.n	801848c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	4a15      	ldr	r2, [pc, #84]	; (80184a0 <HAL_TIM_MspPostInit+0xd8>)
 801844c:	4293      	cmp	r3, r2
 801844e:	d11d      	bne.n	801848c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018450:	4b11      	ldr	r3, [pc, #68]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 8018452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018454:	4a10      	ldr	r2, [pc, #64]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 8018456:	f043 0301 	orr.w	r3, r3, #1
 801845a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801845c:	4b0e      	ldr	r3, [pc, #56]	; (8018498 <HAL_TIM_MspPostInit+0xd0>)
 801845e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018460:	f003 0301 	and.w	r3, r3, #1
 8018464:	60fb      	str	r3, [r7, #12]
 8018466:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8018468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801846c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801846e:	2302      	movs	r3, #2
 8018470:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018472:	2300      	movs	r3, #0
 8018474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018476:	2300      	movs	r3, #0
 8018478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 801847a:	2301      	movs	r3, #1
 801847c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 801847e:	f107 0314 	add.w	r3, r7, #20
 8018482:	4619      	mov	r1, r3
 8018484:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018488:	f004 f92c 	bl	801c6e4 <HAL_GPIO_Init>
}
 801848c:	bf00      	nop
 801848e:	3728      	adds	r7, #40	; 0x28
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}
 8018494:	40013400 	.word	0x40013400
 8018498:	40021000 	.word	0x40021000
 801849c:	48000400 	.word	0x48000400
 80184a0:	40014400 	.word	0x40014400

080184a4 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 80184a4:	b084      	sub	sp, #16
 80184a6:	b480      	push	{r7}
 80184a8:	b083      	sub	sp, #12
 80184aa:	af00      	add	r7, sp, #0
 80184ac:	f107 0c10 	add.w	ip, r7, #16
 80184b0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 80184b4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184b8:	f113 0f02 	cmn.w	r3, #2
 80184bc:	d102      	bne.n	80184c4 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 80184be:	69bb      	ldr	r3, [r7, #24]
 80184c0:	607b      	str	r3, [r7, #4]
 80184c2:	e083      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 80184c4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184c8:	f113 0f03 	cmn.w	r3, #3
 80184cc:	d102      	bne.n	80184d4 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 80184ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80184d0:	607b      	str	r3, [r7, #4]
 80184d2:	e07b      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 80184d4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184d8:	f113 0f04 	cmn.w	r3, #4
 80184dc:	d102      	bne.n	80184e4 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 80184de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80184e0:	607b      	str	r3, [r7, #4]
 80184e2:	e073      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 80184e4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184e8:	f113 0f05 	cmn.w	r3, #5
 80184ec:	d102      	bne.n	80184f4 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 80184ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80184f0:	607b      	str	r3, [r7, #4]
 80184f2:	e06b      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 80184f4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80184f8:	f113 0f06 	cmn.w	r3, #6
 80184fc:	d102      	bne.n	8018504 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 80184fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8018500:	607b      	str	r3, [r7, #4]
 8018502:	e063      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8018504:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018508:	f113 0f07 	cmn.w	r3, #7
 801850c:	d102      	bne.n	8018514 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 801850e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018510:	607b      	str	r3, [r7, #4]
 8018512:	e05b      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8018514:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018518:	f113 0f08 	cmn.w	r3, #8
 801851c:	d103      	bne.n	8018526 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 801851e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018522:	607b      	str	r3, [r7, #4]
 8018524:	e052      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8018526:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801852a:	f113 0f09 	cmn.w	r3, #9
 801852e:	d103      	bne.n	8018538 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8018530:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018534:	607b      	str	r3, [r7, #4]
 8018536:	e049      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8018538:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801853c:	f113 0f0a 	cmn.w	r3, #10
 8018540:	d103      	bne.n	801854a <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8018542:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018546:	607b      	str	r3, [r7, #4]
 8018548:	e040      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 801854a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801854e:	f113 0f0b 	cmn.w	r3, #11
 8018552:	d103      	bne.n	801855c <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8018554:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018558:	607b      	str	r3, [r7, #4]
 801855a:	e037      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 801855c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018560:	f113 0f0c 	cmn.w	r3, #12
 8018564:	d103      	bne.n	801856e <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8018566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801856a:	607b      	str	r3, [r7, #4]
 801856c:	e02e      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 801856e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018572:	f113 0f0d 	cmn.w	r3, #13
 8018576:	d103      	bne.n	8018580 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8018578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801857c:	607b      	str	r3, [r7, #4]
 801857e:	e025      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8018580:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018584:	f113 0f0e 	cmn.w	r3, #14
 8018588:	d103      	bne.n	8018592 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 801858a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801858e:	607b      	str	r3, [r7, #4]
 8018590:	e01c      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8018592:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8018596:	f113 0f0f 	cmn.w	r3, #15
 801859a:	d103      	bne.n	80185a4 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 801859c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80185a0:	607b      	str	r3, [r7, #4]
 80185a2:	e013      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 80185a4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185a8:	f113 0f10 	cmn.w	r3, #16
 80185ac:	d103      	bne.n	80185b6 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 80185ae:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80185b2:	607b      	str	r3, [r7, #4]
 80185b4:	e00a      	b.n	80185cc <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 80185b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80185ba:	f113 0f11 	cmn.w	r3, #17
 80185be:	d103      	bne.n	80185c8 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 80185c0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80185c4:	607b      	str	r3, [r7, #4]
 80185c6:	e001      	b.n	80185cc <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	ee07 3a90 	vmov	s15, r3
}
 80185d2:	eeb0 0a67 	vmov.f32	s0, s15
 80185d6:	370c      	adds	r7, #12
 80185d8:	46bd      	mov	sp, r7
 80185da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185de:	b004      	add	sp, #16
 80185e0:	4770      	bx	lr
	...

080185e4 <input_parameter>:

void input_parameter(void) {
 80185e4:	b480      	push	{r7}
 80185e6:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 80185e8:	4b8f      	ldr	r3, [pc, #572]	; (8018828 <input_parameter+0x244>)
 80185ea:	4a90      	ldr	r2, [pc, #576]	; (801882c <input_parameter+0x248>)
 80185ec:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 80185ee:	4b8e      	ldr	r3, [pc, #568]	; (8018828 <input_parameter+0x244>)
 80185f0:	4a8e      	ldr	r2, [pc, #568]	; (801882c <input_parameter+0x248>)
 80185f2:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 80185f4:	4b8c      	ldr	r3, [pc, #560]	; (8018828 <input_parameter+0x244>)
 80185f6:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 80185f8:	4a8b      	ldr	r2, [pc, #556]	; (8018828 <input_parameter+0x244>)
 80185fa:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 80185fc:	4b8a      	ldr	r3, [pc, #552]	; (8018828 <input_parameter+0x244>)
 80185fe:	4a8c      	ldr	r2, [pc, #560]	; (8018830 <input_parameter+0x24c>)
 8018600:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8018602:	4b89      	ldr	r3, [pc, #548]	; (8018828 <input_parameter+0x244>)
 8018604:	4a8b      	ldr	r2, [pc, #556]	; (8018834 <input_parameter+0x250>)
 8018606:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8018608:	4b87      	ldr	r3, [pc, #540]	; (8018828 <input_parameter+0x244>)
 801860a:	4a8b      	ldr	r2, [pc, #556]	; (8018838 <input_parameter+0x254>)
 801860c:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 24;
 801860e:	4b86      	ldr	r3, [pc, #536]	; (8018828 <input_parameter+0x244>)
 8018610:	4a8a      	ldr	r2, [pc, #552]	; (801883c <input_parameter+0x258>)
 8018612:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8018614:	4b84      	ldr	r3, [pc, #528]	; (8018828 <input_parameter+0x244>)
 8018616:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8018618:	4a83      	ldr	r2, [pc, #524]	; (8018828 <input_parameter+0x244>)
 801861a:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 801861c:	4b82      	ldr	r3, [pc, #520]	; (8018828 <input_parameter+0x244>)
 801861e:	4a84      	ldr	r2, [pc, #528]	; (8018830 <input_parameter+0x24c>)
 8018620:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8018622:	4b81      	ldr	r3, [pc, #516]	; (8018828 <input_parameter+0x244>)
 8018624:	4a83      	ldr	r2, [pc, #524]	; (8018834 <input_parameter+0x250>)
 8018626:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8018628:	4b7f      	ldr	r3, [pc, #508]	; (8018828 <input_parameter+0x244>)
 801862a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 801862e:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 24;
 8018630:	4b7d      	ldr	r3, [pc, #500]	; (8018828 <input_parameter+0x244>)
 8018632:	4a82      	ldr	r2, [pc, #520]	; (801883c <input_parameter+0x258>)
 8018634:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8018636:	4b82      	ldr	r3, [pc, #520]	; (8018840 <input_parameter+0x25c>)
 8018638:	4a82      	ldr	r2, [pc, #520]	; (8018844 <input_parameter+0x260>)
 801863a:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 801863c:	4b80      	ldr	r3, [pc, #512]	; (8018840 <input_parameter+0x25c>)
 801863e:	4a81      	ldr	r2, [pc, #516]	; (8018844 <input_parameter+0x260>)
 8018640:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8018642:	4b7f      	ldr	r3, [pc, #508]	; (8018840 <input_parameter+0x25c>)
 8018644:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8018646:	4a7e      	ldr	r2, [pc, #504]	; (8018840 <input_parameter+0x25c>)
 8018648:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 801864a:	4b7d      	ldr	r3, [pc, #500]	; (8018840 <input_parameter+0x25c>)
 801864c:	4a7e      	ldr	r2, [pc, #504]	; (8018848 <input_parameter+0x264>)
 801864e:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8018650:	4b7b      	ldr	r3, [pc, #492]	; (8018840 <input_parameter+0x25c>)
 8018652:	4a7e      	ldr	r2, [pc, #504]	; (801884c <input_parameter+0x268>)
 8018654:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8018656:	4b7a      	ldr	r3, [pc, #488]	; (8018840 <input_parameter+0x25c>)
 8018658:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801865c:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 801865e:	4b78      	ldr	r3, [pc, #480]	; (8018840 <input_parameter+0x25c>)
 8018660:	4a7b      	ldr	r2, [pc, #492]	; (8018850 <input_parameter+0x26c>)
 8018662:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8018664:	4b76      	ldr	r3, [pc, #472]	; (8018840 <input_parameter+0x25c>)
 8018666:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8018668:	4a75      	ldr	r2, [pc, #468]	; (8018840 <input_parameter+0x25c>)
 801866a:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 801866c:	4b74      	ldr	r3, [pc, #464]	; (8018840 <input_parameter+0x25c>)
 801866e:	4a79      	ldr	r2, [pc, #484]	; (8018854 <input_parameter+0x270>)
 8018670:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8018672:	4b73      	ldr	r3, [pc, #460]	; (8018840 <input_parameter+0x25c>)
 8018674:	4a75      	ldr	r2, [pc, #468]	; (801884c <input_parameter+0x268>)
 8018676:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8018678:	4b71      	ldr	r3, [pc, #452]	; (8018840 <input_parameter+0x25c>)
 801867a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 801867e:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8018680:	4b6f      	ldr	r3, [pc, #444]	; (8018840 <input_parameter+0x25c>)
 8018682:	4a75      	ldr	r2, [pc, #468]	; (8018858 <input_parameter+0x274>)
 8018684:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8018686:	4b68      	ldr	r3, [pc, #416]	; (8018828 <input_parameter+0x244>)
 8018688:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 801868a:	4a74      	ldr	r2, [pc, #464]	; (801885c <input_parameter+0x278>)
 801868c:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 801868e:	4b66      	ldr	r3, [pc, #408]	; (8018828 <input_parameter+0x244>)
 8018690:	edd3 7a01 	vldr	s15, [r3, #4]
 8018694:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8018860 <input_parameter+0x27c>
 8018698:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 801869c:	4b6f      	ldr	r3, [pc, #444]	; (801885c <input_parameter+0x278>)
 801869e:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 80186a2:	4b61      	ldr	r3, [pc, #388]	; (8018828 <input_parameter+0x244>)
 80186a4:	689b      	ldr	r3, [r3, #8]
 80186a6:	4a6d      	ldr	r2, [pc, #436]	; (801885c <input_parameter+0x278>)
 80186a8:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 80186aa:	4b5f      	ldr	r3, [pc, #380]	; (8018828 <input_parameter+0x244>)
 80186ac:	695b      	ldr	r3, [r3, #20]
 80186ae:	4a6b      	ldr	r2, [pc, #428]	; (801885c <input_parameter+0x278>)
 80186b0:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 80186b2:	4b5d      	ldr	r3, [pc, #372]	; (8018828 <input_parameter+0x244>)
 80186b4:	699b      	ldr	r3, [r3, #24]
 80186b6:	4a69      	ldr	r2, [pc, #420]	; (801885c <input_parameter+0x278>)
 80186b8:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80186ba:	4b5b      	ldr	r3, [pc, #364]	; (8018828 <input_parameter+0x244>)
 80186bc:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 80186c0:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80186c4:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 80186c8:	4b64      	ldr	r3, [pc, #400]	; (801885c <input_parameter+0x278>)
 80186ca:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 80186ce:	4b56      	ldr	r3, [pc, #344]	; (8018828 <input_parameter+0x244>)
 80186d0:	691b      	ldr	r3, [r3, #16]
 80186d2:	4a62      	ldr	r2, [pc, #392]	; (801885c <input_parameter+0x278>)
 80186d4:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 80186d6:	4b54      	ldr	r3, [pc, #336]	; (8018828 <input_parameter+0x244>)
 80186d8:	69db      	ldr	r3, [r3, #28]
 80186da:	4a60      	ldr	r2, [pc, #384]	; (801885c <input_parameter+0x278>)
 80186dc:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 80186de:	4b52      	ldr	r3, [pc, #328]	; (8018828 <input_parameter+0x244>)
 80186e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80186e2:	4a5e      	ldr	r2, [pc, #376]	; (801885c <input_parameter+0x278>)
 80186e4:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 80186e6:	4b50      	ldr	r3, [pc, #320]	; (8018828 <input_parameter+0x244>)
 80186e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ea:	4a5c      	ldr	r2, [pc, #368]	; (801885c <input_parameter+0x278>)
 80186ec:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80186ee:	4b4e      	ldr	r3, [pc, #312]	; (8018828 <input_parameter+0x244>)
 80186f0:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 80186f4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80186f8:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 80186fc:	4b57      	ldr	r3, [pc, #348]	; (801885c <input_parameter+0x278>)
 80186fe:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8018702:	4b49      	ldr	r3, [pc, #292]	; (8018828 <input_parameter+0x244>)
 8018704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018706:	4a55      	ldr	r2, [pc, #340]	; (801885c <input_parameter+0x278>)
 8018708:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801870a:	4b54      	ldr	r3, [pc, #336]	; (801885c <input_parameter+0x278>)
 801870c:	685b      	ldr	r3, [r3, #4]
 801870e:	4a53      	ldr	r2, [pc, #332]	; (801885c <input_parameter+0x278>)
 8018710:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8018712:	4b52      	ldr	r3, [pc, #328]	; (801885c <input_parameter+0x278>)
 8018714:	4a53      	ldr	r2, [pc, #332]	; (8018864 <input_parameter+0x280>)
 8018716:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8018718:	4b50      	ldr	r3, [pc, #320]	; (801885c <input_parameter+0x278>)
 801871a:	4a53      	ldr	r2, [pc, #332]	; (8018868 <input_parameter+0x284>)
 801871c:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 801871e:	4b4f      	ldr	r3, [pc, #316]	; (801885c <input_parameter+0x278>)
 8018720:	4a52      	ldr	r2, [pc, #328]	; (801886c <input_parameter+0x288>)
 8018722:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8018724:	4b4d      	ldr	r3, [pc, #308]	; (801885c <input_parameter+0x278>)
 8018726:	4a52      	ldr	r2, [pc, #328]	; (8018870 <input_parameter+0x28c>)
 8018728:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 801872a:	4b4c      	ldr	r3, [pc, #304]	; (801885c <input_parameter+0x278>)
 801872c:	685b      	ldr	r3, [r3, #4]
 801872e:	4a4b      	ldr	r2, [pc, #300]	; (801885c <input_parameter+0x278>)
 8018730:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8018732:	4b4a      	ldr	r3, [pc, #296]	; (801885c <input_parameter+0x278>)
 8018734:	4a4b      	ldr	r2, [pc, #300]	; (8018864 <input_parameter+0x280>)
 8018736:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8018738:	4b48      	ldr	r3, [pc, #288]	; (801885c <input_parameter+0x278>)
 801873a:	4a4b      	ldr	r2, [pc, #300]	; (8018868 <input_parameter+0x284>)
 801873c:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 801873e:	4b47      	ldr	r3, [pc, #284]	; (801885c <input_parameter+0x278>)
 8018740:	4a4c      	ldr	r2, [pc, #304]	; (8018874 <input_parameter+0x290>)
 8018742:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8018744:	4b45      	ldr	r3, [pc, #276]	; (801885c <input_parameter+0x278>)
 8018746:	4a4c      	ldr	r2, [pc, #304]	; (8018878 <input_parameter+0x294>)
 8018748:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 801874a:	4b44      	ldr	r3, [pc, #272]	; (801885c <input_parameter+0x278>)
 801874c:	685b      	ldr	r3, [r3, #4]
 801874e:	4a43      	ldr	r2, [pc, #268]	; (801885c <input_parameter+0x278>)
 8018750:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8018752:	4b42      	ldr	r3, [pc, #264]	; (801885c <input_parameter+0x278>)
 8018754:	4a49      	ldr	r2, [pc, #292]	; (801887c <input_parameter+0x298>)
 8018756:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8018758:	4b40      	ldr	r3, [pc, #256]	; (801885c <input_parameter+0x278>)
 801875a:	4a49      	ldr	r2, [pc, #292]	; (8018880 <input_parameter+0x29c>)
 801875c:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 801875e:	4b3f      	ldr	r3, [pc, #252]	; (801885c <input_parameter+0x278>)
 8018760:	4a48      	ldr	r2, [pc, #288]	; (8018884 <input_parameter+0x2a0>)
 8018762:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8018764:	4b3d      	ldr	r3, [pc, #244]	; (801885c <input_parameter+0x278>)
 8018766:	4a48      	ldr	r2, [pc, #288]	; (8018888 <input_parameter+0x2a4>)
 8018768:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 801876a:	4b3c      	ldr	r3, [pc, #240]	; (801885c <input_parameter+0x278>)
 801876c:	685b      	ldr	r3, [r3, #4]
 801876e:	4a3b      	ldr	r2, [pc, #236]	; (801885c <input_parameter+0x278>)
 8018770:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8018772:	4b3a      	ldr	r3, [pc, #232]	; (801885c <input_parameter+0x278>)
 8018774:	4a45      	ldr	r2, [pc, #276]	; (801888c <input_parameter+0x2a8>)
 8018776:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8018778:	4b38      	ldr	r3, [pc, #224]	; (801885c <input_parameter+0x278>)
 801877a:	4a41      	ldr	r2, [pc, #260]	; (8018880 <input_parameter+0x29c>)
 801877c:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 801877e:	4b37      	ldr	r3, [pc, #220]	; (801885c <input_parameter+0x278>)
 8018780:	4a43      	ldr	r2, [pc, #268]	; (8018890 <input_parameter+0x2ac>)
 8018782:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8018784:	4b35      	ldr	r3, [pc, #212]	; (801885c <input_parameter+0x278>)
 8018786:	4a43      	ldr	r2, [pc, #268]	; (8018894 <input_parameter+0x2b0>)
 8018788:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 801878a:	4b34      	ldr	r3, [pc, #208]	; (801885c <input_parameter+0x278>)
 801878c:	685b      	ldr	r3, [r3, #4]
 801878e:	4a33      	ldr	r2, [pc, #204]	; (801885c <input_parameter+0x278>)
 8018790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8018794:	4b31      	ldr	r3, [pc, #196]	; (801885c <input_parameter+0x278>)
 8018796:	4a33      	ldr	r2, [pc, #204]	; (8018864 <input_parameter+0x280>)
 8018798:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 801879c:	4b2f      	ldr	r3, [pc, #188]	; (801885c <input_parameter+0x278>)
 801879e:	4a32      	ldr	r2, [pc, #200]	; (8018868 <input_parameter+0x284>)
 80187a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 80187a4:	4b2d      	ldr	r3, [pc, #180]	; (801885c <input_parameter+0x278>)
 80187a6:	4a3c      	ldr	r2, [pc, #240]	; (8018898 <input_parameter+0x2b4>)
 80187a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 80187ac:	4b2b      	ldr	r3, [pc, #172]	; (801885c <input_parameter+0x278>)
 80187ae:	4a3b      	ldr	r2, [pc, #236]	; (801889c <input_parameter+0x2b8>)
 80187b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 80187b4:	4b29      	ldr	r3, [pc, #164]	; (801885c <input_parameter+0x278>)
 80187b6:	685b      	ldr	r3, [r3, #4]
 80187b8:	4a28      	ldr	r2, [pc, #160]	; (801885c <input_parameter+0x278>)
 80187ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 80187be:	4b27      	ldr	r3, [pc, #156]	; (801885c <input_parameter+0x278>)
 80187c0:	4a28      	ldr	r2, [pc, #160]	; (8018864 <input_parameter+0x280>)
 80187c2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 80187c6:	4b25      	ldr	r3, [pc, #148]	; (801885c <input_parameter+0x278>)
 80187c8:	4a27      	ldr	r2, [pc, #156]	; (8018868 <input_parameter+0x284>)
 80187ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 80187ce:	4b23      	ldr	r3, [pc, #140]	; (801885c <input_parameter+0x278>)
 80187d0:	4a33      	ldr	r2, [pc, #204]	; (80188a0 <input_parameter+0x2bc>)
 80187d2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 80187d6:	4b21      	ldr	r3, [pc, #132]	; (801885c <input_parameter+0x278>)
 80187d8:	4a32      	ldr	r2, [pc, #200]	; (80188a4 <input_parameter+0x2c0>)
 80187da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80187de:	4b1f      	ldr	r3, [pc, #124]	; (801885c <input_parameter+0x278>)
 80187e0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 80187e2:	4a1e      	ldr	r2, [pc, #120]	; (801885c <input_parameter+0x278>)
 80187e4:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 80187e8:	4b1c      	ldr	r3, [pc, #112]	; (801885c <input_parameter+0x278>)
 80187ea:	4a2f      	ldr	r2, [pc, #188]	; (80188a8 <input_parameter+0x2c4>)
 80187ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 80187f0:	4b1a      	ldr	r3, [pc, #104]	; (801885c <input_parameter+0x278>)
 80187f2:	4a23      	ldr	r2, [pc, #140]	; (8018880 <input_parameter+0x29c>)
 80187f4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 80187f8:	4b18      	ldr	r3, [pc, #96]	; (801885c <input_parameter+0x278>)
 80187fa:	4a2c      	ldr	r2, [pc, #176]	; (80188ac <input_parameter+0x2c8>)
 80187fc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8018800:	4b16      	ldr	r3, [pc, #88]	; (801885c <input_parameter+0x278>)
 8018802:	4a2b      	ldr	r2, [pc, #172]	; (80188b0 <input_parameter+0x2cc>)
 8018804:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018808:	4b14      	ldr	r3, [pc, #80]	; (801885c <input_parameter+0x278>)
 801880a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 801880c:	4a13      	ldr	r2, [pc, #76]	; (801885c <input_parameter+0x278>)
 801880e:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8018812:	4b12      	ldr	r3, [pc, #72]	; (801885c <input_parameter+0x278>)
 8018814:	4a24      	ldr	r2, [pc, #144]	; (80188a8 <input_parameter+0x2c4>)
 8018816:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 801881a:	4b10      	ldr	r3, [pc, #64]	; (801885c <input_parameter+0x278>)
 801881c:	4a18      	ldr	r2, [pc, #96]	; (8018880 <input_parameter+0x29c>)
 801881e:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8018822:	4b0e      	ldr	r3, [pc, #56]	; (801885c <input_parameter+0x278>)
 8018824:	e046      	b.n	80188b4 <input_parameter+0x2d0>
 8018826:	bf00      	nop
 8018828:	2000f444 	.word	0x2000f444
 801882c:	43960000 	.word	0x43960000
 8018830:	44750000 	.word	0x44750000
 8018834:	464b2000 	.word	0x464b2000
 8018838:	40400000 	.word	0x40400000
 801883c:	41c00000 	.word	0x41c00000
 8018840:	2000f58c 	.word	0x2000f58c
 8018844:	437a0000 	.word	0x437a0000
 8018848:	444f8000 	.word	0x444f8000
 801884c:	460ca000 	.word	0x460ca000
 8018850:	41a00000 	.word	0x41a00000
 8018854:	44368000 	.word	0x44368000
 8018858:	41980000 	.word	0x41980000
 801885c:	2000f6d4 	.word	0x2000f6d4
 8018860:	43480000 	.word	0x43480000
 8018864:	44160000 	.word	0x44160000
 8018868:	461c4000 	.word	0x461c4000
 801886c:	42980000 	.word	0x42980000
 8018870:	42d60000 	.word	0x42d60000
 8018874:	429a0000 	.word	0x429a0000
 8018878:	42ce0000 	.word	0x42ce0000
 801887c:	43d70000 	.word	0x43d70000
 8018880:	45fa0000 	.word	0x45fa0000
 8018884:	42820000 	.word	0x42820000
 8018888:	42a00000 	.word	0x42a00000
 801888c:	43e10000 	.word	0x43e10000
 8018890:	42700000 	.word	0x42700000
 8018894:	428e0000 	.word	0x428e0000
 8018898:	41d80000 	.word	0x41d80000
 801889c:	42b20000 	.word	0x42b20000
 80188a0:	42040000 	.word	0x42040000
 80188a4:	42b40000 	.word	0x42b40000
 80188a8:	44188000 	.word	0x44188000
 80188ac:	42860000 	.word	0x42860000
 80188b0:	42920000 	.word	0x42920000
 80188b4:	4a99      	ldr	r2, [pc, #612]	; (8018b1c <input_parameter+0x538>)
 80188b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 80188ba:	4b99      	ldr	r3, [pc, #612]	; (8018b20 <input_parameter+0x53c>)
 80188bc:	4a99      	ldr	r2, [pc, #612]	; (8018b24 <input_parameter+0x540>)
 80188be:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 80188c2:	4b97      	ldr	r3, [pc, #604]	; (8018b20 <input_parameter+0x53c>)
 80188c4:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 80188c6:	4a96      	ldr	r2, [pc, #600]	; (8018b20 <input_parameter+0x53c>)
 80188c8:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 80188cc:	4b94      	ldr	r3, [pc, #592]	; (8018b20 <input_parameter+0x53c>)
 80188ce:	4a96      	ldr	r2, [pc, #600]	; (8018b28 <input_parameter+0x544>)
 80188d0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 80188d4:	4b92      	ldr	r3, [pc, #584]	; (8018b20 <input_parameter+0x53c>)
 80188d6:	4a95      	ldr	r2, [pc, #596]	; (8018b2c <input_parameter+0x548>)
 80188d8:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 80188dc:	4b90      	ldr	r3, [pc, #576]	; (8018b20 <input_parameter+0x53c>)
 80188de:	4a94      	ldr	r2, [pc, #592]	; (8018b30 <input_parameter+0x54c>)
 80188e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 80188e4:	4b8e      	ldr	r3, [pc, #568]	; (8018b20 <input_parameter+0x53c>)
 80188e6:	4a92      	ldr	r2, [pc, #584]	; (8018b30 <input_parameter+0x54c>)
 80188e8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 80188ec:	4b8c      	ldr	r3, [pc, #560]	; (8018b20 <input_parameter+0x53c>)
 80188ee:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 80188f0:	4a8b      	ldr	r2, [pc, #556]	; (8018b20 <input_parameter+0x53c>)
 80188f2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 80188f6:	4b8a      	ldr	r3, [pc, #552]	; (8018b20 <input_parameter+0x53c>)
 80188f8:	4a8b      	ldr	r2, [pc, #556]	; (8018b28 <input_parameter+0x544>)
 80188fa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 80188fe:	4b88      	ldr	r3, [pc, #544]	; (8018b20 <input_parameter+0x53c>)
 8018900:	4a8a      	ldr	r2, [pc, #552]	; (8018b2c <input_parameter+0x548>)
 8018902:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8018906:	4b86      	ldr	r3, [pc, #536]	; (8018b20 <input_parameter+0x53c>)
 8018908:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 801890c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8018910:	4b83      	ldr	r3, [pc, #524]	; (8018b20 <input_parameter+0x53c>)
 8018912:	4a88      	ldr	r2, [pc, #544]	; (8018b34 <input_parameter+0x550>)
 8018914:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018918:	4b81      	ldr	r3, [pc, #516]	; (8018b20 <input_parameter+0x53c>)
 801891a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 801891c:	4a80      	ldr	r2, [pc, #512]	; (8018b20 <input_parameter+0x53c>)
 801891e:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8018922:	4b7f      	ldr	r3, [pc, #508]	; (8018b20 <input_parameter+0x53c>)
 8018924:	4a84      	ldr	r2, [pc, #528]	; (8018b38 <input_parameter+0x554>)
 8018926:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 801892a:	4b7d      	ldr	r3, [pc, #500]	; (8018b20 <input_parameter+0x53c>)
 801892c:	4a83      	ldr	r2, [pc, #524]	; (8018b3c <input_parameter+0x558>)
 801892e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8018932:	4b7b      	ldr	r3, [pc, #492]	; (8018b20 <input_parameter+0x53c>)
 8018934:	4a82      	ldr	r2, [pc, #520]	; (8018b40 <input_parameter+0x55c>)
 8018936:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 801893a:	4b79      	ldr	r3, [pc, #484]	; (8018b20 <input_parameter+0x53c>)
 801893c:	4a81      	ldr	r2, [pc, #516]	; (8018b44 <input_parameter+0x560>)
 801893e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8018942:	4b77      	ldr	r3, [pc, #476]	; (8018b20 <input_parameter+0x53c>)
 8018944:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8018946:	4a76      	ldr	r2, [pc, #472]	; (8018b20 <input_parameter+0x53c>)
 8018948:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 801894c:	4b74      	ldr	r3, [pc, #464]	; (8018b20 <input_parameter+0x53c>)
 801894e:	4a7a      	ldr	r2, [pc, #488]	; (8018b38 <input_parameter+0x554>)
 8018950:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8018954:	4b72      	ldr	r3, [pc, #456]	; (8018b20 <input_parameter+0x53c>)
 8018956:	4a79      	ldr	r2, [pc, #484]	; (8018b3c <input_parameter+0x558>)
 8018958:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 801895c:	4b70      	ldr	r3, [pc, #448]	; (8018b20 <input_parameter+0x53c>)
 801895e:	4a78      	ldr	r2, [pc, #480]	; (8018b40 <input_parameter+0x55c>)
 8018960:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8018964:	4b6e      	ldr	r3, [pc, #440]	; (8018b20 <input_parameter+0x53c>)
 8018966:	4a78      	ldr	r2, [pc, #480]	; (8018b48 <input_parameter+0x564>)
 8018968:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 801896c:	4b6c      	ldr	r3, [pc, #432]	; (8018b20 <input_parameter+0x53c>)
 801896e:	685b      	ldr	r3, [r3, #4]
 8018970:	4a6b      	ldr	r2, [pc, #428]	; (8018b20 <input_parameter+0x53c>)
 8018972:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8018976:	4b6a      	ldr	r3, [pc, #424]	; (8018b20 <input_parameter+0x53c>)
 8018978:	4a74      	ldr	r2, [pc, #464]	; (8018b4c <input_parameter+0x568>)
 801897a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 801897e:	4b68      	ldr	r3, [pc, #416]	; (8018b20 <input_parameter+0x53c>)
 8018980:	4a73      	ldr	r2, [pc, #460]	; (8018b50 <input_parameter+0x56c>)
 8018982:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8018986:	4b66      	ldr	r3, [pc, #408]	; (8018b20 <input_parameter+0x53c>)
 8018988:	4a72      	ldr	r2, [pc, #456]	; (8018b54 <input_parameter+0x570>)
 801898a:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 801898e:	4b64      	ldr	r3, [pc, #400]	; (8018b20 <input_parameter+0x53c>)
 8018990:	4a71      	ldr	r2, [pc, #452]	; (8018b58 <input_parameter+0x574>)
 8018992:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8018996:	4b62      	ldr	r3, [pc, #392]	; (8018b20 <input_parameter+0x53c>)
 8018998:	685b      	ldr	r3, [r3, #4]
 801899a:	4a61      	ldr	r2, [pc, #388]	; (8018b20 <input_parameter+0x53c>)
 801899c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 80189a0:	4b5f      	ldr	r3, [pc, #380]	; (8018b20 <input_parameter+0x53c>)
 80189a2:	4a6a      	ldr	r2, [pc, #424]	; (8018b4c <input_parameter+0x568>)
 80189a4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 80189a8:	4b5d      	ldr	r3, [pc, #372]	; (8018b20 <input_parameter+0x53c>)
 80189aa:	4a69      	ldr	r2, [pc, #420]	; (8018b50 <input_parameter+0x56c>)
 80189ac:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 80189b0:	4b5b      	ldr	r3, [pc, #364]	; (8018b20 <input_parameter+0x53c>)
 80189b2:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80189b6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 80189ba:	4b59      	ldr	r3, [pc, #356]	; (8018b20 <input_parameter+0x53c>)
 80189bc:	4a67      	ldr	r2, [pc, #412]	; (8018b5c <input_parameter+0x578>)
 80189be:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 80189c2:	4b67      	ldr	r3, [pc, #412]	; (8018b60 <input_parameter+0x57c>)
 80189c4:	4a58      	ldr	r2, [pc, #352]	; (8018b28 <input_parameter+0x544>)
 80189c6:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 80189c8:	4b65      	ldr	r3, [pc, #404]	; (8018b60 <input_parameter+0x57c>)
 80189ca:	4a57      	ldr	r2, [pc, #348]	; (8018b28 <input_parameter+0x544>)
 80189cc:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80189ce:	4b64      	ldr	r3, [pc, #400]	; (8018b60 <input_parameter+0x57c>)
 80189d0:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 80189d2:	4a63      	ldr	r2, [pc, #396]	; (8018b60 <input_parameter+0x57c>)
 80189d4:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 80189d6:	4b62      	ldr	r3, [pc, #392]	; (8018b60 <input_parameter+0x57c>)
 80189d8:	4a62      	ldr	r2, [pc, #392]	; (8018b64 <input_parameter+0x580>)
 80189da:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 80189dc:	4b60      	ldr	r3, [pc, #384]	; (8018b60 <input_parameter+0x57c>)
 80189de:	4a62      	ldr	r2, [pc, #392]	; (8018b68 <input_parameter+0x584>)
 80189e0:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 80189e2:	4b5f      	ldr	r3, [pc, #380]	; (8018b60 <input_parameter+0x57c>)
 80189e4:	4a61      	ldr	r2, [pc, #388]	; (8018b6c <input_parameter+0x588>)
 80189e6:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 80189e8:	4b5d      	ldr	r3, [pc, #372]	; (8018b60 <input_parameter+0x57c>)
 80189ea:	4a61      	ldr	r2, [pc, #388]	; (8018b70 <input_parameter+0x58c>)
 80189ec:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 80189ee:	4b5c      	ldr	r3, [pc, #368]	; (8018b60 <input_parameter+0x57c>)
 80189f0:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 80189f2:	4a5b      	ldr	r2, [pc, #364]	; (8018b60 <input_parameter+0x57c>)
 80189f4:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 80189f6:	4b5a      	ldr	r3, [pc, #360]	; (8018b60 <input_parameter+0x57c>)
 80189f8:	4a5a      	ldr	r2, [pc, #360]	; (8018b64 <input_parameter+0x580>)
 80189fa:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 80189fc:	4b58      	ldr	r3, [pc, #352]	; (8018b60 <input_parameter+0x57c>)
 80189fe:	4a5a      	ldr	r2, [pc, #360]	; (8018b68 <input_parameter+0x584>)
 8018a00:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8018a02:	4b57      	ldr	r3, [pc, #348]	; (8018b60 <input_parameter+0x57c>)
 8018a04:	4a59      	ldr	r2, [pc, #356]	; (8018b6c <input_parameter+0x588>)
 8018a06:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8018a08:	4b55      	ldr	r3, [pc, #340]	; (8018b60 <input_parameter+0x57c>)
 8018a0a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018a0e:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8018a10:	4b53      	ldr	r3, [pc, #332]	; (8018b60 <input_parameter+0x57c>)
 8018a12:	4a45      	ldr	r2, [pc, #276]	; (8018b28 <input_parameter+0x544>)
 8018a14:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8018a16:	4b52      	ldr	r3, [pc, #328]	; (8018b60 <input_parameter+0x57c>)
 8018a18:	4a56      	ldr	r2, [pc, #344]	; (8018b74 <input_parameter+0x590>)
 8018a1a:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8018a1c:	4b50      	ldr	r3, [pc, #320]	; (8018b60 <input_parameter+0x57c>)
 8018a1e:	4a56      	ldr	r2, [pc, #344]	; (8018b78 <input_parameter+0x594>)
 8018a20:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8018a22:	4b4f      	ldr	r3, [pc, #316]	; (8018b60 <input_parameter+0x57c>)
 8018a24:	4a55      	ldr	r2, [pc, #340]	; (8018b7c <input_parameter+0x598>)
 8018a26:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8018a28:	4b4d      	ldr	r3, [pc, #308]	; (8018b60 <input_parameter+0x57c>)
 8018a2a:	4a54      	ldr	r2, [pc, #336]	; (8018b7c <input_parameter+0x598>)
 8018a2c:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8018a2e:	4b4c      	ldr	r3, [pc, #304]	; (8018b60 <input_parameter+0x57c>)
 8018a30:	4a3d      	ldr	r2, [pc, #244]	; (8018b28 <input_parameter+0x544>)
 8018a32:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8018a34:	4b4a      	ldr	r3, [pc, #296]	; (8018b60 <input_parameter+0x57c>)
 8018a36:	4a4f      	ldr	r2, [pc, #316]	; (8018b74 <input_parameter+0x590>)
 8018a38:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8018a3a:	4b49      	ldr	r3, [pc, #292]	; (8018b60 <input_parameter+0x57c>)
 8018a3c:	4a4e      	ldr	r2, [pc, #312]	; (8018b78 <input_parameter+0x594>)
 8018a3e:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8018a40:	4b47      	ldr	r3, [pc, #284]	; (8018b60 <input_parameter+0x57c>)
 8018a42:	4a4e      	ldr	r2, [pc, #312]	; (8018b7c <input_parameter+0x598>)
 8018a44:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018a46:	4b46      	ldr	r3, [pc, #280]	; (8018b60 <input_parameter+0x57c>)
 8018a48:	4a42      	ldr	r2, [pc, #264]	; (8018b54 <input_parameter+0x570>)
 8018a4a:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8018a4c:	4b44      	ldr	r3, [pc, #272]	; (8018b60 <input_parameter+0x57c>)
 8018a4e:	4a36      	ldr	r2, [pc, #216]	; (8018b28 <input_parameter+0x544>)
 8018a50:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8018a52:	4b43      	ldr	r3, [pc, #268]	; (8018b60 <input_parameter+0x57c>)
 8018a54:	4a4a      	ldr	r2, [pc, #296]	; (8018b80 <input_parameter+0x59c>)
 8018a56:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8018a58:	4b41      	ldr	r3, [pc, #260]	; (8018b60 <input_parameter+0x57c>)
 8018a5a:	4a4a      	ldr	r2, [pc, #296]	; (8018b84 <input_parameter+0x5a0>)
 8018a5c:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8018a5e:	4b40      	ldr	r3, [pc, #256]	; (8018b60 <input_parameter+0x57c>)
 8018a60:	4a49      	ldr	r2, [pc, #292]	; (8018b88 <input_parameter+0x5a4>)
 8018a62:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018a64:	4b3e      	ldr	r3, [pc, #248]	; (8018b60 <input_parameter+0x57c>)
 8018a66:	4a49      	ldr	r2, [pc, #292]	; (8018b8c <input_parameter+0x5a8>)
 8018a68:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8018a6a:	4b3d      	ldr	r3, [pc, #244]	; (8018b60 <input_parameter+0x57c>)
 8018a6c:	4a2e      	ldr	r2, [pc, #184]	; (8018b28 <input_parameter+0x544>)
 8018a6e:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 8018a70:	4b3b      	ldr	r3, [pc, #236]	; (8018b60 <input_parameter+0x57c>)
 8018a72:	4a47      	ldr	r2, [pc, #284]	; (8018b90 <input_parameter+0x5ac>)
 8018a74:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8018a76:	4b3a      	ldr	r3, [pc, #232]	; (8018b60 <input_parameter+0x57c>)
 8018a78:	4a42      	ldr	r2, [pc, #264]	; (8018b84 <input_parameter+0x5a0>)
 8018a7a:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018a7c:	4b38      	ldr	r3, [pc, #224]	; (8018b60 <input_parameter+0x57c>)
 8018a7e:	4a42      	ldr	r2, [pc, #264]	; (8018b88 <input_parameter+0x5a4>)
 8018a80:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 8018a82:	4b37      	ldr	r3, [pc, #220]	; (8018b60 <input_parameter+0x57c>)
 8018a84:	4a43      	ldr	r2, [pc, #268]	; (8018b94 <input_parameter+0x5b0>)
 8018a86:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8018a88:	4b35      	ldr	r3, [pc, #212]	; (8018b60 <input_parameter+0x57c>)
 8018a8a:	4a27      	ldr	r2, [pc, #156]	; (8018b28 <input_parameter+0x544>)
 8018a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 8018a90:	4b33      	ldr	r3, [pc, #204]	; (8018b60 <input_parameter+0x57c>)
 8018a92:	4a41      	ldr	r2, [pc, #260]	; (8018b98 <input_parameter+0x5b4>)
 8018a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8018a98:	4b31      	ldr	r3, [pc, #196]	; (8018b60 <input_parameter+0x57c>)
 8018a9a:	4a40      	ldr	r2, [pc, #256]	; (8018b9c <input_parameter+0x5b8>)
 8018a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 8018aa0:	4b2f      	ldr	r3, [pc, #188]	; (8018b60 <input_parameter+0x57c>)
 8018aa2:	4a3f      	ldr	r2, [pc, #252]	; (8018ba0 <input_parameter+0x5bc>)
 8018aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018aa8:	4b2d      	ldr	r3, [pc, #180]	; (8018b60 <input_parameter+0x57c>)
 8018aaa:	4a3e      	ldr	r2, [pc, #248]	; (8018ba4 <input_parameter+0x5c0>)
 8018aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 8018ab0:	4b2b      	ldr	r3, [pc, #172]	; (8018b60 <input_parameter+0x57c>)
 8018ab2:	4a1d      	ldr	r2, [pc, #116]	; (8018b28 <input_parameter+0x544>)
 8018ab4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8018ab8:	4b29      	ldr	r3, [pc, #164]	; (8018b60 <input_parameter+0x57c>)
 8018aba:	4a3b      	ldr	r2, [pc, #236]	; (8018ba8 <input_parameter+0x5c4>)
 8018abc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 8018ac0:	4b27      	ldr	r3, [pc, #156]	; (8018b60 <input_parameter+0x57c>)
 8018ac2:	4a36      	ldr	r2, [pc, #216]	; (8018b9c <input_parameter+0x5b8>)
 8018ac4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018ac8:	4b25      	ldr	r3, [pc, #148]	; (8018b60 <input_parameter+0x57c>)
 8018aca:	4a38      	ldr	r2, [pc, #224]	; (8018bac <input_parameter+0x5c8>)
 8018acc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018ad0:	4b23      	ldr	r3, [pc, #140]	; (8018b60 <input_parameter+0x57c>)
 8018ad2:	4a37      	ldr	r2, [pc, #220]	; (8018bb0 <input_parameter+0x5cc>)
 8018ad4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8018ad8:	4b21      	ldr	r3, [pc, #132]	; (8018b60 <input_parameter+0x57c>)
 8018ada:	4a13      	ldr	r2, [pc, #76]	; (8018b28 <input_parameter+0x544>)
 8018adc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 8018ae0:	4b1f      	ldr	r3, [pc, #124]	; (8018b60 <input_parameter+0x57c>)
 8018ae2:	4a34      	ldr	r2, [pc, #208]	; (8018bb4 <input_parameter+0x5d0>)
 8018ae4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8018ae8:	4b1d      	ldr	r3, [pc, #116]	; (8018b60 <input_parameter+0x57c>)
 8018aea:	4a26      	ldr	r2, [pc, #152]	; (8018b84 <input_parameter+0x5a0>)
 8018aec:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 8018af0:	4b1b      	ldr	r3, [pc, #108]	; (8018b60 <input_parameter+0x57c>)
 8018af2:	4a31      	ldr	r2, [pc, #196]	; (8018bb8 <input_parameter+0x5d4>)
 8018af4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018af8:	4b19      	ldr	r3, [pc, #100]	; (8018b60 <input_parameter+0x57c>)
 8018afa:	4a2d      	ldr	r2, [pc, #180]	; (8018bb0 <input_parameter+0x5cc>)
 8018afc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 8018b00:	4b17      	ldr	r3, [pc, #92]	; (8018b60 <input_parameter+0x57c>)
 8018b02:	4a09      	ldr	r2, [pc, #36]	; (8018b28 <input_parameter+0x544>)
 8018b04:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 8018b08:	4b15      	ldr	r3, [pc, #84]	; (8018b60 <input_parameter+0x57c>)
 8018b0a:	4a2c      	ldr	r2, [pc, #176]	; (8018bbc <input_parameter+0x5d8>)
 8018b0c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 8018b10:	4b13      	ldr	r3, [pc, #76]	; (8018b60 <input_parameter+0x57c>)
 8018b12:	4a1c      	ldr	r2, [pc, #112]	; (8018b84 <input_parameter+0x5a0>)
 8018b14:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 8018b18:	e052      	b.n	8018bc0 <input_parameter+0x5dc>
 8018b1a:	bf00      	nop
 8018b1c:	42860000 	.word	0x42860000
 8018b20:	2000f6d4 	.word	0x2000f6d4
 8018b24:	42920000 	.word	0x42920000
 8018b28:	44160000 	.word	0x44160000
 8018b2c:	461c4000 	.word	0x461c4000
 8018b30:	42640000 	.word	0x42640000
 8018b34:	42500000 	.word	0x42500000
 8018b38:	44250000 	.word	0x44250000
 8018b3c:	45fa0000 	.word	0x45fa0000
 8018b40:	425c0000 	.word	0x425c0000
 8018b44:	42c80000 	.word	0x42c80000
 8018b48:	42ce0000 	.word	0x42ce0000
 8018b4c:	442f0000 	.word	0x442f0000
 8018b50:	462be000 	.word	0x462be000
 8018b54:	420c0000 	.word	0x420c0000
 8018b58:	42600000 	.word	0x42600000
 8018b5c:	42700000 	.word	0x42700000
 8018b60:	2000f81c 	.word	0x2000f81c
 8018b64:	44898000 	.word	0x44898000
 8018b68:	476a6000 	.word	0x476a6000
 8018b6c:	40a00000 	.word	0x40a00000
 8018b70:	41e00000 	.word	0x41e00000
 8018b74:	446d8000 	.word	0x446d8000
 8018b78:	466a6000 	.word	0x466a6000
 8018b7c:	41f80000 	.word	0x41f80000
 8018b80:	44520000 	.word	0x44520000
 8018b84:	465ac000 	.word	0x465ac000
 8018b88:	40e00000 	.word	0x40e00000
 8018b8c:	41a00000 	.word	0x41a00000
 8018b90:	444d0000 	.word	0x444d0000
 8018b94:	41900000 	.word	0x41900000
 8018b98:	444f8000 	.word	0x444f8000
 8018b9c:	463b8000 	.word	0x463b8000
 8018ba0:	41500000 	.word	0x41500000
 8018ba4:	42180000 	.word	0x42180000
 8018ba8:	44608000 	.word	0x44608000
 8018bac:	41400000 	.word	0x41400000
 8018bb0:	42100000 	.word	0x42100000
 8018bb4:	446b0000 	.word	0x446b0000
 8018bb8:	41180000 	.word	0x41180000
 8018bbc:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 8018bc0:	4b9d      	ldr	r3, [pc, #628]	; (8018e38 <input_parameter+0x854>)
 8018bc2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018bc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018bca:	4b9b      	ldr	r3, [pc, #620]	; (8018e38 <input_parameter+0x854>)
 8018bcc:	4a9b      	ldr	r2, [pc, #620]	; (8018e3c <input_parameter+0x858>)
 8018bce:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 8018bd2:	4b99      	ldr	r3, [pc, #612]	; (8018e38 <input_parameter+0x854>)
 8018bd4:	4a9a      	ldr	r2, [pc, #616]	; (8018e40 <input_parameter+0x85c>)
 8018bd6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018bda:	4b97      	ldr	r3, [pc, #604]	; (8018e38 <input_parameter+0x854>)
 8018bdc:	4a99      	ldr	r2, [pc, #612]	; (8018e44 <input_parameter+0x860>)
 8018bde:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 8018be2:	4b95      	ldr	r3, [pc, #596]	; (8018e38 <input_parameter+0x854>)
 8018be4:	4a98      	ldr	r2, [pc, #608]	; (8018e48 <input_parameter+0x864>)
 8018be6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018bea:	4b93      	ldr	r3, [pc, #588]	; (8018e38 <input_parameter+0x854>)
 8018bec:	4a97      	ldr	r2, [pc, #604]	; (8018e4c <input_parameter+0x868>)
 8018bee:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018bf2:	4b91      	ldr	r3, [pc, #580]	; (8018e38 <input_parameter+0x854>)
 8018bf4:	4a96      	ldr	r2, [pc, #600]	; (8018e50 <input_parameter+0x86c>)
 8018bf6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018bfa:	4b8f      	ldr	r3, [pc, #572]	; (8018e38 <input_parameter+0x854>)
 8018bfc:	4a90      	ldr	r2, [pc, #576]	; (8018e40 <input_parameter+0x85c>)
 8018bfe:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 8018c02:	4b8d      	ldr	r3, [pc, #564]	; (8018e38 <input_parameter+0x854>)
 8018c04:	4a93      	ldr	r2, [pc, #588]	; (8018e54 <input_parameter+0x870>)
 8018c06:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 8018c0a:	4b8b      	ldr	r3, [pc, #556]	; (8018e38 <input_parameter+0x854>)
 8018c0c:	4a8e      	ldr	r2, [pc, #568]	; (8018e48 <input_parameter+0x864>)
 8018c0e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 8018c12:	4b89      	ldr	r3, [pc, #548]	; (8018e38 <input_parameter+0x854>)
 8018c14:	4a90      	ldr	r2, [pc, #576]	; (8018e58 <input_parameter+0x874>)
 8018c16:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018c1a:	4b87      	ldr	r3, [pc, #540]	; (8018e38 <input_parameter+0x854>)
 8018c1c:	4a8f      	ldr	r2, [pc, #572]	; (8018e5c <input_parameter+0x878>)
 8018c1e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 8018c22:	4b85      	ldr	r3, [pc, #532]	; (8018e38 <input_parameter+0x854>)
 8018c24:	4a86      	ldr	r2, [pc, #536]	; (8018e40 <input_parameter+0x85c>)
 8018c26:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 8018c2a:	4b83      	ldr	r3, [pc, #524]	; (8018e38 <input_parameter+0x854>)
 8018c2c:	4a8c      	ldr	r2, [pc, #560]	; (8018e60 <input_parameter+0x87c>)
 8018c2e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 8018c32:	4b81      	ldr	r3, [pc, #516]	; (8018e38 <input_parameter+0x854>)
 8018c34:	4a8b      	ldr	r2, [pc, #556]	; (8018e64 <input_parameter+0x880>)
 8018c36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 8018c3a:	4b7f      	ldr	r3, [pc, #508]	; (8018e38 <input_parameter+0x854>)
 8018c3c:	4a8a      	ldr	r2, [pc, #552]	; (8018e68 <input_parameter+0x884>)
 8018c3e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018c42:	4b7d      	ldr	r3, [pc, #500]	; (8018e38 <input_parameter+0x854>)
 8018c44:	4a82      	ldr	r2, [pc, #520]	; (8018e50 <input_parameter+0x86c>)
 8018c46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 8018c4a:	4b7b      	ldr	r3, [pc, #492]	; (8018e38 <input_parameter+0x854>)
 8018c4c:	4a7c      	ldr	r2, [pc, #496]	; (8018e40 <input_parameter+0x85c>)
 8018c4e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 8018c52:	4b79      	ldr	r3, [pc, #484]	; (8018e38 <input_parameter+0x854>)
 8018c54:	4a85      	ldr	r2, [pc, #532]	; (8018e6c <input_parameter+0x888>)
 8018c56:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 8018c5a:	4b77      	ldr	r3, [pc, #476]	; (8018e38 <input_parameter+0x854>)
 8018c5c:	4a84      	ldr	r2, [pc, #528]	; (8018e70 <input_parameter+0x88c>)
 8018c5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 8018c62:	4b75      	ldr	r3, [pc, #468]	; (8018e38 <input_parameter+0x854>)
 8018c64:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018c68:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018c6c:	4b72      	ldr	r3, [pc, #456]	; (8018e38 <input_parameter+0x854>)
 8018c6e:	4a81      	ldr	r2, [pc, #516]	; (8018e74 <input_parameter+0x890>)
 8018c70:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018c74:	4b70      	ldr	r3, [pc, #448]	; (8018e38 <input_parameter+0x854>)
 8018c76:	4a72      	ldr	r2, [pc, #456]	; (8018e40 <input_parameter+0x85c>)
 8018c78:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018c7c:	4b6e      	ldr	r3, [pc, #440]	; (8018e38 <input_parameter+0x854>)
 8018c7e:	4a7e      	ldr	r2, [pc, #504]	; (8018e78 <input_parameter+0x894>)
 8018c80:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018c84:	4b6c      	ldr	r3, [pc, #432]	; (8018e38 <input_parameter+0x854>)
 8018c86:	4a77      	ldr	r2, [pc, #476]	; (8018e64 <input_parameter+0x880>)
 8018c88:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018c8c:	4b6a      	ldr	r3, [pc, #424]	; (8018e38 <input_parameter+0x854>)
 8018c8e:	4a7b      	ldr	r2, [pc, #492]	; (8018e7c <input_parameter+0x898>)
 8018c90:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018c94:	4b68      	ldr	r3, [pc, #416]	; (8018e38 <input_parameter+0x854>)
 8018c96:	4a7a      	ldr	r2, [pc, #488]	; (8018e80 <input_parameter+0x89c>)
 8018c98:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018c9c:	4b66      	ldr	r3, [pc, #408]	; (8018e38 <input_parameter+0x854>)
 8018c9e:	4a68      	ldr	r2, [pc, #416]	; (8018e40 <input_parameter+0x85c>)
 8018ca0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018ca4:	4b64      	ldr	r3, [pc, #400]	; (8018e38 <input_parameter+0x854>)
 8018ca6:	4a77      	ldr	r2, [pc, #476]	; (8018e84 <input_parameter+0x8a0>)
 8018ca8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018cac:	4b62      	ldr	r3, [pc, #392]	; (8018e38 <input_parameter+0x854>)
 8018cae:	4a76      	ldr	r2, [pc, #472]	; (8018e88 <input_parameter+0x8a4>)
 8018cb0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018cb4:	4b60      	ldr	r3, [pc, #384]	; (8018e38 <input_parameter+0x854>)
 8018cb6:	4a75      	ldr	r2, [pc, #468]	; (8018e8c <input_parameter+0x8a8>)
 8018cb8:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018cbc:	4b5e      	ldr	r3, [pc, #376]	; (8018e38 <input_parameter+0x854>)
 8018cbe:	4a70      	ldr	r2, [pc, #448]	; (8018e80 <input_parameter+0x89c>)
 8018cc0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018cc4:	4b72      	ldr	r3, [pc, #456]	; (8018e90 <input_parameter+0x8ac>)
 8018cc6:	4a73      	ldr	r2, [pc, #460]	; (8018e94 <input_parameter+0x8b0>)
 8018cc8:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018cca:	4b71      	ldr	r3, [pc, #452]	; (8018e90 <input_parameter+0x8ac>)
 8018ccc:	4a71      	ldr	r2, [pc, #452]	; (8018e94 <input_parameter+0x8b0>)
 8018cce:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018cd0:	4b6f      	ldr	r3, [pc, #444]	; (8018e90 <input_parameter+0x8ac>)
 8018cd2:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018cd4:	4a6e      	ldr	r2, [pc, #440]	; (8018e90 <input_parameter+0x8ac>)
 8018cd6:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018cd8:	4b6d      	ldr	r3, [pc, #436]	; (8018e90 <input_parameter+0x8ac>)
 8018cda:	4a6f      	ldr	r2, [pc, #444]	; (8018e98 <input_parameter+0x8b4>)
 8018cdc:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 8018cde:	4b6c      	ldr	r3, [pc, #432]	; (8018e90 <input_parameter+0x8ac>)
 8018ce0:	4a61      	ldr	r2, [pc, #388]	; (8018e68 <input_parameter+0x884>)
 8018ce2:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018ce4:	4b6a      	ldr	r3, [pc, #424]	; (8018e90 <input_parameter+0x8ac>)
 8018ce6:	4a6d      	ldr	r2, [pc, #436]	; (8018e9c <input_parameter+0x8b8>)
 8018ce8:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018cea:	4b69      	ldr	r3, [pc, #420]	; (8018e90 <input_parameter+0x8ac>)
 8018cec:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 8018cee:	4a68      	ldr	r2, [pc, #416]	; (8018e90 <input_parameter+0x8ac>)
 8018cf0:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 8018cf2:	4b67      	ldr	r3, [pc, #412]	; (8018e90 <input_parameter+0x8ac>)
 8018cf4:	4a68      	ldr	r2, [pc, #416]	; (8018e98 <input_parameter+0x8b4>)
 8018cf6:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018cf8:	4b65      	ldr	r3, [pc, #404]	; (8018e90 <input_parameter+0x8ac>)
 8018cfa:	4a5b      	ldr	r2, [pc, #364]	; (8018e68 <input_parameter+0x884>)
 8018cfc:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 8018cfe:	4b64      	ldr	r3, [pc, #400]	; (8018e90 <input_parameter+0x8ac>)
 8018d00:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018d04:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 8018d06:	4b62      	ldr	r3, [pc, #392]	; (8018e90 <input_parameter+0x8ac>)
 8018d08:	4a62      	ldr	r2, [pc, #392]	; (8018e94 <input_parameter+0x8b0>)
 8018d0a:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 8018d0c:	4b60      	ldr	r3, [pc, #384]	; (8018e90 <input_parameter+0x8ac>)
 8018d0e:	4a64      	ldr	r2, [pc, #400]	; (8018ea0 <input_parameter+0x8bc>)
 8018d10:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 29;
 8018d12:	4b5f      	ldr	r3, [pc, #380]	; (8018e90 <input_parameter+0x8ac>)
 8018d14:	4a63      	ldr	r2, [pc, #396]	; (8018ea4 <input_parameter+0x8c0>)
 8018d16:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 8018d18:	4b5d      	ldr	r3, [pc, #372]	; (8018e90 <input_parameter+0x8ac>)
 8018d1a:	4a63      	ldr	r2, [pc, #396]	; (8018ea8 <input_parameter+0x8c4>)
 8018d1c:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 8018d1e:	4b5c      	ldr	r3, [pc, #368]	; (8018e90 <input_parameter+0x8ac>)
 8018d20:	4a5c      	ldr	r2, [pc, #368]	; (8018e94 <input_parameter+0x8b0>)
 8018d22:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 8018d24:	4b5a      	ldr	r3, [pc, #360]	; (8018e90 <input_parameter+0x8ac>)
 8018d26:	4a5e      	ldr	r2, [pc, #376]	; (8018ea0 <input_parameter+0x8bc>)
 8018d28:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 29;
 8018d2a:	4b59      	ldr	r3, [pc, #356]	; (8018e90 <input_parameter+0x8ac>)
 8018d2c:	4a5d      	ldr	r2, [pc, #372]	; (8018ea4 <input_parameter+0x8c0>)
 8018d2e:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 8018d30:	4b57      	ldr	r3, [pc, #348]	; (8018e90 <input_parameter+0x8ac>)
 8018d32:	4a5e      	ldr	r2, [pc, #376]	; (8018eac <input_parameter+0x8c8>)
 8018d34:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 8018d36:	4b56      	ldr	r3, [pc, #344]	; (8018e90 <input_parameter+0x8ac>)
 8018d38:	4a56      	ldr	r2, [pc, #344]	; (8018e94 <input_parameter+0x8b0>)
 8018d3a:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 8018d3c:	4b54      	ldr	r3, [pc, #336]	; (8018e90 <input_parameter+0x8ac>)
 8018d3e:	4a5c      	ldr	r2, [pc, #368]	; (8018eb0 <input_parameter+0x8cc>)
 8018d40:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 17;
 8018d42:	4b53      	ldr	r3, [pc, #332]	; (8018e90 <input_parameter+0x8ac>)
 8018d44:	4a4d      	ldr	r2, [pc, #308]	; (8018e7c <input_parameter+0x898>)
 8018d46:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 8018d48:	4b51      	ldr	r3, [pc, #324]	; (8018e90 <input_parameter+0x8ac>)
 8018d4a:	4a4d      	ldr	r2, [pc, #308]	; (8018e80 <input_parameter+0x89c>)
 8018d4c:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 8018d4e:	4b50      	ldr	r3, [pc, #320]	; (8018e90 <input_parameter+0x8ac>)
 8018d50:	4a50      	ldr	r2, [pc, #320]	; (8018e94 <input_parameter+0x8b0>)
 8018d52:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 8018d54:	4b4e      	ldr	r3, [pc, #312]	; (8018e90 <input_parameter+0x8ac>)
 8018d56:	4a56      	ldr	r2, [pc, #344]	; (8018eb0 <input_parameter+0x8cc>)
 8018d58:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 17;
 8018d5a:	4b4d      	ldr	r3, [pc, #308]	; (8018e90 <input_parameter+0x8ac>)
 8018d5c:	4a47      	ldr	r2, [pc, #284]	; (8018e7c <input_parameter+0x898>)
 8018d5e:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018d60:	4b4b      	ldr	r3, [pc, #300]	; (8018e90 <input_parameter+0x8ac>)
 8018d62:	4a54      	ldr	r2, [pc, #336]	; (8018eb4 <input_parameter+0x8d0>)
 8018d64:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018d66:	4b4a      	ldr	r3, [pc, #296]	; (8018e90 <input_parameter+0x8ac>)
 8018d68:	4a4a      	ldr	r2, [pc, #296]	; (8018e94 <input_parameter+0x8b0>)
 8018d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 8018d6e:	4b48      	ldr	r3, [pc, #288]	; (8018e90 <input_parameter+0x8ac>)
 8018d70:	4a51      	ldr	r2, [pc, #324]	; (8018eb8 <input_parameter+0x8d4>)
 8018d72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 18;
 8018d76:	4b46      	ldr	r3, [pc, #280]	; (8018e90 <input_parameter+0x8ac>)
 8018d78:	4a4e      	ldr	r2, [pc, #312]	; (8018eb4 <input_parameter+0x8d0>)
 8018d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018d7e:	4b44      	ldr	r3, [pc, #272]	; (8018e90 <input_parameter+0x8ac>)
 8018d80:	4a4e      	ldr	r2, [pc, #312]	; (8018ebc <input_parameter+0x8d8>)
 8018d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018d86:	4b42      	ldr	r3, [pc, #264]	; (8018e90 <input_parameter+0x8ac>)
 8018d88:	4a42      	ldr	r2, [pc, #264]	; (8018e94 <input_parameter+0x8b0>)
 8018d8a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 8018d8e:	4b40      	ldr	r3, [pc, #256]	; (8018e90 <input_parameter+0x8ac>)
 8018d90:	4a49      	ldr	r2, [pc, #292]	; (8018eb8 <input_parameter+0x8d4>)
 8018d92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 17;
 8018d96:	4b3e      	ldr	r3, [pc, #248]	; (8018e90 <input_parameter+0x8ac>)
 8018d98:	4a38      	ldr	r2, [pc, #224]	; (8018e7c <input_parameter+0x898>)
 8018d9a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 8018d9e:	4b3c      	ldr	r3, [pc, #240]	; (8018e90 <input_parameter+0x8ac>)
 8018da0:	4a34      	ldr	r2, [pc, #208]	; (8018e74 <input_parameter+0x890>)
 8018da2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018da6:	4b3a      	ldr	r3, [pc, #232]	; (8018e90 <input_parameter+0x8ac>)
 8018da8:	4a3a      	ldr	r2, [pc, #232]	; (8018e94 <input_parameter+0x8b0>)
 8018daa:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 8018dae:	4b38      	ldr	r3, [pc, #224]	; (8018e90 <input_parameter+0x8ac>)
 8018db0:	4a43      	ldr	r2, [pc, #268]	; (8018ec0 <input_parameter+0x8dc>)
 8018db2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 17;
 8018db6:	4b36      	ldr	r3, [pc, #216]	; (8018e90 <input_parameter+0x8ac>)
 8018db8:	4a30      	ldr	r2, [pc, #192]	; (8018e7c <input_parameter+0x898>)
 8018dba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 15;
 8018dbe:	4b34      	ldr	r3, [pc, #208]	; (8018e90 <input_parameter+0x8ac>)
 8018dc0:	4a40      	ldr	r2, [pc, #256]	; (8018ec4 <input_parameter+0x8e0>)
 8018dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018dc6:	4b32      	ldr	r3, [pc, #200]	; (8018e90 <input_parameter+0x8ac>)
 8018dc8:	4a32      	ldr	r2, [pc, #200]	; (8018e94 <input_parameter+0x8b0>)
 8018dca:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 8018dce:	4b30      	ldr	r3, [pc, #192]	; (8018e90 <input_parameter+0x8ac>)
 8018dd0:	4a3d      	ldr	r2, [pc, #244]	; (8018ec8 <input_parameter+0x8e4>)
 8018dd2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 14;
 8018dd6:	4b2e      	ldr	r3, [pc, #184]	; (8018e90 <input_parameter+0x8ac>)
 8018dd8:	4a3c      	ldr	r2, [pc, #240]	; (8018ecc <input_parameter+0x8e8>)
 8018dda:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 12;
 8018dde:	4b2c      	ldr	r3, [pc, #176]	; (8018e90 <input_parameter+0x8ac>)
 8018de0:	4a3b      	ldr	r2, [pc, #236]	; (8018ed0 <input_parameter+0x8ec>)
 8018de2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018de6:	4b2a      	ldr	r3, [pc, #168]	; (8018e90 <input_parameter+0x8ac>)
 8018de8:	4a2a      	ldr	r2, [pc, #168]	; (8018e94 <input_parameter+0x8b0>)
 8018dea:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 8018dee:	4b28      	ldr	r3, [pc, #160]	; (8018e90 <input_parameter+0x8ac>)
 8018df0:	4a31      	ldr	r2, [pc, #196]	; (8018eb8 <input_parameter+0x8d4>)
 8018df2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018df6:	4b26      	ldr	r3, [pc, #152]	; (8018e90 <input_parameter+0x8ac>)
 8018df8:	4a30      	ldr	r2, [pc, #192]	; (8018ebc <input_parameter+0x8d8>)
 8018dfa:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018dfe:	4b24      	ldr	r3, [pc, #144]	; (8018e90 <input_parameter+0x8ac>)
 8018e00:	4a13      	ldr	r2, [pc, #76]	; (8018e50 <input_parameter+0x86c>)
 8018e02:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 8018e06:	4b22      	ldr	r3, [pc, #136]	; (8018e90 <input_parameter+0x8ac>)
 8018e08:	4a22      	ldr	r2, [pc, #136]	; (8018e94 <input_parameter+0x8b0>)
 8018e0a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 8018e0e:	4b20      	ldr	r3, [pc, #128]	; (8018e90 <input_parameter+0x8ac>)
 8018e10:	4a29      	ldr	r2, [pc, #164]	; (8018eb8 <input_parameter+0x8d4>)
 8018e12:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 8018e16:	4b1e      	ldr	r3, [pc, #120]	; (8018e90 <input_parameter+0x8ac>)
 8018e18:	4a2e      	ldr	r2, [pc, #184]	; (8018ed4 <input_parameter+0x8f0>)
 8018e1a:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018e1e:	4b1c      	ldr	r3, [pc, #112]	; (8018e90 <input_parameter+0x8ac>)
 8018e20:	4a0e      	ldr	r2, [pc, #56]	; (8018e5c <input_parameter+0x878>)
 8018e22:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 8018e26:	4b1a      	ldr	r3, [pc, #104]	; (8018e90 <input_parameter+0x8ac>)
 8018e28:	4a1a      	ldr	r2, [pc, #104]	; (8018e94 <input_parameter+0x8b0>)
 8018e2a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 8018e2e:	4b18      	ldr	r3, [pc, #96]	; (8018e90 <input_parameter+0x8ac>)
 8018e30:	4a29      	ldr	r2, [pc, #164]	; (8018ed8 <input_parameter+0x8f4>)
 8018e32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8018e36:	e051      	b.n	8018edc <input_parameter+0x8f8>
 8018e38:	2000f81c 	.word	0x2000f81c
 8018e3c:	42080000 	.word	0x42080000
 8018e40:	44160000 	.word	0x44160000
 8018e44:	44340000 	.word	0x44340000
 8018e48:	463b8000 	.word	0x463b8000
 8018e4c:	422c0000 	.word	0x422c0000
 8018e50:	41b00000 	.word	0x41b00000
 8018e54:	443b8000 	.word	0x443b8000
 8018e58:	42200000 	.word	0x42200000
 8018e5c:	41c00000 	.word	0x41c00000
 8018e60:	44660000 	.word	0x44660000
 8018e64:	466a6000 	.word	0x466a6000
 8018e68:	40a00000 	.word	0x40a00000
 8018e6c:	445e8000 	.word	0x445e8000
 8018e70:	465ac000 	.word	0x465ac000
 8018e74:	42100000 	.word	0x42100000
 8018e78:	446b0000 	.word	0x446b0000
 8018e7c:	41880000 	.word	0x41880000
 8018e80:	41a00000 	.word	0x41a00000
 8018e84:	44700000 	.word	0x44700000
 8018e88:	467a0000 	.word	0x467a0000
 8018e8c:	41200000 	.word	0x41200000
 8018e90:	2000f964 	.word	0x2000f964
 8018e94:	447a0000 	.word	0x447a0000
 8018e98:	44898000 	.word	0x44898000
 8018e9c:	41e00000 	.word	0x41e00000
 8018ea0:	44b54000 	.word	0x44b54000
 8018ea4:	41e80000 	.word	0x41e80000
 8018ea8:	41f80000 	.word	0x41f80000
 8018eac:	420c0000 	.word	0x420c0000
 8018eb0:	44af0000 	.word	0x44af0000
 8018eb4:	41900000 	.word	0x41900000
 8018eb8:	44a28000 	.word	0x44a28000
 8018ebc:	42180000 	.word	0x42180000
 8018ec0:	44c6c000 	.word	0x44c6c000
 8018ec4:	41700000 	.word	0x41700000
 8018ec8:	44c30000 	.word	0x44c30000
 8018ecc:	41600000 	.word	0x41600000
 8018ed0:	41400000 	.word	0x41400000
 8018ed4:	41f00000 	.word	0x41f00000
 8018ed8:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 16;
 8018edc:	4b9e      	ldr	r3, [pc, #632]	; (8019158 <input_parameter+0xb74>)
 8018ede:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018ee2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018ee6:	4b9c      	ldr	r3, [pc, #624]	; (8019158 <input_parameter+0xb74>)
 8018ee8:	4a9c      	ldr	r2, [pc, #624]	; (801915c <input_parameter+0xb78>)
 8018eea:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 8018eee:	4b9a      	ldr	r3, [pc, #616]	; (8019158 <input_parameter+0xb74>)
 8018ef0:	4a9b      	ldr	r2, [pc, #620]	; (8019160 <input_parameter+0xb7c>)
 8018ef2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018ef6:	4b98      	ldr	r3, [pc, #608]	; (8019158 <input_parameter+0xb74>)
 8018ef8:	4a9a      	ldr	r2, [pc, #616]	; (8019164 <input_parameter+0xb80>)
 8018efa:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 8018efe:	4b96      	ldr	r3, [pc, #600]	; (8019158 <input_parameter+0xb74>)
 8018f00:	4a99      	ldr	r2, [pc, #612]	; (8019168 <input_parameter+0xb84>)
 8018f02:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018f06:	4b94      	ldr	r3, [pc, #592]	; (8019158 <input_parameter+0xb74>)
 8018f08:	4a98      	ldr	r2, [pc, #608]	; (801916c <input_parameter+0xb88>)
 8018f0a:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 8018f0e:	4b92      	ldr	r3, [pc, #584]	; (8019158 <input_parameter+0xb74>)
 8018f10:	4a93      	ldr	r2, [pc, #588]	; (8019160 <input_parameter+0xb7c>)
 8018f12:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 8018f16:	4b90      	ldr	r3, [pc, #576]	; (8019158 <input_parameter+0xb74>)
 8018f18:	4a95      	ldr	r2, [pc, #596]	; (8019170 <input_parameter+0xb8c>)
 8018f1a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 16.5;
 8018f1e:	4b8e      	ldr	r3, [pc, #568]	; (8019158 <input_parameter+0xb74>)
 8018f20:	4a94      	ldr	r2, [pc, #592]	; (8019174 <input_parameter+0xb90>)
 8018f22:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 21;
 8018f26:	4b8c      	ldr	r3, [pc, #560]	; (8019158 <input_parameter+0xb74>)
 8018f28:	4a93      	ldr	r2, [pc, #588]	; (8019178 <input_parameter+0xb94>)
 8018f2a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 8018f2e:	4b8a      	ldr	r3, [pc, #552]	; (8019158 <input_parameter+0xb74>)
 8018f30:	4a8b      	ldr	r2, [pc, #556]	; (8019160 <input_parameter+0xb7c>)
 8018f32:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 8018f36:	4b88      	ldr	r3, [pc, #544]	; (8019158 <input_parameter+0xb74>)
 8018f38:	4a8d      	ldr	r2, [pc, #564]	; (8019170 <input_parameter+0xb8c>)
 8018f3a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 14;
 8018f3e:	4b86      	ldr	r3, [pc, #536]	; (8019158 <input_parameter+0xb74>)
 8018f40:	4a8e      	ldr	r2, [pc, #568]	; (801917c <input_parameter+0xb98>)
 8018f42:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 21;
 8018f46:	4b84      	ldr	r3, [pc, #528]	; (8019158 <input_parameter+0xb74>)
 8018f48:	4a8b      	ldr	r2, [pc, #556]	; (8019178 <input_parameter+0xb94>)
 8018f4a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 8018f4e:	4b8c      	ldr	r3, [pc, #560]	; (8019180 <input_parameter+0xb9c>)
 8018f50:	4a8c      	ldr	r2, [pc, #560]	; (8019184 <input_parameter+0xba0>)
 8018f52:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 8018f54:	4b8a      	ldr	r3, [pc, #552]	; (8019180 <input_parameter+0xb9c>)
 8018f56:	4a8b      	ldr	r2, [pc, #556]	; (8019184 <input_parameter+0xba0>)
 8018f58:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018f5a:	4b89      	ldr	r3, [pc, #548]	; (8019180 <input_parameter+0xb9c>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 8018f5e:	4a88      	ldr	r2, [pc, #544]	; (8019180 <input_parameter+0xb9c>)
 8018f60:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 8018f62:	4b87      	ldr	r3, [pc, #540]	; (8019180 <input_parameter+0xb9c>)
 8018f64:	4a88      	ldr	r2, [pc, #544]	; (8019188 <input_parameter+0xba4>)
 8018f66:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 8018f68:	4b85      	ldr	r3, [pc, #532]	; (8019180 <input_parameter+0xb9c>)
 8018f6a:	4a88      	ldr	r2, [pc, #544]	; (801918c <input_parameter+0xba8>)
 8018f6c:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018f6e:	4b84      	ldr	r3, [pc, #528]	; (8019180 <input_parameter+0xb9c>)
 8018f70:	4a87      	ldr	r2, [pc, #540]	; (8019190 <input_parameter+0xbac>)
 8018f72:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018f74:	4b82      	ldr	r3, [pc, #520]	; (8019180 <input_parameter+0xb9c>)
 8018f76:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 8018f78:	4a81      	ldr	r2, [pc, #516]	; (8019180 <input_parameter+0xb9c>)
 8018f7a:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 8018f7c:	4b80      	ldr	r3, [pc, #512]	; (8019180 <input_parameter+0xb9c>)
 8018f7e:	4a82      	ldr	r2, [pc, #520]	; (8019188 <input_parameter+0xba4>)
 8018f80:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018f82:	4b7f      	ldr	r3, [pc, #508]	; (8019180 <input_parameter+0xb9c>)
 8018f84:	4a81      	ldr	r2, [pc, #516]	; (801918c <input_parameter+0xba8>)
 8018f86:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 8018f88:	4b7d      	ldr	r3, [pc, #500]	; (8019180 <input_parameter+0xb9c>)
 8018f8a:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018f8e:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018f90:	4b7b      	ldr	r3, [pc, #492]	; (8019180 <input_parameter+0xb9c>)
 8018f92:	4a7c      	ldr	r2, [pc, #496]	; (8019184 <input_parameter+0xba0>)
 8018f94:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 8018f96:	4b7a      	ldr	r3, [pc, #488]	; (8019180 <input_parameter+0xb9c>)
 8018f98:	4a7e      	ldr	r2, [pc, #504]	; (8019194 <input_parameter+0xbb0>)
 8018f9a:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 21;
 8018f9c:	4b78      	ldr	r3, [pc, #480]	; (8019180 <input_parameter+0xb9c>)
 8018f9e:	4a76      	ldr	r2, [pc, #472]	; (8019178 <input_parameter+0xb94>)
 8018fa0:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018fa2:	4b77      	ldr	r3, [pc, #476]	; (8019180 <input_parameter+0xb9c>)
 8018fa4:	4a7c      	ldr	r2, [pc, #496]	; (8019198 <input_parameter+0xbb4>)
 8018fa6:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 8018fa8:	4b75      	ldr	r3, [pc, #468]	; (8019180 <input_parameter+0xb9c>)
 8018faa:	4a76      	ldr	r2, [pc, #472]	; (8019184 <input_parameter+0xba0>)
 8018fac:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8018fae:	4b74      	ldr	r3, [pc, #464]	; (8019180 <input_parameter+0xb9c>)
 8018fb0:	4a78      	ldr	r2, [pc, #480]	; (8019194 <input_parameter+0xbb0>)
 8018fb2:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 20;
 8018fb4:	4b72      	ldr	r3, [pc, #456]	; (8019180 <input_parameter+0xb9c>)
 8018fb6:	4a78      	ldr	r2, [pc, #480]	; (8019198 <input_parameter+0xbb4>)
 8018fb8:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 8018fba:	4b71      	ldr	r3, [pc, #452]	; (8019180 <input_parameter+0xb9c>)
 8018fbc:	4a77      	ldr	r2, [pc, #476]	; (801919c <input_parameter+0xbb8>)
 8018fbe:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8018fc0:	4b6f      	ldr	r3, [pc, #444]	; (8019180 <input_parameter+0xb9c>)
 8018fc2:	4a70      	ldr	r2, [pc, #448]	; (8019184 <input_parameter+0xba0>)
 8018fc4:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 8018fc6:	4b6e      	ldr	r3, [pc, #440]	; (8019180 <input_parameter+0xb9c>)
 8018fc8:	4a75      	ldr	r2, [pc, #468]	; (80191a0 <input_parameter+0xbbc>)
 8018fca:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 17;
 8018fcc:	4b6c      	ldr	r3, [pc, #432]	; (8019180 <input_parameter+0xb9c>)
 8018fce:	4a75      	ldr	r2, [pc, #468]	; (80191a4 <input_parameter+0xbc0>)
 8018fd0:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8018fd2:	4b6b      	ldr	r3, [pc, #428]	; (8019180 <input_parameter+0xb9c>)
 8018fd4:	4a70      	ldr	r2, [pc, #448]	; (8019198 <input_parameter+0xbb4>)
 8018fd6:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 8018fd8:	4b69      	ldr	r3, [pc, #420]	; (8019180 <input_parameter+0xb9c>)
 8018fda:	4a6a      	ldr	r2, [pc, #424]	; (8019184 <input_parameter+0xba0>)
 8018fdc:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 8018fde:	4b68      	ldr	r3, [pc, #416]	; (8019180 <input_parameter+0xb9c>)
 8018fe0:	4a6f      	ldr	r2, [pc, #444]	; (80191a0 <input_parameter+0xbbc>)
 8018fe2:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 15;
 8018fe4:	4b66      	ldr	r3, [pc, #408]	; (8019180 <input_parameter+0xb9c>)
 8018fe6:	4a70      	ldr	r2, [pc, #448]	; (80191a8 <input_parameter+0xbc4>)
 8018fe8:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 8;
 8018fea:	4b65      	ldr	r3, [pc, #404]	; (8019180 <input_parameter+0xb9c>)
 8018fec:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018ff0:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 8018ff2:	4b63      	ldr	r3, [pc, #396]	; (8019180 <input_parameter+0xb9c>)
 8018ff4:	4a63      	ldr	r2, [pc, #396]	; (8019184 <input_parameter+0xba0>)
 8018ff6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 8018ffa:	4b61      	ldr	r3, [pc, #388]	; (8019180 <input_parameter+0xb9c>)
 8018ffc:	4a6b      	ldr	r2, [pc, #428]	; (80191ac <input_parameter+0xbc8>)
 8018ffe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 8;
 8019002:	4b5f      	ldr	r3, [pc, #380]	; (8019180 <input_parameter+0xb9c>)
 8019004:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8019008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 39;
 801900c:	4b5c      	ldr	r3, [pc, #368]	; (8019180 <input_parameter+0xb9c>)
 801900e:	4a68      	ldr	r2, [pc, #416]	; (80191b0 <input_parameter+0xbcc>)
 8019010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 8019014:	4b5a      	ldr	r3, [pc, #360]	; (8019180 <input_parameter+0xb9c>)
 8019016:	4a5b      	ldr	r2, [pc, #364]	; (8019184 <input_parameter+0xba0>)
 8019018:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 801901c:	4b58      	ldr	r3, [pc, #352]	; (8019180 <input_parameter+0xb9c>)
 801901e:	4a63      	ldr	r2, [pc, #396]	; (80191ac <input_parameter+0xbc8>)
 8019020:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 16;
 8019024:	4b56      	ldr	r3, [pc, #344]	; (8019180 <input_parameter+0xb9c>)
 8019026:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801902a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 39;
 801902e:	4b54      	ldr	r3, [pc, #336]	; (8019180 <input_parameter+0xb9c>)
 8019030:	4a5f      	ldr	r2, [pc, #380]	; (80191b0 <input_parameter+0xbcc>)
 8019032:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 8019036:	4b52      	ldr	r3, [pc, #328]	; (8019180 <input_parameter+0xb9c>)
 8019038:	4a52      	ldr	r2, [pc, #328]	; (8019184 <input_parameter+0xba0>)
 801903a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 801903e:	4b50      	ldr	r3, [pc, #320]	; (8019180 <input_parameter+0xb9c>)
 8019040:	4a5c      	ldr	r2, [pc, #368]	; (80191b4 <input_parameter+0xbd0>)
 8019042:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 16;
 8019046:	4b4e      	ldr	r3, [pc, #312]	; (8019180 <input_parameter+0xb9c>)
 8019048:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 801904c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 8019050:	4b4b      	ldr	r3, [pc, #300]	; (8019180 <input_parameter+0xb9c>)
 8019052:	4a42      	ldr	r2, [pc, #264]	; (801915c <input_parameter+0xb78>)
 8019054:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 8019058:	4b49      	ldr	r3, [pc, #292]	; (8019180 <input_parameter+0xb9c>)
 801905a:	4a4a      	ldr	r2, [pc, #296]	; (8019184 <input_parameter+0xba0>)
 801905c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 8019060:	4b47      	ldr	r3, [pc, #284]	; (8019180 <input_parameter+0xb9c>)
 8019062:	4a54      	ldr	r2, [pc, #336]	; (80191b4 <input_parameter+0xbd0>)
 8019064:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 15;
 8019068:	4b45      	ldr	r3, [pc, #276]	; (8019180 <input_parameter+0xb9c>)
 801906a:	4a4f      	ldr	r2, [pc, #316]	; (80191a8 <input_parameter+0xbc4>)
 801906c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 8019070:	4b43      	ldr	r3, [pc, #268]	; (8019180 <input_parameter+0xb9c>)
 8019072:	4a49      	ldr	r2, [pc, #292]	; (8019198 <input_parameter+0xbb4>)
 8019074:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 8019078:	4b41      	ldr	r3, [pc, #260]	; (8019180 <input_parameter+0xb9c>)
 801907a:	4a42      	ldr	r2, [pc, #264]	; (8019184 <input_parameter+0xba0>)
 801907c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 8019080:	4b3f      	ldr	r3, [pc, #252]	; (8019180 <input_parameter+0xb9c>)
 8019082:	4a4d      	ldr	r2, [pc, #308]	; (80191b8 <input_parameter+0xbd4>)
 8019084:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 33;
 8019088:	4b3d      	ldr	r3, [pc, #244]	; (8019180 <input_parameter+0xb9c>)
 801908a:	4a4c      	ldr	r2, [pc, #304]	; (80191bc <input_parameter+0xbd8>)
 801908c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 8019090:	4b3b      	ldr	r3, [pc, #236]	; (8019180 <input_parameter+0xb9c>)
 8019092:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8019096:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 801909a:	4b39      	ldr	r3, [pc, #228]	; (8019180 <input_parameter+0xb9c>)
 801909c:	4a39      	ldr	r2, [pc, #228]	; (8019184 <input_parameter+0xba0>)
 801909e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 80190a2:	4b37      	ldr	r3, [pc, #220]	; (8019180 <input_parameter+0xb9c>)
 80190a4:	4a44      	ldr	r2, [pc, #272]	; (80191b8 <input_parameter+0xbd4>)
 80190a6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 80190aa:	4b35      	ldr	r3, [pc, #212]	; (8019180 <input_parameter+0xb9c>)
 80190ac:	4a44      	ldr	r2, [pc, #272]	; (80191c0 <input_parameter+0xbdc>)
 80190ae:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 80190b2:	4b33      	ldr	r3, [pc, #204]	; (8019180 <input_parameter+0xb9c>)
 80190b4:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 80190b8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 80190bc:	4b30      	ldr	r3, [pc, #192]	; (8019180 <input_parameter+0xb9c>)
 80190be:	4a31      	ldr	r2, [pc, #196]	; (8019184 <input_parameter+0xba0>)
 80190c0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 80190c4:	4b2e      	ldr	r3, [pc, #184]	; (8019180 <input_parameter+0xb9c>)
 80190c6:	4a3b      	ldr	r2, [pc, #236]	; (80191b4 <input_parameter+0xbd0>)
 80190c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 8;
 80190cc:	4b2c      	ldr	r3, [pc, #176]	; (8019180 <input_parameter+0xb9c>)
 80190ce:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80190d2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 80190d6:	4b2a      	ldr	r3, [pc, #168]	; (8019180 <input_parameter+0xb9c>)
 80190d8:	4a24      	ldr	r2, [pc, #144]	; (801916c <input_parameter+0xb88>)
 80190da:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 80190de:	4b28      	ldr	r3, [pc, #160]	; (8019180 <input_parameter+0xb9c>)
 80190e0:	4a28      	ldr	r2, [pc, #160]	; (8019184 <input_parameter+0xba0>)
 80190e2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 80190e6:	4b26      	ldr	r3, [pc, #152]	; (8019180 <input_parameter+0xb9c>)
 80190e8:	4a32      	ldr	r2, [pc, #200]	; (80191b4 <input_parameter+0xbd0>)
 80190ea:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 80190ee:	4b24      	ldr	r3, [pc, #144]	; (8019180 <input_parameter+0xb9c>)
 80190f0:	4a1d      	ldr	r2, [pc, #116]	; (8019168 <input_parameter+0xb84>)
 80190f2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 80190f6:	4b22      	ldr	r3, [pc, #136]	; (8019180 <input_parameter+0xb9c>)
 80190f8:	4a1c      	ldr	r2, [pc, #112]	; (801916c <input_parameter+0xb88>)
 80190fa:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 80190fe:	4b20      	ldr	r3, [pc, #128]	; (8019180 <input_parameter+0xb9c>)
 8019100:	4a20      	ldr	r2, [pc, #128]	; (8019184 <input_parameter+0xba0>)
 8019102:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 8019106:	4b1e      	ldr	r3, [pc, #120]	; (8019180 <input_parameter+0xb9c>)
 8019108:	4a2e      	ldr	r2, [pc, #184]	; (80191c4 <input_parameter+0xbe0>)
 801910a:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 14;
 801910e:	4b1c      	ldr	r3, [pc, #112]	; (8019180 <input_parameter+0xb9c>)
 8019110:	4a1a      	ldr	r2, [pc, #104]	; (801917c <input_parameter+0xb98>)
 8019112:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 25;
 8019116:	4b1a      	ldr	r3, [pc, #104]	; (8019180 <input_parameter+0xb9c>)
 8019118:	4a20      	ldr	r2, [pc, #128]	; (801919c <input_parameter+0xbb8>)
 801911a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 801911e:	4b18      	ldr	r3, [pc, #96]	; (8019180 <input_parameter+0xb9c>)
 8019120:	4a18      	ldr	r2, [pc, #96]	; (8019184 <input_parameter+0xba0>)
 8019122:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 8019126:	4b16      	ldr	r3, [pc, #88]	; (8019180 <input_parameter+0xb9c>)
 8019128:	4a26      	ldr	r2, [pc, #152]	; (80191c4 <input_parameter+0xbe0>)
 801912a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8.5;
 801912e:	4b14      	ldr	r3, [pc, #80]	; (8019180 <input_parameter+0xb9c>)
 8019130:	4a25      	ldr	r2, [pc, #148]	; (80191c8 <input_parameter+0xbe4>)
 8019132:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 25;
 8019136:	4b12      	ldr	r3, [pc, #72]	; (8019180 <input_parameter+0xb9c>)
 8019138:	4a18      	ldr	r2, [pc, #96]	; (801919c <input_parameter+0xbb8>)
 801913a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 801913e:	4b23      	ldr	r3, [pc, #140]	; (80191cc <input_parameter+0xbe8>)
 8019140:	4a23      	ldr	r2, [pc, #140]	; (80191d0 <input_parameter+0xbec>)
 8019142:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 8019144:	4b21      	ldr	r3, [pc, #132]	; (80191cc <input_parameter+0xbe8>)
 8019146:	4a22      	ldr	r2, [pc, #136]	; (80191d0 <input_parameter+0xbec>)
 8019148:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1500;
 801914a:	4b20      	ldr	r3, [pc, #128]	; (80191cc <input_parameter+0xbe8>)
 801914c:	4a20      	ldr	r2, [pc, #128]	; (80191d0 <input_parameter+0xbec>)
 801914e:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1830;
 8019150:	4b1e      	ldr	r3, [pc, #120]	; (80191cc <input_parameter+0xbe8>)
 8019152:	4a20      	ldr	r2, [pc, #128]	; (80191d4 <input_parameter+0xbf0>)
 8019154:	63da      	str	r2, [r3, #60]	; 0x3c
 8019156:	e03f      	b.n	80191d8 <input_parameter+0xbf4>
 8019158:	2000f964 	.word	0x2000f964
 801915c:	41b00000 	.word	0x41b00000
 8019160:	447a0000 	.word	0x447a0000
 8019164:	44cf8000 	.word	0x44cf8000
 8019168:	41200000 	.word	0x41200000
 801916c:	41f00000 	.word	0x41f00000
 8019170:	44dac000 	.word	0x44dac000
 8019174:	41840000 	.word	0x41840000
 8019178:	41a80000 	.word	0x41a80000
 801917c:	41600000 	.word	0x41600000
 8019180:	2000faac 	.word	0x2000faac
 8019184:	44960000 	.word	0x44960000
 8019188:	44898000 	.word	0x44898000
 801918c:	40a00000 	.word	0x40a00000
 8019190:	41e00000 	.word	0x41e00000
 8019194:	44bcc000 	.word	0x44bcc000
 8019198:	41a00000 	.word	0x41a00000
 801919c:	41c80000 	.word	0x41c80000
 80191a0:	44ce4000 	.word	0x44ce4000
 80191a4:	41880000 	.word	0x41880000
 80191a8:	41700000 	.word	0x41700000
 80191ac:	44c1c000 	.word	0x44c1c000
 80191b0:	421c0000 	.word	0x421c0000
 80191b4:	44e74000 	.word	0x44e74000
 80191b8:	44af0000 	.word	0x44af0000
 80191bc:	42040000 	.word	0x42040000
 80191c0:	41c00000 	.word	0x41c00000
 80191c4:	44f3c000 	.word	0x44f3c000
 80191c8:	41080000 	.word	0x41080000
 80191cc:	2000fbf4 	.word	0x2000fbf4
 80191d0:	44bb8000 	.word	0x44bb8000
 80191d4:	44e4c000 	.word	0x44e4c000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 17;
 80191d8:	4b67      	ldr	r3, [pc, #412]	; (8019378 <input_parameter+0xd94>)
 80191da:	4a68      	ldr	r2, [pc, #416]	; (801937c <input_parameter+0xd98>)
 80191dc:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 80191de:	4b66      	ldr	r3, [pc, #408]	; (8019378 <input_parameter+0xd94>)
 80191e0:	4a67      	ldr	r2, [pc, #412]	; (8019380 <input_parameter+0xd9c>)
 80191e2:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1500;
 80191e4:	4b64      	ldr	r3, [pc, #400]	; (8019378 <input_parameter+0xd94>)
 80191e6:	4a67      	ldr	r2, [pc, #412]	; (8019384 <input_parameter+0xda0>)
 80191e8:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1830;
 80191ea:	4b63      	ldr	r3, [pc, #396]	; (8019378 <input_parameter+0xd94>)
 80191ec:	4a66      	ldr	r2, [pc, #408]	; (8019388 <input_parameter+0xda4>)
 80191ee:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 15;
 80191f0:	4b61      	ldr	r3, [pc, #388]	; (8019378 <input_parameter+0xd94>)
 80191f2:	4a66      	ldr	r2, [pc, #408]	; (801938c <input_parameter+0xda8>)
 80191f4:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 80191f6:	4b60      	ldr	r3, [pc, #384]	; (8019378 <input_parameter+0xd94>)
 80191f8:	4a65      	ldr	r2, [pc, #404]	; (8019390 <input_parameter+0xdac>)
 80191fa:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1500;
 80191fc:	4b5e      	ldr	r3, [pc, #376]	; (8019378 <input_parameter+0xd94>)
 80191fe:	4a61      	ldr	r2, [pc, #388]	; (8019384 <input_parameter+0xda0>)
 8019200:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 2000;
 8019202:	4b5d      	ldr	r3, [pc, #372]	; (8019378 <input_parameter+0xd94>)
 8019204:	4a63      	ldr	r2, [pc, #396]	; (8019394 <input_parameter+0xdb0>)
 8019206:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 10;
 8019208:	4b5b      	ldr	r3, [pc, #364]	; (8019378 <input_parameter+0xd94>)
 801920a:	4a63      	ldr	r2, [pc, #396]	; (8019398 <input_parameter+0xdb4>)
 801920c:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 801920e:	4b5a      	ldr	r3, [pc, #360]	; (8019378 <input_parameter+0xd94>)
 8019210:	4a62      	ldr	r2, [pc, #392]	; (801939c <input_parameter+0xdb8>)
 8019212:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1500;
 8019214:	4b58      	ldr	r3, [pc, #352]	; (8019378 <input_parameter+0xd94>)
 8019216:	4a5b      	ldr	r2, [pc, #364]	; (8019384 <input_parameter+0xda0>)
 8019218:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 2000;
 801921a:	4b57      	ldr	r3, [pc, #348]	; (8019378 <input_parameter+0xd94>)
 801921c:	4a5d      	ldr	r2, [pc, #372]	; (8019394 <input_parameter+0xdb0>)
 801921e:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 10;
 8019220:	4b55      	ldr	r3, [pc, #340]	; (8019378 <input_parameter+0xd94>)
 8019222:	4a5d      	ldr	r2, [pc, #372]	; (8019398 <input_parameter+0xdb4>)
 8019224:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 8019226:	4b54      	ldr	r3, [pc, #336]	; (8019378 <input_parameter+0xd94>)
 8019228:	4a5d      	ldr	r2, [pc, #372]	; (80193a0 <input_parameter+0xdbc>)
 801922a:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1500;
 801922c:	4b52      	ldr	r3, [pc, #328]	; (8019378 <input_parameter+0xd94>)
 801922e:	4a55      	ldr	r2, [pc, #340]	; (8019384 <input_parameter+0xda0>)
 8019230:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1850;
 8019234:	4b50      	ldr	r3, [pc, #320]	; (8019378 <input_parameter+0xd94>)
 8019236:	4a5b      	ldr	r2, [pc, #364]	; (80193a4 <input_parameter+0xdc0>)
 8019238:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 12;
 801923c:	4b4e      	ldr	r3, [pc, #312]	; (8019378 <input_parameter+0xd94>)
 801923e:	4a5a      	ldr	r2, [pc, #360]	; (80193a8 <input_parameter+0xdc4>)
 8019240:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8019244:	4b4c      	ldr	r3, [pc, #304]	; (8019378 <input_parameter+0xd94>)
 8019246:	4a59      	ldr	r2, [pc, #356]	; (80193ac <input_parameter+0xdc8>)
 8019248:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1500;
 801924c:	4b4a      	ldr	r3, [pc, #296]	; (8019378 <input_parameter+0xd94>)
 801924e:	4a4d      	ldr	r2, [pc, #308]	; (8019384 <input_parameter+0xda0>)
 8019250:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1850;
 8019254:	4b48      	ldr	r3, [pc, #288]	; (8019378 <input_parameter+0xd94>)
 8019256:	4a53      	ldr	r2, [pc, #332]	; (80193a4 <input_parameter+0xdc0>)
 8019258:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 12;
 801925c:	4b46      	ldr	r3, [pc, #280]	; (8019378 <input_parameter+0xd94>)
 801925e:	4a52      	ldr	r2, [pc, #328]	; (80193a8 <input_parameter+0xdc4>)
 8019260:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 8019264:	4b44      	ldr	r3, [pc, #272]	; (8019378 <input_parameter+0xd94>)
 8019266:	4a52      	ldr	r2, [pc, #328]	; (80193b0 <input_parameter+0xdcc>)
 8019268:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1500;
 801926c:	4b42      	ldr	r3, [pc, #264]	; (8019378 <input_parameter+0xd94>)
 801926e:	4a45      	ldr	r2, [pc, #276]	; (8019384 <input_parameter+0xda0>)
 8019270:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 2100;
 8019274:	4b40      	ldr	r3, [pc, #256]	; (8019378 <input_parameter+0xd94>)
 8019276:	4a4f      	ldr	r2, [pc, #316]	; (80193b4 <input_parameter+0xdd0>)
 8019278:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 13;
 801927c:	4b3e      	ldr	r3, [pc, #248]	; (8019378 <input_parameter+0xd94>)
 801927e:	4a4e      	ldr	r2, [pc, #312]	; (80193b8 <input_parameter+0xdd4>)
 8019280:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8019284:	4b3c      	ldr	r3, [pc, #240]	; (8019378 <input_parameter+0xd94>)
 8019286:	4a4a      	ldr	r2, [pc, #296]	; (80193b0 <input_parameter+0xdcc>)
 8019288:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1500;
 801928c:	4b3a      	ldr	r3, [pc, #232]	; (8019378 <input_parameter+0xd94>)
 801928e:	4a3d      	ldr	r2, [pc, #244]	; (8019384 <input_parameter+0xda0>)
 8019290:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 2100;
 8019294:	4b38      	ldr	r3, [pc, #224]	; (8019378 <input_parameter+0xd94>)
 8019296:	4a47      	ldr	r2, [pc, #284]	; (80193b4 <input_parameter+0xdd0>)
 8019298:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 13;
 801929c:	4b36      	ldr	r3, [pc, #216]	; (8019378 <input_parameter+0xd94>)
 801929e:	4a46      	ldr	r2, [pc, #280]	; (80193b8 <input_parameter+0xdd4>)
 80192a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 80192a4:	4b34      	ldr	r3, [pc, #208]	; (8019378 <input_parameter+0xd94>)
 80192a6:	4a45      	ldr	r2, [pc, #276]	; (80193bc <input_parameter+0xdd8>)
 80192a8:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1500;
 80192ac:	4b32      	ldr	r3, [pc, #200]	; (8019378 <input_parameter+0xd94>)
 80192ae:	4a35      	ldr	r2, [pc, #212]	; (8019384 <input_parameter+0xda0>)
 80192b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1800;
 80192b4:	4b30      	ldr	r3, [pc, #192]	; (8019378 <input_parameter+0xd94>)
 80192b6:	4a42      	ldr	r2, [pc, #264]	; (80193c0 <input_parameter+0xddc>)
 80192b8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 21;
 80192bc:	4b2e      	ldr	r3, [pc, #184]	; (8019378 <input_parameter+0xd94>)
 80192be:	4a41      	ldr	r2, [pc, #260]	; (80193c4 <input_parameter+0xde0>)
 80192c0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 80192c4:	4b2c      	ldr	r3, [pc, #176]	; (8019378 <input_parameter+0xd94>)
 80192c6:	4a40      	ldr	r2, [pc, #256]	; (80193c8 <input_parameter+0xde4>)
 80192c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1500;
 80192cc:	4b2a      	ldr	r3, [pc, #168]	; (8019378 <input_parameter+0xd94>)
 80192ce:	4a2d      	ldr	r2, [pc, #180]	; (8019384 <input_parameter+0xda0>)
 80192d0:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1800;
 80192d4:	4b28      	ldr	r3, [pc, #160]	; (8019378 <input_parameter+0xd94>)
 80192d6:	4a3a      	ldr	r2, [pc, #232]	; (80193c0 <input_parameter+0xddc>)
 80192d8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 18;
 80192dc:	4b26      	ldr	r3, [pc, #152]	; (8019378 <input_parameter+0xd94>)
 80192de:	4a30      	ldr	r2, [pc, #192]	; (80193a0 <input_parameter+0xdbc>)
 80192e0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80192e4:	4b24      	ldr	r3, [pc, #144]	; (8019378 <input_parameter+0xd94>)
 80192e6:	4a39      	ldr	r2, [pc, #228]	; (80193cc <input_parameter+0xde8>)
 80192e8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1500;
 80192ec:	4b22      	ldr	r3, [pc, #136]	; (8019378 <input_parameter+0xd94>)
 80192ee:	4a25      	ldr	r2, [pc, #148]	; (8019384 <input_parameter+0xda0>)
 80192f0:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 2200;
 80192f4:	4b20      	ldr	r3, [pc, #128]	; (8019378 <input_parameter+0xd94>)
 80192f6:	4a36      	ldr	r2, [pc, #216]	; (80193d0 <input_parameter+0xdec>)
 80192f8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 7;
 80192fc:	4b1e      	ldr	r3, [pc, #120]	; (8019378 <input_parameter+0xd94>)
 80192fe:	4a35      	ldr	r2, [pc, #212]	; (80193d4 <input_parameter+0xdf0>)
 8019300:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8019304:	4b1c      	ldr	r3, [pc, #112]	; (8019378 <input_parameter+0xd94>)
 8019306:	4a30      	ldr	r2, [pc, #192]	; (80193c8 <input_parameter+0xde4>)
 8019308:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1500;
 801930c:	4b1a      	ldr	r3, [pc, #104]	; (8019378 <input_parameter+0xd94>)
 801930e:	4a1d      	ldr	r2, [pc, #116]	; (8019384 <input_parameter+0xda0>)
 8019310:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 2200;
 8019314:	4b18      	ldr	r3, [pc, #96]	; (8019378 <input_parameter+0xd94>)
 8019316:	4a2e      	ldr	r2, [pc, #184]	; (80193d0 <input_parameter+0xdec>)
 8019318:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 7;
 801931c:	4b16      	ldr	r3, [pc, #88]	; (8019378 <input_parameter+0xd94>)
 801931e:	4a2d      	ldr	r2, [pc, #180]	; (80193d4 <input_parameter+0xdf0>)
 8019320:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 8019324:	4b14      	ldr	r3, [pc, #80]	; (8019378 <input_parameter+0xd94>)
 8019326:	4a2c      	ldr	r2, [pc, #176]	; (80193d8 <input_parameter+0xdf4>)
 8019328:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 801932c:	4b12      	ldr	r3, [pc, #72]	; (8019378 <input_parameter+0xd94>)
 801932e:	4a15      	ldr	r2, [pc, #84]	; (8019384 <input_parameter+0xda0>)
 8019330:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2150;
 8019334:	4b10      	ldr	r3, [pc, #64]	; (8019378 <input_parameter+0xd94>)
 8019336:	4a29      	ldr	r2, [pc, #164]	; (80193dc <input_parameter+0xdf8>)
 8019338:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 801933c:	4b0e      	ldr	r3, [pc, #56]	; (8019378 <input_parameter+0xd94>)
 801933e:	4a28      	ldr	r2, [pc, #160]	; (80193e0 <input_parameter+0xdfc>)
 8019340:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 8019344:	4b0c      	ldr	r3, [pc, #48]	; (8019378 <input_parameter+0xd94>)
 8019346:	4a15      	ldr	r2, [pc, #84]	; (801939c <input_parameter+0xdb8>)
 8019348:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 801934c:	4b0a      	ldr	r3, [pc, #40]	; (8019378 <input_parameter+0xd94>)
 801934e:	4a0d      	ldr	r2, [pc, #52]	; (8019384 <input_parameter+0xda0>)
 8019350:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2150;
 8019354:	4b08      	ldr	r3, [pc, #32]	; (8019378 <input_parameter+0xd94>)
 8019356:	4a21      	ldr	r2, [pc, #132]	; (80193dc <input_parameter+0xdf8>)
 8019358:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 801935c:	4b06      	ldr	r3, [pc, #24]	; (8019378 <input_parameter+0xd94>)
 801935e:	4a20      	ldr	r2, [pc, #128]	; (80193e0 <input_parameter+0xdfc>)
 8019360:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 8019364:	4b04      	ldr	r3, [pc, #16]	; (8019378 <input_parameter+0xd94>)
 8019366:	4a0d      	ldr	r2, [pc, #52]	; (801939c <input_parameter+0xdb8>)
 8019368:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 801936c:	bf00      	nop
 801936e:	46bd      	mov	sp, r7
 8019370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019374:	4770      	bx	lr
 8019376:	bf00      	nop
 8019378:	2000fbf4 	.word	0x2000fbf4
 801937c:	41880000 	.word	0x41880000
 8019380:	41f80000 	.word	0x41f80000
 8019384:	44bb8000 	.word	0x44bb8000
 8019388:	44e4c000 	.word	0x44e4c000
 801938c:	41700000 	.word	0x41700000
 8019390:	420c0000 	.word	0x420c0000
 8019394:	44fa0000 	.word	0x44fa0000
 8019398:	41200000 	.word	0x41200000
 801939c:	41a00000 	.word	0x41a00000
 80193a0:	41900000 	.word	0x41900000
 80193a4:	44e74000 	.word	0x44e74000
 80193a8:	41400000 	.word	0x41400000
 80193ac:	42180000 	.word	0x42180000
 80193b0:	42100000 	.word	0x42100000
 80193b4:	45034000 	.word	0x45034000
 80193b8:	41500000 	.word	0x41500000
 80193bc:	42080000 	.word	0x42080000
 80193c0:	44e10000 	.word	0x44e10000
 80193c4:	41a80000 	.word	0x41a80000
 80193c8:	41b00000 	.word	0x41b00000
 80193cc:	41c00000 	.word	0x41c00000
 80193d0:	45098000 	.word	0x45098000
 80193d4:	40e00000 	.word	0x40e00000
 80193d8:	41f00000 	.word	0x41f00000
 80193dc:	45066000 	.word	0x45066000
 80193e0:	40400000 	.word	0x40400000

080193e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80193e4:	b580      	push	{r7, lr}
 80193e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80193e8:	4b22      	ldr	r3, [pc, #136]	; (8019474 <MX_USART1_UART_Init+0x90>)
 80193ea:	4a23      	ldr	r2, [pc, #140]	; (8019478 <MX_USART1_UART_Init+0x94>)
 80193ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80193ee:	4b21      	ldr	r3, [pc, #132]	; (8019474 <MX_USART1_UART_Init+0x90>)
 80193f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80193f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80193f6:	4b1f      	ldr	r3, [pc, #124]	; (8019474 <MX_USART1_UART_Init+0x90>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80193fc:	4b1d      	ldr	r3, [pc, #116]	; (8019474 <MX_USART1_UART_Init+0x90>)
 80193fe:	2200      	movs	r2, #0
 8019400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8019402:	4b1c      	ldr	r3, [pc, #112]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019404:	2200      	movs	r2, #0
 8019406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8019408:	4b1a      	ldr	r3, [pc, #104]	; (8019474 <MX_USART1_UART_Init+0x90>)
 801940a:	220c      	movs	r2, #12
 801940c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801940e:	4b19      	ldr	r3, [pc, #100]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019410:	2200      	movs	r2, #0
 8019412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8019414:	4b17      	ldr	r3, [pc, #92]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019416:	2200      	movs	r2, #0
 8019418:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801941a:	4b16      	ldr	r3, [pc, #88]	; (8019474 <MX_USART1_UART_Init+0x90>)
 801941c:	2200      	movs	r2, #0
 801941e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8019420:	4b14      	ldr	r3, [pc, #80]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019422:	2200      	movs	r2, #0
 8019424:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8019426:	4b13      	ldr	r3, [pc, #76]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019428:	2200      	movs	r2, #0
 801942a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801942c:	4811      	ldr	r0, [pc, #68]	; (8019474 <MX_USART1_UART_Init+0x90>)
 801942e:	f006 fd2d 	bl	801fe8c <HAL_UART_Init>
 8019432:	4603      	mov	r3, r0
 8019434:	2b00      	cmp	r3, #0
 8019436:	d001      	beq.n	801943c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8019438:	f7f1 f9ef 	bl	800a81a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 801943c:	2100      	movs	r1, #0
 801943e:	480d      	ldr	r0, [pc, #52]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019440:	f007 faf4 	bl	8020a2c <HAL_UARTEx_SetTxFifoThreshold>
 8019444:	4603      	mov	r3, r0
 8019446:	2b00      	cmp	r3, #0
 8019448:	d001      	beq.n	801944e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 801944a:	f7f1 f9e6 	bl	800a81a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801944e:	2100      	movs	r1, #0
 8019450:	4808      	ldr	r0, [pc, #32]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019452:	f007 fb29 	bl	8020aa8 <HAL_UARTEx_SetRxFifoThreshold>
 8019456:	4603      	mov	r3, r0
 8019458:	2b00      	cmp	r3, #0
 801945a:	d001      	beq.n	8019460 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 801945c:	f7f1 f9dd 	bl	800a81a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8019460:	4804      	ldr	r0, [pc, #16]	; (8019474 <MX_USART1_UART_Init+0x90>)
 8019462:	f007 faaa 	bl	80209ba <HAL_UARTEx_DisableFifoMode>
 8019466:	4603      	mov	r3, r0
 8019468:	2b00      	cmp	r3, #0
 801946a:	d001      	beq.n	8019470 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 801946c:	f7f1 f9d5 	bl	800a81a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8019470:	bf00      	nop
 8019472:	bd80      	pop	{r7, pc}
 8019474:	2000fd3c 	.word	0x2000fd3c
 8019478:	40013800 	.word	0x40013800

0801947c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b09e      	sub	sp, #120	; 0x78
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019484:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019488:	2200      	movs	r2, #0
 801948a:	601a      	str	r2, [r3, #0]
 801948c:	605a      	str	r2, [r3, #4]
 801948e:	609a      	str	r2, [r3, #8]
 8019490:	60da      	str	r2, [r3, #12]
 8019492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8019494:	f107 0314 	add.w	r3, r7, #20
 8019498:	2250      	movs	r2, #80	; 0x50
 801949a:	2100      	movs	r1, #0
 801949c:	4618      	mov	r0, r3
 801949e:	f007 fbc7 	bl	8020c30 <memset>
  if(uartHandle->Instance==USART1)
 80194a2:	687b      	ldr	r3, [r7, #4]
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	4a1f      	ldr	r2, [pc, #124]	; (8019524 <HAL_UART_MspInit+0xa8>)
 80194a8:	4293      	cmp	r3, r2
 80194aa:	d137      	bne.n	801951c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80194ac:	2301      	movs	r3, #1
 80194ae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80194b0:	2300      	movs	r3, #0
 80194b2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80194b4:	f107 0314 	add.w	r3, r7, #20
 80194b8:	4618      	mov	r0, r3
 80194ba:	f004 f891 	bl	801d5e0 <HAL_RCCEx_PeriphCLKConfig>
 80194be:	4603      	mov	r3, r0
 80194c0:	2b00      	cmp	r3, #0
 80194c2:	d001      	beq.n	80194c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80194c4:	f7f1 f9a9 	bl	800a81a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80194c8:	4b17      	ldr	r3, [pc, #92]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80194cc:	4a16      	ldr	r2, [pc, #88]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80194d2:	6613      	str	r3, [r2, #96]	; 0x60
 80194d4:	4b14      	ldr	r3, [pc, #80]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80194d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80194dc:	613b      	str	r3, [r7, #16]
 80194de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80194e0:	4b11      	ldr	r3, [pc, #68]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80194e4:	4a10      	ldr	r2, [pc, #64]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194e6:	f043 0301 	orr.w	r3, r3, #1
 80194ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80194ec:	4b0e      	ldr	r3, [pc, #56]	; (8019528 <HAL_UART_MspInit+0xac>)
 80194ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80194f0:	f003 0301 	and.w	r3, r3, #1
 80194f4:	60fb      	str	r3, [r7, #12]
 80194f6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80194f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80194fc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80194fe:	2302      	movs	r3, #2
 8019500:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019502:	2300      	movs	r3, #0
 8019504:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019506:	2300      	movs	r3, #0
 8019508:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801950a:	2307      	movs	r3, #7
 801950c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801950e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8019512:	4619      	mov	r1, r3
 8019514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8019518:	f003 f8e4 	bl	801c6e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801951c:	bf00      	nop
 801951e:	3778      	adds	r7, #120	; 0x78
 8019520:	46bd      	mov	sp, r7
 8019522:	bd80      	pop	{r7, pc}
 8019524:	40013800 	.word	0x40013800
 8019528:	40021000 	.word	0x40021000

0801952c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 801952c:	480d      	ldr	r0, [pc, #52]	; (8019564 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801952e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8019530:	480d      	ldr	r0, [pc, #52]	; (8019568 <LoopForever+0x6>)
  ldr r1, =_edata
 8019532:	490e      	ldr	r1, [pc, #56]	; (801956c <LoopForever+0xa>)
  ldr r2, =_sidata
 8019534:	4a0e      	ldr	r2, [pc, #56]	; (8019570 <LoopForever+0xe>)
  movs r3, #0
 8019536:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8019538:	e002      	b.n	8019540 <LoopCopyDataInit>

0801953a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801953a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801953c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801953e:	3304      	adds	r3, #4

08019540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8019540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8019542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8019544:	d3f9      	bcc.n	801953a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8019546:	4a0b      	ldr	r2, [pc, #44]	; (8019574 <LoopForever+0x12>)
  ldr r4, =_ebss
 8019548:	4c0b      	ldr	r4, [pc, #44]	; (8019578 <LoopForever+0x16>)
  movs r3, #0
 801954a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801954c:	e001      	b.n	8019552 <LoopFillZerobss>

0801954e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801954e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8019550:	3204      	adds	r2, #4

08019552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8019552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8019554:	d3fb      	bcc.n	801954e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8019556:	f7fe fd7d 	bl	8018054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801955a:	f007 fb37 	bl	8020bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 801955e:	f7f1 f85f 	bl	800a620 <main>

08019562 <LoopForever>:

LoopForever:
    b LoopForever
 8019562:	e7fe      	b.n	8019562 <LoopForever>
  ldr   r0, =_estack
 8019564:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8019568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801956c:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8019570:	080257d8 	.word	0x080257d8
  ldr r2, =_sbss
 8019574:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8019578:	2000fde0 	.word	0x2000fde0

0801957c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 801957c:	e7fe      	b.n	801957c <ADC3_IRQHandler>
	...

08019580 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b082      	sub	sp, #8
 8019584:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8019586:	2300      	movs	r3, #0
 8019588:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 801958a:	4b0c      	ldr	r3, [pc, #48]	; (80195bc <HAL_Init+0x3c>)
 801958c:	681b      	ldr	r3, [r3, #0]
 801958e:	4a0b      	ldr	r2, [pc, #44]	; (80195bc <HAL_Init+0x3c>)
 8019590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019594:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019596:	2003      	movs	r0, #3
 8019598:	f002 fb30 	bl	801bbfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801959c:	2000      	movs	r0, #0
 801959e:	f000 f80f 	bl	80195c0 <HAL_InitTick>
 80195a2:	4603      	mov	r3, r0
 80195a4:	2b00      	cmp	r3, #0
 80195a6:	d002      	beq.n	80195ae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80195a8:	2301      	movs	r3, #1
 80195aa:	71fb      	strb	r3, [r7, #7]
 80195ac:	e001      	b.n	80195b2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80195ae:	f7fe fc05 	bl	8017dbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80195b2:	79fb      	ldrb	r3, [r7, #7]

}
 80195b4:	4618      	mov	r0, r3
 80195b6:	3708      	adds	r7, #8
 80195b8:	46bd      	mov	sp, r7
 80195ba:	bd80      	pop	{r7, pc}
 80195bc:	40022000 	.word	0x40022000

080195c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80195c0:	b580      	push	{r7, lr}
 80195c2:	b084      	sub	sp, #16
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80195c8:	2300      	movs	r3, #0
 80195ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80195cc:	4b16      	ldr	r3, [pc, #88]	; (8019628 <HAL_InitTick+0x68>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d022      	beq.n	801961a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80195d4:	4b15      	ldr	r3, [pc, #84]	; (801962c <HAL_InitTick+0x6c>)
 80195d6:	681a      	ldr	r2, [r3, #0]
 80195d8:	4b13      	ldr	r3, [pc, #76]	; (8019628 <HAL_InitTick+0x68>)
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80195e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80195e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80195e8:	4618      	mov	r0, r3
 80195ea:	f002 fb3a 	bl	801bc62 <HAL_SYSTICK_Config>
 80195ee:	4603      	mov	r3, r0
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d10f      	bne.n	8019614 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	2b0f      	cmp	r3, #15
 80195f8:	d809      	bhi.n	801960e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80195fa:	2200      	movs	r2, #0
 80195fc:	6879      	ldr	r1, [r7, #4]
 80195fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019602:	f002 fb06 	bl	801bc12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8019606:	4a0a      	ldr	r2, [pc, #40]	; (8019630 <HAL_InitTick+0x70>)
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	6013      	str	r3, [r2, #0]
 801960c:	e007      	b.n	801961e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 801960e:	2301      	movs	r3, #1
 8019610:	73fb      	strb	r3, [r7, #15]
 8019612:	e004      	b.n	801961e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8019614:	2301      	movs	r3, #1
 8019616:	73fb      	strb	r3, [r7, #15]
 8019618:	e001      	b.n	801961e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 801961a:	2301      	movs	r3, #1
 801961c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 801961e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019620:	4618      	mov	r0, r3
 8019622:	3710      	adds	r7, #16
 8019624:	46bd      	mov	sp, r7
 8019626:	bd80      	pop	{r7, pc}
 8019628:	20000008 	.word	0x20000008
 801962c:	20000000 	.word	0x20000000
 8019630:	20000004 	.word	0x20000004

08019634 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019634:	b480      	push	{r7}
 8019636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019638:	4b05      	ldr	r3, [pc, #20]	; (8019650 <HAL_IncTick+0x1c>)
 801963a:	681a      	ldr	r2, [r3, #0]
 801963c:	4b05      	ldr	r3, [pc, #20]	; (8019654 <HAL_IncTick+0x20>)
 801963e:	681b      	ldr	r3, [r3, #0]
 8019640:	4413      	add	r3, r2
 8019642:	4a03      	ldr	r2, [pc, #12]	; (8019650 <HAL_IncTick+0x1c>)
 8019644:	6013      	str	r3, [r2, #0]
}
 8019646:	bf00      	nop
 8019648:	46bd      	mov	sp, r7
 801964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964e:	4770      	bx	lr
 8019650:	2000fdcc 	.word	0x2000fdcc
 8019654:	20000008 	.word	0x20000008

08019658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019658:	b480      	push	{r7}
 801965a:	af00      	add	r7, sp, #0
  return uwTick;
 801965c:	4b03      	ldr	r3, [pc, #12]	; (801966c <HAL_GetTick+0x14>)
 801965e:	681b      	ldr	r3, [r3, #0]
}
 8019660:	4618      	mov	r0, r3
 8019662:	46bd      	mov	sp, r7
 8019664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019668:	4770      	bx	lr
 801966a:	bf00      	nop
 801966c:	2000fdcc 	.word	0x2000fdcc

08019670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b084      	sub	sp, #16
 8019674:	af00      	add	r7, sp, #0
 8019676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019678:	f7ff ffee 	bl	8019658 <HAL_GetTick>
 801967c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019682:	68fb      	ldr	r3, [r7, #12]
 8019684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019688:	d004      	beq.n	8019694 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 801968a:	4b09      	ldr	r3, [pc, #36]	; (80196b0 <HAL_Delay+0x40>)
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	68fa      	ldr	r2, [r7, #12]
 8019690:	4413      	add	r3, r2
 8019692:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019694:	bf00      	nop
 8019696:	f7ff ffdf 	bl	8019658 <HAL_GetTick>
 801969a:	4602      	mov	r2, r0
 801969c:	68bb      	ldr	r3, [r7, #8]
 801969e:	1ad3      	subs	r3, r2, r3
 80196a0:	68fa      	ldr	r2, [r7, #12]
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d8f7      	bhi.n	8019696 <HAL_Delay+0x26>
  {
  }
}
 80196a6:	bf00      	nop
 80196a8:	bf00      	nop
 80196aa:	3710      	adds	r7, #16
 80196ac:	46bd      	mov	sp, r7
 80196ae:	bd80      	pop	{r7, pc}
 80196b0:	20000008 	.word	0x20000008

080196b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80196b4:	b480      	push	{r7}
 80196b6:	b083      	sub	sp, #12
 80196b8:	af00      	add	r7, sp, #0
 80196ba:	6078      	str	r0, [r7, #4]
 80196bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	689b      	ldr	r3, [r3, #8]
 80196c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80196c6:	683b      	ldr	r3, [r7, #0]
 80196c8:	431a      	orrs	r2, r3
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	609a      	str	r2, [r3, #8]
}
 80196ce:	bf00      	nop
 80196d0:	370c      	adds	r7, #12
 80196d2:	46bd      	mov	sp, r7
 80196d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d8:	4770      	bx	lr

080196da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80196da:	b480      	push	{r7}
 80196dc:	b083      	sub	sp, #12
 80196de:	af00      	add	r7, sp, #0
 80196e0:	6078      	str	r0, [r7, #4]
 80196e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	689b      	ldr	r3, [r3, #8]
 80196e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80196ec:	683b      	ldr	r3, [r7, #0]
 80196ee:	431a      	orrs	r2, r3
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	609a      	str	r2, [r3, #8]
}
 80196f4:	bf00      	nop
 80196f6:	370c      	adds	r7, #12
 80196f8:	46bd      	mov	sp, r7
 80196fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fe:	4770      	bx	lr

08019700 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8019700:	b480      	push	{r7}
 8019702:	b083      	sub	sp, #12
 8019704:	af00      	add	r7, sp, #0
 8019706:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	689b      	ldr	r3, [r3, #8]
 801970c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8019710:	4618      	mov	r0, r3
 8019712:	370c      	adds	r7, #12
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr

0801971c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 801971c:	b480      	push	{r7}
 801971e:	b087      	sub	sp, #28
 8019720:	af00      	add	r7, sp, #0
 8019722:	60f8      	str	r0, [r7, #12]
 8019724:	60b9      	str	r1, [r7, #8]
 8019726:	607a      	str	r2, [r7, #4]
 8019728:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	3360      	adds	r3, #96	; 0x60
 801972e:	461a      	mov	r2, r3
 8019730:	68bb      	ldr	r3, [r7, #8]
 8019732:	009b      	lsls	r3, r3, #2
 8019734:	4413      	add	r3, r2
 8019736:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019738:	697b      	ldr	r3, [r7, #20]
 801973a:	681a      	ldr	r2, [r3, #0]
 801973c:	4b08      	ldr	r3, [pc, #32]	; (8019760 <LL_ADC_SetOffset+0x44>)
 801973e:	4013      	ands	r3, r2
 8019740:	687a      	ldr	r2, [r7, #4]
 8019742:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8019746:	683a      	ldr	r2, [r7, #0]
 8019748:	430a      	orrs	r2, r1
 801974a:	4313      	orrs	r3, r2
 801974c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8019750:	697b      	ldr	r3, [r7, #20]
 8019752:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8019754:	bf00      	nop
 8019756:	371c      	adds	r7, #28
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr
 8019760:	03fff000 	.word	0x03fff000

08019764 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8019764:	b480      	push	{r7}
 8019766:	b085      	sub	sp, #20
 8019768:	af00      	add	r7, sp, #0
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	3360      	adds	r3, #96	; 0x60
 8019772:	461a      	mov	r2, r3
 8019774:	683b      	ldr	r3, [r7, #0]
 8019776:	009b      	lsls	r3, r3, #2
 8019778:	4413      	add	r3, r2
 801977a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801977c:	68fb      	ldr	r3, [r7, #12]
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8019784:	4618      	mov	r0, r3
 8019786:	3714      	adds	r7, #20
 8019788:	46bd      	mov	sp, r7
 801978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978e:	4770      	bx	lr

08019790 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8019790:	b480      	push	{r7}
 8019792:	b087      	sub	sp, #28
 8019794:	af00      	add	r7, sp, #0
 8019796:	60f8      	str	r0, [r7, #12]
 8019798:	60b9      	str	r1, [r7, #8]
 801979a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801979c:	68fb      	ldr	r3, [r7, #12]
 801979e:	3360      	adds	r3, #96	; 0x60
 80197a0:	461a      	mov	r2, r3
 80197a2:	68bb      	ldr	r3, [r7, #8]
 80197a4:	009b      	lsls	r3, r3, #2
 80197a6:	4413      	add	r3, r2
 80197a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80197aa:	697b      	ldr	r3, [r7, #20]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	431a      	orrs	r2, r3
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80197ba:	bf00      	nop
 80197bc:	371c      	adds	r7, #28
 80197be:	46bd      	mov	sp, r7
 80197c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c4:	4770      	bx	lr

080197c6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80197c6:	b480      	push	{r7}
 80197c8:	b087      	sub	sp, #28
 80197ca:	af00      	add	r7, sp, #0
 80197cc:	60f8      	str	r0, [r7, #12]
 80197ce:	60b9      	str	r1, [r7, #8]
 80197d0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80197d2:	68fb      	ldr	r3, [r7, #12]
 80197d4:	3360      	adds	r3, #96	; 0x60
 80197d6:	461a      	mov	r2, r3
 80197d8:	68bb      	ldr	r3, [r7, #8]
 80197da:	009b      	lsls	r3, r3, #2
 80197dc:	4413      	add	r3, r2
 80197de:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80197e0:	697b      	ldr	r3, [r7, #20]
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	431a      	orrs	r2, r3
 80197ec:	697b      	ldr	r3, [r7, #20]
 80197ee:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80197f0:	bf00      	nop
 80197f2:	371c      	adds	r7, #28
 80197f4:	46bd      	mov	sp, r7
 80197f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197fa:	4770      	bx	lr

080197fc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80197fc:	b480      	push	{r7}
 80197fe:	b087      	sub	sp, #28
 8019800:	af00      	add	r7, sp, #0
 8019802:	60f8      	str	r0, [r7, #12]
 8019804:	60b9      	str	r1, [r7, #8]
 8019806:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8019808:	68fb      	ldr	r3, [r7, #12]
 801980a:	3360      	adds	r3, #96	; 0x60
 801980c:	461a      	mov	r2, r3
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	4413      	add	r3, r2
 8019814:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8019816:	697b      	ldr	r3, [r7, #20]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	431a      	orrs	r2, r3
 8019822:	697b      	ldr	r3, [r7, #20]
 8019824:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8019826:	bf00      	nop
 8019828:	371c      	adds	r7, #28
 801982a:	46bd      	mov	sp, r7
 801982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019830:	4770      	bx	lr

08019832 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8019832:	b480      	push	{r7}
 8019834:	b083      	sub	sp, #12
 8019836:	af00      	add	r7, sp, #0
 8019838:	6078      	str	r0, [r7, #4]
 801983a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	695b      	ldr	r3, [r3, #20]
 8019840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019844:	683b      	ldr	r3, [r7, #0]
 8019846:	431a      	orrs	r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	615a      	str	r2, [r3, #20]
}
 801984c:	bf00      	nop
 801984e:	370c      	adds	r7, #12
 8019850:	46bd      	mov	sp, r7
 8019852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019856:	4770      	bx	lr

08019858 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8019858:	b480      	push	{r7}
 801985a:	b083      	sub	sp, #12
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8019860:	687b      	ldr	r3, [r7, #4]
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8019868:	2b00      	cmp	r3, #0
 801986a:	d101      	bne.n	8019870 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 801986c:	2301      	movs	r3, #1
 801986e:	e000      	b.n	8019872 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8019870:	2300      	movs	r3, #0
}
 8019872:	4618      	mov	r0, r3
 8019874:	370c      	adds	r7, #12
 8019876:	46bd      	mov	sp, r7
 8019878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801987c:	4770      	bx	lr

0801987e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801987e:	b480      	push	{r7}
 8019880:	b087      	sub	sp, #28
 8019882:	af00      	add	r7, sp, #0
 8019884:	60f8      	str	r0, [r7, #12]
 8019886:	60b9      	str	r1, [r7, #8]
 8019888:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	3330      	adds	r3, #48	; 0x30
 801988e:	461a      	mov	r2, r3
 8019890:	68bb      	ldr	r3, [r7, #8]
 8019892:	0a1b      	lsrs	r3, r3, #8
 8019894:	009b      	lsls	r3, r3, #2
 8019896:	f003 030c 	and.w	r3, r3, #12
 801989a:	4413      	add	r3, r2
 801989c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801989e:	697b      	ldr	r3, [r7, #20]
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	68bb      	ldr	r3, [r7, #8]
 80198a4:	f003 031f 	and.w	r3, r3, #31
 80198a8:	211f      	movs	r1, #31
 80198aa:	fa01 f303 	lsl.w	r3, r1, r3
 80198ae:	43db      	mvns	r3, r3
 80198b0:	401a      	ands	r2, r3
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	0e9b      	lsrs	r3, r3, #26
 80198b6:	f003 011f 	and.w	r1, r3, #31
 80198ba:	68bb      	ldr	r3, [r7, #8]
 80198bc:	f003 031f 	and.w	r3, r3, #31
 80198c0:	fa01 f303 	lsl.w	r3, r1, r3
 80198c4:	431a      	orrs	r2, r3
 80198c6:	697b      	ldr	r3, [r7, #20]
 80198c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80198ca:	bf00      	nop
 80198cc:	371c      	adds	r7, #28
 80198ce:	46bd      	mov	sp, r7
 80198d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d4:	4770      	bx	lr

080198d6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80198d6:	b480      	push	{r7}
 80198d8:	b083      	sub	sp, #12
 80198da:	af00      	add	r7, sp, #0
 80198dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80198e2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d101      	bne.n	80198ee <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80198ea:	2301      	movs	r3, #1
 80198ec:	e000      	b.n	80198f0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80198ee:	2300      	movs	r3, #0
}
 80198f0:	4618      	mov	r0, r3
 80198f2:	370c      	adds	r7, #12
 80198f4:	46bd      	mov	sp, r7
 80198f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198fa:	4770      	bx	lr

080198fc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80198fc:	b480      	push	{r7}
 80198fe:	b087      	sub	sp, #28
 8019900:	af00      	add	r7, sp, #0
 8019902:	60f8      	str	r0, [r7, #12]
 8019904:	60b9      	str	r1, [r7, #8]
 8019906:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	3314      	adds	r3, #20
 801990c:	461a      	mov	r2, r3
 801990e:	68bb      	ldr	r3, [r7, #8]
 8019910:	0e5b      	lsrs	r3, r3, #25
 8019912:	009b      	lsls	r3, r3, #2
 8019914:	f003 0304 	and.w	r3, r3, #4
 8019918:	4413      	add	r3, r2
 801991a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801991c:	697b      	ldr	r3, [r7, #20]
 801991e:	681a      	ldr	r2, [r3, #0]
 8019920:	68bb      	ldr	r3, [r7, #8]
 8019922:	0d1b      	lsrs	r3, r3, #20
 8019924:	f003 031f 	and.w	r3, r3, #31
 8019928:	2107      	movs	r1, #7
 801992a:	fa01 f303 	lsl.w	r3, r1, r3
 801992e:	43db      	mvns	r3, r3
 8019930:	401a      	ands	r2, r3
 8019932:	68bb      	ldr	r3, [r7, #8]
 8019934:	0d1b      	lsrs	r3, r3, #20
 8019936:	f003 031f 	and.w	r3, r3, #31
 801993a:	6879      	ldr	r1, [r7, #4]
 801993c:	fa01 f303 	lsl.w	r3, r1, r3
 8019940:	431a      	orrs	r2, r3
 8019942:	697b      	ldr	r3, [r7, #20]
 8019944:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8019946:	bf00      	nop
 8019948:	371c      	adds	r7, #28
 801994a:	46bd      	mov	sp, r7
 801994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019950:	4770      	bx	lr
	...

08019954 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8019954:	b480      	push	{r7}
 8019956:	b085      	sub	sp, #20
 8019958:	af00      	add	r7, sp, #0
 801995a:	60f8      	str	r0, [r7, #12]
 801995c:	60b9      	str	r1, [r7, #8]
 801995e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	4a0f      	ldr	r2, [pc, #60]	; (80199a0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8019964:	4293      	cmp	r3, r2
 8019966:	d10a      	bne.n	801997e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8019974:	431a      	orrs	r2, r3
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 801997c:	e00a      	b.n	8019994 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 801997e:	68fb      	ldr	r3, [r7, #12]
 8019980:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8019984:	68bb      	ldr	r3, [r7, #8]
 8019986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801998a:	43db      	mvns	r3, r3
 801998c:	401a      	ands	r2, r3
 801998e:	68fb      	ldr	r3, [r7, #12]
 8019990:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8019994:	bf00      	nop
 8019996:	3714      	adds	r7, #20
 8019998:	46bd      	mov	sp, r7
 801999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801999e:	4770      	bx	lr
 80199a0:	407f0000 	.word	0x407f0000

080199a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80199a4:	b480      	push	{r7}
 80199a6:	b083      	sub	sp, #12
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80199ac:	687b      	ldr	r3, [r7, #4]
 80199ae:	689b      	ldr	r3, [r3, #8]
 80199b0:	f003 031f 	and.w	r3, r3, #31
}
 80199b4:	4618      	mov	r0, r3
 80199b6:	370c      	adds	r7, #12
 80199b8:	46bd      	mov	sp, r7
 80199ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199be:	4770      	bx	lr

080199c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80199c0:	b480      	push	{r7}
 80199c2:	b083      	sub	sp, #12
 80199c4:	af00      	add	r7, sp, #0
 80199c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	689b      	ldr	r3, [r3, #8]
 80199cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80199d0:	4618      	mov	r0, r3
 80199d2:	370c      	adds	r7, #12
 80199d4:	46bd      	mov	sp, r7
 80199d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199da:	4770      	bx	lr

080199dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80199dc:	b480      	push	{r7}
 80199de:	b083      	sub	sp, #12
 80199e0:	af00      	add	r7, sp, #0
 80199e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	689b      	ldr	r3, [r3, #8]
 80199e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80199ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80199f0:	687a      	ldr	r2, [r7, #4]
 80199f2:	6093      	str	r3, [r2, #8]
}
 80199f4:	bf00      	nop
 80199f6:	370c      	adds	r7, #12
 80199f8:	46bd      	mov	sp, r7
 80199fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199fe:	4770      	bx	lr

08019a00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8019a00:	b480      	push	{r7}
 8019a02:	b083      	sub	sp, #12
 8019a04:	af00      	add	r7, sp, #0
 8019a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	689b      	ldr	r3, [r3, #8]
 8019a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019a14:	d101      	bne.n	8019a1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8019a16:	2301      	movs	r3, #1
 8019a18:	e000      	b.n	8019a1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8019a1a:	2300      	movs	r3, #0
}
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	370c      	adds	r7, #12
 8019a20:	46bd      	mov	sp, r7
 8019a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a26:	4770      	bx	lr

08019a28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8019a28:	b480      	push	{r7}
 8019a2a:	b083      	sub	sp, #12
 8019a2c:	af00      	add	r7, sp, #0
 8019a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	689b      	ldr	r3, [r3, #8]
 8019a34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8019a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8019a44:	bf00      	nop
 8019a46:	370c      	adds	r7, #12
 8019a48:	46bd      	mov	sp, r7
 8019a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a4e:	4770      	bx	lr

08019a50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8019a50:	b480      	push	{r7}
 8019a52:	b083      	sub	sp, #12
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	689b      	ldr	r3, [r3, #8]
 8019a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8019a64:	d101      	bne.n	8019a6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8019a66:	2301      	movs	r3, #1
 8019a68:	e000      	b.n	8019a6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8019a6a:	2300      	movs	r3, #0
}
 8019a6c:	4618      	mov	r0, r3
 8019a6e:	370c      	adds	r7, #12
 8019a70:	46bd      	mov	sp, r7
 8019a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a76:	4770      	bx	lr

08019a78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8019a78:	b480      	push	{r7}
 8019a7a:	b083      	sub	sp, #12
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	689b      	ldr	r3, [r3, #8]
 8019a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019a8c:	f043 0201 	orr.w	r2, r3, #1
 8019a90:	687b      	ldr	r3, [r7, #4]
 8019a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8019a94:	bf00      	nop
 8019a96:	370c      	adds	r7, #12
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9e:	4770      	bx	lr

08019aa0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8019aa0:	b480      	push	{r7}
 8019aa2:	b083      	sub	sp, #12
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	689b      	ldr	r3, [r3, #8]
 8019aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019ab0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019ab4:	f043 0202 	orr.w	r2, r3, #2
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8019abc:	bf00      	nop
 8019abe:	370c      	adds	r7, #12
 8019ac0:	46bd      	mov	sp, r7
 8019ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac6:	4770      	bx	lr

08019ac8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8019ac8:	b480      	push	{r7}
 8019aca:	b083      	sub	sp, #12
 8019acc:	af00      	add	r7, sp, #0
 8019ace:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	689b      	ldr	r3, [r3, #8]
 8019ad4:	f003 0301 	and.w	r3, r3, #1
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d101      	bne.n	8019ae0 <LL_ADC_IsEnabled+0x18>
 8019adc:	2301      	movs	r3, #1
 8019ade:	e000      	b.n	8019ae2 <LL_ADC_IsEnabled+0x1a>
 8019ae0:	2300      	movs	r3, #0
}
 8019ae2:	4618      	mov	r0, r3
 8019ae4:	370c      	adds	r7, #12
 8019ae6:	46bd      	mov	sp, r7
 8019ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aec:	4770      	bx	lr

08019aee <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8019aee:	b480      	push	{r7}
 8019af0:	b083      	sub	sp, #12
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	689b      	ldr	r3, [r3, #8]
 8019afa:	f003 0302 	and.w	r3, r3, #2
 8019afe:	2b02      	cmp	r3, #2
 8019b00:	d101      	bne.n	8019b06 <LL_ADC_IsDisableOngoing+0x18>
 8019b02:	2301      	movs	r3, #1
 8019b04:	e000      	b.n	8019b08 <LL_ADC_IsDisableOngoing+0x1a>
 8019b06:	2300      	movs	r3, #0
}
 8019b08:	4618      	mov	r0, r3
 8019b0a:	370c      	adds	r7, #12
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b12:	4770      	bx	lr

08019b14 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8019b14:	b480      	push	{r7}
 8019b16:	b083      	sub	sp, #12
 8019b18:	af00      	add	r7, sp, #0
 8019b1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	689b      	ldr	r3, [r3, #8]
 8019b20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b28:	f043 0204 	orr.w	r2, r3, #4
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8019b30:	bf00      	nop
 8019b32:	370c      	adds	r7, #12
 8019b34:	46bd      	mov	sp, r7
 8019b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b3a:	4770      	bx	lr

08019b3c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8019b3c:	b480      	push	{r7}
 8019b3e:	b083      	sub	sp, #12
 8019b40:	af00      	add	r7, sp, #0
 8019b42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	689b      	ldr	r3, [r3, #8]
 8019b48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b50:	f043 0210 	orr.w	r2, r3, #16
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8019b58:	bf00      	nop
 8019b5a:	370c      	adds	r7, #12
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr

08019b64 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019b64:	b480      	push	{r7}
 8019b66:	b083      	sub	sp, #12
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	689b      	ldr	r3, [r3, #8]
 8019b70:	f003 0304 	and.w	r3, r3, #4
 8019b74:	2b04      	cmp	r3, #4
 8019b76:	d101      	bne.n	8019b7c <LL_ADC_REG_IsConversionOngoing+0x18>
 8019b78:	2301      	movs	r3, #1
 8019b7a:	e000      	b.n	8019b7e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8019b7c:	2300      	movs	r3, #0
}
 8019b7e:	4618      	mov	r0, r3
 8019b80:	370c      	adds	r7, #12
 8019b82:	46bd      	mov	sp, r7
 8019b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b88:	4770      	bx	lr

08019b8a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8019b8a:	b480      	push	{r7}
 8019b8c:	b083      	sub	sp, #12
 8019b8e:	af00      	add	r7, sp, #0
 8019b90:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	689b      	ldr	r3, [r3, #8]
 8019b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019b9a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019b9e:	f043 0220 	orr.w	r2, r3, #32
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8019ba6:	bf00      	nop
 8019ba8:	370c      	adds	r7, #12
 8019baa:	46bd      	mov	sp, r7
 8019bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bb0:	4770      	bx	lr

08019bb2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019bb2:	b480      	push	{r7}
 8019bb4:	b083      	sub	sp, #12
 8019bb6:	af00      	add	r7, sp, #0
 8019bb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	689b      	ldr	r3, [r3, #8]
 8019bbe:	f003 0308 	and.w	r3, r3, #8
 8019bc2:	2b08      	cmp	r3, #8
 8019bc4:	d101      	bne.n	8019bca <LL_ADC_INJ_IsConversionOngoing+0x18>
 8019bc6:	2301      	movs	r3, #1
 8019bc8:	e000      	b.n	8019bcc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8019bca:	2300      	movs	r3, #0
}
 8019bcc:	4618      	mov	r0, r3
 8019bce:	370c      	adds	r7, #12
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd6:	4770      	bx	lr

08019bd8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8019bd8:	b590      	push	{r4, r7, lr}
 8019bda:	b089      	sub	sp, #36	; 0x24
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019be0:	2300      	movs	r3, #0
 8019be2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019be4:	2300      	movs	r3, #0
 8019be6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	2b00      	cmp	r3, #0
 8019bec:	d101      	bne.n	8019bf2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8019bee:	2301      	movs	r3, #1
 8019bf0:	e1a1      	b.n	8019f36 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	695b      	ldr	r3, [r3, #20]
 8019bf6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bfc:	2b00      	cmp	r3, #0
 8019bfe:	d109      	bne.n	8019c14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8019c00:	6878      	ldr	r0, [r7, #4]
 8019c02:	f7ef f8ad 	bl	8008d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	2200      	movs	r2, #0
 8019c0a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	2200      	movs	r2, #0
 8019c10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f7ff fef1 	bl	8019a00 <LL_ADC_IsDeepPowerDownEnabled>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	2b00      	cmp	r3, #0
 8019c22:	d004      	beq.n	8019c2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019c24:	687b      	ldr	r3, [r7, #4]
 8019c26:	681b      	ldr	r3, [r3, #0]
 8019c28:	4618      	mov	r0, r3
 8019c2a:	f7ff fed7 	bl	80199dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	4618      	mov	r0, r3
 8019c34:	f7ff ff0c 	bl	8019a50 <LL_ADC_IsInternalRegulatorEnabled>
 8019c38:	4603      	mov	r3, r0
 8019c3a:	2b00      	cmp	r3, #0
 8019c3c:	d115      	bne.n	8019c6a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7ff fef0 	bl	8019a28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8019c48:	4b9a      	ldr	r3, [pc, #616]	; (8019eb4 <HAL_ADC_Init+0x2dc>)
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	099b      	lsrs	r3, r3, #6
 8019c4e:	4a9a      	ldr	r2, [pc, #616]	; (8019eb8 <HAL_ADC_Init+0x2e0>)
 8019c50:	fba2 2303 	umull	r2, r3, r2, r3
 8019c54:	099b      	lsrs	r3, r3, #6
 8019c56:	3301      	adds	r3, #1
 8019c58:	005b      	lsls	r3, r3, #1
 8019c5a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019c5c:	e002      	b.n	8019c64 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	3b01      	subs	r3, #1
 8019c62:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8019c64:	68bb      	ldr	r3, [r7, #8]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d1f9      	bne.n	8019c5e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	4618      	mov	r0, r3
 8019c70:	f7ff feee 	bl	8019a50 <LL_ADC_IsInternalRegulatorEnabled>
 8019c74:	4603      	mov	r3, r0
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d10d      	bne.n	8019c96 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c7e:	f043 0210 	orr.w	r2, r3, #16
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c8a:	f043 0201 	orr.w	r2, r3, #1
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8019c92:	2301      	movs	r3, #1
 8019c94:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7ff ff62 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 8019ca0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ca6:	f003 0310 	and.w	r3, r3, #16
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	f040 813a 	bne.w	8019f24 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8019cb0:	697b      	ldr	r3, [r7, #20]
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	f040 8136 	bne.w	8019f24 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cbc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8019cc0:	f043 0202 	orr.w	r2, r3, #2
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7ff fefb 	bl	8019ac8 <LL_ADC_IsEnabled>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d137      	bne.n	8019d48 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019ce0:	d004      	beq.n	8019cec <HAL_ADC_Init+0x114>
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	681b      	ldr	r3, [r3, #0]
 8019ce6:	4a75      	ldr	r2, [pc, #468]	; (8019ebc <HAL_ADC_Init+0x2e4>)
 8019ce8:	4293      	cmp	r3, r2
 8019cea:	d10f      	bne.n	8019d0c <HAL_ADC_Init+0x134>
 8019cec:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019cf0:	f7ff feea 	bl	8019ac8 <LL_ADC_IsEnabled>
 8019cf4:	4604      	mov	r4, r0
 8019cf6:	4871      	ldr	r0, [pc, #452]	; (8019ebc <HAL_ADC_Init+0x2e4>)
 8019cf8:	f7ff fee6 	bl	8019ac8 <LL_ADC_IsEnabled>
 8019cfc:	4603      	mov	r3, r0
 8019cfe:	4323      	orrs	r3, r4
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	bf0c      	ite	eq
 8019d04:	2301      	moveq	r3, #1
 8019d06:	2300      	movne	r3, #0
 8019d08:	b2db      	uxtb	r3, r3
 8019d0a:	e008      	b.n	8019d1e <HAL_ADC_Init+0x146>
 8019d0c:	486c      	ldr	r0, [pc, #432]	; (8019ec0 <HAL_ADC_Init+0x2e8>)
 8019d0e:	f7ff fedb 	bl	8019ac8 <LL_ADC_IsEnabled>
 8019d12:	4603      	mov	r3, r0
 8019d14:	2b00      	cmp	r3, #0
 8019d16:	bf0c      	ite	eq
 8019d18:	2301      	moveq	r3, #1
 8019d1a:	2300      	movne	r3, #0
 8019d1c:	b2db      	uxtb	r3, r3
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d012      	beq.n	8019d48 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681b      	ldr	r3, [r3, #0]
 8019d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019d2a:	d004      	beq.n	8019d36 <HAL_ADC_Init+0x15e>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	681b      	ldr	r3, [r3, #0]
 8019d30:	4a62      	ldr	r2, [pc, #392]	; (8019ebc <HAL_ADC_Init+0x2e4>)
 8019d32:	4293      	cmp	r3, r2
 8019d34:	d101      	bne.n	8019d3a <HAL_ADC_Init+0x162>
 8019d36:	4a63      	ldr	r2, [pc, #396]	; (8019ec4 <HAL_ADC_Init+0x2ec>)
 8019d38:	e000      	b.n	8019d3c <HAL_ADC_Init+0x164>
 8019d3a:	4a63      	ldr	r2, [pc, #396]	; (8019ec8 <HAL_ADC_Init+0x2f0>)
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	685b      	ldr	r3, [r3, #4]
 8019d40:	4619      	mov	r1, r3
 8019d42:	4610      	mov	r0, r2
 8019d44:	f7ff fcb6 	bl	80196b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	7f5b      	ldrb	r3, [r3, #29]
 8019d4c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d52:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8019d58:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8019d5e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019d66:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8019d68:	4313      	orrs	r3, r2
 8019d6a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8019d72:	2b01      	cmp	r3, #1
 8019d74:	d106      	bne.n	8019d84 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d7a:	3b01      	subs	r3, #1
 8019d7c:	045b      	lsls	r3, r3, #17
 8019d7e:	69ba      	ldr	r2, [r7, #24]
 8019d80:	4313      	orrs	r3, r2
 8019d82:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d88:	2b00      	cmp	r3, #0
 8019d8a:	d009      	beq.n	8019da0 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019d8c:	687b      	ldr	r3, [r7, #4]
 8019d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d90:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019d98:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019d9a:	69ba      	ldr	r2, [r7, #24]
 8019d9c:	4313      	orrs	r3, r2
 8019d9e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	68da      	ldr	r2, [r3, #12]
 8019da6:	4b49      	ldr	r3, [pc, #292]	; (8019ecc <HAL_ADC_Init+0x2f4>)
 8019da8:	4013      	ands	r3, r2
 8019daa:	687a      	ldr	r2, [r7, #4]
 8019dac:	6812      	ldr	r2, [r2, #0]
 8019dae:	69b9      	ldr	r1, [r7, #24]
 8019db0:	430b      	orrs	r3, r1
 8019db2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	691b      	ldr	r3, [r3, #16]
 8019dba:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8019dbe:	687b      	ldr	r3, [r7, #4]
 8019dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	430a      	orrs	r2, r1
 8019dc8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8019dca:	687b      	ldr	r3, [r7, #4]
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7ff fec8 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 8019dd4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	4618      	mov	r0, r3
 8019ddc:	f7ff fee9 	bl	8019bb2 <LL_ADC_INJ_IsConversionOngoing>
 8019de0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019de2:	693b      	ldr	r3, [r7, #16]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d17b      	bne.n	8019ee0 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	2b00      	cmp	r3, #0
 8019dec:	d178      	bne.n	8019ee0 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019df2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019dfa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019dfc:	4313      	orrs	r3, r2
 8019dfe:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	68db      	ldr	r3, [r3, #12]
 8019e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8019e0a:	f023 0302 	bic.w	r3, r3, #2
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	6812      	ldr	r2, [r2, #0]
 8019e12:	69b9      	ldr	r1, [r7, #24]
 8019e14:	430b      	orrs	r3, r1
 8019e16:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8019e18:	687b      	ldr	r3, [r7, #4]
 8019e1a:	691b      	ldr	r3, [r3, #16]
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d017      	beq.n	8019e50 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	691a      	ldr	r2, [r3, #16]
 8019e26:	687b      	ldr	r3, [r7, #4]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8019e2e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8019e30:	687b      	ldr	r3, [r7, #4]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e38:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019e3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019e40:	687a      	ldr	r2, [r7, #4]
 8019e42:	6911      	ldr	r1, [r2, #16]
 8019e44:	687a      	ldr	r2, [r7, #4]
 8019e46:	6812      	ldr	r2, [r2, #0]
 8019e48:	430b      	orrs	r3, r1
 8019e4a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8019e4e:	e013      	b.n	8019e78 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	691a      	ldr	r2, [r3, #16]
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8019e5e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019e68:	687a      	ldr	r2, [r7, #4]
 8019e6a:	6812      	ldr	r2, [r2, #0]
 8019e6c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8019e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019e74:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d126      	bne.n	8019ed0 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	691b      	ldr	r3, [r3, #16]
 8019e88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019e8c:	f023 0304 	bic.w	r3, r3, #4
 8019e90:	687a      	ldr	r2, [r7, #4]
 8019e92:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019e94:	687a      	ldr	r2, [r7, #4]
 8019e96:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8019e98:	4311      	orrs	r1, r2
 8019e9a:	687a      	ldr	r2, [r7, #4]
 8019e9c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019e9e:	4311      	orrs	r1, r2
 8019ea0:	687a      	ldr	r2, [r7, #4]
 8019ea2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019ea4:	430a      	orrs	r2, r1
 8019ea6:	431a      	orrs	r2, r3
 8019ea8:	687b      	ldr	r3, [r7, #4]
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	f042 0201 	orr.w	r2, r2, #1
 8019eb0:	611a      	str	r2, [r3, #16]
 8019eb2:	e015      	b.n	8019ee0 <HAL_ADC_Init+0x308>
 8019eb4:	20000000 	.word	0x20000000
 8019eb8:	053e2d63 	.word	0x053e2d63
 8019ebc:	50000100 	.word	0x50000100
 8019ec0:	50000400 	.word	0x50000400
 8019ec4:	50000300 	.word	0x50000300
 8019ec8:	50000700 	.word	0x50000700
 8019ecc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	691a      	ldr	r2, [r3, #16]
 8019ed6:	687b      	ldr	r3, [r7, #4]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	f022 0201 	bic.w	r2, r2, #1
 8019ede:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	695b      	ldr	r3, [r3, #20]
 8019ee4:	2b01      	cmp	r3, #1
 8019ee6:	d10c      	bne.n	8019f02 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	681b      	ldr	r3, [r3, #0]
 8019eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019eee:	f023 010f 	bic.w	r1, r3, #15
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	6a1b      	ldr	r3, [r3, #32]
 8019ef6:	1e5a      	subs	r2, r3, #1
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	430a      	orrs	r2, r1
 8019efe:	631a      	str	r2, [r3, #48]	; 0x30
 8019f00:	e007      	b.n	8019f12 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	681b      	ldr	r3, [r3, #0]
 8019f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f022 020f 	bic.w	r2, r2, #15
 8019f10:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f16:	f023 0303 	bic.w	r3, r3, #3
 8019f1a:	f043 0201 	orr.w	r2, r3, #1
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	65da      	str	r2, [r3, #92]	; 0x5c
 8019f22:	e007      	b.n	8019f34 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f28:	f043 0210 	orr.w	r2, r3, #16
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8019f30:	2301      	movs	r3, #1
 8019f32:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8019f34:	7ffb      	ldrb	r3, [r7, #31]
}
 8019f36:	4618      	mov	r0, r3
 8019f38:	3724      	adds	r7, #36	; 0x24
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd90      	pop	{r4, r7, pc}
 8019f3e:	bf00      	nop

08019f40 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8019f40:	b580      	push	{r7, lr}
 8019f42:	b086      	sub	sp, #24
 8019f44:	af00      	add	r7, sp, #0
 8019f46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	681b      	ldr	r3, [r3, #0]
 8019f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f50:	d004      	beq.n	8019f5c <HAL_ADC_Start+0x1c>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	681b      	ldr	r3, [r3, #0]
 8019f56:	4a5c      	ldr	r2, [pc, #368]	; (801a0c8 <HAL_ADC_Start+0x188>)
 8019f58:	4293      	cmp	r3, r2
 8019f5a:	d101      	bne.n	8019f60 <HAL_ADC_Start+0x20>
 8019f5c:	4b5b      	ldr	r3, [pc, #364]	; (801a0cc <HAL_ADC_Start+0x18c>)
 8019f5e:	e000      	b.n	8019f62 <HAL_ADC_Start+0x22>
 8019f60:	4b5b      	ldr	r3, [pc, #364]	; (801a0d0 <HAL_ADC_Start+0x190>)
 8019f62:	4618      	mov	r0, r3
 8019f64:	f7ff fd1e 	bl	80199a4 <LL_ADC_GetMultimode>
 8019f68:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	4618      	mov	r0, r3
 8019f70:	f7ff fdf8 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 8019f74:	4603      	mov	r3, r0
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	f040 809f 	bne.w	801a0ba <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8019f7c:	687b      	ldr	r3, [r7, #4]
 8019f7e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019f82:	2b01      	cmp	r3, #1
 8019f84:	d101      	bne.n	8019f8a <HAL_ADC_Start+0x4a>
 8019f86:	2302      	movs	r3, #2
 8019f88:	e09a      	b.n	801a0c0 <HAL_ADC_Start+0x180>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	2201      	movs	r2, #1
 8019f8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8019f92:	6878      	ldr	r0, [r7, #4]
 8019f94:	f001 fa3e 	bl	801b414 <ADC_Enable>
 8019f98:	4603      	mov	r3, r0
 8019f9a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019f9c:	7dfb      	ldrb	r3, [r7, #23]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	f040 8086 	bne.w	801a0b0 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fa8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019fac:	f023 0301 	bic.w	r3, r3, #1
 8019fb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019fb8:	687b      	ldr	r3, [r7, #4]
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	4a42      	ldr	r2, [pc, #264]	; (801a0c8 <HAL_ADC_Start+0x188>)
 8019fbe:	4293      	cmp	r3, r2
 8019fc0:	d002      	beq.n	8019fc8 <HAL_ADC_Start+0x88>
 8019fc2:	687b      	ldr	r3, [r7, #4]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	e001      	b.n	8019fcc <HAL_ADC_Start+0x8c>
 8019fc8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019fcc:	687a      	ldr	r2, [r7, #4]
 8019fce:	6812      	ldr	r2, [r2, #0]
 8019fd0:	4293      	cmp	r3, r2
 8019fd2:	d002      	beq.n	8019fda <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d105      	bne.n	8019fe6 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019ff2:	d106      	bne.n	801a002 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ff8:	f023 0206 	bic.w	r2, r3, #6
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	661a      	str	r2, [r3, #96]	; 0x60
 801a000:	e002      	b.n	801a008 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	2200      	movs	r2, #0
 801a006:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	221c      	movs	r2, #28
 801a00e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2200      	movs	r2, #0
 801a014:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	4a2a      	ldr	r2, [pc, #168]	; (801a0c8 <HAL_ADC_Start+0x188>)
 801a01e:	4293      	cmp	r3, r2
 801a020:	d002      	beq.n	801a028 <HAL_ADC_Start+0xe8>
 801a022:	687b      	ldr	r3, [r7, #4]
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	e001      	b.n	801a02c <HAL_ADC_Start+0xec>
 801a028:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a02c:	687a      	ldr	r2, [r7, #4]
 801a02e:	6812      	ldr	r2, [r2, #0]
 801a030:	4293      	cmp	r3, r2
 801a032:	d008      	beq.n	801a046 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a034:	693b      	ldr	r3, [r7, #16]
 801a036:	2b00      	cmp	r3, #0
 801a038:	d005      	beq.n	801a046 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a03a:	693b      	ldr	r3, [r7, #16]
 801a03c:	2b05      	cmp	r3, #5
 801a03e:	d002      	beq.n	801a046 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a040:	693b      	ldr	r3, [r7, #16]
 801a042:	2b09      	cmp	r3, #9
 801a044:	d114      	bne.n	801a070 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	68db      	ldr	r3, [r3, #12]
 801a04c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a050:	2b00      	cmp	r3, #0
 801a052:	d007      	beq.n	801a064 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a058:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a05c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4618      	mov	r0, r3
 801a06a:	f7ff fd53 	bl	8019b14 <LL_ADC_REG_StartConversion>
 801a06e:	e026      	b.n	801a0be <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a074:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	4a11      	ldr	r2, [pc, #68]	; (801a0c8 <HAL_ADC_Start+0x188>)
 801a082:	4293      	cmp	r3, r2
 801a084:	d002      	beq.n	801a08c <HAL_ADC_Start+0x14c>
 801a086:	687b      	ldr	r3, [r7, #4]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	e001      	b.n	801a090 <HAL_ADC_Start+0x150>
 801a08c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a090:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	68db      	ldr	r3, [r3, #12]
 801a096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a09a:	2b00      	cmp	r3, #0
 801a09c:	d00f      	beq.n	801a0be <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a0a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801a0a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	65da      	str	r2, [r3, #92]	; 0x5c
 801a0ae:	e006      	b.n	801a0be <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2200      	movs	r2, #0
 801a0b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a0b8:	e001      	b.n	801a0be <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a0ba:	2302      	movs	r3, #2
 801a0bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a0be:	7dfb      	ldrb	r3, [r7, #23]
}
 801a0c0:	4618      	mov	r0, r3
 801a0c2:	3718      	adds	r7, #24
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}
 801a0c8:	50000100 	.word	0x50000100
 801a0cc:	50000300 	.word	0x50000300
 801a0d0:	50000700 	.word	0x50000700

0801a0d4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a0e2:	2b01      	cmp	r3, #1
 801a0e4:	d101      	bne.n	801a0ea <HAL_ADC_Stop+0x16>
 801a0e6:	2302      	movs	r3, #2
 801a0e8:	e023      	b.n	801a132 <HAL_ADC_Stop+0x5e>
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	2201      	movs	r2, #1
 801a0ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a0f2:	2103      	movs	r1, #3
 801a0f4:	6878      	ldr	r0, [r7, #4]
 801a0f6:	f001 f8d1 	bl	801b29c <ADC_ConversionStop>
 801a0fa:	4603      	mov	r3, r0
 801a0fc:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a0fe:	7bfb      	ldrb	r3, [r7, #15]
 801a100:	2b00      	cmp	r3, #0
 801a102:	d111      	bne.n	801a128 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 801a104:	6878      	ldr	r0, [r7, #4]
 801a106:	f001 f9e7 	bl	801b4d8 <ADC_Disable>
 801a10a:	4603      	mov	r3, r0
 801a10c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a10e:	7bfb      	ldrb	r3, [r7, #15]
 801a110:	2b00      	cmp	r3, #0
 801a112:	d109      	bne.n	801a128 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a118:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a11c:	f023 0301 	bic.w	r3, r3, #1
 801a120:	f043 0201 	orr.w	r2, r3, #1
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	2200      	movs	r2, #0
 801a12c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a130:	7bfb      	ldrb	r3, [r7, #15]
}
 801a132:	4618      	mov	r0, r3
 801a134:	3710      	adds	r7, #16
 801a136:	46bd      	mov	sp, r7
 801a138:	bd80      	pop	{r7, pc}
	...

0801a13c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b088      	sub	sp, #32
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
 801a144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a14e:	d004      	beq.n	801a15a <HAL_ADC_PollForConversion+0x1e>
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4a70      	ldr	r2, [pc, #448]	; (801a318 <HAL_ADC_PollForConversion+0x1dc>)
 801a156:	4293      	cmp	r3, r2
 801a158:	d101      	bne.n	801a15e <HAL_ADC_PollForConversion+0x22>
 801a15a:	4b70      	ldr	r3, [pc, #448]	; (801a31c <HAL_ADC_PollForConversion+0x1e0>)
 801a15c:	e000      	b.n	801a160 <HAL_ADC_PollForConversion+0x24>
 801a15e:	4b70      	ldr	r3, [pc, #448]	; (801a320 <HAL_ADC_PollForConversion+0x1e4>)
 801a160:	4618      	mov	r0, r3
 801a162:	f7ff fc1f 	bl	80199a4 <LL_ADC_GetMultimode>
 801a166:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	699b      	ldr	r3, [r3, #24]
 801a16c:	2b08      	cmp	r3, #8
 801a16e:	d102      	bne.n	801a176 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 801a170:	2308      	movs	r3, #8
 801a172:	61fb      	str	r3, [r7, #28]
 801a174:	e037      	b.n	801a1e6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a176:	697b      	ldr	r3, [r7, #20]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d005      	beq.n	801a188 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a17c:	697b      	ldr	r3, [r7, #20]
 801a17e:	2b05      	cmp	r3, #5
 801a180:	d002      	beq.n	801a188 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a182:	697b      	ldr	r3, [r7, #20]
 801a184:	2b09      	cmp	r3, #9
 801a186:	d111      	bne.n	801a1ac <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	68db      	ldr	r3, [r3, #12]
 801a18e:	f003 0301 	and.w	r3, r3, #1
 801a192:	2b00      	cmp	r3, #0
 801a194:	d007      	beq.n	801a1a6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a19a:	f043 0220 	orr.w	r2, r3, #32
 801a19e:	687b      	ldr	r3, [r7, #4]
 801a1a0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a1a2:	2301      	movs	r3, #1
 801a1a4:	e0b3      	b.n	801a30e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a1a6:	2304      	movs	r3, #4
 801a1a8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801a1aa:	e01c      	b.n	801a1e6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a1b4:	d004      	beq.n	801a1c0 <HAL_ADC_PollForConversion+0x84>
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	681b      	ldr	r3, [r3, #0]
 801a1ba:	4a57      	ldr	r2, [pc, #348]	; (801a318 <HAL_ADC_PollForConversion+0x1dc>)
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	d101      	bne.n	801a1c4 <HAL_ADC_PollForConversion+0x88>
 801a1c0:	4b56      	ldr	r3, [pc, #344]	; (801a31c <HAL_ADC_PollForConversion+0x1e0>)
 801a1c2:	e000      	b.n	801a1c6 <HAL_ADC_PollForConversion+0x8a>
 801a1c4:	4b56      	ldr	r3, [pc, #344]	; (801a320 <HAL_ADC_PollForConversion+0x1e4>)
 801a1c6:	4618      	mov	r0, r3
 801a1c8:	f7ff fbfa 	bl	80199c0 <LL_ADC_GetMultiDMATransfer>
 801a1cc:	4603      	mov	r3, r0
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d007      	beq.n	801a1e2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a1d6:	f043 0220 	orr.w	r2, r3, #32
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 801a1de:	2301      	movs	r3, #1
 801a1e0:	e095      	b.n	801a30e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801a1e2:	2304      	movs	r3, #4
 801a1e4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801a1e6:	f7ff fa37 	bl	8019658 <HAL_GetTick>
 801a1ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a1ec:	e021      	b.n	801a232 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 801a1ee:	683b      	ldr	r3, [r7, #0]
 801a1f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1f4:	d01d      	beq.n	801a232 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801a1f6:	f7ff fa2f 	bl	8019658 <HAL_GetTick>
 801a1fa:	4602      	mov	r2, r0
 801a1fc:	693b      	ldr	r3, [r7, #16]
 801a1fe:	1ad3      	subs	r3, r2, r3
 801a200:	683a      	ldr	r2, [r7, #0]
 801a202:	429a      	cmp	r2, r3
 801a204:	d302      	bcc.n	801a20c <HAL_ADC_PollForConversion+0xd0>
 801a206:	683b      	ldr	r3, [r7, #0]
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d112      	bne.n	801a232 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	681a      	ldr	r2, [r3, #0]
 801a212:	69fb      	ldr	r3, [r7, #28]
 801a214:	4013      	ands	r3, r2
 801a216:	2b00      	cmp	r3, #0
 801a218:	d10b      	bne.n	801a232 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a21e:	f043 0204 	orr.w	r2, r3, #4
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	2200      	movs	r2, #0
 801a22a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 801a22e:	2303      	movs	r3, #3
 801a230:	e06d      	b.n	801a30e <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	681a      	ldr	r2, [r3, #0]
 801a238:	69fb      	ldr	r3, [r7, #28]
 801a23a:	4013      	ands	r3, r2
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d0d6      	beq.n	801a1ee <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a248:	687b      	ldr	r3, [r7, #4]
 801a24a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	4618      	mov	r0, r3
 801a252:	f7ff fb01 	bl	8019858 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a256:	4603      	mov	r3, r0
 801a258:	2b00      	cmp	r3, #0
 801a25a:	d01c      	beq.n	801a296 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	7f5b      	ldrb	r3, [r3, #29]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d118      	bne.n	801a296 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	f003 0308 	and.w	r3, r3, #8
 801a26e:	2b08      	cmp	r3, #8
 801a270:	d111      	bne.n	801a296 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a27e:	687b      	ldr	r3, [r7, #4]
 801a280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a286:	2b00      	cmp	r3, #0
 801a288:	d105      	bne.n	801a296 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a28e:	f043 0201 	orr.w	r2, r3, #1
 801a292:	687b      	ldr	r3, [r7, #4]
 801a294:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	4a1f      	ldr	r2, [pc, #124]	; (801a318 <HAL_ADC_PollForConversion+0x1dc>)
 801a29c:	4293      	cmp	r3, r2
 801a29e:	d002      	beq.n	801a2a6 <HAL_ADC_PollForConversion+0x16a>
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	e001      	b.n	801a2aa <HAL_ADC_PollForConversion+0x16e>
 801a2a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a2aa:	687a      	ldr	r2, [r7, #4]
 801a2ac:	6812      	ldr	r2, [r2, #0]
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	d008      	beq.n	801a2c4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a2b2:	697b      	ldr	r3, [r7, #20]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d005      	beq.n	801a2c4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a2b8:	697b      	ldr	r3, [r7, #20]
 801a2ba:	2b05      	cmp	r3, #5
 801a2bc:	d002      	beq.n	801a2c4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a2be:	697b      	ldr	r3, [r7, #20]
 801a2c0:	2b09      	cmp	r3, #9
 801a2c2:	d104      	bne.n	801a2ce <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	61bb      	str	r3, [r7, #24]
 801a2cc:	e00d      	b.n	801a2ea <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	4a11      	ldr	r2, [pc, #68]	; (801a318 <HAL_ADC_PollForConversion+0x1dc>)
 801a2d4:	4293      	cmp	r3, r2
 801a2d6:	d002      	beq.n	801a2de <HAL_ADC_PollForConversion+0x1a2>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	e001      	b.n	801a2e2 <HAL_ADC_PollForConversion+0x1a6>
 801a2de:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a2e2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a2e4:	68fb      	ldr	r3, [r7, #12]
 801a2e6:	68db      	ldr	r3, [r3, #12]
 801a2e8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801a2ea:	69fb      	ldr	r3, [r7, #28]
 801a2ec:	2b08      	cmp	r3, #8
 801a2ee:	d104      	bne.n	801a2fa <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	2208      	movs	r2, #8
 801a2f6:	601a      	str	r2, [r3, #0]
 801a2f8:	e008      	b.n	801a30c <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801a2fa:	69bb      	ldr	r3, [r7, #24]
 801a2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a300:	2b00      	cmp	r3, #0
 801a302:	d103      	bne.n	801a30c <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	220c      	movs	r2, #12
 801a30a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 801a30c:	2300      	movs	r3, #0
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3720      	adds	r7, #32
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}
 801a316:	bf00      	nop
 801a318:	50000100 	.word	0x50000100
 801a31c:	50000300 	.word	0x50000300
 801a320:	50000700 	.word	0x50000700

0801a324 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 801a324:	b580      	push	{r7, lr}
 801a326:	b086      	sub	sp, #24
 801a328:	af00      	add	r7, sp, #0
 801a32a:	60f8      	str	r0, [r7, #12]
 801a32c:	60b9      	str	r1, [r7, #8]
 801a32e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a330:	68fb      	ldr	r3, [r7, #12]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a338:	d004      	beq.n	801a344 <HAL_ADC_Start_DMA+0x20>
 801a33a:	68fb      	ldr	r3, [r7, #12]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4a57      	ldr	r2, [pc, #348]	; (801a49c <HAL_ADC_Start_DMA+0x178>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d101      	bne.n	801a348 <HAL_ADC_Start_DMA+0x24>
 801a344:	4b56      	ldr	r3, [pc, #344]	; (801a4a0 <HAL_ADC_Start_DMA+0x17c>)
 801a346:	e000      	b.n	801a34a <HAL_ADC_Start_DMA+0x26>
 801a348:	4b56      	ldr	r3, [pc, #344]	; (801a4a4 <HAL_ADC_Start_DMA+0x180>)
 801a34a:	4618      	mov	r0, r3
 801a34c:	f7ff fb2a 	bl	80199a4 <LL_ADC_GetMultimode>
 801a350:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a352:	68fb      	ldr	r3, [r7, #12]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	4618      	mov	r0, r3
 801a358:	f7ff fc04 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801a35c:	4603      	mov	r3, r0
 801a35e:	2b00      	cmp	r3, #0
 801a360:	f040 8094 	bne.w	801a48c <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a36a:	2b01      	cmp	r3, #1
 801a36c:	d101      	bne.n	801a372 <HAL_ADC_Start_DMA+0x4e>
 801a36e:	2302      	movs	r3, #2
 801a370:	e08f      	b.n	801a492 <HAL_ADC_Start_DMA+0x16e>
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	2201      	movs	r2, #1
 801a376:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	4a4a      	ldr	r2, [pc, #296]	; (801a4a8 <HAL_ADC_Start_DMA+0x184>)
 801a380:	4293      	cmp	r3, r2
 801a382:	d008      	beq.n	801a396 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a384:	693b      	ldr	r3, [r7, #16]
 801a386:	2b00      	cmp	r3, #0
 801a388:	d005      	beq.n	801a396 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a38a:	693b      	ldr	r3, [r7, #16]
 801a38c:	2b05      	cmp	r3, #5
 801a38e:	d002      	beq.n	801a396 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a390:	693b      	ldr	r3, [r7, #16]
 801a392:	2b09      	cmp	r3, #9
 801a394:	d173      	bne.n	801a47e <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801a396:	68f8      	ldr	r0, [r7, #12]
 801a398:	f001 f83c 	bl	801b414 <ADC_Enable>
 801a39c:	4603      	mov	r3, r0
 801a39e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 801a3a0:	7dfb      	ldrb	r3, [r7, #23]
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d166      	bne.n	801a474 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801a3a6:	68fb      	ldr	r3, [r7, #12]
 801a3a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a3aa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801a3ae:	f023 0301 	bic.w	r3, r3, #1
 801a3b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a3ba:	68fb      	ldr	r3, [r7, #12]
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	4a37      	ldr	r2, [pc, #220]	; (801a49c <HAL_ADC_Start_DMA+0x178>)
 801a3c0:	4293      	cmp	r3, r2
 801a3c2:	d002      	beq.n	801a3ca <HAL_ADC_Start_DMA+0xa6>
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	e001      	b.n	801a3ce <HAL_ADC_Start_DMA+0xaa>
 801a3ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a3ce:	68fa      	ldr	r2, [r7, #12]
 801a3d0:	6812      	ldr	r2, [r2, #0]
 801a3d2:	4293      	cmp	r3, r2
 801a3d4:	d002      	beq.n	801a3dc <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a3d6:	693b      	ldr	r3, [r7, #16]
 801a3d8:	2b00      	cmp	r3, #0
 801a3da:	d105      	bne.n	801a3e8 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801a3dc:	68fb      	ldr	r3, [r7, #12]
 801a3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a3e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801a3e4:	68fb      	ldr	r3, [r7, #12]
 801a3e6:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a3ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d006      	beq.n	801a402 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a3f8:	f023 0206 	bic.w	r2, r3, #6
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	661a      	str	r2, [r3, #96]	; 0x60
 801a400:	e002      	b.n	801a408 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	2200      	movs	r2, #0
 801a406:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a40c:	4a27      	ldr	r2, [pc, #156]	; (801a4ac <HAL_ADC_Start_DMA+0x188>)
 801a40e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a414:	4a26      	ldr	r2, [pc, #152]	; (801a4b0 <HAL_ADC_Start_DMA+0x18c>)
 801a416:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a41c:	4a25      	ldr	r2, [pc, #148]	; (801a4b4 <HAL_ADC_Start_DMA+0x190>)
 801a41e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801a420:	68fb      	ldr	r3, [r7, #12]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	221c      	movs	r2, #28
 801a426:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	2200      	movs	r2, #0
 801a42c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 801a430:	68fb      	ldr	r3, [r7, #12]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	685a      	ldr	r2, [r3, #4]
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	f042 0210 	orr.w	r2, r2, #16
 801a43e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	68da      	ldr	r2, [r3, #12]
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	f042 0201 	orr.w	r2, r2, #1
 801a44e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	6d58      	ldr	r0, [r3, #84]	; 0x54
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	681b      	ldr	r3, [r3, #0]
 801a458:	3340      	adds	r3, #64	; 0x40
 801a45a:	4619      	mov	r1, r3
 801a45c:	68ba      	ldr	r2, [r7, #8]
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	f001 fcb4 	bl	801bdcc <HAL_DMA_Start_IT>
 801a464:	4603      	mov	r3, r0
 801a466:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 801a468:	68fb      	ldr	r3, [r7, #12]
 801a46a:	681b      	ldr	r3, [r3, #0]
 801a46c:	4618      	mov	r0, r3
 801a46e:	f7ff fb51 	bl	8019b14 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 801a472:	e00d      	b.n	801a490 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801a474:	68fb      	ldr	r3, [r7, #12]
 801a476:	2200      	movs	r2, #0
 801a478:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 801a47c:	e008      	b.n	801a490 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 801a47e:	2301      	movs	r3, #1
 801a480:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	2200      	movs	r2, #0
 801a486:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801a48a:	e001      	b.n	801a490 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801a48c:	2302      	movs	r3, #2
 801a48e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 801a490:	7dfb      	ldrb	r3, [r7, #23]
}
 801a492:	4618      	mov	r0, r3
 801a494:	3718      	adds	r7, #24
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	50000100 	.word	0x50000100
 801a4a0:	50000300 	.word	0x50000300
 801a4a4:	50000700 	.word	0x50000700
 801a4a8:	50000400 	.word	0x50000400
 801a4ac:	0801b597 	.word	0x0801b597
 801a4b0:	0801b66f 	.word	0x0801b66f
 801a4b4:	0801b68b 	.word	0x0801b68b

0801a4b8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 801a4b8:	b580      	push	{r7, lr}
 801a4ba:	b084      	sub	sp, #16
 801a4bc:	af00      	add	r7, sp, #0
 801a4be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801a4c6:	2b01      	cmp	r3, #1
 801a4c8:	d101      	bne.n	801a4ce <HAL_ADC_Stop_DMA+0x16>
 801a4ca:	2302      	movs	r3, #2
 801a4cc:	e051      	b.n	801a572 <HAL_ADC_Stop_DMA+0xba>
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	2201      	movs	r2, #1
 801a4d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 801a4d6:	2103      	movs	r1, #3
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f000 fedf 	bl	801b29c <ADC_ConversionStop>
 801a4de:	4603      	mov	r3, r0
 801a4e0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 801a4e2:	7bfb      	ldrb	r3, [r7, #15]
 801a4e4:	2b00      	cmp	r3, #0
 801a4e6:	d13f      	bne.n	801a568 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	68da      	ldr	r2, [r3, #12]
 801a4ee:	687b      	ldr	r3, [r7, #4]
 801a4f0:	681b      	ldr	r3, [r3, #0]
 801a4f2:	f022 0201 	bic.w	r2, r2, #1
 801a4f6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a4fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a500:	b2db      	uxtb	r3, r3
 801a502:	2b02      	cmp	r3, #2
 801a504:	d10f      	bne.n	801a526 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a50a:	4618      	mov	r0, r3
 801a50c:	f001 fcd9 	bl	801bec2 <HAL_DMA_Abort>
 801a510:	4603      	mov	r3, r0
 801a512:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 801a514:	7bfb      	ldrb	r3, [r7, #15]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d005      	beq.n	801a526 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a51e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	685a      	ldr	r2, [r3, #4]
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	f022 0210 	bic.w	r2, r2, #16
 801a534:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 801a536:	7bfb      	ldrb	r3, [r7, #15]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d105      	bne.n	801a548 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 801a53c:	6878      	ldr	r0, [r7, #4]
 801a53e:	f000 ffcb 	bl	801b4d8 <ADC_Disable>
 801a542:	4603      	mov	r3, r0
 801a544:	73fb      	strb	r3, [r7, #15]
 801a546:	e002      	b.n	801a54e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	f000 ffc5 	bl	801b4d8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 801a54e:	7bfb      	ldrb	r3, [r7, #15]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d109      	bne.n	801a568 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a558:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801a55c:	f023 0301 	bic.w	r3, r3, #1
 801a560:	f043 0201 	orr.w	r2, r3, #1
 801a564:	687b      	ldr	r3, [r7, #4]
 801a566:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	2200      	movs	r2, #0
 801a56c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a570:	7bfb      	ldrb	r3, [r7, #15]
}
 801a572:	4618      	mov	r0, r3
 801a574:	3710      	adds	r7, #16
 801a576:	46bd      	mov	sp, r7
 801a578:	bd80      	pop	{r7, pc}

0801a57a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 801a57a:	b480      	push	{r7}
 801a57c:	b083      	sub	sp, #12
 801a57e:	af00      	add	r7, sp, #0
 801a580:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 801a582:	687b      	ldr	r3, [r7, #4]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 801a588:	4618      	mov	r0, r3
 801a58a:	370c      	adds	r7, #12
 801a58c:	46bd      	mov	sp, r7
 801a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a592:	4770      	bx	lr

0801a594 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 801a594:	b580      	push	{r7, lr}
 801a596:	b08a      	sub	sp, #40	; 0x28
 801a598:	af00      	add	r7, sp, #0
 801a59a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 801a59c:	2300      	movs	r3, #0
 801a59e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	681b      	ldr	r3, [r3, #0]
 801a5a4:	681b      	ldr	r3, [r3, #0]
 801a5a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	685b      	ldr	r3, [r3, #4]
 801a5ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a5b8:	d004      	beq.n	801a5c4 <HAL_ADC_IRQHandler+0x30>
 801a5ba:	687b      	ldr	r3, [r7, #4]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	4a87      	ldr	r2, [pc, #540]	; (801a7dc <HAL_ADC_IRQHandler+0x248>)
 801a5c0:	4293      	cmp	r3, r2
 801a5c2:	d101      	bne.n	801a5c8 <HAL_ADC_IRQHandler+0x34>
 801a5c4:	4b86      	ldr	r3, [pc, #536]	; (801a7e0 <HAL_ADC_IRQHandler+0x24c>)
 801a5c6:	e000      	b.n	801a5ca <HAL_ADC_IRQHandler+0x36>
 801a5c8:	4b86      	ldr	r3, [pc, #536]	; (801a7e4 <HAL_ADC_IRQHandler+0x250>)
 801a5ca:	4618      	mov	r0, r3
 801a5cc:	f7ff f9ea 	bl	80199a4 <LL_ADC_GetMultimode>
 801a5d0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 801a5d2:	69fb      	ldr	r3, [r7, #28]
 801a5d4:	f003 0302 	and.w	r3, r3, #2
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d017      	beq.n	801a60c <HAL_ADC_IRQHandler+0x78>
 801a5dc:	69bb      	ldr	r3, [r7, #24]
 801a5de:	f003 0302 	and.w	r3, r3, #2
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d012      	beq.n	801a60c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5ea:	f003 0310 	and.w	r3, r3, #16
 801a5ee:	2b00      	cmp	r3, #0
 801a5f0:	d105      	bne.n	801a5fe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5f6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 801a5fe:	6878      	ldr	r0, [r7, #4]
 801a600:	f001 f93a 	bl	801b878 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	2202      	movs	r2, #2
 801a60a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a60c:	69fb      	ldr	r3, [r7, #28]
 801a60e:	f003 0304 	and.w	r3, r3, #4
 801a612:	2b00      	cmp	r3, #0
 801a614:	d004      	beq.n	801a620 <HAL_ADC_IRQHandler+0x8c>
 801a616:	69bb      	ldr	r3, [r7, #24]
 801a618:	f003 0304 	and.w	r3, r3, #4
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d10a      	bne.n	801a636 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a620:	69fb      	ldr	r3, [r7, #28]
 801a622:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801a626:	2b00      	cmp	r3, #0
 801a628:	f000 8085 	beq.w	801a736 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801a62c:	69bb      	ldr	r3, [r7, #24]
 801a62e:	f003 0308 	and.w	r3, r3, #8
 801a632:	2b00      	cmp	r3, #0
 801a634:	d07f      	beq.n	801a736 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a636:	687b      	ldr	r3, [r7, #4]
 801a638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a63a:	f003 0310 	and.w	r3, r3, #16
 801a63e:	2b00      	cmp	r3, #0
 801a640:	d105      	bne.n	801a64e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801a642:	687b      	ldr	r3, [r7, #4]
 801a644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a646:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801a64a:	687b      	ldr	r3, [r7, #4]
 801a64c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	4618      	mov	r0, r3
 801a654:	f7ff f900 	bl	8019858 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a658:	4603      	mov	r3, r0
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	d064      	beq.n	801a728 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a65e:	687b      	ldr	r3, [r7, #4]
 801a660:	681b      	ldr	r3, [r3, #0]
 801a662:	4a5e      	ldr	r2, [pc, #376]	; (801a7dc <HAL_ADC_IRQHandler+0x248>)
 801a664:	4293      	cmp	r3, r2
 801a666:	d002      	beq.n	801a66e <HAL_ADC_IRQHandler+0xda>
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	e001      	b.n	801a672 <HAL_ADC_IRQHandler+0xde>
 801a66e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a672:	687a      	ldr	r2, [r7, #4]
 801a674:	6812      	ldr	r2, [r2, #0]
 801a676:	4293      	cmp	r3, r2
 801a678:	d008      	beq.n	801a68c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a67a:	697b      	ldr	r3, [r7, #20]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d005      	beq.n	801a68c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801a680:	697b      	ldr	r3, [r7, #20]
 801a682:	2b05      	cmp	r3, #5
 801a684:	d002      	beq.n	801a68c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 801a686:	697b      	ldr	r3, [r7, #20]
 801a688:	2b09      	cmp	r3, #9
 801a68a:	d104      	bne.n	801a696 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	68db      	ldr	r3, [r3, #12]
 801a692:	623b      	str	r3, [r7, #32]
 801a694:	e00d      	b.n	801a6b2 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	681b      	ldr	r3, [r3, #0]
 801a69a:	4a50      	ldr	r2, [pc, #320]	; (801a7dc <HAL_ADC_IRQHandler+0x248>)
 801a69c:	4293      	cmp	r3, r2
 801a69e:	d002      	beq.n	801a6a6 <HAL_ADC_IRQHandler+0x112>
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	e001      	b.n	801a6aa <HAL_ADC_IRQHandler+0x116>
 801a6a6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a6aa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a6ac:	693b      	ldr	r3, [r7, #16]
 801a6ae:	68db      	ldr	r3, [r3, #12]
 801a6b0:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 801a6b2:	6a3b      	ldr	r3, [r7, #32]
 801a6b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d135      	bne.n	801a728 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	681b      	ldr	r3, [r3, #0]
 801a6c2:	f003 0308 	and.w	r3, r3, #8
 801a6c6:	2b08      	cmp	r3, #8
 801a6c8:	d12e      	bne.n	801a728 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f7ff fa48 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	2b00      	cmp	r3, #0
 801a6d8:	d11a      	bne.n	801a710 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	685a      	ldr	r2, [r3, #4]
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	f022 020c 	bic.w	r2, r2, #12
 801a6e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a6fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d112      	bne.n	801a728 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a706:	f043 0201 	orr.w	r2, r3, #1
 801a70a:	687b      	ldr	r3, [r7, #4]
 801a70c:	65da      	str	r2, [r3, #92]	; 0x5c
 801a70e:	e00b      	b.n	801a728 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a714:	f043 0210 	orr.w	r2, r3, #16
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a720:	f043 0201 	orr.w	r2, r3, #1
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801a728:	6878      	ldr	r0, [r7, #4]
 801a72a:	f7ee fbc1 	bl	8008eb0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	220c      	movs	r2, #12
 801a734:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a736:	69fb      	ldr	r3, [r7, #28]
 801a738:	f003 0320 	and.w	r3, r3, #32
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	d004      	beq.n	801a74a <HAL_ADC_IRQHandler+0x1b6>
 801a740:	69bb      	ldr	r3, [r7, #24]
 801a742:	f003 0320 	and.w	r3, r3, #32
 801a746:	2b00      	cmp	r3, #0
 801a748:	d10b      	bne.n	801a762 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a74a:	69fb      	ldr	r3, [r7, #28]
 801a74c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801a750:	2b00      	cmp	r3, #0
 801a752:	f000 80a1 	beq.w	801a898 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801a756:	69bb      	ldr	r3, [r7, #24]
 801a758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a75c:	2b00      	cmp	r3, #0
 801a75e:	f000 809b 	beq.w	801a898 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a766:	f003 0310 	and.w	r3, r3, #16
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d105      	bne.n	801a77a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a772:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4618      	mov	r0, r3
 801a780:	f7ff f8a9 	bl	80198d6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 801a784:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	4618      	mov	r0, r3
 801a78c:	f7ff f864 	bl	8019858 <LL_ADC_REG_IsTriggerSourceSWStart>
 801a790:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	4a11      	ldr	r2, [pc, #68]	; (801a7dc <HAL_ADC_IRQHandler+0x248>)
 801a798:	4293      	cmp	r3, r2
 801a79a:	d002      	beq.n	801a7a2 <HAL_ADC_IRQHandler+0x20e>
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	e001      	b.n	801a7a6 <HAL_ADC_IRQHandler+0x212>
 801a7a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a7a6:	687a      	ldr	r2, [r7, #4]
 801a7a8:	6812      	ldr	r2, [r2, #0]
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	d008      	beq.n	801a7c0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801a7ae:	697b      	ldr	r3, [r7, #20]
 801a7b0:	2b00      	cmp	r3, #0
 801a7b2:	d005      	beq.n	801a7c0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 801a7b4:	697b      	ldr	r3, [r7, #20]
 801a7b6:	2b06      	cmp	r3, #6
 801a7b8:	d002      	beq.n	801a7c0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	2b07      	cmp	r3, #7
 801a7be:	d104      	bne.n	801a7ca <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	68db      	ldr	r3, [r3, #12]
 801a7c6:	623b      	str	r3, [r7, #32]
 801a7c8:	e014      	b.n	801a7f4 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	4a03      	ldr	r2, [pc, #12]	; (801a7dc <HAL_ADC_IRQHandler+0x248>)
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	d009      	beq.n	801a7e8 <HAL_ADC_IRQHandler+0x254>
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	e008      	b.n	801a7ec <HAL_ADC_IRQHandler+0x258>
 801a7da:	bf00      	nop
 801a7dc:	50000100 	.word	0x50000100
 801a7e0:	50000300 	.word	0x50000300
 801a7e4:	50000700 	.word	0x50000700
 801a7e8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801a7ec:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801a7ee:	693b      	ldr	r3, [r7, #16]
 801a7f0:	68db      	ldr	r3, [r3, #12]
 801a7f2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	2b00      	cmp	r3, #0
 801a7f8:	d047      	beq.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801a7fa:	6a3b      	ldr	r3, [r7, #32]
 801a7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a800:	2b00      	cmp	r3, #0
 801a802:	d007      	beq.n	801a814 <HAL_ADC_IRQHandler+0x280>
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d03f      	beq.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801a80a:	6a3b      	ldr	r3, [r7, #32]
 801a80c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 801a810:	2b00      	cmp	r3, #0
 801a812:	d13a      	bne.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	681b      	ldr	r3, [r3, #0]
 801a81a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a81e:	2b40      	cmp	r3, #64	; 0x40
 801a820:	d133      	bne.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 801a822:	6a3b      	ldr	r3, [r7, #32]
 801a824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801a828:	2b00      	cmp	r3, #0
 801a82a:	d12e      	bne.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	681b      	ldr	r3, [r3, #0]
 801a830:	4618      	mov	r0, r3
 801a832:	f7ff f9be 	bl	8019bb2 <LL_ADC_INJ_IsConversionOngoing>
 801a836:	4603      	mov	r3, r0
 801a838:	2b00      	cmp	r3, #0
 801a83a:	d11a      	bne.n	801a872 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	685a      	ldr	r2, [r3, #4]
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801a84a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a850:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a860:	2b00      	cmp	r3, #0
 801a862:	d112      	bne.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a868:	f043 0201 	orr.w	r2, r3, #1
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	65da      	str	r2, [r3, #92]	; 0x5c
 801a870:	e00b      	b.n	801a88a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a876:	f043 0210 	orr.w	r2, r3, #16
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a882:	f043 0201 	orr.w	r2, r3, #1
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801a88a:	6878      	ldr	r0, [r7, #4]
 801a88c:	f000 ffcc 	bl	801b828 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801a890:	687b      	ldr	r3, [r7, #4]
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	2260      	movs	r2, #96	; 0x60
 801a896:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801a898:	69fb      	ldr	r3, [r7, #28]
 801a89a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d011      	beq.n	801a8c6 <HAL_ADC_IRQHandler+0x332>
 801a8a2:	69bb      	ldr	r3, [r7, #24]
 801a8a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a8a8:	2b00      	cmp	r3, #0
 801a8aa:	d00c      	beq.n	801a8c6 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8b0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801a8b8:	6878      	ldr	r0, [r7, #4]
 801a8ba:	f000 f8af 	bl	801aa1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	2280      	movs	r2, #128	; 0x80
 801a8c4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 801a8c6:	69fb      	ldr	r3, [r7, #28]
 801a8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d012      	beq.n	801a8f6 <HAL_ADC_IRQHandler+0x362>
 801a8d0:	69bb      	ldr	r3, [r7, #24]
 801a8d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d00d      	beq.n	801a8f6 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 801a8e6:	6878      	ldr	r0, [r7, #4]
 801a8e8:	f000 ffb2 	bl	801b850 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801a8ec:	687b      	ldr	r3, [r7, #4]
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a8f4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801a8f6:	69fb      	ldr	r3, [r7, #28]
 801a8f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a8fc:	2b00      	cmp	r3, #0
 801a8fe:	d012      	beq.n	801a926 <HAL_ADC_IRQHandler+0x392>
 801a900:	69bb      	ldr	r3, [r7, #24]
 801a902:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a906:	2b00      	cmp	r3, #0
 801a908:	d00d      	beq.n	801a926 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a90e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801a916:	6878      	ldr	r0, [r7, #4]
 801a918:	f000 ffa4 	bl	801b864 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	681b      	ldr	r3, [r3, #0]
 801a920:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a924:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801a926:	69fb      	ldr	r3, [r7, #28]
 801a928:	f003 0310 	and.w	r3, r3, #16
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d043      	beq.n	801a9b8 <HAL_ADC_IRQHandler+0x424>
 801a930:	69bb      	ldr	r3, [r7, #24]
 801a932:	f003 0310 	and.w	r3, r3, #16
 801a936:	2b00      	cmp	r3, #0
 801a938:	d03e      	beq.n	801a9b8 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d102      	bne.n	801a948 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 801a942:	2301      	movs	r3, #1
 801a944:	627b      	str	r3, [r7, #36]	; 0x24
 801a946:	e021      	b.n	801a98c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801a948:	697b      	ldr	r3, [r7, #20]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d015      	beq.n	801a97a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a956:	d004      	beq.n	801a962 <HAL_ADC_IRQHandler+0x3ce>
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	4a27      	ldr	r2, [pc, #156]	; (801a9fc <HAL_ADC_IRQHandler+0x468>)
 801a95e:	4293      	cmp	r3, r2
 801a960:	d101      	bne.n	801a966 <HAL_ADC_IRQHandler+0x3d2>
 801a962:	4b27      	ldr	r3, [pc, #156]	; (801aa00 <HAL_ADC_IRQHandler+0x46c>)
 801a964:	e000      	b.n	801a968 <HAL_ADC_IRQHandler+0x3d4>
 801a966:	4b27      	ldr	r3, [pc, #156]	; (801aa04 <HAL_ADC_IRQHandler+0x470>)
 801a968:	4618      	mov	r0, r3
 801a96a:	f7ff f829 	bl	80199c0 <LL_ADC_GetMultiDMATransfer>
 801a96e:	4603      	mov	r3, r0
 801a970:	2b00      	cmp	r3, #0
 801a972:	d00b      	beq.n	801a98c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a974:	2301      	movs	r3, #1
 801a976:	627b      	str	r3, [r7, #36]	; 0x24
 801a978:	e008      	b.n	801a98c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	681b      	ldr	r3, [r3, #0]
 801a97e:	68db      	ldr	r3, [r3, #12]
 801a980:	f003 0301 	and.w	r3, r3, #1
 801a984:	2b00      	cmp	r3, #0
 801a986:	d001      	beq.n	801a98c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 801a988:	2301      	movs	r3, #1
 801a98a:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801a98c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a98e:	2b01      	cmp	r3, #1
 801a990:	d10e      	bne.n	801a9b0 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a996:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9a2:	f043 0202 	orr.w	r2, r3, #2
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801a9aa:	6878      	ldr	r0, [r7, #4]
 801a9ac:	f000 f840 	bl	801aa30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	2210      	movs	r2, #16
 801a9b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801a9b8:	69fb      	ldr	r3, [r7, #28]
 801a9ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d018      	beq.n	801a9f4 <HAL_ADC_IRQHandler+0x460>
 801a9c2:	69bb      	ldr	r3, [r7, #24]
 801a9c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d013      	beq.n	801a9f4 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9d0:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 801a9d4:	687b      	ldr	r3, [r7, #4]
 801a9d6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9dc:	f043 0208 	orr.w	r2, r3, #8
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 801a9e4:	687b      	ldr	r3, [r7, #4]
 801a9e6:	681b      	ldr	r3, [r3, #0]
 801a9e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a9ec:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801a9ee:	6878      	ldr	r0, [r7, #4]
 801a9f0:	f000 ff24 	bl	801b83c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801a9f4:	bf00      	nop
 801a9f6:	3728      	adds	r7, #40	; 0x28
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}
 801a9fc:	50000100 	.word	0x50000100
 801aa00:	50000300 	.word	0x50000300
 801aa04:	50000700 	.word	0x50000700

0801aa08 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 801aa08:	b480      	push	{r7}
 801aa0a:	b083      	sub	sp, #12
 801aa0c:	af00      	add	r7, sp, #0
 801aa0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801aa10:	bf00      	nop
 801aa12:	370c      	adds	r7, #12
 801aa14:	46bd      	mov	sp, r7
 801aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa1a:	4770      	bx	lr

0801aa1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 801aa1c:	b480      	push	{r7}
 801aa1e:	b083      	sub	sp, #12
 801aa20:	af00      	add	r7, sp, #0
 801aa22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 801aa24:	bf00      	nop
 801aa26:	370c      	adds	r7, #12
 801aa28:	46bd      	mov	sp, r7
 801aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa2e:	4770      	bx	lr

0801aa30 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801aa30:	b480      	push	{r7}
 801aa32:	b083      	sub	sp, #12
 801aa34:	af00      	add	r7, sp, #0
 801aa36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 801aa38:	bf00      	nop
 801aa3a:	370c      	adds	r7, #12
 801aa3c:	46bd      	mov	sp, r7
 801aa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa42:	4770      	bx	lr

0801aa44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b0b6      	sub	sp, #216	; 0xd8
 801aa48:	af00      	add	r7, sp, #0
 801aa4a:	6078      	str	r0, [r7, #4]
 801aa4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801aa4e:	2300      	movs	r3, #0
 801aa50:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 801aa54:	2300      	movs	r3, #0
 801aa56:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801aa5e:	2b01      	cmp	r3, #1
 801aa60:	d102      	bne.n	801aa68 <HAL_ADC_ConfigChannel+0x24>
 801aa62:	2302      	movs	r3, #2
 801aa64:	f000 bc04 	b.w	801b270 <HAL_ADC_ConfigChannel+0x82c>
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	2201      	movs	r2, #1
 801aa6c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	681b      	ldr	r3, [r3, #0]
 801aa74:	4618      	mov	r0, r3
 801aa76:	f7ff f875 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	2b00      	cmp	r3, #0
 801aa7e:	f040 83e8 	bne.w	801b252 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	6818      	ldr	r0, [r3, #0]
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	6859      	ldr	r1, [r3, #4]
 801aa8a:	683b      	ldr	r3, [r7, #0]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	461a      	mov	r2, r3
 801aa90:	f7fe fef5 	bl	801987e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	4618      	mov	r0, r3
 801aa9a:	f7ff f863 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801aa9e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801aaa2:	687b      	ldr	r3, [r7, #4]
 801aaa4:	681b      	ldr	r3, [r3, #0]
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	f7ff f883 	bl	8019bb2 <LL_ADC_INJ_IsConversionOngoing>
 801aaac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801aab0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	f040 81d9 	bne.w	801ae6c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801aaba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	f040 81d4 	bne.w	801ae6c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801aac4:	683b      	ldr	r3, [r7, #0]
 801aac6:	689b      	ldr	r3, [r3, #8]
 801aac8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801aacc:	d10f      	bne.n	801aaee <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	6818      	ldr	r0, [r3, #0]
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	2200      	movs	r2, #0
 801aad8:	4619      	mov	r1, r3
 801aada:	f7fe ff0f 	bl	80198fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	681b      	ldr	r3, [r3, #0]
 801aae2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801aae6:	4618      	mov	r0, r3
 801aae8:	f7fe fea3 	bl	8019832 <LL_ADC_SetSamplingTimeCommonConfig>
 801aaec:	e00e      	b.n	801ab0c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	6818      	ldr	r0, [r3, #0]
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	6819      	ldr	r1, [r3, #0]
 801aaf6:	683b      	ldr	r3, [r7, #0]
 801aaf8:	689b      	ldr	r3, [r3, #8]
 801aafa:	461a      	mov	r2, r3
 801aafc:	f7fe fefe 	bl	80198fc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	2100      	movs	r1, #0
 801ab06:	4618      	mov	r0, r3
 801ab08:	f7fe fe93 	bl	8019832 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	695a      	ldr	r2, [r3, #20]
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	68db      	ldr	r3, [r3, #12]
 801ab16:	08db      	lsrs	r3, r3, #3
 801ab18:	f003 0303 	and.w	r3, r3, #3
 801ab1c:	005b      	lsls	r3, r3, #1
 801ab1e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	691b      	ldr	r3, [r3, #16]
 801ab2a:	2b04      	cmp	r3, #4
 801ab2c:	d022      	beq.n	801ab74 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	6818      	ldr	r0, [r3, #0]
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	6919      	ldr	r1, [r3, #16]
 801ab36:	683b      	ldr	r3, [r7, #0]
 801ab38:	681a      	ldr	r2, [r3, #0]
 801ab3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801ab3e:	f7fe fded 	bl	801971c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	6818      	ldr	r0, [r3, #0]
 801ab46:	683b      	ldr	r3, [r7, #0]
 801ab48:	6919      	ldr	r1, [r3, #16]
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	699b      	ldr	r3, [r3, #24]
 801ab4e:	461a      	mov	r2, r3
 801ab50:	f7fe fe39 	bl	80197c6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801ab54:	687b      	ldr	r3, [r7, #4]
 801ab56:	6818      	ldr	r0, [r3, #0]
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	6919      	ldr	r1, [r3, #16]
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	7f1b      	ldrb	r3, [r3, #28]
 801ab60:	2b01      	cmp	r3, #1
 801ab62:	d102      	bne.n	801ab6a <HAL_ADC_ConfigChannel+0x126>
 801ab64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801ab68:	e000      	b.n	801ab6c <HAL_ADC_ConfigChannel+0x128>
 801ab6a:	2300      	movs	r3, #0
 801ab6c:	461a      	mov	r2, r3
 801ab6e:	f7fe fe45 	bl	80197fc <LL_ADC_SetOffsetSaturation>
 801ab72:	e17b      	b.n	801ae6c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	2100      	movs	r1, #0
 801ab7a:	4618      	mov	r0, r3
 801ab7c:	f7fe fdf2 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ab80:	4603      	mov	r3, r0
 801ab82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d10a      	bne.n	801aba0 <HAL_ADC_ConfigChannel+0x15c>
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	2100      	movs	r1, #0
 801ab90:	4618      	mov	r0, r3
 801ab92:	f7fe fde7 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ab96:	4603      	mov	r3, r0
 801ab98:	0e9b      	lsrs	r3, r3, #26
 801ab9a:	f003 021f 	and.w	r2, r3, #31
 801ab9e:	e01e      	b.n	801abde <HAL_ADC_ConfigChannel+0x19a>
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	681b      	ldr	r3, [r3, #0]
 801aba4:	2100      	movs	r1, #0
 801aba6:	4618      	mov	r0, r3
 801aba8:	f7fe fddc 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801abac:	4603      	mov	r3, r0
 801abae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801abb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801abb6:	fa93 f3a3 	rbit	r3, r3
 801abba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801abbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801abc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801abc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d101      	bne.n	801abd2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801abce:	2320      	movs	r3, #32
 801abd0:	e004      	b.n	801abdc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801abd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801abd6:	fab3 f383 	clz	r3, r3
 801abda:	b2db      	uxtb	r3, r3
 801abdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801abde:	683b      	ldr	r3, [r7, #0]
 801abe0:	681b      	ldr	r3, [r3, #0]
 801abe2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d105      	bne.n	801abf6 <HAL_ADC_ConfigChannel+0x1b2>
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	0e9b      	lsrs	r3, r3, #26
 801abf0:	f003 031f 	and.w	r3, r3, #31
 801abf4:	e018      	b.n	801ac28 <HAL_ADC_ConfigChannel+0x1e4>
 801abf6:	683b      	ldr	r3, [r7, #0]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801abfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801ac02:	fa93 f3a3 	rbit	r3, r3
 801ac06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801ac0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801ac0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801ac12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d101      	bne.n	801ac1e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801ac1a:	2320      	movs	r3, #32
 801ac1c:	e004      	b.n	801ac28 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801ac1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801ac22:	fab3 f383 	clz	r3, r3
 801ac26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d106      	bne.n	801ac3a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	2200      	movs	r2, #0
 801ac32:	2100      	movs	r1, #0
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7fe fdab 	bl	8019790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	2101      	movs	r1, #1
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7fe fd8f 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ac46:	4603      	mov	r3, r0
 801ac48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	d10a      	bne.n	801ac66 <HAL_ADC_ConfigChannel+0x222>
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	681b      	ldr	r3, [r3, #0]
 801ac54:	2101      	movs	r1, #1
 801ac56:	4618      	mov	r0, r3
 801ac58:	f7fe fd84 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ac5c:	4603      	mov	r3, r0
 801ac5e:	0e9b      	lsrs	r3, r3, #26
 801ac60:	f003 021f 	and.w	r2, r3, #31
 801ac64:	e01e      	b.n	801aca4 <HAL_ADC_ConfigChannel+0x260>
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	2101      	movs	r1, #1
 801ac6c:	4618      	mov	r0, r3
 801ac6e:	f7fe fd79 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ac72:	4603      	mov	r3, r0
 801ac74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ac78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801ac7c:	fa93 f3a3 	rbit	r3, r3
 801ac80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801ac84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ac88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801ac8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d101      	bne.n	801ac98 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801ac94:	2320      	movs	r3, #32
 801ac96:	e004      	b.n	801aca2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801ac98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801ac9c:	fab3 f383 	clz	r3, r3
 801aca0:	b2db      	uxtb	r3, r3
 801aca2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801aca4:	683b      	ldr	r3, [r7, #0]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801acac:	2b00      	cmp	r3, #0
 801acae:	d105      	bne.n	801acbc <HAL_ADC_ConfigChannel+0x278>
 801acb0:	683b      	ldr	r3, [r7, #0]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	0e9b      	lsrs	r3, r3, #26
 801acb6:	f003 031f 	and.w	r3, r3, #31
 801acba:	e018      	b.n	801acee <HAL_ADC_ConfigChannel+0x2aa>
 801acbc:	683b      	ldr	r3, [r7, #0]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801acc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801acc8:	fa93 f3a3 	rbit	r3, r3
 801accc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801acd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801acd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801acd8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d101      	bne.n	801ace4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801ace0:	2320      	movs	r3, #32
 801ace2:	e004      	b.n	801acee <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801ace4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ace8:	fab3 f383 	clz	r3, r3
 801acec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801acee:	429a      	cmp	r2, r3
 801acf0:	d106      	bne.n	801ad00 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	681b      	ldr	r3, [r3, #0]
 801acf6:	2200      	movs	r2, #0
 801acf8:	2101      	movs	r1, #1
 801acfa:	4618      	mov	r0, r3
 801acfc:	f7fe fd48 	bl	8019790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	681b      	ldr	r3, [r3, #0]
 801ad04:	2102      	movs	r1, #2
 801ad06:	4618      	mov	r0, r3
 801ad08:	f7fe fd2c 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ad0c:	4603      	mov	r3, r0
 801ad0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d10a      	bne.n	801ad2c <HAL_ADC_ConfigChannel+0x2e8>
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	2102      	movs	r1, #2
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	f7fe fd21 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ad22:	4603      	mov	r3, r0
 801ad24:	0e9b      	lsrs	r3, r3, #26
 801ad26:	f003 021f 	and.w	r2, r3, #31
 801ad2a:	e01e      	b.n	801ad6a <HAL_ADC_ConfigChannel+0x326>
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	2102      	movs	r1, #2
 801ad32:	4618      	mov	r0, r3
 801ad34:	f7fe fd16 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ad3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ad42:	fa93 f3a3 	rbit	r3, r3
 801ad46:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801ad4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ad4e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801ad52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad56:	2b00      	cmp	r3, #0
 801ad58:	d101      	bne.n	801ad5e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801ad5a:	2320      	movs	r3, #32
 801ad5c:	e004      	b.n	801ad68 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801ad5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ad62:	fab3 f383 	clz	r3, r3
 801ad66:	b2db      	uxtb	r3, r3
 801ad68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	681b      	ldr	r3, [r3, #0]
 801ad6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ad72:	2b00      	cmp	r3, #0
 801ad74:	d105      	bne.n	801ad82 <HAL_ADC_ConfigChannel+0x33e>
 801ad76:	683b      	ldr	r3, [r7, #0]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	0e9b      	lsrs	r3, r3, #26
 801ad7c:	f003 031f 	and.w	r3, r3, #31
 801ad80:	e016      	b.n	801adb0 <HAL_ADC_ConfigChannel+0x36c>
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ad8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801ad8e:	fa93 f3a3 	rbit	r3, r3
 801ad92:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801ad94:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ad96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801ad9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d101      	bne.n	801ada6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801ada2:	2320      	movs	r3, #32
 801ada4:	e004      	b.n	801adb0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801ada6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801adaa:	fab3 f383 	clz	r3, r3
 801adae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801adb0:	429a      	cmp	r2, r3
 801adb2:	d106      	bne.n	801adc2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801adb4:	687b      	ldr	r3, [r7, #4]
 801adb6:	681b      	ldr	r3, [r3, #0]
 801adb8:	2200      	movs	r2, #0
 801adba:	2102      	movs	r1, #2
 801adbc:	4618      	mov	r0, r3
 801adbe:	f7fe fce7 	bl	8019790 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	681b      	ldr	r3, [r3, #0]
 801adc6:	2103      	movs	r1, #3
 801adc8:	4618      	mov	r0, r3
 801adca:	f7fe fccb 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801adce:	4603      	mov	r3, r0
 801add0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801add4:	2b00      	cmp	r3, #0
 801add6:	d10a      	bne.n	801adee <HAL_ADC_ConfigChannel+0x3aa>
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	2103      	movs	r1, #3
 801adde:	4618      	mov	r0, r3
 801ade0:	f7fe fcc0 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801ade4:	4603      	mov	r3, r0
 801ade6:	0e9b      	lsrs	r3, r3, #26
 801ade8:	f003 021f 	and.w	r2, r3, #31
 801adec:	e017      	b.n	801ae1e <HAL_ADC_ConfigChannel+0x3da>
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	681b      	ldr	r3, [r3, #0]
 801adf2:	2103      	movs	r1, #3
 801adf4:	4618      	mov	r0, r3
 801adf6:	f7fe fcb5 	bl	8019764 <LL_ADC_GetOffsetChannel>
 801adfa:	4603      	mov	r3, r0
 801adfc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801adfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ae00:	fa93 f3a3 	rbit	r3, r3
 801ae04:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801ae06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ae08:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801ae0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae0c:	2b00      	cmp	r3, #0
 801ae0e:	d101      	bne.n	801ae14 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801ae10:	2320      	movs	r3, #32
 801ae12:	e003      	b.n	801ae1c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801ae14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae16:	fab3 f383 	clz	r3, r3
 801ae1a:	b2db      	uxtb	r3, r3
 801ae1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801ae1e:	683b      	ldr	r3, [r7, #0]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d105      	bne.n	801ae36 <HAL_ADC_ConfigChannel+0x3f2>
 801ae2a:	683b      	ldr	r3, [r7, #0]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	0e9b      	lsrs	r3, r3, #26
 801ae30:	f003 031f 	and.w	r3, r3, #31
 801ae34:	e011      	b.n	801ae5a <HAL_ADC_ConfigChannel+0x416>
 801ae36:	683b      	ldr	r3, [r7, #0]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801ae3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ae3e:	fa93 f3a3 	rbit	r3, r3
 801ae42:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801ae44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ae46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801ae48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae4a:	2b00      	cmp	r3, #0
 801ae4c:	d101      	bne.n	801ae52 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801ae4e:	2320      	movs	r3, #32
 801ae50:	e003      	b.n	801ae5a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801ae52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801ae54:	fab3 f383 	clz	r3, r3
 801ae58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801ae5a:	429a      	cmp	r2, r3
 801ae5c:	d106      	bne.n	801ae6c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	2200      	movs	r2, #0
 801ae64:	2103      	movs	r1, #3
 801ae66:	4618      	mov	r0, r3
 801ae68:	f7fe fc92 	bl	8019790 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4618      	mov	r0, r3
 801ae72:	f7fe fe29 	bl	8019ac8 <LL_ADC_IsEnabled>
 801ae76:	4603      	mov	r3, r0
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	f040 813d 	bne.w	801b0f8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801ae7e:	687b      	ldr	r3, [r7, #4]
 801ae80:	6818      	ldr	r0, [r3, #0]
 801ae82:	683b      	ldr	r3, [r7, #0]
 801ae84:	6819      	ldr	r1, [r3, #0]
 801ae86:	683b      	ldr	r3, [r7, #0]
 801ae88:	68db      	ldr	r3, [r3, #12]
 801ae8a:	461a      	mov	r2, r3
 801ae8c:	f7fe fd62 	bl	8019954 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801ae90:	683b      	ldr	r3, [r7, #0]
 801ae92:	68db      	ldr	r3, [r3, #12]
 801ae94:	4aa2      	ldr	r2, [pc, #648]	; (801b120 <HAL_ADC_ConfigChannel+0x6dc>)
 801ae96:	4293      	cmp	r3, r2
 801ae98:	f040 812e 	bne.w	801b0f8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	d10b      	bne.n	801aec4 <HAL_ADC_ConfigChannel+0x480>
 801aeac:	683b      	ldr	r3, [r7, #0]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	0e9b      	lsrs	r3, r3, #26
 801aeb2:	3301      	adds	r3, #1
 801aeb4:	f003 031f 	and.w	r3, r3, #31
 801aeb8:	2b09      	cmp	r3, #9
 801aeba:	bf94      	ite	ls
 801aebc:	2301      	movls	r3, #1
 801aebe:	2300      	movhi	r3, #0
 801aec0:	b2db      	uxtb	r3, r3
 801aec2:	e019      	b.n	801aef8 <HAL_ADC_ConfigChannel+0x4b4>
 801aec4:	683b      	ldr	r3, [r7, #0]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801aeca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801aecc:	fa93 f3a3 	rbit	r3, r3
 801aed0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801aed2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801aed4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801aed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d101      	bne.n	801aee0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801aedc:	2320      	movs	r3, #32
 801aede:	e003      	b.n	801aee8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801aee0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801aee2:	fab3 f383 	clz	r3, r3
 801aee6:	b2db      	uxtb	r3, r3
 801aee8:	3301      	adds	r3, #1
 801aeea:	f003 031f 	and.w	r3, r3, #31
 801aeee:	2b09      	cmp	r3, #9
 801aef0:	bf94      	ite	ls
 801aef2:	2301      	movls	r3, #1
 801aef4:	2300      	movhi	r3, #0
 801aef6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d079      	beq.n	801aff0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801aefc:	683b      	ldr	r3, [r7, #0]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af04:	2b00      	cmp	r3, #0
 801af06:	d107      	bne.n	801af18 <HAL_ADC_ConfigChannel+0x4d4>
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	681b      	ldr	r3, [r3, #0]
 801af0c:	0e9b      	lsrs	r3, r3, #26
 801af0e:	3301      	adds	r3, #1
 801af10:	069b      	lsls	r3, r3, #26
 801af12:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801af16:	e015      	b.n	801af44 <HAL_ADC_ConfigChannel+0x500>
 801af18:	683b      	ldr	r3, [r7, #0]
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801af1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801af20:	fa93 f3a3 	rbit	r3, r3
 801af24:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801af26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af28:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801af2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d101      	bne.n	801af34 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801af30:	2320      	movs	r3, #32
 801af32:	e003      	b.n	801af3c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801af34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801af36:	fab3 f383 	clz	r3, r3
 801af3a:	b2db      	uxtb	r3, r3
 801af3c:	3301      	adds	r3, #1
 801af3e:	069b      	lsls	r3, r3, #26
 801af40:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801af44:	683b      	ldr	r3, [r7, #0]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	d109      	bne.n	801af64 <HAL_ADC_ConfigChannel+0x520>
 801af50:	683b      	ldr	r3, [r7, #0]
 801af52:	681b      	ldr	r3, [r3, #0]
 801af54:	0e9b      	lsrs	r3, r3, #26
 801af56:	3301      	adds	r3, #1
 801af58:	f003 031f 	and.w	r3, r3, #31
 801af5c:	2101      	movs	r1, #1
 801af5e:	fa01 f303 	lsl.w	r3, r1, r3
 801af62:	e017      	b.n	801af94 <HAL_ADC_ConfigChannel+0x550>
 801af64:	683b      	ldr	r3, [r7, #0]
 801af66:	681b      	ldr	r3, [r3, #0]
 801af68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801af6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801af6c:	fa93 f3a3 	rbit	r3, r3
 801af70:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801af72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af74:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801af76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d101      	bne.n	801af80 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801af7c:	2320      	movs	r3, #32
 801af7e:	e003      	b.n	801af88 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801af80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801af82:	fab3 f383 	clz	r3, r3
 801af86:	b2db      	uxtb	r3, r3
 801af88:	3301      	adds	r3, #1
 801af8a:	f003 031f 	and.w	r3, r3, #31
 801af8e:	2101      	movs	r1, #1
 801af90:	fa01 f303 	lsl.w	r3, r1, r3
 801af94:	ea42 0103 	orr.w	r1, r2, r3
 801af98:	683b      	ldr	r3, [r7, #0]
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801afa0:	2b00      	cmp	r3, #0
 801afa2:	d10a      	bne.n	801afba <HAL_ADC_ConfigChannel+0x576>
 801afa4:	683b      	ldr	r3, [r7, #0]
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	0e9b      	lsrs	r3, r3, #26
 801afaa:	3301      	adds	r3, #1
 801afac:	f003 021f 	and.w	r2, r3, #31
 801afb0:	4613      	mov	r3, r2
 801afb2:	005b      	lsls	r3, r3, #1
 801afb4:	4413      	add	r3, r2
 801afb6:	051b      	lsls	r3, r3, #20
 801afb8:	e018      	b.n	801afec <HAL_ADC_ConfigChannel+0x5a8>
 801afba:	683b      	ldr	r3, [r7, #0]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801afc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801afc2:	fa93 f3a3 	rbit	r3, r3
 801afc6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801afc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801afca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801afcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d101      	bne.n	801afd6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801afd2:	2320      	movs	r3, #32
 801afd4:	e003      	b.n	801afde <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801afd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801afd8:	fab3 f383 	clz	r3, r3
 801afdc:	b2db      	uxtb	r3, r3
 801afde:	3301      	adds	r3, #1
 801afe0:	f003 021f 	and.w	r2, r3, #31
 801afe4:	4613      	mov	r3, r2
 801afe6:	005b      	lsls	r3, r3, #1
 801afe8:	4413      	add	r3, r2
 801afea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801afec:	430b      	orrs	r3, r1
 801afee:	e07e      	b.n	801b0ee <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801aff0:	683b      	ldr	r3, [r7, #0]
 801aff2:	681b      	ldr	r3, [r3, #0]
 801aff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d107      	bne.n	801b00c <HAL_ADC_ConfigChannel+0x5c8>
 801affc:	683b      	ldr	r3, [r7, #0]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	0e9b      	lsrs	r3, r3, #26
 801b002:	3301      	adds	r3, #1
 801b004:	069b      	lsls	r3, r3, #26
 801b006:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b00a:	e015      	b.n	801b038 <HAL_ADC_ConfigChannel+0x5f4>
 801b00c:	683b      	ldr	r3, [r7, #0]
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b014:	fa93 f3a3 	rbit	r3, r3
 801b018:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b01c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801b01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b020:	2b00      	cmp	r3, #0
 801b022:	d101      	bne.n	801b028 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801b024:	2320      	movs	r3, #32
 801b026:	e003      	b.n	801b030 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b02a:	fab3 f383 	clz	r3, r3
 801b02e:	b2db      	uxtb	r3, r3
 801b030:	3301      	adds	r3, #1
 801b032:	069b      	lsls	r3, r3, #26
 801b034:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b040:	2b00      	cmp	r3, #0
 801b042:	d109      	bne.n	801b058 <HAL_ADC_ConfigChannel+0x614>
 801b044:	683b      	ldr	r3, [r7, #0]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	0e9b      	lsrs	r3, r3, #26
 801b04a:	3301      	adds	r3, #1
 801b04c:	f003 031f 	and.w	r3, r3, #31
 801b050:	2101      	movs	r1, #1
 801b052:	fa01 f303 	lsl.w	r3, r1, r3
 801b056:	e017      	b.n	801b088 <HAL_ADC_ConfigChannel+0x644>
 801b058:	683b      	ldr	r3, [r7, #0]
 801b05a:	681b      	ldr	r3, [r3, #0]
 801b05c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b05e:	6a3b      	ldr	r3, [r7, #32]
 801b060:	fa93 f3a3 	rbit	r3, r3
 801b064:	61fb      	str	r3, [r7, #28]
  return result;
 801b066:	69fb      	ldr	r3, [r7, #28]
 801b068:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801b06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d101      	bne.n	801b074 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801b070:	2320      	movs	r3, #32
 801b072:	e003      	b.n	801b07c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801b074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b076:	fab3 f383 	clz	r3, r3
 801b07a:	b2db      	uxtb	r3, r3
 801b07c:	3301      	adds	r3, #1
 801b07e:	f003 031f 	and.w	r3, r3, #31
 801b082:	2101      	movs	r1, #1
 801b084:	fa01 f303 	lsl.w	r3, r1, r3
 801b088:	ea42 0103 	orr.w	r1, r2, r3
 801b08c:	683b      	ldr	r3, [r7, #0]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b094:	2b00      	cmp	r3, #0
 801b096:	d10d      	bne.n	801b0b4 <HAL_ADC_ConfigChannel+0x670>
 801b098:	683b      	ldr	r3, [r7, #0]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	0e9b      	lsrs	r3, r3, #26
 801b09e:	3301      	adds	r3, #1
 801b0a0:	f003 021f 	and.w	r2, r3, #31
 801b0a4:	4613      	mov	r3, r2
 801b0a6:	005b      	lsls	r3, r3, #1
 801b0a8:	4413      	add	r3, r2
 801b0aa:	3b1e      	subs	r3, #30
 801b0ac:	051b      	lsls	r3, r3, #20
 801b0ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801b0b2:	e01b      	b.n	801b0ec <HAL_ADC_ConfigChannel+0x6a8>
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	fa93 f3a3 	rbit	r3, r3
 801b0c0:	613b      	str	r3, [r7, #16]
  return result;
 801b0c2:	693b      	ldr	r3, [r7, #16]
 801b0c4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801b0c6:	69bb      	ldr	r3, [r7, #24]
 801b0c8:	2b00      	cmp	r3, #0
 801b0ca:	d101      	bne.n	801b0d0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801b0cc:	2320      	movs	r3, #32
 801b0ce:	e003      	b.n	801b0d8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801b0d0:	69bb      	ldr	r3, [r7, #24]
 801b0d2:	fab3 f383 	clz	r3, r3
 801b0d6:	b2db      	uxtb	r3, r3
 801b0d8:	3301      	adds	r3, #1
 801b0da:	f003 021f 	and.w	r2, r3, #31
 801b0de:	4613      	mov	r3, r2
 801b0e0:	005b      	lsls	r3, r3, #1
 801b0e2:	4413      	add	r3, r2
 801b0e4:	3b1e      	subs	r3, #30
 801b0e6:	051b      	lsls	r3, r3, #20
 801b0e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801b0ec:	430b      	orrs	r3, r1
 801b0ee:	683a      	ldr	r2, [r7, #0]
 801b0f0:	6892      	ldr	r2, [r2, #8]
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	f7fe fc02 	bl	80198fc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801b0f8:	683b      	ldr	r3, [r7, #0]
 801b0fa:	681a      	ldr	r2, [r3, #0]
 801b0fc:	4b09      	ldr	r3, [pc, #36]	; (801b124 <HAL_ADC_ConfigChannel+0x6e0>)
 801b0fe:	4013      	ands	r3, r2
 801b100:	2b00      	cmp	r3, #0
 801b102:	f000 80af 	beq.w	801b264 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801b106:	687b      	ldr	r3, [r7, #4]
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b10e:	d004      	beq.n	801b11a <HAL_ADC_ConfigChannel+0x6d6>
 801b110:	687b      	ldr	r3, [r7, #4]
 801b112:	681b      	ldr	r3, [r3, #0]
 801b114:	4a04      	ldr	r2, [pc, #16]	; (801b128 <HAL_ADC_ConfigChannel+0x6e4>)
 801b116:	4293      	cmp	r3, r2
 801b118:	d10a      	bne.n	801b130 <HAL_ADC_ConfigChannel+0x6ec>
 801b11a:	4b04      	ldr	r3, [pc, #16]	; (801b12c <HAL_ADC_ConfigChannel+0x6e8>)
 801b11c:	e009      	b.n	801b132 <HAL_ADC_ConfigChannel+0x6ee>
 801b11e:	bf00      	nop
 801b120:	407f0000 	.word	0x407f0000
 801b124:	80080000 	.word	0x80080000
 801b128:	50000100 	.word	0x50000100
 801b12c:	50000300 	.word	0x50000300
 801b130:	4b51      	ldr	r3, [pc, #324]	; (801b278 <HAL_ADC_ConfigChannel+0x834>)
 801b132:	4618      	mov	r0, r3
 801b134:	f7fe fae4 	bl	8019700 <LL_ADC_GetCommonPathInternalCh>
 801b138:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	4a4e      	ldr	r2, [pc, #312]	; (801b27c <HAL_ADC_ConfigChannel+0x838>)
 801b142:	4293      	cmp	r3, r2
 801b144:	d004      	beq.n	801b150 <HAL_ADC_ConfigChannel+0x70c>
 801b146:	683b      	ldr	r3, [r7, #0]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	4a4d      	ldr	r2, [pc, #308]	; (801b280 <HAL_ADC_ConfigChannel+0x83c>)
 801b14c:	4293      	cmp	r3, r2
 801b14e:	d134      	bne.n	801b1ba <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801b150:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d12e      	bne.n	801b1ba <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b15c:	687b      	ldr	r3, [r7, #4]
 801b15e:	681b      	ldr	r3, [r3, #0]
 801b160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b164:	d17e      	bne.n	801b264 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b166:	687b      	ldr	r3, [r7, #4]
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b16e:	d004      	beq.n	801b17a <HAL_ADC_ConfigChannel+0x736>
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a43      	ldr	r2, [pc, #268]	; (801b284 <HAL_ADC_ConfigChannel+0x840>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d101      	bne.n	801b17e <HAL_ADC_ConfigChannel+0x73a>
 801b17a:	4a43      	ldr	r2, [pc, #268]	; (801b288 <HAL_ADC_ConfigChannel+0x844>)
 801b17c:	e000      	b.n	801b180 <HAL_ADC_ConfigChannel+0x73c>
 801b17e:	4a3e      	ldr	r2, [pc, #248]	; (801b278 <HAL_ADC_ConfigChannel+0x834>)
 801b180:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b184:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b188:	4619      	mov	r1, r3
 801b18a:	4610      	mov	r0, r2
 801b18c:	f7fe faa5 	bl	80196da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801b190:	4b3e      	ldr	r3, [pc, #248]	; (801b28c <HAL_ADC_ConfigChannel+0x848>)
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	099b      	lsrs	r3, r3, #6
 801b196:	4a3e      	ldr	r2, [pc, #248]	; (801b290 <HAL_ADC_ConfigChannel+0x84c>)
 801b198:	fba2 2303 	umull	r2, r3, r2, r3
 801b19c:	099b      	lsrs	r3, r3, #6
 801b19e:	1c5a      	adds	r2, r3, #1
 801b1a0:	4613      	mov	r3, r2
 801b1a2:	005b      	lsls	r3, r3, #1
 801b1a4:	4413      	add	r3, r2
 801b1a6:	009b      	lsls	r3, r3, #2
 801b1a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b1aa:	e002      	b.n	801b1b2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801b1ac:	68fb      	ldr	r3, [r7, #12]
 801b1ae:	3b01      	subs	r3, #1
 801b1b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801b1b2:	68fb      	ldr	r3, [r7, #12]
 801b1b4:	2b00      	cmp	r3, #0
 801b1b6:	d1f9      	bne.n	801b1ac <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801b1b8:	e054      	b.n	801b264 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801b1ba:	683b      	ldr	r3, [r7, #0]
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	4a35      	ldr	r2, [pc, #212]	; (801b294 <HAL_ADC_ConfigChannel+0x850>)
 801b1c0:	4293      	cmp	r3, r2
 801b1c2:	d120      	bne.n	801b206 <HAL_ADC_ConfigChannel+0x7c2>
 801b1c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b1c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801b1cc:	2b00      	cmp	r3, #0
 801b1ce:	d11a      	bne.n	801b206 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b1d8:	d144      	bne.n	801b264 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b1e2:	d004      	beq.n	801b1ee <HAL_ADC_ConfigChannel+0x7aa>
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	681b      	ldr	r3, [r3, #0]
 801b1e8:	4a26      	ldr	r2, [pc, #152]	; (801b284 <HAL_ADC_ConfigChannel+0x840>)
 801b1ea:	4293      	cmp	r3, r2
 801b1ec:	d101      	bne.n	801b1f2 <HAL_ADC_ConfigChannel+0x7ae>
 801b1ee:	4a26      	ldr	r2, [pc, #152]	; (801b288 <HAL_ADC_ConfigChannel+0x844>)
 801b1f0:	e000      	b.n	801b1f4 <HAL_ADC_ConfigChannel+0x7b0>
 801b1f2:	4a21      	ldr	r2, [pc, #132]	; (801b278 <HAL_ADC_ConfigChannel+0x834>)
 801b1f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b1f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b1fc:	4619      	mov	r1, r3
 801b1fe:	4610      	mov	r0, r2
 801b200:	f7fe fa6b 	bl	80196da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801b204:	e02e      	b.n	801b264 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801b206:	683b      	ldr	r3, [r7, #0]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	4a23      	ldr	r2, [pc, #140]	; (801b298 <HAL_ADC_ConfigChannel+0x854>)
 801b20c:	4293      	cmp	r3, r2
 801b20e:	d129      	bne.n	801b264 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801b210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b218:	2b00      	cmp	r3, #0
 801b21a:	d123      	bne.n	801b264 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801b21c:	687b      	ldr	r3, [r7, #4]
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	4a18      	ldr	r2, [pc, #96]	; (801b284 <HAL_ADC_ConfigChannel+0x840>)
 801b222:	4293      	cmp	r3, r2
 801b224:	d01e      	beq.n	801b264 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b22e:	d004      	beq.n	801b23a <HAL_ADC_ConfigChannel+0x7f6>
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	4a13      	ldr	r2, [pc, #76]	; (801b284 <HAL_ADC_ConfigChannel+0x840>)
 801b236:	4293      	cmp	r3, r2
 801b238:	d101      	bne.n	801b23e <HAL_ADC_ConfigChannel+0x7fa>
 801b23a:	4a13      	ldr	r2, [pc, #76]	; (801b288 <HAL_ADC_ConfigChannel+0x844>)
 801b23c:	e000      	b.n	801b240 <HAL_ADC_ConfigChannel+0x7fc>
 801b23e:	4a0e      	ldr	r2, [pc, #56]	; (801b278 <HAL_ADC_ConfigChannel+0x834>)
 801b240:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801b244:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801b248:	4619      	mov	r1, r3
 801b24a:	4610      	mov	r0, r2
 801b24c:	f7fe fa45 	bl	80196da <LL_ADC_SetCommonPathInternalCh>
 801b250:	e008      	b.n	801b264 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b256:	f043 0220 	orr.w	r2, r3, #32
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801b25e:	2301      	movs	r3, #1
 801b260:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	2200      	movs	r2, #0
 801b268:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b26c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801b270:	4618      	mov	r0, r3
 801b272:	37d8      	adds	r7, #216	; 0xd8
 801b274:	46bd      	mov	sp, r7
 801b276:	bd80      	pop	{r7, pc}
 801b278:	50000700 	.word	0x50000700
 801b27c:	c3210000 	.word	0xc3210000
 801b280:	90c00010 	.word	0x90c00010
 801b284:	50000100 	.word	0x50000100
 801b288:	50000300 	.word	0x50000300
 801b28c:	20000000 	.word	0x20000000
 801b290:	053e2d63 	.word	0x053e2d63
 801b294:	c7520000 	.word	0xc7520000
 801b298:	cb840000 	.word	0xcb840000

0801b29c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801b29c:	b580      	push	{r7, lr}
 801b29e:	b088      	sub	sp, #32
 801b2a0:	af00      	add	r7, sp, #0
 801b2a2:	6078      	str	r0, [r7, #4]
 801b2a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801b2a6:	2300      	movs	r3, #0
 801b2a8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	4618      	mov	r0, r3
 801b2b4:	f7fe fc56 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801b2b8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	4618      	mov	r0, r3
 801b2c0:	f7fe fc77 	bl	8019bb2 <LL_ADC_INJ_IsConversionOngoing>
 801b2c4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801b2c6:	693b      	ldr	r3, [r7, #16]
 801b2c8:	2b00      	cmp	r3, #0
 801b2ca:	d103      	bne.n	801b2d4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	f000 8098 	beq.w	801b404 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	68db      	ldr	r3, [r3, #12]
 801b2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d02a      	beq.n	801b338 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	7f5b      	ldrb	r3, [r3, #29]
 801b2e6:	2b01      	cmp	r3, #1
 801b2e8:	d126      	bne.n	801b338 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801b2ea:	687b      	ldr	r3, [r7, #4]
 801b2ec:	7f1b      	ldrb	r3, [r3, #28]
 801b2ee:	2b01      	cmp	r3, #1
 801b2f0:	d122      	bne.n	801b338 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801b2f2:	2301      	movs	r3, #1
 801b2f4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b2f6:	e014      	b.n	801b322 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801b2f8:	69fb      	ldr	r3, [r7, #28]
 801b2fa:	4a45      	ldr	r2, [pc, #276]	; (801b410 <ADC_ConversionStop+0x174>)
 801b2fc:	4293      	cmp	r3, r2
 801b2fe:	d90d      	bls.n	801b31c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b304:	f043 0210 	orr.w	r2, r3, #16
 801b308:	687b      	ldr	r3, [r7, #4]
 801b30a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b310:	f043 0201 	orr.w	r2, r3, #1
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b318:	2301      	movs	r3, #1
 801b31a:	e074      	b.n	801b406 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801b31c:	69fb      	ldr	r3, [r7, #28]
 801b31e:	3301      	adds	r3, #1
 801b320:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801b322:	687b      	ldr	r3, [r7, #4]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b32c:	2b40      	cmp	r3, #64	; 0x40
 801b32e:	d1e3      	bne.n	801b2f8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	2240      	movs	r2, #64	; 0x40
 801b336:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801b338:	69bb      	ldr	r3, [r7, #24]
 801b33a:	2b02      	cmp	r3, #2
 801b33c:	d014      	beq.n	801b368 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801b33e:	687b      	ldr	r3, [r7, #4]
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	4618      	mov	r0, r3
 801b344:	f7fe fc0e 	bl	8019b64 <LL_ADC_REG_IsConversionOngoing>
 801b348:	4603      	mov	r3, r0
 801b34a:	2b00      	cmp	r3, #0
 801b34c:	d00c      	beq.n	801b368 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	681b      	ldr	r3, [r3, #0]
 801b352:	4618      	mov	r0, r3
 801b354:	f7fe fbcb 	bl	8019aee <LL_ADC_IsDisableOngoing>
 801b358:	4603      	mov	r3, r0
 801b35a:	2b00      	cmp	r3, #0
 801b35c:	d104      	bne.n	801b368 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	4618      	mov	r0, r3
 801b364:	f7fe fbea 	bl	8019b3c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801b368:	69bb      	ldr	r3, [r7, #24]
 801b36a:	2b01      	cmp	r3, #1
 801b36c:	d014      	beq.n	801b398 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	4618      	mov	r0, r3
 801b374:	f7fe fc1d 	bl	8019bb2 <LL_ADC_INJ_IsConversionOngoing>
 801b378:	4603      	mov	r3, r0
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d00c      	beq.n	801b398 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	4618      	mov	r0, r3
 801b384:	f7fe fbb3 	bl	8019aee <LL_ADC_IsDisableOngoing>
 801b388:	4603      	mov	r3, r0
 801b38a:	2b00      	cmp	r3, #0
 801b38c:	d104      	bne.n	801b398 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	4618      	mov	r0, r3
 801b394:	f7fe fbf9 	bl	8019b8a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801b398:	69bb      	ldr	r3, [r7, #24]
 801b39a:	2b02      	cmp	r3, #2
 801b39c:	d005      	beq.n	801b3aa <ADC_ConversionStop+0x10e>
 801b39e:	69bb      	ldr	r3, [r7, #24]
 801b3a0:	2b03      	cmp	r3, #3
 801b3a2:	d105      	bne.n	801b3b0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801b3a4:	230c      	movs	r3, #12
 801b3a6:	617b      	str	r3, [r7, #20]
        break;
 801b3a8:	e005      	b.n	801b3b6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801b3aa:	2308      	movs	r3, #8
 801b3ac:	617b      	str	r3, [r7, #20]
        break;
 801b3ae:	e002      	b.n	801b3b6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801b3b0:	2304      	movs	r3, #4
 801b3b2:	617b      	str	r3, [r7, #20]
        break;
 801b3b4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801b3b6:	f7fe f94f 	bl	8019658 <HAL_GetTick>
 801b3ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b3bc:	e01b      	b.n	801b3f6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801b3be:	f7fe f94b 	bl	8019658 <HAL_GetTick>
 801b3c2:	4602      	mov	r2, r0
 801b3c4:	68bb      	ldr	r3, [r7, #8]
 801b3c6:	1ad3      	subs	r3, r2, r3
 801b3c8:	2b05      	cmp	r3, #5
 801b3ca:	d914      	bls.n	801b3f6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	689a      	ldr	r2, [r3, #8]
 801b3d2:	697b      	ldr	r3, [r7, #20]
 801b3d4:	4013      	ands	r3, r2
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d00d      	beq.n	801b3f6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b3da:	687b      	ldr	r3, [r7, #4]
 801b3dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b3de:	f043 0210 	orr.w	r2, r3, #16
 801b3e2:	687b      	ldr	r3, [r7, #4]
 801b3e4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b3ea:	f043 0201 	orr.w	r2, r3, #1
 801b3ee:	687b      	ldr	r3, [r7, #4]
 801b3f0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b3f2:	2301      	movs	r3, #1
 801b3f4:	e007      	b.n	801b406 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	681b      	ldr	r3, [r3, #0]
 801b3fa:	689a      	ldr	r2, [r3, #8]
 801b3fc:	697b      	ldr	r3, [r7, #20]
 801b3fe:	4013      	ands	r3, r2
 801b400:	2b00      	cmp	r3, #0
 801b402:	d1dc      	bne.n	801b3be <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801b404:	2300      	movs	r3, #0
}
 801b406:	4618      	mov	r0, r3
 801b408:	3720      	adds	r7, #32
 801b40a:	46bd      	mov	sp, r7
 801b40c:	bd80      	pop	{r7, pc}
 801b40e:	bf00      	nop
 801b410:	a33fffff 	.word	0xa33fffff

0801b414 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b084      	sub	sp, #16
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	4618      	mov	r0, r3
 801b422:	f7fe fb51 	bl	8019ac8 <LL_ADC_IsEnabled>
 801b426:	4603      	mov	r3, r0
 801b428:	2b00      	cmp	r3, #0
 801b42a:	d14d      	bne.n	801b4c8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	689a      	ldr	r2, [r3, #8]
 801b432:	4b28      	ldr	r3, [pc, #160]	; (801b4d4 <ADC_Enable+0xc0>)
 801b434:	4013      	ands	r3, r2
 801b436:	2b00      	cmp	r3, #0
 801b438:	d00d      	beq.n	801b456 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b43e:	f043 0210 	orr.w	r2, r3, #16
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b44a:	f043 0201 	orr.w	r2, r3, #1
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801b452:	2301      	movs	r3, #1
 801b454:	e039      	b.n	801b4ca <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	681b      	ldr	r3, [r3, #0]
 801b45a:	4618      	mov	r0, r3
 801b45c:	f7fe fb0c 	bl	8019a78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801b460:	f7fe f8fa 	bl	8019658 <HAL_GetTick>
 801b464:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b466:	e028      	b.n	801b4ba <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801b468:	687b      	ldr	r3, [r7, #4]
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7fe fb2b 	bl	8019ac8 <LL_ADC_IsEnabled>
 801b472:	4603      	mov	r3, r0
 801b474:	2b00      	cmp	r3, #0
 801b476:	d104      	bne.n	801b482 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	681b      	ldr	r3, [r3, #0]
 801b47c:	4618      	mov	r0, r3
 801b47e:	f7fe fafb 	bl	8019a78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801b482:	f7fe f8e9 	bl	8019658 <HAL_GetTick>
 801b486:	4602      	mov	r2, r0
 801b488:	68fb      	ldr	r3, [r7, #12]
 801b48a:	1ad3      	subs	r3, r2, r3
 801b48c:	2b02      	cmp	r3, #2
 801b48e:	d914      	bls.n	801b4ba <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	f003 0301 	and.w	r3, r3, #1
 801b49a:	2b01      	cmp	r3, #1
 801b49c:	d00d      	beq.n	801b4ba <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b4a2:	f043 0210 	orr.w	r2, r3, #16
 801b4a6:	687b      	ldr	r3, [r7, #4]
 801b4a8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b4ae:	f043 0201 	orr.w	r2, r3, #1
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b4b6:	2301      	movs	r3, #1
 801b4b8:	e007      	b.n	801b4ca <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801b4ba:	687b      	ldr	r3, [r7, #4]
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	f003 0301 	and.w	r3, r3, #1
 801b4c4:	2b01      	cmp	r3, #1
 801b4c6:	d1cf      	bne.n	801b468 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b4c8:	2300      	movs	r3, #0
}
 801b4ca:	4618      	mov	r0, r3
 801b4cc:	3710      	adds	r7, #16
 801b4ce:	46bd      	mov	sp, r7
 801b4d0:	bd80      	pop	{r7, pc}
 801b4d2:	bf00      	nop
 801b4d4:	8000003f 	.word	0x8000003f

0801b4d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b084      	sub	sp, #16
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	4618      	mov	r0, r3
 801b4e6:	f7fe fb02 	bl	8019aee <LL_ADC_IsDisableOngoing>
 801b4ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	4618      	mov	r0, r3
 801b4f2:	f7fe fae9 	bl	8019ac8 <LL_ADC_IsEnabled>
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	2b00      	cmp	r3, #0
 801b4fa:	d047      	beq.n	801b58c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d144      	bne.n	801b58c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	689b      	ldr	r3, [r3, #8]
 801b508:	f003 030d 	and.w	r3, r3, #13
 801b50c:	2b01      	cmp	r3, #1
 801b50e:	d10c      	bne.n	801b52a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	681b      	ldr	r3, [r3, #0]
 801b514:	4618      	mov	r0, r3
 801b516:	f7fe fac3 	bl	8019aa0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	2203      	movs	r2, #3
 801b520:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801b522:	f7fe f899 	bl	8019658 <HAL_GetTick>
 801b526:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b528:	e029      	b.n	801b57e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b52e:	f043 0210 	orr.w	r2, r3, #16
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b536:	687b      	ldr	r3, [r7, #4]
 801b538:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b53a:	f043 0201 	orr.w	r2, r3, #1
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801b542:	2301      	movs	r3, #1
 801b544:	e023      	b.n	801b58e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801b546:	f7fe f887 	bl	8019658 <HAL_GetTick>
 801b54a:	4602      	mov	r2, r0
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	1ad3      	subs	r3, r2, r3
 801b550:	2b02      	cmp	r3, #2
 801b552:	d914      	bls.n	801b57e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	689b      	ldr	r3, [r3, #8]
 801b55a:	f003 0301 	and.w	r3, r3, #1
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d00d      	beq.n	801b57e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b566:	f043 0210 	orr.w	r2, r3, #16
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801b56e:	687b      	ldr	r3, [r7, #4]
 801b570:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b572:	f043 0201 	orr.w	r2, r3, #1
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801b57a:	2301      	movs	r3, #1
 801b57c:	e007      	b.n	801b58e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801b57e:	687b      	ldr	r3, [r7, #4]
 801b580:	681b      	ldr	r3, [r3, #0]
 801b582:	689b      	ldr	r3, [r3, #8]
 801b584:	f003 0301 	and.w	r3, r3, #1
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d1dc      	bne.n	801b546 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801b58c:	2300      	movs	r3, #0
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3710      	adds	r7, #16
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}

0801b596 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801b596:	b580      	push	{r7, lr}
 801b598:	b084      	sub	sp, #16
 801b59a:	af00      	add	r7, sp, #0
 801b59c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5a2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801b5a4:	68fb      	ldr	r3, [r7, #12]
 801b5a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d14b      	bne.n	801b648 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	681b      	ldr	r3, [r3, #0]
 801b5c0:	681b      	ldr	r3, [r3, #0]
 801b5c2:	f003 0308 	and.w	r3, r3, #8
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d021      	beq.n	801b60e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801b5ca:	68fb      	ldr	r3, [r7, #12]
 801b5cc:	681b      	ldr	r3, [r3, #0]
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7fe f942 	bl	8019858 <LL_ADC_REG_IsTriggerSourceSWStart>
 801b5d4:	4603      	mov	r3, r0
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	d032      	beq.n	801b640 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801b5da:	68fb      	ldr	r3, [r7, #12]
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	68db      	ldr	r3, [r3, #12]
 801b5e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d12b      	bne.n	801b640 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b5e8:	68fb      	ldr	r3, [r7, #12]
 801b5ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b5f0:	68fb      	ldr	r3, [r7, #12]
 801b5f2:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b5f4:	68fb      	ldr	r3, [r7, #12]
 801b5f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b5f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	d11f      	bne.n	801b640 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b604:	f043 0201 	orr.w	r2, r3, #1
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	65da      	str	r2, [r3, #92]	; 0x5c
 801b60c:	e018      	b.n	801b640 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	681b      	ldr	r3, [r3, #0]
 801b612:	68db      	ldr	r3, [r3, #12]
 801b614:	f003 0302 	and.w	r3, r3, #2
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d111      	bne.n	801b640 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b620:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801b624:	68fb      	ldr	r3, [r7, #12]
 801b626:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b62c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801b630:	2b00      	cmp	r3, #0
 801b632:	d105      	bne.n	801b640 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b638:	f043 0201 	orr.w	r2, r3, #1
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801b640:	68f8      	ldr	r0, [r7, #12]
 801b642:	f7ed fc35 	bl	8008eb0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801b646:	e00e      	b.n	801b666 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801b648:	68fb      	ldr	r3, [r7, #12]
 801b64a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b64c:	f003 0310 	and.w	r3, r3, #16
 801b650:	2b00      	cmp	r3, #0
 801b652:	d003      	beq.n	801b65c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801b654:	68f8      	ldr	r0, [r7, #12]
 801b656:	f7ff f9eb 	bl	801aa30 <HAL_ADC_ErrorCallback>
}
 801b65a:	e004      	b.n	801b666 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801b65c:	68fb      	ldr	r3, [r7, #12]
 801b65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b662:	6878      	ldr	r0, [r7, #4]
 801b664:	4798      	blx	r3
}
 801b666:	bf00      	nop
 801b668:	3710      	adds	r7, #16
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}

0801b66e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801b66e:	b580      	push	{r7, lr}
 801b670:	b084      	sub	sp, #16
 801b672:	af00      	add	r7, sp, #0
 801b674:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b67a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801b67c:	68f8      	ldr	r0, [r7, #12]
 801b67e:	f7ff f9c3 	bl	801aa08 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b682:	bf00      	nop
 801b684:	3710      	adds	r7, #16
 801b686:	46bd      	mov	sp, r7
 801b688:	bd80      	pop	{r7, pc}

0801b68a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801b68a:	b580      	push	{r7, lr}
 801b68c:	b084      	sub	sp, #16
 801b68e:	af00      	add	r7, sp, #0
 801b690:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b696:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801b698:	68fb      	ldr	r3, [r7, #12]
 801b69a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b69c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b6a0:	68fb      	ldr	r3, [r7, #12]
 801b6a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801b6a4:	68fb      	ldr	r3, [r7, #12]
 801b6a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b6a8:	f043 0204 	orr.w	r2, r3, #4
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801b6b0:	68f8      	ldr	r0, [r7, #12]
 801b6b2:	f7ff f9bd 	bl	801aa30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801b6b6:	bf00      	nop
 801b6b8:	3710      	adds	r7, #16
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	bd80      	pop	{r7, pc}

0801b6be <LL_ADC_IsEnabled>:
{
 801b6be:	b480      	push	{r7}
 801b6c0:	b083      	sub	sp, #12
 801b6c2:	af00      	add	r7, sp, #0
 801b6c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	689b      	ldr	r3, [r3, #8]
 801b6ca:	f003 0301 	and.w	r3, r3, #1
 801b6ce:	2b01      	cmp	r3, #1
 801b6d0:	d101      	bne.n	801b6d6 <LL_ADC_IsEnabled+0x18>
 801b6d2:	2301      	movs	r3, #1
 801b6d4:	e000      	b.n	801b6d8 <LL_ADC_IsEnabled+0x1a>
 801b6d6:	2300      	movs	r3, #0
}
 801b6d8:	4618      	mov	r0, r3
 801b6da:	370c      	adds	r7, #12
 801b6dc:	46bd      	mov	sp, r7
 801b6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6e2:	4770      	bx	lr

0801b6e4 <LL_ADC_StartCalibration>:
{
 801b6e4:	b480      	push	{r7}
 801b6e6:	b083      	sub	sp, #12
 801b6e8:	af00      	add	r7, sp, #0
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	689b      	ldr	r3, [r3, #8]
 801b6f2:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b6f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801b6fa:	683a      	ldr	r2, [r7, #0]
 801b6fc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801b700:	4313      	orrs	r3, r2
 801b702:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	609a      	str	r2, [r3, #8]
}
 801b70a:	bf00      	nop
 801b70c:	370c      	adds	r7, #12
 801b70e:	46bd      	mov	sp, r7
 801b710:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b714:	4770      	bx	lr

0801b716 <LL_ADC_IsCalibrationOnGoing>:
{
 801b716:	b480      	push	{r7}
 801b718:	b083      	sub	sp, #12
 801b71a:	af00      	add	r7, sp, #0
 801b71c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	689b      	ldr	r3, [r3, #8]
 801b722:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b726:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b72a:	d101      	bne.n	801b730 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801b72c:	2301      	movs	r3, #1
 801b72e:	e000      	b.n	801b732 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801b730:	2300      	movs	r3, #0
}
 801b732:	4618      	mov	r0, r3
 801b734:	370c      	adds	r7, #12
 801b736:	46bd      	mov	sp, r7
 801b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b73c:	4770      	bx	lr

0801b73e <LL_ADC_REG_IsConversionOngoing>:
{
 801b73e:	b480      	push	{r7}
 801b740:	b083      	sub	sp, #12
 801b742:	af00      	add	r7, sp, #0
 801b744:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	689b      	ldr	r3, [r3, #8]
 801b74a:	f003 0304 	and.w	r3, r3, #4
 801b74e:	2b04      	cmp	r3, #4
 801b750:	d101      	bne.n	801b756 <LL_ADC_REG_IsConversionOngoing+0x18>
 801b752:	2301      	movs	r3, #1
 801b754:	e000      	b.n	801b758 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801b756:	2300      	movs	r3, #0
}
 801b758:	4618      	mov	r0, r3
 801b75a:	370c      	adds	r7, #12
 801b75c:	46bd      	mov	sp, r7
 801b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b762:	4770      	bx	lr

0801b764 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801b764:	b580      	push	{r7, lr}
 801b766:	b084      	sub	sp, #16
 801b768:	af00      	add	r7, sp, #0
 801b76a:	6078      	str	r0, [r7, #4]
 801b76c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801b76e:	2300      	movs	r3, #0
 801b770:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801b772:	687b      	ldr	r3, [r7, #4]
 801b774:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b778:	2b01      	cmp	r3, #1
 801b77a:	d101      	bne.n	801b780 <HAL_ADCEx_Calibration_Start+0x1c>
 801b77c:	2302      	movs	r3, #2
 801b77e:	e04d      	b.n	801b81c <HAL_ADCEx_Calibration_Start+0xb8>
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	2201      	movs	r2, #1
 801b784:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801b788:	6878      	ldr	r0, [r7, #4]
 801b78a:	f7ff fea5 	bl	801b4d8 <ADC_Disable>
 801b78e:	4603      	mov	r3, r0
 801b790:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801b792:	7bfb      	ldrb	r3, [r7, #15]
 801b794:	2b00      	cmp	r3, #0
 801b796:	d136      	bne.n	801b806 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b79c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801b7a0:	f023 0302 	bic.w	r3, r3, #2
 801b7a4:	f043 0202 	orr.w	r2, r3, #2
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801b7ac:	687b      	ldr	r3, [r7, #4]
 801b7ae:	681b      	ldr	r3, [r3, #0]
 801b7b0:	6839      	ldr	r1, [r7, #0]
 801b7b2:	4618      	mov	r0, r3
 801b7b4:	f7ff ff96 	bl	801b6e4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b7b8:	e014      	b.n	801b7e4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	3301      	adds	r3, #1
 801b7be:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801b7c0:	68bb      	ldr	r3, [r7, #8]
 801b7c2:	4a18      	ldr	r2, [pc, #96]	; (801b824 <HAL_ADCEx_Calibration_Start+0xc0>)
 801b7c4:	4293      	cmp	r3, r2
 801b7c6:	d90d      	bls.n	801b7e4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7cc:	f023 0312 	bic.w	r3, r3, #18
 801b7d0:	f043 0210 	orr.w	r2, r3, #16
 801b7d4:	687b      	ldr	r3, [r7, #4]
 801b7d6:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	2200      	movs	r2, #0
 801b7dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801b7e0:	2301      	movs	r3, #1
 801b7e2:	e01b      	b.n	801b81c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	f7ff ff94 	bl	801b716 <LL_ADC_IsCalibrationOnGoing>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d1e2      	bne.n	801b7ba <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b7f8:	f023 0303 	bic.w	r3, r3, #3
 801b7fc:	f043 0201 	orr.w	r2, r3, #1
 801b800:	687b      	ldr	r3, [r7, #4]
 801b802:	65da      	str	r2, [r3, #92]	; 0x5c
 801b804:	e005      	b.n	801b812 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801b806:	687b      	ldr	r3, [r7, #4]
 801b808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b80a:	f043 0210 	orr.w	r2, r3, #16
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	2200      	movs	r2, #0
 801b816:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801b81a:	7bfb      	ldrb	r3, [r7, #15]
}
 801b81c:	4618      	mov	r0, r3
 801b81e:	3710      	adds	r7, #16
 801b820:	46bd      	mov	sp, r7
 801b822:	bd80      	pop	{r7, pc}
 801b824:	0004de01 	.word	0x0004de01

0801b828 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801b828:	b480      	push	{r7}
 801b82a:	b083      	sub	sp, #12
 801b82c:	af00      	add	r7, sp, #0
 801b82e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801b830:	bf00      	nop
 801b832:	370c      	adds	r7, #12
 801b834:	46bd      	mov	sp, r7
 801b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b83a:	4770      	bx	lr

0801b83c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801b83c:	b480      	push	{r7}
 801b83e:	b083      	sub	sp, #12
 801b840:	af00      	add	r7, sp, #0
 801b842:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801b844:	bf00      	nop
 801b846:	370c      	adds	r7, #12
 801b848:	46bd      	mov	sp, r7
 801b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b84e:	4770      	bx	lr

0801b850 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801b850:	b480      	push	{r7}
 801b852:	b083      	sub	sp, #12
 801b854:	af00      	add	r7, sp, #0
 801b856:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801b858:	bf00      	nop
 801b85a:	370c      	adds	r7, #12
 801b85c:	46bd      	mov	sp, r7
 801b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b862:	4770      	bx	lr

0801b864 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801b864:	b480      	push	{r7}
 801b866:	b083      	sub	sp, #12
 801b868:	af00      	add	r7, sp, #0
 801b86a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801b86c:	bf00      	nop
 801b86e:	370c      	adds	r7, #12
 801b870:	46bd      	mov	sp, r7
 801b872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b876:	4770      	bx	lr

0801b878 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801b878:	b480      	push	{r7}
 801b87a:	b083      	sub	sp, #12
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801b880:	bf00      	nop
 801b882:	370c      	adds	r7, #12
 801b884:	46bd      	mov	sp, r7
 801b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88a:	4770      	bx	lr

0801b88c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801b88c:	b590      	push	{r4, r7, lr}
 801b88e:	b0a1      	sub	sp, #132	; 0x84
 801b890:	af00      	add	r7, sp, #0
 801b892:	6078      	str	r0, [r7, #4]
 801b894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801b896:	2300      	movs	r3, #0
 801b898:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801b89c:	687b      	ldr	r3, [r7, #4]
 801b89e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801b8a2:	2b01      	cmp	r3, #1
 801b8a4:	d101      	bne.n	801b8aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801b8a6:	2302      	movs	r3, #2
 801b8a8:	e0cb      	b.n	801ba42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2201      	movs	r2, #1
 801b8ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801b8b2:	2300      	movs	r3, #0
 801b8b4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801b8b6:	2300      	movs	r3, #0
 801b8b8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b8c2:	d102      	bne.n	801b8ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801b8c4:	4b61      	ldr	r3, [pc, #388]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b8c6:	60bb      	str	r3, [r7, #8]
 801b8c8:	e001      	b.n	801b8ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801b8ca:	2300      	movs	r3, #0
 801b8cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801b8ce:	68bb      	ldr	r3, [r7, #8]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d10b      	bne.n	801b8ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801b8d8:	f043 0220 	orr.w	r2, r3, #32
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801b8e8:	2301      	movs	r3, #1
 801b8ea:	e0aa      	b.n	801ba42 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801b8ec:	68bb      	ldr	r3, [r7, #8]
 801b8ee:	4618      	mov	r0, r3
 801b8f0:	f7ff ff25 	bl	801b73e <LL_ADC_REG_IsConversionOngoing>
 801b8f4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	4618      	mov	r0, r3
 801b8fc:	f7ff ff1f 	bl	801b73e <LL_ADC_REG_IsConversionOngoing>
 801b900:	4603      	mov	r3, r0
 801b902:	2b00      	cmp	r3, #0
 801b904:	f040 808c 	bne.w	801ba20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801b908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	f040 8088 	bne.w	801ba20 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801b910:	687b      	ldr	r3, [r7, #4]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b918:	d004      	beq.n	801b924 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801b91a:	687b      	ldr	r3, [r7, #4]
 801b91c:	681b      	ldr	r3, [r3, #0]
 801b91e:	4a4b      	ldr	r2, [pc, #300]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b920:	4293      	cmp	r3, r2
 801b922:	d101      	bne.n	801b928 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801b924:	4b4a      	ldr	r3, [pc, #296]	; (801ba50 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801b926:	e000      	b.n	801b92a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801b928:	4b4a      	ldr	r3, [pc, #296]	; (801ba54 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801b92a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b92c:	683b      	ldr	r3, [r7, #0]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	2b00      	cmp	r3, #0
 801b932:	d041      	beq.n	801b9b8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801b934:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b936:	689b      	ldr	r3, [r3, #8]
 801b938:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b93c:	683b      	ldr	r3, [r7, #0]
 801b93e:	6859      	ldr	r1, [r3, #4]
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b946:	035b      	lsls	r3, r3, #13
 801b948:	430b      	orrs	r3, r1
 801b94a:	431a      	orrs	r2, r3
 801b94c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b94e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b958:	d004      	beq.n	801b964 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	4a3b      	ldr	r2, [pc, #236]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b960:	4293      	cmp	r3, r2
 801b962:	d10f      	bne.n	801b984 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801b964:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b968:	f7ff fea9 	bl	801b6be <LL_ADC_IsEnabled>
 801b96c:	4604      	mov	r4, r0
 801b96e:	4837      	ldr	r0, [pc, #220]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b970:	f7ff fea5 	bl	801b6be <LL_ADC_IsEnabled>
 801b974:	4603      	mov	r3, r0
 801b976:	4323      	orrs	r3, r4
 801b978:	2b00      	cmp	r3, #0
 801b97a:	bf0c      	ite	eq
 801b97c:	2301      	moveq	r3, #1
 801b97e:	2300      	movne	r3, #0
 801b980:	b2db      	uxtb	r3, r3
 801b982:	e008      	b.n	801b996 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801b984:	4834      	ldr	r0, [pc, #208]	; (801ba58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b986:	f7ff fe9a 	bl	801b6be <LL_ADC_IsEnabled>
 801b98a:	4603      	mov	r3, r0
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	bf0c      	ite	eq
 801b990:	2301      	moveq	r3, #1
 801b992:	2300      	movne	r3, #0
 801b994:	b2db      	uxtb	r3, r3
 801b996:	2b00      	cmp	r3, #0
 801b998:	d04c      	beq.n	801ba34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801b99a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b99c:	689b      	ldr	r3, [r3, #8]
 801b99e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801b9a2:	f023 030f 	bic.w	r3, r3, #15
 801b9a6:	683a      	ldr	r2, [r7, #0]
 801b9a8:	6811      	ldr	r1, [r2, #0]
 801b9aa:	683a      	ldr	r2, [r7, #0]
 801b9ac:	6892      	ldr	r2, [r2, #8]
 801b9ae:	430a      	orrs	r2, r1
 801b9b0:	431a      	orrs	r2, r3
 801b9b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801b9b6:	e03d      	b.n	801ba34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801b9b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9ba:	689b      	ldr	r3, [r3, #8]
 801b9bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801b9c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b9c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801b9cc:	d004      	beq.n	801b9d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4a1e      	ldr	r2, [pc, #120]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d10f      	bne.n	801b9f8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801b9d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801b9dc:	f7ff fe6f 	bl	801b6be <LL_ADC_IsEnabled>
 801b9e0:	4604      	mov	r4, r0
 801b9e2:	481a      	ldr	r0, [pc, #104]	; (801ba4c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801b9e4:	f7ff fe6b 	bl	801b6be <LL_ADC_IsEnabled>
 801b9e8:	4603      	mov	r3, r0
 801b9ea:	4323      	orrs	r3, r4
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	bf0c      	ite	eq
 801b9f0:	2301      	moveq	r3, #1
 801b9f2:	2300      	movne	r3, #0
 801b9f4:	b2db      	uxtb	r3, r3
 801b9f6:	e008      	b.n	801ba0a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801b9f8:	4817      	ldr	r0, [pc, #92]	; (801ba58 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801b9fa:	f7ff fe60 	bl	801b6be <LL_ADC_IsEnabled>
 801b9fe:	4603      	mov	r3, r0
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	bf0c      	ite	eq
 801ba04:	2301      	moveq	r3, #1
 801ba06:	2300      	movne	r3, #0
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	2b00      	cmp	r3, #0
 801ba0c:	d012      	beq.n	801ba34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801ba0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ba10:	689b      	ldr	r3, [r3, #8]
 801ba12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801ba16:	f023 030f 	bic.w	r3, r3, #15
 801ba1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801ba1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ba1e:	e009      	b.n	801ba34 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ba24:	f043 0220 	orr.w	r2, r3, #32
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801ba2c:	2301      	movs	r3, #1
 801ba2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801ba32:	e000      	b.n	801ba36 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801ba34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	2200      	movs	r2, #0
 801ba3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ba3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801ba42:	4618      	mov	r0, r3
 801ba44:	3784      	adds	r7, #132	; 0x84
 801ba46:	46bd      	mov	sp, r7
 801ba48:	bd90      	pop	{r4, r7, pc}
 801ba4a:	bf00      	nop
 801ba4c:	50000100 	.word	0x50000100
 801ba50:	50000300 	.word	0x50000300
 801ba54:	50000700 	.word	0x50000700
 801ba58:	50000400 	.word	0x50000400

0801ba5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801ba5c:	b480      	push	{r7}
 801ba5e:	b085      	sub	sp, #20
 801ba60:	af00      	add	r7, sp, #0
 801ba62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801ba64:	687b      	ldr	r3, [r7, #4]
 801ba66:	f003 0307 	and.w	r3, r3, #7
 801ba6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801ba6c:	4b0c      	ldr	r3, [pc, #48]	; (801baa0 <__NVIC_SetPriorityGrouping+0x44>)
 801ba6e:	68db      	ldr	r3, [r3, #12]
 801ba70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801ba72:	68ba      	ldr	r2, [r7, #8]
 801ba74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801ba78:	4013      	ands	r3, r2
 801ba7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801ba7c:	68fb      	ldr	r3, [r7, #12]
 801ba7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801ba80:	68bb      	ldr	r3, [r7, #8]
 801ba82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801ba84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801ba88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ba8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801ba8e:	4a04      	ldr	r2, [pc, #16]	; (801baa0 <__NVIC_SetPriorityGrouping+0x44>)
 801ba90:	68bb      	ldr	r3, [r7, #8]
 801ba92:	60d3      	str	r3, [r2, #12]
}
 801ba94:	bf00      	nop
 801ba96:	3714      	adds	r7, #20
 801ba98:	46bd      	mov	sp, r7
 801ba9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba9e:	4770      	bx	lr
 801baa0:	e000ed00 	.word	0xe000ed00

0801baa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801baa4:	b480      	push	{r7}
 801baa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801baa8:	4b04      	ldr	r3, [pc, #16]	; (801babc <__NVIC_GetPriorityGrouping+0x18>)
 801baaa:	68db      	ldr	r3, [r3, #12]
 801baac:	0a1b      	lsrs	r3, r3, #8
 801baae:	f003 0307 	and.w	r3, r3, #7
}
 801bab2:	4618      	mov	r0, r3
 801bab4:	46bd      	mov	sp, r7
 801bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baba:	4770      	bx	lr
 801babc:	e000ed00 	.word	0xe000ed00

0801bac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bac0:	b480      	push	{r7}
 801bac2:	b083      	sub	sp, #12
 801bac4:	af00      	add	r7, sp, #0
 801bac6:	4603      	mov	r3, r0
 801bac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801baca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bace:	2b00      	cmp	r3, #0
 801bad0:	db0b      	blt.n	801baea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801bad2:	79fb      	ldrb	r3, [r7, #7]
 801bad4:	f003 021f 	and.w	r2, r3, #31
 801bad8:	4907      	ldr	r1, [pc, #28]	; (801baf8 <__NVIC_EnableIRQ+0x38>)
 801bada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bade:	095b      	lsrs	r3, r3, #5
 801bae0:	2001      	movs	r0, #1
 801bae2:	fa00 f202 	lsl.w	r2, r0, r2
 801bae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801baea:	bf00      	nop
 801baec:	370c      	adds	r7, #12
 801baee:	46bd      	mov	sp, r7
 801baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf4:	4770      	bx	lr
 801baf6:	bf00      	nop
 801baf8:	e000e100 	.word	0xe000e100

0801bafc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801bafc:	b480      	push	{r7}
 801bafe:	b083      	sub	sp, #12
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	4603      	mov	r3, r0
 801bb04:	6039      	str	r1, [r7, #0]
 801bb06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801bb08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	db0a      	blt.n	801bb26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	b2da      	uxtb	r2, r3
 801bb14:	490c      	ldr	r1, [pc, #48]	; (801bb48 <__NVIC_SetPriority+0x4c>)
 801bb16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bb1a:	0112      	lsls	r2, r2, #4
 801bb1c:	b2d2      	uxtb	r2, r2
 801bb1e:	440b      	add	r3, r1
 801bb20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801bb24:	e00a      	b.n	801bb3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801bb26:	683b      	ldr	r3, [r7, #0]
 801bb28:	b2da      	uxtb	r2, r3
 801bb2a:	4908      	ldr	r1, [pc, #32]	; (801bb4c <__NVIC_SetPriority+0x50>)
 801bb2c:	79fb      	ldrb	r3, [r7, #7]
 801bb2e:	f003 030f 	and.w	r3, r3, #15
 801bb32:	3b04      	subs	r3, #4
 801bb34:	0112      	lsls	r2, r2, #4
 801bb36:	b2d2      	uxtb	r2, r2
 801bb38:	440b      	add	r3, r1
 801bb3a:	761a      	strb	r2, [r3, #24]
}
 801bb3c:	bf00      	nop
 801bb3e:	370c      	adds	r7, #12
 801bb40:	46bd      	mov	sp, r7
 801bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb46:	4770      	bx	lr
 801bb48:	e000e100 	.word	0xe000e100
 801bb4c:	e000ed00 	.word	0xe000ed00

0801bb50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bb50:	b480      	push	{r7}
 801bb52:	b089      	sub	sp, #36	; 0x24
 801bb54:	af00      	add	r7, sp, #0
 801bb56:	60f8      	str	r0, [r7, #12]
 801bb58:	60b9      	str	r1, [r7, #8]
 801bb5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	f003 0307 	and.w	r3, r3, #7
 801bb62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801bb64:	69fb      	ldr	r3, [r7, #28]
 801bb66:	f1c3 0307 	rsb	r3, r3, #7
 801bb6a:	2b04      	cmp	r3, #4
 801bb6c:	bf28      	it	cs
 801bb6e:	2304      	movcs	r3, #4
 801bb70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801bb72:	69fb      	ldr	r3, [r7, #28]
 801bb74:	3304      	adds	r3, #4
 801bb76:	2b06      	cmp	r3, #6
 801bb78:	d902      	bls.n	801bb80 <NVIC_EncodePriority+0x30>
 801bb7a:	69fb      	ldr	r3, [r7, #28]
 801bb7c:	3b03      	subs	r3, #3
 801bb7e:	e000      	b.n	801bb82 <NVIC_EncodePriority+0x32>
 801bb80:	2300      	movs	r3, #0
 801bb82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bb84:	f04f 32ff 	mov.w	r2, #4294967295
 801bb88:	69bb      	ldr	r3, [r7, #24]
 801bb8a:	fa02 f303 	lsl.w	r3, r2, r3
 801bb8e:	43da      	mvns	r2, r3
 801bb90:	68bb      	ldr	r3, [r7, #8]
 801bb92:	401a      	ands	r2, r3
 801bb94:	697b      	ldr	r3, [r7, #20]
 801bb96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801bb98:	f04f 31ff 	mov.w	r1, #4294967295
 801bb9c:	697b      	ldr	r3, [r7, #20]
 801bb9e:	fa01 f303 	lsl.w	r3, r1, r3
 801bba2:	43d9      	mvns	r1, r3
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801bba8:	4313      	orrs	r3, r2
         );
}
 801bbaa:	4618      	mov	r0, r3
 801bbac:	3724      	adds	r7, #36	; 0x24
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb4:	4770      	bx	lr
	...

0801bbb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801bbb8:	b580      	push	{r7, lr}
 801bbba:	b082      	sub	sp, #8
 801bbbc:	af00      	add	r7, sp, #0
 801bbbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801bbc0:	687b      	ldr	r3, [r7, #4]
 801bbc2:	3b01      	subs	r3, #1
 801bbc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bbc8:	d301      	bcc.n	801bbce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801bbca:	2301      	movs	r3, #1
 801bbcc:	e00f      	b.n	801bbee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801bbce:	4a0a      	ldr	r2, [pc, #40]	; (801bbf8 <SysTick_Config+0x40>)
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	3b01      	subs	r3, #1
 801bbd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801bbd6:	210f      	movs	r1, #15
 801bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 801bbdc:	f7ff ff8e 	bl	801bafc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801bbe0:	4b05      	ldr	r3, [pc, #20]	; (801bbf8 <SysTick_Config+0x40>)
 801bbe2:	2200      	movs	r2, #0
 801bbe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801bbe6:	4b04      	ldr	r3, [pc, #16]	; (801bbf8 <SysTick_Config+0x40>)
 801bbe8:	2207      	movs	r2, #7
 801bbea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801bbec:	2300      	movs	r3, #0
}
 801bbee:	4618      	mov	r0, r3
 801bbf0:	3708      	adds	r7, #8
 801bbf2:	46bd      	mov	sp, r7
 801bbf4:	bd80      	pop	{r7, pc}
 801bbf6:	bf00      	nop
 801bbf8:	e000e010 	.word	0xe000e010

0801bbfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b082      	sub	sp, #8
 801bc00:	af00      	add	r7, sp, #0
 801bc02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801bc04:	6878      	ldr	r0, [r7, #4]
 801bc06:	f7ff ff29 	bl	801ba5c <__NVIC_SetPriorityGrouping>
}
 801bc0a:	bf00      	nop
 801bc0c:	3708      	adds	r7, #8
 801bc0e:	46bd      	mov	sp, r7
 801bc10:	bd80      	pop	{r7, pc}

0801bc12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801bc12:	b580      	push	{r7, lr}
 801bc14:	b086      	sub	sp, #24
 801bc16:	af00      	add	r7, sp, #0
 801bc18:	4603      	mov	r3, r0
 801bc1a:	60b9      	str	r1, [r7, #8]
 801bc1c:	607a      	str	r2, [r7, #4]
 801bc1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801bc20:	f7ff ff40 	bl	801baa4 <__NVIC_GetPriorityGrouping>
 801bc24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801bc26:	687a      	ldr	r2, [r7, #4]
 801bc28:	68b9      	ldr	r1, [r7, #8]
 801bc2a:	6978      	ldr	r0, [r7, #20]
 801bc2c:	f7ff ff90 	bl	801bb50 <NVIC_EncodePriority>
 801bc30:	4602      	mov	r2, r0
 801bc32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bc36:	4611      	mov	r1, r2
 801bc38:	4618      	mov	r0, r3
 801bc3a:	f7ff ff5f 	bl	801bafc <__NVIC_SetPriority>
}
 801bc3e:	bf00      	nop
 801bc40:	3718      	adds	r7, #24
 801bc42:	46bd      	mov	sp, r7
 801bc44:	bd80      	pop	{r7, pc}

0801bc46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801bc46:	b580      	push	{r7, lr}
 801bc48:	b082      	sub	sp, #8
 801bc4a:	af00      	add	r7, sp, #0
 801bc4c:	4603      	mov	r3, r0
 801bc4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801bc50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801bc54:	4618      	mov	r0, r3
 801bc56:	f7ff ff33 	bl	801bac0 <__NVIC_EnableIRQ>
}
 801bc5a:	bf00      	nop
 801bc5c:	3708      	adds	r7, #8
 801bc5e:	46bd      	mov	sp, r7
 801bc60:	bd80      	pop	{r7, pc}

0801bc62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801bc62:	b580      	push	{r7, lr}
 801bc64:	b082      	sub	sp, #8
 801bc66:	af00      	add	r7, sp, #0
 801bc68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801bc6a:	6878      	ldr	r0, [r7, #4]
 801bc6c:	f7ff ffa4 	bl	801bbb8 <SysTick_Config>
 801bc70:	4603      	mov	r3, r0
}
 801bc72:	4618      	mov	r0, r3
 801bc74:	3708      	adds	r7, #8
 801bc76:	46bd      	mov	sp, r7
 801bc78:	bd80      	pop	{r7, pc}
	...

0801bc7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b084      	sub	sp, #16
 801bc80:	af00      	add	r7, sp, #0
 801bc82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801bc84:	687b      	ldr	r3, [r7, #4]
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	d101      	bne.n	801bc8e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801bc8a:	2301      	movs	r3, #1
 801bc8c:	e08d      	b.n	801bdaa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	681b      	ldr	r3, [r3, #0]
 801bc92:	461a      	mov	r2, r3
 801bc94:	4b47      	ldr	r3, [pc, #284]	; (801bdb4 <HAL_DMA_Init+0x138>)
 801bc96:	429a      	cmp	r2, r3
 801bc98:	d80f      	bhi.n	801bcba <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801bc9a:	687b      	ldr	r3, [r7, #4]
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	461a      	mov	r2, r3
 801bca0:	4b45      	ldr	r3, [pc, #276]	; (801bdb8 <HAL_DMA_Init+0x13c>)
 801bca2:	4413      	add	r3, r2
 801bca4:	4a45      	ldr	r2, [pc, #276]	; (801bdbc <HAL_DMA_Init+0x140>)
 801bca6:	fba2 2303 	umull	r2, r3, r2, r3
 801bcaa:	091b      	lsrs	r3, r3, #4
 801bcac:	009a      	lsls	r2, r3, #2
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	4a42      	ldr	r2, [pc, #264]	; (801bdc0 <HAL_DMA_Init+0x144>)
 801bcb6:	641a      	str	r2, [r3, #64]	; 0x40
 801bcb8:	e00e      	b.n	801bcd8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801bcba:	687b      	ldr	r3, [r7, #4]
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	4b40      	ldr	r3, [pc, #256]	; (801bdc4 <HAL_DMA_Init+0x148>)
 801bcc2:	4413      	add	r3, r2
 801bcc4:	4a3d      	ldr	r2, [pc, #244]	; (801bdbc <HAL_DMA_Init+0x140>)
 801bcc6:	fba2 2303 	umull	r2, r3, r2, r3
 801bcca:	091b      	lsrs	r3, r3, #4
 801bccc:	009a      	lsls	r2, r3, #2
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	4a3c      	ldr	r2, [pc, #240]	; (801bdc8 <HAL_DMA_Init+0x14c>)
 801bcd6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	2202      	movs	r2, #2
 801bcdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	681b      	ldr	r3, [r3, #0]
 801bce4:	681b      	ldr	r3, [r3, #0]
 801bce6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801bcee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801bcf2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801bcfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bcfe:	687b      	ldr	r3, [r7, #4]
 801bd00:	691b      	ldr	r3, [r3, #16]
 801bd02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801bd08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	699b      	ldr	r3, [r3, #24]
 801bd0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd10:	687b      	ldr	r3, [r7, #4]
 801bd12:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801bd14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801bd16:	687b      	ldr	r3, [r7, #4]
 801bd18:	6a1b      	ldr	r3, [r3, #32]
 801bd1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801bd1c:	68fa      	ldr	r2, [r7, #12]
 801bd1e:	4313      	orrs	r3, r2
 801bd20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	681b      	ldr	r3, [r3, #0]
 801bd26:	68fa      	ldr	r2, [r7, #12]
 801bd28:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801bd2a:	6878      	ldr	r0, [r7, #4]
 801bd2c:	f000 fa10 	bl	801c150 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	689b      	ldr	r3, [r3, #8]
 801bd34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bd38:	d102      	bne.n	801bd40 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	2200      	movs	r2, #0
 801bd3e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	685a      	ldr	r2, [r3, #4]
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bd48:	b2d2      	uxtb	r2, r2
 801bd4a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bd4c:	687b      	ldr	r3, [r7, #4]
 801bd4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bd50:	687a      	ldr	r2, [r7, #4]
 801bd52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bd54:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	685b      	ldr	r3, [r3, #4]
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d010      	beq.n	801bd80 <HAL_DMA_Init+0x104>
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	685b      	ldr	r3, [r3, #4]
 801bd62:	2b04      	cmp	r3, #4
 801bd64:	d80c      	bhi.n	801bd80 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801bd66:	6878      	ldr	r0, [r7, #4]
 801bd68:	f000 fa30 	bl	801c1cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bd70:	2200      	movs	r2, #0
 801bd72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd78:	687a      	ldr	r2, [r7, #4]
 801bd7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bd7c:	605a      	str	r2, [r3, #4]
 801bd7e:	e008      	b.n	801bd92 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	2200      	movs	r2, #0
 801bd84:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	2200      	movs	r2, #0
 801bd8a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801bd8c:	687b      	ldr	r3, [r7, #4]
 801bd8e:	2200      	movs	r2, #0
 801bd90:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	2200      	movs	r2, #0
 801bd96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	2201      	movs	r2, #1
 801bd9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801bda0:	687b      	ldr	r3, [r7, #4]
 801bda2:	2200      	movs	r2, #0
 801bda4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801bda8:	2300      	movs	r3, #0
}
 801bdaa:	4618      	mov	r0, r3
 801bdac:	3710      	adds	r7, #16
 801bdae:	46bd      	mov	sp, r7
 801bdb0:	bd80      	pop	{r7, pc}
 801bdb2:	bf00      	nop
 801bdb4:	40020407 	.word	0x40020407
 801bdb8:	bffdfff8 	.word	0xbffdfff8
 801bdbc:	cccccccd 	.word	0xcccccccd
 801bdc0:	40020000 	.word	0x40020000
 801bdc4:	bffdfbf8 	.word	0xbffdfbf8
 801bdc8:	40020400 	.word	0x40020400

0801bdcc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801bdcc:	b580      	push	{r7, lr}
 801bdce:	b086      	sub	sp, #24
 801bdd0:	af00      	add	r7, sp, #0
 801bdd2:	60f8      	str	r0, [r7, #12]
 801bdd4:	60b9      	str	r1, [r7, #8]
 801bdd6:	607a      	str	r2, [r7, #4]
 801bdd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801bdda:	2300      	movs	r3, #0
 801bddc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801bde4:	2b01      	cmp	r3, #1
 801bde6:	d101      	bne.n	801bdec <HAL_DMA_Start_IT+0x20>
 801bde8:	2302      	movs	r3, #2
 801bdea:	e066      	b.n	801beba <HAL_DMA_Start_IT+0xee>
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	2201      	movs	r2, #1
 801bdf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801bdf4:	68fb      	ldr	r3, [r7, #12]
 801bdf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bdfa:	b2db      	uxtb	r3, r3
 801bdfc:	2b01      	cmp	r3, #1
 801bdfe:	d155      	bne.n	801beac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	2202      	movs	r2, #2
 801be04:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801be08:	68fb      	ldr	r3, [r7, #12]
 801be0a:	2200      	movs	r2, #0
 801be0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801be0e:	68fb      	ldr	r3, [r7, #12]
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	681a      	ldr	r2, [r3, #0]
 801be14:	68fb      	ldr	r3, [r7, #12]
 801be16:	681b      	ldr	r3, [r3, #0]
 801be18:	f022 0201 	bic.w	r2, r2, #1
 801be1c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801be1e:	683b      	ldr	r3, [r7, #0]
 801be20:	687a      	ldr	r2, [r7, #4]
 801be22:	68b9      	ldr	r1, [r7, #8]
 801be24:	68f8      	ldr	r0, [r7, #12]
 801be26:	f000 f954 	bl	801c0d2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801be2e:	2b00      	cmp	r3, #0
 801be30:	d008      	beq.n	801be44 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801be32:	68fb      	ldr	r3, [r7, #12]
 801be34:	681b      	ldr	r3, [r3, #0]
 801be36:	681a      	ldr	r2, [r3, #0]
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	681b      	ldr	r3, [r3, #0]
 801be3c:	f042 020e 	orr.w	r2, r2, #14
 801be40:	601a      	str	r2, [r3, #0]
 801be42:	e00f      	b.n	801be64 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	681b      	ldr	r3, [r3, #0]
 801be48:	681a      	ldr	r2, [r3, #0]
 801be4a:	68fb      	ldr	r3, [r7, #12]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	f022 0204 	bic.w	r2, r2, #4
 801be52:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	681a      	ldr	r2, [r3, #0]
 801be5a:	68fb      	ldr	r3, [r7, #12]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	f042 020a 	orr.w	r2, r2, #10
 801be62:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801be64:	68fb      	ldr	r3, [r7, #12]
 801be66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be68:	681b      	ldr	r3, [r3, #0]
 801be6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801be6e:	2b00      	cmp	r3, #0
 801be70:	d007      	beq.n	801be82 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801be72:	68fb      	ldr	r3, [r7, #12]
 801be74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be76:	681a      	ldr	r2, [r3, #0]
 801be78:	68fb      	ldr	r3, [r7, #12]
 801be7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801be80:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801be86:	2b00      	cmp	r3, #0
 801be88:	d007      	beq.n	801be9a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801be8a:	68fb      	ldr	r3, [r7, #12]
 801be8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801be8e:	681a      	ldr	r2, [r3, #0]
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801be94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801be98:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	681a      	ldr	r2, [r3, #0]
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	681b      	ldr	r3, [r3, #0]
 801bea4:	f042 0201 	orr.w	r2, r2, #1
 801bea8:	601a      	str	r2, [r3, #0]
 801beaa:	e005      	b.n	801beb8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801beac:	68fb      	ldr	r3, [r7, #12]
 801beae:	2200      	movs	r2, #0
 801beb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801beb4:	2302      	movs	r3, #2
 801beb6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801beb8:	7dfb      	ldrb	r3, [r7, #23]
}
 801beba:	4618      	mov	r0, r3
 801bebc:	3718      	adds	r7, #24
 801bebe:	46bd      	mov	sp, r7
 801bec0:	bd80      	pop	{r7, pc}

0801bec2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801bec2:	b480      	push	{r7}
 801bec4:	b085      	sub	sp, #20
 801bec6:	af00      	add	r7, sp, #0
 801bec8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801beca:	2300      	movs	r3, #0
 801becc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801bed4:	b2db      	uxtb	r3, r3
 801bed6:	2b02      	cmp	r3, #2
 801bed8:	d005      	beq.n	801bee6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801beda:	687b      	ldr	r3, [r7, #4]
 801bedc:	2204      	movs	r2, #4
 801bede:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801bee0:	2301      	movs	r3, #1
 801bee2:	73fb      	strb	r3, [r7, #15]
 801bee4:	e037      	b.n	801bf56 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	681a      	ldr	r2, [r3, #0]
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	681b      	ldr	r3, [r3, #0]
 801bef0:	f022 020e 	bic.w	r2, r2, #14
 801bef4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801befa:	681a      	ldr	r2, [r3, #0]
 801befc:	687b      	ldr	r3, [r7, #4]
 801befe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bf00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf04:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	681b      	ldr	r3, [r3, #0]
 801bf0a:	681a      	ldr	r2, [r3, #0]
 801bf0c:	687b      	ldr	r3, [r7, #4]
 801bf0e:	681b      	ldr	r3, [r3, #0]
 801bf10:	f022 0201 	bic.w	r2, r2, #1
 801bf14:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf1a:	f003 021f 	and.w	r2, r3, #31
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf22:	2101      	movs	r1, #1
 801bf24:	fa01 f202 	lsl.w	r2, r1, r2
 801bf28:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bf2e:	687a      	ldr	r2, [r7, #4]
 801bf30:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801bf32:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d00c      	beq.n	801bf56 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf40:	681a      	ldr	r2, [r3, #0]
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bf46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801bf4a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf50:	687a      	ldr	r2, [r7, #4]
 801bf52:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801bf54:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	2201      	movs	r2, #1
 801bf5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	2200      	movs	r2, #0
 801bf62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801bf66:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3714      	adds	r7, #20
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf72:	4770      	bx	lr

0801bf74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b084      	sub	sp, #16
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	681b      	ldr	r3, [r3, #0]
 801bf8a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf90:	f003 031f 	and.w	r3, r3, #31
 801bf94:	2204      	movs	r2, #4
 801bf96:	409a      	lsls	r2, r3
 801bf98:	68fb      	ldr	r3, [r7, #12]
 801bf9a:	4013      	ands	r3, r2
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d026      	beq.n	801bfee <HAL_DMA_IRQHandler+0x7a>
 801bfa0:	68bb      	ldr	r3, [r7, #8]
 801bfa2:	f003 0304 	and.w	r3, r3, #4
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d021      	beq.n	801bfee <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	681b      	ldr	r3, [r3, #0]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	f003 0320 	and.w	r3, r3, #32
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	d107      	bne.n	801bfc8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681a      	ldr	r2, [r3, #0]
 801bfbe:	687b      	ldr	r3, [r7, #4]
 801bfc0:	681b      	ldr	r3, [r3, #0]
 801bfc2:	f022 0204 	bic.w	r2, r2, #4
 801bfc6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801bfc8:	687b      	ldr	r3, [r7, #4]
 801bfca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bfcc:	f003 021f 	and.w	r2, r3, #31
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bfd4:	2104      	movs	r1, #4
 801bfd6:	fa01 f202 	lsl.w	r2, r1, r2
 801bfda:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	d071      	beq.n	801c0c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bfe8:	6878      	ldr	r0, [r7, #4]
 801bfea:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801bfec:	e06c      	b.n	801c0c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bff2:	f003 031f 	and.w	r3, r3, #31
 801bff6:	2202      	movs	r2, #2
 801bff8:	409a      	lsls	r2, r3
 801bffa:	68fb      	ldr	r3, [r7, #12]
 801bffc:	4013      	ands	r3, r2
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d02e      	beq.n	801c060 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801c002:	68bb      	ldr	r3, [r7, #8]
 801c004:	f003 0302 	and.w	r3, r3, #2
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d029      	beq.n	801c060 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801c00c:	687b      	ldr	r3, [r7, #4]
 801c00e:	681b      	ldr	r3, [r3, #0]
 801c010:	681b      	ldr	r3, [r3, #0]
 801c012:	f003 0320 	and.w	r3, r3, #32
 801c016:	2b00      	cmp	r3, #0
 801c018:	d10b      	bne.n	801c032 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	681b      	ldr	r3, [r3, #0]
 801c01e:	681a      	ldr	r2, [r3, #0]
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	f022 020a 	bic.w	r2, r2, #10
 801c028:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	2201      	movs	r2, #1
 801c02e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801c032:	687b      	ldr	r3, [r7, #4]
 801c034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c036:	f003 021f 	and.w	r2, r3, #31
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c03e:	2102      	movs	r1, #2
 801c040:	fa01 f202 	lsl.w	r2, r1, r2
 801c044:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	2200      	movs	r2, #0
 801c04a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c052:	2b00      	cmp	r3, #0
 801c054:	d038      	beq.n	801c0c8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c05a:	6878      	ldr	r0, [r7, #4]
 801c05c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801c05e:	e033      	b.n	801c0c8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c064:	f003 031f 	and.w	r3, r3, #31
 801c068:	2208      	movs	r2, #8
 801c06a:	409a      	lsls	r2, r3
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	4013      	ands	r3, r2
 801c070:	2b00      	cmp	r3, #0
 801c072:	d02a      	beq.n	801c0ca <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801c074:	68bb      	ldr	r3, [r7, #8]
 801c076:	f003 0308 	and.w	r3, r3, #8
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	d025      	beq.n	801c0ca <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	681b      	ldr	r3, [r3, #0]
 801c082:	681a      	ldr	r2, [r3, #0]
 801c084:	687b      	ldr	r3, [r7, #4]
 801c086:	681b      	ldr	r3, [r3, #0]
 801c088:	f022 020e 	bic.w	r2, r2, #14
 801c08c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c092:	f003 021f 	and.w	r2, r3, #31
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c09a:	2101      	movs	r1, #1
 801c09c:	fa01 f202 	lsl.w	r2, r1, r2
 801c0a0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c0a2:	687b      	ldr	r3, [r7, #4]
 801c0a4:	2201      	movs	r2, #1
 801c0a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801c0a8:	687b      	ldr	r3, [r7, #4]
 801c0aa:	2201      	movs	r2, #1
 801c0ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	2200      	movs	r2, #0
 801c0b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d004      	beq.n	801c0ca <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c0c4:	6878      	ldr	r0, [r7, #4]
 801c0c6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801c0c8:	bf00      	nop
 801c0ca:	bf00      	nop
}
 801c0cc:	3710      	adds	r7, #16
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	bd80      	pop	{r7, pc}

0801c0d2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801c0d2:	b480      	push	{r7}
 801c0d4:	b085      	sub	sp, #20
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	60f8      	str	r0, [r7, #12]
 801c0da:	60b9      	str	r1, [r7, #8]
 801c0dc:	607a      	str	r2, [r7, #4]
 801c0de:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801c0e0:	68fb      	ldr	r3, [r7, #12]
 801c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0e4:	68fa      	ldr	r2, [r7, #12]
 801c0e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801c0e8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d004      	beq.n	801c0fc <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801c0f2:	68fb      	ldr	r3, [r7, #12]
 801c0f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0f6:	68fa      	ldr	r2, [r7, #12]
 801c0f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801c0fa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801c0fc:	68fb      	ldr	r3, [r7, #12]
 801c0fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c100:	f003 021f 	and.w	r2, r3, #31
 801c104:	68fb      	ldr	r3, [r7, #12]
 801c106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c108:	2101      	movs	r1, #1
 801c10a:	fa01 f202 	lsl.w	r2, r1, r2
 801c10e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801c110:	68fb      	ldr	r3, [r7, #12]
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	683a      	ldr	r2, [r7, #0]
 801c116:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801c118:	68fb      	ldr	r3, [r7, #12]
 801c11a:	689b      	ldr	r3, [r3, #8]
 801c11c:	2b10      	cmp	r3, #16
 801c11e:	d108      	bne.n	801c132 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801c120:	68fb      	ldr	r3, [r7, #12]
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	687a      	ldr	r2, [r7, #4]
 801c126:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801c128:	68fb      	ldr	r3, [r7, #12]
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	68ba      	ldr	r2, [r7, #8]
 801c12e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801c130:	e007      	b.n	801c142 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801c132:	68fb      	ldr	r3, [r7, #12]
 801c134:	681b      	ldr	r3, [r3, #0]
 801c136:	68ba      	ldr	r2, [r7, #8]
 801c138:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	687a      	ldr	r2, [r7, #4]
 801c140:	60da      	str	r2, [r3, #12]
}
 801c142:	bf00      	nop
 801c144:	3714      	adds	r7, #20
 801c146:	46bd      	mov	sp, r7
 801c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c14c:	4770      	bx	lr
	...

0801c150 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c150:	b480      	push	{r7}
 801c152:	b087      	sub	sp, #28
 801c154:	af00      	add	r7, sp, #0
 801c156:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801c158:	687b      	ldr	r3, [r7, #4]
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	461a      	mov	r2, r3
 801c15e:	4b16      	ldr	r3, [pc, #88]	; (801c1b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801c160:	429a      	cmp	r2, r3
 801c162:	d802      	bhi.n	801c16a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801c164:	4b15      	ldr	r3, [pc, #84]	; (801c1bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801c166:	617b      	str	r3, [r7, #20]
 801c168:	e001      	b.n	801c16e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801c16a:	4b15      	ldr	r3, [pc, #84]	; (801c1c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801c16c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801c16e:	697b      	ldr	r3, [r7, #20]
 801c170:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	b2db      	uxtb	r3, r3
 801c178:	3b08      	subs	r3, #8
 801c17a:	4a12      	ldr	r2, [pc, #72]	; (801c1c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801c17c:	fba2 2303 	umull	r2, r3, r2, r3
 801c180:	091b      	lsrs	r3, r3, #4
 801c182:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801c184:	687b      	ldr	r3, [r7, #4]
 801c186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c188:	089b      	lsrs	r3, r3, #2
 801c18a:	009a      	lsls	r2, r3, #2
 801c18c:	693b      	ldr	r3, [r7, #16]
 801c18e:	4413      	add	r3, r2
 801c190:	461a      	mov	r2, r3
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	4a0b      	ldr	r2, [pc, #44]	; (801c1c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801c19a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	f003 031f 	and.w	r3, r3, #31
 801c1a2:	2201      	movs	r2, #1
 801c1a4:	409a      	lsls	r2, r3
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 801c1aa:	bf00      	nop
 801c1ac:	371c      	adds	r7, #28
 801c1ae:	46bd      	mov	sp, r7
 801c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1b4:	4770      	bx	lr
 801c1b6:	bf00      	nop
 801c1b8:	40020407 	.word	0x40020407
 801c1bc:	40020800 	.word	0x40020800
 801c1c0:	40020820 	.word	0x40020820
 801c1c4:	cccccccd 	.word	0xcccccccd
 801c1c8:	40020880 	.word	0x40020880

0801c1cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	b085      	sub	sp, #20
 801c1d0:	af00      	add	r7, sp, #0
 801c1d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	685b      	ldr	r3, [r3, #4]
 801c1d8:	b2db      	uxtb	r3, r3
 801c1da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c1dc:	68fa      	ldr	r2, [r7, #12]
 801c1de:	4b0b      	ldr	r3, [pc, #44]	; (801c20c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801c1e0:	4413      	add	r3, r2
 801c1e2:	009b      	lsls	r3, r3, #2
 801c1e4:	461a      	mov	r2, r3
 801c1e6:	687b      	ldr	r3, [r7, #4]
 801c1e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	4a08      	ldr	r2, [pc, #32]	; (801c210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801c1ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801c1f0:	68fb      	ldr	r3, [r7, #12]
 801c1f2:	3b01      	subs	r3, #1
 801c1f4:	f003 031f 	and.w	r3, r3, #31
 801c1f8:	2201      	movs	r2, #1
 801c1fa:	409a      	lsls	r2, r3
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801c200:	bf00      	nop
 801c202:	3714      	adds	r7, #20
 801c204:	46bd      	mov	sp, r7
 801c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c20a:	4770      	bx	lr
 801c20c:	1000823f 	.word	0x1000823f
 801c210:	40020940 	.word	0x40020940

0801c214 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801c214:	b580      	push	{r7, lr}
 801c216:	b086      	sub	sp, #24
 801c218:	af00      	add	r7, sp, #0
 801c21a:	60f8      	str	r0, [r7, #12]
 801c21c:	60b9      	str	r1, [r7, #8]
 801c21e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801c222:	2300      	movs	r3, #0
 801c224:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c226:	4b24      	ldr	r3, [pc, #144]	; (801c2b8 <HAL_FLASH_Program+0xa4>)
 801c228:	781b      	ldrb	r3, [r3, #0]
 801c22a:	2b01      	cmp	r3, #1
 801c22c:	d101      	bne.n	801c232 <HAL_FLASH_Program+0x1e>
 801c22e:	2302      	movs	r3, #2
 801c230:	e03e      	b.n	801c2b0 <HAL_FLASH_Program+0x9c>
 801c232:	4b21      	ldr	r3, [pc, #132]	; (801c2b8 <HAL_FLASH_Program+0xa4>)
 801c234:	2201      	movs	r2, #1
 801c236:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c238:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c23c:	f000 f87c 	bl	801c338 <FLASH_WaitForLastOperation>
 801c240:	4603      	mov	r3, r0
 801c242:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801c244:	7dfb      	ldrb	r3, [r7, #23]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d12e      	bne.n	801c2a8 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c24a:	4b1b      	ldr	r3, [pc, #108]	; (801c2b8 <HAL_FLASH_Program+0xa4>)
 801c24c:	2200      	movs	r2, #0
 801c24e:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d107      	bne.n	801c266 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801c256:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c25a:	68b8      	ldr	r0, [r7, #8]
 801c25c:	f000 f8c0 	bl	801c3e0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801c260:	2301      	movs	r3, #1
 801c262:	613b      	str	r3, [r7, #16]
 801c264:	e010      	b.n	801c288 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801c266:	68fb      	ldr	r3, [r7, #12]
 801c268:	2b01      	cmp	r3, #1
 801c26a:	d002      	beq.n	801c272 <HAL_FLASH_Program+0x5e>
 801c26c:	68fb      	ldr	r3, [r7, #12]
 801c26e:	2b02      	cmp	r3, #2
 801c270:	d10a      	bne.n	801c288 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801c272:	683b      	ldr	r3, [r7, #0]
 801c274:	4619      	mov	r1, r3
 801c276:	68b8      	ldr	r0, [r7, #8]
 801c278:	f000 f8d8 	bl	801c42c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801c27c:	68fb      	ldr	r3, [r7, #12]
 801c27e:	2b02      	cmp	r3, #2
 801c280:	d102      	bne.n	801c288 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801c282:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c286:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c28c:	f000 f854 	bl	801c338 <FLASH_WaitForLastOperation>
 801c290:	4603      	mov	r3, r0
 801c292:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801c294:	693b      	ldr	r3, [r7, #16]
 801c296:	2b00      	cmp	r3, #0
 801c298:	d006      	beq.n	801c2a8 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801c29a:	4b08      	ldr	r3, [pc, #32]	; (801c2bc <HAL_FLASH_Program+0xa8>)
 801c29c:	695a      	ldr	r2, [r3, #20]
 801c29e:	693b      	ldr	r3, [r7, #16]
 801c2a0:	43db      	mvns	r3, r3
 801c2a2:	4906      	ldr	r1, [pc, #24]	; (801c2bc <HAL_FLASH_Program+0xa8>)
 801c2a4:	4013      	ands	r3, r2
 801c2a6:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c2a8:	4b03      	ldr	r3, [pc, #12]	; (801c2b8 <HAL_FLASH_Program+0xa4>)
 801c2aa:	2200      	movs	r2, #0
 801c2ac:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801c2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801c2b0:	4618      	mov	r0, r3
 801c2b2:	3718      	adds	r7, #24
 801c2b4:	46bd      	mov	sp, r7
 801c2b6:	bd80      	pop	{r7, pc}
 801c2b8:	2000000c 	.word	0x2000000c
 801c2bc:	40022000 	.word	0x40022000

0801c2c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801c2c0:	b480      	push	{r7}
 801c2c2:	b083      	sub	sp, #12
 801c2c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801c2c6:	2300      	movs	r3, #0
 801c2c8:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c2ca:	4b0b      	ldr	r3, [pc, #44]	; (801c2f8 <HAL_FLASH_Unlock+0x38>)
 801c2cc:	695b      	ldr	r3, [r3, #20]
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	da0b      	bge.n	801c2ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801c2d2:	4b09      	ldr	r3, [pc, #36]	; (801c2f8 <HAL_FLASH_Unlock+0x38>)
 801c2d4:	4a09      	ldr	r2, [pc, #36]	; (801c2fc <HAL_FLASH_Unlock+0x3c>)
 801c2d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801c2d8:	4b07      	ldr	r3, [pc, #28]	; (801c2f8 <HAL_FLASH_Unlock+0x38>)
 801c2da:	4a09      	ldr	r2, [pc, #36]	; (801c300 <HAL_FLASH_Unlock+0x40>)
 801c2dc:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c2de:	4b06      	ldr	r3, [pc, #24]	; (801c2f8 <HAL_FLASH_Unlock+0x38>)
 801c2e0:	695b      	ldr	r3, [r3, #20]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	da01      	bge.n	801c2ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801c2e6:	2301      	movs	r3, #1
 801c2e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801c2ea:	79fb      	ldrb	r3, [r7, #7]
}
 801c2ec:	4618      	mov	r0, r3
 801c2ee:	370c      	adds	r7, #12
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2f6:	4770      	bx	lr
 801c2f8:	40022000 	.word	0x40022000
 801c2fc:	45670123 	.word	0x45670123
 801c300:	cdef89ab 	.word	0xcdef89ab

0801c304 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801c304:	b480      	push	{r7}
 801c306:	b083      	sub	sp, #12
 801c308:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801c30a:	2301      	movs	r3, #1
 801c30c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801c30e:	4b09      	ldr	r3, [pc, #36]	; (801c334 <HAL_FLASH_Lock+0x30>)
 801c310:	695b      	ldr	r3, [r3, #20]
 801c312:	4a08      	ldr	r2, [pc, #32]	; (801c334 <HAL_FLASH_Lock+0x30>)
 801c314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801c318:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801c31a:	4b06      	ldr	r3, [pc, #24]	; (801c334 <HAL_FLASH_Lock+0x30>)
 801c31c:	695b      	ldr	r3, [r3, #20]
 801c31e:	2b00      	cmp	r3, #0
 801c320:	da01      	bge.n	801c326 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801c322:	2300      	movs	r3, #0
 801c324:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801c326:	79fb      	ldrb	r3, [r7, #7]
}
 801c328:	4618      	mov	r0, r3
 801c32a:	370c      	adds	r7, #12
 801c32c:	46bd      	mov	sp, r7
 801c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c332:	4770      	bx	lr
 801c334:	40022000 	.word	0x40022000

0801c338 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b084      	sub	sp, #16
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801c340:	f7fd f98a 	bl	8019658 <HAL_GetTick>
 801c344:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c346:	e009      	b.n	801c35c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801c348:	f7fd f986 	bl	8019658 <HAL_GetTick>
 801c34c:	4602      	mov	r2, r0
 801c34e:	68fb      	ldr	r3, [r7, #12]
 801c350:	1ad3      	subs	r3, r2, r3
 801c352:	687a      	ldr	r2, [r7, #4]
 801c354:	429a      	cmp	r2, r3
 801c356:	d201      	bcs.n	801c35c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801c358:	2303      	movs	r3, #3
 801c35a:	e038      	b.n	801c3ce <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801c35c:	4b1e      	ldr	r3, [pc, #120]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c35e:	691b      	ldr	r3, [r3, #16]
 801c360:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c368:	d0ee      	beq.n	801c348 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801c36a:	4b1b      	ldr	r3, [pc, #108]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c36c:	691a      	ldr	r2, [r3, #16]
 801c36e:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801c372:	4013      	ands	r3, r2
 801c374:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801c376:	68bb      	ldr	r3, [r7, #8]
 801c378:	2b00      	cmp	r3, #0
 801c37a:	d01e      	beq.n	801c3ba <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801c37c:	4b17      	ldr	r3, [pc, #92]	; (801c3dc <FLASH_WaitForLastOperation+0xa4>)
 801c37e:	685a      	ldr	r2, [r3, #4]
 801c380:	68bb      	ldr	r3, [r7, #8]
 801c382:	4313      	orrs	r3, r2
 801c384:	4a15      	ldr	r2, [pc, #84]	; (801c3dc <FLASH_WaitForLastOperation+0xa4>)
 801c386:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801c388:	68bb      	ldr	r3, [r7, #8]
 801c38a:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c38e:	2b00      	cmp	r3, #0
 801c390:	d007      	beq.n	801c3a2 <FLASH_WaitForLastOperation+0x6a>
 801c392:	4b11      	ldr	r3, [pc, #68]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c394:	699a      	ldr	r2, [r3, #24]
 801c396:	68bb      	ldr	r3, [r7, #8]
 801c398:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801c39c:	490e      	ldr	r1, [pc, #56]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c39e:	4313      	orrs	r3, r2
 801c3a0:	618b      	str	r3, [r1, #24]
 801c3a2:	68bb      	ldr	r3, [r7, #8]
 801c3a4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c3a8:	2b00      	cmp	r3, #0
 801c3aa:	d004      	beq.n	801c3b6 <FLASH_WaitForLastOperation+0x7e>
 801c3ac:	4a0a      	ldr	r2, [pc, #40]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c3ae:	68bb      	ldr	r3, [r7, #8]
 801c3b0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801c3b4:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801c3b6:	2301      	movs	r3, #1
 801c3b8:	e009      	b.n	801c3ce <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801c3ba:	4b07      	ldr	r3, [pc, #28]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c3bc:	691b      	ldr	r3, [r3, #16]
 801c3be:	f003 0301 	and.w	r3, r3, #1
 801c3c2:	2b01      	cmp	r3, #1
 801c3c4:	d102      	bne.n	801c3cc <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801c3c6:	4b04      	ldr	r3, [pc, #16]	; (801c3d8 <FLASH_WaitForLastOperation+0xa0>)
 801c3c8:	2201      	movs	r2, #1
 801c3ca:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801c3cc:	2300      	movs	r3, #0
}
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	3710      	adds	r7, #16
 801c3d2:	46bd      	mov	sp, r7
 801c3d4:	bd80      	pop	{r7, pc}
 801c3d6:	bf00      	nop
 801c3d8:	40022000 	.word	0x40022000
 801c3dc:	2000000c 	.word	0x2000000c

0801c3e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801c3e0:	b480      	push	{r7}
 801c3e2:	b085      	sub	sp, #20
 801c3e4:	af00      	add	r7, sp, #0
 801c3e6:	60f8      	str	r0, [r7, #12]
 801c3e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801c3ec:	4b0e      	ldr	r3, [pc, #56]	; (801c428 <FLASH_Program_DoubleWord+0x48>)
 801c3ee:	695b      	ldr	r3, [r3, #20]
 801c3f0:	4a0d      	ldr	r2, [pc, #52]	; (801c428 <FLASH_Program_DoubleWord+0x48>)
 801c3f2:	f043 0301 	orr.w	r3, r3, #1
 801c3f6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801c3f8:	68fb      	ldr	r3, [r7, #12]
 801c3fa:	683a      	ldr	r2, [r7, #0]
 801c3fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801c3fe:	f3bf 8f6f 	isb	sy
}
 801c402:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801c404:	e9d7 0100 	ldrd	r0, r1, [r7]
 801c408:	f04f 0200 	mov.w	r2, #0
 801c40c:	f04f 0300 	mov.w	r3, #0
 801c410:	000a      	movs	r2, r1
 801c412:	2300      	movs	r3, #0
 801c414:	68f9      	ldr	r1, [r7, #12]
 801c416:	3104      	adds	r1, #4
 801c418:	4613      	mov	r3, r2
 801c41a:	600b      	str	r3, [r1, #0]
}
 801c41c:	bf00      	nop
 801c41e:	3714      	adds	r7, #20
 801c420:	46bd      	mov	sp, r7
 801c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c426:	4770      	bx	lr
 801c428:	40022000 	.word	0x40022000

0801c42c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801c42c:	b480      	push	{r7}
 801c42e:	b089      	sub	sp, #36	; 0x24
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
 801c434:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801c436:	2340      	movs	r3, #64	; 0x40
 801c438:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801c43e:	683b      	ldr	r3, [r7, #0]
 801c440:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801c442:	4b14      	ldr	r3, [pc, #80]	; (801c494 <FLASH_Program_Fast+0x68>)
 801c444:	695b      	ldr	r3, [r3, #20]
 801c446:	4a13      	ldr	r2, [pc, #76]	; (801c494 <FLASH_Program_Fast+0x68>)
 801c448:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c44c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801c44e:	f3ef 8310 	mrs	r3, PRIMASK
 801c452:	60fb      	str	r3, [r7, #12]
  return(result);
 801c454:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801c456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801c458:	b672      	cpsid	i
}
 801c45a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801c45c:	697b      	ldr	r3, [r7, #20]
 801c45e:	681a      	ldr	r2, [r3, #0]
 801c460:	69bb      	ldr	r3, [r7, #24]
 801c462:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801c464:	69bb      	ldr	r3, [r7, #24]
 801c466:	3304      	adds	r3, #4
 801c468:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801c46a:	697b      	ldr	r3, [r7, #20]
 801c46c:	3304      	adds	r3, #4
 801c46e:	617b      	str	r3, [r7, #20]
    row_index--;
 801c470:	7ffb      	ldrb	r3, [r7, #31]
 801c472:	3b01      	subs	r3, #1
 801c474:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801c476:	7ffb      	ldrb	r3, [r7, #31]
 801c478:	2b00      	cmp	r3, #0
 801c47a:	d1ef      	bne.n	801c45c <FLASH_Program_Fast+0x30>
 801c47c:	693b      	ldr	r3, [r7, #16]
 801c47e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801c480:	68bb      	ldr	r3, [r7, #8]
 801c482:	f383 8810 	msr	PRIMASK, r3
}
 801c486:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801c488:	bf00      	nop
 801c48a:	3724      	adds	r7, #36	; 0x24
 801c48c:	46bd      	mov	sp, r7
 801c48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c492:	4770      	bx	lr
 801c494:	40022000 	.word	0x40022000

0801c498 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801c498:	b580      	push	{r7, lr}
 801c49a:	b084      	sub	sp, #16
 801c49c:	af00      	add	r7, sp, #0
 801c49e:	6078      	str	r0, [r7, #4]
 801c4a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801c4a2:	4b48      	ldr	r3, [pc, #288]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c4a4:	781b      	ldrb	r3, [r3, #0]
 801c4a6:	2b01      	cmp	r3, #1
 801c4a8:	d101      	bne.n	801c4ae <HAL_FLASHEx_Erase+0x16>
 801c4aa:	2302      	movs	r3, #2
 801c4ac:	e085      	b.n	801c5ba <HAL_FLASHEx_Erase+0x122>
 801c4ae:	4b45      	ldr	r3, [pc, #276]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c4b0:	2201      	movs	r2, #1
 801c4b2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c4b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c4b8:	f7ff ff3e 	bl	801c338 <FLASH_WaitForLastOperation>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801c4c0:	7bfb      	ldrb	r3, [r7, #15]
 801c4c2:	2b00      	cmp	r3, #0
 801c4c4:	d175      	bne.n	801c5b2 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801c4c6:	4b3f      	ldr	r3, [pc, #252]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c4c8:	2200      	movs	r2, #0
 801c4ca:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801c4cc:	4b3e      	ldr	r3, [pc, #248]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c4d4:	2b00      	cmp	r3, #0
 801c4d6:	d013      	beq.n	801c500 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c4d8:	4b3b      	ldr	r3, [pc, #236]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c4e0:	2b00      	cmp	r3, #0
 801c4e2:	d009      	beq.n	801c4f8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801c4e4:	4b38      	ldr	r3, [pc, #224]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	4a37      	ldr	r2, [pc, #220]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c4ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c4ee:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801c4f0:	4b34      	ldr	r3, [pc, #208]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c4f2:	2203      	movs	r2, #3
 801c4f4:	771a      	strb	r2, [r3, #28]
 801c4f6:	e016      	b.n	801c526 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801c4f8:	4b32      	ldr	r3, [pc, #200]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c4fa:	2201      	movs	r2, #1
 801c4fc:	771a      	strb	r2, [r3, #28]
 801c4fe:	e012      	b.n	801c526 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801c500:	4b31      	ldr	r3, [pc, #196]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c508:	2b00      	cmp	r3, #0
 801c50a:	d009      	beq.n	801c520 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801c50c:	4b2e      	ldr	r3, [pc, #184]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c50e:	681b      	ldr	r3, [r3, #0]
 801c510:	4a2d      	ldr	r2, [pc, #180]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c512:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801c516:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801c518:	4b2a      	ldr	r3, [pc, #168]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c51a:	2202      	movs	r2, #2
 801c51c:	771a      	strb	r2, [r3, #28]
 801c51e:	e002      	b.n	801c526 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c520:	4b28      	ldr	r3, [pc, #160]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c522:	2200      	movs	r2, #0
 801c524:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801c526:	687b      	ldr	r3, [r7, #4]
 801c528:	681b      	ldr	r3, [r3, #0]
 801c52a:	2b01      	cmp	r3, #1
 801c52c:	d111      	bne.n	801c552 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	685b      	ldr	r3, [r3, #4]
 801c532:	4618      	mov	r0, r3
 801c534:	f000 f84a 	bl	801c5cc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c538:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c53c:	f7ff fefc 	bl	801c338 <FLASH_WaitForLastOperation>
 801c540:	4603      	mov	r3, r0
 801c542:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801c544:	4b20      	ldr	r3, [pc, #128]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c546:	695b      	ldr	r3, [r3, #20]
 801c548:	4a1f      	ldr	r2, [pc, #124]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c54a:	f023 0304 	bic.w	r3, r3, #4
 801c54e:	6153      	str	r3, [r2, #20]
 801c550:	e02d      	b.n	801c5ae <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801c552:	683b      	ldr	r3, [r7, #0]
 801c554:	f04f 32ff 	mov.w	r2, #4294967295
 801c558:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	689b      	ldr	r3, [r3, #8]
 801c55e:	60bb      	str	r3, [r7, #8]
 801c560:	e01d      	b.n	801c59e <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	685b      	ldr	r3, [r3, #4]
 801c566:	4619      	mov	r1, r3
 801c568:	68b8      	ldr	r0, [r7, #8]
 801c56a:	f000 f84d 	bl	801c608 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801c56e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801c572:	f7ff fee1 	bl	801c338 <FLASH_WaitForLastOperation>
 801c576:	4603      	mov	r3, r0
 801c578:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801c57a:	4b13      	ldr	r3, [pc, #76]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c57c:	695b      	ldr	r3, [r3, #20]
 801c57e:	4a12      	ldr	r2, [pc, #72]	; (801c5c8 <HAL_FLASHEx_Erase+0x130>)
 801c580:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801c584:	f023 0302 	bic.w	r3, r3, #2
 801c588:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801c58a:	7bfb      	ldrb	r3, [r7, #15]
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d003      	beq.n	801c598 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801c590:	683b      	ldr	r3, [r7, #0]
 801c592:	68ba      	ldr	r2, [r7, #8]
 801c594:	601a      	str	r2, [r3, #0]
          break;
 801c596:	e00a      	b.n	801c5ae <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801c598:	68bb      	ldr	r3, [r7, #8]
 801c59a:	3301      	adds	r3, #1
 801c59c:	60bb      	str	r3, [r7, #8]
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	689a      	ldr	r2, [r3, #8]
 801c5a2:	687b      	ldr	r3, [r7, #4]
 801c5a4:	68db      	ldr	r3, [r3, #12]
 801c5a6:	4413      	add	r3, r2
 801c5a8:	68ba      	ldr	r2, [r7, #8]
 801c5aa:	429a      	cmp	r2, r3
 801c5ac:	d3d9      	bcc.n	801c562 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801c5ae:	f000 f84f 	bl	801c650 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801c5b2:	4b04      	ldr	r3, [pc, #16]	; (801c5c4 <HAL_FLASHEx_Erase+0x12c>)
 801c5b4:	2200      	movs	r2, #0
 801c5b6:	701a      	strb	r2, [r3, #0]

  return status;
 801c5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5ba:	4618      	mov	r0, r3
 801c5bc:	3710      	adds	r7, #16
 801c5be:	46bd      	mov	sp, r7
 801c5c0:	bd80      	pop	{r7, pc}
 801c5c2:	bf00      	nop
 801c5c4:	2000000c 	.word	0x2000000c
 801c5c8:	40022000 	.word	0x40022000

0801c5cc <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801c5cc:	b480      	push	{r7}
 801c5ce:	b083      	sub	sp, #12
 801c5d0:	af00      	add	r7, sp, #0
 801c5d2:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801c5d4:	687b      	ldr	r3, [r7, #4]
 801c5d6:	f003 0301 	and.w	r3, r3, #1
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d005      	beq.n	801c5ea <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801c5de:	4b09      	ldr	r3, [pc, #36]	; (801c604 <FLASH_MassErase+0x38>)
 801c5e0:	695b      	ldr	r3, [r3, #20]
 801c5e2:	4a08      	ldr	r2, [pc, #32]	; (801c604 <FLASH_MassErase+0x38>)
 801c5e4:	f043 0304 	orr.w	r3, r3, #4
 801c5e8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c5ea:	4b06      	ldr	r3, [pc, #24]	; (801c604 <FLASH_MassErase+0x38>)
 801c5ec:	695b      	ldr	r3, [r3, #20]
 801c5ee:	4a05      	ldr	r2, [pc, #20]	; (801c604 <FLASH_MassErase+0x38>)
 801c5f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c5f4:	6153      	str	r3, [r2, #20]
}
 801c5f6:	bf00      	nop
 801c5f8:	370c      	adds	r7, #12
 801c5fa:	46bd      	mov	sp, r7
 801c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c600:	4770      	bx	lr
 801c602:	bf00      	nop
 801c604:	40022000 	.word	0x40022000

0801c608 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801c608:	b480      	push	{r7}
 801c60a:	b083      	sub	sp, #12
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
 801c610:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801c612:	4b0e      	ldr	r3, [pc, #56]	; (801c64c <FLASH_PageErase+0x44>)
 801c614:	695b      	ldr	r3, [r3, #20]
 801c616:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	00db      	lsls	r3, r3, #3
 801c61e:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801c622:	490a      	ldr	r1, [pc, #40]	; (801c64c <FLASH_PageErase+0x44>)
 801c624:	4313      	orrs	r3, r2
 801c626:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801c628:	4b08      	ldr	r3, [pc, #32]	; (801c64c <FLASH_PageErase+0x44>)
 801c62a:	695b      	ldr	r3, [r3, #20]
 801c62c:	4a07      	ldr	r2, [pc, #28]	; (801c64c <FLASH_PageErase+0x44>)
 801c62e:	f043 0302 	orr.w	r3, r3, #2
 801c632:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801c634:	4b05      	ldr	r3, [pc, #20]	; (801c64c <FLASH_PageErase+0x44>)
 801c636:	695b      	ldr	r3, [r3, #20]
 801c638:	4a04      	ldr	r2, [pc, #16]	; (801c64c <FLASH_PageErase+0x44>)
 801c63a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c63e:	6153      	str	r3, [r2, #20]
}
 801c640:	bf00      	nop
 801c642:	370c      	adds	r7, #12
 801c644:	46bd      	mov	sp, r7
 801c646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c64a:	4770      	bx	lr
 801c64c:	40022000 	.word	0x40022000

0801c650 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801c650:	b480      	push	{r7}
 801c652:	b083      	sub	sp, #12
 801c654:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801c656:	4b21      	ldr	r3, [pc, #132]	; (801c6dc <FLASH_FlushCaches+0x8c>)
 801c658:	7f1b      	ldrb	r3, [r3, #28]
 801c65a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801c65c:	79fb      	ldrb	r3, [r7, #7]
 801c65e:	2b01      	cmp	r3, #1
 801c660:	d002      	beq.n	801c668 <FLASH_FlushCaches+0x18>
 801c662:	79fb      	ldrb	r3, [r7, #7]
 801c664:	2b03      	cmp	r3, #3
 801c666:	d117      	bne.n	801c698 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801c668:	4b1d      	ldr	r3, [pc, #116]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c66a:	681b      	ldr	r3, [r3, #0]
 801c66c:	4a1c      	ldr	r2, [pc, #112]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c66e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801c672:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801c674:	4b1a      	ldr	r3, [pc, #104]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c676:	681b      	ldr	r3, [r3, #0]
 801c678:	4a19      	ldr	r2, [pc, #100]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c67a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801c67e:	6013      	str	r3, [r2, #0]
 801c680:	4b17      	ldr	r3, [pc, #92]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	4a16      	ldr	r2, [pc, #88]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c68a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801c68c:	4b14      	ldr	r3, [pc, #80]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c68e:	681b      	ldr	r3, [r3, #0]
 801c690:	4a13      	ldr	r2, [pc, #76]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c696:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801c698:	79fb      	ldrb	r3, [r7, #7]
 801c69a:	2b02      	cmp	r3, #2
 801c69c:	d002      	beq.n	801c6a4 <FLASH_FlushCaches+0x54>
 801c69e:	79fb      	ldrb	r3, [r7, #7]
 801c6a0:	2b03      	cmp	r3, #3
 801c6a2:	d111      	bne.n	801c6c8 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801c6a4:	4b0e      	ldr	r3, [pc, #56]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	4a0d      	ldr	r2, [pc, #52]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801c6ae:	6013      	str	r3, [r2, #0]
 801c6b0:	4b0b      	ldr	r3, [pc, #44]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6b2:	681b      	ldr	r3, [r3, #0]
 801c6b4:	4a0a      	ldr	r2, [pc, #40]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c6ba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801c6bc:	4b08      	ldr	r3, [pc, #32]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6be:	681b      	ldr	r3, [r3, #0]
 801c6c0:	4a07      	ldr	r2, [pc, #28]	; (801c6e0 <FLASH_FlushCaches+0x90>)
 801c6c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c6c6:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801c6c8:	4b04      	ldr	r3, [pc, #16]	; (801c6dc <FLASH_FlushCaches+0x8c>)
 801c6ca:	2200      	movs	r2, #0
 801c6cc:	771a      	strb	r2, [r3, #28]
}
 801c6ce:	bf00      	nop
 801c6d0:	370c      	adds	r7, #12
 801c6d2:	46bd      	mov	sp, r7
 801c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d8:	4770      	bx	lr
 801c6da:	bf00      	nop
 801c6dc:	2000000c 	.word	0x2000000c
 801c6e0:	40022000 	.word	0x40022000

0801c6e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c6e4:	b480      	push	{r7}
 801c6e6:	b087      	sub	sp, #28
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c6f2:	e15a      	b.n	801c9aa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c6f4:	683b      	ldr	r3, [r7, #0]
 801c6f6:	681a      	ldr	r2, [r3, #0]
 801c6f8:	2101      	movs	r1, #1
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	fa01 f303 	lsl.w	r3, r1, r3
 801c700:	4013      	ands	r3, r2
 801c702:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	2b00      	cmp	r3, #0
 801c708:	f000 814c 	beq.w	801c9a4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c70c:	683b      	ldr	r3, [r7, #0]
 801c70e:	685b      	ldr	r3, [r3, #4]
 801c710:	f003 0303 	and.w	r3, r3, #3
 801c714:	2b01      	cmp	r3, #1
 801c716:	d005      	beq.n	801c724 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c718:	683b      	ldr	r3, [r7, #0]
 801c71a:	685b      	ldr	r3, [r3, #4]
 801c71c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801c720:	2b02      	cmp	r3, #2
 801c722:	d130      	bne.n	801c786 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	689b      	ldr	r3, [r3, #8]
 801c728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c72a:	697b      	ldr	r3, [r7, #20]
 801c72c:	005b      	lsls	r3, r3, #1
 801c72e:	2203      	movs	r2, #3
 801c730:	fa02 f303 	lsl.w	r3, r2, r3
 801c734:	43db      	mvns	r3, r3
 801c736:	693a      	ldr	r2, [r7, #16]
 801c738:	4013      	ands	r3, r2
 801c73a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c73c:	683b      	ldr	r3, [r7, #0]
 801c73e:	68da      	ldr	r2, [r3, #12]
 801c740:	697b      	ldr	r3, [r7, #20]
 801c742:	005b      	lsls	r3, r3, #1
 801c744:	fa02 f303 	lsl.w	r3, r2, r3
 801c748:	693a      	ldr	r2, [r7, #16]
 801c74a:	4313      	orrs	r3, r2
 801c74c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	693a      	ldr	r2, [r7, #16]
 801c752:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	685b      	ldr	r3, [r3, #4]
 801c758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c75a:	2201      	movs	r2, #1
 801c75c:	697b      	ldr	r3, [r7, #20]
 801c75e:	fa02 f303 	lsl.w	r3, r2, r3
 801c762:	43db      	mvns	r3, r3
 801c764:	693a      	ldr	r2, [r7, #16]
 801c766:	4013      	ands	r3, r2
 801c768:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c76a:	683b      	ldr	r3, [r7, #0]
 801c76c:	685b      	ldr	r3, [r3, #4]
 801c76e:	091b      	lsrs	r3, r3, #4
 801c770:	f003 0201 	and.w	r2, r3, #1
 801c774:	697b      	ldr	r3, [r7, #20]
 801c776:	fa02 f303 	lsl.w	r3, r2, r3
 801c77a:	693a      	ldr	r2, [r7, #16]
 801c77c:	4313      	orrs	r3, r2
 801c77e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801c780:	687b      	ldr	r3, [r7, #4]
 801c782:	693a      	ldr	r2, [r7, #16]
 801c784:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c786:	683b      	ldr	r3, [r7, #0]
 801c788:	685b      	ldr	r3, [r3, #4]
 801c78a:	f003 0303 	and.w	r3, r3, #3
 801c78e:	2b03      	cmp	r3, #3
 801c790:	d017      	beq.n	801c7c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	68db      	ldr	r3, [r3, #12]
 801c796:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c798:	697b      	ldr	r3, [r7, #20]
 801c79a:	005b      	lsls	r3, r3, #1
 801c79c:	2203      	movs	r2, #3
 801c79e:	fa02 f303 	lsl.w	r3, r2, r3
 801c7a2:	43db      	mvns	r3, r3
 801c7a4:	693a      	ldr	r2, [r7, #16]
 801c7a6:	4013      	ands	r3, r2
 801c7a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c7aa:	683b      	ldr	r3, [r7, #0]
 801c7ac:	689a      	ldr	r2, [r3, #8]
 801c7ae:	697b      	ldr	r3, [r7, #20]
 801c7b0:	005b      	lsls	r3, r3, #1
 801c7b2:	fa02 f303 	lsl.w	r3, r2, r3
 801c7b6:	693a      	ldr	r2, [r7, #16]
 801c7b8:	4313      	orrs	r3, r2
 801c7ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	693a      	ldr	r2, [r7, #16]
 801c7c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c7c2:	683b      	ldr	r3, [r7, #0]
 801c7c4:	685b      	ldr	r3, [r3, #4]
 801c7c6:	f003 0303 	and.w	r3, r3, #3
 801c7ca:	2b02      	cmp	r3, #2
 801c7cc:	d123      	bne.n	801c816 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c7ce:	697b      	ldr	r3, [r7, #20]
 801c7d0:	08da      	lsrs	r2, r3, #3
 801c7d2:	687b      	ldr	r3, [r7, #4]
 801c7d4:	3208      	adds	r2, #8
 801c7d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c7da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c7dc:	697b      	ldr	r3, [r7, #20]
 801c7de:	f003 0307 	and.w	r3, r3, #7
 801c7e2:	009b      	lsls	r3, r3, #2
 801c7e4:	220f      	movs	r2, #15
 801c7e6:	fa02 f303 	lsl.w	r3, r2, r3
 801c7ea:	43db      	mvns	r3, r3
 801c7ec:	693a      	ldr	r2, [r7, #16]
 801c7ee:	4013      	ands	r3, r2
 801c7f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c7f2:	683b      	ldr	r3, [r7, #0]
 801c7f4:	691a      	ldr	r2, [r3, #16]
 801c7f6:	697b      	ldr	r3, [r7, #20]
 801c7f8:	f003 0307 	and.w	r3, r3, #7
 801c7fc:	009b      	lsls	r3, r3, #2
 801c7fe:	fa02 f303 	lsl.w	r3, r2, r3
 801c802:	693a      	ldr	r2, [r7, #16]
 801c804:	4313      	orrs	r3, r2
 801c806:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801c808:	697b      	ldr	r3, [r7, #20]
 801c80a:	08da      	lsrs	r2, r3, #3
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	3208      	adds	r2, #8
 801c810:	6939      	ldr	r1, [r7, #16]
 801c812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	681b      	ldr	r3, [r3, #0]
 801c81a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c81c:	697b      	ldr	r3, [r7, #20]
 801c81e:	005b      	lsls	r3, r3, #1
 801c820:	2203      	movs	r2, #3
 801c822:	fa02 f303 	lsl.w	r3, r2, r3
 801c826:	43db      	mvns	r3, r3
 801c828:	693a      	ldr	r2, [r7, #16]
 801c82a:	4013      	ands	r3, r2
 801c82c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c82e:	683b      	ldr	r3, [r7, #0]
 801c830:	685b      	ldr	r3, [r3, #4]
 801c832:	f003 0203 	and.w	r2, r3, #3
 801c836:	697b      	ldr	r3, [r7, #20]
 801c838:	005b      	lsls	r3, r3, #1
 801c83a:	fa02 f303 	lsl.w	r3, r2, r3
 801c83e:	693a      	ldr	r2, [r7, #16]
 801c840:	4313      	orrs	r3, r2
 801c842:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	693a      	ldr	r2, [r7, #16]
 801c848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801c84a:	683b      	ldr	r3, [r7, #0]
 801c84c:	685b      	ldr	r3, [r3, #4]
 801c84e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801c852:	2b00      	cmp	r3, #0
 801c854:	f000 80a6 	beq.w	801c9a4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c858:	4b5b      	ldr	r3, [pc, #364]	; (801c9c8 <HAL_GPIO_Init+0x2e4>)
 801c85a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c85c:	4a5a      	ldr	r2, [pc, #360]	; (801c9c8 <HAL_GPIO_Init+0x2e4>)
 801c85e:	f043 0301 	orr.w	r3, r3, #1
 801c862:	6613      	str	r3, [r2, #96]	; 0x60
 801c864:	4b58      	ldr	r3, [pc, #352]	; (801c9c8 <HAL_GPIO_Init+0x2e4>)
 801c866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c868:	f003 0301 	and.w	r3, r3, #1
 801c86c:	60bb      	str	r3, [r7, #8]
 801c86e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c870:	4a56      	ldr	r2, [pc, #344]	; (801c9cc <HAL_GPIO_Init+0x2e8>)
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	089b      	lsrs	r3, r3, #2
 801c876:	3302      	adds	r3, #2
 801c878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c87c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c87e:	697b      	ldr	r3, [r7, #20]
 801c880:	f003 0303 	and.w	r3, r3, #3
 801c884:	009b      	lsls	r3, r3, #2
 801c886:	220f      	movs	r2, #15
 801c888:	fa02 f303 	lsl.w	r3, r2, r3
 801c88c:	43db      	mvns	r3, r3
 801c88e:	693a      	ldr	r2, [r7, #16]
 801c890:	4013      	ands	r3, r2
 801c892:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801c89a:	d01f      	beq.n	801c8dc <HAL_GPIO_Init+0x1f8>
 801c89c:	687b      	ldr	r3, [r7, #4]
 801c89e:	4a4c      	ldr	r2, [pc, #304]	; (801c9d0 <HAL_GPIO_Init+0x2ec>)
 801c8a0:	4293      	cmp	r3, r2
 801c8a2:	d019      	beq.n	801c8d8 <HAL_GPIO_Init+0x1f4>
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	4a4b      	ldr	r2, [pc, #300]	; (801c9d4 <HAL_GPIO_Init+0x2f0>)
 801c8a8:	4293      	cmp	r3, r2
 801c8aa:	d013      	beq.n	801c8d4 <HAL_GPIO_Init+0x1f0>
 801c8ac:	687b      	ldr	r3, [r7, #4]
 801c8ae:	4a4a      	ldr	r2, [pc, #296]	; (801c9d8 <HAL_GPIO_Init+0x2f4>)
 801c8b0:	4293      	cmp	r3, r2
 801c8b2:	d00d      	beq.n	801c8d0 <HAL_GPIO_Init+0x1ec>
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	4a49      	ldr	r2, [pc, #292]	; (801c9dc <HAL_GPIO_Init+0x2f8>)
 801c8b8:	4293      	cmp	r3, r2
 801c8ba:	d007      	beq.n	801c8cc <HAL_GPIO_Init+0x1e8>
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	4a48      	ldr	r2, [pc, #288]	; (801c9e0 <HAL_GPIO_Init+0x2fc>)
 801c8c0:	4293      	cmp	r3, r2
 801c8c2:	d101      	bne.n	801c8c8 <HAL_GPIO_Init+0x1e4>
 801c8c4:	2305      	movs	r3, #5
 801c8c6:	e00a      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8c8:	2306      	movs	r3, #6
 801c8ca:	e008      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8cc:	2304      	movs	r3, #4
 801c8ce:	e006      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8d0:	2303      	movs	r3, #3
 801c8d2:	e004      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8d4:	2302      	movs	r3, #2
 801c8d6:	e002      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8d8:	2301      	movs	r3, #1
 801c8da:	e000      	b.n	801c8de <HAL_GPIO_Init+0x1fa>
 801c8dc:	2300      	movs	r3, #0
 801c8de:	697a      	ldr	r2, [r7, #20]
 801c8e0:	f002 0203 	and.w	r2, r2, #3
 801c8e4:	0092      	lsls	r2, r2, #2
 801c8e6:	4093      	lsls	r3, r2
 801c8e8:	693a      	ldr	r2, [r7, #16]
 801c8ea:	4313      	orrs	r3, r2
 801c8ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c8ee:	4937      	ldr	r1, [pc, #220]	; (801c9cc <HAL_GPIO_Init+0x2e8>)
 801c8f0:	697b      	ldr	r3, [r7, #20]
 801c8f2:	089b      	lsrs	r3, r3, #2
 801c8f4:	3302      	adds	r3, #2
 801c8f6:	693a      	ldr	r2, [r7, #16]
 801c8f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c8fc:	4b39      	ldr	r3, [pc, #228]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c8fe:	689b      	ldr	r3, [r3, #8]
 801c900:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c902:	68fb      	ldr	r3, [r7, #12]
 801c904:	43db      	mvns	r3, r3
 801c906:	693a      	ldr	r2, [r7, #16]
 801c908:	4013      	ands	r3, r2
 801c90a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c90c:	683b      	ldr	r3, [r7, #0]
 801c90e:	685b      	ldr	r3, [r3, #4]
 801c910:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801c914:	2b00      	cmp	r3, #0
 801c916:	d003      	beq.n	801c920 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801c918:	693a      	ldr	r2, [r7, #16]
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	4313      	orrs	r3, r2
 801c91e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801c920:	4a30      	ldr	r2, [pc, #192]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c922:	693b      	ldr	r3, [r7, #16]
 801c924:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801c926:	4b2f      	ldr	r3, [pc, #188]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c928:	68db      	ldr	r3, [r3, #12]
 801c92a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	43db      	mvns	r3, r3
 801c930:	693a      	ldr	r2, [r7, #16]
 801c932:	4013      	ands	r3, r2
 801c934:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c936:	683b      	ldr	r3, [r7, #0]
 801c938:	685b      	ldr	r3, [r3, #4]
 801c93a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d003      	beq.n	801c94a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801c942:	693a      	ldr	r2, [r7, #16]
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	4313      	orrs	r3, r2
 801c948:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801c94a:	4a26      	ldr	r2, [pc, #152]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c94c:	693b      	ldr	r3, [r7, #16]
 801c94e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801c950:	4b24      	ldr	r3, [pc, #144]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c952:	685b      	ldr	r3, [r3, #4]
 801c954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	43db      	mvns	r3, r3
 801c95a:	693a      	ldr	r2, [r7, #16]
 801c95c:	4013      	ands	r3, r2
 801c95e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c960:	683b      	ldr	r3, [r7, #0]
 801c962:	685b      	ldr	r3, [r3, #4]
 801c964:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c968:	2b00      	cmp	r3, #0
 801c96a:	d003      	beq.n	801c974 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801c96c:	693a      	ldr	r2, [r7, #16]
 801c96e:	68fb      	ldr	r3, [r7, #12]
 801c970:	4313      	orrs	r3, r2
 801c972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801c974:	4a1b      	ldr	r2, [pc, #108]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c976:	693b      	ldr	r3, [r7, #16]
 801c978:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801c97a:	4b1a      	ldr	r3, [pc, #104]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c97c:	681b      	ldr	r3, [r3, #0]
 801c97e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801c980:	68fb      	ldr	r3, [r7, #12]
 801c982:	43db      	mvns	r3, r3
 801c984:	693a      	ldr	r2, [r7, #16]
 801c986:	4013      	ands	r3, r2
 801c988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c98a:	683b      	ldr	r3, [r7, #0]
 801c98c:	685b      	ldr	r3, [r3, #4]
 801c98e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801c992:	2b00      	cmp	r3, #0
 801c994:	d003      	beq.n	801c99e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801c996:	693a      	ldr	r2, [r7, #16]
 801c998:	68fb      	ldr	r3, [r7, #12]
 801c99a:	4313      	orrs	r3, r2
 801c99c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801c99e:	4a11      	ldr	r2, [pc, #68]	; (801c9e4 <HAL_GPIO_Init+0x300>)
 801c9a0:	693b      	ldr	r3, [r7, #16]
 801c9a2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801c9a4:	697b      	ldr	r3, [r7, #20]
 801c9a6:	3301      	adds	r3, #1
 801c9a8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	681a      	ldr	r2, [r3, #0]
 801c9ae:	697b      	ldr	r3, [r7, #20]
 801c9b0:	fa22 f303 	lsr.w	r3, r2, r3
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	f47f ae9d 	bne.w	801c6f4 <HAL_GPIO_Init+0x10>
  }
}
 801c9ba:	bf00      	nop
 801c9bc:	bf00      	nop
 801c9be:	371c      	adds	r7, #28
 801c9c0:	46bd      	mov	sp, r7
 801c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9c6:	4770      	bx	lr
 801c9c8:	40021000 	.word	0x40021000
 801c9cc:	40010000 	.word	0x40010000
 801c9d0:	48000400 	.word	0x48000400
 801c9d4:	48000800 	.word	0x48000800
 801c9d8:	48000c00 	.word	0x48000c00
 801c9dc:	48001000 	.word	0x48001000
 801c9e0:	48001400 	.word	0x48001400
 801c9e4:	40010400 	.word	0x40010400

0801c9e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c9e8:	b480      	push	{r7}
 801c9ea:	b083      	sub	sp, #12
 801c9ec:	af00      	add	r7, sp, #0
 801c9ee:	6078      	str	r0, [r7, #4]
 801c9f0:	460b      	mov	r3, r1
 801c9f2:	807b      	strh	r3, [r7, #2]
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c9f8:	787b      	ldrb	r3, [r7, #1]
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d003      	beq.n	801ca06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801c9fe:	887a      	ldrh	r2, [r7, #2]
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801ca04:	e002      	b.n	801ca0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801ca06:	887a      	ldrh	r2, [r7, #2]
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 801ca0c:	bf00      	nop
 801ca0e:	370c      	adds	r7, #12
 801ca10:	46bd      	mov	sp, r7
 801ca12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca16:	4770      	bx	lr

0801ca18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801ca18:	b480      	push	{r7}
 801ca1a:	b085      	sub	sp, #20
 801ca1c:	af00      	add	r7, sp, #0
 801ca1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d141      	bne.n	801caaa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801ca26:	4b4b      	ldr	r3, [pc, #300]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801ca2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca32:	d131      	bne.n	801ca98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ca34:	4b47      	ldr	r3, [pc, #284]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca3a:	4a46      	ldr	r2, [pc, #280]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ca40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801ca44:	4b43      	ldr	r3, [pc, #268]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801ca4c:	4a41      	ldr	r2, [pc, #260]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801ca52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801ca54:	4b40      	ldr	r3, [pc, #256]	; (801cb58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801ca56:	681b      	ldr	r3, [r3, #0]
 801ca58:	2232      	movs	r2, #50	; 0x32
 801ca5a:	fb02 f303 	mul.w	r3, r2, r3
 801ca5e:	4a3f      	ldr	r2, [pc, #252]	; (801cb5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 801ca60:	fba2 2303 	umull	r2, r3, r2, r3
 801ca64:	0c9b      	lsrs	r3, r3, #18
 801ca66:	3301      	adds	r3, #1
 801ca68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ca6a:	e002      	b.n	801ca72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801ca6c:	68fb      	ldr	r3, [r7, #12]
 801ca6e:	3b01      	subs	r3, #1
 801ca70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801ca72:	4b38      	ldr	r3, [pc, #224]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca74:	695b      	ldr	r3, [r3, #20]
 801ca76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ca7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca7e:	d102      	bne.n	801ca86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 801ca80:	68fb      	ldr	r3, [r7, #12]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	d1f2      	bne.n	801ca6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801ca86:	4b33      	ldr	r3, [pc, #204]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca88:	695b      	ldr	r3, [r3, #20]
 801ca8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ca8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca92:	d158      	bne.n	801cb46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801ca94:	2303      	movs	r3, #3
 801ca96:	e057      	b.n	801cb48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801ca98:	4b2e      	ldr	r3, [pc, #184]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801ca9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca9e:	4a2d      	ldr	r2, [pc, #180]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801caa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801caa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801caa8:	e04d      	b.n	801cb46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cab0:	d141      	bne.n	801cb36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801cab2:	4b28      	ldr	r3, [pc, #160]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cab4:	681b      	ldr	r3, [r3, #0]
 801cab6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801caba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cabe:	d131      	bne.n	801cb24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cac0:	4b24      	ldr	r3, [pc, #144]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cac6:	4a23      	ldr	r2, [pc, #140]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cacc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801cad0:	4b20      	ldr	r3, [pc, #128]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cad2:	681b      	ldr	r3, [r3, #0]
 801cad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cad8:	4a1e      	ldr	r2, [pc, #120]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cada:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801cade:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801cae0:	4b1d      	ldr	r3, [pc, #116]	; (801cb58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 801cae2:	681b      	ldr	r3, [r3, #0]
 801cae4:	2232      	movs	r2, #50	; 0x32
 801cae6:	fb02 f303 	mul.w	r3, r2, r3
 801caea:	4a1c      	ldr	r2, [pc, #112]	; (801cb5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 801caec:	fba2 2303 	umull	r2, r3, r2, r3
 801caf0:	0c9b      	lsrs	r3, r3, #18
 801caf2:	3301      	adds	r3, #1
 801caf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801caf6:	e002      	b.n	801cafe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801caf8:	68fb      	ldr	r3, [r7, #12]
 801cafa:	3b01      	subs	r3, #1
 801cafc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801cafe:	4b15      	ldr	r3, [pc, #84]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb00:	695b      	ldr	r3, [r3, #20]
 801cb02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb0a:	d102      	bne.n	801cb12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d1f2      	bne.n	801caf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801cb12:	4b10      	ldr	r3, [pc, #64]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb14:	695b      	ldr	r3, [r3, #20]
 801cb16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cb1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801cb1e:	d112      	bne.n	801cb46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801cb20:	2303      	movs	r3, #3
 801cb22:	e011      	b.n	801cb48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801cb24:	4b0b      	ldr	r3, [pc, #44]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb2a:	4a0a      	ldr	r2, [pc, #40]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cb30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801cb34:	e007      	b.n	801cb46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801cb36:	4b07      	ldr	r3, [pc, #28]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb38:	681b      	ldr	r3, [r3, #0]
 801cb3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801cb3e:	4a05      	ldr	r2, [pc, #20]	; (801cb54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801cb40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801cb44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801cb46:	2300      	movs	r3, #0
}
 801cb48:	4618      	mov	r0, r3
 801cb4a:	3714      	adds	r7, #20
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb52:	4770      	bx	lr
 801cb54:	40007000 	.word	0x40007000
 801cb58:	20000000 	.word	0x20000000
 801cb5c:	431bde83 	.word	0x431bde83

0801cb60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801cb60:	b480      	push	{r7}
 801cb62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801cb64:	4b05      	ldr	r3, [pc, #20]	; (801cb7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cb66:	689b      	ldr	r3, [r3, #8]
 801cb68:	4a04      	ldr	r2, [pc, #16]	; (801cb7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801cb6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801cb6e:	6093      	str	r3, [r2, #8]
}
 801cb70:	bf00      	nop
 801cb72:	46bd      	mov	sp, r7
 801cb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb78:	4770      	bx	lr
 801cb7a:	bf00      	nop
 801cb7c:	40007000 	.word	0x40007000

0801cb80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cb80:	b580      	push	{r7, lr}
 801cb82:	b088      	sub	sp, #32
 801cb84:	af00      	add	r7, sp, #0
 801cb86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	2b00      	cmp	r3, #0
 801cb8c:	d101      	bne.n	801cb92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801cb8e:	2301      	movs	r3, #1
 801cb90:	e306      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	681b      	ldr	r3, [r3, #0]
 801cb96:	f003 0301 	and.w	r3, r3, #1
 801cb9a:	2b00      	cmp	r3, #0
 801cb9c:	d075      	beq.n	801cc8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cb9e:	4b97      	ldr	r3, [pc, #604]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cba0:	689b      	ldr	r3, [r3, #8]
 801cba2:	f003 030c 	and.w	r3, r3, #12
 801cba6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cba8:	4b94      	ldr	r3, [pc, #592]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cbaa:	68db      	ldr	r3, [r3, #12]
 801cbac:	f003 0303 	and.w	r3, r3, #3
 801cbb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801cbb2:	69bb      	ldr	r3, [r7, #24]
 801cbb4:	2b0c      	cmp	r3, #12
 801cbb6:	d102      	bne.n	801cbbe <HAL_RCC_OscConfig+0x3e>
 801cbb8:	697b      	ldr	r3, [r7, #20]
 801cbba:	2b03      	cmp	r3, #3
 801cbbc:	d002      	beq.n	801cbc4 <HAL_RCC_OscConfig+0x44>
 801cbbe:	69bb      	ldr	r3, [r7, #24]
 801cbc0:	2b08      	cmp	r3, #8
 801cbc2:	d10b      	bne.n	801cbdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cbc4:	4b8d      	ldr	r3, [pc, #564]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cbc6:	681b      	ldr	r3, [r3, #0]
 801cbc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d05b      	beq.n	801cc88 <HAL_RCC_OscConfig+0x108>
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	685b      	ldr	r3, [r3, #4]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d157      	bne.n	801cc88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801cbd8:	2301      	movs	r3, #1
 801cbda:	e2e1      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	685b      	ldr	r3, [r3, #4]
 801cbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbe4:	d106      	bne.n	801cbf4 <HAL_RCC_OscConfig+0x74>
 801cbe6:	4b85      	ldr	r3, [pc, #532]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	4a84      	ldr	r2, [pc, #528]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cbec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cbf0:	6013      	str	r3, [r2, #0]
 801cbf2:	e01d      	b.n	801cc30 <HAL_RCC_OscConfig+0xb0>
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	685b      	ldr	r3, [r3, #4]
 801cbf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801cbfc:	d10c      	bne.n	801cc18 <HAL_RCC_OscConfig+0x98>
 801cbfe:	4b7f      	ldr	r3, [pc, #508]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc00:	681b      	ldr	r3, [r3, #0]
 801cc02:	4a7e      	ldr	r2, [pc, #504]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801cc08:	6013      	str	r3, [r2, #0]
 801cc0a:	4b7c      	ldr	r3, [pc, #496]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	4a7b      	ldr	r2, [pc, #492]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc14:	6013      	str	r3, [r2, #0]
 801cc16:	e00b      	b.n	801cc30 <HAL_RCC_OscConfig+0xb0>
 801cc18:	4b78      	ldr	r3, [pc, #480]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	4a77      	ldr	r2, [pc, #476]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cc22:	6013      	str	r3, [r2, #0]
 801cc24:	4b75      	ldr	r3, [pc, #468]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc26:	681b      	ldr	r3, [r3, #0]
 801cc28:	4a74      	ldr	r2, [pc, #464]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801cc2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	685b      	ldr	r3, [r3, #4]
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	d013      	beq.n	801cc60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc38:	f7fc fd0e 	bl	8019658 <HAL_GetTick>
 801cc3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cc3e:	e008      	b.n	801cc52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc40:	f7fc fd0a 	bl	8019658 <HAL_GetTick>
 801cc44:	4602      	mov	r2, r0
 801cc46:	693b      	ldr	r3, [r7, #16]
 801cc48:	1ad3      	subs	r3, r2, r3
 801cc4a:	2b64      	cmp	r3, #100	; 0x64
 801cc4c:	d901      	bls.n	801cc52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801cc4e:	2303      	movs	r3, #3
 801cc50:	e2a6      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801cc52:	4b6a      	ldr	r3, [pc, #424]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc54:	681b      	ldr	r3, [r3, #0]
 801cc56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc5a:	2b00      	cmp	r3, #0
 801cc5c:	d0f0      	beq.n	801cc40 <HAL_RCC_OscConfig+0xc0>
 801cc5e:	e014      	b.n	801cc8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc60:	f7fc fcfa 	bl	8019658 <HAL_GetTick>
 801cc64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801cc66:	e008      	b.n	801cc7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801cc68:	f7fc fcf6 	bl	8019658 <HAL_GetTick>
 801cc6c:	4602      	mov	r2, r0
 801cc6e:	693b      	ldr	r3, [r7, #16]
 801cc70:	1ad3      	subs	r3, r2, r3
 801cc72:	2b64      	cmp	r3, #100	; 0x64
 801cc74:	d901      	bls.n	801cc7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801cc76:	2303      	movs	r3, #3
 801cc78:	e292      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801cc7a:	4b60      	ldr	r3, [pc, #384]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc7c:	681b      	ldr	r3, [r3, #0]
 801cc7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cc82:	2b00      	cmp	r3, #0
 801cc84:	d1f0      	bne.n	801cc68 <HAL_RCC_OscConfig+0xe8>
 801cc86:	e000      	b.n	801cc8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cc88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f003 0302 	and.w	r3, r3, #2
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d075      	beq.n	801cd82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cc96:	4b59      	ldr	r3, [pc, #356]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cc98:	689b      	ldr	r3, [r3, #8]
 801cc9a:	f003 030c 	and.w	r3, r3, #12
 801cc9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801cca0:	4b56      	ldr	r3, [pc, #344]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cca2:	68db      	ldr	r3, [r3, #12]
 801cca4:	f003 0303 	and.w	r3, r3, #3
 801cca8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801ccaa:	69bb      	ldr	r3, [r7, #24]
 801ccac:	2b0c      	cmp	r3, #12
 801ccae:	d102      	bne.n	801ccb6 <HAL_RCC_OscConfig+0x136>
 801ccb0:	697b      	ldr	r3, [r7, #20]
 801ccb2:	2b02      	cmp	r3, #2
 801ccb4:	d002      	beq.n	801ccbc <HAL_RCC_OscConfig+0x13c>
 801ccb6:	69bb      	ldr	r3, [r7, #24]
 801ccb8:	2b04      	cmp	r3, #4
 801ccba:	d11f      	bne.n	801ccfc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801ccbc:	4b4f      	ldr	r3, [pc, #316]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ccc4:	2b00      	cmp	r3, #0
 801ccc6:	d005      	beq.n	801ccd4 <HAL_RCC_OscConfig+0x154>
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	68db      	ldr	r3, [r3, #12]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d101      	bne.n	801ccd4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801ccd0:	2301      	movs	r3, #1
 801ccd2:	e265      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801ccd4:	4b49      	ldr	r3, [pc, #292]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801ccd6:	685b      	ldr	r3, [r3, #4]
 801ccd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801ccdc:	687b      	ldr	r3, [r7, #4]
 801ccde:	691b      	ldr	r3, [r3, #16]
 801cce0:	061b      	lsls	r3, r3, #24
 801cce2:	4946      	ldr	r1, [pc, #280]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cce4:	4313      	orrs	r3, r2
 801cce6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801cce8:	4b45      	ldr	r3, [pc, #276]	; (801ce00 <HAL_RCC_OscConfig+0x280>)
 801ccea:	681b      	ldr	r3, [r3, #0]
 801ccec:	4618      	mov	r0, r3
 801ccee:	f7fc fc67 	bl	80195c0 <HAL_InitTick>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d043      	beq.n	801cd80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801ccf8:	2301      	movs	r3, #1
 801ccfa:	e251      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	68db      	ldr	r3, [r3, #12]
 801cd00:	2b00      	cmp	r3, #0
 801cd02:	d023      	beq.n	801cd4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801cd04:	4b3d      	ldr	r3, [pc, #244]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	4a3c      	ldr	r2, [pc, #240]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cd0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd10:	f7fc fca2 	bl	8019658 <HAL_GetTick>
 801cd14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd16:	e008      	b.n	801cd2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd18:	f7fc fc9e 	bl	8019658 <HAL_GetTick>
 801cd1c:	4602      	mov	r2, r0
 801cd1e:	693b      	ldr	r3, [r7, #16]
 801cd20:	1ad3      	subs	r3, r2, r3
 801cd22:	2b02      	cmp	r3, #2
 801cd24:	d901      	bls.n	801cd2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801cd26:	2303      	movs	r3, #3
 801cd28:	e23a      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801cd2a:	4b34      	ldr	r3, [pc, #208]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d0f0      	beq.n	801cd18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801cd36:	4b31      	ldr	r3, [pc, #196]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd38:	685b      	ldr	r3, [r3, #4]
 801cd3a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	691b      	ldr	r3, [r3, #16]
 801cd42:	061b      	lsls	r3, r3, #24
 801cd44:	492d      	ldr	r1, [pc, #180]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd46:	4313      	orrs	r3, r2
 801cd48:	604b      	str	r3, [r1, #4]
 801cd4a:	e01a      	b.n	801cd82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801cd4c:	4b2b      	ldr	r3, [pc, #172]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	4a2a      	ldr	r2, [pc, #168]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801cd56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd58:	f7fc fc7e 	bl	8019658 <HAL_GetTick>
 801cd5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cd5e:	e008      	b.n	801cd72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801cd60:	f7fc fc7a 	bl	8019658 <HAL_GetTick>
 801cd64:	4602      	mov	r2, r0
 801cd66:	693b      	ldr	r3, [r7, #16]
 801cd68:	1ad3      	subs	r3, r2, r3
 801cd6a:	2b02      	cmp	r3, #2
 801cd6c:	d901      	bls.n	801cd72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801cd6e:	2303      	movs	r3, #3
 801cd70:	e216      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801cd72:	4b22      	ldr	r3, [pc, #136]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d1f0      	bne.n	801cd60 <HAL_RCC_OscConfig+0x1e0>
 801cd7e:	e000      	b.n	801cd82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801cd80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cd82:	687b      	ldr	r3, [r7, #4]
 801cd84:	681b      	ldr	r3, [r3, #0]
 801cd86:	f003 0308 	and.w	r3, r3, #8
 801cd8a:	2b00      	cmp	r3, #0
 801cd8c:	d041      	beq.n	801ce12 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801cd8e:	687b      	ldr	r3, [r7, #4]
 801cd90:	695b      	ldr	r3, [r3, #20]
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d01c      	beq.n	801cdd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cd96:	4b19      	ldr	r3, [pc, #100]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cd9c:	4a17      	ldr	r2, [pc, #92]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cd9e:	f043 0301 	orr.w	r3, r3, #1
 801cda2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cda6:	f7fc fc57 	bl	8019658 <HAL_GetTick>
 801cdaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801cdac:	e008      	b.n	801cdc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cdae:	f7fc fc53 	bl	8019658 <HAL_GetTick>
 801cdb2:	4602      	mov	r2, r0
 801cdb4:	693b      	ldr	r3, [r7, #16]
 801cdb6:	1ad3      	subs	r3, r2, r3
 801cdb8:	2b02      	cmp	r3, #2
 801cdba:	d901      	bls.n	801cdc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801cdbc:	2303      	movs	r3, #3
 801cdbe:	e1ef      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801cdc0:	4b0e      	ldr	r3, [pc, #56]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cdc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cdc6:	f003 0302 	and.w	r3, r3, #2
 801cdca:	2b00      	cmp	r3, #0
 801cdcc:	d0ef      	beq.n	801cdae <HAL_RCC_OscConfig+0x22e>
 801cdce:	e020      	b.n	801ce12 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801cdd0:	4b0a      	ldr	r3, [pc, #40]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cdd6:	4a09      	ldr	r2, [pc, #36]	; (801cdfc <HAL_RCC_OscConfig+0x27c>)
 801cdd8:	f023 0301 	bic.w	r3, r3, #1
 801cddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cde0:	f7fc fc3a 	bl	8019658 <HAL_GetTick>
 801cde4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801cde6:	e00d      	b.n	801ce04 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cde8:	f7fc fc36 	bl	8019658 <HAL_GetTick>
 801cdec:	4602      	mov	r2, r0
 801cdee:	693b      	ldr	r3, [r7, #16]
 801cdf0:	1ad3      	subs	r3, r2, r3
 801cdf2:	2b02      	cmp	r3, #2
 801cdf4:	d906      	bls.n	801ce04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801cdf6:	2303      	movs	r3, #3
 801cdf8:	e1d2      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
 801cdfa:	bf00      	nop
 801cdfc:	40021000 	.word	0x40021000
 801ce00:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801ce04:	4b8c      	ldr	r3, [pc, #560]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ce0a:	f003 0302 	and.w	r3, r3, #2
 801ce0e:	2b00      	cmp	r3, #0
 801ce10:	d1ea      	bne.n	801cde8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	681b      	ldr	r3, [r3, #0]
 801ce16:	f003 0304 	and.w	r3, r3, #4
 801ce1a:	2b00      	cmp	r3, #0
 801ce1c:	f000 80a6 	beq.w	801cf6c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801ce20:	2300      	movs	r3, #0
 801ce22:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801ce24:	4b84      	ldr	r3, [pc, #528]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	d101      	bne.n	801ce34 <HAL_RCC_OscConfig+0x2b4>
 801ce30:	2301      	movs	r3, #1
 801ce32:	e000      	b.n	801ce36 <HAL_RCC_OscConfig+0x2b6>
 801ce34:	2300      	movs	r3, #0
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d00d      	beq.n	801ce56 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801ce3a:	4b7f      	ldr	r3, [pc, #508]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce3e:	4a7e      	ldr	r2, [pc, #504]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ce44:	6593      	str	r3, [r2, #88]	; 0x58
 801ce46:	4b7c      	ldr	r3, [pc, #496]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ce4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801ce4e:	60fb      	str	r3, [r7, #12]
 801ce50:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801ce52:	2301      	movs	r3, #1
 801ce54:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce56:	4b79      	ldr	r3, [pc, #484]	; (801d03c <HAL_RCC_OscConfig+0x4bc>)
 801ce58:	681b      	ldr	r3, [r3, #0]
 801ce5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d118      	bne.n	801ce94 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801ce62:	4b76      	ldr	r3, [pc, #472]	; (801d03c <HAL_RCC_OscConfig+0x4bc>)
 801ce64:	681b      	ldr	r3, [r3, #0]
 801ce66:	4a75      	ldr	r2, [pc, #468]	; (801d03c <HAL_RCC_OscConfig+0x4bc>)
 801ce68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801ce6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801ce6e:	f7fc fbf3 	bl	8019658 <HAL_GetTick>
 801ce72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce74:	e008      	b.n	801ce88 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ce76:	f7fc fbef 	bl	8019658 <HAL_GetTick>
 801ce7a:	4602      	mov	r2, r0
 801ce7c:	693b      	ldr	r3, [r7, #16]
 801ce7e:	1ad3      	subs	r3, r2, r3
 801ce80:	2b02      	cmp	r3, #2
 801ce82:	d901      	bls.n	801ce88 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801ce84:	2303      	movs	r3, #3
 801ce86:	e18b      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801ce88:	4b6c      	ldr	r3, [pc, #432]	; (801d03c <HAL_RCC_OscConfig+0x4bc>)
 801ce8a:	681b      	ldr	r3, [r3, #0]
 801ce8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ce90:	2b00      	cmp	r3, #0
 801ce92:	d0f0      	beq.n	801ce76 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	689b      	ldr	r3, [r3, #8]
 801ce98:	2b01      	cmp	r3, #1
 801ce9a:	d108      	bne.n	801ceae <HAL_RCC_OscConfig+0x32e>
 801ce9c:	4b66      	ldr	r3, [pc, #408]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ce9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cea2:	4a65      	ldr	r2, [pc, #404]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cea4:	f043 0301 	orr.w	r3, r3, #1
 801cea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801ceac:	e024      	b.n	801cef8 <HAL_RCC_OscConfig+0x378>
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	689b      	ldr	r3, [r3, #8]
 801ceb2:	2b05      	cmp	r3, #5
 801ceb4:	d110      	bne.n	801ced8 <HAL_RCC_OscConfig+0x358>
 801ceb6:	4b60      	ldr	r3, [pc, #384]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ceb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cebc:	4a5e      	ldr	r2, [pc, #376]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cebe:	f043 0304 	orr.w	r3, r3, #4
 801cec2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cec6:	4b5c      	ldr	r3, [pc, #368]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cecc:	4a5a      	ldr	r2, [pc, #360]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cece:	f043 0301 	orr.w	r3, r3, #1
 801ced2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801ced6:	e00f      	b.n	801cef8 <HAL_RCC_OscConfig+0x378>
 801ced8:	4b57      	ldr	r3, [pc, #348]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ceda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cede:	4a56      	ldr	r2, [pc, #344]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cee0:	f023 0301 	bic.w	r3, r3, #1
 801cee4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801cee8:	4b53      	ldr	r3, [pc, #332]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801ceea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ceee:	4a52      	ldr	r2, [pc, #328]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cef0:	f023 0304 	bic.w	r3, r3, #4
 801cef4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	689b      	ldr	r3, [r3, #8]
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	d016      	beq.n	801cf2e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf00:	f7fc fbaa 	bl	8019658 <HAL_GetTick>
 801cf04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cf06:	e00a      	b.n	801cf1e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf08:	f7fc fba6 	bl	8019658 <HAL_GetTick>
 801cf0c:	4602      	mov	r2, r0
 801cf0e:	693b      	ldr	r3, [r7, #16]
 801cf10:	1ad3      	subs	r3, r2, r3
 801cf12:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf16:	4293      	cmp	r3, r2
 801cf18:	d901      	bls.n	801cf1e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801cf1a:	2303      	movs	r3, #3
 801cf1c:	e140      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cf1e:	4b46      	ldr	r3, [pc, #280]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf24:	f003 0302 	and.w	r3, r3, #2
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d0ed      	beq.n	801cf08 <HAL_RCC_OscConfig+0x388>
 801cf2c:	e015      	b.n	801cf5a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf2e:	f7fc fb93 	bl	8019658 <HAL_GetTick>
 801cf32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cf34:	e00a      	b.n	801cf4c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cf36:	f7fc fb8f 	bl	8019658 <HAL_GetTick>
 801cf3a:	4602      	mov	r2, r0
 801cf3c:	693b      	ldr	r3, [r7, #16]
 801cf3e:	1ad3      	subs	r3, r2, r3
 801cf40:	f241 3288 	movw	r2, #5000	; 0x1388
 801cf44:	4293      	cmp	r3, r2
 801cf46:	d901      	bls.n	801cf4c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801cf48:	2303      	movs	r3, #3
 801cf4a:	e129      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801cf4c:	4b3a      	ldr	r3, [pc, #232]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cf52:	f003 0302 	and.w	r3, r3, #2
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d1ed      	bne.n	801cf36 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801cf5a:	7ffb      	ldrb	r3, [r7, #31]
 801cf5c:	2b01      	cmp	r3, #1
 801cf5e:	d105      	bne.n	801cf6c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cf60:	4b35      	ldr	r3, [pc, #212]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cf64:	4a34      	ldr	r2, [pc, #208]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cf6a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	681b      	ldr	r3, [r3, #0]
 801cf70:	f003 0320 	and.w	r3, r3, #32
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d03c      	beq.n	801cff2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	699b      	ldr	r3, [r3, #24]
 801cf7c:	2b00      	cmp	r3, #0
 801cf7e:	d01c      	beq.n	801cfba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801cf80:	4b2d      	ldr	r3, [pc, #180]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cf86:	4a2c      	ldr	r2, [pc, #176]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cf88:	f043 0301 	orr.w	r3, r3, #1
 801cf8c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cf90:	f7fc fb62 	bl	8019658 <HAL_GetTick>
 801cf94:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801cf96:	e008      	b.n	801cfaa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801cf98:	f7fc fb5e 	bl	8019658 <HAL_GetTick>
 801cf9c:	4602      	mov	r2, r0
 801cf9e:	693b      	ldr	r3, [r7, #16]
 801cfa0:	1ad3      	subs	r3, r2, r3
 801cfa2:	2b02      	cmp	r3, #2
 801cfa4:	d901      	bls.n	801cfaa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801cfa6:	2303      	movs	r3, #3
 801cfa8:	e0fa      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801cfaa:	4b23      	ldr	r3, [pc, #140]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cfac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cfb0:	f003 0302 	and.w	r3, r3, #2
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d0ef      	beq.n	801cf98 <HAL_RCC_OscConfig+0x418>
 801cfb8:	e01b      	b.n	801cff2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801cfba:	4b1f      	ldr	r3, [pc, #124]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cfbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cfc0:	4a1d      	ldr	r2, [pc, #116]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cfc2:	f023 0301 	bic.w	r3, r3, #1
 801cfc6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cfca:	f7fc fb45 	bl	8019658 <HAL_GetTick>
 801cfce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801cfd0:	e008      	b.n	801cfe4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801cfd2:	f7fc fb41 	bl	8019658 <HAL_GetTick>
 801cfd6:	4602      	mov	r2, r0
 801cfd8:	693b      	ldr	r3, [r7, #16]
 801cfda:	1ad3      	subs	r3, r2, r3
 801cfdc:	2b02      	cmp	r3, #2
 801cfde:	d901      	bls.n	801cfe4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801cfe0:	2303      	movs	r3, #3
 801cfe2:	e0dd      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801cfe4:	4b14      	ldr	r3, [pc, #80]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cfe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801cfea:	f003 0302 	and.w	r3, r3, #2
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d1ef      	bne.n	801cfd2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801cff2:	687b      	ldr	r3, [r7, #4]
 801cff4:	69db      	ldr	r3, [r3, #28]
 801cff6:	2b00      	cmp	r3, #0
 801cff8:	f000 80d1 	beq.w	801d19e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801cffc:	4b0e      	ldr	r3, [pc, #56]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801cffe:	689b      	ldr	r3, [r3, #8]
 801d000:	f003 030c 	and.w	r3, r3, #12
 801d004:	2b0c      	cmp	r3, #12
 801d006:	f000 808b 	beq.w	801d120 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	69db      	ldr	r3, [r3, #28]
 801d00e:	2b02      	cmp	r3, #2
 801d010:	d15e      	bne.n	801d0d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d012:	4b09      	ldr	r3, [pc, #36]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801d014:	681b      	ldr	r3, [r3, #0]
 801d016:	4a08      	ldr	r2, [pc, #32]	; (801d038 <HAL_RCC_OscConfig+0x4b8>)
 801d018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d01c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d01e:	f7fc fb1b 	bl	8019658 <HAL_GetTick>
 801d022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d024:	e00c      	b.n	801d040 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d026:	f7fc fb17 	bl	8019658 <HAL_GetTick>
 801d02a:	4602      	mov	r2, r0
 801d02c:	693b      	ldr	r3, [r7, #16]
 801d02e:	1ad3      	subs	r3, r2, r3
 801d030:	2b02      	cmp	r3, #2
 801d032:	d905      	bls.n	801d040 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801d034:	2303      	movs	r3, #3
 801d036:	e0b3      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
 801d038:	40021000 	.word	0x40021000
 801d03c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d040:	4b59      	ldr	r3, [pc, #356]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d042:	681b      	ldr	r3, [r3, #0]
 801d044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d1ec      	bne.n	801d026 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d04c:	4b56      	ldr	r3, [pc, #344]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d04e:	68da      	ldr	r2, [r3, #12]
 801d050:	4b56      	ldr	r3, [pc, #344]	; (801d1ac <HAL_RCC_OscConfig+0x62c>)
 801d052:	4013      	ands	r3, r2
 801d054:	687a      	ldr	r2, [r7, #4]
 801d056:	6a11      	ldr	r1, [r2, #32]
 801d058:	687a      	ldr	r2, [r7, #4]
 801d05a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d05c:	3a01      	subs	r2, #1
 801d05e:	0112      	lsls	r2, r2, #4
 801d060:	4311      	orrs	r1, r2
 801d062:	687a      	ldr	r2, [r7, #4]
 801d064:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801d066:	0212      	lsls	r2, r2, #8
 801d068:	4311      	orrs	r1, r2
 801d06a:	687a      	ldr	r2, [r7, #4]
 801d06c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801d06e:	0852      	lsrs	r2, r2, #1
 801d070:	3a01      	subs	r2, #1
 801d072:	0552      	lsls	r2, r2, #21
 801d074:	4311      	orrs	r1, r2
 801d076:	687a      	ldr	r2, [r7, #4]
 801d078:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801d07a:	0852      	lsrs	r2, r2, #1
 801d07c:	3a01      	subs	r2, #1
 801d07e:	0652      	lsls	r2, r2, #25
 801d080:	4311      	orrs	r1, r2
 801d082:	687a      	ldr	r2, [r7, #4]
 801d084:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801d086:	06d2      	lsls	r2, r2, #27
 801d088:	430a      	orrs	r2, r1
 801d08a:	4947      	ldr	r1, [pc, #284]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d08c:	4313      	orrs	r3, r2
 801d08e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d090:	4b45      	ldr	r3, [pc, #276]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d092:	681b      	ldr	r3, [r3, #0]
 801d094:	4a44      	ldr	r2, [pc, #272]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d09a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801d09c:	4b42      	ldr	r3, [pc, #264]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d09e:	68db      	ldr	r3, [r3, #12]
 801d0a0:	4a41      	ldr	r2, [pc, #260]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801d0a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0a8:	f7fc fad6 	bl	8019658 <HAL_GetTick>
 801d0ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d0ae:	e008      	b.n	801d0c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d0b0:	f7fc fad2 	bl	8019658 <HAL_GetTick>
 801d0b4:	4602      	mov	r2, r0
 801d0b6:	693b      	ldr	r3, [r7, #16]
 801d0b8:	1ad3      	subs	r3, r2, r3
 801d0ba:	2b02      	cmp	r3, #2
 801d0bc:	d901      	bls.n	801d0c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801d0be:	2303      	movs	r3, #3
 801d0c0:	e06e      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d0c2:	4b39      	ldr	r3, [pc, #228]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0c4:	681b      	ldr	r3, [r3, #0]
 801d0c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d0ca:	2b00      	cmp	r3, #0
 801d0cc:	d0f0      	beq.n	801d0b0 <HAL_RCC_OscConfig+0x530>
 801d0ce:	e066      	b.n	801d19e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d0d0:	4b35      	ldr	r3, [pc, #212]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0d2:	681b      	ldr	r3, [r3, #0]
 801d0d4:	4a34      	ldr	r2, [pc, #208]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d0da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801d0dc:	4b32      	ldr	r3, [pc, #200]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0de:	68db      	ldr	r3, [r3, #12]
 801d0e0:	4a31      	ldr	r2, [pc, #196]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0e2:	f023 0303 	bic.w	r3, r3, #3
 801d0e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801d0e8:	4b2f      	ldr	r3, [pc, #188]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	4a2e      	ldr	r2, [pc, #184]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d0ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801d0f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d0f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0f8:	f7fc faae 	bl	8019658 <HAL_GetTick>
 801d0fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d0fe:	e008      	b.n	801d112 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d100:	f7fc faaa 	bl	8019658 <HAL_GetTick>
 801d104:	4602      	mov	r2, r0
 801d106:	693b      	ldr	r3, [r7, #16]
 801d108:	1ad3      	subs	r3, r2, r3
 801d10a:	2b02      	cmp	r3, #2
 801d10c:	d901      	bls.n	801d112 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801d10e:	2303      	movs	r3, #3
 801d110:	e046      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801d112:	4b25      	ldr	r3, [pc, #148]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d11a:	2b00      	cmp	r3, #0
 801d11c:	d1f0      	bne.n	801d100 <HAL_RCC_OscConfig+0x580>
 801d11e:	e03e      	b.n	801d19e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	69db      	ldr	r3, [r3, #28]
 801d124:	2b01      	cmp	r3, #1
 801d126:	d101      	bne.n	801d12c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801d128:	2301      	movs	r3, #1
 801d12a:	e039      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801d12c:	4b1e      	ldr	r3, [pc, #120]	; (801d1a8 <HAL_RCC_OscConfig+0x628>)
 801d12e:	68db      	ldr	r3, [r3, #12]
 801d130:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d132:	697b      	ldr	r3, [r7, #20]
 801d134:	f003 0203 	and.w	r2, r3, #3
 801d138:	687b      	ldr	r3, [r7, #4]
 801d13a:	6a1b      	ldr	r3, [r3, #32]
 801d13c:	429a      	cmp	r2, r3
 801d13e:	d12c      	bne.n	801d19a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d140:	697b      	ldr	r3, [r7, #20]
 801d142:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d14a:	3b01      	subs	r3, #1
 801d14c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d14e:	429a      	cmp	r2, r3
 801d150:	d123      	bne.n	801d19a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d152:	697b      	ldr	r3, [r7, #20]
 801d154:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801d158:	687b      	ldr	r3, [r7, #4]
 801d15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d15c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801d15e:	429a      	cmp	r2, r3
 801d160:	d11b      	bne.n	801d19a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d162:	697b      	ldr	r3, [r7, #20]
 801d164:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d16c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801d16e:	429a      	cmp	r2, r3
 801d170:	d113      	bne.n	801d19a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d172:	697b      	ldr	r3, [r7, #20]
 801d174:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801d178:	687b      	ldr	r3, [r7, #4]
 801d17a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d17c:	085b      	lsrs	r3, r3, #1
 801d17e:	3b01      	subs	r3, #1
 801d180:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801d182:	429a      	cmp	r2, r3
 801d184:	d109      	bne.n	801d19a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801d186:	697b      	ldr	r3, [r7, #20]
 801d188:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801d18c:	687b      	ldr	r3, [r7, #4]
 801d18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d190:	085b      	lsrs	r3, r3, #1
 801d192:	3b01      	subs	r3, #1
 801d194:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801d196:	429a      	cmp	r2, r3
 801d198:	d001      	beq.n	801d19e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801d19a:	2301      	movs	r3, #1
 801d19c:	e000      	b.n	801d1a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801d19e:	2300      	movs	r3, #0
}
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	3720      	adds	r7, #32
 801d1a4:	46bd      	mov	sp, r7
 801d1a6:	bd80      	pop	{r7, pc}
 801d1a8:	40021000 	.word	0x40021000
 801d1ac:	019f800c 	.word	0x019f800c

0801d1b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d1b0:	b580      	push	{r7, lr}
 801d1b2:	b086      	sub	sp, #24
 801d1b4:	af00      	add	r7, sp, #0
 801d1b6:	6078      	str	r0, [r7, #4]
 801d1b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801d1ba:	2300      	movs	r3, #0
 801d1bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d1be:	687b      	ldr	r3, [r7, #4]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d101      	bne.n	801d1c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801d1c4:	2301      	movs	r3, #1
 801d1c6:	e11e      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d1c8:	4b91      	ldr	r3, [pc, #580]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	f003 030f 	and.w	r3, r3, #15
 801d1d0:	683a      	ldr	r2, [r7, #0]
 801d1d2:	429a      	cmp	r2, r3
 801d1d4:	d910      	bls.n	801d1f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d1d6:	4b8e      	ldr	r3, [pc, #568]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	f023 020f 	bic.w	r2, r3, #15
 801d1de:	498c      	ldr	r1, [pc, #560]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d1e0:	683b      	ldr	r3, [r7, #0]
 801d1e2:	4313      	orrs	r3, r2
 801d1e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d1e6:	4b8a      	ldr	r3, [pc, #552]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	f003 030f 	and.w	r3, r3, #15
 801d1ee:	683a      	ldr	r2, [r7, #0]
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	d001      	beq.n	801d1f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801d1f4:	2301      	movs	r3, #1
 801d1f6:	e106      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	681b      	ldr	r3, [r3, #0]
 801d1fc:	f003 0301 	and.w	r3, r3, #1
 801d200:	2b00      	cmp	r3, #0
 801d202:	d073      	beq.n	801d2ec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	685b      	ldr	r3, [r3, #4]
 801d208:	2b03      	cmp	r3, #3
 801d20a:	d129      	bne.n	801d260 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801d20c:	4b81      	ldr	r3, [pc, #516]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d214:	2b00      	cmp	r3, #0
 801d216:	d101      	bne.n	801d21c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801d218:	2301      	movs	r3, #1
 801d21a:	e0f4      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801d21c:	f000 f99c 	bl	801d558 <RCC_GetSysClockFreqFromPLLSource>
 801d220:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801d222:	693b      	ldr	r3, [r7, #16]
 801d224:	4a7c      	ldr	r2, [pc, #496]	; (801d418 <HAL_RCC_ClockConfig+0x268>)
 801d226:	4293      	cmp	r3, r2
 801d228:	d93f      	bls.n	801d2aa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d22a:	4b7a      	ldr	r3, [pc, #488]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d22c:	689b      	ldr	r3, [r3, #8]
 801d22e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801d232:	2b00      	cmp	r3, #0
 801d234:	d009      	beq.n	801d24a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d236:	687b      	ldr	r3, [r7, #4]
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801d23e:	2b00      	cmp	r3, #0
 801d240:	d033      	beq.n	801d2aa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801d246:	2b00      	cmp	r3, #0
 801d248:	d12f      	bne.n	801d2aa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d24a:	4b72      	ldr	r3, [pc, #456]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d24c:	689b      	ldr	r3, [r3, #8]
 801d24e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d252:	4a70      	ldr	r2, [pc, #448]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d258:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801d25a:	2380      	movs	r3, #128	; 0x80
 801d25c:	617b      	str	r3, [r7, #20]
 801d25e:	e024      	b.n	801d2aa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	685b      	ldr	r3, [r3, #4]
 801d264:	2b02      	cmp	r3, #2
 801d266:	d107      	bne.n	801d278 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801d268:	4b6a      	ldr	r3, [pc, #424]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d270:	2b00      	cmp	r3, #0
 801d272:	d109      	bne.n	801d288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d274:	2301      	movs	r3, #1
 801d276:	e0c6      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801d278:	4b66      	ldr	r3, [pc, #408]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d27a:	681b      	ldr	r3, [r3, #0]
 801d27c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d280:	2b00      	cmp	r3, #0
 801d282:	d101      	bne.n	801d288 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801d284:	2301      	movs	r3, #1
 801d286:	e0be      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801d288:	f000 f8ce 	bl	801d428 <HAL_RCC_GetSysClockFreq>
 801d28c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801d28e:	693b      	ldr	r3, [r7, #16]
 801d290:	4a61      	ldr	r2, [pc, #388]	; (801d418 <HAL_RCC_ClockConfig+0x268>)
 801d292:	4293      	cmp	r3, r2
 801d294:	d909      	bls.n	801d2aa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801d296:	4b5f      	ldr	r3, [pc, #380]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d298:	689b      	ldr	r3, [r3, #8]
 801d29a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d29e:	4a5d      	ldr	r2, [pc, #372]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d2a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d2a4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801d2a6:	2380      	movs	r3, #128	; 0x80
 801d2a8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d2aa:	4b5a      	ldr	r3, [pc, #360]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d2ac:	689b      	ldr	r3, [r3, #8]
 801d2ae:	f023 0203 	bic.w	r2, r3, #3
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	685b      	ldr	r3, [r3, #4]
 801d2b6:	4957      	ldr	r1, [pc, #348]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d2b8:	4313      	orrs	r3, r2
 801d2ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d2bc:	f7fc f9cc 	bl	8019658 <HAL_GetTick>
 801d2c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d2c2:	e00a      	b.n	801d2da <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d2c4:	f7fc f9c8 	bl	8019658 <HAL_GetTick>
 801d2c8:	4602      	mov	r2, r0
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	1ad3      	subs	r3, r2, r3
 801d2ce:	f241 3288 	movw	r2, #5000	; 0x1388
 801d2d2:	4293      	cmp	r3, r2
 801d2d4:	d901      	bls.n	801d2da <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801d2d6:	2303      	movs	r3, #3
 801d2d8:	e095      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d2da:	4b4e      	ldr	r3, [pc, #312]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d2dc:	689b      	ldr	r3, [r3, #8]
 801d2de:	f003 020c 	and.w	r2, r3, #12
 801d2e2:	687b      	ldr	r3, [r7, #4]
 801d2e4:	685b      	ldr	r3, [r3, #4]
 801d2e6:	009b      	lsls	r3, r3, #2
 801d2e8:	429a      	cmp	r2, r3
 801d2ea:	d1eb      	bne.n	801d2c4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	681b      	ldr	r3, [r3, #0]
 801d2f0:	f003 0302 	and.w	r3, r3, #2
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d023      	beq.n	801d340 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	f003 0304 	and.w	r3, r3, #4
 801d300:	2b00      	cmp	r3, #0
 801d302:	d005      	beq.n	801d310 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801d304:	4b43      	ldr	r3, [pc, #268]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d306:	689b      	ldr	r3, [r3, #8]
 801d308:	4a42      	ldr	r2, [pc, #264]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d30a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d30e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	f003 0308 	and.w	r3, r3, #8
 801d318:	2b00      	cmp	r3, #0
 801d31a:	d007      	beq.n	801d32c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801d31c:	4b3d      	ldr	r3, [pc, #244]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d31e:	689b      	ldr	r3, [r3, #8]
 801d320:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d324:	4a3b      	ldr	r2, [pc, #236]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d326:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801d32a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d32c:	4b39      	ldr	r3, [pc, #228]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d32e:	689b      	ldr	r3, [r3, #8]
 801d330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801d334:	687b      	ldr	r3, [r7, #4]
 801d336:	689b      	ldr	r3, [r3, #8]
 801d338:	4936      	ldr	r1, [pc, #216]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d33a:	4313      	orrs	r3, r2
 801d33c:	608b      	str	r3, [r1, #8]
 801d33e:	e008      	b.n	801d352 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801d340:	697b      	ldr	r3, [r7, #20]
 801d342:	2b80      	cmp	r3, #128	; 0x80
 801d344:	d105      	bne.n	801d352 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801d346:	4b33      	ldr	r3, [pc, #204]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d348:	689b      	ldr	r3, [r3, #8]
 801d34a:	4a32      	ldr	r2, [pc, #200]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d34c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801d350:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d352:	4b2f      	ldr	r3, [pc, #188]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	f003 030f 	and.w	r3, r3, #15
 801d35a:	683a      	ldr	r2, [r7, #0]
 801d35c:	429a      	cmp	r2, r3
 801d35e:	d21d      	bcs.n	801d39c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d360:	4b2b      	ldr	r3, [pc, #172]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d362:	681b      	ldr	r3, [r3, #0]
 801d364:	f023 020f 	bic.w	r2, r3, #15
 801d368:	4929      	ldr	r1, [pc, #164]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	4313      	orrs	r3, r2
 801d36e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801d370:	f7fc f972 	bl	8019658 <HAL_GetTick>
 801d374:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d376:	e00a      	b.n	801d38e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d378:	f7fc f96e 	bl	8019658 <HAL_GetTick>
 801d37c:	4602      	mov	r2, r0
 801d37e:	68fb      	ldr	r3, [r7, #12]
 801d380:	1ad3      	subs	r3, r2, r3
 801d382:	f241 3288 	movw	r2, #5000	; 0x1388
 801d386:	4293      	cmp	r3, r2
 801d388:	d901      	bls.n	801d38e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801d38a:	2303      	movs	r3, #3
 801d38c:	e03b      	b.n	801d406 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d38e:	4b20      	ldr	r3, [pc, #128]	; (801d410 <HAL_RCC_ClockConfig+0x260>)
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	f003 030f 	and.w	r3, r3, #15
 801d396:	683a      	ldr	r2, [r7, #0]
 801d398:	429a      	cmp	r2, r3
 801d39a:	d1ed      	bne.n	801d378 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	681b      	ldr	r3, [r3, #0]
 801d3a0:	f003 0304 	and.w	r3, r3, #4
 801d3a4:	2b00      	cmp	r3, #0
 801d3a6:	d008      	beq.n	801d3ba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801d3a8:	4b1a      	ldr	r3, [pc, #104]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d3aa:	689b      	ldr	r3, [r3, #8]
 801d3ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801d3b0:	687b      	ldr	r3, [r7, #4]
 801d3b2:	68db      	ldr	r3, [r3, #12]
 801d3b4:	4917      	ldr	r1, [pc, #92]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d3b6:	4313      	orrs	r3, r2
 801d3b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d3ba:	687b      	ldr	r3, [r7, #4]
 801d3bc:	681b      	ldr	r3, [r3, #0]
 801d3be:	f003 0308 	and.w	r3, r3, #8
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d009      	beq.n	801d3da <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801d3c6:	4b13      	ldr	r3, [pc, #76]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d3c8:	689b      	ldr	r3, [r3, #8]
 801d3ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	691b      	ldr	r3, [r3, #16]
 801d3d2:	00db      	lsls	r3, r3, #3
 801d3d4:	490f      	ldr	r1, [pc, #60]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d3d6:	4313      	orrs	r3, r2
 801d3d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801d3da:	f000 f825 	bl	801d428 <HAL_RCC_GetSysClockFreq>
 801d3de:	4602      	mov	r2, r0
 801d3e0:	4b0c      	ldr	r3, [pc, #48]	; (801d414 <HAL_RCC_ClockConfig+0x264>)
 801d3e2:	689b      	ldr	r3, [r3, #8]
 801d3e4:	091b      	lsrs	r3, r3, #4
 801d3e6:	f003 030f 	and.w	r3, r3, #15
 801d3ea:	490c      	ldr	r1, [pc, #48]	; (801d41c <HAL_RCC_ClockConfig+0x26c>)
 801d3ec:	5ccb      	ldrb	r3, [r1, r3]
 801d3ee:	f003 031f 	and.w	r3, r3, #31
 801d3f2:	fa22 f303 	lsr.w	r3, r2, r3
 801d3f6:	4a0a      	ldr	r2, [pc, #40]	; (801d420 <HAL_RCC_ClockConfig+0x270>)
 801d3f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801d3fa:	4b0a      	ldr	r3, [pc, #40]	; (801d424 <HAL_RCC_ClockConfig+0x274>)
 801d3fc:	681b      	ldr	r3, [r3, #0]
 801d3fe:	4618      	mov	r0, r3
 801d400:	f7fc f8de 	bl	80195c0 <HAL_InitTick>
 801d404:	4603      	mov	r3, r0
}
 801d406:	4618      	mov	r0, r3
 801d408:	3718      	adds	r7, #24
 801d40a:	46bd      	mov	sp, r7
 801d40c:	bd80      	pop	{r7, pc}
 801d40e:	bf00      	nop
 801d410:	40022000 	.word	0x40022000
 801d414:	40021000 	.word	0x40021000
 801d418:	04c4b400 	.word	0x04c4b400
 801d41c:	080251a4 	.word	0x080251a4
 801d420:	20000000 	.word	0x20000000
 801d424:	20000004 	.word	0x20000004

0801d428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d428:	b480      	push	{r7}
 801d42a:	b087      	sub	sp, #28
 801d42c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801d42e:	4b2c      	ldr	r3, [pc, #176]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d430:	689b      	ldr	r3, [r3, #8]
 801d432:	f003 030c 	and.w	r3, r3, #12
 801d436:	2b04      	cmp	r3, #4
 801d438:	d102      	bne.n	801d440 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801d43a:	4b2a      	ldr	r3, [pc, #168]	; (801d4e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d43c:	613b      	str	r3, [r7, #16]
 801d43e:	e047      	b.n	801d4d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801d440:	4b27      	ldr	r3, [pc, #156]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d442:	689b      	ldr	r3, [r3, #8]
 801d444:	f003 030c 	and.w	r3, r3, #12
 801d448:	2b08      	cmp	r3, #8
 801d44a:	d102      	bne.n	801d452 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801d44c:	4b25      	ldr	r3, [pc, #148]	; (801d4e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d44e:	613b      	str	r3, [r7, #16]
 801d450:	e03e      	b.n	801d4d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801d452:	4b23      	ldr	r3, [pc, #140]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d454:	689b      	ldr	r3, [r3, #8]
 801d456:	f003 030c 	and.w	r3, r3, #12
 801d45a:	2b0c      	cmp	r3, #12
 801d45c:	d136      	bne.n	801d4cc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d45e:	4b20      	ldr	r3, [pc, #128]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d460:	68db      	ldr	r3, [r3, #12]
 801d462:	f003 0303 	and.w	r3, r3, #3
 801d466:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d468:	4b1d      	ldr	r3, [pc, #116]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d46a:	68db      	ldr	r3, [r3, #12]
 801d46c:	091b      	lsrs	r3, r3, #4
 801d46e:	f003 030f 	and.w	r3, r3, #15
 801d472:	3301      	adds	r3, #1
 801d474:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801d476:	68fb      	ldr	r3, [r7, #12]
 801d478:	2b03      	cmp	r3, #3
 801d47a:	d10c      	bne.n	801d496 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d47c:	4a19      	ldr	r2, [pc, #100]	; (801d4e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d47e:	68bb      	ldr	r3, [r7, #8]
 801d480:	fbb2 f3f3 	udiv	r3, r2, r3
 801d484:	4a16      	ldr	r2, [pc, #88]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d486:	68d2      	ldr	r2, [r2, #12]
 801d488:	0a12      	lsrs	r2, r2, #8
 801d48a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d48e:	fb02 f303 	mul.w	r3, r2, r3
 801d492:	617b      	str	r3, [r7, #20]
      break;
 801d494:	e00c      	b.n	801d4b0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d496:	4a13      	ldr	r2, [pc, #76]	; (801d4e4 <HAL_RCC_GetSysClockFreq+0xbc>)
 801d498:	68bb      	ldr	r3, [r7, #8]
 801d49a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d49e:	4a10      	ldr	r2, [pc, #64]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4a0:	68d2      	ldr	r2, [r2, #12]
 801d4a2:	0a12      	lsrs	r2, r2, #8
 801d4a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d4a8:	fb02 f303 	mul.w	r3, r2, r3
 801d4ac:	617b      	str	r3, [r7, #20]
      break;
 801d4ae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d4b0:	4b0b      	ldr	r3, [pc, #44]	; (801d4e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 801d4b2:	68db      	ldr	r3, [r3, #12]
 801d4b4:	0e5b      	lsrs	r3, r3, #25
 801d4b6:	f003 0303 	and.w	r3, r3, #3
 801d4ba:	3301      	adds	r3, #1
 801d4bc:	005b      	lsls	r3, r3, #1
 801d4be:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801d4c0:	697a      	ldr	r2, [r7, #20]
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d4c8:	613b      	str	r3, [r7, #16]
 801d4ca:	e001      	b.n	801d4d0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801d4cc:	2300      	movs	r3, #0
 801d4ce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801d4d0:	693b      	ldr	r3, [r7, #16]
}
 801d4d2:	4618      	mov	r0, r3
 801d4d4:	371c      	adds	r7, #28
 801d4d6:	46bd      	mov	sp, r7
 801d4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4dc:	4770      	bx	lr
 801d4de:	bf00      	nop
 801d4e0:	40021000 	.word	0x40021000
 801d4e4:	00f42400 	.word	0x00f42400

0801d4e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d4e8:	b480      	push	{r7}
 801d4ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801d4ec:	4b03      	ldr	r3, [pc, #12]	; (801d4fc <HAL_RCC_GetHCLKFreq+0x14>)
 801d4ee:	681b      	ldr	r3, [r3, #0]
}
 801d4f0:	4618      	mov	r0, r3
 801d4f2:	46bd      	mov	sp, r7
 801d4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d4f8:	4770      	bx	lr
 801d4fa:	bf00      	nop
 801d4fc:	20000000 	.word	0x20000000

0801d500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d500:	b580      	push	{r7, lr}
 801d502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801d504:	f7ff fff0 	bl	801d4e8 <HAL_RCC_GetHCLKFreq>
 801d508:	4602      	mov	r2, r0
 801d50a:	4b06      	ldr	r3, [pc, #24]	; (801d524 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d50c:	689b      	ldr	r3, [r3, #8]
 801d50e:	0a1b      	lsrs	r3, r3, #8
 801d510:	f003 0307 	and.w	r3, r3, #7
 801d514:	4904      	ldr	r1, [pc, #16]	; (801d528 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d516:	5ccb      	ldrb	r3, [r1, r3]
 801d518:	f003 031f 	and.w	r3, r3, #31
 801d51c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d520:	4618      	mov	r0, r3
 801d522:	bd80      	pop	{r7, pc}
 801d524:	40021000 	.word	0x40021000
 801d528:	080251b4 	.word	0x080251b4

0801d52c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801d530:	f7ff ffda 	bl	801d4e8 <HAL_RCC_GetHCLKFreq>
 801d534:	4602      	mov	r2, r0
 801d536:	4b06      	ldr	r3, [pc, #24]	; (801d550 <HAL_RCC_GetPCLK2Freq+0x24>)
 801d538:	689b      	ldr	r3, [r3, #8]
 801d53a:	0adb      	lsrs	r3, r3, #11
 801d53c:	f003 0307 	and.w	r3, r3, #7
 801d540:	4904      	ldr	r1, [pc, #16]	; (801d554 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d542:	5ccb      	ldrb	r3, [r1, r3]
 801d544:	f003 031f 	and.w	r3, r3, #31
 801d548:	fa22 f303 	lsr.w	r3, r2, r3
}
 801d54c:	4618      	mov	r0, r3
 801d54e:	bd80      	pop	{r7, pc}
 801d550:	40021000 	.word	0x40021000
 801d554:	080251b4 	.word	0x080251b4

0801d558 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801d558:	b480      	push	{r7}
 801d55a:	b087      	sub	sp, #28
 801d55c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801d55e:	4b1e      	ldr	r3, [pc, #120]	; (801d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d560:	68db      	ldr	r3, [r3, #12]
 801d562:	f003 0303 	and.w	r3, r3, #3
 801d566:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801d568:	4b1b      	ldr	r3, [pc, #108]	; (801d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d56a:	68db      	ldr	r3, [r3, #12]
 801d56c:	091b      	lsrs	r3, r3, #4
 801d56e:	f003 030f 	and.w	r3, r3, #15
 801d572:	3301      	adds	r3, #1
 801d574:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801d576:	693b      	ldr	r3, [r7, #16]
 801d578:	2b03      	cmp	r3, #3
 801d57a:	d10c      	bne.n	801d596 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d57c:	4a17      	ldr	r2, [pc, #92]	; (801d5dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d57e:	68fb      	ldr	r3, [r7, #12]
 801d580:	fbb2 f3f3 	udiv	r3, r2, r3
 801d584:	4a14      	ldr	r2, [pc, #80]	; (801d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d586:	68d2      	ldr	r2, [r2, #12]
 801d588:	0a12      	lsrs	r2, r2, #8
 801d58a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d58e:	fb02 f303 	mul.w	r3, r2, r3
 801d592:	617b      	str	r3, [r7, #20]
    break;
 801d594:	e00c      	b.n	801d5b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801d596:	4a11      	ldr	r2, [pc, #68]	; (801d5dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	fbb2 f3f3 	udiv	r3, r2, r3
 801d59e:	4a0e      	ldr	r2, [pc, #56]	; (801d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5a0:	68d2      	ldr	r2, [r2, #12]
 801d5a2:	0a12      	lsrs	r2, r2, #8
 801d5a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801d5a8:	fb02 f303 	mul.w	r3, r2, r3
 801d5ac:	617b      	str	r3, [r7, #20]
    break;
 801d5ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801d5b0:	4b09      	ldr	r3, [pc, #36]	; (801d5d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801d5b2:	68db      	ldr	r3, [r3, #12]
 801d5b4:	0e5b      	lsrs	r3, r3, #25
 801d5b6:	f003 0303 	and.w	r3, r3, #3
 801d5ba:	3301      	adds	r3, #1
 801d5bc:	005b      	lsls	r3, r3, #1
 801d5be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801d5c0:	697a      	ldr	r2, [r7, #20]
 801d5c2:	68bb      	ldr	r3, [r7, #8]
 801d5c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801d5c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801d5ca:	687b      	ldr	r3, [r7, #4]
}
 801d5cc:	4618      	mov	r0, r3
 801d5ce:	371c      	adds	r7, #28
 801d5d0:	46bd      	mov	sp, r7
 801d5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5d6:	4770      	bx	lr
 801d5d8:	40021000 	.word	0x40021000
 801d5dc:	00f42400 	.word	0x00f42400

0801d5e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d5e0:	b580      	push	{r7, lr}
 801d5e2:	b086      	sub	sp, #24
 801d5e4:	af00      	add	r7, sp, #0
 801d5e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d5e8:	2300      	movs	r3, #0
 801d5ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d5f0:	687b      	ldr	r3, [r7, #4]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	f000 8098 	beq.w	801d72e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801d5fe:	2300      	movs	r3, #0
 801d600:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801d602:	4b43      	ldr	r3, [pc, #268]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d10d      	bne.n	801d62a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801d60e:	4b40      	ldr	r3, [pc, #256]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d612:	4a3f      	ldr	r2, [pc, #252]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d618:	6593      	str	r3, [r2, #88]	; 0x58
 801d61a:	4b3d      	ldr	r3, [pc, #244]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d61c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d61e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d622:	60bb      	str	r3, [r7, #8]
 801d624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801d626:	2301      	movs	r3, #1
 801d628:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d62a:	4b3a      	ldr	r3, [pc, #232]	; (801d714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	4a39      	ldr	r2, [pc, #228]	; (801d714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d636:	f7fc f80f 	bl	8019658 <HAL_GetTick>
 801d63a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d63c:	e009      	b.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d63e:	f7fc f80b 	bl	8019658 <HAL_GetTick>
 801d642:	4602      	mov	r2, r0
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	1ad3      	subs	r3, r2, r3
 801d648:	2b02      	cmp	r3, #2
 801d64a:	d902      	bls.n	801d652 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801d64c:	2303      	movs	r3, #3
 801d64e:	74fb      	strb	r3, [r7, #19]
        break;
 801d650:	e005      	b.n	801d65e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d652:	4b30      	ldr	r3, [pc, #192]	; (801d714 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801d654:	681b      	ldr	r3, [r3, #0]
 801d656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d65a:	2b00      	cmp	r3, #0
 801d65c:	d0ef      	beq.n	801d63e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801d65e:	7cfb      	ldrb	r3, [r7, #19]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d159      	bne.n	801d718 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801d664:	4b2a      	ldr	r3, [pc, #168]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d66a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d66e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801d670:	697b      	ldr	r3, [r7, #20]
 801d672:	2b00      	cmp	r3, #0
 801d674:	d01e      	beq.n	801d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d67a:	697a      	ldr	r2, [r7, #20]
 801d67c:	429a      	cmp	r2, r3
 801d67e:	d019      	beq.n	801d6b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801d680:	4b23      	ldr	r3, [pc, #140]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d68a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d68c:	4b20      	ldr	r3, [pc, #128]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d68e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d692:	4a1f      	ldr	r2, [pc, #124]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d69c:	4b1c      	ldr	r3, [pc, #112]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d69e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6a2:	4a1b      	ldr	r2, [pc, #108]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d6a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801d6ac:	4a18      	ldr	r2, [pc, #96]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6ae:	697b      	ldr	r3, [r7, #20]
 801d6b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801d6b4:	697b      	ldr	r3, [r7, #20]
 801d6b6:	f003 0301 	and.w	r3, r3, #1
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d016      	beq.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d6be:	f7fb ffcb 	bl	8019658 <HAL_GetTick>
 801d6c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d6c4:	e00b      	b.n	801d6de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d6c6:	f7fb ffc7 	bl	8019658 <HAL_GetTick>
 801d6ca:	4602      	mov	r2, r0
 801d6cc:	68fb      	ldr	r3, [r7, #12]
 801d6ce:	1ad3      	subs	r3, r2, r3
 801d6d0:	f241 3288 	movw	r2, #5000	; 0x1388
 801d6d4:	4293      	cmp	r3, r2
 801d6d6:	d902      	bls.n	801d6de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801d6d8:	2303      	movs	r3, #3
 801d6da:	74fb      	strb	r3, [r7, #19]
            break;
 801d6dc:	e006      	b.n	801d6ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801d6de:	4b0c      	ldr	r3, [pc, #48]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6e4:	f003 0302 	and.w	r3, r3, #2
 801d6e8:	2b00      	cmp	r3, #0
 801d6ea:	d0ec      	beq.n	801d6c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801d6ec:	7cfb      	ldrb	r3, [r7, #19]
 801d6ee:	2b00      	cmp	r3, #0
 801d6f0:	d10b      	bne.n	801d70a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d6f2:	4b07      	ldr	r3, [pc, #28]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d6f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d6f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d6fc:	687b      	ldr	r3, [r7, #4]
 801d6fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d700:	4903      	ldr	r1, [pc, #12]	; (801d710 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801d702:	4313      	orrs	r3, r2
 801d704:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d708:	e008      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d70a:	7cfb      	ldrb	r3, [r7, #19]
 801d70c:	74bb      	strb	r3, [r7, #18]
 801d70e:	e005      	b.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801d710:	40021000 	.word	0x40021000
 801d714:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d718:	7cfb      	ldrb	r3, [r7, #19]
 801d71a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801d71c:	7c7b      	ldrb	r3, [r7, #17]
 801d71e:	2b01      	cmp	r3, #1
 801d720:	d105      	bne.n	801d72e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801d722:	4ba7      	ldr	r3, [pc, #668]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d726:	4aa6      	ldr	r2, [pc, #664]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d728:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d72c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d72e:	687b      	ldr	r3, [r7, #4]
 801d730:	681b      	ldr	r3, [r3, #0]
 801d732:	f003 0301 	and.w	r3, r3, #1
 801d736:	2b00      	cmp	r3, #0
 801d738:	d00a      	beq.n	801d750 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d73a:	4ba1      	ldr	r3, [pc, #644]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d73c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d740:	f023 0203 	bic.w	r2, r3, #3
 801d744:	687b      	ldr	r3, [r7, #4]
 801d746:	685b      	ldr	r3, [r3, #4]
 801d748:	499d      	ldr	r1, [pc, #628]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d74a:	4313      	orrs	r3, r2
 801d74c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d750:	687b      	ldr	r3, [r7, #4]
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	f003 0302 	and.w	r3, r3, #2
 801d758:	2b00      	cmp	r3, #0
 801d75a:	d00a      	beq.n	801d772 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d75c:	4b98      	ldr	r3, [pc, #608]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d75e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d762:	f023 020c 	bic.w	r2, r3, #12
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	689b      	ldr	r3, [r3, #8]
 801d76a:	4995      	ldr	r1, [pc, #596]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d76c:	4313      	orrs	r3, r2
 801d76e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d772:	687b      	ldr	r3, [r7, #4]
 801d774:	681b      	ldr	r3, [r3, #0]
 801d776:	f003 0304 	and.w	r3, r3, #4
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d00a      	beq.n	801d794 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d77e:	4b90      	ldr	r3, [pc, #576]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d784:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	68db      	ldr	r3, [r3, #12]
 801d78c:	498c      	ldr	r1, [pc, #560]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d78e:	4313      	orrs	r3, r2
 801d790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d794:	687b      	ldr	r3, [r7, #4]
 801d796:	681b      	ldr	r3, [r3, #0]
 801d798:	f003 0308 	and.w	r3, r3, #8
 801d79c:	2b00      	cmp	r3, #0
 801d79e:	d00a      	beq.n	801d7b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d7a0:	4b87      	ldr	r3, [pc, #540]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	691b      	ldr	r3, [r3, #16]
 801d7ae:	4984      	ldr	r1, [pc, #528]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7b0:	4313      	orrs	r3, r2
 801d7b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d7b6:	687b      	ldr	r3, [r7, #4]
 801d7b8:	681b      	ldr	r3, [r3, #0]
 801d7ba:	f003 0310 	and.w	r3, r3, #16
 801d7be:	2b00      	cmp	r3, #0
 801d7c0:	d00a      	beq.n	801d7d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d7c2:	4b7f      	ldr	r3, [pc, #508]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d7cc:	687b      	ldr	r3, [r7, #4]
 801d7ce:	695b      	ldr	r3, [r3, #20]
 801d7d0:	497b      	ldr	r1, [pc, #492]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7d2:	4313      	orrs	r3, r2
 801d7d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d7d8:	687b      	ldr	r3, [r7, #4]
 801d7da:	681b      	ldr	r3, [r3, #0]
 801d7dc:	f003 0320 	and.w	r3, r3, #32
 801d7e0:	2b00      	cmp	r3, #0
 801d7e2:	d00a      	beq.n	801d7fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d7e4:	4b76      	ldr	r3, [pc, #472]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d7ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	699b      	ldr	r3, [r3, #24]
 801d7f2:	4973      	ldr	r1, [pc, #460]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d7f4:	4313      	orrs	r3, r2
 801d7f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d7fa:	687b      	ldr	r3, [r7, #4]
 801d7fc:	681b      	ldr	r3, [r3, #0]
 801d7fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d802:	2b00      	cmp	r3, #0
 801d804:	d00a      	beq.n	801d81c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d806:	4b6e      	ldr	r3, [pc, #440]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d80c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	69db      	ldr	r3, [r3, #28]
 801d814:	496a      	ldr	r1, [pc, #424]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d816:	4313      	orrs	r3, r2
 801d818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d81c:	687b      	ldr	r3, [r7, #4]
 801d81e:	681b      	ldr	r3, [r3, #0]
 801d820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d824:	2b00      	cmp	r3, #0
 801d826:	d00a      	beq.n	801d83e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d828:	4b65      	ldr	r3, [pc, #404]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d82a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d82e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	6a1b      	ldr	r3, [r3, #32]
 801d836:	4962      	ldr	r1, [pc, #392]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d838:	4313      	orrs	r3, r2
 801d83a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d846:	2b00      	cmp	r3, #0
 801d848:	d00a      	beq.n	801d860 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d84a:	4b5d      	ldr	r3, [pc, #372]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d84c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d850:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d858:	4959      	ldr	r1, [pc, #356]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d85a:	4313      	orrs	r3, r2
 801d85c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d860:	687b      	ldr	r3, [r7, #4]
 801d862:	681b      	ldr	r3, [r3, #0]
 801d864:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d868:	2b00      	cmp	r3, #0
 801d86a:	d00a      	beq.n	801d882 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d86c:	4b54      	ldr	r3, [pc, #336]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d86e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d872:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d87a:	4951      	ldr	r1, [pc, #324]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d87c:	4313      	orrs	r3, r2
 801d87e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	681b      	ldr	r3, [r3, #0]
 801d886:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d015      	beq.n	801d8ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d88e:	4b4c      	ldr	r3, [pc, #304]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d89c:	4948      	ldr	r1, [pc, #288]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d89e:	4313      	orrs	r3, r2
 801d8a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801d8a4:	687b      	ldr	r3, [r7, #4]
 801d8a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d8a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d8ac:	d105      	bne.n	801d8ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d8ae:	4b44      	ldr	r3, [pc, #272]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8b0:	68db      	ldr	r3, [r3, #12]
 801d8b2:	4a43      	ldr	r2, [pc, #268]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d8b8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d8c2:	2b00      	cmp	r3, #0
 801d8c4:	d015      	beq.n	801d8f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801d8c6:	4b3e      	ldr	r3, [pc, #248]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d8cc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d8d0:	687b      	ldr	r3, [r7, #4]
 801d8d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8d4:	493a      	ldr	r1, [pc, #232]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8d6:	4313      	orrs	r3, r2
 801d8d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d8e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d8e4:	d105      	bne.n	801d8f2 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d8e6:	4b36      	ldr	r3, [pc, #216]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8e8:	68db      	ldr	r3, [r3, #12]
 801d8ea:	4a35      	ldr	r2, [pc, #212]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d8ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d8f0:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	d015      	beq.n	801d92a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d8fe:	4b30      	ldr	r3, [pc, #192]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d904:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d90c:	492c      	ldr	r1, [pc, #176]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d90e:	4313      	orrs	r3, r2
 801d910:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d91c:	d105      	bne.n	801d92a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d91e:	4b28      	ldr	r3, [pc, #160]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d920:	68db      	ldr	r3, [r3, #12]
 801d922:	4a27      	ldr	r2, [pc, #156]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d928:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	681b      	ldr	r3, [r3, #0]
 801d92e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d932:	2b00      	cmp	r3, #0
 801d934:	d015      	beq.n	801d962 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d936:	4b22      	ldr	r3, [pc, #136]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d93c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d944:	491e      	ldr	r1, [pc, #120]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d946:	4313      	orrs	r3, r2
 801d948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d950:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d954:	d105      	bne.n	801d962 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d956:	4b1a      	ldr	r3, [pc, #104]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d958:	68db      	ldr	r3, [r3, #12]
 801d95a:	4a19      	ldr	r2, [pc, #100]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d95c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d960:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801d962:	687b      	ldr	r3, [r7, #4]
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d015      	beq.n	801d99a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d96e:	4b14      	ldr	r3, [pc, #80]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d974:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d97c:	4910      	ldr	r1, [pc, #64]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d97e:	4313      	orrs	r3, r2
 801d980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d98c:	d105      	bne.n	801d99a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801d98e:	4b0c      	ldr	r3, [pc, #48]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d990:	68db      	ldr	r3, [r3, #12]
 801d992:	4a0b      	ldr	r2, [pc, #44]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d998:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d9a2:	2b00      	cmp	r3, #0
 801d9a4:	d018      	beq.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801d9a6:	4b06      	ldr	r3, [pc, #24]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801d9b0:	687b      	ldr	r3, [r7, #4]
 801d9b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9b4:	4902      	ldr	r1, [pc, #8]	; (801d9c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801d9b6:	4313      	orrs	r3, r2
 801d9b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801d9bc:	687b      	ldr	r3, [r7, #4]
 801d9be:	e001      	b.n	801d9c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801d9c0:	40021000 	.word	0x40021000
 801d9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d9ca:	d105      	bne.n	801d9d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801d9cc:	4b21      	ldr	r3, [pc, #132]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d9ce:	68db      	ldr	r3, [r3, #12]
 801d9d0:	4a20      	ldr	r2, [pc, #128]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d9d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d9d6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801d9d8:	687b      	ldr	r3, [r7, #4]
 801d9da:	681b      	ldr	r3, [r3, #0]
 801d9dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d015      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801d9e4:	4b1b      	ldr	r3, [pc, #108]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d9e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d9ea:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9f2:	4918      	ldr	r1, [pc, #96]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801d9f4:	4313      	orrs	r3, r2
 801d9f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801da02:	d105      	bne.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801da04:	4b13      	ldr	r3, [pc, #76]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da06:	68db      	ldr	r3, [r3, #12]
 801da08:	4a12      	ldr	r2, [pc, #72]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801da0e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801da10:	687b      	ldr	r3, [r7, #4]
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801da18:	2b00      	cmp	r3, #0
 801da1a:	d015      	beq.n	801da48 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801da1c:	4b0d      	ldr	r3, [pc, #52]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801da22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801da26:	687b      	ldr	r3, [r7, #4]
 801da28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da2a:	490a      	ldr	r1, [pc, #40]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da2c:	4313      	orrs	r3, r2
 801da2e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801da32:	687b      	ldr	r3, [r7, #4]
 801da34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801da36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801da3a:	d105      	bne.n	801da48 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801da3c:	4b05      	ldr	r3, [pc, #20]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da3e:	68db      	ldr	r3, [r3, #12]
 801da40:	4a04      	ldr	r2, [pc, #16]	; (801da54 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801da42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801da46:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801da48:	7cbb      	ldrb	r3, [r7, #18]
}
 801da4a:	4618      	mov	r0, r3
 801da4c:	3718      	adds	r7, #24
 801da4e:	46bd      	mov	sp, r7
 801da50:	bd80      	pop	{r7, pc}
 801da52:	bf00      	nop
 801da54:	40021000 	.word	0x40021000

0801da58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801da58:	b580      	push	{r7, lr}
 801da5a:	b084      	sub	sp, #16
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	2b00      	cmp	r3, #0
 801da64:	d101      	bne.n	801da6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801da66:	2301      	movs	r3, #1
 801da68:	e09d      	b.n	801dba6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801da6a:	687b      	ldr	r3, [r7, #4]
 801da6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da6e:	2b00      	cmp	r3, #0
 801da70:	d108      	bne.n	801da84 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801da72:	687b      	ldr	r3, [r7, #4]
 801da74:	685b      	ldr	r3, [r3, #4]
 801da76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801da7a:	d009      	beq.n	801da90 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801da7c:	687b      	ldr	r3, [r7, #4]
 801da7e:	2200      	movs	r2, #0
 801da80:	61da      	str	r2, [r3, #28]
 801da82:	e005      	b.n	801da90 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	2200      	movs	r2, #0
 801da88:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	2200      	movs	r2, #0
 801da8e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801da90:	687b      	ldr	r3, [r7, #4]
 801da92:	2200      	movs	r2, #0
 801da94:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801da9c:	b2db      	uxtb	r3, r3
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d106      	bne.n	801dab0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801daa2:	687b      	ldr	r3, [r7, #4]
 801daa4:	2200      	movs	r2, #0
 801daa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801daaa:	6878      	ldr	r0, [r7, #4]
 801daac:	f7fa f8f2 	bl	8017c94 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	2202      	movs	r2, #2
 801dab4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801dab8:	687b      	ldr	r3, [r7, #4]
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	681a      	ldr	r2, [r3, #0]
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	681b      	ldr	r3, [r3, #0]
 801dac2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dac6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	68db      	ldr	r3, [r3, #12]
 801dacc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dad0:	d902      	bls.n	801dad8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801dad2:	2300      	movs	r3, #0
 801dad4:	60fb      	str	r3, [r7, #12]
 801dad6:	e002      	b.n	801dade <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801dad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801dadc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801dade:	687b      	ldr	r3, [r7, #4]
 801dae0:	68db      	ldr	r3, [r3, #12]
 801dae2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801dae6:	d007      	beq.n	801daf8 <HAL_SPI_Init+0xa0>
 801dae8:	687b      	ldr	r3, [r7, #4]
 801daea:	68db      	ldr	r3, [r3, #12]
 801daec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801daf0:	d002      	beq.n	801daf8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801daf2:	687b      	ldr	r3, [r7, #4]
 801daf4:	2200      	movs	r2, #0
 801daf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801daf8:	687b      	ldr	r3, [r7, #4]
 801dafa:	685b      	ldr	r3, [r3, #4]
 801dafc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801db00:	687b      	ldr	r3, [r7, #4]
 801db02:	689b      	ldr	r3, [r3, #8]
 801db04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801db08:	431a      	orrs	r2, r3
 801db0a:	687b      	ldr	r3, [r7, #4]
 801db0c:	691b      	ldr	r3, [r3, #16]
 801db0e:	f003 0302 	and.w	r3, r3, #2
 801db12:	431a      	orrs	r2, r3
 801db14:	687b      	ldr	r3, [r7, #4]
 801db16:	695b      	ldr	r3, [r3, #20]
 801db18:	f003 0301 	and.w	r3, r3, #1
 801db1c:	431a      	orrs	r2, r3
 801db1e:	687b      	ldr	r3, [r7, #4]
 801db20:	699b      	ldr	r3, [r3, #24]
 801db22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801db26:	431a      	orrs	r2, r3
 801db28:	687b      	ldr	r3, [r7, #4]
 801db2a:	69db      	ldr	r3, [r3, #28]
 801db2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801db30:	431a      	orrs	r2, r3
 801db32:	687b      	ldr	r3, [r7, #4]
 801db34:	6a1b      	ldr	r3, [r3, #32]
 801db36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801db3a:	ea42 0103 	orr.w	r1, r2, r3
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db42:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	681b      	ldr	r3, [r3, #0]
 801db4a:	430a      	orrs	r2, r1
 801db4c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801db4e:	687b      	ldr	r3, [r7, #4]
 801db50:	699b      	ldr	r3, [r3, #24]
 801db52:	0c1b      	lsrs	r3, r3, #16
 801db54:	f003 0204 	and.w	r2, r3, #4
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801db5c:	f003 0310 	and.w	r3, r3, #16
 801db60:	431a      	orrs	r2, r3
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801db66:	f003 0308 	and.w	r3, r3, #8
 801db6a:	431a      	orrs	r2, r3
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	68db      	ldr	r3, [r3, #12]
 801db70:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801db74:	ea42 0103 	orr.w	r1, r2, r3
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801db7e:	687b      	ldr	r3, [r7, #4]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	430a      	orrs	r2, r1
 801db84:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801db86:	687b      	ldr	r3, [r7, #4]
 801db88:	681b      	ldr	r3, [r3, #0]
 801db8a:	69da      	ldr	r2, [r3, #28]
 801db8c:	687b      	ldr	r3, [r7, #4]
 801db8e:	681b      	ldr	r3, [r3, #0]
 801db90:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801db94:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	2200      	movs	r2, #0
 801db9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	2201      	movs	r2, #1
 801dba0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801dba4:	2300      	movs	r3, #0
}
 801dba6:	4618      	mov	r0, r3
 801dba8:	3710      	adds	r7, #16
 801dbaa:	46bd      	mov	sp, r7
 801dbac:	bd80      	pop	{r7, pc}

0801dbae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dbae:	b580      	push	{r7, lr}
 801dbb0:	b088      	sub	sp, #32
 801dbb2:	af00      	add	r7, sp, #0
 801dbb4:	60f8      	str	r0, [r7, #12]
 801dbb6:	60b9      	str	r1, [r7, #8]
 801dbb8:	603b      	str	r3, [r7, #0]
 801dbba:	4613      	mov	r3, r2
 801dbbc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801dbbe:	2300      	movs	r3, #0
 801dbc0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801dbc2:	68fb      	ldr	r3, [r7, #12]
 801dbc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801dbc8:	2b01      	cmp	r3, #1
 801dbca:	d101      	bne.n	801dbd0 <HAL_SPI_Transmit+0x22>
 801dbcc:	2302      	movs	r3, #2
 801dbce:	e158      	b.n	801de82 <HAL_SPI_Transmit+0x2d4>
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	2201      	movs	r2, #1
 801dbd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801dbd8:	f7fb fd3e 	bl	8019658 <HAL_GetTick>
 801dbdc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801dbde:	88fb      	ldrh	r3, [r7, #6]
 801dbe0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801dbe2:	68fb      	ldr	r3, [r7, #12]
 801dbe4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801dbe8:	b2db      	uxtb	r3, r3
 801dbea:	2b01      	cmp	r3, #1
 801dbec:	d002      	beq.n	801dbf4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801dbee:	2302      	movs	r3, #2
 801dbf0:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dbf2:	e13d      	b.n	801de70 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801dbf4:	68bb      	ldr	r3, [r7, #8]
 801dbf6:	2b00      	cmp	r3, #0
 801dbf8:	d002      	beq.n	801dc00 <HAL_SPI_Transmit+0x52>
 801dbfa:	88fb      	ldrh	r3, [r7, #6]
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d102      	bne.n	801dc06 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801dc00:	2301      	movs	r3, #1
 801dc02:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dc04:	e134      	b.n	801de70 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801dc06:	68fb      	ldr	r3, [r7, #12]
 801dc08:	2203      	movs	r2, #3
 801dc0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801dc0e:	68fb      	ldr	r3, [r7, #12]
 801dc10:	2200      	movs	r2, #0
 801dc12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	68ba      	ldr	r2, [r7, #8]
 801dc18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	88fa      	ldrh	r2, [r7, #6]
 801dc1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	88fa      	ldrh	r2, [r7, #6]
 801dc24:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801dc26:	68fb      	ldr	r3, [r7, #12]
 801dc28:	2200      	movs	r2, #0
 801dc2a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	2200      	movs	r2, #0
 801dc30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	2200      	movs	r2, #0
 801dc38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801dc3c:	68fb      	ldr	r3, [r7, #12]
 801dc3e:	2200      	movs	r2, #0
 801dc40:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	2200      	movs	r2, #0
 801dc46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	689b      	ldr	r3, [r3, #8]
 801dc4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc50:	d10f      	bne.n	801dc72 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	681b      	ldr	r3, [r3, #0]
 801dc56:	681a      	ldr	r2, [r3, #0]
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dc60:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	681a      	ldr	r2, [r3, #0]
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	681b      	ldr	r3, [r3, #0]
 801dc6c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801dc70:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dc7c:	2b40      	cmp	r3, #64	; 0x40
 801dc7e:	d007      	beq.n	801dc90 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801dc80:	68fb      	ldr	r3, [r7, #12]
 801dc82:	681b      	ldr	r3, [r3, #0]
 801dc84:	681a      	ldr	r2, [r3, #0]
 801dc86:	68fb      	ldr	r3, [r7, #12]
 801dc88:	681b      	ldr	r3, [r3, #0]
 801dc8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dc8e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801dc90:	68fb      	ldr	r3, [r7, #12]
 801dc92:	68db      	ldr	r3, [r3, #12]
 801dc94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dc98:	d94b      	bls.n	801dd32 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dc9a:	68fb      	ldr	r3, [r7, #12]
 801dc9c:	685b      	ldr	r3, [r3, #4]
 801dc9e:	2b00      	cmp	r3, #0
 801dca0:	d002      	beq.n	801dca8 <HAL_SPI_Transmit+0xfa>
 801dca2:	8afb      	ldrh	r3, [r7, #22]
 801dca4:	2b01      	cmp	r3, #1
 801dca6:	d13e      	bne.n	801dd26 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcac:	881a      	ldrh	r2, [r3, #0]
 801dcae:	68fb      	ldr	r3, [r7, #12]
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb8:	1c9a      	adds	r2, r3, #2
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcc2:	b29b      	uxth	r3, r3
 801dcc4:	3b01      	subs	r3, #1
 801dcc6:	b29a      	uxth	r2, r3
 801dcc8:	68fb      	ldr	r3, [r7, #12]
 801dcca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801dccc:	e02b      	b.n	801dd26 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dcce:	68fb      	ldr	r3, [r7, #12]
 801dcd0:	681b      	ldr	r3, [r3, #0]
 801dcd2:	689b      	ldr	r3, [r3, #8]
 801dcd4:	f003 0302 	and.w	r3, r3, #2
 801dcd8:	2b02      	cmp	r3, #2
 801dcda:	d112      	bne.n	801dd02 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dcdc:	68fb      	ldr	r3, [r7, #12]
 801dcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dce0:	881a      	ldrh	r2, [r3, #0]
 801dce2:	68fb      	ldr	r3, [r7, #12]
 801dce4:	681b      	ldr	r3, [r3, #0]
 801dce6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcec:	1c9a      	adds	r2, r3, #2
 801dcee:	68fb      	ldr	r3, [r7, #12]
 801dcf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dcf2:	68fb      	ldr	r3, [r7, #12]
 801dcf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcf6:	b29b      	uxth	r3, r3
 801dcf8:	3b01      	subs	r3, #1
 801dcfa:	b29a      	uxth	r2, r3
 801dcfc:	68fb      	ldr	r3, [r7, #12]
 801dcfe:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dd00:	e011      	b.n	801dd26 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801dd02:	f7fb fca9 	bl	8019658 <HAL_GetTick>
 801dd06:	4602      	mov	r2, r0
 801dd08:	69bb      	ldr	r3, [r7, #24]
 801dd0a:	1ad3      	subs	r3, r2, r3
 801dd0c:	683a      	ldr	r2, [r7, #0]
 801dd0e:	429a      	cmp	r2, r3
 801dd10:	d803      	bhi.n	801dd1a <HAL_SPI_Transmit+0x16c>
 801dd12:	683b      	ldr	r3, [r7, #0]
 801dd14:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dd18:	d102      	bne.n	801dd20 <HAL_SPI_Transmit+0x172>
 801dd1a:	683b      	ldr	r3, [r7, #0]
 801dd1c:	2b00      	cmp	r3, #0
 801dd1e:	d102      	bne.n	801dd26 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801dd20:	2303      	movs	r3, #3
 801dd22:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dd24:	e0a4      	b.n	801de70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd2a:	b29b      	uxth	r3, r3
 801dd2c:	2b00      	cmp	r3, #0
 801dd2e:	d1ce      	bne.n	801dcce <HAL_SPI_Transmit+0x120>
 801dd30:	e07c      	b.n	801de2c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dd32:	68fb      	ldr	r3, [r7, #12]
 801dd34:	685b      	ldr	r3, [r3, #4]
 801dd36:	2b00      	cmp	r3, #0
 801dd38:	d002      	beq.n	801dd40 <HAL_SPI_Transmit+0x192>
 801dd3a:	8afb      	ldrh	r3, [r7, #22]
 801dd3c:	2b01      	cmp	r3, #1
 801dd3e:	d170      	bne.n	801de22 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801dd40:	68fb      	ldr	r3, [r7, #12]
 801dd42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd44:	b29b      	uxth	r3, r3
 801dd46:	2b01      	cmp	r3, #1
 801dd48:	d912      	bls.n	801dd70 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd4a:	68fb      	ldr	r3, [r7, #12]
 801dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd4e:	881a      	ldrh	r2, [r3, #0]
 801dd50:	68fb      	ldr	r3, [r7, #12]
 801dd52:	681b      	ldr	r3, [r3, #0]
 801dd54:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd5a:	1c9a      	adds	r2, r3, #2
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd64:	b29b      	uxth	r3, r3
 801dd66:	3b02      	subs	r3, #2
 801dd68:	b29a      	uxth	r2, r3
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dd6e:	e058      	b.n	801de22 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801dd70:	68fb      	ldr	r3, [r7, #12]
 801dd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dd74:	68fb      	ldr	r3, [r7, #12]
 801dd76:	681b      	ldr	r3, [r3, #0]
 801dd78:	330c      	adds	r3, #12
 801dd7a:	7812      	ldrb	r2, [r2, #0]
 801dd7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801dd7e:	68fb      	ldr	r3, [r7, #12]
 801dd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd82:	1c5a      	adds	r2, r3, #1
 801dd84:	68fb      	ldr	r3, [r7, #12]
 801dd86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dd88:	68fb      	ldr	r3, [r7, #12]
 801dd8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd8c:	b29b      	uxth	r3, r3
 801dd8e:	3b01      	subs	r3, #1
 801dd90:	b29a      	uxth	r2, r3
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801dd96:	e044      	b.n	801de22 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	689b      	ldr	r3, [r3, #8]
 801dd9e:	f003 0302 	and.w	r3, r3, #2
 801dda2:	2b02      	cmp	r3, #2
 801dda4:	d12b      	bne.n	801ddfe <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddaa:	b29b      	uxth	r3, r3
 801ddac:	2b01      	cmp	r3, #1
 801ddae:	d912      	bls.n	801ddd6 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddb4:	881a      	ldrh	r2, [r3, #0]
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	681b      	ldr	r3, [r3, #0]
 801ddba:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddc0:	1c9a      	adds	r2, r3, #2
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801ddc6:	68fb      	ldr	r3, [r7, #12]
 801ddc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddca:	b29b      	uxth	r3, r3
 801ddcc:	3b02      	subs	r3, #2
 801ddce:	b29a      	uxth	r2, r3
 801ddd0:	68fb      	ldr	r3, [r7, #12]
 801ddd2:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ddd4:	e025      	b.n	801de22 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ddda:	68fb      	ldr	r3, [r7, #12]
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	330c      	adds	r3, #12
 801dde0:	7812      	ldrb	r2, [r2, #0]
 801dde2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dde8:	1c5a      	adds	r2, r3, #1
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801ddee:	68fb      	ldr	r3, [r7, #12]
 801ddf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ddf2:	b29b      	uxth	r3, r3
 801ddf4:	3b01      	subs	r3, #1
 801ddf6:	b29a      	uxth	r2, r3
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ddfc:	e011      	b.n	801de22 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801ddfe:	f7fb fc2b 	bl	8019658 <HAL_GetTick>
 801de02:	4602      	mov	r2, r0
 801de04:	69bb      	ldr	r3, [r7, #24]
 801de06:	1ad3      	subs	r3, r2, r3
 801de08:	683a      	ldr	r2, [r7, #0]
 801de0a:	429a      	cmp	r2, r3
 801de0c:	d803      	bhi.n	801de16 <HAL_SPI_Transmit+0x268>
 801de0e:	683b      	ldr	r3, [r7, #0]
 801de10:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de14:	d102      	bne.n	801de1c <HAL_SPI_Transmit+0x26e>
 801de16:	683b      	ldr	r3, [r7, #0]
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d102      	bne.n	801de22 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801de1c:	2303      	movs	r3, #3
 801de1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 801de20:	e026      	b.n	801de70 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801de22:	68fb      	ldr	r3, [r7, #12]
 801de24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de26:	b29b      	uxth	r3, r3
 801de28:	2b00      	cmp	r3, #0
 801de2a:	d1b5      	bne.n	801dd98 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801de2c:	69ba      	ldr	r2, [r7, #24]
 801de2e:	6839      	ldr	r1, [r7, #0]
 801de30:	68f8      	ldr	r0, [r7, #12]
 801de32:	f000 fce3 	bl	801e7fc <SPI_EndRxTxTransaction>
 801de36:	4603      	mov	r3, r0
 801de38:	2b00      	cmp	r3, #0
 801de3a:	d002      	beq.n	801de42 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	2220      	movs	r2, #32
 801de40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	689b      	ldr	r3, [r3, #8]
 801de46:	2b00      	cmp	r3, #0
 801de48:	d10a      	bne.n	801de60 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801de4a:	2300      	movs	r3, #0
 801de4c:	613b      	str	r3, [r7, #16]
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	68db      	ldr	r3, [r3, #12]
 801de54:	613b      	str	r3, [r7, #16]
 801de56:	68fb      	ldr	r3, [r7, #12]
 801de58:	681b      	ldr	r3, [r3, #0]
 801de5a:	689b      	ldr	r3, [r3, #8]
 801de5c:	613b      	str	r3, [r7, #16]
 801de5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801de60:	68fb      	ldr	r3, [r7, #12]
 801de62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801de64:	2b00      	cmp	r3, #0
 801de66:	d002      	beq.n	801de6e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801de68:	2301      	movs	r3, #1
 801de6a:	77fb      	strb	r3, [r7, #31]
 801de6c:	e000      	b.n	801de70 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801de6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801de70:	68fb      	ldr	r3, [r7, #12]
 801de72:	2201      	movs	r2, #1
 801de74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	2200      	movs	r2, #0
 801de7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801de80:	7ffb      	ldrb	r3, [r7, #31]
}
 801de82:	4618      	mov	r0, r3
 801de84:	3720      	adds	r7, #32
 801de86:	46bd      	mov	sp, r7
 801de88:	bd80      	pop	{r7, pc}

0801de8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801de8a:	b580      	push	{r7, lr}
 801de8c:	b088      	sub	sp, #32
 801de8e:	af02      	add	r7, sp, #8
 801de90:	60f8      	str	r0, [r7, #12]
 801de92:	60b9      	str	r1, [r7, #8]
 801de94:	603b      	str	r3, [r7, #0]
 801de96:	4613      	mov	r3, r2
 801de98:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801de9a:	2300      	movs	r3, #0
 801de9c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801de9e:	68fb      	ldr	r3, [r7, #12]
 801dea0:	685b      	ldr	r3, [r3, #4]
 801dea2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dea6:	d112      	bne.n	801dece <HAL_SPI_Receive+0x44>
 801dea8:	68fb      	ldr	r3, [r7, #12]
 801deaa:	689b      	ldr	r3, [r3, #8]
 801deac:	2b00      	cmp	r3, #0
 801deae:	d10e      	bne.n	801dece <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	2204      	movs	r2, #4
 801deb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801deb8:	88fa      	ldrh	r2, [r7, #6]
 801deba:	683b      	ldr	r3, [r7, #0]
 801debc:	9300      	str	r3, [sp, #0]
 801debe:	4613      	mov	r3, r2
 801dec0:	68ba      	ldr	r2, [r7, #8]
 801dec2:	68b9      	ldr	r1, [r7, #8]
 801dec4:	68f8      	ldr	r0, [r7, #12]
 801dec6:	f000 f910 	bl	801e0ea <HAL_SPI_TransmitReceive>
 801deca:	4603      	mov	r3, r0
 801decc:	e109      	b.n	801e0e2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801dece:	68fb      	ldr	r3, [r7, #12]
 801ded0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ded4:	2b01      	cmp	r3, #1
 801ded6:	d101      	bne.n	801dedc <HAL_SPI_Receive+0x52>
 801ded8:	2302      	movs	r3, #2
 801deda:	e102      	b.n	801e0e2 <HAL_SPI_Receive+0x258>
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	2201      	movs	r2, #1
 801dee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801dee4:	f7fb fbb8 	bl	8019658 <HAL_GetTick>
 801dee8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801deea:	68fb      	ldr	r3, [r7, #12]
 801deec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801def0:	b2db      	uxtb	r3, r3
 801def2:	2b01      	cmp	r3, #1
 801def4:	d002      	beq.n	801defc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801def6:	2302      	movs	r3, #2
 801def8:	75fb      	strb	r3, [r7, #23]
    goto error;
 801defa:	e0e9      	b.n	801e0d0 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801defc:	68bb      	ldr	r3, [r7, #8]
 801defe:	2b00      	cmp	r3, #0
 801df00:	d002      	beq.n	801df08 <HAL_SPI_Receive+0x7e>
 801df02:	88fb      	ldrh	r3, [r7, #6]
 801df04:	2b00      	cmp	r3, #0
 801df06:	d102      	bne.n	801df0e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801df08:	2301      	movs	r3, #1
 801df0a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801df0c:	e0e0      	b.n	801e0d0 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801df0e:	68fb      	ldr	r3, [r7, #12]
 801df10:	2204      	movs	r2, #4
 801df12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801df16:	68fb      	ldr	r3, [r7, #12]
 801df18:	2200      	movs	r2, #0
 801df1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801df1c:	68fb      	ldr	r3, [r7, #12]
 801df1e:	68ba      	ldr	r2, [r7, #8]
 801df20:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	88fa      	ldrh	r2, [r7, #6]
 801df26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801df2a:	68fb      	ldr	r3, [r7, #12]
 801df2c:	88fa      	ldrh	r2, [r7, #6]
 801df2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801df32:	68fb      	ldr	r3, [r7, #12]
 801df34:	2200      	movs	r2, #0
 801df36:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801df38:	68fb      	ldr	r3, [r7, #12]
 801df3a:	2200      	movs	r2, #0
 801df3c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	2200      	movs	r2, #0
 801df42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	2200      	movs	r2, #0
 801df48:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801df4a:	68fb      	ldr	r3, [r7, #12]
 801df4c:	2200      	movs	r2, #0
 801df4e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801df50:	68fb      	ldr	r3, [r7, #12]
 801df52:	68db      	ldr	r3, [r3, #12]
 801df54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801df58:	d908      	bls.n	801df6c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801df5a:	68fb      	ldr	r3, [r7, #12]
 801df5c:	681b      	ldr	r3, [r3, #0]
 801df5e:	685a      	ldr	r2, [r3, #4]
 801df60:	68fb      	ldr	r3, [r7, #12]
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801df68:	605a      	str	r2, [r3, #4]
 801df6a:	e007      	b.n	801df7c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801df6c:	68fb      	ldr	r3, [r7, #12]
 801df6e:	681b      	ldr	r3, [r3, #0]
 801df70:	685a      	ldr	r2, [r3, #4]
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801df7a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801df7c:	68fb      	ldr	r3, [r7, #12]
 801df7e:	689b      	ldr	r3, [r3, #8]
 801df80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801df84:	d10f      	bne.n	801dfa6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801df86:	68fb      	ldr	r3, [r7, #12]
 801df88:	681b      	ldr	r3, [r3, #0]
 801df8a:	681a      	ldr	r2, [r3, #0]
 801df8c:	68fb      	ldr	r3, [r7, #12]
 801df8e:	681b      	ldr	r3, [r3, #0]
 801df90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801df94:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801df96:	68fb      	ldr	r3, [r7, #12]
 801df98:	681b      	ldr	r3, [r3, #0]
 801df9a:	681a      	ldr	r2, [r3, #0]
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	681b      	ldr	r3, [r3, #0]
 801dfa0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801dfa4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801dfa6:	68fb      	ldr	r3, [r7, #12]
 801dfa8:	681b      	ldr	r3, [r3, #0]
 801dfaa:	681b      	ldr	r3, [r3, #0]
 801dfac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801dfb0:	2b40      	cmp	r3, #64	; 0x40
 801dfb2:	d007      	beq.n	801dfc4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801dfb4:	68fb      	ldr	r3, [r7, #12]
 801dfb6:	681b      	ldr	r3, [r3, #0]
 801dfb8:	681a      	ldr	r2, [r3, #0]
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	681b      	ldr	r3, [r3, #0]
 801dfbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dfc2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801dfc4:	68fb      	ldr	r3, [r7, #12]
 801dfc6:	68db      	ldr	r3, [r3, #12]
 801dfc8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801dfcc:	d867      	bhi.n	801e09e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801dfce:	e030      	b.n	801e032 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801dfd0:	68fb      	ldr	r3, [r7, #12]
 801dfd2:	681b      	ldr	r3, [r3, #0]
 801dfd4:	689b      	ldr	r3, [r3, #8]
 801dfd6:	f003 0301 	and.w	r3, r3, #1
 801dfda:	2b01      	cmp	r3, #1
 801dfdc:	d117      	bne.n	801e00e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801dfde:	68fb      	ldr	r3, [r7, #12]
 801dfe0:	681b      	ldr	r3, [r3, #0]
 801dfe2:	f103 020c 	add.w	r2, r3, #12
 801dfe6:	68fb      	ldr	r3, [r7, #12]
 801dfe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfea:	7812      	ldrb	r2, [r2, #0]
 801dfec:	b2d2      	uxtb	r2, r2
 801dfee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801dff0:	68fb      	ldr	r3, [r7, #12]
 801dff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dff4:	1c5a      	adds	r2, r3, #1
 801dff6:	68fb      	ldr	r3, [r7, #12]
 801dff8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801dffa:	68fb      	ldr	r3, [r7, #12]
 801dffc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e000:	b29b      	uxth	r3, r3
 801e002:	3b01      	subs	r3, #1
 801e004:	b29a      	uxth	r2, r3
 801e006:	68fb      	ldr	r3, [r7, #12]
 801e008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e00c:	e011      	b.n	801e032 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e00e:	f7fb fb23 	bl	8019658 <HAL_GetTick>
 801e012:	4602      	mov	r2, r0
 801e014:	693b      	ldr	r3, [r7, #16]
 801e016:	1ad3      	subs	r3, r2, r3
 801e018:	683a      	ldr	r2, [r7, #0]
 801e01a:	429a      	cmp	r2, r3
 801e01c:	d803      	bhi.n	801e026 <HAL_SPI_Receive+0x19c>
 801e01e:	683b      	ldr	r3, [r7, #0]
 801e020:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e024:	d102      	bne.n	801e02c <HAL_SPI_Receive+0x1a2>
 801e026:	683b      	ldr	r3, [r7, #0]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d102      	bne.n	801e032 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801e02c:	2303      	movs	r3, #3
 801e02e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e030:	e04e      	b.n	801e0d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e032:	68fb      	ldr	r3, [r7, #12]
 801e034:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e038:	b29b      	uxth	r3, r3
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d1c8      	bne.n	801dfd0 <HAL_SPI_Receive+0x146>
 801e03e:	e034      	b.n	801e0aa <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801e040:	68fb      	ldr	r3, [r7, #12]
 801e042:	681b      	ldr	r3, [r3, #0]
 801e044:	689b      	ldr	r3, [r3, #8]
 801e046:	f003 0301 	and.w	r3, r3, #1
 801e04a:	2b01      	cmp	r3, #1
 801e04c:	d115      	bne.n	801e07a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	68da      	ldr	r2, [r3, #12]
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e058:	b292      	uxth	r2, r2
 801e05a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e060:	1c9a      	adds	r2, r3, #2
 801e062:	68fb      	ldr	r3, [r7, #12]
 801e064:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e06c:	b29b      	uxth	r3, r3
 801e06e:	3b01      	subs	r3, #1
 801e070:	b29a      	uxth	r2, r3
 801e072:	68fb      	ldr	r3, [r7, #12]
 801e074:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801e078:	e011      	b.n	801e09e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801e07a:	f7fb faed 	bl	8019658 <HAL_GetTick>
 801e07e:	4602      	mov	r2, r0
 801e080:	693b      	ldr	r3, [r7, #16]
 801e082:	1ad3      	subs	r3, r2, r3
 801e084:	683a      	ldr	r2, [r7, #0]
 801e086:	429a      	cmp	r2, r3
 801e088:	d803      	bhi.n	801e092 <HAL_SPI_Receive+0x208>
 801e08a:	683b      	ldr	r3, [r7, #0]
 801e08c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e090:	d102      	bne.n	801e098 <HAL_SPI_Receive+0x20e>
 801e092:	683b      	ldr	r3, [r7, #0]
 801e094:	2b00      	cmp	r3, #0
 801e096:	d102      	bne.n	801e09e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801e098:	2303      	movs	r3, #3
 801e09a:	75fb      	strb	r3, [r7, #23]
          goto error;
 801e09c:	e018      	b.n	801e0d0 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801e09e:	68fb      	ldr	r3, [r7, #12]
 801e0a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e0a4:	b29b      	uxth	r3, r3
 801e0a6:	2b00      	cmp	r3, #0
 801e0a8:	d1ca      	bne.n	801e040 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e0aa:	693a      	ldr	r2, [r7, #16]
 801e0ac:	6839      	ldr	r1, [r7, #0]
 801e0ae:	68f8      	ldr	r0, [r7, #12]
 801e0b0:	f000 fb4c 	bl	801e74c <SPI_EndRxTransaction>
 801e0b4:	4603      	mov	r3, r0
 801e0b6:	2b00      	cmp	r3, #0
 801e0b8:	d002      	beq.n	801e0c0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e0ba:	68fb      	ldr	r3, [r7, #12]
 801e0bc:	2220      	movs	r2, #32
 801e0be:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e0c0:	68fb      	ldr	r3, [r7, #12]
 801e0c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d002      	beq.n	801e0ce <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801e0c8:	2301      	movs	r3, #1
 801e0ca:	75fb      	strb	r3, [r7, #23]
 801e0cc:	e000      	b.n	801e0d0 <HAL_SPI_Receive+0x246>
  }

error :
 801e0ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	2201      	movs	r2, #1
 801e0d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	2200      	movs	r2, #0
 801e0dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e0e0:	7dfb      	ldrb	r3, [r7, #23]
}
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	3718      	adds	r7, #24
 801e0e6:	46bd      	mov	sp, r7
 801e0e8:	bd80      	pop	{r7, pc}

0801e0ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801e0ea:	b580      	push	{r7, lr}
 801e0ec:	b08a      	sub	sp, #40	; 0x28
 801e0ee:	af00      	add	r7, sp, #0
 801e0f0:	60f8      	str	r0, [r7, #12]
 801e0f2:	60b9      	str	r1, [r7, #8]
 801e0f4:	607a      	str	r2, [r7, #4]
 801e0f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801e0f8:	2301      	movs	r3, #1
 801e0fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801e0fc:	2300      	movs	r3, #0
 801e0fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801e102:	68fb      	ldr	r3, [r7, #12]
 801e104:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801e108:	2b01      	cmp	r3, #1
 801e10a:	d101      	bne.n	801e110 <HAL_SPI_TransmitReceive+0x26>
 801e10c:	2302      	movs	r3, #2
 801e10e:	e1fb      	b.n	801e508 <HAL_SPI_TransmitReceive+0x41e>
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	2201      	movs	r2, #1
 801e114:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801e118:	f7fb fa9e 	bl	8019658 <HAL_GetTick>
 801e11c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e124:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	685b      	ldr	r3, [r3, #4]
 801e12a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e12c:	887b      	ldrh	r3, [r7, #2]
 801e12e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e130:	887b      	ldrh	r3, [r7, #2]
 801e132:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e134:	7efb      	ldrb	r3, [r7, #27]
 801e136:	2b01      	cmp	r3, #1
 801e138:	d00e      	beq.n	801e158 <HAL_SPI_TransmitReceive+0x6e>
 801e13a:	697b      	ldr	r3, [r7, #20]
 801e13c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e140:	d106      	bne.n	801e150 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e142:	68fb      	ldr	r3, [r7, #12]
 801e144:	689b      	ldr	r3, [r3, #8]
 801e146:	2b00      	cmp	r3, #0
 801e148:	d102      	bne.n	801e150 <HAL_SPI_TransmitReceive+0x66>
 801e14a:	7efb      	ldrb	r3, [r7, #27]
 801e14c:	2b04      	cmp	r3, #4
 801e14e:	d003      	beq.n	801e158 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e150:	2302      	movs	r3, #2
 801e152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e156:	e1cd      	b.n	801e4f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e158:	68bb      	ldr	r3, [r7, #8]
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d005      	beq.n	801e16a <HAL_SPI_TransmitReceive+0x80>
 801e15e:	687b      	ldr	r3, [r7, #4]
 801e160:	2b00      	cmp	r3, #0
 801e162:	d002      	beq.n	801e16a <HAL_SPI_TransmitReceive+0x80>
 801e164:	887b      	ldrh	r3, [r7, #2]
 801e166:	2b00      	cmp	r3, #0
 801e168:	d103      	bne.n	801e172 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e16a:	2301      	movs	r3, #1
 801e16c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e170:	e1c0      	b.n	801e4f4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e172:	68fb      	ldr	r3, [r7, #12]
 801e174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e178:	b2db      	uxtb	r3, r3
 801e17a:	2b04      	cmp	r3, #4
 801e17c:	d003      	beq.n	801e186 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	2205      	movs	r2, #5
 801e182:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e186:	68fb      	ldr	r3, [r7, #12]
 801e188:	2200      	movs	r2, #0
 801e18a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	687a      	ldr	r2, [r7, #4]
 801e190:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e192:	68fb      	ldr	r3, [r7, #12]
 801e194:	887a      	ldrh	r2, [r7, #2]
 801e196:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e19a:	68fb      	ldr	r3, [r7, #12]
 801e19c:	887a      	ldrh	r2, [r7, #2]
 801e19e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e1a2:	68fb      	ldr	r3, [r7, #12]
 801e1a4:	68ba      	ldr	r2, [r7, #8]
 801e1a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	887a      	ldrh	r2, [r7, #2]
 801e1ac:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e1ae:	68fb      	ldr	r3, [r7, #12]
 801e1b0:	887a      	ldrh	r2, [r7, #2]
 801e1b2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	2200      	movs	r2, #0
 801e1b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e1ba:	68fb      	ldr	r3, [r7, #12]
 801e1bc:	2200      	movs	r2, #0
 801e1be:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	68db      	ldr	r3, [r3, #12]
 801e1c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e1c8:	d802      	bhi.n	801e1d0 <HAL_SPI_TransmitReceive+0xe6>
 801e1ca:	8a3b      	ldrh	r3, [r7, #16]
 801e1cc:	2b01      	cmp	r3, #1
 801e1ce:	d908      	bls.n	801e1e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1d0:	68fb      	ldr	r3, [r7, #12]
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	685a      	ldr	r2, [r3, #4]
 801e1d6:	68fb      	ldr	r3, [r7, #12]
 801e1d8:	681b      	ldr	r3, [r3, #0]
 801e1da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e1de:	605a      	str	r2, [r3, #4]
 801e1e0:	e007      	b.n	801e1f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e1e2:	68fb      	ldr	r3, [r7, #12]
 801e1e4:	681b      	ldr	r3, [r3, #0]
 801e1e6:	685a      	ldr	r2, [r3, #4]
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e1f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e1f2:	68fb      	ldr	r3, [r7, #12]
 801e1f4:	681b      	ldr	r3, [r3, #0]
 801e1f6:	681b      	ldr	r3, [r3, #0]
 801e1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e1fc:	2b40      	cmp	r3, #64	; 0x40
 801e1fe:	d007      	beq.n	801e210 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	681b      	ldr	r3, [r3, #0]
 801e204:	681a      	ldr	r2, [r3, #0]
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	681b      	ldr	r3, [r3, #0]
 801e20a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e20e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	68db      	ldr	r3, [r3, #12]
 801e214:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e218:	d97c      	bls.n	801e314 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e21a:	68fb      	ldr	r3, [r7, #12]
 801e21c:	685b      	ldr	r3, [r3, #4]
 801e21e:	2b00      	cmp	r3, #0
 801e220:	d002      	beq.n	801e228 <HAL_SPI_TransmitReceive+0x13e>
 801e222:	8a7b      	ldrh	r3, [r7, #18]
 801e224:	2b01      	cmp	r3, #1
 801e226:	d169      	bne.n	801e2fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e228:	68fb      	ldr	r3, [r7, #12]
 801e22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e22c:	881a      	ldrh	r2, [r3, #0]
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	681b      	ldr	r3, [r3, #0]
 801e232:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e234:	68fb      	ldr	r3, [r7, #12]
 801e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e238:	1c9a      	adds	r2, r3, #2
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e23e:	68fb      	ldr	r3, [r7, #12]
 801e240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e242:	b29b      	uxth	r3, r3
 801e244:	3b01      	subs	r3, #1
 801e246:	b29a      	uxth	r2, r3
 801e248:	68fb      	ldr	r3, [r7, #12]
 801e24a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e24c:	e056      	b.n	801e2fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	681b      	ldr	r3, [r3, #0]
 801e252:	689b      	ldr	r3, [r3, #8]
 801e254:	f003 0302 	and.w	r3, r3, #2
 801e258:	2b02      	cmp	r3, #2
 801e25a:	d11b      	bne.n	801e294 <HAL_SPI_TransmitReceive+0x1aa>
 801e25c:	68fb      	ldr	r3, [r7, #12]
 801e25e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e260:	b29b      	uxth	r3, r3
 801e262:	2b00      	cmp	r3, #0
 801e264:	d016      	beq.n	801e294 <HAL_SPI_TransmitReceive+0x1aa>
 801e266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e268:	2b01      	cmp	r3, #1
 801e26a:	d113      	bne.n	801e294 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e26c:	68fb      	ldr	r3, [r7, #12]
 801e26e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e270:	881a      	ldrh	r2, [r3, #0]
 801e272:	68fb      	ldr	r3, [r7, #12]
 801e274:	681b      	ldr	r3, [r3, #0]
 801e276:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e278:	68fb      	ldr	r3, [r7, #12]
 801e27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e27c:	1c9a      	adds	r2, r3, #2
 801e27e:	68fb      	ldr	r3, [r7, #12]
 801e280:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e282:	68fb      	ldr	r3, [r7, #12]
 801e284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e286:	b29b      	uxth	r3, r3
 801e288:	3b01      	subs	r3, #1
 801e28a:	b29a      	uxth	r2, r3
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e290:	2300      	movs	r3, #0
 801e292:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e294:	68fb      	ldr	r3, [r7, #12]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	689b      	ldr	r3, [r3, #8]
 801e29a:	f003 0301 	and.w	r3, r3, #1
 801e29e:	2b01      	cmp	r3, #1
 801e2a0:	d11c      	bne.n	801e2dc <HAL_SPI_TransmitReceive+0x1f2>
 801e2a2:	68fb      	ldr	r3, [r7, #12]
 801e2a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2a8:	b29b      	uxth	r3, r3
 801e2aa:	2b00      	cmp	r3, #0
 801e2ac:	d016      	beq.n	801e2dc <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	68da      	ldr	r2, [r3, #12]
 801e2b4:	68fb      	ldr	r3, [r7, #12]
 801e2b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2b8:	b292      	uxth	r2, r2
 801e2ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e2bc:	68fb      	ldr	r3, [r7, #12]
 801e2be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e2c0:	1c9a      	adds	r2, r3, #2
 801e2c2:	68fb      	ldr	r3, [r7, #12]
 801e2c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e2c6:	68fb      	ldr	r3, [r7, #12]
 801e2c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2cc:	b29b      	uxth	r3, r3
 801e2ce:	3b01      	subs	r3, #1
 801e2d0:	b29a      	uxth	r2, r3
 801e2d2:	68fb      	ldr	r3, [r7, #12]
 801e2d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e2d8:	2301      	movs	r3, #1
 801e2da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e2dc:	f7fb f9bc 	bl	8019658 <HAL_GetTick>
 801e2e0:	4602      	mov	r2, r0
 801e2e2:	69fb      	ldr	r3, [r7, #28]
 801e2e4:	1ad3      	subs	r3, r2, r3
 801e2e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e2e8:	429a      	cmp	r2, r3
 801e2ea:	d807      	bhi.n	801e2fc <HAL_SPI_TransmitReceive+0x212>
 801e2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e2f2:	d003      	beq.n	801e2fc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e2f4:	2303      	movs	r3, #3
 801e2f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e2fa:	e0fb      	b.n	801e4f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e300:	b29b      	uxth	r3, r3
 801e302:	2b00      	cmp	r3, #0
 801e304:	d1a3      	bne.n	801e24e <HAL_SPI_TransmitReceive+0x164>
 801e306:	68fb      	ldr	r3, [r7, #12]
 801e308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e30c:	b29b      	uxth	r3, r3
 801e30e:	2b00      	cmp	r3, #0
 801e310:	d19d      	bne.n	801e24e <HAL_SPI_TransmitReceive+0x164>
 801e312:	e0df      	b.n	801e4d4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	685b      	ldr	r3, [r3, #4]
 801e318:	2b00      	cmp	r3, #0
 801e31a:	d003      	beq.n	801e324 <HAL_SPI_TransmitReceive+0x23a>
 801e31c:	8a7b      	ldrh	r3, [r7, #18]
 801e31e:	2b01      	cmp	r3, #1
 801e320:	f040 80cb 	bne.w	801e4ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e324:	68fb      	ldr	r3, [r7, #12]
 801e326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e328:	b29b      	uxth	r3, r3
 801e32a:	2b01      	cmp	r3, #1
 801e32c:	d912      	bls.n	801e354 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e32e:	68fb      	ldr	r3, [r7, #12]
 801e330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e332:	881a      	ldrh	r2, [r3, #0]
 801e334:	68fb      	ldr	r3, [r7, #12]
 801e336:	681b      	ldr	r3, [r3, #0]
 801e338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e33a:	68fb      	ldr	r3, [r7, #12]
 801e33c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e33e:	1c9a      	adds	r2, r3, #2
 801e340:	68fb      	ldr	r3, [r7, #12]
 801e342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e348:	b29b      	uxth	r3, r3
 801e34a:	3b02      	subs	r3, #2
 801e34c:	b29a      	uxth	r2, r3
 801e34e:	68fb      	ldr	r3, [r7, #12]
 801e350:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e352:	e0b2      	b.n	801e4ba <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e354:	68fb      	ldr	r3, [r7, #12]
 801e356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e358:	68fb      	ldr	r3, [r7, #12]
 801e35a:	681b      	ldr	r3, [r3, #0]
 801e35c:	330c      	adds	r3, #12
 801e35e:	7812      	ldrb	r2, [r2, #0]
 801e360:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e362:	68fb      	ldr	r3, [r7, #12]
 801e364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e366:	1c5a      	adds	r2, r3, #1
 801e368:	68fb      	ldr	r3, [r7, #12]
 801e36a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e370:	b29b      	uxth	r3, r3
 801e372:	3b01      	subs	r3, #1
 801e374:	b29a      	uxth	r2, r3
 801e376:	68fb      	ldr	r3, [r7, #12]
 801e378:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e37a:	e09e      	b.n	801e4ba <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e37c:	68fb      	ldr	r3, [r7, #12]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	689b      	ldr	r3, [r3, #8]
 801e382:	f003 0302 	and.w	r3, r3, #2
 801e386:	2b02      	cmp	r3, #2
 801e388:	d134      	bne.n	801e3f4 <HAL_SPI_TransmitReceive+0x30a>
 801e38a:	68fb      	ldr	r3, [r7, #12]
 801e38c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e38e:	b29b      	uxth	r3, r3
 801e390:	2b00      	cmp	r3, #0
 801e392:	d02f      	beq.n	801e3f4 <HAL_SPI_TransmitReceive+0x30a>
 801e394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e396:	2b01      	cmp	r3, #1
 801e398:	d12c      	bne.n	801e3f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e39a:	68fb      	ldr	r3, [r7, #12]
 801e39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e39e:	b29b      	uxth	r3, r3
 801e3a0:	2b01      	cmp	r3, #1
 801e3a2:	d912      	bls.n	801e3ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e3a4:	68fb      	ldr	r3, [r7, #12]
 801e3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3a8:	881a      	ldrh	r2, [r3, #0]
 801e3aa:	68fb      	ldr	r3, [r7, #12]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e3b0:	68fb      	ldr	r3, [r7, #12]
 801e3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3b4:	1c9a      	adds	r2, r3, #2
 801e3b6:	68fb      	ldr	r3, [r7, #12]
 801e3b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e3ba:	68fb      	ldr	r3, [r7, #12]
 801e3bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3be:	b29b      	uxth	r3, r3
 801e3c0:	3b02      	subs	r3, #2
 801e3c2:	b29a      	uxth	r2, r3
 801e3c4:	68fb      	ldr	r3, [r7, #12]
 801e3c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e3c8:	e012      	b.n	801e3f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e3ca:	68fb      	ldr	r3, [r7, #12]
 801e3cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e3ce:	68fb      	ldr	r3, [r7, #12]
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	330c      	adds	r3, #12
 801e3d4:	7812      	ldrb	r2, [r2, #0]
 801e3d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e3d8:	68fb      	ldr	r3, [r7, #12]
 801e3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e3dc:	1c5a      	adds	r2, r3, #1
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e3e2:	68fb      	ldr	r3, [r7, #12]
 801e3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3e6:	b29b      	uxth	r3, r3
 801e3e8:	3b01      	subs	r3, #1
 801e3ea:	b29a      	uxth	r2, r3
 801e3ec:	68fb      	ldr	r3, [r7, #12]
 801e3ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e3f0:	2300      	movs	r3, #0
 801e3f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e3f4:	68fb      	ldr	r3, [r7, #12]
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	689b      	ldr	r3, [r3, #8]
 801e3fa:	f003 0301 	and.w	r3, r3, #1
 801e3fe:	2b01      	cmp	r3, #1
 801e400:	d148      	bne.n	801e494 <HAL_SPI_TransmitReceive+0x3aa>
 801e402:	68fb      	ldr	r3, [r7, #12]
 801e404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e408:	b29b      	uxth	r3, r3
 801e40a:	2b00      	cmp	r3, #0
 801e40c:	d042      	beq.n	801e494 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e40e:	68fb      	ldr	r3, [r7, #12]
 801e410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e414:	b29b      	uxth	r3, r3
 801e416:	2b01      	cmp	r3, #1
 801e418:	d923      	bls.n	801e462 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e41a:	68fb      	ldr	r3, [r7, #12]
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	68da      	ldr	r2, [r3, #12]
 801e420:	68fb      	ldr	r3, [r7, #12]
 801e422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e424:	b292      	uxth	r2, r2
 801e426:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e428:	68fb      	ldr	r3, [r7, #12]
 801e42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e42c:	1c9a      	adds	r2, r3, #2
 801e42e:	68fb      	ldr	r3, [r7, #12]
 801e430:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e432:	68fb      	ldr	r3, [r7, #12]
 801e434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e438:	b29b      	uxth	r3, r3
 801e43a:	3b02      	subs	r3, #2
 801e43c:	b29a      	uxth	r2, r3
 801e43e:	68fb      	ldr	r3, [r7, #12]
 801e440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e444:	68fb      	ldr	r3, [r7, #12]
 801e446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e44a:	b29b      	uxth	r3, r3
 801e44c:	2b01      	cmp	r3, #1
 801e44e:	d81f      	bhi.n	801e490 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	685a      	ldr	r2, [r3, #4]
 801e456:	68fb      	ldr	r3, [r7, #12]
 801e458:	681b      	ldr	r3, [r3, #0]
 801e45a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e45e:	605a      	str	r2, [r3, #4]
 801e460:	e016      	b.n	801e490 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e462:	68fb      	ldr	r3, [r7, #12]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	f103 020c 	add.w	r2, r3, #12
 801e46a:	68fb      	ldr	r3, [r7, #12]
 801e46c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e46e:	7812      	ldrb	r2, [r2, #0]
 801e470:	b2d2      	uxtb	r2, r2
 801e472:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e474:	68fb      	ldr	r3, [r7, #12]
 801e476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e478:	1c5a      	adds	r2, r3, #1
 801e47a:	68fb      	ldr	r3, [r7, #12]
 801e47c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e484:	b29b      	uxth	r3, r3
 801e486:	3b01      	subs	r3, #1
 801e488:	b29a      	uxth	r2, r3
 801e48a:	68fb      	ldr	r3, [r7, #12]
 801e48c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e490:	2301      	movs	r3, #1
 801e492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e494:	f7fb f8e0 	bl	8019658 <HAL_GetTick>
 801e498:	4602      	mov	r2, r0
 801e49a:	69fb      	ldr	r3, [r7, #28]
 801e49c:	1ad3      	subs	r3, r2, r3
 801e49e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e4a0:	429a      	cmp	r2, r3
 801e4a2:	d803      	bhi.n	801e4ac <HAL_SPI_TransmitReceive+0x3c2>
 801e4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e4aa:	d102      	bne.n	801e4b2 <HAL_SPI_TransmitReceive+0x3c8>
 801e4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e4ae:	2b00      	cmp	r3, #0
 801e4b0:	d103      	bne.n	801e4ba <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e4b2:	2303      	movs	r3, #3
 801e4b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e4b8:	e01c      	b.n	801e4f4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e4be:	b29b      	uxth	r3, r3
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	f47f af5b 	bne.w	801e37c <HAL_SPI_TransmitReceive+0x292>
 801e4c6:	68fb      	ldr	r3, [r7, #12]
 801e4c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e4cc:	b29b      	uxth	r3, r3
 801e4ce:	2b00      	cmp	r3, #0
 801e4d0:	f47f af54 	bne.w	801e37c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e4d4:	69fa      	ldr	r2, [r7, #28]
 801e4d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e4d8:	68f8      	ldr	r0, [r7, #12]
 801e4da:	f000 f98f 	bl	801e7fc <SPI_EndRxTxTransaction>
 801e4de:	4603      	mov	r3, r0
 801e4e0:	2b00      	cmp	r3, #0
 801e4e2:	d006      	beq.n	801e4f2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e4e4:	2301      	movs	r3, #1
 801e4e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e4ea:	68fb      	ldr	r3, [r7, #12]
 801e4ec:	2220      	movs	r2, #32
 801e4ee:	661a      	str	r2, [r3, #96]	; 0x60
 801e4f0:	e000      	b.n	801e4f4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e4f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e4f4:	68fb      	ldr	r3, [r7, #12]
 801e4f6:	2201      	movs	r2, #1
 801e4f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e4fc:	68fb      	ldr	r3, [r7, #12]
 801e4fe:	2200      	movs	r2, #0
 801e500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e504:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e508:	4618      	mov	r0, r3
 801e50a:	3728      	adds	r7, #40	; 0x28
 801e50c:	46bd      	mov	sp, r7
 801e50e:	bd80      	pop	{r7, pc}

0801e510 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e510:	b580      	push	{r7, lr}
 801e512:	b088      	sub	sp, #32
 801e514:	af00      	add	r7, sp, #0
 801e516:	60f8      	str	r0, [r7, #12]
 801e518:	60b9      	str	r1, [r7, #8]
 801e51a:	603b      	str	r3, [r7, #0]
 801e51c:	4613      	mov	r3, r2
 801e51e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e520:	f7fb f89a 	bl	8019658 <HAL_GetTick>
 801e524:	4602      	mov	r2, r0
 801e526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e528:	1a9b      	subs	r3, r3, r2
 801e52a:	683a      	ldr	r2, [r7, #0]
 801e52c:	4413      	add	r3, r2
 801e52e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e530:	f7fb f892 	bl	8019658 <HAL_GetTick>
 801e534:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e536:	4b39      	ldr	r3, [pc, #228]	; (801e61c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e538:	681b      	ldr	r3, [r3, #0]
 801e53a:	015b      	lsls	r3, r3, #5
 801e53c:	0d1b      	lsrs	r3, r3, #20
 801e53e:	69fa      	ldr	r2, [r7, #28]
 801e540:	fb02 f303 	mul.w	r3, r2, r3
 801e544:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e546:	e054      	b.n	801e5f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e548:	683b      	ldr	r3, [r7, #0]
 801e54a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e54e:	d050      	beq.n	801e5f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e550:	f7fb f882 	bl	8019658 <HAL_GetTick>
 801e554:	4602      	mov	r2, r0
 801e556:	69bb      	ldr	r3, [r7, #24]
 801e558:	1ad3      	subs	r3, r2, r3
 801e55a:	69fa      	ldr	r2, [r7, #28]
 801e55c:	429a      	cmp	r2, r3
 801e55e:	d902      	bls.n	801e566 <SPI_WaitFlagStateUntilTimeout+0x56>
 801e560:	69fb      	ldr	r3, [r7, #28]
 801e562:	2b00      	cmp	r3, #0
 801e564:	d13d      	bne.n	801e5e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e566:	68fb      	ldr	r3, [r7, #12]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	685a      	ldr	r2, [r3, #4]
 801e56c:	68fb      	ldr	r3, [r7, #12]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e574:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e576:	68fb      	ldr	r3, [r7, #12]
 801e578:	685b      	ldr	r3, [r3, #4]
 801e57a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e57e:	d111      	bne.n	801e5a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e580:	68fb      	ldr	r3, [r7, #12]
 801e582:	689b      	ldr	r3, [r3, #8]
 801e584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e588:	d004      	beq.n	801e594 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	689b      	ldr	r3, [r3, #8]
 801e58e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e592:	d107      	bne.n	801e5a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	681a      	ldr	r2, [r3, #0]
 801e59a:	68fb      	ldr	r3, [r7, #12]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e5a4:	68fb      	ldr	r3, [r7, #12]
 801e5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e5ac:	d10f      	bne.n	801e5ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	681b      	ldr	r3, [r3, #0]
 801e5b2:	681a      	ldr	r2, [r3, #0]
 801e5b4:	68fb      	ldr	r3, [r7, #12]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e5bc:	601a      	str	r2, [r3, #0]
 801e5be:	68fb      	ldr	r3, [r7, #12]
 801e5c0:	681b      	ldr	r3, [r3, #0]
 801e5c2:	681a      	ldr	r2, [r3, #0]
 801e5c4:	68fb      	ldr	r3, [r7, #12]
 801e5c6:	681b      	ldr	r3, [r3, #0]
 801e5c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e5cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e5ce:	68fb      	ldr	r3, [r7, #12]
 801e5d0:	2201      	movs	r2, #1
 801e5d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e5d6:	68fb      	ldr	r3, [r7, #12]
 801e5d8:	2200      	movs	r2, #0
 801e5da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e5de:	2303      	movs	r3, #3
 801e5e0:	e017      	b.n	801e612 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e5e2:	697b      	ldr	r3, [r7, #20]
 801e5e4:	2b00      	cmp	r3, #0
 801e5e6:	d101      	bne.n	801e5ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e5e8:	2300      	movs	r3, #0
 801e5ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e5ec:	697b      	ldr	r3, [r7, #20]
 801e5ee:	3b01      	subs	r3, #1
 801e5f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e5f2:	68fb      	ldr	r3, [r7, #12]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	689a      	ldr	r2, [r3, #8]
 801e5f8:	68bb      	ldr	r3, [r7, #8]
 801e5fa:	4013      	ands	r3, r2
 801e5fc:	68ba      	ldr	r2, [r7, #8]
 801e5fe:	429a      	cmp	r2, r3
 801e600:	bf0c      	ite	eq
 801e602:	2301      	moveq	r3, #1
 801e604:	2300      	movne	r3, #0
 801e606:	b2db      	uxtb	r3, r3
 801e608:	461a      	mov	r2, r3
 801e60a:	79fb      	ldrb	r3, [r7, #7]
 801e60c:	429a      	cmp	r2, r3
 801e60e:	d19b      	bne.n	801e548 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e610:	2300      	movs	r3, #0
}
 801e612:	4618      	mov	r0, r3
 801e614:	3720      	adds	r7, #32
 801e616:	46bd      	mov	sp, r7
 801e618:	bd80      	pop	{r7, pc}
 801e61a:	bf00      	nop
 801e61c:	20000000 	.word	0x20000000

0801e620 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e620:	b580      	push	{r7, lr}
 801e622:	b08a      	sub	sp, #40	; 0x28
 801e624:	af00      	add	r7, sp, #0
 801e626:	60f8      	str	r0, [r7, #12]
 801e628:	60b9      	str	r1, [r7, #8]
 801e62a:	607a      	str	r2, [r7, #4]
 801e62c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e62e:	2300      	movs	r3, #0
 801e630:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e632:	f7fb f811 	bl	8019658 <HAL_GetTick>
 801e636:	4602      	mov	r2, r0
 801e638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e63a:	1a9b      	subs	r3, r3, r2
 801e63c:	683a      	ldr	r2, [r7, #0]
 801e63e:	4413      	add	r3, r2
 801e640:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e642:	f7fb f809 	bl	8019658 <HAL_GetTick>
 801e646:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e648:	68fb      	ldr	r3, [r7, #12]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	330c      	adds	r3, #12
 801e64e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e650:	4b3d      	ldr	r3, [pc, #244]	; (801e748 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e652:	681a      	ldr	r2, [r3, #0]
 801e654:	4613      	mov	r3, r2
 801e656:	009b      	lsls	r3, r3, #2
 801e658:	4413      	add	r3, r2
 801e65a:	00da      	lsls	r2, r3, #3
 801e65c:	1ad3      	subs	r3, r2, r3
 801e65e:	0d1b      	lsrs	r3, r3, #20
 801e660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e662:	fb02 f303 	mul.w	r3, r2, r3
 801e666:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e668:	e060      	b.n	801e72c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e66a:	68bb      	ldr	r3, [r7, #8]
 801e66c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801e670:	d107      	bne.n	801e682 <SPI_WaitFifoStateUntilTimeout+0x62>
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	2b00      	cmp	r3, #0
 801e676:	d104      	bne.n	801e682 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e678:	69fb      	ldr	r3, [r7, #28]
 801e67a:	781b      	ldrb	r3, [r3, #0]
 801e67c:	b2db      	uxtb	r3, r3
 801e67e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e680:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e682:	683b      	ldr	r3, [r7, #0]
 801e684:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e688:	d050      	beq.n	801e72c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e68a:	f7fa ffe5 	bl	8019658 <HAL_GetTick>
 801e68e:	4602      	mov	r2, r0
 801e690:	6a3b      	ldr	r3, [r7, #32]
 801e692:	1ad3      	subs	r3, r2, r3
 801e694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e696:	429a      	cmp	r2, r3
 801e698:	d902      	bls.n	801e6a0 <SPI_WaitFifoStateUntilTimeout+0x80>
 801e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e69c:	2b00      	cmp	r3, #0
 801e69e:	d13d      	bne.n	801e71c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e6a0:	68fb      	ldr	r3, [r7, #12]
 801e6a2:	681b      	ldr	r3, [r3, #0]
 801e6a4:	685a      	ldr	r2, [r3, #4]
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	681b      	ldr	r3, [r3, #0]
 801e6aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e6ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e6b0:	68fb      	ldr	r3, [r7, #12]
 801e6b2:	685b      	ldr	r3, [r3, #4]
 801e6b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e6b8:	d111      	bne.n	801e6de <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e6ba:	68fb      	ldr	r3, [r7, #12]
 801e6bc:	689b      	ldr	r3, [r3, #8]
 801e6be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e6c2:	d004      	beq.n	801e6ce <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e6c4:	68fb      	ldr	r3, [r7, #12]
 801e6c6:	689b      	ldr	r3, [r3, #8]
 801e6c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e6cc:	d107      	bne.n	801e6de <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	681b      	ldr	r3, [r3, #0]
 801e6d2:	681a      	ldr	r2, [r3, #0]
 801e6d4:	68fb      	ldr	r3, [r7, #12]
 801e6d6:	681b      	ldr	r3, [r3, #0]
 801e6d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e6dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e6e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e6e6:	d10f      	bne.n	801e708 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	681a      	ldr	r2, [r3, #0]
 801e6ee:	68fb      	ldr	r3, [r7, #12]
 801e6f0:	681b      	ldr	r3, [r3, #0]
 801e6f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e6f6:	601a      	str	r2, [r3, #0]
 801e6f8:	68fb      	ldr	r3, [r7, #12]
 801e6fa:	681b      	ldr	r3, [r3, #0]
 801e6fc:	681a      	ldr	r2, [r3, #0]
 801e6fe:	68fb      	ldr	r3, [r7, #12]
 801e700:	681b      	ldr	r3, [r3, #0]
 801e702:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e706:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e708:	68fb      	ldr	r3, [r7, #12]
 801e70a:	2201      	movs	r2, #1
 801e70c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	2200      	movs	r2, #0
 801e714:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e718:	2303      	movs	r3, #3
 801e71a:	e010      	b.n	801e73e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e71c:	69bb      	ldr	r3, [r7, #24]
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d101      	bne.n	801e726 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e722:	2300      	movs	r3, #0
 801e724:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e726:	69bb      	ldr	r3, [r7, #24]
 801e728:	3b01      	subs	r3, #1
 801e72a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e72c:	68fb      	ldr	r3, [r7, #12]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	689a      	ldr	r2, [r3, #8]
 801e732:	68bb      	ldr	r3, [r7, #8]
 801e734:	4013      	ands	r3, r2
 801e736:	687a      	ldr	r2, [r7, #4]
 801e738:	429a      	cmp	r2, r3
 801e73a:	d196      	bne.n	801e66a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e73c:	2300      	movs	r3, #0
}
 801e73e:	4618      	mov	r0, r3
 801e740:	3728      	adds	r7, #40	; 0x28
 801e742:	46bd      	mov	sp, r7
 801e744:	bd80      	pop	{r7, pc}
 801e746:	bf00      	nop
 801e748:	20000000 	.word	0x20000000

0801e74c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e74c:	b580      	push	{r7, lr}
 801e74e:	b086      	sub	sp, #24
 801e750:	af02      	add	r7, sp, #8
 801e752:	60f8      	str	r0, [r7, #12]
 801e754:	60b9      	str	r1, [r7, #8]
 801e756:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e758:	68fb      	ldr	r3, [r7, #12]
 801e75a:	685b      	ldr	r3, [r3, #4]
 801e75c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e760:	d111      	bne.n	801e786 <SPI_EndRxTransaction+0x3a>
 801e762:	68fb      	ldr	r3, [r7, #12]
 801e764:	689b      	ldr	r3, [r3, #8]
 801e766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e76a:	d004      	beq.n	801e776 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	689b      	ldr	r3, [r3, #8]
 801e770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e774:	d107      	bne.n	801e786 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	681a      	ldr	r2, [r3, #0]
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e784:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	9300      	str	r3, [sp, #0]
 801e78a:	68bb      	ldr	r3, [r7, #8]
 801e78c:	2200      	movs	r2, #0
 801e78e:	2180      	movs	r1, #128	; 0x80
 801e790:	68f8      	ldr	r0, [r7, #12]
 801e792:	f7ff febd 	bl	801e510 <SPI_WaitFlagStateUntilTimeout>
 801e796:	4603      	mov	r3, r0
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d007      	beq.n	801e7ac <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e79c:	68fb      	ldr	r3, [r7, #12]
 801e79e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e7a0:	f043 0220 	orr.w	r2, r3, #32
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e7a8:	2303      	movs	r3, #3
 801e7aa:	e023      	b.n	801e7f4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e7ac:	68fb      	ldr	r3, [r7, #12]
 801e7ae:	685b      	ldr	r3, [r3, #4]
 801e7b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e7b4:	d11d      	bne.n	801e7f2 <SPI_EndRxTransaction+0xa6>
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	689b      	ldr	r3, [r3, #8]
 801e7ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e7be:	d004      	beq.n	801e7ca <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e7c0:	68fb      	ldr	r3, [r7, #12]
 801e7c2:	689b      	ldr	r3, [r3, #8]
 801e7c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e7c8:	d113      	bne.n	801e7f2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e7ca:	687b      	ldr	r3, [r7, #4]
 801e7cc:	9300      	str	r3, [sp, #0]
 801e7ce:	68bb      	ldr	r3, [r7, #8]
 801e7d0:	2200      	movs	r2, #0
 801e7d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e7d6:	68f8      	ldr	r0, [r7, #12]
 801e7d8:	f7ff ff22 	bl	801e620 <SPI_WaitFifoStateUntilTimeout>
 801e7dc:	4603      	mov	r3, r0
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d007      	beq.n	801e7f2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e7e6:	f043 0220 	orr.w	r2, r3, #32
 801e7ea:	68fb      	ldr	r3, [r7, #12]
 801e7ec:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e7ee:	2303      	movs	r3, #3
 801e7f0:	e000      	b.n	801e7f4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801e7f2:	2300      	movs	r3, #0
}
 801e7f4:	4618      	mov	r0, r3
 801e7f6:	3710      	adds	r7, #16
 801e7f8:	46bd      	mov	sp, r7
 801e7fa:	bd80      	pop	{r7, pc}

0801e7fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e7fc:	b580      	push	{r7, lr}
 801e7fe:	b086      	sub	sp, #24
 801e800:	af02      	add	r7, sp, #8
 801e802:	60f8      	str	r0, [r7, #12]
 801e804:	60b9      	str	r1, [r7, #8]
 801e806:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	9300      	str	r3, [sp, #0]
 801e80c:	68bb      	ldr	r3, [r7, #8]
 801e80e:	2200      	movs	r2, #0
 801e810:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801e814:	68f8      	ldr	r0, [r7, #12]
 801e816:	f7ff ff03 	bl	801e620 <SPI_WaitFifoStateUntilTimeout>
 801e81a:	4603      	mov	r3, r0
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d007      	beq.n	801e830 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e820:	68fb      	ldr	r3, [r7, #12]
 801e822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e824:	f043 0220 	orr.w	r2, r3, #32
 801e828:	68fb      	ldr	r3, [r7, #12]
 801e82a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e82c:	2303      	movs	r3, #3
 801e82e:	e027      	b.n	801e880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	9300      	str	r3, [sp, #0]
 801e834:	68bb      	ldr	r3, [r7, #8]
 801e836:	2200      	movs	r2, #0
 801e838:	2180      	movs	r1, #128	; 0x80
 801e83a:	68f8      	ldr	r0, [r7, #12]
 801e83c:	f7ff fe68 	bl	801e510 <SPI_WaitFlagStateUntilTimeout>
 801e840:	4603      	mov	r3, r0
 801e842:	2b00      	cmp	r3, #0
 801e844:	d007      	beq.n	801e856 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e846:	68fb      	ldr	r3, [r7, #12]
 801e848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e84a:	f043 0220 	orr.w	r2, r3, #32
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e852:	2303      	movs	r3, #3
 801e854:	e014      	b.n	801e880 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	9300      	str	r3, [sp, #0]
 801e85a:	68bb      	ldr	r3, [r7, #8]
 801e85c:	2200      	movs	r2, #0
 801e85e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e862:	68f8      	ldr	r0, [r7, #12]
 801e864:	f7ff fedc 	bl	801e620 <SPI_WaitFifoStateUntilTimeout>
 801e868:	4603      	mov	r3, r0
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d007      	beq.n	801e87e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e86e:	68fb      	ldr	r3, [r7, #12]
 801e870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e872:	f043 0220 	orr.w	r2, r3, #32
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e87a:	2303      	movs	r3, #3
 801e87c:	e000      	b.n	801e880 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801e87e:	2300      	movs	r3, #0
}
 801e880:	4618      	mov	r0, r3
 801e882:	3710      	adds	r7, #16
 801e884:	46bd      	mov	sp, r7
 801e886:	bd80      	pop	{r7, pc}

0801e888 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e888:	b580      	push	{r7, lr}
 801e88a:	b082      	sub	sp, #8
 801e88c:	af00      	add	r7, sp, #0
 801e88e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d101      	bne.n	801e89a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e896:	2301      	movs	r3, #1
 801e898:	e049      	b.n	801e92e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8a0:	b2db      	uxtb	r3, r3
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	d106      	bne.n	801e8b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	2200      	movs	r2, #0
 801e8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e8ae:	6878      	ldr	r0, [r7, #4]
 801e8b0:	f7f9 fd30 	bl	8018314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	2202      	movs	r2, #2
 801e8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	681a      	ldr	r2, [r3, #0]
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	3304      	adds	r3, #4
 801e8c4:	4619      	mov	r1, r3
 801e8c6:	4610      	mov	r0, r2
 801e8c8:	f000 fd6c 	bl	801f3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	2201      	movs	r2, #1
 801e8d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	2201      	movs	r2, #1
 801e8d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	2201      	movs	r2, #1
 801e8e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	2201      	movs	r2, #1
 801e8e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e8ec:	687b      	ldr	r3, [r7, #4]
 801e8ee:	2201      	movs	r2, #1
 801e8f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	2201      	movs	r2, #1
 801e8f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	2201      	movs	r2, #1
 801e900:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	2201      	movs	r2, #1
 801e908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e90c:	687b      	ldr	r3, [r7, #4]
 801e90e:	2201      	movs	r2, #1
 801e910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	2201      	movs	r2, #1
 801e918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e91c:	687b      	ldr	r3, [r7, #4]
 801e91e:	2201      	movs	r2, #1
 801e920:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	2201      	movs	r2, #1
 801e928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e92c:	2300      	movs	r3, #0
}
 801e92e:	4618      	mov	r0, r3
 801e930:	3708      	adds	r7, #8
 801e932:	46bd      	mov	sp, r7
 801e934:	bd80      	pop	{r7, pc}
	...

0801e938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e938:	b480      	push	{r7}
 801e93a:	b085      	sub	sp, #20
 801e93c:	af00      	add	r7, sp, #0
 801e93e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e946:	b2db      	uxtb	r3, r3
 801e948:	2b01      	cmp	r3, #1
 801e94a:	d001      	beq.n	801e950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e94c:	2301      	movs	r3, #1
 801e94e:	e04f      	b.n	801e9f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	2202      	movs	r2, #2
 801e954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e958:	687b      	ldr	r3, [r7, #4]
 801e95a:	681b      	ldr	r3, [r3, #0]
 801e95c:	68da      	ldr	r2, [r3, #12]
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	681b      	ldr	r3, [r3, #0]
 801e962:	f042 0201 	orr.w	r2, r2, #1
 801e966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	681b      	ldr	r3, [r3, #0]
 801e96c:	4a23      	ldr	r2, [pc, #140]	; (801e9fc <HAL_TIM_Base_Start_IT+0xc4>)
 801e96e:	4293      	cmp	r3, r2
 801e970:	d01d      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	681b      	ldr	r3, [r3, #0]
 801e976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e97a:	d018      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	681b      	ldr	r3, [r3, #0]
 801e980:	4a1f      	ldr	r2, [pc, #124]	; (801ea00 <HAL_TIM_Base_Start_IT+0xc8>)
 801e982:	4293      	cmp	r3, r2
 801e984:	d013      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e986:	687b      	ldr	r3, [r7, #4]
 801e988:	681b      	ldr	r3, [r3, #0]
 801e98a:	4a1e      	ldr	r2, [pc, #120]	; (801ea04 <HAL_TIM_Base_Start_IT+0xcc>)
 801e98c:	4293      	cmp	r3, r2
 801e98e:	d00e      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	4a1c      	ldr	r2, [pc, #112]	; (801ea08 <HAL_TIM_Base_Start_IT+0xd0>)
 801e996:	4293      	cmp	r3, r2
 801e998:	d009      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	681b      	ldr	r3, [r3, #0]
 801e99e:	4a1b      	ldr	r2, [pc, #108]	; (801ea0c <HAL_TIM_Base_Start_IT+0xd4>)
 801e9a0:	4293      	cmp	r3, r2
 801e9a2:	d004      	beq.n	801e9ae <HAL_TIM_Base_Start_IT+0x76>
 801e9a4:	687b      	ldr	r3, [r7, #4]
 801e9a6:	681b      	ldr	r3, [r3, #0]
 801e9a8:	4a19      	ldr	r2, [pc, #100]	; (801ea10 <HAL_TIM_Base_Start_IT+0xd8>)
 801e9aa:	4293      	cmp	r3, r2
 801e9ac:	d115      	bne.n	801e9da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e9ae:	687b      	ldr	r3, [r7, #4]
 801e9b0:	681b      	ldr	r3, [r3, #0]
 801e9b2:	689a      	ldr	r2, [r3, #8]
 801e9b4:	4b17      	ldr	r3, [pc, #92]	; (801ea14 <HAL_TIM_Base_Start_IT+0xdc>)
 801e9b6:	4013      	ands	r3, r2
 801e9b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e9ba:	68fb      	ldr	r3, [r7, #12]
 801e9bc:	2b06      	cmp	r3, #6
 801e9be:	d015      	beq.n	801e9ec <HAL_TIM_Base_Start_IT+0xb4>
 801e9c0:	68fb      	ldr	r3, [r7, #12]
 801e9c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e9c6:	d011      	beq.n	801e9ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	681b      	ldr	r3, [r3, #0]
 801e9cc:	681a      	ldr	r2, [r3, #0]
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	f042 0201 	orr.w	r2, r2, #1
 801e9d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e9d8:	e008      	b.n	801e9ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	681a      	ldr	r2, [r3, #0]
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	681b      	ldr	r3, [r3, #0]
 801e9e4:	f042 0201 	orr.w	r2, r2, #1
 801e9e8:	601a      	str	r2, [r3, #0]
 801e9ea:	e000      	b.n	801e9ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e9ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e9ee:	2300      	movs	r3, #0
}
 801e9f0:	4618      	mov	r0, r3
 801e9f2:	3714      	adds	r7, #20
 801e9f4:	46bd      	mov	sp, r7
 801e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9fa:	4770      	bx	lr
 801e9fc:	40012c00 	.word	0x40012c00
 801ea00:	40000400 	.word	0x40000400
 801ea04:	40000800 	.word	0x40000800
 801ea08:	40013400 	.word	0x40013400
 801ea0c:	40014000 	.word	0x40014000
 801ea10:	40015000 	.word	0x40015000
 801ea14:	00010007 	.word	0x00010007

0801ea18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801ea18:	b580      	push	{r7, lr}
 801ea1a:	b082      	sub	sp, #8
 801ea1c:	af00      	add	r7, sp, #0
 801ea1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2b00      	cmp	r3, #0
 801ea24:	d101      	bne.n	801ea2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801ea26:	2301      	movs	r3, #1
 801ea28:	e049      	b.n	801eabe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea30:	b2db      	uxtb	r3, r3
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	d106      	bne.n	801ea44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	2200      	movs	r2, #0
 801ea3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801ea3e:	6878      	ldr	r0, [r7, #4]
 801ea40:	f7f9 fca2 	bl	8018388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	2202      	movs	r2, #2
 801ea48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ea4c:	687b      	ldr	r3, [r7, #4]
 801ea4e:	681a      	ldr	r2, [r3, #0]
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	3304      	adds	r3, #4
 801ea54:	4619      	mov	r1, r3
 801ea56:	4610      	mov	r0, r2
 801ea58:	f000 fca4 	bl	801f3a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	2201      	movs	r2, #1
 801ea60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	2201      	movs	r2, #1
 801ea68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	2201      	movs	r2, #1
 801ea70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2201      	movs	r2, #1
 801ea78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	2201      	movs	r2, #1
 801ea80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2201      	movs	r2, #1
 801ea88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	2201      	movs	r2, #1
 801ea90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea94:	687b      	ldr	r3, [r7, #4]
 801ea96:	2201      	movs	r2, #1
 801ea98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ea9c:	687b      	ldr	r3, [r7, #4]
 801ea9e:	2201      	movs	r2, #1
 801eaa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	2201      	movs	r2, #1
 801eaa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	2201      	movs	r2, #1
 801eab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	2201      	movs	r2, #1
 801eab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801eabc:	2300      	movs	r3, #0
}
 801eabe:	4618      	mov	r0, r3
 801eac0:	3708      	adds	r7, #8
 801eac2:	46bd      	mov	sp, r7
 801eac4:	bd80      	pop	{r7, pc}
	...

0801eac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eac8:	b580      	push	{r7, lr}
 801eaca:	b084      	sub	sp, #16
 801eacc:	af00      	add	r7, sp, #0
 801eace:	6078      	str	r0, [r7, #4]
 801ead0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801ead2:	683b      	ldr	r3, [r7, #0]
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	d109      	bne.n	801eaec <HAL_TIM_PWM_Start+0x24>
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eade:	b2db      	uxtb	r3, r3
 801eae0:	2b01      	cmp	r3, #1
 801eae2:	bf14      	ite	ne
 801eae4:	2301      	movne	r3, #1
 801eae6:	2300      	moveq	r3, #0
 801eae8:	b2db      	uxtb	r3, r3
 801eaea:	e03c      	b.n	801eb66 <HAL_TIM_PWM_Start+0x9e>
 801eaec:	683b      	ldr	r3, [r7, #0]
 801eaee:	2b04      	cmp	r3, #4
 801eaf0:	d109      	bne.n	801eb06 <HAL_TIM_PWM_Start+0x3e>
 801eaf2:	687b      	ldr	r3, [r7, #4]
 801eaf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801eaf8:	b2db      	uxtb	r3, r3
 801eafa:	2b01      	cmp	r3, #1
 801eafc:	bf14      	ite	ne
 801eafe:	2301      	movne	r3, #1
 801eb00:	2300      	moveq	r3, #0
 801eb02:	b2db      	uxtb	r3, r3
 801eb04:	e02f      	b.n	801eb66 <HAL_TIM_PWM_Start+0x9e>
 801eb06:	683b      	ldr	r3, [r7, #0]
 801eb08:	2b08      	cmp	r3, #8
 801eb0a:	d109      	bne.n	801eb20 <HAL_TIM_PWM_Start+0x58>
 801eb0c:	687b      	ldr	r3, [r7, #4]
 801eb0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801eb12:	b2db      	uxtb	r3, r3
 801eb14:	2b01      	cmp	r3, #1
 801eb16:	bf14      	ite	ne
 801eb18:	2301      	movne	r3, #1
 801eb1a:	2300      	moveq	r3, #0
 801eb1c:	b2db      	uxtb	r3, r3
 801eb1e:	e022      	b.n	801eb66 <HAL_TIM_PWM_Start+0x9e>
 801eb20:	683b      	ldr	r3, [r7, #0]
 801eb22:	2b0c      	cmp	r3, #12
 801eb24:	d109      	bne.n	801eb3a <HAL_TIM_PWM_Start+0x72>
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801eb2c:	b2db      	uxtb	r3, r3
 801eb2e:	2b01      	cmp	r3, #1
 801eb30:	bf14      	ite	ne
 801eb32:	2301      	movne	r3, #1
 801eb34:	2300      	moveq	r3, #0
 801eb36:	b2db      	uxtb	r3, r3
 801eb38:	e015      	b.n	801eb66 <HAL_TIM_PWM_Start+0x9e>
 801eb3a:	683b      	ldr	r3, [r7, #0]
 801eb3c:	2b10      	cmp	r3, #16
 801eb3e:	d109      	bne.n	801eb54 <HAL_TIM_PWM_Start+0x8c>
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb46:	b2db      	uxtb	r3, r3
 801eb48:	2b01      	cmp	r3, #1
 801eb4a:	bf14      	ite	ne
 801eb4c:	2301      	movne	r3, #1
 801eb4e:	2300      	moveq	r3, #0
 801eb50:	b2db      	uxtb	r3, r3
 801eb52:	e008      	b.n	801eb66 <HAL_TIM_PWM_Start+0x9e>
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eb5a:	b2db      	uxtb	r3, r3
 801eb5c:	2b01      	cmp	r3, #1
 801eb5e:	bf14      	ite	ne
 801eb60:	2301      	movne	r3, #1
 801eb62:	2300      	moveq	r3, #0
 801eb64:	b2db      	uxtb	r3, r3
 801eb66:	2b00      	cmp	r3, #0
 801eb68:	d001      	beq.n	801eb6e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801eb6a:	2301      	movs	r3, #1
 801eb6c:	e0a1      	b.n	801ecb2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eb6e:	683b      	ldr	r3, [r7, #0]
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d104      	bne.n	801eb7e <HAL_TIM_PWM_Start+0xb6>
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	2202      	movs	r2, #2
 801eb78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801eb7c:	e023      	b.n	801ebc6 <HAL_TIM_PWM_Start+0xfe>
 801eb7e:	683b      	ldr	r3, [r7, #0]
 801eb80:	2b04      	cmp	r3, #4
 801eb82:	d104      	bne.n	801eb8e <HAL_TIM_PWM_Start+0xc6>
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	2202      	movs	r2, #2
 801eb88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801eb8c:	e01b      	b.n	801ebc6 <HAL_TIM_PWM_Start+0xfe>
 801eb8e:	683b      	ldr	r3, [r7, #0]
 801eb90:	2b08      	cmp	r3, #8
 801eb92:	d104      	bne.n	801eb9e <HAL_TIM_PWM_Start+0xd6>
 801eb94:	687b      	ldr	r3, [r7, #4]
 801eb96:	2202      	movs	r2, #2
 801eb98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eb9c:	e013      	b.n	801ebc6 <HAL_TIM_PWM_Start+0xfe>
 801eb9e:	683b      	ldr	r3, [r7, #0]
 801eba0:	2b0c      	cmp	r3, #12
 801eba2:	d104      	bne.n	801ebae <HAL_TIM_PWM_Start+0xe6>
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2202      	movs	r2, #2
 801eba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ebac:	e00b      	b.n	801ebc6 <HAL_TIM_PWM_Start+0xfe>
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	2b10      	cmp	r3, #16
 801ebb2:	d104      	bne.n	801ebbe <HAL_TIM_PWM_Start+0xf6>
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	2202      	movs	r2, #2
 801ebb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ebbc:	e003      	b.n	801ebc6 <HAL_TIM_PWM_Start+0xfe>
 801ebbe:	687b      	ldr	r3, [r7, #4]
 801ebc0:	2202      	movs	r2, #2
 801ebc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ebc6:	687b      	ldr	r3, [r7, #4]
 801ebc8:	681b      	ldr	r3, [r3, #0]
 801ebca:	2201      	movs	r2, #1
 801ebcc:	6839      	ldr	r1, [r7, #0]
 801ebce:	4618      	mov	r0, r3
 801ebd0:	f000 ffb0 	bl	801fb34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	4a38      	ldr	r2, [pc, #224]	; (801ecbc <HAL_TIM_PWM_Start+0x1f4>)
 801ebda:	4293      	cmp	r3, r2
 801ebdc:	d018      	beq.n	801ec10 <HAL_TIM_PWM_Start+0x148>
 801ebde:	687b      	ldr	r3, [r7, #4]
 801ebe0:	681b      	ldr	r3, [r3, #0]
 801ebe2:	4a37      	ldr	r2, [pc, #220]	; (801ecc0 <HAL_TIM_PWM_Start+0x1f8>)
 801ebe4:	4293      	cmp	r3, r2
 801ebe6:	d013      	beq.n	801ec10 <HAL_TIM_PWM_Start+0x148>
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	4a35      	ldr	r2, [pc, #212]	; (801ecc4 <HAL_TIM_PWM_Start+0x1fc>)
 801ebee:	4293      	cmp	r3, r2
 801ebf0:	d00e      	beq.n	801ec10 <HAL_TIM_PWM_Start+0x148>
 801ebf2:	687b      	ldr	r3, [r7, #4]
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	4a34      	ldr	r2, [pc, #208]	; (801ecc8 <HAL_TIM_PWM_Start+0x200>)
 801ebf8:	4293      	cmp	r3, r2
 801ebfa:	d009      	beq.n	801ec10 <HAL_TIM_PWM_Start+0x148>
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	681b      	ldr	r3, [r3, #0]
 801ec00:	4a32      	ldr	r2, [pc, #200]	; (801eccc <HAL_TIM_PWM_Start+0x204>)
 801ec02:	4293      	cmp	r3, r2
 801ec04:	d004      	beq.n	801ec10 <HAL_TIM_PWM_Start+0x148>
 801ec06:	687b      	ldr	r3, [r7, #4]
 801ec08:	681b      	ldr	r3, [r3, #0]
 801ec0a:	4a31      	ldr	r2, [pc, #196]	; (801ecd0 <HAL_TIM_PWM_Start+0x208>)
 801ec0c:	4293      	cmp	r3, r2
 801ec0e:	d101      	bne.n	801ec14 <HAL_TIM_PWM_Start+0x14c>
 801ec10:	2301      	movs	r3, #1
 801ec12:	e000      	b.n	801ec16 <HAL_TIM_PWM_Start+0x14e>
 801ec14:	2300      	movs	r3, #0
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d007      	beq.n	801ec2a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	681b      	ldr	r3, [r3, #0]
 801ec1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	681b      	ldr	r3, [r3, #0]
 801ec24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ec28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ec2a:	687b      	ldr	r3, [r7, #4]
 801ec2c:	681b      	ldr	r3, [r3, #0]
 801ec2e:	4a23      	ldr	r2, [pc, #140]	; (801ecbc <HAL_TIM_PWM_Start+0x1f4>)
 801ec30:	4293      	cmp	r3, r2
 801ec32:	d01d      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ec3c:	d018      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	681b      	ldr	r3, [r3, #0]
 801ec42:	4a24      	ldr	r2, [pc, #144]	; (801ecd4 <HAL_TIM_PWM_Start+0x20c>)
 801ec44:	4293      	cmp	r3, r2
 801ec46:	d013      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec48:	687b      	ldr	r3, [r7, #4]
 801ec4a:	681b      	ldr	r3, [r3, #0]
 801ec4c:	4a22      	ldr	r2, [pc, #136]	; (801ecd8 <HAL_TIM_PWM_Start+0x210>)
 801ec4e:	4293      	cmp	r3, r2
 801ec50:	d00e      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec52:	687b      	ldr	r3, [r7, #4]
 801ec54:	681b      	ldr	r3, [r3, #0]
 801ec56:	4a1a      	ldr	r2, [pc, #104]	; (801ecc0 <HAL_TIM_PWM_Start+0x1f8>)
 801ec58:	4293      	cmp	r3, r2
 801ec5a:	d009      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	681b      	ldr	r3, [r3, #0]
 801ec60:	4a18      	ldr	r2, [pc, #96]	; (801ecc4 <HAL_TIM_PWM_Start+0x1fc>)
 801ec62:	4293      	cmp	r3, r2
 801ec64:	d004      	beq.n	801ec70 <HAL_TIM_PWM_Start+0x1a8>
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	681b      	ldr	r3, [r3, #0]
 801ec6a:	4a19      	ldr	r2, [pc, #100]	; (801ecd0 <HAL_TIM_PWM_Start+0x208>)
 801ec6c:	4293      	cmp	r3, r2
 801ec6e:	d115      	bne.n	801ec9c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	681b      	ldr	r3, [r3, #0]
 801ec74:	689a      	ldr	r2, [r3, #8]
 801ec76:	4b19      	ldr	r3, [pc, #100]	; (801ecdc <HAL_TIM_PWM_Start+0x214>)
 801ec78:	4013      	ands	r3, r2
 801ec7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec7c:	68fb      	ldr	r3, [r7, #12]
 801ec7e:	2b06      	cmp	r3, #6
 801ec80:	d015      	beq.n	801ecae <HAL_TIM_PWM_Start+0x1e6>
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ec88:	d011      	beq.n	801ecae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801ec8a:	687b      	ldr	r3, [r7, #4]
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	681a      	ldr	r2, [r3, #0]
 801ec90:	687b      	ldr	r3, [r7, #4]
 801ec92:	681b      	ldr	r3, [r3, #0]
 801ec94:	f042 0201 	orr.w	r2, r2, #1
 801ec98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ec9a:	e008      	b.n	801ecae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	681a      	ldr	r2, [r3, #0]
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	681b      	ldr	r3, [r3, #0]
 801eca6:	f042 0201 	orr.w	r2, r2, #1
 801ecaa:	601a      	str	r2, [r3, #0]
 801ecac:	e000      	b.n	801ecb0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ecb0:	2300      	movs	r3, #0
}
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	3710      	adds	r7, #16
 801ecb6:	46bd      	mov	sp, r7
 801ecb8:	bd80      	pop	{r7, pc}
 801ecba:	bf00      	nop
 801ecbc:	40012c00 	.word	0x40012c00
 801ecc0:	40013400 	.word	0x40013400
 801ecc4:	40014000 	.word	0x40014000
 801ecc8:	40014400 	.word	0x40014400
 801eccc:	40014800 	.word	0x40014800
 801ecd0:	40015000 	.word	0x40015000
 801ecd4:	40000400 	.word	0x40000400
 801ecd8:	40000800 	.word	0x40000800
 801ecdc:	00010007 	.word	0x00010007

0801ece0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ece0:	b580      	push	{r7, lr}
 801ece2:	b082      	sub	sp, #8
 801ece4:	af00      	add	r7, sp, #0
 801ece6:	6078      	str	r0, [r7, #4]
 801ece8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801ecea:	687b      	ldr	r3, [r7, #4]
 801ecec:	681b      	ldr	r3, [r3, #0]
 801ecee:	2200      	movs	r2, #0
 801ecf0:	6839      	ldr	r1, [r7, #0]
 801ecf2:	4618      	mov	r0, r3
 801ecf4:	f000 ff1e 	bl	801fb34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ecf8:	687b      	ldr	r3, [r7, #4]
 801ecfa:	681b      	ldr	r3, [r3, #0]
 801ecfc:	4a40      	ldr	r2, [pc, #256]	; (801ee00 <HAL_TIM_PWM_Stop+0x120>)
 801ecfe:	4293      	cmp	r3, r2
 801ed00:	d018      	beq.n	801ed34 <HAL_TIM_PWM_Stop+0x54>
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	4a3f      	ldr	r2, [pc, #252]	; (801ee04 <HAL_TIM_PWM_Stop+0x124>)
 801ed08:	4293      	cmp	r3, r2
 801ed0a:	d013      	beq.n	801ed34 <HAL_TIM_PWM_Stop+0x54>
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	681b      	ldr	r3, [r3, #0]
 801ed10:	4a3d      	ldr	r2, [pc, #244]	; (801ee08 <HAL_TIM_PWM_Stop+0x128>)
 801ed12:	4293      	cmp	r3, r2
 801ed14:	d00e      	beq.n	801ed34 <HAL_TIM_PWM_Stop+0x54>
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	681b      	ldr	r3, [r3, #0]
 801ed1a:	4a3c      	ldr	r2, [pc, #240]	; (801ee0c <HAL_TIM_PWM_Stop+0x12c>)
 801ed1c:	4293      	cmp	r3, r2
 801ed1e:	d009      	beq.n	801ed34 <HAL_TIM_PWM_Stop+0x54>
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	4a3a      	ldr	r2, [pc, #232]	; (801ee10 <HAL_TIM_PWM_Stop+0x130>)
 801ed26:	4293      	cmp	r3, r2
 801ed28:	d004      	beq.n	801ed34 <HAL_TIM_PWM_Stop+0x54>
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	681b      	ldr	r3, [r3, #0]
 801ed2e:	4a39      	ldr	r2, [pc, #228]	; (801ee14 <HAL_TIM_PWM_Stop+0x134>)
 801ed30:	4293      	cmp	r3, r2
 801ed32:	d101      	bne.n	801ed38 <HAL_TIM_PWM_Stop+0x58>
 801ed34:	2301      	movs	r3, #1
 801ed36:	e000      	b.n	801ed3a <HAL_TIM_PWM_Stop+0x5a>
 801ed38:	2300      	movs	r3, #0
 801ed3a:	2b00      	cmp	r3, #0
 801ed3c:	d017      	beq.n	801ed6e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	681b      	ldr	r3, [r3, #0]
 801ed42:	6a1a      	ldr	r2, [r3, #32]
 801ed44:	f241 1311 	movw	r3, #4369	; 0x1111
 801ed48:	4013      	ands	r3, r2
 801ed4a:	2b00      	cmp	r3, #0
 801ed4c:	d10f      	bne.n	801ed6e <HAL_TIM_PWM_Stop+0x8e>
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	681b      	ldr	r3, [r3, #0]
 801ed52:	6a1a      	ldr	r2, [r3, #32]
 801ed54:	f244 4344 	movw	r3, #17476	; 0x4444
 801ed58:	4013      	ands	r3, r2
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	d107      	bne.n	801ed6e <HAL_TIM_PWM_Stop+0x8e>
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	681b      	ldr	r3, [r3, #0]
 801ed62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801ed6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	681b      	ldr	r3, [r3, #0]
 801ed72:	6a1a      	ldr	r2, [r3, #32]
 801ed74:	f241 1311 	movw	r3, #4369	; 0x1111
 801ed78:	4013      	ands	r3, r2
 801ed7a:	2b00      	cmp	r3, #0
 801ed7c:	d10f      	bne.n	801ed9e <HAL_TIM_PWM_Stop+0xbe>
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	681b      	ldr	r3, [r3, #0]
 801ed82:	6a1a      	ldr	r2, [r3, #32]
 801ed84:	f244 4344 	movw	r3, #17476	; 0x4444
 801ed88:	4013      	ands	r3, r2
 801ed8a:	2b00      	cmp	r3, #0
 801ed8c:	d107      	bne.n	801ed9e <HAL_TIM_PWM_Stop+0xbe>
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	681b      	ldr	r3, [r3, #0]
 801ed92:	681a      	ldr	r2, [r3, #0]
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	681b      	ldr	r3, [r3, #0]
 801ed98:	f022 0201 	bic.w	r2, r2, #1
 801ed9c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801ed9e:	683b      	ldr	r3, [r7, #0]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d104      	bne.n	801edae <HAL_TIM_PWM_Stop+0xce>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	2201      	movs	r2, #1
 801eda8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801edac:	e023      	b.n	801edf6 <HAL_TIM_PWM_Stop+0x116>
 801edae:	683b      	ldr	r3, [r7, #0]
 801edb0:	2b04      	cmp	r3, #4
 801edb2:	d104      	bne.n	801edbe <HAL_TIM_PWM_Stop+0xde>
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	2201      	movs	r2, #1
 801edb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801edbc:	e01b      	b.n	801edf6 <HAL_TIM_PWM_Stop+0x116>
 801edbe:	683b      	ldr	r3, [r7, #0]
 801edc0:	2b08      	cmp	r3, #8
 801edc2:	d104      	bne.n	801edce <HAL_TIM_PWM_Stop+0xee>
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	2201      	movs	r2, #1
 801edc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801edcc:	e013      	b.n	801edf6 <HAL_TIM_PWM_Stop+0x116>
 801edce:	683b      	ldr	r3, [r7, #0]
 801edd0:	2b0c      	cmp	r3, #12
 801edd2:	d104      	bne.n	801edde <HAL_TIM_PWM_Stop+0xfe>
 801edd4:	687b      	ldr	r3, [r7, #4]
 801edd6:	2201      	movs	r2, #1
 801edd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eddc:	e00b      	b.n	801edf6 <HAL_TIM_PWM_Stop+0x116>
 801edde:	683b      	ldr	r3, [r7, #0]
 801ede0:	2b10      	cmp	r3, #16
 801ede2:	d104      	bne.n	801edee <HAL_TIM_PWM_Stop+0x10e>
 801ede4:	687b      	ldr	r3, [r7, #4]
 801ede6:	2201      	movs	r2, #1
 801ede8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801edec:	e003      	b.n	801edf6 <HAL_TIM_PWM_Stop+0x116>
 801edee:	687b      	ldr	r3, [r7, #4]
 801edf0:	2201      	movs	r2, #1
 801edf2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801edf6:	2300      	movs	r3, #0
}
 801edf8:	4618      	mov	r0, r3
 801edfa:	3708      	adds	r7, #8
 801edfc:	46bd      	mov	sp, r7
 801edfe:	bd80      	pop	{r7, pc}
 801ee00:	40012c00 	.word	0x40012c00
 801ee04:	40013400 	.word	0x40013400
 801ee08:	40014000 	.word	0x40014000
 801ee0c:	40014400 	.word	0x40014400
 801ee10:	40014800 	.word	0x40014800
 801ee14:	40015000 	.word	0x40015000

0801ee18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ee18:	b580      	push	{r7, lr}
 801ee1a:	b082      	sub	sp, #8
 801ee1c:	af00      	add	r7, sp, #0
 801ee1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	681b      	ldr	r3, [r3, #0]
 801ee24:	691b      	ldr	r3, [r3, #16]
 801ee26:	f003 0302 	and.w	r3, r3, #2
 801ee2a:	2b02      	cmp	r3, #2
 801ee2c:	d122      	bne.n	801ee74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ee2e:	687b      	ldr	r3, [r7, #4]
 801ee30:	681b      	ldr	r3, [r3, #0]
 801ee32:	68db      	ldr	r3, [r3, #12]
 801ee34:	f003 0302 	and.w	r3, r3, #2
 801ee38:	2b02      	cmp	r3, #2
 801ee3a:	d11b      	bne.n	801ee74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	f06f 0202 	mvn.w	r2, #2
 801ee44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ee46:	687b      	ldr	r3, [r7, #4]
 801ee48:	2201      	movs	r2, #1
 801ee4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	681b      	ldr	r3, [r3, #0]
 801ee50:	699b      	ldr	r3, [r3, #24]
 801ee52:	f003 0303 	and.w	r3, r3, #3
 801ee56:	2b00      	cmp	r3, #0
 801ee58:	d003      	beq.n	801ee62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ee5a:	6878      	ldr	r0, [r7, #4]
 801ee5c:	f000 fa84 	bl	801f368 <HAL_TIM_IC_CaptureCallback>
 801ee60:	e005      	b.n	801ee6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ee62:	6878      	ldr	r0, [r7, #4]
 801ee64:	f000 fa76 	bl	801f354 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ee68:	6878      	ldr	r0, [r7, #4]
 801ee6a:	f000 fa87 	bl	801f37c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ee6e:	687b      	ldr	r3, [r7, #4]
 801ee70:	2200      	movs	r2, #0
 801ee72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	681b      	ldr	r3, [r3, #0]
 801ee78:	691b      	ldr	r3, [r3, #16]
 801ee7a:	f003 0304 	and.w	r3, r3, #4
 801ee7e:	2b04      	cmp	r3, #4
 801ee80:	d122      	bne.n	801eec8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ee82:	687b      	ldr	r3, [r7, #4]
 801ee84:	681b      	ldr	r3, [r3, #0]
 801ee86:	68db      	ldr	r3, [r3, #12]
 801ee88:	f003 0304 	and.w	r3, r3, #4
 801ee8c:	2b04      	cmp	r3, #4
 801ee8e:	d11b      	bne.n	801eec8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	681b      	ldr	r3, [r3, #0]
 801ee94:	f06f 0204 	mvn.w	r2, #4
 801ee98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ee9a:	687b      	ldr	r3, [r7, #4]
 801ee9c:	2202      	movs	r2, #2
 801ee9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801eea0:	687b      	ldr	r3, [r7, #4]
 801eea2:	681b      	ldr	r3, [r3, #0]
 801eea4:	699b      	ldr	r3, [r3, #24]
 801eea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d003      	beq.n	801eeb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801eeae:	6878      	ldr	r0, [r7, #4]
 801eeb0:	f000 fa5a 	bl	801f368 <HAL_TIM_IC_CaptureCallback>
 801eeb4:	e005      	b.n	801eec2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801eeb6:	6878      	ldr	r0, [r7, #4]
 801eeb8:	f000 fa4c 	bl	801f354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eebc:	6878      	ldr	r0, [r7, #4]
 801eebe:	f000 fa5d 	bl	801f37c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	2200      	movs	r2, #0
 801eec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	681b      	ldr	r3, [r3, #0]
 801eecc:	691b      	ldr	r3, [r3, #16]
 801eece:	f003 0308 	and.w	r3, r3, #8
 801eed2:	2b08      	cmp	r3, #8
 801eed4:	d122      	bne.n	801ef1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	681b      	ldr	r3, [r3, #0]
 801eeda:	68db      	ldr	r3, [r3, #12]
 801eedc:	f003 0308 	and.w	r3, r3, #8
 801eee0:	2b08      	cmp	r3, #8
 801eee2:	d11b      	bne.n	801ef1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801eee4:	687b      	ldr	r3, [r7, #4]
 801eee6:	681b      	ldr	r3, [r3, #0]
 801eee8:	f06f 0208 	mvn.w	r2, #8
 801eeec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	2204      	movs	r2, #4
 801eef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801eef4:	687b      	ldr	r3, [r7, #4]
 801eef6:	681b      	ldr	r3, [r3, #0]
 801eef8:	69db      	ldr	r3, [r3, #28]
 801eefa:	f003 0303 	and.w	r3, r3, #3
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	d003      	beq.n	801ef0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef02:	6878      	ldr	r0, [r7, #4]
 801ef04:	f000 fa30 	bl	801f368 <HAL_TIM_IC_CaptureCallback>
 801ef08:	e005      	b.n	801ef16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef0a:	6878      	ldr	r0, [r7, #4]
 801ef0c:	f000 fa22 	bl	801f354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef10:	6878      	ldr	r0, [r7, #4]
 801ef12:	f000 fa33 	bl	801f37c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	2200      	movs	r2, #0
 801ef1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	681b      	ldr	r3, [r3, #0]
 801ef20:	691b      	ldr	r3, [r3, #16]
 801ef22:	f003 0310 	and.w	r3, r3, #16
 801ef26:	2b10      	cmp	r3, #16
 801ef28:	d122      	bne.n	801ef70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ef2a:	687b      	ldr	r3, [r7, #4]
 801ef2c:	681b      	ldr	r3, [r3, #0]
 801ef2e:	68db      	ldr	r3, [r3, #12]
 801ef30:	f003 0310 	and.w	r3, r3, #16
 801ef34:	2b10      	cmp	r3, #16
 801ef36:	d11b      	bne.n	801ef70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	681b      	ldr	r3, [r3, #0]
 801ef3c:	f06f 0210 	mvn.w	r2, #16
 801ef40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	2208      	movs	r2, #8
 801ef46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ef48:	687b      	ldr	r3, [r7, #4]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	69db      	ldr	r3, [r3, #28]
 801ef4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ef52:	2b00      	cmp	r3, #0
 801ef54:	d003      	beq.n	801ef5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801ef56:	6878      	ldr	r0, [r7, #4]
 801ef58:	f000 fa06 	bl	801f368 <HAL_TIM_IC_CaptureCallback>
 801ef5c:	e005      	b.n	801ef6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef5e:	6878      	ldr	r0, [r7, #4]
 801ef60:	f000 f9f8 	bl	801f354 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801ef64:	6878      	ldr	r0, [r7, #4]
 801ef66:	f000 fa09 	bl	801f37c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ef6a:	687b      	ldr	r3, [r7, #4]
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	681b      	ldr	r3, [r3, #0]
 801ef74:	691b      	ldr	r3, [r3, #16]
 801ef76:	f003 0301 	and.w	r3, r3, #1
 801ef7a:	2b01      	cmp	r3, #1
 801ef7c:	d10e      	bne.n	801ef9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	681b      	ldr	r3, [r3, #0]
 801ef82:	68db      	ldr	r3, [r3, #12]
 801ef84:	f003 0301 	and.w	r3, r3, #1
 801ef88:	2b01      	cmp	r3, #1
 801ef8a:	d107      	bne.n	801ef9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	f06f 0201 	mvn.w	r2, #1
 801ef94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801ef96:	6878      	ldr	r0, [r7, #4]
 801ef98:	f000 f9d2 	bl	801f340 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	681b      	ldr	r3, [r3, #0]
 801efa0:	691b      	ldr	r3, [r3, #16]
 801efa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efa6:	2b80      	cmp	r3, #128	; 0x80
 801efa8:	d10e      	bne.n	801efc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801efaa:	687b      	ldr	r3, [r7, #4]
 801efac:	681b      	ldr	r3, [r3, #0]
 801efae:	68db      	ldr	r3, [r3, #12]
 801efb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efb4:	2b80      	cmp	r3, #128	; 0x80
 801efb6:	d107      	bne.n	801efc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	681b      	ldr	r3, [r3, #0]
 801efbc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801efc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801efc2:	6878      	ldr	r0, [r7, #4]
 801efc4:	f000 ff26 	bl	801fe14 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	691b      	ldr	r3, [r3, #16]
 801efce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801efd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801efd6:	d10e      	bne.n	801eff6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	68db      	ldr	r3, [r3, #12]
 801efde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801efe2:	2b80      	cmp	r3, #128	; 0x80
 801efe4:	d107      	bne.n	801eff6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	681b      	ldr	r3, [r3, #0]
 801efea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801efee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801eff0:	6878      	ldr	r0, [r7, #4]
 801eff2:	f000 ff19 	bl	801fe28 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	681b      	ldr	r3, [r3, #0]
 801effa:	691b      	ldr	r3, [r3, #16]
 801effc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f000:	2b40      	cmp	r3, #64	; 0x40
 801f002:	d10e      	bne.n	801f022 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	68db      	ldr	r3, [r3, #12]
 801f00a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f00e:	2b40      	cmp	r3, #64	; 0x40
 801f010:	d107      	bne.n	801f022 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f012:	687b      	ldr	r3, [r7, #4]
 801f014:	681b      	ldr	r3, [r3, #0]
 801f016:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f01a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f01c:	6878      	ldr	r0, [r7, #4]
 801f01e:	f000 f9b7 	bl	801f390 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f022:	687b      	ldr	r3, [r7, #4]
 801f024:	681b      	ldr	r3, [r3, #0]
 801f026:	691b      	ldr	r3, [r3, #16]
 801f028:	f003 0320 	and.w	r3, r3, #32
 801f02c:	2b20      	cmp	r3, #32
 801f02e:	d10e      	bne.n	801f04e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	68db      	ldr	r3, [r3, #12]
 801f036:	f003 0320 	and.w	r3, r3, #32
 801f03a:	2b20      	cmp	r3, #32
 801f03c:	d107      	bne.n	801f04e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	681b      	ldr	r3, [r3, #0]
 801f042:	f06f 0220 	mvn.w	r2, #32
 801f046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f048:	6878      	ldr	r0, [r7, #4]
 801f04a:	f000 fed9 	bl	801fe00 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	691b      	ldr	r3, [r3, #16]
 801f054:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f058:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f05c:	d10f      	bne.n	801f07e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	681b      	ldr	r3, [r3, #0]
 801f062:	68db      	ldr	r3, [r3, #12]
 801f064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f06c:	d107      	bne.n	801f07e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	681b      	ldr	r3, [r3, #0]
 801f072:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801f076:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801f078:	6878      	ldr	r0, [r7, #4]
 801f07a:	f000 fedf 	bl	801fe3c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	681b      	ldr	r3, [r3, #0]
 801f082:	691b      	ldr	r3, [r3, #16]
 801f084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f088:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f08c:	d10f      	bne.n	801f0ae <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801f08e:	687b      	ldr	r3, [r7, #4]
 801f090:	681b      	ldr	r3, [r3, #0]
 801f092:	68db      	ldr	r3, [r3, #12]
 801f094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801f098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801f09c:	d107      	bne.n	801f0ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801f0a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801f0a8:	6878      	ldr	r0, [r7, #4]
 801f0aa:	f000 fed1 	bl	801fe50 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	681b      	ldr	r3, [r3, #0]
 801f0b2:	691b      	ldr	r3, [r3, #16]
 801f0b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f0b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f0bc:	d10f      	bne.n	801f0de <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801f0be:	687b      	ldr	r3, [r7, #4]
 801f0c0:	681b      	ldr	r3, [r3, #0]
 801f0c2:	68db      	ldr	r3, [r3, #12]
 801f0c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f0c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801f0cc:	d107      	bne.n	801f0de <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801f0ce:	687b      	ldr	r3, [r7, #4]
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801f0d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801f0d8:	6878      	ldr	r0, [r7, #4]
 801f0da:	f000 fec3 	bl	801fe64 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	691b      	ldr	r3, [r3, #16]
 801f0e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f0e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f0ec:	d10f      	bne.n	801f10e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801f0ee:	687b      	ldr	r3, [r7, #4]
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	68db      	ldr	r3, [r3, #12]
 801f0f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801f0f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801f0fc:	d107      	bne.n	801f10e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	681b      	ldr	r3, [r3, #0]
 801f102:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801f106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801f108:	6878      	ldr	r0, [r7, #4]
 801f10a:	f000 feb5 	bl	801fe78 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f10e:	bf00      	nop
 801f110:	3708      	adds	r7, #8
 801f112:	46bd      	mov	sp, r7
 801f114:	bd80      	pop	{r7, pc}
	...

0801f118 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f118:	b580      	push	{r7, lr}
 801f11a:	b086      	sub	sp, #24
 801f11c:	af00      	add	r7, sp, #0
 801f11e:	60f8      	str	r0, [r7, #12]
 801f120:	60b9      	str	r1, [r7, #8]
 801f122:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f124:	2300      	movs	r3, #0
 801f126:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f12e:	2b01      	cmp	r3, #1
 801f130:	d101      	bne.n	801f136 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f132:	2302      	movs	r3, #2
 801f134:	e0ff      	b.n	801f336 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f136:	68fb      	ldr	r3, [r7, #12]
 801f138:	2201      	movs	r2, #1
 801f13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f13e:	687b      	ldr	r3, [r7, #4]
 801f140:	2b14      	cmp	r3, #20
 801f142:	f200 80f0 	bhi.w	801f326 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f146:	a201      	add	r2, pc, #4	; (adr r2, 801f14c <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f14c:	0801f1a1 	.word	0x0801f1a1
 801f150:	0801f327 	.word	0x0801f327
 801f154:	0801f327 	.word	0x0801f327
 801f158:	0801f327 	.word	0x0801f327
 801f15c:	0801f1e1 	.word	0x0801f1e1
 801f160:	0801f327 	.word	0x0801f327
 801f164:	0801f327 	.word	0x0801f327
 801f168:	0801f327 	.word	0x0801f327
 801f16c:	0801f223 	.word	0x0801f223
 801f170:	0801f327 	.word	0x0801f327
 801f174:	0801f327 	.word	0x0801f327
 801f178:	0801f327 	.word	0x0801f327
 801f17c:	0801f263 	.word	0x0801f263
 801f180:	0801f327 	.word	0x0801f327
 801f184:	0801f327 	.word	0x0801f327
 801f188:	0801f327 	.word	0x0801f327
 801f18c:	0801f2a5 	.word	0x0801f2a5
 801f190:	0801f327 	.word	0x0801f327
 801f194:	0801f327 	.word	0x0801f327
 801f198:	0801f327 	.word	0x0801f327
 801f19c:	0801f2e5 	.word	0x0801f2e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f1a0:	68fb      	ldr	r3, [r7, #12]
 801f1a2:	681b      	ldr	r3, [r3, #0]
 801f1a4:	68b9      	ldr	r1, [r7, #8]
 801f1a6:	4618      	mov	r0, r3
 801f1a8:	f000 f99a 	bl	801f4e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	699a      	ldr	r2, [r3, #24]
 801f1b2:	68fb      	ldr	r3, [r7, #12]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	f042 0208 	orr.w	r2, r2, #8
 801f1ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	681b      	ldr	r3, [r3, #0]
 801f1c0:	699a      	ldr	r2, [r3, #24]
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	681b      	ldr	r3, [r3, #0]
 801f1c6:	f022 0204 	bic.w	r2, r2, #4
 801f1ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f1cc:	68fb      	ldr	r3, [r7, #12]
 801f1ce:	681b      	ldr	r3, [r3, #0]
 801f1d0:	6999      	ldr	r1, [r3, #24]
 801f1d2:	68bb      	ldr	r3, [r7, #8]
 801f1d4:	691a      	ldr	r2, [r3, #16]
 801f1d6:	68fb      	ldr	r3, [r7, #12]
 801f1d8:	681b      	ldr	r3, [r3, #0]
 801f1da:	430a      	orrs	r2, r1
 801f1dc:	619a      	str	r2, [r3, #24]
      break;
 801f1de:	e0a5      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f1e0:	68fb      	ldr	r3, [r7, #12]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	68b9      	ldr	r1, [r7, #8]
 801f1e6:	4618      	mov	r0, r3
 801f1e8:	f000 fa14 	bl	801f614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f1ec:	68fb      	ldr	r3, [r7, #12]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	699a      	ldr	r2, [r3, #24]
 801f1f2:	68fb      	ldr	r3, [r7, #12]
 801f1f4:	681b      	ldr	r3, [r3, #0]
 801f1f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f1fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f1fc:	68fb      	ldr	r3, [r7, #12]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	699a      	ldr	r2, [r3, #24]
 801f202:	68fb      	ldr	r3, [r7, #12]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f20a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f20c:	68fb      	ldr	r3, [r7, #12]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	6999      	ldr	r1, [r3, #24]
 801f212:	68bb      	ldr	r3, [r7, #8]
 801f214:	691b      	ldr	r3, [r3, #16]
 801f216:	021a      	lsls	r2, r3, #8
 801f218:	68fb      	ldr	r3, [r7, #12]
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	430a      	orrs	r2, r1
 801f21e:	619a      	str	r2, [r3, #24]
      break;
 801f220:	e084      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f222:	68fb      	ldr	r3, [r7, #12]
 801f224:	681b      	ldr	r3, [r3, #0]
 801f226:	68b9      	ldr	r1, [r7, #8]
 801f228:	4618      	mov	r0, r3
 801f22a:	f000 fa87 	bl	801f73c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f22e:	68fb      	ldr	r3, [r7, #12]
 801f230:	681b      	ldr	r3, [r3, #0]
 801f232:	69da      	ldr	r2, [r3, #28]
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	681b      	ldr	r3, [r3, #0]
 801f238:	f042 0208 	orr.w	r2, r2, #8
 801f23c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f23e:	68fb      	ldr	r3, [r7, #12]
 801f240:	681b      	ldr	r3, [r3, #0]
 801f242:	69da      	ldr	r2, [r3, #28]
 801f244:	68fb      	ldr	r3, [r7, #12]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	f022 0204 	bic.w	r2, r2, #4
 801f24c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f24e:	68fb      	ldr	r3, [r7, #12]
 801f250:	681b      	ldr	r3, [r3, #0]
 801f252:	69d9      	ldr	r1, [r3, #28]
 801f254:	68bb      	ldr	r3, [r7, #8]
 801f256:	691a      	ldr	r2, [r3, #16]
 801f258:	68fb      	ldr	r3, [r7, #12]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	430a      	orrs	r2, r1
 801f25e:	61da      	str	r2, [r3, #28]
      break;
 801f260:	e064      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f262:	68fb      	ldr	r3, [r7, #12]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	68b9      	ldr	r1, [r7, #8]
 801f268:	4618      	mov	r0, r3
 801f26a:	f000 faf9 	bl	801f860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	681b      	ldr	r3, [r3, #0]
 801f272:	69da      	ldr	r2, [r3, #28]
 801f274:	68fb      	ldr	r3, [r7, #12]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f27c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	681b      	ldr	r3, [r3, #0]
 801f282:	69da      	ldr	r2, [r3, #28]
 801f284:	68fb      	ldr	r3, [r7, #12]
 801f286:	681b      	ldr	r3, [r3, #0]
 801f288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f28c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f28e:	68fb      	ldr	r3, [r7, #12]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	69d9      	ldr	r1, [r3, #28]
 801f294:	68bb      	ldr	r3, [r7, #8]
 801f296:	691b      	ldr	r3, [r3, #16]
 801f298:	021a      	lsls	r2, r3, #8
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	430a      	orrs	r2, r1
 801f2a0:	61da      	str	r2, [r3, #28]
      break;
 801f2a2:	e043      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	68b9      	ldr	r1, [r7, #8]
 801f2aa:	4618      	mov	r0, r3
 801f2ac:	f000 fb6c 	bl	801f988 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f2b0:	68fb      	ldr	r3, [r7, #12]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f2b6:	68fb      	ldr	r3, [r7, #12]
 801f2b8:	681b      	ldr	r3, [r3, #0]
 801f2ba:	f042 0208 	orr.w	r2, r2, #8
 801f2be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f2c0:	68fb      	ldr	r3, [r7, #12]
 801f2c2:	681b      	ldr	r3, [r3, #0]
 801f2c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f2c6:	68fb      	ldr	r3, [r7, #12]
 801f2c8:	681b      	ldr	r3, [r3, #0]
 801f2ca:	f022 0204 	bic.w	r2, r2, #4
 801f2ce:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f2d0:	68fb      	ldr	r3, [r7, #12]
 801f2d2:	681b      	ldr	r3, [r3, #0]
 801f2d4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f2d6:	68bb      	ldr	r3, [r7, #8]
 801f2d8:	691a      	ldr	r2, [r3, #16]
 801f2da:	68fb      	ldr	r3, [r7, #12]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	430a      	orrs	r2, r1
 801f2e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f2e2:	e023      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	68b9      	ldr	r1, [r7, #8]
 801f2ea:	4618      	mov	r0, r3
 801f2ec:	f000 fbb6 	bl	801fa5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	681b      	ldr	r3, [r3, #0]
 801f2f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f2f6:	68fb      	ldr	r3, [r7, #12]
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f2fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f300:	68fb      	ldr	r3, [r7, #12]
 801f302:	681b      	ldr	r3, [r3, #0]
 801f304:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f306:	68fb      	ldr	r3, [r7, #12]
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f30e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f310:	68fb      	ldr	r3, [r7, #12]
 801f312:	681b      	ldr	r3, [r3, #0]
 801f314:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801f316:	68bb      	ldr	r3, [r7, #8]
 801f318:	691b      	ldr	r3, [r3, #16]
 801f31a:	021a      	lsls	r2, r3, #8
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	430a      	orrs	r2, r1
 801f322:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801f324:	e002      	b.n	801f32c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f326:	2301      	movs	r3, #1
 801f328:	75fb      	strb	r3, [r7, #23]
      break;
 801f32a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	2200      	movs	r2, #0
 801f330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f334:	7dfb      	ldrb	r3, [r7, #23]
}
 801f336:	4618      	mov	r0, r3
 801f338:	3718      	adds	r7, #24
 801f33a:	46bd      	mov	sp, r7
 801f33c:	bd80      	pop	{r7, pc}
 801f33e:	bf00      	nop

0801f340 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f340:	b480      	push	{r7}
 801f342:	b083      	sub	sp, #12
 801f344:	af00      	add	r7, sp, #0
 801f346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801f348:	bf00      	nop
 801f34a:	370c      	adds	r7, #12
 801f34c:	46bd      	mov	sp, r7
 801f34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f352:	4770      	bx	lr

0801f354 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f354:	b480      	push	{r7}
 801f356:	b083      	sub	sp, #12
 801f358:	af00      	add	r7, sp, #0
 801f35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f35c:	bf00      	nop
 801f35e:	370c      	adds	r7, #12
 801f360:	46bd      	mov	sp, r7
 801f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f366:	4770      	bx	lr

0801f368 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801f368:	b480      	push	{r7}
 801f36a:	b083      	sub	sp, #12
 801f36c:	af00      	add	r7, sp, #0
 801f36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801f370:	bf00      	nop
 801f372:	370c      	adds	r7, #12
 801f374:	46bd      	mov	sp, r7
 801f376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f37a:	4770      	bx	lr

0801f37c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f37c:	b480      	push	{r7}
 801f37e:	b083      	sub	sp, #12
 801f380:	af00      	add	r7, sp, #0
 801f382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f384:	bf00      	nop
 801f386:	370c      	adds	r7, #12
 801f388:	46bd      	mov	sp, r7
 801f38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f38e:	4770      	bx	lr

0801f390 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f390:	b480      	push	{r7}
 801f392:	b083      	sub	sp, #12
 801f394:	af00      	add	r7, sp, #0
 801f396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f398:	bf00      	nop
 801f39a:	370c      	adds	r7, #12
 801f39c:	46bd      	mov	sp, r7
 801f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3a2:	4770      	bx	lr

0801f3a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801f3a4:	b480      	push	{r7}
 801f3a6:	b085      	sub	sp, #20
 801f3a8:	af00      	add	r7, sp, #0
 801f3aa:	6078      	str	r0, [r7, #4]
 801f3ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	681b      	ldr	r3, [r3, #0]
 801f3b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f3b4:	687b      	ldr	r3, [r7, #4]
 801f3b6:	4a42      	ldr	r2, [pc, #264]	; (801f4c0 <TIM_Base_SetConfig+0x11c>)
 801f3b8:	4293      	cmp	r3, r2
 801f3ba:	d013      	beq.n	801f3e4 <TIM_Base_SetConfig+0x40>
 801f3bc:	687b      	ldr	r3, [r7, #4]
 801f3be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f3c2:	d00f      	beq.n	801f3e4 <TIM_Base_SetConfig+0x40>
 801f3c4:	687b      	ldr	r3, [r7, #4]
 801f3c6:	4a3f      	ldr	r2, [pc, #252]	; (801f4c4 <TIM_Base_SetConfig+0x120>)
 801f3c8:	4293      	cmp	r3, r2
 801f3ca:	d00b      	beq.n	801f3e4 <TIM_Base_SetConfig+0x40>
 801f3cc:	687b      	ldr	r3, [r7, #4]
 801f3ce:	4a3e      	ldr	r2, [pc, #248]	; (801f4c8 <TIM_Base_SetConfig+0x124>)
 801f3d0:	4293      	cmp	r3, r2
 801f3d2:	d007      	beq.n	801f3e4 <TIM_Base_SetConfig+0x40>
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	4a3d      	ldr	r2, [pc, #244]	; (801f4cc <TIM_Base_SetConfig+0x128>)
 801f3d8:	4293      	cmp	r3, r2
 801f3da:	d003      	beq.n	801f3e4 <TIM_Base_SetConfig+0x40>
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	4a3c      	ldr	r2, [pc, #240]	; (801f4d0 <TIM_Base_SetConfig+0x12c>)
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	d108      	bne.n	801f3f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f3ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f3ec:	683b      	ldr	r3, [r7, #0]
 801f3ee:	685b      	ldr	r3, [r3, #4]
 801f3f0:	68fa      	ldr	r2, [r7, #12]
 801f3f2:	4313      	orrs	r3, r2
 801f3f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	4a31      	ldr	r2, [pc, #196]	; (801f4c0 <TIM_Base_SetConfig+0x11c>)
 801f3fa:	4293      	cmp	r3, r2
 801f3fc:	d01f      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f3fe:	687b      	ldr	r3, [r7, #4]
 801f400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f404:	d01b      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f406:	687b      	ldr	r3, [r7, #4]
 801f408:	4a2e      	ldr	r2, [pc, #184]	; (801f4c4 <TIM_Base_SetConfig+0x120>)
 801f40a:	4293      	cmp	r3, r2
 801f40c:	d017      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f40e:	687b      	ldr	r3, [r7, #4]
 801f410:	4a2d      	ldr	r2, [pc, #180]	; (801f4c8 <TIM_Base_SetConfig+0x124>)
 801f412:	4293      	cmp	r3, r2
 801f414:	d013      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f416:	687b      	ldr	r3, [r7, #4]
 801f418:	4a2c      	ldr	r2, [pc, #176]	; (801f4cc <TIM_Base_SetConfig+0x128>)
 801f41a:	4293      	cmp	r3, r2
 801f41c:	d00f      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f41e:	687b      	ldr	r3, [r7, #4]
 801f420:	4a2c      	ldr	r2, [pc, #176]	; (801f4d4 <TIM_Base_SetConfig+0x130>)
 801f422:	4293      	cmp	r3, r2
 801f424:	d00b      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	4a2b      	ldr	r2, [pc, #172]	; (801f4d8 <TIM_Base_SetConfig+0x134>)
 801f42a:	4293      	cmp	r3, r2
 801f42c:	d007      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	4a2a      	ldr	r2, [pc, #168]	; (801f4dc <TIM_Base_SetConfig+0x138>)
 801f432:	4293      	cmp	r3, r2
 801f434:	d003      	beq.n	801f43e <TIM_Base_SetConfig+0x9a>
 801f436:	687b      	ldr	r3, [r7, #4]
 801f438:	4a25      	ldr	r2, [pc, #148]	; (801f4d0 <TIM_Base_SetConfig+0x12c>)
 801f43a:	4293      	cmp	r3, r2
 801f43c:	d108      	bne.n	801f450 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f444:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f446:	683b      	ldr	r3, [r7, #0]
 801f448:	68db      	ldr	r3, [r3, #12]
 801f44a:	68fa      	ldr	r2, [r7, #12]
 801f44c:	4313      	orrs	r3, r2
 801f44e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f456:	683b      	ldr	r3, [r7, #0]
 801f458:	695b      	ldr	r3, [r3, #20]
 801f45a:	4313      	orrs	r3, r2
 801f45c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f45e:	687b      	ldr	r3, [r7, #4]
 801f460:	68fa      	ldr	r2, [r7, #12]
 801f462:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f464:	683b      	ldr	r3, [r7, #0]
 801f466:	689a      	ldr	r2, [r3, #8]
 801f468:	687b      	ldr	r3, [r7, #4]
 801f46a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f46c:	683b      	ldr	r3, [r7, #0]
 801f46e:	681a      	ldr	r2, [r3, #0]
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f474:	687b      	ldr	r3, [r7, #4]
 801f476:	4a12      	ldr	r2, [pc, #72]	; (801f4c0 <TIM_Base_SetConfig+0x11c>)
 801f478:	4293      	cmp	r3, r2
 801f47a:	d013      	beq.n	801f4a4 <TIM_Base_SetConfig+0x100>
 801f47c:	687b      	ldr	r3, [r7, #4]
 801f47e:	4a13      	ldr	r2, [pc, #76]	; (801f4cc <TIM_Base_SetConfig+0x128>)
 801f480:	4293      	cmp	r3, r2
 801f482:	d00f      	beq.n	801f4a4 <TIM_Base_SetConfig+0x100>
 801f484:	687b      	ldr	r3, [r7, #4]
 801f486:	4a13      	ldr	r2, [pc, #76]	; (801f4d4 <TIM_Base_SetConfig+0x130>)
 801f488:	4293      	cmp	r3, r2
 801f48a:	d00b      	beq.n	801f4a4 <TIM_Base_SetConfig+0x100>
 801f48c:	687b      	ldr	r3, [r7, #4]
 801f48e:	4a12      	ldr	r2, [pc, #72]	; (801f4d8 <TIM_Base_SetConfig+0x134>)
 801f490:	4293      	cmp	r3, r2
 801f492:	d007      	beq.n	801f4a4 <TIM_Base_SetConfig+0x100>
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	4a11      	ldr	r2, [pc, #68]	; (801f4dc <TIM_Base_SetConfig+0x138>)
 801f498:	4293      	cmp	r3, r2
 801f49a:	d003      	beq.n	801f4a4 <TIM_Base_SetConfig+0x100>
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	4a0c      	ldr	r2, [pc, #48]	; (801f4d0 <TIM_Base_SetConfig+0x12c>)
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	d103      	bne.n	801f4ac <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f4a4:	683b      	ldr	r3, [r7, #0]
 801f4a6:	691a      	ldr	r2, [r3, #16]
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	2201      	movs	r2, #1
 801f4b0:	615a      	str	r2, [r3, #20]
}
 801f4b2:	bf00      	nop
 801f4b4:	3714      	adds	r7, #20
 801f4b6:	46bd      	mov	sp, r7
 801f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f4bc:	4770      	bx	lr
 801f4be:	bf00      	nop
 801f4c0:	40012c00 	.word	0x40012c00
 801f4c4:	40000400 	.word	0x40000400
 801f4c8:	40000800 	.word	0x40000800
 801f4cc:	40013400 	.word	0x40013400
 801f4d0:	40015000 	.word	0x40015000
 801f4d4:	40014000 	.word	0x40014000
 801f4d8:	40014400 	.word	0x40014400
 801f4dc:	40014800 	.word	0x40014800

0801f4e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f4e0:	b480      	push	{r7}
 801f4e2:	b087      	sub	sp, #28
 801f4e4:	af00      	add	r7, sp, #0
 801f4e6:	6078      	str	r0, [r7, #4]
 801f4e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	6a1b      	ldr	r3, [r3, #32]
 801f4ee:	f023 0201 	bic.w	r2, r3, #1
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f4f6:	687b      	ldr	r3, [r7, #4]
 801f4f8:	6a1b      	ldr	r3, [r3, #32]
 801f4fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	685b      	ldr	r3, [r3, #4]
 801f500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f502:	687b      	ldr	r3, [r7, #4]
 801f504:	699b      	ldr	r3, [r3, #24]
 801f506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f514:	68fb      	ldr	r3, [r7, #12]
 801f516:	f023 0303 	bic.w	r3, r3, #3
 801f51a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f51c:	683b      	ldr	r3, [r7, #0]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	68fa      	ldr	r2, [r7, #12]
 801f522:	4313      	orrs	r3, r2
 801f524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f526:	697b      	ldr	r3, [r7, #20]
 801f528:	f023 0302 	bic.w	r3, r3, #2
 801f52c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f52e:	683b      	ldr	r3, [r7, #0]
 801f530:	689b      	ldr	r3, [r3, #8]
 801f532:	697a      	ldr	r2, [r7, #20]
 801f534:	4313      	orrs	r3, r2
 801f536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f538:	687b      	ldr	r3, [r7, #4]
 801f53a:	4a30      	ldr	r2, [pc, #192]	; (801f5fc <TIM_OC1_SetConfig+0x11c>)
 801f53c:	4293      	cmp	r3, r2
 801f53e:	d013      	beq.n	801f568 <TIM_OC1_SetConfig+0x88>
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	4a2f      	ldr	r2, [pc, #188]	; (801f600 <TIM_OC1_SetConfig+0x120>)
 801f544:	4293      	cmp	r3, r2
 801f546:	d00f      	beq.n	801f568 <TIM_OC1_SetConfig+0x88>
 801f548:	687b      	ldr	r3, [r7, #4]
 801f54a:	4a2e      	ldr	r2, [pc, #184]	; (801f604 <TIM_OC1_SetConfig+0x124>)
 801f54c:	4293      	cmp	r3, r2
 801f54e:	d00b      	beq.n	801f568 <TIM_OC1_SetConfig+0x88>
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	4a2d      	ldr	r2, [pc, #180]	; (801f608 <TIM_OC1_SetConfig+0x128>)
 801f554:	4293      	cmp	r3, r2
 801f556:	d007      	beq.n	801f568 <TIM_OC1_SetConfig+0x88>
 801f558:	687b      	ldr	r3, [r7, #4]
 801f55a:	4a2c      	ldr	r2, [pc, #176]	; (801f60c <TIM_OC1_SetConfig+0x12c>)
 801f55c:	4293      	cmp	r3, r2
 801f55e:	d003      	beq.n	801f568 <TIM_OC1_SetConfig+0x88>
 801f560:	687b      	ldr	r3, [r7, #4]
 801f562:	4a2b      	ldr	r2, [pc, #172]	; (801f610 <TIM_OC1_SetConfig+0x130>)
 801f564:	4293      	cmp	r3, r2
 801f566:	d10c      	bne.n	801f582 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f568:	697b      	ldr	r3, [r7, #20]
 801f56a:	f023 0308 	bic.w	r3, r3, #8
 801f56e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f570:	683b      	ldr	r3, [r7, #0]
 801f572:	68db      	ldr	r3, [r3, #12]
 801f574:	697a      	ldr	r2, [r7, #20]
 801f576:	4313      	orrs	r3, r2
 801f578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f57a:	697b      	ldr	r3, [r7, #20]
 801f57c:	f023 0304 	bic.w	r3, r3, #4
 801f580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f582:	687b      	ldr	r3, [r7, #4]
 801f584:	4a1d      	ldr	r2, [pc, #116]	; (801f5fc <TIM_OC1_SetConfig+0x11c>)
 801f586:	4293      	cmp	r3, r2
 801f588:	d013      	beq.n	801f5b2 <TIM_OC1_SetConfig+0xd2>
 801f58a:	687b      	ldr	r3, [r7, #4]
 801f58c:	4a1c      	ldr	r2, [pc, #112]	; (801f600 <TIM_OC1_SetConfig+0x120>)
 801f58e:	4293      	cmp	r3, r2
 801f590:	d00f      	beq.n	801f5b2 <TIM_OC1_SetConfig+0xd2>
 801f592:	687b      	ldr	r3, [r7, #4]
 801f594:	4a1b      	ldr	r2, [pc, #108]	; (801f604 <TIM_OC1_SetConfig+0x124>)
 801f596:	4293      	cmp	r3, r2
 801f598:	d00b      	beq.n	801f5b2 <TIM_OC1_SetConfig+0xd2>
 801f59a:	687b      	ldr	r3, [r7, #4]
 801f59c:	4a1a      	ldr	r2, [pc, #104]	; (801f608 <TIM_OC1_SetConfig+0x128>)
 801f59e:	4293      	cmp	r3, r2
 801f5a0:	d007      	beq.n	801f5b2 <TIM_OC1_SetConfig+0xd2>
 801f5a2:	687b      	ldr	r3, [r7, #4]
 801f5a4:	4a19      	ldr	r2, [pc, #100]	; (801f60c <TIM_OC1_SetConfig+0x12c>)
 801f5a6:	4293      	cmp	r3, r2
 801f5a8:	d003      	beq.n	801f5b2 <TIM_OC1_SetConfig+0xd2>
 801f5aa:	687b      	ldr	r3, [r7, #4]
 801f5ac:	4a18      	ldr	r2, [pc, #96]	; (801f610 <TIM_OC1_SetConfig+0x130>)
 801f5ae:	4293      	cmp	r3, r2
 801f5b0:	d111      	bne.n	801f5d6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f5b2:	693b      	ldr	r3, [r7, #16]
 801f5b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f5b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f5ba:	693b      	ldr	r3, [r7, #16]
 801f5bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f5c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f5c2:	683b      	ldr	r3, [r7, #0]
 801f5c4:	695b      	ldr	r3, [r3, #20]
 801f5c6:	693a      	ldr	r2, [r7, #16]
 801f5c8:	4313      	orrs	r3, r2
 801f5ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f5cc:	683b      	ldr	r3, [r7, #0]
 801f5ce:	699b      	ldr	r3, [r3, #24]
 801f5d0:	693a      	ldr	r2, [r7, #16]
 801f5d2:	4313      	orrs	r3, r2
 801f5d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f5d6:	687b      	ldr	r3, [r7, #4]
 801f5d8:	693a      	ldr	r2, [r7, #16]
 801f5da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	68fa      	ldr	r2, [r7, #12]
 801f5e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f5e2:	683b      	ldr	r3, [r7, #0]
 801f5e4:	685a      	ldr	r2, [r3, #4]
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f5ea:	687b      	ldr	r3, [r7, #4]
 801f5ec:	697a      	ldr	r2, [r7, #20]
 801f5ee:	621a      	str	r2, [r3, #32]
}
 801f5f0:	bf00      	nop
 801f5f2:	371c      	adds	r7, #28
 801f5f4:	46bd      	mov	sp, r7
 801f5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5fa:	4770      	bx	lr
 801f5fc:	40012c00 	.word	0x40012c00
 801f600:	40013400 	.word	0x40013400
 801f604:	40014000 	.word	0x40014000
 801f608:	40014400 	.word	0x40014400
 801f60c:	40014800 	.word	0x40014800
 801f610:	40015000 	.word	0x40015000

0801f614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f614:	b480      	push	{r7}
 801f616:	b087      	sub	sp, #28
 801f618:	af00      	add	r7, sp, #0
 801f61a:	6078      	str	r0, [r7, #4]
 801f61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	6a1b      	ldr	r3, [r3, #32]
 801f622:	f023 0210 	bic.w	r2, r3, #16
 801f626:	687b      	ldr	r3, [r7, #4]
 801f628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	6a1b      	ldr	r3, [r3, #32]
 801f62e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f630:	687b      	ldr	r3, [r7, #4]
 801f632:	685b      	ldr	r3, [r3, #4]
 801f634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f636:	687b      	ldr	r3, [r7, #4]
 801f638:	699b      	ldr	r3, [r3, #24]
 801f63a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801f63c:	68fb      	ldr	r3, [r7, #12]
 801f63e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801f648:	68fb      	ldr	r3, [r7, #12]
 801f64a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f64e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f650:	683b      	ldr	r3, [r7, #0]
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	021b      	lsls	r3, r3, #8
 801f656:	68fa      	ldr	r2, [r7, #12]
 801f658:	4313      	orrs	r3, r2
 801f65a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801f65c:	697b      	ldr	r3, [r7, #20]
 801f65e:	f023 0320 	bic.w	r3, r3, #32
 801f662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801f664:	683b      	ldr	r3, [r7, #0]
 801f666:	689b      	ldr	r3, [r3, #8]
 801f668:	011b      	lsls	r3, r3, #4
 801f66a:	697a      	ldr	r2, [r7, #20]
 801f66c:	4313      	orrs	r3, r2
 801f66e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801f670:	687b      	ldr	r3, [r7, #4]
 801f672:	4a2c      	ldr	r2, [pc, #176]	; (801f724 <TIM_OC2_SetConfig+0x110>)
 801f674:	4293      	cmp	r3, r2
 801f676:	d007      	beq.n	801f688 <TIM_OC2_SetConfig+0x74>
 801f678:	687b      	ldr	r3, [r7, #4]
 801f67a:	4a2b      	ldr	r2, [pc, #172]	; (801f728 <TIM_OC2_SetConfig+0x114>)
 801f67c:	4293      	cmp	r3, r2
 801f67e:	d003      	beq.n	801f688 <TIM_OC2_SetConfig+0x74>
 801f680:	687b      	ldr	r3, [r7, #4]
 801f682:	4a2a      	ldr	r2, [pc, #168]	; (801f72c <TIM_OC2_SetConfig+0x118>)
 801f684:	4293      	cmp	r3, r2
 801f686:	d10d      	bne.n	801f6a4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801f688:	697b      	ldr	r3, [r7, #20]
 801f68a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f68e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801f690:	683b      	ldr	r3, [r7, #0]
 801f692:	68db      	ldr	r3, [r3, #12]
 801f694:	011b      	lsls	r3, r3, #4
 801f696:	697a      	ldr	r2, [r7, #20]
 801f698:	4313      	orrs	r3, r2
 801f69a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801f69c:	697b      	ldr	r3, [r7, #20]
 801f69e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f6a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f6a4:	687b      	ldr	r3, [r7, #4]
 801f6a6:	4a1f      	ldr	r2, [pc, #124]	; (801f724 <TIM_OC2_SetConfig+0x110>)
 801f6a8:	4293      	cmp	r3, r2
 801f6aa:	d013      	beq.n	801f6d4 <TIM_OC2_SetConfig+0xc0>
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	4a1e      	ldr	r2, [pc, #120]	; (801f728 <TIM_OC2_SetConfig+0x114>)
 801f6b0:	4293      	cmp	r3, r2
 801f6b2:	d00f      	beq.n	801f6d4 <TIM_OC2_SetConfig+0xc0>
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	4a1e      	ldr	r2, [pc, #120]	; (801f730 <TIM_OC2_SetConfig+0x11c>)
 801f6b8:	4293      	cmp	r3, r2
 801f6ba:	d00b      	beq.n	801f6d4 <TIM_OC2_SetConfig+0xc0>
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	4a1d      	ldr	r2, [pc, #116]	; (801f734 <TIM_OC2_SetConfig+0x120>)
 801f6c0:	4293      	cmp	r3, r2
 801f6c2:	d007      	beq.n	801f6d4 <TIM_OC2_SetConfig+0xc0>
 801f6c4:	687b      	ldr	r3, [r7, #4]
 801f6c6:	4a1c      	ldr	r2, [pc, #112]	; (801f738 <TIM_OC2_SetConfig+0x124>)
 801f6c8:	4293      	cmp	r3, r2
 801f6ca:	d003      	beq.n	801f6d4 <TIM_OC2_SetConfig+0xc0>
 801f6cc:	687b      	ldr	r3, [r7, #4]
 801f6ce:	4a17      	ldr	r2, [pc, #92]	; (801f72c <TIM_OC2_SetConfig+0x118>)
 801f6d0:	4293      	cmp	r3, r2
 801f6d2:	d113      	bne.n	801f6fc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801f6d4:	693b      	ldr	r3, [r7, #16]
 801f6d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f6da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801f6dc:	693b      	ldr	r3, [r7, #16]
 801f6de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f6e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801f6e4:	683b      	ldr	r3, [r7, #0]
 801f6e6:	695b      	ldr	r3, [r3, #20]
 801f6e8:	009b      	lsls	r3, r3, #2
 801f6ea:	693a      	ldr	r2, [r7, #16]
 801f6ec:	4313      	orrs	r3, r2
 801f6ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801f6f0:	683b      	ldr	r3, [r7, #0]
 801f6f2:	699b      	ldr	r3, [r3, #24]
 801f6f4:	009b      	lsls	r3, r3, #2
 801f6f6:	693a      	ldr	r2, [r7, #16]
 801f6f8:	4313      	orrs	r3, r2
 801f6fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	693a      	ldr	r2, [r7, #16]
 801f700:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f702:	687b      	ldr	r3, [r7, #4]
 801f704:	68fa      	ldr	r2, [r7, #12]
 801f706:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801f708:	683b      	ldr	r3, [r7, #0]
 801f70a:	685a      	ldr	r2, [r3, #4]
 801f70c:	687b      	ldr	r3, [r7, #4]
 801f70e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f710:	687b      	ldr	r3, [r7, #4]
 801f712:	697a      	ldr	r2, [r7, #20]
 801f714:	621a      	str	r2, [r3, #32]
}
 801f716:	bf00      	nop
 801f718:	371c      	adds	r7, #28
 801f71a:	46bd      	mov	sp, r7
 801f71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f720:	4770      	bx	lr
 801f722:	bf00      	nop
 801f724:	40012c00 	.word	0x40012c00
 801f728:	40013400 	.word	0x40013400
 801f72c:	40015000 	.word	0x40015000
 801f730:	40014000 	.word	0x40014000
 801f734:	40014400 	.word	0x40014400
 801f738:	40014800 	.word	0x40014800

0801f73c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f73c:	b480      	push	{r7}
 801f73e:	b087      	sub	sp, #28
 801f740:	af00      	add	r7, sp, #0
 801f742:	6078      	str	r0, [r7, #4]
 801f744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	6a1b      	ldr	r3, [r3, #32]
 801f74a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f752:	687b      	ldr	r3, [r7, #4]
 801f754:	6a1b      	ldr	r3, [r3, #32]
 801f756:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f758:	687b      	ldr	r3, [r7, #4]
 801f75a:	685b      	ldr	r3, [r3, #4]
 801f75c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	69db      	ldr	r3, [r3, #28]
 801f762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801f764:	68fb      	ldr	r3, [r7, #12]
 801f766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f76e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801f770:	68fb      	ldr	r3, [r7, #12]
 801f772:	f023 0303 	bic.w	r3, r3, #3
 801f776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f778:	683b      	ldr	r3, [r7, #0]
 801f77a:	681b      	ldr	r3, [r3, #0]
 801f77c:	68fa      	ldr	r2, [r7, #12]
 801f77e:	4313      	orrs	r3, r2
 801f780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801f782:	697b      	ldr	r3, [r7, #20]
 801f784:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801f78a:	683b      	ldr	r3, [r7, #0]
 801f78c:	689b      	ldr	r3, [r3, #8]
 801f78e:	021b      	lsls	r3, r3, #8
 801f790:	697a      	ldr	r2, [r7, #20]
 801f792:	4313      	orrs	r3, r2
 801f794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	4a2b      	ldr	r2, [pc, #172]	; (801f848 <TIM_OC3_SetConfig+0x10c>)
 801f79a:	4293      	cmp	r3, r2
 801f79c:	d007      	beq.n	801f7ae <TIM_OC3_SetConfig+0x72>
 801f79e:	687b      	ldr	r3, [r7, #4]
 801f7a0:	4a2a      	ldr	r2, [pc, #168]	; (801f84c <TIM_OC3_SetConfig+0x110>)
 801f7a2:	4293      	cmp	r3, r2
 801f7a4:	d003      	beq.n	801f7ae <TIM_OC3_SetConfig+0x72>
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	4a29      	ldr	r2, [pc, #164]	; (801f850 <TIM_OC3_SetConfig+0x114>)
 801f7aa:	4293      	cmp	r3, r2
 801f7ac:	d10d      	bne.n	801f7ca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801f7ae:	697b      	ldr	r3, [r7, #20]
 801f7b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801f7b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801f7b6:	683b      	ldr	r3, [r7, #0]
 801f7b8:	68db      	ldr	r3, [r3, #12]
 801f7ba:	021b      	lsls	r3, r3, #8
 801f7bc:	697a      	ldr	r2, [r7, #20]
 801f7be:	4313      	orrs	r3, r2
 801f7c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801f7c2:	697b      	ldr	r3, [r7, #20]
 801f7c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801f7c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f7ca:	687b      	ldr	r3, [r7, #4]
 801f7cc:	4a1e      	ldr	r2, [pc, #120]	; (801f848 <TIM_OC3_SetConfig+0x10c>)
 801f7ce:	4293      	cmp	r3, r2
 801f7d0:	d013      	beq.n	801f7fa <TIM_OC3_SetConfig+0xbe>
 801f7d2:	687b      	ldr	r3, [r7, #4]
 801f7d4:	4a1d      	ldr	r2, [pc, #116]	; (801f84c <TIM_OC3_SetConfig+0x110>)
 801f7d6:	4293      	cmp	r3, r2
 801f7d8:	d00f      	beq.n	801f7fa <TIM_OC3_SetConfig+0xbe>
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	4a1d      	ldr	r2, [pc, #116]	; (801f854 <TIM_OC3_SetConfig+0x118>)
 801f7de:	4293      	cmp	r3, r2
 801f7e0:	d00b      	beq.n	801f7fa <TIM_OC3_SetConfig+0xbe>
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	4a1c      	ldr	r2, [pc, #112]	; (801f858 <TIM_OC3_SetConfig+0x11c>)
 801f7e6:	4293      	cmp	r3, r2
 801f7e8:	d007      	beq.n	801f7fa <TIM_OC3_SetConfig+0xbe>
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	4a1b      	ldr	r2, [pc, #108]	; (801f85c <TIM_OC3_SetConfig+0x120>)
 801f7ee:	4293      	cmp	r3, r2
 801f7f0:	d003      	beq.n	801f7fa <TIM_OC3_SetConfig+0xbe>
 801f7f2:	687b      	ldr	r3, [r7, #4]
 801f7f4:	4a16      	ldr	r2, [pc, #88]	; (801f850 <TIM_OC3_SetConfig+0x114>)
 801f7f6:	4293      	cmp	r3, r2
 801f7f8:	d113      	bne.n	801f822 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801f7fa:	693b      	ldr	r3, [r7, #16]
 801f7fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f800:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801f802:	693b      	ldr	r3, [r7, #16]
 801f804:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f808:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801f80a:	683b      	ldr	r3, [r7, #0]
 801f80c:	695b      	ldr	r3, [r3, #20]
 801f80e:	011b      	lsls	r3, r3, #4
 801f810:	693a      	ldr	r2, [r7, #16]
 801f812:	4313      	orrs	r3, r2
 801f814:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801f816:	683b      	ldr	r3, [r7, #0]
 801f818:	699b      	ldr	r3, [r3, #24]
 801f81a:	011b      	lsls	r3, r3, #4
 801f81c:	693a      	ldr	r2, [r7, #16]
 801f81e:	4313      	orrs	r3, r2
 801f820:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f822:	687b      	ldr	r3, [r7, #4]
 801f824:	693a      	ldr	r2, [r7, #16]
 801f826:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f828:	687b      	ldr	r3, [r7, #4]
 801f82a:	68fa      	ldr	r2, [r7, #12]
 801f82c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	685a      	ldr	r2, [r3, #4]
 801f832:	687b      	ldr	r3, [r7, #4]
 801f834:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	697a      	ldr	r2, [r7, #20]
 801f83a:	621a      	str	r2, [r3, #32]
}
 801f83c:	bf00      	nop
 801f83e:	371c      	adds	r7, #28
 801f840:	46bd      	mov	sp, r7
 801f842:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f846:	4770      	bx	lr
 801f848:	40012c00 	.word	0x40012c00
 801f84c:	40013400 	.word	0x40013400
 801f850:	40015000 	.word	0x40015000
 801f854:	40014000 	.word	0x40014000
 801f858:	40014400 	.word	0x40014400
 801f85c:	40014800 	.word	0x40014800

0801f860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801f860:	b480      	push	{r7}
 801f862:	b087      	sub	sp, #28
 801f864:	af00      	add	r7, sp, #0
 801f866:	6078      	str	r0, [r7, #4]
 801f868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	6a1b      	ldr	r3, [r3, #32]
 801f86e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f872:	687b      	ldr	r3, [r7, #4]
 801f874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	6a1b      	ldr	r3, [r3, #32]
 801f87a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	685b      	ldr	r3, [r3, #4]
 801f880:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	69db      	ldr	r3, [r3, #28]
 801f886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801f888:	68fb      	ldr	r3, [r7, #12]
 801f88a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801f88e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f892:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f89a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f89c:	683b      	ldr	r3, [r7, #0]
 801f89e:	681b      	ldr	r3, [r3, #0]
 801f8a0:	021b      	lsls	r3, r3, #8
 801f8a2:	68fa      	ldr	r2, [r7, #12]
 801f8a4:	4313      	orrs	r3, r2
 801f8a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801f8a8:	697b      	ldr	r3, [r7, #20]
 801f8aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801f8ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801f8b0:	683b      	ldr	r3, [r7, #0]
 801f8b2:	689b      	ldr	r3, [r3, #8]
 801f8b4:	031b      	lsls	r3, r3, #12
 801f8b6:	697a      	ldr	r2, [r7, #20]
 801f8b8:	4313      	orrs	r3, r2
 801f8ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	4a2c      	ldr	r2, [pc, #176]	; (801f970 <TIM_OC4_SetConfig+0x110>)
 801f8c0:	4293      	cmp	r3, r2
 801f8c2:	d007      	beq.n	801f8d4 <TIM_OC4_SetConfig+0x74>
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	4a2b      	ldr	r2, [pc, #172]	; (801f974 <TIM_OC4_SetConfig+0x114>)
 801f8c8:	4293      	cmp	r3, r2
 801f8ca:	d003      	beq.n	801f8d4 <TIM_OC4_SetConfig+0x74>
 801f8cc:	687b      	ldr	r3, [r7, #4]
 801f8ce:	4a2a      	ldr	r2, [pc, #168]	; (801f978 <TIM_OC4_SetConfig+0x118>)
 801f8d0:	4293      	cmp	r3, r2
 801f8d2:	d10d      	bne.n	801f8f0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801f8d4:	697b      	ldr	r3, [r7, #20]
 801f8d6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f8da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801f8dc:	683b      	ldr	r3, [r7, #0]
 801f8de:	68db      	ldr	r3, [r3, #12]
 801f8e0:	031b      	lsls	r3, r3, #12
 801f8e2:	697a      	ldr	r2, [r7, #20]
 801f8e4:	4313      	orrs	r3, r2
 801f8e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801f8e8:	697b      	ldr	r3, [r7, #20]
 801f8ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f8ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	4a1f      	ldr	r2, [pc, #124]	; (801f970 <TIM_OC4_SetConfig+0x110>)
 801f8f4:	4293      	cmp	r3, r2
 801f8f6:	d013      	beq.n	801f920 <TIM_OC4_SetConfig+0xc0>
 801f8f8:	687b      	ldr	r3, [r7, #4]
 801f8fa:	4a1e      	ldr	r2, [pc, #120]	; (801f974 <TIM_OC4_SetConfig+0x114>)
 801f8fc:	4293      	cmp	r3, r2
 801f8fe:	d00f      	beq.n	801f920 <TIM_OC4_SetConfig+0xc0>
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	4a1e      	ldr	r2, [pc, #120]	; (801f97c <TIM_OC4_SetConfig+0x11c>)
 801f904:	4293      	cmp	r3, r2
 801f906:	d00b      	beq.n	801f920 <TIM_OC4_SetConfig+0xc0>
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	4a1d      	ldr	r2, [pc, #116]	; (801f980 <TIM_OC4_SetConfig+0x120>)
 801f90c:	4293      	cmp	r3, r2
 801f90e:	d007      	beq.n	801f920 <TIM_OC4_SetConfig+0xc0>
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	4a1c      	ldr	r2, [pc, #112]	; (801f984 <TIM_OC4_SetConfig+0x124>)
 801f914:	4293      	cmp	r3, r2
 801f916:	d003      	beq.n	801f920 <TIM_OC4_SetConfig+0xc0>
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	4a17      	ldr	r2, [pc, #92]	; (801f978 <TIM_OC4_SetConfig+0x118>)
 801f91c:	4293      	cmp	r3, r2
 801f91e:	d113      	bne.n	801f948 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801f920:	693b      	ldr	r3, [r7, #16]
 801f922:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801f926:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801f928:	693b      	ldr	r3, [r7, #16]
 801f92a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801f92e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801f930:	683b      	ldr	r3, [r7, #0]
 801f932:	695b      	ldr	r3, [r3, #20]
 801f934:	019b      	lsls	r3, r3, #6
 801f936:	693a      	ldr	r2, [r7, #16]
 801f938:	4313      	orrs	r3, r2
 801f93a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801f93c:	683b      	ldr	r3, [r7, #0]
 801f93e:	699b      	ldr	r3, [r3, #24]
 801f940:	019b      	lsls	r3, r3, #6
 801f942:	693a      	ldr	r2, [r7, #16]
 801f944:	4313      	orrs	r3, r2
 801f946:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	693a      	ldr	r2, [r7, #16]
 801f94c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	68fa      	ldr	r2, [r7, #12]
 801f952:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801f954:	683b      	ldr	r3, [r7, #0]
 801f956:	685a      	ldr	r2, [r3, #4]
 801f958:	687b      	ldr	r3, [r7, #4]
 801f95a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	697a      	ldr	r2, [r7, #20]
 801f960:	621a      	str	r2, [r3, #32]
}
 801f962:	bf00      	nop
 801f964:	371c      	adds	r7, #28
 801f966:	46bd      	mov	sp, r7
 801f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f96c:	4770      	bx	lr
 801f96e:	bf00      	nop
 801f970:	40012c00 	.word	0x40012c00
 801f974:	40013400 	.word	0x40013400
 801f978:	40015000 	.word	0x40015000
 801f97c:	40014000 	.word	0x40014000
 801f980:	40014400 	.word	0x40014400
 801f984:	40014800 	.word	0x40014800

0801f988 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801f988:	b480      	push	{r7}
 801f98a:	b087      	sub	sp, #28
 801f98c:	af00      	add	r7, sp, #0
 801f98e:	6078      	str	r0, [r7, #4]
 801f990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801f992:	687b      	ldr	r3, [r7, #4]
 801f994:	6a1b      	ldr	r3, [r3, #32]
 801f996:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801f99a:	687b      	ldr	r3, [r7, #4]
 801f99c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	6a1b      	ldr	r3, [r3, #32]
 801f9a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f9a4:	687b      	ldr	r3, [r7, #4]
 801f9a6:	685b      	ldr	r3, [r3, #4]
 801f9a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801f9aa:	687b      	ldr	r3, [r7, #4]
 801f9ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f9ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801f9b0:	68fb      	ldr	r3, [r7, #12]
 801f9b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801f9b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f9ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f9bc:	683b      	ldr	r3, [r7, #0]
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	68fa      	ldr	r2, [r7, #12]
 801f9c2:	4313      	orrs	r3, r2
 801f9c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801f9c6:	693b      	ldr	r3, [r7, #16]
 801f9c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801f9cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801f9ce:	683b      	ldr	r3, [r7, #0]
 801f9d0:	689b      	ldr	r3, [r3, #8]
 801f9d2:	041b      	lsls	r3, r3, #16
 801f9d4:	693a      	ldr	r2, [r7, #16]
 801f9d6:	4313      	orrs	r3, r2
 801f9d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f9da:	687b      	ldr	r3, [r7, #4]
 801f9dc:	4a19      	ldr	r2, [pc, #100]	; (801fa44 <TIM_OC5_SetConfig+0xbc>)
 801f9de:	4293      	cmp	r3, r2
 801f9e0:	d013      	beq.n	801fa0a <TIM_OC5_SetConfig+0x82>
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	4a18      	ldr	r2, [pc, #96]	; (801fa48 <TIM_OC5_SetConfig+0xc0>)
 801f9e6:	4293      	cmp	r3, r2
 801f9e8:	d00f      	beq.n	801fa0a <TIM_OC5_SetConfig+0x82>
 801f9ea:	687b      	ldr	r3, [r7, #4]
 801f9ec:	4a17      	ldr	r2, [pc, #92]	; (801fa4c <TIM_OC5_SetConfig+0xc4>)
 801f9ee:	4293      	cmp	r3, r2
 801f9f0:	d00b      	beq.n	801fa0a <TIM_OC5_SetConfig+0x82>
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	4a16      	ldr	r2, [pc, #88]	; (801fa50 <TIM_OC5_SetConfig+0xc8>)
 801f9f6:	4293      	cmp	r3, r2
 801f9f8:	d007      	beq.n	801fa0a <TIM_OC5_SetConfig+0x82>
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	4a15      	ldr	r2, [pc, #84]	; (801fa54 <TIM_OC5_SetConfig+0xcc>)
 801f9fe:	4293      	cmp	r3, r2
 801fa00:	d003      	beq.n	801fa0a <TIM_OC5_SetConfig+0x82>
 801fa02:	687b      	ldr	r3, [r7, #4]
 801fa04:	4a14      	ldr	r2, [pc, #80]	; (801fa58 <TIM_OC5_SetConfig+0xd0>)
 801fa06:	4293      	cmp	r3, r2
 801fa08:	d109      	bne.n	801fa1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fa0a:	697b      	ldr	r3, [r7, #20]
 801fa0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fa10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fa12:	683b      	ldr	r3, [r7, #0]
 801fa14:	695b      	ldr	r3, [r3, #20]
 801fa16:	021b      	lsls	r3, r3, #8
 801fa18:	697a      	ldr	r2, [r7, #20]
 801fa1a:	4313      	orrs	r3, r2
 801fa1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	697a      	ldr	r2, [r7, #20]
 801fa22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	68fa      	ldr	r2, [r7, #12]
 801fa28:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fa2a:	683b      	ldr	r3, [r7, #0]
 801fa2c:	685a      	ldr	r2, [r3, #4]
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	693a      	ldr	r2, [r7, #16]
 801fa36:	621a      	str	r2, [r3, #32]
}
 801fa38:	bf00      	nop
 801fa3a:	371c      	adds	r7, #28
 801fa3c:	46bd      	mov	sp, r7
 801fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa42:	4770      	bx	lr
 801fa44:	40012c00 	.word	0x40012c00
 801fa48:	40013400 	.word	0x40013400
 801fa4c:	40014000 	.word	0x40014000
 801fa50:	40014400 	.word	0x40014400
 801fa54:	40014800 	.word	0x40014800
 801fa58:	40015000 	.word	0x40015000

0801fa5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801fa5c:	b480      	push	{r7}
 801fa5e:	b087      	sub	sp, #28
 801fa60:	af00      	add	r7, sp, #0
 801fa62:	6078      	str	r0, [r7, #4]
 801fa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	6a1b      	ldr	r3, [r3, #32]
 801fa6a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fa72:	687b      	ldr	r3, [r7, #4]
 801fa74:	6a1b      	ldr	r3, [r3, #32]
 801fa76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fa78:	687b      	ldr	r3, [r7, #4]
 801fa7a:	685b      	ldr	r3, [r3, #4]
 801fa7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801fa82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fa84:	68fb      	ldr	r3, [r7, #12]
 801fa86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801fa8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801fa8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fa90:	683b      	ldr	r3, [r7, #0]
 801fa92:	681b      	ldr	r3, [r3, #0]
 801fa94:	021b      	lsls	r3, r3, #8
 801fa96:	68fa      	ldr	r2, [r7, #12]
 801fa98:	4313      	orrs	r3, r2
 801fa9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fa9c:	693b      	ldr	r3, [r7, #16]
 801fa9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801faa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	689b      	ldr	r3, [r3, #8]
 801faa8:	051b      	lsls	r3, r3, #20
 801faaa:	693a      	ldr	r2, [r7, #16]
 801faac:	4313      	orrs	r3, r2
 801faae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	4a1a      	ldr	r2, [pc, #104]	; (801fb1c <TIM_OC6_SetConfig+0xc0>)
 801fab4:	4293      	cmp	r3, r2
 801fab6:	d013      	beq.n	801fae0 <TIM_OC6_SetConfig+0x84>
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	4a19      	ldr	r2, [pc, #100]	; (801fb20 <TIM_OC6_SetConfig+0xc4>)
 801fabc:	4293      	cmp	r3, r2
 801fabe:	d00f      	beq.n	801fae0 <TIM_OC6_SetConfig+0x84>
 801fac0:	687b      	ldr	r3, [r7, #4]
 801fac2:	4a18      	ldr	r2, [pc, #96]	; (801fb24 <TIM_OC6_SetConfig+0xc8>)
 801fac4:	4293      	cmp	r3, r2
 801fac6:	d00b      	beq.n	801fae0 <TIM_OC6_SetConfig+0x84>
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	4a17      	ldr	r2, [pc, #92]	; (801fb28 <TIM_OC6_SetConfig+0xcc>)
 801facc:	4293      	cmp	r3, r2
 801face:	d007      	beq.n	801fae0 <TIM_OC6_SetConfig+0x84>
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	4a16      	ldr	r2, [pc, #88]	; (801fb2c <TIM_OC6_SetConfig+0xd0>)
 801fad4:	4293      	cmp	r3, r2
 801fad6:	d003      	beq.n	801fae0 <TIM_OC6_SetConfig+0x84>
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	4a15      	ldr	r2, [pc, #84]	; (801fb30 <TIM_OC6_SetConfig+0xd4>)
 801fadc:	4293      	cmp	r3, r2
 801fade:	d109      	bne.n	801faf4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801fae0:	697b      	ldr	r3, [r7, #20]
 801fae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fae6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801fae8:	683b      	ldr	r3, [r7, #0]
 801faea:	695b      	ldr	r3, [r3, #20]
 801faec:	029b      	lsls	r3, r3, #10
 801faee:	697a      	ldr	r2, [r7, #20]
 801faf0:	4313      	orrs	r3, r2
 801faf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	697a      	ldr	r2, [r7, #20]
 801faf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	68fa      	ldr	r2, [r7, #12]
 801fafe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801fb00:	683b      	ldr	r3, [r7, #0]
 801fb02:	685a      	ldr	r2, [r3, #4]
 801fb04:	687b      	ldr	r3, [r7, #4]
 801fb06:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fb08:	687b      	ldr	r3, [r7, #4]
 801fb0a:	693a      	ldr	r2, [r7, #16]
 801fb0c:	621a      	str	r2, [r3, #32]
}
 801fb0e:	bf00      	nop
 801fb10:	371c      	adds	r7, #28
 801fb12:	46bd      	mov	sp, r7
 801fb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb18:	4770      	bx	lr
 801fb1a:	bf00      	nop
 801fb1c:	40012c00 	.word	0x40012c00
 801fb20:	40013400 	.word	0x40013400
 801fb24:	40014000 	.word	0x40014000
 801fb28:	40014400 	.word	0x40014400
 801fb2c:	40014800 	.word	0x40014800
 801fb30:	40015000 	.word	0x40015000

0801fb34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801fb34:	b480      	push	{r7}
 801fb36:	b087      	sub	sp, #28
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	60f8      	str	r0, [r7, #12]
 801fb3c:	60b9      	str	r1, [r7, #8]
 801fb3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801fb40:	68bb      	ldr	r3, [r7, #8]
 801fb42:	f003 031f 	and.w	r3, r3, #31
 801fb46:	2201      	movs	r2, #1
 801fb48:	fa02 f303 	lsl.w	r3, r2, r3
 801fb4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801fb4e:	68fb      	ldr	r3, [r7, #12]
 801fb50:	6a1a      	ldr	r2, [r3, #32]
 801fb52:	697b      	ldr	r3, [r7, #20]
 801fb54:	43db      	mvns	r3, r3
 801fb56:	401a      	ands	r2, r3
 801fb58:	68fb      	ldr	r3, [r7, #12]
 801fb5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801fb5c:	68fb      	ldr	r3, [r7, #12]
 801fb5e:	6a1a      	ldr	r2, [r3, #32]
 801fb60:	68bb      	ldr	r3, [r7, #8]
 801fb62:	f003 031f 	and.w	r3, r3, #31
 801fb66:	6879      	ldr	r1, [r7, #4]
 801fb68:	fa01 f303 	lsl.w	r3, r1, r3
 801fb6c:	431a      	orrs	r2, r3
 801fb6e:	68fb      	ldr	r3, [r7, #12]
 801fb70:	621a      	str	r2, [r3, #32]
}
 801fb72:	bf00      	nop
 801fb74:	371c      	adds	r7, #28
 801fb76:	46bd      	mov	sp, r7
 801fb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb7c:	4770      	bx	lr
	...

0801fb80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801fb80:	b480      	push	{r7}
 801fb82:	b085      	sub	sp, #20
 801fb84:	af00      	add	r7, sp, #0
 801fb86:	6078      	str	r0, [r7, #4]
 801fb88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fb90:	2b01      	cmp	r3, #1
 801fb92:	d101      	bne.n	801fb98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801fb94:	2302      	movs	r3, #2
 801fb96:	e06f      	b.n	801fc78 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801fb98:	687b      	ldr	r3, [r7, #4]
 801fb9a:	2201      	movs	r2, #1
 801fb9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	2202      	movs	r2, #2
 801fba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801fba8:	687b      	ldr	r3, [r7, #4]
 801fbaa:	681b      	ldr	r3, [r3, #0]
 801fbac:	685b      	ldr	r3, [r3, #4]
 801fbae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801fbb0:	687b      	ldr	r3, [r7, #4]
 801fbb2:	681b      	ldr	r3, [r3, #0]
 801fbb4:	689b      	ldr	r3, [r3, #8]
 801fbb6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801fbb8:	687b      	ldr	r3, [r7, #4]
 801fbba:	681b      	ldr	r3, [r3, #0]
 801fbbc:	4a31      	ldr	r2, [pc, #196]	; (801fc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fbbe:	4293      	cmp	r3, r2
 801fbc0:	d009      	beq.n	801fbd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fbc2:	687b      	ldr	r3, [r7, #4]
 801fbc4:	681b      	ldr	r3, [r3, #0]
 801fbc6:	4a30      	ldr	r2, [pc, #192]	; (801fc88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fbc8:	4293      	cmp	r3, r2
 801fbca:	d004      	beq.n	801fbd6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	681b      	ldr	r3, [r3, #0]
 801fbd0:	4a2e      	ldr	r2, [pc, #184]	; (801fc8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fbd2:	4293      	cmp	r3, r2
 801fbd4:	d108      	bne.n	801fbe8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801fbd6:	68fb      	ldr	r3, [r7, #12]
 801fbd8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801fbdc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801fbde:	683b      	ldr	r3, [r7, #0]
 801fbe0:	685b      	ldr	r3, [r3, #4]
 801fbe2:	68fa      	ldr	r2, [r7, #12]
 801fbe4:	4313      	orrs	r3, r2
 801fbe6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801fbe8:	68fb      	ldr	r3, [r7, #12]
 801fbea:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801fbee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fbf2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801fbf4:	683b      	ldr	r3, [r7, #0]
 801fbf6:	681b      	ldr	r3, [r3, #0]
 801fbf8:	68fa      	ldr	r2, [r7, #12]
 801fbfa:	4313      	orrs	r3, r2
 801fbfc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	681b      	ldr	r3, [r3, #0]
 801fc02:	68fa      	ldr	r2, [r7, #12]
 801fc04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	4a1e      	ldr	r2, [pc, #120]	; (801fc84 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801fc0c:	4293      	cmp	r3, r2
 801fc0e:	d01d      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fc18:	d018      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	4a1c      	ldr	r2, [pc, #112]	; (801fc90 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801fc20:	4293      	cmp	r3, r2
 801fc22:	d013      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	4a1a      	ldr	r2, [pc, #104]	; (801fc94 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801fc2a:	4293      	cmp	r3, r2
 801fc2c:	d00e      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	4a15      	ldr	r2, [pc, #84]	; (801fc88 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801fc34:	4293      	cmp	r3, r2
 801fc36:	d009      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	4a16      	ldr	r2, [pc, #88]	; (801fc98 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801fc3e:	4293      	cmp	r3, r2
 801fc40:	d004      	beq.n	801fc4c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	4a11      	ldr	r2, [pc, #68]	; (801fc8c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801fc48:	4293      	cmp	r3, r2
 801fc4a:	d10c      	bne.n	801fc66 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801fc4c:	68bb      	ldr	r3, [r7, #8]
 801fc4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fc52:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801fc54:	683b      	ldr	r3, [r7, #0]
 801fc56:	689b      	ldr	r3, [r3, #8]
 801fc58:	68ba      	ldr	r2, [r7, #8]
 801fc5a:	4313      	orrs	r3, r2
 801fc5c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801fc5e:	687b      	ldr	r3, [r7, #4]
 801fc60:	681b      	ldr	r3, [r3, #0]
 801fc62:	68ba      	ldr	r2, [r7, #8]
 801fc64:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	2201      	movs	r2, #1
 801fc6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	2200      	movs	r2, #0
 801fc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fc76:	2300      	movs	r3, #0
}
 801fc78:	4618      	mov	r0, r3
 801fc7a:	3714      	adds	r7, #20
 801fc7c:	46bd      	mov	sp, r7
 801fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc82:	4770      	bx	lr
 801fc84:	40012c00 	.word	0x40012c00
 801fc88:	40013400 	.word	0x40013400
 801fc8c:	40015000 	.word	0x40015000
 801fc90:	40000400 	.word	0x40000400
 801fc94:	40000800 	.word	0x40000800
 801fc98:	40014000 	.word	0x40014000

0801fc9c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801fc9c:	b480      	push	{r7}
 801fc9e:	b085      	sub	sp, #20
 801fca0:	af00      	add	r7, sp, #0
 801fca2:	6078      	str	r0, [r7, #4]
 801fca4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801fca6:	2300      	movs	r3, #0
 801fca8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801fcaa:	687b      	ldr	r3, [r7, #4]
 801fcac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801fcb0:	2b01      	cmp	r3, #1
 801fcb2:	d101      	bne.n	801fcb8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801fcb4:	2302      	movs	r3, #2
 801fcb6:	e096      	b.n	801fde6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	2201      	movs	r2, #1
 801fcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801fcc0:	68fb      	ldr	r3, [r7, #12]
 801fcc2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801fcc6:	683b      	ldr	r3, [r7, #0]
 801fcc8:	68db      	ldr	r3, [r3, #12]
 801fcca:	4313      	orrs	r3, r2
 801fccc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801fcce:	68fb      	ldr	r3, [r7, #12]
 801fcd0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	689b      	ldr	r3, [r3, #8]
 801fcd8:	4313      	orrs	r3, r2
 801fcda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801fcdc:	68fb      	ldr	r3, [r7, #12]
 801fcde:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801fce2:	683b      	ldr	r3, [r7, #0]
 801fce4:	685b      	ldr	r3, [r3, #4]
 801fce6:	4313      	orrs	r3, r2
 801fce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801fcea:	68fb      	ldr	r3, [r7, #12]
 801fcec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801fcf0:	683b      	ldr	r3, [r7, #0]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	4313      	orrs	r3, r2
 801fcf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801fcf8:	68fb      	ldr	r3, [r7, #12]
 801fcfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fcfe:	683b      	ldr	r3, [r7, #0]
 801fd00:	691b      	ldr	r3, [r3, #16]
 801fd02:	4313      	orrs	r3, r2
 801fd04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801fd06:	68fb      	ldr	r3, [r7, #12]
 801fd08:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801fd0c:	683b      	ldr	r3, [r7, #0]
 801fd0e:	695b      	ldr	r3, [r3, #20]
 801fd10:	4313      	orrs	r3, r2
 801fd12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801fd14:	68fb      	ldr	r3, [r7, #12]
 801fd16:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801fd1a:	683b      	ldr	r3, [r7, #0]
 801fd1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fd1e:	4313      	orrs	r3, r2
 801fd20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801fd22:	68fb      	ldr	r3, [r7, #12]
 801fd24:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801fd28:	683b      	ldr	r3, [r7, #0]
 801fd2a:	699b      	ldr	r3, [r3, #24]
 801fd2c:	041b      	lsls	r3, r3, #16
 801fd2e:	4313      	orrs	r3, r2
 801fd30:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	681b      	ldr	r3, [r3, #0]
 801fd36:	4a2f      	ldr	r2, [pc, #188]	; (801fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fd38:	4293      	cmp	r3, r2
 801fd3a:	d009      	beq.n	801fd50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	4a2d      	ldr	r2, [pc, #180]	; (801fdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fd42:	4293      	cmp	r3, r2
 801fd44:	d004      	beq.n	801fd50 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	681b      	ldr	r3, [r3, #0]
 801fd4a:	4a2c      	ldr	r2, [pc, #176]	; (801fdfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fd4c:	4293      	cmp	r3, r2
 801fd4e:	d106      	bne.n	801fd5e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801fd56:	683b      	ldr	r3, [r7, #0]
 801fd58:	69db      	ldr	r3, [r3, #28]
 801fd5a:	4313      	orrs	r3, r2
 801fd5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	681b      	ldr	r3, [r3, #0]
 801fd62:	4a24      	ldr	r2, [pc, #144]	; (801fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fd64:	4293      	cmp	r3, r2
 801fd66:	d009      	beq.n	801fd7c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	681b      	ldr	r3, [r3, #0]
 801fd6c:	4a22      	ldr	r2, [pc, #136]	; (801fdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fd6e:	4293      	cmp	r3, r2
 801fd70:	d004      	beq.n	801fd7c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801fd72:	687b      	ldr	r3, [r7, #4]
 801fd74:	681b      	ldr	r3, [r3, #0]
 801fd76:	4a21      	ldr	r2, [pc, #132]	; (801fdfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fd78:	4293      	cmp	r3, r2
 801fd7a:	d12b      	bne.n	801fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801fd7c:	68fb      	ldr	r3, [r7, #12]
 801fd7e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801fd82:	683b      	ldr	r3, [r7, #0]
 801fd84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fd86:	051b      	lsls	r3, r3, #20
 801fd88:	4313      	orrs	r3, r2
 801fd8a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801fd8c:	68fb      	ldr	r3, [r7, #12]
 801fd8e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801fd92:	683b      	ldr	r3, [r7, #0]
 801fd94:	6a1b      	ldr	r3, [r3, #32]
 801fd96:	4313      	orrs	r3, r2
 801fd98:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801fd9a:	68fb      	ldr	r3, [r7, #12]
 801fd9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801fda0:	683b      	ldr	r3, [r7, #0]
 801fda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fda4:	4313      	orrs	r3, r2
 801fda6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	681b      	ldr	r3, [r3, #0]
 801fdac:	4a11      	ldr	r2, [pc, #68]	; (801fdf4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801fdae:	4293      	cmp	r3, r2
 801fdb0:	d009      	beq.n	801fdc6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	4a10      	ldr	r2, [pc, #64]	; (801fdf8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801fdb8:	4293      	cmp	r3, r2
 801fdba:	d004      	beq.n	801fdc6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	4a0e      	ldr	r2, [pc, #56]	; (801fdfc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801fdc2:	4293      	cmp	r3, r2
 801fdc4:	d106      	bne.n	801fdd4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801fdc6:	68fb      	ldr	r3, [r7, #12]
 801fdc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801fdcc:	683b      	ldr	r3, [r7, #0]
 801fdce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fdd0:	4313      	orrs	r3, r2
 801fdd2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	681b      	ldr	r3, [r3, #0]
 801fdd8:	68fa      	ldr	r2, [r7, #12]
 801fdda:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	2200      	movs	r2, #0
 801fde0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801fde4:	2300      	movs	r3, #0
}
 801fde6:	4618      	mov	r0, r3
 801fde8:	3714      	adds	r7, #20
 801fdea:	46bd      	mov	sp, r7
 801fdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdf0:	4770      	bx	lr
 801fdf2:	bf00      	nop
 801fdf4:	40012c00 	.word	0x40012c00
 801fdf8:	40013400 	.word	0x40013400
 801fdfc:	40015000 	.word	0x40015000

0801fe00 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801fe00:	b480      	push	{r7}
 801fe02:	b083      	sub	sp, #12
 801fe04:	af00      	add	r7, sp, #0
 801fe06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801fe08:	bf00      	nop
 801fe0a:	370c      	adds	r7, #12
 801fe0c:	46bd      	mov	sp, r7
 801fe0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe12:	4770      	bx	lr

0801fe14 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801fe14:	b480      	push	{r7}
 801fe16:	b083      	sub	sp, #12
 801fe18:	af00      	add	r7, sp, #0
 801fe1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801fe1c:	bf00      	nop
 801fe1e:	370c      	adds	r7, #12
 801fe20:	46bd      	mov	sp, r7
 801fe22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe26:	4770      	bx	lr

0801fe28 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801fe28:	b480      	push	{r7}
 801fe2a:	b083      	sub	sp, #12
 801fe2c:	af00      	add	r7, sp, #0
 801fe2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801fe30:	bf00      	nop
 801fe32:	370c      	adds	r7, #12
 801fe34:	46bd      	mov	sp, r7
 801fe36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe3a:	4770      	bx	lr

0801fe3c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801fe3c:	b480      	push	{r7}
 801fe3e:	b083      	sub	sp, #12
 801fe40:	af00      	add	r7, sp, #0
 801fe42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801fe44:	bf00      	nop
 801fe46:	370c      	adds	r7, #12
 801fe48:	46bd      	mov	sp, r7
 801fe4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe4e:	4770      	bx	lr

0801fe50 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801fe50:	b480      	push	{r7}
 801fe52:	b083      	sub	sp, #12
 801fe54:	af00      	add	r7, sp, #0
 801fe56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801fe58:	bf00      	nop
 801fe5a:	370c      	adds	r7, #12
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe62:	4770      	bx	lr

0801fe64 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801fe64:	b480      	push	{r7}
 801fe66:	b083      	sub	sp, #12
 801fe68:	af00      	add	r7, sp, #0
 801fe6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801fe6c:	bf00      	nop
 801fe6e:	370c      	adds	r7, #12
 801fe70:	46bd      	mov	sp, r7
 801fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe76:	4770      	bx	lr

0801fe78 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801fe78:	b480      	push	{r7}
 801fe7a:	b083      	sub	sp, #12
 801fe7c:	af00      	add	r7, sp, #0
 801fe7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801fe80:	bf00      	nop
 801fe82:	370c      	adds	r7, #12
 801fe84:	46bd      	mov	sp, r7
 801fe86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe8a:	4770      	bx	lr

0801fe8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b082      	sub	sp, #8
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801fe94:	687b      	ldr	r3, [r7, #4]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d101      	bne.n	801fe9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801fe9a:	2301      	movs	r3, #1
 801fe9c:	e042      	b.n	801ff24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d106      	bne.n	801feb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	2200      	movs	r2, #0
 801feac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801feb0:	6878      	ldr	r0, [r7, #4]
 801feb2:	f7f9 fae3 	bl	801947c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	2224      	movs	r2, #36	; 0x24
 801feba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801febe:	687b      	ldr	r3, [r7, #4]
 801fec0:	681b      	ldr	r3, [r3, #0]
 801fec2:	681a      	ldr	r2, [r3, #0]
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	f022 0201 	bic.w	r2, r2, #1
 801fecc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801fece:	6878      	ldr	r0, [r7, #4]
 801fed0:	f000 f8c2 	bl	8020058 <UART_SetConfig>
 801fed4:	4603      	mov	r3, r0
 801fed6:	2b01      	cmp	r3, #1
 801fed8:	d101      	bne.n	801fede <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801feda:	2301      	movs	r3, #1
 801fedc:	e022      	b.n	801ff24 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801fede:	687b      	ldr	r3, [r7, #4]
 801fee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fee2:	2b00      	cmp	r3, #0
 801fee4:	d002      	beq.n	801feec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801fee6:	6878      	ldr	r0, [r7, #4]
 801fee8:	f000 fbb2 	bl	8020650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801feec:	687b      	ldr	r3, [r7, #4]
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	685a      	ldr	r2, [r3, #4]
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801fefa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801fefc:	687b      	ldr	r3, [r7, #4]
 801fefe:	681b      	ldr	r3, [r3, #0]
 801ff00:	689a      	ldr	r2, [r3, #8]
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ff0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	681a      	ldr	r2, [r3, #0]
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	f042 0201 	orr.w	r2, r2, #1
 801ff1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ff1c:	6878      	ldr	r0, [r7, #4]
 801ff1e:	f000 fc39 	bl	8020794 <UART_CheckIdleState>
 801ff22:	4603      	mov	r3, r0
}
 801ff24:	4618      	mov	r0, r3
 801ff26:	3708      	adds	r7, #8
 801ff28:	46bd      	mov	sp, r7
 801ff2a:	bd80      	pop	{r7, pc}

0801ff2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ff2c:	b580      	push	{r7, lr}
 801ff2e:	b08a      	sub	sp, #40	; 0x28
 801ff30:	af02      	add	r7, sp, #8
 801ff32:	60f8      	str	r0, [r7, #12]
 801ff34:	60b9      	str	r1, [r7, #8]
 801ff36:	603b      	str	r3, [r7, #0]
 801ff38:	4613      	mov	r3, r2
 801ff3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ff3c:	68fb      	ldr	r3, [r7, #12]
 801ff3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ff42:	2b20      	cmp	r3, #32
 801ff44:	f040 8083 	bne.w	802004e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801ff48:	68bb      	ldr	r3, [r7, #8]
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d002      	beq.n	801ff54 <HAL_UART_Transmit+0x28>
 801ff4e:	88fb      	ldrh	r3, [r7, #6]
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d101      	bne.n	801ff58 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801ff54:	2301      	movs	r3, #1
 801ff56:	e07b      	b.n	8020050 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ff5e:	2b01      	cmp	r3, #1
 801ff60:	d101      	bne.n	801ff66 <HAL_UART_Transmit+0x3a>
 801ff62:	2302      	movs	r3, #2
 801ff64:	e074      	b.n	8020050 <HAL_UART_Transmit+0x124>
 801ff66:	68fb      	ldr	r3, [r7, #12]
 801ff68:	2201      	movs	r2, #1
 801ff6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	2200      	movs	r2, #0
 801ff72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ff76:	68fb      	ldr	r3, [r7, #12]
 801ff78:	2221      	movs	r2, #33	; 0x21
 801ff7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ff7e:	f7f9 fb6b 	bl	8019658 <HAL_GetTick>
 801ff82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	88fa      	ldrh	r2, [r7, #6]
 801ff88:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801ff8c:	68fb      	ldr	r3, [r7, #12]
 801ff8e:	88fa      	ldrh	r2, [r7, #6]
 801ff90:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	689b      	ldr	r3, [r3, #8]
 801ff98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ff9c:	d108      	bne.n	801ffb0 <HAL_UART_Transmit+0x84>
 801ff9e:	68fb      	ldr	r3, [r7, #12]
 801ffa0:	691b      	ldr	r3, [r3, #16]
 801ffa2:	2b00      	cmp	r3, #0
 801ffa4:	d104      	bne.n	801ffb0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801ffa6:	2300      	movs	r3, #0
 801ffa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ffaa:	68bb      	ldr	r3, [r7, #8]
 801ffac:	61bb      	str	r3, [r7, #24]
 801ffae:	e003      	b.n	801ffb8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801ffb0:	68bb      	ldr	r3, [r7, #8]
 801ffb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ffb4:	2300      	movs	r3, #0
 801ffb6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801ffb8:	68fb      	ldr	r3, [r7, #12]
 801ffba:	2200      	movs	r2, #0
 801ffbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801ffc0:	e02c      	b.n	802001c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ffc2:	683b      	ldr	r3, [r7, #0]
 801ffc4:	9300      	str	r3, [sp, #0]
 801ffc6:	697b      	ldr	r3, [r7, #20]
 801ffc8:	2200      	movs	r2, #0
 801ffca:	2180      	movs	r1, #128	; 0x80
 801ffcc:	68f8      	ldr	r0, [r7, #12]
 801ffce:	f000 fc2c 	bl	802082a <UART_WaitOnFlagUntilTimeout>
 801ffd2:	4603      	mov	r3, r0
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	d001      	beq.n	801ffdc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801ffd8:	2303      	movs	r3, #3
 801ffda:	e039      	b.n	8020050 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801ffdc:	69fb      	ldr	r3, [r7, #28]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d10b      	bne.n	801fffa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ffe2:	69bb      	ldr	r3, [r7, #24]
 801ffe4:	881b      	ldrh	r3, [r3, #0]
 801ffe6:	461a      	mov	r2, r3
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	681b      	ldr	r3, [r3, #0]
 801ffec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801fff0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801fff2:	69bb      	ldr	r3, [r7, #24]
 801fff4:	3302      	adds	r3, #2
 801fff6:	61bb      	str	r3, [r7, #24]
 801fff8:	e007      	b.n	802000a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801fffa:	69fb      	ldr	r3, [r7, #28]
 801fffc:	781a      	ldrb	r2, [r3, #0]
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8020004:	69fb      	ldr	r3, [r7, #28]
 8020006:	3301      	adds	r3, #1
 8020008:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 802000a:	68fb      	ldr	r3, [r7, #12]
 802000c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020010:	b29b      	uxth	r3, r3
 8020012:	3b01      	subs	r3, #1
 8020014:	b29a      	uxth	r2, r3
 8020016:	68fb      	ldr	r3, [r7, #12]
 8020018:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 802001c:	68fb      	ldr	r3, [r7, #12]
 802001e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8020022:	b29b      	uxth	r3, r3
 8020024:	2b00      	cmp	r3, #0
 8020026:	d1cc      	bne.n	801ffc2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8020028:	683b      	ldr	r3, [r7, #0]
 802002a:	9300      	str	r3, [sp, #0]
 802002c:	697b      	ldr	r3, [r7, #20]
 802002e:	2200      	movs	r2, #0
 8020030:	2140      	movs	r1, #64	; 0x40
 8020032:	68f8      	ldr	r0, [r7, #12]
 8020034:	f000 fbf9 	bl	802082a <UART_WaitOnFlagUntilTimeout>
 8020038:	4603      	mov	r3, r0
 802003a:	2b00      	cmp	r3, #0
 802003c:	d001      	beq.n	8020042 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 802003e:	2303      	movs	r3, #3
 8020040:	e006      	b.n	8020050 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8020042:	68fb      	ldr	r3, [r7, #12]
 8020044:	2220      	movs	r2, #32
 8020046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 802004a:	2300      	movs	r3, #0
 802004c:	e000      	b.n	8020050 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 802004e:	2302      	movs	r3, #2
  }
}
 8020050:	4618      	mov	r0, r3
 8020052:	3720      	adds	r7, #32
 8020054:	46bd      	mov	sp, r7
 8020056:	bd80      	pop	{r7, pc}

08020058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802005c:	b08c      	sub	sp, #48	; 0x30
 802005e:	af00      	add	r7, sp, #0
 8020060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020062:	2300      	movs	r3, #0
 8020064:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020068:	697b      	ldr	r3, [r7, #20]
 802006a:	689a      	ldr	r2, [r3, #8]
 802006c:	697b      	ldr	r3, [r7, #20]
 802006e:	691b      	ldr	r3, [r3, #16]
 8020070:	431a      	orrs	r2, r3
 8020072:	697b      	ldr	r3, [r7, #20]
 8020074:	695b      	ldr	r3, [r3, #20]
 8020076:	431a      	orrs	r2, r3
 8020078:	697b      	ldr	r3, [r7, #20]
 802007a:	69db      	ldr	r3, [r3, #28]
 802007c:	4313      	orrs	r3, r2
 802007e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020080:	697b      	ldr	r3, [r7, #20]
 8020082:	681b      	ldr	r3, [r3, #0]
 8020084:	681a      	ldr	r2, [r3, #0]
 8020086:	4baa      	ldr	r3, [pc, #680]	; (8020330 <UART_SetConfig+0x2d8>)
 8020088:	4013      	ands	r3, r2
 802008a:	697a      	ldr	r2, [r7, #20]
 802008c:	6812      	ldr	r2, [r2, #0]
 802008e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020090:	430b      	orrs	r3, r1
 8020092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020094:	697b      	ldr	r3, [r7, #20]
 8020096:	681b      	ldr	r3, [r3, #0]
 8020098:	685b      	ldr	r3, [r3, #4]
 802009a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 802009e:	697b      	ldr	r3, [r7, #20]
 80200a0:	68da      	ldr	r2, [r3, #12]
 80200a2:	697b      	ldr	r3, [r7, #20]
 80200a4:	681b      	ldr	r3, [r3, #0]
 80200a6:	430a      	orrs	r2, r1
 80200a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80200aa:	697b      	ldr	r3, [r7, #20]
 80200ac:	699b      	ldr	r3, [r3, #24]
 80200ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80200b0:	697b      	ldr	r3, [r7, #20]
 80200b2:	681b      	ldr	r3, [r3, #0]
 80200b4:	4a9f      	ldr	r2, [pc, #636]	; (8020334 <UART_SetConfig+0x2dc>)
 80200b6:	4293      	cmp	r3, r2
 80200b8:	d004      	beq.n	80200c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80200ba:	697b      	ldr	r3, [r7, #20]
 80200bc:	6a1b      	ldr	r3, [r3, #32]
 80200be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80200c0:	4313      	orrs	r3, r2
 80200c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80200c4:	697b      	ldr	r3, [r7, #20]
 80200c6:	681b      	ldr	r3, [r3, #0]
 80200c8:	689b      	ldr	r3, [r3, #8]
 80200ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80200ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80200d2:	697a      	ldr	r2, [r7, #20]
 80200d4:	6812      	ldr	r2, [r2, #0]
 80200d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80200d8:	430b      	orrs	r3, r1
 80200da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80200dc:	697b      	ldr	r3, [r7, #20]
 80200de:	681b      	ldr	r3, [r3, #0]
 80200e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80200e2:	f023 010f 	bic.w	r1, r3, #15
 80200e6:	697b      	ldr	r3, [r7, #20]
 80200e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80200ea:	697b      	ldr	r3, [r7, #20]
 80200ec:	681b      	ldr	r3, [r3, #0]
 80200ee:	430a      	orrs	r2, r1
 80200f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80200f2:	697b      	ldr	r3, [r7, #20]
 80200f4:	681b      	ldr	r3, [r3, #0]
 80200f6:	4a90      	ldr	r2, [pc, #576]	; (8020338 <UART_SetConfig+0x2e0>)
 80200f8:	4293      	cmp	r3, r2
 80200fa:	d125      	bne.n	8020148 <UART_SetConfig+0xf0>
 80200fc:	4b8f      	ldr	r3, [pc, #572]	; (802033c <UART_SetConfig+0x2e4>)
 80200fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020102:	f003 0303 	and.w	r3, r3, #3
 8020106:	2b03      	cmp	r3, #3
 8020108:	d81a      	bhi.n	8020140 <UART_SetConfig+0xe8>
 802010a:	a201      	add	r2, pc, #4	; (adr r2, 8020110 <UART_SetConfig+0xb8>)
 802010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020110:	08020121 	.word	0x08020121
 8020114:	08020131 	.word	0x08020131
 8020118:	08020129 	.word	0x08020129
 802011c:	08020139 	.word	0x08020139
 8020120:	2301      	movs	r3, #1
 8020122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020126:	e116      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020128:	2302      	movs	r3, #2
 802012a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802012e:	e112      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020130:	2304      	movs	r3, #4
 8020132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020136:	e10e      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020138:	2308      	movs	r3, #8
 802013a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802013e:	e10a      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020140:	2310      	movs	r3, #16
 8020142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020146:	e106      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020148:	697b      	ldr	r3, [r7, #20]
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	4a7c      	ldr	r2, [pc, #496]	; (8020340 <UART_SetConfig+0x2e8>)
 802014e:	4293      	cmp	r3, r2
 8020150:	d138      	bne.n	80201c4 <UART_SetConfig+0x16c>
 8020152:	4b7a      	ldr	r3, [pc, #488]	; (802033c <UART_SetConfig+0x2e4>)
 8020154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020158:	f003 030c 	and.w	r3, r3, #12
 802015c:	2b0c      	cmp	r3, #12
 802015e:	d82d      	bhi.n	80201bc <UART_SetConfig+0x164>
 8020160:	a201      	add	r2, pc, #4	; (adr r2, 8020168 <UART_SetConfig+0x110>)
 8020162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020166:	bf00      	nop
 8020168:	0802019d 	.word	0x0802019d
 802016c:	080201bd 	.word	0x080201bd
 8020170:	080201bd 	.word	0x080201bd
 8020174:	080201bd 	.word	0x080201bd
 8020178:	080201ad 	.word	0x080201ad
 802017c:	080201bd 	.word	0x080201bd
 8020180:	080201bd 	.word	0x080201bd
 8020184:	080201bd 	.word	0x080201bd
 8020188:	080201a5 	.word	0x080201a5
 802018c:	080201bd 	.word	0x080201bd
 8020190:	080201bd 	.word	0x080201bd
 8020194:	080201bd 	.word	0x080201bd
 8020198:	080201b5 	.word	0x080201b5
 802019c:	2300      	movs	r3, #0
 802019e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201a2:	e0d8      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201a4:	2302      	movs	r3, #2
 80201a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201aa:	e0d4      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201ac:	2304      	movs	r3, #4
 80201ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201b2:	e0d0      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201b4:	2308      	movs	r3, #8
 80201b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201ba:	e0cc      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201bc:	2310      	movs	r3, #16
 80201be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201c2:	e0c8      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	681b      	ldr	r3, [r3, #0]
 80201c8:	4a5e      	ldr	r2, [pc, #376]	; (8020344 <UART_SetConfig+0x2ec>)
 80201ca:	4293      	cmp	r3, r2
 80201cc:	d125      	bne.n	802021a <UART_SetConfig+0x1c2>
 80201ce:	4b5b      	ldr	r3, [pc, #364]	; (802033c <UART_SetConfig+0x2e4>)
 80201d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80201d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80201d8:	2b30      	cmp	r3, #48	; 0x30
 80201da:	d016      	beq.n	802020a <UART_SetConfig+0x1b2>
 80201dc:	2b30      	cmp	r3, #48	; 0x30
 80201de:	d818      	bhi.n	8020212 <UART_SetConfig+0x1ba>
 80201e0:	2b20      	cmp	r3, #32
 80201e2:	d00a      	beq.n	80201fa <UART_SetConfig+0x1a2>
 80201e4:	2b20      	cmp	r3, #32
 80201e6:	d814      	bhi.n	8020212 <UART_SetConfig+0x1ba>
 80201e8:	2b00      	cmp	r3, #0
 80201ea:	d002      	beq.n	80201f2 <UART_SetConfig+0x19a>
 80201ec:	2b10      	cmp	r3, #16
 80201ee:	d008      	beq.n	8020202 <UART_SetConfig+0x1aa>
 80201f0:	e00f      	b.n	8020212 <UART_SetConfig+0x1ba>
 80201f2:	2300      	movs	r3, #0
 80201f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80201f8:	e0ad      	b.n	8020356 <UART_SetConfig+0x2fe>
 80201fa:	2302      	movs	r3, #2
 80201fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020200:	e0a9      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020202:	2304      	movs	r3, #4
 8020204:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020208:	e0a5      	b.n	8020356 <UART_SetConfig+0x2fe>
 802020a:	2308      	movs	r3, #8
 802020c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020210:	e0a1      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020212:	2310      	movs	r3, #16
 8020214:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020218:	e09d      	b.n	8020356 <UART_SetConfig+0x2fe>
 802021a:	697b      	ldr	r3, [r7, #20]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	4a4a      	ldr	r2, [pc, #296]	; (8020348 <UART_SetConfig+0x2f0>)
 8020220:	4293      	cmp	r3, r2
 8020222:	d125      	bne.n	8020270 <UART_SetConfig+0x218>
 8020224:	4b45      	ldr	r3, [pc, #276]	; (802033c <UART_SetConfig+0x2e4>)
 8020226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 802022a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 802022e:	2bc0      	cmp	r3, #192	; 0xc0
 8020230:	d016      	beq.n	8020260 <UART_SetConfig+0x208>
 8020232:	2bc0      	cmp	r3, #192	; 0xc0
 8020234:	d818      	bhi.n	8020268 <UART_SetConfig+0x210>
 8020236:	2b80      	cmp	r3, #128	; 0x80
 8020238:	d00a      	beq.n	8020250 <UART_SetConfig+0x1f8>
 802023a:	2b80      	cmp	r3, #128	; 0x80
 802023c:	d814      	bhi.n	8020268 <UART_SetConfig+0x210>
 802023e:	2b00      	cmp	r3, #0
 8020240:	d002      	beq.n	8020248 <UART_SetConfig+0x1f0>
 8020242:	2b40      	cmp	r3, #64	; 0x40
 8020244:	d008      	beq.n	8020258 <UART_SetConfig+0x200>
 8020246:	e00f      	b.n	8020268 <UART_SetConfig+0x210>
 8020248:	2300      	movs	r3, #0
 802024a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802024e:	e082      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020250:	2302      	movs	r3, #2
 8020252:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020256:	e07e      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020258:	2304      	movs	r3, #4
 802025a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802025e:	e07a      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020260:	2308      	movs	r3, #8
 8020262:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020266:	e076      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020268:	2310      	movs	r3, #16
 802026a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802026e:	e072      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020270:	697b      	ldr	r3, [r7, #20]
 8020272:	681b      	ldr	r3, [r3, #0]
 8020274:	4a35      	ldr	r2, [pc, #212]	; (802034c <UART_SetConfig+0x2f4>)
 8020276:	4293      	cmp	r3, r2
 8020278:	d12a      	bne.n	80202d0 <UART_SetConfig+0x278>
 802027a:	4b30      	ldr	r3, [pc, #192]	; (802033c <UART_SetConfig+0x2e4>)
 802027c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8020280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8020284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020288:	d01a      	beq.n	80202c0 <UART_SetConfig+0x268>
 802028a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 802028e:	d81b      	bhi.n	80202c8 <UART_SetConfig+0x270>
 8020290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020294:	d00c      	beq.n	80202b0 <UART_SetConfig+0x258>
 8020296:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802029a:	d815      	bhi.n	80202c8 <UART_SetConfig+0x270>
 802029c:	2b00      	cmp	r3, #0
 802029e:	d003      	beq.n	80202a8 <UART_SetConfig+0x250>
 80202a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80202a4:	d008      	beq.n	80202b8 <UART_SetConfig+0x260>
 80202a6:	e00f      	b.n	80202c8 <UART_SetConfig+0x270>
 80202a8:	2300      	movs	r3, #0
 80202aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202ae:	e052      	b.n	8020356 <UART_SetConfig+0x2fe>
 80202b0:	2302      	movs	r3, #2
 80202b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202b6:	e04e      	b.n	8020356 <UART_SetConfig+0x2fe>
 80202b8:	2304      	movs	r3, #4
 80202ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202be:	e04a      	b.n	8020356 <UART_SetConfig+0x2fe>
 80202c0:	2308      	movs	r3, #8
 80202c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202c6:	e046      	b.n	8020356 <UART_SetConfig+0x2fe>
 80202c8:	2310      	movs	r3, #16
 80202ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80202ce:	e042      	b.n	8020356 <UART_SetConfig+0x2fe>
 80202d0:	697b      	ldr	r3, [r7, #20]
 80202d2:	681b      	ldr	r3, [r3, #0]
 80202d4:	4a17      	ldr	r2, [pc, #92]	; (8020334 <UART_SetConfig+0x2dc>)
 80202d6:	4293      	cmp	r3, r2
 80202d8:	d13a      	bne.n	8020350 <UART_SetConfig+0x2f8>
 80202da:	4b18      	ldr	r3, [pc, #96]	; (802033c <UART_SetConfig+0x2e4>)
 80202dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80202e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80202e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80202e8:	d01a      	beq.n	8020320 <UART_SetConfig+0x2c8>
 80202ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80202ee:	d81b      	bhi.n	8020328 <UART_SetConfig+0x2d0>
 80202f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80202f4:	d00c      	beq.n	8020310 <UART_SetConfig+0x2b8>
 80202f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80202fa:	d815      	bhi.n	8020328 <UART_SetConfig+0x2d0>
 80202fc:	2b00      	cmp	r3, #0
 80202fe:	d003      	beq.n	8020308 <UART_SetConfig+0x2b0>
 8020300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8020304:	d008      	beq.n	8020318 <UART_SetConfig+0x2c0>
 8020306:	e00f      	b.n	8020328 <UART_SetConfig+0x2d0>
 8020308:	2300      	movs	r3, #0
 802030a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802030e:	e022      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020310:	2302      	movs	r3, #2
 8020312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020316:	e01e      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020318:	2304      	movs	r3, #4
 802031a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802031e:	e01a      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020320:	2308      	movs	r3, #8
 8020322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8020326:	e016      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020328:	2310      	movs	r3, #16
 802032a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 802032e:	e012      	b.n	8020356 <UART_SetConfig+0x2fe>
 8020330:	cfff69f3 	.word	0xcfff69f3
 8020334:	40008000 	.word	0x40008000
 8020338:	40013800 	.word	0x40013800
 802033c:	40021000 	.word	0x40021000
 8020340:	40004400 	.word	0x40004400
 8020344:	40004800 	.word	0x40004800
 8020348:	40004c00 	.word	0x40004c00
 802034c:	40005000 	.word	0x40005000
 8020350:	2310      	movs	r3, #16
 8020352:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8020356:	697b      	ldr	r3, [r7, #20]
 8020358:	681b      	ldr	r3, [r3, #0]
 802035a:	4aae      	ldr	r2, [pc, #696]	; (8020614 <UART_SetConfig+0x5bc>)
 802035c:	4293      	cmp	r3, r2
 802035e:	f040 8097 	bne.w	8020490 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8020362:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8020366:	2b08      	cmp	r3, #8
 8020368:	d823      	bhi.n	80203b2 <UART_SetConfig+0x35a>
 802036a:	a201      	add	r2, pc, #4	; (adr r2, 8020370 <UART_SetConfig+0x318>)
 802036c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020370:	08020395 	.word	0x08020395
 8020374:	080203b3 	.word	0x080203b3
 8020378:	0802039d 	.word	0x0802039d
 802037c:	080203b3 	.word	0x080203b3
 8020380:	080203a3 	.word	0x080203a3
 8020384:	080203b3 	.word	0x080203b3
 8020388:	080203b3 	.word	0x080203b3
 802038c:	080203b3 	.word	0x080203b3
 8020390:	080203ab 	.word	0x080203ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8020394:	f7fd f8b4 	bl	801d500 <HAL_RCC_GetPCLK1Freq>
 8020398:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 802039a:	e010      	b.n	80203be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 802039c:	4b9e      	ldr	r3, [pc, #632]	; (8020618 <UART_SetConfig+0x5c0>)
 802039e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80203a0:	e00d      	b.n	80203be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80203a2:	f7fd f841 	bl	801d428 <HAL_RCC_GetSysClockFreq>
 80203a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80203a8:	e009      	b.n	80203be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80203aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80203ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80203b0:	e005      	b.n	80203be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80203b2:	2300      	movs	r3, #0
 80203b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80203b6:	2301      	movs	r3, #1
 80203b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80203bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80203be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203c0:	2b00      	cmp	r3, #0
 80203c2:	f000 8130 	beq.w	8020626 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80203c6:	697b      	ldr	r3, [r7, #20]
 80203c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80203ca:	4a94      	ldr	r2, [pc, #592]	; (802061c <UART_SetConfig+0x5c4>)
 80203cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80203d0:	461a      	mov	r2, r3
 80203d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80203d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80203d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80203da:	697b      	ldr	r3, [r7, #20]
 80203dc:	685a      	ldr	r2, [r3, #4]
 80203de:	4613      	mov	r3, r2
 80203e0:	005b      	lsls	r3, r3, #1
 80203e2:	4413      	add	r3, r2
 80203e4:	69ba      	ldr	r2, [r7, #24]
 80203e6:	429a      	cmp	r2, r3
 80203e8:	d305      	bcc.n	80203f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80203ea:	697b      	ldr	r3, [r7, #20]
 80203ec:	685b      	ldr	r3, [r3, #4]
 80203ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80203f0:	69ba      	ldr	r2, [r7, #24]
 80203f2:	429a      	cmp	r2, r3
 80203f4:	d903      	bls.n	80203fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80203f6:	2301      	movs	r3, #1
 80203f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80203fc:	e113      	b.n	8020626 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80203fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020400:	2200      	movs	r2, #0
 8020402:	60bb      	str	r3, [r7, #8]
 8020404:	60fa      	str	r2, [r7, #12]
 8020406:	697b      	ldr	r3, [r7, #20]
 8020408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802040a:	4a84      	ldr	r2, [pc, #528]	; (802061c <UART_SetConfig+0x5c4>)
 802040c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020410:	b29b      	uxth	r3, r3
 8020412:	2200      	movs	r2, #0
 8020414:	603b      	str	r3, [r7, #0]
 8020416:	607a      	str	r2, [r7, #4]
 8020418:	e9d7 2300 	ldrd	r2, r3, [r7]
 802041c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020420:	f7e0 fc3a 	bl	8000c98 <__aeabi_uldivmod>
 8020424:	4602      	mov	r2, r0
 8020426:	460b      	mov	r3, r1
 8020428:	4610      	mov	r0, r2
 802042a:	4619      	mov	r1, r3
 802042c:	f04f 0200 	mov.w	r2, #0
 8020430:	f04f 0300 	mov.w	r3, #0
 8020434:	020b      	lsls	r3, r1, #8
 8020436:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802043a:	0202      	lsls	r2, r0, #8
 802043c:	6979      	ldr	r1, [r7, #20]
 802043e:	6849      	ldr	r1, [r1, #4]
 8020440:	0849      	lsrs	r1, r1, #1
 8020442:	2000      	movs	r0, #0
 8020444:	460c      	mov	r4, r1
 8020446:	4605      	mov	r5, r0
 8020448:	eb12 0804 	adds.w	r8, r2, r4
 802044c:	eb43 0905 	adc.w	r9, r3, r5
 8020450:	697b      	ldr	r3, [r7, #20]
 8020452:	685b      	ldr	r3, [r3, #4]
 8020454:	2200      	movs	r2, #0
 8020456:	469a      	mov	sl, r3
 8020458:	4693      	mov	fp, r2
 802045a:	4652      	mov	r2, sl
 802045c:	465b      	mov	r3, fp
 802045e:	4640      	mov	r0, r8
 8020460:	4649      	mov	r1, r9
 8020462:	f7e0 fc19 	bl	8000c98 <__aeabi_uldivmod>
 8020466:	4602      	mov	r2, r0
 8020468:	460b      	mov	r3, r1
 802046a:	4613      	mov	r3, r2
 802046c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 802046e:	6a3b      	ldr	r3, [r7, #32]
 8020470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8020474:	d308      	bcc.n	8020488 <UART_SetConfig+0x430>
 8020476:	6a3b      	ldr	r3, [r7, #32]
 8020478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802047c:	d204      	bcs.n	8020488 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 802047e:	697b      	ldr	r3, [r7, #20]
 8020480:	681b      	ldr	r3, [r3, #0]
 8020482:	6a3a      	ldr	r2, [r7, #32]
 8020484:	60da      	str	r2, [r3, #12]
 8020486:	e0ce      	b.n	8020626 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8020488:	2301      	movs	r3, #1
 802048a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 802048e:	e0ca      	b.n	8020626 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8020490:	697b      	ldr	r3, [r7, #20]
 8020492:	69db      	ldr	r3, [r3, #28]
 8020494:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8020498:	d166      	bne.n	8020568 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 802049a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802049e:	2b08      	cmp	r3, #8
 80204a0:	d827      	bhi.n	80204f2 <UART_SetConfig+0x49a>
 80204a2:	a201      	add	r2, pc, #4	; (adr r2, 80204a8 <UART_SetConfig+0x450>)
 80204a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80204a8:	080204cd 	.word	0x080204cd
 80204ac:	080204d5 	.word	0x080204d5
 80204b0:	080204dd 	.word	0x080204dd
 80204b4:	080204f3 	.word	0x080204f3
 80204b8:	080204e3 	.word	0x080204e3
 80204bc:	080204f3 	.word	0x080204f3
 80204c0:	080204f3 	.word	0x080204f3
 80204c4:	080204f3 	.word	0x080204f3
 80204c8:	080204eb 	.word	0x080204eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80204cc:	f7fd f818 	bl	801d500 <HAL_RCC_GetPCLK1Freq>
 80204d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80204d2:	e014      	b.n	80204fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80204d4:	f7fd f82a 	bl	801d52c <HAL_RCC_GetPCLK2Freq>
 80204d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80204da:	e010      	b.n	80204fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80204dc:	4b4e      	ldr	r3, [pc, #312]	; (8020618 <UART_SetConfig+0x5c0>)
 80204de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80204e0:	e00d      	b.n	80204fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80204e2:	f7fc ffa1 	bl	801d428 <HAL_RCC_GetSysClockFreq>
 80204e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80204e8:	e009      	b.n	80204fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80204ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80204ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80204f0:	e005      	b.n	80204fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80204f2:	2300      	movs	r3, #0
 80204f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80204f6:	2301      	movs	r3, #1
 80204f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80204fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80204fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020500:	2b00      	cmp	r3, #0
 8020502:	f000 8090 	beq.w	8020626 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020506:	697b      	ldr	r3, [r7, #20]
 8020508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802050a:	4a44      	ldr	r2, [pc, #272]	; (802061c <UART_SetConfig+0x5c4>)
 802050c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020510:	461a      	mov	r2, r3
 8020512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020514:	fbb3 f3f2 	udiv	r3, r3, r2
 8020518:	005a      	lsls	r2, r3, #1
 802051a:	697b      	ldr	r3, [r7, #20]
 802051c:	685b      	ldr	r3, [r3, #4]
 802051e:	085b      	lsrs	r3, r3, #1
 8020520:	441a      	add	r2, r3
 8020522:	697b      	ldr	r3, [r7, #20]
 8020524:	685b      	ldr	r3, [r3, #4]
 8020526:	fbb2 f3f3 	udiv	r3, r2, r3
 802052a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 802052c:	6a3b      	ldr	r3, [r7, #32]
 802052e:	2b0f      	cmp	r3, #15
 8020530:	d916      	bls.n	8020560 <UART_SetConfig+0x508>
 8020532:	6a3b      	ldr	r3, [r7, #32]
 8020534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020538:	d212      	bcs.n	8020560 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802053a:	6a3b      	ldr	r3, [r7, #32]
 802053c:	b29b      	uxth	r3, r3
 802053e:	f023 030f 	bic.w	r3, r3, #15
 8020542:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020544:	6a3b      	ldr	r3, [r7, #32]
 8020546:	085b      	lsrs	r3, r3, #1
 8020548:	b29b      	uxth	r3, r3
 802054a:	f003 0307 	and.w	r3, r3, #7
 802054e:	b29a      	uxth	r2, r3
 8020550:	8bfb      	ldrh	r3, [r7, #30]
 8020552:	4313      	orrs	r3, r2
 8020554:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8020556:	697b      	ldr	r3, [r7, #20]
 8020558:	681b      	ldr	r3, [r3, #0]
 802055a:	8bfa      	ldrh	r2, [r7, #30]
 802055c:	60da      	str	r2, [r3, #12]
 802055e:	e062      	b.n	8020626 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8020560:	2301      	movs	r3, #1
 8020562:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8020566:	e05e      	b.n	8020626 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8020568:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 802056c:	2b08      	cmp	r3, #8
 802056e:	d828      	bhi.n	80205c2 <UART_SetConfig+0x56a>
 8020570:	a201      	add	r2, pc, #4	; (adr r2, 8020578 <UART_SetConfig+0x520>)
 8020572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020576:	bf00      	nop
 8020578:	0802059d 	.word	0x0802059d
 802057c:	080205a5 	.word	0x080205a5
 8020580:	080205ad 	.word	0x080205ad
 8020584:	080205c3 	.word	0x080205c3
 8020588:	080205b3 	.word	0x080205b3
 802058c:	080205c3 	.word	0x080205c3
 8020590:	080205c3 	.word	0x080205c3
 8020594:	080205c3 	.word	0x080205c3
 8020598:	080205bb 	.word	0x080205bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802059c:	f7fc ffb0 	bl	801d500 <HAL_RCC_GetPCLK1Freq>
 80205a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205a2:	e014      	b.n	80205ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80205a4:	f7fc ffc2 	bl	801d52c <HAL_RCC_GetPCLK2Freq>
 80205a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205aa:	e010      	b.n	80205ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80205ac:	4b1a      	ldr	r3, [pc, #104]	; (8020618 <UART_SetConfig+0x5c0>)
 80205ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80205b0:	e00d      	b.n	80205ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80205b2:	f7fc ff39 	bl	801d428 <HAL_RCC_GetSysClockFreq>
 80205b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80205b8:	e009      	b.n	80205ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80205ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80205be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80205c0:	e005      	b.n	80205ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80205c2:	2300      	movs	r3, #0
 80205c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80205c6:	2301      	movs	r3, #1
 80205c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80205cc:	bf00      	nop
    }

    if (pclk != 0U)
 80205ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d028      	beq.n	8020626 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80205d4:	697b      	ldr	r3, [r7, #20]
 80205d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80205d8:	4a10      	ldr	r2, [pc, #64]	; (802061c <UART_SetConfig+0x5c4>)
 80205da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80205de:	461a      	mov	r2, r3
 80205e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80205e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80205e6:	697b      	ldr	r3, [r7, #20]
 80205e8:	685b      	ldr	r3, [r3, #4]
 80205ea:	085b      	lsrs	r3, r3, #1
 80205ec:	441a      	add	r2, r3
 80205ee:	697b      	ldr	r3, [r7, #20]
 80205f0:	685b      	ldr	r3, [r3, #4]
 80205f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80205f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80205f8:	6a3b      	ldr	r3, [r7, #32]
 80205fa:	2b0f      	cmp	r3, #15
 80205fc:	d910      	bls.n	8020620 <UART_SetConfig+0x5c8>
 80205fe:	6a3b      	ldr	r3, [r7, #32]
 8020600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8020604:	d20c      	bcs.n	8020620 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020606:	6a3b      	ldr	r3, [r7, #32]
 8020608:	b29a      	uxth	r2, r3
 802060a:	697b      	ldr	r3, [r7, #20]
 802060c:	681b      	ldr	r3, [r3, #0]
 802060e:	60da      	str	r2, [r3, #12]
 8020610:	e009      	b.n	8020626 <UART_SetConfig+0x5ce>
 8020612:	bf00      	nop
 8020614:	40008000 	.word	0x40008000
 8020618:	00f42400 	.word	0x00f42400
 802061c:	080251bc 	.word	0x080251bc
      }
      else
      {
        ret = HAL_ERROR;
 8020620:	2301      	movs	r3, #1
 8020622:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8020626:	697b      	ldr	r3, [r7, #20]
 8020628:	2201      	movs	r2, #1
 802062a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 802062e:	697b      	ldr	r3, [r7, #20]
 8020630:	2201      	movs	r2, #1
 8020632:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8020636:	697b      	ldr	r3, [r7, #20]
 8020638:	2200      	movs	r2, #0
 802063a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 802063c:	697b      	ldr	r3, [r7, #20]
 802063e:	2200      	movs	r2, #0
 8020640:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8020642:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8020646:	4618      	mov	r0, r3
 8020648:	3730      	adds	r7, #48	; 0x30
 802064a:	46bd      	mov	sp, r7
 802064c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08020650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8020650:	b480      	push	{r7}
 8020652:	b083      	sub	sp, #12
 8020654:	af00      	add	r7, sp, #0
 8020656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802065c:	f003 0301 	and.w	r3, r3, #1
 8020660:	2b00      	cmp	r3, #0
 8020662:	d00a      	beq.n	802067a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020664:	687b      	ldr	r3, [r7, #4]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	685b      	ldr	r3, [r3, #4]
 802066a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 802066e:	687b      	ldr	r3, [r7, #4]
 8020670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	681b      	ldr	r3, [r3, #0]
 8020676:	430a      	orrs	r2, r1
 8020678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802067e:	f003 0302 	and.w	r3, r3, #2
 8020682:	2b00      	cmp	r3, #0
 8020684:	d00a      	beq.n	802069c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020686:	687b      	ldr	r3, [r7, #4]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	685b      	ldr	r3, [r3, #4]
 802068c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8020694:	687b      	ldr	r3, [r7, #4]
 8020696:	681b      	ldr	r3, [r3, #0]
 8020698:	430a      	orrs	r2, r1
 802069a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802069c:	687b      	ldr	r3, [r7, #4]
 802069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206a0:	f003 0304 	and.w	r3, r3, #4
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d00a      	beq.n	80206be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80206a8:	687b      	ldr	r3, [r7, #4]
 80206aa:	681b      	ldr	r3, [r3, #0]
 80206ac:	685b      	ldr	r3, [r3, #4]
 80206ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80206b2:	687b      	ldr	r3, [r7, #4]
 80206b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80206b6:	687b      	ldr	r3, [r7, #4]
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	430a      	orrs	r2, r1
 80206bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80206be:	687b      	ldr	r3, [r7, #4]
 80206c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206c2:	f003 0308 	and.w	r3, r3, #8
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	d00a      	beq.n	80206e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80206ca:	687b      	ldr	r3, [r7, #4]
 80206cc:	681b      	ldr	r3, [r3, #0]
 80206ce:	685b      	ldr	r3, [r3, #4]
 80206d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80206d8:	687b      	ldr	r3, [r7, #4]
 80206da:	681b      	ldr	r3, [r3, #0]
 80206dc:	430a      	orrs	r2, r1
 80206de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80206e0:	687b      	ldr	r3, [r7, #4]
 80206e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206e4:	f003 0310 	and.w	r3, r3, #16
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d00a      	beq.n	8020702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80206ec:	687b      	ldr	r3, [r7, #4]
 80206ee:	681b      	ldr	r3, [r3, #0]
 80206f0:	689b      	ldr	r3, [r3, #8]
 80206f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80206f6:	687b      	ldr	r3, [r7, #4]
 80206f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	681b      	ldr	r3, [r3, #0]
 80206fe:	430a      	orrs	r2, r1
 8020700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020706:	f003 0320 	and.w	r3, r3, #32
 802070a:	2b00      	cmp	r3, #0
 802070c:	d00a      	beq.n	8020724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	681b      	ldr	r3, [r3, #0]
 8020712:	689b      	ldr	r3, [r3, #8]
 8020714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 802071c:	687b      	ldr	r3, [r7, #4]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	430a      	orrs	r2, r1
 8020722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8020724:	687b      	ldr	r3, [r7, #4]
 8020726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 802072c:	2b00      	cmp	r3, #0
 802072e:	d01a      	beq.n	8020766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8020730:	687b      	ldr	r3, [r7, #4]
 8020732:	681b      	ldr	r3, [r3, #0]
 8020734:	685b      	ldr	r3, [r3, #4]
 8020736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 802073a:	687b      	ldr	r3, [r7, #4]
 802073c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	430a      	orrs	r2, r1
 8020744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8020746:	687b      	ldr	r3, [r7, #4]
 8020748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802074a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802074e:	d10a      	bne.n	8020766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8020750:	687b      	ldr	r3, [r7, #4]
 8020752:	681b      	ldr	r3, [r3, #0]
 8020754:	685b      	ldr	r3, [r3, #4]
 8020756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 802075e:	687b      	ldr	r3, [r7, #4]
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	430a      	orrs	r2, r1
 8020764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802076a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802076e:	2b00      	cmp	r3, #0
 8020770:	d00a      	beq.n	8020788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	685b      	ldr	r3, [r3, #4]
 8020778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 802077c:	687b      	ldr	r3, [r7, #4]
 802077e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	681b      	ldr	r3, [r3, #0]
 8020784:	430a      	orrs	r2, r1
 8020786:	605a      	str	r2, [r3, #4]
  }
}
 8020788:	bf00      	nop
 802078a:	370c      	adds	r7, #12
 802078c:	46bd      	mov	sp, r7
 802078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020792:	4770      	bx	lr

08020794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020794:	b580      	push	{r7, lr}
 8020796:	b086      	sub	sp, #24
 8020798:	af02      	add	r7, sp, #8
 802079a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802079c:	687b      	ldr	r3, [r7, #4]
 802079e:	2200      	movs	r2, #0
 80207a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80207a4:	f7f8 ff58 	bl	8019658 <HAL_GetTick>
 80207a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80207aa:	687b      	ldr	r3, [r7, #4]
 80207ac:	681b      	ldr	r3, [r3, #0]
 80207ae:	681b      	ldr	r3, [r3, #0]
 80207b0:	f003 0308 	and.w	r3, r3, #8
 80207b4:	2b08      	cmp	r3, #8
 80207b6:	d10e      	bne.n	80207d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80207b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80207bc:	9300      	str	r3, [sp, #0]
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	2200      	movs	r2, #0
 80207c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80207c6:	6878      	ldr	r0, [r7, #4]
 80207c8:	f000 f82f 	bl	802082a <UART_WaitOnFlagUntilTimeout>
 80207cc:	4603      	mov	r3, r0
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d001      	beq.n	80207d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80207d2:	2303      	movs	r3, #3
 80207d4:	e025      	b.n	8020822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80207d6:	687b      	ldr	r3, [r7, #4]
 80207d8:	681b      	ldr	r3, [r3, #0]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	f003 0304 	and.w	r3, r3, #4
 80207e0:	2b04      	cmp	r3, #4
 80207e2:	d10e      	bne.n	8020802 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80207e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80207e8:	9300      	str	r3, [sp, #0]
 80207ea:	68fb      	ldr	r3, [r7, #12]
 80207ec:	2200      	movs	r2, #0
 80207ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80207f2:	6878      	ldr	r0, [r7, #4]
 80207f4:	f000 f819 	bl	802082a <UART_WaitOnFlagUntilTimeout>
 80207f8:	4603      	mov	r3, r0
 80207fa:	2b00      	cmp	r3, #0
 80207fc:	d001      	beq.n	8020802 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80207fe:	2303      	movs	r3, #3
 8020800:	e00f      	b.n	8020822 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8020802:	687b      	ldr	r3, [r7, #4]
 8020804:	2220      	movs	r2, #32
 8020806:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	2220      	movs	r2, #32
 802080e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	2200      	movs	r2, #0
 8020816:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8020818:	687b      	ldr	r3, [r7, #4]
 802081a:	2200      	movs	r2, #0
 802081c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020820:	2300      	movs	r3, #0
}
 8020822:	4618      	mov	r0, r3
 8020824:	3710      	adds	r7, #16
 8020826:	46bd      	mov	sp, r7
 8020828:	bd80      	pop	{r7, pc}

0802082a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802082a:	b580      	push	{r7, lr}
 802082c:	b09c      	sub	sp, #112	; 0x70
 802082e:	af00      	add	r7, sp, #0
 8020830:	60f8      	str	r0, [r7, #12]
 8020832:	60b9      	str	r1, [r7, #8]
 8020834:	603b      	str	r3, [r7, #0]
 8020836:	4613      	mov	r3, r2
 8020838:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802083a:	e0a9      	b.n	8020990 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802083c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802083e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020842:	f000 80a5 	beq.w	8020990 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020846:	f7f8 ff07 	bl	8019658 <HAL_GetTick>
 802084a:	4602      	mov	r2, r0
 802084c:	683b      	ldr	r3, [r7, #0]
 802084e:	1ad3      	subs	r3, r2, r3
 8020850:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8020852:	429a      	cmp	r2, r3
 8020854:	d302      	bcc.n	802085c <UART_WaitOnFlagUntilTimeout+0x32>
 8020856:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020858:	2b00      	cmp	r3, #0
 802085a:	d140      	bne.n	80208de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 802085c:	68fb      	ldr	r3, [r7, #12]
 802085e:	681b      	ldr	r3, [r3, #0]
 8020860:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020864:	e853 3f00 	ldrex	r3, [r3]
 8020868:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 802086a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802086c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8020870:	667b      	str	r3, [r7, #100]	; 0x64
 8020872:	68fb      	ldr	r3, [r7, #12]
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	461a      	mov	r2, r3
 8020878:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 802087a:	65fb      	str	r3, [r7, #92]	; 0x5c
 802087c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802087e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8020880:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8020882:	e841 2300 	strex	r3, r2, [r1]
 8020886:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8020888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 802088a:	2b00      	cmp	r3, #0
 802088c:	d1e6      	bne.n	802085c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802088e:	68fb      	ldr	r3, [r7, #12]
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	3308      	adds	r3, #8
 8020894:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8020898:	e853 3f00 	ldrex	r3, [r3]
 802089c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802089e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80208a0:	f023 0301 	bic.w	r3, r3, #1
 80208a4:	663b      	str	r3, [r7, #96]	; 0x60
 80208a6:	68fb      	ldr	r3, [r7, #12]
 80208a8:	681b      	ldr	r3, [r3, #0]
 80208aa:	3308      	adds	r3, #8
 80208ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80208ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80208b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80208b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80208b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80208b6:	e841 2300 	strex	r3, r2, [r1]
 80208ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80208bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80208be:	2b00      	cmp	r3, #0
 80208c0:	d1e5      	bne.n	802088e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80208c2:	68fb      	ldr	r3, [r7, #12]
 80208c4:	2220      	movs	r2, #32
 80208c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80208ca:	68fb      	ldr	r3, [r7, #12]
 80208cc:	2220      	movs	r2, #32
 80208ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80208d2:	68fb      	ldr	r3, [r7, #12]
 80208d4:	2200      	movs	r2, #0
 80208d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80208da:	2303      	movs	r3, #3
 80208dc:	e069      	b.n	80209b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80208de:	68fb      	ldr	r3, [r7, #12]
 80208e0:	681b      	ldr	r3, [r3, #0]
 80208e2:	681b      	ldr	r3, [r3, #0]
 80208e4:	f003 0304 	and.w	r3, r3, #4
 80208e8:	2b00      	cmp	r3, #0
 80208ea:	d051      	beq.n	8020990 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80208ec:	68fb      	ldr	r3, [r7, #12]
 80208ee:	681b      	ldr	r3, [r3, #0]
 80208f0:	69db      	ldr	r3, [r3, #28]
 80208f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80208f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80208fa:	d149      	bne.n	8020990 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80208fc:	68fb      	ldr	r3, [r7, #12]
 80208fe:	681b      	ldr	r3, [r3, #0]
 8020900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020904:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	681b      	ldr	r3, [r3, #0]
 802090a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802090c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802090e:	e853 3f00 	ldrex	r3, [r3]
 8020912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8020914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 802091a:	66fb      	str	r3, [r7, #108]	; 0x6c
 802091c:	68fb      	ldr	r3, [r7, #12]
 802091e:	681b      	ldr	r3, [r3, #0]
 8020920:	461a      	mov	r2, r3
 8020922:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8020924:	637b      	str	r3, [r7, #52]	; 0x34
 8020926:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802092a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 802092c:	e841 2300 	strex	r3, r2, [r1]
 8020930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8020932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8020934:	2b00      	cmp	r3, #0
 8020936:	d1e6      	bne.n	8020906 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	3308      	adds	r3, #8
 802093e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020940:	697b      	ldr	r3, [r7, #20]
 8020942:	e853 3f00 	ldrex	r3, [r3]
 8020946:	613b      	str	r3, [r7, #16]
   return(result);
 8020948:	693b      	ldr	r3, [r7, #16]
 802094a:	f023 0301 	bic.w	r3, r3, #1
 802094e:	66bb      	str	r3, [r7, #104]	; 0x68
 8020950:	68fb      	ldr	r3, [r7, #12]
 8020952:	681b      	ldr	r3, [r3, #0]
 8020954:	3308      	adds	r3, #8
 8020956:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8020958:	623a      	str	r2, [r7, #32]
 802095a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802095c:	69f9      	ldr	r1, [r7, #28]
 802095e:	6a3a      	ldr	r2, [r7, #32]
 8020960:	e841 2300 	strex	r3, r2, [r1]
 8020964:	61bb      	str	r3, [r7, #24]
   return(result);
 8020966:	69bb      	ldr	r3, [r7, #24]
 8020968:	2b00      	cmp	r3, #0
 802096a:	d1e5      	bne.n	8020938 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 802096c:	68fb      	ldr	r3, [r7, #12]
 802096e:	2220      	movs	r2, #32
 8020970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	2220      	movs	r2, #32
 8020978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802097c:	68fb      	ldr	r3, [r7, #12]
 802097e:	2220      	movs	r2, #32
 8020980:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	2200      	movs	r2, #0
 8020988:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 802098c:	2303      	movs	r3, #3
 802098e:	e010      	b.n	80209b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	681b      	ldr	r3, [r3, #0]
 8020994:	69da      	ldr	r2, [r3, #28]
 8020996:	68bb      	ldr	r3, [r7, #8]
 8020998:	4013      	ands	r3, r2
 802099a:	68ba      	ldr	r2, [r7, #8]
 802099c:	429a      	cmp	r2, r3
 802099e:	bf0c      	ite	eq
 80209a0:	2301      	moveq	r3, #1
 80209a2:	2300      	movne	r3, #0
 80209a4:	b2db      	uxtb	r3, r3
 80209a6:	461a      	mov	r2, r3
 80209a8:	79fb      	ldrb	r3, [r7, #7]
 80209aa:	429a      	cmp	r2, r3
 80209ac:	f43f af46 	beq.w	802083c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80209b0:	2300      	movs	r3, #0
}
 80209b2:	4618      	mov	r0, r3
 80209b4:	3770      	adds	r7, #112	; 0x70
 80209b6:	46bd      	mov	sp, r7
 80209b8:	bd80      	pop	{r7, pc}

080209ba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80209ba:	b480      	push	{r7}
 80209bc:	b085      	sub	sp, #20
 80209be:	af00      	add	r7, sp, #0
 80209c0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80209c2:	687b      	ldr	r3, [r7, #4]
 80209c4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80209c8:	2b01      	cmp	r3, #1
 80209ca:	d101      	bne.n	80209d0 <HAL_UARTEx_DisableFifoMode+0x16>
 80209cc:	2302      	movs	r3, #2
 80209ce:	e027      	b.n	8020a20 <HAL_UARTEx_DisableFifoMode+0x66>
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	2201      	movs	r2, #1
 80209d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80209d8:	687b      	ldr	r3, [r7, #4]
 80209da:	2224      	movs	r2, #36	; 0x24
 80209dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80209e0:	687b      	ldr	r3, [r7, #4]
 80209e2:	681b      	ldr	r3, [r3, #0]
 80209e4:	681b      	ldr	r3, [r3, #0]
 80209e6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80209e8:	687b      	ldr	r3, [r7, #4]
 80209ea:	681b      	ldr	r3, [r3, #0]
 80209ec:	681a      	ldr	r2, [r3, #0]
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	681b      	ldr	r3, [r3, #0]
 80209f2:	f022 0201 	bic.w	r2, r2, #1
 80209f6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80209f8:	68fb      	ldr	r3, [r7, #12]
 80209fa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80209fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020a00:	687b      	ldr	r3, [r7, #4]
 8020a02:	2200      	movs	r2, #0
 8020a04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020a06:	687b      	ldr	r3, [r7, #4]
 8020a08:	681b      	ldr	r3, [r3, #0]
 8020a0a:	68fa      	ldr	r2, [r7, #12]
 8020a0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	2220      	movs	r2, #32
 8020a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020a16:	687b      	ldr	r3, [r7, #4]
 8020a18:	2200      	movs	r2, #0
 8020a1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020a1e:	2300      	movs	r3, #0
}
 8020a20:	4618      	mov	r0, r3
 8020a22:	3714      	adds	r7, #20
 8020a24:	46bd      	mov	sp, r7
 8020a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a2a:	4770      	bx	lr

08020a2c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020a2c:	b580      	push	{r7, lr}
 8020a2e:	b084      	sub	sp, #16
 8020a30:	af00      	add	r7, sp, #0
 8020a32:	6078      	str	r0, [r7, #4]
 8020a34:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020a36:	687b      	ldr	r3, [r7, #4]
 8020a38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020a3c:	2b01      	cmp	r3, #1
 8020a3e:	d101      	bne.n	8020a44 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8020a40:	2302      	movs	r3, #2
 8020a42:	e02d      	b.n	8020aa0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	2201      	movs	r2, #1
 8020a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020a4c:	687b      	ldr	r3, [r7, #4]
 8020a4e:	2224      	movs	r2, #36	; 0x24
 8020a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	681b      	ldr	r3, [r3, #0]
 8020a58:	681b      	ldr	r3, [r3, #0]
 8020a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020a5c:	687b      	ldr	r3, [r7, #4]
 8020a5e:	681b      	ldr	r3, [r3, #0]
 8020a60:	681a      	ldr	r2, [r3, #0]
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	f022 0201 	bic.w	r2, r2, #1
 8020a6a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	689b      	ldr	r3, [r3, #8]
 8020a72:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	683a      	ldr	r2, [r7, #0]
 8020a7c:	430a      	orrs	r2, r1
 8020a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020a80:	6878      	ldr	r0, [r7, #4]
 8020a82:	f000 f84f 	bl	8020b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	681b      	ldr	r3, [r3, #0]
 8020a8a:	68fa      	ldr	r2, [r7, #12]
 8020a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020a8e:	687b      	ldr	r3, [r7, #4]
 8020a90:	2220      	movs	r2, #32
 8020a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020a96:	687b      	ldr	r3, [r7, #4]
 8020a98:	2200      	movs	r2, #0
 8020a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020a9e:	2300      	movs	r3, #0
}
 8020aa0:	4618      	mov	r0, r3
 8020aa2:	3710      	adds	r7, #16
 8020aa4:	46bd      	mov	sp, r7
 8020aa6:	bd80      	pop	{r7, pc}

08020aa8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020aa8:	b580      	push	{r7, lr}
 8020aaa:	b084      	sub	sp, #16
 8020aac:	af00      	add	r7, sp, #0
 8020aae:	6078      	str	r0, [r7, #4]
 8020ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020ab8:	2b01      	cmp	r3, #1
 8020aba:	d101      	bne.n	8020ac0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020abc:	2302      	movs	r3, #2
 8020abe:	e02d      	b.n	8020b1c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	2201      	movs	r2, #1
 8020ac4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8020ac8:	687b      	ldr	r3, [r7, #4]
 8020aca:	2224      	movs	r2, #36	; 0x24
 8020acc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020ad0:	687b      	ldr	r3, [r7, #4]
 8020ad2:	681b      	ldr	r3, [r3, #0]
 8020ad4:	681b      	ldr	r3, [r3, #0]
 8020ad6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8020ad8:	687b      	ldr	r3, [r7, #4]
 8020ada:	681b      	ldr	r3, [r3, #0]
 8020adc:	681a      	ldr	r2, [r3, #0]
 8020ade:	687b      	ldr	r3, [r7, #4]
 8020ae0:	681b      	ldr	r3, [r3, #0]
 8020ae2:	f022 0201 	bic.w	r2, r2, #1
 8020ae6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	689b      	ldr	r3, [r3, #8]
 8020aee:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8020af2:	687b      	ldr	r3, [r7, #4]
 8020af4:	681b      	ldr	r3, [r3, #0]
 8020af6:	683a      	ldr	r2, [r7, #0]
 8020af8:	430a      	orrs	r2, r1
 8020afa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020afc:	6878      	ldr	r0, [r7, #4]
 8020afe:	f000 f811 	bl	8020b24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020b02:	687b      	ldr	r3, [r7, #4]
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	68fa      	ldr	r2, [r7, #12]
 8020b08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020b0a:	687b      	ldr	r3, [r7, #4]
 8020b0c:	2220      	movs	r2, #32
 8020b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2200      	movs	r2, #0
 8020b16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020b1a:	2300      	movs	r3, #0
}
 8020b1c:	4618      	mov	r0, r3
 8020b1e:	3710      	adds	r7, #16
 8020b20:	46bd      	mov	sp, r7
 8020b22:	bd80      	pop	{r7, pc}

08020b24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020b24:	b480      	push	{r7}
 8020b26:	b085      	sub	sp, #20
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020b2c:	687b      	ldr	r3, [r7, #4]
 8020b2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8020b30:	2b00      	cmp	r3, #0
 8020b32:	d108      	bne.n	8020b46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8020b34:	687b      	ldr	r3, [r7, #4]
 8020b36:	2201      	movs	r2, #1
 8020b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8020b3c:	687b      	ldr	r3, [r7, #4]
 8020b3e:	2201      	movs	r2, #1
 8020b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8020b44:	e031      	b.n	8020baa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8020b46:	2308      	movs	r3, #8
 8020b48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8020b4a:	2308      	movs	r3, #8
 8020b4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	689b      	ldr	r3, [r3, #8]
 8020b54:	0e5b      	lsrs	r3, r3, #25
 8020b56:	b2db      	uxtb	r3, r3
 8020b58:	f003 0307 	and.w	r3, r3, #7
 8020b5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	689b      	ldr	r3, [r3, #8]
 8020b64:	0f5b      	lsrs	r3, r3, #29
 8020b66:	b2db      	uxtb	r3, r3
 8020b68:	f003 0307 	and.w	r3, r3, #7
 8020b6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020b6e:	7bbb      	ldrb	r3, [r7, #14]
 8020b70:	7b3a      	ldrb	r2, [r7, #12]
 8020b72:	4911      	ldr	r1, [pc, #68]	; (8020bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8020b74:	5c8a      	ldrb	r2, [r1, r2]
 8020b76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8020b7a:	7b3a      	ldrb	r2, [r7, #12]
 8020b7c:	490f      	ldr	r1, [pc, #60]	; (8020bbc <UARTEx_SetNbDataToProcess+0x98>)
 8020b7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8020b80:	fb93 f3f2 	sdiv	r3, r3, r2
 8020b84:	b29a      	uxth	r2, r3
 8020b86:	687b      	ldr	r3, [r7, #4]
 8020b88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020b8c:	7bfb      	ldrb	r3, [r7, #15]
 8020b8e:	7b7a      	ldrb	r2, [r7, #13]
 8020b90:	4909      	ldr	r1, [pc, #36]	; (8020bb8 <UARTEx_SetNbDataToProcess+0x94>)
 8020b92:	5c8a      	ldrb	r2, [r1, r2]
 8020b94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020b98:	7b7a      	ldrb	r2, [r7, #13]
 8020b9a:	4908      	ldr	r1, [pc, #32]	; (8020bbc <UARTEx_SetNbDataToProcess+0x98>)
 8020b9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8020ba2:	b29a      	uxth	r2, r3
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8020baa:	bf00      	nop
 8020bac:	3714      	adds	r7, #20
 8020bae:	46bd      	mov	sp, r7
 8020bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bb4:	4770      	bx	lr
 8020bb6:	bf00      	nop
 8020bb8:	080251d4 	.word	0x080251d4
 8020bbc:	080251dc 	.word	0x080251dc

08020bc0 <__errno>:
 8020bc0:	4b01      	ldr	r3, [pc, #4]	; (8020bc8 <__errno+0x8>)
 8020bc2:	6818      	ldr	r0, [r3, #0]
 8020bc4:	4770      	bx	lr
 8020bc6:	bf00      	nop
 8020bc8:	2000002c 	.word	0x2000002c

08020bcc <__libc_init_array>:
 8020bcc:	b570      	push	{r4, r5, r6, lr}
 8020bce:	4d0d      	ldr	r5, [pc, #52]	; (8020c04 <__libc_init_array+0x38>)
 8020bd0:	4c0d      	ldr	r4, [pc, #52]	; (8020c08 <__libc_init_array+0x3c>)
 8020bd2:	1b64      	subs	r4, r4, r5
 8020bd4:	10a4      	asrs	r4, r4, #2
 8020bd6:	2600      	movs	r6, #0
 8020bd8:	42a6      	cmp	r6, r4
 8020bda:	d109      	bne.n	8020bf0 <__libc_init_array+0x24>
 8020bdc:	4d0b      	ldr	r5, [pc, #44]	; (8020c0c <__libc_init_array+0x40>)
 8020bde:	4c0c      	ldr	r4, [pc, #48]	; (8020c10 <__libc_init_array+0x44>)
 8020be0:	f004 f94c 	bl	8024e7c <_init>
 8020be4:	1b64      	subs	r4, r4, r5
 8020be6:	10a4      	asrs	r4, r4, #2
 8020be8:	2600      	movs	r6, #0
 8020bea:	42a6      	cmp	r6, r4
 8020bec:	d105      	bne.n	8020bfa <__libc_init_array+0x2e>
 8020bee:	bd70      	pop	{r4, r5, r6, pc}
 8020bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8020bf4:	4798      	blx	r3
 8020bf6:	3601      	adds	r6, #1
 8020bf8:	e7ee      	b.n	8020bd8 <__libc_init_array+0xc>
 8020bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8020bfe:	4798      	blx	r3
 8020c00:	3601      	adds	r6, #1
 8020c02:	e7f2      	b.n	8020bea <__libc_init_array+0x1e>
 8020c04:	080257d0 	.word	0x080257d0
 8020c08:	080257d0 	.word	0x080257d0
 8020c0c:	080257d0 	.word	0x080257d0
 8020c10:	080257d4 	.word	0x080257d4

08020c14 <memcpy>:
 8020c14:	440a      	add	r2, r1
 8020c16:	4291      	cmp	r1, r2
 8020c18:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c1c:	d100      	bne.n	8020c20 <memcpy+0xc>
 8020c1e:	4770      	bx	lr
 8020c20:	b510      	push	{r4, lr}
 8020c22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020c26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020c2a:	4291      	cmp	r1, r2
 8020c2c:	d1f9      	bne.n	8020c22 <memcpy+0xe>
 8020c2e:	bd10      	pop	{r4, pc}

08020c30 <memset>:
 8020c30:	4402      	add	r2, r0
 8020c32:	4603      	mov	r3, r0
 8020c34:	4293      	cmp	r3, r2
 8020c36:	d100      	bne.n	8020c3a <memset+0xa>
 8020c38:	4770      	bx	lr
 8020c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8020c3e:	e7f9      	b.n	8020c34 <memset+0x4>

08020c40 <__cvt>:
 8020c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020c44:	ec55 4b10 	vmov	r4, r5, d0
 8020c48:	2d00      	cmp	r5, #0
 8020c4a:	460e      	mov	r6, r1
 8020c4c:	4619      	mov	r1, r3
 8020c4e:	462b      	mov	r3, r5
 8020c50:	bfbb      	ittet	lt
 8020c52:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8020c56:	461d      	movlt	r5, r3
 8020c58:	2300      	movge	r3, #0
 8020c5a:	232d      	movlt	r3, #45	; 0x2d
 8020c5c:	700b      	strb	r3, [r1, #0]
 8020c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020c60:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8020c64:	4691      	mov	r9, r2
 8020c66:	f023 0820 	bic.w	r8, r3, #32
 8020c6a:	bfbc      	itt	lt
 8020c6c:	4622      	movlt	r2, r4
 8020c6e:	4614      	movlt	r4, r2
 8020c70:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020c74:	d005      	beq.n	8020c82 <__cvt+0x42>
 8020c76:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8020c7a:	d100      	bne.n	8020c7e <__cvt+0x3e>
 8020c7c:	3601      	adds	r6, #1
 8020c7e:	2102      	movs	r1, #2
 8020c80:	e000      	b.n	8020c84 <__cvt+0x44>
 8020c82:	2103      	movs	r1, #3
 8020c84:	ab03      	add	r3, sp, #12
 8020c86:	9301      	str	r3, [sp, #4]
 8020c88:	ab02      	add	r3, sp, #8
 8020c8a:	9300      	str	r3, [sp, #0]
 8020c8c:	ec45 4b10 	vmov	d0, r4, r5
 8020c90:	4653      	mov	r3, sl
 8020c92:	4632      	mov	r2, r6
 8020c94:	f000 fe30 	bl	80218f8 <_dtoa_r>
 8020c98:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020c9c:	4607      	mov	r7, r0
 8020c9e:	d102      	bne.n	8020ca6 <__cvt+0x66>
 8020ca0:	f019 0f01 	tst.w	r9, #1
 8020ca4:	d022      	beq.n	8020cec <__cvt+0xac>
 8020ca6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8020caa:	eb07 0906 	add.w	r9, r7, r6
 8020cae:	d110      	bne.n	8020cd2 <__cvt+0x92>
 8020cb0:	783b      	ldrb	r3, [r7, #0]
 8020cb2:	2b30      	cmp	r3, #48	; 0x30
 8020cb4:	d10a      	bne.n	8020ccc <__cvt+0x8c>
 8020cb6:	2200      	movs	r2, #0
 8020cb8:	2300      	movs	r3, #0
 8020cba:	4620      	mov	r0, r4
 8020cbc:	4629      	mov	r1, r5
 8020cbe:	f7df ff2b 	bl	8000b18 <__aeabi_dcmpeq>
 8020cc2:	b918      	cbnz	r0, 8020ccc <__cvt+0x8c>
 8020cc4:	f1c6 0601 	rsb	r6, r6, #1
 8020cc8:	f8ca 6000 	str.w	r6, [sl]
 8020ccc:	f8da 3000 	ldr.w	r3, [sl]
 8020cd0:	4499      	add	r9, r3
 8020cd2:	2200      	movs	r2, #0
 8020cd4:	2300      	movs	r3, #0
 8020cd6:	4620      	mov	r0, r4
 8020cd8:	4629      	mov	r1, r5
 8020cda:	f7df ff1d 	bl	8000b18 <__aeabi_dcmpeq>
 8020cde:	b108      	cbz	r0, 8020ce4 <__cvt+0xa4>
 8020ce0:	f8cd 900c 	str.w	r9, [sp, #12]
 8020ce4:	2230      	movs	r2, #48	; 0x30
 8020ce6:	9b03      	ldr	r3, [sp, #12]
 8020ce8:	454b      	cmp	r3, r9
 8020cea:	d307      	bcc.n	8020cfc <__cvt+0xbc>
 8020cec:	9b03      	ldr	r3, [sp, #12]
 8020cee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020cf0:	1bdb      	subs	r3, r3, r7
 8020cf2:	4638      	mov	r0, r7
 8020cf4:	6013      	str	r3, [r2, #0]
 8020cf6:	b004      	add	sp, #16
 8020cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cfc:	1c59      	adds	r1, r3, #1
 8020cfe:	9103      	str	r1, [sp, #12]
 8020d00:	701a      	strb	r2, [r3, #0]
 8020d02:	e7f0      	b.n	8020ce6 <__cvt+0xa6>

08020d04 <__exponent>:
 8020d04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8020d06:	4603      	mov	r3, r0
 8020d08:	2900      	cmp	r1, #0
 8020d0a:	bfb8      	it	lt
 8020d0c:	4249      	neglt	r1, r1
 8020d0e:	f803 2b02 	strb.w	r2, [r3], #2
 8020d12:	bfb4      	ite	lt
 8020d14:	222d      	movlt	r2, #45	; 0x2d
 8020d16:	222b      	movge	r2, #43	; 0x2b
 8020d18:	2909      	cmp	r1, #9
 8020d1a:	7042      	strb	r2, [r0, #1]
 8020d1c:	dd2a      	ble.n	8020d74 <__exponent+0x70>
 8020d1e:	f10d 0407 	add.w	r4, sp, #7
 8020d22:	46a4      	mov	ip, r4
 8020d24:	270a      	movs	r7, #10
 8020d26:	46a6      	mov	lr, r4
 8020d28:	460a      	mov	r2, r1
 8020d2a:	fb91 f6f7 	sdiv	r6, r1, r7
 8020d2e:	fb07 1516 	mls	r5, r7, r6, r1
 8020d32:	3530      	adds	r5, #48	; 0x30
 8020d34:	2a63      	cmp	r2, #99	; 0x63
 8020d36:	f104 34ff 	add.w	r4, r4, #4294967295
 8020d3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8020d3e:	4631      	mov	r1, r6
 8020d40:	dcf1      	bgt.n	8020d26 <__exponent+0x22>
 8020d42:	3130      	adds	r1, #48	; 0x30
 8020d44:	f1ae 0502 	sub.w	r5, lr, #2
 8020d48:	f804 1c01 	strb.w	r1, [r4, #-1]
 8020d4c:	1c44      	adds	r4, r0, #1
 8020d4e:	4629      	mov	r1, r5
 8020d50:	4561      	cmp	r1, ip
 8020d52:	d30a      	bcc.n	8020d6a <__exponent+0x66>
 8020d54:	f10d 0209 	add.w	r2, sp, #9
 8020d58:	eba2 020e 	sub.w	r2, r2, lr
 8020d5c:	4565      	cmp	r5, ip
 8020d5e:	bf88      	it	hi
 8020d60:	2200      	movhi	r2, #0
 8020d62:	4413      	add	r3, r2
 8020d64:	1a18      	subs	r0, r3, r0
 8020d66:	b003      	add	sp, #12
 8020d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020d6e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8020d72:	e7ed      	b.n	8020d50 <__exponent+0x4c>
 8020d74:	2330      	movs	r3, #48	; 0x30
 8020d76:	3130      	adds	r1, #48	; 0x30
 8020d78:	7083      	strb	r3, [r0, #2]
 8020d7a:	70c1      	strb	r1, [r0, #3]
 8020d7c:	1d03      	adds	r3, r0, #4
 8020d7e:	e7f1      	b.n	8020d64 <__exponent+0x60>

08020d80 <_printf_float>:
 8020d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d84:	ed2d 8b02 	vpush	{d8}
 8020d88:	b08d      	sub	sp, #52	; 0x34
 8020d8a:	460c      	mov	r4, r1
 8020d8c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020d90:	4616      	mov	r6, r2
 8020d92:	461f      	mov	r7, r3
 8020d94:	4605      	mov	r5, r0
 8020d96:	f001 fd55 	bl	8022844 <_localeconv_r>
 8020d9a:	f8d0 a000 	ldr.w	sl, [r0]
 8020d9e:	4650      	mov	r0, sl
 8020da0:	f7df fa3e 	bl	8000220 <strlen>
 8020da4:	2300      	movs	r3, #0
 8020da6:	930a      	str	r3, [sp, #40]	; 0x28
 8020da8:	6823      	ldr	r3, [r4, #0]
 8020daa:	9305      	str	r3, [sp, #20]
 8020dac:	f8d8 3000 	ldr.w	r3, [r8]
 8020db0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020db4:	3307      	adds	r3, #7
 8020db6:	f023 0307 	bic.w	r3, r3, #7
 8020dba:	f103 0208 	add.w	r2, r3, #8
 8020dbe:	f8c8 2000 	str.w	r2, [r8]
 8020dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020dc6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8020dca:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8020dce:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020dd2:	9307      	str	r3, [sp, #28]
 8020dd4:	f8cd 8018 	str.w	r8, [sp, #24]
 8020dd8:	ee08 0a10 	vmov	s16, r0
 8020ddc:	4b9f      	ldr	r3, [pc, #636]	; (802105c <_printf_float+0x2dc>)
 8020dde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020de2:	f04f 32ff 	mov.w	r2, #4294967295
 8020de6:	f7df fec9 	bl	8000b7c <__aeabi_dcmpun>
 8020dea:	bb88      	cbnz	r0, 8020e50 <_printf_float+0xd0>
 8020dec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020df0:	4b9a      	ldr	r3, [pc, #616]	; (802105c <_printf_float+0x2dc>)
 8020df2:	f04f 32ff 	mov.w	r2, #4294967295
 8020df6:	f7df fea3 	bl	8000b40 <__aeabi_dcmple>
 8020dfa:	bb48      	cbnz	r0, 8020e50 <_printf_float+0xd0>
 8020dfc:	2200      	movs	r2, #0
 8020dfe:	2300      	movs	r3, #0
 8020e00:	4640      	mov	r0, r8
 8020e02:	4649      	mov	r1, r9
 8020e04:	f7df fe92 	bl	8000b2c <__aeabi_dcmplt>
 8020e08:	b110      	cbz	r0, 8020e10 <_printf_float+0x90>
 8020e0a:	232d      	movs	r3, #45	; 0x2d
 8020e0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020e10:	4b93      	ldr	r3, [pc, #588]	; (8021060 <_printf_float+0x2e0>)
 8020e12:	4894      	ldr	r0, [pc, #592]	; (8021064 <_printf_float+0x2e4>)
 8020e14:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8020e18:	bf94      	ite	ls
 8020e1a:	4698      	movls	r8, r3
 8020e1c:	4680      	movhi	r8, r0
 8020e1e:	2303      	movs	r3, #3
 8020e20:	6123      	str	r3, [r4, #16]
 8020e22:	9b05      	ldr	r3, [sp, #20]
 8020e24:	f023 0204 	bic.w	r2, r3, #4
 8020e28:	6022      	str	r2, [r4, #0]
 8020e2a:	f04f 0900 	mov.w	r9, #0
 8020e2e:	9700      	str	r7, [sp, #0]
 8020e30:	4633      	mov	r3, r6
 8020e32:	aa0b      	add	r2, sp, #44	; 0x2c
 8020e34:	4621      	mov	r1, r4
 8020e36:	4628      	mov	r0, r5
 8020e38:	f000 f9d8 	bl	80211ec <_printf_common>
 8020e3c:	3001      	adds	r0, #1
 8020e3e:	f040 8090 	bne.w	8020f62 <_printf_float+0x1e2>
 8020e42:	f04f 30ff 	mov.w	r0, #4294967295
 8020e46:	b00d      	add	sp, #52	; 0x34
 8020e48:	ecbd 8b02 	vpop	{d8}
 8020e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e50:	4642      	mov	r2, r8
 8020e52:	464b      	mov	r3, r9
 8020e54:	4640      	mov	r0, r8
 8020e56:	4649      	mov	r1, r9
 8020e58:	f7df fe90 	bl	8000b7c <__aeabi_dcmpun>
 8020e5c:	b140      	cbz	r0, 8020e70 <_printf_float+0xf0>
 8020e5e:	464b      	mov	r3, r9
 8020e60:	2b00      	cmp	r3, #0
 8020e62:	bfbc      	itt	lt
 8020e64:	232d      	movlt	r3, #45	; 0x2d
 8020e66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8020e6a:	487f      	ldr	r0, [pc, #508]	; (8021068 <_printf_float+0x2e8>)
 8020e6c:	4b7f      	ldr	r3, [pc, #508]	; (802106c <_printf_float+0x2ec>)
 8020e6e:	e7d1      	b.n	8020e14 <_printf_float+0x94>
 8020e70:	6863      	ldr	r3, [r4, #4]
 8020e72:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8020e76:	9206      	str	r2, [sp, #24]
 8020e78:	1c5a      	adds	r2, r3, #1
 8020e7a:	d13f      	bne.n	8020efc <_printf_float+0x17c>
 8020e7c:	2306      	movs	r3, #6
 8020e7e:	6063      	str	r3, [r4, #4]
 8020e80:	9b05      	ldr	r3, [sp, #20]
 8020e82:	6861      	ldr	r1, [r4, #4]
 8020e84:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8020e88:	2300      	movs	r3, #0
 8020e8a:	9303      	str	r3, [sp, #12]
 8020e8c:	ab0a      	add	r3, sp, #40	; 0x28
 8020e8e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8020e92:	ab09      	add	r3, sp, #36	; 0x24
 8020e94:	ec49 8b10 	vmov	d0, r8, r9
 8020e98:	9300      	str	r3, [sp, #0]
 8020e9a:	6022      	str	r2, [r4, #0]
 8020e9c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020ea0:	4628      	mov	r0, r5
 8020ea2:	f7ff fecd 	bl	8020c40 <__cvt>
 8020ea6:	9b06      	ldr	r3, [sp, #24]
 8020ea8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020eaa:	2b47      	cmp	r3, #71	; 0x47
 8020eac:	4680      	mov	r8, r0
 8020eae:	d108      	bne.n	8020ec2 <_printf_float+0x142>
 8020eb0:	1cc8      	adds	r0, r1, #3
 8020eb2:	db02      	blt.n	8020eba <_printf_float+0x13a>
 8020eb4:	6863      	ldr	r3, [r4, #4]
 8020eb6:	4299      	cmp	r1, r3
 8020eb8:	dd41      	ble.n	8020f3e <_printf_float+0x1be>
 8020eba:	f1ab 0b02 	sub.w	fp, fp, #2
 8020ebe:	fa5f fb8b 	uxtb.w	fp, fp
 8020ec2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020ec6:	d820      	bhi.n	8020f0a <_printf_float+0x18a>
 8020ec8:	3901      	subs	r1, #1
 8020eca:	465a      	mov	r2, fp
 8020ecc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020ed0:	9109      	str	r1, [sp, #36]	; 0x24
 8020ed2:	f7ff ff17 	bl	8020d04 <__exponent>
 8020ed6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020ed8:	1813      	adds	r3, r2, r0
 8020eda:	2a01      	cmp	r2, #1
 8020edc:	4681      	mov	r9, r0
 8020ede:	6123      	str	r3, [r4, #16]
 8020ee0:	dc02      	bgt.n	8020ee8 <_printf_float+0x168>
 8020ee2:	6822      	ldr	r2, [r4, #0]
 8020ee4:	07d2      	lsls	r2, r2, #31
 8020ee6:	d501      	bpl.n	8020eec <_printf_float+0x16c>
 8020ee8:	3301      	adds	r3, #1
 8020eea:	6123      	str	r3, [r4, #16]
 8020eec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020ef0:	2b00      	cmp	r3, #0
 8020ef2:	d09c      	beq.n	8020e2e <_printf_float+0xae>
 8020ef4:	232d      	movs	r3, #45	; 0x2d
 8020ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020efa:	e798      	b.n	8020e2e <_printf_float+0xae>
 8020efc:	9a06      	ldr	r2, [sp, #24]
 8020efe:	2a47      	cmp	r2, #71	; 0x47
 8020f00:	d1be      	bne.n	8020e80 <_printf_float+0x100>
 8020f02:	2b00      	cmp	r3, #0
 8020f04:	d1bc      	bne.n	8020e80 <_printf_float+0x100>
 8020f06:	2301      	movs	r3, #1
 8020f08:	e7b9      	b.n	8020e7e <_printf_float+0xfe>
 8020f0a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8020f0e:	d118      	bne.n	8020f42 <_printf_float+0x1c2>
 8020f10:	2900      	cmp	r1, #0
 8020f12:	6863      	ldr	r3, [r4, #4]
 8020f14:	dd0b      	ble.n	8020f2e <_printf_float+0x1ae>
 8020f16:	6121      	str	r1, [r4, #16]
 8020f18:	b913      	cbnz	r3, 8020f20 <_printf_float+0x1a0>
 8020f1a:	6822      	ldr	r2, [r4, #0]
 8020f1c:	07d0      	lsls	r0, r2, #31
 8020f1e:	d502      	bpl.n	8020f26 <_printf_float+0x1a6>
 8020f20:	3301      	adds	r3, #1
 8020f22:	440b      	add	r3, r1
 8020f24:	6123      	str	r3, [r4, #16]
 8020f26:	65a1      	str	r1, [r4, #88]	; 0x58
 8020f28:	f04f 0900 	mov.w	r9, #0
 8020f2c:	e7de      	b.n	8020eec <_printf_float+0x16c>
 8020f2e:	b913      	cbnz	r3, 8020f36 <_printf_float+0x1b6>
 8020f30:	6822      	ldr	r2, [r4, #0]
 8020f32:	07d2      	lsls	r2, r2, #31
 8020f34:	d501      	bpl.n	8020f3a <_printf_float+0x1ba>
 8020f36:	3302      	adds	r3, #2
 8020f38:	e7f4      	b.n	8020f24 <_printf_float+0x1a4>
 8020f3a:	2301      	movs	r3, #1
 8020f3c:	e7f2      	b.n	8020f24 <_printf_float+0x1a4>
 8020f3e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8020f42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020f44:	4299      	cmp	r1, r3
 8020f46:	db05      	blt.n	8020f54 <_printf_float+0x1d4>
 8020f48:	6823      	ldr	r3, [r4, #0]
 8020f4a:	6121      	str	r1, [r4, #16]
 8020f4c:	07d8      	lsls	r0, r3, #31
 8020f4e:	d5ea      	bpl.n	8020f26 <_printf_float+0x1a6>
 8020f50:	1c4b      	adds	r3, r1, #1
 8020f52:	e7e7      	b.n	8020f24 <_printf_float+0x1a4>
 8020f54:	2900      	cmp	r1, #0
 8020f56:	bfd4      	ite	le
 8020f58:	f1c1 0202 	rsble	r2, r1, #2
 8020f5c:	2201      	movgt	r2, #1
 8020f5e:	4413      	add	r3, r2
 8020f60:	e7e0      	b.n	8020f24 <_printf_float+0x1a4>
 8020f62:	6823      	ldr	r3, [r4, #0]
 8020f64:	055a      	lsls	r2, r3, #21
 8020f66:	d407      	bmi.n	8020f78 <_printf_float+0x1f8>
 8020f68:	6923      	ldr	r3, [r4, #16]
 8020f6a:	4642      	mov	r2, r8
 8020f6c:	4631      	mov	r1, r6
 8020f6e:	4628      	mov	r0, r5
 8020f70:	47b8      	blx	r7
 8020f72:	3001      	adds	r0, #1
 8020f74:	d12c      	bne.n	8020fd0 <_printf_float+0x250>
 8020f76:	e764      	b.n	8020e42 <_printf_float+0xc2>
 8020f78:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8020f7c:	f240 80e0 	bls.w	8021140 <_printf_float+0x3c0>
 8020f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8020f84:	2200      	movs	r2, #0
 8020f86:	2300      	movs	r3, #0
 8020f88:	f7df fdc6 	bl	8000b18 <__aeabi_dcmpeq>
 8020f8c:	2800      	cmp	r0, #0
 8020f8e:	d034      	beq.n	8020ffa <_printf_float+0x27a>
 8020f90:	4a37      	ldr	r2, [pc, #220]	; (8021070 <_printf_float+0x2f0>)
 8020f92:	2301      	movs	r3, #1
 8020f94:	4631      	mov	r1, r6
 8020f96:	4628      	mov	r0, r5
 8020f98:	47b8      	blx	r7
 8020f9a:	3001      	adds	r0, #1
 8020f9c:	f43f af51 	beq.w	8020e42 <_printf_float+0xc2>
 8020fa0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020fa4:	429a      	cmp	r2, r3
 8020fa6:	db02      	blt.n	8020fae <_printf_float+0x22e>
 8020fa8:	6823      	ldr	r3, [r4, #0]
 8020faa:	07d8      	lsls	r0, r3, #31
 8020fac:	d510      	bpl.n	8020fd0 <_printf_float+0x250>
 8020fae:	ee18 3a10 	vmov	r3, s16
 8020fb2:	4652      	mov	r2, sl
 8020fb4:	4631      	mov	r1, r6
 8020fb6:	4628      	mov	r0, r5
 8020fb8:	47b8      	blx	r7
 8020fba:	3001      	adds	r0, #1
 8020fbc:	f43f af41 	beq.w	8020e42 <_printf_float+0xc2>
 8020fc0:	f04f 0800 	mov.w	r8, #0
 8020fc4:	f104 091a 	add.w	r9, r4, #26
 8020fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020fca:	3b01      	subs	r3, #1
 8020fcc:	4543      	cmp	r3, r8
 8020fce:	dc09      	bgt.n	8020fe4 <_printf_float+0x264>
 8020fd0:	6823      	ldr	r3, [r4, #0]
 8020fd2:	079b      	lsls	r3, r3, #30
 8020fd4:	f100 8105 	bmi.w	80211e2 <_printf_float+0x462>
 8020fd8:	68e0      	ldr	r0, [r4, #12]
 8020fda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020fdc:	4298      	cmp	r0, r3
 8020fde:	bfb8      	it	lt
 8020fe0:	4618      	movlt	r0, r3
 8020fe2:	e730      	b.n	8020e46 <_printf_float+0xc6>
 8020fe4:	2301      	movs	r3, #1
 8020fe6:	464a      	mov	r2, r9
 8020fe8:	4631      	mov	r1, r6
 8020fea:	4628      	mov	r0, r5
 8020fec:	47b8      	blx	r7
 8020fee:	3001      	adds	r0, #1
 8020ff0:	f43f af27 	beq.w	8020e42 <_printf_float+0xc2>
 8020ff4:	f108 0801 	add.w	r8, r8, #1
 8020ff8:	e7e6      	b.n	8020fc8 <_printf_float+0x248>
 8020ffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	dc39      	bgt.n	8021074 <_printf_float+0x2f4>
 8021000:	4a1b      	ldr	r2, [pc, #108]	; (8021070 <_printf_float+0x2f0>)
 8021002:	2301      	movs	r3, #1
 8021004:	4631      	mov	r1, r6
 8021006:	4628      	mov	r0, r5
 8021008:	47b8      	blx	r7
 802100a:	3001      	adds	r0, #1
 802100c:	f43f af19 	beq.w	8020e42 <_printf_float+0xc2>
 8021010:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8021014:	4313      	orrs	r3, r2
 8021016:	d102      	bne.n	802101e <_printf_float+0x29e>
 8021018:	6823      	ldr	r3, [r4, #0]
 802101a:	07d9      	lsls	r1, r3, #31
 802101c:	d5d8      	bpl.n	8020fd0 <_printf_float+0x250>
 802101e:	ee18 3a10 	vmov	r3, s16
 8021022:	4652      	mov	r2, sl
 8021024:	4631      	mov	r1, r6
 8021026:	4628      	mov	r0, r5
 8021028:	47b8      	blx	r7
 802102a:	3001      	adds	r0, #1
 802102c:	f43f af09 	beq.w	8020e42 <_printf_float+0xc2>
 8021030:	f04f 0900 	mov.w	r9, #0
 8021034:	f104 0a1a 	add.w	sl, r4, #26
 8021038:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802103a:	425b      	negs	r3, r3
 802103c:	454b      	cmp	r3, r9
 802103e:	dc01      	bgt.n	8021044 <_printf_float+0x2c4>
 8021040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021042:	e792      	b.n	8020f6a <_printf_float+0x1ea>
 8021044:	2301      	movs	r3, #1
 8021046:	4652      	mov	r2, sl
 8021048:	4631      	mov	r1, r6
 802104a:	4628      	mov	r0, r5
 802104c:	47b8      	blx	r7
 802104e:	3001      	adds	r0, #1
 8021050:	f43f aef7 	beq.w	8020e42 <_printf_float+0xc2>
 8021054:	f109 0901 	add.w	r9, r9, #1
 8021058:	e7ee      	b.n	8021038 <_printf_float+0x2b8>
 802105a:	bf00      	nop
 802105c:	7fefffff 	.word	0x7fefffff
 8021060:	080251e8 	.word	0x080251e8
 8021064:	080251ec 	.word	0x080251ec
 8021068:	080251f4 	.word	0x080251f4
 802106c:	080251f0 	.word	0x080251f0
 8021070:	080251f8 	.word	0x080251f8
 8021074:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021076:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021078:	429a      	cmp	r2, r3
 802107a:	bfa8      	it	ge
 802107c:	461a      	movge	r2, r3
 802107e:	2a00      	cmp	r2, #0
 8021080:	4691      	mov	r9, r2
 8021082:	dc37      	bgt.n	80210f4 <_printf_float+0x374>
 8021084:	f04f 0b00 	mov.w	fp, #0
 8021088:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802108c:	f104 021a 	add.w	r2, r4, #26
 8021090:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8021092:	9305      	str	r3, [sp, #20]
 8021094:	eba3 0309 	sub.w	r3, r3, r9
 8021098:	455b      	cmp	r3, fp
 802109a:	dc33      	bgt.n	8021104 <_printf_float+0x384>
 802109c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80210a0:	429a      	cmp	r2, r3
 80210a2:	db3b      	blt.n	802111c <_printf_float+0x39c>
 80210a4:	6823      	ldr	r3, [r4, #0]
 80210a6:	07da      	lsls	r2, r3, #31
 80210a8:	d438      	bmi.n	802111c <_printf_float+0x39c>
 80210aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80210ac:	9a05      	ldr	r2, [sp, #20]
 80210ae:	9909      	ldr	r1, [sp, #36]	; 0x24
 80210b0:	1a9a      	subs	r2, r3, r2
 80210b2:	eba3 0901 	sub.w	r9, r3, r1
 80210b6:	4591      	cmp	r9, r2
 80210b8:	bfa8      	it	ge
 80210ba:	4691      	movge	r9, r2
 80210bc:	f1b9 0f00 	cmp.w	r9, #0
 80210c0:	dc35      	bgt.n	802112e <_printf_float+0x3ae>
 80210c2:	f04f 0800 	mov.w	r8, #0
 80210c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80210ca:	f104 0a1a 	add.w	sl, r4, #26
 80210ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80210d2:	1a9b      	subs	r3, r3, r2
 80210d4:	eba3 0309 	sub.w	r3, r3, r9
 80210d8:	4543      	cmp	r3, r8
 80210da:	f77f af79 	ble.w	8020fd0 <_printf_float+0x250>
 80210de:	2301      	movs	r3, #1
 80210e0:	4652      	mov	r2, sl
 80210e2:	4631      	mov	r1, r6
 80210e4:	4628      	mov	r0, r5
 80210e6:	47b8      	blx	r7
 80210e8:	3001      	adds	r0, #1
 80210ea:	f43f aeaa 	beq.w	8020e42 <_printf_float+0xc2>
 80210ee:	f108 0801 	add.w	r8, r8, #1
 80210f2:	e7ec      	b.n	80210ce <_printf_float+0x34e>
 80210f4:	4613      	mov	r3, r2
 80210f6:	4631      	mov	r1, r6
 80210f8:	4642      	mov	r2, r8
 80210fa:	4628      	mov	r0, r5
 80210fc:	47b8      	blx	r7
 80210fe:	3001      	adds	r0, #1
 8021100:	d1c0      	bne.n	8021084 <_printf_float+0x304>
 8021102:	e69e      	b.n	8020e42 <_printf_float+0xc2>
 8021104:	2301      	movs	r3, #1
 8021106:	4631      	mov	r1, r6
 8021108:	4628      	mov	r0, r5
 802110a:	9205      	str	r2, [sp, #20]
 802110c:	47b8      	blx	r7
 802110e:	3001      	adds	r0, #1
 8021110:	f43f ae97 	beq.w	8020e42 <_printf_float+0xc2>
 8021114:	9a05      	ldr	r2, [sp, #20]
 8021116:	f10b 0b01 	add.w	fp, fp, #1
 802111a:	e7b9      	b.n	8021090 <_printf_float+0x310>
 802111c:	ee18 3a10 	vmov	r3, s16
 8021120:	4652      	mov	r2, sl
 8021122:	4631      	mov	r1, r6
 8021124:	4628      	mov	r0, r5
 8021126:	47b8      	blx	r7
 8021128:	3001      	adds	r0, #1
 802112a:	d1be      	bne.n	80210aa <_printf_float+0x32a>
 802112c:	e689      	b.n	8020e42 <_printf_float+0xc2>
 802112e:	9a05      	ldr	r2, [sp, #20]
 8021130:	464b      	mov	r3, r9
 8021132:	4442      	add	r2, r8
 8021134:	4631      	mov	r1, r6
 8021136:	4628      	mov	r0, r5
 8021138:	47b8      	blx	r7
 802113a:	3001      	adds	r0, #1
 802113c:	d1c1      	bne.n	80210c2 <_printf_float+0x342>
 802113e:	e680      	b.n	8020e42 <_printf_float+0xc2>
 8021140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021142:	2a01      	cmp	r2, #1
 8021144:	dc01      	bgt.n	802114a <_printf_float+0x3ca>
 8021146:	07db      	lsls	r3, r3, #31
 8021148:	d538      	bpl.n	80211bc <_printf_float+0x43c>
 802114a:	2301      	movs	r3, #1
 802114c:	4642      	mov	r2, r8
 802114e:	4631      	mov	r1, r6
 8021150:	4628      	mov	r0, r5
 8021152:	47b8      	blx	r7
 8021154:	3001      	adds	r0, #1
 8021156:	f43f ae74 	beq.w	8020e42 <_printf_float+0xc2>
 802115a:	ee18 3a10 	vmov	r3, s16
 802115e:	4652      	mov	r2, sl
 8021160:	4631      	mov	r1, r6
 8021162:	4628      	mov	r0, r5
 8021164:	47b8      	blx	r7
 8021166:	3001      	adds	r0, #1
 8021168:	f43f ae6b 	beq.w	8020e42 <_printf_float+0xc2>
 802116c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8021170:	2200      	movs	r2, #0
 8021172:	2300      	movs	r3, #0
 8021174:	f7df fcd0 	bl	8000b18 <__aeabi_dcmpeq>
 8021178:	b9d8      	cbnz	r0, 80211b2 <_printf_float+0x432>
 802117a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802117c:	f108 0201 	add.w	r2, r8, #1
 8021180:	3b01      	subs	r3, #1
 8021182:	4631      	mov	r1, r6
 8021184:	4628      	mov	r0, r5
 8021186:	47b8      	blx	r7
 8021188:	3001      	adds	r0, #1
 802118a:	d10e      	bne.n	80211aa <_printf_float+0x42a>
 802118c:	e659      	b.n	8020e42 <_printf_float+0xc2>
 802118e:	2301      	movs	r3, #1
 8021190:	4652      	mov	r2, sl
 8021192:	4631      	mov	r1, r6
 8021194:	4628      	mov	r0, r5
 8021196:	47b8      	blx	r7
 8021198:	3001      	adds	r0, #1
 802119a:	f43f ae52 	beq.w	8020e42 <_printf_float+0xc2>
 802119e:	f108 0801 	add.w	r8, r8, #1
 80211a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80211a4:	3b01      	subs	r3, #1
 80211a6:	4543      	cmp	r3, r8
 80211a8:	dcf1      	bgt.n	802118e <_printf_float+0x40e>
 80211aa:	464b      	mov	r3, r9
 80211ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80211b0:	e6dc      	b.n	8020f6c <_printf_float+0x1ec>
 80211b2:	f04f 0800 	mov.w	r8, #0
 80211b6:	f104 0a1a 	add.w	sl, r4, #26
 80211ba:	e7f2      	b.n	80211a2 <_printf_float+0x422>
 80211bc:	2301      	movs	r3, #1
 80211be:	4642      	mov	r2, r8
 80211c0:	e7df      	b.n	8021182 <_printf_float+0x402>
 80211c2:	2301      	movs	r3, #1
 80211c4:	464a      	mov	r2, r9
 80211c6:	4631      	mov	r1, r6
 80211c8:	4628      	mov	r0, r5
 80211ca:	47b8      	blx	r7
 80211cc:	3001      	adds	r0, #1
 80211ce:	f43f ae38 	beq.w	8020e42 <_printf_float+0xc2>
 80211d2:	f108 0801 	add.w	r8, r8, #1
 80211d6:	68e3      	ldr	r3, [r4, #12]
 80211d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80211da:	1a5b      	subs	r3, r3, r1
 80211dc:	4543      	cmp	r3, r8
 80211de:	dcf0      	bgt.n	80211c2 <_printf_float+0x442>
 80211e0:	e6fa      	b.n	8020fd8 <_printf_float+0x258>
 80211e2:	f04f 0800 	mov.w	r8, #0
 80211e6:	f104 0919 	add.w	r9, r4, #25
 80211ea:	e7f4      	b.n	80211d6 <_printf_float+0x456>

080211ec <_printf_common>:
 80211ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211f0:	4616      	mov	r6, r2
 80211f2:	4699      	mov	r9, r3
 80211f4:	688a      	ldr	r2, [r1, #8]
 80211f6:	690b      	ldr	r3, [r1, #16]
 80211f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80211fc:	4293      	cmp	r3, r2
 80211fe:	bfb8      	it	lt
 8021200:	4613      	movlt	r3, r2
 8021202:	6033      	str	r3, [r6, #0]
 8021204:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8021208:	4607      	mov	r7, r0
 802120a:	460c      	mov	r4, r1
 802120c:	b10a      	cbz	r2, 8021212 <_printf_common+0x26>
 802120e:	3301      	adds	r3, #1
 8021210:	6033      	str	r3, [r6, #0]
 8021212:	6823      	ldr	r3, [r4, #0]
 8021214:	0699      	lsls	r1, r3, #26
 8021216:	bf42      	ittt	mi
 8021218:	6833      	ldrmi	r3, [r6, #0]
 802121a:	3302      	addmi	r3, #2
 802121c:	6033      	strmi	r3, [r6, #0]
 802121e:	6825      	ldr	r5, [r4, #0]
 8021220:	f015 0506 	ands.w	r5, r5, #6
 8021224:	d106      	bne.n	8021234 <_printf_common+0x48>
 8021226:	f104 0a19 	add.w	sl, r4, #25
 802122a:	68e3      	ldr	r3, [r4, #12]
 802122c:	6832      	ldr	r2, [r6, #0]
 802122e:	1a9b      	subs	r3, r3, r2
 8021230:	42ab      	cmp	r3, r5
 8021232:	dc26      	bgt.n	8021282 <_printf_common+0x96>
 8021234:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8021238:	1e13      	subs	r3, r2, #0
 802123a:	6822      	ldr	r2, [r4, #0]
 802123c:	bf18      	it	ne
 802123e:	2301      	movne	r3, #1
 8021240:	0692      	lsls	r2, r2, #26
 8021242:	d42b      	bmi.n	802129c <_printf_common+0xb0>
 8021244:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8021248:	4649      	mov	r1, r9
 802124a:	4638      	mov	r0, r7
 802124c:	47c0      	blx	r8
 802124e:	3001      	adds	r0, #1
 8021250:	d01e      	beq.n	8021290 <_printf_common+0xa4>
 8021252:	6823      	ldr	r3, [r4, #0]
 8021254:	68e5      	ldr	r5, [r4, #12]
 8021256:	6832      	ldr	r2, [r6, #0]
 8021258:	f003 0306 	and.w	r3, r3, #6
 802125c:	2b04      	cmp	r3, #4
 802125e:	bf08      	it	eq
 8021260:	1aad      	subeq	r5, r5, r2
 8021262:	68a3      	ldr	r3, [r4, #8]
 8021264:	6922      	ldr	r2, [r4, #16]
 8021266:	bf0c      	ite	eq
 8021268:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802126c:	2500      	movne	r5, #0
 802126e:	4293      	cmp	r3, r2
 8021270:	bfc4      	itt	gt
 8021272:	1a9b      	subgt	r3, r3, r2
 8021274:	18ed      	addgt	r5, r5, r3
 8021276:	2600      	movs	r6, #0
 8021278:	341a      	adds	r4, #26
 802127a:	42b5      	cmp	r5, r6
 802127c:	d11a      	bne.n	80212b4 <_printf_common+0xc8>
 802127e:	2000      	movs	r0, #0
 8021280:	e008      	b.n	8021294 <_printf_common+0xa8>
 8021282:	2301      	movs	r3, #1
 8021284:	4652      	mov	r2, sl
 8021286:	4649      	mov	r1, r9
 8021288:	4638      	mov	r0, r7
 802128a:	47c0      	blx	r8
 802128c:	3001      	adds	r0, #1
 802128e:	d103      	bne.n	8021298 <_printf_common+0xac>
 8021290:	f04f 30ff 	mov.w	r0, #4294967295
 8021294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021298:	3501      	adds	r5, #1
 802129a:	e7c6      	b.n	802122a <_printf_common+0x3e>
 802129c:	18e1      	adds	r1, r4, r3
 802129e:	1c5a      	adds	r2, r3, #1
 80212a0:	2030      	movs	r0, #48	; 0x30
 80212a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80212a6:	4422      	add	r2, r4
 80212a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80212ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80212b0:	3302      	adds	r3, #2
 80212b2:	e7c7      	b.n	8021244 <_printf_common+0x58>
 80212b4:	2301      	movs	r3, #1
 80212b6:	4622      	mov	r2, r4
 80212b8:	4649      	mov	r1, r9
 80212ba:	4638      	mov	r0, r7
 80212bc:	47c0      	blx	r8
 80212be:	3001      	adds	r0, #1
 80212c0:	d0e6      	beq.n	8021290 <_printf_common+0xa4>
 80212c2:	3601      	adds	r6, #1
 80212c4:	e7d9      	b.n	802127a <_printf_common+0x8e>
	...

080212c8 <_printf_i>:
 80212c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80212cc:	7e0f      	ldrb	r7, [r1, #24]
 80212ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80212d0:	2f78      	cmp	r7, #120	; 0x78
 80212d2:	4691      	mov	r9, r2
 80212d4:	4680      	mov	r8, r0
 80212d6:	460c      	mov	r4, r1
 80212d8:	469a      	mov	sl, r3
 80212da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80212de:	d807      	bhi.n	80212f0 <_printf_i+0x28>
 80212e0:	2f62      	cmp	r7, #98	; 0x62
 80212e2:	d80a      	bhi.n	80212fa <_printf_i+0x32>
 80212e4:	2f00      	cmp	r7, #0
 80212e6:	f000 80d8 	beq.w	802149a <_printf_i+0x1d2>
 80212ea:	2f58      	cmp	r7, #88	; 0x58
 80212ec:	f000 80a3 	beq.w	8021436 <_printf_i+0x16e>
 80212f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80212f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80212f8:	e03a      	b.n	8021370 <_printf_i+0xa8>
 80212fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80212fe:	2b15      	cmp	r3, #21
 8021300:	d8f6      	bhi.n	80212f0 <_printf_i+0x28>
 8021302:	a101      	add	r1, pc, #4	; (adr r1, 8021308 <_printf_i+0x40>)
 8021304:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8021308:	08021361 	.word	0x08021361
 802130c:	08021375 	.word	0x08021375
 8021310:	080212f1 	.word	0x080212f1
 8021314:	080212f1 	.word	0x080212f1
 8021318:	080212f1 	.word	0x080212f1
 802131c:	080212f1 	.word	0x080212f1
 8021320:	08021375 	.word	0x08021375
 8021324:	080212f1 	.word	0x080212f1
 8021328:	080212f1 	.word	0x080212f1
 802132c:	080212f1 	.word	0x080212f1
 8021330:	080212f1 	.word	0x080212f1
 8021334:	08021481 	.word	0x08021481
 8021338:	080213a5 	.word	0x080213a5
 802133c:	08021463 	.word	0x08021463
 8021340:	080212f1 	.word	0x080212f1
 8021344:	080212f1 	.word	0x080212f1
 8021348:	080214a3 	.word	0x080214a3
 802134c:	080212f1 	.word	0x080212f1
 8021350:	080213a5 	.word	0x080213a5
 8021354:	080212f1 	.word	0x080212f1
 8021358:	080212f1 	.word	0x080212f1
 802135c:	0802146b 	.word	0x0802146b
 8021360:	682b      	ldr	r3, [r5, #0]
 8021362:	1d1a      	adds	r2, r3, #4
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	602a      	str	r2, [r5, #0]
 8021368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802136c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8021370:	2301      	movs	r3, #1
 8021372:	e0a3      	b.n	80214bc <_printf_i+0x1f4>
 8021374:	6820      	ldr	r0, [r4, #0]
 8021376:	6829      	ldr	r1, [r5, #0]
 8021378:	0606      	lsls	r6, r0, #24
 802137a:	f101 0304 	add.w	r3, r1, #4
 802137e:	d50a      	bpl.n	8021396 <_printf_i+0xce>
 8021380:	680e      	ldr	r6, [r1, #0]
 8021382:	602b      	str	r3, [r5, #0]
 8021384:	2e00      	cmp	r6, #0
 8021386:	da03      	bge.n	8021390 <_printf_i+0xc8>
 8021388:	232d      	movs	r3, #45	; 0x2d
 802138a:	4276      	negs	r6, r6
 802138c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8021390:	485e      	ldr	r0, [pc, #376]	; (802150c <_printf_i+0x244>)
 8021392:	230a      	movs	r3, #10
 8021394:	e019      	b.n	80213ca <_printf_i+0x102>
 8021396:	680e      	ldr	r6, [r1, #0]
 8021398:	602b      	str	r3, [r5, #0]
 802139a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802139e:	bf18      	it	ne
 80213a0:	b236      	sxthne	r6, r6
 80213a2:	e7ef      	b.n	8021384 <_printf_i+0xbc>
 80213a4:	682b      	ldr	r3, [r5, #0]
 80213a6:	6820      	ldr	r0, [r4, #0]
 80213a8:	1d19      	adds	r1, r3, #4
 80213aa:	6029      	str	r1, [r5, #0]
 80213ac:	0601      	lsls	r1, r0, #24
 80213ae:	d501      	bpl.n	80213b4 <_printf_i+0xec>
 80213b0:	681e      	ldr	r6, [r3, #0]
 80213b2:	e002      	b.n	80213ba <_printf_i+0xf2>
 80213b4:	0646      	lsls	r6, r0, #25
 80213b6:	d5fb      	bpl.n	80213b0 <_printf_i+0xe8>
 80213b8:	881e      	ldrh	r6, [r3, #0]
 80213ba:	4854      	ldr	r0, [pc, #336]	; (802150c <_printf_i+0x244>)
 80213bc:	2f6f      	cmp	r7, #111	; 0x6f
 80213be:	bf0c      	ite	eq
 80213c0:	2308      	moveq	r3, #8
 80213c2:	230a      	movne	r3, #10
 80213c4:	2100      	movs	r1, #0
 80213c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80213ca:	6865      	ldr	r5, [r4, #4]
 80213cc:	60a5      	str	r5, [r4, #8]
 80213ce:	2d00      	cmp	r5, #0
 80213d0:	bfa2      	ittt	ge
 80213d2:	6821      	ldrge	r1, [r4, #0]
 80213d4:	f021 0104 	bicge.w	r1, r1, #4
 80213d8:	6021      	strge	r1, [r4, #0]
 80213da:	b90e      	cbnz	r6, 80213e0 <_printf_i+0x118>
 80213dc:	2d00      	cmp	r5, #0
 80213de:	d04d      	beq.n	802147c <_printf_i+0x1b4>
 80213e0:	4615      	mov	r5, r2
 80213e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80213e6:	fb03 6711 	mls	r7, r3, r1, r6
 80213ea:	5dc7      	ldrb	r7, [r0, r7]
 80213ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80213f0:	4637      	mov	r7, r6
 80213f2:	42bb      	cmp	r3, r7
 80213f4:	460e      	mov	r6, r1
 80213f6:	d9f4      	bls.n	80213e2 <_printf_i+0x11a>
 80213f8:	2b08      	cmp	r3, #8
 80213fa:	d10b      	bne.n	8021414 <_printf_i+0x14c>
 80213fc:	6823      	ldr	r3, [r4, #0]
 80213fe:	07de      	lsls	r6, r3, #31
 8021400:	d508      	bpl.n	8021414 <_printf_i+0x14c>
 8021402:	6923      	ldr	r3, [r4, #16]
 8021404:	6861      	ldr	r1, [r4, #4]
 8021406:	4299      	cmp	r1, r3
 8021408:	bfde      	ittt	le
 802140a:	2330      	movle	r3, #48	; 0x30
 802140c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8021410:	f105 35ff 	addle.w	r5, r5, #4294967295
 8021414:	1b52      	subs	r2, r2, r5
 8021416:	6122      	str	r2, [r4, #16]
 8021418:	f8cd a000 	str.w	sl, [sp]
 802141c:	464b      	mov	r3, r9
 802141e:	aa03      	add	r2, sp, #12
 8021420:	4621      	mov	r1, r4
 8021422:	4640      	mov	r0, r8
 8021424:	f7ff fee2 	bl	80211ec <_printf_common>
 8021428:	3001      	adds	r0, #1
 802142a:	d14c      	bne.n	80214c6 <_printf_i+0x1fe>
 802142c:	f04f 30ff 	mov.w	r0, #4294967295
 8021430:	b004      	add	sp, #16
 8021432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021436:	4835      	ldr	r0, [pc, #212]	; (802150c <_printf_i+0x244>)
 8021438:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802143c:	6829      	ldr	r1, [r5, #0]
 802143e:	6823      	ldr	r3, [r4, #0]
 8021440:	f851 6b04 	ldr.w	r6, [r1], #4
 8021444:	6029      	str	r1, [r5, #0]
 8021446:	061d      	lsls	r5, r3, #24
 8021448:	d514      	bpl.n	8021474 <_printf_i+0x1ac>
 802144a:	07df      	lsls	r7, r3, #31
 802144c:	bf44      	itt	mi
 802144e:	f043 0320 	orrmi.w	r3, r3, #32
 8021452:	6023      	strmi	r3, [r4, #0]
 8021454:	b91e      	cbnz	r6, 802145e <_printf_i+0x196>
 8021456:	6823      	ldr	r3, [r4, #0]
 8021458:	f023 0320 	bic.w	r3, r3, #32
 802145c:	6023      	str	r3, [r4, #0]
 802145e:	2310      	movs	r3, #16
 8021460:	e7b0      	b.n	80213c4 <_printf_i+0xfc>
 8021462:	6823      	ldr	r3, [r4, #0]
 8021464:	f043 0320 	orr.w	r3, r3, #32
 8021468:	6023      	str	r3, [r4, #0]
 802146a:	2378      	movs	r3, #120	; 0x78
 802146c:	4828      	ldr	r0, [pc, #160]	; (8021510 <_printf_i+0x248>)
 802146e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8021472:	e7e3      	b.n	802143c <_printf_i+0x174>
 8021474:	0659      	lsls	r1, r3, #25
 8021476:	bf48      	it	mi
 8021478:	b2b6      	uxthmi	r6, r6
 802147a:	e7e6      	b.n	802144a <_printf_i+0x182>
 802147c:	4615      	mov	r5, r2
 802147e:	e7bb      	b.n	80213f8 <_printf_i+0x130>
 8021480:	682b      	ldr	r3, [r5, #0]
 8021482:	6826      	ldr	r6, [r4, #0]
 8021484:	6961      	ldr	r1, [r4, #20]
 8021486:	1d18      	adds	r0, r3, #4
 8021488:	6028      	str	r0, [r5, #0]
 802148a:	0635      	lsls	r5, r6, #24
 802148c:	681b      	ldr	r3, [r3, #0]
 802148e:	d501      	bpl.n	8021494 <_printf_i+0x1cc>
 8021490:	6019      	str	r1, [r3, #0]
 8021492:	e002      	b.n	802149a <_printf_i+0x1d2>
 8021494:	0670      	lsls	r0, r6, #25
 8021496:	d5fb      	bpl.n	8021490 <_printf_i+0x1c8>
 8021498:	8019      	strh	r1, [r3, #0]
 802149a:	2300      	movs	r3, #0
 802149c:	6123      	str	r3, [r4, #16]
 802149e:	4615      	mov	r5, r2
 80214a0:	e7ba      	b.n	8021418 <_printf_i+0x150>
 80214a2:	682b      	ldr	r3, [r5, #0]
 80214a4:	1d1a      	adds	r2, r3, #4
 80214a6:	602a      	str	r2, [r5, #0]
 80214a8:	681d      	ldr	r5, [r3, #0]
 80214aa:	6862      	ldr	r2, [r4, #4]
 80214ac:	2100      	movs	r1, #0
 80214ae:	4628      	mov	r0, r5
 80214b0:	f7de febe 	bl	8000230 <memchr>
 80214b4:	b108      	cbz	r0, 80214ba <_printf_i+0x1f2>
 80214b6:	1b40      	subs	r0, r0, r5
 80214b8:	6060      	str	r0, [r4, #4]
 80214ba:	6863      	ldr	r3, [r4, #4]
 80214bc:	6123      	str	r3, [r4, #16]
 80214be:	2300      	movs	r3, #0
 80214c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80214c4:	e7a8      	b.n	8021418 <_printf_i+0x150>
 80214c6:	6923      	ldr	r3, [r4, #16]
 80214c8:	462a      	mov	r2, r5
 80214ca:	4649      	mov	r1, r9
 80214cc:	4640      	mov	r0, r8
 80214ce:	47d0      	blx	sl
 80214d0:	3001      	adds	r0, #1
 80214d2:	d0ab      	beq.n	802142c <_printf_i+0x164>
 80214d4:	6823      	ldr	r3, [r4, #0]
 80214d6:	079b      	lsls	r3, r3, #30
 80214d8:	d413      	bmi.n	8021502 <_printf_i+0x23a>
 80214da:	68e0      	ldr	r0, [r4, #12]
 80214dc:	9b03      	ldr	r3, [sp, #12]
 80214de:	4298      	cmp	r0, r3
 80214e0:	bfb8      	it	lt
 80214e2:	4618      	movlt	r0, r3
 80214e4:	e7a4      	b.n	8021430 <_printf_i+0x168>
 80214e6:	2301      	movs	r3, #1
 80214e8:	4632      	mov	r2, r6
 80214ea:	4649      	mov	r1, r9
 80214ec:	4640      	mov	r0, r8
 80214ee:	47d0      	blx	sl
 80214f0:	3001      	adds	r0, #1
 80214f2:	d09b      	beq.n	802142c <_printf_i+0x164>
 80214f4:	3501      	adds	r5, #1
 80214f6:	68e3      	ldr	r3, [r4, #12]
 80214f8:	9903      	ldr	r1, [sp, #12]
 80214fa:	1a5b      	subs	r3, r3, r1
 80214fc:	42ab      	cmp	r3, r5
 80214fe:	dcf2      	bgt.n	80214e6 <_printf_i+0x21e>
 8021500:	e7eb      	b.n	80214da <_printf_i+0x212>
 8021502:	2500      	movs	r5, #0
 8021504:	f104 0619 	add.w	r6, r4, #25
 8021508:	e7f5      	b.n	80214f6 <_printf_i+0x22e>
 802150a:	bf00      	nop
 802150c:	080251fa 	.word	0x080251fa
 8021510:	0802520b 	.word	0x0802520b

08021514 <iprintf>:
 8021514:	b40f      	push	{r0, r1, r2, r3}
 8021516:	4b0a      	ldr	r3, [pc, #40]	; (8021540 <iprintf+0x2c>)
 8021518:	b513      	push	{r0, r1, r4, lr}
 802151a:	681c      	ldr	r4, [r3, #0]
 802151c:	b124      	cbz	r4, 8021528 <iprintf+0x14>
 802151e:	69a3      	ldr	r3, [r4, #24]
 8021520:	b913      	cbnz	r3, 8021528 <iprintf+0x14>
 8021522:	4620      	mov	r0, r4
 8021524:	f001 f8f0 	bl	8022708 <__sinit>
 8021528:	ab05      	add	r3, sp, #20
 802152a:	9a04      	ldr	r2, [sp, #16]
 802152c:	68a1      	ldr	r1, [r4, #8]
 802152e:	9301      	str	r3, [sp, #4]
 8021530:	4620      	mov	r0, r4
 8021532:	f001 fe9f 	bl	8023274 <_vfiprintf_r>
 8021536:	b002      	add	sp, #8
 8021538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802153c:	b004      	add	sp, #16
 802153e:	4770      	bx	lr
 8021540:	2000002c 	.word	0x2000002c

08021544 <putchar>:
 8021544:	4b09      	ldr	r3, [pc, #36]	; (802156c <putchar+0x28>)
 8021546:	b513      	push	{r0, r1, r4, lr}
 8021548:	681c      	ldr	r4, [r3, #0]
 802154a:	4601      	mov	r1, r0
 802154c:	b134      	cbz	r4, 802155c <putchar+0x18>
 802154e:	69a3      	ldr	r3, [r4, #24]
 8021550:	b923      	cbnz	r3, 802155c <putchar+0x18>
 8021552:	9001      	str	r0, [sp, #4]
 8021554:	4620      	mov	r0, r4
 8021556:	f001 f8d7 	bl	8022708 <__sinit>
 802155a:	9901      	ldr	r1, [sp, #4]
 802155c:	68a2      	ldr	r2, [r4, #8]
 802155e:	4620      	mov	r0, r4
 8021560:	b002      	add	sp, #8
 8021562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021566:	f001 bfb5 	b.w	80234d4 <_putc_r>
 802156a:	bf00      	nop
 802156c:	2000002c 	.word	0x2000002c

08021570 <_puts_r>:
 8021570:	b570      	push	{r4, r5, r6, lr}
 8021572:	460e      	mov	r6, r1
 8021574:	4605      	mov	r5, r0
 8021576:	b118      	cbz	r0, 8021580 <_puts_r+0x10>
 8021578:	6983      	ldr	r3, [r0, #24]
 802157a:	b90b      	cbnz	r3, 8021580 <_puts_r+0x10>
 802157c:	f001 f8c4 	bl	8022708 <__sinit>
 8021580:	69ab      	ldr	r3, [r5, #24]
 8021582:	68ac      	ldr	r4, [r5, #8]
 8021584:	b913      	cbnz	r3, 802158c <_puts_r+0x1c>
 8021586:	4628      	mov	r0, r5
 8021588:	f001 f8be 	bl	8022708 <__sinit>
 802158c:	4b2c      	ldr	r3, [pc, #176]	; (8021640 <_puts_r+0xd0>)
 802158e:	429c      	cmp	r4, r3
 8021590:	d120      	bne.n	80215d4 <_puts_r+0x64>
 8021592:	686c      	ldr	r4, [r5, #4]
 8021594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021596:	07db      	lsls	r3, r3, #31
 8021598:	d405      	bmi.n	80215a6 <_puts_r+0x36>
 802159a:	89a3      	ldrh	r3, [r4, #12]
 802159c:	0598      	lsls	r0, r3, #22
 802159e:	d402      	bmi.n	80215a6 <_puts_r+0x36>
 80215a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80215a2:	f001 f954 	bl	802284e <__retarget_lock_acquire_recursive>
 80215a6:	89a3      	ldrh	r3, [r4, #12]
 80215a8:	0719      	lsls	r1, r3, #28
 80215aa:	d51d      	bpl.n	80215e8 <_puts_r+0x78>
 80215ac:	6923      	ldr	r3, [r4, #16]
 80215ae:	b1db      	cbz	r3, 80215e8 <_puts_r+0x78>
 80215b0:	3e01      	subs	r6, #1
 80215b2:	68a3      	ldr	r3, [r4, #8]
 80215b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80215b8:	3b01      	subs	r3, #1
 80215ba:	60a3      	str	r3, [r4, #8]
 80215bc:	bb39      	cbnz	r1, 802160e <_puts_r+0x9e>
 80215be:	2b00      	cmp	r3, #0
 80215c0:	da38      	bge.n	8021634 <_puts_r+0xc4>
 80215c2:	4622      	mov	r2, r4
 80215c4:	210a      	movs	r1, #10
 80215c6:	4628      	mov	r0, r5
 80215c8:	f000 f848 	bl	802165c <__swbuf_r>
 80215cc:	3001      	adds	r0, #1
 80215ce:	d011      	beq.n	80215f4 <_puts_r+0x84>
 80215d0:	250a      	movs	r5, #10
 80215d2:	e011      	b.n	80215f8 <_puts_r+0x88>
 80215d4:	4b1b      	ldr	r3, [pc, #108]	; (8021644 <_puts_r+0xd4>)
 80215d6:	429c      	cmp	r4, r3
 80215d8:	d101      	bne.n	80215de <_puts_r+0x6e>
 80215da:	68ac      	ldr	r4, [r5, #8]
 80215dc:	e7da      	b.n	8021594 <_puts_r+0x24>
 80215de:	4b1a      	ldr	r3, [pc, #104]	; (8021648 <_puts_r+0xd8>)
 80215e0:	429c      	cmp	r4, r3
 80215e2:	bf08      	it	eq
 80215e4:	68ec      	ldreq	r4, [r5, #12]
 80215e6:	e7d5      	b.n	8021594 <_puts_r+0x24>
 80215e8:	4621      	mov	r1, r4
 80215ea:	4628      	mov	r0, r5
 80215ec:	f000 f888 	bl	8021700 <__swsetup_r>
 80215f0:	2800      	cmp	r0, #0
 80215f2:	d0dd      	beq.n	80215b0 <_puts_r+0x40>
 80215f4:	f04f 35ff 	mov.w	r5, #4294967295
 80215f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80215fa:	07da      	lsls	r2, r3, #31
 80215fc:	d405      	bmi.n	802160a <_puts_r+0x9a>
 80215fe:	89a3      	ldrh	r3, [r4, #12]
 8021600:	059b      	lsls	r3, r3, #22
 8021602:	d402      	bmi.n	802160a <_puts_r+0x9a>
 8021604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021606:	f001 f923 	bl	8022850 <__retarget_lock_release_recursive>
 802160a:	4628      	mov	r0, r5
 802160c:	bd70      	pop	{r4, r5, r6, pc}
 802160e:	2b00      	cmp	r3, #0
 8021610:	da04      	bge.n	802161c <_puts_r+0xac>
 8021612:	69a2      	ldr	r2, [r4, #24]
 8021614:	429a      	cmp	r2, r3
 8021616:	dc06      	bgt.n	8021626 <_puts_r+0xb6>
 8021618:	290a      	cmp	r1, #10
 802161a:	d004      	beq.n	8021626 <_puts_r+0xb6>
 802161c:	6823      	ldr	r3, [r4, #0]
 802161e:	1c5a      	adds	r2, r3, #1
 8021620:	6022      	str	r2, [r4, #0]
 8021622:	7019      	strb	r1, [r3, #0]
 8021624:	e7c5      	b.n	80215b2 <_puts_r+0x42>
 8021626:	4622      	mov	r2, r4
 8021628:	4628      	mov	r0, r5
 802162a:	f000 f817 	bl	802165c <__swbuf_r>
 802162e:	3001      	adds	r0, #1
 8021630:	d1bf      	bne.n	80215b2 <_puts_r+0x42>
 8021632:	e7df      	b.n	80215f4 <_puts_r+0x84>
 8021634:	6823      	ldr	r3, [r4, #0]
 8021636:	250a      	movs	r5, #10
 8021638:	1c5a      	adds	r2, r3, #1
 802163a:	6022      	str	r2, [r4, #0]
 802163c:	701d      	strb	r5, [r3, #0]
 802163e:	e7db      	b.n	80215f8 <_puts_r+0x88>
 8021640:	080252cc 	.word	0x080252cc
 8021644:	080252ec 	.word	0x080252ec
 8021648:	080252ac 	.word	0x080252ac

0802164c <puts>:
 802164c:	4b02      	ldr	r3, [pc, #8]	; (8021658 <puts+0xc>)
 802164e:	4601      	mov	r1, r0
 8021650:	6818      	ldr	r0, [r3, #0]
 8021652:	f7ff bf8d 	b.w	8021570 <_puts_r>
 8021656:	bf00      	nop
 8021658:	2000002c 	.word	0x2000002c

0802165c <__swbuf_r>:
 802165c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802165e:	460e      	mov	r6, r1
 8021660:	4614      	mov	r4, r2
 8021662:	4605      	mov	r5, r0
 8021664:	b118      	cbz	r0, 802166e <__swbuf_r+0x12>
 8021666:	6983      	ldr	r3, [r0, #24]
 8021668:	b90b      	cbnz	r3, 802166e <__swbuf_r+0x12>
 802166a:	f001 f84d 	bl	8022708 <__sinit>
 802166e:	4b21      	ldr	r3, [pc, #132]	; (80216f4 <__swbuf_r+0x98>)
 8021670:	429c      	cmp	r4, r3
 8021672:	d12b      	bne.n	80216cc <__swbuf_r+0x70>
 8021674:	686c      	ldr	r4, [r5, #4]
 8021676:	69a3      	ldr	r3, [r4, #24]
 8021678:	60a3      	str	r3, [r4, #8]
 802167a:	89a3      	ldrh	r3, [r4, #12]
 802167c:	071a      	lsls	r2, r3, #28
 802167e:	d52f      	bpl.n	80216e0 <__swbuf_r+0x84>
 8021680:	6923      	ldr	r3, [r4, #16]
 8021682:	b36b      	cbz	r3, 80216e0 <__swbuf_r+0x84>
 8021684:	6923      	ldr	r3, [r4, #16]
 8021686:	6820      	ldr	r0, [r4, #0]
 8021688:	1ac0      	subs	r0, r0, r3
 802168a:	6963      	ldr	r3, [r4, #20]
 802168c:	b2f6      	uxtb	r6, r6
 802168e:	4283      	cmp	r3, r0
 8021690:	4637      	mov	r7, r6
 8021692:	dc04      	bgt.n	802169e <__swbuf_r+0x42>
 8021694:	4621      	mov	r1, r4
 8021696:	4628      	mov	r0, r5
 8021698:	f000 ffa2 	bl	80225e0 <_fflush_r>
 802169c:	bb30      	cbnz	r0, 80216ec <__swbuf_r+0x90>
 802169e:	68a3      	ldr	r3, [r4, #8]
 80216a0:	3b01      	subs	r3, #1
 80216a2:	60a3      	str	r3, [r4, #8]
 80216a4:	6823      	ldr	r3, [r4, #0]
 80216a6:	1c5a      	adds	r2, r3, #1
 80216a8:	6022      	str	r2, [r4, #0]
 80216aa:	701e      	strb	r6, [r3, #0]
 80216ac:	6963      	ldr	r3, [r4, #20]
 80216ae:	3001      	adds	r0, #1
 80216b0:	4283      	cmp	r3, r0
 80216b2:	d004      	beq.n	80216be <__swbuf_r+0x62>
 80216b4:	89a3      	ldrh	r3, [r4, #12]
 80216b6:	07db      	lsls	r3, r3, #31
 80216b8:	d506      	bpl.n	80216c8 <__swbuf_r+0x6c>
 80216ba:	2e0a      	cmp	r6, #10
 80216bc:	d104      	bne.n	80216c8 <__swbuf_r+0x6c>
 80216be:	4621      	mov	r1, r4
 80216c0:	4628      	mov	r0, r5
 80216c2:	f000 ff8d 	bl	80225e0 <_fflush_r>
 80216c6:	b988      	cbnz	r0, 80216ec <__swbuf_r+0x90>
 80216c8:	4638      	mov	r0, r7
 80216ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80216cc:	4b0a      	ldr	r3, [pc, #40]	; (80216f8 <__swbuf_r+0x9c>)
 80216ce:	429c      	cmp	r4, r3
 80216d0:	d101      	bne.n	80216d6 <__swbuf_r+0x7a>
 80216d2:	68ac      	ldr	r4, [r5, #8]
 80216d4:	e7cf      	b.n	8021676 <__swbuf_r+0x1a>
 80216d6:	4b09      	ldr	r3, [pc, #36]	; (80216fc <__swbuf_r+0xa0>)
 80216d8:	429c      	cmp	r4, r3
 80216da:	bf08      	it	eq
 80216dc:	68ec      	ldreq	r4, [r5, #12]
 80216de:	e7ca      	b.n	8021676 <__swbuf_r+0x1a>
 80216e0:	4621      	mov	r1, r4
 80216e2:	4628      	mov	r0, r5
 80216e4:	f000 f80c 	bl	8021700 <__swsetup_r>
 80216e8:	2800      	cmp	r0, #0
 80216ea:	d0cb      	beq.n	8021684 <__swbuf_r+0x28>
 80216ec:	f04f 37ff 	mov.w	r7, #4294967295
 80216f0:	e7ea      	b.n	80216c8 <__swbuf_r+0x6c>
 80216f2:	bf00      	nop
 80216f4:	080252cc 	.word	0x080252cc
 80216f8:	080252ec 	.word	0x080252ec
 80216fc:	080252ac 	.word	0x080252ac

08021700 <__swsetup_r>:
 8021700:	4b32      	ldr	r3, [pc, #200]	; (80217cc <__swsetup_r+0xcc>)
 8021702:	b570      	push	{r4, r5, r6, lr}
 8021704:	681d      	ldr	r5, [r3, #0]
 8021706:	4606      	mov	r6, r0
 8021708:	460c      	mov	r4, r1
 802170a:	b125      	cbz	r5, 8021716 <__swsetup_r+0x16>
 802170c:	69ab      	ldr	r3, [r5, #24]
 802170e:	b913      	cbnz	r3, 8021716 <__swsetup_r+0x16>
 8021710:	4628      	mov	r0, r5
 8021712:	f000 fff9 	bl	8022708 <__sinit>
 8021716:	4b2e      	ldr	r3, [pc, #184]	; (80217d0 <__swsetup_r+0xd0>)
 8021718:	429c      	cmp	r4, r3
 802171a:	d10f      	bne.n	802173c <__swsetup_r+0x3c>
 802171c:	686c      	ldr	r4, [r5, #4]
 802171e:	89a3      	ldrh	r3, [r4, #12]
 8021720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021724:	0719      	lsls	r1, r3, #28
 8021726:	d42c      	bmi.n	8021782 <__swsetup_r+0x82>
 8021728:	06dd      	lsls	r5, r3, #27
 802172a:	d411      	bmi.n	8021750 <__swsetup_r+0x50>
 802172c:	2309      	movs	r3, #9
 802172e:	6033      	str	r3, [r6, #0]
 8021730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8021734:	81a3      	strh	r3, [r4, #12]
 8021736:	f04f 30ff 	mov.w	r0, #4294967295
 802173a:	e03e      	b.n	80217ba <__swsetup_r+0xba>
 802173c:	4b25      	ldr	r3, [pc, #148]	; (80217d4 <__swsetup_r+0xd4>)
 802173e:	429c      	cmp	r4, r3
 8021740:	d101      	bne.n	8021746 <__swsetup_r+0x46>
 8021742:	68ac      	ldr	r4, [r5, #8]
 8021744:	e7eb      	b.n	802171e <__swsetup_r+0x1e>
 8021746:	4b24      	ldr	r3, [pc, #144]	; (80217d8 <__swsetup_r+0xd8>)
 8021748:	429c      	cmp	r4, r3
 802174a:	bf08      	it	eq
 802174c:	68ec      	ldreq	r4, [r5, #12]
 802174e:	e7e6      	b.n	802171e <__swsetup_r+0x1e>
 8021750:	0758      	lsls	r0, r3, #29
 8021752:	d512      	bpl.n	802177a <__swsetup_r+0x7a>
 8021754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021756:	b141      	cbz	r1, 802176a <__swsetup_r+0x6a>
 8021758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802175c:	4299      	cmp	r1, r3
 802175e:	d002      	beq.n	8021766 <__swsetup_r+0x66>
 8021760:	4630      	mov	r0, r6
 8021762:	f001 fc7d 	bl	8023060 <_free_r>
 8021766:	2300      	movs	r3, #0
 8021768:	6363      	str	r3, [r4, #52]	; 0x34
 802176a:	89a3      	ldrh	r3, [r4, #12]
 802176c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021770:	81a3      	strh	r3, [r4, #12]
 8021772:	2300      	movs	r3, #0
 8021774:	6063      	str	r3, [r4, #4]
 8021776:	6923      	ldr	r3, [r4, #16]
 8021778:	6023      	str	r3, [r4, #0]
 802177a:	89a3      	ldrh	r3, [r4, #12]
 802177c:	f043 0308 	orr.w	r3, r3, #8
 8021780:	81a3      	strh	r3, [r4, #12]
 8021782:	6923      	ldr	r3, [r4, #16]
 8021784:	b94b      	cbnz	r3, 802179a <__swsetup_r+0x9a>
 8021786:	89a3      	ldrh	r3, [r4, #12]
 8021788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802178c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021790:	d003      	beq.n	802179a <__swsetup_r+0x9a>
 8021792:	4621      	mov	r1, r4
 8021794:	4630      	mov	r0, r6
 8021796:	f001 f881 	bl	802289c <__smakebuf_r>
 802179a:	89a0      	ldrh	r0, [r4, #12]
 802179c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80217a0:	f010 0301 	ands.w	r3, r0, #1
 80217a4:	d00a      	beq.n	80217bc <__swsetup_r+0xbc>
 80217a6:	2300      	movs	r3, #0
 80217a8:	60a3      	str	r3, [r4, #8]
 80217aa:	6963      	ldr	r3, [r4, #20]
 80217ac:	425b      	negs	r3, r3
 80217ae:	61a3      	str	r3, [r4, #24]
 80217b0:	6923      	ldr	r3, [r4, #16]
 80217b2:	b943      	cbnz	r3, 80217c6 <__swsetup_r+0xc6>
 80217b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80217b8:	d1ba      	bne.n	8021730 <__swsetup_r+0x30>
 80217ba:	bd70      	pop	{r4, r5, r6, pc}
 80217bc:	0781      	lsls	r1, r0, #30
 80217be:	bf58      	it	pl
 80217c0:	6963      	ldrpl	r3, [r4, #20]
 80217c2:	60a3      	str	r3, [r4, #8]
 80217c4:	e7f4      	b.n	80217b0 <__swsetup_r+0xb0>
 80217c6:	2000      	movs	r0, #0
 80217c8:	e7f7      	b.n	80217ba <__swsetup_r+0xba>
 80217ca:	bf00      	nop
 80217cc:	2000002c 	.word	0x2000002c
 80217d0:	080252cc 	.word	0x080252cc
 80217d4:	080252ec 	.word	0x080252ec
 80217d8:	080252ac 	.word	0x080252ac

080217dc <quorem>:
 80217dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80217e0:	6903      	ldr	r3, [r0, #16]
 80217e2:	690c      	ldr	r4, [r1, #16]
 80217e4:	42a3      	cmp	r3, r4
 80217e6:	4607      	mov	r7, r0
 80217e8:	f2c0 8081 	blt.w	80218ee <quorem+0x112>
 80217ec:	3c01      	subs	r4, #1
 80217ee:	f101 0814 	add.w	r8, r1, #20
 80217f2:	f100 0514 	add.w	r5, r0, #20
 80217f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80217fa:	9301      	str	r3, [sp, #4]
 80217fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8021800:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8021804:	3301      	adds	r3, #1
 8021806:	429a      	cmp	r2, r3
 8021808:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802180c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8021810:	fbb2 f6f3 	udiv	r6, r2, r3
 8021814:	d331      	bcc.n	802187a <quorem+0x9e>
 8021816:	f04f 0e00 	mov.w	lr, #0
 802181a:	4640      	mov	r0, r8
 802181c:	46ac      	mov	ip, r5
 802181e:	46f2      	mov	sl, lr
 8021820:	f850 2b04 	ldr.w	r2, [r0], #4
 8021824:	b293      	uxth	r3, r2
 8021826:	fb06 e303 	mla	r3, r6, r3, lr
 802182a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802182e:	b29b      	uxth	r3, r3
 8021830:	ebaa 0303 	sub.w	r3, sl, r3
 8021834:	f8dc a000 	ldr.w	sl, [ip]
 8021838:	0c12      	lsrs	r2, r2, #16
 802183a:	fa13 f38a 	uxtah	r3, r3, sl
 802183e:	fb06 e202 	mla	r2, r6, r2, lr
 8021842:	9300      	str	r3, [sp, #0]
 8021844:	9b00      	ldr	r3, [sp, #0]
 8021846:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 802184a:	b292      	uxth	r2, r2
 802184c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8021850:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8021854:	f8bd 3000 	ldrh.w	r3, [sp]
 8021858:	4581      	cmp	r9, r0
 802185a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802185e:	f84c 3b04 	str.w	r3, [ip], #4
 8021862:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8021866:	d2db      	bcs.n	8021820 <quorem+0x44>
 8021868:	f855 300b 	ldr.w	r3, [r5, fp]
 802186c:	b92b      	cbnz	r3, 802187a <quorem+0x9e>
 802186e:	9b01      	ldr	r3, [sp, #4]
 8021870:	3b04      	subs	r3, #4
 8021872:	429d      	cmp	r5, r3
 8021874:	461a      	mov	r2, r3
 8021876:	d32e      	bcc.n	80218d6 <quorem+0xfa>
 8021878:	613c      	str	r4, [r7, #16]
 802187a:	4638      	mov	r0, r7
 802187c:	f001 fad8 	bl	8022e30 <__mcmp>
 8021880:	2800      	cmp	r0, #0
 8021882:	db24      	blt.n	80218ce <quorem+0xf2>
 8021884:	3601      	adds	r6, #1
 8021886:	4628      	mov	r0, r5
 8021888:	f04f 0c00 	mov.w	ip, #0
 802188c:	f858 2b04 	ldr.w	r2, [r8], #4
 8021890:	f8d0 e000 	ldr.w	lr, [r0]
 8021894:	b293      	uxth	r3, r2
 8021896:	ebac 0303 	sub.w	r3, ip, r3
 802189a:	0c12      	lsrs	r2, r2, #16
 802189c:	fa13 f38e 	uxtah	r3, r3, lr
 80218a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80218a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80218a8:	b29b      	uxth	r3, r3
 80218aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80218ae:	45c1      	cmp	r9, r8
 80218b0:	f840 3b04 	str.w	r3, [r0], #4
 80218b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80218b8:	d2e8      	bcs.n	802188c <quorem+0xb0>
 80218ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80218be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80218c2:	b922      	cbnz	r2, 80218ce <quorem+0xf2>
 80218c4:	3b04      	subs	r3, #4
 80218c6:	429d      	cmp	r5, r3
 80218c8:	461a      	mov	r2, r3
 80218ca:	d30a      	bcc.n	80218e2 <quorem+0x106>
 80218cc:	613c      	str	r4, [r7, #16]
 80218ce:	4630      	mov	r0, r6
 80218d0:	b003      	add	sp, #12
 80218d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218d6:	6812      	ldr	r2, [r2, #0]
 80218d8:	3b04      	subs	r3, #4
 80218da:	2a00      	cmp	r2, #0
 80218dc:	d1cc      	bne.n	8021878 <quorem+0x9c>
 80218de:	3c01      	subs	r4, #1
 80218e0:	e7c7      	b.n	8021872 <quorem+0x96>
 80218e2:	6812      	ldr	r2, [r2, #0]
 80218e4:	3b04      	subs	r3, #4
 80218e6:	2a00      	cmp	r2, #0
 80218e8:	d1f0      	bne.n	80218cc <quorem+0xf0>
 80218ea:	3c01      	subs	r4, #1
 80218ec:	e7eb      	b.n	80218c6 <quorem+0xea>
 80218ee:	2000      	movs	r0, #0
 80218f0:	e7ee      	b.n	80218d0 <quorem+0xf4>
 80218f2:	0000      	movs	r0, r0
 80218f4:	0000      	movs	r0, r0
	...

080218f8 <_dtoa_r>:
 80218f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80218fc:	ed2d 8b04 	vpush	{d8-d9}
 8021900:	ec57 6b10 	vmov	r6, r7, d0
 8021904:	b093      	sub	sp, #76	; 0x4c
 8021906:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8021908:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 802190c:	9106      	str	r1, [sp, #24]
 802190e:	ee10 aa10 	vmov	sl, s0
 8021912:	4604      	mov	r4, r0
 8021914:	9209      	str	r2, [sp, #36]	; 0x24
 8021916:	930c      	str	r3, [sp, #48]	; 0x30
 8021918:	46bb      	mov	fp, r7
 802191a:	b975      	cbnz	r5, 802193a <_dtoa_r+0x42>
 802191c:	2010      	movs	r0, #16
 802191e:	f000 fffd 	bl	802291c <malloc>
 8021922:	4602      	mov	r2, r0
 8021924:	6260      	str	r0, [r4, #36]	; 0x24
 8021926:	b920      	cbnz	r0, 8021932 <_dtoa_r+0x3a>
 8021928:	4ba7      	ldr	r3, [pc, #668]	; (8021bc8 <_dtoa_r+0x2d0>)
 802192a:	21ea      	movs	r1, #234	; 0xea
 802192c:	48a7      	ldr	r0, [pc, #668]	; (8021bcc <_dtoa_r+0x2d4>)
 802192e:	f001 fe7f 	bl	8023630 <__assert_func>
 8021932:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8021936:	6005      	str	r5, [r0, #0]
 8021938:	60c5      	str	r5, [r0, #12]
 802193a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802193c:	6819      	ldr	r1, [r3, #0]
 802193e:	b151      	cbz	r1, 8021956 <_dtoa_r+0x5e>
 8021940:	685a      	ldr	r2, [r3, #4]
 8021942:	604a      	str	r2, [r1, #4]
 8021944:	2301      	movs	r3, #1
 8021946:	4093      	lsls	r3, r2
 8021948:	608b      	str	r3, [r1, #8]
 802194a:	4620      	mov	r0, r4
 802194c:	f001 f82e 	bl	80229ac <_Bfree>
 8021950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021952:	2200      	movs	r2, #0
 8021954:	601a      	str	r2, [r3, #0]
 8021956:	1e3b      	subs	r3, r7, #0
 8021958:	bfaa      	itet	ge
 802195a:	2300      	movge	r3, #0
 802195c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8021960:	f8c8 3000 	strge.w	r3, [r8]
 8021964:	4b9a      	ldr	r3, [pc, #616]	; (8021bd0 <_dtoa_r+0x2d8>)
 8021966:	bfbc      	itt	lt
 8021968:	2201      	movlt	r2, #1
 802196a:	f8c8 2000 	strlt.w	r2, [r8]
 802196e:	ea33 030b 	bics.w	r3, r3, fp
 8021972:	d11b      	bne.n	80219ac <_dtoa_r+0xb4>
 8021974:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021976:	f242 730f 	movw	r3, #9999	; 0x270f
 802197a:	6013      	str	r3, [r2, #0]
 802197c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8021980:	4333      	orrs	r3, r6
 8021982:	f000 8592 	beq.w	80224aa <_dtoa_r+0xbb2>
 8021986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021988:	b963      	cbnz	r3, 80219a4 <_dtoa_r+0xac>
 802198a:	4b92      	ldr	r3, [pc, #584]	; (8021bd4 <_dtoa_r+0x2dc>)
 802198c:	e022      	b.n	80219d4 <_dtoa_r+0xdc>
 802198e:	4b92      	ldr	r3, [pc, #584]	; (8021bd8 <_dtoa_r+0x2e0>)
 8021990:	9301      	str	r3, [sp, #4]
 8021992:	3308      	adds	r3, #8
 8021994:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8021996:	6013      	str	r3, [r2, #0]
 8021998:	9801      	ldr	r0, [sp, #4]
 802199a:	b013      	add	sp, #76	; 0x4c
 802199c:	ecbd 8b04 	vpop	{d8-d9}
 80219a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219a4:	4b8b      	ldr	r3, [pc, #556]	; (8021bd4 <_dtoa_r+0x2dc>)
 80219a6:	9301      	str	r3, [sp, #4]
 80219a8:	3303      	adds	r3, #3
 80219aa:	e7f3      	b.n	8021994 <_dtoa_r+0x9c>
 80219ac:	2200      	movs	r2, #0
 80219ae:	2300      	movs	r3, #0
 80219b0:	4650      	mov	r0, sl
 80219b2:	4659      	mov	r1, fp
 80219b4:	f7df f8b0 	bl	8000b18 <__aeabi_dcmpeq>
 80219b8:	ec4b ab19 	vmov	d9, sl, fp
 80219bc:	4680      	mov	r8, r0
 80219be:	b158      	cbz	r0, 80219d8 <_dtoa_r+0xe0>
 80219c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80219c2:	2301      	movs	r3, #1
 80219c4:	6013      	str	r3, [r2, #0]
 80219c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80219c8:	2b00      	cmp	r3, #0
 80219ca:	f000 856b 	beq.w	80224a4 <_dtoa_r+0xbac>
 80219ce:	4883      	ldr	r0, [pc, #524]	; (8021bdc <_dtoa_r+0x2e4>)
 80219d0:	6018      	str	r0, [r3, #0]
 80219d2:	1e43      	subs	r3, r0, #1
 80219d4:	9301      	str	r3, [sp, #4]
 80219d6:	e7df      	b.n	8021998 <_dtoa_r+0xa0>
 80219d8:	ec4b ab10 	vmov	d0, sl, fp
 80219dc:	aa10      	add	r2, sp, #64	; 0x40
 80219de:	a911      	add	r1, sp, #68	; 0x44
 80219e0:	4620      	mov	r0, r4
 80219e2:	f001 facb 	bl	8022f7c <__d2b>
 80219e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80219ea:	ee08 0a10 	vmov	s16, r0
 80219ee:	2d00      	cmp	r5, #0
 80219f0:	f000 8084 	beq.w	8021afc <_dtoa_r+0x204>
 80219f4:	ee19 3a90 	vmov	r3, s19
 80219f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80219fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8021a00:	4656      	mov	r6, sl
 8021a02:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8021a06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8021a0a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8021a0e:	4b74      	ldr	r3, [pc, #464]	; (8021be0 <_dtoa_r+0x2e8>)
 8021a10:	2200      	movs	r2, #0
 8021a12:	4630      	mov	r0, r6
 8021a14:	4639      	mov	r1, r7
 8021a16:	f7de fc5f 	bl	80002d8 <__aeabi_dsub>
 8021a1a:	a365      	add	r3, pc, #404	; (adr r3, 8021bb0 <_dtoa_r+0x2b8>)
 8021a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a20:	f7de fe12 	bl	8000648 <__aeabi_dmul>
 8021a24:	a364      	add	r3, pc, #400	; (adr r3, 8021bb8 <_dtoa_r+0x2c0>)
 8021a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a2a:	f7de fc57 	bl	80002dc <__adddf3>
 8021a2e:	4606      	mov	r6, r0
 8021a30:	4628      	mov	r0, r5
 8021a32:	460f      	mov	r7, r1
 8021a34:	f7de fd9e 	bl	8000574 <__aeabi_i2d>
 8021a38:	a361      	add	r3, pc, #388	; (adr r3, 8021bc0 <_dtoa_r+0x2c8>)
 8021a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a3e:	f7de fe03 	bl	8000648 <__aeabi_dmul>
 8021a42:	4602      	mov	r2, r0
 8021a44:	460b      	mov	r3, r1
 8021a46:	4630      	mov	r0, r6
 8021a48:	4639      	mov	r1, r7
 8021a4a:	f7de fc47 	bl	80002dc <__adddf3>
 8021a4e:	4606      	mov	r6, r0
 8021a50:	460f      	mov	r7, r1
 8021a52:	f7df f8a9 	bl	8000ba8 <__aeabi_d2iz>
 8021a56:	2200      	movs	r2, #0
 8021a58:	9000      	str	r0, [sp, #0]
 8021a5a:	2300      	movs	r3, #0
 8021a5c:	4630      	mov	r0, r6
 8021a5e:	4639      	mov	r1, r7
 8021a60:	f7df f864 	bl	8000b2c <__aeabi_dcmplt>
 8021a64:	b150      	cbz	r0, 8021a7c <_dtoa_r+0x184>
 8021a66:	9800      	ldr	r0, [sp, #0]
 8021a68:	f7de fd84 	bl	8000574 <__aeabi_i2d>
 8021a6c:	4632      	mov	r2, r6
 8021a6e:	463b      	mov	r3, r7
 8021a70:	f7df f852 	bl	8000b18 <__aeabi_dcmpeq>
 8021a74:	b910      	cbnz	r0, 8021a7c <_dtoa_r+0x184>
 8021a76:	9b00      	ldr	r3, [sp, #0]
 8021a78:	3b01      	subs	r3, #1
 8021a7a:	9300      	str	r3, [sp, #0]
 8021a7c:	9b00      	ldr	r3, [sp, #0]
 8021a7e:	2b16      	cmp	r3, #22
 8021a80:	d85a      	bhi.n	8021b38 <_dtoa_r+0x240>
 8021a82:	9a00      	ldr	r2, [sp, #0]
 8021a84:	4b57      	ldr	r3, [pc, #348]	; (8021be4 <_dtoa_r+0x2ec>)
 8021a86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021a8e:	ec51 0b19 	vmov	r0, r1, d9
 8021a92:	f7df f84b 	bl	8000b2c <__aeabi_dcmplt>
 8021a96:	2800      	cmp	r0, #0
 8021a98:	d050      	beq.n	8021b3c <_dtoa_r+0x244>
 8021a9a:	9b00      	ldr	r3, [sp, #0]
 8021a9c:	3b01      	subs	r3, #1
 8021a9e:	9300      	str	r3, [sp, #0]
 8021aa0:	2300      	movs	r3, #0
 8021aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8021aa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021aa6:	1b5d      	subs	r5, r3, r5
 8021aa8:	1e6b      	subs	r3, r5, #1
 8021aaa:	9305      	str	r3, [sp, #20]
 8021aac:	bf45      	ittet	mi
 8021aae:	f1c5 0301 	rsbmi	r3, r5, #1
 8021ab2:	9304      	strmi	r3, [sp, #16]
 8021ab4:	2300      	movpl	r3, #0
 8021ab6:	2300      	movmi	r3, #0
 8021ab8:	bf4c      	ite	mi
 8021aba:	9305      	strmi	r3, [sp, #20]
 8021abc:	9304      	strpl	r3, [sp, #16]
 8021abe:	9b00      	ldr	r3, [sp, #0]
 8021ac0:	2b00      	cmp	r3, #0
 8021ac2:	db3d      	blt.n	8021b40 <_dtoa_r+0x248>
 8021ac4:	9b05      	ldr	r3, [sp, #20]
 8021ac6:	9a00      	ldr	r2, [sp, #0]
 8021ac8:	920a      	str	r2, [sp, #40]	; 0x28
 8021aca:	4413      	add	r3, r2
 8021acc:	9305      	str	r3, [sp, #20]
 8021ace:	2300      	movs	r3, #0
 8021ad0:	9307      	str	r3, [sp, #28]
 8021ad2:	9b06      	ldr	r3, [sp, #24]
 8021ad4:	2b09      	cmp	r3, #9
 8021ad6:	f200 8089 	bhi.w	8021bec <_dtoa_r+0x2f4>
 8021ada:	2b05      	cmp	r3, #5
 8021adc:	bfc4      	itt	gt
 8021ade:	3b04      	subgt	r3, #4
 8021ae0:	9306      	strgt	r3, [sp, #24]
 8021ae2:	9b06      	ldr	r3, [sp, #24]
 8021ae4:	f1a3 0302 	sub.w	r3, r3, #2
 8021ae8:	bfcc      	ite	gt
 8021aea:	2500      	movgt	r5, #0
 8021aec:	2501      	movle	r5, #1
 8021aee:	2b03      	cmp	r3, #3
 8021af0:	f200 8087 	bhi.w	8021c02 <_dtoa_r+0x30a>
 8021af4:	e8df f003 	tbb	[pc, r3]
 8021af8:	59383a2d 	.word	0x59383a2d
 8021afc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8021b00:	441d      	add	r5, r3
 8021b02:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021b06:	2b20      	cmp	r3, #32
 8021b08:	bfc1      	itttt	gt
 8021b0a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8021b0e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021b12:	fa0b f303 	lslgt.w	r3, fp, r3
 8021b16:	fa26 f000 	lsrgt.w	r0, r6, r0
 8021b1a:	bfda      	itte	le
 8021b1c:	f1c3 0320 	rsble	r3, r3, #32
 8021b20:	fa06 f003 	lslle.w	r0, r6, r3
 8021b24:	4318      	orrgt	r0, r3
 8021b26:	f7de fd15 	bl	8000554 <__aeabi_ui2d>
 8021b2a:	2301      	movs	r3, #1
 8021b2c:	4606      	mov	r6, r0
 8021b2e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8021b32:	3d01      	subs	r5, #1
 8021b34:	930e      	str	r3, [sp, #56]	; 0x38
 8021b36:	e76a      	b.n	8021a0e <_dtoa_r+0x116>
 8021b38:	2301      	movs	r3, #1
 8021b3a:	e7b2      	b.n	8021aa2 <_dtoa_r+0x1aa>
 8021b3c:	900b      	str	r0, [sp, #44]	; 0x2c
 8021b3e:	e7b1      	b.n	8021aa4 <_dtoa_r+0x1ac>
 8021b40:	9b04      	ldr	r3, [sp, #16]
 8021b42:	9a00      	ldr	r2, [sp, #0]
 8021b44:	1a9b      	subs	r3, r3, r2
 8021b46:	9304      	str	r3, [sp, #16]
 8021b48:	4253      	negs	r3, r2
 8021b4a:	9307      	str	r3, [sp, #28]
 8021b4c:	2300      	movs	r3, #0
 8021b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8021b50:	e7bf      	b.n	8021ad2 <_dtoa_r+0x1da>
 8021b52:	2300      	movs	r3, #0
 8021b54:	9308      	str	r3, [sp, #32]
 8021b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b58:	2b00      	cmp	r3, #0
 8021b5a:	dc55      	bgt.n	8021c08 <_dtoa_r+0x310>
 8021b5c:	2301      	movs	r3, #1
 8021b5e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021b62:	461a      	mov	r2, r3
 8021b64:	9209      	str	r2, [sp, #36]	; 0x24
 8021b66:	e00c      	b.n	8021b82 <_dtoa_r+0x28a>
 8021b68:	2301      	movs	r3, #1
 8021b6a:	e7f3      	b.n	8021b54 <_dtoa_r+0x25c>
 8021b6c:	2300      	movs	r3, #0
 8021b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021b70:	9308      	str	r3, [sp, #32]
 8021b72:	9b00      	ldr	r3, [sp, #0]
 8021b74:	4413      	add	r3, r2
 8021b76:	9302      	str	r3, [sp, #8]
 8021b78:	3301      	adds	r3, #1
 8021b7a:	2b01      	cmp	r3, #1
 8021b7c:	9303      	str	r3, [sp, #12]
 8021b7e:	bfb8      	it	lt
 8021b80:	2301      	movlt	r3, #1
 8021b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8021b84:	2200      	movs	r2, #0
 8021b86:	6042      	str	r2, [r0, #4]
 8021b88:	2204      	movs	r2, #4
 8021b8a:	f102 0614 	add.w	r6, r2, #20
 8021b8e:	429e      	cmp	r6, r3
 8021b90:	6841      	ldr	r1, [r0, #4]
 8021b92:	d93d      	bls.n	8021c10 <_dtoa_r+0x318>
 8021b94:	4620      	mov	r0, r4
 8021b96:	f000 fec9 	bl	802292c <_Balloc>
 8021b9a:	9001      	str	r0, [sp, #4]
 8021b9c:	2800      	cmp	r0, #0
 8021b9e:	d13b      	bne.n	8021c18 <_dtoa_r+0x320>
 8021ba0:	4b11      	ldr	r3, [pc, #68]	; (8021be8 <_dtoa_r+0x2f0>)
 8021ba2:	4602      	mov	r2, r0
 8021ba4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021ba8:	e6c0      	b.n	802192c <_dtoa_r+0x34>
 8021baa:	2301      	movs	r3, #1
 8021bac:	e7df      	b.n	8021b6e <_dtoa_r+0x276>
 8021bae:	bf00      	nop
 8021bb0:	636f4361 	.word	0x636f4361
 8021bb4:	3fd287a7 	.word	0x3fd287a7
 8021bb8:	8b60c8b3 	.word	0x8b60c8b3
 8021bbc:	3fc68a28 	.word	0x3fc68a28
 8021bc0:	509f79fb 	.word	0x509f79fb
 8021bc4:	3fd34413 	.word	0x3fd34413
 8021bc8:	08025229 	.word	0x08025229
 8021bcc:	08025240 	.word	0x08025240
 8021bd0:	7ff00000 	.word	0x7ff00000
 8021bd4:	08025225 	.word	0x08025225
 8021bd8:	0802521c 	.word	0x0802521c
 8021bdc:	080251f9 	.word	0x080251f9
 8021be0:	3ff80000 	.word	0x3ff80000
 8021be4:	08025390 	.word	0x08025390
 8021be8:	0802529b 	.word	0x0802529b
 8021bec:	2501      	movs	r5, #1
 8021bee:	2300      	movs	r3, #0
 8021bf0:	9306      	str	r3, [sp, #24]
 8021bf2:	9508      	str	r5, [sp, #32]
 8021bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8021bf8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021bfc:	2200      	movs	r2, #0
 8021bfe:	2312      	movs	r3, #18
 8021c00:	e7b0      	b.n	8021b64 <_dtoa_r+0x26c>
 8021c02:	2301      	movs	r3, #1
 8021c04:	9308      	str	r3, [sp, #32]
 8021c06:	e7f5      	b.n	8021bf4 <_dtoa_r+0x2fc>
 8021c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021c0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8021c0e:	e7b8      	b.n	8021b82 <_dtoa_r+0x28a>
 8021c10:	3101      	adds	r1, #1
 8021c12:	6041      	str	r1, [r0, #4]
 8021c14:	0052      	lsls	r2, r2, #1
 8021c16:	e7b8      	b.n	8021b8a <_dtoa_r+0x292>
 8021c18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021c1a:	9a01      	ldr	r2, [sp, #4]
 8021c1c:	601a      	str	r2, [r3, #0]
 8021c1e:	9b03      	ldr	r3, [sp, #12]
 8021c20:	2b0e      	cmp	r3, #14
 8021c22:	f200 809d 	bhi.w	8021d60 <_dtoa_r+0x468>
 8021c26:	2d00      	cmp	r5, #0
 8021c28:	f000 809a 	beq.w	8021d60 <_dtoa_r+0x468>
 8021c2c:	9b00      	ldr	r3, [sp, #0]
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	dd32      	ble.n	8021c98 <_dtoa_r+0x3a0>
 8021c32:	4ab7      	ldr	r2, [pc, #732]	; (8021f10 <_dtoa_r+0x618>)
 8021c34:	f003 030f 	and.w	r3, r3, #15
 8021c38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021c40:	9b00      	ldr	r3, [sp, #0]
 8021c42:	05d8      	lsls	r0, r3, #23
 8021c44:	ea4f 1723 	mov.w	r7, r3, asr #4
 8021c48:	d516      	bpl.n	8021c78 <_dtoa_r+0x380>
 8021c4a:	4bb2      	ldr	r3, [pc, #712]	; (8021f14 <_dtoa_r+0x61c>)
 8021c4c:	ec51 0b19 	vmov	r0, r1, d9
 8021c50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8021c54:	f7de fe22 	bl	800089c <__aeabi_ddiv>
 8021c58:	f007 070f 	and.w	r7, r7, #15
 8021c5c:	4682      	mov	sl, r0
 8021c5e:	468b      	mov	fp, r1
 8021c60:	2503      	movs	r5, #3
 8021c62:	4eac      	ldr	r6, [pc, #688]	; (8021f14 <_dtoa_r+0x61c>)
 8021c64:	b957      	cbnz	r7, 8021c7c <_dtoa_r+0x384>
 8021c66:	4642      	mov	r2, r8
 8021c68:	464b      	mov	r3, r9
 8021c6a:	4650      	mov	r0, sl
 8021c6c:	4659      	mov	r1, fp
 8021c6e:	f7de fe15 	bl	800089c <__aeabi_ddiv>
 8021c72:	4682      	mov	sl, r0
 8021c74:	468b      	mov	fp, r1
 8021c76:	e028      	b.n	8021cca <_dtoa_r+0x3d2>
 8021c78:	2502      	movs	r5, #2
 8021c7a:	e7f2      	b.n	8021c62 <_dtoa_r+0x36a>
 8021c7c:	07f9      	lsls	r1, r7, #31
 8021c7e:	d508      	bpl.n	8021c92 <_dtoa_r+0x39a>
 8021c80:	4640      	mov	r0, r8
 8021c82:	4649      	mov	r1, r9
 8021c84:	e9d6 2300 	ldrd	r2, r3, [r6]
 8021c88:	f7de fcde 	bl	8000648 <__aeabi_dmul>
 8021c8c:	3501      	adds	r5, #1
 8021c8e:	4680      	mov	r8, r0
 8021c90:	4689      	mov	r9, r1
 8021c92:	107f      	asrs	r7, r7, #1
 8021c94:	3608      	adds	r6, #8
 8021c96:	e7e5      	b.n	8021c64 <_dtoa_r+0x36c>
 8021c98:	f000 809b 	beq.w	8021dd2 <_dtoa_r+0x4da>
 8021c9c:	9b00      	ldr	r3, [sp, #0]
 8021c9e:	4f9d      	ldr	r7, [pc, #628]	; (8021f14 <_dtoa_r+0x61c>)
 8021ca0:	425e      	negs	r6, r3
 8021ca2:	4b9b      	ldr	r3, [pc, #620]	; (8021f10 <_dtoa_r+0x618>)
 8021ca4:	f006 020f 	and.w	r2, r6, #15
 8021ca8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021cb0:	ec51 0b19 	vmov	r0, r1, d9
 8021cb4:	f7de fcc8 	bl	8000648 <__aeabi_dmul>
 8021cb8:	1136      	asrs	r6, r6, #4
 8021cba:	4682      	mov	sl, r0
 8021cbc:	468b      	mov	fp, r1
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	2502      	movs	r5, #2
 8021cc2:	2e00      	cmp	r6, #0
 8021cc4:	d17a      	bne.n	8021dbc <_dtoa_r+0x4c4>
 8021cc6:	2b00      	cmp	r3, #0
 8021cc8:	d1d3      	bne.n	8021c72 <_dtoa_r+0x37a>
 8021cca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	f000 8082 	beq.w	8021dd6 <_dtoa_r+0x4de>
 8021cd2:	4b91      	ldr	r3, [pc, #580]	; (8021f18 <_dtoa_r+0x620>)
 8021cd4:	2200      	movs	r2, #0
 8021cd6:	4650      	mov	r0, sl
 8021cd8:	4659      	mov	r1, fp
 8021cda:	f7de ff27 	bl	8000b2c <__aeabi_dcmplt>
 8021cde:	2800      	cmp	r0, #0
 8021ce0:	d079      	beq.n	8021dd6 <_dtoa_r+0x4de>
 8021ce2:	9b03      	ldr	r3, [sp, #12]
 8021ce4:	2b00      	cmp	r3, #0
 8021ce6:	d076      	beq.n	8021dd6 <_dtoa_r+0x4de>
 8021ce8:	9b02      	ldr	r3, [sp, #8]
 8021cea:	2b00      	cmp	r3, #0
 8021cec:	dd36      	ble.n	8021d5c <_dtoa_r+0x464>
 8021cee:	9b00      	ldr	r3, [sp, #0]
 8021cf0:	4650      	mov	r0, sl
 8021cf2:	4659      	mov	r1, fp
 8021cf4:	1e5f      	subs	r7, r3, #1
 8021cf6:	2200      	movs	r2, #0
 8021cf8:	4b88      	ldr	r3, [pc, #544]	; (8021f1c <_dtoa_r+0x624>)
 8021cfa:	f7de fca5 	bl	8000648 <__aeabi_dmul>
 8021cfe:	9e02      	ldr	r6, [sp, #8]
 8021d00:	4682      	mov	sl, r0
 8021d02:	468b      	mov	fp, r1
 8021d04:	3501      	adds	r5, #1
 8021d06:	4628      	mov	r0, r5
 8021d08:	f7de fc34 	bl	8000574 <__aeabi_i2d>
 8021d0c:	4652      	mov	r2, sl
 8021d0e:	465b      	mov	r3, fp
 8021d10:	f7de fc9a 	bl	8000648 <__aeabi_dmul>
 8021d14:	4b82      	ldr	r3, [pc, #520]	; (8021f20 <_dtoa_r+0x628>)
 8021d16:	2200      	movs	r2, #0
 8021d18:	f7de fae0 	bl	80002dc <__adddf3>
 8021d1c:	46d0      	mov	r8, sl
 8021d1e:	46d9      	mov	r9, fp
 8021d20:	4682      	mov	sl, r0
 8021d22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8021d26:	2e00      	cmp	r6, #0
 8021d28:	d158      	bne.n	8021ddc <_dtoa_r+0x4e4>
 8021d2a:	4b7e      	ldr	r3, [pc, #504]	; (8021f24 <_dtoa_r+0x62c>)
 8021d2c:	2200      	movs	r2, #0
 8021d2e:	4640      	mov	r0, r8
 8021d30:	4649      	mov	r1, r9
 8021d32:	f7de fad1 	bl	80002d8 <__aeabi_dsub>
 8021d36:	4652      	mov	r2, sl
 8021d38:	465b      	mov	r3, fp
 8021d3a:	4680      	mov	r8, r0
 8021d3c:	4689      	mov	r9, r1
 8021d3e:	f7de ff13 	bl	8000b68 <__aeabi_dcmpgt>
 8021d42:	2800      	cmp	r0, #0
 8021d44:	f040 8295 	bne.w	8022272 <_dtoa_r+0x97a>
 8021d48:	4652      	mov	r2, sl
 8021d4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8021d4e:	4640      	mov	r0, r8
 8021d50:	4649      	mov	r1, r9
 8021d52:	f7de feeb 	bl	8000b2c <__aeabi_dcmplt>
 8021d56:	2800      	cmp	r0, #0
 8021d58:	f040 8289 	bne.w	802226e <_dtoa_r+0x976>
 8021d5c:	ec5b ab19 	vmov	sl, fp, d9
 8021d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	f2c0 8148 	blt.w	8021ff8 <_dtoa_r+0x700>
 8021d68:	9a00      	ldr	r2, [sp, #0]
 8021d6a:	2a0e      	cmp	r2, #14
 8021d6c:	f300 8144 	bgt.w	8021ff8 <_dtoa_r+0x700>
 8021d70:	4b67      	ldr	r3, [pc, #412]	; (8021f10 <_dtoa_r+0x618>)
 8021d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8021d76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8021d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021d7c:	2b00      	cmp	r3, #0
 8021d7e:	f280 80d5 	bge.w	8021f2c <_dtoa_r+0x634>
 8021d82:	9b03      	ldr	r3, [sp, #12]
 8021d84:	2b00      	cmp	r3, #0
 8021d86:	f300 80d1 	bgt.w	8021f2c <_dtoa_r+0x634>
 8021d8a:	f040 826f 	bne.w	802226c <_dtoa_r+0x974>
 8021d8e:	4b65      	ldr	r3, [pc, #404]	; (8021f24 <_dtoa_r+0x62c>)
 8021d90:	2200      	movs	r2, #0
 8021d92:	4640      	mov	r0, r8
 8021d94:	4649      	mov	r1, r9
 8021d96:	f7de fc57 	bl	8000648 <__aeabi_dmul>
 8021d9a:	4652      	mov	r2, sl
 8021d9c:	465b      	mov	r3, fp
 8021d9e:	f7de fed9 	bl	8000b54 <__aeabi_dcmpge>
 8021da2:	9e03      	ldr	r6, [sp, #12]
 8021da4:	4637      	mov	r7, r6
 8021da6:	2800      	cmp	r0, #0
 8021da8:	f040 8245 	bne.w	8022236 <_dtoa_r+0x93e>
 8021dac:	9d01      	ldr	r5, [sp, #4]
 8021dae:	2331      	movs	r3, #49	; 0x31
 8021db0:	f805 3b01 	strb.w	r3, [r5], #1
 8021db4:	9b00      	ldr	r3, [sp, #0]
 8021db6:	3301      	adds	r3, #1
 8021db8:	9300      	str	r3, [sp, #0]
 8021dba:	e240      	b.n	802223e <_dtoa_r+0x946>
 8021dbc:	07f2      	lsls	r2, r6, #31
 8021dbe:	d505      	bpl.n	8021dcc <_dtoa_r+0x4d4>
 8021dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021dc4:	f7de fc40 	bl	8000648 <__aeabi_dmul>
 8021dc8:	3501      	adds	r5, #1
 8021dca:	2301      	movs	r3, #1
 8021dcc:	1076      	asrs	r6, r6, #1
 8021dce:	3708      	adds	r7, #8
 8021dd0:	e777      	b.n	8021cc2 <_dtoa_r+0x3ca>
 8021dd2:	2502      	movs	r5, #2
 8021dd4:	e779      	b.n	8021cca <_dtoa_r+0x3d2>
 8021dd6:	9f00      	ldr	r7, [sp, #0]
 8021dd8:	9e03      	ldr	r6, [sp, #12]
 8021dda:	e794      	b.n	8021d06 <_dtoa_r+0x40e>
 8021ddc:	9901      	ldr	r1, [sp, #4]
 8021dde:	4b4c      	ldr	r3, [pc, #304]	; (8021f10 <_dtoa_r+0x618>)
 8021de0:	4431      	add	r1, r6
 8021de2:	910d      	str	r1, [sp, #52]	; 0x34
 8021de4:	9908      	ldr	r1, [sp, #32]
 8021de6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8021dea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8021dee:	2900      	cmp	r1, #0
 8021df0:	d043      	beq.n	8021e7a <_dtoa_r+0x582>
 8021df2:	494d      	ldr	r1, [pc, #308]	; (8021f28 <_dtoa_r+0x630>)
 8021df4:	2000      	movs	r0, #0
 8021df6:	f7de fd51 	bl	800089c <__aeabi_ddiv>
 8021dfa:	4652      	mov	r2, sl
 8021dfc:	465b      	mov	r3, fp
 8021dfe:	f7de fa6b 	bl	80002d8 <__aeabi_dsub>
 8021e02:	9d01      	ldr	r5, [sp, #4]
 8021e04:	4682      	mov	sl, r0
 8021e06:	468b      	mov	fp, r1
 8021e08:	4649      	mov	r1, r9
 8021e0a:	4640      	mov	r0, r8
 8021e0c:	f7de fecc 	bl	8000ba8 <__aeabi_d2iz>
 8021e10:	4606      	mov	r6, r0
 8021e12:	f7de fbaf 	bl	8000574 <__aeabi_i2d>
 8021e16:	4602      	mov	r2, r0
 8021e18:	460b      	mov	r3, r1
 8021e1a:	4640      	mov	r0, r8
 8021e1c:	4649      	mov	r1, r9
 8021e1e:	f7de fa5b 	bl	80002d8 <__aeabi_dsub>
 8021e22:	3630      	adds	r6, #48	; 0x30
 8021e24:	f805 6b01 	strb.w	r6, [r5], #1
 8021e28:	4652      	mov	r2, sl
 8021e2a:	465b      	mov	r3, fp
 8021e2c:	4680      	mov	r8, r0
 8021e2e:	4689      	mov	r9, r1
 8021e30:	f7de fe7c 	bl	8000b2c <__aeabi_dcmplt>
 8021e34:	2800      	cmp	r0, #0
 8021e36:	d163      	bne.n	8021f00 <_dtoa_r+0x608>
 8021e38:	4642      	mov	r2, r8
 8021e3a:	464b      	mov	r3, r9
 8021e3c:	4936      	ldr	r1, [pc, #216]	; (8021f18 <_dtoa_r+0x620>)
 8021e3e:	2000      	movs	r0, #0
 8021e40:	f7de fa4a 	bl	80002d8 <__aeabi_dsub>
 8021e44:	4652      	mov	r2, sl
 8021e46:	465b      	mov	r3, fp
 8021e48:	f7de fe70 	bl	8000b2c <__aeabi_dcmplt>
 8021e4c:	2800      	cmp	r0, #0
 8021e4e:	f040 80b5 	bne.w	8021fbc <_dtoa_r+0x6c4>
 8021e52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e54:	429d      	cmp	r5, r3
 8021e56:	d081      	beq.n	8021d5c <_dtoa_r+0x464>
 8021e58:	4b30      	ldr	r3, [pc, #192]	; (8021f1c <_dtoa_r+0x624>)
 8021e5a:	2200      	movs	r2, #0
 8021e5c:	4650      	mov	r0, sl
 8021e5e:	4659      	mov	r1, fp
 8021e60:	f7de fbf2 	bl	8000648 <__aeabi_dmul>
 8021e64:	4b2d      	ldr	r3, [pc, #180]	; (8021f1c <_dtoa_r+0x624>)
 8021e66:	4682      	mov	sl, r0
 8021e68:	468b      	mov	fp, r1
 8021e6a:	4640      	mov	r0, r8
 8021e6c:	4649      	mov	r1, r9
 8021e6e:	2200      	movs	r2, #0
 8021e70:	f7de fbea 	bl	8000648 <__aeabi_dmul>
 8021e74:	4680      	mov	r8, r0
 8021e76:	4689      	mov	r9, r1
 8021e78:	e7c6      	b.n	8021e08 <_dtoa_r+0x510>
 8021e7a:	4650      	mov	r0, sl
 8021e7c:	4659      	mov	r1, fp
 8021e7e:	f7de fbe3 	bl	8000648 <__aeabi_dmul>
 8021e82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021e84:	9d01      	ldr	r5, [sp, #4]
 8021e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8021e88:	4682      	mov	sl, r0
 8021e8a:	468b      	mov	fp, r1
 8021e8c:	4649      	mov	r1, r9
 8021e8e:	4640      	mov	r0, r8
 8021e90:	f7de fe8a 	bl	8000ba8 <__aeabi_d2iz>
 8021e94:	4606      	mov	r6, r0
 8021e96:	f7de fb6d 	bl	8000574 <__aeabi_i2d>
 8021e9a:	3630      	adds	r6, #48	; 0x30
 8021e9c:	4602      	mov	r2, r0
 8021e9e:	460b      	mov	r3, r1
 8021ea0:	4640      	mov	r0, r8
 8021ea2:	4649      	mov	r1, r9
 8021ea4:	f7de fa18 	bl	80002d8 <__aeabi_dsub>
 8021ea8:	f805 6b01 	strb.w	r6, [r5], #1
 8021eac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021eae:	429d      	cmp	r5, r3
 8021eb0:	4680      	mov	r8, r0
 8021eb2:	4689      	mov	r9, r1
 8021eb4:	f04f 0200 	mov.w	r2, #0
 8021eb8:	d124      	bne.n	8021f04 <_dtoa_r+0x60c>
 8021eba:	4b1b      	ldr	r3, [pc, #108]	; (8021f28 <_dtoa_r+0x630>)
 8021ebc:	4650      	mov	r0, sl
 8021ebe:	4659      	mov	r1, fp
 8021ec0:	f7de fa0c 	bl	80002dc <__adddf3>
 8021ec4:	4602      	mov	r2, r0
 8021ec6:	460b      	mov	r3, r1
 8021ec8:	4640      	mov	r0, r8
 8021eca:	4649      	mov	r1, r9
 8021ecc:	f7de fe4c 	bl	8000b68 <__aeabi_dcmpgt>
 8021ed0:	2800      	cmp	r0, #0
 8021ed2:	d173      	bne.n	8021fbc <_dtoa_r+0x6c4>
 8021ed4:	4652      	mov	r2, sl
 8021ed6:	465b      	mov	r3, fp
 8021ed8:	4913      	ldr	r1, [pc, #76]	; (8021f28 <_dtoa_r+0x630>)
 8021eda:	2000      	movs	r0, #0
 8021edc:	f7de f9fc 	bl	80002d8 <__aeabi_dsub>
 8021ee0:	4602      	mov	r2, r0
 8021ee2:	460b      	mov	r3, r1
 8021ee4:	4640      	mov	r0, r8
 8021ee6:	4649      	mov	r1, r9
 8021ee8:	f7de fe20 	bl	8000b2c <__aeabi_dcmplt>
 8021eec:	2800      	cmp	r0, #0
 8021eee:	f43f af35 	beq.w	8021d5c <_dtoa_r+0x464>
 8021ef2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021ef4:	1e6b      	subs	r3, r5, #1
 8021ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8021ef8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8021efc:	2b30      	cmp	r3, #48	; 0x30
 8021efe:	d0f8      	beq.n	8021ef2 <_dtoa_r+0x5fa>
 8021f00:	9700      	str	r7, [sp, #0]
 8021f02:	e049      	b.n	8021f98 <_dtoa_r+0x6a0>
 8021f04:	4b05      	ldr	r3, [pc, #20]	; (8021f1c <_dtoa_r+0x624>)
 8021f06:	f7de fb9f 	bl	8000648 <__aeabi_dmul>
 8021f0a:	4680      	mov	r8, r0
 8021f0c:	4689      	mov	r9, r1
 8021f0e:	e7bd      	b.n	8021e8c <_dtoa_r+0x594>
 8021f10:	08025390 	.word	0x08025390
 8021f14:	08025368 	.word	0x08025368
 8021f18:	3ff00000 	.word	0x3ff00000
 8021f1c:	40240000 	.word	0x40240000
 8021f20:	401c0000 	.word	0x401c0000
 8021f24:	40140000 	.word	0x40140000
 8021f28:	3fe00000 	.word	0x3fe00000
 8021f2c:	9d01      	ldr	r5, [sp, #4]
 8021f2e:	4656      	mov	r6, sl
 8021f30:	465f      	mov	r7, fp
 8021f32:	4642      	mov	r2, r8
 8021f34:	464b      	mov	r3, r9
 8021f36:	4630      	mov	r0, r6
 8021f38:	4639      	mov	r1, r7
 8021f3a:	f7de fcaf 	bl	800089c <__aeabi_ddiv>
 8021f3e:	f7de fe33 	bl	8000ba8 <__aeabi_d2iz>
 8021f42:	4682      	mov	sl, r0
 8021f44:	f7de fb16 	bl	8000574 <__aeabi_i2d>
 8021f48:	4642      	mov	r2, r8
 8021f4a:	464b      	mov	r3, r9
 8021f4c:	f7de fb7c 	bl	8000648 <__aeabi_dmul>
 8021f50:	4602      	mov	r2, r0
 8021f52:	460b      	mov	r3, r1
 8021f54:	4630      	mov	r0, r6
 8021f56:	4639      	mov	r1, r7
 8021f58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8021f5c:	f7de f9bc 	bl	80002d8 <__aeabi_dsub>
 8021f60:	f805 6b01 	strb.w	r6, [r5], #1
 8021f64:	9e01      	ldr	r6, [sp, #4]
 8021f66:	9f03      	ldr	r7, [sp, #12]
 8021f68:	1bae      	subs	r6, r5, r6
 8021f6a:	42b7      	cmp	r7, r6
 8021f6c:	4602      	mov	r2, r0
 8021f6e:	460b      	mov	r3, r1
 8021f70:	d135      	bne.n	8021fde <_dtoa_r+0x6e6>
 8021f72:	f7de f9b3 	bl	80002dc <__adddf3>
 8021f76:	4642      	mov	r2, r8
 8021f78:	464b      	mov	r3, r9
 8021f7a:	4606      	mov	r6, r0
 8021f7c:	460f      	mov	r7, r1
 8021f7e:	f7de fdf3 	bl	8000b68 <__aeabi_dcmpgt>
 8021f82:	b9d0      	cbnz	r0, 8021fba <_dtoa_r+0x6c2>
 8021f84:	4642      	mov	r2, r8
 8021f86:	464b      	mov	r3, r9
 8021f88:	4630      	mov	r0, r6
 8021f8a:	4639      	mov	r1, r7
 8021f8c:	f7de fdc4 	bl	8000b18 <__aeabi_dcmpeq>
 8021f90:	b110      	cbz	r0, 8021f98 <_dtoa_r+0x6a0>
 8021f92:	f01a 0f01 	tst.w	sl, #1
 8021f96:	d110      	bne.n	8021fba <_dtoa_r+0x6c2>
 8021f98:	4620      	mov	r0, r4
 8021f9a:	ee18 1a10 	vmov	r1, s16
 8021f9e:	f000 fd05 	bl	80229ac <_Bfree>
 8021fa2:	2300      	movs	r3, #0
 8021fa4:	9800      	ldr	r0, [sp, #0]
 8021fa6:	702b      	strb	r3, [r5, #0]
 8021fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021faa:	3001      	adds	r0, #1
 8021fac:	6018      	str	r0, [r3, #0]
 8021fae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021fb0:	2b00      	cmp	r3, #0
 8021fb2:	f43f acf1 	beq.w	8021998 <_dtoa_r+0xa0>
 8021fb6:	601d      	str	r5, [r3, #0]
 8021fb8:	e4ee      	b.n	8021998 <_dtoa_r+0xa0>
 8021fba:	9f00      	ldr	r7, [sp, #0]
 8021fbc:	462b      	mov	r3, r5
 8021fbe:	461d      	mov	r5, r3
 8021fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021fc4:	2a39      	cmp	r2, #57	; 0x39
 8021fc6:	d106      	bne.n	8021fd6 <_dtoa_r+0x6de>
 8021fc8:	9a01      	ldr	r2, [sp, #4]
 8021fca:	429a      	cmp	r2, r3
 8021fcc:	d1f7      	bne.n	8021fbe <_dtoa_r+0x6c6>
 8021fce:	9901      	ldr	r1, [sp, #4]
 8021fd0:	2230      	movs	r2, #48	; 0x30
 8021fd2:	3701      	adds	r7, #1
 8021fd4:	700a      	strb	r2, [r1, #0]
 8021fd6:	781a      	ldrb	r2, [r3, #0]
 8021fd8:	3201      	adds	r2, #1
 8021fda:	701a      	strb	r2, [r3, #0]
 8021fdc:	e790      	b.n	8021f00 <_dtoa_r+0x608>
 8021fde:	4ba6      	ldr	r3, [pc, #664]	; (8022278 <_dtoa_r+0x980>)
 8021fe0:	2200      	movs	r2, #0
 8021fe2:	f7de fb31 	bl	8000648 <__aeabi_dmul>
 8021fe6:	2200      	movs	r2, #0
 8021fe8:	2300      	movs	r3, #0
 8021fea:	4606      	mov	r6, r0
 8021fec:	460f      	mov	r7, r1
 8021fee:	f7de fd93 	bl	8000b18 <__aeabi_dcmpeq>
 8021ff2:	2800      	cmp	r0, #0
 8021ff4:	d09d      	beq.n	8021f32 <_dtoa_r+0x63a>
 8021ff6:	e7cf      	b.n	8021f98 <_dtoa_r+0x6a0>
 8021ff8:	9a08      	ldr	r2, [sp, #32]
 8021ffa:	2a00      	cmp	r2, #0
 8021ffc:	f000 80d7 	beq.w	80221ae <_dtoa_r+0x8b6>
 8022000:	9a06      	ldr	r2, [sp, #24]
 8022002:	2a01      	cmp	r2, #1
 8022004:	f300 80ba 	bgt.w	802217c <_dtoa_r+0x884>
 8022008:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802200a:	2a00      	cmp	r2, #0
 802200c:	f000 80b2 	beq.w	8022174 <_dtoa_r+0x87c>
 8022010:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8022014:	9e07      	ldr	r6, [sp, #28]
 8022016:	9d04      	ldr	r5, [sp, #16]
 8022018:	9a04      	ldr	r2, [sp, #16]
 802201a:	441a      	add	r2, r3
 802201c:	9204      	str	r2, [sp, #16]
 802201e:	9a05      	ldr	r2, [sp, #20]
 8022020:	2101      	movs	r1, #1
 8022022:	441a      	add	r2, r3
 8022024:	4620      	mov	r0, r4
 8022026:	9205      	str	r2, [sp, #20]
 8022028:	f000 fd78 	bl	8022b1c <__i2b>
 802202c:	4607      	mov	r7, r0
 802202e:	2d00      	cmp	r5, #0
 8022030:	dd0c      	ble.n	802204c <_dtoa_r+0x754>
 8022032:	9b05      	ldr	r3, [sp, #20]
 8022034:	2b00      	cmp	r3, #0
 8022036:	dd09      	ble.n	802204c <_dtoa_r+0x754>
 8022038:	42ab      	cmp	r3, r5
 802203a:	9a04      	ldr	r2, [sp, #16]
 802203c:	bfa8      	it	ge
 802203e:	462b      	movge	r3, r5
 8022040:	1ad2      	subs	r2, r2, r3
 8022042:	9204      	str	r2, [sp, #16]
 8022044:	9a05      	ldr	r2, [sp, #20]
 8022046:	1aed      	subs	r5, r5, r3
 8022048:	1ad3      	subs	r3, r2, r3
 802204a:	9305      	str	r3, [sp, #20]
 802204c:	9b07      	ldr	r3, [sp, #28]
 802204e:	b31b      	cbz	r3, 8022098 <_dtoa_r+0x7a0>
 8022050:	9b08      	ldr	r3, [sp, #32]
 8022052:	2b00      	cmp	r3, #0
 8022054:	f000 80af 	beq.w	80221b6 <_dtoa_r+0x8be>
 8022058:	2e00      	cmp	r6, #0
 802205a:	dd13      	ble.n	8022084 <_dtoa_r+0x78c>
 802205c:	4639      	mov	r1, r7
 802205e:	4632      	mov	r2, r6
 8022060:	4620      	mov	r0, r4
 8022062:	f000 fe1b 	bl	8022c9c <__pow5mult>
 8022066:	ee18 2a10 	vmov	r2, s16
 802206a:	4601      	mov	r1, r0
 802206c:	4607      	mov	r7, r0
 802206e:	4620      	mov	r0, r4
 8022070:	f000 fd6a 	bl	8022b48 <__multiply>
 8022074:	ee18 1a10 	vmov	r1, s16
 8022078:	4680      	mov	r8, r0
 802207a:	4620      	mov	r0, r4
 802207c:	f000 fc96 	bl	80229ac <_Bfree>
 8022080:	ee08 8a10 	vmov	s16, r8
 8022084:	9b07      	ldr	r3, [sp, #28]
 8022086:	1b9a      	subs	r2, r3, r6
 8022088:	d006      	beq.n	8022098 <_dtoa_r+0x7a0>
 802208a:	ee18 1a10 	vmov	r1, s16
 802208e:	4620      	mov	r0, r4
 8022090:	f000 fe04 	bl	8022c9c <__pow5mult>
 8022094:	ee08 0a10 	vmov	s16, r0
 8022098:	2101      	movs	r1, #1
 802209a:	4620      	mov	r0, r4
 802209c:	f000 fd3e 	bl	8022b1c <__i2b>
 80220a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80220a2:	2b00      	cmp	r3, #0
 80220a4:	4606      	mov	r6, r0
 80220a6:	f340 8088 	ble.w	80221ba <_dtoa_r+0x8c2>
 80220aa:	461a      	mov	r2, r3
 80220ac:	4601      	mov	r1, r0
 80220ae:	4620      	mov	r0, r4
 80220b0:	f000 fdf4 	bl	8022c9c <__pow5mult>
 80220b4:	9b06      	ldr	r3, [sp, #24]
 80220b6:	2b01      	cmp	r3, #1
 80220b8:	4606      	mov	r6, r0
 80220ba:	f340 8081 	ble.w	80221c0 <_dtoa_r+0x8c8>
 80220be:	f04f 0800 	mov.w	r8, #0
 80220c2:	6933      	ldr	r3, [r6, #16]
 80220c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80220c8:	6918      	ldr	r0, [r3, #16]
 80220ca:	f000 fcd7 	bl	8022a7c <__hi0bits>
 80220ce:	f1c0 0020 	rsb	r0, r0, #32
 80220d2:	9b05      	ldr	r3, [sp, #20]
 80220d4:	4418      	add	r0, r3
 80220d6:	f010 001f 	ands.w	r0, r0, #31
 80220da:	f000 8092 	beq.w	8022202 <_dtoa_r+0x90a>
 80220de:	f1c0 0320 	rsb	r3, r0, #32
 80220e2:	2b04      	cmp	r3, #4
 80220e4:	f340 808a 	ble.w	80221fc <_dtoa_r+0x904>
 80220e8:	f1c0 001c 	rsb	r0, r0, #28
 80220ec:	9b04      	ldr	r3, [sp, #16]
 80220ee:	4403      	add	r3, r0
 80220f0:	9304      	str	r3, [sp, #16]
 80220f2:	9b05      	ldr	r3, [sp, #20]
 80220f4:	4403      	add	r3, r0
 80220f6:	4405      	add	r5, r0
 80220f8:	9305      	str	r3, [sp, #20]
 80220fa:	9b04      	ldr	r3, [sp, #16]
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	dd07      	ble.n	8022110 <_dtoa_r+0x818>
 8022100:	ee18 1a10 	vmov	r1, s16
 8022104:	461a      	mov	r2, r3
 8022106:	4620      	mov	r0, r4
 8022108:	f000 fe22 	bl	8022d50 <__lshift>
 802210c:	ee08 0a10 	vmov	s16, r0
 8022110:	9b05      	ldr	r3, [sp, #20]
 8022112:	2b00      	cmp	r3, #0
 8022114:	dd05      	ble.n	8022122 <_dtoa_r+0x82a>
 8022116:	4631      	mov	r1, r6
 8022118:	461a      	mov	r2, r3
 802211a:	4620      	mov	r0, r4
 802211c:	f000 fe18 	bl	8022d50 <__lshift>
 8022120:	4606      	mov	r6, r0
 8022122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022124:	2b00      	cmp	r3, #0
 8022126:	d06e      	beq.n	8022206 <_dtoa_r+0x90e>
 8022128:	ee18 0a10 	vmov	r0, s16
 802212c:	4631      	mov	r1, r6
 802212e:	f000 fe7f 	bl	8022e30 <__mcmp>
 8022132:	2800      	cmp	r0, #0
 8022134:	da67      	bge.n	8022206 <_dtoa_r+0x90e>
 8022136:	9b00      	ldr	r3, [sp, #0]
 8022138:	3b01      	subs	r3, #1
 802213a:	ee18 1a10 	vmov	r1, s16
 802213e:	9300      	str	r3, [sp, #0]
 8022140:	220a      	movs	r2, #10
 8022142:	2300      	movs	r3, #0
 8022144:	4620      	mov	r0, r4
 8022146:	f000 fc53 	bl	80229f0 <__multadd>
 802214a:	9b08      	ldr	r3, [sp, #32]
 802214c:	ee08 0a10 	vmov	s16, r0
 8022150:	2b00      	cmp	r3, #0
 8022152:	f000 81b1 	beq.w	80224b8 <_dtoa_r+0xbc0>
 8022156:	2300      	movs	r3, #0
 8022158:	4639      	mov	r1, r7
 802215a:	220a      	movs	r2, #10
 802215c:	4620      	mov	r0, r4
 802215e:	f000 fc47 	bl	80229f0 <__multadd>
 8022162:	9b02      	ldr	r3, [sp, #8]
 8022164:	2b00      	cmp	r3, #0
 8022166:	4607      	mov	r7, r0
 8022168:	f300 808e 	bgt.w	8022288 <_dtoa_r+0x990>
 802216c:	9b06      	ldr	r3, [sp, #24]
 802216e:	2b02      	cmp	r3, #2
 8022170:	dc51      	bgt.n	8022216 <_dtoa_r+0x91e>
 8022172:	e089      	b.n	8022288 <_dtoa_r+0x990>
 8022174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022176:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802217a:	e74b      	b.n	8022014 <_dtoa_r+0x71c>
 802217c:	9b03      	ldr	r3, [sp, #12]
 802217e:	1e5e      	subs	r6, r3, #1
 8022180:	9b07      	ldr	r3, [sp, #28]
 8022182:	42b3      	cmp	r3, r6
 8022184:	bfbf      	itttt	lt
 8022186:	9b07      	ldrlt	r3, [sp, #28]
 8022188:	9607      	strlt	r6, [sp, #28]
 802218a:	1af2      	sublt	r2, r6, r3
 802218c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802218e:	bfb6      	itet	lt
 8022190:	189b      	addlt	r3, r3, r2
 8022192:	1b9e      	subge	r6, r3, r6
 8022194:	930a      	strlt	r3, [sp, #40]	; 0x28
 8022196:	9b03      	ldr	r3, [sp, #12]
 8022198:	bfb8      	it	lt
 802219a:	2600      	movlt	r6, #0
 802219c:	2b00      	cmp	r3, #0
 802219e:	bfb7      	itett	lt
 80221a0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80221a4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80221a8:	1a9d      	sublt	r5, r3, r2
 80221aa:	2300      	movlt	r3, #0
 80221ac:	e734      	b.n	8022018 <_dtoa_r+0x720>
 80221ae:	9e07      	ldr	r6, [sp, #28]
 80221b0:	9d04      	ldr	r5, [sp, #16]
 80221b2:	9f08      	ldr	r7, [sp, #32]
 80221b4:	e73b      	b.n	802202e <_dtoa_r+0x736>
 80221b6:	9a07      	ldr	r2, [sp, #28]
 80221b8:	e767      	b.n	802208a <_dtoa_r+0x792>
 80221ba:	9b06      	ldr	r3, [sp, #24]
 80221bc:	2b01      	cmp	r3, #1
 80221be:	dc18      	bgt.n	80221f2 <_dtoa_r+0x8fa>
 80221c0:	f1ba 0f00 	cmp.w	sl, #0
 80221c4:	d115      	bne.n	80221f2 <_dtoa_r+0x8fa>
 80221c6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80221ca:	b993      	cbnz	r3, 80221f2 <_dtoa_r+0x8fa>
 80221cc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80221d0:	0d1b      	lsrs	r3, r3, #20
 80221d2:	051b      	lsls	r3, r3, #20
 80221d4:	b183      	cbz	r3, 80221f8 <_dtoa_r+0x900>
 80221d6:	9b04      	ldr	r3, [sp, #16]
 80221d8:	3301      	adds	r3, #1
 80221da:	9304      	str	r3, [sp, #16]
 80221dc:	9b05      	ldr	r3, [sp, #20]
 80221de:	3301      	adds	r3, #1
 80221e0:	9305      	str	r3, [sp, #20]
 80221e2:	f04f 0801 	mov.w	r8, #1
 80221e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221e8:	2b00      	cmp	r3, #0
 80221ea:	f47f af6a 	bne.w	80220c2 <_dtoa_r+0x7ca>
 80221ee:	2001      	movs	r0, #1
 80221f0:	e76f      	b.n	80220d2 <_dtoa_r+0x7da>
 80221f2:	f04f 0800 	mov.w	r8, #0
 80221f6:	e7f6      	b.n	80221e6 <_dtoa_r+0x8ee>
 80221f8:	4698      	mov	r8, r3
 80221fa:	e7f4      	b.n	80221e6 <_dtoa_r+0x8ee>
 80221fc:	f43f af7d 	beq.w	80220fa <_dtoa_r+0x802>
 8022200:	4618      	mov	r0, r3
 8022202:	301c      	adds	r0, #28
 8022204:	e772      	b.n	80220ec <_dtoa_r+0x7f4>
 8022206:	9b03      	ldr	r3, [sp, #12]
 8022208:	2b00      	cmp	r3, #0
 802220a:	dc37      	bgt.n	802227c <_dtoa_r+0x984>
 802220c:	9b06      	ldr	r3, [sp, #24]
 802220e:	2b02      	cmp	r3, #2
 8022210:	dd34      	ble.n	802227c <_dtoa_r+0x984>
 8022212:	9b03      	ldr	r3, [sp, #12]
 8022214:	9302      	str	r3, [sp, #8]
 8022216:	9b02      	ldr	r3, [sp, #8]
 8022218:	b96b      	cbnz	r3, 8022236 <_dtoa_r+0x93e>
 802221a:	4631      	mov	r1, r6
 802221c:	2205      	movs	r2, #5
 802221e:	4620      	mov	r0, r4
 8022220:	f000 fbe6 	bl	80229f0 <__multadd>
 8022224:	4601      	mov	r1, r0
 8022226:	4606      	mov	r6, r0
 8022228:	ee18 0a10 	vmov	r0, s16
 802222c:	f000 fe00 	bl	8022e30 <__mcmp>
 8022230:	2800      	cmp	r0, #0
 8022232:	f73f adbb 	bgt.w	8021dac <_dtoa_r+0x4b4>
 8022236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022238:	9d01      	ldr	r5, [sp, #4]
 802223a:	43db      	mvns	r3, r3
 802223c:	9300      	str	r3, [sp, #0]
 802223e:	f04f 0800 	mov.w	r8, #0
 8022242:	4631      	mov	r1, r6
 8022244:	4620      	mov	r0, r4
 8022246:	f000 fbb1 	bl	80229ac <_Bfree>
 802224a:	2f00      	cmp	r7, #0
 802224c:	f43f aea4 	beq.w	8021f98 <_dtoa_r+0x6a0>
 8022250:	f1b8 0f00 	cmp.w	r8, #0
 8022254:	d005      	beq.n	8022262 <_dtoa_r+0x96a>
 8022256:	45b8      	cmp	r8, r7
 8022258:	d003      	beq.n	8022262 <_dtoa_r+0x96a>
 802225a:	4641      	mov	r1, r8
 802225c:	4620      	mov	r0, r4
 802225e:	f000 fba5 	bl	80229ac <_Bfree>
 8022262:	4639      	mov	r1, r7
 8022264:	4620      	mov	r0, r4
 8022266:	f000 fba1 	bl	80229ac <_Bfree>
 802226a:	e695      	b.n	8021f98 <_dtoa_r+0x6a0>
 802226c:	2600      	movs	r6, #0
 802226e:	4637      	mov	r7, r6
 8022270:	e7e1      	b.n	8022236 <_dtoa_r+0x93e>
 8022272:	9700      	str	r7, [sp, #0]
 8022274:	4637      	mov	r7, r6
 8022276:	e599      	b.n	8021dac <_dtoa_r+0x4b4>
 8022278:	40240000 	.word	0x40240000
 802227c:	9b08      	ldr	r3, [sp, #32]
 802227e:	2b00      	cmp	r3, #0
 8022280:	f000 80ca 	beq.w	8022418 <_dtoa_r+0xb20>
 8022284:	9b03      	ldr	r3, [sp, #12]
 8022286:	9302      	str	r3, [sp, #8]
 8022288:	2d00      	cmp	r5, #0
 802228a:	dd05      	ble.n	8022298 <_dtoa_r+0x9a0>
 802228c:	4639      	mov	r1, r7
 802228e:	462a      	mov	r2, r5
 8022290:	4620      	mov	r0, r4
 8022292:	f000 fd5d 	bl	8022d50 <__lshift>
 8022296:	4607      	mov	r7, r0
 8022298:	f1b8 0f00 	cmp.w	r8, #0
 802229c:	d05b      	beq.n	8022356 <_dtoa_r+0xa5e>
 802229e:	6879      	ldr	r1, [r7, #4]
 80222a0:	4620      	mov	r0, r4
 80222a2:	f000 fb43 	bl	802292c <_Balloc>
 80222a6:	4605      	mov	r5, r0
 80222a8:	b928      	cbnz	r0, 80222b6 <_dtoa_r+0x9be>
 80222aa:	4b87      	ldr	r3, [pc, #540]	; (80224c8 <_dtoa_r+0xbd0>)
 80222ac:	4602      	mov	r2, r0
 80222ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 80222b2:	f7ff bb3b 	b.w	802192c <_dtoa_r+0x34>
 80222b6:	693a      	ldr	r2, [r7, #16]
 80222b8:	3202      	adds	r2, #2
 80222ba:	0092      	lsls	r2, r2, #2
 80222bc:	f107 010c 	add.w	r1, r7, #12
 80222c0:	300c      	adds	r0, #12
 80222c2:	f7fe fca7 	bl	8020c14 <memcpy>
 80222c6:	2201      	movs	r2, #1
 80222c8:	4629      	mov	r1, r5
 80222ca:	4620      	mov	r0, r4
 80222cc:	f000 fd40 	bl	8022d50 <__lshift>
 80222d0:	9b01      	ldr	r3, [sp, #4]
 80222d2:	f103 0901 	add.w	r9, r3, #1
 80222d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80222da:	4413      	add	r3, r2
 80222dc:	9305      	str	r3, [sp, #20]
 80222de:	f00a 0301 	and.w	r3, sl, #1
 80222e2:	46b8      	mov	r8, r7
 80222e4:	9304      	str	r3, [sp, #16]
 80222e6:	4607      	mov	r7, r0
 80222e8:	4631      	mov	r1, r6
 80222ea:	ee18 0a10 	vmov	r0, s16
 80222ee:	f7ff fa75 	bl	80217dc <quorem>
 80222f2:	4641      	mov	r1, r8
 80222f4:	9002      	str	r0, [sp, #8]
 80222f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80222fa:	ee18 0a10 	vmov	r0, s16
 80222fe:	f000 fd97 	bl	8022e30 <__mcmp>
 8022302:	463a      	mov	r2, r7
 8022304:	9003      	str	r0, [sp, #12]
 8022306:	4631      	mov	r1, r6
 8022308:	4620      	mov	r0, r4
 802230a:	f000 fdad 	bl	8022e68 <__mdiff>
 802230e:	68c2      	ldr	r2, [r0, #12]
 8022310:	f109 3bff 	add.w	fp, r9, #4294967295
 8022314:	4605      	mov	r5, r0
 8022316:	bb02      	cbnz	r2, 802235a <_dtoa_r+0xa62>
 8022318:	4601      	mov	r1, r0
 802231a:	ee18 0a10 	vmov	r0, s16
 802231e:	f000 fd87 	bl	8022e30 <__mcmp>
 8022322:	4602      	mov	r2, r0
 8022324:	4629      	mov	r1, r5
 8022326:	4620      	mov	r0, r4
 8022328:	9207      	str	r2, [sp, #28]
 802232a:	f000 fb3f 	bl	80229ac <_Bfree>
 802232e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8022332:	ea43 0102 	orr.w	r1, r3, r2
 8022336:	9b04      	ldr	r3, [sp, #16]
 8022338:	430b      	orrs	r3, r1
 802233a:	464d      	mov	r5, r9
 802233c:	d10f      	bne.n	802235e <_dtoa_r+0xa66>
 802233e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8022342:	d02a      	beq.n	802239a <_dtoa_r+0xaa2>
 8022344:	9b03      	ldr	r3, [sp, #12]
 8022346:	2b00      	cmp	r3, #0
 8022348:	dd02      	ble.n	8022350 <_dtoa_r+0xa58>
 802234a:	9b02      	ldr	r3, [sp, #8]
 802234c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8022350:	f88b a000 	strb.w	sl, [fp]
 8022354:	e775      	b.n	8022242 <_dtoa_r+0x94a>
 8022356:	4638      	mov	r0, r7
 8022358:	e7ba      	b.n	80222d0 <_dtoa_r+0x9d8>
 802235a:	2201      	movs	r2, #1
 802235c:	e7e2      	b.n	8022324 <_dtoa_r+0xa2c>
 802235e:	9b03      	ldr	r3, [sp, #12]
 8022360:	2b00      	cmp	r3, #0
 8022362:	db04      	blt.n	802236e <_dtoa_r+0xa76>
 8022364:	9906      	ldr	r1, [sp, #24]
 8022366:	430b      	orrs	r3, r1
 8022368:	9904      	ldr	r1, [sp, #16]
 802236a:	430b      	orrs	r3, r1
 802236c:	d122      	bne.n	80223b4 <_dtoa_r+0xabc>
 802236e:	2a00      	cmp	r2, #0
 8022370:	ddee      	ble.n	8022350 <_dtoa_r+0xa58>
 8022372:	ee18 1a10 	vmov	r1, s16
 8022376:	2201      	movs	r2, #1
 8022378:	4620      	mov	r0, r4
 802237a:	f000 fce9 	bl	8022d50 <__lshift>
 802237e:	4631      	mov	r1, r6
 8022380:	ee08 0a10 	vmov	s16, r0
 8022384:	f000 fd54 	bl	8022e30 <__mcmp>
 8022388:	2800      	cmp	r0, #0
 802238a:	dc03      	bgt.n	8022394 <_dtoa_r+0xa9c>
 802238c:	d1e0      	bne.n	8022350 <_dtoa_r+0xa58>
 802238e:	f01a 0f01 	tst.w	sl, #1
 8022392:	d0dd      	beq.n	8022350 <_dtoa_r+0xa58>
 8022394:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8022398:	d1d7      	bne.n	802234a <_dtoa_r+0xa52>
 802239a:	2339      	movs	r3, #57	; 0x39
 802239c:	f88b 3000 	strb.w	r3, [fp]
 80223a0:	462b      	mov	r3, r5
 80223a2:	461d      	mov	r5, r3
 80223a4:	3b01      	subs	r3, #1
 80223a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80223aa:	2a39      	cmp	r2, #57	; 0x39
 80223ac:	d071      	beq.n	8022492 <_dtoa_r+0xb9a>
 80223ae:	3201      	adds	r2, #1
 80223b0:	701a      	strb	r2, [r3, #0]
 80223b2:	e746      	b.n	8022242 <_dtoa_r+0x94a>
 80223b4:	2a00      	cmp	r2, #0
 80223b6:	dd07      	ble.n	80223c8 <_dtoa_r+0xad0>
 80223b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80223bc:	d0ed      	beq.n	802239a <_dtoa_r+0xaa2>
 80223be:	f10a 0301 	add.w	r3, sl, #1
 80223c2:	f88b 3000 	strb.w	r3, [fp]
 80223c6:	e73c      	b.n	8022242 <_dtoa_r+0x94a>
 80223c8:	9b05      	ldr	r3, [sp, #20]
 80223ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 80223ce:	4599      	cmp	r9, r3
 80223d0:	d047      	beq.n	8022462 <_dtoa_r+0xb6a>
 80223d2:	ee18 1a10 	vmov	r1, s16
 80223d6:	2300      	movs	r3, #0
 80223d8:	220a      	movs	r2, #10
 80223da:	4620      	mov	r0, r4
 80223dc:	f000 fb08 	bl	80229f0 <__multadd>
 80223e0:	45b8      	cmp	r8, r7
 80223e2:	ee08 0a10 	vmov	s16, r0
 80223e6:	f04f 0300 	mov.w	r3, #0
 80223ea:	f04f 020a 	mov.w	r2, #10
 80223ee:	4641      	mov	r1, r8
 80223f0:	4620      	mov	r0, r4
 80223f2:	d106      	bne.n	8022402 <_dtoa_r+0xb0a>
 80223f4:	f000 fafc 	bl	80229f0 <__multadd>
 80223f8:	4680      	mov	r8, r0
 80223fa:	4607      	mov	r7, r0
 80223fc:	f109 0901 	add.w	r9, r9, #1
 8022400:	e772      	b.n	80222e8 <_dtoa_r+0x9f0>
 8022402:	f000 faf5 	bl	80229f0 <__multadd>
 8022406:	4639      	mov	r1, r7
 8022408:	4680      	mov	r8, r0
 802240a:	2300      	movs	r3, #0
 802240c:	220a      	movs	r2, #10
 802240e:	4620      	mov	r0, r4
 8022410:	f000 faee 	bl	80229f0 <__multadd>
 8022414:	4607      	mov	r7, r0
 8022416:	e7f1      	b.n	80223fc <_dtoa_r+0xb04>
 8022418:	9b03      	ldr	r3, [sp, #12]
 802241a:	9302      	str	r3, [sp, #8]
 802241c:	9d01      	ldr	r5, [sp, #4]
 802241e:	ee18 0a10 	vmov	r0, s16
 8022422:	4631      	mov	r1, r6
 8022424:	f7ff f9da 	bl	80217dc <quorem>
 8022428:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802242c:	9b01      	ldr	r3, [sp, #4]
 802242e:	f805 ab01 	strb.w	sl, [r5], #1
 8022432:	1aea      	subs	r2, r5, r3
 8022434:	9b02      	ldr	r3, [sp, #8]
 8022436:	4293      	cmp	r3, r2
 8022438:	dd09      	ble.n	802244e <_dtoa_r+0xb56>
 802243a:	ee18 1a10 	vmov	r1, s16
 802243e:	2300      	movs	r3, #0
 8022440:	220a      	movs	r2, #10
 8022442:	4620      	mov	r0, r4
 8022444:	f000 fad4 	bl	80229f0 <__multadd>
 8022448:	ee08 0a10 	vmov	s16, r0
 802244c:	e7e7      	b.n	802241e <_dtoa_r+0xb26>
 802244e:	9b02      	ldr	r3, [sp, #8]
 8022450:	2b00      	cmp	r3, #0
 8022452:	bfc8      	it	gt
 8022454:	461d      	movgt	r5, r3
 8022456:	9b01      	ldr	r3, [sp, #4]
 8022458:	bfd8      	it	le
 802245a:	2501      	movle	r5, #1
 802245c:	441d      	add	r5, r3
 802245e:	f04f 0800 	mov.w	r8, #0
 8022462:	ee18 1a10 	vmov	r1, s16
 8022466:	2201      	movs	r2, #1
 8022468:	4620      	mov	r0, r4
 802246a:	f000 fc71 	bl	8022d50 <__lshift>
 802246e:	4631      	mov	r1, r6
 8022470:	ee08 0a10 	vmov	s16, r0
 8022474:	f000 fcdc 	bl	8022e30 <__mcmp>
 8022478:	2800      	cmp	r0, #0
 802247a:	dc91      	bgt.n	80223a0 <_dtoa_r+0xaa8>
 802247c:	d102      	bne.n	8022484 <_dtoa_r+0xb8c>
 802247e:	f01a 0f01 	tst.w	sl, #1
 8022482:	d18d      	bne.n	80223a0 <_dtoa_r+0xaa8>
 8022484:	462b      	mov	r3, r5
 8022486:	461d      	mov	r5, r3
 8022488:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802248c:	2a30      	cmp	r2, #48	; 0x30
 802248e:	d0fa      	beq.n	8022486 <_dtoa_r+0xb8e>
 8022490:	e6d7      	b.n	8022242 <_dtoa_r+0x94a>
 8022492:	9a01      	ldr	r2, [sp, #4]
 8022494:	429a      	cmp	r2, r3
 8022496:	d184      	bne.n	80223a2 <_dtoa_r+0xaaa>
 8022498:	9b00      	ldr	r3, [sp, #0]
 802249a:	3301      	adds	r3, #1
 802249c:	9300      	str	r3, [sp, #0]
 802249e:	2331      	movs	r3, #49	; 0x31
 80224a0:	7013      	strb	r3, [r2, #0]
 80224a2:	e6ce      	b.n	8022242 <_dtoa_r+0x94a>
 80224a4:	4b09      	ldr	r3, [pc, #36]	; (80224cc <_dtoa_r+0xbd4>)
 80224a6:	f7ff ba95 	b.w	80219d4 <_dtoa_r+0xdc>
 80224aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80224ac:	2b00      	cmp	r3, #0
 80224ae:	f47f aa6e 	bne.w	802198e <_dtoa_r+0x96>
 80224b2:	4b07      	ldr	r3, [pc, #28]	; (80224d0 <_dtoa_r+0xbd8>)
 80224b4:	f7ff ba8e 	b.w	80219d4 <_dtoa_r+0xdc>
 80224b8:	9b02      	ldr	r3, [sp, #8]
 80224ba:	2b00      	cmp	r3, #0
 80224bc:	dcae      	bgt.n	802241c <_dtoa_r+0xb24>
 80224be:	9b06      	ldr	r3, [sp, #24]
 80224c0:	2b02      	cmp	r3, #2
 80224c2:	f73f aea8 	bgt.w	8022216 <_dtoa_r+0x91e>
 80224c6:	e7a9      	b.n	802241c <_dtoa_r+0xb24>
 80224c8:	0802529b 	.word	0x0802529b
 80224cc:	080251f8 	.word	0x080251f8
 80224d0:	0802521c 	.word	0x0802521c

080224d4 <__sflush_r>:
 80224d4:	898a      	ldrh	r2, [r1, #12]
 80224d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80224da:	4605      	mov	r5, r0
 80224dc:	0710      	lsls	r0, r2, #28
 80224de:	460c      	mov	r4, r1
 80224e0:	d458      	bmi.n	8022594 <__sflush_r+0xc0>
 80224e2:	684b      	ldr	r3, [r1, #4]
 80224e4:	2b00      	cmp	r3, #0
 80224e6:	dc05      	bgt.n	80224f4 <__sflush_r+0x20>
 80224e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80224ea:	2b00      	cmp	r3, #0
 80224ec:	dc02      	bgt.n	80224f4 <__sflush_r+0x20>
 80224ee:	2000      	movs	r0, #0
 80224f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80224f6:	2e00      	cmp	r6, #0
 80224f8:	d0f9      	beq.n	80224ee <__sflush_r+0x1a>
 80224fa:	2300      	movs	r3, #0
 80224fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022500:	682f      	ldr	r7, [r5, #0]
 8022502:	602b      	str	r3, [r5, #0]
 8022504:	d032      	beq.n	802256c <__sflush_r+0x98>
 8022506:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022508:	89a3      	ldrh	r3, [r4, #12]
 802250a:	075a      	lsls	r2, r3, #29
 802250c:	d505      	bpl.n	802251a <__sflush_r+0x46>
 802250e:	6863      	ldr	r3, [r4, #4]
 8022510:	1ac0      	subs	r0, r0, r3
 8022512:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022514:	b10b      	cbz	r3, 802251a <__sflush_r+0x46>
 8022516:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022518:	1ac0      	subs	r0, r0, r3
 802251a:	2300      	movs	r3, #0
 802251c:	4602      	mov	r2, r0
 802251e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022520:	6a21      	ldr	r1, [r4, #32]
 8022522:	4628      	mov	r0, r5
 8022524:	47b0      	blx	r6
 8022526:	1c43      	adds	r3, r0, #1
 8022528:	89a3      	ldrh	r3, [r4, #12]
 802252a:	d106      	bne.n	802253a <__sflush_r+0x66>
 802252c:	6829      	ldr	r1, [r5, #0]
 802252e:	291d      	cmp	r1, #29
 8022530:	d82c      	bhi.n	802258c <__sflush_r+0xb8>
 8022532:	4a2a      	ldr	r2, [pc, #168]	; (80225dc <__sflush_r+0x108>)
 8022534:	40ca      	lsrs	r2, r1
 8022536:	07d6      	lsls	r6, r2, #31
 8022538:	d528      	bpl.n	802258c <__sflush_r+0xb8>
 802253a:	2200      	movs	r2, #0
 802253c:	6062      	str	r2, [r4, #4]
 802253e:	04d9      	lsls	r1, r3, #19
 8022540:	6922      	ldr	r2, [r4, #16]
 8022542:	6022      	str	r2, [r4, #0]
 8022544:	d504      	bpl.n	8022550 <__sflush_r+0x7c>
 8022546:	1c42      	adds	r2, r0, #1
 8022548:	d101      	bne.n	802254e <__sflush_r+0x7a>
 802254a:	682b      	ldr	r3, [r5, #0]
 802254c:	b903      	cbnz	r3, 8022550 <__sflush_r+0x7c>
 802254e:	6560      	str	r0, [r4, #84]	; 0x54
 8022550:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022552:	602f      	str	r7, [r5, #0]
 8022554:	2900      	cmp	r1, #0
 8022556:	d0ca      	beq.n	80224ee <__sflush_r+0x1a>
 8022558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802255c:	4299      	cmp	r1, r3
 802255e:	d002      	beq.n	8022566 <__sflush_r+0x92>
 8022560:	4628      	mov	r0, r5
 8022562:	f000 fd7d 	bl	8023060 <_free_r>
 8022566:	2000      	movs	r0, #0
 8022568:	6360      	str	r0, [r4, #52]	; 0x34
 802256a:	e7c1      	b.n	80224f0 <__sflush_r+0x1c>
 802256c:	6a21      	ldr	r1, [r4, #32]
 802256e:	2301      	movs	r3, #1
 8022570:	4628      	mov	r0, r5
 8022572:	47b0      	blx	r6
 8022574:	1c41      	adds	r1, r0, #1
 8022576:	d1c7      	bne.n	8022508 <__sflush_r+0x34>
 8022578:	682b      	ldr	r3, [r5, #0]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d0c4      	beq.n	8022508 <__sflush_r+0x34>
 802257e:	2b1d      	cmp	r3, #29
 8022580:	d001      	beq.n	8022586 <__sflush_r+0xb2>
 8022582:	2b16      	cmp	r3, #22
 8022584:	d101      	bne.n	802258a <__sflush_r+0xb6>
 8022586:	602f      	str	r7, [r5, #0]
 8022588:	e7b1      	b.n	80224ee <__sflush_r+0x1a>
 802258a:	89a3      	ldrh	r3, [r4, #12]
 802258c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022590:	81a3      	strh	r3, [r4, #12]
 8022592:	e7ad      	b.n	80224f0 <__sflush_r+0x1c>
 8022594:	690f      	ldr	r7, [r1, #16]
 8022596:	2f00      	cmp	r7, #0
 8022598:	d0a9      	beq.n	80224ee <__sflush_r+0x1a>
 802259a:	0793      	lsls	r3, r2, #30
 802259c:	680e      	ldr	r6, [r1, #0]
 802259e:	bf08      	it	eq
 80225a0:	694b      	ldreq	r3, [r1, #20]
 80225a2:	600f      	str	r7, [r1, #0]
 80225a4:	bf18      	it	ne
 80225a6:	2300      	movne	r3, #0
 80225a8:	eba6 0807 	sub.w	r8, r6, r7
 80225ac:	608b      	str	r3, [r1, #8]
 80225ae:	f1b8 0f00 	cmp.w	r8, #0
 80225b2:	dd9c      	ble.n	80224ee <__sflush_r+0x1a>
 80225b4:	6a21      	ldr	r1, [r4, #32]
 80225b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80225b8:	4643      	mov	r3, r8
 80225ba:	463a      	mov	r2, r7
 80225bc:	4628      	mov	r0, r5
 80225be:	47b0      	blx	r6
 80225c0:	2800      	cmp	r0, #0
 80225c2:	dc06      	bgt.n	80225d2 <__sflush_r+0xfe>
 80225c4:	89a3      	ldrh	r3, [r4, #12]
 80225c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80225ca:	81a3      	strh	r3, [r4, #12]
 80225cc:	f04f 30ff 	mov.w	r0, #4294967295
 80225d0:	e78e      	b.n	80224f0 <__sflush_r+0x1c>
 80225d2:	4407      	add	r7, r0
 80225d4:	eba8 0800 	sub.w	r8, r8, r0
 80225d8:	e7e9      	b.n	80225ae <__sflush_r+0xda>
 80225da:	bf00      	nop
 80225dc:	20400001 	.word	0x20400001

080225e0 <_fflush_r>:
 80225e0:	b538      	push	{r3, r4, r5, lr}
 80225e2:	690b      	ldr	r3, [r1, #16]
 80225e4:	4605      	mov	r5, r0
 80225e6:	460c      	mov	r4, r1
 80225e8:	b913      	cbnz	r3, 80225f0 <_fflush_r+0x10>
 80225ea:	2500      	movs	r5, #0
 80225ec:	4628      	mov	r0, r5
 80225ee:	bd38      	pop	{r3, r4, r5, pc}
 80225f0:	b118      	cbz	r0, 80225fa <_fflush_r+0x1a>
 80225f2:	6983      	ldr	r3, [r0, #24]
 80225f4:	b90b      	cbnz	r3, 80225fa <_fflush_r+0x1a>
 80225f6:	f000 f887 	bl	8022708 <__sinit>
 80225fa:	4b14      	ldr	r3, [pc, #80]	; (802264c <_fflush_r+0x6c>)
 80225fc:	429c      	cmp	r4, r3
 80225fe:	d11b      	bne.n	8022638 <_fflush_r+0x58>
 8022600:	686c      	ldr	r4, [r5, #4]
 8022602:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d0ef      	beq.n	80225ea <_fflush_r+0xa>
 802260a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802260c:	07d0      	lsls	r0, r2, #31
 802260e:	d404      	bmi.n	802261a <_fflush_r+0x3a>
 8022610:	0599      	lsls	r1, r3, #22
 8022612:	d402      	bmi.n	802261a <_fflush_r+0x3a>
 8022614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022616:	f000 f91a 	bl	802284e <__retarget_lock_acquire_recursive>
 802261a:	4628      	mov	r0, r5
 802261c:	4621      	mov	r1, r4
 802261e:	f7ff ff59 	bl	80224d4 <__sflush_r>
 8022622:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022624:	07da      	lsls	r2, r3, #31
 8022626:	4605      	mov	r5, r0
 8022628:	d4e0      	bmi.n	80225ec <_fflush_r+0xc>
 802262a:	89a3      	ldrh	r3, [r4, #12]
 802262c:	059b      	lsls	r3, r3, #22
 802262e:	d4dd      	bmi.n	80225ec <_fflush_r+0xc>
 8022630:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022632:	f000 f90d 	bl	8022850 <__retarget_lock_release_recursive>
 8022636:	e7d9      	b.n	80225ec <_fflush_r+0xc>
 8022638:	4b05      	ldr	r3, [pc, #20]	; (8022650 <_fflush_r+0x70>)
 802263a:	429c      	cmp	r4, r3
 802263c:	d101      	bne.n	8022642 <_fflush_r+0x62>
 802263e:	68ac      	ldr	r4, [r5, #8]
 8022640:	e7df      	b.n	8022602 <_fflush_r+0x22>
 8022642:	4b04      	ldr	r3, [pc, #16]	; (8022654 <_fflush_r+0x74>)
 8022644:	429c      	cmp	r4, r3
 8022646:	bf08      	it	eq
 8022648:	68ec      	ldreq	r4, [r5, #12]
 802264a:	e7da      	b.n	8022602 <_fflush_r+0x22>
 802264c:	080252cc 	.word	0x080252cc
 8022650:	080252ec 	.word	0x080252ec
 8022654:	080252ac 	.word	0x080252ac

08022658 <std>:
 8022658:	2300      	movs	r3, #0
 802265a:	b510      	push	{r4, lr}
 802265c:	4604      	mov	r4, r0
 802265e:	e9c0 3300 	strd	r3, r3, [r0]
 8022662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022666:	6083      	str	r3, [r0, #8]
 8022668:	8181      	strh	r1, [r0, #12]
 802266a:	6643      	str	r3, [r0, #100]	; 0x64
 802266c:	81c2      	strh	r2, [r0, #14]
 802266e:	6183      	str	r3, [r0, #24]
 8022670:	4619      	mov	r1, r3
 8022672:	2208      	movs	r2, #8
 8022674:	305c      	adds	r0, #92	; 0x5c
 8022676:	f7fe fadb 	bl	8020c30 <memset>
 802267a:	4b05      	ldr	r3, [pc, #20]	; (8022690 <std+0x38>)
 802267c:	6263      	str	r3, [r4, #36]	; 0x24
 802267e:	4b05      	ldr	r3, [pc, #20]	; (8022694 <std+0x3c>)
 8022680:	62a3      	str	r3, [r4, #40]	; 0x28
 8022682:	4b05      	ldr	r3, [pc, #20]	; (8022698 <std+0x40>)
 8022684:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022686:	4b05      	ldr	r3, [pc, #20]	; (802269c <std+0x44>)
 8022688:	6224      	str	r4, [r4, #32]
 802268a:	6323      	str	r3, [r4, #48]	; 0x30
 802268c:	bd10      	pop	{r4, pc}
 802268e:	bf00      	nop
 8022690:	08023585 	.word	0x08023585
 8022694:	080235a7 	.word	0x080235a7
 8022698:	080235df 	.word	0x080235df
 802269c:	08023603 	.word	0x08023603

080226a0 <_cleanup_r>:
 80226a0:	4901      	ldr	r1, [pc, #4]	; (80226a8 <_cleanup_r+0x8>)
 80226a2:	f000 b8af 	b.w	8022804 <_fwalk_reent>
 80226a6:	bf00      	nop
 80226a8:	080225e1 	.word	0x080225e1

080226ac <__sfmoreglue>:
 80226ac:	b570      	push	{r4, r5, r6, lr}
 80226ae:	2268      	movs	r2, #104	; 0x68
 80226b0:	1e4d      	subs	r5, r1, #1
 80226b2:	4355      	muls	r5, r2
 80226b4:	460e      	mov	r6, r1
 80226b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80226ba:	f000 fd3d 	bl	8023138 <_malloc_r>
 80226be:	4604      	mov	r4, r0
 80226c0:	b140      	cbz	r0, 80226d4 <__sfmoreglue+0x28>
 80226c2:	2100      	movs	r1, #0
 80226c4:	e9c0 1600 	strd	r1, r6, [r0]
 80226c8:	300c      	adds	r0, #12
 80226ca:	60a0      	str	r0, [r4, #8]
 80226cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80226d0:	f7fe faae 	bl	8020c30 <memset>
 80226d4:	4620      	mov	r0, r4
 80226d6:	bd70      	pop	{r4, r5, r6, pc}

080226d8 <__sfp_lock_acquire>:
 80226d8:	4801      	ldr	r0, [pc, #4]	; (80226e0 <__sfp_lock_acquire+0x8>)
 80226da:	f000 b8b8 	b.w	802284e <__retarget_lock_acquire_recursive>
 80226de:	bf00      	nop
 80226e0:	2000fdd1 	.word	0x2000fdd1

080226e4 <__sfp_lock_release>:
 80226e4:	4801      	ldr	r0, [pc, #4]	; (80226ec <__sfp_lock_release+0x8>)
 80226e6:	f000 b8b3 	b.w	8022850 <__retarget_lock_release_recursive>
 80226ea:	bf00      	nop
 80226ec:	2000fdd1 	.word	0x2000fdd1

080226f0 <__sinit_lock_acquire>:
 80226f0:	4801      	ldr	r0, [pc, #4]	; (80226f8 <__sinit_lock_acquire+0x8>)
 80226f2:	f000 b8ac 	b.w	802284e <__retarget_lock_acquire_recursive>
 80226f6:	bf00      	nop
 80226f8:	2000fdd2 	.word	0x2000fdd2

080226fc <__sinit_lock_release>:
 80226fc:	4801      	ldr	r0, [pc, #4]	; (8022704 <__sinit_lock_release+0x8>)
 80226fe:	f000 b8a7 	b.w	8022850 <__retarget_lock_release_recursive>
 8022702:	bf00      	nop
 8022704:	2000fdd2 	.word	0x2000fdd2

08022708 <__sinit>:
 8022708:	b510      	push	{r4, lr}
 802270a:	4604      	mov	r4, r0
 802270c:	f7ff fff0 	bl	80226f0 <__sinit_lock_acquire>
 8022710:	69a3      	ldr	r3, [r4, #24]
 8022712:	b11b      	cbz	r3, 802271c <__sinit+0x14>
 8022714:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022718:	f7ff bff0 	b.w	80226fc <__sinit_lock_release>
 802271c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022720:	6523      	str	r3, [r4, #80]	; 0x50
 8022722:	4b13      	ldr	r3, [pc, #76]	; (8022770 <__sinit+0x68>)
 8022724:	4a13      	ldr	r2, [pc, #76]	; (8022774 <__sinit+0x6c>)
 8022726:	681b      	ldr	r3, [r3, #0]
 8022728:	62a2      	str	r2, [r4, #40]	; 0x28
 802272a:	42a3      	cmp	r3, r4
 802272c:	bf04      	itt	eq
 802272e:	2301      	moveq	r3, #1
 8022730:	61a3      	streq	r3, [r4, #24]
 8022732:	4620      	mov	r0, r4
 8022734:	f000 f820 	bl	8022778 <__sfp>
 8022738:	6060      	str	r0, [r4, #4]
 802273a:	4620      	mov	r0, r4
 802273c:	f000 f81c 	bl	8022778 <__sfp>
 8022740:	60a0      	str	r0, [r4, #8]
 8022742:	4620      	mov	r0, r4
 8022744:	f000 f818 	bl	8022778 <__sfp>
 8022748:	2200      	movs	r2, #0
 802274a:	60e0      	str	r0, [r4, #12]
 802274c:	2104      	movs	r1, #4
 802274e:	6860      	ldr	r0, [r4, #4]
 8022750:	f7ff ff82 	bl	8022658 <std>
 8022754:	68a0      	ldr	r0, [r4, #8]
 8022756:	2201      	movs	r2, #1
 8022758:	2109      	movs	r1, #9
 802275a:	f7ff ff7d 	bl	8022658 <std>
 802275e:	68e0      	ldr	r0, [r4, #12]
 8022760:	2202      	movs	r2, #2
 8022762:	2112      	movs	r1, #18
 8022764:	f7ff ff78 	bl	8022658 <std>
 8022768:	2301      	movs	r3, #1
 802276a:	61a3      	str	r3, [r4, #24]
 802276c:	e7d2      	b.n	8022714 <__sinit+0xc>
 802276e:	bf00      	nop
 8022770:	080251e4 	.word	0x080251e4
 8022774:	080226a1 	.word	0x080226a1

08022778 <__sfp>:
 8022778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802277a:	4607      	mov	r7, r0
 802277c:	f7ff ffac 	bl	80226d8 <__sfp_lock_acquire>
 8022780:	4b1e      	ldr	r3, [pc, #120]	; (80227fc <__sfp+0x84>)
 8022782:	681e      	ldr	r6, [r3, #0]
 8022784:	69b3      	ldr	r3, [r6, #24]
 8022786:	b913      	cbnz	r3, 802278e <__sfp+0x16>
 8022788:	4630      	mov	r0, r6
 802278a:	f7ff ffbd 	bl	8022708 <__sinit>
 802278e:	3648      	adds	r6, #72	; 0x48
 8022790:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022794:	3b01      	subs	r3, #1
 8022796:	d503      	bpl.n	80227a0 <__sfp+0x28>
 8022798:	6833      	ldr	r3, [r6, #0]
 802279a:	b30b      	cbz	r3, 80227e0 <__sfp+0x68>
 802279c:	6836      	ldr	r6, [r6, #0]
 802279e:	e7f7      	b.n	8022790 <__sfp+0x18>
 80227a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80227a4:	b9d5      	cbnz	r5, 80227dc <__sfp+0x64>
 80227a6:	4b16      	ldr	r3, [pc, #88]	; (8022800 <__sfp+0x88>)
 80227a8:	60e3      	str	r3, [r4, #12]
 80227aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80227ae:	6665      	str	r5, [r4, #100]	; 0x64
 80227b0:	f000 f84c 	bl	802284c <__retarget_lock_init_recursive>
 80227b4:	f7ff ff96 	bl	80226e4 <__sfp_lock_release>
 80227b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80227bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80227c0:	6025      	str	r5, [r4, #0]
 80227c2:	61a5      	str	r5, [r4, #24]
 80227c4:	2208      	movs	r2, #8
 80227c6:	4629      	mov	r1, r5
 80227c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80227cc:	f7fe fa30 	bl	8020c30 <memset>
 80227d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80227d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80227d8:	4620      	mov	r0, r4
 80227da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80227dc:	3468      	adds	r4, #104	; 0x68
 80227de:	e7d9      	b.n	8022794 <__sfp+0x1c>
 80227e0:	2104      	movs	r1, #4
 80227e2:	4638      	mov	r0, r7
 80227e4:	f7ff ff62 	bl	80226ac <__sfmoreglue>
 80227e8:	4604      	mov	r4, r0
 80227ea:	6030      	str	r0, [r6, #0]
 80227ec:	2800      	cmp	r0, #0
 80227ee:	d1d5      	bne.n	802279c <__sfp+0x24>
 80227f0:	f7ff ff78 	bl	80226e4 <__sfp_lock_release>
 80227f4:	230c      	movs	r3, #12
 80227f6:	603b      	str	r3, [r7, #0]
 80227f8:	e7ee      	b.n	80227d8 <__sfp+0x60>
 80227fa:	bf00      	nop
 80227fc:	080251e4 	.word	0x080251e4
 8022800:	ffff0001 	.word	0xffff0001

08022804 <_fwalk_reent>:
 8022804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022808:	4606      	mov	r6, r0
 802280a:	4688      	mov	r8, r1
 802280c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022810:	2700      	movs	r7, #0
 8022812:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022816:	f1b9 0901 	subs.w	r9, r9, #1
 802281a:	d505      	bpl.n	8022828 <_fwalk_reent+0x24>
 802281c:	6824      	ldr	r4, [r4, #0]
 802281e:	2c00      	cmp	r4, #0
 8022820:	d1f7      	bne.n	8022812 <_fwalk_reent+0xe>
 8022822:	4638      	mov	r0, r7
 8022824:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022828:	89ab      	ldrh	r3, [r5, #12]
 802282a:	2b01      	cmp	r3, #1
 802282c:	d907      	bls.n	802283e <_fwalk_reent+0x3a>
 802282e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022832:	3301      	adds	r3, #1
 8022834:	d003      	beq.n	802283e <_fwalk_reent+0x3a>
 8022836:	4629      	mov	r1, r5
 8022838:	4630      	mov	r0, r6
 802283a:	47c0      	blx	r8
 802283c:	4307      	orrs	r7, r0
 802283e:	3568      	adds	r5, #104	; 0x68
 8022840:	e7e9      	b.n	8022816 <_fwalk_reent+0x12>
	...

08022844 <_localeconv_r>:
 8022844:	4800      	ldr	r0, [pc, #0]	; (8022848 <_localeconv_r+0x4>)
 8022846:	4770      	bx	lr
 8022848:	20000180 	.word	0x20000180

0802284c <__retarget_lock_init_recursive>:
 802284c:	4770      	bx	lr

0802284e <__retarget_lock_acquire_recursive>:
 802284e:	4770      	bx	lr

08022850 <__retarget_lock_release_recursive>:
 8022850:	4770      	bx	lr

08022852 <__swhatbuf_r>:
 8022852:	b570      	push	{r4, r5, r6, lr}
 8022854:	460e      	mov	r6, r1
 8022856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802285a:	2900      	cmp	r1, #0
 802285c:	b096      	sub	sp, #88	; 0x58
 802285e:	4614      	mov	r4, r2
 8022860:	461d      	mov	r5, r3
 8022862:	da08      	bge.n	8022876 <__swhatbuf_r+0x24>
 8022864:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022868:	2200      	movs	r2, #0
 802286a:	602a      	str	r2, [r5, #0]
 802286c:	061a      	lsls	r2, r3, #24
 802286e:	d410      	bmi.n	8022892 <__swhatbuf_r+0x40>
 8022870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022874:	e00e      	b.n	8022894 <__swhatbuf_r+0x42>
 8022876:	466a      	mov	r2, sp
 8022878:	f000 ff1a 	bl	80236b0 <_fstat_r>
 802287c:	2800      	cmp	r0, #0
 802287e:	dbf1      	blt.n	8022864 <__swhatbuf_r+0x12>
 8022880:	9a01      	ldr	r2, [sp, #4]
 8022882:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022886:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802288a:	425a      	negs	r2, r3
 802288c:	415a      	adcs	r2, r3
 802288e:	602a      	str	r2, [r5, #0]
 8022890:	e7ee      	b.n	8022870 <__swhatbuf_r+0x1e>
 8022892:	2340      	movs	r3, #64	; 0x40
 8022894:	2000      	movs	r0, #0
 8022896:	6023      	str	r3, [r4, #0]
 8022898:	b016      	add	sp, #88	; 0x58
 802289a:	bd70      	pop	{r4, r5, r6, pc}

0802289c <__smakebuf_r>:
 802289c:	898b      	ldrh	r3, [r1, #12]
 802289e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80228a0:	079d      	lsls	r5, r3, #30
 80228a2:	4606      	mov	r6, r0
 80228a4:	460c      	mov	r4, r1
 80228a6:	d507      	bpl.n	80228b8 <__smakebuf_r+0x1c>
 80228a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80228ac:	6023      	str	r3, [r4, #0]
 80228ae:	6123      	str	r3, [r4, #16]
 80228b0:	2301      	movs	r3, #1
 80228b2:	6163      	str	r3, [r4, #20]
 80228b4:	b002      	add	sp, #8
 80228b6:	bd70      	pop	{r4, r5, r6, pc}
 80228b8:	ab01      	add	r3, sp, #4
 80228ba:	466a      	mov	r2, sp
 80228bc:	f7ff ffc9 	bl	8022852 <__swhatbuf_r>
 80228c0:	9900      	ldr	r1, [sp, #0]
 80228c2:	4605      	mov	r5, r0
 80228c4:	4630      	mov	r0, r6
 80228c6:	f000 fc37 	bl	8023138 <_malloc_r>
 80228ca:	b948      	cbnz	r0, 80228e0 <__smakebuf_r+0x44>
 80228cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80228d0:	059a      	lsls	r2, r3, #22
 80228d2:	d4ef      	bmi.n	80228b4 <__smakebuf_r+0x18>
 80228d4:	f023 0303 	bic.w	r3, r3, #3
 80228d8:	f043 0302 	orr.w	r3, r3, #2
 80228dc:	81a3      	strh	r3, [r4, #12]
 80228de:	e7e3      	b.n	80228a8 <__smakebuf_r+0xc>
 80228e0:	4b0d      	ldr	r3, [pc, #52]	; (8022918 <__smakebuf_r+0x7c>)
 80228e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80228e4:	89a3      	ldrh	r3, [r4, #12]
 80228e6:	6020      	str	r0, [r4, #0]
 80228e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80228ec:	81a3      	strh	r3, [r4, #12]
 80228ee:	9b00      	ldr	r3, [sp, #0]
 80228f0:	6163      	str	r3, [r4, #20]
 80228f2:	9b01      	ldr	r3, [sp, #4]
 80228f4:	6120      	str	r0, [r4, #16]
 80228f6:	b15b      	cbz	r3, 8022910 <__smakebuf_r+0x74>
 80228f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80228fc:	4630      	mov	r0, r6
 80228fe:	f000 fee9 	bl	80236d4 <_isatty_r>
 8022902:	b128      	cbz	r0, 8022910 <__smakebuf_r+0x74>
 8022904:	89a3      	ldrh	r3, [r4, #12]
 8022906:	f023 0303 	bic.w	r3, r3, #3
 802290a:	f043 0301 	orr.w	r3, r3, #1
 802290e:	81a3      	strh	r3, [r4, #12]
 8022910:	89a0      	ldrh	r0, [r4, #12]
 8022912:	4305      	orrs	r5, r0
 8022914:	81a5      	strh	r5, [r4, #12]
 8022916:	e7cd      	b.n	80228b4 <__smakebuf_r+0x18>
 8022918:	080226a1 	.word	0x080226a1

0802291c <malloc>:
 802291c:	4b02      	ldr	r3, [pc, #8]	; (8022928 <malloc+0xc>)
 802291e:	4601      	mov	r1, r0
 8022920:	6818      	ldr	r0, [r3, #0]
 8022922:	f000 bc09 	b.w	8023138 <_malloc_r>
 8022926:	bf00      	nop
 8022928:	2000002c 	.word	0x2000002c

0802292c <_Balloc>:
 802292c:	b570      	push	{r4, r5, r6, lr}
 802292e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8022930:	4604      	mov	r4, r0
 8022932:	460d      	mov	r5, r1
 8022934:	b976      	cbnz	r6, 8022954 <_Balloc+0x28>
 8022936:	2010      	movs	r0, #16
 8022938:	f7ff fff0 	bl	802291c <malloc>
 802293c:	4602      	mov	r2, r0
 802293e:	6260      	str	r0, [r4, #36]	; 0x24
 8022940:	b920      	cbnz	r0, 802294c <_Balloc+0x20>
 8022942:	4b18      	ldr	r3, [pc, #96]	; (80229a4 <_Balloc+0x78>)
 8022944:	4818      	ldr	r0, [pc, #96]	; (80229a8 <_Balloc+0x7c>)
 8022946:	2166      	movs	r1, #102	; 0x66
 8022948:	f000 fe72 	bl	8023630 <__assert_func>
 802294c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8022950:	6006      	str	r6, [r0, #0]
 8022952:	60c6      	str	r6, [r0, #12]
 8022954:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8022956:	68f3      	ldr	r3, [r6, #12]
 8022958:	b183      	cbz	r3, 802297c <_Balloc+0x50>
 802295a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802295c:	68db      	ldr	r3, [r3, #12]
 802295e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8022962:	b9b8      	cbnz	r0, 8022994 <_Balloc+0x68>
 8022964:	2101      	movs	r1, #1
 8022966:	fa01 f605 	lsl.w	r6, r1, r5
 802296a:	1d72      	adds	r2, r6, #5
 802296c:	0092      	lsls	r2, r2, #2
 802296e:	4620      	mov	r0, r4
 8022970:	f000 fb60 	bl	8023034 <_calloc_r>
 8022974:	b160      	cbz	r0, 8022990 <_Balloc+0x64>
 8022976:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802297a:	e00e      	b.n	802299a <_Balloc+0x6e>
 802297c:	2221      	movs	r2, #33	; 0x21
 802297e:	2104      	movs	r1, #4
 8022980:	4620      	mov	r0, r4
 8022982:	f000 fb57 	bl	8023034 <_calloc_r>
 8022986:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022988:	60f0      	str	r0, [r6, #12]
 802298a:	68db      	ldr	r3, [r3, #12]
 802298c:	2b00      	cmp	r3, #0
 802298e:	d1e4      	bne.n	802295a <_Balloc+0x2e>
 8022990:	2000      	movs	r0, #0
 8022992:	bd70      	pop	{r4, r5, r6, pc}
 8022994:	6802      	ldr	r2, [r0, #0]
 8022996:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802299a:	2300      	movs	r3, #0
 802299c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80229a0:	e7f7      	b.n	8022992 <_Balloc+0x66>
 80229a2:	bf00      	nop
 80229a4:	08025229 	.word	0x08025229
 80229a8:	0802530c 	.word	0x0802530c

080229ac <_Bfree>:
 80229ac:	b570      	push	{r4, r5, r6, lr}
 80229ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80229b0:	4605      	mov	r5, r0
 80229b2:	460c      	mov	r4, r1
 80229b4:	b976      	cbnz	r6, 80229d4 <_Bfree+0x28>
 80229b6:	2010      	movs	r0, #16
 80229b8:	f7ff ffb0 	bl	802291c <malloc>
 80229bc:	4602      	mov	r2, r0
 80229be:	6268      	str	r0, [r5, #36]	; 0x24
 80229c0:	b920      	cbnz	r0, 80229cc <_Bfree+0x20>
 80229c2:	4b09      	ldr	r3, [pc, #36]	; (80229e8 <_Bfree+0x3c>)
 80229c4:	4809      	ldr	r0, [pc, #36]	; (80229ec <_Bfree+0x40>)
 80229c6:	218a      	movs	r1, #138	; 0x8a
 80229c8:	f000 fe32 	bl	8023630 <__assert_func>
 80229cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80229d0:	6006      	str	r6, [r0, #0]
 80229d2:	60c6      	str	r6, [r0, #12]
 80229d4:	b13c      	cbz	r4, 80229e6 <_Bfree+0x3a>
 80229d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80229d8:	6862      	ldr	r2, [r4, #4]
 80229da:	68db      	ldr	r3, [r3, #12]
 80229dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80229e0:	6021      	str	r1, [r4, #0]
 80229e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80229e6:	bd70      	pop	{r4, r5, r6, pc}
 80229e8:	08025229 	.word	0x08025229
 80229ec:	0802530c 	.word	0x0802530c

080229f0 <__multadd>:
 80229f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80229f4:	690d      	ldr	r5, [r1, #16]
 80229f6:	4607      	mov	r7, r0
 80229f8:	460c      	mov	r4, r1
 80229fa:	461e      	mov	r6, r3
 80229fc:	f101 0c14 	add.w	ip, r1, #20
 8022a00:	2000      	movs	r0, #0
 8022a02:	f8dc 3000 	ldr.w	r3, [ip]
 8022a06:	b299      	uxth	r1, r3
 8022a08:	fb02 6101 	mla	r1, r2, r1, r6
 8022a0c:	0c1e      	lsrs	r6, r3, #16
 8022a0e:	0c0b      	lsrs	r3, r1, #16
 8022a10:	fb02 3306 	mla	r3, r2, r6, r3
 8022a14:	b289      	uxth	r1, r1
 8022a16:	3001      	adds	r0, #1
 8022a18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8022a1c:	4285      	cmp	r5, r0
 8022a1e:	f84c 1b04 	str.w	r1, [ip], #4
 8022a22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8022a26:	dcec      	bgt.n	8022a02 <__multadd+0x12>
 8022a28:	b30e      	cbz	r6, 8022a6e <__multadd+0x7e>
 8022a2a:	68a3      	ldr	r3, [r4, #8]
 8022a2c:	42ab      	cmp	r3, r5
 8022a2e:	dc19      	bgt.n	8022a64 <__multadd+0x74>
 8022a30:	6861      	ldr	r1, [r4, #4]
 8022a32:	4638      	mov	r0, r7
 8022a34:	3101      	adds	r1, #1
 8022a36:	f7ff ff79 	bl	802292c <_Balloc>
 8022a3a:	4680      	mov	r8, r0
 8022a3c:	b928      	cbnz	r0, 8022a4a <__multadd+0x5a>
 8022a3e:	4602      	mov	r2, r0
 8022a40:	4b0c      	ldr	r3, [pc, #48]	; (8022a74 <__multadd+0x84>)
 8022a42:	480d      	ldr	r0, [pc, #52]	; (8022a78 <__multadd+0x88>)
 8022a44:	21b5      	movs	r1, #181	; 0xb5
 8022a46:	f000 fdf3 	bl	8023630 <__assert_func>
 8022a4a:	6922      	ldr	r2, [r4, #16]
 8022a4c:	3202      	adds	r2, #2
 8022a4e:	f104 010c 	add.w	r1, r4, #12
 8022a52:	0092      	lsls	r2, r2, #2
 8022a54:	300c      	adds	r0, #12
 8022a56:	f7fe f8dd 	bl	8020c14 <memcpy>
 8022a5a:	4621      	mov	r1, r4
 8022a5c:	4638      	mov	r0, r7
 8022a5e:	f7ff ffa5 	bl	80229ac <_Bfree>
 8022a62:	4644      	mov	r4, r8
 8022a64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8022a68:	3501      	adds	r5, #1
 8022a6a:	615e      	str	r6, [r3, #20]
 8022a6c:	6125      	str	r5, [r4, #16]
 8022a6e:	4620      	mov	r0, r4
 8022a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a74:	0802529b 	.word	0x0802529b
 8022a78:	0802530c 	.word	0x0802530c

08022a7c <__hi0bits>:
 8022a7c:	0c03      	lsrs	r3, r0, #16
 8022a7e:	041b      	lsls	r3, r3, #16
 8022a80:	b9d3      	cbnz	r3, 8022ab8 <__hi0bits+0x3c>
 8022a82:	0400      	lsls	r0, r0, #16
 8022a84:	2310      	movs	r3, #16
 8022a86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8022a8a:	bf04      	itt	eq
 8022a8c:	0200      	lsleq	r0, r0, #8
 8022a8e:	3308      	addeq	r3, #8
 8022a90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022a94:	bf04      	itt	eq
 8022a96:	0100      	lsleq	r0, r0, #4
 8022a98:	3304      	addeq	r3, #4
 8022a9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8022a9e:	bf04      	itt	eq
 8022aa0:	0080      	lsleq	r0, r0, #2
 8022aa2:	3302      	addeq	r3, #2
 8022aa4:	2800      	cmp	r0, #0
 8022aa6:	db05      	blt.n	8022ab4 <__hi0bits+0x38>
 8022aa8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8022aac:	f103 0301 	add.w	r3, r3, #1
 8022ab0:	bf08      	it	eq
 8022ab2:	2320      	moveq	r3, #32
 8022ab4:	4618      	mov	r0, r3
 8022ab6:	4770      	bx	lr
 8022ab8:	2300      	movs	r3, #0
 8022aba:	e7e4      	b.n	8022a86 <__hi0bits+0xa>

08022abc <__lo0bits>:
 8022abc:	6803      	ldr	r3, [r0, #0]
 8022abe:	f013 0207 	ands.w	r2, r3, #7
 8022ac2:	4601      	mov	r1, r0
 8022ac4:	d00b      	beq.n	8022ade <__lo0bits+0x22>
 8022ac6:	07da      	lsls	r2, r3, #31
 8022ac8:	d423      	bmi.n	8022b12 <__lo0bits+0x56>
 8022aca:	0798      	lsls	r0, r3, #30
 8022acc:	bf49      	itett	mi
 8022ace:	085b      	lsrmi	r3, r3, #1
 8022ad0:	089b      	lsrpl	r3, r3, #2
 8022ad2:	2001      	movmi	r0, #1
 8022ad4:	600b      	strmi	r3, [r1, #0]
 8022ad6:	bf5c      	itt	pl
 8022ad8:	600b      	strpl	r3, [r1, #0]
 8022ada:	2002      	movpl	r0, #2
 8022adc:	4770      	bx	lr
 8022ade:	b298      	uxth	r0, r3
 8022ae0:	b9a8      	cbnz	r0, 8022b0e <__lo0bits+0x52>
 8022ae2:	0c1b      	lsrs	r3, r3, #16
 8022ae4:	2010      	movs	r0, #16
 8022ae6:	b2da      	uxtb	r2, r3
 8022ae8:	b90a      	cbnz	r2, 8022aee <__lo0bits+0x32>
 8022aea:	3008      	adds	r0, #8
 8022aec:	0a1b      	lsrs	r3, r3, #8
 8022aee:	071a      	lsls	r2, r3, #28
 8022af0:	bf04      	itt	eq
 8022af2:	091b      	lsreq	r3, r3, #4
 8022af4:	3004      	addeq	r0, #4
 8022af6:	079a      	lsls	r2, r3, #30
 8022af8:	bf04      	itt	eq
 8022afa:	089b      	lsreq	r3, r3, #2
 8022afc:	3002      	addeq	r0, #2
 8022afe:	07da      	lsls	r2, r3, #31
 8022b00:	d403      	bmi.n	8022b0a <__lo0bits+0x4e>
 8022b02:	085b      	lsrs	r3, r3, #1
 8022b04:	f100 0001 	add.w	r0, r0, #1
 8022b08:	d005      	beq.n	8022b16 <__lo0bits+0x5a>
 8022b0a:	600b      	str	r3, [r1, #0]
 8022b0c:	4770      	bx	lr
 8022b0e:	4610      	mov	r0, r2
 8022b10:	e7e9      	b.n	8022ae6 <__lo0bits+0x2a>
 8022b12:	2000      	movs	r0, #0
 8022b14:	4770      	bx	lr
 8022b16:	2020      	movs	r0, #32
 8022b18:	4770      	bx	lr
	...

08022b1c <__i2b>:
 8022b1c:	b510      	push	{r4, lr}
 8022b1e:	460c      	mov	r4, r1
 8022b20:	2101      	movs	r1, #1
 8022b22:	f7ff ff03 	bl	802292c <_Balloc>
 8022b26:	4602      	mov	r2, r0
 8022b28:	b928      	cbnz	r0, 8022b36 <__i2b+0x1a>
 8022b2a:	4b05      	ldr	r3, [pc, #20]	; (8022b40 <__i2b+0x24>)
 8022b2c:	4805      	ldr	r0, [pc, #20]	; (8022b44 <__i2b+0x28>)
 8022b2e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8022b32:	f000 fd7d 	bl	8023630 <__assert_func>
 8022b36:	2301      	movs	r3, #1
 8022b38:	6144      	str	r4, [r0, #20]
 8022b3a:	6103      	str	r3, [r0, #16]
 8022b3c:	bd10      	pop	{r4, pc}
 8022b3e:	bf00      	nop
 8022b40:	0802529b 	.word	0x0802529b
 8022b44:	0802530c 	.word	0x0802530c

08022b48 <__multiply>:
 8022b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022b4c:	4691      	mov	r9, r2
 8022b4e:	690a      	ldr	r2, [r1, #16]
 8022b50:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022b54:	429a      	cmp	r2, r3
 8022b56:	bfb8      	it	lt
 8022b58:	460b      	movlt	r3, r1
 8022b5a:	460c      	mov	r4, r1
 8022b5c:	bfbc      	itt	lt
 8022b5e:	464c      	movlt	r4, r9
 8022b60:	4699      	movlt	r9, r3
 8022b62:	6927      	ldr	r7, [r4, #16]
 8022b64:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8022b68:	68a3      	ldr	r3, [r4, #8]
 8022b6a:	6861      	ldr	r1, [r4, #4]
 8022b6c:	eb07 060a 	add.w	r6, r7, sl
 8022b70:	42b3      	cmp	r3, r6
 8022b72:	b085      	sub	sp, #20
 8022b74:	bfb8      	it	lt
 8022b76:	3101      	addlt	r1, #1
 8022b78:	f7ff fed8 	bl	802292c <_Balloc>
 8022b7c:	b930      	cbnz	r0, 8022b8c <__multiply+0x44>
 8022b7e:	4602      	mov	r2, r0
 8022b80:	4b44      	ldr	r3, [pc, #272]	; (8022c94 <__multiply+0x14c>)
 8022b82:	4845      	ldr	r0, [pc, #276]	; (8022c98 <__multiply+0x150>)
 8022b84:	f240 115d 	movw	r1, #349	; 0x15d
 8022b88:	f000 fd52 	bl	8023630 <__assert_func>
 8022b8c:	f100 0514 	add.w	r5, r0, #20
 8022b90:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022b94:	462b      	mov	r3, r5
 8022b96:	2200      	movs	r2, #0
 8022b98:	4543      	cmp	r3, r8
 8022b9a:	d321      	bcc.n	8022be0 <__multiply+0x98>
 8022b9c:	f104 0314 	add.w	r3, r4, #20
 8022ba0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022ba4:	f109 0314 	add.w	r3, r9, #20
 8022ba8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8022bac:	9202      	str	r2, [sp, #8]
 8022bae:	1b3a      	subs	r2, r7, r4
 8022bb0:	3a15      	subs	r2, #21
 8022bb2:	f022 0203 	bic.w	r2, r2, #3
 8022bb6:	3204      	adds	r2, #4
 8022bb8:	f104 0115 	add.w	r1, r4, #21
 8022bbc:	428f      	cmp	r7, r1
 8022bbe:	bf38      	it	cc
 8022bc0:	2204      	movcc	r2, #4
 8022bc2:	9201      	str	r2, [sp, #4]
 8022bc4:	9a02      	ldr	r2, [sp, #8]
 8022bc6:	9303      	str	r3, [sp, #12]
 8022bc8:	429a      	cmp	r2, r3
 8022bca:	d80c      	bhi.n	8022be6 <__multiply+0x9e>
 8022bcc:	2e00      	cmp	r6, #0
 8022bce:	dd03      	ble.n	8022bd8 <__multiply+0x90>
 8022bd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022bd4:	2b00      	cmp	r3, #0
 8022bd6:	d05a      	beq.n	8022c8e <__multiply+0x146>
 8022bd8:	6106      	str	r6, [r0, #16]
 8022bda:	b005      	add	sp, #20
 8022bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022be0:	f843 2b04 	str.w	r2, [r3], #4
 8022be4:	e7d8      	b.n	8022b98 <__multiply+0x50>
 8022be6:	f8b3 a000 	ldrh.w	sl, [r3]
 8022bea:	f1ba 0f00 	cmp.w	sl, #0
 8022bee:	d024      	beq.n	8022c3a <__multiply+0xf2>
 8022bf0:	f104 0e14 	add.w	lr, r4, #20
 8022bf4:	46a9      	mov	r9, r5
 8022bf6:	f04f 0c00 	mov.w	ip, #0
 8022bfa:	f85e 2b04 	ldr.w	r2, [lr], #4
 8022bfe:	f8d9 1000 	ldr.w	r1, [r9]
 8022c02:	fa1f fb82 	uxth.w	fp, r2
 8022c06:	b289      	uxth	r1, r1
 8022c08:	fb0a 110b 	mla	r1, sl, fp, r1
 8022c0c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022c10:	f8d9 2000 	ldr.w	r2, [r9]
 8022c14:	4461      	add	r1, ip
 8022c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022c1a:	fb0a c20b 	mla	r2, sl, fp, ip
 8022c1e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022c22:	b289      	uxth	r1, r1
 8022c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022c28:	4577      	cmp	r7, lr
 8022c2a:	f849 1b04 	str.w	r1, [r9], #4
 8022c2e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8022c32:	d8e2      	bhi.n	8022bfa <__multiply+0xb2>
 8022c34:	9a01      	ldr	r2, [sp, #4]
 8022c36:	f845 c002 	str.w	ip, [r5, r2]
 8022c3a:	9a03      	ldr	r2, [sp, #12]
 8022c3c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8022c40:	3304      	adds	r3, #4
 8022c42:	f1b9 0f00 	cmp.w	r9, #0
 8022c46:	d020      	beq.n	8022c8a <__multiply+0x142>
 8022c48:	6829      	ldr	r1, [r5, #0]
 8022c4a:	f104 0c14 	add.w	ip, r4, #20
 8022c4e:	46ae      	mov	lr, r5
 8022c50:	f04f 0a00 	mov.w	sl, #0
 8022c54:	f8bc b000 	ldrh.w	fp, [ip]
 8022c58:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8022c5c:	fb09 220b 	mla	r2, r9, fp, r2
 8022c60:	4492      	add	sl, r2
 8022c62:	b289      	uxth	r1, r1
 8022c64:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8022c68:	f84e 1b04 	str.w	r1, [lr], #4
 8022c6c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8022c70:	f8be 1000 	ldrh.w	r1, [lr]
 8022c74:	0c12      	lsrs	r2, r2, #16
 8022c76:	fb09 1102 	mla	r1, r9, r2, r1
 8022c7a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8022c7e:	4567      	cmp	r7, ip
 8022c80:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8022c84:	d8e6      	bhi.n	8022c54 <__multiply+0x10c>
 8022c86:	9a01      	ldr	r2, [sp, #4]
 8022c88:	50a9      	str	r1, [r5, r2]
 8022c8a:	3504      	adds	r5, #4
 8022c8c:	e79a      	b.n	8022bc4 <__multiply+0x7c>
 8022c8e:	3e01      	subs	r6, #1
 8022c90:	e79c      	b.n	8022bcc <__multiply+0x84>
 8022c92:	bf00      	nop
 8022c94:	0802529b 	.word	0x0802529b
 8022c98:	0802530c 	.word	0x0802530c

08022c9c <__pow5mult>:
 8022c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022ca0:	4615      	mov	r5, r2
 8022ca2:	f012 0203 	ands.w	r2, r2, #3
 8022ca6:	4606      	mov	r6, r0
 8022ca8:	460f      	mov	r7, r1
 8022caa:	d007      	beq.n	8022cbc <__pow5mult+0x20>
 8022cac:	4c25      	ldr	r4, [pc, #148]	; (8022d44 <__pow5mult+0xa8>)
 8022cae:	3a01      	subs	r2, #1
 8022cb0:	2300      	movs	r3, #0
 8022cb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022cb6:	f7ff fe9b 	bl	80229f0 <__multadd>
 8022cba:	4607      	mov	r7, r0
 8022cbc:	10ad      	asrs	r5, r5, #2
 8022cbe:	d03d      	beq.n	8022d3c <__pow5mult+0xa0>
 8022cc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022cc2:	b97c      	cbnz	r4, 8022ce4 <__pow5mult+0x48>
 8022cc4:	2010      	movs	r0, #16
 8022cc6:	f7ff fe29 	bl	802291c <malloc>
 8022cca:	4602      	mov	r2, r0
 8022ccc:	6270      	str	r0, [r6, #36]	; 0x24
 8022cce:	b928      	cbnz	r0, 8022cdc <__pow5mult+0x40>
 8022cd0:	4b1d      	ldr	r3, [pc, #116]	; (8022d48 <__pow5mult+0xac>)
 8022cd2:	481e      	ldr	r0, [pc, #120]	; (8022d4c <__pow5mult+0xb0>)
 8022cd4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022cd8:	f000 fcaa 	bl	8023630 <__assert_func>
 8022cdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022ce0:	6004      	str	r4, [r0, #0]
 8022ce2:	60c4      	str	r4, [r0, #12]
 8022ce4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022ce8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8022cec:	b94c      	cbnz	r4, 8022d02 <__pow5mult+0x66>
 8022cee:	f240 2171 	movw	r1, #625	; 0x271
 8022cf2:	4630      	mov	r0, r6
 8022cf4:	f7ff ff12 	bl	8022b1c <__i2b>
 8022cf8:	2300      	movs	r3, #0
 8022cfa:	f8c8 0008 	str.w	r0, [r8, #8]
 8022cfe:	4604      	mov	r4, r0
 8022d00:	6003      	str	r3, [r0, #0]
 8022d02:	f04f 0900 	mov.w	r9, #0
 8022d06:	07eb      	lsls	r3, r5, #31
 8022d08:	d50a      	bpl.n	8022d20 <__pow5mult+0x84>
 8022d0a:	4639      	mov	r1, r7
 8022d0c:	4622      	mov	r2, r4
 8022d0e:	4630      	mov	r0, r6
 8022d10:	f7ff ff1a 	bl	8022b48 <__multiply>
 8022d14:	4639      	mov	r1, r7
 8022d16:	4680      	mov	r8, r0
 8022d18:	4630      	mov	r0, r6
 8022d1a:	f7ff fe47 	bl	80229ac <_Bfree>
 8022d1e:	4647      	mov	r7, r8
 8022d20:	106d      	asrs	r5, r5, #1
 8022d22:	d00b      	beq.n	8022d3c <__pow5mult+0xa0>
 8022d24:	6820      	ldr	r0, [r4, #0]
 8022d26:	b938      	cbnz	r0, 8022d38 <__pow5mult+0x9c>
 8022d28:	4622      	mov	r2, r4
 8022d2a:	4621      	mov	r1, r4
 8022d2c:	4630      	mov	r0, r6
 8022d2e:	f7ff ff0b 	bl	8022b48 <__multiply>
 8022d32:	6020      	str	r0, [r4, #0]
 8022d34:	f8c0 9000 	str.w	r9, [r0]
 8022d38:	4604      	mov	r4, r0
 8022d3a:	e7e4      	b.n	8022d06 <__pow5mult+0x6a>
 8022d3c:	4638      	mov	r0, r7
 8022d3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022d42:	bf00      	nop
 8022d44:	08025458 	.word	0x08025458
 8022d48:	08025229 	.word	0x08025229
 8022d4c:	0802530c 	.word	0x0802530c

08022d50 <__lshift>:
 8022d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022d54:	460c      	mov	r4, r1
 8022d56:	6849      	ldr	r1, [r1, #4]
 8022d58:	6923      	ldr	r3, [r4, #16]
 8022d5a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8022d5e:	68a3      	ldr	r3, [r4, #8]
 8022d60:	4607      	mov	r7, r0
 8022d62:	4691      	mov	r9, r2
 8022d64:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8022d68:	f108 0601 	add.w	r6, r8, #1
 8022d6c:	42b3      	cmp	r3, r6
 8022d6e:	db0b      	blt.n	8022d88 <__lshift+0x38>
 8022d70:	4638      	mov	r0, r7
 8022d72:	f7ff fddb 	bl	802292c <_Balloc>
 8022d76:	4605      	mov	r5, r0
 8022d78:	b948      	cbnz	r0, 8022d8e <__lshift+0x3e>
 8022d7a:	4602      	mov	r2, r0
 8022d7c:	4b2a      	ldr	r3, [pc, #168]	; (8022e28 <__lshift+0xd8>)
 8022d7e:	482b      	ldr	r0, [pc, #172]	; (8022e2c <__lshift+0xdc>)
 8022d80:	f240 11d9 	movw	r1, #473	; 0x1d9
 8022d84:	f000 fc54 	bl	8023630 <__assert_func>
 8022d88:	3101      	adds	r1, #1
 8022d8a:	005b      	lsls	r3, r3, #1
 8022d8c:	e7ee      	b.n	8022d6c <__lshift+0x1c>
 8022d8e:	2300      	movs	r3, #0
 8022d90:	f100 0114 	add.w	r1, r0, #20
 8022d94:	f100 0210 	add.w	r2, r0, #16
 8022d98:	4618      	mov	r0, r3
 8022d9a:	4553      	cmp	r3, sl
 8022d9c:	db37      	blt.n	8022e0e <__lshift+0xbe>
 8022d9e:	6920      	ldr	r0, [r4, #16]
 8022da0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022da4:	f104 0314 	add.w	r3, r4, #20
 8022da8:	f019 091f 	ands.w	r9, r9, #31
 8022dac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022db0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022db4:	d02f      	beq.n	8022e16 <__lshift+0xc6>
 8022db6:	f1c9 0e20 	rsb	lr, r9, #32
 8022dba:	468a      	mov	sl, r1
 8022dbc:	f04f 0c00 	mov.w	ip, #0
 8022dc0:	681a      	ldr	r2, [r3, #0]
 8022dc2:	fa02 f209 	lsl.w	r2, r2, r9
 8022dc6:	ea42 020c 	orr.w	r2, r2, ip
 8022dca:	f84a 2b04 	str.w	r2, [sl], #4
 8022dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8022dd2:	4298      	cmp	r0, r3
 8022dd4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022dd8:	d8f2      	bhi.n	8022dc0 <__lshift+0x70>
 8022dda:	1b03      	subs	r3, r0, r4
 8022ddc:	3b15      	subs	r3, #21
 8022dde:	f023 0303 	bic.w	r3, r3, #3
 8022de2:	3304      	adds	r3, #4
 8022de4:	f104 0215 	add.w	r2, r4, #21
 8022de8:	4290      	cmp	r0, r2
 8022dea:	bf38      	it	cc
 8022dec:	2304      	movcc	r3, #4
 8022dee:	f841 c003 	str.w	ip, [r1, r3]
 8022df2:	f1bc 0f00 	cmp.w	ip, #0
 8022df6:	d001      	beq.n	8022dfc <__lshift+0xac>
 8022df8:	f108 0602 	add.w	r6, r8, #2
 8022dfc:	3e01      	subs	r6, #1
 8022dfe:	4638      	mov	r0, r7
 8022e00:	612e      	str	r6, [r5, #16]
 8022e02:	4621      	mov	r1, r4
 8022e04:	f7ff fdd2 	bl	80229ac <_Bfree>
 8022e08:	4628      	mov	r0, r5
 8022e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022e12:	3301      	adds	r3, #1
 8022e14:	e7c1      	b.n	8022d9a <__lshift+0x4a>
 8022e16:	3904      	subs	r1, #4
 8022e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8022e1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022e20:	4298      	cmp	r0, r3
 8022e22:	d8f9      	bhi.n	8022e18 <__lshift+0xc8>
 8022e24:	e7ea      	b.n	8022dfc <__lshift+0xac>
 8022e26:	bf00      	nop
 8022e28:	0802529b 	.word	0x0802529b
 8022e2c:	0802530c 	.word	0x0802530c

08022e30 <__mcmp>:
 8022e30:	b530      	push	{r4, r5, lr}
 8022e32:	6902      	ldr	r2, [r0, #16]
 8022e34:	690c      	ldr	r4, [r1, #16]
 8022e36:	1b12      	subs	r2, r2, r4
 8022e38:	d10e      	bne.n	8022e58 <__mcmp+0x28>
 8022e3a:	f100 0314 	add.w	r3, r0, #20
 8022e3e:	3114      	adds	r1, #20
 8022e40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8022e44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8022e48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8022e4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8022e50:	42a5      	cmp	r5, r4
 8022e52:	d003      	beq.n	8022e5c <__mcmp+0x2c>
 8022e54:	d305      	bcc.n	8022e62 <__mcmp+0x32>
 8022e56:	2201      	movs	r2, #1
 8022e58:	4610      	mov	r0, r2
 8022e5a:	bd30      	pop	{r4, r5, pc}
 8022e5c:	4283      	cmp	r3, r0
 8022e5e:	d3f3      	bcc.n	8022e48 <__mcmp+0x18>
 8022e60:	e7fa      	b.n	8022e58 <__mcmp+0x28>
 8022e62:	f04f 32ff 	mov.w	r2, #4294967295
 8022e66:	e7f7      	b.n	8022e58 <__mcmp+0x28>

08022e68 <__mdiff>:
 8022e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e6c:	460c      	mov	r4, r1
 8022e6e:	4606      	mov	r6, r0
 8022e70:	4611      	mov	r1, r2
 8022e72:	4620      	mov	r0, r4
 8022e74:	4690      	mov	r8, r2
 8022e76:	f7ff ffdb 	bl	8022e30 <__mcmp>
 8022e7a:	1e05      	subs	r5, r0, #0
 8022e7c:	d110      	bne.n	8022ea0 <__mdiff+0x38>
 8022e7e:	4629      	mov	r1, r5
 8022e80:	4630      	mov	r0, r6
 8022e82:	f7ff fd53 	bl	802292c <_Balloc>
 8022e86:	b930      	cbnz	r0, 8022e96 <__mdiff+0x2e>
 8022e88:	4b3a      	ldr	r3, [pc, #232]	; (8022f74 <__mdiff+0x10c>)
 8022e8a:	4602      	mov	r2, r0
 8022e8c:	f240 2132 	movw	r1, #562	; 0x232
 8022e90:	4839      	ldr	r0, [pc, #228]	; (8022f78 <__mdiff+0x110>)
 8022e92:	f000 fbcd 	bl	8023630 <__assert_func>
 8022e96:	2301      	movs	r3, #1
 8022e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8022e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ea0:	bfa4      	itt	ge
 8022ea2:	4643      	movge	r3, r8
 8022ea4:	46a0      	movge	r8, r4
 8022ea6:	4630      	mov	r0, r6
 8022ea8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8022eac:	bfa6      	itte	ge
 8022eae:	461c      	movge	r4, r3
 8022eb0:	2500      	movge	r5, #0
 8022eb2:	2501      	movlt	r5, #1
 8022eb4:	f7ff fd3a 	bl	802292c <_Balloc>
 8022eb8:	b920      	cbnz	r0, 8022ec4 <__mdiff+0x5c>
 8022eba:	4b2e      	ldr	r3, [pc, #184]	; (8022f74 <__mdiff+0x10c>)
 8022ebc:	4602      	mov	r2, r0
 8022ebe:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022ec2:	e7e5      	b.n	8022e90 <__mdiff+0x28>
 8022ec4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022ec8:	6926      	ldr	r6, [r4, #16]
 8022eca:	60c5      	str	r5, [r0, #12]
 8022ecc:	f104 0914 	add.w	r9, r4, #20
 8022ed0:	f108 0514 	add.w	r5, r8, #20
 8022ed4:	f100 0e14 	add.w	lr, r0, #20
 8022ed8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8022edc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022ee0:	f108 0210 	add.w	r2, r8, #16
 8022ee4:	46f2      	mov	sl, lr
 8022ee6:	2100      	movs	r1, #0
 8022ee8:	f859 3b04 	ldr.w	r3, [r9], #4
 8022eec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022ef0:	fa1f f883 	uxth.w	r8, r3
 8022ef4:	fa11 f18b 	uxtah	r1, r1, fp
 8022ef8:	0c1b      	lsrs	r3, r3, #16
 8022efa:	eba1 0808 	sub.w	r8, r1, r8
 8022efe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022f02:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022f06:	fa1f f888 	uxth.w	r8, r8
 8022f0a:	1419      	asrs	r1, r3, #16
 8022f0c:	454e      	cmp	r6, r9
 8022f0e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022f12:	f84a 3b04 	str.w	r3, [sl], #4
 8022f16:	d8e7      	bhi.n	8022ee8 <__mdiff+0x80>
 8022f18:	1b33      	subs	r3, r6, r4
 8022f1a:	3b15      	subs	r3, #21
 8022f1c:	f023 0303 	bic.w	r3, r3, #3
 8022f20:	3304      	adds	r3, #4
 8022f22:	3415      	adds	r4, #21
 8022f24:	42a6      	cmp	r6, r4
 8022f26:	bf38      	it	cc
 8022f28:	2304      	movcc	r3, #4
 8022f2a:	441d      	add	r5, r3
 8022f2c:	4473      	add	r3, lr
 8022f2e:	469e      	mov	lr, r3
 8022f30:	462e      	mov	r6, r5
 8022f32:	4566      	cmp	r6, ip
 8022f34:	d30e      	bcc.n	8022f54 <__mdiff+0xec>
 8022f36:	f10c 0203 	add.w	r2, ip, #3
 8022f3a:	1b52      	subs	r2, r2, r5
 8022f3c:	f022 0203 	bic.w	r2, r2, #3
 8022f40:	3d03      	subs	r5, #3
 8022f42:	45ac      	cmp	ip, r5
 8022f44:	bf38      	it	cc
 8022f46:	2200      	movcc	r2, #0
 8022f48:	441a      	add	r2, r3
 8022f4a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8022f4e:	b17b      	cbz	r3, 8022f70 <__mdiff+0x108>
 8022f50:	6107      	str	r7, [r0, #16]
 8022f52:	e7a3      	b.n	8022e9c <__mdiff+0x34>
 8022f54:	f856 8b04 	ldr.w	r8, [r6], #4
 8022f58:	fa11 f288 	uxtah	r2, r1, r8
 8022f5c:	1414      	asrs	r4, r2, #16
 8022f5e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8022f62:	b292      	uxth	r2, r2
 8022f64:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8022f68:	f84e 2b04 	str.w	r2, [lr], #4
 8022f6c:	1421      	asrs	r1, r4, #16
 8022f6e:	e7e0      	b.n	8022f32 <__mdiff+0xca>
 8022f70:	3f01      	subs	r7, #1
 8022f72:	e7ea      	b.n	8022f4a <__mdiff+0xe2>
 8022f74:	0802529b 	.word	0x0802529b
 8022f78:	0802530c 	.word	0x0802530c

08022f7c <__d2b>:
 8022f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022f80:	4689      	mov	r9, r1
 8022f82:	2101      	movs	r1, #1
 8022f84:	ec57 6b10 	vmov	r6, r7, d0
 8022f88:	4690      	mov	r8, r2
 8022f8a:	f7ff fccf 	bl	802292c <_Balloc>
 8022f8e:	4604      	mov	r4, r0
 8022f90:	b930      	cbnz	r0, 8022fa0 <__d2b+0x24>
 8022f92:	4602      	mov	r2, r0
 8022f94:	4b25      	ldr	r3, [pc, #148]	; (802302c <__d2b+0xb0>)
 8022f96:	4826      	ldr	r0, [pc, #152]	; (8023030 <__d2b+0xb4>)
 8022f98:	f240 310a 	movw	r1, #778	; 0x30a
 8022f9c:	f000 fb48 	bl	8023630 <__assert_func>
 8022fa0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022fa4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022fa8:	bb35      	cbnz	r5, 8022ff8 <__d2b+0x7c>
 8022faa:	2e00      	cmp	r6, #0
 8022fac:	9301      	str	r3, [sp, #4]
 8022fae:	d028      	beq.n	8023002 <__d2b+0x86>
 8022fb0:	4668      	mov	r0, sp
 8022fb2:	9600      	str	r6, [sp, #0]
 8022fb4:	f7ff fd82 	bl	8022abc <__lo0bits>
 8022fb8:	9900      	ldr	r1, [sp, #0]
 8022fba:	b300      	cbz	r0, 8022ffe <__d2b+0x82>
 8022fbc:	9a01      	ldr	r2, [sp, #4]
 8022fbe:	f1c0 0320 	rsb	r3, r0, #32
 8022fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8022fc6:	430b      	orrs	r3, r1
 8022fc8:	40c2      	lsrs	r2, r0
 8022fca:	6163      	str	r3, [r4, #20]
 8022fcc:	9201      	str	r2, [sp, #4]
 8022fce:	9b01      	ldr	r3, [sp, #4]
 8022fd0:	61a3      	str	r3, [r4, #24]
 8022fd2:	2b00      	cmp	r3, #0
 8022fd4:	bf14      	ite	ne
 8022fd6:	2202      	movne	r2, #2
 8022fd8:	2201      	moveq	r2, #1
 8022fda:	6122      	str	r2, [r4, #16]
 8022fdc:	b1d5      	cbz	r5, 8023014 <__d2b+0x98>
 8022fde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022fe2:	4405      	add	r5, r0
 8022fe4:	f8c9 5000 	str.w	r5, [r9]
 8022fe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8022fec:	f8c8 0000 	str.w	r0, [r8]
 8022ff0:	4620      	mov	r0, r4
 8022ff2:	b003      	add	sp, #12
 8022ff4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8022ffc:	e7d5      	b.n	8022faa <__d2b+0x2e>
 8022ffe:	6161      	str	r1, [r4, #20]
 8023000:	e7e5      	b.n	8022fce <__d2b+0x52>
 8023002:	a801      	add	r0, sp, #4
 8023004:	f7ff fd5a 	bl	8022abc <__lo0bits>
 8023008:	9b01      	ldr	r3, [sp, #4]
 802300a:	6163      	str	r3, [r4, #20]
 802300c:	2201      	movs	r2, #1
 802300e:	6122      	str	r2, [r4, #16]
 8023010:	3020      	adds	r0, #32
 8023012:	e7e3      	b.n	8022fdc <__d2b+0x60>
 8023014:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8023018:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802301c:	f8c9 0000 	str.w	r0, [r9]
 8023020:	6918      	ldr	r0, [r3, #16]
 8023022:	f7ff fd2b 	bl	8022a7c <__hi0bits>
 8023026:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802302a:	e7df      	b.n	8022fec <__d2b+0x70>
 802302c:	0802529b 	.word	0x0802529b
 8023030:	0802530c 	.word	0x0802530c

08023034 <_calloc_r>:
 8023034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023036:	fba1 2402 	umull	r2, r4, r1, r2
 802303a:	b94c      	cbnz	r4, 8023050 <_calloc_r+0x1c>
 802303c:	4611      	mov	r1, r2
 802303e:	9201      	str	r2, [sp, #4]
 8023040:	f000 f87a 	bl	8023138 <_malloc_r>
 8023044:	9a01      	ldr	r2, [sp, #4]
 8023046:	4605      	mov	r5, r0
 8023048:	b930      	cbnz	r0, 8023058 <_calloc_r+0x24>
 802304a:	4628      	mov	r0, r5
 802304c:	b003      	add	sp, #12
 802304e:	bd30      	pop	{r4, r5, pc}
 8023050:	220c      	movs	r2, #12
 8023052:	6002      	str	r2, [r0, #0]
 8023054:	2500      	movs	r5, #0
 8023056:	e7f8      	b.n	802304a <_calloc_r+0x16>
 8023058:	4621      	mov	r1, r4
 802305a:	f7fd fde9 	bl	8020c30 <memset>
 802305e:	e7f4      	b.n	802304a <_calloc_r+0x16>

08023060 <_free_r>:
 8023060:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023062:	2900      	cmp	r1, #0
 8023064:	d044      	beq.n	80230f0 <_free_r+0x90>
 8023066:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802306a:	9001      	str	r0, [sp, #4]
 802306c:	2b00      	cmp	r3, #0
 802306e:	f1a1 0404 	sub.w	r4, r1, #4
 8023072:	bfb8      	it	lt
 8023074:	18e4      	addlt	r4, r4, r3
 8023076:	f000 fb61 	bl	802373c <__malloc_lock>
 802307a:	4a1e      	ldr	r2, [pc, #120]	; (80230f4 <_free_r+0x94>)
 802307c:	9801      	ldr	r0, [sp, #4]
 802307e:	6813      	ldr	r3, [r2, #0]
 8023080:	b933      	cbnz	r3, 8023090 <_free_r+0x30>
 8023082:	6063      	str	r3, [r4, #4]
 8023084:	6014      	str	r4, [r2, #0]
 8023086:	b003      	add	sp, #12
 8023088:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802308c:	f000 bb5c 	b.w	8023748 <__malloc_unlock>
 8023090:	42a3      	cmp	r3, r4
 8023092:	d908      	bls.n	80230a6 <_free_r+0x46>
 8023094:	6825      	ldr	r5, [r4, #0]
 8023096:	1961      	adds	r1, r4, r5
 8023098:	428b      	cmp	r3, r1
 802309a:	bf01      	itttt	eq
 802309c:	6819      	ldreq	r1, [r3, #0]
 802309e:	685b      	ldreq	r3, [r3, #4]
 80230a0:	1949      	addeq	r1, r1, r5
 80230a2:	6021      	streq	r1, [r4, #0]
 80230a4:	e7ed      	b.n	8023082 <_free_r+0x22>
 80230a6:	461a      	mov	r2, r3
 80230a8:	685b      	ldr	r3, [r3, #4]
 80230aa:	b10b      	cbz	r3, 80230b0 <_free_r+0x50>
 80230ac:	42a3      	cmp	r3, r4
 80230ae:	d9fa      	bls.n	80230a6 <_free_r+0x46>
 80230b0:	6811      	ldr	r1, [r2, #0]
 80230b2:	1855      	adds	r5, r2, r1
 80230b4:	42a5      	cmp	r5, r4
 80230b6:	d10b      	bne.n	80230d0 <_free_r+0x70>
 80230b8:	6824      	ldr	r4, [r4, #0]
 80230ba:	4421      	add	r1, r4
 80230bc:	1854      	adds	r4, r2, r1
 80230be:	42a3      	cmp	r3, r4
 80230c0:	6011      	str	r1, [r2, #0]
 80230c2:	d1e0      	bne.n	8023086 <_free_r+0x26>
 80230c4:	681c      	ldr	r4, [r3, #0]
 80230c6:	685b      	ldr	r3, [r3, #4]
 80230c8:	6053      	str	r3, [r2, #4]
 80230ca:	4421      	add	r1, r4
 80230cc:	6011      	str	r1, [r2, #0]
 80230ce:	e7da      	b.n	8023086 <_free_r+0x26>
 80230d0:	d902      	bls.n	80230d8 <_free_r+0x78>
 80230d2:	230c      	movs	r3, #12
 80230d4:	6003      	str	r3, [r0, #0]
 80230d6:	e7d6      	b.n	8023086 <_free_r+0x26>
 80230d8:	6825      	ldr	r5, [r4, #0]
 80230da:	1961      	adds	r1, r4, r5
 80230dc:	428b      	cmp	r3, r1
 80230de:	bf04      	itt	eq
 80230e0:	6819      	ldreq	r1, [r3, #0]
 80230e2:	685b      	ldreq	r3, [r3, #4]
 80230e4:	6063      	str	r3, [r4, #4]
 80230e6:	bf04      	itt	eq
 80230e8:	1949      	addeq	r1, r1, r5
 80230ea:	6021      	streq	r1, [r4, #0]
 80230ec:	6054      	str	r4, [r2, #4]
 80230ee:	e7ca      	b.n	8023086 <_free_r+0x26>
 80230f0:	b003      	add	sp, #12
 80230f2:	bd30      	pop	{r4, r5, pc}
 80230f4:	2000fdd4 	.word	0x2000fdd4

080230f8 <sbrk_aligned>:
 80230f8:	b570      	push	{r4, r5, r6, lr}
 80230fa:	4e0e      	ldr	r6, [pc, #56]	; (8023134 <sbrk_aligned+0x3c>)
 80230fc:	460c      	mov	r4, r1
 80230fe:	6831      	ldr	r1, [r6, #0]
 8023100:	4605      	mov	r5, r0
 8023102:	b911      	cbnz	r1, 802310a <sbrk_aligned+0x12>
 8023104:	f000 fa2e 	bl	8023564 <_sbrk_r>
 8023108:	6030      	str	r0, [r6, #0]
 802310a:	4621      	mov	r1, r4
 802310c:	4628      	mov	r0, r5
 802310e:	f000 fa29 	bl	8023564 <_sbrk_r>
 8023112:	1c43      	adds	r3, r0, #1
 8023114:	d00a      	beq.n	802312c <sbrk_aligned+0x34>
 8023116:	1cc4      	adds	r4, r0, #3
 8023118:	f024 0403 	bic.w	r4, r4, #3
 802311c:	42a0      	cmp	r0, r4
 802311e:	d007      	beq.n	8023130 <sbrk_aligned+0x38>
 8023120:	1a21      	subs	r1, r4, r0
 8023122:	4628      	mov	r0, r5
 8023124:	f000 fa1e 	bl	8023564 <_sbrk_r>
 8023128:	3001      	adds	r0, #1
 802312a:	d101      	bne.n	8023130 <sbrk_aligned+0x38>
 802312c:	f04f 34ff 	mov.w	r4, #4294967295
 8023130:	4620      	mov	r0, r4
 8023132:	bd70      	pop	{r4, r5, r6, pc}
 8023134:	2000fdd8 	.word	0x2000fdd8

08023138 <_malloc_r>:
 8023138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802313c:	1ccd      	adds	r5, r1, #3
 802313e:	f025 0503 	bic.w	r5, r5, #3
 8023142:	3508      	adds	r5, #8
 8023144:	2d0c      	cmp	r5, #12
 8023146:	bf38      	it	cc
 8023148:	250c      	movcc	r5, #12
 802314a:	2d00      	cmp	r5, #0
 802314c:	4607      	mov	r7, r0
 802314e:	db01      	blt.n	8023154 <_malloc_r+0x1c>
 8023150:	42a9      	cmp	r1, r5
 8023152:	d905      	bls.n	8023160 <_malloc_r+0x28>
 8023154:	230c      	movs	r3, #12
 8023156:	603b      	str	r3, [r7, #0]
 8023158:	2600      	movs	r6, #0
 802315a:	4630      	mov	r0, r6
 802315c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023160:	4e2e      	ldr	r6, [pc, #184]	; (802321c <_malloc_r+0xe4>)
 8023162:	f000 faeb 	bl	802373c <__malloc_lock>
 8023166:	6833      	ldr	r3, [r6, #0]
 8023168:	461c      	mov	r4, r3
 802316a:	bb34      	cbnz	r4, 80231ba <_malloc_r+0x82>
 802316c:	4629      	mov	r1, r5
 802316e:	4638      	mov	r0, r7
 8023170:	f7ff ffc2 	bl	80230f8 <sbrk_aligned>
 8023174:	1c43      	adds	r3, r0, #1
 8023176:	4604      	mov	r4, r0
 8023178:	d14d      	bne.n	8023216 <_malloc_r+0xde>
 802317a:	6834      	ldr	r4, [r6, #0]
 802317c:	4626      	mov	r6, r4
 802317e:	2e00      	cmp	r6, #0
 8023180:	d140      	bne.n	8023204 <_malloc_r+0xcc>
 8023182:	6823      	ldr	r3, [r4, #0]
 8023184:	4631      	mov	r1, r6
 8023186:	4638      	mov	r0, r7
 8023188:	eb04 0803 	add.w	r8, r4, r3
 802318c:	f000 f9ea 	bl	8023564 <_sbrk_r>
 8023190:	4580      	cmp	r8, r0
 8023192:	d13a      	bne.n	802320a <_malloc_r+0xd2>
 8023194:	6821      	ldr	r1, [r4, #0]
 8023196:	3503      	adds	r5, #3
 8023198:	1a6d      	subs	r5, r5, r1
 802319a:	f025 0503 	bic.w	r5, r5, #3
 802319e:	3508      	adds	r5, #8
 80231a0:	2d0c      	cmp	r5, #12
 80231a2:	bf38      	it	cc
 80231a4:	250c      	movcc	r5, #12
 80231a6:	4629      	mov	r1, r5
 80231a8:	4638      	mov	r0, r7
 80231aa:	f7ff ffa5 	bl	80230f8 <sbrk_aligned>
 80231ae:	3001      	adds	r0, #1
 80231b0:	d02b      	beq.n	802320a <_malloc_r+0xd2>
 80231b2:	6823      	ldr	r3, [r4, #0]
 80231b4:	442b      	add	r3, r5
 80231b6:	6023      	str	r3, [r4, #0]
 80231b8:	e00e      	b.n	80231d8 <_malloc_r+0xa0>
 80231ba:	6822      	ldr	r2, [r4, #0]
 80231bc:	1b52      	subs	r2, r2, r5
 80231be:	d41e      	bmi.n	80231fe <_malloc_r+0xc6>
 80231c0:	2a0b      	cmp	r2, #11
 80231c2:	d916      	bls.n	80231f2 <_malloc_r+0xba>
 80231c4:	1961      	adds	r1, r4, r5
 80231c6:	42a3      	cmp	r3, r4
 80231c8:	6025      	str	r5, [r4, #0]
 80231ca:	bf18      	it	ne
 80231cc:	6059      	strne	r1, [r3, #4]
 80231ce:	6863      	ldr	r3, [r4, #4]
 80231d0:	bf08      	it	eq
 80231d2:	6031      	streq	r1, [r6, #0]
 80231d4:	5162      	str	r2, [r4, r5]
 80231d6:	604b      	str	r3, [r1, #4]
 80231d8:	4638      	mov	r0, r7
 80231da:	f104 060b 	add.w	r6, r4, #11
 80231de:	f000 fab3 	bl	8023748 <__malloc_unlock>
 80231e2:	f026 0607 	bic.w	r6, r6, #7
 80231e6:	1d23      	adds	r3, r4, #4
 80231e8:	1af2      	subs	r2, r6, r3
 80231ea:	d0b6      	beq.n	802315a <_malloc_r+0x22>
 80231ec:	1b9b      	subs	r3, r3, r6
 80231ee:	50a3      	str	r3, [r4, r2]
 80231f0:	e7b3      	b.n	802315a <_malloc_r+0x22>
 80231f2:	6862      	ldr	r2, [r4, #4]
 80231f4:	42a3      	cmp	r3, r4
 80231f6:	bf0c      	ite	eq
 80231f8:	6032      	streq	r2, [r6, #0]
 80231fa:	605a      	strne	r2, [r3, #4]
 80231fc:	e7ec      	b.n	80231d8 <_malloc_r+0xa0>
 80231fe:	4623      	mov	r3, r4
 8023200:	6864      	ldr	r4, [r4, #4]
 8023202:	e7b2      	b.n	802316a <_malloc_r+0x32>
 8023204:	4634      	mov	r4, r6
 8023206:	6876      	ldr	r6, [r6, #4]
 8023208:	e7b9      	b.n	802317e <_malloc_r+0x46>
 802320a:	230c      	movs	r3, #12
 802320c:	603b      	str	r3, [r7, #0]
 802320e:	4638      	mov	r0, r7
 8023210:	f000 fa9a 	bl	8023748 <__malloc_unlock>
 8023214:	e7a1      	b.n	802315a <_malloc_r+0x22>
 8023216:	6025      	str	r5, [r4, #0]
 8023218:	e7de      	b.n	80231d8 <_malloc_r+0xa0>
 802321a:	bf00      	nop
 802321c:	2000fdd4 	.word	0x2000fdd4

08023220 <__sfputc_r>:
 8023220:	6893      	ldr	r3, [r2, #8]
 8023222:	3b01      	subs	r3, #1
 8023224:	2b00      	cmp	r3, #0
 8023226:	b410      	push	{r4}
 8023228:	6093      	str	r3, [r2, #8]
 802322a:	da08      	bge.n	802323e <__sfputc_r+0x1e>
 802322c:	6994      	ldr	r4, [r2, #24]
 802322e:	42a3      	cmp	r3, r4
 8023230:	db01      	blt.n	8023236 <__sfputc_r+0x16>
 8023232:	290a      	cmp	r1, #10
 8023234:	d103      	bne.n	802323e <__sfputc_r+0x1e>
 8023236:	f85d 4b04 	ldr.w	r4, [sp], #4
 802323a:	f7fe ba0f 	b.w	802165c <__swbuf_r>
 802323e:	6813      	ldr	r3, [r2, #0]
 8023240:	1c58      	adds	r0, r3, #1
 8023242:	6010      	str	r0, [r2, #0]
 8023244:	7019      	strb	r1, [r3, #0]
 8023246:	4608      	mov	r0, r1
 8023248:	f85d 4b04 	ldr.w	r4, [sp], #4
 802324c:	4770      	bx	lr

0802324e <__sfputs_r>:
 802324e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023250:	4606      	mov	r6, r0
 8023252:	460f      	mov	r7, r1
 8023254:	4614      	mov	r4, r2
 8023256:	18d5      	adds	r5, r2, r3
 8023258:	42ac      	cmp	r4, r5
 802325a:	d101      	bne.n	8023260 <__sfputs_r+0x12>
 802325c:	2000      	movs	r0, #0
 802325e:	e007      	b.n	8023270 <__sfputs_r+0x22>
 8023260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023264:	463a      	mov	r2, r7
 8023266:	4630      	mov	r0, r6
 8023268:	f7ff ffda 	bl	8023220 <__sfputc_r>
 802326c:	1c43      	adds	r3, r0, #1
 802326e:	d1f3      	bne.n	8023258 <__sfputs_r+0xa>
 8023270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08023274 <_vfiprintf_r>:
 8023274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023278:	460d      	mov	r5, r1
 802327a:	b09d      	sub	sp, #116	; 0x74
 802327c:	4614      	mov	r4, r2
 802327e:	4698      	mov	r8, r3
 8023280:	4606      	mov	r6, r0
 8023282:	b118      	cbz	r0, 802328c <_vfiprintf_r+0x18>
 8023284:	6983      	ldr	r3, [r0, #24]
 8023286:	b90b      	cbnz	r3, 802328c <_vfiprintf_r+0x18>
 8023288:	f7ff fa3e 	bl	8022708 <__sinit>
 802328c:	4b89      	ldr	r3, [pc, #548]	; (80234b4 <_vfiprintf_r+0x240>)
 802328e:	429d      	cmp	r5, r3
 8023290:	d11b      	bne.n	80232ca <_vfiprintf_r+0x56>
 8023292:	6875      	ldr	r5, [r6, #4]
 8023294:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023296:	07d9      	lsls	r1, r3, #31
 8023298:	d405      	bmi.n	80232a6 <_vfiprintf_r+0x32>
 802329a:	89ab      	ldrh	r3, [r5, #12]
 802329c:	059a      	lsls	r2, r3, #22
 802329e:	d402      	bmi.n	80232a6 <_vfiprintf_r+0x32>
 80232a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232a2:	f7ff fad4 	bl	802284e <__retarget_lock_acquire_recursive>
 80232a6:	89ab      	ldrh	r3, [r5, #12]
 80232a8:	071b      	lsls	r3, r3, #28
 80232aa:	d501      	bpl.n	80232b0 <_vfiprintf_r+0x3c>
 80232ac:	692b      	ldr	r3, [r5, #16]
 80232ae:	b9eb      	cbnz	r3, 80232ec <_vfiprintf_r+0x78>
 80232b0:	4629      	mov	r1, r5
 80232b2:	4630      	mov	r0, r6
 80232b4:	f7fe fa24 	bl	8021700 <__swsetup_r>
 80232b8:	b1c0      	cbz	r0, 80232ec <_vfiprintf_r+0x78>
 80232ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80232bc:	07dc      	lsls	r4, r3, #31
 80232be:	d50e      	bpl.n	80232de <_vfiprintf_r+0x6a>
 80232c0:	f04f 30ff 	mov.w	r0, #4294967295
 80232c4:	b01d      	add	sp, #116	; 0x74
 80232c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80232ca:	4b7b      	ldr	r3, [pc, #492]	; (80234b8 <_vfiprintf_r+0x244>)
 80232cc:	429d      	cmp	r5, r3
 80232ce:	d101      	bne.n	80232d4 <_vfiprintf_r+0x60>
 80232d0:	68b5      	ldr	r5, [r6, #8]
 80232d2:	e7df      	b.n	8023294 <_vfiprintf_r+0x20>
 80232d4:	4b79      	ldr	r3, [pc, #484]	; (80234bc <_vfiprintf_r+0x248>)
 80232d6:	429d      	cmp	r5, r3
 80232d8:	bf08      	it	eq
 80232da:	68f5      	ldreq	r5, [r6, #12]
 80232dc:	e7da      	b.n	8023294 <_vfiprintf_r+0x20>
 80232de:	89ab      	ldrh	r3, [r5, #12]
 80232e0:	0598      	lsls	r0, r3, #22
 80232e2:	d4ed      	bmi.n	80232c0 <_vfiprintf_r+0x4c>
 80232e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80232e6:	f7ff fab3 	bl	8022850 <__retarget_lock_release_recursive>
 80232ea:	e7e9      	b.n	80232c0 <_vfiprintf_r+0x4c>
 80232ec:	2300      	movs	r3, #0
 80232ee:	9309      	str	r3, [sp, #36]	; 0x24
 80232f0:	2320      	movs	r3, #32
 80232f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80232f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80232fa:	2330      	movs	r3, #48	; 0x30
 80232fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80234c0 <_vfiprintf_r+0x24c>
 8023300:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023304:	f04f 0901 	mov.w	r9, #1
 8023308:	4623      	mov	r3, r4
 802330a:	469a      	mov	sl, r3
 802330c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8023310:	b10a      	cbz	r2, 8023316 <_vfiprintf_r+0xa2>
 8023312:	2a25      	cmp	r2, #37	; 0x25
 8023314:	d1f9      	bne.n	802330a <_vfiprintf_r+0x96>
 8023316:	ebba 0b04 	subs.w	fp, sl, r4
 802331a:	d00b      	beq.n	8023334 <_vfiprintf_r+0xc0>
 802331c:	465b      	mov	r3, fp
 802331e:	4622      	mov	r2, r4
 8023320:	4629      	mov	r1, r5
 8023322:	4630      	mov	r0, r6
 8023324:	f7ff ff93 	bl	802324e <__sfputs_r>
 8023328:	3001      	adds	r0, #1
 802332a:	f000 80aa 	beq.w	8023482 <_vfiprintf_r+0x20e>
 802332e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8023330:	445a      	add	r2, fp
 8023332:	9209      	str	r2, [sp, #36]	; 0x24
 8023334:	f89a 3000 	ldrb.w	r3, [sl]
 8023338:	2b00      	cmp	r3, #0
 802333a:	f000 80a2 	beq.w	8023482 <_vfiprintf_r+0x20e>
 802333e:	2300      	movs	r3, #0
 8023340:	f04f 32ff 	mov.w	r2, #4294967295
 8023344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023348:	f10a 0a01 	add.w	sl, sl, #1
 802334c:	9304      	str	r3, [sp, #16]
 802334e:	9307      	str	r3, [sp, #28]
 8023350:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023354:	931a      	str	r3, [sp, #104]	; 0x68
 8023356:	4654      	mov	r4, sl
 8023358:	2205      	movs	r2, #5
 802335a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802335e:	4858      	ldr	r0, [pc, #352]	; (80234c0 <_vfiprintf_r+0x24c>)
 8023360:	f7dc ff66 	bl	8000230 <memchr>
 8023364:	9a04      	ldr	r2, [sp, #16]
 8023366:	b9d8      	cbnz	r0, 80233a0 <_vfiprintf_r+0x12c>
 8023368:	06d1      	lsls	r1, r2, #27
 802336a:	bf44      	itt	mi
 802336c:	2320      	movmi	r3, #32
 802336e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023372:	0713      	lsls	r3, r2, #28
 8023374:	bf44      	itt	mi
 8023376:	232b      	movmi	r3, #43	; 0x2b
 8023378:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802337c:	f89a 3000 	ldrb.w	r3, [sl]
 8023380:	2b2a      	cmp	r3, #42	; 0x2a
 8023382:	d015      	beq.n	80233b0 <_vfiprintf_r+0x13c>
 8023384:	9a07      	ldr	r2, [sp, #28]
 8023386:	4654      	mov	r4, sl
 8023388:	2000      	movs	r0, #0
 802338a:	f04f 0c0a 	mov.w	ip, #10
 802338e:	4621      	mov	r1, r4
 8023390:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023394:	3b30      	subs	r3, #48	; 0x30
 8023396:	2b09      	cmp	r3, #9
 8023398:	d94e      	bls.n	8023438 <_vfiprintf_r+0x1c4>
 802339a:	b1b0      	cbz	r0, 80233ca <_vfiprintf_r+0x156>
 802339c:	9207      	str	r2, [sp, #28]
 802339e:	e014      	b.n	80233ca <_vfiprintf_r+0x156>
 80233a0:	eba0 0308 	sub.w	r3, r0, r8
 80233a4:	fa09 f303 	lsl.w	r3, r9, r3
 80233a8:	4313      	orrs	r3, r2
 80233aa:	9304      	str	r3, [sp, #16]
 80233ac:	46a2      	mov	sl, r4
 80233ae:	e7d2      	b.n	8023356 <_vfiprintf_r+0xe2>
 80233b0:	9b03      	ldr	r3, [sp, #12]
 80233b2:	1d19      	adds	r1, r3, #4
 80233b4:	681b      	ldr	r3, [r3, #0]
 80233b6:	9103      	str	r1, [sp, #12]
 80233b8:	2b00      	cmp	r3, #0
 80233ba:	bfbb      	ittet	lt
 80233bc:	425b      	neglt	r3, r3
 80233be:	f042 0202 	orrlt.w	r2, r2, #2
 80233c2:	9307      	strge	r3, [sp, #28]
 80233c4:	9307      	strlt	r3, [sp, #28]
 80233c6:	bfb8      	it	lt
 80233c8:	9204      	strlt	r2, [sp, #16]
 80233ca:	7823      	ldrb	r3, [r4, #0]
 80233cc:	2b2e      	cmp	r3, #46	; 0x2e
 80233ce:	d10c      	bne.n	80233ea <_vfiprintf_r+0x176>
 80233d0:	7863      	ldrb	r3, [r4, #1]
 80233d2:	2b2a      	cmp	r3, #42	; 0x2a
 80233d4:	d135      	bne.n	8023442 <_vfiprintf_r+0x1ce>
 80233d6:	9b03      	ldr	r3, [sp, #12]
 80233d8:	1d1a      	adds	r2, r3, #4
 80233da:	681b      	ldr	r3, [r3, #0]
 80233dc:	9203      	str	r2, [sp, #12]
 80233de:	2b00      	cmp	r3, #0
 80233e0:	bfb8      	it	lt
 80233e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80233e6:	3402      	adds	r4, #2
 80233e8:	9305      	str	r3, [sp, #20]
 80233ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80234d0 <_vfiprintf_r+0x25c>
 80233ee:	7821      	ldrb	r1, [r4, #0]
 80233f0:	2203      	movs	r2, #3
 80233f2:	4650      	mov	r0, sl
 80233f4:	f7dc ff1c 	bl	8000230 <memchr>
 80233f8:	b140      	cbz	r0, 802340c <_vfiprintf_r+0x198>
 80233fa:	2340      	movs	r3, #64	; 0x40
 80233fc:	eba0 000a 	sub.w	r0, r0, sl
 8023400:	fa03 f000 	lsl.w	r0, r3, r0
 8023404:	9b04      	ldr	r3, [sp, #16]
 8023406:	4303      	orrs	r3, r0
 8023408:	3401      	adds	r4, #1
 802340a:	9304      	str	r3, [sp, #16]
 802340c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023410:	482c      	ldr	r0, [pc, #176]	; (80234c4 <_vfiprintf_r+0x250>)
 8023412:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023416:	2206      	movs	r2, #6
 8023418:	f7dc ff0a 	bl	8000230 <memchr>
 802341c:	2800      	cmp	r0, #0
 802341e:	d03f      	beq.n	80234a0 <_vfiprintf_r+0x22c>
 8023420:	4b29      	ldr	r3, [pc, #164]	; (80234c8 <_vfiprintf_r+0x254>)
 8023422:	bb1b      	cbnz	r3, 802346c <_vfiprintf_r+0x1f8>
 8023424:	9b03      	ldr	r3, [sp, #12]
 8023426:	3307      	adds	r3, #7
 8023428:	f023 0307 	bic.w	r3, r3, #7
 802342c:	3308      	adds	r3, #8
 802342e:	9303      	str	r3, [sp, #12]
 8023430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023432:	443b      	add	r3, r7
 8023434:	9309      	str	r3, [sp, #36]	; 0x24
 8023436:	e767      	b.n	8023308 <_vfiprintf_r+0x94>
 8023438:	fb0c 3202 	mla	r2, ip, r2, r3
 802343c:	460c      	mov	r4, r1
 802343e:	2001      	movs	r0, #1
 8023440:	e7a5      	b.n	802338e <_vfiprintf_r+0x11a>
 8023442:	2300      	movs	r3, #0
 8023444:	3401      	adds	r4, #1
 8023446:	9305      	str	r3, [sp, #20]
 8023448:	4619      	mov	r1, r3
 802344a:	f04f 0c0a 	mov.w	ip, #10
 802344e:	4620      	mov	r0, r4
 8023450:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023454:	3a30      	subs	r2, #48	; 0x30
 8023456:	2a09      	cmp	r2, #9
 8023458:	d903      	bls.n	8023462 <_vfiprintf_r+0x1ee>
 802345a:	2b00      	cmp	r3, #0
 802345c:	d0c5      	beq.n	80233ea <_vfiprintf_r+0x176>
 802345e:	9105      	str	r1, [sp, #20]
 8023460:	e7c3      	b.n	80233ea <_vfiprintf_r+0x176>
 8023462:	fb0c 2101 	mla	r1, ip, r1, r2
 8023466:	4604      	mov	r4, r0
 8023468:	2301      	movs	r3, #1
 802346a:	e7f0      	b.n	802344e <_vfiprintf_r+0x1da>
 802346c:	ab03      	add	r3, sp, #12
 802346e:	9300      	str	r3, [sp, #0]
 8023470:	462a      	mov	r2, r5
 8023472:	4b16      	ldr	r3, [pc, #88]	; (80234cc <_vfiprintf_r+0x258>)
 8023474:	a904      	add	r1, sp, #16
 8023476:	4630      	mov	r0, r6
 8023478:	f7fd fc82 	bl	8020d80 <_printf_float>
 802347c:	4607      	mov	r7, r0
 802347e:	1c78      	adds	r0, r7, #1
 8023480:	d1d6      	bne.n	8023430 <_vfiprintf_r+0x1bc>
 8023482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023484:	07d9      	lsls	r1, r3, #31
 8023486:	d405      	bmi.n	8023494 <_vfiprintf_r+0x220>
 8023488:	89ab      	ldrh	r3, [r5, #12]
 802348a:	059a      	lsls	r2, r3, #22
 802348c:	d402      	bmi.n	8023494 <_vfiprintf_r+0x220>
 802348e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023490:	f7ff f9de 	bl	8022850 <__retarget_lock_release_recursive>
 8023494:	89ab      	ldrh	r3, [r5, #12]
 8023496:	065b      	lsls	r3, r3, #25
 8023498:	f53f af12 	bmi.w	80232c0 <_vfiprintf_r+0x4c>
 802349c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802349e:	e711      	b.n	80232c4 <_vfiprintf_r+0x50>
 80234a0:	ab03      	add	r3, sp, #12
 80234a2:	9300      	str	r3, [sp, #0]
 80234a4:	462a      	mov	r2, r5
 80234a6:	4b09      	ldr	r3, [pc, #36]	; (80234cc <_vfiprintf_r+0x258>)
 80234a8:	a904      	add	r1, sp, #16
 80234aa:	4630      	mov	r0, r6
 80234ac:	f7fd ff0c 	bl	80212c8 <_printf_i>
 80234b0:	e7e4      	b.n	802347c <_vfiprintf_r+0x208>
 80234b2:	bf00      	nop
 80234b4:	080252cc 	.word	0x080252cc
 80234b8:	080252ec 	.word	0x080252ec
 80234bc:	080252ac 	.word	0x080252ac
 80234c0:	08025464 	.word	0x08025464
 80234c4:	0802546e 	.word	0x0802546e
 80234c8:	08020d81 	.word	0x08020d81
 80234cc:	0802324f 	.word	0x0802324f
 80234d0:	0802546a 	.word	0x0802546a

080234d4 <_putc_r>:
 80234d4:	b570      	push	{r4, r5, r6, lr}
 80234d6:	460d      	mov	r5, r1
 80234d8:	4614      	mov	r4, r2
 80234da:	4606      	mov	r6, r0
 80234dc:	b118      	cbz	r0, 80234e6 <_putc_r+0x12>
 80234de:	6983      	ldr	r3, [r0, #24]
 80234e0:	b90b      	cbnz	r3, 80234e6 <_putc_r+0x12>
 80234e2:	f7ff f911 	bl	8022708 <__sinit>
 80234e6:	4b1c      	ldr	r3, [pc, #112]	; (8023558 <_putc_r+0x84>)
 80234e8:	429c      	cmp	r4, r3
 80234ea:	d124      	bne.n	8023536 <_putc_r+0x62>
 80234ec:	6874      	ldr	r4, [r6, #4]
 80234ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80234f0:	07d8      	lsls	r0, r3, #31
 80234f2:	d405      	bmi.n	8023500 <_putc_r+0x2c>
 80234f4:	89a3      	ldrh	r3, [r4, #12]
 80234f6:	0599      	lsls	r1, r3, #22
 80234f8:	d402      	bmi.n	8023500 <_putc_r+0x2c>
 80234fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80234fc:	f7ff f9a7 	bl	802284e <__retarget_lock_acquire_recursive>
 8023500:	68a3      	ldr	r3, [r4, #8]
 8023502:	3b01      	subs	r3, #1
 8023504:	2b00      	cmp	r3, #0
 8023506:	60a3      	str	r3, [r4, #8]
 8023508:	da05      	bge.n	8023516 <_putc_r+0x42>
 802350a:	69a2      	ldr	r2, [r4, #24]
 802350c:	4293      	cmp	r3, r2
 802350e:	db1c      	blt.n	802354a <_putc_r+0x76>
 8023510:	b2eb      	uxtb	r3, r5
 8023512:	2b0a      	cmp	r3, #10
 8023514:	d019      	beq.n	802354a <_putc_r+0x76>
 8023516:	6823      	ldr	r3, [r4, #0]
 8023518:	1c5a      	adds	r2, r3, #1
 802351a:	6022      	str	r2, [r4, #0]
 802351c:	701d      	strb	r5, [r3, #0]
 802351e:	b2ed      	uxtb	r5, r5
 8023520:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023522:	07da      	lsls	r2, r3, #31
 8023524:	d405      	bmi.n	8023532 <_putc_r+0x5e>
 8023526:	89a3      	ldrh	r3, [r4, #12]
 8023528:	059b      	lsls	r3, r3, #22
 802352a:	d402      	bmi.n	8023532 <_putc_r+0x5e>
 802352c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802352e:	f7ff f98f 	bl	8022850 <__retarget_lock_release_recursive>
 8023532:	4628      	mov	r0, r5
 8023534:	bd70      	pop	{r4, r5, r6, pc}
 8023536:	4b09      	ldr	r3, [pc, #36]	; (802355c <_putc_r+0x88>)
 8023538:	429c      	cmp	r4, r3
 802353a:	d101      	bne.n	8023540 <_putc_r+0x6c>
 802353c:	68b4      	ldr	r4, [r6, #8]
 802353e:	e7d6      	b.n	80234ee <_putc_r+0x1a>
 8023540:	4b07      	ldr	r3, [pc, #28]	; (8023560 <_putc_r+0x8c>)
 8023542:	429c      	cmp	r4, r3
 8023544:	bf08      	it	eq
 8023546:	68f4      	ldreq	r4, [r6, #12]
 8023548:	e7d1      	b.n	80234ee <_putc_r+0x1a>
 802354a:	4629      	mov	r1, r5
 802354c:	4622      	mov	r2, r4
 802354e:	4630      	mov	r0, r6
 8023550:	f7fe f884 	bl	802165c <__swbuf_r>
 8023554:	4605      	mov	r5, r0
 8023556:	e7e3      	b.n	8023520 <_putc_r+0x4c>
 8023558:	080252cc 	.word	0x080252cc
 802355c:	080252ec 	.word	0x080252ec
 8023560:	080252ac 	.word	0x080252ac

08023564 <_sbrk_r>:
 8023564:	b538      	push	{r3, r4, r5, lr}
 8023566:	4d06      	ldr	r5, [pc, #24]	; (8023580 <_sbrk_r+0x1c>)
 8023568:	2300      	movs	r3, #0
 802356a:	4604      	mov	r4, r0
 802356c:	4608      	mov	r0, r1
 802356e:	602b      	str	r3, [r5, #0]
 8023570:	f7f4 fd3a 	bl	8017fe8 <_sbrk>
 8023574:	1c43      	adds	r3, r0, #1
 8023576:	d102      	bne.n	802357e <_sbrk_r+0x1a>
 8023578:	682b      	ldr	r3, [r5, #0]
 802357a:	b103      	cbz	r3, 802357e <_sbrk_r+0x1a>
 802357c:	6023      	str	r3, [r4, #0]
 802357e:	bd38      	pop	{r3, r4, r5, pc}
 8023580:	2000fddc 	.word	0x2000fddc

08023584 <__sread>:
 8023584:	b510      	push	{r4, lr}
 8023586:	460c      	mov	r4, r1
 8023588:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802358c:	f000 f8e2 	bl	8023754 <_read_r>
 8023590:	2800      	cmp	r0, #0
 8023592:	bfab      	itete	ge
 8023594:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023596:	89a3      	ldrhlt	r3, [r4, #12]
 8023598:	181b      	addge	r3, r3, r0
 802359a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802359e:	bfac      	ite	ge
 80235a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80235a2:	81a3      	strhlt	r3, [r4, #12]
 80235a4:	bd10      	pop	{r4, pc}

080235a6 <__swrite>:
 80235a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235aa:	461f      	mov	r7, r3
 80235ac:	898b      	ldrh	r3, [r1, #12]
 80235ae:	05db      	lsls	r3, r3, #23
 80235b0:	4605      	mov	r5, r0
 80235b2:	460c      	mov	r4, r1
 80235b4:	4616      	mov	r6, r2
 80235b6:	d505      	bpl.n	80235c4 <__swrite+0x1e>
 80235b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235bc:	2302      	movs	r3, #2
 80235be:	2200      	movs	r2, #0
 80235c0:	f000 f898 	bl	80236f4 <_lseek_r>
 80235c4:	89a3      	ldrh	r3, [r4, #12]
 80235c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80235ce:	81a3      	strh	r3, [r4, #12]
 80235d0:	4632      	mov	r2, r6
 80235d2:	463b      	mov	r3, r7
 80235d4:	4628      	mov	r0, r5
 80235d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80235da:	f000 b817 	b.w	802360c <_write_r>

080235de <__sseek>:
 80235de:	b510      	push	{r4, lr}
 80235e0:	460c      	mov	r4, r1
 80235e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235e6:	f000 f885 	bl	80236f4 <_lseek_r>
 80235ea:	1c43      	adds	r3, r0, #1
 80235ec:	89a3      	ldrh	r3, [r4, #12]
 80235ee:	bf15      	itete	ne
 80235f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80235f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80235f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80235fa:	81a3      	strheq	r3, [r4, #12]
 80235fc:	bf18      	it	ne
 80235fe:	81a3      	strhne	r3, [r4, #12]
 8023600:	bd10      	pop	{r4, pc}

08023602 <__sclose>:
 8023602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023606:	f000 b831 	b.w	802366c <_close_r>
	...

0802360c <_write_r>:
 802360c:	b538      	push	{r3, r4, r5, lr}
 802360e:	4d07      	ldr	r5, [pc, #28]	; (802362c <_write_r+0x20>)
 8023610:	4604      	mov	r4, r0
 8023612:	4608      	mov	r0, r1
 8023614:	4611      	mov	r1, r2
 8023616:	2200      	movs	r2, #0
 8023618:	602a      	str	r2, [r5, #0]
 802361a:	461a      	mov	r2, r3
 802361c:	f7f4 fc90 	bl	8017f40 <_write>
 8023620:	1c43      	adds	r3, r0, #1
 8023622:	d102      	bne.n	802362a <_write_r+0x1e>
 8023624:	682b      	ldr	r3, [r5, #0]
 8023626:	b103      	cbz	r3, 802362a <_write_r+0x1e>
 8023628:	6023      	str	r3, [r4, #0]
 802362a:	bd38      	pop	{r3, r4, r5, pc}
 802362c:	2000fddc 	.word	0x2000fddc

08023630 <__assert_func>:
 8023630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023632:	4614      	mov	r4, r2
 8023634:	461a      	mov	r2, r3
 8023636:	4b09      	ldr	r3, [pc, #36]	; (802365c <__assert_func+0x2c>)
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	4605      	mov	r5, r0
 802363c:	68d8      	ldr	r0, [r3, #12]
 802363e:	b14c      	cbz	r4, 8023654 <__assert_func+0x24>
 8023640:	4b07      	ldr	r3, [pc, #28]	; (8023660 <__assert_func+0x30>)
 8023642:	9100      	str	r1, [sp, #0]
 8023644:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023648:	4906      	ldr	r1, [pc, #24]	; (8023664 <__assert_func+0x34>)
 802364a:	462b      	mov	r3, r5
 802364c:	f000 f81e 	bl	802368c <fiprintf>
 8023650:	f000 f89f 	bl	8023792 <abort>
 8023654:	4b04      	ldr	r3, [pc, #16]	; (8023668 <__assert_func+0x38>)
 8023656:	461c      	mov	r4, r3
 8023658:	e7f3      	b.n	8023642 <__assert_func+0x12>
 802365a:	bf00      	nop
 802365c:	2000002c 	.word	0x2000002c
 8023660:	08025475 	.word	0x08025475
 8023664:	08025482 	.word	0x08025482
 8023668:	080254b0 	.word	0x080254b0

0802366c <_close_r>:
 802366c:	b538      	push	{r3, r4, r5, lr}
 802366e:	4d06      	ldr	r5, [pc, #24]	; (8023688 <_close_r+0x1c>)
 8023670:	2300      	movs	r3, #0
 8023672:	4604      	mov	r4, r0
 8023674:	4608      	mov	r0, r1
 8023676:	602b      	str	r3, [r5, #0]
 8023678:	f7f4 fc82 	bl	8017f80 <_close>
 802367c:	1c43      	adds	r3, r0, #1
 802367e:	d102      	bne.n	8023686 <_close_r+0x1a>
 8023680:	682b      	ldr	r3, [r5, #0]
 8023682:	b103      	cbz	r3, 8023686 <_close_r+0x1a>
 8023684:	6023      	str	r3, [r4, #0]
 8023686:	bd38      	pop	{r3, r4, r5, pc}
 8023688:	2000fddc 	.word	0x2000fddc

0802368c <fiprintf>:
 802368c:	b40e      	push	{r1, r2, r3}
 802368e:	b503      	push	{r0, r1, lr}
 8023690:	4601      	mov	r1, r0
 8023692:	ab03      	add	r3, sp, #12
 8023694:	4805      	ldr	r0, [pc, #20]	; (80236ac <fiprintf+0x20>)
 8023696:	f853 2b04 	ldr.w	r2, [r3], #4
 802369a:	6800      	ldr	r0, [r0, #0]
 802369c:	9301      	str	r3, [sp, #4]
 802369e:	f7ff fde9 	bl	8023274 <_vfiprintf_r>
 80236a2:	b002      	add	sp, #8
 80236a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80236a8:	b003      	add	sp, #12
 80236aa:	4770      	bx	lr
 80236ac:	2000002c 	.word	0x2000002c

080236b0 <_fstat_r>:
 80236b0:	b538      	push	{r3, r4, r5, lr}
 80236b2:	4d07      	ldr	r5, [pc, #28]	; (80236d0 <_fstat_r+0x20>)
 80236b4:	2300      	movs	r3, #0
 80236b6:	4604      	mov	r4, r0
 80236b8:	4608      	mov	r0, r1
 80236ba:	4611      	mov	r1, r2
 80236bc:	602b      	str	r3, [r5, #0]
 80236be:	f7f4 fc6b 	bl	8017f98 <_fstat>
 80236c2:	1c43      	adds	r3, r0, #1
 80236c4:	d102      	bne.n	80236cc <_fstat_r+0x1c>
 80236c6:	682b      	ldr	r3, [r5, #0]
 80236c8:	b103      	cbz	r3, 80236cc <_fstat_r+0x1c>
 80236ca:	6023      	str	r3, [r4, #0]
 80236cc:	bd38      	pop	{r3, r4, r5, pc}
 80236ce:	bf00      	nop
 80236d0:	2000fddc 	.word	0x2000fddc

080236d4 <_isatty_r>:
 80236d4:	b538      	push	{r3, r4, r5, lr}
 80236d6:	4d06      	ldr	r5, [pc, #24]	; (80236f0 <_isatty_r+0x1c>)
 80236d8:	2300      	movs	r3, #0
 80236da:	4604      	mov	r4, r0
 80236dc:	4608      	mov	r0, r1
 80236de:	602b      	str	r3, [r5, #0]
 80236e0:	f7f4 fc6a 	bl	8017fb8 <_isatty>
 80236e4:	1c43      	adds	r3, r0, #1
 80236e6:	d102      	bne.n	80236ee <_isatty_r+0x1a>
 80236e8:	682b      	ldr	r3, [r5, #0]
 80236ea:	b103      	cbz	r3, 80236ee <_isatty_r+0x1a>
 80236ec:	6023      	str	r3, [r4, #0]
 80236ee:	bd38      	pop	{r3, r4, r5, pc}
 80236f0:	2000fddc 	.word	0x2000fddc

080236f4 <_lseek_r>:
 80236f4:	b538      	push	{r3, r4, r5, lr}
 80236f6:	4d07      	ldr	r5, [pc, #28]	; (8023714 <_lseek_r+0x20>)
 80236f8:	4604      	mov	r4, r0
 80236fa:	4608      	mov	r0, r1
 80236fc:	4611      	mov	r1, r2
 80236fe:	2200      	movs	r2, #0
 8023700:	602a      	str	r2, [r5, #0]
 8023702:	461a      	mov	r2, r3
 8023704:	f7f4 fc63 	bl	8017fce <_lseek>
 8023708:	1c43      	adds	r3, r0, #1
 802370a:	d102      	bne.n	8023712 <_lseek_r+0x1e>
 802370c:	682b      	ldr	r3, [r5, #0]
 802370e:	b103      	cbz	r3, 8023712 <_lseek_r+0x1e>
 8023710:	6023      	str	r3, [r4, #0]
 8023712:	bd38      	pop	{r3, r4, r5, pc}
 8023714:	2000fddc 	.word	0x2000fddc

08023718 <__ascii_mbtowc>:
 8023718:	b082      	sub	sp, #8
 802371a:	b901      	cbnz	r1, 802371e <__ascii_mbtowc+0x6>
 802371c:	a901      	add	r1, sp, #4
 802371e:	b142      	cbz	r2, 8023732 <__ascii_mbtowc+0x1a>
 8023720:	b14b      	cbz	r3, 8023736 <__ascii_mbtowc+0x1e>
 8023722:	7813      	ldrb	r3, [r2, #0]
 8023724:	600b      	str	r3, [r1, #0]
 8023726:	7812      	ldrb	r2, [r2, #0]
 8023728:	1e10      	subs	r0, r2, #0
 802372a:	bf18      	it	ne
 802372c:	2001      	movne	r0, #1
 802372e:	b002      	add	sp, #8
 8023730:	4770      	bx	lr
 8023732:	4610      	mov	r0, r2
 8023734:	e7fb      	b.n	802372e <__ascii_mbtowc+0x16>
 8023736:	f06f 0001 	mvn.w	r0, #1
 802373a:	e7f8      	b.n	802372e <__ascii_mbtowc+0x16>

0802373c <__malloc_lock>:
 802373c:	4801      	ldr	r0, [pc, #4]	; (8023744 <__malloc_lock+0x8>)
 802373e:	f7ff b886 	b.w	802284e <__retarget_lock_acquire_recursive>
 8023742:	bf00      	nop
 8023744:	2000fdd0 	.word	0x2000fdd0

08023748 <__malloc_unlock>:
 8023748:	4801      	ldr	r0, [pc, #4]	; (8023750 <__malloc_unlock+0x8>)
 802374a:	f7ff b881 	b.w	8022850 <__retarget_lock_release_recursive>
 802374e:	bf00      	nop
 8023750:	2000fdd0 	.word	0x2000fdd0

08023754 <_read_r>:
 8023754:	b538      	push	{r3, r4, r5, lr}
 8023756:	4d07      	ldr	r5, [pc, #28]	; (8023774 <_read_r+0x20>)
 8023758:	4604      	mov	r4, r0
 802375a:	4608      	mov	r0, r1
 802375c:	4611      	mov	r1, r2
 802375e:	2200      	movs	r2, #0
 8023760:	602a      	str	r2, [r5, #0]
 8023762:	461a      	mov	r2, r3
 8023764:	f7f4 fbce 	bl	8017f04 <_read>
 8023768:	1c43      	adds	r3, r0, #1
 802376a:	d102      	bne.n	8023772 <_read_r+0x1e>
 802376c:	682b      	ldr	r3, [r5, #0]
 802376e:	b103      	cbz	r3, 8023772 <_read_r+0x1e>
 8023770:	6023      	str	r3, [r4, #0]
 8023772:	bd38      	pop	{r3, r4, r5, pc}
 8023774:	2000fddc 	.word	0x2000fddc

08023778 <__ascii_wctomb>:
 8023778:	b149      	cbz	r1, 802378e <__ascii_wctomb+0x16>
 802377a:	2aff      	cmp	r2, #255	; 0xff
 802377c:	bf85      	ittet	hi
 802377e:	238a      	movhi	r3, #138	; 0x8a
 8023780:	6003      	strhi	r3, [r0, #0]
 8023782:	700a      	strbls	r2, [r1, #0]
 8023784:	f04f 30ff 	movhi.w	r0, #4294967295
 8023788:	bf98      	it	ls
 802378a:	2001      	movls	r0, #1
 802378c:	4770      	bx	lr
 802378e:	4608      	mov	r0, r1
 8023790:	4770      	bx	lr

08023792 <abort>:
 8023792:	b508      	push	{r3, lr}
 8023794:	2006      	movs	r0, #6
 8023796:	f000 f82b 	bl	80237f0 <raise>
 802379a:	2001      	movs	r0, #1
 802379c:	f7f4 fba8 	bl	8017ef0 <_exit>

080237a0 <_raise_r>:
 80237a0:	291f      	cmp	r1, #31
 80237a2:	b538      	push	{r3, r4, r5, lr}
 80237a4:	4604      	mov	r4, r0
 80237a6:	460d      	mov	r5, r1
 80237a8:	d904      	bls.n	80237b4 <_raise_r+0x14>
 80237aa:	2316      	movs	r3, #22
 80237ac:	6003      	str	r3, [r0, #0]
 80237ae:	f04f 30ff 	mov.w	r0, #4294967295
 80237b2:	bd38      	pop	{r3, r4, r5, pc}
 80237b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80237b6:	b112      	cbz	r2, 80237be <_raise_r+0x1e>
 80237b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80237bc:	b94b      	cbnz	r3, 80237d2 <_raise_r+0x32>
 80237be:	4620      	mov	r0, r4
 80237c0:	f000 f830 	bl	8023824 <_getpid_r>
 80237c4:	462a      	mov	r2, r5
 80237c6:	4601      	mov	r1, r0
 80237c8:	4620      	mov	r0, r4
 80237ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80237ce:	f000 b817 	b.w	8023800 <_kill_r>
 80237d2:	2b01      	cmp	r3, #1
 80237d4:	d00a      	beq.n	80237ec <_raise_r+0x4c>
 80237d6:	1c59      	adds	r1, r3, #1
 80237d8:	d103      	bne.n	80237e2 <_raise_r+0x42>
 80237da:	2316      	movs	r3, #22
 80237dc:	6003      	str	r3, [r0, #0]
 80237de:	2001      	movs	r0, #1
 80237e0:	e7e7      	b.n	80237b2 <_raise_r+0x12>
 80237e2:	2400      	movs	r4, #0
 80237e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80237e8:	4628      	mov	r0, r5
 80237ea:	4798      	blx	r3
 80237ec:	2000      	movs	r0, #0
 80237ee:	e7e0      	b.n	80237b2 <_raise_r+0x12>

080237f0 <raise>:
 80237f0:	4b02      	ldr	r3, [pc, #8]	; (80237fc <raise+0xc>)
 80237f2:	4601      	mov	r1, r0
 80237f4:	6818      	ldr	r0, [r3, #0]
 80237f6:	f7ff bfd3 	b.w	80237a0 <_raise_r>
 80237fa:	bf00      	nop
 80237fc:	2000002c 	.word	0x2000002c

08023800 <_kill_r>:
 8023800:	b538      	push	{r3, r4, r5, lr}
 8023802:	4d07      	ldr	r5, [pc, #28]	; (8023820 <_kill_r+0x20>)
 8023804:	2300      	movs	r3, #0
 8023806:	4604      	mov	r4, r0
 8023808:	4608      	mov	r0, r1
 802380a:	4611      	mov	r1, r2
 802380c:	602b      	str	r3, [r5, #0]
 802380e:	f7f4 fb5f 	bl	8017ed0 <_kill>
 8023812:	1c43      	adds	r3, r0, #1
 8023814:	d102      	bne.n	802381c <_kill_r+0x1c>
 8023816:	682b      	ldr	r3, [r5, #0]
 8023818:	b103      	cbz	r3, 802381c <_kill_r+0x1c>
 802381a:	6023      	str	r3, [r4, #0]
 802381c:	bd38      	pop	{r3, r4, r5, pc}
 802381e:	bf00      	nop
 8023820:	2000fddc 	.word	0x2000fddc

08023824 <_getpid_r>:
 8023824:	f7f4 bb4c 	b.w	8017ec0 <_getpid>

08023828 <ceil>:
 8023828:	ec51 0b10 	vmov	r0, r1, d0
 802382c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8023834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8023838:	2e13      	cmp	r6, #19
 802383a:	ee10 5a10 	vmov	r5, s0
 802383e:	ee10 8a10 	vmov	r8, s0
 8023842:	460c      	mov	r4, r1
 8023844:	dc30      	bgt.n	80238a8 <ceil+0x80>
 8023846:	2e00      	cmp	r6, #0
 8023848:	da12      	bge.n	8023870 <ceil+0x48>
 802384a:	a335      	add	r3, pc, #212	; (adr r3, 8023920 <ceil+0xf8>)
 802384c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023850:	f7dc fd44 	bl	80002dc <__adddf3>
 8023854:	2200      	movs	r2, #0
 8023856:	2300      	movs	r3, #0
 8023858:	f7dd f986 	bl	8000b68 <__aeabi_dcmpgt>
 802385c:	b128      	cbz	r0, 802386a <ceil+0x42>
 802385e:	2c00      	cmp	r4, #0
 8023860:	db55      	blt.n	802390e <ceil+0xe6>
 8023862:	432c      	orrs	r4, r5
 8023864:	d057      	beq.n	8023916 <ceil+0xee>
 8023866:	4c30      	ldr	r4, [pc, #192]	; (8023928 <ceil+0x100>)
 8023868:	2500      	movs	r5, #0
 802386a:	4621      	mov	r1, r4
 802386c:	4628      	mov	r0, r5
 802386e:	e025      	b.n	80238bc <ceil+0x94>
 8023870:	4f2e      	ldr	r7, [pc, #184]	; (802392c <ceil+0x104>)
 8023872:	4137      	asrs	r7, r6
 8023874:	ea01 0307 	and.w	r3, r1, r7
 8023878:	4303      	orrs	r3, r0
 802387a:	d01f      	beq.n	80238bc <ceil+0x94>
 802387c:	a328      	add	r3, pc, #160	; (adr r3, 8023920 <ceil+0xf8>)
 802387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023882:	f7dc fd2b 	bl	80002dc <__adddf3>
 8023886:	2200      	movs	r2, #0
 8023888:	2300      	movs	r3, #0
 802388a:	f7dd f96d 	bl	8000b68 <__aeabi_dcmpgt>
 802388e:	2800      	cmp	r0, #0
 8023890:	d0eb      	beq.n	802386a <ceil+0x42>
 8023892:	2c00      	cmp	r4, #0
 8023894:	bfc2      	ittt	gt
 8023896:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 802389a:	fa43 f606 	asrgt.w	r6, r3, r6
 802389e:	19a4      	addgt	r4, r4, r6
 80238a0:	ea24 0407 	bic.w	r4, r4, r7
 80238a4:	2500      	movs	r5, #0
 80238a6:	e7e0      	b.n	802386a <ceil+0x42>
 80238a8:	2e33      	cmp	r6, #51	; 0x33
 80238aa:	dd0b      	ble.n	80238c4 <ceil+0x9c>
 80238ac:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80238b0:	d104      	bne.n	80238bc <ceil+0x94>
 80238b2:	ee10 2a10 	vmov	r2, s0
 80238b6:	460b      	mov	r3, r1
 80238b8:	f7dc fd10 	bl	80002dc <__adddf3>
 80238bc:	ec41 0b10 	vmov	d0, r0, r1
 80238c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80238c4:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80238c8:	f04f 33ff 	mov.w	r3, #4294967295
 80238cc:	fa23 f707 	lsr.w	r7, r3, r7
 80238d0:	4207      	tst	r7, r0
 80238d2:	d0f3      	beq.n	80238bc <ceil+0x94>
 80238d4:	a312      	add	r3, pc, #72	; (adr r3, 8023920 <ceil+0xf8>)
 80238d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238da:	f7dc fcff 	bl	80002dc <__adddf3>
 80238de:	2200      	movs	r2, #0
 80238e0:	2300      	movs	r3, #0
 80238e2:	f7dd f941 	bl	8000b68 <__aeabi_dcmpgt>
 80238e6:	2800      	cmp	r0, #0
 80238e8:	d0bf      	beq.n	802386a <ceil+0x42>
 80238ea:	2c00      	cmp	r4, #0
 80238ec:	dd02      	ble.n	80238f4 <ceil+0xcc>
 80238ee:	2e14      	cmp	r6, #20
 80238f0:	d103      	bne.n	80238fa <ceil+0xd2>
 80238f2:	3401      	adds	r4, #1
 80238f4:	ea25 0507 	bic.w	r5, r5, r7
 80238f8:	e7b7      	b.n	802386a <ceil+0x42>
 80238fa:	2301      	movs	r3, #1
 80238fc:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8023900:	fa03 f606 	lsl.w	r6, r3, r6
 8023904:	4435      	add	r5, r6
 8023906:	4545      	cmp	r5, r8
 8023908:	bf38      	it	cc
 802390a:	18e4      	addcc	r4, r4, r3
 802390c:	e7f2      	b.n	80238f4 <ceil+0xcc>
 802390e:	2500      	movs	r5, #0
 8023910:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8023914:	e7a9      	b.n	802386a <ceil+0x42>
 8023916:	4625      	mov	r5, r4
 8023918:	e7a7      	b.n	802386a <ceil+0x42>
 802391a:	bf00      	nop
 802391c:	f3af 8000 	nop.w
 8023920:	8800759c 	.word	0x8800759c
 8023924:	7e37e43c 	.word	0x7e37e43c
 8023928:	3ff00000 	.word	0x3ff00000
 802392c:	000fffff 	.word	0x000fffff

08023930 <cos>:
 8023930:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023932:	ec53 2b10 	vmov	r2, r3, d0
 8023936:	4826      	ldr	r0, [pc, #152]	; (80239d0 <cos+0xa0>)
 8023938:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 802393c:	4281      	cmp	r1, r0
 802393e:	dc06      	bgt.n	802394e <cos+0x1e>
 8023940:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80239c8 <cos+0x98>
 8023944:	b005      	add	sp, #20
 8023946:	f85d eb04 	ldr.w	lr, [sp], #4
 802394a:	f000 bc75 	b.w	8024238 <__kernel_cos>
 802394e:	4821      	ldr	r0, [pc, #132]	; (80239d4 <cos+0xa4>)
 8023950:	4281      	cmp	r1, r0
 8023952:	dd09      	ble.n	8023968 <cos+0x38>
 8023954:	ee10 0a10 	vmov	r0, s0
 8023958:	4619      	mov	r1, r3
 802395a:	f7dc fcbd 	bl	80002d8 <__aeabi_dsub>
 802395e:	ec41 0b10 	vmov	d0, r0, r1
 8023962:	b005      	add	sp, #20
 8023964:	f85d fb04 	ldr.w	pc, [sp], #4
 8023968:	4668      	mov	r0, sp
 802396a:	f000 fa59 	bl	8023e20 <__ieee754_rem_pio2>
 802396e:	f000 0003 	and.w	r0, r0, #3
 8023972:	2801      	cmp	r0, #1
 8023974:	d00b      	beq.n	802398e <cos+0x5e>
 8023976:	2802      	cmp	r0, #2
 8023978:	d016      	beq.n	80239a8 <cos+0x78>
 802397a:	b9e0      	cbnz	r0, 80239b6 <cos+0x86>
 802397c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023980:	ed9d 0b00 	vldr	d0, [sp]
 8023984:	f000 fc58 	bl	8024238 <__kernel_cos>
 8023988:	ec51 0b10 	vmov	r0, r1, d0
 802398c:	e7e7      	b.n	802395e <cos+0x2e>
 802398e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023992:	ed9d 0b00 	vldr	d0, [sp]
 8023996:	f001 f867 	bl	8024a68 <__kernel_sin>
 802399a:	ec53 2b10 	vmov	r2, r3, d0
 802399e:	ee10 0a10 	vmov	r0, s0
 80239a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80239a6:	e7da      	b.n	802395e <cos+0x2e>
 80239a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239ac:	ed9d 0b00 	vldr	d0, [sp]
 80239b0:	f000 fc42 	bl	8024238 <__kernel_cos>
 80239b4:	e7f1      	b.n	802399a <cos+0x6a>
 80239b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80239ba:	ed9d 0b00 	vldr	d0, [sp]
 80239be:	2001      	movs	r0, #1
 80239c0:	f001 f852 	bl	8024a68 <__kernel_sin>
 80239c4:	e7e0      	b.n	8023988 <cos+0x58>
 80239c6:	bf00      	nop
	...
 80239d0:	3fe921fb 	.word	0x3fe921fb
 80239d4:	7fefffff 	.word	0x7fefffff

080239d8 <sin>:
 80239d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80239da:	ec53 2b10 	vmov	r2, r3, d0
 80239de:	4828      	ldr	r0, [pc, #160]	; (8023a80 <sin+0xa8>)
 80239e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80239e4:	4281      	cmp	r1, r0
 80239e6:	dc07      	bgt.n	80239f8 <sin+0x20>
 80239e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8023a78 <sin+0xa0>
 80239ec:	2000      	movs	r0, #0
 80239ee:	b005      	add	sp, #20
 80239f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80239f4:	f001 b838 	b.w	8024a68 <__kernel_sin>
 80239f8:	4822      	ldr	r0, [pc, #136]	; (8023a84 <sin+0xac>)
 80239fa:	4281      	cmp	r1, r0
 80239fc:	dd09      	ble.n	8023a12 <sin+0x3a>
 80239fe:	ee10 0a10 	vmov	r0, s0
 8023a02:	4619      	mov	r1, r3
 8023a04:	f7dc fc68 	bl	80002d8 <__aeabi_dsub>
 8023a08:	ec41 0b10 	vmov	d0, r0, r1
 8023a0c:	b005      	add	sp, #20
 8023a0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8023a12:	4668      	mov	r0, sp
 8023a14:	f000 fa04 	bl	8023e20 <__ieee754_rem_pio2>
 8023a18:	f000 0003 	and.w	r0, r0, #3
 8023a1c:	2801      	cmp	r0, #1
 8023a1e:	d00c      	beq.n	8023a3a <sin+0x62>
 8023a20:	2802      	cmp	r0, #2
 8023a22:	d011      	beq.n	8023a48 <sin+0x70>
 8023a24:	b9f0      	cbnz	r0, 8023a64 <sin+0x8c>
 8023a26:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a2a:	ed9d 0b00 	vldr	d0, [sp]
 8023a2e:	2001      	movs	r0, #1
 8023a30:	f001 f81a 	bl	8024a68 <__kernel_sin>
 8023a34:	ec51 0b10 	vmov	r0, r1, d0
 8023a38:	e7e6      	b.n	8023a08 <sin+0x30>
 8023a3a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a3e:	ed9d 0b00 	vldr	d0, [sp]
 8023a42:	f000 fbf9 	bl	8024238 <__kernel_cos>
 8023a46:	e7f5      	b.n	8023a34 <sin+0x5c>
 8023a48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a4c:	ed9d 0b00 	vldr	d0, [sp]
 8023a50:	2001      	movs	r0, #1
 8023a52:	f001 f809 	bl	8024a68 <__kernel_sin>
 8023a56:	ec53 2b10 	vmov	r2, r3, d0
 8023a5a:	ee10 0a10 	vmov	r0, s0
 8023a5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8023a62:	e7d1      	b.n	8023a08 <sin+0x30>
 8023a64:	ed9d 1b02 	vldr	d1, [sp, #8]
 8023a68:	ed9d 0b00 	vldr	d0, [sp]
 8023a6c:	f000 fbe4 	bl	8024238 <__kernel_cos>
 8023a70:	e7f1      	b.n	8023a56 <sin+0x7e>
 8023a72:	bf00      	nop
 8023a74:	f3af 8000 	nop.w
	...
 8023a80:	3fe921fb 	.word	0x3fe921fb
 8023a84:	7fefffff 	.word	0x7fefffff

08023a88 <exp>:
 8023a88:	b538      	push	{r3, r4, r5, lr}
 8023a8a:	ed2d 8b02 	vpush	{d8}
 8023a8e:	ec55 4b10 	vmov	r4, r5, d0
 8023a92:	f000 f841 	bl	8023b18 <__ieee754_exp>
 8023a96:	eeb0 8a40 	vmov.f32	s16, s0
 8023a9a:	eef0 8a60 	vmov.f32	s17, s1
 8023a9e:	ec45 4b10 	vmov	d0, r4, r5
 8023aa2:	f001 f8d8 	bl	8024c56 <finite>
 8023aa6:	b168      	cbz	r0, 8023ac4 <exp+0x3c>
 8023aa8:	a317      	add	r3, pc, #92	; (adr r3, 8023b08 <exp+0x80>)
 8023aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023aae:	4620      	mov	r0, r4
 8023ab0:	4629      	mov	r1, r5
 8023ab2:	f7dd f859 	bl	8000b68 <__aeabi_dcmpgt>
 8023ab6:	b160      	cbz	r0, 8023ad2 <exp+0x4a>
 8023ab8:	f7fd f882 	bl	8020bc0 <__errno>
 8023abc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8023af8 <exp+0x70>
 8023ac0:	2322      	movs	r3, #34	; 0x22
 8023ac2:	6003      	str	r3, [r0, #0]
 8023ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8023ac8:	eef0 0a68 	vmov.f32	s1, s17
 8023acc:	ecbd 8b02 	vpop	{d8}
 8023ad0:	bd38      	pop	{r3, r4, r5, pc}
 8023ad2:	a30f      	add	r3, pc, #60	; (adr r3, 8023b10 <exp+0x88>)
 8023ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ad8:	4620      	mov	r0, r4
 8023ada:	4629      	mov	r1, r5
 8023adc:	f7dd f826 	bl	8000b2c <__aeabi_dcmplt>
 8023ae0:	2800      	cmp	r0, #0
 8023ae2:	d0ef      	beq.n	8023ac4 <exp+0x3c>
 8023ae4:	f7fd f86c 	bl	8020bc0 <__errno>
 8023ae8:	2322      	movs	r3, #34	; 0x22
 8023aea:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8023b00 <exp+0x78>
 8023aee:	6003      	str	r3, [r0, #0]
 8023af0:	e7e8      	b.n	8023ac4 <exp+0x3c>
 8023af2:	bf00      	nop
 8023af4:	f3af 8000 	nop.w
 8023af8:	00000000 	.word	0x00000000
 8023afc:	7ff00000 	.word	0x7ff00000
	...
 8023b08:	fefa39ef 	.word	0xfefa39ef
 8023b0c:	40862e42 	.word	0x40862e42
 8023b10:	d52d3051 	.word	0xd52d3051
 8023b14:	c0874910 	.word	0xc0874910

08023b18 <__ieee754_exp>:
 8023b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b1c:	ec55 4b10 	vmov	r4, r5, d0
 8023b20:	49b5      	ldr	r1, [pc, #724]	; (8023df8 <__ieee754_exp+0x2e0>)
 8023b22:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023b26:	428b      	cmp	r3, r1
 8023b28:	ed2d 8b04 	vpush	{d8-d9}
 8023b2c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8023b30:	d93d      	bls.n	8023bae <__ieee754_exp+0x96>
 8023b32:	49b2      	ldr	r1, [pc, #712]	; (8023dfc <__ieee754_exp+0x2e4>)
 8023b34:	428b      	cmp	r3, r1
 8023b36:	d918      	bls.n	8023b6a <__ieee754_exp+0x52>
 8023b38:	ee10 3a10 	vmov	r3, s0
 8023b3c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8023b40:	4313      	orrs	r3, r2
 8023b42:	d009      	beq.n	8023b58 <__ieee754_exp+0x40>
 8023b44:	ee10 2a10 	vmov	r2, s0
 8023b48:	462b      	mov	r3, r5
 8023b4a:	4620      	mov	r0, r4
 8023b4c:	4629      	mov	r1, r5
 8023b4e:	f7dc fbc5 	bl	80002dc <__adddf3>
 8023b52:	4604      	mov	r4, r0
 8023b54:	460d      	mov	r5, r1
 8023b56:	e002      	b.n	8023b5e <__ieee754_exp+0x46>
 8023b58:	b10e      	cbz	r6, 8023b5e <__ieee754_exp+0x46>
 8023b5a:	2400      	movs	r4, #0
 8023b5c:	2500      	movs	r5, #0
 8023b5e:	ecbd 8b04 	vpop	{d8-d9}
 8023b62:	ec45 4b10 	vmov	d0, r4, r5
 8023b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b6a:	a38d      	add	r3, pc, #564	; (adr r3, 8023da0 <__ieee754_exp+0x288>)
 8023b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b70:	ee10 0a10 	vmov	r0, s0
 8023b74:	4629      	mov	r1, r5
 8023b76:	f7dc fff7 	bl	8000b68 <__aeabi_dcmpgt>
 8023b7a:	4607      	mov	r7, r0
 8023b7c:	b130      	cbz	r0, 8023b8c <__ieee754_exp+0x74>
 8023b7e:	ecbd 8b04 	vpop	{d8-d9}
 8023b82:	2000      	movs	r0, #0
 8023b84:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023b88:	f001 b853 	b.w	8024c32 <__math_oflow>
 8023b8c:	a386      	add	r3, pc, #536	; (adr r3, 8023da8 <__ieee754_exp+0x290>)
 8023b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023b92:	4620      	mov	r0, r4
 8023b94:	4629      	mov	r1, r5
 8023b96:	f7dc ffc9 	bl	8000b2c <__aeabi_dcmplt>
 8023b9a:	2800      	cmp	r0, #0
 8023b9c:	f000 808b 	beq.w	8023cb6 <__ieee754_exp+0x19e>
 8023ba0:	ecbd 8b04 	vpop	{d8-d9}
 8023ba4:	4638      	mov	r0, r7
 8023ba6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023baa:	f001 b839 	b.w	8024c20 <__math_uflow>
 8023bae:	4a94      	ldr	r2, [pc, #592]	; (8023e00 <__ieee754_exp+0x2e8>)
 8023bb0:	4293      	cmp	r3, r2
 8023bb2:	f240 80ac 	bls.w	8023d0e <__ieee754_exp+0x1f6>
 8023bb6:	4a93      	ldr	r2, [pc, #588]	; (8023e04 <__ieee754_exp+0x2ec>)
 8023bb8:	4293      	cmp	r3, r2
 8023bba:	d87c      	bhi.n	8023cb6 <__ieee754_exp+0x19e>
 8023bbc:	4b92      	ldr	r3, [pc, #584]	; (8023e08 <__ieee754_exp+0x2f0>)
 8023bbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8023bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023bc6:	ee10 0a10 	vmov	r0, s0
 8023bca:	4629      	mov	r1, r5
 8023bcc:	f7dc fb84 	bl	80002d8 <__aeabi_dsub>
 8023bd0:	4b8e      	ldr	r3, [pc, #568]	; (8023e0c <__ieee754_exp+0x2f4>)
 8023bd2:	00f7      	lsls	r7, r6, #3
 8023bd4:	443b      	add	r3, r7
 8023bd6:	ed93 7b00 	vldr	d7, [r3]
 8023bda:	f1c6 0a01 	rsb	sl, r6, #1
 8023bde:	4680      	mov	r8, r0
 8023be0:	4689      	mov	r9, r1
 8023be2:	ebaa 0a06 	sub.w	sl, sl, r6
 8023be6:	eeb0 8a47 	vmov.f32	s16, s14
 8023bea:	eef0 8a67 	vmov.f32	s17, s15
 8023bee:	ec53 2b18 	vmov	r2, r3, d8
 8023bf2:	4640      	mov	r0, r8
 8023bf4:	4649      	mov	r1, r9
 8023bf6:	f7dc fb6f 	bl	80002d8 <__aeabi_dsub>
 8023bfa:	4604      	mov	r4, r0
 8023bfc:	460d      	mov	r5, r1
 8023bfe:	4622      	mov	r2, r4
 8023c00:	462b      	mov	r3, r5
 8023c02:	4620      	mov	r0, r4
 8023c04:	4629      	mov	r1, r5
 8023c06:	f7dc fd1f 	bl	8000648 <__aeabi_dmul>
 8023c0a:	a369      	add	r3, pc, #420	; (adr r3, 8023db0 <__ieee754_exp+0x298>)
 8023c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c10:	4606      	mov	r6, r0
 8023c12:	460f      	mov	r7, r1
 8023c14:	f7dc fd18 	bl	8000648 <__aeabi_dmul>
 8023c18:	a367      	add	r3, pc, #412	; (adr r3, 8023db8 <__ieee754_exp+0x2a0>)
 8023c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c1e:	f7dc fb5b 	bl	80002d8 <__aeabi_dsub>
 8023c22:	4632      	mov	r2, r6
 8023c24:	463b      	mov	r3, r7
 8023c26:	f7dc fd0f 	bl	8000648 <__aeabi_dmul>
 8023c2a:	a365      	add	r3, pc, #404	; (adr r3, 8023dc0 <__ieee754_exp+0x2a8>)
 8023c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c30:	f7dc fb54 	bl	80002dc <__adddf3>
 8023c34:	4632      	mov	r2, r6
 8023c36:	463b      	mov	r3, r7
 8023c38:	f7dc fd06 	bl	8000648 <__aeabi_dmul>
 8023c3c:	a362      	add	r3, pc, #392	; (adr r3, 8023dc8 <__ieee754_exp+0x2b0>)
 8023c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c42:	f7dc fb49 	bl	80002d8 <__aeabi_dsub>
 8023c46:	4632      	mov	r2, r6
 8023c48:	463b      	mov	r3, r7
 8023c4a:	f7dc fcfd 	bl	8000648 <__aeabi_dmul>
 8023c4e:	a360      	add	r3, pc, #384	; (adr r3, 8023dd0 <__ieee754_exp+0x2b8>)
 8023c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023c54:	f7dc fb42 	bl	80002dc <__adddf3>
 8023c58:	4632      	mov	r2, r6
 8023c5a:	463b      	mov	r3, r7
 8023c5c:	f7dc fcf4 	bl	8000648 <__aeabi_dmul>
 8023c60:	4602      	mov	r2, r0
 8023c62:	460b      	mov	r3, r1
 8023c64:	4620      	mov	r0, r4
 8023c66:	4629      	mov	r1, r5
 8023c68:	f7dc fb36 	bl	80002d8 <__aeabi_dsub>
 8023c6c:	4602      	mov	r2, r0
 8023c6e:	460b      	mov	r3, r1
 8023c70:	4606      	mov	r6, r0
 8023c72:	460f      	mov	r7, r1
 8023c74:	4620      	mov	r0, r4
 8023c76:	4629      	mov	r1, r5
 8023c78:	f7dc fce6 	bl	8000648 <__aeabi_dmul>
 8023c7c:	ec41 0b19 	vmov	d9, r0, r1
 8023c80:	f1ba 0f00 	cmp.w	sl, #0
 8023c84:	d15d      	bne.n	8023d42 <__ieee754_exp+0x22a>
 8023c86:	2200      	movs	r2, #0
 8023c88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023c8c:	4630      	mov	r0, r6
 8023c8e:	4639      	mov	r1, r7
 8023c90:	f7dc fb22 	bl	80002d8 <__aeabi_dsub>
 8023c94:	4602      	mov	r2, r0
 8023c96:	460b      	mov	r3, r1
 8023c98:	ec51 0b19 	vmov	r0, r1, d9
 8023c9c:	f7dc fdfe 	bl	800089c <__aeabi_ddiv>
 8023ca0:	4622      	mov	r2, r4
 8023ca2:	462b      	mov	r3, r5
 8023ca4:	f7dc fb18 	bl	80002d8 <__aeabi_dsub>
 8023ca8:	4602      	mov	r2, r0
 8023caa:	460b      	mov	r3, r1
 8023cac:	2000      	movs	r0, #0
 8023cae:	4958      	ldr	r1, [pc, #352]	; (8023e10 <__ieee754_exp+0x2f8>)
 8023cb0:	f7dc fb12 	bl	80002d8 <__aeabi_dsub>
 8023cb4:	e74d      	b.n	8023b52 <__ieee754_exp+0x3a>
 8023cb6:	4857      	ldr	r0, [pc, #348]	; (8023e14 <__ieee754_exp+0x2fc>)
 8023cb8:	a347      	add	r3, pc, #284	; (adr r3, 8023dd8 <__ieee754_exp+0x2c0>)
 8023cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cbe:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8023cc2:	4629      	mov	r1, r5
 8023cc4:	4620      	mov	r0, r4
 8023cc6:	f7dc fcbf 	bl	8000648 <__aeabi_dmul>
 8023cca:	e9d6 2300 	ldrd	r2, r3, [r6]
 8023cce:	f7dc fb05 	bl	80002dc <__adddf3>
 8023cd2:	f7dc ff69 	bl	8000ba8 <__aeabi_d2iz>
 8023cd6:	4682      	mov	sl, r0
 8023cd8:	f7dc fc4c 	bl	8000574 <__aeabi_i2d>
 8023cdc:	a340      	add	r3, pc, #256	; (adr r3, 8023de0 <__ieee754_exp+0x2c8>)
 8023cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ce2:	4606      	mov	r6, r0
 8023ce4:	460f      	mov	r7, r1
 8023ce6:	f7dc fcaf 	bl	8000648 <__aeabi_dmul>
 8023cea:	4602      	mov	r2, r0
 8023cec:	460b      	mov	r3, r1
 8023cee:	4620      	mov	r0, r4
 8023cf0:	4629      	mov	r1, r5
 8023cf2:	f7dc faf1 	bl	80002d8 <__aeabi_dsub>
 8023cf6:	a33c      	add	r3, pc, #240	; (adr r3, 8023de8 <__ieee754_exp+0x2d0>)
 8023cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cfc:	4680      	mov	r8, r0
 8023cfe:	4689      	mov	r9, r1
 8023d00:	4630      	mov	r0, r6
 8023d02:	4639      	mov	r1, r7
 8023d04:	f7dc fca0 	bl	8000648 <__aeabi_dmul>
 8023d08:	ec41 0b18 	vmov	d8, r0, r1
 8023d0c:	e76f      	b.n	8023bee <__ieee754_exp+0xd6>
 8023d0e:	4a42      	ldr	r2, [pc, #264]	; (8023e18 <__ieee754_exp+0x300>)
 8023d10:	4293      	cmp	r3, r2
 8023d12:	d811      	bhi.n	8023d38 <__ieee754_exp+0x220>
 8023d14:	a336      	add	r3, pc, #216	; (adr r3, 8023df0 <__ieee754_exp+0x2d8>)
 8023d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d1a:	ee10 0a10 	vmov	r0, s0
 8023d1e:	4629      	mov	r1, r5
 8023d20:	f7dc fadc 	bl	80002dc <__adddf3>
 8023d24:	4b3a      	ldr	r3, [pc, #232]	; (8023e10 <__ieee754_exp+0x2f8>)
 8023d26:	2200      	movs	r2, #0
 8023d28:	f7dc ff1e 	bl	8000b68 <__aeabi_dcmpgt>
 8023d2c:	b138      	cbz	r0, 8023d3e <__ieee754_exp+0x226>
 8023d2e:	4b38      	ldr	r3, [pc, #224]	; (8023e10 <__ieee754_exp+0x2f8>)
 8023d30:	2200      	movs	r2, #0
 8023d32:	4620      	mov	r0, r4
 8023d34:	4629      	mov	r1, r5
 8023d36:	e70a      	b.n	8023b4e <__ieee754_exp+0x36>
 8023d38:	f04f 0a00 	mov.w	sl, #0
 8023d3c:	e75f      	b.n	8023bfe <__ieee754_exp+0xe6>
 8023d3e:	4682      	mov	sl, r0
 8023d40:	e75d      	b.n	8023bfe <__ieee754_exp+0xe6>
 8023d42:	4632      	mov	r2, r6
 8023d44:	463b      	mov	r3, r7
 8023d46:	2000      	movs	r0, #0
 8023d48:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023d4c:	f7dc fac4 	bl	80002d8 <__aeabi_dsub>
 8023d50:	4602      	mov	r2, r0
 8023d52:	460b      	mov	r3, r1
 8023d54:	ec51 0b19 	vmov	r0, r1, d9
 8023d58:	f7dc fda0 	bl	800089c <__aeabi_ddiv>
 8023d5c:	4602      	mov	r2, r0
 8023d5e:	460b      	mov	r3, r1
 8023d60:	ec51 0b18 	vmov	r0, r1, d8
 8023d64:	f7dc fab8 	bl	80002d8 <__aeabi_dsub>
 8023d68:	4642      	mov	r2, r8
 8023d6a:	464b      	mov	r3, r9
 8023d6c:	f7dc fab4 	bl	80002d8 <__aeabi_dsub>
 8023d70:	4602      	mov	r2, r0
 8023d72:	460b      	mov	r3, r1
 8023d74:	2000      	movs	r0, #0
 8023d76:	4926      	ldr	r1, [pc, #152]	; (8023e10 <__ieee754_exp+0x2f8>)
 8023d78:	f7dc faae 	bl	80002d8 <__aeabi_dsub>
 8023d7c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023d80:	4592      	cmp	sl, r2
 8023d82:	db02      	blt.n	8023d8a <__ieee754_exp+0x272>
 8023d84:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023d88:	e6e3      	b.n	8023b52 <__ieee754_exp+0x3a>
 8023d8a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8023d8e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8023d92:	2200      	movs	r2, #0
 8023d94:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8023d98:	f7dc fc56 	bl	8000648 <__aeabi_dmul>
 8023d9c:	e6d9      	b.n	8023b52 <__ieee754_exp+0x3a>
 8023d9e:	bf00      	nop
 8023da0:	fefa39ef 	.word	0xfefa39ef
 8023da4:	40862e42 	.word	0x40862e42
 8023da8:	d52d3051 	.word	0xd52d3051
 8023dac:	c0874910 	.word	0xc0874910
 8023db0:	72bea4d0 	.word	0x72bea4d0
 8023db4:	3e663769 	.word	0x3e663769
 8023db8:	c5d26bf1 	.word	0xc5d26bf1
 8023dbc:	3ebbbd41 	.word	0x3ebbbd41
 8023dc0:	af25de2c 	.word	0xaf25de2c
 8023dc4:	3f11566a 	.word	0x3f11566a
 8023dc8:	16bebd93 	.word	0x16bebd93
 8023dcc:	3f66c16c 	.word	0x3f66c16c
 8023dd0:	5555553e 	.word	0x5555553e
 8023dd4:	3fc55555 	.word	0x3fc55555
 8023dd8:	652b82fe 	.word	0x652b82fe
 8023ddc:	3ff71547 	.word	0x3ff71547
 8023de0:	fee00000 	.word	0xfee00000
 8023de4:	3fe62e42 	.word	0x3fe62e42
 8023de8:	35793c76 	.word	0x35793c76
 8023dec:	3dea39ef 	.word	0x3dea39ef
 8023df0:	8800759c 	.word	0x8800759c
 8023df4:	7e37e43c 	.word	0x7e37e43c
 8023df8:	40862e41 	.word	0x40862e41
 8023dfc:	7fefffff 	.word	0x7fefffff
 8023e00:	3fd62e42 	.word	0x3fd62e42
 8023e04:	3ff0a2b1 	.word	0x3ff0a2b1
 8023e08:	080255d0 	.word	0x080255d0
 8023e0c:	080255e0 	.word	0x080255e0
 8023e10:	3ff00000 	.word	0x3ff00000
 8023e14:	080255c0 	.word	0x080255c0
 8023e18:	3defffff 	.word	0x3defffff
 8023e1c:	00000000 	.word	0x00000000

08023e20 <__ieee754_rem_pio2>:
 8023e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e24:	ed2d 8b02 	vpush	{d8}
 8023e28:	ec55 4b10 	vmov	r4, r5, d0
 8023e2c:	4bca      	ldr	r3, [pc, #808]	; (8024158 <__ieee754_rem_pio2+0x338>)
 8023e2e:	b08b      	sub	sp, #44	; 0x2c
 8023e30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8023e34:	4598      	cmp	r8, r3
 8023e36:	4682      	mov	sl, r0
 8023e38:	9502      	str	r5, [sp, #8]
 8023e3a:	dc08      	bgt.n	8023e4e <__ieee754_rem_pio2+0x2e>
 8023e3c:	2200      	movs	r2, #0
 8023e3e:	2300      	movs	r3, #0
 8023e40:	ed80 0b00 	vstr	d0, [r0]
 8023e44:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8023e48:	f04f 0b00 	mov.w	fp, #0
 8023e4c:	e028      	b.n	8023ea0 <__ieee754_rem_pio2+0x80>
 8023e4e:	4bc3      	ldr	r3, [pc, #780]	; (802415c <__ieee754_rem_pio2+0x33c>)
 8023e50:	4598      	cmp	r8, r3
 8023e52:	dc78      	bgt.n	8023f46 <__ieee754_rem_pio2+0x126>
 8023e54:	9b02      	ldr	r3, [sp, #8]
 8023e56:	4ec2      	ldr	r6, [pc, #776]	; (8024160 <__ieee754_rem_pio2+0x340>)
 8023e58:	2b00      	cmp	r3, #0
 8023e5a:	ee10 0a10 	vmov	r0, s0
 8023e5e:	a3b0      	add	r3, pc, #704	; (adr r3, 8024120 <__ieee754_rem_pio2+0x300>)
 8023e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e64:	4629      	mov	r1, r5
 8023e66:	dd39      	ble.n	8023edc <__ieee754_rem_pio2+0xbc>
 8023e68:	f7dc fa36 	bl	80002d8 <__aeabi_dsub>
 8023e6c:	45b0      	cmp	r8, r6
 8023e6e:	4604      	mov	r4, r0
 8023e70:	460d      	mov	r5, r1
 8023e72:	d01b      	beq.n	8023eac <__ieee754_rem_pio2+0x8c>
 8023e74:	a3ac      	add	r3, pc, #688	; (adr r3, 8024128 <__ieee754_rem_pio2+0x308>)
 8023e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e7a:	f7dc fa2d 	bl	80002d8 <__aeabi_dsub>
 8023e7e:	4602      	mov	r2, r0
 8023e80:	460b      	mov	r3, r1
 8023e82:	e9ca 2300 	strd	r2, r3, [sl]
 8023e86:	4620      	mov	r0, r4
 8023e88:	4629      	mov	r1, r5
 8023e8a:	f7dc fa25 	bl	80002d8 <__aeabi_dsub>
 8023e8e:	a3a6      	add	r3, pc, #664	; (adr r3, 8024128 <__ieee754_rem_pio2+0x308>)
 8023e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023e94:	f7dc fa20 	bl	80002d8 <__aeabi_dsub>
 8023e98:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023e9c:	f04f 0b01 	mov.w	fp, #1
 8023ea0:	4658      	mov	r0, fp
 8023ea2:	b00b      	add	sp, #44	; 0x2c
 8023ea4:	ecbd 8b02 	vpop	{d8}
 8023ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023eac:	a3a0      	add	r3, pc, #640	; (adr r3, 8024130 <__ieee754_rem_pio2+0x310>)
 8023eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eb2:	f7dc fa11 	bl	80002d8 <__aeabi_dsub>
 8023eb6:	a3a0      	add	r3, pc, #640	; (adr r3, 8024138 <__ieee754_rem_pio2+0x318>)
 8023eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ebc:	4604      	mov	r4, r0
 8023ebe:	460d      	mov	r5, r1
 8023ec0:	f7dc fa0a 	bl	80002d8 <__aeabi_dsub>
 8023ec4:	4602      	mov	r2, r0
 8023ec6:	460b      	mov	r3, r1
 8023ec8:	e9ca 2300 	strd	r2, r3, [sl]
 8023ecc:	4620      	mov	r0, r4
 8023ece:	4629      	mov	r1, r5
 8023ed0:	f7dc fa02 	bl	80002d8 <__aeabi_dsub>
 8023ed4:	a398      	add	r3, pc, #608	; (adr r3, 8024138 <__ieee754_rem_pio2+0x318>)
 8023ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eda:	e7db      	b.n	8023e94 <__ieee754_rem_pio2+0x74>
 8023edc:	f7dc f9fe 	bl	80002dc <__adddf3>
 8023ee0:	45b0      	cmp	r8, r6
 8023ee2:	4604      	mov	r4, r0
 8023ee4:	460d      	mov	r5, r1
 8023ee6:	d016      	beq.n	8023f16 <__ieee754_rem_pio2+0xf6>
 8023ee8:	a38f      	add	r3, pc, #572	; (adr r3, 8024128 <__ieee754_rem_pio2+0x308>)
 8023eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023eee:	f7dc f9f5 	bl	80002dc <__adddf3>
 8023ef2:	4602      	mov	r2, r0
 8023ef4:	460b      	mov	r3, r1
 8023ef6:	e9ca 2300 	strd	r2, r3, [sl]
 8023efa:	4620      	mov	r0, r4
 8023efc:	4629      	mov	r1, r5
 8023efe:	f7dc f9eb 	bl	80002d8 <__aeabi_dsub>
 8023f02:	a389      	add	r3, pc, #548	; (adr r3, 8024128 <__ieee754_rem_pio2+0x308>)
 8023f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f08:	f7dc f9e8 	bl	80002dc <__adddf3>
 8023f0c:	f04f 3bff 	mov.w	fp, #4294967295
 8023f10:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8023f14:	e7c4      	b.n	8023ea0 <__ieee754_rem_pio2+0x80>
 8023f16:	a386      	add	r3, pc, #536	; (adr r3, 8024130 <__ieee754_rem_pio2+0x310>)
 8023f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f1c:	f7dc f9de 	bl	80002dc <__adddf3>
 8023f20:	a385      	add	r3, pc, #532	; (adr r3, 8024138 <__ieee754_rem_pio2+0x318>)
 8023f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f26:	4604      	mov	r4, r0
 8023f28:	460d      	mov	r5, r1
 8023f2a:	f7dc f9d7 	bl	80002dc <__adddf3>
 8023f2e:	4602      	mov	r2, r0
 8023f30:	460b      	mov	r3, r1
 8023f32:	e9ca 2300 	strd	r2, r3, [sl]
 8023f36:	4620      	mov	r0, r4
 8023f38:	4629      	mov	r1, r5
 8023f3a:	f7dc f9cd 	bl	80002d8 <__aeabi_dsub>
 8023f3e:	a37e      	add	r3, pc, #504	; (adr r3, 8024138 <__ieee754_rem_pio2+0x318>)
 8023f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f44:	e7e0      	b.n	8023f08 <__ieee754_rem_pio2+0xe8>
 8023f46:	4b87      	ldr	r3, [pc, #540]	; (8024164 <__ieee754_rem_pio2+0x344>)
 8023f48:	4598      	cmp	r8, r3
 8023f4a:	f300 80d9 	bgt.w	8024100 <__ieee754_rem_pio2+0x2e0>
 8023f4e:	f000 fe79 	bl	8024c44 <fabs>
 8023f52:	ec55 4b10 	vmov	r4, r5, d0
 8023f56:	ee10 0a10 	vmov	r0, s0
 8023f5a:	a379      	add	r3, pc, #484	; (adr r3, 8024140 <__ieee754_rem_pio2+0x320>)
 8023f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f60:	4629      	mov	r1, r5
 8023f62:	f7dc fb71 	bl	8000648 <__aeabi_dmul>
 8023f66:	4b80      	ldr	r3, [pc, #512]	; (8024168 <__ieee754_rem_pio2+0x348>)
 8023f68:	2200      	movs	r2, #0
 8023f6a:	f7dc f9b7 	bl	80002dc <__adddf3>
 8023f6e:	f7dc fe1b 	bl	8000ba8 <__aeabi_d2iz>
 8023f72:	4683      	mov	fp, r0
 8023f74:	f7dc fafe 	bl	8000574 <__aeabi_i2d>
 8023f78:	4602      	mov	r2, r0
 8023f7a:	460b      	mov	r3, r1
 8023f7c:	ec43 2b18 	vmov	d8, r2, r3
 8023f80:	a367      	add	r3, pc, #412	; (adr r3, 8024120 <__ieee754_rem_pio2+0x300>)
 8023f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f86:	f7dc fb5f 	bl	8000648 <__aeabi_dmul>
 8023f8a:	4602      	mov	r2, r0
 8023f8c:	460b      	mov	r3, r1
 8023f8e:	4620      	mov	r0, r4
 8023f90:	4629      	mov	r1, r5
 8023f92:	f7dc f9a1 	bl	80002d8 <__aeabi_dsub>
 8023f96:	a364      	add	r3, pc, #400	; (adr r3, 8024128 <__ieee754_rem_pio2+0x308>)
 8023f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023f9c:	4606      	mov	r6, r0
 8023f9e:	460f      	mov	r7, r1
 8023fa0:	ec51 0b18 	vmov	r0, r1, d8
 8023fa4:	f7dc fb50 	bl	8000648 <__aeabi_dmul>
 8023fa8:	f1bb 0f1f 	cmp.w	fp, #31
 8023fac:	4604      	mov	r4, r0
 8023fae:	460d      	mov	r5, r1
 8023fb0:	dc0d      	bgt.n	8023fce <__ieee754_rem_pio2+0x1ae>
 8023fb2:	4b6e      	ldr	r3, [pc, #440]	; (802416c <__ieee754_rem_pio2+0x34c>)
 8023fb4:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8023fbc:	4543      	cmp	r3, r8
 8023fbe:	d006      	beq.n	8023fce <__ieee754_rem_pio2+0x1ae>
 8023fc0:	4622      	mov	r2, r4
 8023fc2:	462b      	mov	r3, r5
 8023fc4:	4630      	mov	r0, r6
 8023fc6:	4639      	mov	r1, r7
 8023fc8:	f7dc f986 	bl	80002d8 <__aeabi_dsub>
 8023fcc:	e00f      	b.n	8023fee <__ieee754_rem_pio2+0x1ce>
 8023fce:	462b      	mov	r3, r5
 8023fd0:	4622      	mov	r2, r4
 8023fd2:	4630      	mov	r0, r6
 8023fd4:	4639      	mov	r1, r7
 8023fd6:	f7dc f97f 	bl	80002d8 <__aeabi_dsub>
 8023fda:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023fde:	9303      	str	r3, [sp, #12]
 8023fe0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8023fe4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8023fe8:	f1b8 0f10 	cmp.w	r8, #16
 8023fec:	dc02      	bgt.n	8023ff4 <__ieee754_rem_pio2+0x1d4>
 8023fee:	e9ca 0100 	strd	r0, r1, [sl]
 8023ff2:	e039      	b.n	8024068 <__ieee754_rem_pio2+0x248>
 8023ff4:	a34e      	add	r3, pc, #312	; (adr r3, 8024130 <__ieee754_rem_pio2+0x310>)
 8023ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023ffa:	ec51 0b18 	vmov	r0, r1, d8
 8023ffe:	f7dc fb23 	bl	8000648 <__aeabi_dmul>
 8024002:	4604      	mov	r4, r0
 8024004:	460d      	mov	r5, r1
 8024006:	4602      	mov	r2, r0
 8024008:	460b      	mov	r3, r1
 802400a:	4630      	mov	r0, r6
 802400c:	4639      	mov	r1, r7
 802400e:	f7dc f963 	bl	80002d8 <__aeabi_dsub>
 8024012:	4602      	mov	r2, r0
 8024014:	460b      	mov	r3, r1
 8024016:	4680      	mov	r8, r0
 8024018:	4689      	mov	r9, r1
 802401a:	4630      	mov	r0, r6
 802401c:	4639      	mov	r1, r7
 802401e:	f7dc f95b 	bl	80002d8 <__aeabi_dsub>
 8024022:	4622      	mov	r2, r4
 8024024:	462b      	mov	r3, r5
 8024026:	f7dc f957 	bl	80002d8 <__aeabi_dsub>
 802402a:	a343      	add	r3, pc, #268	; (adr r3, 8024138 <__ieee754_rem_pio2+0x318>)
 802402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024030:	4604      	mov	r4, r0
 8024032:	460d      	mov	r5, r1
 8024034:	ec51 0b18 	vmov	r0, r1, d8
 8024038:	f7dc fb06 	bl	8000648 <__aeabi_dmul>
 802403c:	4622      	mov	r2, r4
 802403e:	462b      	mov	r3, r5
 8024040:	f7dc f94a 	bl	80002d8 <__aeabi_dsub>
 8024044:	4602      	mov	r2, r0
 8024046:	460b      	mov	r3, r1
 8024048:	4604      	mov	r4, r0
 802404a:	460d      	mov	r5, r1
 802404c:	4640      	mov	r0, r8
 802404e:	4649      	mov	r1, r9
 8024050:	f7dc f942 	bl	80002d8 <__aeabi_dsub>
 8024054:	9a03      	ldr	r2, [sp, #12]
 8024056:	f3c1 530a 	ubfx	r3, r1, #20, #11
 802405a:	1ad3      	subs	r3, r2, r3
 802405c:	2b31      	cmp	r3, #49	; 0x31
 802405e:	dc24      	bgt.n	80240aa <__ieee754_rem_pio2+0x28a>
 8024060:	e9ca 0100 	strd	r0, r1, [sl]
 8024064:	4646      	mov	r6, r8
 8024066:	464f      	mov	r7, r9
 8024068:	e9da 8900 	ldrd	r8, r9, [sl]
 802406c:	4630      	mov	r0, r6
 802406e:	4642      	mov	r2, r8
 8024070:	464b      	mov	r3, r9
 8024072:	4639      	mov	r1, r7
 8024074:	f7dc f930 	bl	80002d8 <__aeabi_dsub>
 8024078:	462b      	mov	r3, r5
 802407a:	4622      	mov	r2, r4
 802407c:	f7dc f92c 	bl	80002d8 <__aeabi_dsub>
 8024080:	9b02      	ldr	r3, [sp, #8]
 8024082:	2b00      	cmp	r3, #0
 8024084:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024088:	f6bf af0a 	bge.w	8023ea0 <__ieee754_rem_pio2+0x80>
 802408c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8024090:	f8ca 3004 	str.w	r3, [sl, #4]
 8024094:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024098:	f8ca 8000 	str.w	r8, [sl]
 802409c:	f8ca 0008 	str.w	r0, [sl, #8]
 80240a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80240a4:	f1cb 0b00 	rsb	fp, fp, #0
 80240a8:	e6fa      	b.n	8023ea0 <__ieee754_rem_pio2+0x80>
 80240aa:	a327      	add	r3, pc, #156	; (adr r3, 8024148 <__ieee754_rem_pio2+0x328>)
 80240ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240b0:	ec51 0b18 	vmov	r0, r1, d8
 80240b4:	f7dc fac8 	bl	8000648 <__aeabi_dmul>
 80240b8:	4604      	mov	r4, r0
 80240ba:	460d      	mov	r5, r1
 80240bc:	4602      	mov	r2, r0
 80240be:	460b      	mov	r3, r1
 80240c0:	4640      	mov	r0, r8
 80240c2:	4649      	mov	r1, r9
 80240c4:	f7dc f908 	bl	80002d8 <__aeabi_dsub>
 80240c8:	4602      	mov	r2, r0
 80240ca:	460b      	mov	r3, r1
 80240cc:	4606      	mov	r6, r0
 80240ce:	460f      	mov	r7, r1
 80240d0:	4640      	mov	r0, r8
 80240d2:	4649      	mov	r1, r9
 80240d4:	f7dc f900 	bl	80002d8 <__aeabi_dsub>
 80240d8:	4622      	mov	r2, r4
 80240da:	462b      	mov	r3, r5
 80240dc:	f7dc f8fc 	bl	80002d8 <__aeabi_dsub>
 80240e0:	a31b      	add	r3, pc, #108	; (adr r3, 8024150 <__ieee754_rem_pio2+0x330>)
 80240e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80240e6:	4604      	mov	r4, r0
 80240e8:	460d      	mov	r5, r1
 80240ea:	ec51 0b18 	vmov	r0, r1, d8
 80240ee:	f7dc faab 	bl	8000648 <__aeabi_dmul>
 80240f2:	4622      	mov	r2, r4
 80240f4:	462b      	mov	r3, r5
 80240f6:	f7dc f8ef 	bl	80002d8 <__aeabi_dsub>
 80240fa:	4604      	mov	r4, r0
 80240fc:	460d      	mov	r5, r1
 80240fe:	e75f      	b.n	8023fc0 <__ieee754_rem_pio2+0x1a0>
 8024100:	4b1b      	ldr	r3, [pc, #108]	; (8024170 <__ieee754_rem_pio2+0x350>)
 8024102:	4598      	cmp	r8, r3
 8024104:	dd36      	ble.n	8024174 <__ieee754_rem_pio2+0x354>
 8024106:	ee10 2a10 	vmov	r2, s0
 802410a:	462b      	mov	r3, r5
 802410c:	4620      	mov	r0, r4
 802410e:	4629      	mov	r1, r5
 8024110:	f7dc f8e2 	bl	80002d8 <__aeabi_dsub>
 8024114:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8024118:	e9ca 0100 	strd	r0, r1, [sl]
 802411c:	e694      	b.n	8023e48 <__ieee754_rem_pio2+0x28>
 802411e:	bf00      	nop
 8024120:	54400000 	.word	0x54400000
 8024124:	3ff921fb 	.word	0x3ff921fb
 8024128:	1a626331 	.word	0x1a626331
 802412c:	3dd0b461 	.word	0x3dd0b461
 8024130:	1a600000 	.word	0x1a600000
 8024134:	3dd0b461 	.word	0x3dd0b461
 8024138:	2e037073 	.word	0x2e037073
 802413c:	3ba3198a 	.word	0x3ba3198a
 8024140:	6dc9c883 	.word	0x6dc9c883
 8024144:	3fe45f30 	.word	0x3fe45f30
 8024148:	2e000000 	.word	0x2e000000
 802414c:	3ba3198a 	.word	0x3ba3198a
 8024150:	252049c1 	.word	0x252049c1
 8024154:	397b839a 	.word	0x397b839a
 8024158:	3fe921fb 	.word	0x3fe921fb
 802415c:	4002d97b 	.word	0x4002d97b
 8024160:	3ff921fb 	.word	0x3ff921fb
 8024164:	413921fb 	.word	0x413921fb
 8024168:	3fe00000 	.word	0x3fe00000
 802416c:	080255f0 	.word	0x080255f0
 8024170:	7fefffff 	.word	0x7fefffff
 8024174:	ea4f 5428 	mov.w	r4, r8, asr #20
 8024178:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 802417c:	ee10 0a10 	vmov	r0, s0
 8024180:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8024184:	ee10 6a10 	vmov	r6, s0
 8024188:	460f      	mov	r7, r1
 802418a:	f7dc fd0d 	bl	8000ba8 <__aeabi_d2iz>
 802418e:	f7dc f9f1 	bl	8000574 <__aeabi_i2d>
 8024192:	4602      	mov	r2, r0
 8024194:	460b      	mov	r3, r1
 8024196:	4630      	mov	r0, r6
 8024198:	4639      	mov	r1, r7
 802419a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 802419e:	f7dc f89b 	bl	80002d8 <__aeabi_dsub>
 80241a2:	4b23      	ldr	r3, [pc, #140]	; (8024230 <__ieee754_rem_pio2+0x410>)
 80241a4:	2200      	movs	r2, #0
 80241a6:	f7dc fa4f 	bl	8000648 <__aeabi_dmul>
 80241aa:	460f      	mov	r7, r1
 80241ac:	4606      	mov	r6, r0
 80241ae:	f7dc fcfb 	bl	8000ba8 <__aeabi_d2iz>
 80241b2:	f7dc f9df 	bl	8000574 <__aeabi_i2d>
 80241b6:	4602      	mov	r2, r0
 80241b8:	460b      	mov	r3, r1
 80241ba:	4630      	mov	r0, r6
 80241bc:	4639      	mov	r1, r7
 80241be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80241c2:	f7dc f889 	bl	80002d8 <__aeabi_dsub>
 80241c6:	4b1a      	ldr	r3, [pc, #104]	; (8024230 <__ieee754_rem_pio2+0x410>)
 80241c8:	2200      	movs	r2, #0
 80241ca:	f7dc fa3d 	bl	8000648 <__aeabi_dmul>
 80241ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80241d2:	ad04      	add	r5, sp, #16
 80241d4:	f04f 0803 	mov.w	r8, #3
 80241d8:	46a9      	mov	r9, r5
 80241da:	2600      	movs	r6, #0
 80241dc:	2700      	movs	r7, #0
 80241de:	4632      	mov	r2, r6
 80241e0:	463b      	mov	r3, r7
 80241e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80241e6:	46c3      	mov	fp, r8
 80241e8:	3d08      	subs	r5, #8
 80241ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80241ee:	f7dc fc93 	bl	8000b18 <__aeabi_dcmpeq>
 80241f2:	2800      	cmp	r0, #0
 80241f4:	d1f3      	bne.n	80241de <__ieee754_rem_pio2+0x3be>
 80241f6:	4b0f      	ldr	r3, [pc, #60]	; (8024234 <__ieee754_rem_pio2+0x414>)
 80241f8:	9301      	str	r3, [sp, #4]
 80241fa:	2302      	movs	r3, #2
 80241fc:	9300      	str	r3, [sp, #0]
 80241fe:	4622      	mov	r2, r4
 8024200:	465b      	mov	r3, fp
 8024202:	4651      	mov	r1, sl
 8024204:	4648      	mov	r0, r9
 8024206:	f000 f8df 	bl	80243c8 <__kernel_rem_pio2>
 802420a:	9b02      	ldr	r3, [sp, #8]
 802420c:	2b00      	cmp	r3, #0
 802420e:	4683      	mov	fp, r0
 8024210:	f6bf ae46 	bge.w	8023ea0 <__ieee754_rem_pio2+0x80>
 8024214:	e9da 2100 	ldrd	r2, r1, [sl]
 8024218:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802421c:	e9ca 2300 	strd	r2, r3, [sl]
 8024220:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8024224:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024228:	e9ca 2302 	strd	r2, r3, [sl, #8]
 802422c:	e73a      	b.n	80240a4 <__ieee754_rem_pio2+0x284>
 802422e:	bf00      	nop
 8024230:	41700000 	.word	0x41700000
 8024234:	08025670 	.word	0x08025670

08024238 <__kernel_cos>:
 8024238:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802423c:	ec57 6b10 	vmov	r6, r7, d0
 8024240:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8024244:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8024248:	ed8d 1b00 	vstr	d1, [sp]
 802424c:	da07      	bge.n	802425e <__kernel_cos+0x26>
 802424e:	ee10 0a10 	vmov	r0, s0
 8024252:	4639      	mov	r1, r7
 8024254:	f7dc fca8 	bl	8000ba8 <__aeabi_d2iz>
 8024258:	2800      	cmp	r0, #0
 802425a:	f000 8088 	beq.w	802436e <__kernel_cos+0x136>
 802425e:	4632      	mov	r2, r6
 8024260:	463b      	mov	r3, r7
 8024262:	4630      	mov	r0, r6
 8024264:	4639      	mov	r1, r7
 8024266:	f7dc f9ef 	bl	8000648 <__aeabi_dmul>
 802426a:	4b51      	ldr	r3, [pc, #324]	; (80243b0 <__kernel_cos+0x178>)
 802426c:	2200      	movs	r2, #0
 802426e:	4604      	mov	r4, r0
 8024270:	460d      	mov	r5, r1
 8024272:	f7dc f9e9 	bl	8000648 <__aeabi_dmul>
 8024276:	a340      	add	r3, pc, #256	; (adr r3, 8024378 <__kernel_cos+0x140>)
 8024278:	e9d3 2300 	ldrd	r2, r3, [r3]
 802427c:	4682      	mov	sl, r0
 802427e:	468b      	mov	fp, r1
 8024280:	4620      	mov	r0, r4
 8024282:	4629      	mov	r1, r5
 8024284:	f7dc f9e0 	bl	8000648 <__aeabi_dmul>
 8024288:	a33d      	add	r3, pc, #244	; (adr r3, 8024380 <__kernel_cos+0x148>)
 802428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802428e:	f7dc f825 	bl	80002dc <__adddf3>
 8024292:	4622      	mov	r2, r4
 8024294:	462b      	mov	r3, r5
 8024296:	f7dc f9d7 	bl	8000648 <__aeabi_dmul>
 802429a:	a33b      	add	r3, pc, #236	; (adr r3, 8024388 <__kernel_cos+0x150>)
 802429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242a0:	f7dc f81a 	bl	80002d8 <__aeabi_dsub>
 80242a4:	4622      	mov	r2, r4
 80242a6:	462b      	mov	r3, r5
 80242a8:	f7dc f9ce 	bl	8000648 <__aeabi_dmul>
 80242ac:	a338      	add	r3, pc, #224	; (adr r3, 8024390 <__kernel_cos+0x158>)
 80242ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242b2:	f7dc f813 	bl	80002dc <__adddf3>
 80242b6:	4622      	mov	r2, r4
 80242b8:	462b      	mov	r3, r5
 80242ba:	f7dc f9c5 	bl	8000648 <__aeabi_dmul>
 80242be:	a336      	add	r3, pc, #216	; (adr r3, 8024398 <__kernel_cos+0x160>)
 80242c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242c4:	f7dc f808 	bl	80002d8 <__aeabi_dsub>
 80242c8:	4622      	mov	r2, r4
 80242ca:	462b      	mov	r3, r5
 80242cc:	f7dc f9bc 	bl	8000648 <__aeabi_dmul>
 80242d0:	a333      	add	r3, pc, #204	; (adr r3, 80243a0 <__kernel_cos+0x168>)
 80242d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80242d6:	f7dc f801 	bl	80002dc <__adddf3>
 80242da:	4622      	mov	r2, r4
 80242dc:	462b      	mov	r3, r5
 80242de:	f7dc f9b3 	bl	8000648 <__aeabi_dmul>
 80242e2:	4622      	mov	r2, r4
 80242e4:	462b      	mov	r3, r5
 80242e6:	f7dc f9af 	bl	8000648 <__aeabi_dmul>
 80242ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80242ee:	4604      	mov	r4, r0
 80242f0:	460d      	mov	r5, r1
 80242f2:	4630      	mov	r0, r6
 80242f4:	4639      	mov	r1, r7
 80242f6:	f7dc f9a7 	bl	8000648 <__aeabi_dmul>
 80242fa:	460b      	mov	r3, r1
 80242fc:	4602      	mov	r2, r0
 80242fe:	4629      	mov	r1, r5
 8024300:	4620      	mov	r0, r4
 8024302:	f7db ffe9 	bl	80002d8 <__aeabi_dsub>
 8024306:	4b2b      	ldr	r3, [pc, #172]	; (80243b4 <__kernel_cos+0x17c>)
 8024308:	4598      	cmp	r8, r3
 802430a:	4606      	mov	r6, r0
 802430c:	460f      	mov	r7, r1
 802430e:	dc10      	bgt.n	8024332 <__kernel_cos+0xfa>
 8024310:	4602      	mov	r2, r0
 8024312:	460b      	mov	r3, r1
 8024314:	4650      	mov	r0, sl
 8024316:	4659      	mov	r1, fp
 8024318:	f7db ffde 	bl	80002d8 <__aeabi_dsub>
 802431c:	460b      	mov	r3, r1
 802431e:	4926      	ldr	r1, [pc, #152]	; (80243b8 <__kernel_cos+0x180>)
 8024320:	4602      	mov	r2, r0
 8024322:	2000      	movs	r0, #0
 8024324:	f7db ffd8 	bl	80002d8 <__aeabi_dsub>
 8024328:	ec41 0b10 	vmov	d0, r0, r1
 802432c:	b003      	add	sp, #12
 802432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024332:	4b22      	ldr	r3, [pc, #136]	; (80243bc <__kernel_cos+0x184>)
 8024334:	4920      	ldr	r1, [pc, #128]	; (80243b8 <__kernel_cos+0x180>)
 8024336:	4598      	cmp	r8, r3
 8024338:	bfcc      	ite	gt
 802433a:	4d21      	ldrgt	r5, [pc, #132]	; (80243c0 <__kernel_cos+0x188>)
 802433c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8024340:	2400      	movs	r4, #0
 8024342:	4622      	mov	r2, r4
 8024344:	462b      	mov	r3, r5
 8024346:	2000      	movs	r0, #0
 8024348:	f7db ffc6 	bl	80002d8 <__aeabi_dsub>
 802434c:	4622      	mov	r2, r4
 802434e:	4680      	mov	r8, r0
 8024350:	4689      	mov	r9, r1
 8024352:	462b      	mov	r3, r5
 8024354:	4650      	mov	r0, sl
 8024356:	4659      	mov	r1, fp
 8024358:	f7db ffbe 	bl	80002d8 <__aeabi_dsub>
 802435c:	4632      	mov	r2, r6
 802435e:	463b      	mov	r3, r7
 8024360:	f7db ffba 	bl	80002d8 <__aeabi_dsub>
 8024364:	4602      	mov	r2, r0
 8024366:	460b      	mov	r3, r1
 8024368:	4640      	mov	r0, r8
 802436a:	4649      	mov	r1, r9
 802436c:	e7da      	b.n	8024324 <__kernel_cos+0xec>
 802436e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80243a8 <__kernel_cos+0x170>
 8024372:	e7db      	b.n	802432c <__kernel_cos+0xf4>
 8024374:	f3af 8000 	nop.w
 8024378:	be8838d4 	.word	0xbe8838d4
 802437c:	bda8fae9 	.word	0xbda8fae9
 8024380:	bdb4b1c4 	.word	0xbdb4b1c4
 8024384:	3e21ee9e 	.word	0x3e21ee9e
 8024388:	809c52ad 	.word	0x809c52ad
 802438c:	3e927e4f 	.word	0x3e927e4f
 8024390:	19cb1590 	.word	0x19cb1590
 8024394:	3efa01a0 	.word	0x3efa01a0
 8024398:	16c15177 	.word	0x16c15177
 802439c:	3f56c16c 	.word	0x3f56c16c
 80243a0:	5555554c 	.word	0x5555554c
 80243a4:	3fa55555 	.word	0x3fa55555
 80243a8:	00000000 	.word	0x00000000
 80243ac:	3ff00000 	.word	0x3ff00000
 80243b0:	3fe00000 	.word	0x3fe00000
 80243b4:	3fd33332 	.word	0x3fd33332
 80243b8:	3ff00000 	.word	0x3ff00000
 80243bc:	3fe90000 	.word	0x3fe90000
 80243c0:	3fd20000 	.word	0x3fd20000
 80243c4:	00000000 	.word	0x00000000

080243c8 <__kernel_rem_pio2>:
 80243c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243cc:	ed2d 8b02 	vpush	{d8}
 80243d0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80243d4:	f112 0f14 	cmn.w	r2, #20
 80243d8:	9308      	str	r3, [sp, #32]
 80243da:	9101      	str	r1, [sp, #4]
 80243dc:	4bc4      	ldr	r3, [pc, #784]	; (80246f0 <__kernel_rem_pio2+0x328>)
 80243de:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80243e0:	900b      	str	r0, [sp, #44]	; 0x2c
 80243e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80243e6:	9302      	str	r3, [sp, #8]
 80243e8:	9b08      	ldr	r3, [sp, #32]
 80243ea:	f103 33ff 	add.w	r3, r3, #4294967295
 80243ee:	bfa8      	it	ge
 80243f0:	1ed4      	subge	r4, r2, #3
 80243f2:	9306      	str	r3, [sp, #24]
 80243f4:	bfb2      	itee	lt
 80243f6:	2400      	movlt	r4, #0
 80243f8:	2318      	movge	r3, #24
 80243fa:	fb94 f4f3 	sdivge	r4, r4, r3
 80243fe:	f06f 0317 	mvn.w	r3, #23
 8024402:	fb04 3303 	mla	r3, r4, r3, r3
 8024406:	eb03 0a02 	add.w	sl, r3, r2
 802440a:	9b02      	ldr	r3, [sp, #8]
 802440c:	9a06      	ldr	r2, [sp, #24]
 802440e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80246e0 <__kernel_rem_pio2+0x318>
 8024412:	eb03 0802 	add.w	r8, r3, r2
 8024416:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8024418:	1aa7      	subs	r7, r4, r2
 802441a:	ae22      	add	r6, sp, #136	; 0x88
 802441c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8024420:	2500      	movs	r5, #0
 8024422:	4545      	cmp	r5, r8
 8024424:	dd13      	ble.n	802444e <__kernel_rem_pio2+0x86>
 8024426:	9b08      	ldr	r3, [sp, #32]
 8024428:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80246e0 <__kernel_rem_pio2+0x318>
 802442c:	aa22      	add	r2, sp, #136	; 0x88
 802442e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8024432:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8024436:	f04f 0800 	mov.w	r8, #0
 802443a:	9b02      	ldr	r3, [sp, #8]
 802443c:	4598      	cmp	r8, r3
 802443e:	dc2f      	bgt.n	80244a0 <__kernel_rem_pio2+0xd8>
 8024440:	ed8d 8b04 	vstr	d8, [sp, #16]
 8024444:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8024448:	462f      	mov	r7, r5
 802444a:	2600      	movs	r6, #0
 802444c:	e01b      	b.n	8024486 <__kernel_rem_pio2+0xbe>
 802444e:	42ef      	cmn	r7, r5
 8024450:	d407      	bmi.n	8024462 <__kernel_rem_pio2+0x9a>
 8024452:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8024456:	f7dc f88d 	bl	8000574 <__aeabi_i2d>
 802445a:	e8e6 0102 	strd	r0, r1, [r6], #8
 802445e:	3501      	adds	r5, #1
 8024460:	e7df      	b.n	8024422 <__kernel_rem_pio2+0x5a>
 8024462:	ec51 0b18 	vmov	r0, r1, d8
 8024466:	e7f8      	b.n	802445a <__kernel_rem_pio2+0x92>
 8024468:	e9d7 2300 	ldrd	r2, r3, [r7]
 802446c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8024470:	f7dc f8ea 	bl	8000648 <__aeabi_dmul>
 8024474:	4602      	mov	r2, r0
 8024476:	460b      	mov	r3, r1
 8024478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 802447c:	f7db ff2e 	bl	80002dc <__adddf3>
 8024480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8024484:	3601      	adds	r6, #1
 8024486:	9b06      	ldr	r3, [sp, #24]
 8024488:	429e      	cmp	r6, r3
 802448a:	f1a7 0708 	sub.w	r7, r7, #8
 802448e:	ddeb      	ble.n	8024468 <__kernel_rem_pio2+0xa0>
 8024490:	ed9d 7b04 	vldr	d7, [sp, #16]
 8024494:	f108 0801 	add.w	r8, r8, #1
 8024498:	ecab 7b02 	vstmia	fp!, {d7}
 802449c:	3508      	adds	r5, #8
 802449e:	e7cc      	b.n	802443a <__kernel_rem_pio2+0x72>
 80244a0:	9b02      	ldr	r3, [sp, #8]
 80244a2:	aa0e      	add	r2, sp, #56	; 0x38
 80244a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80244a8:	930d      	str	r3, [sp, #52]	; 0x34
 80244aa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80244ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80244b0:	9c02      	ldr	r4, [sp, #8]
 80244b2:	930c      	str	r3, [sp, #48]	; 0x30
 80244b4:	00e3      	lsls	r3, r4, #3
 80244b6:	930a      	str	r3, [sp, #40]	; 0x28
 80244b8:	ab9a      	add	r3, sp, #616	; 0x268
 80244ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80244be:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80244c2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80244c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80244c8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80244cc:	46c3      	mov	fp, r8
 80244ce:	46a1      	mov	r9, r4
 80244d0:	f1b9 0f00 	cmp.w	r9, #0
 80244d4:	f1a5 0508 	sub.w	r5, r5, #8
 80244d8:	dc77      	bgt.n	80245ca <__kernel_rem_pio2+0x202>
 80244da:	ec47 6b10 	vmov	d0, r6, r7
 80244de:	4650      	mov	r0, sl
 80244e0:	f000 fc46 	bl	8024d70 <scalbn>
 80244e4:	ec57 6b10 	vmov	r6, r7, d0
 80244e8:	2200      	movs	r2, #0
 80244ea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80244ee:	ee10 0a10 	vmov	r0, s0
 80244f2:	4639      	mov	r1, r7
 80244f4:	f7dc f8a8 	bl	8000648 <__aeabi_dmul>
 80244f8:	ec41 0b10 	vmov	d0, r0, r1
 80244fc:	f000 fbb8 	bl	8024c70 <floor>
 8024500:	4b7c      	ldr	r3, [pc, #496]	; (80246f4 <__kernel_rem_pio2+0x32c>)
 8024502:	ec51 0b10 	vmov	r0, r1, d0
 8024506:	2200      	movs	r2, #0
 8024508:	f7dc f89e 	bl	8000648 <__aeabi_dmul>
 802450c:	4602      	mov	r2, r0
 802450e:	460b      	mov	r3, r1
 8024510:	4630      	mov	r0, r6
 8024512:	4639      	mov	r1, r7
 8024514:	f7db fee0 	bl	80002d8 <__aeabi_dsub>
 8024518:	460f      	mov	r7, r1
 802451a:	4606      	mov	r6, r0
 802451c:	f7dc fb44 	bl	8000ba8 <__aeabi_d2iz>
 8024520:	9004      	str	r0, [sp, #16]
 8024522:	f7dc f827 	bl	8000574 <__aeabi_i2d>
 8024526:	4602      	mov	r2, r0
 8024528:	460b      	mov	r3, r1
 802452a:	4630      	mov	r0, r6
 802452c:	4639      	mov	r1, r7
 802452e:	f7db fed3 	bl	80002d8 <__aeabi_dsub>
 8024532:	f1ba 0f00 	cmp.w	sl, #0
 8024536:	4606      	mov	r6, r0
 8024538:	460f      	mov	r7, r1
 802453a:	dd6d      	ble.n	8024618 <__kernel_rem_pio2+0x250>
 802453c:	1e62      	subs	r2, r4, #1
 802453e:	ab0e      	add	r3, sp, #56	; 0x38
 8024540:	9d04      	ldr	r5, [sp, #16]
 8024542:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8024546:	f1ca 0118 	rsb	r1, sl, #24
 802454a:	fa40 f301 	asr.w	r3, r0, r1
 802454e:	441d      	add	r5, r3
 8024550:	408b      	lsls	r3, r1
 8024552:	1ac0      	subs	r0, r0, r3
 8024554:	ab0e      	add	r3, sp, #56	; 0x38
 8024556:	9504      	str	r5, [sp, #16]
 8024558:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 802455c:	f1ca 0317 	rsb	r3, sl, #23
 8024560:	fa40 fb03 	asr.w	fp, r0, r3
 8024564:	f1bb 0f00 	cmp.w	fp, #0
 8024568:	dd65      	ble.n	8024636 <__kernel_rem_pio2+0x26e>
 802456a:	9b04      	ldr	r3, [sp, #16]
 802456c:	2200      	movs	r2, #0
 802456e:	3301      	adds	r3, #1
 8024570:	9304      	str	r3, [sp, #16]
 8024572:	4615      	mov	r5, r2
 8024574:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8024578:	4294      	cmp	r4, r2
 802457a:	f300 809c 	bgt.w	80246b6 <__kernel_rem_pio2+0x2ee>
 802457e:	f1ba 0f00 	cmp.w	sl, #0
 8024582:	dd07      	ble.n	8024594 <__kernel_rem_pio2+0x1cc>
 8024584:	f1ba 0f01 	cmp.w	sl, #1
 8024588:	f000 80c0 	beq.w	802470c <__kernel_rem_pio2+0x344>
 802458c:	f1ba 0f02 	cmp.w	sl, #2
 8024590:	f000 80c6 	beq.w	8024720 <__kernel_rem_pio2+0x358>
 8024594:	f1bb 0f02 	cmp.w	fp, #2
 8024598:	d14d      	bne.n	8024636 <__kernel_rem_pio2+0x26e>
 802459a:	4632      	mov	r2, r6
 802459c:	463b      	mov	r3, r7
 802459e:	4956      	ldr	r1, [pc, #344]	; (80246f8 <__kernel_rem_pio2+0x330>)
 80245a0:	2000      	movs	r0, #0
 80245a2:	f7db fe99 	bl	80002d8 <__aeabi_dsub>
 80245a6:	4606      	mov	r6, r0
 80245a8:	460f      	mov	r7, r1
 80245aa:	2d00      	cmp	r5, #0
 80245ac:	d043      	beq.n	8024636 <__kernel_rem_pio2+0x26e>
 80245ae:	4650      	mov	r0, sl
 80245b0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80246e8 <__kernel_rem_pio2+0x320>
 80245b4:	f000 fbdc 	bl	8024d70 <scalbn>
 80245b8:	4630      	mov	r0, r6
 80245ba:	4639      	mov	r1, r7
 80245bc:	ec53 2b10 	vmov	r2, r3, d0
 80245c0:	f7db fe8a 	bl	80002d8 <__aeabi_dsub>
 80245c4:	4606      	mov	r6, r0
 80245c6:	460f      	mov	r7, r1
 80245c8:	e035      	b.n	8024636 <__kernel_rem_pio2+0x26e>
 80245ca:	4b4c      	ldr	r3, [pc, #304]	; (80246fc <__kernel_rem_pio2+0x334>)
 80245cc:	2200      	movs	r2, #0
 80245ce:	4630      	mov	r0, r6
 80245d0:	4639      	mov	r1, r7
 80245d2:	f7dc f839 	bl	8000648 <__aeabi_dmul>
 80245d6:	f7dc fae7 	bl	8000ba8 <__aeabi_d2iz>
 80245da:	f7db ffcb 	bl	8000574 <__aeabi_i2d>
 80245de:	4602      	mov	r2, r0
 80245e0:	460b      	mov	r3, r1
 80245e2:	ec43 2b18 	vmov	d8, r2, r3
 80245e6:	4b46      	ldr	r3, [pc, #280]	; (8024700 <__kernel_rem_pio2+0x338>)
 80245e8:	2200      	movs	r2, #0
 80245ea:	f7dc f82d 	bl	8000648 <__aeabi_dmul>
 80245ee:	4602      	mov	r2, r0
 80245f0:	460b      	mov	r3, r1
 80245f2:	4630      	mov	r0, r6
 80245f4:	4639      	mov	r1, r7
 80245f6:	f7db fe6f 	bl	80002d8 <__aeabi_dsub>
 80245fa:	f7dc fad5 	bl	8000ba8 <__aeabi_d2iz>
 80245fe:	e9d5 2300 	ldrd	r2, r3, [r5]
 8024602:	f84b 0b04 	str.w	r0, [fp], #4
 8024606:	ec51 0b18 	vmov	r0, r1, d8
 802460a:	f7db fe67 	bl	80002dc <__adddf3>
 802460e:	f109 39ff 	add.w	r9, r9, #4294967295
 8024612:	4606      	mov	r6, r0
 8024614:	460f      	mov	r7, r1
 8024616:	e75b      	b.n	80244d0 <__kernel_rem_pio2+0x108>
 8024618:	d106      	bne.n	8024628 <__kernel_rem_pio2+0x260>
 802461a:	1e63      	subs	r3, r4, #1
 802461c:	aa0e      	add	r2, sp, #56	; 0x38
 802461e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8024622:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8024626:	e79d      	b.n	8024564 <__kernel_rem_pio2+0x19c>
 8024628:	4b36      	ldr	r3, [pc, #216]	; (8024704 <__kernel_rem_pio2+0x33c>)
 802462a:	2200      	movs	r2, #0
 802462c:	f7dc fa92 	bl	8000b54 <__aeabi_dcmpge>
 8024630:	2800      	cmp	r0, #0
 8024632:	d13d      	bne.n	80246b0 <__kernel_rem_pio2+0x2e8>
 8024634:	4683      	mov	fp, r0
 8024636:	2200      	movs	r2, #0
 8024638:	2300      	movs	r3, #0
 802463a:	4630      	mov	r0, r6
 802463c:	4639      	mov	r1, r7
 802463e:	f7dc fa6b 	bl	8000b18 <__aeabi_dcmpeq>
 8024642:	2800      	cmp	r0, #0
 8024644:	f000 80c0 	beq.w	80247c8 <__kernel_rem_pio2+0x400>
 8024648:	1e65      	subs	r5, r4, #1
 802464a:	462b      	mov	r3, r5
 802464c:	2200      	movs	r2, #0
 802464e:	9902      	ldr	r1, [sp, #8]
 8024650:	428b      	cmp	r3, r1
 8024652:	da6c      	bge.n	802472e <__kernel_rem_pio2+0x366>
 8024654:	2a00      	cmp	r2, #0
 8024656:	f000 8089 	beq.w	802476c <__kernel_rem_pio2+0x3a4>
 802465a:	ab0e      	add	r3, sp, #56	; 0x38
 802465c:	f1aa 0a18 	sub.w	sl, sl, #24
 8024660:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8024664:	2b00      	cmp	r3, #0
 8024666:	f000 80ad 	beq.w	80247c4 <__kernel_rem_pio2+0x3fc>
 802466a:	4650      	mov	r0, sl
 802466c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80246e8 <__kernel_rem_pio2+0x320>
 8024670:	f000 fb7e 	bl	8024d70 <scalbn>
 8024674:	ab9a      	add	r3, sp, #616	; 0x268
 8024676:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 802467a:	ec57 6b10 	vmov	r6, r7, d0
 802467e:	00ec      	lsls	r4, r5, #3
 8024680:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8024684:	46aa      	mov	sl, r5
 8024686:	f1ba 0f00 	cmp.w	sl, #0
 802468a:	f280 80d6 	bge.w	802483a <__kernel_rem_pio2+0x472>
 802468e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80246e0 <__kernel_rem_pio2+0x318>
 8024692:	462e      	mov	r6, r5
 8024694:	2e00      	cmp	r6, #0
 8024696:	f2c0 8104 	blt.w	80248a2 <__kernel_rem_pio2+0x4da>
 802469a:	ab72      	add	r3, sp, #456	; 0x1c8
 802469c:	ed8d 8b06 	vstr	d8, [sp, #24]
 80246a0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8024708 <__kernel_rem_pio2+0x340>
 80246a4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80246a8:	f04f 0800 	mov.w	r8, #0
 80246ac:	1baf      	subs	r7, r5, r6
 80246ae:	e0ea      	b.n	8024886 <__kernel_rem_pio2+0x4be>
 80246b0:	f04f 0b02 	mov.w	fp, #2
 80246b4:	e759      	b.n	802456a <__kernel_rem_pio2+0x1a2>
 80246b6:	f8d8 3000 	ldr.w	r3, [r8]
 80246ba:	b955      	cbnz	r5, 80246d2 <__kernel_rem_pio2+0x30a>
 80246bc:	b123      	cbz	r3, 80246c8 <__kernel_rem_pio2+0x300>
 80246be:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80246c2:	f8c8 3000 	str.w	r3, [r8]
 80246c6:	2301      	movs	r3, #1
 80246c8:	3201      	adds	r2, #1
 80246ca:	f108 0804 	add.w	r8, r8, #4
 80246ce:	461d      	mov	r5, r3
 80246d0:	e752      	b.n	8024578 <__kernel_rem_pio2+0x1b0>
 80246d2:	1acb      	subs	r3, r1, r3
 80246d4:	f8c8 3000 	str.w	r3, [r8]
 80246d8:	462b      	mov	r3, r5
 80246da:	e7f5      	b.n	80246c8 <__kernel_rem_pio2+0x300>
 80246dc:	f3af 8000 	nop.w
	...
 80246ec:	3ff00000 	.word	0x3ff00000
 80246f0:	080257b8 	.word	0x080257b8
 80246f4:	40200000 	.word	0x40200000
 80246f8:	3ff00000 	.word	0x3ff00000
 80246fc:	3e700000 	.word	0x3e700000
 8024700:	41700000 	.word	0x41700000
 8024704:	3fe00000 	.word	0x3fe00000
 8024708:	08025778 	.word	0x08025778
 802470c:	1e62      	subs	r2, r4, #1
 802470e:	ab0e      	add	r3, sp, #56	; 0x38
 8024710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024714:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8024718:	a90e      	add	r1, sp, #56	; 0x38
 802471a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 802471e:	e739      	b.n	8024594 <__kernel_rem_pio2+0x1cc>
 8024720:	1e62      	subs	r2, r4, #1
 8024722:	ab0e      	add	r3, sp, #56	; 0x38
 8024724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8024728:	f3c3 0315 	ubfx	r3, r3, #0, #22
 802472c:	e7f4      	b.n	8024718 <__kernel_rem_pio2+0x350>
 802472e:	a90e      	add	r1, sp, #56	; 0x38
 8024730:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8024734:	3b01      	subs	r3, #1
 8024736:	430a      	orrs	r2, r1
 8024738:	e789      	b.n	802464e <__kernel_rem_pio2+0x286>
 802473a:	3301      	adds	r3, #1
 802473c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8024740:	2900      	cmp	r1, #0
 8024742:	d0fa      	beq.n	802473a <__kernel_rem_pio2+0x372>
 8024744:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024746:	f502 721a 	add.w	r2, r2, #616	; 0x268
 802474a:	446a      	add	r2, sp
 802474c:	3a98      	subs	r2, #152	; 0x98
 802474e:	920a      	str	r2, [sp, #40]	; 0x28
 8024750:	9a08      	ldr	r2, [sp, #32]
 8024752:	18e3      	adds	r3, r4, r3
 8024754:	18a5      	adds	r5, r4, r2
 8024756:	aa22      	add	r2, sp, #136	; 0x88
 8024758:	f104 0801 	add.w	r8, r4, #1
 802475c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8024760:	9304      	str	r3, [sp, #16]
 8024762:	9b04      	ldr	r3, [sp, #16]
 8024764:	4543      	cmp	r3, r8
 8024766:	da04      	bge.n	8024772 <__kernel_rem_pio2+0x3aa>
 8024768:	461c      	mov	r4, r3
 802476a:	e6a3      	b.n	80244b4 <__kernel_rem_pio2+0xec>
 802476c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802476e:	2301      	movs	r3, #1
 8024770:	e7e4      	b.n	802473c <__kernel_rem_pio2+0x374>
 8024772:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024774:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8024778:	f7db fefc 	bl	8000574 <__aeabi_i2d>
 802477c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8024780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024782:	46ab      	mov	fp, r5
 8024784:	461c      	mov	r4, r3
 8024786:	f04f 0900 	mov.w	r9, #0
 802478a:	2600      	movs	r6, #0
 802478c:	2700      	movs	r7, #0
 802478e:	9b06      	ldr	r3, [sp, #24]
 8024790:	4599      	cmp	r9, r3
 8024792:	dd06      	ble.n	80247a2 <__kernel_rem_pio2+0x3da>
 8024794:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024796:	e8e3 6702 	strd	r6, r7, [r3], #8
 802479a:	f108 0801 	add.w	r8, r8, #1
 802479e:	930a      	str	r3, [sp, #40]	; 0x28
 80247a0:	e7df      	b.n	8024762 <__kernel_rem_pio2+0x39a>
 80247a2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80247a6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80247aa:	f7db ff4d 	bl	8000648 <__aeabi_dmul>
 80247ae:	4602      	mov	r2, r0
 80247b0:	460b      	mov	r3, r1
 80247b2:	4630      	mov	r0, r6
 80247b4:	4639      	mov	r1, r7
 80247b6:	f7db fd91 	bl	80002dc <__adddf3>
 80247ba:	f109 0901 	add.w	r9, r9, #1
 80247be:	4606      	mov	r6, r0
 80247c0:	460f      	mov	r7, r1
 80247c2:	e7e4      	b.n	802478e <__kernel_rem_pio2+0x3c6>
 80247c4:	3d01      	subs	r5, #1
 80247c6:	e748      	b.n	802465a <__kernel_rem_pio2+0x292>
 80247c8:	ec47 6b10 	vmov	d0, r6, r7
 80247cc:	f1ca 0000 	rsb	r0, sl, #0
 80247d0:	f000 face 	bl	8024d70 <scalbn>
 80247d4:	ec57 6b10 	vmov	r6, r7, d0
 80247d8:	4ba0      	ldr	r3, [pc, #640]	; (8024a5c <__kernel_rem_pio2+0x694>)
 80247da:	ee10 0a10 	vmov	r0, s0
 80247de:	2200      	movs	r2, #0
 80247e0:	4639      	mov	r1, r7
 80247e2:	f7dc f9b7 	bl	8000b54 <__aeabi_dcmpge>
 80247e6:	b1f8      	cbz	r0, 8024828 <__kernel_rem_pio2+0x460>
 80247e8:	4b9d      	ldr	r3, [pc, #628]	; (8024a60 <__kernel_rem_pio2+0x698>)
 80247ea:	2200      	movs	r2, #0
 80247ec:	4630      	mov	r0, r6
 80247ee:	4639      	mov	r1, r7
 80247f0:	f7db ff2a 	bl	8000648 <__aeabi_dmul>
 80247f4:	f7dc f9d8 	bl	8000ba8 <__aeabi_d2iz>
 80247f8:	4680      	mov	r8, r0
 80247fa:	f7db febb 	bl	8000574 <__aeabi_i2d>
 80247fe:	4b97      	ldr	r3, [pc, #604]	; (8024a5c <__kernel_rem_pio2+0x694>)
 8024800:	2200      	movs	r2, #0
 8024802:	f7db ff21 	bl	8000648 <__aeabi_dmul>
 8024806:	460b      	mov	r3, r1
 8024808:	4602      	mov	r2, r0
 802480a:	4639      	mov	r1, r7
 802480c:	4630      	mov	r0, r6
 802480e:	f7db fd63 	bl	80002d8 <__aeabi_dsub>
 8024812:	f7dc f9c9 	bl	8000ba8 <__aeabi_d2iz>
 8024816:	1c65      	adds	r5, r4, #1
 8024818:	ab0e      	add	r3, sp, #56	; 0x38
 802481a:	f10a 0a18 	add.w	sl, sl, #24
 802481e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024822:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8024826:	e720      	b.n	802466a <__kernel_rem_pio2+0x2a2>
 8024828:	4630      	mov	r0, r6
 802482a:	4639      	mov	r1, r7
 802482c:	f7dc f9bc 	bl	8000ba8 <__aeabi_d2iz>
 8024830:	ab0e      	add	r3, sp, #56	; 0x38
 8024832:	4625      	mov	r5, r4
 8024834:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8024838:	e717      	b.n	802466a <__kernel_rem_pio2+0x2a2>
 802483a:	ab0e      	add	r3, sp, #56	; 0x38
 802483c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8024840:	f7db fe98 	bl	8000574 <__aeabi_i2d>
 8024844:	4632      	mov	r2, r6
 8024846:	463b      	mov	r3, r7
 8024848:	f7db fefe 	bl	8000648 <__aeabi_dmul>
 802484c:	4b84      	ldr	r3, [pc, #528]	; (8024a60 <__kernel_rem_pio2+0x698>)
 802484e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8024852:	2200      	movs	r2, #0
 8024854:	4630      	mov	r0, r6
 8024856:	4639      	mov	r1, r7
 8024858:	f7db fef6 	bl	8000648 <__aeabi_dmul>
 802485c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024860:	4606      	mov	r6, r0
 8024862:	460f      	mov	r7, r1
 8024864:	e70f      	b.n	8024686 <__kernel_rem_pio2+0x2be>
 8024866:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 802486a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 802486e:	f7db feeb 	bl	8000648 <__aeabi_dmul>
 8024872:	4602      	mov	r2, r0
 8024874:	460b      	mov	r3, r1
 8024876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 802487a:	f7db fd2f 	bl	80002dc <__adddf3>
 802487e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8024882:	f108 0801 	add.w	r8, r8, #1
 8024886:	9b02      	ldr	r3, [sp, #8]
 8024888:	4598      	cmp	r8, r3
 802488a:	dc01      	bgt.n	8024890 <__kernel_rem_pio2+0x4c8>
 802488c:	45b8      	cmp	r8, r7
 802488e:	ddea      	ble.n	8024866 <__kernel_rem_pio2+0x49e>
 8024890:	ed9d 7b06 	vldr	d7, [sp, #24]
 8024894:	ab4a      	add	r3, sp, #296	; 0x128
 8024896:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 802489a:	ed87 7b00 	vstr	d7, [r7]
 802489e:	3e01      	subs	r6, #1
 80248a0:	e6f8      	b.n	8024694 <__kernel_rem_pio2+0x2cc>
 80248a2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80248a4:	2b02      	cmp	r3, #2
 80248a6:	dc0b      	bgt.n	80248c0 <__kernel_rem_pio2+0x4f8>
 80248a8:	2b00      	cmp	r3, #0
 80248aa:	dc35      	bgt.n	8024918 <__kernel_rem_pio2+0x550>
 80248ac:	d059      	beq.n	8024962 <__kernel_rem_pio2+0x59a>
 80248ae:	9b04      	ldr	r3, [sp, #16]
 80248b0:	f003 0007 	and.w	r0, r3, #7
 80248b4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80248b8:	ecbd 8b02 	vpop	{d8}
 80248bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80248c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80248c2:	2b03      	cmp	r3, #3
 80248c4:	d1f3      	bne.n	80248ae <__kernel_rem_pio2+0x4e6>
 80248c6:	ab4a      	add	r3, sp, #296	; 0x128
 80248c8:	4423      	add	r3, r4
 80248ca:	9306      	str	r3, [sp, #24]
 80248cc:	461c      	mov	r4, r3
 80248ce:	469a      	mov	sl, r3
 80248d0:	9502      	str	r5, [sp, #8]
 80248d2:	9b02      	ldr	r3, [sp, #8]
 80248d4:	2b00      	cmp	r3, #0
 80248d6:	f1aa 0a08 	sub.w	sl, sl, #8
 80248da:	dc6b      	bgt.n	80249b4 <__kernel_rem_pio2+0x5ec>
 80248dc:	46aa      	mov	sl, r5
 80248de:	f1ba 0f01 	cmp.w	sl, #1
 80248e2:	f1a4 0408 	sub.w	r4, r4, #8
 80248e6:	f300 8085 	bgt.w	80249f4 <__kernel_rem_pio2+0x62c>
 80248ea:	9c06      	ldr	r4, [sp, #24]
 80248ec:	2000      	movs	r0, #0
 80248ee:	3408      	adds	r4, #8
 80248f0:	2100      	movs	r1, #0
 80248f2:	2d01      	cmp	r5, #1
 80248f4:	f300 809d 	bgt.w	8024a32 <__kernel_rem_pio2+0x66a>
 80248f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80248fc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8024900:	f1bb 0f00 	cmp.w	fp, #0
 8024904:	f040 809b 	bne.w	8024a3e <__kernel_rem_pio2+0x676>
 8024908:	9b01      	ldr	r3, [sp, #4]
 802490a:	e9c3 5600 	strd	r5, r6, [r3]
 802490e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8024912:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8024916:	e7ca      	b.n	80248ae <__kernel_rem_pio2+0x4e6>
 8024918:	3408      	adds	r4, #8
 802491a:	ab4a      	add	r3, sp, #296	; 0x128
 802491c:	441c      	add	r4, r3
 802491e:	462e      	mov	r6, r5
 8024920:	2000      	movs	r0, #0
 8024922:	2100      	movs	r1, #0
 8024924:	2e00      	cmp	r6, #0
 8024926:	da36      	bge.n	8024996 <__kernel_rem_pio2+0x5ce>
 8024928:	f1bb 0f00 	cmp.w	fp, #0
 802492c:	d039      	beq.n	80249a2 <__kernel_rem_pio2+0x5da>
 802492e:	4602      	mov	r2, r0
 8024930:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024934:	9c01      	ldr	r4, [sp, #4]
 8024936:	e9c4 2300 	strd	r2, r3, [r4]
 802493a:	4602      	mov	r2, r0
 802493c:	460b      	mov	r3, r1
 802493e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8024942:	f7db fcc9 	bl	80002d8 <__aeabi_dsub>
 8024946:	ae4c      	add	r6, sp, #304	; 0x130
 8024948:	2401      	movs	r4, #1
 802494a:	42a5      	cmp	r5, r4
 802494c:	da2c      	bge.n	80249a8 <__kernel_rem_pio2+0x5e0>
 802494e:	f1bb 0f00 	cmp.w	fp, #0
 8024952:	d002      	beq.n	802495a <__kernel_rem_pio2+0x592>
 8024954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024958:	4619      	mov	r1, r3
 802495a:	9b01      	ldr	r3, [sp, #4]
 802495c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8024960:	e7a5      	b.n	80248ae <__kernel_rem_pio2+0x4e6>
 8024962:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8024966:	eb0d 0403 	add.w	r4, sp, r3
 802496a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 802496e:	2000      	movs	r0, #0
 8024970:	2100      	movs	r1, #0
 8024972:	2d00      	cmp	r5, #0
 8024974:	da09      	bge.n	802498a <__kernel_rem_pio2+0x5c2>
 8024976:	f1bb 0f00 	cmp.w	fp, #0
 802497a:	d002      	beq.n	8024982 <__kernel_rem_pio2+0x5ba>
 802497c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024980:	4619      	mov	r1, r3
 8024982:	9b01      	ldr	r3, [sp, #4]
 8024984:	e9c3 0100 	strd	r0, r1, [r3]
 8024988:	e791      	b.n	80248ae <__kernel_rem_pio2+0x4e6>
 802498a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802498e:	f7db fca5 	bl	80002dc <__adddf3>
 8024992:	3d01      	subs	r5, #1
 8024994:	e7ed      	b.n	8024972 <__kernel_rem_pio2+0x5aa>
 8024996:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 802499a:	f7db fc9f 	bl	80002dc <__adddf3>
 802499e:	3e01      	subs	r6, #1
 80249a0:	e7c0      	b.n	8024924 <__kernel_rem_pio2+0x55c>
 80249a2:	4602      	mov	r2, r0
 80249a4:	460b      	mov	r3, r1
 80249a6:	e7c5      	b.n	8024934 <__kernel_rem_pio2+0x56c>
 80249a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80249ac:	f7db fc96 	bl	80002dc <__adddf3>
 80249b0:	3401      	adds	r4, #1
 80249b2:	e7ca      	b.n	802494a <__kernel_rem_pio2+0x582>
 80249b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80249b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80249bc:	9b02      	ldr	r3, [sp, #8]
 80249be:	3b01      	subs	r3, #1
 80249c0:	9302      	str	r3, [sp, #8]
 80249c2:	4632      	mov	r2, r6
 80249c4:	463b      	mov	r3, r7
 80249c6:	4640      	mov	r0, r8
 80249c8:	4649      	mov	r1, r9
 80249ca:	f7db fc87 	bl	80002dc <__adddf3>
 80249ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80249d2:	4602      	mov	r2, r0
 80249d4:	460b      	mov	r3, r1
 80249d6:	4640      	mov	r0, r8
 80249d8:	4649      	mov	r1, r9
 80249da:	f7db fc7d 	bl	80002d8 <__aeabi_dsub>
 80249de:	4632      	mov	r2, r6
 80249e0:	463b      	mov	r3, r7
 80249e2:	f7db fc7b 	bl	80002dc <__adddf3>
 80249e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80249ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80249ee:	ed8a 7b00 	vstr	d7, [sl]
 80249f2:	e76e      	b.n	80248d2 <__kernel_rem_pio2+0x50a>
 80249f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80249f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80249fc:	4640      	mov	r0, r8
 80249fe:	4632      	mov	r2, r6
 8024a00:	463b      	mov	r3, r7
 8024a02:	4649      	mov	r1, r9
 8024a04:	f7db fc6a 	bl	80002dc <__adddf3>
 8024a08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024a0c:	4602      	mov	r2, r0
 8024a0e:	460b      	mov	r3, r1
 8024a10:	4640      	mov	r0, r8
 8024a12:	4649      	mov	r1, r9
 8024a14:	f7db fc60 	bl	80002d8 <__aeabi_dsub>
 8024a18:	4632      	mov	r2, r6
 8024a1a:	463b      	mov	r3, r7
 8024a1c:	f7db fc5e 	bl	80002dc <__adddf3>
 8024a20:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024a24:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8024a28:	ed84 7b00 	vstr	d7, [r4]
 8024a2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8024a30:	e755      	b.n	80248de <__kernel_rem_pio2+0x516>
 8024a32:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8024a36:	f7db fc51 	bl	80002dc <__adddf3>
 8024a3a:	3d01      	subs	r5, #1
 8024a3c:	e759      	b.n	80248f2 <__kernel_rem_pio2+0x52a>
 8024a3e:	9b01      	ldr	r3, [sp, #4]
 8024a40:	9a01      	ldr	r2, [sp, #4]
 8024a42:	601d      	str	r5, [r3, #0]
 8024a44:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8024a48:	605c      	str	r4, [r3, #4]
 8024a4a:	609f      	str	r7, [r3, #8]
 8024a4c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8024a50:	60d3      	str	r3, [r2, #12]
 8024a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8024a56:	6110      	str	r0, [r2, #16]
 8024a58:	6153      	str	r3, [r2, #20]
 8024a5a:	e728      	b.n	80248ae <__kernel_rem_pio2+0x4e6>
 8024a5c:	41700000 	.word	0x41700000
 8024a60:	3e700000 	.word	0x3e700000
 8024a64:	00000000 	.word	0x00000000

08024a68 <__kernel_sin>:
 8024a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a6c:	ed2d 8b04 	vpush	{d8-d9}
 8024a70:	eeb0 8a41 	vmov.f32	s16, s2
 8024a74:	eef0 8a61 	vmov.f32	s17, s3
 8024a78:	ec55 4b10 	vmov	r4, r5, d0
 8024a7c:	b083      	sub	sp, #12
 8024a7e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024a82:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8024a86:	9001      	str	r0, [sp, #4]
 8024a88:	da06      	bge.n	8024a98 <__kernel_sin+0x30>
 8024a8a:	ee10 0a10 	vmov	r0, s0
 8024a8e:	4629      	mov	r1, r5
 8024a90:	f7dc f88a 	bl	8000ba8 <__aeabi_d2iz>
 8024a94:	2800      	cmp	r0, #0
 8024a96:	d051      	beq.n	8024b3c <__kernel_sin+0xd4>
 8024a98:	4622      	mov	r2, r4
 8024a9a:	462b      	mov	r3, r5
 8024a9c:	4620      	mov	r0, r4
 8024a9e:	4629      	mov	r1, r5
 8024aa0:	f7db fdd2 	bl	8000648 <__aeabi_dmul>
 8024aa4:	4682      	mov	sl, r0
 8024aa6:	468b      	mov	fp, r1
 8024aa8:	4602      	mov	r2, r0
 8024aaa:	460b      	mov	r3, r1
 8024aac:	4620      	mov	r0, r4
 8024aae:	4629      	mov	r1, r5
 8024ab0:	f7db fdca 	bl	8000648 <__aeabi_dmul>
 8024ab4:	a341      	add	r3, pc, #260	; (adr r3, 8024bbc <__kernel_sin+0x154>)
 8024ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024aba:	4680      	mov	r8, r0
 8024abc:	4689      	mov	r9, r1
 8024abe:	4650      	mov	r0, sl
 8024ac0:	4659      	mov	r1, fp
 8024ac2:	f7db fdc1 	bl	8000648 <__aeabi_dmul>
 8024ac6:	a33f      	add	r3, pc, #252	; (adr r3, 8024bc4 <__kernel_sin+0x15c>)
 8024ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024acc:	f7db fc04 	bl	80002d8 <__aeabi_dsub>
 8024ad0:	4652      	mov	r2, sl
 8024ad2:	465b      	mov	r3, fp
 8024ad4:	f7db fdb8 	bl	8000648 <__aeabi_dmul>
 8024ad8:	a33c      	add	r3, pc, #240	; (adr r3, 8024bcc <__kernel_sin+0x164>)
 8024ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024ade:	f7db fbfd 	bl	80002dc <__adddf3>
 8024ae2:	4652      	mov	r2, sl
 8024ae4:	465b      	mov	r3, fp
 8024ae6:	f7db fdaf 	bl	8000648 <__aeabi_dmul>
 8024aea:	a33a      	add	r3, pc, #232	; (adr r3, 8024bd4 <__kernel_sin+0x16c>)
 8024aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024af0:	f7db fbf2 	bl	80002d8 <__aeabi_dsub>
 8024af4:	4652      	mov	r2, sl
 8024af6:	465b      	mov	r3, fp
 8024af8:	f7db fda6 	bl	8000648 <__aeabi_dmul>
 8024afc:	a337      	add	r3, pc, #220	; (adr r3, 8024bdc <__kernel_sin+0x174>)
 8024afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b02:	f7db fbeb 	bl	80002dc <__adddf3>
 8024b06:	9b01      	ldr	r3, [sp, #4]
 8024b08:	4606      	mov	r6, r0
 8024b0a:	460f      	mov	r7, r1
 8024b0c:	b9eb      	cbnz	r3, 8024b4a <__kernel_sin+0xe2>
 8024b0e:	4602      	mov	r2, r0
 8024b10:	460b      	mov	r3, r1
 8024b12:	4650      	mov	r0, sl
 8024b14:	4659      	mov	r1, fp
 8024b16:	f7db fd97 	bl	8000648 <__aeabi_dmul>
 8024b1a:	a325      	add	r3, pc, #148	; (adr r3, 8024bb0 <__kernel_sin+0x148>)
 8024b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b20:	f7db fbda 	bl	80002d8 <__aeabi_dsub>
 8024b24:	4642      	mov	r2, r8
 8024b26:	464b      	mov	r3, r9
 8024b28:	f7db fd8e 	bl	8000648 <__aeabi_dmul>
 8024b2c:	4602      	mov	r2, r0
 8024b2e:	460b      	mov	r3, r1
 8024b30:	4620      	mov	r0, r4
 8024b32:	4629      	mov	r1, r5
 8024b34:	f7db fbd2 	bl	80002dc <__adddf3>
 8024b38:	4604      	mov	r4, r0
 8024b3a:	460d      	mov	r5, r1
 8024b3c:	ec45 4b10 	vmov	d0, r4, r5
 8024b40:	b003      	add	sp, #12
 8024b42:	ecbd 8b04 	vpop	{d8-d9}
 8024b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b4a:	4b1b      	ldr	r3, [pc, #108]	; (8024bb8 <__kernel_sin+0x150>)
 8024b4c:	ec51 0b18 	vmov	r0, r1, d8
 8024b50:	2200      	movs	r2, #0
 8024b52:	f7db fd79 	bl	8000648 <__aeabi_dmul>
 8024b56:	4632      	mov	r2, r6
 8024b58:	ec41 0b19 	vmov	d9, r0, r1
 8024b5c:	463b      	mov	r3, r7
 8024b5e:	4640      	mov	r0, r8
 8024b60:	4649      	mov	r1, r9
 8024b62:	f7db fd71 	bl	8000648 <__aeabi_dmul>
 8024b66:	4602      	mov	r2, r0
 8024b68:	460b      	mov	r3, r1
 8024b6a:	ec51 0b19 	vmov	r0, r1, d9
 8024b6e:	f7db fbb3 	bl	80002d8 <__aeabi_dsub>
 8024b72:	4652      	mov	r2, sl
 8024b74:	465b      	mov	r3, fp
 8024b76:	f7db fd67 	bl	8000648 <__aeabi_dmul>
 8024b7a:	ec53 2b18 	vmov	r2, r3, d8
 8024b7e:	f7db fbab 	bl	80002d8 <__aeabi_dsub>
 8024b82:	a30b      	add	r3, pc, #44	; (adr r3, 8024bb0 <__kernel_sin+0x148>)
 8024b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024b88:	4606      	mov	r6, r0
 8024b8a:	460f      	mov	r7, r1
 8024b8c:	4640      	mov	r0, r8
 8024b8e:	4649      	mov	r1, r9
 8024b90:	f7db fd5a 	bl	8000648 <__aeabi_dmul>
 8024b94:	4602      	mov	r2, r0
 8024b96:	460b      	mov	r3, r1
 8024b98:	4630      	mov	r0, r6
 8024b9a:	4639      	mov	r1, r7
 8024b9c:	f7db fb9e 	bl	80002dc <__adddf3>
 8024ba0:	4602      	mov	r2, r0
 8024ba2:	460b      	mov	r3, r1
 8024ba4:	4620      	mov	r0, r4
 8024ba6:	4629      	mov	r1, r5
 8024ba8:	f7db fb96 	bl	80002d8 <__aeabi_dsub>
 8024bac:	e7c4      	b.n	8024b38 <__kernel_sin+0xd0>
 8024bae:	bf00      	nop
 8024bb0:	55555549 	.word	0x55555549
 8024bb4:	3fc55555 	.word	0x3fc55555
 8024bb8:	3fe00000 	.word	0x3fe00000
 8024bbc:	5acfd57c 	.word	0x5acfd57c
 8024bc0:	3de5d93a 	.word	0x3de5d93a
 8024bc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8024bc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8024bcc:	57b1fe7d 	.word	0x57b1fe7d
 8024bd0:	3ec71de3 	.word	0x3ec71de3
 8024bd4:	19c161d5 	.word	0x19c161d5
 8024bd8:	3f2a01a0 	.word	0x3f2a01a0
 8024bdc:	1110f8a6 	.word	0x1110f8a6
 8024be0:	3f811111 	.word	0x3f811111

08024be4 <with_errno>:
 8024be4:	b570      	push	{r4, r5, r6, lr}
 8024be6:	4604      	mov	r4, r0
 8024be8:	460d      	mov	r5, r1
 8024bea:	4616      	mov	r6, r2
 8024bec:	f7fb ffe8 	bl	8020bc0 <__errno>
 8024bf0:	4629      	mov	r1, r5
 8024bf2:	6006      	str	r6, [r0, #0]
 8024bf4:	4620      	mov	r0, r4
 8024bf6:	bd70      	pop	{r4, r5, r6, pc}

08024bf8 <xflow>:
 8024bf8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8024bfa:	4614      	mov	r4, r2
 8024bfc:	461d      	mov	r5, r3
 8024bfe:	b108      	cbz	r0, 8024c04 <xflow+0xc>
 8024c00:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8024c04:	e9cd 2300 	strd	r2, r3, [sp]
 8024c08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024c0c:	4620      	mov	r0, r4
 8024c0e:	4629      	mov	r1, r5
 8024c10:	f7db fd1a 	bl	8000648 <__aeabi_dmul>
 8024c14:	2222      	movs	r2, #34	; 0x22
 8024c16:	b003      	add	sp, #12
 8024c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024c1c:	f7ff bfe2 	b.w	8024be4 <with_errno>

08024c20 <__math_uflow>:
 8024c20:	b508      	push	{r3, lr}
 8024c22:	2200      	movs	r2, #0
 8024c24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8024c28:	f7ff ffe6 	bl	8024bf8 <xflow>
 8024c2c:	ec41 0b10 	vmov	d0, r0, r1
 8024c30:	bd08      	pop	{r3, pc}

08024c32 <__math_oflow>:
 8024c32:	b508      	push	{r3, lr}
 8024c34:	2200      	movs	r2, #0
 8024c36:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8024c3a:	f7ff ffdd 	bl	8024bf8 <xflow>
 8024c3e:	ec41 0b10 	vmov	d0, r0, r1
 8024c42:	bd08      	pop	{r3, pc}

08024c44 <fabs>:
 8024c44:	ec51 0b10 	vmov	r0, r1, d0
 8024c48:	ee10 2a10 	vmov	r2, s0
 8024c4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8024c50:	ec43 2b10 	vmov	d0, r2, r3
 8024c54:	4770      	bx	lr

08024c56 <finite>:
 8024c56:	b082      	sub	sp, #8
 8024c58:	ed8d 0b00 	vstr	d0, [sp]
 8024c5c:	9801      	ldr	r0, [sp, #4]
 8024c5e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8024c62:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8024c66:	0fc0      	lsrs	r0, r0, #31
 8024c68:	b002      	add	sp, #8
 8024c6a:	4770      	bx	lr
 8024c6c:	0000      	movs	r0, r0
	...

08024c70 <floor>:
 8024c70:	ec51 0b10 	vmov	r0, r1, d0
 8024c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024c78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8024c7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8024c80:	2e13      	cmp	r6, #19
 8024c82:	ee10 5a10 	vmov	r5, s0
 8024c86:	ee10 8a10 	vmov	r8, s0
 8024c8a:	460c      	mov	r4, r1
 8024c8c:	dc32      	bgt.n	8024cf4 <floor+0x84>
 8024c8e:	2e00      	cmp	r6, #0
 8024c90:	da14      	bge.n	8024cbc <floor+0x4c>
 8024c92:	a333      	add	r3, pc, #204	; (adr r3, 8024d60 <floor+0xf0>)
 8024c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024c98:	f7db fb20 	bl	80002dc <__adddf3>
 8024c9c:	2200      	movs	r2, #0
 8024c9e:	2300      	movs	r3, #0
 8024ca0:	f7db ff62 	bl	8000b68 <__aeabi_dcmpgt>
 8024ca4:	b138      	cbz	r0, 8024cb6 <floor+0x46>
 8024ca6:	2c00      	cmp	r4, #0
 8024ca8:	da57      	bge.n	8024d5a <floor+0xea>
 8024caa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8024cae:	431d      	orrs	r5, r3
 8024cb0:	d001      	beq.n	8024cb6 <floor+0x46>
 8024cb2:	4c2d      	ldr	r4, [pc, #180]	; (8024d68 <floor+0xf8>)
 8024cb4:	2500      	movs	r5, #0
 8024cb6:	4621      	mov	r1, r4
 8024cb8:	4628      	mov	r0, r5
 8024cba:	e025      	b.n	8024d08 <floor+0x98>
 8024cbc:	4f2b      	ldr	r7, [pc, #172]	; (8024d6c <floor+0xfc>)
 8024cbe:	4137      	asrs	r7, r6
 8024cc0:	ea01 0307 	and.w	r3, r1, r7
 8024cc4:	4303      	orrs	r3, r0
 8024cc6:	d01f      	beq.n	8024d08 <floor+0x98>
 8024cc8:	a325      	add	r3, pc, #148	; (adr r3, 8024d60 <floor+0xf0>)
 8024cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024cce:	f7db fb05 	bl	80002dc <__adddf3>
 8024cd2:	2200      	movs	r2, #0
 8024cd4:	2300      	movs	r3, #0
 8024cd6:	f7db ff47 	bl	8000b68 <__aeabi_dcmpgt>
 8024cda:	2800      	cmp	r0, #0
 8024cdc:	d0eb      	beq.n	8024cb6 <floor+0x46>
 8024cde:	2c00      	cmp	r4, #0
 8024ce0:	bfbe      	ittt	lt
 8024ce2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8024ce6:	fa43 f606 	asrlt.w	r6, r3, r6
 8024cea:	19a4      	addlt	r4, r4, r6
 8024cec:	ea24 0407 	bic.w	r4, r4, r7
 8024cf0:	2500      	movs	r5, #0
 8024cf2:	e7e0      	b.n	8024cb6 <floor+0x46>
 8024cf4:	2e33      	cmp	r6, #51	; 0x33
 8024cf6:	dd0b      	ble.n	8024d10 <floor+0xa0>
 8024cf8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8024cfc:	d104      	bne.n	8024d08 <floor+0x98>
 8024cfe:	ee10 2a10 	vmov	r2, s0
 8024d02:	460b      	mov	r3, r1
 8024d04:	f7db faea 	bl	80002dc <__adddf3>
 8024d08:	ec41 0b10 	vmov	d0, r0, r1
 8024d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024d10:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8024d14:	f04f 33ff 	mov.w	r3, #4294967295
 8024d18:	fa23 f707 	lsr.w	r7, r3, r7
 8024d1c:	4207      	tst	r7, r0
 8024d1e:	d0f3      	beq.n	8024d08 <floor+0x98>
 8024d20:	a30f      	add	r3, pc, #60	; (adr r3, 8024d60 <floor+0xf0>)
 8024d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024d26:	f7db fad9 	bl	80002dc <__adddf3>
 8024d2a:	2200      	movs	r2, #0
 8024d2c:	2300      	movs	r3, #0
 8024d2e:	f7db ff1b 	bl	8000b68 <__aeabi_dcmpgt>
 8024d32:	2800      	cmp	r0, #0
 8024d34:	d0bf      	beq.n	8024cb6 <floor+0x46>
 8024d36:	2c00      	cmp	r4, #0
 8024d38:	da02      	bge.n	8024d40 <floor+0xd0>
 8024d3a:	2e14      	cmp	r6, #20
 8024d3c:	d103      	bne.n	8024d46 <floor+0xd6>
 8024d3e:	3401      	adds	r4, #1
 8024d40:	ea25 0507 	bic.w	r5, r5, r7
 8024d44:	e7b7      	b.n	8024cb6 <floor+0x46>
 8024d46:	2301      	movs	r3, #1
 8024d48:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8024d4c:	fa03 f606 	lsl.w	r6, r3, r6
 8024d50:	4435      	add	r5, r6
 8024d52:	4545      	cmp	r5, r8
 8024d54:	bf38      	it	cc
 8024d56:	18e4      	addcc	r4, r4, r3
 8024d58:	e7f2      	b.n	8024d40 <floor+0xd0>
 8024d5a:	2500      	movs	r5, #0
 8024d5c:	462c      	mov	r4, r5
 8024d5e:	e7aa      	b.n	8024cb6 <floor+0x46>
 8024d60:	8800759c 	.word	0x8800759c
 8024d64:	7e37e43c 	.word	0x7e37e43c
 8024d68:	bff00000 	.word	0xbff00000
 8024d6c:	000fffff 	.word	0x000fffff

08024d70 <scalbn>:
 8024d70:	b570      	push	{r4, r5, r6, lr}
 8024d72:	ec55 4b10 	vmov	r4, r5, d0
 8024d76:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8024d7a:	4606      	mov	r6, r0
 8024d7c:	462b      	mov	r3, r5
 8024d7e:	b99a      	cbnz	r2, 8024da8 <scalbn+0x38>
 8024d80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8024d84:	4323      	orrs	r3, r4
 8024d86:	d036      	beq.n	8024df6 <scalbn+0x86>
 8024d88:	4b39      	ldr	r3, [pc, #228]	; (8024e70 <scalbn+0x100>)
 8024d8a:	4629      	mov	r1, r5
 8024d8c:	ee10 0a10 	vmov	r0, s0
 8024d90:	2200      	movs	r2, #0
 8024d92:	f7db fc59 	bl	8000648 <__aeabi_dmul>
 8024d96:	4b37      	ldr	r3, [pc, #220]	; (8024e74 <scalbn+0x104>)
 8024d98:	429e      	cmp	r6, r3
 8024d9a:	4604      	mov	r4, r0
 8024d9c:	460d      	mov	r5, r1
 8024d9e:	da10      	bge.n	8024dc2 <scalbn+0x52>
 8024da0:	a32b      	add	r3, pc, #172	; (adr r3, 8024e50 <scalbn+0xe0>)
 8024da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024da6:	e03a      	b.n	8024e1e <scalbn+0xae>
 8024da8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8024dac:	428a      	cmp	r2, r1
 8024dae:	d10c      	bne.n	8024dca <scalbn+0x5a>
 8024db0:	ee10 2a10 	vmov	r2, s0
 8024db4:	4620      	mov	r0, r4
 8024db6:	4629      	mov	r1, r5
 8024db8:	f7db fa90 	bl	80002dc <__adddf3>
 8024dbc:	4604      	mov	r4, r0
 8024dbe:	460d      	mov	r5, r1
 8024dc0:	e019      	b.n	8024df6 <scalbn+0x86>
 8024dc2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8024dc6:	460b      	mov	r3, r1
 8024dc8:	3a36      	subs	r2, #54	; 0x36
 8024dca:	4432      	add	r2, r6
 8024dcc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8024dd0:	428a      	cmp	r2, r1
 8024dd2:	dd08      	ble.n	8024de6 <scalbn+0x76>
 8024dd4:	2d00      	cmp	r5, #0
 8024dd6:	a120      	add	r1, pc, #128	; (adr r1, 8024e58 <scalbn+0xe8>)
 8024dd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024ddc:	da1c      	bge.n	8024e18 <scalbn+0xa8>
 8024dde:	a120      	add	r1, pc, #128	; (adr r1, 8024e60 <scalbn+0xf0>)
 8024de0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024de4:	e018      	b.n	8024e18 <scalbn+0xa8>
 8024de6:	2a00      	cmp	r2, #0
 8024de8:	dd08      	ble.n	8024dfc <scalbn+0x8c>
 8024dea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024dee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024df2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8024df6:	ec45 4b10 	vmov	d0, r4, r5
 8024dfa:	bd70      	pop	{r4, r5, r6, pc}
 8024dfc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8024e00:	da19      	bge.n	8024e36 <scalbn+0xc6>
 8024e02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8024e06:	429e      	cmp	r6, r3
 8024e08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8024e0c:	dd0a      	ble.n	8024e24 <scalbn+0xb4>
 8024e0e:	a112      	add	r1, pc, #72	; (adr r1, 8024e58 <scalbn+0xe8>)
 8024e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e14:	2b00      	cmp	r3, #0
 8024e16:	d1e2      	bne.n	8024dde <scalbn+0x6e>
 8024e18:	a30f      	add	r3, pc, #60	; (adr r3, 8024e58 <scalbn+0xe8>)
 8024e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024e1e:	f7db fc13 	bl	8000648 <__aeabi_dmul>
 8024e22:	e7cb      	b.n	8024dbc <scalbn+0x4c>
 8024e24:	a10a      	add	r1, pc, #40	; (adr r1, 8024e50 <scalbn+0xe0>)
 8024e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e2a:	2b00      	cmp	r3, #0
 8024e2c:	d0b8      	beq.n	8024da0 <scalbn+0x30>
 8024e2e:	a10e      	add	r1, pc, #56	; (adr r1, 8024e68 <scalbn+0xf8>)
 8024e30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8024e34:	e7b4      	b.n	8024da0 <scalbn+0x30>
 8024e36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8024e3a:	3236      	adds	r2, #54	; 0x36
 8024e3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8024e40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8024e44:	4620      	mov	r0, r4
 8024e46:	4b0c      	ldr	r3, [pc, #48]	; (8024e78 <scalbn+0x108>)
 8024e48:	2200      	movs	r2, #0
 8024e4a:	e7e8      	b.n	8024e1e <scalbn+0xae>
 8024e4c:	f3af 8000 	nop.w
 8024e50:	c2f8f359 	.word	0xc2f8f359
 8024e54:	01a56e1f 	.word	0x01a56e1f
 8024e58:	8800759c 	.word	0x8800759c
 8024e5c:	7e37e43c 	.word	0x7e37e43c
 8024e60:	8800759c 	.word	0x8800759c
 8024e64:	fe37e43c 	.word	0xfe37e43c
 8024e68:	c2f8f359 	.word	0xc2f8f359
 8024e6c:	81a56e1f 	.word	0x81a56e1f
 8024e70:	43500000 	.word	0x43500000
 8024e74:	ffff3cb0 	.word	0xffff3cb0
 8024e78:	3c900000 	.word	0x3c900000

08024e7c <_init>:
 8024e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e7e:	bf00      	nop
 8024e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e82:	bc08      	pop	{r3}
 8024e84:	469e      	mov	lr, r3
 8024e86:	4770      	bx	lr

08024e88 <_fini>:
 8024e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024e8a:	bf00      	nop
 8024e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024e8e:	bc08      	pop	{r3}
 8024e90:	469e      	mov	lr, r3
 8024e92:	4770      	bx	lr
