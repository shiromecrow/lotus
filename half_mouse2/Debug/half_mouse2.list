
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000230e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  080232c8  080232c8  000332c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080239f0  080239f0  000401fc  2**0
                  CONTENTS
  4 .ARM          00000008  080239f0  080239f0  000339f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080239f8  080239f8  000401fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080239f8  080239f8  000339f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080239fc  080239fc  000339fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08023a00  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000f720  200001fc  08023bfc  000401fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f91c  08023bfc  0004f91c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000401fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278ea  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ff3  00000000  00000000  00067b16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fb8  00000000  00000000  0006db10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cc0  00000000  00000000  0006fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028547  00000000  00000000  00071788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031bc5  00000000  00000000  00099ccf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb2f5  00000000  00000000  000cb894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b6b89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000097ac  00000000  00000000  001b6bdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001fc 	.word	0x200001fc
 80001fc:	00000000 	.word	0x00000000
 8000200:	080232ac 	.word	0x080232ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000200 	.word	0x20000200
 800021c:	080232ac 	.word	0x080232ac

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000220 	.word	0x20000220
 8000ff4:	20000224 	.word	0x20000224
 8000ff8:	20000230 	.word	0x20000230
 8000ffc:	20000234 	.word	0x20000234
 8001000:	20000240 	.word	0x20000240
 8001004:	20000244 	.word	0x20000244
 8001008:	20000250 	.word	0x20000250
 800100c:	20000254 	.word	0x20000254
 8001010:	20000260 	.word	0x20000260
 8001014:	3f59999a 	.word	0x3f59999a

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <reset_speed+0x44>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <reset_speed+0x48>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	E_lpf_speedL=0;
 800102c:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <reset_speed+0x4c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	E_lpf_speedR=0;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <reset_speed+0x50>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <reset_speed+0x54>)
 800103e:	f04f 0200 	mov.w	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <reset_speed+0x58>)
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.85;
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <reset_speed+0x5c>)
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <reset_speed+0x60>)
 8001050:	601a      	str	r2, [r3, #0]

}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	20000248 	.word	0x20000248
 8001060:	2000024c 	.word	0x2000024c
 8001064:	20000238 	.word	0x20000238
 8001068:	2000023c 	.word	0x2000023c
 800106c:	20000258 	.word	0x20000258
 8001070:	2000025c 	.word	0x2000025c
 8001074:	20000260 	.word	0x20000260
 8001078:	3f59999a 	.word	0x3f59999a
 800107c:	00000000 	.word	0x00000000

08001080 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001080:	b5b0      	push	{r4, r5, r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 8001086:	4bde      	ldr	r3, [pc, #888]	; (8001400 <interupt_calEncoder+0x380>)
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	4bdd      	ldr	r3, [pc, #884]	; (8001404 <interupt_calEncoder+0x384>)
 800108e:	edd3 7a00 	vldr	s15, [r3]
 8001092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001096:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 800109a:	edd7 7a01 	vldr	s15, [r7, #4]
 800109e:	ed9f 7ada 	vldr	s14, [pc, #872]	; 8001408 <interupt_calEncoder+0x388>
 80010a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010aa:	dd07      	ble.n	80010bc <interupt_calEncoder+0x3c>
 80010ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80010b0:	ed9f 7ad6 	vldr	s14, [pc, #856]	; 800140c <interupt_calEncoder+0x38c>
 80010b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010b8:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80010c0:	ed9f 7ad3 	vldr	s14, [pc, #844]	; 8001410 <interupt_calEncoder+0x390>
 80010c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	d507      	bpl.n	80010de <interupt_calEncoder+0x5e>
 80010ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80010d2:	ed9f 7ace 	vldr	s14, [pc, #824]	; 800140c <interupt_calEncoder+0x38c>
 80010d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010da:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010de:	4bcd      	ldr	r3, [pc, #820]	; (8001414 <interupt_calEncoder+0x394>)
 80010e0:	ed93 7a00 	vldr	s14, [r3]
 80010e4:	4bcc      	ldr	r3, [pc, #816]	; (8001418 <interupt_calEncoder+0x398>)
 80010e6:	edd3 7a00 	vldr	s15, [r3]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	eef1 7a67 	vneg.f32	s15, s15
 80010f2:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010f6:	edd7 7a00 	vldr	s15, [r7]
 80010fa:	ed9f 7ac3 	vldr	s14, [pc, #780]	; 8001408 <interupt_calEncoder+0x388>
 80010fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001106:	dd07      	ble.n	8001118 <interupt_calEncoder+0x98>
 8001108:	edd7 7a00 	vldr	s15, [r7]
 800110c:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800140c <interupt_calEncoder+0x38c>
 8001110:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001114:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001118:	edd7 7a00 	vldr	s15, [r7]
 800111c:	ed9f 7abc 	vldr	s14, [pc, #752]	; 8001410 <interupt_calEncoder+0x390>
 8001120:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001128:	d507      	bpl.n	800113a <interupt_calEncoder+0xba>
 800112a:	edd7 7a00 	vldr	s15, [r7]
 800112e:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 800140c <interupt_calEncoder+0x38c>
 8001132:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001136:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 800113a:	6838      	ldr	r0, [r7, #0]
 800113c:	f7ff fa2c 	bl	8000598 <__aeabi_f2d>
 8001140:	a39b      	add	r3, pc, #620	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4bb1      	ldr	r3, [pc, #708]	; (800141c <interupt_calEncoder+0x39c>)
 8001158:	f7ff fba0 	bl	800089c <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	a394      	add	r3, pc, #592	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa6d 	bl	8000648 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a392      	add	r3, pc, #584	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff fa64 	bl	8000648 <__aeabi_dmul>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	4610      	mov	r0, r2
 8001186:	4619      	mov	r1, r3
 8001188:	a38f      	add	r3, pc, #572	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 800118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118e:	f7ff fa5b 	bl	8000648 <__aeabi_dmul>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4610      	mov	r0, r2
 8001198:	4619      	mov	r1, r3
 800119a:	a38d      	add	r3, pc, #564	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 800119c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a0:	f7ff fb7c 	bl	800089c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 0200 	mov.w	r2, #0
 80011b0:	4b9b      	ldr	r3, [pc, #620]	; (8001420 <interupt_calEncoder+0x3a0>)
 80011b2:	f7ff fa49 	bl	8000648 <__aeabi_dmul>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	4610      	mov	r0, r2
 80011bc:	4619      	mov	r1, r3
 80011be:	a386      	add	r3, pc, #536	; (adr r3, 80013d8 <interupt_calEncoder+0x358>)
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f7ff fb6a 	bl	800089c <__aeabi_ddiv>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	4b93      	ldr	r3, [pc, #588]	; (8001424 <interupt_calEncoder+0x3a4>)
 80011d6:	f7ff fa37 	bl	8000648 <__aeabi_dmul>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	4b90      	ldr	r3, [pc, #576]	; (8001428 <interupt_calEncoder+0x3a8>)
 80011e8:	f7ff fb58 	bl	800089c <__aeabi_ddiv>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4610      	mov	r0, r2
 80011f2:	4619      	mov	r1, r3
 80011f4:	a37a      	add	r3, pc, #488	; (adr r3, 80013e0 <interupt_calEncoder+0x360>)
 80011f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fa:	f7ff fa25 	bl	8000648 <__aeabi_dmul>
 80011fe:	4602      	mov	r2, r0
 8001200:	460b      	mov	r3, r1
 8001202:	4610      	mov	r0, r2
 8001204:	4619      	mov	r1, r3
 8001206:	a378      	add	r3, pc, #480	; (adr r3, 80013e8 <interupt_calEncoder+0x368>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fb46 	bl	800089c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4610      	mov	r0, r2
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 0200 	mov.w	r2, #0
 800121c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001220:	f7ff fb3c 	bl	800089c <__aeabi_ddiv>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b7e      	ldr	r3, [pc, #504]	; (800142c <interupt_calEncoder+0x3ac>)
 8001232:	f7ff fa09 	bl	8000648 <__aeabi_dmul>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	a36c      	add	r3, pc, #432	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001244:	f7ff fb2a 	bl	800089c <__aeabi_ddiv>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4610      	mov	r0, r2
 800124e:	4619      	mov	r1, r3
 8001250:	f7ff fcd2 	bl	8000bf8 <__aeabi_d2f>
 8001254:	4603      	mov	r3, r0
 8001256:	4a76      	ldr	r2, [pc, #472]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001258:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff f99c 	bl	8000598 <__aeabi_f2d>
 8001260:	a353      	add	r3, pc, #332	; (adr r3, 80013b0 <interupt_calEncoder+0x330>)
 8001262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001266:	f7ff f9ef 	bl	8000648 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4610      	mov	r0, r2
 8001270:	4619      	mov	r1, r3
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b69      	ldr	r3, [pc, #420]	; (800141c <interupt_calEncoder+0x39c>)
 8001278:	f7ff fb10 	bl	800089c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	a34c      	add	r3, pc, #304	; (adr r3, 80013b8 <interupt_calEncoder+0x338>)
 8001286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128a:	f7ff f9dd 	bl	8000648 <__aeabi_dmul>
 800128e:	4602      	mov	r2, r0
 8001290:	460b      	mov	r3, r1
 8001292:	4610      	mov	r0, r2
 8001294:	4619      	mov	r1, r3
 8001296:	a34a      	add	r3, pc, #296	; (adr r3, 80013c0 <interupt_calEncoder+0x340>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9d4 	bl	8000648 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	a347      	add	r3, pc, #284	; (adr r3, 80013c8 <interupt_calEncoder+0x348>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff f9cb 	bl	8000648 <__aeabi_dmul>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4610      	mov	r0, r2
 80012b8:	4619      	mov	r1, r3
 80012ba:	a345      	add	r3, pc, #276	; (adr r3, 80013d0 <interupt_calEncoder+0x350>)
 80012bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c0:	f7ff faec 	bl	800089c <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b53      	ldr	r3, [pc, #332]	; (8001420 <interupt_calEncoder+0x3a0>)
 80012d2:	f7ff f9b9 	bl	8000648 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	a346      	add	r3, pc, #280	; (adr r3, 80013f8 <interupt_calEncoder+0x378>)
 80012e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e4:	f7ff fada 	bl	800089c <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	4610      	mov	r0, r2
 80012ee:	4619      	mov	r1, r3
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	4b4b      	ldr	r3, [pc, #300]	; (8001424 <interupt_calEncoder+0x3a4>)
 80012f6:	f7ff f9a7 	bl	8000648 <__aeabi_dmul>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	4610      	mov	r0, r2
 8001300:	4619      	mov	r1, r3
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	4b48      	ldr	r3, [pc, #288]	; (8001428 <interupt_calEncoder+0x3a8>)
 8001308:	f7ff fac8 	bl	800089c <__aeabi_ddiv>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4610      	mov	r0, r2
 8001312:	4619      	mov	r1, r3
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131c:	f7ff fabe 	bl	800089c <__aeabi_ddiv>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	4b3f      	ldr	r3, [pc, #252]	; (800142c <interupt_calEncoder+0x3ac>)
 800132e:	f7ff f98b 	bl	8000648 <__aeabi_dmul>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4610      	mov	r0, r2
 8001338:	4619      	mov	r1, r3
 800133a:	a32d      	add	r3, pc, #180	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff faac 	bl	800089c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc54 	bl	8000bf8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	4a38      	ldr	r2, [pc, #224]	; (8001434 <interupt_calEncoder+0x3b4>)
 8001354:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 8001356:	4b38      	ldr	r3, [pc, #224]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f91c 	bl	8000598 <__aeabi_f2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	4b32      	ldr	r3, [pc, #200]	; (8001430 <interupt_calEncoder+0x3b0>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f915 	bl	8000598 <__aeabi_f2d>
 800136e:	a320      	add	r3, pc, #128	; (adr r3, 80013f0 <interupt_calEncoder+0x370>)
 8001370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001374:	f7ff f968 	bl	8000648 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4620      	mov	r0, r4
 800137e:	4629      	mov	r1, r5
 8001380:	f7fe ffac 	bl	80002dc <__adddf3>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f7ff fc34 	bl	8000bf8 <__aeabi_d2f>
 8001390:	4603      	mov	r3, r0
 8001392:	4a29      	ldr	r2, [pc, #164]	; (8001438 <interupt_calEncoder+0x3b8>)
 8001394:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <interupt_calEncoder+0x3bc>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8fc 	bl	8000598 <__aeabi_f2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	4b23      	ldr	r3, [pc, #140]	; (8001434 <interupt_calEncoder+0x3b4>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8f5 	bl	8000598 <__aeabi_f2d>
 80013ae:	e047      	b.n	8001440 <interupt_calEncoder+0x3c0>
 80013b0:	54411744 	.word	0x54411744
 80013b4:	400921fb 	.word	0x400921fb
 80013b8:	4e70a65b 	.word	0x4e70a65b
 80013bc:	3f882f36 	.word	0x3f882f36
 80013c0:	a858793e 	.word	0xa858793e
 80013c4:	3ff1cd35 	.word	0x3ff1cd35
 80013c8:	00000000 	.word	0x00000000
 80013cc:	4078c000 	.word	0x4078c000
 80013d0:	147ae148 	.word	0x147ae148
 80013d4:	4078fbae 	.word	0x4078fbae
 80013d8:	0a3d70a4 	.word	0x0a3d70a4
 80013dc:	4078efd7 	.word	0x4078efd7
 80013e0:	00000000 	.word	0x00000000
 80013e4:	4125eb2e 	.word	0x4125eb2e
 80013e8:	33333333 	.word	0x33333333
 80013ec:	4125f7be 	.word	0x4125f7be
 80013f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013f4:	3f50624d 	.word	0x3f50624d
 80013f8:	5c28f5c3 	.word	0x5c28f5c3
 80013fc:	40792a8f 	.word	0x40792a8f
 8001400:	200006d8 	.word	0x200006d8
 8001404:	20000218 	.word	0x20000218
 8001408:	43340000 	.word	0x43340000
 800140c:	43b40000 	.word	0x43b40000
 8001410:	c3340000 	.word	0xc3340000
 8001414:	200006dc 	.word	0x200006dc
 8001418:	2000021c 	.word	0x2000021c
 800141c:	40668000 	.word	0x40668000
 8001420:	40790000 	.word	0x40790000
 8001424:	40870800 	.word	0x40870800
 8001428:	40868000 	.word	0x40868000
 800142c:	408f4000 	.word	0x408f4000
 8001430:	20000228 	.word	0x20000228
 8001434:	2000022c 	.word	0x2000022c
 8001438:	20000220 	.word	0x20000220
 800143c:	20000224 	.word	0x20000224
 8001440:	a314      	add	r3, pc, #80	; (adr r3, 8001494 <interupt_calEncoder+0x414>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8ff 	bl	8000648 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4620      	mov	r0, r4
 8001450:	4629      	mov	r1, r5
 8001452:	f7fe ff43 	bl	80002dc <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbcb 	bl	8000bf8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <interupt_calEncoder+0x400>)
 8001466:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001468:	4b06      	ldr	r3, [pc, #24]	; (8001484 <interupt_calEncoder+0x404>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a06      	ldr	r2, [pc, #24]	; (8001488 <interupt_calEncoder+0x408>)
 800146e:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <interupt_calEncoder+0x40c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <interupt_calEncoder+0x410>)
 8001476:	6013      	str	r3, [r2, #0]

}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000224 	.word	0x20000224
 8001484:	200006dc 	.word	0x200006dc
 8001488:	2000021c 	.word	0x2000021c
 800148c:	200006d8 	.word	0x200006d8
 8001490:	20000218 	.word	0x20000218
 8001494:	d2f1a9fc 	.word	0xd2f1a9fc
 8001498:	3f50624d 	.word	0x3f50624d
 800149c:	00000000 	.word	0x00000000

080014a0 <interupt_calFusion>:


void interupt_calFusion(void) {
 80014a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014a4:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80014a6:	4ba4      	ldr	r3, [pc, #656]	; (8001738 <interupt_calFusion+0x298>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4ba3      	ldr	r3, [pc, #652]	; (800173c <interupt_calFusion+0x29c>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b6:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <interupt_calFusion+0x298>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014c4:	4b9e      	ldr	r3, [pc, #632]	; (8001740 <interupt_calFusion+0x2a0>)
 80014c6:	edd3 7a00 	vldr	s15, [r3]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	4b9a      	ldr	r3, [pc, #616]	; (800173c <interupt_calFusion+0x29c>)
 80014d4:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 80014d8:	4b97      	ldr	r3, [pc, #604]	; (8001738 <interupt_calFusion+0x298>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b99      	ldr	r3, [pc, #612]	; (8001744 <interupt_calFusion+0x2a4>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014e8:	4b93      	ldr	r3, [pc, #588]	; (8001738 <interupt_calFusion+0x298>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014f6:	4b94      	ldr	r3, [pc, #592]	; (8001748 <interupt_calFusion+0x2a8>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001504:	4b8f      	ldr	r3, [pc, #572]	; (8001744 <interupt_calFusion+0x2a4>)
 8001506:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 800150a:	4b90      	ldr	r3, [pc, #576]	; (800174c <interupt_calFusion+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f842 	bl	8000598 <__aeabi_f2d>
 8001514:	4604      	mov	r4, r0
 8001516:	460d      	mov	r5, r1
 8001518:	4b88      	ldr	r3, [pc, #544]	; (800173c <interupt_calFusion+0x29c>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff f83b 	bl	8000598 <__aeabi_f2d>
 8001522:	a383      	add	r3, pc, #524	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f88e 	bl	8000648 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4620      	mov	r0, r4
 8001532:	4629      	mov	r1, r5
 8001534:	f7fe fed2 	bl	80002dc <__adddf3>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f7ff fb5a 	bl	8000bf8 <__aeabi_d2f>
 8001544:	4603      	mov	r3, r0
 8001546:	4a81      	ldr	r2, [pc, #516]	; (800174c <interupt_calFusion+0x2ac>)
 8001548:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 800154a:	4b81      	ldr	r3, [pc, #516]	; (8001750 <interupt_calFusion+0x2b0>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f822 	bl	8000598 <__aeabi_f2d>
 8001554:	4604      	mov	r4, r0
 8001556:	460d      	mov	r5, r1
 8001558:	4b7a      	ldr	r3, [pc, #488]	; (8001744 <interupt_calFusion+0x2a4>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff f81b 	bl	8000598 <__aeabi_f2d>
 8001562:	a373      	add	r3, pc, #460	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f7ff f86e 	bl	8000648 <__aeabi_dmul>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4620      	mov	r0, r4
 8001572:	4629      	mov	r1, r5
 8001574:	f7fe feb2 	bl	80002dc <__adddf3>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	f7ff fb3a 	bl	8000bf8 <__aeabi_d2f>
 8001584:	4603      	mov	r3, r0
 8001586:	4a72      	ldr	r2, [pc, #456]	; (8001750 <interupt_calFusion+0x2b0>)
 8001588:	6013      	str	r3, [r2, #0]
	//G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
	//G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
	//G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 800158a:	4b6b      	ldr	r3, [pc, #428]	; (8001738 <interupt_calFusion+0x298>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f802 	bl	8000598 <__aeabi_f2d>
 8001594:	4604      	mov	r4, r0
 8001596:	460d      	mov	r5, r1
 8001598:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <interupt_calFusion+0x2b4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe fffb 	bl	8000598 <__aeabi_f2d>
 80015a2:	4680      	mov	r8, r0
 80015a4:	4689      	mov	r9, r1
 80015a6:	4b6c      	ldr	r3, [pc, #432]	; (8001758 <interupt_calFusion+0x2b8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7fe fff4 	bl	8000598 <__aeabi_f2d>
 80015b0:	a35f      	add	r3, pc, #380	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7ff f847 	bl	8000648 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4640      	mov	r0, r8
 80015c0:	4649      	mov	r1, r9
 80015c2:	f7fe fe8b 	bl	80002dc <__adddf3>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	4620      	mov	r0, r4
 80015cc:	4629      	mov	r1, r5
 80015ce:	f7ff f83b 	bl	8000648 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4614      	mov	r4, r2
 80015d8:	461d      	mov	r5, r3
 80015da:	4b57      	ldr	r3, [pc, #348]	; (8001738 <interupt_calFusion+0x298>)
 80015dc:	edd3 7a00 	vldr	s15, [r3]
 80015e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80015e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80015e8:	4b55      	ldr	r3, [pc, #340]	; (8001740 <interupt_calFusion+0x2a0>)
 80015ea:	edd3 7a00 	vldr	s15, [r3]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ffcf 	bl	8000598 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7fe fe6b 	bl	80002dc <__adddf3>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff faf3 	bl	8000bf8 <__aeabi_d2f>
 8001612:	4603      	mov	r3, r0
 8001614:	4a4f      	ldr	r2, [pc, #316]	; (8001754 <interupt_calFusion+0x2b4>)
 8001616:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001618:	4b47      	ldr	r3, [pc, #284]	; (8001738 <interupt_calFusion+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f7fe ffbb 	bl	8000598 <__aeabi_f2d>
 8001622:	4604      	mov	r4, r0
 8001624:	460d      	mov	r5, r1
 8001626:	4b4b      	ldr	r3, [pc, #300]	; (8001754 <interupt_calFusion+0x2b4>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f7fe ffb4 	bl	8000598 <__aeabi_f2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	4b48      	ldr	r3, [pc, #288]	; (8001758 <interupt_calFusion+0x2b8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7fe ffad 	bl	8000598 <__aeabi_f2d>
 800163e:	a33c      	add	r3, pc, #240	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001644:	f7ff f800 	bl	8000648 <__aeabi_dmul>
 8001648:	4602      	mov	r2, r0
 800164a:	460b      	mov	r3, r1
 800164c:	4640      	mov	r0, r8
 800164e:	4649      	mov	r1, r9
 8001650:	f7fe fe44 	bl	80002dc <__adddf3>
 8001654:	4602      	mov	r2, r0
 8001656:	460b      	mov	r3, r1
 8001658:	4620      	mov	r0, r4
 800165a:	4629      	mov	r1, r5
 800165c:	f7fe fff4 	bl	8000648 <__aeabi_dmul>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4614      	mov	r4, r2
 8001666:	461d      	mov	r5, r3
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <interupt_calFusion+0x298>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001672:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <interupt_calFusion+0x2a8>)
 8001678:	edd3 7a00 	vldr	s15, [r3]
 800167c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001680:	ee17 0a90 	vmov	r0, s15
 8001684:	f7fe ff88 	bl	8000598 <__aeabi_f2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fe24 	bl	80002dc <__adddf3>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	f7ff faac 	bl	8000bf8 <__aeabi_d2f>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4a2e      	ldr	r2, [pc, #184]	; (800175c <interupt_calFusion+0x2bc>)
 80016a4:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 80016a6:	4b2e      	ldr	r3, [pc, #184]	; (8001760 <interupt_calFusion+0x2c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff74 	bl	8000598 <__aeabi_f2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	4b27      	ldr	r3, [pc, #156]	; (8001754 <interupt_calFusion+0x2b4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff6d 	bl	8000598 <__aeabi_f2d>
 80016be:	a31c      	add	r3, pc, #112	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffc0 	bl	8000648 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fe04 	bl	80002dc <__adddf3>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4610      	mov	r0, r2
 80016da:	4619      	mov	r1, r3
 80016dc:	f7ff fa8c 	bl	8000bf8 <__aeabi_d2f>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4a1f      	ldr	r2, [pc, #124]	; (8001760 <interupt_calFusion+0x2c0>)
 80016e4:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80016e6:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <interupt_calFusion+0x2c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff54 	bl	8000598 <__aeabi_f2d>
 80016f0:	4604      	mov	r4, r0
 80016f2:	460d      	mov	r5, r1
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <interupt_calFusion+0x2bc>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff4d 	bl	8000598 <__aeabi_f2d>
 80016fe:	a30c      	add	r3, pc, #48	; (adr r3, 8001730 <interupt_calFusion+0x290>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ffa0 	bl	8000648 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fde4 	bl	80002dc <__adddf3>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	4610      	mov	r0, r2
 800171a:	4619      	mov	r1, r3
 800171c:	f7ff fa6c 	bl	8000bf8 <__aeabi_d2f>
 8001720:	4603      	mov	r3, r0
 8001722:	4a10      	ldr	r2, [pc, #64]	; (8001764 <interupt_calFusion+0x2c4>)
 8001724:	6013      	str	r3, [r2, #0]

}
 8001726:	bf00      	nop
 8001728:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800172c:	f3af 8000 	nop.w
 8001730:	d2f1a9fc 	.word	0xd2f1a9fc
 8001734:	3f50624d 	.word	0x3f50624d
 8001738:	20000260 	.word	0x20000260
 800173c:	20000238 	.word	0x20000238
 8001740:	20000228 	.word	0x20000228
 8001744:	2000023c 	.word	0x2000023c
 8001748:	2000022c 	.word	0x2000022c
 800174c:	20000230 	.word	0x20000230
 8001750:	20000234 	.word	0x20000234
 8001754:	20000258 	.word	0x20000258
 8001758:	20000280 	.word	0x20000280
 800175c:	2000025c 	.word	0x2000025c
 8001760:	20000250 	.word	0x20000250
 8001764:	20000254 	.word	0x20000254

08001768 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	int s = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
	angle = 0;
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <reset_gyro+0xfc>)
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <reset_gyro+0x100>)
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 8001782:	2301      	movs	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	e026      	b.n	80017d6 <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <reset_gyro+0x104>)
 800178a:	ed93 7a02 	vldr	s14, [r3, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <reset_gyro+0x100>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001798:	4b33      	ldr	r3, [pc, #204]	; (8001868 <reset_gyro+0x100>)
 800179a:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 800179e:	4b33      	ldr	r3, [pc, #204]	; (800186c <reset_gyro+0x104>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4b32      	ldr	r3, [pc, #200]	; (8001870 <reset_gyro+0x108>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ae:	4b30      	ldr	r3, [pc, #192]	; (8001870 <reset_gyro+0x108>)
 80017b0:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <reset_gyro+0x104>)
 80017b6:	ed93 7a04 	vldr	s14, [r3, #16]
 80017ba:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <reset_gyro+0x10c>)
 80017bc:	edd3 7a00 	vldr	s15, [r3]
 80017c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <reset_gyro+0x10c>)
 80017c6:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 80017ca:	2001      	movs	r0, #1
 80017cc:	f006 fbac 	bl	8007f28 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	3301      	adds	r3, #1
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017dc:	ddd4      	ble.n	8001788 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <reset_gyro+0x100>)
 80017e0:	ed93 7a00 	vldr	s14, [r3]
 80017e4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001878 <reset_gyro+0x110>
 80017e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017ec:	4b1e      	ldr	r3, [pc, #120]	; (8001868 <reset_gyro+0x100>)
 80017ee:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <reset_gyro+0x108>)
 80017f4:	ed93 7a00 	vldr	s14, [r3]
 80017f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001878 <reset_gyro+0x110>
 80017fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001800:	4b1b      	ldr	r3, [pc, #108]	; (8001870 <reset_gyro+0x108>)
 8001802:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 8001806:	4b1b      	ldr	r3, [pc, #108]	; (8001874 <reset_gyro+0x10c>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001878 <reset_gyro+0x110>
 8001810:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <reset_gyro+0x10c>)
 8001816:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 800181a:	4b12      	ldr	r3, [pc, #72]	; (8001864 <reset_gyro+0xfc>)
 800181c:	f04f 0200 	mov.w	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
	anglex = 0;
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <reset_gyro+0x114>)
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 800182a:	4b15      	ldr	r3, [pc, #84]	; (8001880 <reset_gyro+0x118>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <reset_gyro+0x11c>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	e009      	b.n	8001854 <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 8001840:	4a11      	ldr	r2, [pc, #68]	; (8001888 <reset_gyro+0x120>)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b09      	cmp	r3, #9
 8001858:	ddf2      	ble.n	8001840 <reset_gyro+0xd8>
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000264 	.word	0x20000264
 8001868:	20000288 	.word	0x20000288
 800186c:	200006e4 	.word	0x200006e4
 8001870:	20000284 	.word	0x20000284
 8001874:	2000028c 	.word	0x2000028c
 8001878:	447a0000 	.word	0x447a0000
 800187c:	2000026c 	.word	0x2000026c
 8001880:	20000278 	.word	0x20000278
 8001884:	2000027c 	.word	0x2000027c
 8001888:	20000290 	.word	0x20000290
 800188c:	00000000 	.word	0x00000000

08001890 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001890:	b5b0      	push	{r4, r5, r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
	int j = 9;
 8001896:	2309      	movs	r3, #9
 8001898:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 800189a:	2309      	movs	r3, #9
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	e00d      	b.n	80018bc <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4aa6      	ldr	r2, [pc, #664]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	49a4      	ldr	r1, [pc, #656]	; (8001b40 <interrupt_calGyro+0x2b0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	dcee      	bgt.n	80018a0 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 80018c2:	4ba0      	ldr	r3, [pc, #640]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80018c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80018c8:	4b9f      	ldr	r3, [pc, #636]	; (8001b48 <interrupt_calGyro+0x2b8>)
 80018ca:	edd3 7a00 	vldr	s15, [r3]
 80018ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018d2:	ee17 0a90 	vmov	r0, s15
 80018d6:	f7fe fe5f 	bl	8000598 <__aeabi_f2d>
 80018da:	a387      	add	r3, pc, #540	; (adr r3, 8001af8 <interrupt_calGyro+0x268>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe feb2 	bl	8000648 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	a384      	add	r3, pc, #528	; (adr r3, 8001b00 <interrupt_calGyro+0x270>)
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	f7fe fea9 	bl	8000648 <__aeabi_dmul>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	a382      	add	r3, pc, #520	; (adr r3, 8001b08 <interrupt_calGyro+0x278>)
 8001900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001904:	f7fe ffca 	bl	800089c <__aeabi_ddiv>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7ff f972 	bl	8000bf8 <__aeabi_d2f>
 8001914:	4603      	mov	r3, r0
 8001916:	4a8a      	ldr	r2, [pc, #552]	; (8001b40 <interrupt_calGyro+0x2b0>)
 8001918:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 800191a:	4b89      	ldr	r3, [pc, #548]	; (8001b40 <interrupt_calGyro+0x2b0>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a8b      	ldr	r2, [pc, #556]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001920:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 8001922:	4b88      	ldr	r3, [pc, #544]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a8a      	ldr	r2, [pc, #552]	; (8001b50 <interrupt_calGyro+0x2c0>)
 8001928:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 800192a:	4b86      	ldr	r3, [pc, #536]	; (8001b44 <interrupt_calGyro+0x2b4>)
 800192c:	ed93 7a00 	vldr	s14, [r3]
 8001930:	4b88      	ldr	r3, [pc, #544]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001932:	edd3 7a00 	vldr	s15, [r3]
 8001936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800193a:	4b87      	ldr	r3, [pc, #540]	; (8001b58 <interrupt_calGyro+0x2c8>)
 800193c:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 8001940:	4b86      	ldr	r3, [pc, #536]	; (8001b5c <interrupt_calGyro+0x2cc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fe27 	bl	8000598 <__aeabi_f2d>
 800194a:	4604      	mov	r4, r0
 800194c:	460d      	mov	r5, r1
 800194e:	4b7f      	ldr	r3, [pc, #508]	; (8001b4c <interrupt_calGyro+0x2bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7fe fe20 	bl	8000598 <__aeabi_f2d>
 8001958:	a36d      	add	r3, pc, #436	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe73 	bl	8000648 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4620      	mov	r0, r4
 8001968:	4629      	mov	r1, r5
 800196a:	f7fe fcb7 	bl	80002dc <__adddf3>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4610      	mov	r0, r2
 8001974:	4619      	mov	r1, r3
 8001976:	f7ff f93f 	bl	8000bf8 <__aeabi_d2f>
 800197a:	4603      	mov	r3, r0
 800197c:	4a77      	ldr	r2, [pc, #476]	; (8001b5c <interrupt_calGyro+0x2cc>)
 800197e:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001980:	4b77      	ldr	r3, [pc, #476]	; (8001b60 <interrupt_calGyro+0x2d0>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fe07 	bl	8000598 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <interrupt_calGyro+0x2b4>)
 8001990:	ed93 7a00 	vldr	s14, [r3]
 8001994:	4b6f      	ldr	r3, [pc, #444]	; (8001b54 <interrupt_calGyro+0x2c4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800199e:	ee17 0a90 	vmov	r0, s15
 80019a2:	f7fe fdf9 	bl	8000598 <__aeabi_f2d>
 80019a6:	a35a      	add	r3, pc, #360	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 80019a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ac:	f7fe fe4c 	bl	8000648 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4620      	mov	r0, r4
 80019b6:	4629      	mov	r1, r5
 80019b8:	f7fe fc90 	bl	80002dc <__adddf3>
 80019bc:	4602      	mov	r2, r0
 80019be:	460b      	mov	r3, r1
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	f7ff f918 	bl	8000bf8 <__aeabi_d2f>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a65      	ldr	r2, [pc, #404]	; (8001b60 <interrupt_calGyro+0x2d0>)
 80019cc:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 80019ce:	4b5d      	ldr	r3, [pc, #372]	; (8001b44 <interrupt_calGyro+0x2b4>)
 80019d0:	ed93 7a04 	vldr	s14, [r3, #16]
 80019d4:	4b63      	ldr	r3, [pc, #396]	; (8001b64 <interrupt_calGyro+0x2d4>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019de:	ee17 0a90 	vmov	r0, s15
 80019e2:	f7fe fdd9 	bl	8000598 <__aeabi_f2d>
 80019e6:	a34c      	add	r3, pc, #304	; (adr r3, 8001b18 <interrupt_calGyro+0x288>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe2c 	bl	8000648 <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	a349      	add	r3, pc, #292	; (adr r3, 8001b20 <interrupt_calGyro+0x290>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fe23 	bl	8000648 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	a347      	add	r3, pc, #284	; (adr r3, 8001b28 <interrupt_calGyro+0x298>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe ff44 	bl	800089c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b51      	ldr	r3, [pc, #324]	; (8001b68 <interrupt_calGyro+0x2d8>)
 8001a22:	f7fe fe11 	bl	8000648 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	a340      	add	r3, pc, #256	; (adr r3, 8001b30 <interrupt_calGyro+0x2a0>)
 8001a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a34:	f7fe ff32 	bl	800089c <__aeabi_ddiv>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	f04f 0200 	mov.w	r2, #0
 8001a44:	4b49      	ldr	r3, [pc, #292]	; (8001b6c <interrupt_calGyro+0x2dc>)
 8001a46:	f7fe fdff 	bl	8000648 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4610      	mov	r0, r2
 8001a50:	4619      	mov	r1, r3
 8001a52:	a339      	add	r3, pc, #228	; (adr r3, 8001b38 <interrupt_calGyro+0x2a8>)
 8001a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a58:	f7fe fdf6 	bl	8000648 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff f8c8 	bl	8000bf8 <__aeabi_d2f>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a41      	ldr	r2, [pc, #260]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a6c:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001a6e:	4b41      	ldr	r3, [pc, #260]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7fe fd90 	bl	8000598 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b3c      	ldr	r3, [pc, #240]	; (8001b70 <interrupt_calGyro+0x2e0>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd89 	bl	8000598 <__aeabi_f2d>
 8001a86:	a322      	add	r3, pc, #136	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	f7fe fddc 	bl	8000648 <__aeabi_dmul>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fc20 	bl	80002dc <__adddf3>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	f7ff f8a8 	bl	8000bf8 <__aeabi_d2f>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4a32      	ldr	r2, [pc, #200]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001aac:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7fe fd70 	bl	8000598 <__aeabi_f2d>
 8001ab8:	4604      	mov	r4, r0
 8001aba:	460d      	mov	r5, r1
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <interrupt_calGyro+0x2e4>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fd69 	bl	8000598 <__aeabi_f2d>
 8001ac6:	a312      	add	r3, pc, #72	; (adr r3, 8001b10 <interrupt_calGyro+0x280>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fdbc 	bl	8000648 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4620      	mov	r0, r4
 8001ad6:	4629      	mov	r1, r5
 8001ad8:	f7fe fc00 	bl	80002dc <__adddf3>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff f888 	bl	8000bf8 <__aeabi_d2f>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a23      	ldr	r2, [pc, #140]	; (8001b78 <interrupt_calGyro+0x2e8>)
 8001aec:	6013      	str	r3, [r2, #0]




}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bdb0      	pop	{r4, r5, r7, pc}
 8001af6:	bf00      	nop
 8001af8:	70a3d70a 	.word	0x70a3d70a
 8001afc:	3fef0a3d 	.word	0x3fef0a3d
 8001b00:	00000000 	.word	0x00000000
 8001b04:	40acd400 	.word	0x40acd400
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40ac2000 	.word	0x40ac2000
 8001b10:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b14:	3f50624d 	.word	0x3f50624d
 8001b18:	0fcf80dc 	.word	0x0fcf80dc
 8001b1c:	3ff0a423 	.word	0x3ff0a423
 8001b20:	00000000 	.word	0x00000000
 8001b24:	4078c000 	.word	0x4078c000
 8001b28:	00000000 	.word	0x00000000
 8001b2c:	4077d000 	.word	0x4077d000
 8001b30:	00000000 	.word	0x00000000
 8001b34:	407a7000 	.word	0x407a7000
 8001b38:	3a92a305 	.word	0x3a92a305
 8001b3c:	40239d01 	.word	0x40239d01
 8001b40:	20000290 	.word	0x20000290
 8001b44:	200006e4 	.word	0x200006e4
 8001b48:	20000288 	.word	0x20000288
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	20000270 	.word	0x20000270
 8001b54:	20000284 	.word	0x20000284
 8001b58:	20000274 	.word	0x20000274
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	2000026c 	.word	0x2000026c
 8001b64:	2000028c 	.word	0x2000028c
 8001b68:	40790000 	.word	0x40790000
 8001b6c:	408f4000 	.word	0x408f4000
 8001b70:	20000280 	.word	0x20000280
 8001b74:	20000278 	.word	0x20000278
 8001b78:	2000027c 	.word	0x2000027c
 8001b7c:	00000000 	.word	0x00000000

08001b80 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001b86:	2300      	movs	r3, #0
 8001b88:	607b      	str	r3, [r7, #4]
 8001b8a:	e00f      	b.n	8001bac <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001b8c:	f005 ff70 	bl	8007a70 <pl_getbatt>
 8001b90:	eef0 7a40 	vmov.f32	s15, s0
 8001b94:	4a34      	ldr	r2, [pc, #208]	; (8001c68 <battcheak+0xe8>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4413      	add	r3, r2
 8001b9c:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001ba0:	200a      	movs	r0, #10
 8001ba2:	f006 f97d 	bl	8007ea0 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	607b      	str	r3, [r7, #4]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b13      	cmp	r3, #19
 8001bb0:	ddec      	ble.n	8001b8c <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <battcheak+0xec>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001bba:	2300      	movs	r3, #0
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	e010      	b.n	8001be2 <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <battcheak+0xe8>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	ed93 7a00 	vldr	s14, [r3]
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <battcheak+0xec>)
 8001bce:	edd3 7a00 	vldr	s15, [r3]
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	4b25      	ldr	r3, [pc, #148]	; (8001c6c <battcheak+0xec>)
 8001bd8:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	3301      	adds	r3, #1
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b13      	cmp	r3, #19
 8001be6:	ddeb      	ble.n	8001bc0 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001be8:	4b20      	ldr	r3, [pc, #128]	; (8001c6c <battcheak+0xec>)
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <battcheak+0xec>)
 8001bf8:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	; (8001c6c <battcheak+0xec>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fcc9 	bl	8000598 <__aeabi_f2d>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4819      	ldr	r0, [pc, #100]	; (8001c70 <battcheak+0xf0>)
 8001c0c:	f01e ff3c 	bl	8020a88 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001c10:	4b16      	ldr	r3, [pc, #88]	; (8001c6c <battcheak+0xec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fcbf 	bl	8000598 <__aeabi_f2d>
 8001c1a:	a311      	add	r3, pc, #68	; (adr r3, 8001c60 <battcheak+0xe0>)
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f7fe ff8e 	bl	8000b40 <__aeabi_dcmple>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d100      	bne.n	8001c2c <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001c2a:	e014      	b.n	8001c56 <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	f005 f9a7 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f005 f9b6 	bl	8006fa4 <pl_l_blue_LED>
		wait_ms(500);
 8001c38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c3c:	f006 f930 	bl	8007ea0 <wait_ms>
		pl_r_blue_LED(OFF);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f005 f99d 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f005 f9ac 	bl	8006fa4 <pl_l_blue_LED>
		wait_ms(500);
 8001c4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c50:	f006 f926 	bl	8007ea0 <wait_ms>
		pl_r_blue_LED(ON);
 8001c54:	e7ea      	b.n	8001c2c <battcheak+0xac>
}
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	f3af 8000 	nop.w
 8001c60:	9999999a 	.word	0x9999999a
 8001c64:	400d9999 	.word	0x400d9999
 8001c68:	20000484 	.word	0x20000484
 8001c6c:	200004d4 	.word	0x200004d4
 8001c70:	080232c8 	.word	0x080232c8

08001c74 <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001c7a:	f006 f897 	bl	8007dac <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001c7e:	2313      	movs	r3, #19
 8001c80:	607b      	str	r3, [r7, #4]
 8001c82:	e037      	b.n	8001cf4 <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	4a56      	ldr	r2, [pc, #344]	; (8001de4 <interupt_calSensor+0x170>)
 8001c8a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c8e:	4955      	ldr	r1, [pc, #340]	; (8001de4 <interupt_calSensor+0x170>)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <interupt_calSensor+0x170>)
 8001c9c:	3314      	adds	r3, #20
 8001c9e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ca2:	4950      	ldr	r1, [pc, #320]	; (8001de4 <interupt_calSensor+0x170>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	4a4c      	ldr	r2, [pc, #304]	; (8001de4 <interupt_calSensor+0x170>)
 8001cb2:	3328      	adds	r3, #40	; 0x28
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	494a      	ldr	r1, [pc, #296]	; (8001de4 <interupt_calSensor+0x170>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3328      	adds	r3, #40	; 0x28
 8001cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	4a47      	ldr	r2, [pc, #284]	; (8001de4 <interupt_calSensor+0x170>)
 8001cc8:	333c      	adds	r3, #60	; 0x3c
 8001cca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cce:	4945      	ldr	r1, [pc, #276]	; (8001de4 <interupt_calSensor+0x170>)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	333c      	adds	r3, #60	; 0x3c
 8001cd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3b01      	subs	r3, #1
 8001cdc:	4a41      	ldr	r2, [pc, #260]	; (8001de4 <interupt_calSensor+0x170>)
 8001cde:	3350      	adds	r3, #80	; 0x50
 8001ce0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ce4:	493f      	ldr	r1, [pc, #252]	; (8001de4 <interupt_calSensor+0x170>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3350      	adds	r3, #80	; 0x50
 8001cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3b01      	subs	r3, #1
 8001cf2:	607b      	str	r3, [r7, #4]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	dcc4      	bgt.n	8001c84 <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <interupt_calSensor+0x174>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <interupt_calSensor+0x178>)
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	4a37      	ldr	r2, [pc, #220]	; (8001de4 <interupt_calSensor+0x170>)
 8001d08:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <interupt_calSensor+0x174>)
 8001d0c:	885b      	ldrh	r3, [r3, #2]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <interupt_calSensor+0x178>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	4a33      	ldr	r2, [pc, #204]	; (8001de4 <interupt_calSensor+0x170>)
 8001d18:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <interupt_calSensor+0x174>)
 8001d1c:	889b      	ldrh	r3, [r3, #4]
 8001d1e:	461a      	mov	r2, r3
 8001d20:	4b32      	ldr	r3, [pc, #200]	; (8001dec <interupt_calSensor+0x178>)
 8001d22:	889b      	ldrh	r3, [r3, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	4a2f      	ldr	r2, [pc, #188]	; (8001de4 <interupt_calSensor+0x170>)
 8001d28:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <interupt_calSensor+0x174>)
 8001d2e:	88db      	ldrh	r3, [r3, #6]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b2e      	ldr	r3, [pc, #184]	; (8001dec <interupt_calSensor+0x178>)
 8001d34:	88db      	ldrh	r3, [r3, #6]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <interupt_calSensor+0x170>)
 8001d3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <interupt_calSensor+0x174>)
 8001d40:	891b      	ldrh	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	4b29      	ldr	r3, [pc, #164]	; (8001dec <interupt_calSensor+0x178>)
 8001d46:	891b      	ldrh	r3, [r3, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <interupt_calSensor+0x170>)
 8001d4c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	607b      	str	r3, [r7, #4]
 8001d54:	e03d      	b.n	8001dd2 <interupt_calSensor+0x15e>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001d56:	4923      	ldr	r1, [pc, #140]	; (8001de4 <interupt_calSensor+0x170>)
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	011b      	lsls	r3, r3, #4
 8001d62:	440b      	add	r3, r1
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	481f      	ldr	r0, [pc, #124]	; (8001de4 <interupt_calSensor+0x170>)
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	011b      	lsls	r3, r3, #4
 8001d72:	4403      	add	r3, r0
 8001d74:	332c      	adds	r3, #44	; 0x2c
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	1aca      	subs	r2, r1, r3
 8001d7a:	491d      	ldr	r1, [pc, #116]	; (8001df0 <interupt_calSensor+0x17c>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][6];
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001d82:	4918      	ldr	r1, [pc, #96]	; (8001de4 <interupt_calSensor+0x170>)
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	440b      	add	r3, r1
 8001d90:	6819      	ldr	r1, [r3, #0]
 8001d92:	4814      	ldr	r0, [pc, #80]	; (8001de4 <interupt_calSensor+0x170>)
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	4403      	add	r3, r0
 8001da0:	3304      	adds	r3, #4
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4419      	add	r1, r3
 8001da6:	480f      	ldr	r0, [pc, #60]	; (8001de4 <interupt_calSensor+0x170>)
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4403      	add	r3, r0
 8001db4:	3308      	adds	r3, #8
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	440b      	add	r3, r1
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <interupt_calSensor+0x180>)
 8001dbc:	fb82 1203 	smull	r1, r2, r2, r3
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad2      	subs	r2, r2, r3
 8001dc4:	490c      	ldr	r1, [pc, #48]	; (8001df8 <interupt_calSensor+0x184>)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	ddbe      	ble.n	8001d56 <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001dd8:	bf00      	nop
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	200002b8 	.word	0x200002b8
 8001de8:	2000070c 	.word	0x2000070c
 8001dec:	20000718 	.word	0x20000718
 8001df0:	20000448 	.word	0x20000448
 8001df4:	55555556 	.word	0x55555556
 8001df8:	20000470 	.word	0x20000470

08001dfc <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <Control_mode_Init+0x28>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001e06:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <Control_mode_Init+0x2c>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001e0c:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <Control_mode_Init+0x30>)
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <Control_mode_Init+0x34>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	701a      	strb	r2, [r3, #0]

}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000528 	.word	0x20000528
 8001e28:	20000805 	.word	0x20000805
 8001e2c:	20000800 	.word	0x20000800
 8001e30:	20000529 	.word	0x20000529

08001e34 <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	ed87 0a03 	vstr	s0, [r7, #12]
 8001e3e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001e46:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e52:	db14      	blt.n	8001e7e <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001e54:	2001      	movs	r0, #1
 8001e56:	f005 fd41 	bl	80078dc <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001e5a:	4b3d      	ldr	r3, [pc, #244]	; (8001f50 <get_duty+0x11c>)
 8001e5c:	ed93 7a00 	vldr	s14, [r3]
 8001e60:	edd7 6a03 	vldr	s13, [r7, #12]
 8001e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e68:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001f54 <get_duty+0x120>
 8001e6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e74:	ee17 2a90 	vmov	r2, s15
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	e015      	b.n	8001eaa <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f005 fd2c 	bl	80078dc <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e88:	eef1 6a67 	vneg.f32	s13, s15
 8001e8c:	4b30      	ldr	r3, [pc, #192]	; (8001f50 <get_duty+0x11c>)
 8001e8e:	ed93 7a00 	vldr	s14, [r3]
 8001e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e96:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001f54 <get_duty+0x120>
 8001e9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ea2:	ee17 2a90 	vmov	r2, s15
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001eaa:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	db14      	blt.n	8001ee2 <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001eb8:	2001      	movs	r0, #1
 8001eba:	f005 fd37 	bl	800792c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <get_duty+0x11c>)
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ec8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ecc:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001f54 <get_duty+0x120>
 8001ed0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed8:	ee17 2a90 	vmov	r2, s15
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e015      	b.n	8001f0e <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001ee2:	2002      	movs	r0, #2
 8001ee4:	f005 fd22 	bl	800792c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001ee8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eec:	eef1 6a67 	vneg.f32	s13, s15
 8001ef0:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <get_duty+0x11c>)
 8001ef2:	ed93 7a00 	vldr	s14, [r3]
 8001ef6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001efa:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001f54 <get_duty+0x120>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f06:	ee17 2a90 	vmov	r2, s15
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	601a      	str	r2, [r3, #0]
	}
	*duty_L=*duty_L;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	601a      	str	r2, [r3, #0]
	*duty_R=*duty_R;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	601a      	str	r2, [r3, #0]
	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f26:	4293      	cmp	r3, r2
 8001f28:	dd03      	ble.n	8001f32 <get_duty+0xfe>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f30:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f240 628c 	movw	r2, #1676	; 0x68c
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	dd03      	ble.n	8001f46 <get_duty+0x112>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	f240 628d 	movw	r2, #1677	; 0x68d
 8001f44:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	200004d4 	.word	0x200004d4
 8001f54:	44d1e000 	.word	0x44d1e000

08001f58 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8001f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f5c:	b08c      	sub	sp, #48	; 0x30
 8001f5e:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61bb      	str	r3, [r7, #24]
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	f04f 0300 	mov.w	r3, #0
 8001f72:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 8001f74:	f04f 0300 	mov.w	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8001f7a:	f04f 0300 	mov.w	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]



	if (modeacc == 0) {
 8001f86:	4bd2      	ldr	r3, [pc, #840]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8001f8e:	4bd1      	ldr	r3, [pc, #836]	; (80022d4 <interupt_DriveMotor+0x37c>)
 8001f90:	2204      	movs	r2, #4
 8001f92:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 8001f94:	4bd0      	ldr	r3, [pc, #832]	; (80022d8 <interupt_DriveMotor+0x380>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8001f9a:	4bd0      	ldr	r3, [pc, #832]	; (80022dc <interupt_DriveMotor+0x384>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8001fa0:	4bcb      	ldr	r3, [pc, #812]	; (80022d0 <interupt_DriveMotor+0x378>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	f040 828f 	bne.w	80024c8 <interupt_DriveMotor+0x570>
		g_wallCut_mode=1;
 8001faa:	4bcc      	ldr	r3, [pc, #816]	; (80022dc <interupt_DriveMotor+0x384>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 8001fb0:	4bcb      	ldr	r3, [pc, #812]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	4aca      	ldr	r2, [pc, #808]	; (80022e0 <interupt_DriveMotor+0x388>)
 8001fb8:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8001fba:	4bca      	ldr	r3, [pc, #808]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe faea 	bl	8000598 <__aeabi_f2d>
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	460d      	mov	r5, r1
 8001fc8:	4bc6      	ldr	r3, [pc, #792]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe fae3 	bl	8000598 <__aeabi_f2d>
 8001fd2:	a3bb      	add	r3, pc, #748	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd8:	f7fe fb36 	bl	8000648 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4690      	mov	r8, r2
 8001fe2:	4699      	mov	r9, r3
 8001fe4:	4bbf      	ldr	r3, [pc, #764]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fad5 	bl	8000598 <__aeabi_f2d>
 8001fee:	a3b4      	add	r3, pc, #720	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8001ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff4:	f7fe fb28 	bl	8000648 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	a3af      	add	r3, pc, #700	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fb1f 	bl	8000648 <__aeabi_dmul>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	4610      	mov	r0, r2
 8002010:	4619      	mov	r1, r3
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fc3f 	bl	800089c <__aeabi_ddiv>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4640      	mov	r0, r8
 8002024:	4649      	mov	r1, r9
 8002026:	f7fe f959 	bl	80002dc <__adddf3>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4620      	mov	r0, r4
 8002030:	4629      	mov	r1, r5
 8002032:	f7fe f953 	bl	80002dc <__adddf3>
 8002036:	4602      	mov	r2, r0
 8002038:	460b      	mov	r3, r1
 800203a:	4610      	mov	r0, r2
 800203c:	4619      	mov	r1, r3
 800203e:	f7fe fddb 	bl	8000bf8 <__aeabi_d2f>
 8002042:	4603      	mov	r3, r0
 8002044:	4aa7      	ldr	r2, [pc, #668]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002046:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002048:	4ba6      	ldr	r3, [pc, #664]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe faa3 	bl	8000598 <__aeabi_f2d>
 8002052:	4604      	mov	r4, r0
 8002054:	460d      	mov	r5, r1
 8002056:	4ba3      	ldr	r3, [pc, #652]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fa9c 	bl	8000598 <__aeabi_f2d>
 8002060:	a397      	add	r3, pc, #604	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe faef 	bl	8000648 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f933 	bl	80002dc <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fdbb 	bl	8000bf8 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a97      	ldr	r2, [pc, #604]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002086:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002088:	4b97      	ldr	r3, [pc, #604]	; (80022e8 <interupt_DriveMotor+0x390>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fa83 	bl	8000598 <__aeabi_f2d>
 8002092:	4604      	mov	r4, r0
 8002094:	460d      	mov	r5, r1
 8002096:	4b94      	ldr	r3, [pc, #592]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a387      	add	r3, pc, #540	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4690      	mov	r8, r2
 80020b0:	4699      	mov	r9, r3
 80020b2:	4b8d      	ldr	r3, [pc, #564]	; (80022e8 <interupt_DriveMotor+0x390>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fa6e 	bl	8000598 <__aeabi_f2d>
 80020bc:	a380      	add	r3, pc, #512	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f7fe fac1 	bl	8000648 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4610      	mov	r0, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	a37c      	add	r3, pc, #496	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 80020d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d4:	f7fe fab8 	bl	8000648 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4610      	mov	r0, r2
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020e8:	f7fe fbd8 	bl	800089c <__aeabi_ddiv>
 80020ec:	4602      	mov	r2, r0
 80020ee:	460b      	mov	r3, r1
 80020f0:	4640      	mov	r0, r8
 80020f2:	4649      	mov	r1, r9
 80020f4:	f7fe f8f2 	bl	80002dc <__adddf3>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4620      	mov	r0, r4
 80020fe:	4629      	mov	r1, r5
 8002100:	f7fe f8ec 	bl	80002dc <__adddf3>
 8002104:	4602      	mov	r2, r0
 8002106:	460b      	mov	r3, r1
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	f7fe fd74 	bl	8000bf8 <__aeabi_d2f>
 8002110:	4603      	mov	r3, r0
 8002112:	4a75      	ldr	r2, [pc, #468]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002114:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002116:	4b74      	ldr	r3, [pc, #464]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fa3c 	bl	8000598 <__aeabi_f2d>
 8002120:	4604      	mov	r4, r0
 8002122:	460d      	mov	r5, r1
 8002124:	4b70      	ldr	r3, [pc, #448]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fa35 	bl	8000598 <__aeabi_f2d>
 800212e:	a364      	add	r3, pc, #400	; (adr r3, 80022c0 <interupt_DriveMotor+0x368>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa88 	bl	8000648 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4620      	mov	r0, r4
 800213e:	4629      	mov	r1, r5
 8002140:	f7fe f8cc 	bl	80002dc <__adddf3>
 8002144:	4602      	mov	r2, r0
 8002146:	460b      	mov	r3, r1
 8002148:	4610      	mov	r0, r2
 800214a:	4619      	mov	r1, r3
 800214c:	f7fe fd54 	bl	8000bf8 <__aeabi_d2f>
 8002150:	4603      	mov	r3, r0
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <interupt_DriveMotor+0x390>)
 8002154:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <interupt_DriveMotor+0x394>)
 8002158:	4a62      	ldr	r2, [pc, #392]	; (80022e4 <interupt_DriveMotor+0x38c>)
 800215a:	9201      	str	r2, [sp, #4]
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	9200      	str	r2, [sp, #0]
 8002160:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002162:	f006 f89b 	bl	800829c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002166:	4b5f      	ldr	r3, [pc, #380]	; (80022e4 <interupt_DriveMotor+0x38c>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	4b5e      	ldr	r3, [pc, #376]	; (80022e8 <interupt_DriveMotor+0x390>)
 800216e:	ed93 7a00 	vldr	s14, [r3]
 8002172:	f107 020c 	add.w	r2, r7, #12
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	eef0 0a47 	vmov.f32	s1, s14
 800217e:	eeb0 0a67 	vmov.f32	s0, s15
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fa21 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800218a:	4b59      	ldr	r3, [pc, #356]	; (80022f0 <interupt_DriveMotor+0x398>)
 800218c:	ed93 7a00 	vldr	s14, [r3]
 8002190:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <interupt_DriveMotor+0x39c>)
 8002192:	edd3 7a00 	vldr	s15, [r3]
 8002196:	ee77 7a27 	vadd.f32	s15, s14, s15
 800219a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800219e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <interupt_DriveMotor+0x38c>)
 80021a4:	edd3 7a01 	vldr	s15, [r3, #4]
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <interupt_DriveMotor+0x3a0>)
 80021aa:	edd3 6a00 	vldr	s13, [r3]
 80021ae:	4b4e      	ldr	r3, [pc, #312]	; (80022e8 <interupt_DriveMotor+0x390>)
 80021b0:	ed93 6a01 	vldr	s12, [r3, #4]
 80021b4:	1d3a      	adds	r2, r7, #4
 80021b6:	f107 0308 	add.w	r3, r7, #8
 80021ba:	eef0 1a46 	vmov.f32	s3, s12
 80021be:	eeb0 1a66 	vmov.f32	s2, s13
 80021c2:	4611      	mov	r1, r2
 80021c4:	eef0 0a67 	vmov.f32	s1, s15
 80021c8:	eeb0 0a47 	vmov.f32	s0, s14
 80021cc:	4618      	mov	r0, r3
 80021ce:	f001 ff57 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 80021d2:	f002 fc15 	bl	8004a00 <calWallConrol>
 80021d6:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 80021da:	ed97 7a04 	vldr	s14, [r7, #16]
 80021de:	edd7 7a03 	vldr	s15, [r7, #12]
 80021e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80021ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80021f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80021fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021fe:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 8002202:	ed97 7a04 	vldr	s14, [r7, #16]
 8002206:	edd7 7a03 	vldr	s15, [r7, #12]
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002212:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002216:	edd7 7a02 	vldr	s15, [r7, #8]
 800221a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800221e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002226:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800222a:	ed97 7a04 	vldr	s14, [r7, #16]
 800222e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002232:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002236:	ee17 0a90 	vmov	r0, s15
 800223a:	f7fe f9ad 	bl	8000598 <__aeabi_f2d>
 800223e:	4604      	mov	r4, r0
 8002240:	460d      	mov	r5, r1
 8002242:	4b2e      	ldr	r3, [pc, #184]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe f9a6 	bl	8000598 <__aeabi_f2d>
 800224c:	a31e      	add	r3, pc, #120	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 800224e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002252:	f7fe f9f9 	bl	8000648 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4620      	mov	r0, r4
 800225c:	4629      	mov	r1, r5
 800225e:	f7fe fc83 	bl	8000b68 <__aeabi_dcmpgt>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	f000 808d 	beq.w	8002384 <interupt_DriveMotor+0x42c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800226a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800226c:	f7fe f994 	bl	8000598 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <interupt_DriveMotor+0x3a4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4618      	mov	r0, r3
 800227a:	f7fe f98d 	bl	8000598 <__aeabi_f2d>
 800227e:	a312      	add	r3, pc, #72	; (adr r3, 80022c8 <interupt_DriveMotor+0x370>)
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	f7fe f9e0 	bl	8000648 <__aeabi_dmul>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4690      	mov	r8, r2
 800228e:	4699      	mov	r9, r3
 8002290:	ed97 7a04 	vldr	s14, [r7, #16]
 8002294:	edd7 7a02 	vldr	s15, [r7, #8]
 8002298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229c:	ee17 0a90 	vmov	r0, s15
 80022a0:	f7fe f97a 	bl	8000598 <__aeabi_f2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4640      	mov	r0, r8
 80022aa:	4649      	mov	r1, r9
 80022ac:	f7fe f814 	bl	80002d8 <__aeabi_dsub>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4620      	mov	r0, r4
 80022b6:	4629      	mov	r1, r5
 80022b8:	e022      	b.n	8002300 <interupt_DriveMotor+0x3a8>
 80022ba:	bf00      	nop
 80022bc:	f3af 8000 	nop.w
 80022c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80022c4:	3f50624d 	.word	0x3f50624d
 80022c8:	d916872b 	.word	0xd916872b
 80022cc:	3feff7ce 	.word	0x3feff7ce
 80022d0:	20000528 	.word	0x20000528
 80022d4:	20000804 	.word	0x20000804
 80022d8:	20000590 	.word	0x20000590
 80022dc:	20000592 	.word	0x20000592
 80022e0:	20000524 	.word	0x20000524
 80022e4:	200004d8 	.word	0x200004d8
 80022e8:	200004e4 	.word	0x200004e4
 80022ec:	200004f0 	.word	0x200004f0
 80022f0:	20000238 	.word	0x20000238
 80022f4:	2000023c 	.word	0x2000023c
 80022f8:	20000268 	.word	0x20000268
 80022fc:	200004d4 	.word	0x200004d4
 8002300:	f7fd ffec 	bl	80002dc <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f7fe fc74 	bl	8000bf8 <__aeabi_d2f>
 8002310:	4603      	mov	r3, r0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002314:	6a38      	ldr	r0, [r7, #32]
 8002316:	f7fe f93f 	bl	8000598 <__aeabi_f2d>
 800231a:	4604      	mov	r4, r0
 800231c:	460d      	mov	r5, r1
 800231e:	4b18      	ldr	r3, [pc, #96]	; (8002380 <interupt_DriveMotor+0x428>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f7fe f938 	bl	8000598 <__aeabi_f2d>
 8002328:	a313      	add	r3, pc, #76	; (adr r3, 8002378 <interupt_DriveMotor+0x420>)
 800232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232e:	f7fe f98b 	bl	8000648 <__aeabi_dmul>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	4690      	mov	r8, r2
 8002338:	4699      	mov	r9, r3
 800233a:	ed97 7a04 	vldr	s14, [r7, #16]
 800233e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002346:	ee17 0a90 	vmov	r0, s15
 800234a:	f7fe f925 	bl	8000598 <__aeabi_f2d>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4640      	mov	r0, r8
 8002354:	4649      	mov	r1, r9
 8002356:	f7fd ffbf 	bl	80002d8 <__aeabi_dsub>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ffbb 	bl	80002dc <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc43 	bl	8000bf8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	e095      	b.n	80024a4 <interupt_DriveMotor+0x54c>
 8002378:	d916872b 	.word	0xd916872b
 800237c:	3feff7ce 	.word	0x3feff7ce
 8002380:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002384:	ed97 7a04 	vldr	s14, [r7, #16]
 8002388:	edd7 7a02 	vldr	s15, [r7, #8]
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	ee17 0a90 	vmov	r0, s15
 8002394:	f7fe f900 	bl	8000598 <__aeabi_f2d>
 8002398:	4604      	mov	r4, r0
 800239a:	460d      	mov	r5, r1
 800239c:	4bce      	ldr	r3, [pc, #824]	; (80026d8 <interupt_DriveMotor+0x780>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eef1 7a67 	vneg.f32	s15, s15
 80023a6:	ee17 3a90 	vmov	r3, s15
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe f8f4 	bl	8000598 <__aeabi_f2d>
 80023b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b6:	f7fe f947 	bl	8000648 <__aeabi_dmul>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	4620      	mov	r0, r4
 80023c0:	4629      	mov	r1, r5
 80023c2:	f7fe fbb3 	bl	8000b2c <__aeabi_dcmplt>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d06b      	beq.n	80024a4 <interupt_DriveMotor+0x54c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80023ce:	f7fe f8e3 	bl	8000598 <__aeabi_f2d>
 80023d2:	4604      	mov	r4, r0
 80023d4:	460d      	mov	r5, r1
 80023d6:	4bc0      	ldr	r3, [pc, #768]	; (80026d8 <interupt_DriveMotor+0x780>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eef1 7a67 	vneg.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8d7 	bl	8000598 <__aeabi_f2d>
 80023ea:	a3b7      	add	r3, pc, #732	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fe f92a 	bl	8000648 <__aeabi_dmul>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4690      	mov	r8, r2
 80023fa:	4699      	mov	r9, r3
 80023fc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002400:	edd7 7a02 	vldr	s15, [r7, #8]
 8002404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002408:	ee17 0a90 	vmov	r0, s15
 800240c:	f7fe f8c4 	bl	8000598 <__aeabi_f2d>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4640      	mov	r0, r8
 8002416:	4649      	mov	r1, r9
 8002418:	f7fd ff5e 	bl	80002d8 <__aeabi_dsub>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	4620      	mov	r0, r4
 8002422:	4629      	mov	r1, r5
 8002424:	f7fd ff5a 	bl	80002dc <__adddf3>
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	f7fe fbe2 	bl	8000bf8 <__aeabi_d2f>
 8002434:	4603      	mov	r3, r0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002438:	6a38      	ldr	r0, [r7, #32]
 800243a:	f7fe f8ad 	bl	8000598 <__aeabi_f2d>
 800243e:	4604      	mov	r4, r0
 8002440:	460d      	mov	r5, r1
 8002442:	4ba5      	ldr	r3, [pc, #660]	; (80026d8 <interupt_DriveMotor+0x780>)
 8002444:	edd3 7a00 	vldr	s15, [r3]
 8002448:	eef1 7a67 	vneg.f32	s15, s15
 800244c:	ee17 3a90 	vmov	r3, s15
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8a1 	bl	8000598 <__aeabi_f2d>
 8002456:	a39c      	add	r3, pc, #624	; (adr r3, 80026c8 <interupt_DriveMotor+0x770>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f7fe f8f4 	bl	8000648 <__aeabi_dmul>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4690      	mov	r8, r2
 8002466:	4699      	mov	r9, r3
 8002468:	ed97 7a04 	vldr	s14, [r7, #16]
 800246c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	ee17 0a90 	vmov	r0, s15
 8002478:	f7fe f88e 	bl	8000598 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fd ff28 	bl	80002d8 <__aeabi_dsub>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd ff24 	bl	80002dc <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fbac 	bl	8000bf8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80024a4:	f107 0214 	add.w	r2, r7, #20
 80024a8:	f107 0318 	add.w	r3, r7, #24
 80024ac:	4611      	mov	r1, r2
 80024ae:	4618      	mov	r0, r3
 80024b0:	edd7 0a08 	vldr	s1, [r7, #32]
 80024b4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80024b8:	f7ff fcbc 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4611      	mov	r1, r2
 80024c2:	4618      	mov	r0, r3
 80024c4:	f005 fa74 	bl	80079b0 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 80024c8:	4b84      	ldr	r3, [pc, #528]	; (80026dc <interupt_DriveMotor+0x784>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d004      	beq.n	80024da <interupt_DriveMotor+0x582>
 80024d0:	4b82      	ldr	r3, [pc, #520]	; (80026dc <interupt_DriveMotor+0x784>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	f040 8287 	bne.w	80029e8 <interupt_DriveMotor+0xa90>
		g_WallControl_mode=0;
 80024da:	4b81      	ldr	r3, [pc, #516]	; (80026e0 <interupt_DriveMotor+0x788>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 80024e0:	4b80      	ldr	r3, [pc, #512]	; (80026e4 <interupt_DriveMotor+0x78c>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3301      	adds	r3, #1
 80024ec:	4a7e      	ldr	r2, [pc, #504]	; (80026e8 <interupt_DriveMotor+0x790>)
 80024ee:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80024f0:	4b7e      	ldr	r3, [pc, #504]	; (80026ec <interupt_DriveMotor+0x794>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f84f 	bl	8000598 <__aeabi_f2d>
 80024fa:	4604      	mov	r4, r0
 80024fc:	460d      	mov	r5, r1
 80024fe:	4b7b      	ldr	r3, [pc, #492]	; (80026ec <interupt_DriveMotor+0x794>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe f848 	bl	8000598 <__aeabi_f2d>
 8002508:	a371      	add	r3, pc, #452	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	f7fe f89b 	bl	8000648 <__aeabi_dmul>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4690      	mov	r8, r2
 8002518:	4699      	mov	r9, r3
 800251a:	4b74      	ldr	r3, [pc, #464]	; (80026ec <interupt_DriveMotor+0x794>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4618      	mov	r0, r3
 8002520:	f7fe f83a 	bl	8000598 <__aeabi_f2d>
 8002524:	a36a      	add	r3, pc, #424	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800252a:	f7fe f88d 	bl	8000648 <__aeabi_dmul>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	a366      	add	r3, pc, #408	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253c:	f7fe f884 	bl	8000648 <__aeabi_dmul>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	4610      	mov	r0, r2
 8002546:	4619      	mov	r1, r3
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002550:	f7fe f9a4 	bl	800089c <__aeabi_ddiv>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4640      	mov	r0, r8
 800255a:	4649      	mov	r1, r9
 800255c:	f7fd febe 	bl	80002dc <__adddf3>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fd feb8 	bl	80002dc <__adddf3>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb40 	bl	8000bf8 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	4a5c      	ldr	r2, [pc, #368]	; (80026ec <interupt_DriveMotor+0x794>)
 800257c:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 800257e:	4b5b      	ldr	r3, [pc, #364]	; (80026ec <interupt_DriveMotor+0x794>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe f808 	bl	8000598 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4b57      	ldr	r3, [pc, #348]	; (80026ec <interupt_DriveMotor+0x794>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe f801 	bl	8000598 <__aeabi_f2d>
 8002596:	a34e      	add	r3, pc, #312	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800259c:	f7fe f854 	bl	8000648 <__aeabi_dmul>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4620      	mov	r0, r4
 80025a6:	4629      	mov	r1, r5
 80025a8:	f7fd fe98 	bl	80002dc <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f7fe fb20 	bl	8000bf8 <__aeabi_d2f>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4a4c      	ldr	r2, [pc, #304]	; (80026ec <interupt_DriveMotor+0x794>)
 80025bc:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 80025be:	4b4c      	ldr	r3, [pc, #304]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4b48      	ldr	r3, [pc, #288]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fd ffe1 	bl	8000598 <__aeabi_f2d>
 80025d6:	a33e      	add	r3, pc, #248	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025dc:	f7fe f834 	bl	8000648 <__aeabi_dmul>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4690      	mov	r8, r2
 80025e6:	4699      	mov	r9, r3
 80025e8:	4b41      	ldr	r3, [pc, #260]	; (80026f0 <interupt_DriveMotor+0x798>)
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fd ffd3 	bl	8000598 <__aeabi_f2d>
 80025f2:	a337      	add	r3, pc, #220	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f7fe f826 	bl	8000648 <__aeabi_dmul>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	a332      	add	r3, pc, #200	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800260a:	f7fe f81d 	bl	8000648 <__aeabi_dmul>
 800260e:	4602      	mov	r2, r0
 8002610:	460b      	mov	r3, r1
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800261e:	f7fe f93d 	bl	800089c <__aeabi_ddiv>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fd fe57 	bl	80002dc <__adddf3>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fe51 	bl	80002dc <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fad9 	bl	8000bf8 <__aeabi_d2f>
 8002646:	4603      	mov	r3, r0
 8002648:	4a29      	ldr	r2, [pc, #164]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264a:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 800264c:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <interupt_DriveMotor+0x798>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ffa1 	bl	8000598 <__aeabi_f2d>
 8002656:	4604      	mov	r4, r0
 8002658:	460d      	mov	r5, r1
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <interupt_DriveMotor+0x798>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff9a 	bl	8000598 <__aeabi_f2d>
 8002664:	a31a      	add	r3, pc, #104	; (adr r3, 80026d0 <interupt_DriveMotor+0x778>)
 8002666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266a:	f7fd ffed 	bl	8000648 <__aeabi_dmul>
 800266e:	4602      	mov	r2, r0
 8002670:	460b      	mov	r3, r1
 8002672:	4620      	mov	r0, r4
 8002674:	4629      	mov	r1, r5
 8002676:	f7fd fe31 	bl	80002dc <__adddf3>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fab9 	bl	8000bf8 <__aeabi_d2f>
 8002686:	4603      	mov	r3, r0
 8002688:	4a19      	ldr	r2, [pc, #100]	; (80026f0 <interupt_DriveMotor+0x798>)
 800268a:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 800268c:	4b19      	ldr	r3, [pc, #100]	; (80026f4 <interupt_DriveMotor+0x79c>)
 800268e:	4a18      	ldr	r2, [pc, #96]	; (80026f0 <interupt_DriveMotor+0x798>)
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	691a      	ldr	r2, [r3, #16]
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002698:	f005 fe00 	bl	800829c <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <interupt_DriveMotor+0x794>)
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <interupt_DriveMotor+0x798>)
 80026a4:	ed93 7a00 	vldr	s14, [r3]
 80026a8:	f107 020c 	add.w	r2, r7, #12
 80026ac:	f107 0310 	add.w	r3, r7, #16
 80026b0:	eef0 0a47 	vmov.f32	s1, s14
 80026b4:	eeb0 0a67 	vmov.f32	s0, s15
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f001 ff86 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 80026c0:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <interupt_DriveMotor+0x7a0>)
 80026c2:	ed93 7a00 	vldr	s14, [r3]
 80026c6:	e019      	b.n	80026fc <interupt_DriveMotor+0x7a4>
 80026c8:	d916872b 	.word	0xd916872b
 80026cc:	3feff7ce 	.word	0x3feff7ce
 80026d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026d4:	3f50624d 	.word	0x3f50624d
 80026d8:	200004d4 	.word	0x200004d4
 80026dc:	20000528 	.word	0x20000528
 80026e0:	20000590 	.word	0x20000590
 80026e4:	20000592 	.word	0x20000592
 80026e8:	20000524 	.word	0x20000524
 80026ec:	200004d8 	.word	0x200004d8
 80026f0:	200004e4 	.word	0x200004e4
 80026f4:	20000504 	.word	0x20000504
 80026f8:	20000238 	.word	0x20000238
 80026fc:	4b64      	ldr	r3, [pc, #400]	; (8002890 <interupt_DriveMotor+0x938>)
 80026fe:	edd3 7a00 	vldr	s15, [r3]
 8002702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002706:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800270a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800270e:	4b61      	ldr	r3, [pc, #388]	; (8002894 <interupt_DriveMotor+0x93c>)
 8002710:	edd3 7a01 	vldr	s15, [r3, #4]
 8002714:	4b60      	ldr	r3, [pc, #384]	; (8002898 <interupt_DriveMotor+0x940>)
 8002716:	edd3 6a00 	vldr	s13, [r3]
 800271a:	4b60      	ldr	r3, [pc, #384]	; (800289c <interupt_DriveMotor+0x944>)
 800271c:	ed93 6a01 	vldr	s12, [r3, #4]
 8002720:	1d3a      	adds	r2, r7, #4
 8002722:	f107 0308 	add.w	r3, r7, #8
 8002726:	eef0 1a46 	vmov.f32	s3, s12
 800272a:	eeb0 1a66 	vmov.f32	s2, s13
 800272e:	4611      	mov	r1, r2
 8002730:	eef0 0a67 	vmov.f32	s1, s15
 8002734:	eeb0 0a47 	vmov.f32	s0, s14
 8002738:	4618      	mov	r0, r3
 800273a:	f001 fca1 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 800273e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002742:	edd7 7a03 	vldr	s15, [r7, #12]
 8002746:	ee37 7a67 	vsub.f32	s14, s14, s15
 800274a:	edd7 7a02 	vldr	s15, [r7, #8]
 800274e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002752:	edd7 7a01 	vldr	s15, [r7, #4]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 800275e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002762:	edd7 7a03 	vldr	s15, [r7, #12]
 8002766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276a:	edd7 7a02 	vldr	s15, [r7, #8]
 800276e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002772:	edd7 7a01 	vldr	s15, [r7, #4]
 8002776:	ee77 7a27 	vadd.f32	s15, s14, s15
 800277a:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 800277e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800278a:	ee17 0a90 	vmov	r0, s15
 800278e:	f7fd ff03 	bl	8000598 <__aeabi_f2d>
 8002792:	4604      	mov	r4, r0
 8002794:	460d      	mov	r5, r1
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <interupt_DriveMotor+0x948>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fefc 	bl	8000598 <__aeabi_f2d>
 80027a0:	a339      	add	r3, pc, #228	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff4f 	bl	8000648 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4620      	mov	r0, r4
 80027b0:	4629      	mov	r1, r5
 80027b2:	f7fe f9d9 	bl	8000b68 <__aeabi_dcmpgt>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d073      	beq.n	80028a4 <interupt_DriveMotor+0x94c>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80027bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027be:	f7fd feeb 	bl	8000598 <__aeabi_f2d>
 80027c2:	4604      	mov	r4, r0
 80027c4:	460d      	mov	r5, r1
 80027c6:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <interupt_DriveMotor+0x948>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7fd fee4 	bl	8000598 <__aeabi_f2d>
 80027d0:	a32d      	add	r3, pc, #180	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 80027d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d6:	f7fd ff37 	bl	8000648 <__aeabi_dmul>
 80027da:	4602      	mov	r2, r0
 80027dc:	460b      	mov	r3, r1
 80027de:	4690      	mov	r8, r2
 80027e0:	4699      	mov	r9, r3
 80027e2:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80027ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027ee:	ee17 0a90 	vmov	r0, s15
 80027f2:	f7fd fed1 	bl	8000598 <__aeabi_f2d>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd fd6b 	bl	80002d8 <__aeabi_dsub>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4620      	mov	r0, r4
 8002808:	4629      	mov	r1, r5
 800280a:	f7fd fd67 	bl	80002dc <__adddf3>
 800280e:	4602      	mov	r2, r0
 8002810:	460b      	mov	r3, r1
 8002812:	4610      	mov	r0, r2
 8002814:	4619      	mov	r1, r3
 8002816:	f7fe f9ef 	bl	8000bf8 <__aeabi_d2f>
 800281a:	4603      	mov	r3, r0
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800281e:	6a38      	ldr	r0, [r7, #32]
 8002820:	f7fd feba 	bl	8000598 <__aeabi_f2d>
 8002824:	4604      	mov	r4, r0
 8002826:	460d      	mov	r5, r1
 8002828:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <interupt_DriveMotor+0x948>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd feb3 	bl	8000598 <__aeabi_f2d>
 8002832:	a315      	add	r3, pc, #84	; (adr r3, 8002888 <interupt_DriveMotor+0x930>)
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f7fd ff06 	bl	8000648 <__aeabi_dmul>
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4690      	mov	r8, r2
 8002842:	4699      	mov	r9, r3
 8002844:	ed97 7a04 	vldr	s14, [r7, #16]
 8002848:	edd7 7a02 	vldr	s15, [r7, #8]
 800284c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002850:	ee17 0a90 	vmov	r0, s15
 8002854:	f7fd fea0 	bl	8000598 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	4640      	mov	r0, r8
 800285e:	4649      	mov	r1, r9
 8002860:	f7fd fd3a 	bl	80002d8 <__aeabi_dsub>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4620      	mov	r0, r4
 800286a:	4629      	mov	r1, r5
 800286c:	f7fd fd36 	bl	80002dc <__adddf3>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4610      	mov	r0, r2
 8002876:	4619      	mov	r1, r3
 8002878:	f7fe f9be 	bl	8000bf8 <__aeabi_d2f>
 800287c:	4603      	mov	r3, r0
 800287e:	623b      	str	r3, [r7, #32]
 8002880:	e0a0      	b.n	80029c4 <interupt_DriveMotor+0xa6c>
 8002882:	bf00      	nop
 8002884:	f3af 8000 	nop.w
 8002888:	d916872b 	.word	0xd916872b
 800288c:	3feff7ce 	.word	0x3feff7ce
 8002890:	2000023c 	.word	0x2000023c
 8002894:	200004d8 	.word	0x200004d8
 8002898:	20000268 	.word	0x20000268
 800289c:	200004e4 	.word	0x200004e4
 80028a0:	200004d4 	.word	0x200004d4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80028a4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028b0:	ee17 0a90 	vmov	r0, s15
 80028b4:	f7fd fe70 	bl	8000598 <__aeabi_f2d>
 80028b8:	4604      	mov	r4, r0
 80028ba:	460d      	mov	r5, r1
 80028bc:	4bd6      	ldr	r3, [pc, #856]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028be:	edd3 7a00 	vldr	s15, [r3]
 80028c2:	eef1 7a67 	vneg.f32	s15, s15
 80028c6:	ee17 3a90 	vmov	r3, s15
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe64 	bl	8000598 <__aeabi_f2d>
 80028d0:	a3cd      	add	r3, pc, #820	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd feb7 	bl	8000648 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4620      	mov	r0, r4
 80028e0:	4629      	mov	r1, r5
 80028e2:	f7fe f923 	bl	8000b2c <__aeabi_dcmplt>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d06b      	beq.n	80029c4 <interupt_DriveMotor+0xa6c>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ee:	f7fd fe53 	bl	8000598 <__aeabi_f2d>
 80028f2:	4604      	mov	r4, r0
 80028f4:	460d      	mov	r5, r1
 80028f6:	4bc8      	ldr	r3, [pc, #800]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 80028f8:	edd3 7a00 	vldr	s15, [r3]
 80028fc:	eef1 7a67 	vneg.f32	s15, s15
 8002900:	ee17 3a90 	vmov	r3, s15
 8002904:	4618      	mov	r0, r3
 8002906:	f7fd fe47 	bl	8000598 <__aeabi_f2d>
 800290a:	a3bf      	add	r3, pc, #764	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	f7fd fe9a 	bl	8000648 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	ee17 0a90 	vmov	r0, s15
 800292c:	f7fd fe34 	bl	8000598 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4640      	mov	r0, r8
 8002936:	4649      	mov	r1, r9
 8002938:	f7fd fcce 	bl	80002d8 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4620      	mov	r0, r4
 8002942:	4629      	mov	r1, r5
 8002944:	f7fd fcca 	bl	80002dc <__adddf3>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f952 	bl	8000bf8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002958:	6a38      	ldr	r0, [r7, #32]
 800295a:	f7fd fe1d 	bl	8000598 <__aeabi_f2d>
 800295e:	4604      	mov	r4, r0
 8002960:	460d      	mov	r5, r1
 8002962:	4bad      	ldr	r3, [pc, #692]	; (8002c18 <interupt_DriveMotor+0xcc0>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fe11 	bl	8000598 <__aeabi_f2d>
 8002976:	a3a4      	add	r3, pc, #656	; (adr r3, 8002c08 <interupt_DriveMotor+0xcb0>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd fe64 	bl	8000648 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4690      	mov	r8, r2
 8002986:	4699      	mov	r9, r3
 8002988:	ed97 7a04 	vldr	s14, [r7, #16]
 800298c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fdfe 	bl	8000598 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fc98 	bl	80002d8 <__aeabi_dsub>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4620      	mov	r0, r4
 80029ae:	4629      	mov	r1, r5
 80029b0:	f7fd fc94 	bl	80002dc <__adddf3>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4610      	mov	r0, r2
 80029ba:	4619      	mov	r1, r3
 80029bc:	f7fe f91c 	bl	8000bf8 <__aeabi_d2f>
 80029c0:	4603      	mov	r3, r0
 80029c2:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 80029c4:	f107 0214 	add.w	r2, r7, #20
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	edd7 0a08 	vldr	s1, [r7, #32]
 80029d4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80029d8:	f7ff fa2c 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f004 ffe4 	bl	80079b0 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 80029e8:	4b8c      	ldr	r3, [pc, #560]	; (8002c1c <interupt_DriveMotor+0xcc4>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b03      	cmp	r3, #3
 80029ee:	f040 8137 	bne.w	8002c60 <interupt_DriveMotor+0xd08>
		g_WallControl_mode=0;
 80029f2:	4b8b      	ldr	r3, [pc, #556]	; (8002c20 <interupt_DriveMotor+0xcc8>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 80029f8:	4b8a      	ldr	r3, [pc, #552]	; (8002c24 <interupt_DriveMotor+0xccc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	701a      	strb	r2, [r3, #0]
		g_MotorTimCount++;
 80029fe:	4b8a      	ldr	r3, [pc, #552]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a88      	ldr	r2, [pc, #544]	; (8002c28 <interupt_DriveMotor+0xcd0>)
 8002a06:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a08:	4b88      	ldr	r3, [pc, #544]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	4604      	mov	r4, r0
 8002a14:	460d      	mov	r5, r1
 8002a16:	4b85      	ldr	r3, [pc, #532]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7fd fdbc 	bl	8000598 <__aeabi_f2d>
 8002a20:	a37b      	add	r3, pc, #492	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a26:	f7fd fe0f 	bl	8000648 <__aeabi_dmul>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4690      	mov	r8, r2
 8002a30:	4699      	mov	r9, r3
 8002a32:	4b7e      	ldr	r3, [pc, #504]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fdae 	bl	8000598 <__aeabi_f2d>
 8002a3c:	a374      	add	r3, pc, #464	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a42:	f7fd fe01 	bl	8000648 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	a370      	add	r3, pc, #448	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fdf8 	bl	8000648 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a68:	f7fd ff18 	bl	800089c <__aeabi_ddiv>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	460b      	mov	r3, r1
 8002a70:	4640      	mov	r0, r8
 8002a72:	4649      	mov	r1, r9
 8002a74:	f7fd fc32 	bl	80002dc <__adddf3>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4620      	mov	r0, r4
 8002a7e:	4629      	mov	r1, r5
 8002a80:	f7fd fc2c 	bl	80002dc <__adddf3>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4610      	mov	r0, r2
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	f7fe f8b4 	bl	8000bf8 <__aeabi_d2f>
 8002a90:	4603      	mov	r3, r0
 8002a92:	4a66      	ldr	r2, [pc, #408]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a94:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002a96:	4b65      	ldr	r3, [pc, #404]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd7c 	bl	8000598 <__aeabi_f2d>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd75 	bl	8000598 <__aeabi_f2d>
 8002aae:	a358      	add	r3, pc, #352	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdc8 	bl	8000648 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd fc0c 	bl	80002dc <__adddf3>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	f7fe f894 	bl	8000bf8 <__aeabi_d2f>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	4a56      	ldr	r2, [pc, #344]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ad4:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002ad6:	4b56      	ldr	r3, [pc, #344]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd5c 	bl	8000598 <__aeabi_f2d>
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	460d      	mov	r5, r1
 8002ae4:	4b52      	ldr	r3, [pc, #328]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7fd fd55 	bl	8000598 <__aeabi_f2d>
 8002aee:	a348      	add	r3, pc, #288	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af4:	f7fd fda8 	bl	8000648 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4690      	mov	r8, r2
 8002afe:	4699      	mov	r9, r3
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd47 	bl	8000598 <__aeabi_f2d>
 8002b0a:	a341      	add	r3, pc, #260	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fd9a 	bl	8000648 <__aeabi_dmul>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	a33c      	add	r3, pc, #240	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b22:	f7fd fd91 	bl	8000648 <__aeabi_dmul>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	f7fd feb1 	bl	800089c <__aeabi_ddiv>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4640      	mov	r0, r8
 8002b40:	4649      	mov	r1, r9
 8002b42:	f7fd fbcb 	bl	80002dc <__adddf3>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4620      	mov	r0, r4
 8002b4c:	4629      	mov	r1, r5
 8002b4e:	f7fd fbc5 	bl	80002dc <__adddf3>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4610      	mov	r0, r2
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7fe f84d 	bl	8000bf8 <__aeabi_d2f>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a33      	ldr	r2, [pc, #204]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b62:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002b64:	4b32      	ldr	r3, [pc, #200]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7fd fd15 	bl	8000598 <__aeabi_f2d>
 8002b6e:	4604      	mov	r4, r0
 8002b70:	460d      	mov	r5, r1
 8002b72:	4b2f      	ldr	r3, [pc, #188]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fd fd0e 	bl	8000598 <__aeabi_f2d>
 8002b7c:	a324      	add	r3, pc, #144	; (adr r3, 8002c10 <interupt_DriveMotor+0xcb8>)
 8002b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b82:	f7fd fd61 	bl	8000648 <__aeabi_dmul>
 8002b86:	4602      	mov	r2, r0
 8002b88:	460b      	mov	r3, r1
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	4629      	mov	r1, r5
 8002b8e:	f7fd fba5 	bl	80002dc <__adddf3>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4610      	mov	r0, r2
 8002b98:	4619      	mov	r1, r3
 8002b9a:	f7fe f82d 	bl	8000bf8 <__aeabi_d2f>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4a23      	ldr	r2, [pc, #140]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002ba2:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002ba4:	4b21      	ldr	r3, [pc, #132]	; (8002c2c <interupt_DriveMotor+0xcd4>)
 8002ba6:	edd3 7a00 	vldr	s15, [r3]
 8002baa:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <interupt_DriveMotor+0xcd8>)
 8002bac:	ed93 7a00 	vldr	s14, [r3]
 8002bb0:	f107 020c 	add.w	r2, r7, #12
 8002bb4:	f107 0310 	add.w	r3, r7, #16
 8002bb8:	eef0 0a47 	vmov.f32	s1, s14
 8002bbc:	eeb0 0a67 	vmov.f32	s0, s15
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 fd02 	bl	80045cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002bc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bcc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002be0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002be4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002be8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002bec:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c00:	e018      	b.n	8002c34 <interupt_DriveMotor+0xcdc>
 8002c02:	bf00      	nop
 8002c04:	f3af 8000 	nop.w
 8002c08:	d916872b 	.word	0xd916872b
 8002c0c:	3feff7ce 	.word	0x3feff7ce
 8002c10:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c14:	3f50624d 	.word	0x3f50624d
 8002c18:	200004d4 	.word	0x200004d4
 8002c1c:	20000528 	.word	0x20000528
 8002c20:	20000590 	.word	0x20000590
 8002c24:	20000592 	.word	0x20000592
 8002c28:	20000524 	.word	0x20000524
 8002c2c:	200004d8 	.word	0x200004d8
 8002c30:	200004e4 	.word	0x200004e4
 8002c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c38:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c3c:	f107 0214 	add.w	r2, r7, #20
 8002c40:	f107 0318 	add.w	r3, r7, #24
 8002c44:	4611      	mov	r1, r2
 8002c46:	4618      	mov	r0, r3
 8002c48:	edd7 0a08 	vldr	s1, [r7, #32]
 8002c4c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002c50:	f7ff f8f0 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 fea8 	bl	80079b0 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002c60:	4bd3      	ldr	r3, [pc, #844]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b05      	cmp	r3, #5
 8002c66:	d137      	bne.n	8002cd8 <interupt_DriveMotor+0xd80>
		g_WallControl_mode=0;
 8002c68:	4bd2      	ldr	r3, [pc, #840]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002c6e:	4bd2      	ldr	r3, [pc, #840]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c74:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c78:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c88:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c90:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c94:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c98:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8002cac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb0:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002cb4:	f107 0214 	add.w	r2, r7, #20
 8002cb8:	f107 0318 	add.w	r3, r7, #24
 8002cbc:	4611      	mov	r1, r2
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cc4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cc8:	f7ff f8b4 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	697a      	ldr	r2, [r7, #20]
 8002cd0:	4611      	mov	r1, r2
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f004 fe6c 	bl	80079b0 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002cd8:	4bb5      	ldr	r3, [pc, #724]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b06      	cmp	r3, #6
 8002cde:	f040 8105 	bne.w	8002eec <interupt_DriveMotor+0xf94>
		g_WallControl_mode=0;
 8002ce2:	4bb4      	ldr	r3, [pc, #720]	; (8002fb4 <interupt_DriveMotor+0x105c>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
				g_wallCut_mode=0;
 8002ce8:	4bb3      	ldr	r3, [pc, #716]	; (8002fb8 <interupt_DriveMotor+0x1060>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002cee:	4bb3      	ldr	r3, [pc, #716]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fc50 	bl	8000598 <__aeabi_f2d>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	460d      	mov	r5, r1
 8002cfc:	4baf      	ldr	r3, [pc, #700]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc49 	bl	8000598 <__aeabi_f2d>
 8002d06:	a3a8      	add	r3, pc, #672	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0c:	f7fd fc9c 	bl	8000648 <__aeabi_dmul>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4690      	mov	r8, r2
 8002d16:	4699      	mov	r9, r3
 8002d18:	4ba8      	ldr	r3, [pc, #672]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fc3b 	bl	8000598 <__aeabi_f2d>
 8002d22:	a3a1      	add	r3, pc, #644	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d28:	f7fd fc8e 	bl	8000648 <__aeabi_dmul>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	4610      	mov	r0, r2
 8002d32:	4619      	mov	r1, r3
 8002d34:	a39c      	add	r3, pc, #624	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f7fd fc85 	bl	8000648 <__aeabi_dmul>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	460b      	mov	r3, r1
 8002d42:	4610      	mov	r0, r2
 8002d44:	4619      	mov	r1, r3
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d4e:	f7fd fda5 	bl	800089c <__aeabi_ddiv>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4640      	mov	r0, r8
 8002d58:	4649      	mov	r1, r9
 8002d5a:	f7fd fabf 	bl	80002dc <__adddf3>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4620      	mov	r0, r4
 8002d64:	4629      	mov	r1, r5
 8002d66:	f7fd fab9 	bl	80002dc <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4610      	mov	r0, r2
 8002d70:	4619      	mov	r1, r3
 8002d72:	f7fd ff41 	bl	8000bf8 <__aeabi_d2f>
 8002d76:	4603      	mov	r3, r0
 8002d78:	4a90      	ldr	r2, [pc, #576]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7a:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002d7c:	4b8f      	ldr	r3, [pc, #572]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fd fc09 	bl	8000598 <__aeabi_f2d>
 8002d86:	4604      	mov	r4, r0
 8002d88:	460d      	mov	r5, r1
 8002d8a:	4b8c      	ldr	r3, [pc, #560]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fd fc02 	bl	8000598 <__aeabi_f2d>
 8002d94:	a384      	add	r3, pc, #528	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9a:	f7fd fc55 	bl	8000648 <__aeabi_dmul>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	460b      	mov	r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f7fd fa99 	bl	80002dc <__adddf3>
 8002daa:	4602      	mov	r2, r0
 8002dac:	460b      	mov	r3, r1
 8002dae:	4610      	mov	r0, r2
 8002db0:	4619      	mov	r1, r3
 8002db2:	f7fd ff21 	bl	8000bf8 <__aeabi_d2f>
 8002db6:	4603      	mov	r3, r0
 8002db8:	4a80      	ldr	r2, [pc, #512]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002dba:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002dbc:	4b80      	ldr	r3, [pc, #512]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbe9 	bl	8000598 <__aeabi_f2d>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	460d      	mov	r5, r1
 8002dca:	4b7d      	ldr	r3, [pc, #500]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fd fbe2 	bl	8000598 <__aeabi_f2d>
 8002dd4:	a374      	add	r3, pc, #464	; (adr r3, 8002fa8 <interupt_DriveMotor+0x1050>)
 8002dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dda:	f7fd fc35 	bl	8000648 <__aeabi_dmul>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fa79 	bl	80002dc <__adddf3>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd ff01 	bl	8000bf8 <__aeabi_d2f>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a71      	ldr	r2, [pc, #452]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002dfa:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <interupt_DriveMotor+0x106c>)
 8002dfe:	edd3 6a00 	vldr	s13, [r3]
 8002e02:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e06:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e0a:	486d      	ldr	r0, [pc, #436]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e0c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 1a67 	vmov.f32	s2, s15
 8002e18:	f005 fd9a 	bl	8008950 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e1c:	4b67      	ldr	r3, [pc, #412]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	4b67      	ldr	r3, [pc, #412]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e24:	ed93 7a00 	vldr	s14, [r3]
 8002e28:	f107 020c 	add.w	r2, r7, #12
 8002e2c:	f107 0310 	add.w	r3, r7, #16
 8002e30:	eef0 0a47 	vmov.f32	s1, s14
 8002e34:	eeb0 0a67 	vmov.f32	s0, s15
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f001 fbc6 	bl	80045cc <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002e40:	4b61      	ldr	r3, [pc, #388]	; (8002fc8 <interupt_DriveMotor+0x1070>)
 8002e42:	ed93 7a00 	vldr	s14, [r3]
 8002e46:	4b61      	ldr	r3, [pc, #388]	; (8002fcc <interupt_DriveMotor+0x1074>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e50:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002e54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e58:	4b58      	ldr	r3, [pc, #352]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e5e:	4b5c      	ldr	r3, [pc, #368]	; (8002fd0 <interupt_DriveMotor+0x1078>)
 8002e60:	edd3 6a00 	vldr	s13, [r3]
 8002e64:	4b56      	ldr	r3, [pc, #344]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002e66:	ed93 6a01 	vldr	s12, [r3, #4]
 8002e6a:	1d3a      	adds	r2, r7, #4
 8002e6c:	f107 0308 	add.w	r3, r7, #8
 8002e70:	eef0 1a46 	vmov.f32	s3, s12
 8002e74:	eeb0 1a66 	vmov.f32	s2, s13
 8002e78:	4611      	mov	r1, r2
 8002e7a:	eef0 0a67 	vmov.f32	s1, s15
 8002e7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002e82:	4618      	mov	r0, r3
 8002e84:	f001 f8fc 	bl	8004080 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002e88:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e8c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002e94:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e9c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002ea8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002eac:	edd7 7a03 	vldr	s15, [r7, #12]
 8002eb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002ec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec4:	edc7 7a08 	vstr	s15, [r7, #32]
//			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
//			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
//		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002ec8:	f107 0214 	add.w	r2, r7, #20
 8002ecc:	f107 0318 	add.w	r3, r7, #24
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	edd7 0a08 	vldr	s1, [r7, #32]
 8002ed8:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002edc:	f7fe ffaa 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f004 fd62 	bl	80079b0 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 8002eec:	4b30      	ldr	r3, [pc, #192]	; (8002fb0 <interupt_DriveMotor+0x1058>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b64      	cmp	r3, #100	; 0x64
 8002ef2:	d14b      	bne.n	8002f8c <interupt_DriveMotor+0x1034>
		straight.velocity = 0;
 8002ef4:	4b31      	ldr	r3, [pc, #196]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002ef6:	f04f 0200 	mov.w	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 8002efc:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002f04:	4b2d      	ldr	r3, [pc, #180]	; (8002fbc <interupt_DriveMotor+0x1064>)
 8002f06:	edd3 7a00 	vldr	s15, [r3]
 8002f0a:	4b2d      	ldr	r3, [pc, #180]	; (8002fc0 <interupt_DriveMotor+0x1068>)
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	f107 020c 	add.w	r2, r7, #12
 8002f14:	f107 0310 	add.w	r3, r7, #16
 8002f18:	eef0 0a47 	vmov.f32	s1, s14
 8002f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f20:	4611      	mov	r1, r2
 8002f22:	4618      	mov	r0, r3
 8002f24:	f001 fb52 	bl	80045cc <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002f28:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f34:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f3c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f44:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f48:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f54:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f64:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002f68:	f107 0214 	add.w	r2, r7, #20
 8002f6c:	f107 0318 	add.w	r3, r7, #24
 8002f70:	4611      	mov	r1, r2
 8002f72:	4618      	mov	r0, r3
 8002f74:	edd7 0a08 	vldr	s1, [r7, #32]
 8002f78:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002f7c:	f7fe ff5a 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	697a      	ldr	r2, [r7, #20]
 8002f84:	4611      	mov	r1, r2
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 fd12 	bl	80079b0 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8002f8c:	4a11      	ldr	r2, [pc, #68]	; (8002fd4 <interupt_DriveMotor+0x107c>)
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <interupt_DriveMotor+0x1080>)
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	6013      	str	r3, [r2, #0]



}
 8002f98:	bf00      	nop
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002fac:	3f50624d 	.word	0x3f50624d
 8002fb0:	20000528 	.word	0x20000528
 8002fb4:	20000590 	.word	0x20000590
 8002fb8:	20000592 	.word	0x20000592
 8002fbc:	200004d8 	.word	0x200004d8
 8002fc0:	200004e4 	.word	0x200004e4
 8002fc4:	20000518 	.word	0x20000518
 8002fc8:	20000238 	.word	0x20000238
 8002fcc:	2000023c 	.word	0x2000023c
 8002fd0:	20000268 	.word	0x20000268
 8002fd4:	2000052c 	.word	0x2000052c
 8002fd8:	20000530 	.word	0x20000530

08002fdc <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b088      	sub	sp, #32
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	ed87 0a05 	vstr	s0, [r7, #20]
 8002fe6:	edc7 0a04 	vstr	s1, [r7, #16]
 8002fea:	ed87 1a03 	vstr	s2, [r7, #12]
 8002fee:	edc7 1a02 	vstr	s3, [r7, #8]
 8002ff2:	ed87 2a01 	vstr	s4, [r7, #4]
 8002ff6:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8002ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ffc:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003000:	edd7 7a04 	vldr	s15, [r7, #16]
 8003004:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 800300c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003010:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003014:	ed97 7a01 	vldr	s14, [r7, #4]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003020:	edd7 7a01 	vldr	s15, [r7, #4]
 8003024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800302c:	d505      	bpl.n	800303a <straight_table2+0x5e>
 800302e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003032:	eef1 7a67 	vneg.f32	s15, s15
 8003036:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 800303a:	4bb4      	ldr	r3, [pc, #720]	; (800330c <straight_table2+0x330>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 8003042:	2300      	movs	r3, #0
 8003044:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 8003046:	4ab2      	ldr	r2, [pc, #712]	; (8003310 <straight_table2+0x334>)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 800304c:	4ab0      	ldr	r2, [pc, #704]	; (8003310 <straight_table2+0x334>)
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003052:	4aaf      	ldr	r2, [pc, #700]	; (8003310 <straight_table2+0x334>)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 8003058:	4aad      	ldr	r2, [pc, #692]	; (8003310 <straight_table2+0x334>)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 800305e:	4aac      	ldr	r2, [pc, #688]	; (8003310 <straight_table2+0x334>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003064:	edd7 7a02 	vldr	s15, [r7, #8]
 8003068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800306c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003070:	db03      	blt.n	800307a <straight_table2+0x9e>
 8003072:	4aa8      	ldr	r2, [pc, #672]	; (8003314 <straight_table2+0x338>)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6053      	str	r3, [r2, #4]
 8003078:	e006      	b.n	8003088 <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800307a:	edd7 7a01 	vldr	s15, [r7, #4]
 800307e:	eef1 7a67 	vneg.f32	s15, s15
 8003082:	4ba4      	ldr	r3, [pc, #656]	; (8003314 <straight_table2+0x338>)
 8003084:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 8003088:	4aa2      	ldr	r2, [pc, #648]	; (8003314 <straight_table2+0x338>)
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 800308e:	4ba1      	ldr	r3, [pc, #644]	; (8003314 <straight_table2+0x338>)
 8003090:	f04f 0200 	mov.w	r2, #0
 8003094:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 8003096:	4ba0      	ldr	r3, [pc, #640]	; (8003318 <straight_table2+0x33c>)
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 800309e:	4b9e      	ldr	r3, [pc, #632]	; (8003318 <straight_table2+0x33c>)
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 80030a6:	4b9c      	ldr	r3, [pc, #624]	; (8003318 <straight_table2+0x33c>)
 80030a8:	f04f 0200 	mov.w	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 80030ae:	4b9b      	ldr	r3, [pc, #620]	; (800331c <straight_table2+0x340>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 80030b4:	4b9a      	ldr	r3, [pc, #616]	; (8003320 <straight_table2+0x344>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80030ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80030be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030c6:	dd0e      	ble.n	80030e6 <straight_table2+0x10a>
 80030c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80030cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80030d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d8:	dd05      	ble.n	80030e6 <straight_table2+0x10a>
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <straight_table2+0x344>)
 80030dc:	2205      	movs	r2, #5
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	4a8c      	ldr	r2, [pc, #560]	; (8003314 <straight_table2+0x338>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80030e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80030ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030f2:	dd14      	ble.n	800311e <straight_table2+0x142>
 80030f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f8:	eef1 7a67 	vneg.f32	s15, s15
 80030fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8003100:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003108:	d509      	bpl.n	800311e <straight_table2+0x142>
 800310a:	4b85      	ldr	r3, [pc, #532]	; (8003320 <straight_table2+0x344>)
 800310c:	2206      	movs	r2, #6
 800310e:	701a      	strb	r2, [r3, #0]
 8003110:	edd7 7a01 	vldr	s15, [r7, #4]
 8003114:	eef1 7a67 	vneg.f32	s15, s15
 8003118:	4b7e      	ldr	r3, [pc, #504]	; (8003314 <straight_table2+0x338>)
 800311a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800311e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003122:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312a:	d514      	bpl.n	8003156 <straight_table2+0x17a>
 800312c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003130:	eef1 7a67 	vneg.f32	s15, s15
 8003134:	ed97 7a07 	vldr	s14, [r7, #28]
 8003138:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800313c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003140:	dd09      	ble.n	8003156 <straight_table2+0x17a>
 8003142:	4b77      	ldr	r3, [pc, #476]	; (8003320 <straight_table2+0x344>)
 8003144:	2205      	movs	r2, #5
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	edd7 7a01 	vldr	s15, [r7, #4]
 800314c:	eef1 7a67 	vneg.f32	s15, s15
 8003150:	4b70      	ldr	r3, [pc, #448]	; (8003314 <straight_table2+0x338>)
 8003152:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003156:	edd7 7a05 	vldr	s15, [r7, #20]
 800315a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800315e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003162:	d50e      	bpl.n	8003182 <straight_table2+0x1a6>
 8003164:	ed97 7a07 	vldr	s14, [r7, #28]
 8003168:	edd7 7a05 	vldr	s15, [r7, #20]
 800316c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003174:	d505      	bpl.n	8003182 <straight_table2+0x1a6>
 8003176:	4b6a      	ldr	r3, [pc, #424]	; (8003320 <straight_table2+0x344>)
 8003178:	2206      	movs	r2, #6
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	4a65      	ldr	r2, [pc, #404]	; (8003314 <straight_table2+0x338>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003182:	4b68      	ldr	r3, [pc, #416]	; (8003324 <straight_table2+0x348>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 8003188:	783a      	ldrb	r2, [r7, #0]
 800318a:	4b67      	ldr	r3, [pc, #412]	; (8003328 <straight_table2+0x34c>)
 800318c:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 800318e:	f004 fbf3 	bl	8007978 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	2b01      	cmp	r3, #1
 8003196:	f040 80d3 	bne.w	8003340 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800319a:	4b64      	ldr	r3, [pc, #400]	; (800332c <straight_table2+0x350>)
 800319c:	f04f 0200 	mov.w	r2, #0
 80031a0:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80031a2:	4b5f      	ldr	r3, [pc, #380]	; (8003320 <straight_table2+0x344>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <straight_table2+0x338>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031b0:	bf00      	nop
 80031b2:	4b5f      	ldr	r3, [pc, #380]	; (8003330 <straight_table2+0x354>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80031bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c4:	d409      	bmi.n	80031da <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <straight_table2+0x354>)
 80031c8:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 80031cc:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003334 <straight_table2+0x358>
 80031d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031d8:	dd18      	ble.n	800320c <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031da:	4b57      	ldr	r3, [pc, #348]	; (8003338 <straight_table2+0x35c>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 80031e0:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80031e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ec:	d409      	bmi.n	8003202 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80031ee:	4b52      	ldr	r3, [pc, #328]	; (8003338 <straight_table2+0x35c>)
 80031f0:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80031f4:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003334 <straight_table2+0x358>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	dd04      	ble.n	800320c <straight_table2+0x230>
			  front_wall_break_90==0){}
 8003202:	4b4e      	ldr	r3, [pc, #312]	; (800333c <straight_table2+0x360>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0d2      	beq.n	80031b2 <straight_table2+0x1d6>
		straight.displacement=0;
 800320c:	4b41      	ldr	r3, [pc, #260]	; (8003314 <straight_table2+0x338>)
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003214:	edd7 7a02 	vldr	s15, [r7, #8]
 8003218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800321c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003220:	db03      	blt.n	800322a <straight_table2+0x24e>
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <straight_table2+0x338>)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6053      	str	r3, [r2, #4]
 8003228:	e006      	b.n	8003238 <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 800322a:	edd7 7a01 	vldr	s15, [r7, #4]
 800322e:	eef1 7a67 	vneg.f32	s15, s15
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <straight_table2+0x338>)
 8003234:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003238:	4b39      	ldr	r3, [pc, #228]	; (8003320 <straight_table2+0x344>)
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800323e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003242:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	dd0e      	ble.n	800326a <straight_table2+0x28e>
 800324c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003250:	edd7 7a05 	vldr	s15, [r7, #20]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	dd05      	ble.n	800326a <straight_table2+0x28e>
 800325e:	4b30      	ldr	r3, [pc, #192]	; (8003320 <straight_table2+0x344>)
 8003260:	2205      	movs	r2, #5
 8003262:	701a      	strb	r2, [r3, #0]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <straight_table2+0x338>)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800326a:	edd7 7a05 	vldr	s15, [r7, #20]
 800326e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003276:	dd14      	ble.n	80032a2 <straight_table2+0x2c6>
 8003278:	edd7 7a05 	vldr	s15, [r7, #20]
 800327c:	eef1 7a67 	vneg.f32	s15, s15
 8003280:	ed97 7a07 	vldr	s14, [r7, #28]
 8003284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800328c:	d509      	bpl.n	80032a2 <straight_table2+0x2c6>
 800328e:	4b24      	ldr	r3, [pc, #144]	; (8003320 <straight_table2+0x344>)
 8003290:	2206      	movs	r2, #6
 8003292:	701a      	strb	r2, [r3, #0]
 8003294:	edd7 7a01 	vldr	s15, [r7, #4]
 8003298:	eef1 7a67 	vneg.f32	s15, s15
 800329c:	4b1d      	ldr	r3, [pc, #116]	; (8003314 <straight_table2+0x338>)
 800329e:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80032a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80032a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ae:	d514      	bpl.n	80032da <straight_table2+0x2fe>
 80032b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80032b4:	eef1 7a67 	vneg.f32	s15, s15
 80032b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80032bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c4:	dd09      	ble.n	80032da <straight_table2+0x2fe>
 80032c6:	4b16      	ldr	r3, [pc, #88]	; (8003320 <straight_table2+0x344>)
 80032c8:	2205      	movs	r2, #5
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d0:	eef1 7a67 	vneg.f32	s15, s15
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <straight_table2+0x338>)
 80032d6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80032da:	edd7 7a05 	vldr	s15, [r7, #20]
 80032de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	f140 825b 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80032ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80032f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fa:	f140 8251 	bpl.w	80037a0 <straight_table2+0x7c4>
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <straight_table2+0x344>)
 8003300:	2206      	movs	r2, #6
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	4a03      	ldr	r2, [pc, #12]	; (8003314 <straight_table2+0x338>)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6053      	str	r3, [r2, #4]
 800330a:	e249      	b.n	80037a0 <straight_table2+0x7c4>
 800330c:	20000529 	.word	0x20000529
 8003310:	200004f0 	.word	0x200004f0
 8003314:	200004d8 	.word	0x200004d8
 8003318:	200004e4 	.word	0x200004e4
 800331c:	20000805 	.word	0x20000805
 8003320:	20000804 	.word	0x20000804
 8003324:	20000528 	.word	0x20000528
 8003328:	20000590 	.word	0x20000590
 800332c:	20000534 	.word	0x20000534
 8003330:	200005cc 	.word	0x200005cc
 8003334:	425c0000 	.word	0x425c0000
 8003338:	200005d0 	.word	0x200005d0
 800333c:	200005f2 	.word	0x200005f2
	}else if(motor_mode.WallCutMode==2){
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	2b02      	cmp	r3, #2
 8003344:	f040 80c9 	bne.w	80034da <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003348:	4bb8      	ldr	r3, [pc, #736]	; (800362c <straight_table2+0x650>)
 800334a:	f04f 0200 	mov.w	r2, #0
 800334e:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003350:	4bb7      	ldr	r3, [pc, #732]	; (8003630 <straight_table2+0x654>)
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 8003356:	4bb7      	ldr	r3, [pc, #732]	; (8003634 <straight_table2+0x658>)
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800335e:	bf00      	nop
 8003360:	4bb5      	ldr	r3, [pc, #724]	; (8003638 <straight_table2+0x65c>)
 8003362:	edd3 7a00 	vldr	s15, [r3]
 8003366:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800336a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800336e:	d913      	bls.n	8003398 <straight_table2+0x3bc>
 8003370:	4bb1      	ldr	r3, [pc, #708]	; (8003638 <straight_table2+0x65c>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 800337a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d909      	bls.n	8003398 <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003384:	4bac      	ldr	r3, [pc, #688]	; (8003638 <straight_table2+0x65c>)
 8003386:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800338a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800363c <straight_table2+0x660>
 800338e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003396:	db20      	blt.n	80033da <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003398:	4ba9      	ldr	r3, [pc, #676]	; (8003640 <straight_table2+0x664>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 800339e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d913      	bls.n	80033d0 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033a8:	4ba5      	ldr	r3, [pc, #660]	; (8003640 <straight_table2+0x664>)
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeba 7a0a 	vmov.f32	s14, #170	; 0xc1500000 -13.0
 80033b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ba:	d909      	bls.n	80033d0 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033bc:	4ba0      	ldr	r3, [pc, #640]	; (8003640 <straight_table2+0x664>)
 80033be:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 80033c2:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 800363c <straight_table2+0x660>
 80033c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	db04      	blt.n	80033da <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 80033d0:	4b9c      	ldr	r3, [pc, #624]	; (8003644 <straight_table2+0x668>)
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0c2      	beq.n	8003360 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 80033da:	4b96      	ldr	r3, [pc, #600]	; (8003634 <straight_table2+0x658>)
 80033dc:	f04f 0200 	mov.w	r2, #0
 80033e0:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80033e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	db03      	blt.n	80033f8 <straight_table2+0x41c>
 80033f0:	4a90      	ldr	r2, [pc, #576]	; (8003634 <straight_table2+0x658>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6053      	str	r3, [r2, #4]
 80033f6:	e006      	b.n	8003406 <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eef1 7a67 	vneg.f32	s15, s15
 8003400:	4b8c      	ldr	r3, [pc, #560]	; (8003634 <straight_table2+0x658>)
 8003402:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003406:	4b8a      	ldr	r3, [pc, #552]	; (8003630 <straight_table2+0x654>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800340c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003410:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003414:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003418:	dd0e      	ble.n	8003438 <straight_table2+0x45c>
 800341a:	ed97 7a07 	vldr	s14, [r7, #28]
 800341e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003422:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	dd05      	ble.n	8003438 <straight_table2+0x45c>
 800342c:	4b80      	ldr	r3, [pc, #512]	; (8003630 <straight_table2+0x654>)
 800342e:	2205      	movs	r2, #5
 8003430:	701a      	strb	r2, [r3, #0]
 8003432:	4a80      	ldr	r2, [pc, #512]	; (8003634 <straight_table2+0x658>)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003438:	edd7 7a05 	vldr	s15, [r7, #20]
 800343c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003444:	dd14      	ble.n	8003470 <straight_table2+0x494>
 8003446:	edd7 7a05 	vldr	s15, [r7, #20]
 800344a:	eef1 7a67 	vneg.f32	s15, s15
 800344e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003452:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	d509      	bpl.n	8003470 <straight_table2+0x494>
 800345c:	4b74      	ldr	r3, [pc, #464]	; (8003630 <straight_table2+0x654>)
 800345e:	2206      	movs	r2, #6
 8003460:	701a      	strb	r2, [r3, #0]
 8003462:	edd7 7a01 	vldr	s15, [r7, #4]
 8003466:	eef1 7a67 	vneg.f32	s15, s15
 800346a:	4b72      	ldr	r3, [pc, #456]	; (8003634 <straight_table2+0x658>)
 800346c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003470:	edd7 7a05 	vldr	s15, [r7, #20]
 8003474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	d514      	bpl.n	80034a8 <straight_table2+0x4cc>
 800347e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003482:	eef1 7a67 	vneg.f32	s15, s15
 8003486:	ed97 7a07 	vldr	s14, [r7, #28]
 800348a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd09      	ble.n	80034a8 <straight_table2+0x4cc>
 8003494:	4b66      	ldr	r3, [pc, #408]	; (8003630 <straight_table2+0x654>)
 8003496:	2205      	movs	r2, #5
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	edd7 7a01 	vldr	s15, [r7, #4]
 800349e:	eef1 7a67 	vneg.f32	s15, s15
 80034a2:	4b64      	ldr	r3, [pc, #400]	; (8003634 <straight_table2+0x658>)
 80034a4:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80034a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80034ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	f140 8174 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034b8:	ed97 7a07 	vldr	s14, [r7, #28]
 80034bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80034c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c8:	f140 816a 	bpl.w	80037a0 <straight_table2+0x7c4>
 80034cc:	4b58      	ldr	r3, [pc, #352]	; (8003630 <straight_table2+0x654>)
 80034ce:	2206      	movs	r2, #6
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	4a58      	ldr	r2, [pc, #352]	; (8003634 <straight_table2+0x658>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6053      	str	r3, [r2, #4]
 80034d8:	e162      	b.n	80037a0 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	2b03      	cmp	r3, #3
 80034de:	f040 80b9 	bne.w	8003654 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80034e2:	4b52      	ldr	r3, [pc, #328]	; (800362c <straight_table2+0x650>)
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 80034ea:	4b51      	ldr	r3, [pc, #324]	; (8003630 <straight_table2+0x654>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80034f0:	4b50      	ldr	r3, [pc, #320]	; (8003634 <straight_table2+0x658>)
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80034f8:	bf00      	nop
 80034fa:	4b53      	ldr	r3, [pc, #332]	; (8003648 <straight_table2+0x66c>)
 80034fc:	edd3 7a00 	vldr	s15, [r3]
 8003500:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003504:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800350c:	d409      	bmi.n	8003522 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 800350e:	4b4e      	ldr	r3, [pc, #312]	; (8003648 <straight_table2+0x66c>)
 8003510:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 8003514:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800364c <straight_table2+0x670>
 8003518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003520:	dd04      	ble.n	800352c <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 8003522:	4b4b      	ldr	r3, [pc, #300]	; (8003650 <straight_table2+0x674>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0e6      	beq.n	80034fa <straight_table2+0x51e>
		straight.displacement=0;
 800352c:	4b41      	ldr	r3, [pc, #260]	; (8003634 <straight_table2+0x658>)
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003534:	edd7 7a02 	vldr	s15, [r7, #8]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db03      	blt.n	800354a <straight_table2+0x56e>
 8003542:	4a3c      	ldr	r2, [pc, #240]	; (8003634 <straight_table2+0x658>)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6053      	str	r3, [r2, #4]
 8003548:	e006      	b.n	8003558 <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 800354a:	edd7 7a01 	vldr	s15, [r7, #4]
 800354e:	eef1 7a67 	vneg.f32	s15, s15
 8003552:	4b38      	ldr	r3, [pc, #224]	; (8003634 <straight_table2+0x658>)
 8003554:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003558:	4b35      	ldr	r3, [pc, #212]	; (8003630 <straight_table2+0x654>)
 800355a:	2201      	movs	r2, #1
 800355c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800355e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003562:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	dd0e      	ble.n	800358a <straight_table2+0x5ae>
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	edd7 7a05 	vldr	s15, [r7, #20]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd05      	ble.n	800358a <straight_table2+0x5ae>
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <straight_table2+0x654>)
 8003580:	2205      	movs	r2, #5
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <straight_table2+0x658>)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800358a:	edd7 7a05 	vldr	s15, [r7, #20]
 800358e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003596:	dd14      	ble.n	80035c2 <straight_table2+0x5e6>
 8003598:	edd7 7a05 	vldr	s15, [r7, #20]
 800359c:	eef1 7a67 	vneg.f32	s15, s15
 80035a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ac:	d509      	bpl.n	80035c2 <straight_table2+0x5e6>
 80035ae:	4b20      	ldr	r3, [pc, #128]	; (8003630 <straight_table2+0x654>)
 80035b0:	2206      	movs	r2, #6
 80035b2:	701a      	strb	r2, [r3, #0]
 80035b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035b8:	eef1 7a67 	vneg.f32	s15, s15
 80035bc:	4b1d      	ldr	r3, [pc, #116]	; (8003634 <straight_table2+0x658>)
 80035be:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80035c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	d514      	bpl.n	80035fa <straight_table2+0x61e>
 80035d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80035d4:	eef1 7a67 	vneg.f32	s15, s15
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	dd09      	ble.n	80035fa <straight_table2+0x61e>
 80035e6:	4b12      	ldr	r3, [pc, #72]	; (8003630 <straight_table2+0x654>)
 80035e8:	2205      	movs	r2, #5
 80035ea:	701a      	strb	r2, [r3, #0]
 80035ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f0:	eef1 7a67 	vneg.f32	s15, s15
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <straight_table2+0x658>)
 80035f6:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80035fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80035fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003606:	f140 80cb 	bpl.w	80037a0 <straight_table2+0x7c4>
 800360a:	ed97 7a07 	vldr	s14, [r7, #28]
 800360e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800361a:	f140 80c1 	bpl.w	80037a0 <straight_table2+0x7c4>
 800361e:	4b04      	ldr	r3, [pc, #16]	; (8003630 <straight_table2+0x654>)
 8003620:	2206      	movs	r2, #6
 8003622:	701a      	strb	r2, [r3, #0]
 8003624:	4a03      	ldr	r2, [pc, #12]	; (8003634 <straight_table2+0x658>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6053      	str	r3, [r2, #4]
 800362a:	e0b9      	b.n	80037a0 <straight_table2+0x7c4>
 800362c:	20000534 	.word	0x20000534
 8003630:	20000804 	.word	0x20000804
 8003634:	200004d8 	.word	0x200004d8
 8003638:	200005d4 	.word	0x200005d4
 800363c:	42000000 	.word	0x42000000
 8003640:	200005d8 	.word	0x200005d8
 8003644:	200005f3 	.word	0x200005f3
 8003648:	200005e4 	.word	0x200005e4
 800364c:	420c0000 	.word	0x420c0000
 8003650:	200005f4 	.word	0x200005f4
	}else if(motor_mode.WallCutMode==4){
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b04      	cmp	r3, #4
 8003658:	f040 80a2 	bne.w	80037a0 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800365c:	4ba6      	ldr	r3, [pc, #664]	; (80038f8 <straight_table2+0x91c>)
 800365e:	f04f 0200 	mov.w	r2, #0
 8003662:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003664:	4ba5      	ldr	r3, [pc, #660]	; (80038fc <straight_table2+0x920>)
 8003666:	2200      	movs	r2, #0
 8003668:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800366a:	4ba5      	ldr	r3, [pc, #660]	; (8003900 <straight_table2+0x924>)
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003672:	bf00      	nop
 8003674:	4ba3      	ldr	r3, [pc, #652]	; (8003904 <straight_table2+0x928>)
 8003676:	edd3 7a00 	vldr	s15, [r3]
 800367a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d409      	bmi.n	800369c <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003688:	4b9e      	ldr	r3, [pc, #632]	; (8003904 <straight_table2+0x928>)
 800368a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 800368e:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003908 <straight_table2+0x92c>
 8003692:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369a:	dd04      	ble.n	80036a6 <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 800369c:	4b9b      	ldr	r3, [pc, #620]	; (800390c <straight_table2+0x930>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0e6      	beq.n	8003674 <straight_table2+0x698>
		straight.displacement=0;
 80036a6:	4b96      	ldr	r3, [pc, #600]	; (8003900 <straight_table2+0x924>)
 80036a8:	f04f 0200 	mov.w	r2, #0
 80036ac:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80036ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	db03      	blt.n	80036c4 <straight_table2+0x6e8>
 80036bc:	4a90      	ldr	r2, [pc, #576]	; (8003900 <straight_table2+0x924>)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6053      	str	r3, [r2, #4]
 80036c2:	e006      	b.n	80036d2 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 80036c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80036c8:	eef1 7a67 	vneg.f32	s15, s15
 80036cc:	4b8c      	ldr	r3, [pc, #560]	; (8003900 <straight_table2+0x924>)
 80036ce:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036d2:	4b8a      	ldr	r3, [pc, #552]	; (80038fc <straight_table2+0x920>)
 80036d4:	2201      	movs	r2, #1
 80036d6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	dd0e      	ble.n	8003704 <straight_table2+0x728>
 80036e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80036ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80036ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	dd05      	ble.n	8003704 <straight_table2+0x728>
 80036f8:	4b80      	ldr	r3, [pc, #512]	; (80038fc <straight_table2+0x920>)
 80036fa:	2205      	movs	r2, #5
 80036fc:	701a      	strb	r2, [r3, #0]
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <straight_table2+0x924>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8003704:	edd7 7a05 	vldr	s15, [r7, #20]
 8003708:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800370c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003710:	dd14      	ble.n	800373c <straight_table2+0x760>
 8003712:	edd7 7a05 	vldr	s15, [r7, #20]
 8003716:	eef1 7a67 	vneg.f32	s15, s15
 800371a:	ed97 7a07 	vldr	s14, [r7, #28]
 800371e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003726:	d509      	bpl.n	800373c <straight_table2+0x760>
 8003728:	4b74      	ldr	r3, [pc, #464]	; (80038fc <straight_table2+0x920>)
 800372a:	2206      	movs	r2, #6
 800372c:	701a      	strb	r2, [r3, #0]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef1 7a67 	vneg.f32	s15, s15
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <straight_table2+0x924>)
 8003738:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800373c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003748:	d514      	bpl.n	8003774 <straight_table2+0x798>
 800374a:	edd7 7a05 	vldr	s15, [r7, #20]
 800374e:	eef1 7a67 	vneg.f32	s15, s15
 8003752:	ed97 7a07 	vldr	s14, [r7, #28]
 8003756:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	dd09      	ble.n	8003774 <straight_table2+0x798>
 8003760:	4b66      	ldr	r3, [pc, #408]	; (80038fc <straight_table2+0x920>)
 8003762:	2205      	movs	r2, #5
 8003764:	701a      	strb	r2, [r3, #0]
 8003766:	edd7 7a01 	vldr	s15, [r7, #4]
 800376a:	eef1 7a67 	vneg.f32	s15, s15
 800376e:	4b64      	ldr	r3, [pc, #400]	; (8003900 <straight_table2+0x924>)
 8003770:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003774:	edd7 7a05 	vldr	s15, [r7, #20]
 8003778:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800377c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003780:	d50e      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	edd7 7a05 	vldr	s15, [r7, #20]
 800378a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800378e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003792:	d505      	bpl.n	80037a0 <straight_table2+0x7c4>
 8003794:	4b59      	ldr	r3, [pc, #356]	; (80038fc <straight_table2+0x920>)
 8003796:	2206      	movs	r2, #6
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	4a59      	ldr	r2, [pc, #356]	; (8003900 <straight_table2+0x924>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 80037a0:	78bb      	ldrb	r3, [r7, #2]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f040 809e 	bne.w	80038e4 <straight_table2+0x908>
	while (g_acc_flag!=4){
 80037a8:	e074      	b.n	8003894 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d120      	bne.n	80037f2 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80037b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037bc:	4b54      	ldr	r3, [pc, #336]	; (8003910 <straight_table2+0x934>)
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ca:	d90e      	bls.n	80037ea <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 80037cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d0:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 80037d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80037d8:	4b4e      	ldr	r3, [pc, #312]	; (8003914 <straight_table2+0x938>)
 80037da:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 80037de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	d900      	bls.n	80037ea <straight_table2+0x80e>
 80037e8:	e054      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 80037ea:	4b44      	ldr	r3, [pc, #272]	; (80038fc <straight_table2+0x920>)
 80037ec:	2204      	movs	r2, #4
 80037ee:	701a      	strb	r2, [r3, #0]
				break;
 80037f0:	e055      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d121      	bne.n	800383c <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 80037f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80037fc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003800:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003804:	4b44      	ldr	r3, [pc, #272]	; (8003918 <straight_table2+0x93c>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	d900      	bls.n	8003816 <straight_table2+0x83a>
 8003814:	e03e      	b.n	8003894 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003816:	edd7 7a05 	vldr	s15, [r7, #20]
 800381a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800381e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8003822:	4b3e      	ldr	r3, [pc, #248]	; (800391c <straight_table2+0x940>)
 8003824:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	d900      	bls.n	8003834 <straight_table2+0x858>
 8003832:	e02f      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003834:	4b31      	ldr	r3, [pc, #196]	; (80038fc <straight_table2+0x920>)
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]
				break;
 800383a:	e030      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b03      	cmp	r3, #3
 8003840:	d112      	bne.n	8003868 <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003842:	edd7 7a05 	vldr	s15, [r7, #20]
 8003846:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800384a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <straight_table2+0x944>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800385c:	d900      	bls.n	8003860 <straight_table2+0x884>
 800385e:	e019      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003860:	4b26      	ldr	r3, [pc, #152]	; (80038fc <straight_table2+0x920>)
 8003862:	2204      	movs	r2, #4
 8003864:	701a      	strb	r2, [r3, #0]
				break;
 8003866:	e01a      	b.n	800389e <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	2b04      	cmp	r3, #4
 800386c:	d112      	bne.n	8003894 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 800386e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003872:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8003876:	ee37 7a87 	vadd.f32	s14, s15, s14
 800387a:	4b22      	ldr	r3, [pc, #136]	; (8003904 <straight_table2+0x928>)
 800387c:	edd3 7a00 	vldr	s15, [r3]
 8003880:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d900      	bls.n	800388c <straight_table2+0x8b0>
 800388a:	e003      	b.n	8003894 <straight_table2+0x8b8>
				g_acc_flag=4;
 800388c:	4b1b      	ldr	r3, [pc, #108]	; (80038fc <straight_table2+0x920>)
 800388e:	2204      	movs	r2, #4
 8003890:	701a      	strb	r2, [r3, #0]
				break;
 8003892:	e004      	b.n	800389e <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <straight_table2+0x920>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b04      	cmp	r3, #4
 800389c:	d185      	bne.n	80037aa <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 800389e:	edd7 7a03 	vldr	s15, [r7, #12]
 80038a2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038aa:	d105      	bne.n	80038b8 <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 80038ac:	2064      	movs	r0, #100	; 0x64
 80038ae:	f004 fb3b 	bl	8007f28 <wait_ms_NoReset>
		modeacc = 0;
 80038b2:	4b1c      	ldr	r3, [pc, #112]	; (8003924 <straight_table2+0x948>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 80038b8:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <straight_table2+0x94c>)
 80038ba:	ed93 7a00 	vldr	s14, [r3]
 80038be:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	4b18      	ldr	r3, [pc, #96]	; (8003928 <straight_table2+0x94c>)
 80038c8:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80038cc:	4b17      	ldr	r3, [pc, #92]	; (800392c <straight_table2+0x950>)
 80038ce:	ed93 7a00 	vldr	s14, [r3]
 80038d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038da:	4b14      	ldr	r3, [pc, #80]	; (800392c <straight_table2+0x950>)
 80038dc:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80038e0:	f004 f858 	bl	8007994 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 80038e4:	4b06      	ldr	r3, [pc, #24]	; (8003900 <straight_table2+0x924>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	ee07 3a90 	vmov	s15, r3



}
 80038ec:	eeb0 0a67 	vmov.f32	s0, s15
 80038f0:	3720      	adds	r7, #32
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000534 	.word	0x20000534
 80038fc:	20000804 	.word	0x20000804
 8003900:	200004d8 	.word	0x200004d8
 8003904:	200005e8 	.word	0x200005e8
 8003908:	420c0000 	.word	0x420c0000
 800390c:	200005f4 	.word	0x200005f4
 8003910:	200005d0 	.word	0x200005d0
 8003914:	200005cc 	.word	0x200005cc
 8003918:	200005d8 	.word	0x200005d8
 800391c:	200005d4 	.word	0x200005d4
 8003920:	200005e4 	.word	0x200005e4
 8003924:	20000528 	.word	0x20000528
 8003928:	20000220 	.word	0x20000220
 800392c:	20000224 	.word	0x20000224

08003930 <End_straight>:

void End_straight(float input_displacement,MOTOR_MODE motor_mode,_Bool right_wall,_Bool left_wall){
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	ed87 0a03 	vstr	s0, [r7, #12]
 800393a:	60b8      	str	r0, [r7, #8]
 800393c:	460b      	mov	r3, r1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	4613      	mov	r3, r2
 8003942:	71bb      	strb	r3, [r7, #6]
	while (g_acc_flag!=4){
 8003944:	e02f      	b.n	80039a6 <End_straight+0x76>
		if(right_wall == 0 || left_wall == 0){
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f083 0301 	eor.w	r3, r3, #1
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <End_straight+0x2e>
 8003952:	79bb      	ldrb	r3, [r7, #6]
 8003954:	f083 0301 	eor.w	r3, r3, #1
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d023      	beq.n	80039a6 <End_straight+0x76>
		if(motor_mode.WallCutMode==1){
 800395e:	7afb      	ldrb	r3, [r7, #11]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d120      	bne.n	80039a6 <End_straight+0x76>
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003964:	edd7 7a03 	vldr	s15, [r7, #12]
 8003968:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800396c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003970:	4b1c      	ldr	r3, [pc, #112]	; (80039e4 <End_straight+0xb4>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800397a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800397e:	d90e      	bls.n	800399e <End_straight+0x6e>
					   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90 ){
 8003980:	edd7 7a03 	vldr	s15, [r7, #12]
 8003984:	eeb3 7a02 	vmov.f32	s14, #50	; 0x41900000  18.0
 8003988:	ee37 7a87 	vadd.f32	s14, s15, s14
 800398c:	4b16      	ldr	r3, [pc, #88]	; (80039e8 <End_straight+0xb8>)
 800398e:	edd3 7a00 	vldr	s15, [r3]
					if(NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003992:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399a:	d900      	bls.n	800399e <End_straight+0x6e>
 800399c:	e003      	b.n	80039a6 <End_straight+0x76>
						g_acc_flag=4;
 800399e:	4b13      	ldr	r3, [pc, #76]	; (80039ec <End_straight+0xbc>)
 80039a0:	2204      	movs	r2, #4
 80039a2:	701a      	strb	r2, [r3, #0]
						break;
 80039a4:	e004      	b.n	80039b0 <End_straight+0x80>
	while (g_acc_flag!=4){
 80039a6:	4b11      	ldr	r3, [pc, #68]	; (80039ec <End_straight+0xbc>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b04      	cmp	r3, #4
 80039ae:	d1ca      	bne.n	8003946 <End_straight+0x16>
//			}
//		}

	}
//	while(g_MotorEnd_flag==0){}
	E_distanceL = E_distanceL - input_displacement;
 80039b0:	4b0f      	ldr	r3, [pc, #60]	; (80039f0 <End_straight+0xc0>)
 80039b2:	ed93 7a00 	vldr	s14, [r3]
 80039b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <End_straight+0xc0>)
 80039c0:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <End_straight+0xc4>)
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80039ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <End_straight+0xc4>)
 80039d4:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 80039d8:	f003 ffdc 	bl	8007994 <pl_DriveMotor_stop>
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200005d0 	.word	0x200005d0
 80039e8:	200005cc 	.word	0x200005cc
 80039ec:	20000804 	.word	0x20000804
 80039f0:	20000220 	.word	0x20000220
 80039f4:	20000224 	.word	0x20000224

080039f8 <turning_table2>:

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	ed87 0a05 	vstr	s0, [r7, #20]
 8003a02:	edc7 0a04 	vstr	s1, [r7, #16]
 8003a06:	ed87 1a03 	vstr	s2, [r7, #12]
 8003a0a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003a0e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a16:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003a1a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a1e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003a22:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003a26:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003a2a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003a2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8003a32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <turning_table2+0x5c>
 8003a48:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a4c:	eef1 7a67 	vneg.f32	s15, s15
 8003a50:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003a54:	4a69      	ldr	r2, [pc, #420]	; (8003bfc <turning_table2+0x204>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003a5a:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <turning_table2+0x204>)
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003a60:	4a66      	ldr	r2, [pc, #408]	; (8003bfc <turning_table2+0x204>)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003a66:	4a65      	ldr	r2, [pc, #404]	; (8003bfc <turning_table2+0x204>)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003a6c:	4a63      	ldr	r2, [pc, #396]	; (8003bfc <turning_table2+0x204>)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003a72:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	db03      	blt.n	8003a88 <turning_table2+0x90>
 8003a80:	4a5f      	ldr	r2, [pc, #380]	; (8003c00 <turning_table2+0x208>)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	e006      	b.n	8003a96 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003a88:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a8c:	eef1 7a67 	vneg.f32	s15, s15
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <turning_table2+0x208>)
 8003a92:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003a96:	4a5a      	ldr	r2, [pc, #360]	; (8003c00 <turning_table2+0x208>)
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <turning_table2+0x208>)
 8003a9e:	f04f 0200 	mov.w	r2, #0
 8003aa2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003aa4:	4b57      	ldr	r3, [pc, #348]	; (8003c04 <turning_table2+0x20c>)
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003aac:	4b55      	ldr	r3, [pc, #340]	; (8003c04 <turning_table2+0x20c>)
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ab4:	4b53      	ldr	r3, [pc, #332]	; (8003c04 <turning_table2+0x20c>)
 8003ab6:	f04f 0200 	mov.w	r2, #0
 8003aba:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003abc:	4b52      	ldr	r3, [pc, #328]	; (8003c08 <turning_table2+0x210>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ac2:	4b52      	ldr	r3, [pc, #328]	; (8003c0c <turning_table2+0x214>)
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003ac8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003acc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd0e      	ble.n	8003af4 <turning_table2+0xfc>
 8003ad6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003ada:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ade:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae6:	dd05      	ble.n	8003af4 <turning_table2+0xfc>
 8003ae8:	4b48      	ldr	r3, [pc, #288]	; (8003c0c <turning_table2+0x214>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	4a44      	ldr	r2, [pc, #272]	; (8003c00 <turning_table2+0x208>)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003af4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b00:	dd14      	ble.n	8003b2c <turning_table2+0x134>
 8003b02:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b06:	eef1 7a67 	vneg.f32	s15, s15
 8003b0a:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b0e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b16:	d509      	bpl.n	8003b2c <turning_table2+0x134>
 8003b18:	4b3c      	ldr	r3, [pc, #240]	; (8003c0c <turning_table2+0x214>)
 8003b1a:	2206      	movs	r2, #6
 8003b1c:	701a      	strb	r2, [r3, #0]
 8003b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b22:	eef1 7a67 	vneg.f32	s15, s15
 8003b26:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <turning_table2+0x208>)
 8003b28:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003b2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b38:	d514      	bpl.n	8003b64 <turning_table2+0x16c>
 8003b3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b3e:	eef1 7a67 	vneg.f32	s15, s15
 8003b42:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b4e:	dd09      	ble.n	8003b64 <turning_table2+0x16c>
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <turning_table2+0x214>)
 8003b52:	2205      	movs	r2, #5
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	4b28      	ldr	r3, [pc, #160]	; (8003c00 <turning_table2+0x208>)
 8003b60:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b70:	d50e      	bpl.n	8003b90 <turning_table2+0x198>
 8003b72:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b76:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d505      	bpl.n	8003b90 <turning_table2+0x198>
 8003b84:	4b21      	ldr	r3, [pc, #132]	; (8003c0c <turning_table2+0x214>)
 8003b86:	2206      	movs	r2, #6
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	4a1d      	ldr	r2, [pc, #116]	; (8003c00 <turning_table2+0x208>)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003b90:	4b1f      	ldr	r3, [pc, #124]	; (8003c10 <turning_table2+0x218>)
 8003b92:	2202      	movs	r2, #2
 8003b94:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003b96:	f003 feef 	bl	8007978 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003b9a:	bf00      	nop
 8003b9c:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <turning_table2+0x214>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b04      	cmp	r3, #4
 8003ba4:	d1fa      	bne.n	8003b9c <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003ba6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003baa:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bb2:	d106      	bne.n	8003bc2 <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003bb4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003bb8:	f004 f9b6 	bl	8007f28 <wait_ms_NoReset>
		modeacc = 0;
 8003bbc:	4b14      	ldr	r3, [pc, #80]	; (8003c10 <turning_table2+0x218>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003bc2:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <turning_table2+0x21c>)
 8003bc4:	ed93 7a00 	vldr	s14, [r3]
 8003bc8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bd0:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <turning_table2+0x21c>)
 8003bd2:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003bd6:	f003 fedd 	bl	8007994 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003bda:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <turning_table2+0x220>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a0f      	ldr	r2, [pc, #60]	; (8003c1c <turning_table2+0x224>)
 8003be0:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <turning_table2+0x228>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <turning_table2+0x22c>)
 8003be8:	6013      	str	r3, [r2, #0]

	return turning.velocity;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <turning_table2+0x208>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
}
 8003bf2:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000504 	.word	0x20000504
 8003c00:	200004e4 	.word	0x200004e4
 8003c04:	200004d8 	.word	0x200004d8
 8003c08:	20000805 	.word	0x20000805
 8003c0c:	20000804 	.word	0x20000804
 8003c10:	20000528 	.word	0x20000528
 8003c14:	20000264 	.word	0x20000264
 8003c18:	20000228 	.word	0x20000228
 8003c1c:	20000258 	.word	0x20000258
 8003c20:	2000022c 	.word	0x2000022c
 8003c24:	2000025c 	.word	0x2000025c

08003c28 <slalom_table2>:



float slalom_table2(float input_center_velocity,float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b088      	sub	sp, #32
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	ed87 0a05 	vstr	s0, [r7, #20]
 8003c32:	edc7 0a04 	vstr	s1, [r7, #16]
 8003c36:	ed87 1a03 	vstr	s2, [r7, #12]
 8003c3a:	edc7 1a02 	vstr	s3, [r7, #8]
 8003c3e:	ed87 2a01 	vstr	s4, [r7, #4]
 8003c42:	edc7 2a00 	vstr	s5, [r7]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003c46:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c4a:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c52:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c56:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c5a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c5e:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c62:	ed97 7a00 	vldr	s14, [r7]
 8003c66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c6a:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c6e:	edd7 7a00 	vldr	s15, [r7]
 8003c72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d505      	bpl.n	8003c88 <slalom_table2+0x60>
 8003c7c:	edd7 7a00 	vldr	s15, [r7]
 8003c80:	eef1 7a67 	vneg.f32	s15, s15
 8003c84:	edc7 7a00 	vstr	s15, [r7]

	Trapezoid_turning.displacement = input_displacement;
 8003c88:	4a5e      	ldr	r2, [pc, #376]	; (8003e04 <slalom_table2+0x1dc>)
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c8e:	4a5d      	ldr	r2, [pc, #372]	; (8003e04 <slalom_table2+0x1dc>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c94:	4a5b      	ldr	r2, [pc, #364]	; (8003e04 <slalom_table2+0x1dc>)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c9a:	4a5a      	ldr	r2, [pc, #360]	; (8003e04 <slalom_table2+0x1dc>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003ca0:	4a58      	ldr	r2, [pc, #352]	; (8003e04 <slalom_table2+0x1dc>)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003ca6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003caa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cb2:	db03      	blt.n	8003cbc <slalom_table2+0x94>
 8003cb4:	4a54      	ldr	r2, [pc, #336]	; (8003e08 <slalom_table2+0x1e0>)
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	6053      	str	r3, [r2, #4]
 8003cba:	e006      	b.n	8003cca <slalom_table2+0xa2>
	}else{turning.acceleration = -input_acceleration;}
 8003cbc:	edd7 7a00 	vldr	s15, [r7]
 8003cc0:	eef1 7a67 	vneg.f32	s15, s15
 8003cc4:	4b50      	ldr	r3, [pc, #320]	; (8003e08 <slalom_table2+0x1e0>)
 8003cc6:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003cca:	4a4f      	ldr	r2, [pc, #316]	; (8003e08 <slalom_table2+0x1e0>)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003cd0:	4b4d      	ldr	r3, [pc, #308]	; (8003e08 <slalom_table2+0x1e0>)
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003cd8:	4a4c      	ldr	r2, [pc, #304]	; (8003e0c <slalom_table2+0x1e4>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003cde:	4b4b      	ldr	r3, [pc, #300]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ce6:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <slalom_table2+0x1e4>)
 8003ce8:	f04f 0200 	mov.w	r2, #0
 8003cec:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003cee:	4b48      	ldr	r3, [pc, #288]	; (8003e10 <slalom_table2+0x1e8>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <slalom_table2+0x1ec>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cfa:	edd7 7a04 	vldr	s15, [r7, #16]
 8003cfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d06:	dd0e      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d08:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d18:	dd05      	ble.n	8003d26 <slalom_table2+0xfe>
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <slalom_table2+0x1ec>)
 8003d1c:	2205      	movs	r2, #5
 8003d1e:	701a      	strb	r2, [r3, #0]
 8003d20:	4a39      	ldr	r2, [pc, #228]	; (8003e08 <slalom_table2+0x1e0>)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003d26:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d32:	dd14      	ble.n	8003d5e <slalom_table2+0x136>
 8003d34:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d509      	bpl.n	8003d5e <slalom_table2+0x136>
 8003d4a:	4b32      	ldr	r3, [pc, #200]	; (8003e14 <slalom_table2+0x1ec>)
 8003d4c:	2206      	movs	r2, #6
 8003d4e:	701a      	strb	r2, [r3, #0]
 8003d50:	edd7 7a00 	vldr	s15, [r7]
 8003d54:	eef1 7a67 	vneg.f32	s15, s15
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <slalom_table2+0x1e0>)
 8003d5a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d5e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6a:	d514      	bpl.n	8003d96 <slalom_table2+0x16e>
 8003d6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d70:	eef1 7a67 	vneg.f32	s15, s15
 8003d74:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d80:	dd09      	ble.n	8003d96 <slalom_table2+0x16e>
 8003d82:	4b24      	ldr	r3, [pc, #144]	; (8003e14 <slalom_table2+0x1ec>)
 8003d84:	2205      	movs	r2, #5
 8003d86:	701a      	strb	r2, [r3, #0]
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b1d      	ldr	r3, [pc, #116]	; (8003e08 <slalom_table2+0x1e0>)
 8003d92:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da2:	d50e      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003da4:	ed97 7a07 	vldr	s14, [r7, #28]
 8003da8:	edd7 7a04 	vldr	s15, [r7, #16]
 8003dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	d505      	bpl.n	8003dc2 <slalom_table2+0x19a>
 8003db6:	4b17      	ldr	r3, [pc, #92]	; (8003e14 <slalom_table2+0x1ec>)
 8003db8:	2206      	movs	r2, #6
 8003dba:	701a      	strb	r2, [r3, #0]
 8003dbc:	4a12      	ldr	r2, [pc, #72]	; (8003e08 <slalom_table2+0x1e0>)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	6053      	str	r3, [r2, #4]
	modeacc = 4;
 8003dc2:	4b15      	ldr	r3, [pc, #84]	; (8003e18 <slalom_table2+0x1f0>)
 8003dc4:	2204      	movs	r2, #4
 8003dc6:	701a      	strb	r2, [r3, #0]
//	enc.sigma_error=0;
	pl_DriveMotor_start();
 8003dc8:	f003 fdd6 	bl	8007978 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003dcc:	bf00      	nop
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <slalom_table2+0x1ec>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d1fa      	bne.n	8003dce <slalom_table2+0x1a6>

	}
//	modeacc = 0;
//	enc.sigma_error=0;

	angle = angle - input_displacement;
 8003dd8:	4b10      	ldr	r3, [pc, #64]	; (8003e1c <slalom_table2+0x1f4>)
 8003dda:	ed93 7a00 	vldr	s14, [r3]
 8003dde:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <slalom_table2+0x1f4>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dec:	f003 fdd2 	bl	8007994 <pl_DriveMotor_stop>

	return turning.velocity;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <slalom_table2+0x1e0>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	ee07 3a90 	vmov	s15, r3
}
 8003df8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfc:	3720      	adds	r7, #32
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000504 	.word	0x20000504
 8003e08:	200004e4 	.word	0x200004e4
 8003e0c:	200004d8 	.word	0x200004d8
 8003e10:	20000805 	.word	0x20000805
 8003e14:	20000804 	.word	0x20000804
 8003e18:	20000528 	.word	0x20000528
 8003e1c:	20000264 	.word	0x20000264

08003e20 <no_angle>:

void no_angle(void){
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003e24:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <no_angle+0x88>)
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	; (8003ea8 <no_angle+0x88>)
 8003e2e:	f04f 0200 	mov.w	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e34:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <no_angle+0x88>)
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e3c:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <no_angle+0x8c>)
 8003e3e:	f04f 0200 	mov.w	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <no_angle+0x8c>)
 8003e46:	f04f 0200 	mov.w	r2, #0
 8003e4a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <no_angle+0x8c>)
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e54:	4b16      	ldr	r3, [pc, #88]	; (8003eb0 <no_angle+0x90>)
 8003e56:	2203      	movs	r2, #3
 8003e58:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e5a:	f003 fd8d 	bl	8007978 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e5e:	e002      	b.n	8003e66 <no_angle+0x46>
		HAL_Delay(1);
 8003e60:	2001      	movs	r0, #1
 8003e62:	f014 febf 	bl	8018be4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <no_angle+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e6e:	ddf7      	ble.n	8003e60 <no_angle+0x40>
 8003e70:	4b10      	ldr	r3, [pc, #64]	; (8003eb4 <no_angle+0x94>)
 8003e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e7a:	ddf1      	ble.n	8003e60 <no_angle+0x40>
 8003e7c:	4b0d      	ldr	r3, [pc, #52]	; (8003eb4 <no_angle+0x94>)
 8003e7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e82:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e86:	ddeb      	ble.n	8003e60 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e88:	4b09      	ldr	r3, [pc, #36]	; (8003eb0 <no_angle+0x90>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e8e:	f003 fd81 	bl	8007994 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 8003e92:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <no_angle+0x98>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a09      	ldr	r2, [pc, #36]	; (8003ebc <no_angle+0x9c>)
 8003e98:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8003e9a:	4b09      	ldr	r3, [pc, #36]	; (8003ec0 <no_angle+0xa0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a09      	ldr	r2, [pc, #36]	; (8003ec4 <no_angle+0xa4>)
 8003ea0:	6013      	str	r3, [r2, #0]

}
 8003ea2:	bf00      	nop
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	200004e4 	.word	0x200004e4
 8003eac:	200004d8 	.word	0x200004d8
 8003eb0:	20000528 	.word	0x20000528
 8003eb4:	200002b8 	.word	0x200002b8
 8003eb8:	20000228 	.word	0x20000228
 8003ebc:	20000258 	.word	0x20000258
 8003ec0:	2000022c 	.word	0x2000022c
 8003ec4:	2000025c 	.word	0x2000025c

08003ec8 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ed2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003ed6:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003ee0:	4a3b      	ldr	r2, [pc, #236]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003ee6:	4a3a      	ldr	r2, [pc, #232]	; (8003fd0 <mollifier_slalom_table+0x108>)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003eec:	4b39      	ldr	r3, [pc, #228]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003ef4:	4b37      	ldr	r3, [pc, #220]	; (8003fd4 <mollifier_slalom_table+0x10c>)
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003efc:	4a36      	ldr	r2, [pc, #216]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003f02:	4b35      	ldr	r3, [pc, #212]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003f0a:	4b33      	ldr	r3, [pc, #204]	; (8003fd8 <mollifier_slalom_table+0x110>)
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003f12:	4b32      	ldr	r3, [pc, #200]	; (8003fdc <mollifier_slalom_table+0x114>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003f18:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f22:	eef0 7ae7 	vabs.f32	s15, s15
 8003f26:	ee17 0a90 	vmov	r0, s15
 8003f2a:	f7fc fb35 	bl	8000598 <__aeabi_f2d>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4614      	mov	r4, r2
 8003f34:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003f38:	a321      	add	r3, pc, #132	; (adr r3, 8003fc0 <mollifier_slalom_table+0xf8>)
 8003f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4629      	mov	r1, r5
 8003f42:	f7fc fcab 	bl	800089c <__aeabi_ddiv>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4610      	mov	r0, r2
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	a31e      	add	r3, pc, #120	; (adr r3, 8003fc8 <mollifier_slalom_table+0x100>)
 8003f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f54:	f7fc fb78 	bl	8000648 <__aeabi_dmul>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4614      	mov	r4, r2
 8003f5e:	461d      	mov	r5, r3
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fc fb19 	bl	8000598 <__aeabi_f2d>
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc fc95 	bl	800089c <__aeabi_ddiv>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	f7fc fe3d 	bl	8000bf8 <__aeabi_d2f>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a18      	ldr	r2, [pc, #96]	; (8003fe4 <mollifier_slalom_table+0x11c>)
 8003f82:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f84:	4b18      	ldr	r3, [pc, #96]	; (8003fe8 <mollifier_slalom_table+0x120>)
 8003f86:	2206      	movs	r2, #6
 8003f88:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f8a:	f003 fcf5 	bl	8007978 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f8e:	bf00      	nop
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <mollifier_slalom_table+0x118>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d1fa      	bne.n	8003f90 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f9a:	4b14      	ldr	r3, [pc, #80]	; (8003fec <mollifier_slalom_table+0x124>)
 8003f9c:	ed93 7a00 	vldr	s14, [r3]
 8003fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa8:	4b10      	ldr	r3, [pc, #64]	; (8003fec <mollifier_slalom_table+0x124>)
 8003faa:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003fae:	f003 fcf1 	bl	8007994 <pl_DriveMotor_stop>

}
 8003fb2:	bf00      	nop
 8003fb4:	3710      	adds	r7, #16
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bdb0      	pop	{r4, r5, r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	f3af 8000 	nop.w
 8003fc0:	f9db22d1 	.word	0xf9db22d1
 8003fc4:	3fdc6a7e 	.word	0x3fdc6a7e
 8003fc8:	362cef38 	.word	0x362cef38
 8003fcc:	3fd78b56 	.word	0x3fd78b56
 8003fd0:	20000518 	.word	0x20000518
 8003fd4:	200004e4 	.word	0x200004e4
 8003fd8:	200004d8 	.word	0x200004d8
 8003fdc:	20000805 	.word	0x20000805
 8003fe0:	20000804 	.word	0x20000804
 8003fe4:	20000800 	.word	0x20000800
 8003fe8:	20000528 	.word	0x20000528
 8003fec:	20000264 	.word	0x20000264

08003ff0 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <no_frontwall_straight+0x70>)
 8003ff6:	f04f 0200 	mov.w	r2, #0
 8003ffa:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003ffc:	4b18      	ldr	r3, [pc, #96]	; (8004060 <no_frontwall_straight+0x70>)
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8004004:	4b16      	ldr	r3, [pc, #88]	; (8004060 <no_frontwall_straight+0x70>)
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 800400c:	4b15      	ldr	r3, [pc, #84]	; (8004064 <no_frontwall_straight+0x74>)
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <no_frontwall_straight+0x74>)
 8004016:	f04f 0200 	mov.w	r2, #0
 800401a:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 800401c:	4b11      	ldr	r3, [pc, #68]	; (8004064 <no_frontwall_straight+0x74>)
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8004024:	4b10      	ldr	r3, [pc, #64]	; (8004068 <no_frontwall_straight+0x78>)
 8004026:	2201      	movs	r2, #1
 8004028:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 800402a:	4b10      	ldr	r3, [pc, #64]	; (800406c <no_frontwall_straight+0x7c>)
 800402c:	2205      	movs	r2, #5
 800402e:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004030:	f003 fca2 	bl	8007978 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8004034:	2096      	movs	r0, #150	; 0x96
 8004036:	f003 ff77 	bl	8007f28 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <no_frontwall_straight+0x78>)
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <no_frontwall_straight+0x7c>)
 8004042:	2200      	movs	r2, #0
 8004044:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8004046:	f003 fca5 	bl	8007994 <pl_DriveMotor_stop>
	fusion_speedL = E_speedL;
 800404a:	4b09      	ldr	r3, [pc, #36]	; (8004070 <no_frontwall_straight+0x80>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a09      	ldr	r2, [pc, #36]	; (8004074 <no_frontwall_straight+0x84>)
 8004050:	6013      	str	r3, [r2, #0]
	fusion_speedR = E_speedR;
 8004052:	4b09      	ldr	r3, [pc, #36]	; (8004078 <no_frontwall_straight+0x88>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a09      	ldr	r2, [pc, #36]	; (800407c <no_frontwall_straight+0x8c>)
 8004058:	6013      	str	r3, [r2, #0]

}
 800405a:	bf00      	nop
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	200004e4 	.word	0x200004e4
 8004064:	200004d8 	.word	0x200004d8
 8004068:	20000591 	.word	0x20000591
 800406c:	20000528 	.word	0x20000528
 8004070:	20000228 	.word	0x20000228
 8004074:	20000258 	.word	0x20000258
 8004078:	2000022c 	.word	0x2000022c
 800407c:	2000025c 	.word	0x2000025c

08004080 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 8004080:	b5b0      	push	{r4, r5, r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6178      	str	r0, [r7, #20]
 8004088:	ed87 0a04 	vstr	s0, [r7, #16]
 800408c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	ed87 1a01 	vstr	s2, [r7, #4]
 8004096:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 800409a:	edd7 7a04 	vldr	s15, [r7, #16]
 800409e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a6:	db7c      	blt.n	80041a2 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80040a8:	68f8      	ldr	r0, [r7, #12]
 80040aa:	f7fc fa75 	bl	8000598 <__aeabi_f2d>
 80040ae:	a3c8      	add	r3, pc, #800	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f7fc fac8 	bl	8000648 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4610      	mov	r0, r2
 80040be:	4619      	mov	r1, r3
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	4bc6      	ldr	r3, [pc, #792]	; (80043e0 <feedforward_const_accel+0x360>)
 80040c6:	f7fc fbe9 	bl	800089c <__aeabi_ddiv>
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	4610      	mov	r0, r2
 80040d0:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80040d2:	a3b5      	add	r3, pc, #724	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f7fc fbe0 	bl	800089c <__aeabi_ddiv>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4610      	mov	r0, r2
 80040e2:	4619      	mov	r1, r3
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80040ec:	f7fc fbd6 	bl	800089c <__aeabi_ddiv>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	a3ad      	add	r3, pc, #692	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc f8ed 	bl	80002dc <__adddf3>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	a3ab      	add	r3, pc, #684	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa9a 	bl	8000648 <__aeabi_dmul>
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4610      	mov	r0, r2
 800411a:	4619      	mov	r1, r3
 800411c:	a3a8      	add	r3, pc, #672	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc fbbb 	bl	800089c <__aeabi_ddiv>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4614      	mov	r4, r2
 800412c:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800412e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004132:	eddf 6aac 	vldr	s13, [pc, #688]	; 80043e4 <feedforward_const_accel+0x364>
 8004136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413a:	ed9f 7aab 	vldr	s14, [pc, #684]	; 80043e8 <feedforward_const_accel+0x368>
 800413e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004142:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004146:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800414a:	ee16 0a90 	vmov	r0, s13
 800414e:	f7fc fa23 	bl	8000598 <__aeabi_f2d>
 8004152:	a39d      	add	r3, pc, #628	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f7fc fa76 	bl	8000648 <__aeabi_dmul>
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	4610      	mov	r0, r2
 8004162:	4619      	mov	r1, r3
 8004164:	a390      	add	r3, pc, #576	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416a:	f7fc fb97 	bl	800089c <__aeabi_ddiv>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4610      	mov	r0, r2
 8004174:	4619      	mov	r1, r3
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800417e:	f7fc fb8d 	bl	800089c <__aeabi_ddiv>
 8004182:	4602      	mov	r2, r0
 8004184:	460b      	mov	r3, r1
 8004186:	4620      	mov	r0, r4
 8004188:	4629      	mov	r1, r5
 800418a:	f7fc f8a7 	bl	80002dc <__adddf3>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4610      	mov	r0, r2
 8004194:	4619      	mov	r1, r3
 8004196:	f7fc fd2f 	bl	8000bf8 <__aeabi_d2f>
 800419a:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e07b      	b.n	800429a <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7fc f9f8 	bl	8000598 <__aeabi_f2d>
 80041a8:	a389      	add	r3, pc, #548	; (adr r3, 80043d0 <feedforward_const_accel+0x350>)
 80041aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ae:	f7fc fa4b 	bl	8000648 <__aeabi_dmul>
 80041b2:	4602      	mov	r2, r0
 80041b4:	460b      	mov	r3, r1
 80041b6:	4610      	mov	r0, r2
 80041b8:	4619      	mov	r1, r3
 80041ba:	f04f 0200 	mov.w	r2, #0
 80041be:	4b88      	ldr	r3, [pc, #544]	; (80043e0 <feedforward_const_accel+0x360>)
 80041c0:	f7fc fb6c 	bl	800089c <__aeabi_ddiv>
 80041c4:	4602      	mov	r2, r0
 80041c6:	460b      	mov	r3, r1
 80041c8:	4610      	mov	r0, r2
 80041ca:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80041cc:	a376      	add	r3, pc, #472	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f7fc fb63 	bl	800089c <__aeabi_ddiv>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80041e6:	f7fc fb59 	bl	800089c <__aeabi_ddiv>
 80041ea:	4602      	mov	r2, r0
 80041ec:	460b      	mov	r3, r1
 80041ee:	4610      	mov	r0, r2
 80041f0:	4619      	mov	r1, r3
 80041f2:	a36f      	add	r3, pc, #444	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80041f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f8:	f7fc f86e 	bl	80002d8 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4610      	mov	r0, r2
 8004202:	4619      	mov	r1, r3
 8004204:	a36c      	add	r3, pc, #432	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f7fc fa1d 	bl	8000648 <__aeabi_dmul>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4610      	mov	r0, r2
 8004214:	4619      	mov	r1, r3
 8004216:	a36a      	add	r3, pc, #424	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f7fc fb3e 	bl	800089c <__aeabi_ddiv>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4614      	mov	r4, r2
 8004226:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004228:	ed97 7a04 	vldr	s14, [r7, #16]
 800422c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 80043e4 <feedforward_const_accel+0x364>
 8004230:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004234:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80043e8 <feedforward_const_accel+0x368>
 8004238:	ee67 7a87 	vmul.f32	s15, s15, s14
 800423c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004240:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004244:	ee16 0a90 	vmov	r0, s13
 8004248:	f7fc f9a6 	bl	8000598 <__aeabi_f2d>
 800424c:	a35e      	add	r3, pc, #376	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f9f9 	bl	8000648 <__aeabi_dmul>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	a352      	add	r3, pc, #328	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fc fb1a 	bl	800089c <__aeabi_ddiv>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4610      	mov	r0, r2
 800426e:	4619      	mov	r1, r3
 8004270:	f04f 0200 	mov.w	r2, #0
 8004274:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004278:	f7fc fb10 	bl	800089c <__aeabi_ddiv>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f82a 	bl	80002dc <__adddf3>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	4610      	mov	r0, r2
 800428e:	4619      	mov	r1, r3
 8004290:	f7fc fcb2 	bl	8000bf8 <__aeabi_d2f>
 8004294:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 800429a:	edd7 7a01 	vldr	s15, [r7, #4]
 800429e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	f2c0 80a1 	blt.w	80043ec <feedforward_const_accel+0x36c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f7fc f974 	bl	8000598 <__aeabi_f2d>
 80042b0:	a349      	add	r3, pc, #292	; (adr r3, 80043d8 <feedforward_const_accel+0x358>)
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	f7fc f9c7 	bl	8000648 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4610      	mov	r0, r2
 80042c0:	4619      	mov	r1, r3
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	4b46      	ldr	r3, [pc, #280]	; (80043e0 <feedforward_const_accel+0x360>)
 80042c8:	f7fc fae8 	bl	800089c <__aeabi_ddiv>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 80042d4:	a334      	add	r3, pc, #208	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	f7fc fadf 	bl	800089c <__aeabi_ddiv>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4610      	mov	r0, r2
 80042e4:	4619      	mov	r1, r3
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80042ee:	f7fc fad5 	bl	800089c <__aeabi_ddiv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	a32d      	add	r3, pc, #180	; (adr r3, 80043b0 <feedforward_const_accel+0x330>)
 80042fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004300:	f7fb ffec 	bl	80002dc <__adddf3>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	a32a      	add	r3, pc, #168	; (adr r3, 80043b8 <feedforward_const_accel+0x338>)
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f7fc f999 	bl	8000648 <__aeabi_dmul>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	a328      	add	r3, pc, #160	; (adr r3, 80043c0 <feedforward_const_accel+0x340>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fc faba 	bl	800089c <__aeabi_ddiv>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4614      	mov	r4, r2
 800432e:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004330:	ed97 7a01 	vldr	s14, [r7, #4]
 8004334:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80043e4 <feedforward_const_accel+0x364>
 8004338:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800433c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80043e8 <feedforward_const_accel+0x368>
 8004340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004344:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8004348:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800434c:	ee16 0a90 	vmov	r0, s13
 8004350:	f7fc f922 	bl	8000598 <__aeabi_f2d>
 8004354:	a31c      	add	r3, pc, #112	; (adr r3, 80043c8 <feedforward_const_accel+0x348>)
 8004356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435a:	f7fc f975 	bl	8000648 <__aeabi_dmul>
 800435e:	4602      	mov	r2, r0
 8004360:	460b      	mov	r3, r1
 8004362:	4610      	mov	r0, r2
 8004364:	4619      	mov	r1, r3
 8004366:	a310      	add	r3, pc, #64	; (adr r3, 80043a8 <feedforward_const_accel+0x328>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	f7fc fa96 	bl	800089c <__aeabi_ddiv>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4610      	mov	r0, r2
 8004376:	4619      	mov	r1, r3
 8004378:	f04f 0200 	mov.w	r2, #0
 800437c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004380:	f7fc fa8c 	bl	800089c <__aeabi_ddiv>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	4620      	mov	r0, r4
 800438a:	4629      	mov	r1, r5
 800438c:	f7fb ffa6 	bl	80002dc <__adddf3>
 8004390:	4602      	mov	r2, r0
 8004392:	460b      	mov	r3, r1
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	f7fc fc2e 	bl	8000bf8 <__aeabi_d2f>
 800439c:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	601a      	str	r2, [r3, #0]
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
	}
	//*feedforward_straight=0;
	//*feedforward_turning =0;

}
 80043a2:	e09f      	b.n	80044e4 <feedforward_const_accel+0x464>
 80043a4:	f3af 8000 	nop.w
 80043a8:	ca619631 	.word	0xca619631
 80043ac:	3f9b3322 	.word	0x3f9b3322
 80043b0:	eb1c432d 	.word	0xeb1c432d
 80043b4:	3f1a36e2 	.word	0x3f1a36e2
 80043b8:	51eb851f 	.word	0x51eb851f
 80043bc:	3ff11eb8 	.word	0x3ff11eb8
 80043c0:	b7952d23 	.word	0xb7952d23
 80043c4:	3f569c23 	.word	0x3f569c23
 80043c8:	761b0f50 	.word	0x761b0f50
 80043cc:	3f66bf29 	.word	0x3f66bf29
 80043d0:	7df8b79b 	.word	0x7df8b79b
 80043d4:	3ed5fdfc 	.word	0x3ed5fdfc
 80043d8:	a4a8cfa6 	.word	0xa4a8cfa6
 80043dc:	3ebae643 	.word	0x3ebae643
 80043e0:	408f4000 	.word	0x408f4000
 80043e4:	447a0000 	.word	0x447a0000
 80043e8:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80043ec:	6838      	ldr	r0, [r7, #0]
 80043ee:	f7fc f8d3 	bl	8000598 <__aeabi_f2d>
 80043f2:	a34c      	add	r3, pc, #304	; (adr r3, 8004524 <feedforward_const_accel+0x4a4>)
 80043f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f8:	f7fc f926 	bl	8000648 <__aeabi_dmul>
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	4b43      	ldr	r3, [pc, #268]	; (8004518 <feedforward_const_accel+0x498>)
 800440a:	f7fc fa47 	bl	800089c <__aeabi_ddiv>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4610      	mov	r0, r2
 8004414:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 8004416:	a336      	add	r3, pc, #216	; (adr r3, 80044f0 <feedforward_const_accel+0x470>)
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f7fc fa3e 	bl	800089c <__aeabi_ddiv>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4610      	mov	r0, r2
 8004426:	4619      	mov	r1, r3
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004430:	f7fc fa34 	bl	800089c <__aeabi_ddiv>
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	a32e      	add	r3, pc, #184	; (adr r3, 80044f8 <feedforward_const_accel+0x478>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fb ff49 	bl	80002d8 <__aeabi_dsub>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	a32c      	add	r3, pc, #176	; (adr r3, 8004500 <feedforward_const_accel+0x480>)
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f7fc f8f8 	bl	8000648 <__aeabi_dmul>
 8004458:	4602      	mov	r2, r0
 800445a:	460b      	mov	r3, r1
 800445c:	4610      	mov	r0, r2
 800445e:	4619      	mov	r1, r3
 8004460:	a329      	add	r3, pc, #164	; (adr r3, 8004508 <feedforward_const_accel+0x488>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	f7fc fa19 	bl	800089c <__aeabi_ddiv>
 800446a:	4602      	mov	r2, r0
 800446c:	460b      	mov	r3, r1
 800446e:	4614      	mov	r4, r2
 8004470:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004472:	ed97 7a01 	vldr	s14, [r7, #4]
 8004476:	eddf 6a29 	vldr	s13, [pc, #164]	; 800451c <feedforward_const_accel+0x49c>
 800447a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800447e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004520 <feedforward_const_accel+0x4a0>
 8004482:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004486:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800448a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800448e:	ee16 0a90 	vmov	r0, s13
 8004492:	f7fc f881 	bl	8000598 <__aeabi_f2d>
 8004496:	a31e      	add	r3, pc, #120	; (adr r3, 8004510 <feedforward_const_accel+0x490>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f8d4 	bl	8000648 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	a311      	add	r3, pc, #68	; (adr r3, 80044f0 <feedforward_const_accel+0x470>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	f7fc f9f5 	bl	800089c <__aeabi_ddiv>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4610      	mov	r0, r2
 80044b8:	4619      	mov	r1, r3
 80044ba:	f04f 0200 	mov.w	r2, #0
 80044be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c2:	f7fc f9eb 	bl	800089c <__aeabi_ddiv>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fb ff05 	bl	80002dc <__adddf3>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	4610      	mov	r0, r2
 80044d8:	4619      	mov	r1, r3
 80044da:	f7fc fb8d 	bl	8000bf8 <__aeabi_d2f>
 80044de:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	601a      	str	r2, [r3, #0]
}
 80044e4:	bf00      	nop
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bdb0      	pop	{r4, r5, r7, pc}
 80044ec:	f3af 8000 	nop.w
 80044f0:	ca619631 	.word	0xca619631
 80044f4:	3f9b3322 	.word	0x3f9b3322
 80044f8:	eb1c432d 	.word	0xeb1c432d
 80044fc:	3f1a36e2 	.word	0x3f1a36e2
 8004500:	51eb851f 	.word	0x51eb851f
 8004504:	3ff11eb8 	.word	0x3ff11eb8
 8004508:	b7952d23 	.word	0xb7952d23
 800450c:	3f569c23 	.word	0x3f569c23
 8004510:	761b0f50 	.word	0x761b0f50
 8004514:	3f66bf29 	.word	0x3f66bf29
 8004518:	408f4000 	.word	0x408f4000
 800451c:	447a0000 	.word	0x447a0000
 8004520:	421c0000 	.word	0x421c0000
 8004524:	a4a8cfa6 	.word	0xa4a8cfa6
 8004528:	3ebae643 	.word	0x3ebae643

0800452c <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 8004530:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <PID_Init+0x44>)
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <PID_Init+0x48>)
 8004534:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 8004536:	4b10      	ldr	r3, [pc, #64]	; (8004578 <PID_Init+0x4c>)
 8004538:	4a10      	ldr	r2, [pc, #64]	; (800457c <PID_Init+0x50>)
 800453a:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 800453c:	4b10      	ldr	r3, [pc, #64]	; (8004580 <PID_Init+0x54>)
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
	Ktp = 1.6; //295//P項の制御量旋回*****************************************************
 8004544:	4b0f      	ldr	r3, [pc, #60]	; (8004584 <PID_Init+0x58>)
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <PID_Init+0x5c>)
 8004548:	601a      	str	r2, [r3, #0]
	Kti = 0.06; //1//.6//I項の制御量旋回*****************************************************
 800454a:	4b10      	ldr	r3, [pc, #64]	; (800458c <PID_Init+0x60>)
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <PID_Init+0x64>)
 800454e:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004550:	4b10      	ldr	r3, [pc, #64]	; (8004594 <PID_Init+0x68>)
 8004552:	4a11      	ldr	r2, [pc, #68]	; (8004598 <PID_Init+0x6c>)
 8004554:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <PID_Init+0x70>)
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 800455e:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <PID_Init+0x74>)
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	609a      	str	r2, [r3, #8]

}
 8004566:	bf00      	nop
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	20000554 	.word	0x20000554
 8004574:	40466666 	.word	0x40466666
 8004578:	20000558 	.word	0x20000558
 800457c:	3da3d70a 	.word	0x3da3d70a
 8004580:	2000055c 	.word	0x2000055c
 8004584:	20000560 	.word	0x20000560
 8004588:	3fcccccd 	.word	0x3fcccccd
 800458c:	20000564 	.word	0x20000564
 8004590:	3d75c28f 	.word	0x3d75c28f
 8004594:	20000568 	.word	0x20000568
 8004598:	3b03126f 	.word	0x3b03126f
 800459c:	20000534 	.word	0x20000534
 80045a0:	20000544 	.word	0x20000544

080045a4 <clear_Ierror>:

void clear_Ierror(void) {
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <clear_Ierror+0x20>)
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <clear_Ierror+0x24>)
 80045b2:	f04f 0200 	mov.w	r2, #0
 80045b6:	609a      	str	r2, [r3, #8]
}
 80045b8:	bf00      	nop
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	20000534 	.word	0x20000534
 80045c8:	20000544 	.word	0x20000544

080045cc <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80045da:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	613b      	str	r3, [r7, #16]
	if(highspeed_mode == 1){
 80045ea:	4b80      	ldr	r3, [pc, #512]	; (80047ec <EncoderGyro_PID+0x220>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d111      	bne.n	8004616 <EncoderGyro_PID+0x4a>
		Ksp = 3.7; //3//P項の制御量直進*****************************************************
 80045f2:	4b7f      	ldr	r3, [pc, #508]	; (80047f0 <EncoderGyro_PID+0x224>)
 80045f4:	4a7f      	ldr	r2, [pc, #508]	; (80047f4 <EncoderGyro_PID+0x228>)
 80045f6:	601a      	str	r2, [r3, #0]
		Ksi = 0.09; //80//5//43//I項の制御量直進*****************************************************
 80045f8:	4b7f      	ldr	r3, [pc, #508]	; (80047f8 <EncoderGyro_PID+0x22c>)
 80045fa:	4a80      	ldr	r2, [pc, #512]	; (80047fc <EncoderGyro_PID+0x230>)
 80045fc:	601a      	str	r2, [r3, #0]
		Ksd = -0.007; //D項の制御量直進*****************************************************
 80045fe:	4b80      	ldr	r3, [pc, #512]	; (8004800 <EncoderGyro_PID+0x234>)
 8004600:	4a80      	ldr	r2, [pc, #512]	; (8004804 <EncoderGyro_PID+0x238>)
 8004602:	601a      	str	r2, [r3, #0]
		Ktp = 2.2; //295//P項の制御量旋回*****************************************************
 8004604:	4b80      	ldr	r3, [pc, #512]	; (8004808 <EncoderGyro_PID+0x23c>)
 8004606:	4a81      	ldr	r2, [pc, #516]	; (800480c <EncoderGyro_PID+0x240>)
 8004608:	601a      	str	r2, [r3, #0]
		Kti = 0.07; //1//.6//I項の制御量旋回*****************************************************
 800460a:	4b81      	ldr	r3, [pc, #516]	; (8004810 <EncoderGyro_PID+0x244>)
 800460c:	4a81      	ldr	r2, [pc, #516]	; (8004814 <EncoderGyro_PID+0x248>)
 800460e:	601a      	str	r2, [r3, #0]
		Ktd = -0.001; //205//D項の制御量旋回*****************************************************
 8004610:	4b81      	ldr	r3, [pc, #516]	; (8004818 <EncoderGyro_PID+0x24c>)
 8004612:	4a82      	ldr	r2, [pc, #520]	; (800481c <EncoderGyro_PID+0x250>)
 8004614:	601a      	str	r2, [r3, #0]
	}

	if (straight_velocity == 0) {
 8004616:	edd7 7a01 	vldr	s15, [r7, #4]
 800461a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	d101      	bne.n	8004628 <EncoderGyro_PID+0x5c>
		reset_speed();
 8004624:	f7fc fcf8 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100 && modeacc!=4) {
 8004628:	4b7d      	ldr	r3, [pc, #500]	; (8004820 <EncoderGyro_PID+0x254>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	eef0 7ae7 	vabs.f32	s15, s15
 8004632:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8004824 <EncoderGyro_PID+0x258>
 8004636:	eef4 7ac7 	vcmpe.f32	s15, s14
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d520      	bpl.n	8004682 <EncoderGyro_PID+0xb6>
 8004640:	edd7 7a01 	vldr	s15, [r7, #4]
 8004644:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004828 <EncoderGyro_PID+0x25c>
 8004648:	eef4 7ac7 	vcmpe.f32	s15, s14
 800464c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004650:	db17      	blt.n	8004682 <EncoderGyro_PID+0xb6>
 8004652:	4b76      	ldr	r3, [pc, #472]	; (800482c <EncoderGyro_PID+0x260>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d013      	beq.n	8004682 <EncoderGyro_PID+0xb6>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 800465a:	4b75      	ldr	r3, [pc, #468]	; (8004830 <EncoderGyro_PID+0x264>)
 800465c:	ed93 7a00 	vldr	s14, [r3]
 8004660:	4b74      	ldr	r3, [pc, #464]	; (8004834 <EncoderGyro_PID+0x268>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ee37 7a27 	vadd.f32	s14, s14, s15
 800466a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800466e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004672:	ed97 7a01 	vldr	s14, [r7, #4]
 8004676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800467a:	4b6f      	ldr	r3, [pc, #444]	; (8004838 <EncoderGyro_PID+0x26c>)
 800467c:	edc3 7a00 	vstr	s15, [r3]
 8004680:	e01a      	b.n	80046b8 <EncoderGyro_PID+0xec>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004682:	4b6e      	ldr	r3, [pc, #440]	; (800483c <EncoderGyro_PID+0x270>)
 8004684:	ed93 7a00 	vldr	s14, [r3]
 8004688:	4b6d      	ldr	r3, [pc, #436]	; (8004840 <EncoderGyro_PID+0x274>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004692:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004696:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800469a:	ed97 7a01 	vldr	s14, [r7, #4]
 800469e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a2:	4b65      	ldr	r3, [pc, #404]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046a4:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_lpf_speedL;
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <EncoderGyro_PID+0x278>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a61      	ldr	r2, [pc, #388]	; (8004834 <EncoderGyro_PID+0x268>)
 80046ae:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_lpf_speedR;
 80046b0:	4b65      	ldr	r3, [pc, #404]	; (8004848 <EncoderGyro_PID+0x27c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a5e      	ldr	r2, [pc, #376]	; (8004830 <EncoderGyro_PID+0x264>)
 80046b6:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 80046b8:	4b5f      	ldr	r3, [pc, #380]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	4b5e      	ldr	r3, [pc, #376]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80046c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046c8:	4b5b      	ldr	r3, [pc, #364]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046ca:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 80046ce:	4b5a      	ldr	r3, [pc, #360]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a59      	ldr	r2, [pc, #356]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046d4:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 80046d6:	4b58      	ldr	r3, [pc, #352]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046d8:	ed93 7a02 	vldr	s14, [r3, #8]
 80046dc:	4b56      	ldr	r3, [pc, #344]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046e6:	4b54      	ldr	r3, [pc, #336]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046e8:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 80046ec:	4b52      	ldr	r3, [pc, #328]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046ee:	ed93 7a00 	vldr	s14, [r3]
 80046f2:	4b3f      	ldr	r3, [pc, #252]	; (80047f0 <EncoderGyro_PID+0x224>)
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046fc:	4b4e      	ldr	r3, [pc, #312]	; (8004838 <EncoderGyro_PID+0x26c>)
 80046fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8004702:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <EncoderGyro_PID+0x22c>)
 8004704:	edd3 7a00 	vldr	s15, [r3]
 8004708:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800470c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004710:	4b49      	ldr	r3, [pc, #292]	; (8004838 <EncoderGyro_PID+0x26c>)
 8004712:	edd3 6a03 	vldr	s13, [r3, #12]
 8004716:	4b3a      	ldr	r3, [pc, #232]	; (8004800 <EncoderGyro_PID+0x234>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004724:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004728:	4b3d      	ldr	r3, [pc, #244]	; (8004820 <EncoderGyro_PID+0x254>)
 800472a:	edd3 7a00 	vldr	s15, [r3]
 800472e:	ed97 7a00 	vldr	s14, [r7]
 8004732:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004736:	4b45      	ldr	r3, [pc, #276]	; (800484c <EncoderGyro_PID+0x280>)
 8004738:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 800473c:	4b43      	ldr	r3, [pc, #268]	; (800484c <EncoderGyro_PID+0x280>)
 800473e:	ed93 7a00 	vldr	s14, [r3]
 8004742:	4b42      	ldr	r3, [pc, #264]	; (800484c <EncoderGyro_PID+0x280>)
 8004744:	edd3 7a01 	vldr	s15, [r3, #4]
 8004748:	ee77 7a67 	vsub.f32	s15, s14, s15
 800474c:	4b3f      	ldr	r3, [pc, #252]	; (800484c <EncoderGyro_PID+0x280>)
 800474e:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004752:	4b3e      	ldr	r3, [pc, #248]	; (800484c <EncoderGyro_PID+0x280>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a3d      	ldr	r2, [pc, #244]	; (800484c <EncoderGyro_PID+0x280>)
 8004758:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 800475a:	4b3c      	ldr	r3, [pc, #240]	; (800484c <EncoderGyro_PID+0x280>)
 800475c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004760:	4b3a      	ldr	r3, [pc, #232]	; (800484c <EncoderGyro_PID+0x280>)
 8004762:	edd3 7a00 	vldr	s15, [r3]
 8004766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800476a:	4b38      	ldr	r3, [pc, #224]	; (800484c <EncoderGyro_PID+0x280>)
 800476c:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <EncoderGyro_PID+0x280>)
 8004772:	ed93 7a00 	vldr	s14, [r3]
 8004776:	4b24      	ldr	r3, [pc, #144]	; (8004808 <EncoderGyro_PID+0x23c>)
 8004778:	edd3 7a00 	vldr	s15, [r3]
 800477c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004780:	4b32      	ldr	r3, [pc, #200]	; (800484c <EncoderGyro_PID+0x280>)
 8004782:	edd3 6a02 	vldr	s13, [r3, #8]
 8004786:	4b22      	ldr	r3, [pc, #136]	; (8004810 <EncoderGyro_PID+0x244>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004790:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004794:	4b2d      	ldr	r3, [pc, #180]	; (800484c <EncoderGyro_PID+0x280>)
 8004796:	edd3 6a03 	vldr	s13, [r3, #12]
 800479a:	4b1f      	ldr	r3, [pc, #124]	; (8004818 <EncoderGyro_PID+0x24c>)
 800479c:	edd3 7a00 	vldr	s15, [r3]
 80047a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 80047a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047a8:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 80047ac:	edd7 7a05 	vldr	s15, [r7, #20]
 80047b0:	eddf 6a27 	vldr	s13, [pc, #156]	; 8004850 <EncoderGyro_PID+0x284>
 80047b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047b8:	4b26      	ldr	r3, [pc, #152]	; (8004854 <EncoderGyro_PID+0x288>)
 80047ba:	edd3 7a00 	vldr	s15, [r3]
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 80047c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80047cc:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004850 <EncoderGyro_PID+0x284>
 80047d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80047d4:	4b1f      	ldr	r3, [pc, #124]	; (8004854 <EncoderGyro_PID+0x288>)
 80047d6:	edd3 7a00 	vldr	s15, [r3]
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	edc3 7a00 	vstr	s15, [r3]

}
 80047e4:	bf00      	nop
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	20000808 	.word	0x20000808
 80047f0:	20000554 	.word	0x20000554
 80047f4:	406ccccd 	.word	0x406ccccd
 80047f8:	20000558 	.word	0x20000558
 80047fc:	3db851ec 	.word	0x3db851ec
 8004800:	2000055c 	.word	0x2000055c
 8004804:	bbe56042 	.word	0xbbe56042
 8004808:	20000560 	.word	0x20000560
 800480c:	400ccccd 	.word	0x400ccccd
 8004810:	20000564 	.word	0x20000564
 8004814:	3d8f5c29 	.word	0x3d8f5c29
 8004818:	20000568 	.word	0x20000568
 800481c:	ba83126f 	.word	0xba83126f
 8004820:	20000268 	.word	0x20000268
 8004824:	42f00000 	.word	0x42f00000
 8004828:	42c80000 	.word	0x42c80000
 800482c:	20000528 	.word	0x20000528
 8004830:	2000025c 	.word	0x2000025c
 8004834:	20000258 	.word	0x20000258
 8004838:	20000534 	.word	0x20000534
 800483c:	2000022c 	.word	0x2000022c
 8004840:	20000228 	.word	0x20000228
 8004844:	20000238 	.word	0x20000238
 8004848:	2000023c 	.word	0x2000023c
 800484c:	20000544 	.word	0x20000544
 8004850:	44d1e000 	.word	0x44d1e000
 8004854:	200004d4 	.word	0x200004d4

08004858 <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 800485c:	4b3f      	ldr	r3, [pc, #252]	; (800495c <init_WallControl+0x104>)
 800485e:	2200      	movs	r2, #0
 8004860:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004862:	4b3f      	ldr	r3, [pc, #252]	; (8004960 <init_WallControl+0x108>)
 8004864:	2200      	movs	r2, #0
 8004866:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <init_WallControl+0x10c>)
 800486a:	2200      	movs	r2, #0
 800486c:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 800486e:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <init_WallControl+0x110>)
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004874:	4b3d      	ldr	r3, [pc, #244]	; (800496c <init_WallControl+0x114>)
 8004876:	2200      	movs	r2, #0
 8004878:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 800487a:	4b3d      	ldr	r3, [pc, #244]	; (8004970 <init_WallControl+0x118>)
 800487c:	2200      	movs	r2, #0
 800487e:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004880:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <init_WallControl+0x11c>)
 8004882:	2200      	movs	r2, #0
 8004884:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004886:	4b3c      	ldr	r3, [pc, #240]	; (8004978 <init_WallControl+0x120>)
 8004888:	4a3c      	ldr	r2, [pc, #240]	; (800497c <init_WallControl+0x124>)
 800488a:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 800488c:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <init_WallControl+0x128>)
 800488e:	4a3d      	ldr	r2, [pc, #244]	; (8004984 <init_WallControl+0x12c>)
 8004890:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004892:	4b3d      	ldr	r3, [pc, #244]	; (8004988 <init_WallControl+0x130>)
 8004894:	4a3d      	ldr	r2, [pc, #244]	; (800498c <init_WallControl+0x134>)
 8004896:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004898:	4b3d      	ldr	r3, [pc, #244]	; (8004990 <init_WallControl+0x138>)
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 800489e:	4b3d      	ldr	r3, [pc, #244]	; (8004994 <init_WallControl+0x13c>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 80048a4:	4b3c      	ldr	r3, [pc, #240]	; (8004998 <init_WallControl+0x140>)
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 80048aa:	4b3c      	ldr	r3, [pc, #240]	; (800499c <init_WallControl+0x144>)
 80048ac:	2200      	movs	r2, #0
 80048ae:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 80048b0:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <init_WallControl+0x148>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 80048b6:	4b3b      	ldr	r3, [pc, #236]	; (80049a4 <init_WallControl+0x14c>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 80048bc:	4b3a      	ldr	r3, [pc, #232]	; (80049a8 <init_WallControl+0x150>)
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 80048c4:	4b39      	ldr	r3, [pc, #228]	; (80049ac <init_WallControl+0x154>)
 80048c6:	f04f 0200 	mov.w	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 80048cc:	4b38      	ldr	r3, [pc, #224]	; (80049b0 <init_WallControl+0x158>)
 80048ce:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048d2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 80048d4:	4b37      	ldr	r3, [pc, #220]	; (80049b4 <init_WallControl+0x15c>)
 80048d6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80048da:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 80048dc:	4b36      	ldr	r3, [pc, #216]	; (80049b8 <init_WallControl+0x160>)
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 80048e4:	4b35      	ldr	r3, [pc, #212]	; (80049bc <init_WallControl+0x164>)
 80048e6:	f04f 0200 	mov.w	r2, #0
 80048ea:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 80048ec:	4b34      	ldr	r3, [pc, #208]	; (80049c0 <init_WallControl+0x168>)
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 80048f4:	4b33      	ldr	r3, [pc, #204]	; (80049c4 <init_WallControl+0x16c>)
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <init_WallControl+0x170>)
 80048fe:	2200      	movs	r2, #0
 8004900:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004902:	4b32      	ldr	r3, [pc, #200]	; (80049cc <init_WallControl+0x174>)
 8004904:	2200      	movs	r2, #0
 8004906:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004908:	4b31      	ldr	r3, [pc, #196]	; (80049d0 <init_WallControl+0x178>)
 800490a:	2200      	movs	r2, #0
 800490c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <init_WallControl+0x17c>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004914:	4b30      	ldr	r3, [pc, #192]	; (80049d8 <init_WallControl+0x180>)
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 800491a:	4b30      	ldr	r3, [pc, #192]	; (80049dc <init_WallControl+0x184>)
 800491c:	2200      	movs	r2, #0
 800491e:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004920:	4b2f      	ldr	r3, [pc, #188]	; (80049e0 <init_WallControl+0x188>)
 8004922:	2200      	movs	r2, #0
 8004924:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004926:	4b2f      	ldr	r3, [pc, #188]	; (80049e4 <init_WallControl+0x18c>)
 8004928:	2200      	movs	r2, #0
 800492a:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 800492c:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <init_WallControl+0x190>)
 800492e:	2200      	movs	r2, #0
 8004930:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <init_WallControl+0x194>)
 8004934:	f04f 0200 	mov.w	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 800493a:	4b2d      	ldr	r3, [pc, #180]	; (80049f0 <init_WallControl+0x198>)
 800493c:	f04f 0200 	mov.w	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004942:	4b2c      	ldr	r3, [pc, #176]	; (80049f4 <init_WallControl+0x19c>)
 8004944:	f04f 0200 	mov.w	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 800494a:	4b2b      	ldr	r3, [pc, #172]	; (80049f8 <init_WallControl+0x1a0>)
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	601a      	str	r2, [r3, #0]
}
 8004952:	bf00      	nop
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000590 	.word	0x20000590
 8004960:	20000591 	.word	0x20000591
 8004964:	20000593 	.word	0x20000593
 8004968:	20000592 	.word	0x20000592
 800496c:	20000595 	.word	0x20000595
 8004970:	20000596 	.word	0x20000596
 8004974:	20000597 	.word	0x20000597
 8004978:	20000598 	.word	0x20000598
 800497c:	44be6000 	.word	0x44be6000
 8004980:	2000059c 	.word	0x2000059c
 8004984:	44974000 	.word	0x44974000
 8004988:	200005a0 	.word	0x200005a0
 800498c:	41a00000 	.word	0x41a00000
 8004990:	200005b8 	.word	0x200005b8
 8004994:	200005b4 	.word	0x200005b4
 8004998:	200005c0 	.word	0x200005c0
 800499c:	200005bc 	.word	0x200005bc
 80049a0:	200005c8 	.word	0x200005c8
 80049a4:	200005c4 	.word	0x200005c4
 80049a8:	200005d0 	.word	0x200005d0
 80049ac:	200005cc 	.word	0x200005cc
 80049b0:	200005d8 	.word	0x200005d8
 80049b4:	200005d4 	.word	0x200005d4
 80049b8:	200005e0 	.word	0x200005e0
 80049bc:	200005dc 	.word	0x200005dc
 80049c0:	200005e8 	.word	0x200005e8
 80049c4:	200005e4 	.word	0x200005e4
 80049c8:	200005ec 	.word	0x200005ec
 80049cc:	200005ed 	.word	0x200005ed
 80049d0:	200005ee 	.word	0x200005ee
 80049d4:	200005ef 	.word	0x200005ef
 80049d8:	200005f0 	.word	0x200005f0
 80049dc:	200005f1 	.word	0x200005f1
 80049e0:	200005f2 	.word	0x200005f2
 80049e4:	200005f3 	.word	0x200005f3
 80049e8:	200005f4 	.word	0x200005f4
 80049ec:	200005f8 	.word	0x200005f8
 80049f0:	200005fc 	.word	0x200005fc
 80049f4:	20000600 	.word	0x20000600
 80049f8:	20000604 	.word	0x20000604
 80049fc:	00000000 	.word	0x00000000

08004a00 <calWallConrol>:


float calWallConrol(void) {
 8004a00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a04:	b0aa      	sub	sp, #168	; 0xa8
 8004a06:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004a08:	4ba1      	ldr	r3, [pc, #644]	; (8004c90 <calWallConrol+0x290>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d13d      	bne.n	8004a8c <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004a10:	4ba0      	ldr	r3, [pc, #640]	; (8004c94 <calWallConrol+0x294>)
 8004a12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004a16:	4ba0      	ldr	r3, [pc, #640]	; (8004c98 <calWallConrol+0x298>)
 8004a18:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 1000) {
 8004a1c:	4b9f      	ldr	r3, [pc, #636]	; (8004c9c <calWallConrol+0x29c>)
 8004a1e:	edd3 7a00 	vldr	s15, [r3]
 8004a22:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8004ca0 <calWallConrol+0x2a0>
 8004a26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a2e:	dd06      	ble.n	8004a3e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 1000;
 8004a30:	4b9c      	ldr	r3, [pc, #624]	; (8004ca4 <calWallConrol+0x2a4>)
 8004a32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 1000;
 8004a36:	4b9c      	ldr	r3, [pc, #624]	; (8004ca8 <calWallConrol+0x2a8>)
 8004a38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a3c:	e052      	b.n	8004ae4 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004a3e:	4b97      	ldr	r3, [pc, #604]	; (8004c9c <calWallConrol+0x29c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fda8 	bl	8000598 <__aeabi_f2d>
 8004a48:	a389      	add	r3, pc, #548	; (adr r3, 8004c70 <calWallConrol+0x270>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fdfb 	bl	8000648 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4610      	mov	r0, r2
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f7fc f8cd 	bl	8000bf8 <__aeabi_d2f>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004a64:	4b8d      	ldr	r3, [pc, #564]	; (8004c9c <calWallConrol+0x29c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7fb fd95 	bl	8000598 <__aeabi_f2d>
 8004a6e:	a382      	add	r3, pc, #520	; (adr r3, 8004c78 <calWallConrol+0x278>)
 8004a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a74:	f7fb fde8 	bl	8000648 <__aeabi_dmul>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f7fc f8ba 	bl	8000bf8 <__aeabi_d2f>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004a8a:	e02b      	b.n	8004ae4 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004a8c:	4b87      	ldr	r3, [pc, #540]	; (8004cac <calWallConrol+0x2ac>)
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004a92:	4b87      	ldr	r3, [pc, #540]	; (8004cb0 <calWallConrol+0x2b0>)
 8004a94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004a98:	4b80      	ldr	r3, [pc, #512]	; (8004c9c <calWallConrol+0x29c>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7fb fd7b 	bl	8000598 <__aeabi_f2d>
 8004aa2:	a377      	add	r3, pc, #476	; (adr r3, 8004c80 <calWallConrol+0x280>)
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f7fb fdce 	bl	8000648 <__aeabi_dmul>
 8004aac:	4602      	mov	r2, r0
 8004aae:	460b      	mov	r3, r1
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	f7fc f8a0 	bl	8000bf8 <__aeabi_d2f>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004abe:	4b77      	ldr	r3, [pc, #476]	; (8004c9c <calWallConrol+0x29c>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f7fb fd68 	bl	8000598 <__aeabi_f2d>
 8004ac8:	a36f      	add	r3, pc, #444	; (adr r3, 8004c88 <calWallConrol+0x288>)
 8004aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ace:	f7fb fdbb 	bl	8000648 <__aeabi_dmul>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	4619      	mov	r1, r3
 8004ada:	f7fc f88d 	bl	8000bf8 <__aeabi_d2f>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004ae4:	4b73      	ldr	r3, [pc, #460]	; (8004cb4 <calWallConrol+0x2b4>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f240 2289 	movw	r2, #649	; 0x289
 8004aec:	4293      	cmp	r3, r2
 8004aee:	dc03      	bgt.n	8004af8 <calWallConrol+0xf8>
		sensorWall_L = SENSOR_L_MIN;
 8004af0:	4b71      	ldr	r3, [pc, #452]	; (8004cb8 <calWallConrol+0x2b8>)
 8004af2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004af6:	e011      	b.n	8004b1c <calWallConrol+0x11c>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004af8:	4b6e      	ldr	r3, [pc, #440]	; (8004cb4 <calWallConrol+0x2b4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004b00:	4293      	cmp	r3, r2
 8004b02:	dd03      	ble.n	8004b0c <calWallConrol+0x10c>
		sensorWall_L = SENSOR_L_MAX;
 8004b04:	4b6d      	ldr	r3, [pc, #436]	; (8004cbc <calWallConrol+0x2bc>)
 8004b06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b0a:	e007      	b.n	8004b1c <calWallConrol+0x11c>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004b0c:	4b69      	ldr	r3, [pc, #420]	; (8004cb4 <calWallConrol+0x2b4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b18:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004b1c:	4b65      	ldr	r3, [pc, #404]	; (8004cb4 <calWallConrol+0x2b4>)
 8004b1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b22:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004b26:	da03      	bge.n	8004b30 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004b28:	4b65      	ldr	r3, [pc, #404]	; (8004cc0 <calWallConrol+0x2c0>)
 8004b2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b2e:	e012      	b.n	8004b56 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004b30:	4b60      	ldr	r3, [pc, #384]	; (8004cb4 <calWallConrol+0x2b4>)
 8004b32:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b36:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004b3a:	dd03      	ble.n	8004b44 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004b3c:	4b61      	ldr	r3, [pc, #388]	; (8004cc4 <calWallConrol+0x2c4>)
 8004b3e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b42:	e008      	b.n	8004b56 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004b44:	4b5b      	ldr	r3, [pc, #364]	; (8004cb4 <calWallConrol+0x2b4>)
 8004b46:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b52:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004b64:	4b58      	ldr	r3, [pc, #352]	; (8004cc8 <calWallConrol+0x2c8>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d11c      	bne.n	8004ba6 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004b6c:	4b57      	ldr	r3, [pc, #348]	; (8004ccc <calWallConrol+0x2cc>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004b72:	4b57      	ldr	r3, [pc, #348]	; (8004cd0 <calWallConrol+0x2d0>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004b78:	4b56      	ldr	r3, [pc, #344]	; (8004cd4 <calWallConrol+0x2d4>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004b7e:	4b56      	ldr	r3, [pc, #344]	; (8004cd8 <calWallConrol+0x2d8>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004b84:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <calWallConrol+0x2dc>)
 8004b86:	4a56      	ldr	r2, [pc, #344]	; (8004ce0 <calWallConrol+0x2e0>)
 8004b88:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <calWallConrol+0x2e4>)
 8004b8c:	4a56      	ldr	r2, [pc, #344]	; (8004ce8 <calWallConrol+0x2e8>)
 8004b8e:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004b90:	4b56      	ldr	r3, [pc, #344]	; (8004cec <calWallConrol+0x2ec>)
 8004b92:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <calWallConrol+0x2f0>)
 8004b94:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004b9e:	f002 f905 	bl	8006dac <pl_yellow_LED_off>
 8004ba2:	f001 ba4c 	b.w	800603e <calWallConrol+0x163e>

	} else if (g_WallControl_mode == 1) {
 8004ba6:	4b48      	ldr	r3, [pc, #288]	; (8004cc8 <calWallConrol+0x2c8>)
 8004ba8:	781b      	ldrb	r3, [r3, #0]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	f040 82ef 	bne.w	800518e <calWallConrol+0x78e>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8004bb0:	4b46      	ldr	r3, [pc, #280]	; (8004ccc <calWallConrol+0x2cc>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	f000 809d 	beq.w	8004cf8 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 8004bbe:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <calWallConrol+0x2b4>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004bc6:	db16      	blt.n	8004bf6 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8004bc8:	4b4a      	ldr	r3, [pc, #296]	; (8004cf4 <calWallConrol+0x2f4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fb fcd1 	bl	8000574 <__aeabi_i2d>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4690      	mov	r8, r2
 8004bd8:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8004bdc:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004be0:	f7fb fcda 	bl	8000598 <__aeabi_f2d>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4640      	mov	r0, r8
 8004bea:	4649      	mov	r1, r9
 8004bec:	f7fb ffbc 	bl	8000b68 <__aeabi_dcmpgt>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d037      	beq.n	8004c66 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8004bf6:	4b35      	ldr	r3, [pc, #212]	; (8004ccc <calWallConrol+0x2cc>)
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	3b01      	subs	r3, #1
 8004bfc:	b2da      	uxtb	r2, r3
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <calWallConrol+0x2cc>)
 8004c00:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8004c02:	4b36      	ldr	r3, [pc, #216]	; (8004cdc <calWallConrol+0x2dc>)
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c10:	e021      	b.n	8004c56 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8004c12:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <calWallConrol+0x2b4>)
 8004c14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <calWallConrol+0x2dc>)
 8004c26:	edd3 7a00 	vldr	s15, [r3]
 8004c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c32:	dd0b      	ble.n	8004c4c <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8004c34:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <calWallConrol+0x2b4>)
 8004c36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	ee07 3a90 	vmov	s15, r3
 8004c42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c46:	4b25      	ldr	r3, [pc, #148]	; (8004cdc <calWallConrol+0x2dc>)
 8004c48:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c50:	3301      	adds	r3, #1
 8004c52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004c5a:	2b13      	cmp	r3, #19
 8004c5c:	ddd9      	ble.n	8004c12 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 8004c5e:	4b23      	ldr	r3, [pc, #140]	; (8004cec <calWallConrol+0x2ec>)
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 8004c66:	4b1b      	ldr	r3, [pc, #108]	; (8004cd4 <calWallConrol+0x2d4>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
 8004c6c:	e066      	b.n	8004d3c <calWallConrol+0x33c>
 8004c6e:	bf00      	nop
 8004c70:	33333333 	.word	0x33333333
 8004c74:	3fd33333 	.word	0x3fd33333
 8004c78:	d2f1a9fc 	.word	0xd2f1a9fc
 8004c7c:	bf70624d 	.word	0xbf70624d
 8004c80:	33333333 	.word	0x33333333
 8004c84:	3fe33333 	.word	0x3fe33333
 8004c88:	bc6a7efa 	.word	0xbc6a7efa
 8004c8c:	3f789374 	.word	0x3f789374
 8004c90:	20000808 	.word	0x20000808
 8004c94:	435c0000 	.word	0x435c0000
 8004c98:	43480000 	.word	0x43480000
 8004c9c:	200004d8 	.word	0x200004d8
 8004ca0:	447a0000 	.word	0x447a0000
 8004ca4:	43960000 	.word	0x43960000
 8004ca8:	c0800000 	.word	0xc0800000
 8004cac:	431d0000 	.word	0x431d0000
 8004cb0:	42dc0000 	.word	0x42dc0000
 8004cb4:	200002b8 	.word	0x200002b8
 8004cb8:	44228000 	.word	0x44228000
 8004cbc:	450fc000 	.word	0x450fc000
 8004cc0:	44160000 	.word	0x44160000
 8004cc4:	44fa0000 	.word	0x44fa0000
 8004cc8:	20000590 	.word	0x20000590
 8004ccc:	20000593 	.word	0x20000593
 8004cd0:	20000595 	.word	0x20000595
 8004cd4:	20000596 	.word	0x20000596
 8004cd8:	20000597 	.word	0x20000597
 8004cdc:	20000598 	.word	0x20000598
 8004ce0:	44be6000 	.word	0x44be6000
 8004ce4:	2000059c 	.word	0x2000059c
 8004ce8:	44974000 	.word	0x44974000
 8004cec:	200005a0 	.word	0x200005a0
 8004cf0:	41a00000 	.word	0x41a00000
 8004cf4:	20000448 	.word	0x20000448
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8004cf8:	4bbf      	ldr	r3, [pc, #764]	; (8004ff8 <calWallConrol+0x5f8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8004d00:	dd1c      	ble.n	8004d3c <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8004d02:	4bbe      	ldr	r3, [pc, #760]	; (8004ffc <calWallConrol+0x5fc>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fb fc34 	bl	8000574 <__aeabi_i2d>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4614      	mov	r4, r2
 8004d12:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8004d16:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8004d1a:	f7fb fc3d 	bl	8000598 <__aeabi_f2d>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4620      	mov	r0, r4
 8004d24:	4629      	mov	r1, r5
 8004d26:	f7fb ff01 	bl	8000b2c <__aeabi_dcmplt>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8004d30:	4bb3      	ldr	r3, [pc, #716]	; (8005000 <calWallConrol+0x600>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	3301      	adds	r3, #1
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	4bb1      	ldr	r3, [pc, #708]	; (8005000 <calWallConrol+0x600>)
 8004d3a:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 8004d3c:	4bb0      	ldr	r3, [pc, #704]	; (8005000 <calWallConrol+0x600>)
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d05c      	beq.n	8004e06 <calWallConrol+0x406>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 8004d4c:	4baa      	ldr	r3, [pc, #680]	; (8004ff8 <calWallConrol+0x5f8>)
 8004d4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004d52:	f240 2225 	movw	r2, #549	; 0x225
 8004d56:	4293      	cmp	r3, r2
 8004d58:	dd17      	ble.n	8004d8a <calWallConrol+0x38a>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d5a:	4ba8      	ldr	r3, [pc, #672]	; (8004ffc <calWallConrol+0x5fc>)
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fb fc08 	bl	8000574 <__aeabi_i2d>
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	613a      	str	r2, [r7, #16]
 8004d6a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d6e:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 8004d70:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004d74:	f7fb fc10 	bl	8000598 <__aeabi_f2d>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 8004d7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004d80:	f7fb fef2 	bl	8000b68 <__aeabi_dcmpgt>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d039      	beq.n	8004dfe <calWallConrol+0x3fe>
				g_WallControlStatus = g_WallControlStatus - 2;
 8004d8a:	4b9d      	ldr	r3, [pc, #628]	; (8005000 <calWallConrol+0x600>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	3b02      	subs	r3, #2
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b9b      	ldr	r3, [pc, #620]	; (8005000 <calWallConrol+0x600>)
 8004d94:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 8004d96:	4b9b      	ldr	r3, [pc, #620]	; (8005004 <calWallConrol+0x604>)
 8004d98:	f04f 0200 	mov.w	r2, #0
 8004d9c:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004da4:	e023      	b.n	8004dee <calWallConrol+0x3ee>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8004da6:	4a94      	ldr	r2, [pc, #592]	; (8004ff8 <calWallConrol+0x5f8>)
 8004da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dac:	3350      	adds	r3, #80	; 0x50
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004dba:	4b92      	ldr	r3, [pc, #584]	; (8005004 <calWallConrol+0x604>)
 8004dbc:	edd3 7a00 	vldr	s15, [r3]
 8004dc0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dc8:	dd0c      	ble.n	8004de4 <calWallConrol+0x3e4>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8004dca:	4a8b      	ldr	r2, [pc, #556]	; (8004ff8 <calWallConrol+0x5f8>)
 8004dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd0:	3350      	adds	r3, #80	; 0x50
 8004dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd6:	ee07 3a90 	vmov	s15, r3
 8004dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004dde:	4b89      	ldr	r3, [pc, #548]	; (8005004 <calWallConrol+0x604>)
 8004de0:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8004de4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004de8:	3301      	adds	r3, #1
 8004dea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004df2:	2b13      	cmp	r3, #19
 8004df4:	ddd7      	ble.n	8004da6 <calWallConrol+0x3a6>
					}
				}
				g_skewer_displacement = 0;
 8004df6:	4b84      	ldr	r3, [pc, #528]	; (8005008 <calWallConrol+0x608>)
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 8004dfe:	4b83      	ldr	r3, [pc, #524]	; (800500c <calWallConrol+0x60c>)
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
 8004e04:	e024      	b.n	8004e50 <calWallConrol+0x450>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8004e06:	4b7c      	ldr	r3, [pc, #496]	; (8004ff8 <calWallConrol+0x5f8>)
 8004e08:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004e0c:	f240 2226 	movw	r2, #550	; 0x226
 8004e10:	4293      	cmp	r3, r2
 8004e12:	dd1d      	ble.n	8004e50 <calWallConrol+0x450>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e14:	4b79      	ldr	r3, [pc, #484]	; (8004ffc <calWallConrol+0x5fc>)
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f7fb fbab 	bl	8000574 <__aeabi_i2d>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	460b      	mov	r3, r1
 8004e22:	60ba      	str	r2, [r7, #8]
 8004e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004e28:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8004e2a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8004e2e:	f7fb fbb3 	bl	8000598 <__aeabi_f2d>
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8004e36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e3a:	f7fb fe77 	bl	8000b2c <__aeabi_dcmplt>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <calWallConrol+0x450>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 8004e44:	4b6e      	ldr	r3, [pc, #440]	; (8005000 <calWallConrol+0x600>)
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	3302      	adds	r3, #2
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	4b6c      	ldr	r3, [pc, #432]	; (8005000 <calWallConrol+0x600>)
 8004e4e:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 8004e50:	4b6b      	ldr	r3, [pc, #428]	; (8005000 <calWallConrol+0x600>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	2b03      	cmp	r3, #3
 8004e56:	f201 80f2 	bhi.w	800603e <calWallConrol+0x163e>
 8004e5a:	a201      	add	r2, pc, #4	; (adr r2, 8004e60 <calWallConrol+0x460>)
 8004e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e60:	08004e71 	.word	0x08004e71
 8004e64:	08004f77 	.word	0x08004f77
 8004e68:	08005025 	.word	0x08005025
 8004e6c:	0800508f 	.word	0x0800508f
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 8004e70:	4b65      	ldr	r3, [pc, #404]	; (8005008 <calWallConrol+0x608>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7fb fb8f 	bl	8000598 <__aeabi_f2d>
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	460d      	mov	r5, r1
 8004e7e:	4b64      	ldr	r3, [pc, #400]	; (8005010 <calWallConrol+0x610>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fb88 	bl	8000598 <__aeabi_f2d>
 8004e88:	a357      	add	r3, pc, #348	; (adr r3, 8004fe8 <calWallConrol+0x5e8>)
 8004e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8e:	f7fb fbdb 	bl	8000648 <__aeabi_dmul>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4620      	mov	r0, r4
 8004e98:	4629      	mov	r1, r5
 8004e9a:	f7fb fa1f 	bl	80002dc <__adddf3>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	460b      	mov	r3, r1
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	f7fb fea7 	bl	8000bf8 <__aeabi_d2f>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	4a56      	ldr	r2, [pc, #344]	; (8005008 <calWallConrol+0x608>)
 8004eae:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 8004eb0:	4b55      	ldr	r3, [pc, #340]	; (8005008 <calWallConrol+0x608>)
 8004eb2:	edd3 7a00 	vldr	s15, [r3]
 8004eb6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8004eba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ec2:	d52e      	bpl.n	8004f22 <calWallConrol+0x522>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <calWallConrol+0x614>)
 8004ec6:	edd3 7a00 	vldr	s15, [r3]
 8004eca:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005018 <calWallConrol+0x618>
 8004ece:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004ed2:	eef1 6a67 	vneg.f32	s13, s15
 8004ed6:	4b4f      	ldr	r3, [pc, #316]	; (8005014 <calWallConrol+0x614>)
 8004ed8:	edd3 7a00 	vldr	s15, [r3]
 8004edc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 8004ee0:	4b48      	ldr	r3, [pc, #288]	; (8005004 <calWallConrol+0x604>)
 8004ee2:	edd3 7a00 	vldr	s15, [r3]
 8004ee6:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005020 <calWallConrol+0x620>
 8004eea:	ee37 6ae6 	vsub.f32	s12, s15, s13
 8004eee:	4b45      	ldr	r3, [pc, #276]	; (8005004 <calWallConrol+0x604>)
 8004ef0:	edd3 6a00 	vldr	s13, [r3]
 8004ef4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004ef8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004efc:	ee17 0a90 	vmov	r0, s15
 8004f00:	f7fb fb4a 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8004f04:	a33a      	add	r3, pc, #232	; (adr r3, 8004ff0 <calWallConrol+0x5f0>)
 8004f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0a:	f7fb fb9d 	bl	8000648 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4610      	mov	r0, r2
 8004f14:	4619      	mov	r1, r3
 8004f16:	f7fb fe6f 	bl	8000bf8 <__aeabi_d2f>
 8004f1a:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8004f1c:	4a3f      	ldr	r2, [pc, #252]	; (800501c <calWallConrol+0x61c>)
 8004f1e:	6013      	str	r3, [r2, #0]
 8004f20:	e003      	b.n	8004f2a <calWallConrol+0x52a>
			} else {
				wall_normal.error = 0;
 8004f22:	4b3e      	ldr	r3, [pc, #248]	; (800501c <calWallConrol+0x61c>)
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f2a:	4b3c      	ldr	r3, [pc, #240]	; (800501c <calWallConrol+0x61c>)
 8004f2c:	ed93 7a00 	vldr	s14, [r3]
 8004f30:	4b3a      	ldr	r3, [pc, #232]	; (800501c <calWallConrol+0x61c>)
 8004f32:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f3a:	4b38      	ldr	r3, [pc, #224]	; (800501c <calWallConrol+0x61c>)
 8004f3c:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004f40:	4b36      	ldr	r3, [pc, #216]	; (800501c <calWallConrol+0x61c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a35      	ldr	r2, [pc, #212]	; (800501c <calWallConrol+0x61c>)
 8004f46:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004f48:	4b34      	ldr	r3, [pc, #208]	; (800501c <calWallConrol+0x61c>)
 8004f4a:	ed93 7a00 	vldr	s14, [r3]
 8004f4e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004f52:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004f56:	4b31      	ldr	r3, [pc, #196]	; (800501c <calWallConrol+0x61c>)
 8004f58:	edd3 6a02 	vldr	s13, [r3, #8]
 8004f5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004f60:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f68:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 8004f6c:	2000      	movs	r0, #0
 8004f6e:	f001 ff57 	bl	8006e20 <pl_yellow_LED_count>
			break;
 8004f72:	f001 b864 	b.w	800603e <calWallConrol+0x163e>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f76:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8004f7a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005018 <calWallConrol+0x618>
 8004f7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004f82:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 8004f86:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 8004f8a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8004f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 8004f92:	4b22      	ldr	r3, [pc, #136]	; (800501c <calWallConrol+0x61c>)
 8004f94:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8004f98:	4b20      	ldr	r3, [pc, #128]	; (800501c <calWallConrol+0x61c>)
 8004f9a:	ed93 7a00 	vldr	s14, [r3]
 8004f9e:	4b1f      	ldr	r3, [pc, #124]	; (800501c <calWallConrol+0x61c>)
 8004fa0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fa4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004fa8:	4b1c      	ldr	r3, [pc, #112]	; (800501c <calWallConrol+0x61c>)
 8004faa:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <calWallConrol+0x61c>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	; (800501c <calWallConrol+0x61c>)
 8004fb4:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8004fb6:	4b19      	ldr	r3, [pc, #100]	; (800501c <calWallConrol+0x61c>)
 8004fb8:	ed93 7a00 	vldr	s14, [r3]
 8004fbc:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8004fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8004fc4:	4b15      	ldr	r3, [pc, #84]	; (800501c <calWallConrol+0x61c>)
 8004fc6:	edd3 6a02 	vldr	s13, [r3, #8]
 8004fca:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8004fce:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 8004fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(128);
 8004fda:	2080      	movs	r0, #128	; 0x80
 8004fdc:	f001 ff20 	bl	8006e20 <pl_yellow_LED_count>
			break;
 8004fe0:	f001 b82d 	b.w	800603e <calWallConrol+0x163e>
 8004fe4:	f3af 8000 	nop.w
 8004fe8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004fec:	3f50624d 	.word	0x3f50624d
 8004ff0:	66666666 	.word	0x66666666
 8004ff4:	3fe66666 	.word	0x3fe66666
 8004ff8:	200002b8 	.word	0x200002b8
 8004ffc:	20000448 	.word	0x20000448
 8005000:	20000593 	.word	0x20000593
 8005004:	2000059c 	.word	0x2000059c
 8005008:	200005a0 	.word	0x200005a0
 800500c:	20000597 	.word	0x20000597
 8005010:	200004d8 	.word	0x200004d8
 8005014:	20000598 	.word	0x20000598
 8005018:	44be6000 	.word	0x44be6000
 800501c:	2000056c 	.word	0x2000056c
 8005020:	44974000 	.word	0x44974000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005024:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005028:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8005020 <calWallConrol+0x620>
 800502c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005030:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005034:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005038:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 800503c:	4baa      	ldr	r3, [pc, #680]	; (80052e8 <calWallConrol+0x8e8>)
 800503e:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005042:	4ba9      	ldr	r3, [pc, #676]	; (80052e8 <calWallConrol+0x8e8>)
 8005044:	ed93 7a00 	vldr	s14, [r3]
 8005048:	4ba7      	ldr	r3, [pc, #668]	; (80052e8 <calWallConrol+0x8e8>)
 800504a:	edd3 7a01 	vldr	s15, [r3, #4]
 800504e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005052:	4ba5      	ldr	r3, [pc, #660]	; (80052e8 <calWallConrol+0x8e8>)
 8005054:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005058:	4ba3      	ldr	r3, [pc, #652]	; (80052e8 <calWallConrol+0x8e8>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4aa2      	ldr	r2, [pc, #648]	; (80052e8 <calWallConrol+0x8e8>)
 800505e:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005060:	4ba1      	ldr	r3, [pc, #644]	; (80052e8 <calWallConrol+0x8e8>)
 8005062:	ed93 7a00 	vldr	s14, [r3]
 8005066:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800506a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800506e:	4b9e      	ldr	r3, [pc, #632]	; (80052e8 <calWallConrol+0x8e8>)
 8005070:	edd3 6a02 	vldr	s13, [r3, #8]
 8005074:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005078:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800507c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005080:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(1);
 8005084:	2001      	movs	r0, #1
 8005086:	f001 fecb 	bl	8006e20 <pl_yellow_LED_count>
			break;
 800508a:	f000 bfd8 	b.w	800603e <calWallConrol+0x163e>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 800508e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8005092:	ed9f 7a96 	vldr	s14, [pc, #600]	; 80052ec <calWallConrol+0x8ec>
 8005096:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800509a:	eef1 6a67 	vneg.f32	s13, s15
 800509e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80050a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 80050a6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80050aa:	eddf 6a91 	vldr	s13, [pc, #580]	; 80052f0 <calWallConrol+0x8f0>
 80050ae:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 80050b2:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 80050b6:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 80050ba:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 80050be:	4b8a      	ldr	r3, [pc, #552]	; (80052e8 <calWallConrol+0x8e8>)
 80050c0:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80050c4:	4b88      	ldr	r3, [pc, #544]	; (80052e8 <calWallConrol+0x8e8>)
 80050c6:	ed93 7a00 	vldr	s14, [r3]
 80050ca:	4b87      	ldr	r3, [pc, #540]	; (80052e8 <calWallConrol+0x8e8>)
 80050cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80050d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d4:	4b84      	ldr	r3, [pc, #528]	; (80052e8 <calWallConrol+0x8e8>)
 80050d6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80050da:	4b83      	ldr	r3, [pc, #524]	; (80052e8 <calWallConrol+0x8e8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a82      	ldr	r2, [pc, #520]	; (80052e8 <calWallConrol+0x8e8>)
 80050e0:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80050e2:	4b81      	ldr	r3, [pc, #516]	; (80052e8 <calWallConrol+0x8e8>)
 80050e4:	ed93 7a00 	vldr	s14, [r3]
 80050e8:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80050ec:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80050f0:	4b7d      	ldr	r3, [pc, #500]	; (80052e8 <calWallConrol+0x8e8>)
 80050f2:	edd3 6a02 	vldr	s13, [r3, #8]
 80050f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80050fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80050fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005102:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(129);
 8005106:	2081      	movs	r0, #129	; 0x81
 8005108:	f001 fe8a 	bl	8006e20 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 800510c:	4b79      	ldr	r3, [pc, #484]	; (80052f4 <calWallConrol+0x8f4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4618      	mov	r0, r3
 8005112:	f7fb fa2f 	bl	8000574 <__aeabi_i2d>
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	603a      	str	r2, [r7, #0]
 800511c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	4b74      	ldr	r3, [pc, #464]	; (80052f8 <calWallConrol+0x8f8>)
 8005128:	e9d7 0100 	ldrd	r0, r1, [r7]
 800512c:	f7fb fcfe 	bl	8000b2c <__aeabi_dcmplt>
 8005130:	4603      	mov	r3, r0
 8005132:	2b00      	cmp	r3, #0
 8005134:	d01a      	beq.n	800516c <calWallConrol+0x76c>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8005136:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <calWallConrol+0x8f4>)
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb fa1a 	bl	8000574 <__aeabi_i2d>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4692      	mov	sl, r2
 8005146:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <calWallConrol+0x8f8>)
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fb fcea 	bl	8000b2c <__aeabi_dcmplt>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d006      	beq.n	800516c <calWallConrol+0x76c>
				StabilityCount_reset++;
 800515e:	4b67      	ldr	r3, [pc, #412]	; (80052fc <calWallConrol+0x8fc>)
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	3301      	adds	r3, #1
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <calWallConrol+0x8fc>)
 8005168:	701a      	strb	r2, [r3, #0]
 800516a:	e002      	b.n	8005172 <calWallConrol+0x772>
			} else {
				StabilityCount_reset = 0;
 800516c:	4b63      	ldr	r3, [pc, #396]	; (80052fc <calWallConrol+0x8fc>)
 800516e:	2200      	movs	r2, #0
 8005170:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 8005172:	4b62      	ldr	r3, [pc, #392]	; (80052fc <calWallConrol+0x8fc>)
 8005174:	781b      	ldrb	r3, [r3, #0]
 8005176:	2b18      	cmp	r3, #24
 8005178:	f240 8760 	bls.w	800603c <calWallConrol+0x163c>
				Gyro.sigma_error = 0;
 800517c:	4b60      	ldr	r3, [pc, #384]	; (8005300 <calWallConrol+0x900>)
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 8005184:	4b5d      	ldr	r3, [pc, #372]	; (80052fc <calWallConrol+0x8fc>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
			}
			break;
 800518a:	f000 bf57 	b.w	800603c <calWallConrol+0x163c>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 800518e:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <calWallConrol+0x904>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b02      	cmp	r3, #2
 8005194:	f000 8753 	beq.w	800603e <calWallConrol+0x163e>
// 斜めの制御


	} else if (g_WallControl_mode == 3) {
 8005198:	4b5a      	ldr	r3, [pc, #360]	; (8005304 <calWallConrol+0x904>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b03      	cmp	r3, #3
 800519e:	f040 874e 	bne.w	800603e <calWallConrol+0x163e>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 1000) {
 80051a2:	4b59      	ldr	r3, [pc, #356]	; (8005308 <calWallConrol+0x908>)
 80051a4:	edd3 7a00 	vldr	s15, [r3]
 80051a8:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800530c <calWallConrol+0x90c>
 80051ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	dd05      	ble.n	80051c2 <calWallConrol+0x7c2>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 1000;
 80051b6:	4b56      	ldr	r3, [pc, #344]	; (8005310 <calWallConrol+0x910>)
 80051b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 1000;
 80051bc:	4b55      	ldr	r3, [pc, #340]	; (8005314 <calWallConrol+0x914>)
 80051be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80051c0:	e024      	b.n	800520c <calWallConrol+0x80c>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80051c2:	4b51      	ldr	r3, [pc, #324]	; (8005308 <calWallConrol+0x908>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fb f9e6 	bl	8000598 <__aeabi_f2d>
 80051cc:	a342      	add	r3, pc, #264	; (adr r3, 80052d8 <calWallConrol+0x8d8>)
 80051ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051d2:	f7fb fa39 	bl	8000648 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4610      	mov	r0, r2
 80051dc:	4619      	mov	r1, r3
 80051de:	f7fb fd0b 	bl	8000bf8 <__aeabi_d2f>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 80051e8:	4b47      	ldr	r3, [pc, #284]	; (8005308 <calWallConrol+0x908>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fb f9d3 	bl	8000598 <__aeabi_f2d>
 80051f2:	a33b      	add	r3, pc, #236	; (adr r3, 80052e0 <calWallConrol+0x8e0>)
 80051f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f8:	f7fb fa26 	bl	8000648 <__aeabi_dmul>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	f7fb fcf8 	bl	8000bf8 <__aeabi_d2f>
 8005208:	4603      	mov	r3, r0
 800520a:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 800520c:	4b42      	ldr	r3, [pc, #264]	; (8005318 <calWallConrol+0x918>)
 800520e:	edd3 7a00 	vldr	s15, [r3]
 8005212:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005216:	eef4 7ac7 	vcmpe.f32	s15, s14
 800521a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800521e:	dd12      	ble.n	8005246 <calWallConrol+0x846>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005220:	4b3d      	ldr	r3, [pc, #244]	; (8005318 <calWallConrol+0x918>)
 8005222:	edd3 7a00 	vldr	s15, [r3]
 8005226:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800522a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	d808      	bhi.n	8005246 <calWallConrol+0x846>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005234:	4b39      	ldr	r3, [pc, #228]	; (800531c <calWallConrol+0x91c>)
 8005236:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 8005238:	4b39      	ldr	r3, [pc, #228]	; (8005320 <calWallConrol+0x920>)
 800523a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 800523c:	4b39      	ldr	r3, [pc, #228]	; (8005324 <calWallConrol+0x924>)
 800523e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005240:	4b39      	ldr	r3, [pc, #228]	; (8005328 <calWallConrol+0x928>)
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
 8005244:	e0a7      	b.n	8005396 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 8005246:	4b34      	ldr	r3, [pc, #208]	; (8005318 <calWallConrol+0x918>)
 8005248:	edd3 7a00 	vldr	s15, [r3]
 800524c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800532c <calWallConrol+0x92c>
 8005250:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	dd12      	ble.n	8005280 <calWallConrol+0x880>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 800525a:	4b2f      	ldr	r3, [pc, #188]	; (8005318 <calWallConrol+0x918>)
 800525c:	edd3 7a00 	vldr	s15, [r3]
 8005260:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8005330 <calWallConrol+0x930>
 8005264:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800526c:	d808      	bhi.n	8005280 <calWallConrol+0x880>
			coefficientR[0] = COEFFICIENT_R1_0;
 800526e:	4b31      	ldr	r3, [pc, #196]	; (8005334 <calWallConrol+0x934>)
 8005270:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005272:	4b31      	ldr	r3, [pc, #196]	; (8005338 <calWallConrol+0x938>)
 8005274:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005276:	4b31      	ldr	r3, [pc, #196]	; (800533c <calWallConrol+0x93c>)
 8005278:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800527a:	4b31      	ldr	r3, [pc, #196]	; (8005340 <calWallConrol+0x940>)
 800527c:	657b      	str	r3, [r7, #84]	; 0x54
 800527e:	e08a      	b.n	8005396 <calWallConrol+0x996>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005280:	4b25      	ldr	r3, [pc, #148]	; (8005318 <calWallConrol+0x918>)
 8005282:	edd3 7a00 	vldr	s15, [r3]
 8005286:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005344 <calWallConrol+0x944>
 800528a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800528e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005292:	dd12      	ble.n	80052ba <calWallConrol+0x8ba>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005294:	4b20      	ldr	r3, [pc, #128]	; (8005318 <calWallConrol+0x918>)
 8005296:	edd3 7a00 	vldr	s15, [r3]
 800529a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8005348 <calWallConrol+0x948>
 800529e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80052a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a6:	d808      	bhi.n	80052ba <calWallConrol+0x8ba>
			coefficientR[0] = COEFFICIENT_R2_0;
 80052a8:	4b28      	ldr	r3, [pc, #160]	; (800534c <calWallConrol+0x94c>)
 80052aa:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <calWallConrol+0x950>)
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 80052b0:	4b28      	ldr	r3, [pc, #160]	; (8005354 <calWallConrol+0x954>)
 80052b2:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 80052b4:	4b28      	ldr	r3, [pc, #160]	; (8005358 <calWallConrol+0x958>)
 80052b6:	657b      	str	r3, [r7, #84]	; 0x54
 80052b8:	e06d      	b.n	8005396 <calWallConrol+0x996>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 80052ba:	4b28      	ldr	r3, [pc, #160]	; (800535c <calWallConrol+0x95c>)
 80052bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80052c0:	2baa      	cmp	r3, #170	; 0xaa
 80052c2:	dd4f      	ble.n	8005364 <calWallConrol+0x964>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 80052c4:	4b26      	ldr	r3, [pc, #152]	; (8005360 <calWallConrol+0x960>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	f043 0302 	orr.w	r3, r3, #2
 80052cc:	b2da      	uxtb	r2, r3
 80052ce:	4b24      	ldr	r3, [pc, #144]	; (8005360 <calWallConrol+0x960>)
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	e04e      	b.n	8005372 <calWallConrol+0x972>
 80052d4:	f3af 8000 	nop.w
 80052d8:	66666666 	.word	0x66666666
 80052dc:	3fe66666 	.word	0x3fe66666
 80052e0:	1eb851ec 	.word	0x1eb851ec
 80052e4:	bfb1eb85 	.word	0xbfb1eb85
 80052e8:	2000056c 	.word	0x2000056c
 80052ec:	44be6000 	.word	0x44be6000
 80052f0:	44974000 	.word	0x44974000
 80052f4:	20000448 	.word	0x20000448
 80052f8:	403e0000 	.word	0x403e0000
 80052fc:	20000595 	.word	0x20000595
 8005300:	20000544 	.word	0x20000544
 8005304:	20000590 	.word	0x20000590
 8005308:	200004d8 	.word	0x200004d8
 800530c:	447a0000 	.word	0x447a0000
 8005310:	442f0000 	.word	0x442f0000
 8005314:	c28c0000 	.word	0xc28c0000
 8005318:	200005dc 	.word	0x200005dc
 800531c:	4414c13c 	.word	0x4414c13c
 8005320:	421e1fdd 	.word	0x421e1fdd
 8005324:	beb05045 	.word	0xbeb05045
 8005328:	3e051eb8 	.word	0x3e051eb8
 800532c:	420c0000 	.word	0x420c0000
 8005330:	42700000 	.word	0x42700000
 8005334:	45b20ce1 	.word	0x45b20ce1
 8005338:	c393746d 	.word	0xc393746d
 800533c:	40afa404 	.word	0x40afa404
 8005340:	bd0f0328 	.word	0xbd0f0328
 8005344:	42c80000 	.word	0x42c80000
 8005348:	42f00000 	.word	0x42f00000
 800534c:	46e1460a 	.word	0x46e1460a
 8005350:	c43ee954 	.word	0xc43ee954
 8005354:	40d673d9 	.word	0x40d673d9
 8005358:	bc9d4952 	.word	0xbc9d4952
 800535c:	200002b8 	.word	0x200002b8
 8005360:	20000593 	.word	0x20000593
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005364:	4b79      	ldr	r3, [pc, #484]	; (800554c <calWallConrol+0xb4c>)
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	f023 0302 	bic.w	r3, r3, #2
 800536c:	b2da      	uxtb	r2, r3
 800536e:	4b77      	ldr	r3, [pc, #476]	; (800554c <calWallConrol+0xb4c>)
 8005370:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005372:	4b77      	ldr	r3, [pc, #476]	; (8005550 <calWallConrol+0xb50>)
 8005374:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005378:	ee07 3a90 	vmov	s15, r3
 800537c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005380:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005384:	f04f 0300 	mov.w	r3, #0
 8005388:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800538a:	f04f 0300 	mov.w	r3, #0
 800538e:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005396:	4b6f      	ldr	r3, [pc, #444]	; (8005554 <calWallConrol+0xb54>)
 8005398:	edd3 7a00 	vldr	s15, [r3]
 800539c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80053a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a8:	dd12      	ble.n	80053d0 <calWallConrol+0x9d0>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80053aa:	4b6a      	ldr	r3, [pc, #424]	; (8005554 <calWallConrol+0xb54>)
 80053ac:	edd3 7a00 	vldr	s15, [r3]
 80053b0:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80053b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	d808      	bhi.n	80053d0 <calWallConrol+0x9d0>
			coefficientL[0] = COEFFICIENT_L0_0;
 80053be:	4b66      	ldr	r3, [pc, #408]	; (8005558 <calWallConrol+0xb58>)
 80053c0:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80053c2:	4b66      	ldr	r3, [pc, #408]	; (800555c <calWallConrol+0xb5c>)
 80053c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80053c6:	4b66      	ldr	r3, [pc, #408]	; (8005560 <calWallConrol+0xb60>)
 80053c8:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80053ca:	4b66      	ldr	r3, [pc, #408]	; (8005564 <calWallConrol+0xb64>)
 80053cc:	647b      	str	r3, [r7, #68]	; 0x44
 80053ce:	e05d      	b.n	800548c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80053d0:	4b60      	ldr	r3, [pc, #384]	; (8005554 <calWallConrol+0xb54>)
 80053d2:	edd3 7a00 	vldr	s15, [r3]
 80053d6:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005568 <calWallConrol+0xb68>
 80053da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053e2:	dd12      	ble.n	800540a <calWallConrol+0xa0a>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80053e4:	4b5b      	ldr	r3, [pc, #364]	; (8005554 <calWallConrol+0xb54>)
 80053e6:	edd3 7a00 	vldr	s15, [r3]
 80053ea:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800556c <calWallConrol+0xb6c>
 80053ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f6:	d808      	bhi.n	800540a <calWallConrol+0xa0a>
			coefficientL[0] = COEFFICIENT_L1_0;
 80053f8:	4b5d      	ldr	r3, [pc, #372]	; (8005570 <calWallConrol+0xb70>)
 80053fa:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80053fc:	4b5d      	ldr	r3, [pc, #372]	; (8005574 <calWallConrol+0xb74>)
 80053fe:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005400:	4b5d      	ldr	r3, [pc, #372]	; (8005578 <calWallConrol+0xb78>)
 8005402:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005404:	4b5d      	ldr	r3, [pc, #372]	; (800557c <calWallConrol+0xb7c>)
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	e040      	b.n	800548c <calWallConrol+0xa8c>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800540a:	4b52      	ldr	r3, [pc, #328]	; (8005554 <calWallConrol+0xb54>)
 800540c:	edd3 7a00 	vldr	s15, [r3]
 8005410:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8005580 <calWallConrol+0xb80>
 8005414:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541c:	dd12      	ble.n	8005444 <calWallConrol+0xa44>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 800541e:	4b4d      	ldr	r3, [pc, #308]	; (8005554 <calWallConrol+0xb54>)
 8005420:	edd3 7a00 	vldr	s15, [r3]
 8005424:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8005584 <calWallConrol+0xb84>
 8005428:	eef4 7ac7 	vcmpe.f32	s15, s14
 800542c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005430:	d808      	bhi.n	8005444 <calWallConrol+0xa44>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005432:	4b55      	ldr	r3, [pc, #340]	; (8005588 <calWallConrol+0xb88>)
 8005434:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005436:	4b55      	ldr	r3, [pc, #340]	; (800558c <calWallConrol+0xb8c>)
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800543a:	4b55      	ldr	r3, [pc, #340]	; (8005590 <calWallConrol+0xb90>)
 800543c:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 800543e:	4b55      	ldr	r3, [pc, #340]	; (8005594 <calWallConrol+0xb94>)
 8005440:	647b      	str	r3, [r7, #68]	; 0x44
 8005442:	e023      	b.n	800548c <calWallConrol+0xa8c>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005444:	4b42      	ldr	r3, [pc, #264]	; (8005550 <calWallConrol+0xb50>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2baa      	cmp	r3, #170	; 0xaa
 800544a:	dd07      	ble.n	800545c <calWallConrol+0xa5c>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800544c:	4b3f      	ldr	r3, [pc, #252]	; (800554c <calWallConrol+0xb4c>)
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4b3d      	ldr	r3, [pc, #244]	; (800554c <calWallConrol+0xb4c>)
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	e006      	b.n	800546a <calWallConrol+0xa6a>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800545c:	4b3b      	ldr	r3, [pc, #236]	; (800554c <calWallConrol+0xb4c>)
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	f023 0301 	bic.w	r3, r3, #1
 8005464:	b2da      	uxtb	r2, r3
 8005466:	4b39      	ldr	r3, [pc, #228]	; (800554c <calWallConrol+0xb4c>)
 8005468:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800546a:	4b39      	ldr	r3, [pc, #228]	; (8005550 <calWallConrol+0xb50>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005476:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005480:	f04f 0300 	mov.w	r3, #0
 8005484:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800548c:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005490:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005494:	4b40      	ldr	r3, [pc, #256]	; (8005598 <calWallConrol+0xb98>)
 8005496:	edd3 7a00 	vldr	s15, [r3]
 800549a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800549e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054a2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80054a6:	4b3c      	ldr	r3, [pc, #240]	; (8005598 <calWallConrol+0xb98>)
 80054a8:	edd3 7a00 	vldr	s15, [r3]
 80054ac:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054b0:	4b39      	ldr	r3, [pc, #228]	; (8005598 <calWallConrol+0xb98>)
 80054b2:	edd3 7a00 	vldr	s15, [r3]
 80054b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80054ba:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80054be:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80054c2:	4b35      	ldr	r3, [pc, #212]	; (8005598 <calWallConrol+0xb98>)
 80054c4:	edd3 7a00 	vldr	s15, [r3]
 80054c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80054cc:	4b32      	ldr	r3, [pc, #200]	; (8005598 <calWallConrol+0xb98>)
 80054ce:	edd3 7a00 	vldr	s15, [r3]
 80054d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80054d6:	4b30      	ldr	r3, [pc, #192]	; (8005598 <calWallConrol+0xb98>)
 80054d8:	edd3 7a00 	vldr	s15, [r3]
 80054dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80054e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054e4:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80054e8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80054ec:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80054f0:	4b18      	ldr	r3, [pc, #96]	; (8005554 <calWallConrol+0xb54>)
 80054f2:	edd3 7a00 	vldr	s15, [r3]
 80054f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80054fa:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 80054fe:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005502:	4b14      	ldr	r3, [pc, #80]	; (8005554 <calWallConrol+0xb54>)
 8005504:	edd3 7a00 	vldr	s15, [r3]
 8005508:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 800550c:	4b11      	ldr	r3, [pc, #68]	; (8005554 <calWallConrol+0xb54>)
 800550e:	edd3 7a00 	vldr	s15, [r3]
 8005512:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005516:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 800551a:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 800551e:	4b0d      	ldr	r3, [pc, #52]	; (8005554 <calWallConrol+0xb54>)
 8005520:	edd3 7a00 	vldr	s15, [r3]
 8005524:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005528:	4b0a      	ldr	r3, [pc, #40]	; (8005554 <calWallConrol+0xb54>)
 800552a:	edd3 7a00 	vldr	s15, [r3]
 800552e:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005532:	4b08      	ldr	r3, [pc, #32]	; (8005554 <calWallConrol+0xb54>)
 8005534:	edd3 7a00 	vldr	s15, [r3]
 8005538:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 800553c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005540:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005544:	230b      	movs	r3, #11
 8005546:	67bb      	str	r3, [r7, #120]	; 0x78
 8005548:	e041      	b.n	80055ce <calWallConrol+0xbce>
 800554a:	bf00      	nop
 800554c:	20000593 	.word	0x20000593
 8005550:	200002b8 	.word	0x200002b8
 8005554:	200005e0 	.word	0x200005e0
 8005558:	4423732b 	.word	0x4423732b
 800555c:	421079e6 	.word	0x421079e6
 8005560:	bdf88e7f 	.word	0xbdf88e7f
 8005564:	3e11c34f 	.word	0x3e11c34f
 8005568:	420c0000 	.word	0x420c0000
 800556c:	42700000 	.word	0x42700000
 8005570:	45e16e07 	.word	0x45e16e07
 8005574:	c39f206f 	.word	0xc39f206f
 8005578:	40a20d2f 	.word	0x40a20d2f
 800557c:	bce5a3f5 	.word	0xbce5a3f5
 8005580:	42c80000 	.word	0x42c80000
 8005584:	42f00000 	.word	0x42f00000
 8005588:	459f8cbb 	.word	0x459f8cbb
 800558c:	c2f1ade0 	.word	0xc2f1ade0
 8005590:	3f6ae698 	.word	0x3f6ae698
 8005594:	bafba882 	.word	0xbafba882
 8005598:	200005dc 	.word	0x200005dc
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 800559c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800559e:	3b01      	subs	r3, #1
 80055a0:	4a9c      	ldr	r2, [pc, #624]	; (8005814 <calWallConrol+0xe14>)
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	499a      	ldr	r1, [pc, #616]	; (8005814 <calWallConrol+0xe14>)
 80055aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 80055b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055b4:	3b01      	subs	r3, #1
 80055b6:	4a98      	ldr	r2, [pc, #608]	; (8005818 <calWallConrol+0xe18>)
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4413      	add	r3, r2
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	4996      	ldr	r1, [pc, #600]	; (8005818 <calWallConrol+0xe18>)
 80055c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 80055c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055ca:	3b01      	subs	r3, #1
 80055cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	dce3      	bgt.n	800559c <calWallConrol+0xb9c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 80055d4:	4a8f      	ldr	r2, [pc, #572]	; (8005814 <calWallConrol+0xe14>)
 80055d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 80055da:	4a8f      	ldr	r2, [pc, #572]	; (8005818 <calWallConrol+0xe18>)
 80055dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055de:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 80055e0:	4b8c      	ldr	r3, [pc, #560]	; (8005814 <calWallConrol+0xe14>)
 80055e2:	ed93 7a00 	vldr	s14, [r3]
 80055e6:	4b8b      	ldr	r3, [pc, #556]	; (8005814 <calWallConrol+0xe14>)
 80055e8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80055ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80055f0:	4b8a      	ldr	r3, [pc, #552]	; (800581c <calWallConrol+0xe1c>)
 80055f2:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 80055f6:	4b88      	ldr	r3, [pc, #544]	; (8005818 <calWallConrol+0xe18>)
 80055f8:	ed93 7a00 	vldr	s14, [r3]
 80055fc:	4b86      	ldr	r3, [pc, #536]	; (8005818 <calWallConrol+0xe18>)
 80055fe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005606:	4b86      	ldr	r3, [pc, #536]	; (8005820 <calWallConrol+0xe20>)
 8005608:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 800560c:	4b85      	ldr	r3, [pc, #532]	; (8005824 <calWallConrol+0xe24>)
 800560e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005612:	2baa      	cmp	r3, #170	; 0xaa
 8005614:	dd1a      	ble.n	800564c <calWallConrol+0xc4c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005616:	4b84      	ldr	r3, [pc, #528]	; (8005828 <calWallConrol+0xe28>)
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	ee07 3a90 	vmov	s15, r3
 800561e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005622:	4b7e      	ldr	r3, [pc, #504]	; (800581c <calWallConrol+0xe1c>)
 8005624:	edd3 7a00 	vldr	s15, [r3]
 8005628:	ee77 7a67 	vsub.f32	s15, s14, s15
 800562c:	eef0 7ae7 	vabs.f32	s15, s15
 8005630:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800582c <calWallConrol+0xe2c>
 8005634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800563c:	d506      	bpl.n	800564c <calWallConrol+0xc4c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 800563e:	4b7c      	ldr	r3, [pc, #496]	; (8005830 <calWallConrol+0xe30>)
 8005640:	781b      	ldrb	r3, [r3, #0]
 8005642:	f043 0302 	orr.w	r3, r3, #2
 8005646:	b2da      	uxtb	r2, r3
 8005648:	4b79      	ldr	r3, [pc, #484]	; (8005830 <calWallConrol+0xe30>)
 800564a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 800564c:	4b75      	ldr	r3, [pc, #468]	; (8005824 <calWallConrol+0xe24>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2baa      	cmp	r3, #170	; 0xaa
 8005652:	dd1a      	ble.n	800568a <calWallConrol+0xc8a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005654:	4b74      	ldr	r3, [pc, #464]	; (8005828 <calWallConrol+0xe28>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	ee07 3a90 	vmov	s15, r3
 800565c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005660:	4b6f      	ldr	r3, [pc, #444]	; (8005820 <calWallConrol+0xe20>)
 8005662:	edd3 7a00 	vldr	s15, [r3]
 8005666:	ee77 7a67 	vsub.f32	s15, s14, s15
 800566a:	eef0 7ae7 	vabs.f32	s15, s15
 800566e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800582c <calWallConrol+0xe2c>
 8005672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	d506      	bpl.n	800568a <calWallConrol+0xc8a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800567c:	4b6c      	ldr	r3, [pc, #432]	; (8005830 <calWallConrol+0xe30>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	b2da      	uxtb	r2, r3
 8005686:	4b6a      	ldr	r3, [pc, #424]	; (8005830 <calWallConrol+0xe30>)
 8005688:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 800568a:	4b66      	ldr	r3, [pc, #408]	; (8005824 <calWallConrol+0xe24>)
 800568c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005690:	2ba9      	cmp	r3, #169	; 0xa9
 8005692:	dd13      	ble.n	80056bc <calWallConrol+0xcbc>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005694:	4b64      	ldr	r3, [pc, #400]	; (8005828 <calWallConrol+0xe28>)
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	ee07 3a90 	vmov	s15, r3
 800569c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056a0:	4b5e      	ldr	r3, [pc, #376]	; (800581c <calWallConrol+0xe1c>)
 80056a2:	edd3 7a00 	vldr	s15, [r3]
 80056a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056aa:	eef0 7ae7 	vabs.f32	s15, s15
 80056ae:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800582c <calWallConrol+0xe2c>
 80056b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	dd06      	ble.n	80056ca <calWallConrol+0xcca>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 80056bc:	4b5c      	ldr	r3, [pc, #368]	; (8005830 <calWallConrol+0xe30>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f023 0302 	bic.w	r3, r3, #2
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	4b5a      	ldr	r3, [pc, #360]	; (8005830 <calWallConrol+0xe30>)
 80056c8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 80056ca:	4b56      	ldr	r3, [pc, #344]	; (8005824 <calWallConrol+0xe24>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2ba9      	cmp	r3, #169	; 0xa9
 80056d0:	dd13      	ble.n	80056fa <calWallConrol+0xcfa>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 80056d2:	4b55      	ldr	r3, [pc, #340]	; (8005828 <calWallConrol+0xe28>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	ee07 3a90 	vmov	s15, r3
 80056da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80056de:	4b50      	ldr	r3, [pc, #320]	; (8005820 <calWallConrol+0xe20>)
 80056e0:	edd3 7a00 	vldr	s15, [r3]
 80056e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056e8:	eef0 7ae7 	vabs.f32	s15, s15
 80056ec:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 800582c <calWallConrol+0xe2c>
 80056f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056f8:	dd06      	ble.n	8005708 <calWallConrol+0xd08>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 80056fa:	4b4d      	ldr	r3, [pc, #308]	; (8005830 <calWallConrol+0xe30>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	f023 0301 	bic.w	r3, r3, #1
 8005702:	b2da      	uxtb	r2, r3
 8005704:	4b4a      	ldr	r3, [pc, #296]	; (8005830 <calWallConrol+0xe30>)
 8005706:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005708:	4b49      	ldr	r3, [pc, #292]	; (8005830 <calWallConrol+0xe30>)
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	f200 813d 	bhi.w	800598c <calWallConrol+0xf8c>
 8005712:	a201      	add	r2, pc, #4	; (adr r2, 8005718 <calWallConrol+0xd18>)
 8005714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005718:	08005729 	.word	0x08005729
 800571c:	0800577d 	.word	0x0800577d
 8005720:	08005841 	.word	0x08005841
 8005724:	080058d7 	.word	0x080058d7
		case 0:			//両壁なし
			PID_wall = 0;
 8005728:	f04f 0300 	mov.w	r3, #0
 800572c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005730:	2000      	movs	r0, #0
 8005732:	f001 faf3 	bl	8006d1c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005736:	2000      	movs	r0, #0
 8005738:	f001 fb26 	bl	8006d88 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 800573c:	4b39      	ldr	r3, [pc, #228]	; (8005824 <calWallConrol+0xe24>)
 800573e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005742:	ee07 3a90 	vmov	s15, r3
 8005746:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574a:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <calWallConrol+0xe34>)
 800574c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005750:	4b34      	ldr	r3, [pc, #208]	; (8005824 <calWallConrol+0xe24>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	ee07 3a90 	vmov	s15, r3
 8005758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800575c:	4b36      	ldr	r3, [pc, #216]	; (8005838 <calWallConrol+0xe38>)
 800575e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005762:	4b36      	ldr	r3, [pc, #216]	; (800583c <calWallConrol+0xe3c>)
 8005764:	f04f 0200 	mov.w	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 800576a:	4b34      	ldr	r3, [pc, #208]	; (800583c <calWallConrol+0xe3c>)
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005772:	4b32      	ldr	r3, [pc, #200]	; (800583c <calWallConrol+0xe3c>)
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	605a      	str	r2, [r3, #4]
			break;
 800577a:	e107      	b.n	800598c <calWallConrol+0xf8c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 800577c:	2000      	movs	r0, #0
 800577e:	f001 facd 	bl	8006d1c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005782:	2001      	movs	r0, #1
 8005784:	f001 fb00 	bl	8006d88 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005788:	4b26      	ldr	r3, [pc, #152]	; (8005824 <calWallConrol+0xe24>)
 800578a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005796:	4b27      	ldr	r3, [pc, #156]	; (8005834 <calWallConrol+0xe34>)
 8005798:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <calWallConrol+0xe38>)
 800579e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057a0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057a2:	4b20      	ldr	r3, [pc, #128]	; (8005824 <calWallConrol+0xe24>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057ae:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80057b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057b6:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 80057ba:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <calWallConrol+0xe24>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	ee07 3a90 	vmov	s15, r3
 80057c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80057ca:	4b1c      	ldr	r3, [pc, #112]	; (800583c <calWallConrol+0xe3c>)
 80057cc:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 80057d0:	4b1a      	ldr	r3, [pc, #104]	; (800583c <calWallConrol+0xe3c>)
 80057d2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 80057d6:	4b19      	ldr	r3, [pc, #100]	; (800583c <calWallConrol+0xe3c>)
 80057d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80057dc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80057e0:	4b16      	ldr	r3, [pc, #88]	; (800583c <calWallConrol+0xe3c>)
 80057e2:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80057e6:	4b15      	ldr	r3, [pc, #84]	; (800583c <calWallConrol+0xe3c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a14      	ldr	r2, [pc, #80]	; (800583c <calWallConrol+0xe3c>)
 80057ec:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80057ee:	4b13      	ldr	r3, [pc, #76]	; (800583c <calWallConrol+0xe3c>)
 80057f0:	ed93 7a00 	vldr	s14, [r3]
 80057f4:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80057f8:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80057fc:	4b0f      	ldr	r3, [pc, #60]	; (800583c <calWallConrol+0xe3c>)
 80057fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8005802:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005806:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 800580a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800580e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005812:	e0bb      	b.n	800598c <calWallConrol+0xf8c>
 8005814:	20000608 	.word	0x20000608
 8005818:	20000638 	.word	0x20000638
 800581c:	200006c8 	.word	0x200006c8
 8005820:	200006cc 	.word	0x200006cc
 8005824:	200002b8 	.word	0x200002b8
 8005828:	20000448 	.word	0x20000448
 800582c:	42a00000 	.word	0x42a00000
 8005830:	20000593 	.word	0x20000593
 8005834:	200005ac 	.word	0x200005ac
 8005838:	200005b0 	.word	0x200005b0
 800583c:	20000578 	.word	0x20000578
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005840:	2001      	movs	r0, #1
 8005842:	f001 fa6b 	bl	8006d1c <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005846:	2000      	movs	r0, #0
 8005848:	f001 fa9e 	bl	8006d88 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 800584c:	4aa4      	ldr	r2, [pc, #656]	; (8005ae0 <calWallConrol+0x10e0>)
 800584e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005850:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005852:	4ba4      	ldr	r3, [pc, #656]	; (8005ae4 <calWallConrol+0x10e4>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	ee07 3a90 	vmov	s15, r3
 800585a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800585e:	4ba2      	ldr	r3, [pc, #648]	; (8005ae8 <calWallConrol+0x10e8>)
 8005860:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005864:	4b9f      	ldr	r3, [pc, #636]	; (8005ae4 <calWallConrol+0x10e4>)
 8005866:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800586a:	ee07 3a90 	vmov	s15, r3
 800586e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005872:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005876:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 800587a:	4b9a      	ldr	r3, [pc, #616]	; (8005ae4 <calWallConrol+0x10e4>)
 800587c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005880:	ee07 3a90 	vmov	s15, r3
 8005884:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005888:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 800588c:	4b97      	ldr	r3, [pc, #604]	; (8005aec <calWallConrol+0x10ec>)
 800588e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005892:	4b96      	ldr	r3, [pc, #600]	; (8005aec <calWallConrol+0x10ec>)
 8005894:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005898:	4b94      	ldr	r3, [pc, #592]	; (8005aec <calWallConrol+0x10ec>)
 800589a:	edd3 7a01 	vldr	s15, [r3, #4]
 800589e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 80058a2:	4b92      	ldr	r3, [pc, #584]	; (8005aec <calWallConrol+0x10ec>)
 80058a4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 80058a8:	4b90      	ldr	r3, [pc, #576]	; (8005aec <calWallConrol+0x10ec>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a8f      	ldr	r2, [pc, #572]	; (8005aec <calWallConrol+0x10ec>)
 80058ae:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058b0:	4b8e      	ldr	r3, [pc, #568]	; (8005aec <calWallConrol+0x10ec>)
 80058b2:	ed93 7a00 	vldr	s14, [r3]
 80058b6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80058ba:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 80058be:	4b8b      	ldr	r3, [pc, #556]	; (8005aec <calWallConrol+0x10ec>)
 80058c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80058c4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80058c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 80058cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058d0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80058d4:	e05a      	b.n	800598c <calWallConrol+0xf8c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f001 fa20 	bl	8006d1c <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 80058dc:	2001      	movs	r0, #1
 80058de:	f001 fa53 	bl	8006d88 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 80058e2:	4a7f      	ldr	r2, [pc, #508]	; (8005ae0 <calWallConrol+0x10e0>)
 80058e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058e6:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 80058e8:	4a7f      	ldr	r2, [pc, #508]	; (8005ae8 <calWallConrol+0x10e8>)
 80058ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058ec:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 80058ee:	4b7d      	ldr	r3, [pc, #500]	; (8005ae4 <calWallConrol+0x10e4>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058fa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80058fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005902:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005906:	4b77      	ldr	r3, [pc, #476]	; (8005ae4 <calWallConrol+0x10e4>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005916:	4b73      	ldr	r3, [pc, #460]	; (8005ae4 <calWallConrol+0x10e4>)
 8005918:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800591c:	ee07 3a90 	vmov	s15, r3
 8005920:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005924:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005928:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 800592c:	4b6d      	ldr	r3, [pc, #436]	; (8005ae4 <calWallConrol+0x10e4>)
 800592e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005932:	ee07 3a90 	vmov	s15, r3
 8005936:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800593a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 800593e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005942:	4b6a      	ldr	r3, [pc, #424]	; (8005aec <calWallConrol+0x10ec>)
 8005944:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005948:	4b68      	ldr	r3, [pc, #416]	; (8005aec <calWallConrol+0x10ec>)
 800594a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 800594e:	4b67      	ldr	r3, [pc, #412]	; (8005aec <calWallConrol+0x10ec>)
 8005950:	edd3 7a01 	vldr	s15, [r3, #4]
 8005954:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005958:	4b64      	ldr	r3, [pc, #400]	; (8005aec <calWallConrol+0x10ec>)
 800595a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 800595e:	4b63      	ldr	r3, [pc, #396]	; (8005aec <calWallConrol+0x10ec>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a62      	ldr	r2, [pc, #392]	; (8005aec <calWallConrol+0x10ec>)
 8005964:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005966:	4b61      	ldr	r3, [pc, #388]	; (8005aec <calWallConrol+0x10ec>)
 8005968:	ed93 7a00 	vldr	s14, [r3]
 800596c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005970:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005974:	4b5d      	ldr	r3, [pc, #372]	; (8005aec <calWallConrol+0x10ec>)
 8005976:	edd3 6a02 	vldr	s13, [r3, #8]
 800597a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 800597e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005982:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005986:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800598a:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 1000) {
 800598c:	4b58      	ldr	r3, [pc, #352]	; (8005af0 <calWallConrol+0x10f0>)
 800598e:	edd3 7a00 	vldr	s15, [r3]
 8005992:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8005af4 <calWallConrol+0x10f4>
 8005996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800599e:	dd04      	ble.n	80059aa <calWallConrol+0xfaa>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 1000;
 80059a0:	4b55      	ldr	r3, [pc, #340]	; (8005af8 <calWallConrol+0x10f8>)
 80059a2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 1000;
 80059a4:	4b55      	ldr	r3, [pc, #340]	; (8005afc <calWallConrol+0x10fc>)
 80059a6:	673b      	str	r3, [r7, #112]	; 0x70
 80059a8:	e023      	b.n	80059f2 <calWallConrol+0xff2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 80059aa:	4b51      	ldr	r3, [pc, #324]	; (8005af0 <calWallConrol+0x10f0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fa fdf2 	bl	8000598 <__aeabi_f2d>
 80059b4:	a346      	add	r3, pc, #280	; (adr r3, 8005ad0 <calWallConrol+0x10d0>)
 80059b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ba:	f7fa fe45 	bl	8000648 <__aeabi_dmul>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4610      	mov	r0, r2
 80059c4:	4619      	mov	r1, r3
 80059c6:	f7fb f917 	bl	8000bf8 <__aeabi_d2f>
 80059ca:	4603      	mov	r3, r0
 80059cc:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 80059ce:	4b48      	ldr	r3, [pc, #288]	; (8005af0 <calWallConrol+0x10f0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fa fde0 	bl	8000598 <__aeabi_f2d>
 80059d8:	a33f      	add	r3, pc, #252	; (adr r3, 8005ad8 <calWallConrol+0x10d8>)
 80059da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059de:	f7fa fe33 	bl	8000648 <__aeabi_dmul>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4610      	mov	r0, r2
 80059e8:	4619      	mov	r1, r3
 80059ea:	f7fb f905 	bl	8000bf8 <__aeabi_d2f>
 80059ee:	4603      	mov	r3, r0
 80059f0:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <calWallConrol+0x1100>)
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80059fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a04:	dd12      	ble.n	8005a2c <calWallConrol+0x102c>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <calWallConrol+0x1100>)
 8005a08:	edd3 7a00 	vldr	s15, [r3]
 8005a0c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8005b04 <calWallConrol+0x1104>
 8005a10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a18:	d808      	bhi.n	8005a2c <calWallConrol+0x102c>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005a1a:	4b3b      	ldr	r3, [pc, #236]	; (8005b08 <calWallConrol+0x1108>)
 8005a1c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005a1e:	4b3b      	ldr	r3, [pc, #236]	; (8005b0c <calWallConrol+0x110c>)
 8005a20:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005a22:	4b3b      	ldr	r3, [pc, #236]	; (8005b10 <calWallConrol+0x1110>)
 8005a24:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005a26:	4b3b      	ldr	r3, [pc, #236]	; (8005b14 <calWallConrol+0x1114>)
 8005a28:	637b      	str	r3, [r7, #52]	; 0x34
 8005a2a:	e025      	b.n	8005a78 <calWallConrol+0x1078>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005a2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ae4 <calWallConrol+0x10e4>)
 8005a2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a32:	2bd2      	cmp	r3, #210	; 0xd2
 8005a34:	dd07      	ble.n	8005a46 <calWallConrol+0x1046>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <calWallConrol+0x1118>)
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	4b35      	ldr	r3, [pc, #212]	; (8005b18 <calWallConrol+0x1118>)
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	e006      	b.n	8005a54 <calWallConrol+0x1054>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005a46:	4b34      	ldr	r3, [pc, #208]	; (8005b18 <calWallConrol+0x1118>)
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	f023 0302 	bic.w	r3, r3, #2
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	4b31      	ldr	r3, [pc, #196]	; (8005b18 <calWallConrol+0x1118>)
 8005a52:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005a54:	4b23      	ldr	r3, [pc, #140]	; (8005ae4 <calWallConrol+0x10e4>)
 8005a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a62:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005a66:	f04f 0300 	mov.w	r3, #0
 8005a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005a6c:	f04f 0300 	mov.w	r3, #0
 8005a70:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005a78:	4b28      	ldr	r3, [pc, #160]	; (8005b1c <calWallConrol+0x111c>)
 8005a7a:	edd3 7a00 	vldr	s15, [r3]
 8005a7e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8005a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8a:	dd12      	ble.n	8005ab2 <calWallConrol+0x10b2>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005a8c:	4b23      	ldr	r3, [pc, #140]	; (8005b1c <calWallConrol+0x111c>)
 8005a8e:	edd3 7a00 	vldr	s15, [r3]
 8005a92:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005b04 <calWallConrol+0x1104>
 8005a96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a9e:	d808      	bhi.n	8005ab2 <calWallConrol+0x10b2>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005aa0:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <calWallConrol+0x1120>)
 8005aa2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005aa4:	4b1f      	ldr	r3, [pc, #124]	; (8005b24 <calWallConrol+0x1124>)
 8005aa6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005aa8:	4b1f      	ldr	r3, [pc, #124]	; (8005b28 <calWallConrol+0x1128>)
 8005aaa:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005aac:	4b1f      	ldr	r3, [pc, #124]	; (8005b2c <calWallConrol+0x112c>)
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab0:	e056      	b.n	8005b60 <calWallConrol+0x1160>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <calWallConrol+0x10e4>)
 8005ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab6:	2bd2      	cmp	r3, #210	; 0xd2
 8005ab8:	dd3a      	ble.n	8005b30 <calWallConrol+0x1130>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005aba:	4b17      	ldr	r3, [pc, #92]	; (8005b18 <calWallConrol+0x1118>)
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	b2da      	uxtb	r2, r3
 8005ac4:	4b14      	ldr	r3, [pc, #80]	; (8005b18 <calWallConrol+0x1118>)
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	e039      	b.n	8005b3e <calWallConrol+0x113e>
 8005aca:	bf00      	nop
 8005acc:	f3af 8000 	nop.w
 8005ad0:	33333333 	.word	0x33333333
 8005ad4:	3fe33333 	.word	0x3fe33333
 8005ad8:	1eb851ec 	.word	0x1eb851ec
 8005adc:	bfb1eb85 	.word	0xbfb1eb85
 8005ae0:	200005ac 	.word	0x200005ac
 8005ae4:	200002b8 	.word	0x200002b8
 8005ae8:	200005b0 	.word	0x200005b0
 8005aec:	20000578 	.word	0x20000578
 8005af0:	200004d8 	.word	0x200004d8
 8005af4:	447a0000 	.word	0x447a0000
 8005af8:	44160000 	.word	0x44160000
 8005afc:	c28c0000 	.word	0xc28c0000
 8005b00:	200005dc 	.word	0x200005dc
 8005b04:	42a00000 	.word	0x42a00000
 8005b08:	43c833fb 	.word	0x43c833fb
 8005b0c:	c100d596 	.word	0xc100d596
 8005b10:	3e3328b7 	.word	0x3e3328b7
 8005b14:	b9ee8d11 	.word	0xb9ee8d11
 8005b18:	20000594 	.word	0x20000594
 8005b1c:	200005e0 	.word	0x200005e0
 8005b20:	44062309 	.word	0x44062309
 8005b24:	c1681e49 	.word	0xc1681e49
 8005b28:	3e7f18ec 	.word	0x3e7f18ec
 8005b2c:	ba35209a 	.word	0xba35209a
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005b30:	4bb5      	ldr	r3, [pc, #724]	; (8005e08 <calWallConrol+0x1408>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	4bb3      	ldr	r3, [pc, #716]	; (8005e08 <calWallConrol+0x1408>)
 8005b3c:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8005b3e:	4bb3      	ldr	r3, [pc, #716]	; (8005e0c <calWallConrol+0x140c>)
 8005b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b42:	ee07 3a90 	vmov	s15, r3
 8005b46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b4a:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8005b60:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8005b64:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8005b68:	4ba9      	ldr	r3, [pc, #676]	; (8005e10 <calWallConrol+0x1410>)
 8005b6a:	edd3 7a00 	vldr	s15, [r3]
 8005b6e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005b72:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b76:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8005b7a:	4ba5      	ldr	r3, [pc, #660]	; (8005e10 <calWallConrol+0x1410>)
 8005b7c:	edd3 7a00 	vldr	s15, [r3]
 8005b80:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005b84:	4ba2      	ldr	r3, [pc, #648]	; (8005e10 <calWallConrol+0x1410>)
 8005b86:	edd3 7a00 	vldr	s15, [r3]
 8005b8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 8005b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 8005b92:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8005b96:	4b9e      	ldr	r3, [pc, #632]	; (8005e10 <calWallConrol+0x1410>)
 8005b98:	edd3 7a00 	vldr	s15, [r3]
 8005b9c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 8005ba0:	4b9b      	ldr	r3, [pc, #620]	; (8005e10 <calWallConrol+0x1410>)
 8005ba2:	edd3 7a00 	vldr	s15, [r3]
 8005ba6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 8005baa:	4b99      	ldr	r3, [pc, #612]	; (8005e10 <calWallConrol+0x1410>)
 8005bac:	edd3 7a00 	vldr	s15, [r3]
 8005bb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 8005bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bb8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 8005bbc:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 8005bc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bc4:	4b93      	ldr	r3, [pc, #588]	; (8005e14 <calWallConrol+0x1414>)
 8005bc6:	edd3 7a00 	vldr	s15, [r3]
 8005bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bce:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bd2:	edd7 6a08 	vldr	s13, [r7, #32]
 8005bd6:	4b8f      	ldr	r3, [pc, #572]	; (8005e14 <calWallConrol+0x1414>)
 8005bd8:	edd3 7a00 	vldr	s15, [r3]
 8005bdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005be0:	4b8c      	ldr	r3, [pc, #560]	; (8005e14 <calWallConrol+0x1414>)
 8005be2:	edd3 7a00 	vldr	s15, [r3]
 8005be6:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 8005bea:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8005bee:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005bf2:	4b88      	ldr	r3, [pc, #544]	; (8005e14 <calWallConrol+0x1414>)
 8005bf4:	edd3 7a00 	vldr	s15, [r3]
 8005bf8:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005bfc:	4b85      	ldr	r3, [pc, #532]	; (8005e14 <calWallConrol+0x1414>)
 8005bfe:	edd3 7a00 	vldr	s15, [r3]
 8005c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005c06:	4b83      	ldr	r3, [pc, #524]	; (8005e14 <calWallConrol+0x1414>)
 8005c08:	edd3 7a00 	vldr	s15, [r3]
 8005c0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8005c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c14:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 8005c18:	230b      	movs	r3, #11
 8005c1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c1c:	e018      	b.n	8005c50 <calWallConrol+0x1250>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8005c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c20:	3b01      	subs	r3, #1
 8005c22:	4a7d      	ldr	r2, [pc, #500]	; (8005e18 <calWallConrol+0x1418>)
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	497b      	ldr	r1, [pc, #492]	; (8005e18 <calWallConrol+0x1418>)
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8005c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c36:	3b01      	subs	r3, #1
 8005c38:	4a78      	ldr	r2, [pc, #480]	; (8005e1c <calWallConrol+0x141c>)
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4413      	add	r3, r2
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	4976      	ldr	r1, [pc, #472]	; (8005e1c <calWallConrol+0x141c>)
 8005c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4c:	3b01      	subs	r3, #1
 8005c4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	dce3      	bgt.n	8005c1e <calWallConrol+0x121e>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 8005c56:	4a70      	ldr	r2, [pc, #448]	; (8005e18 <calWallConrol+0x1418>)
 8005c58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5a:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8005c5c:	4a6f      	ldr	r2, [pc, #444]	; (8005e1c <calWallConrol+0x141c>)
 8005c5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c60:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8005c62:	4b6d      	ldr	r3, [pc, #436]	; (8005e18 <calWallConrol+0x1418>)
 8005c64:	ed93 7a00 	vldr	s14, [r3]
 8005c68:	4b6b      	ldr	r3, [pc, #428]	; (8005e18 <calWallConrol+0x1418>)
 8005c6a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c72:	4b6b      	ldr	r3, [pc, #428]	; (8005e20 <calWallConrol+0x1420>)
 8005c74:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 8005c78:	4b68      	ldr	r3, [pc, #416]	; (8005e1c <calWallConrol+0x141c>)
 8005c7a:	ed93 7a00 	vldr	s14, [r3]
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <calWallConrol+0x141c>)
 8005c80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c88:	4b66      	ldr	r3, [pc, #408]	; (8005e24 <calWallConrol+0x1424>)
 8005c8a:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 8005c8e:	4b5f      	ldr	r3, [pc, #380]	; (8005e0c <calWallConrol+0x140c>)
 8005c90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c94:	2bd2      	cmp	r3, #210	; 0xd2
 8005c96:	dd1a      	ble.n	8005cce <calWallConrol+0x12ce>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005c98:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <calWallConrol+0x1428>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ca4:	4b5e      	ldr	r3, [pc, #376]	; (8005e20 <calWallConrol+0x1420>)
 8005ca6:	edd3 7a00 	vldr	s15, [r3]
 8005caa:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cae:	eef0 7ae7 	vabs.f32	s15, s15
 8005cb2:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8005e2c <calWallConrol+0x142c>
 8005cb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbe:	d506      	bpl.n	8005cce <calWallConrol+0x12ce>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005cc0:	4b51      	ldr	r3, [pc, #324]	; (8005e08 <calWallConrol+0x1408>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	f043 0302 	orr.w	r3, r3, #2
 8005cc8:	b2da      	uxtb	r2, r3
 8005cca:	4b4f      	ldr	r3, [pc, #316]	; (8005e08 <calWallConrol+0x1408>)
 8005ccc:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 8005cce:	4b4f      	ldr	r3, [pc, #316]	; (8005e0c <calWallConrol+0x140c>)
 8005cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd2:	2bd2      	cmp	r3, #210	; 0xd2
 8005cd4:	dd1a      	ble.n	8005d0c <calWallConrol+0x130c>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005cd6:	4b54      	ldr	r3, [pc, #336]	; (8005e28 <calWallConrol+0x1428>)
 8005cd8:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005cda:	ee07 3a90 	vmov	s15, r3
 8005cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce2:	4b50      	ldr	r3, [pc, #320]	; (8005e24 <calWallConrol+0x1424>)
 8005ce4:	edd3 7a00 	vldr	s15, [r3]
 8005ce8:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8005cec:	eef0 7ae7 	vabs.f32	s15, s15
 8005cf0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8005e2c <calWallConrol+0x142c>
 8005cf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cfc:	d506      	bpl.n	8005d0c <calWallConrol+0x130c>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005cfe:	4b42      	ldr	r3, [pc, #264]	; (8005e08 <calWallConrol+0x1408>)
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	f043 0301 	orr.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	4b3f      	ldr	r3, [pc, #252]	; (8005e08 <calWallConrol+0x1408>)
 8005d0a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8005d0c:	4b3f      	ldr	r3, [pc, #252]	; (8005e0c <calWallConrol+0x140c>)
 8005d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d12:	2bd1      	cmp	r3, #209	; 0xd1
 8005d14:	dd13      	ble.n	8005d3e <calWallConrol+0x133e>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 8005d16:	4b44      	ldr	r3, [pc, #272]	; (8005e28 <calWallConrol+0x1428>)
 8005d18:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d22:	4b3f      	ldr	r3, [pc, #252]	; (8005e20 <calWallConrol+0x1420>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d2c:	eef0 7ae7 	vabs.f32	s15, s15
 8005d30:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005e2c <calWallConrol+0x142c>
 8005d34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3c:	dd06      	ble.n	8005d4c <calWallConrol+0x134c>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005d3e:	4b32      	ldr	r3, [pc, #200]	; (8005e08 <calWallConrol+0x1408>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	f023 0302 	bic.w	r3, r3, #2
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b2f      	ldr	r3, [pc, #188]	; (8005e08 <calWallConrol+0x1408>)
 8005d4a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8005d4c:	4b2f      	ldr	r3, [pc, #188]	; (8005e0c <calWallConrol+0x140c>)
 8005d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d50:	2bd1      	cmp	r3, #209	; 0xd1
 8005d52:	dd13      	ble.n	8005d7c <calWallConrol+0x137c>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8005d54:	4b34      	ldr	r3, [pc, #208]	; (8005e28 <calWallConrol+0x1428>)
 8005d56:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d60:	4b30      	ldr	r3, [pc, #192]	; (8005e24 <calWallConrol+0x1424>)
 8005d62:	edd3 7a00 	vldr	s15, [r3]
 8005d66:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8005d6a:	eef0 7ae7 	vabs.f32	s15, s15
 8005d6e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005e2c <calWallConrol+0x142c>
 8005d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7a:	dd06      	ble.n	8005d8a <calWallConrol+0x138a>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8005d7c:	4b22      	ldr	r3, [pc, #136]	; (8005e08 <calWallConrol+0x1408>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f023 0301 	bic.w	r3, r3, #1
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <calWallConrol+0x1408>)
 8005d88:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 8005d8a:	4b1f      	ldr	r3, [pc, #124]	; (8005e08 <calWallConrol+0x1408>)
 8005d8c:	781b      	ldrb	r3, [r3, #0]
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	f200 8155 	bhi.w	800603e <calWallConrol+0x163e>
 8005d94:	a201      	add	r2, pc, #4	; (adr r2, 8005d9c <calWallConrol+0x139c>)
 8005d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d9a:	bf00      	nop
 8005d9c:	08005dad 	.word	0x08005dad
 8005da0:	08005e41 	.word	0x08005e41
 8005da4:	08005ee1 	.word	0x08005ee1
 8005da8:	08005f7f 	.word	0x08005f7f
		case 0:			//両壁なし
			PID_wall += 0;
 8005dac:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8005db0:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005e30 <calWallConrol+0x1430>
 8005db4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005db8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f000 ffbf 	bl	8006d40 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f000 ffce 	bl	8006d64 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005dc8:	4b10      	ldr	r3, [pc, #64]	; (8005e0c <calWallConrol+0x140c>)
 8005dca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dd6:	4b17      	ldr	r3, [pc, #92]	; (8005e34 <calWallConrol+0x1434>)
 8005dd8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005ddc:	4b0b      	ldr	r3, [pc, #44]	; (8005e0c <calWallConrol+0x140c>)
 8005dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de0:	ee07 3a90 	vmov	s15, r3
 8005de4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005de8:	4b13      	ldr	r3, [pc, #76]	; (8005e38 <calWallConrol+0x1438>)
 8005dea:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8005dee:	4b13      	ldr	r3, [pc, #76]	; (8005e3c <calWallConrol+0x143c>)
 8005df0:	f04f 0200 	mov.w	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 8005df6:	4b11      	ldr	r3, [pc, #68]	; (8005e3c <calWallConrol+0x143c>)
 8005df8:	f04f 0200 	mov.w	r2, #0
 8005dfc:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8005dfe:	4b0f      	ldr	r3, [pc, #60]	; (8005e3c <calWallConrol+0x143c>)
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	605a      	str	r2, [r3, #4]
			break;
 8005e06:	e11a      	b.n	800603e <calWallConrol+0x163e>
 8005e08:	20000594 	.word	0x20000594
 8005e0c:	200002b8 	.word	0x200002b8
 8005e10:	200005dc 	.word	0x200005dc
 8005e14:	200005e0 	.word	0x200005e0
 8005e18:	20000668 	.word	0x20000668
 8005e1c:	20000698 	.word	0x20000698
 8005e20:	200006d0 	.word	0x200006d0
 8005e24:	200006d4 	.word	0x200006d4
 8005e28:	20000448 	.word	0x20000448
 8005e2c:	42a00000 	.word	0x42a00000
 8005e30:	00000000 	.word	0x00000000
 8005e34:	200005a4 	.word	0x200005a4
 8005e38:	200005a8 	.word	0x200005a8
 8005e3c:	20000584 	.word	0x20000584
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8005e40:	2000      	movs	r0, #0
 8005e42:	f000 ff7d 	bl	8006d40 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005e46:	2001      	movs	r0, #1
 8005e48:	f000 ff8c 	bl	8006d64 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8005e4c:	4b87      	ldr	r3, [pc, #540]	; (800606c <calWallConrol+0x166c>)
 8005e4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e5a:	4b85      	ldr	r3, [pc, #532]	; (8006070 <calWallConrol+0x1670>)
 8005e5c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005e60:	4a84      	ldr	r2, [pc, #528]	; (8006074 <calWallConrol+0x1674>)
 8005e62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005e64:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 8005e66:	4b81      	ldr	r3, [pc, #516]	; (800606c <calWallConrol+0x166c>)
 8005e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e72:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e7a:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 8005e7e:	4b7b      	ldr	r3, [pc, #492]	; (800606c <calWallConrol+0x166c>)
 8005e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 8005e8e:	4b7a      	ldr	r3, [pc, #488]	; (8006078 <calWallConrol+0x1678>)
 8005e90:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005e94:	4b78      	ldr	r3, [pc, #480]	; (8006078 <calWallConrol+0x1678>)
 8005e96:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005e9a:	4b77      	ldr	r3, [pc, #476]	; (8006078 <calWallConrol+0x1678>)
 8005e9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ea0:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005ea4:	4b74      	ldr	r3, [pc, #464]	; (8006078 <calWallConrol+0x1678>)
 8005ea6:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005eaa:	4b73      	ldr	r3, [pc, #460]	; (8006078 <calWallConrol+0x1678>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a72      	ldr	r2, [pc, #456]	; (8006078 <calWallConrol+0x1678>)
 8005eb0:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005eb2:	4b71      	ldr	r3, [pc, #452]	; (8006078 <calWallConrol+0x1678>)
 8005eb4:	ed93 7a00 	vldr	s14, [r3]
 8005eb8:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005ec0:	4b6d      	ldr	r3, [pc, #436]	; (8006078 <calWallConrol+0x1678>)
 8005ec2:	edd3 6a02 	vldr	s13, [r3, #8]
 8005ec6:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005eca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ece:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005ed2:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eda:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005ede:	e0ae      	b.n	800603e <calWallConrol+0x163e>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8005ee0:	2001      	movs	r0, #1
 8005ee2:	f000 ff2d 	bl	8006d40 <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f000 ff3c 	bl	8006d64 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005eec:	4a60      	ldr	r2, [pc, #384]	; (8006070 <calWallConrol+0x1670>)
 8005eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ef0:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8005ef2:	4b5e      	ldr	r3, [pc, #376]	; (800606c <calWallConrol+0x166c>)
 8005ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005efe:	4b5d      	ldr	r3, [pc, #372]	; (8006074 <calWallConrol+0x1674>)
 8005f00:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f04:	4b59      	ldr	r3, [pc, #356]	; (800606c <calWallConrol+0x166c>)
 8005f06:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f0a:	ee07 3a90 	vmov	s15, r3
 8005f0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f12:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005f16:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005f1a:	4b54      	ldr	r3, [pc, #336]	; (800606c <calWallConrol+0x166c>)
 8005f1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f2c:	4b52      	ldr	r3, [pc, #328]	; (8006078 <calWallConrol+0x1678>)
 8005f2e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005f32:	4b51      	ldr	r3, [pc, #324]	; (8006078 <calWallConrol+0x1678>)
 8005f34:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005f38:	4b4f      	ldr	r3, [pc, #316]	; (8006078 <calWallConrol+0x1678>)
 8005f3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8005f3e:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8005f42:	4b4d      	ldr	r3, [pc, #308]	; (8006078 <calWallConrol+0x1678>)
 8005f44:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8005f48:	4b4b      	ldr	r3, [pc, #300]	; (8006078 <calWallConrol+0x1678>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a4a      	ldr	r2, [pc, #296]	; (8006078 <calWallConrol+0x1678>)
 8005f4e:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f50:	4b49      	ldr	r3, [pc, #292]	; (8006078 <calWallConrol+0x1678>)
 8005f52:	ed93 7a00 	vldr	s14, [r3]
 8005f56:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005f5a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8005f5e:	4b46      	ldr	r3, [pc, #280]	; (8006078 <calWallConrol+0x1678>)
 8005f60:	edd3 6a02 	vldr	s13, [r3, #8]
 8005f64:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8005f68:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8005f70:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8005f74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f78:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005f7c:	e05f      	b.n	800603e <calWallConrol+0x163e>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 8005f7e:	2001      	movs	r0, #1
 8005f80:	f000 fede 	bl	8006d40 <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 8005f84:	2001      	movs	r0, #1
 8005f86:	f000 feed 	bl	8006d64 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8005f8a:	4a39      	ldr	r2, [pc, #228]	; (8006070 <calWallConrol+0x1670>)
 8005f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8e:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 8005f90:	4a38      	ldr	r2, [pc, #224]	; (8006074 <calWallConrol+0x1674>)
 8005f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f94:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005f96:	4b35      	ldr	r3, [pc, #212]	; (800606c <calWallConrol+0x166c>)
 8005f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f9a:	ee07 3a90 	vmov	s15, r3
 8005f9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fa2:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8005fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005faa:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 8005fae:	4b2f      	ldr	r3, [pc, #188]	; (800606c <calWallConrol+0x166c>)
 8005fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb2:	ee07 3a90 	vmov	s15, r3
 8005fb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fbe:	4b2b      	ldr	r3, [pc, #172]	; (800606c <calWallConrol+0x166c>)
 8005fc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fcc:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8005fd0:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 8005fd4:	4b25      	ldr	r3, [pc, #148]	; (800606c <calWallConrol+0x166c>)
 8005fd6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fe2:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 8005fe6:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005fea:	4b23      	ldr	r3, [pc, #140]	; (8006078 <calWallConrol+0x1678>)
 8005fec:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8005ff0:	4b21      	ldr	r3, [pc, #132]	; (8006078 <calWallConrol+0x1678>)
 8005ff2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 8005ff6:	4b20      	ldr	r3, [pc, #128]	; (8006078 <calWallConrol+0x1678>)
 8005ff8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005ffc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006000:	4b1d      	ldr	r3, [pc, #116]	; (8006078 <calWallConrol+0x1678>)
 8006002:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 8006006:	4b1c      	ldr	r3, [pc, #112]	; (8006078 <calWallConrol+0x1678>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1b      	ldr	r2, [pc, #108]	; (8006078 <calWallConrol+0x1678>)
 800600c:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <calWallConrol+0x1678>)
 8006010:	ed93 7a00 	vldr	s14, [r3]
 8006014:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8006018:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 800601c:	4b16      	ldr	r3, [pc, #88]	; (8006078 <calWallConrol+0x1678>)
 800601e:	edd3 6a02 	vldr	s13, [r3, #8]
 8006022:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 8006026:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800602a:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 800602e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006036:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800603a:	e000      	b.n	800603e <calWallConrol+0x163e>
			break;
 800603c:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 800603e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006042:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800607c <calWallConrol+0x167c>
 8006046:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800604a:	4b0d      	ldr	r3, [pc, #52]	; (8006080 <calWallConrol+0x1680>)
 800604c:	edd3 7a00 	vldr	s15, [r3]
 8006050:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006054:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 8006058:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800605a:	ee07 3a90 	vmov	s15, r3
}
 800605e:	eeb0 0a67 	vmov.f32	s0, s15
 8006062:	37a8      	adds	r7, #168	; 0xa8
 8006064:	46bd      	mov	sp, r7
 8006066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800606a:	bf00      	nop
 800606c:	200002b8 	.word	0x200002b8
 8006070:	200005a4 	.word	0x200005a4
 8006074:	200005a8 	.word	0x200005a8
 8006078:	20000584 	.word	0x20000584
 800607c:	44d1e000 	.word	0x44d1e000
 8006080:	200004d4 	.word	0x200004d4
 8006084:	00000000 	.word	0x00000000

08006088 <interrupt_WallCut>:
			*PID_frontwall_r = 0;
		}
	}
}

void interrupt_WallCut(void) {
 8006088:	b5b0      	push	{r4, r5, r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
	int del_time=ceil(3.5/INTERRUPT_TIME/fabs(straight.velocity));
 800608e:	4ba0      	ldr	r3, [pc, #640]	; (8006310 <interrupt_WallCut+0x288>)
 8006090:	edd3 7a00 	vldr	s15, [r3]
 8006094:	eef0 7ae7 	vabs.f32	s15, s15
 8006098:	ee17 0a90 	vmov	r0, s15
 800609c:	f7fa fa7c 	bl	8000598 <__aeabi_f2d>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	a196      	add	r1, pc, #600	; (adr r1, 8006300 <interrupt_WallCut+0x278>)
 80060a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060aa:	f7fa fbf7 	bl	800089c <__aeabi_ddiv>
 80060ae:	4602      	mov	r2, r0
 80060b0:	460b      	mov	r3, r1
 80060b2:	ec43 2b17 	vmov	d7, r2, r3
 80060b6:	eeb0 0a47 	vmov.f32	s0, s14
 80060ba:	eef0 0a67 	vmov.f32	s1, s15
 80060be:	f01c fe6b 	bl	8022d98 <ceil>
 80060c2:	ec53 2b10 	vmov	r2, r3, d0
 80060c6:	4610      	mov	r0, r2
 80060c8:	4619      	mov	r1, r3
 80060ca:	f7fa fd6d 	bl	8000ba8 <__aeabi_d2iz>
 80060ce:	4603      	mov	r3, r0
 80060d0:	617b      	str	r3, [r7, #20]
	if(del_time>=11){del_time=11;}
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b0a      	cmp	r3, #10
 80060d6:	dd01      	ble.n	80060dc <interrupt_WallCut+0x54>
 80060d8:	230b      	movs	r3, #11
 80060da:	617b      	str	r3, [r7, #20]
	for (int j = 0; j <= 4; j++) {
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e019      	b.n	8006116 <interrupt_WallCut+0x8e>
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][del_time];
 80060e2:	498c      	ldr	r1, [pc, #560]	; (8006314 <interrupt_WallCut+0x28c>)
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4613      	mov	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4413      	add	r3, r2
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	440b      	add	r3, r1
 80060f0:	6819      	ldr	r1, [r3, #0]
 80060f2:	4888      	ldr	r0, [pc, #544]	; (8006314 <interrupt_WallCut+0x28c>)
 80060f4:	693a      	ldr	r2, [r7, #16]
 80060f6:	4613      	mov	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4413      	add	r3, r2
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006106:	1aca      	subs	r2, r1, r3
 8006108:	4983      	ldr	r1, [pc, #524]	; (8006318 <interrupt_WallCut+0x290>)
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int j = 0; j <= 4; j++) {
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	3301      	adds	r3, #1
 8006114:	613b      	str	r3, [r7, #16]
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	2b04      	cmp	r3, #4
 800611a:	dde2      	ble.n	80060e2 <interrupt_WallCut+0x5a>
	}
//	if (maze_mode == 1 || (modeacc != 0 && modeacc != 3)) {}

	if (g_wallCut_mode == 1) {
 800611c:	4b7f      	ldr	r3, [pc, #508]	; (800631c <interrupt_WallCut+0x294>)
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	2b01      	cmp	r3, #1
 8006122:	f040 8556 	bne.w	8006bd2 <interrupt_WallCut+0xb4a>
// 壁壁の検知判定()
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_90) {
 8006126:	4b7b      	ldr	r3, [pc, #492]	; (8006314 <interrupt_WallCut+0x28c>)
 8006128:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800612c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006130:	dd03      	ble.n	800613a <interrupt_WallCut+0xb2>
			front_wall_break_90 = 1;
 8006132:	4b7b      	ldr	r3, [pc, #492]	; (8006320 <interrupt_WallCut+0x298>)
 8006134:	2201      	movs	r2, #1
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	e002      	b.n	8006140 <interrupt_WallCut+0xb8>
		} else {
			front_wall_break_90 = 0;
 800613a:	4b79      	ldr	r3, [pc, #484]	; (8006320 <interrupt_WallCut+0x298>)
 800613c:	2200      	movs	r2, #0
 800613e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45) {
 8006140:	4b74      	ldr	r3, [pc, #464]	; (8006314 <interrupt_WallCut+0x28c>)
 8006142:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006146:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800614a:	dd03      	ble.n	8006154 <interrupt_WallCut+0xcc>
			front_wall_break_45 = 1;
 800614c:	4b75      	ldr	r3, [pc, #468]	; (8006324 <interrupt_WallCut+0x29c>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
 8006152:	e002      	b.n	800615a <interrupt_WallCut+0xd2>
		} else {
			front_wall_break_45 = 0;
 8006154:	4b73      	ldr	r3, [pc, #460]	; (8006324 <interrupt_WallCut+0x29c>)
 8006156:	2200      	movs	r2, #0
 8006158:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT][0] > F_BREAK_THRESHOLD_45SLANT) {
 800615a:	4b6e      	ldr	r3, [pc, #440]	; (8006314 <interrupt_WallCut+0x28c>)
 800615c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006160:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006164:	dd03      	ble.n	800616e <interrupt_WallCut+0xe6>
			front_wall_break_45slant = 1;
 8006166:	4b70      	ldr	r3, [pc, #448]	; (8006328 <interrupt_WallCut+0x2a0>)
 8006168:	2201      	movs	r2, #1
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	e002      	b.n	8006174 <interrupt_WallCut+0xec>
		} else {
			front_wall_break_45slant = 0;
 800616e:	4b6e      	ldr	r3, [pc, #440]	; (8006328 <interrupt_WallCut+0x2a0>)
 8006170:	2200      	movs	r2, #0
 8006172:	701a      	strb	r2, [r3, #0]
		}

// スラロームで用いる90度センサーの壁切れ
		if (g_sensor[SENSOR_LEFT][0] < WALLCUT_THRESHOLD_L90) {
 8006174:	4b67      	ldr	r3, [pc, #412]	; (8006314 <interrupt_WallCut+0x28c>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800617c:	da30      	bge.n	80061e0 <interrupt_WallCut+0x158>
			NoWallCountL90++;
 800617e:	4b6b      	ldr	r3, [pc, #428]	; (800632c <interrupt_WallCut+0x2a4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a69      	ldr	r2, [pc, #420]	; (800632c <interrupt_WallCut+0x2a4>)
 8006186:	6013      	str	r3, [r2, #0]
			//straight.velocityのほうが良き？
			NoWallDisplacementL90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006188:	4b69      	ldr	r3, [pc, #420]	; (8006330 <interrupt_WallCut+0x2a8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4618      	mov	r0, r3
 800618e:	f7fa fa03 	bl	8000598 <__aeabi_f2d>
 8006192:	4604      	mov	r4, r0
 8006194:	460d      	mov	r5, r1
 8006196:	4b67      	ldr	r3, [pc, #412]	; (8006334 <interrupt_WallCut+0x2ac>)
 8006198:	ed93 7a00 	vldr	s14, [r3]
 800619c:	4b66      	ldr	r3, [pc, #408]	; (8006338 <interrupt_WallCut+0x2b0>)
 800619e:	edd3 7a00 	vldr	s15, [r3]
 80061a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80061a6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80061aa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80061ae:	ee16 0a90 	vmov	r0, s13
 80061b2:	f7fa f9f1 	bl	8000598 <__aeabi_f2d>
 80061b6:	a354      	add	r3, pc, #336	; (adr r3, 8006308 <interrupt_WallCut+0x280>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7fa fa44 	bl	8000648 <__aeabi_dmul>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f888 	bl	80002dc <__adddf3>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4610      	mov	r0, r2
 80061d2:	4619      	mov	r1, r3
 80061d4:	f7fa fd10 	bl	8000bf8 <__aeabi_d2f>
 80061d8:	4603      	mov	r3, r0
 80061da:	4a55      	ldr	r2, [pc, #340]	; (8006330 <interrupt_WallCut+0x2a8>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	e006      	b.n	80061ee <interrupt_WallCut+0x166>
//			straight.velocity*INTERRUPT_TIME - straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2
		} else {
			NoWallCountL90 = 0;
 80061e0:	4b52      	ldr	r3, [pc, #328]	; (800632c <interrupt_WallCut+0x2a4>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	601a      	str	r2, [r3, #0]
			NoWallDisplacementL90 = 0;
 80061e6:	4b52      	ldr	r3, [pc, #328]	; (8006330 <interrupt_WallCut+0x2a8>)
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
		}

		if (g_sensor[SENSOR_RIGHT][0] < WALLCUT_THRESHOLD_R90) {
 80061ee:	4b49      	ldr	r3, [pc, #292]	; (8006314 <interrupt_WallCut+0x28c>)
 80061f0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80061f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80061f8:	da30      	bge.n	800625c <interrupt_WallCut+0x1d4>
			NoWallCountR90++;
 80061fa:	4b50      	ldr	r3, [pc, #320]	; (800633c <interrupt_WallCut+0x2b4>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	3301      	adds	r3, #1
 8006200:	4a4e      	ldr	r2, [pc, #312]	; (800633c <interrupt_WallCut+0x2b4>)
 8006202:	6013      	str	r3, [r2, #0]
			NoWallDisplacementR90 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006204:	4b4e      	ldr	r3, [pc, #312]	; (8006340 <interrupt_WallCut+0x2b8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f7fa f9c5 	bl	8000598 <__aeabi_f2d>
 800620e:	4604      	mov	r4, r0
 8006210:	460d      	mov	r5, r1
 8006212:	4b48      	ldr	r3, [pc, #288]	; (8006334 <interrupt_WallCut+0x2ac>)
 8006214:	ed93 7a00 	vldr	s14, [r3]
 8006218:	4b47      	ldr	r3, [pc, #284]	; (8006338 <interrupt_WallCut+0x2b0>)
 800621a:	edd3 7a00 	vldr	s15, [r3]
 800621e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006222:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006226:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800622a:	ee16 0a90 	vmov	r0, s13
 800622e:	f7fa f9b3 	bl	8000598 <__aeabi_f2d>
 8006232:	a335      	add	r3, pc, #212	; (adr r3, 8006308 <interrupt_WallCut+0x280>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa fa06 	bl	8000648 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4620      	mov	r0, r4
 8006242:	4629      	mov	r1, r5
 8006244:	f7fa f84a 	bl	80002dc <__adddf3>
 8006248:	4602      	mov	r2, r0
 800624a:	460b      	mov	r3, r1
 800624c:	4610      	mov	r0, r2
 800624e:	4619      	mov	r1, r3
 8006250:	f7fa fcd2 	bl	8000bf8 <__aeabi_d2f>
 8006254:	4603      	mov	r3, r0
 8006256:	4a3a      	ldr	r2, [pc, #232]	; (8006340 <interrupt_WallCut+0x2b8>)
 8006258:	6013      	str	r3, [r2, #0]
 800625a:	e006      	b.n	800626a <interrupt_WallCut+0x1e2>
		} else {
			NoWallCountR90 = 0;
 800625c:	4b37      	ldr	r3, [pc, #220]	; (800633c <interrupt_WallCut+0x2b4>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
			NoWallDisplacementR90 = 0;
 8006262:	4b37      	ldr	r3, [pc, #220]	; (8006340 <interrupt_WallCut+0x2b8>)
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	601a      	str	r2, [r3, #0]
		}

// 大回りターンで用いる45度センサーの壁切れ
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 800626a:	4b2b      	ldr	r3, [pc, #172]	; (8006318 <interrupt_WallCut+0x290>)
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8006272:	da03      	bge.n	800627c <interrupt_WallCut+0x1f4>
				> WALLCUT_THRESHOLD_DIFF_L45 || g_sensor[SENSOR_FRONT_LEFT][0]
 8006274:	4b27      	ldr	r3, [pc, #156]	; (8006314 <interrupt_WallCut+0x28c>)
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	2bc8      	cmp	r3, #200	; 0xc8
 800627a:	dd37      	ble.n	80062ec <interrupt_WallCut+0x264>
																				> WALLCUT_THRESHOLD_L45) {
			g_sensor_max_fl = 0;			//CENTER_FL;
 800627c:	4b31      	ldr	r3, [pc, #196]	; (8006344 <interrupt_WallCut+0x2bc>)
 800627e:	f04f 0200 	mov.w	r2, #0
 8006282:	601a      	str	r2, [r3, #0]
			NoWallCountL45++;
 8006284:	4b30      	ldr	r3, [pc, #192]	; (8006348 <interrupt_WallCut+0x2c0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	3301      	adds	r3, #1
 800628a:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <interrupt_WallCut+0x2c0>)
 800628c:	6013      	str	r3, [r2, #0]
			//pl_l_blue_LED(0);
			NoWallCountL45_flag = 0;
 800628e:	4b2f      	ldr	r3, [pc, #188]	; (800634c <interrupt_WallCut+0x2c4>)
 8006290:	2200      	movs	r2, #0
 8006292:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountL45_flag == 1) {
//			NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 8006294:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <interrupt_WallCut+0x2c8>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4618      	mov	r0, r3
 800629a:	f7fa f97d 	bl	8000598 <__aeabi_f2d>
 800629e:	4604      	mov	r4, r0
 80062a0:	460d      	mov	r5, r1
 80062a2:	4b24      	ldr	r3, [pc, #144]	; (8006334 <interrupt_WallCut+0x2ac>)
 80062a4:	ed93 7a00 	vldr	s14, [r3]
 80062a8:	4b23      	ldr	r3, [pc, #140]	; (8006338 <interrupt_WallCut+0x2b0>)
 80062aa:	edd3 7a00 	vldr	s15, [r3]
 80062ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80062b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80062ba:	ee16 0a90 	vmov	r0, s13
 80062be:	f7fa f96b 	bl	8000598 <__aeabi_f2d>
 80062c2:	a311      	add	r3, pc, #68	; (adr r3, 8006308 <interrupt_WallCut+0x280>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa f9be 	bl	8000648 <__aeabi_dmul>
 80062cc:	4602      	mov	r2, r0
 80062ce:	460b      	mov	r3, r1
 80062d0:	4620      	mov	r0, r4
 80062d2:	4629      	mov	r1, r5
 80062d4:	f7fa f802 	bl	80002dc <__adddf3>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	f7fa fc8a 	bl	8000bf8 <__aeabi_d2f>
 80062e4:	4603      	mov	r3, r0
 80062e6:	4a1a      	ldr	r2, [pc, #104]	; (8006350 <interrupt_WallCut+0x2c8>)
 80062e8:	6013      	str	r3, [r2, #0]
 80062ea:	e0a0      	b.n	800642e <interrupt_WallCut+0x3a6>
//			}
		} else {

			if (NoWallCountL45_flag == 0) {
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <interrupt_WallCut+0x2c4>)
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d16c      	bne.n	80063ce <interrupt_WallCut+0x346>
				for (int i = 0; i <= 19; i++) {
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
 80062f8:	e04c      	b.n	8006394 <interrupt_WallCut+0x30c>
 80062fa:	bf00      	nop
 80062fc:	f3af 8000 	nop.w
 8006300:	00000000 	.word	0x00000000
 8006304:	40ab5800 	.word	0x40ab5800
 8006308:	d2f1a9fc 	.word	0xd2f1a9fc
 800630c:	3f50624d 	.word	0x3f50624d
 8006310:	200004d8 	.word	0x200004d8
 8006314:	200002b8 	.word	0x200002b8
 8006318:	2000045c 	.word	0x2000045c
 800631c:	20000592 	.word	0x20000592
 8006320:	200005f2 	.word	0x200005f2
 8006324:	200005f3 	.word	0x200005f3
 8006328:	200005f4 	.word	0x200005f4
 800632c:	200005b8 	.word	0x200005b8
 8006330:	200005d0 	.word	0x200005d0
 8006334:	20000258 	.word	0x20000258
 8006338:	2000025c 	.word	0x2000025c
 800633c:	200005b4 	.word	0x200005b4
 8006340:	200005cc 	.word	0x200005cc
 8006344:	200005f8 	.word	0x200005f8
 8006348:	200005c0 	.word	0x200005c0
 800634c:	200005ec 	.word	0x200005ec
 8006350:	200005d8 	.word	0x200005d8
					if (g_sensor_max_fl
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 8006354:	4a7c      	ldr	r2, [pc, #496]	; (8006548 <interrupt_WallCut+0x4c0>)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	3314      	adds	r3, #20
 800635a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800635e:	ee07 3a90 	vmov	s15, r3
 8006362:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006366:	4b79      	ldr	r3, [pc, #484]	; (800654c <interrupt_WallCut+0x4c4>)
 8006368:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl
 800636c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006374:	dd0b      	ble.n	800638e <interrupt_WallCut+0x306>
						g_sensor_max_fl =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 8006376:	4a74      	ldr	r2, [pc, #464]	; (8006548 <interrupt_WallCut+0x4c0>)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	3314      	adds	r3, #20
 800637c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl =
 8006388:	4b70      	ldr	r3, [pc, #448]	; (800654c <interrupt_WallCut+0x4c4>)
 800638a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3301      	adds	r3, #1
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2b13      	cmp	r3, #19
 8006398:	dddc      	ble.n	8006354 <interrupt_WallCut+0x2cc>
					}
				}
				NoWallCountL45 = 0;
 800639a:	4b6d      	ldr	r3, [pc, #436]	; (8006550 <interrupt_WallCut+0x4c8>)
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
				NoWallCountL45_flag = 1;
 80063a0:	4b6c      	ldr	r3, [pc, #432]	; (8006554 <interrupt_WallCut+0x4cc>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	701a      	strb	r2, [r3, #0]
				//pl_l_blue_LED(1);
				//NoWallDisplacementL45 = 0;
				NoWallDisplacementL45 = GAIN_WALLCUT
						* (g_sensor_max_fl - CENTER_FL) / g_sensor_max_fl;
 80063a6:	4b69      	ldr	r3, [pc, #420]	; (800654c <interrupt_WallCut+0x4c4>)
 80063a8:	edd3 7a00 	vldr	s15, [r3]
 80063ac:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8006558 <interrupt_WallCut+0x4d0>
 80063b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063b4:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800655c <interrupt_WallCut+0x4d4>
 80063b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80063bc:	4b63      	ldr	r3, [pc, #396]	; (800654c <interrupt_WallCut+0x4c4>)
 80063be:	ed93 7a00 	vldr	s14, [r3]
 80063c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementL45 = GAIN_WALLCUT
 80063c6:	4b66      	ldr	r3, [pc, #408]	; (8006560 <interrupt_WallCut+0x4d8>)
 80063c8:	edc3 7a00 	vstr	s15, [r3]
 80063cc:	e02f      	b.n	800642e <interrupt_WallCut+0x3a6>
			} else {
				NoWallCountL45++;
 80063ce:	4b60      	ldr	r3, [pc, #384]	; (8006550 <interrupt_WallCut+0x4c8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	3301      	adds	r3, #1
 80063d4:	4a5e      	ldr	r2, [pc, #376]	; (8006550 <interrupt_WallCut+0x4c8>)
 80063d6:	6013      	str	r3, [r2, #0]
//				NoWallDisplacementL45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 80063d8:	4b61      	ldr	r3, [pc, #388]	; (8006560 <interrupt_WallCut+0x4d8>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4618      	mov	r0, r3
 80063de:	f7fa f8db 	bl	8000598 <__aeabi_f2d>
 80063e2:	4604      	mov	r4, r0
 80063e4:	460d      	mov	r5, r1
 80063e6:	4b5f      	ldr	r3, [pc, #380]	; (8006564 <interrupt_WallCut+0x4dc>)
 80063e8:	ed93 7a00 	vldr	s14, [r3]
 80063ec:	4b5e      	ldr	r3, [pc, #376]	; (8006568 <interrupt_WallCut+0x4e0>)
 80063ee:	edd3 7a00 	vldr	s15, [r3]
 80063f2:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80063f6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80063fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80063fe:	ee16 0a90 	vmov	r0, s13
 8006402:	f7fa f8c9 	bl	8000598 <__aeabi_f2d>
 8006406:	a34e      	add	r3, pc, #312	; (adr r3, 8006540 <interrupt_WallCut+0x4b8>)
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f7fa f91c 	bl	8000648 <__aeabi_dmul>
 8006410:	4602      	mov	r2, r0
 8006412:	460b      	mov	r3, r1
				NoWallDisplacementL45 += (fusion_speedL + fusion_speedR)
 8006414:	4620      	mov	r0, r4
 8006416:	4629      	mov	r1, r5
 8006418:	f7f9 ff60 	bl	80002dc <__adddf3>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4610      	mov	r0, r2
 8006422:	4619      	mov	r1, r3
 8006424:	f7fa fbe8 	bl	8000bf8 <__aeabi_d2f>
 8006428:	4603      	mov	r3, r0
 800642a:	4a4d      	ldr	r2, [pc, #308]	; (8006560 <interrupt_WallCut+0x4d8>)
 800642c:	6013      	str	r3, [r2, #0]
			}
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 800642e:	4b4f      	ldr	r3, [pc, #316]	; (800656c <interrupt_WallCut+0x4e4>)
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8006436:	da04      	bge.n	8006442 <interrupt_WallCut+0x3ba>
				> WALLCUT_THRESHOLD_DIFF_R45 || g_sensor[SENSOR_FRONT_RIGHT][0]
 8006438:	4b43      	ldr	r3, [pc, #268]	; (8006548 <interrupt_WallCut+0x4c0>)
 800643a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800643e:	2bfa      	cmp	r3, #250	; 0xfa
 8006440:	dd37      	ble.n	80064b2 <interrupt_WallCut+0x42a>
																		> WALLCUT_THRESHOLD_R45) {
			g_sensor_max_fr = 0;			//CENTER_FR;
 8006442:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <interrupt_WallCut+0x4e8>)
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
			NoWallCountR45++;
 800644a:	4b4a      	ldr	r3, [pc, #296]	; (8006574 <interrupt_WallCut+0x4ec>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3301      	adds	r3, #1
 8006450:	4a48      	ldr	r2, [pc, #288]	; (8006574 <interrupt_WallCut+0x4ec>)
 8006452:	6013      	str	r3, [r2, #0]
			//pl_r_blue_LED(0);
			NoWallCountR45_flag = 0;
 8006454:	4b48      	ldr	r3, [pc, #288]	; (8006578 <interrupt_WallCut+0x4f0>)
 8006456:	2200      	movs	r2, #0
 8006458:	701a      	strb	r2, [r3, #0]
//			if (NoWallCountR45_flag == 1) {
//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45 += (fusion_speedL + fusion_speedR) / 2 * INTERRUPT_TIME;
 800645a:	4b48      	ldr	r3, [pc, #288]	; (800657c <interrupt_WallCut+0x4f4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4618      	mov	r0, r3
 8006460:	f7fa f89a 	bl	8000598 <__aeabi_f2d>
 8006464:	4604      	mov	r4, r0
 8006466:	460d      	mov	r5, r1
 8006468:	4b3e      	ldr	r3, [pc, #248]	; (8006564 <interrupt_WallCut+0x4dc>)
 800646a:	ed93 7a00 	vldr	s14, [r3]
 800646e:	4b3e      	ldr	r3, [pc, #248]	; (8006568 <interrupt_WallCut+0x4e0>)
 8006470:	edd3 7a00 	vldr	s15, [r3]
 8006474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006478:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800647c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006480:	ee16 0a90 	vmov	r0, s13
 8006484:	f7fa f888 	bl	8000598 <__aeabi_f2d>
 8006488:	a32d      	add	r3, pc, #180	; (adr r3, 8006540 <interrupt_WallCut+0x4b8>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fa f8db 	bl	8000648 <__aeabi_dmul>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	4620      	mov	r0, r4
 8006498:	4629      	mov	r1, r5
 800649a:	f7f9 ff1f 	bl	80002dc <__adddf3>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4610      	mov	r0, r2
 80064a4:	4619      	mov	r1, r3
 80064a6:	f7fa fba7 	bl	8000bf8 <__aeabi_d2f>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4a33      	ldr	r2, [pc, #204]	; (800657c <interrupt_WallCut+0x4f4>)
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	e098      	b.n	80065e4 <interrupt_WallCut+0x55c>
//			}
		} else {
			if (NoWallCountR45_flag == 0) {
 80064b2:	4b31      	ldr	r3, [pc, #196]	; (8006578 <interrupt_WallCut+0x4f0>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d164      	bne.n	8006584 <interrupt_WallCut+0x4fc>
				for (int i = 0; i <= 19; i++) {
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
 80064be:	e01f      	b.n	8006500 <interrupt_WallCut+0x478>
					if (g_sensor_max_fr
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80064c0:	4a21      	ldr	r2, [pc, #132]	; (8006548 <interrupt_WallCut+0x4c0>)
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	333c      	adds	r3, #60	; 0x3c
 80064c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064d2:	4b27      	ldr	r3, [pc, #156]	; (8006570 <interrupt_WallCut+0x4e8>)
 80064d4:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr
 80064d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e0:	dd0b      	ble.n	80064fa <interrupt_WallCut+0x472>
						g_sensor_max_fr =
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80064e2:	4a19      	ldr	r2, [pc, #100]	; (8006548 <interrupt_WallCut+0x4c0>)
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	333c      	adds	r3, #60	; 0x3c
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	ee07 3a90 	vmov	s15, r3
 80064f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr =
 80064f4:	4b1e      	ldr	r3, [pc, #120]	; (8006570 <interrupt_WallCut+0x4e8>)
 80064f6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3301      	adds	r3, #1
 80064fe:	60bb      	str	r3, [r7, #8]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	2b13      	cmp	r3, #19
 8006504:	dddc      	ble.n	80064c0 <interrupt_WallCut+0x438>
					}
				}
				NoWallCountR45 = 0;
 8006506:	4b1b      	ldr	r3, [pc, #108]	; (8006574 <interrupt_WallCut+0x4ec>)
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
				NoWallCountR45_flag = 1;
 800650c:	4b1a      	ldr	r3, [pc, #104]	; (8006578 <interrupt_WallCut+0x4f0>)
 800650e:	2201      	movs	r2, #1
 8006510:	701a      	strb	r2, [r3, #0]
				//pl_r_blue_LED(1);
				//NoWallDisplacementR45 = 0;
				NoWallDisplacementR45 = GAIN_WALLCUT
						* (g_sensor_max_fr - CENTER_FR) / g_sensor_max_fr;
 8006512:	4b17      	ldr	r3, [pc, #92]	; (8006570 <interrupt_WallCut+0x4e8>)
 8006514:	edd3 7a00 	vldr	s15, [r3]
 8006518:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006580 <interrupt_WallCut+0x4f8>
 800651c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006520:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800655c <interrupt_WallCut+0x4d4>
 8006524:	ee67 6a87 	vmul.f32	s13, s15, s14
 8006528:	4b11      	ldr	r3, [pc, #68]	; (8006570 <interrupt_WallCut+0x4e8>)
 800652a:	ed93 7a00 	vldr	s14, [r3]
 800652e:	eec6 7a87 	vdiv.f32	s15, s13, s14
				NoWallDisplacementR45 = GAIN_WALLCUT
 8006532:	4b12      	ldr	r3, [pc, #72]	; (800657c <interrupt_WallCut+0x4f4>)
 8006534:	edc3 7a00 	vstr	s15, [r3]
 8006538:	e054      	b.n	80065e4 <interrupt_WallCut+0x55c>
 800653a:	bf00      	nop
 800653c:	f3af 8000 	nop.w
 8006540:	d2f1a9fc 	.word	0xd2f1a9fc
 8006544:	3f50624d 	.word	0x3f50624d
 8006548:	200002b8 	.word	0x200002b8
 800654c:	200005f8 	.word	0x200005f8
 8006550:	200005c0 	.word	0x200005c0
 8006554:	200005ec 	.word	0x200005ec
 8006558:	43f68000 	.word	0x43f68000
 800655c:	00000000 	.word	0x00000000
 8006560:	200005d8 	.word	0x200005d8
 8006564:	20000258 	.word	0x20000258
 8006568:	2000025c 	.word	0x2000025c
 800656c:	2000045c 	.word	0x2000045c
 8006570:	200005fc 	.word	0x200005fc
 8006574:	200005bc 	.word	0x200005bc
 8006578:	200005ed 	.word	0x200005ed
 800657c:	200005d4 	.word	0x200005d4
 8006580:	44484000 	.word	0x44484000
			} else {
				NoWallCountR45++;
 8006584:	4b94      	ldr	r3, [pc, #592]	; (80067d8 <interrupt_WallCut+0x750>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a93      	ldr	r2, [pc, #588]	; (80067d8 <interrupt_WallCut+0x750>)
 800658c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementR45 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 800658e:	4b93      	ldr	r3, [pc, #588]	; (80067dc <interrupt_WallCut+0x754>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	f7fa f800 	bl	8000598 <__aeabi_f2d>
 8006598:	4604      	mov	r4, r0
 800659a:	460d      	mov	r5, r1
 800659c:	4b90      	ldr	r3, [pc, #576]	; (80067e0 <interrupt_WallCut+0x758>)
 800659e:	ed93 7a00 	vldr	s14, [r3]
 80065a2:	4b90      	ldr	r3, [pc, #576]	; (80067e4 <interrupt_WallCut+0x75c>)
 80065a4:	edd3 7a00 	vldr	s15, [r3]
 80065a8:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2* INTERRUPT_TIME;
 80065ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80065b0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80065b4:	ee16 0a90 	vmov	r0, s13
 80065b8:	f7f9 ffee 	bl	8000598 <__aeabi_f2d>
 80065bc:	a384      	add	r3, pc, #528	; (adr r3, 80067d0 <interrupt_WallCut+0x748>)
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f7fa f841 	bl	8000648 <__aeabi_dmul>
 80065c6:	4602      	mov	r2, r0
 80065c8:	460b      	mov	r3, r1
				NoWallDisplacementR45 += (fusion_speedL + fusion_speedR)
 80065ca:	4620      	mov	r0, r4
 80065cc:	4629      	mov	r1, r5
 80065ce:	f7f9 fe85 	bl	80002dc <__adddf3>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fb0d 	bl	8000bf8 <__aeabi_d2f>
 80065de:	4603      	mov	r3, r0
 80065e0:	4a7e      	ldr	r2, [pc, #504]	; (80067dc <interrupt_WallCut+0x754>)
 80065e2:	6013      	str	r3, [r2, #0]
			}

		}

		// 大回りターンで用いる45度センサーの壁切れ(斜め)
		if (g_sensor_diff_wallcut[SENSOR_FRONT_LEFT]
 80065e4:	4b80      	ldr	r3, [pc, #512]	; (80067e8 <interrupt_WallCut+0x760>)
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80065ec:	db5f      	blt.n	80066ae <interrupt_WallCut+0x626>
				> WALLCUT_THRESHOLD_DIFF_L45_SLANT) {
			g_sensor_max_fl_slant = 0;			//CENTER_FL_SLANT;
 80065ee:	4b7f      	ldr	r3, [pc, #508]	; (80067ec <interrupt_WallCut+0x764>)
 80065f0:	f04f 0200 	mov.w	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
			NoWallCountL45slant++;
 80065f6:	4b7e      	ldr	r3, [pc, #504]	; (80067f0 <interrupt_WallCut+0x768>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	3301      	adds	r3, #1
 80065fc:	4a7c      	ldr	r2, [pc, #496]	; (80067f0 <interrupt_WallCut+0x768>)
 80065fe:	6013      	str	r3, [r2, #0]
			pl_l_blue_LED(0);
 8006600:	2000      	movs	r0, #0
 8006602:	f000 fccf 	bl	8006fa4 <pl_l_blue_LED>
			NoWallCountL45slant_flag = 0;
 8006606:	4b7b      	ldr	r3, [pc, #492]	; (80067f4 <interrupt_WallCut+0x76c>)
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
			//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800660c:	4b7a      	ldr	r3, [pc, #488]	; (80067f8 <interrupt_WallCut+0x770>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7f9 ffc1 	bl	8000598 <__aeabi_f2d>
 8006616:	4604      	mov	r4, r0
 8006618:	460d      	mov	r5, r1
 800661a:	4b71      	ldr	r3, [pc, #452]	; (80067e0 <interrupt_WallCut+0x758>)
 800661c:	ed93 7a00 	vldr	s14, [r3]
 8006620:	4b70      	ldr	r3, [pc, #448]	; (80067e4 <interrupt_WallCut+0x75c>)
 8006622:	edd3 7a00 	vldr	s15, [r3]
 8006626:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 800662a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800662e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006632:	ee16 0a90 	vmov	r0, s13
 8006636:	f7f9 ffaf 	bl	8000598 <__aeabi_f2d>
 800663a:	a365      	add	r3, pc, #404	; (adr r3, 80067d0 <interrupt_WallCut+0x748>)
 800663c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006640:	f7fa f802 	bl	8000648 <__aeabi_dmul>
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
			NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 8006648:	4620      	mov	r0, r4
 800664a:	4629      	mov	r1, r5
 800664c:	f7f9 fe46 	bl	80002dc <__adddf3>
 8006650:	4602      	mov	r2, r0
 8006652:	460b      	mov	r3, r1
 8006654:	4610      	mov	r0, r2
 8006656:	4619      	mov	r1, r3
 8006658:	f7fa face 	bl	8000bf8 <__aeabi_d2f>
 800665c:	4603      	mov	r3, r0
 800665e:	4a66      	ldr	r2, [pc, #408]	; (80067f8 <interrupt_WallCut+0x770>)
 8006660:	6013      	str	r3, [r2, #0]
			if (slantWallControlL_flag == 1) {
 8006662:	4b66      	ldr	r3, [pc, #408]	; (80067fc <interrupt_WallCut+0x774>)
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	2b01      	cmp	r3, #1
 8006668:	f040 812b 	bne.w	80068c2 <interrupt_WallCut+0x83a>
				NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800666c:	4b64      	ldr	r3, [pc, #400]	; (8006800 <interrupt_WallCut+0x778>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f7f9 ff91 	bl	8000598 <__aeabi_f2d>
 8006676:	4604      	mov	r4, r0
 8006678:	460d      	mov	r5, r1
 800667a:	4b62      	ldr	r3, [pc, #392]	; (8006804 <interrupt_WallCut+0x77c>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4618      	mov	r0, r3
 8006680:	f7f9 ff8a 	bl	8000598 <__aeabi_f2d>
 8006684:	a352      	add	r3, pc, #328	; (adr r3, 80067d0 <interrupt_WallCut+0x748>)
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f7f9 ffdd 	bl	8000648 <__aeabi_dmul>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4620      	mov	r0, r4
 8006694:	4629      	mov	r1, r5
 8006696:	f7f9 fe21 	bl	80002dc <__adddf3>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	4610      	mov	r0, r2
 80066a0:	4619      	mov	r1, r3
 80066a2:	f7fa faa9 	bl	8000bf8 <__aeabi_d2f>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4a55      	ldr	r2, [pc, #340]	; (8006800 <interrupt_WallCut+0x778>)
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	e109      	b.n	80068c2 <interrupt_WallCut+0x83a>
				//NoWallDisplacementL45slant += (E_speedL + E_speedR)
				//		/ 2*INTERRUPT_TIME;
			}
		} else {
			if (NoWallCountL45slant_flag == 0) {
 80066ae:	4b51      	ldr	r3, [pc, #324]	; (80067f4 <interrupt_WallCut+0x76c>)
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 80ae 	bne.w	8006814 <interrupt_WallCut+0x78c>
				for (int i = 0; i <= 19; i++) {
 80066b8:	2300      	movs	r3, #0
 80066ba:	607b      	str	r3, [r7, #4]
 80066bc:	e01f      	b.n	80066fe <interrupt_WallCut+0x676>
					if (g_sensor_max_fl_slant
							< (float) (g_sensor[SENSOR_FRONT_LEFT][i])) {
 80066be:	4a52      	ldr	r2, [pc, #328]	; (8006808 <interrupt_WallCut+0x780>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3314      	adds	r3, #20
 80066c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066c8:	ee07 3a90 	vmov	s15, r3
 80066cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066d0:	4b46      	ldr	r3, [pc, #280]	; (80067ec <interrupt_WallCut+0x764>)
 80066d2:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fl_slant
 80066d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066de:	dd0b      	ble.n	80066f8 <interrupt_WallCut+0x670>
						g_sensor_max_fl_slant =
								(float) (g_sensor[SENSOR_FRONT_LEFT][i]);
 80066e0:	4a49      	ldr	r2, [pc, #292]	; (8006808 <interrupt_WallCut+0x780>)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	3314      	adds	r3, #20
 80066e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fl_slant =
 80066f2:	4b3e      	ldr	r3, [pc, #248]	; (80067ec <interrupt_WallCut+0x764>)
 80066f4:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3301      	adds	r3, #1
 80066fc:	607b      	str	r3, [r7, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b13      	cmp	r3, #19
 8006702:	dddc      	ble.n	80066be <interrupt_WallCut+0x636>
					}
				}
				NoWallCountL45slant = 0;
 8006704:	4b3a      	ldr	r3, [pc, #232]	; (80067f0 <interrupt_WallCut+0x768>)
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]
				NoWallCountL45slant_flag = 1;
 800670a:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <interrupt_WallCut+0x76c>)
 800670c:	2201      	movs	r2, #1
 800670e:	701a      	strb	r2, [r3, #0]
				pl_l_blue_LED(1);
 8006710:	2001      	movs	r0, #1
 8006712:	f000 fc47 	bl	8006fa4 <pl_l_blue_LED>
				//			NoWallDisplacementL45slant = 0;
				//			NoWallDisplacementL45slant2 = 0;
				if (g_sensor_max_fl_slant - CENTER_FL_SLANT >= 0) {
 8006716:	4b35      	ldr	r3, [pc, #212]	; (80067ec <interrupt_WallCut+0x764>)
 8006718:	edd3 7a00 	vldr	s15, [r3]
 800671c:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800680c <interrupt_WallCut+0x784>
 8006720:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006724:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800672c:	db26      	blt.n	800677c <interrupt_WallCut+0x6f4>
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800672e:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <interrupt_WallCut+0x764>)
 8006730:	edd3 7a00 	vldr	s15, [r3]
 8006734:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800680c <interrupt_WallCut+0x784>
 8006738:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800673c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8006810 <interrupt_WallCut+0x788>
 8006740:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006744:	4b29      	ldr	r3, [pc, #164]	; (80067ec <interrupt_WallCut+0x764>)
 8006746:	ed93 7a00 	vldr	s14, [r3]
 800674a:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT
 800674e:	4b2c      	ldr	r3, [pc, #176]	; (8006800 <interrupt_WallCut+0x778>)
 8006750:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 8006754:	4b25      	ldr	r3, [pc, #148]	; (80067ec <interrupt_WallCut+0x764>)
 8006756:	edd3 7a00 	vldr	s15, [r3]
 800675a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800680c <interrupt_WallCut+0x784>
 800675e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006762:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8006810 <interrupt_WallCut+0x788>
 8006766:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 800676a:	4b20      	ldr	r3, [pc, #128]	; (80067ec <interrupt_WallCut+0x764>)
 800676c:	ed93 7a00 	vldr	s14, [r3]
 8006770:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <interrupt_WallCut+0x770>)
 8006776:	edc3 7a00 	vstr	s15, [r3]
 800677a:	e09f      	b.n	80068bc <interrupt_WallCut+0x834>
				} else {
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 800677c:	4b1b      	ldr	r3, [pc, #108]	; (80067ec <interrupt_WallCut+0x764>)
 800677e:	edd3 7a00 	vldr	s15, [r3]
 8006782:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800680c <interrupt_WallCut+0x784>
 8006786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800678a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006810 <interrupt_WallCut+0x788>
 800678e:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 8006792:	4b16      	ldr	r3, [pc, #88]	; (80067ec <interrupt_WallCut+0x764>)
 8006794:	ed93 7a00 	vldr	s14, [r3]
 8006798:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant = GAIN_WALLCUT_SLANT2
 800679c:	4b18      	ldr	r3, [pc, #96]	; (8006800 <interrupt_WallCut+0x778>)
 800679e:	edc3 7a00 	vstr	s15, [r3]
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
							* (g_sensor_max_fl_slant - CENTER_FL_SLANT)
 80067a2:	4b12      	ldr	r3, [pc, #72]	; (80067ec <interrupt_WallCut+0x764>)
 80067a4:	edd3 7a00 	vldr	s15, [r3]
 80067a8:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800680c <interrupt_WallCut+0x784>
 80067ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067b0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8006810 <interrupt_WallCut+0x788>
 80067b4:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fl_slant;
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <interrupt_WallCut+0x764>)
 80067ba:	ed93 7a00 	vldr	s14, [r3]
 80067be:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementL45slant2 = GAIN_WALLCUT_SLANT2
 80067c2:	4b0d      	ldr	r3, [pc, #52]	; (80067f8 <interrupt_WallCut+0x770>)
 80067c4:	edc3 7a00 	vstr	s15, [r3]
 80067c8:	e078      	b.n	80068bc <interrupt_WallCut+0x834>
 80067ca:	bf00      	nop
 80067cc:	f3af 8000 	nop.w
 80067d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80067d4:	3f50624d 	.word	0x3f50624d
 80067d8:	200005bc 	.word	0x200005bc
 80067dc:	200005d4 	.word	0x200005d4
 80067e0:	20000258 	.word	0x20000258
 80067e4:	2000025c 	.word	0x2000025c
 80067e8:	2000045c 	.word	0x2000045c
 80067ec:	20000600 	.word	0x20000600
 80067f0:	200005c8 	.word	0x200005c8
 80067f4:	200005ee 	.word	0x200005ee
 80067f8:	200005e8 	.word	0x200005e8
 80067fc:	200005f0 	.word	0x200005f0
 8006800:	200005e0 	.word	0x200005e0
 8006804:	200004d8 	.word	0x200004d8
 8006808:	200002b8 	.word	0x200002b8
 800680c:	455ac000 	.word	0x455ac000
 8006810:	00000000 	.word	0x00000000
				}

			} else {
				NoWallCountL45slant++;
 8006814:	4bac      	ldr	r3, [pc, #688]	; (8006ac8 <interrupt_WallCut+0xa40>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	3301      	adds	r3, #1
 800681a:	4aab      	ldr	r2, [pc, #684]	; (8006ac8 <interrupt_WallCut+0xa40>)
 800681c:	6013      	str	r3, [r2, #0]
				//			NoWallDisplacementL45slant2 += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800681e:	4bab      	ldr	r3, [pc, #684]	; (8006acc <interrupt_WallCut+0xa44>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7f9 feb8 	bl	8000598 <__aeabi_f2d>
 8006828:	4604      	mov	r4, r0
 800682a:	460d      	mov	r5, r1
 800682c:	4ba8      	ldr	r3, [pc, #672]	; (8006ad0 <interrupt_WallCut+0xa48>)
 800682e:	ed93 7a00 	vldr	s14, [r3]
 8006832:	4ba8      	ldr	r3, [pc, #672]	; (8006ad4 <interrupt_WallCut+0xa4c>)
 8006834:	edd3 7a00 	vldr	s15, [r3]
 8006838:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 800683c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006840:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006844:	ee16 0a90 	vmov	r0, s13
 8006848:	f7f9 fea6 	bl	8000598 <__aeabi_f2d>
 800684c:	a39c      	add	r3, pc, #624	; (adr r3, 8006ac0 <interrupt_WallCut+0xa38>)
 800684e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006852:	f7f9 fef9 	bl	8000648 <__aeabi_dmul>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
				NoWallDisplacementL45slant2 += (fusion_speedL + fusion_speedR)
 800685a:	4620      	mov	r0, r4
 800685c:	4629      	mov	r1, r5
 800685e:	f7f9 fd3d 	bl	80002dc <__adddf3>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4610      	mov	r0, r2
 8006868:	4619      	mov	r1, r3
 800686a:	f7fa f9c5 	bl	8000bf8 <__aeabi_d2f>
 800686e:	4603      	mov	r3, r0
 8006870:	4a96      	ldr	r2, [pc, #600]	; (8006acc <interrupt_WallCut+0xa44>)
 8006872:	6013      	str	r3, [r2, #0]
				if (slantWallControlL_flag == 1) {
 8006874:	4b98      	ldr	r3, [pc, #608]	; (8006ad8 <interrupt_WallCut+0xa50>)
 8006876:	781b      	ldrb	r3, [r3, #0]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d11f      	bne.n	80068bc <interrupt_WallCut+0x834>
					NoWallDisplacementL45slant += straight.velocity*INTERRUPT_TIME;
 800687c:	4b97      	ldr	r3, [pc, #604]	; (8006adc <interrupt_WallCut+0xa54>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4618      	mov	r0, r3
 8006882:	f7f9 fe89 	bl	8000598 <__aeabi_f2d>
 8006886:	4604      	mov	r4, r0
 8006888:	460d      	mov	r5, r1
 800688a:	4b95      	ldr	r3, [pc, #596]	; (8006ae0 <interrupt_WallCut+0xa58>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7f9 fe82 	bl	8000598 <__aeabi_f2d>
 8006894:	a38a      	add	r3, pc, #552	; (adr r3, 8006ac0 <interrupt_WallCut+0xa38>)
 8006896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689a:	f7f9 fed5 	bl	8000648 <__aeabi_dmul>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4620      	mov	r0, r4
 80068a4:	4629      	mov	r1, r5
 80068a6:	f7f9 fd19 	bl	80002dc <__adddf3>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4610      	mov	r0, r2
 80068b0:	4619      	mov	r1, r3
 80068b2:	f7fa f9a1 	bl	8000bf8 <__aeabi_d2f>
 80068b6:	4603      	mov	r3, r0
 80068b8:	4a88      	ldr	r2, [pc, #544]	; (8006adc <interrupt_WallCut+0xa54>)
 80068ba:	6013      	str	r3, [r2, #0]
//					NoWallDisplacementL45slant += (E_speedL + E_speedR)
//							/ 2*INTERRUPT_TIME;
				}
			}

			slantWallControlL_flag = 1;
 80068bc:	4b86      	ldr	r3, [pc, #536]	; (8006ad8 <interrupt_WallCut+0xa50>)
 80068be:	2201      	movs	r2, #1
 80068c0:	701a      	strb	r2, [r3, #0]
		}

		if (g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT]
 80068c2:	4b88      	ldr	r3, [pc, #544]	; (8006ae4 <interrupt_WallCut+0xa5c>)
 80068c4:	68db      	ldr	r3, [r3, #12]
 80068c6:	f113 0fef 	cmn.w	r3, #239	; 0xef
 80068ca:	db6a      	blt.n	80069a2 <interrupt_WallCut+0x91a>
				> WALLCUT_THRESHOLD_DIFF_R45_SLANT) {
			g_sensor_max_fr_slant = 0;				//CENTER_FR_SLANT;
 80068cc:	4b86      	ldr	r3, [pc, #536]	; (8006ae8 <interrupt_WallCut+0xa60>)
 80068ce:	f04f 0200 	mov.w	r2, #0
 80068d2:	601a      	str	r2, [r3, #0]
			NoWallCountR45slant++;
 80068d4:	4b85      	ldr	r3, [pc, #532]	; (8006aec <interrupt_WallCut+0xa64>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3301      	adds	r3, #1
 80068da:	4a84      	ldr	r2, [pc, #528]	; (8006aec <interrupt_WallCut+0xa64>)
 80068dc:	6013      	str	r3, [r2, #0]
			pl_r_blue_LED(0);
 80068de:	2000      	movs	r0, #0
 80068e0:	f000 fb4e 	bl	8006f80 <pl_r_blue_LED>
			NoWallCountR45slant_flag = 0;
 80068e4:	4b82      	ldr	r3, [pc, #520]	; (8006af0 <interrupt_WallCut+0xa68>)
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
//	 		NoWallDisplacementR45slant2 += straight.velocity*INTERRUPT_TIME;
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 80068ea:	4b82      	ldr	r3, [pc, #520]	; (8006af4 <interrupt_WallCut+0xa6c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7f9 fe52 	bl	8000598 <__aeabi_f2d>
 80068f4:	4604      	mov	r4, r0
 80068f6:	460d      	mov	r5, r1
 80068f8:	4b75      	ldr	r3, [pc, #468]	; (8006ad0 <interrupt_WallCut+0xa48>)
 80068fa:	ed93 7a00 	vldr	s14, [r3]
 80068fe:	4b75      	ldr	r3, [pc, #468]	; (8006ad4 <interrupt_WallCut+0xa4c>)
 8006900:	edd3 7a00 	vldr	s15, [r3]
 8006904:	ee77 7a27 	vadd.f32	s15, s14, s15
					/ 2*INTERRUPT_TIME;
 8006908:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800690c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006910:	ee16 0a90 	vmov	r0, s13
 8006914:	f7f9 fe40 	bl	8000598 <__aeabi_f2d>
 8006918:	a369      	add	r3, pc, #420	; (adr r3, 8006ac0 <interrupt_WallCut+0xa38>)
 800691a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691e:	f7f9 fe93 	bl	8000648 <__aeabi_dmul>
 8006922:	4602      	mov	r2, r0
 8006924:	460b      	mov	r3, r1
			NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006926:	4620      	mov	r0, r4
 8006928:	4629      	mov	r1, r5
 800692a:	f7f9 fcd7 	bl	80002dc <__adddf3>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4610      	mov	r0, r2
 8006934:	4619      	mov	r1, r3
 8006936:	f7fa f95f 	bl	8000bf8 <__aeabi_d2f>
 800693a:	4603      	mov	r3, r0
 800693c:	4a6d      	ldr	r2, [pc, #436]	; (8006af4 <interrupt_WallCut+0xa6c>)
 800693e:	6013      	str	r3, [r2, #0]
			if (slantWallControlR_flag == 1) {
 8006940:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <interrupt_WallCut+0xa70>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 81a4 	bne.w	8006c92 <interrupt_WallCut+0xc0a>
//				NoWallDisplacementR45slant += straight.velocity*INTERRUPT_TIME;
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 800694a:	4b6c      	ldr	r3, [pc, #432]	; (8006afc <interrupt_WallCut+0xa74>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f7f9 fe22 	bl	8000598 <__aeabi_f2d>
 8006954:	4604      	mov	r4, r0
 8006956:	460d      	mov	r5, r1
 8006958:	4b5d      	ldr	r3, [pc, #372]	; (8006ad0 <interrupt_WallCut+0xa48>)
 800695a:	ed93 7a00 	vldr	s14, [r3]
 800695e:	4b5d      	ldr	r3, [pc, #372]	; (8006ad4 <interrupt_WallCut+0xa4c>)
 8006960:	edd3 7a00 	vldr	s15, [r3]
 8006964:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006968:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800696c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006970:	ee16 0a90 	vmov	r0, s13
 8006974:	f7f9 fe10 	bl	8000598 <__aeabi_f2d>
 8006978:	a351      	add	r3, pc, #324	; (adr r3, 8006ac0 <interrupt_WallCut+0xa38>)
 800697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800697e:	f7f9 fe63 	bl	8000648 <__aeabi_dmul>
 8006982:	4602      	mov	r2, r0
 8006984:	460b      	mov	r3, r1
				NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006986:	4620      	mov	r0, r4
 8006988:	4629      	mov	r1, r5
 800698a:	f7f9 fca7 	bl	80002dc <__adddf3>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4610      	mov	r0, r2
 8006994:	4619      	mov	r1, r3
 8006996:	f7fa f92f 	bl	8000bf8 <__aeabi_d2f>
 800699a:	4603      	mov	r3, r0
 800699c:	4a57      	ldr	r2, [pc, #348]	; (8006afc <interrupt_WallCut+0xa74>)
 800699e:	6013      	str	r3, [r2, #0]
		g_sensor_max_fl_slant = 0;
		g_sensor_max_fr_slant = 0;

	}

}
 80069a0:	e177      	b.n	8006c92 <interrupt_WallCut+0xc0a>
			if (NoWallCountR45slant_flag == 0) {
 80069a2:	4b53      	ldr	r3, [pc, #332]	; (8006af0 <interrupt_WallCut+0xa68>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	f040 80b0 	bne.w	8006b0c <interrupt_WallCut+0xa84>
				for (int i = 0; i <= 19; i++) {
 80069ac:	2300      	movs	r3, #0
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	e01f      	b.n	80069f2 <interrupt_WallCut+0x96a>
							< (float) (g_sensor[SENSOR_FRONT_RIGHT][i])) {
 80069b2:	4a53      	ldr	r2, [pc, #332]	; (8006b00 <interrupt_WallCut+0xa78>)
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	333c      	adds	r3, #60	; 0x3c
 80069b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069bc:	ee07 3a90 	vmov	s15, r3
 80069c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069c4:	4b48      	ldr	r3, [pc, #288]	; (8006ae8 <interrupt_WallCut+0xa60>)
 80069c6:	edd3 7a00 	vldr	s15, [r3]
					if (g_sensor_max_fr_slant
 80069ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80069ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069d2:	dd0b      	ble.n	80069ec <interrupt_WallCut+0x964>
								(float) (g_sensor[SENSOR_FRONT_RIGHT][i]);
 80069d4:	4a4a      	ldr	r2, [pc, #296]	; (8006b00 <interrupt_WallCut+0xa78>)
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	333c      	adds	r3, #60	; 0x3c
 80069da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069de:	ee07 3a90 	vmov	s15, r3
 80069e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
						g_sensor_max_fr_slant =
 80069e6:	4b40      	ldr	r3, [pc, #256]	; (8006ae8 <interrupt_WallCut+0xa60>)
 80069e8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	3301      	adds	r3, #1
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	2b13      	cmp	r3, #19
 80069f6:	dddc      	ble.n	80069b2 <interrupt_WallCut+0x92a>
				NoWallCountR45slant = 0;
 80069f8:	4b3c      	ldr	r3, [pc, #240]	; (8006aec <interrupt_WallCut+0xa64>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
				NoWallCountR45slant_flag = 1;
 80069fe:	4b3c      	ldr	r3, [pc, #240]	; (8006af0 <interrupt_WallCut+0xa68>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
				pl_r_blue_LED(1);
 8006a04:	2001      	movs	r0, #1
 8006a06:	f000 fabb 	bl	8006f80 <pl_r_blue_LED>
				if (g_sensor_max_fr_slant - CENTER_FR_SLANT >= 0) {
 8006a0a:	4b37      	ldr	r3, [pc, #220]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a0c:	edd3 7a00 	vldr	s15, [r3]
 8006a10:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8006b04 <interrupt_WallCut+0xa7c>
 8006a14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a18:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006a1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a20:	db26      	blt.n	8006a70 <interrupt_WallCut+0x9e8>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a22:	4b31      	ldr	r3, [pc, #196]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a24:	edd3 7a00 	vldr	s15, [r3]
 8006a28:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8006b04 <interrupt_WallCut+0xa7c>
 8006a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a30:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8006b08 <interrupt_WallCut+0xa80>
 8006a34:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a38:	4b2b      	ldr	r3, [pc, #172]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a3a:	ed93 7a00 	vldr	s14, [r3]
 8006a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <interrupt_WallCut+0xa74>)
 8006a44:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a48:	4b27      	ldr	r3, [pc, #156]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a4a:	edd3 7a00 	vldr	s15, [r3]
 8006a4e:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8006b04 <interrupt_WallCut+0xa7c>
 8006a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a56:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006b08 <interrupt_WallCut+0xa80>
 8006a5a:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a5e:	4b22      	ldr	r3, [pc, #136]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a60:	ed93 7a00 	vldr	s14, [r3]
 8006a64:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT
 8006a68:	4b22      	ldr	r3, [pc, #136]	; (8006af4 <interrupt_WallCut+0xa6c>)
 8006a6a:	edc3 7a00 	vstr	s15, [r3]
 8006a6e:	e0ac      	b.n	8006bca <interrupt_WallCut+0xb42>
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a70:	4b1d      	ldr	r3, [pc, #116]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a72:	edd3 7a00 	vldr	s15, [r3]
 8006a76:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006b04 <interrupt_WallCut+0xa7c>
 8006a7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a7e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006b08 <interrupt_WallCut+0xa80>
 8006a82:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006a86:	4b18      	ldr	r3, [pc, #96]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a88:	ed93 7a00 	vldr	s14, [r3]
 8006a8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant = GAIN_WALLCUT_SLANT2
 8006a90:	4b1a      	ldr	r3, [pc, #104]	; (8006afc <interrupt_WallCut+0xa74>)
 8006a92:	edc3 7a00 	vstr	s15, [r3]
							* (g_sensor_max_fr_slant - CENTER_FR_SLANT)
 8006a96:	4b14      	ldr	r3, [pc, #80]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006a98:	edd3 7a00 	vldr	s15, [r3]
 8006a9c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006b04 <interrupt_WallCut+0xa7c>
 8006aa0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006aa4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006b08 <interrupt_WallCut+0xa80>
 8006aa8:	ee67 6a87 	vmul.f32	s13, s15, s14
							/ g_sensor_max_fr_slant;
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <interrupt_WallCut+0xa60>)
 8006aae:	ed93 7a00 	vldr	s14, [r3]
 8006ab2:	eec6 7a87 	vdiv.f32	s15, s13, s14
					NoWallDisplacementR45slant2 = GAIN_WALLCUT_SLANT2
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <interrupt_WallCut+0xa6c>)
 8006ab8:	edc3 7a00 	vstr	s15, [r3]
 8006abc:	e085      	b.n	8006bca <interrupt_WallCut+0xb42>
 8006abe:	bf00      	nop
 8006ac0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ac4:	3f50624d 	.word	0x3f50624d
 8006ac8:	200005c8 	.word	0x200005c8
 8006acc:	200005e8 	.word	0x200005e8
 8006ad0:	20000258 	.word	0x20000258
 8006ad4:	2000025c 	.word	0x2000025c
 8006ad8:	200005f0 	.word	0x200005f0
 8006adc:	200005e0 	.word	0x200005e0
 8006ae0:	200004d8 	.word	0x200004d8
 8006ae4:	2000045c 	.word	0x2000045c
 8006ae8:	20000604 	.word	0x20000604
 8006aec:	200005c4 	.word	0x200005c4
 8006af0:	200005ef 	.word	0x200005ef
 8006af4:	200005e4 	.word	0x200005e4
 8006af8:	200005f1 	.word	0x200005f1
 8006afc:	200005dc 	.word	0x200005dc
 8006b00:	200002b8 	.word	0x200002b8
 8006b04:	455ac000 	.word	0x455ac000
 8006b08:	00000000 	.word	0x00000000
				NoWallCountR45slant++;
 8006b0c:	4b66      	ldr	r3, [pc, #408]	; (8006ca8 <interrupt_WallCut+0xc20>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3301      	adds	r3, #1
 8006b12:	4a65      	ldr	r2, [pc, #404]	; (8006ca8 <interrupt_WallCut+0xc20>)
 8006b14:	6013      	str	r3, [r2, #0]
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b16:	4b65      	ldr	r3, [pc, #404]	; (8006cac <interrupt_WallCut+0xc24>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fd3c 	bl	8000598 <__aeabi_f2d>
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	4b62      	ldr	r3, [pc, #392]	; (8006cb0 <interrupt_WallCut+0xc28>)
 8006b26:	ed93 7a00 	vldr	s14, [r3]
 8006b2a:	4b62      	ldr	r3, [pc, #392]	; (8006cb4 <interrupt_WallCut+0xc2c>)
 8006b2c:	edd3 7a00 	vldr	s15, [r3]
 8006b30:	ee77 7a27 	vadd.f32	s15, s14, s15
						/ 2*INTERRUPT_TIME;
 8006b34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b38:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b3c:	ee16 0a90 	vmov	r0, s13
 8006b40:	f7f9 fd2a 	bl	8000598 <__aeabi_f2d>
 8006b44:	a356      	add	r3, pc, #344	; (adr r3, 8006ca0 <interrupt_WallCut+0xc18>)
 8006b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b4a:	f7f9 fd7d 	bl	8000648 <__aeabi_dmul>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
				NoWallDisplacementR45slant2 += (fusion_speedL + fusion_speedR)
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 fbc1 	bl	80002dc <__adddf3>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4610      	mov	r0, r2
 8006b60:	4619      	mov	r1, r3
 8006b62:	f7fa f849 	bl	8000bf8 <__aeabi_d2f>
 8006b66:	4603      	mov	r3, r0
 8006b68:	4a50      	ldr	r2, [pc, #320]	; (8006cac <interrupt_WallCut+0xc24>)
 8006b6a:	6013      	str	r3, [r2, #0]
				if (slantWallControlR_flag == 1) {
 8006b6c:	4b52      	ldr	r3, [pc, #328]	; (8006cb8 <interrupt_WallCut+0xc30>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d12a      	bne.n	8006bca <interrupt_WallCut+0xb42>
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006b74:	4b51      	ldr	r3, [pc, #324]	; (8006cbc <interrupt_WallCut+0xc34>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f7f9 fd0d 	bl	8000598 <__aeabi_f2d>
 8006b7e:	4604      	mov	r4, r0
 8006b80:	460d      	mov	r5, r1
 8006b82:	4b4b      	ldr	r3, [pc, #300]	; (8006cb0 <interrupt_WallCut+0xc28>)
 8006b84:	ed93 7a00 	vldr	s14, [r3]
 8006b88:	4b4a      	ldr	r3, [pc, #296]	; (8006cb4 <interrupt_WallCut+0xc2c>)
 8006b8a:	edd3 7a00 	vldr	s15, [r3]
 8006b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
							/ 2*INTERRUPT_TIME;
 8006b92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006b96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006b9a:	ee16 0a90 	vmov	r0, s13
 8006b9e:	f7f9 fcfb 	bl	8000598 <__aeabi_f2d>
 8006ba2:	a33f      	add	r3, pc, #252	; (adr r3, 8006ca0 <interrupt_WallCut+0xc18>)
 8006ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba8:	f7f9 fd4e 	bl	8000648 <__aeabi_dmul>
 8006bac:	4602      	mov	r2, r0
 8006bae:	460b      	mov	r3, r1
					NoWallDisplacementR45slant += (fusion_speedL + fusion_speedR)
 8006bb0:	4620      	mov	r0, r4
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f7f9 fb92 	bl	80002dc <__adddf3>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	f7fa f81a 	bl	8000bf8 <__aeabi_d2f>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	4a3d      	ldr	r2, [pc, #244]	; (8006cbc <interrupt_WallCut+0xc34>)
 8006bc8:	6013      	str	r3, [r2, #0]
			slantWallControlR_flag = 1;
 8006bca:	4b3b      	ldr	r3, [pc, #236]	; (8006cb8 <interrupt_WallCut+0xc30>)
 8006bcc:	2201      	movs	r2, #1
 8006bce:	701a      	strb	r2, [r3, #0]
}
 8006bd0:	e05f      	b.n	8006c92 <interrupt_WallCut+0xc0a>
		NoWallCountL90 = 0;
 8006bd2:	4b3b      	ldr	r3, [pc, #236]	; (8006cc0 <interrupt_WallCut+0xc38>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	601a      	str	r2, [r3, #0]
		NoWallCountR90 = 0;
 8006bd8:	4b3a      	ldr	r3, [pc, #232]	; (8006cc4 <interrupt_WallCut+0xc3c>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	601a      	str	r2, [r3, #0]
		NoWallCountL45 = 0;
 8006bde:	4b3a      	ldr	r3, [pc, #232]	; (8006cc8 <interrupt_WallCut+0xc40>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
		NoWallCountR45 = 0;
 8006be4:	4b39      	ldr	r3, [pc, #228]	; (8006ccc <interrupt_WallCut+0xc44>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	601a      	str	r2, [r3, #0]
		NoWallCountL45slant = 0;
 8006bea:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <interrupt_WallCut+0xc48>)
 8006bec:	2200      	movs	r2, #0
 8006bee:	601a      	str	r2, [r3, #0]
		NoWallCountR45slant = 0;
 8006bf0:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <interrupt_WallCut+0xc20>)
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL90 = 0;
 8006bf6:	4b37      	ldr	r3, [pc, #220]	; (8006cd4 <interrupt_WallCut+0xc4c>)
 8006bf8:	f04f 0200 	mov.w	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR90 = 0;
 8006bfe:	4b36      	ldr	r3, [pc, #216]	; (8006cd8 <interrupt_WallCut+0xc50>)
 8006c00:	f04f 0200 	mov.w	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8006c06:	4b35      	ldr	r3, [pc, #212]	; (8006cdc <interrupt_WallCut+0xc54>)
 8006c08:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c0c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8006c0e:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <interrupt_WallCut+0xc58>)
 8006c10:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8006c14:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant = 0;
 8006c16:	4b33      	ldr	r3, [pc, #204]	; (8006ce4 <interrupt_WallCut+0xc5c>)
 8006c18:	f04f 0200 	mov.w	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant = 0;
 8006c1e:	4b27      	ldr	r3, [pc, #156]	; (8006cbc <interrupt_WallCut+0xc34>)
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	601a      	str	r2, [r3, #0]
		NoWallDisplacementL45slant2 = 0;			//単純な壁切れ用
 8006c26:	4b30      	ldr	r3, [pc, #192]	; (8006ce8 <interrupt_WallCut+0xc60>)
 8006c28:	f04f 0200 	mov.w	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]
		NoWallDisplacementR45slant2 = 0;			//単純な壁切れ用
 8006c2e:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <interrupt_WallCut+0xc24>)
 8006c30:	f04f 0200 	mov.w	r2, #0
 8006c34:	601a      	str	r2, [r3, #0]
		NoWallCountL45_flag = 0;
 8006c36:	4b2d      	ldr	r3, [pc, #180]	; (8006cec <interrupt_WallCut+0xc64>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	701a      	strb	r2, [r3, #0]
		NoWallCountR45_flag = 0;
 8006c3c:	4b2c      	ldr	r3, [pc, #176]	; (8006cf0 <interrupt_WallCut+0xc68>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	701a      	strb	r2, [r3, #0]
		NoWallCountL45slant_flag = 0;
 8006c42:	4b2c      	ldr	r3, [pc, #176]	; (8006cf4 <interrupt_WallCut+0xc6c>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	701a      	strb	r2, [r3, #0]
		NoWallCountR45slant_flag = 0;
 8006c48:	4b2b      	ldr	r3, [pc, #172]	; (8006cf8 <interrupt_WallCut+0xc70>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	701a      	strb	r2, [r3, #0]
		slantWallControlL_flag = 0;
 8006c4e:	4b2b      	ldr	r3, [pc, #172]	; (8006cfc <interrupt_WallCut+0xc74>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	701a      	strb	r2, [r3, #0]
		slantWallControlR_flag = 0;
 8006c54:	4b18      	ldr	r3, [pc, #96]	; (8006cb8 <interrupt_WallCut+0xc30>)
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
		front_wall_break_90 = 0;
 8006c5a:	4b29      	ldr	r3, [pc, #164]	; (8006d00 <interrupt_WallCut+0xc78>)
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
		front_wall_break_45 = 0;
 8006c60:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <interrupt_WallCut+0xc7c>)
 8006c62:	2200      	movs	r2, #0
 8006c64:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c66:	4b28      	ldr	r3, [pc, #160]	; (8006d08 <interrupt_WallCut+0xc80>)
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
		front_wall_break_45slant = 0;
 8006c6c:	4b26      	ldr	r3, [pc, #152]	; (8006d08 <interrupt_WallCut+0xc80>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
		g_sensor_max_fl = 0;
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <interrupt_WallCut+0xc84>)
 8006c74:	f04f 0200 	mov.w	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr = 0;
 8006c7a:	4b25      	ldr	r3, [pc, #148]	; (8006d10 <interrupt_WallCut+0xc88>)
 8006c7c:	f04f 0200 	mov.w	r2, #0
 8006c80:	601a      	str	r2, [r3, #0]
		g_sensor_max_fl_slant = 0;
 8006c82:	4b24      	ldr	r3, [pc, #144]	; (8006d14 <interrupt_WallCut+0xc8c>)
 8006c84:	f04f 0200 	mov.w	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
		g_sensor_max_fr_slant = 0;
 8006c8a:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <interrupt_WallCut+0xc90>)
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	601a      	str	r2, [r3, #0]
}
 8006c92:	bf00      	nop
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bdb0      	pop	{r4, r5, r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	f3af 8000 	nop.w
 8006ca0:	d2f1a9fc 	.word	0xd2f1a9fc
 8006ca4:	3f50624d 	.word	0x3f50624d
 8006ca8:	200005c4 	.word	0x200005c4
 8006cac:	200005e4 	.word	0x200005e4
 8006cb0:	20000258 	.word	0x20000258
 8006cb4:	2000025c 	.word	0x2000025c
 8006cb8:	200005f1 	.word	0x200005f1
 8006cbc:	200005dc 	.word	0x200005dc
 8006cc0:	200005b8 	.word	0x200005b8
 8006cc4:	200005b4 	.word	0x200005b4
 8006cc8:	200005c0 	.word	0x200005c0
 8006ccc:	200005bc 	.word	0x200005bc
 8006cd0:	200005c8 	.word	0x200005c8
 8006cd4:	200005d0 	.word	0x200005d0
 8006cd8:	200005cc 	.word	0x200005cc
 8006cdc:	200005d8 	.word	0x200005d8
 8006ce0:	200005d4 	.word	0x200005d4
 8006ce4:	200005e0 	.word	0x200005e0
 8006ce8:	200005e8 	.word	0x200005e8
 8006cec:	200005ec 	.word	0x200005ec
 8006cf0:	200005ed 	.word	0x200005ed
 8006cf4:	200005ee 	.word	0x200005ee
 8006cf8:	200005ef 	.word	0x200005ef
 8006cfc:	200005f0 	.word	0x200005f0
 8006d00:	200005f2 	.word	0x200005f2
 8006d04:	200005f3 	.word	0x200005f3
 8006d08:	200005f4 	.word	0x200005f4
 8006d0c:	200005f8 	.word	0x200005f8
 8006d10:	200005fc 	.word	0x200005fc
 8006d14:	20000600 	.word	0x20000600
 8006d18:	20000604 	.word	0x20000604

08006d1c <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d32:	f015 f913 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006d36:	bf00      	nop
 8006d38:	3708      	adds	r7, #8
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
	...

08006d40 <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	2140      	movs	r1, #64	; 0x40
 8006d50:	4803      	ldr	r0, [pc, #12]	; (8006d60 <pl_yellow_LED_3+0x20>)
 8006d52:	f015 f903 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006d56:	bf00      	nop
 8006d58:	3708      	adds	r7, #8
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	48000800 	.word	0x48000800

08006d64 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b082      	sub	sp, #8
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	461a      	mov	r2, r3
 8006d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d76:	4803      	ldr	r0, [pc, #12]	; (8006d84 <pl_yellow_LED_6+0x20>)
 8006d78:	f015 f8f0 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006d7c:	bf00      	nop
 8006d7e:	3708      	adds	r7, #8
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	48000400 	.word	0x48000400

08006d88 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	461a      	mov	r2, r3
 8006d96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006d9a:	4803      	ldr	r0, [pc, #12]	; (8006da8 <pl_yellow_LED_8+0x20>)
 8006d9c:	f015 f8de 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}
 8006da8:	48000400 	.word	0x48000400

08006dac <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006dac:	b580      	push	{r7, lr}
 8006dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006db0:	2200      	movs	r2, #0
 8006db2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dba:	f015 f8cf 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006dc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dc8:	f015 f8c8 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2140      	movs	r1, #64	; 0x40
 8006dd0:	4811      	ldr	r0, [pc, #68]	; (8006e18 <pl_yellow_LED_off+0x6c>)
 8006dd2:	f015 f8c3 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ddc:	480f      	ldr	r0, [pc, #60]	; (8006e1c <pl_yellow_LED_off+0x70>)
 8006dde:	f015 f8bd 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006de2:	2200      	movs	r2, #0
 8006de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006de8:	480c      	ldr	r0, [pc, #48]	; (8006e1c <pl_yellow_LED_off+0x70>)
 8006dea:	f015 f8b7 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006dee:	2200      	movs	r2, #0
 8006df0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006df4:	4809      	ldr	r0, [pc, #36]	; (8006e1c <pl_yellow_LED_off+0x70>)
 8006df6:	f015 f8b1 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e00:	4806      	ldr	r0, [pc, #24]	; (8006e1c <pl_yellow_LED_off+0x70>)
 8006e02:	f015 f8ab 	bl	801bf5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006e06:	2200      	movs	r2, #0
 8006e08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e0c:	4803      	ldr	r0, [pc, #12]	; (8006e1c <pl_yellow_LED_off+0x70>)
 8006e0e:	f015 f8a5 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006e12:	bf00      	nop
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	48000800 	.word	0x48000800
 8006e1c:	48000400 	.word	0x48000400

08006e20 <pl_yellow_LED_count>:
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
}


void pl_yellow_LED_count(unsigned char yy){
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	4603      	mov	r3, r0
 8006e28:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 8006e2a:	79fb      	ldrb	r3, [r7, #7]
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006e32:	79fb      	ldrb	r3, [r7, #7]
 8006e34:	f003 0302 	and.w	r3, r3, #2
 8006e38:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f003 0304 	and.w	r3, r3, #4
 8006e40:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006e42:	79fb      	ldrb	r3, [r7, #7]
 8006e44:	f003 0308 	and.w	r3, r3, #8
 8006e48:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 8006e4a:	79fb      	ldrb	r3, [r7, #7]
 8006e4c:	f003 0310 	and.w	r3, r3, #16
 8006e50:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006e52:	79fb      	ldrb	r3, [r7, #7]
 8006e54:	f003 0320 	and.w	r3, r3, #32
 8006e58:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 8006e5a:	79fb      	ldrb	r3, [r7, #7]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e60:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006e62:	79fb      	ldrb	r3, [r7, #7]
 8006e64:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e68:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 8006e6a:	7bfb      	ldrb	r3, [r7, #15]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d007      	beq.n	8006e80 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006e70:	2201      	movs	r2, #1
 8006e72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e7a:	f015 f86f 	bl	801bf5c <HAL_GPIO_WritePin>
 8006e7e:	e006      	b.n	8006e8e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006e80:	2200      	movs	r2, #0
 8006e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e8a:	f015 f867 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006e94:	2201      	movs	r2, #1
 8006e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e9a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e9e:	f015 f85d 	bl	801bf5c <HAL_GPIO_WritePin>
 8006ea2:	e006      	b.n	8006eb2 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eae:	f015 f855 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 8006eb2:	7b7b      	ldrb	r3, [r7, #13]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d005      	beq.n	8006ec4 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 8006eb8:	2201      	movs	r2, #1
 8006eba:	2140      	movs	r1, #64	; 0x40
 8006ebc:	482e      	ldr	r0, [pc, #184]	; (8006f78 <pl_yellow_LED_count+0x158>)
 8006ebe:	f015 f84d 	bl	801bf5c <HAL_GPIO_WritePin>
 8006ec2:	e004      	b.n	8006ece <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	2140      	movs	r1, #64	; 0x40
 8006ec8:	482b      	ldr	r0, [pc, #172]	; (8006f78 <pl_yellow_LED_count+0x158>)
 8006eca:	f015 f847 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 8006ece:	7b3b      	ldrb	r3, [r7, #12]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d006      	beq.n	8006ee2 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006eda:	4828      	ldr	r0, [pc, #160]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006edc:	f015 f83e 	bl	801bf5c <HAL_GPIO_WritePin>
 8006ee0:	e005      	b.n	8006eee <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ee8:	4824      	ldr	r0, [pc, #144]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006eea:	f015 f837 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 8006eee:	7afb      	ldrb	r3, [r7, #11]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d006      	beq.n	8006f02 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006efa:	4820      	ldr	r0, [pc, #128]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006efc:	f015 f82e 	bl	801bf5c <HAL_GPIO_WritePin>
 8006f00:	e005      	b.n	8006f0e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006f02:	2200      	movs	r2, #0
 8006f04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f08:	481c      	ldr	r0, [pc, #112]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f0a:	f015 f827 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 8006f0e:	7abb      	ldrb	r3, [r7, #10]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d006      	beq.n	8006f22 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006f14:	2201      	movs	r2, #1
 8006f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f1a:	4818      	ldr	r0, [pc, #96]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f1c:	f015 f81e 	bl	801bf5c <HAL_GPIO_WritePin>
 8006f20:	e005      	b.n	8006f2e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006f22:	2200      	movs	r2, #0
 8006f24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f28:	4814      	ldr	r0, [pc, #80]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f2a:	f015 f817 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 8006f2e:	7a7b      	ldrb	r3, [r7, #9]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d006      	beq.n	8006f42 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006f34:	2201      	movs	r2, #1
 8006f36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f3a:	4810      	ldr	r0, [pc, #64]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f3c:	f015 f80e 	bl	801bf5c <HAL_GPIO_WritePin>
 8006f40:	e005      	b.n	8006f4e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006f42:	2200      	movs	r2, #0
 8006f44:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f48:	480c      	ldr	r0, [pc, #48]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f4a:	f015 f807 	bl	801bf5c <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 8006f4e:	7a3b      	ldrb	r3, [r7, #8]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d006      	beq.n	8006f62 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006f54:	2201      	movs	r2, #1
 8006f56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f5a:	4808      	ldr	r0, [pc, #32]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f5c:	f014 fffe 	bl	801bf5c <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006f60:	e005      	b.n	8006f6e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006f62:	2200      	movs	r2, #0
 8006f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f68:	4804      	ldr	r0, [pc, #16]	; (8006f7c <pl_yellow_LED_count+0x15c>)
 8006f6a:	f014 fff7 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006f6e:	bf00      	nop
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	48000800 	.word	0x48000800
 8006f7c:	48000400 	.word	0x48000400

08006f80 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f92:	4803      	ldr	r0, [pc, #12]	; (8006fa0 <pl_r_blue_LED+0x20>)
 8006f94:	f014 ffe2 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006f98:	bf00      	nop
 8006f9a:	3708      	adds	r7, #8
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	48000800 	.word	0x48000800

08006fa4 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	2104      	movs	r1, #4
 8006fb4:	4803      	ldr	r0, [pc, #12]	; (8006fc4 <pl_l_blue_LED+0x20>)
 8006fb6:	f014 ffd1 	bl	801bf5c <HAL_GPIO_WritePin>
}
 8006fba:	bf00      	nop
 8006fbc:	3708      	adds	r7, #8
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	bf00      	nop
 8006fc4:	48000400 	.word	0x48000400

08006fc8 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b088      	sub	sp, #32
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	460a      	mov	r2, r1
 8006fd2:	80fb      	strh	r3, [r7, #6]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2110      	movs	r1, #16
 8006fdc:	4833      	ldr	r0, [pc, #204]	; (80070ac <encoder_read_byte_R+0xe4>)
 8006fde:	f014 ffbd 	bl	801bf5c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 8006fe2:	88fb      	ldrh	r3, [r7, #6]
 8006fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fe8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	e00d      	b.n	8007010 <encoder_read_byte_R+0x48>
 8006ff4:	88fa      	ldrh	r2, [r7, #6]
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	fa42 f303 	asr.w	r3, r2, r3
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	8bfb      	ldrh	r3, [r7, #30]
 8007006:	4413      	add	r3, r2
 8007008:	83fb      	strh	r3, [r7, #30]
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	3301      	adds	r3, #1
 800700e:	61bb      	str	r3, [r7, #24]
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	2b0e      	cmp	r3, #14
 8007014:	ddee      	ble.n	8006ff4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8007016:	8bfb      	ldrh	r3, [r7, #30]
 8007018:	03db      	lsls	r3, r3, #15
 800701a:	b21a      	sxth	r2, r3
 800701c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007020:	4313      	orrs	r3, r2
 8007022:	b21b      	sxth	r3, r3
 8007024:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007026:	88fb      	ldrh	r3, [r7, #6]
 8007028:	0a1b      	lsrs	r3, r3, #8
 800702a:	b29b      	uxth	r3, r3
 800702c:	b2db      	uxtb	r3, r3
 800702e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007030:	88fb      	ldrh	r3, [r7, #6]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007036:	f107 0110 	add.w	r1, r7, #16
 800703a:	2364      	movs	r3, #100	; 0x64
 800703c:	2202      	movs	r2, #2
 800703e:	481c      	ldr	r0, [pc, #112]	; (80070b0 <encoder_read_byte_R+0xe8>)
 8007040:	f016 f86f 	bl	801d122 <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007044:	2201      	movs	r2, #1
 8007046:	2110      	movs	r1, #16
 8007048:	4818      	ldr	r0, [pc, #96]	; (80070ac <encoder_read_byte_R+0xe4>)
 800704a:	f014 ff87 	bl	801bf5c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
 8007052:	e002      	b.n	800705a <encoder_read_byte_R+0x92>
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	3301      	adds	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2b95      	cmp	r3, #149	; 0x95
 800705e:	ddf9      	ble.n	8007054 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007060:	2200      	movs	r2, #0
 8007062:	2110      	movs	r1, #16
 8007064:	4811      	ldr	r0, [pc, #68]	; (80070ac <encoder_read_byte_R+0xe4>)
 8007066:	f014 ff79 	bl	801bf5c <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800706a:	88bb      	ldrh	r3, [r7, #4]
 800706c:	0a1b      	lsrs	r3, r3, #8
 800706e:	b29b      	uxth	r3, r3
 8007070:	b2db      	uxtb	r3, r3
 8007072:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8007074:	88bb      	ldrh	r3, [r7, #4]
 8007076:	b2db      	uxtb	r3, r3
 8007078:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800707a:	f107 010c 	add.w	r1, r7, #12
 800707e:	2364      	movs	r3, #100	; 0x64
 8007080:	2202      	movs	r2, #2
 8007082:	480b      	ldr	r0, [pc, #44]	; (80070b0 <encoder_read_byte_R+0xe8>)
 8007084:	f016 f9bb 	bl	801d3fe <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007088:	7b3b      	ldrb	r3, [r7, #12]
 800708a:	021b      	lsls	r3, r3, #8
 800708c:	b21a      	sxth	r2, r3
 800708e:	7b7b      	ldrb	r3, [r7, #13]
 8007090:	b21b      	sxth	r3, r3
 8007092:	4313      	orrs	r3, r2
 8007094:	b21b      	sxth	r3, r3
 8007096:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007098:	2201      	movs	r2, #1
 800709a:	2110      	movs	r1, #16
 800709c:	4803      	ldr	r0, [pc, #12]	; (80070ac <encoder_read_byte_R+0xe4>)
 800709e:	f014 ff5d 	bl	801bf5c <HAL_GPIO_WritePin>

	return data;
 80070a2:	88bb      	ldrh	r3, [r7, #4]

}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3720      	adds	r7, #32
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	48000400 	.word	0x48000400
 80070b0:	2000ee34 	.word	0x2000ee34

080070b4 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	4603      	mov	r3, r0
 80070bc:	460a      	mov	r2, r1
 80070be:	80fb      	strh	r3, [r7, #6]
 80070c0:	4613      	mov	r3, r2
 80070c2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80070c4:	2200      	movs	r2, #0
 80070c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ce:	f014 ff45 	bl	801bf5c <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80070d2:	88fb      	ldrh	r3, [r7, #6]
 80070d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80070d8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80070da:	2300      	movs	r3, #0
 80070dc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80070de:	2300      	movs	r3, #0
 80070e0:	61bb      	str	r3, [r7, #24]
 80070e2:	e00d      	b.n	8007100 <encoder_read_byte_L+0x4c>
 80070e4:	88fa      	ldrh	r2, [r7, #6]
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	fa42 f303 	asr.w	r3, r2, r3
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	f003 0301 	and.w	r3, r3, #1
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	8bfb      	ldrh	r3, [r7, #30]
 80070f6:	4413      	add	r3, r2
 80070f8:	83fb      	strh	r3, [r7, #30]
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	3301      	adds	r3, #1
 80070fe:	61bb      	str	r3, [r7, #24]
 8007100:	69bb      	ldr	r3, [r7, #24]
 8007102:	2b0e      	cmp	r3, #14
 8007104:	ddee      	ble.n	80070e4 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8007106:	8bfb      	ldrh	r3, [r7, #30]
 8007108:	03db      	lsls	r3, r3, #15
 800710a:	b21a      	sxth	r2, r3
 800710c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007110:	4313      	orrs	r3, r2
 8007112:	b21b      	sxth	r3, r3
 8007114:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	b29b      	uxth	r3, r3
 800711c:	b2db      	uxtb	r3, r3
 800711e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8007120:	88fb      	ldrh	r3, [r7, #6]
 8007122:	b2db      	uxtb	r3, r3
 8007124:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8007126:	f107 0110 	add.w	r1, r7, #16
 800712a:	2364      	movs	r3, #100	; 0x64
 800712c:	2202      	movs	r2, #2
 800712e:	481e      	ldr	r0, [pc, #120]	; (80071a8 <encoder_read_byte_L+0xf4>)
 8007130:	f015 fff7 	bl	801d122 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007134:	2201      	movs	r2, #1
 8007136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800713a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800713e:	f014 ff0d 	bl	801bf5c <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
 8007146:	e002      	b.n	800714e <encoder_read_byte_L+0x9a>
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3301      	adds	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	2b95      	cmp	r3, #149	; 0x95
 8007152:	ddf9      	ble.n	8007148 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8007154:	2200      	movs	r2, #0
 8007156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800715a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800715e:	f014 fefd 	bl	801bf5c <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8007162:	88bb      	ldrh	r3, [r7, #4]
 8007164:	0a1b      	lsrs	r3, r3, #8
 8007166:	b29b      	uxth	r3, r3
 8007168:	b2db      	uxtb	r3, r3
 800716a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 800716c:	88bb      	ldrh	r3, [r7, #4]
 800716e:	b2db      	uxtb	r3, r3
 8007170:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8007172:	f107 010c 	add.w	r1, r7, #12
 8007176:	2364      	movs	r3, #100	; 0x64
 8007178:	2202      	movs	r2, #2
 800717a:	480b      	ldr	r0, [pc, #44]	; (80071a8 <encoder_read_byte_L+0xf4>)
 800717c:	f016 f93f 	bl	801d3fe <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8007180:	7b3b      	ldrb	r3, [r7, #12]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	b21a      	sxth	r2, r3
 8007186:	7b7b      	ldrb	r3, [r7, #13]
 8007188:	b21b      	sxth	r3, r3
 800718a:	4313      	orrs	r3, r2
 800718c:	b21b      	sxth	r3, r3
 800718e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8007190:	2201      	movs	r2, #1
 8007192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007196:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800719a:	f014 fedf 	bl	801bf5c <HAL_GPIO_WritePin>

	return data;
 800719e:	88bb      	ldrh	r3, [r7, #4]

}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3720      	adds	r7, #32
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}
 80071a8:	2000ee34 	.word	0x2000ee34

080071ac <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 80071ac:	b580      	push	{r7, lr}
 80071ae:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071b0:	2100      	movs	r1, #0
 80071b2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071b6:	f7ff ff07 	bl	8006fc8 <encoder_read_byte_R>
 80071ba:	4603      	mov	r3, r0
 80071bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071c8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8007210 <AS5047_DataUpdate+0x64>
 80071cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071d0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8007214 <AS5047_DataUpdate+0x68>
 80071d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071d8:	4b0f      	ldr	r3, [pc, #60]	; (8007218 <AS5047_DataUpdate+0x6c>)
 80071da:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 80071de:	2100      	movs	r1, #0
 80071e0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 80071e4:	f7ff ff66 	bl	80070b4 <encoder_read_byte_L>
 80071e8:	4603      	mov	r3, r0
 80071ea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80071ee:	ee07 3a90 	vmov	s15, r3
 80071f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071f6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8007210 <AS5047_DataUpdate+0x64>
 80071fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80071fe:	eddf 6a05 	vldr	s13, [pc, #20]	; 8007214 <AS5047_DataUpdate+0x68>
 8007202:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007206:	4b05      	ldr	r3, [pc, #20]	; (800721c <AS5047_DataUpdate+0x70>)
 8007208:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 800720c:	bf00      	nop
 800720e:	bd80      	pop	{r7, pc}
 8007210:	43b40000 	.word	0x43b40000
 8007214:	46800000 	.word	0x46800000
 8007218:	200006d8 	.word	0x200006d8
 800721c:	200006dc 	.word	0x200006dc

08007220 <test_flash>:


const uint32_t start_address = 0x807F000; //bank1 page last start address
const uint32_t end_adress = 0x807FFFF; // bank1 page last end address

void test_flash(void){
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
		  record_out();
 8007224:	f000 f91a 	bl	800745c <record_out>
		  maze_display();
 8007228:	f00d fdf8 	bl	8014e1c <maze_display>
		  flash_record_init();
 800722c:	f000 f9c2 	bl	80075b4 <flash_record_init>
		  record_in();
 8007230:	f000 f858 	bl	80072e4 <record_in>
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}

08007238 <eraseFlash>:


void eraseFlash( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b086      	sub	sp, #24
 800723c:	af00      	add	r7, sp, #0
	FLASH_EraseInitTypeDef erase;
	erase.TypeErase = FLASH_TYPEERASE_PAGES;	// select page
 800723e:	2300      	movs	r3, #0
 8007240:	60bb      	str	r3, [r7, #8]
	erase.Banks = FLASH_BANK_1;		       // set bank1
 8007242:	2301      	movs	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]
	erase.Page = 254;// set page254(127)
 8007246:	23fe      	movs	r3, #254	; 0xfe
 8007248:	613b      	str	r3, [r7, #16]
	erase.NbPages = 1;//delete page
 800724a:	2301      	movs	r3, #1
 800724c:	617b      	str	r3, [r7, #20]
	uint32_t pageError = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	607b      	str	r3, [r7, #4]

	HAL_FLASHEx_Erase(&erase, &pageError);	// erase sector
 8007252:	1d3a      	adds	r2, r7, #4
 8007254:	f107 0308 	add.w	r3, r7, #8
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f014 fbd6 	bl	801ba0c <HAL_FLASHEx_Erase>

//	for (int i=0;i<10;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007260:	bf00      	nop
 8007262:	3718      	adds	r7, #24
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}

08007268 <writeFlash>:


void writeFlash(uint32_t address, uint64_t *data, uint32_t size,uint8_t erasemode)
{
 8007268:	b5b0      	push	{r4, r5, r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	70fb      	strb	r3, [r7, #3]
	HAL_FLASH_Unlock();		// unlock flash
 8007276:	f014 fadd 	bl	801b834 <HAL_FLASH_Unlock>
	if(erasemode==1){eraseFlash();}
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d101      	bne.n	8007284 <writeFlash+0x1c>
 8007280:	f7ff ffda 	bl	8007238 <eraseFlash>

	for ( uint32_t add = address; add < (address + size); add+=8 ){
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	617b      	str	r3, [r7, #20]
 8007288:	e00f      	b.n	80072aa <writeFlash+0x42>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, add, (uint64_t *)data); // write byte
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	17da      	asrs	r2, r3, #31
 800728e:	461c      	mov	r4, r3
 8007290:	4615      	mov	r5, r2
 8007292:	4622      	mov	r2, r4
 8007294:	462b      	mov	r3, r5
 8007296:	6979      	ldr	r1, [r7, #20]
 8007298:	2000      	movs	r0, #0
 800729a:	f014 fa75 	bl	801b788 <HAL_FLASH_Program>
		data=data+4;  // add data pointer
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	3320      	adds	r3, #32
 80072a2:	60bb      	str	r3, [r7, #8]
	for ( uint32_t add = address; add < (address + size); add+=8 ){
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	3308      	adds	r3, #8
 80072a8:	617b      	str	r3, [r7, #20]
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4413      	add	r3, r2
 80072b0:	697a      	ldr	r2, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d3e9      	bcc.n	800728a <writeFlash+0x22>
	}

	HAL_FLASH_Lock();		// lock flash
 80072b6:	f014 fadf 	bl	801b878 <HAL_FLASH_Lock>

}
 80072ba:	bf00      	nop
 80072bc:	3718      	adds	r7, #24
 80072be:	46bd      	mov	sp, r7
 80072c0:	bdb0      	pop	{r4, r5, r7, pc}

080072c2 <loadFlash>:

void loadFlash(uint32_t address, uint64_t *data, uint32_t size )
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b084      	sub	sp, #16
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	60f8      	str	r0, [r7, #12]
 80072ca:	60b9      	str	r1, [r7, #8]
 80072cc:	607a      	str	r2, [r7, #4]
	memcpy(data, (uint64_t*)address,size); // copy data
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	4619      	mov	r1, r3
 80072d4:	68b8      	ldr	r0, [r7, #8]
 80072d6:	f018 ff57 	bl	8020188 <memcpy>

}
 80072da:	bf00      	nop
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
	...

080072e4 <record_in>:


void record_in(void) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b082      	sub	sp, #8
 80072e8:	af00      	add	r7, sp, #0
	int t = 0;
 80072ea:	2300      	movs	r3, #0
 80072ec:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 80072ee:	4b58      	ldr	r3, [pc, #352]	; (8007450 <record_in+0x16c>)
 80072f0:	603b      	str	r3, [r7, #0]

	while (t <= 14) {
 80072f2:	e017      	b.n	8007324 <record_in+0x40>
		record.row[t] = wall.row[t];
 80072f4:	4a57      	ldr	r2, [pc, #348]	; (8007454 <record_in+0x170>)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80072fc:	4a56      	ldr	r2, [pc, #344]	; (8007458 <record_in+0x174>)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[t] = wall.column[t];
 8007304:	4a53      	ldr	r2, [pc, #332]	; (8007454 <record_in+0x170>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	330c      	adds	r3, #12
 800730a:	005b      	lsls	r3, r3, #1
 800730c:	4413      	add	r3, r2
 800730e:	88d9      	ldrh	r1, [r3, #6]
 8007310:	4a51      	ldr	r2, [pc, #324]	; (8007458 <record_in+0x174>)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	330c      	adds	r3, #12
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	4413      	add	r3, r2
 800731a:	460a      	mov	r2, r1
 800731c:	80da      	strh	r2, [r3, #6]
		t++;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	3301      	adds	r3, #1
 8007322:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b0e      	cmp	r3, #14
 8007328:	dde4      	ble.n	80072f4 <record_in+0x10>
	}
	t = 0;
 800732a:	2300      	movs	r3, #0
 800732c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800732e:	e01c      	b.n	800736a <record_in+0x86>
		record.row_look[t] = wall.row_look[t];
 8007330:	4a48      	ldr	r2, [pc, #288]	; (8007454 <record_in+0x170>)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	331c      	adds	r3, #28
 8007336:	005b      	lsls	r3, r3, #1
 8007338:	4413      	add	r3, r2
 800733a:	8899      	ldrh	r1, [r3, #4]
 800733c:	4a46      	ldr	r2, [pc, #280]	; (8007458 <record_in+0x174>)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	331c      	adds	r3, #28
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4413      	add	r3, r2
 8007346:	460a      	mov	r2, r1
 8007348:	809a      	strh	r2, [r3, #4]
		record.column_look[t] = wall.column_look[t];
 800734a:	4a42      	ldr	r2, [pc, #264]	; (8007454 <record_in+0x170>)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	332c      	adds	r3, #44	; 0x2c
 8007350:	005b      	lsls	r3, r3, #1
 8007352:	4413      	add	r3, r2
 8007354:	8859      	ldrh	r1, [r3, #2]
 8007356:	4a40      	ldr	r2, [pc, #256]	; (8007458 <record_in+0x174>)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	332c      	adds	r3, #44	; 0x2c
 800735c:	005b      	lsls	r3, r3, #1
 800735e:	4413      	add	r3, r2
 8007360:	460a      	mov	r2, r1
 8007362:	805a      	strh	r2, [r3, #2]
		t++;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3301      	adds	r3, #1
 8007368:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2b0e      	cmp	r3, #14
 800736e:	dddf      	ble.n	8007330 <record_in+0x4c>
	}
	t = 0;
 8007370:	2300      	movs	r3, #0
 8007372:	607b      	str	r3, [r7, #4]

	writeFlash(address, (uint64_t*) record.row[0], 1, ON);
 8007374:	4b38      	ldr	r3, [pc, #224]	; (8007458 <record_in+0x174>)
 8007376:	881b      	ldrh	r3, [r3, #0]
 8007378:	4619      	mov	r1, r3
 800737a:	2301      	movs	r3, #1
 800737c:	2201      	movs	r2, #1
 800737e:	6838      	ldr	r0, [r7, #0]
 8007380:	f7ff ff72 	bl	8007268 <writeFlash>
	address+=16;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	3310      	adds	r3, #16
 8007388:	603b      	str	r3, [r7, #0]
	t=1;
 800738a:	2301      	movs	r3, #1
 800738c:	607b      	str	r3, [r7, #4]

	while (t <= 14) {
 800738e:	e00f      	b.n	80073b0 <record_in+0xcc>
	writeFlash(address, (uint64_t*) record.row[t], 1, OFF);
 8007390:	4a31      	ldr	r2, [pc, #196]	; (8007458 <record_in+0x174>)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007398:	4619      	mov	r1, r3
 800739a:	2300      	movs	r3, #0
 800739c:	2201      	movs	r2, #1
 800739e:	6838      	ldr	r0, [r7, #0]
 80073a0:	f7ff ff62 	bl	8007268 <writeFlash>
	address+=16;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	3310      	adds	r3, #16
 80073a8:	603b      	str	r3, [r7, #0]
	t++;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	3301      	adds	r3, #1
 80073ae:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b0e      	cmp	r3, #14
 80073b4:	ddec      	ble.n	8007390 <record_in+0xac>
	}

	t=0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073ba:	e011      	b.n	80073e0 <record_in+0xfc>
	writeFlash(address, (uint64_t*) record.column[t], 1, OFF);
 80073bc:	4a26      	ldr	r2, [pc, #152]	; (8007458 <record_in+0x174>)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	330c      	adds	r3, #12
 80073c2:	005b      	lsls	r3, r3, #1
 80073c4:	4413      	add	r3, r2
 80073c6:	88db      	ldrh	r3, [r3, #6]
 80073c8:	4619      	mov	r1, r3
 80073ca:	2300      	movs	r3, #0
 80073cc:	2201      	movs	r2, #1
 80073ce:	6838      	ldr	r0, [r7, #0]
 80073d0:	f7ff ff4a 	bl	8007268 <writeFlash>
	address+=16;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	3310      	adds	r3, #16
 80073d8:	603b      	str	r3, [r7, #0]
	t++;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3301      	adds	r3, #1
 80073de:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b0e      	cmp	r3, #14
 80073e4:	ddea      	ble.n	80073bc <record_in+0xd8>
	}

	t=0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80073ea:	e011      	b.n	8007410 <record_in+0x12c>
	writeFlash(address, (uint64_t*) record.row_look[t], 1, OFF);
 80073ec:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <record_in+0x174>)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	331c      	adds	r3, #28
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	4413      	add	r3, r2
 80073f6:	889b      	ldrh	r3, [r3, #4]
 80073f8:	4619      	mov	r1, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	2201      	movs	r2, #1
 80073fe:	6838      	ldr	r0, [r7, #0]
 8007400:	f7ff ff32 	bl	8007268 <writeFlash>
	address+=16;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	3310      	adds	r3, #16
 8007408:	603b      	str	r3, [r7, #0]
	t++;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	3301      	adds	r3, #1
 800740e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2b0e      	cmp	r3, #14
 8007414:	ddea      	ble.n	80073ec <record_in+0x108>
	}

	t=0;
 8007416:	2300      	movs	r3, #0
 8007418:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800741a:	e011      	b.n	8007440 <record_in+0x15c>
	writeFlash(address, (uint64_t*) record.column_look[t], 1, OFF);
 800741c:	4a0e      	ldr	r2, [pc, #56]	; (8007458 <record_in+0x174>)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	332c      	adds	r3, #44	; 0x2c
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	885b      	ldrh	r3, [r3, #2]
 8007428:	4619      	mov	r1, r3
 800742a:	2300      	movs	r3, #0
 800742c:	2201      	movs	r2, #1
 800742e:	6838      	ldr	r0, [r7, #0]
 8007430:	f7ff ff1a 	bl	8007268 <writeFlash>
	address+=16;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	3310      	adds	r3, #16
 8007438:	603b      	str	r3, [r7, #0]
	t++;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	3301      	adds	r3, #1
 800743e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2b0e      	cmp	r3, #14
 8007444:	ddea      	ble.n	800741c <record_in+0x138>

//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	0807f000 	.word	0x0807f000
 8007454:	20000c3c 	.word	0x20000c3c
 8007458:	20000cb4 	.word	0x20000cb4

0800745c <record_out>:


void record_out(void) {
 800745c:	b580      	push	{r7, lr}
 800745e:	b082      	sub	sp, #8
 8007460:	af00      	add	r7, sp, #0
//	for (int i=0;i<200;i++){
//		printf("nowpage%x=%x\n\r",((start_address+i)&65535), (*(uint8_t*)(start_address+i)));
//	}

	int t=0;
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
	uint32_t address=start_address;
 8007466:	4b50      	ldr	r3, [pc, #320]	; (80075a8 <record_out+0x14c>)
 8007468:	603b      	str	r3, [r7, #0]
	while (t <= 14) {
 800746a:	e00e      	b.n	800748a <record_out+0x2e>
	loadFlash(address, (uint64_t*)&record.row[t], 2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4a4e      	ldr	r2, [pc, #312]	; (80075ac <record_out+0x150>)
 8007472:	4413      	add	r3, r2
 8007474:	2202      	movs	r2, #2
 8007476:	4619      	mov	r1, r3
 8007478:	6838      	ldr	r0, [r7, #0]
 800747a:	f7ff ff22 	bl	80072c2 <loadFlash>
	address+=16;
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	3310      	adds	r3, #16
 8007482:	603b      	str	r3, [r7, #0]
	t++;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	3301      	adds	r3, #1
 8007488:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2b0e      	cmp	r3, #14
 800748e:	dded      	ble.n	800746c <record_out+0x10>
	}

	t=0;
 8007490:	2300      	movs	r3, #0
 8007492:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007494:	e010      	b.n	80074b8 <record_out+0x5c>
	loadFlash(address, (uint64_t*)&record.column[t], 2);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	330c      	adds	r3, #12
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4a43      	ldr	r2, [pc, #268]	; (80075ac <record_out+0x150>)
 800749e:	4413      	add	r3, r2
 80074a0:	3306      	adds	r3, #6
 80074a2:	2202      	movs	r2, #2
 80074a4:	4619      	mov	r1, r3
 80074a6:	6838      	ldr	r0, [r7, #0]
 80074a8:	f7ff ff0b 	bl	80072c2 <loadFlash>
	address+=16;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	3310      	adds	r3, #16
 80074b0:	603b      	str	r3, [r7, #0]
	t++;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3301      	adds	r3, #1
 80074b6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2b0e      	cmp	r3, #14
 80074bc:	ddeb      	ble.n	8007496 <record_out+0x3a>
	}

	t=0;
 80074be:	2300      	movs	r3, #0
 80074c0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074c2:	e010      	b.n	80074e6 <record_out+0x8a>
		loadFlash(address, (uint64_t*)&record.row_look[t], 2);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	331c      	adds	r3, #28
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	4a38      	ldr	r2, [pc, #224]	; (80075ac <record_out+0x150>)
 80074cc:	4413      	add	r3, r2
 80074ce:	3304      	adds	r3, #4
 80074d0:	2202      	movs	r2, #2
 80074d2:	4619      	mov	r1, r3
 80074d4:	6838      	ldr	r0, [r7, #0]
 80074d6:	f7ff fef4 	bl	80072c2 <loadFlash>
		address+=16;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3310      	adds	r3, #16
 80074de:	603b      	str	r3, [r7, #0]
		t++;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	3301      	adds	r3, #1
 80074e4:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2b0e      	cmp	r3, #14
 80074ea:	ddeb      	ble.n	80074c4 <record_out+0x68>
	}

	t=0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80074f0:	e010      	b.n	8007514 <record_out+0xb8>
		loadFlash(address, (uint64_t*)&record.column_look[t], 2);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	332c      	adds	r3, #44	; 0x2c
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4a2c      	ldr	r2, [pc, #176]	; (80075ac <record_out+0x150>)
 80074fa:	4413      	add	r3, r2
 80074fc:	3302      	adds	r3, #2
 80074fe:	2202      	movs	r2, #2
 8007500:	4619      	mov	r1, r3
 8007502:	6838      	ldr	r0, [r7, #0]
 8007504:	f7ff fedd 	bl	80072c2 <loadFlash>
		address+=16;
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	3310      	adds	r3, #16
 800750c:	603b      	str	r3, [r7, #0]
		t++;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3301      	adds	r3, #1
 8007512:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b0e      	cmp	r3, #14
 8007518:	ddeb      	ble.n	80074f2 <record_out+0x96>
//			sizeof(record.column));
//	loadFlash(start_address + 2 * sizeof(record.row),
//			(uint64_t*) record.row_look, sizeof(record.row_look));
//	loadFlash(start_address + 3 * sizeof(record.row),
//			(uint64_t*) record.column_look, sizeof(record.column_look));
	t = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800751e:	e017      	b.n	8007550 <record_out+0xf4>
		wall.row[t] = record.row[t];
 8007520:	4a22      	ldr	r2, [pc, #136]	; (80075ac <record_out+0x150>)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007528:	4a21      	ldr	r2, [pc, #132]	; (80075b0 <record_out+0x154>)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 8007530:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <record_out+0x150>)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	005b      	lsls	r3, r3, #1
 8007538:	4413      	add	r3, r2
 800753a:	88d9      	ldrh	r1, [r3, #6]
 800753c:	4a1c      	ldr	r2, [pc, #112]	; (80075b0 <record_out+0x154>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	330c      	adds	r3, #12
 8007542:	005b      	lsls	r3, r3, #1
 8007544:	4413      	add	r3, r2
 8007546:	460a      	mov	r2, r1
 8007548:	80da      	strh	r2, [r3, #6]
		t++;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	3301      	adds	r3, #1
 800754e:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b0e      	cmp	r3, #14
 8007554:	dde4      	ble.n	8007520 <record_out+0xc4>
	}
	t = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 800755a:	e01c      	b.n	8007596 <record_out+0x13a>
		wall.row_look[t] = record.row_look[t];
 800755c:	4a13      	ldr	r2, [pc, #76]	; (80075ac <record_out+0x150>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	331c      	adds	r3, #28
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	4413      	add	r3, r2
 8007566:	8899      	ldrh	r1, [r3, #4]
 8007568:	4a11      	ldr	r2, [pc, #68]	; (80075b0 <record_out+0x154>)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	331c      	adds	r3, #28
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	4413      	add	r3, r2
 8007572:	460a      	mov	r2, r1
 8007574:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = record.column_look[t];
 8007576:	4a0d      	ldr	r2, [pc, #52]	; (80075ac <record_out+0x150>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	332c      	adds	r3, #44	; 0x2c
 800757c:	005b      	lsls	r3, r3, #1
 800757e:	4413      	add	r3, r2
 8007580:	8859      	ldrh	r1, [r3, #2]
 8007582:	4a0b      	ldr	r2, [pc, #44]	; (80075b0 <record_out+0x154>)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	332c      	adds	r3, #44	; 0x2c
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	4413      	add	r3, r2
 800758c:	460a      	mov	r2, r1
 800758e:	805a      	strh	r2, [r3, #2]
		t++;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3301      	adds	r3, #1
 8007594:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2b0e      	cmp	r3, #14
 800759a:	dddf      	ble.n	800755c <record_out+0x100>
	}

	t = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	607b      	str	r3, [r7, #4]

}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	0807f000 	.word	0x0807f000
 80075ac:	20000cb4 	.word	0x20000cb4
 80075b0:	20000c3c 	.word	0x20000c3c

080075b4 <flash_record_init>:

void flash_record_init(void){
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
	int t = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075be:	e013      	b.n	80075e8 <flash_record_init+0x34>
		wall.row[t] = 0b111100011;
 80075c0:	4a1e      	ldr	r2, [pc, #120]	; (800763c <flash_record_init+0x88>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f240 11e3 	movw	r1, #483	; 0x1e3
 80075c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = t*2;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	005b      	lsls	r3, r3, #1
 80075d2:	b299      	uxth	r1, r3
 80075d4:	4a19      	ldr	r2, [pc, #100]	; (800763c <flash_record_init+0x88>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	330c      	adds	r3, #12
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	4413      	add	r3, r2
 80075de:	460a      	mov	r2, r1
 80075e0:	80da      	strh	r2, [r3, #6]
		t++;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3301      	adds	r3, #1
 80075e6:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2b0e      	cmp	r3, #14
 80075ec:	dde8      	ble.n	80075c0 <flash_record_init+0xc>
	}
	t = 0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 80075f2:	e018      	b.n	8007626 <flash_record_init+0x72>
		wall.row_look[t] = t*4;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	b299      	uxth	r1, r3
 80075fc:	4a0f      	ldr	r2, [pc, #60]	; (800763c <flash_record_init+0x88>)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	331c      	adds	r3, #28
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	460a      	mov	r2, r1
 8007608:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = t*8;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	b29b      	uxth	r3, r3
 800760e:	00db      	lsls	r3, r3, #3
 8007610:	b299      	uxth	r1, r3
 8007612:	4a0a      	ldr	r2, [pc, #40]	; (800763c <flash_record_init+0x88>)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	332c      	adds	r3, #44	; 0x2c
 8007618:	005b      	lsls	r3, r3, #1
 800761a:	4413      	add	r3, r2
 800761c:	460a      	mov	r2, r1
 800761e:	805a      	strh	r2, [r3, #2]
		t++;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	3301      	adds	r3, #1
 8007624:	607b      	str	r3, [r7, #4]
	while (t <= 14) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b0e      	cmp	r3, #14
 800762a:	dde3      	ble.n	80075f4 <flash_record_init+0x40>
	}

}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	20000c3c 	.word	0x20000c3c

08007640 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 800764a:	2200      	movs	r2, #0
 800764c:	2110      	movs	r1, #16
 800764e:	4810      	ldr	r0, [pc, #64]	; (8007690 <gyro_read_byte+0x50>)
 8007650:	f014 fc84 	bl	801bf5c <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8007654:	79fb      	ldrb	r3, [r7, #7]
 8007656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800765a:	b2db      	uxtb	r3, r3
 800765c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 800765e:	f107 010f 	add.w	r1, r7, #15
 8007662:	2364      	movs	r3, #100	; 0x64
 8007664:	2201      	movs	r2, #1
 8007666:	480b      	ldr	r0, [pc, #44]	; (8007694 <gyro_read_byte+0x54>)
 8007668:	f015 fd5b 	bl	801d122 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 800766c:	f107 010e 	add.w	r1, r7, #14
 8007670:	2364      	movs	r3, #100	; 0x64
 8007672:	2201      	movs	r2, #1
 8007674:	4807      	ldr	r0, [pc, #28]	; (8007694 <gyro_read_byte+0x54>)
 8007676:	f015 fec2 	bl	801d3fe <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 800767a:	2201      	movs	r2, #1
 800767c:	2110      	movs	r1, #16
 800767e:	4804      	ldr	r0, [pc, #16]	; (8007690 <gyro_read_byte+0x50>)
 8007680:	f014 fc6c 	bl	801bf5c <HAL_GPIO_WritePin>

	return val;
 8007684:	7bbb      	ldrb	r3, [r7, #14]

}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	48000800 	.word	0x48000800
 8007694:	2000edd0 	.word	0x2000edd0

08007698 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	460a      	mov	r2, r1
 80076a2:	71fb      	strb	r3, [r7, #7]
 80076a4:	4613      	mov	r3, r2
 80076a6:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 80076a8:	79fb      	ldrb	r3, [r7, #7]
 80076aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2110      	movs	r1, #16
 80076b6:	480c      	ldr	r0, [pc, #48]	; (80076e8 <gyro_write_byte+0x50>)
 80076b8:	f014 fc50 	bl	801bf5c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 80076bc:	f107 010f 	add.w	r1, r7, #15
 80076c0:	2364      	movs	r3, #100	; 0x64
 80076c2:	2201      	movs	r2, #1
 80076c4:	4809      	ldr	r0, [pc, #36]	; (80076ec <gyro_write_byte+0x54>)
 80076c6:	f015 fd2c 	bl	801d122 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 80076ca:	1db9      	adds	r1, r7, #6
 80076cc:	2364      	movs	r3, #100	; 0x64
 80076ce:	2201      	movs	r2, #1
 80076d0:	4806      	ldr	r0, [pc, #24]	; (80076ec <gyro_write_byte+0x54>)
 80076d2:	f015 fd26 	bl	801d122 <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 80076d6:	2201      	movs	r2, #1
 80076d8:	2110      	movs	r1, #16
 80076da:	4803      	ldr	r0, [pc, #12]	; (80076e8 <gyro_write_byte+0x50>)
 80076dc:	f014 fc3e 	bl	801bf5c <HAL_GPIO_WritePin>

}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	48000800 	.word	0x48000800
 80076ec:	2000edd0 	.word	0x2000edd0

080076f0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 80076f6:	2300      	movs	r3, #0
 80076f8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 80076fa:	2075      	movs	r0, #117	; 0x75
 80076fc:	f7ff ffa0 	bl	8007640 <gyro_read_byte>
 8007700:	4603      	mov	r3, r0
 8007702:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8007704:	79fb      	ldrb	r3, [r7, #7]
 8007706:	4619      	mov	r1, r3
 8007708:	481b      	ldr	r0, [pc, #108]	; (8007778 <pl_gyro_init+0x88>)
 800770a:	f019 f9bd 	bl	8020a88 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b98      	cmp	r3, #152	; 0x98
 8007712:	d00e      	beq.n	8007732 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8007714:	2064      	movs	r0, #100	; 0x64
 8007716:	f011 fa65 	bl	8018be4 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 800771a:	2075      	movs	r0, #117	; 0x75
 800771c:	f7ff ff90 	bl	8007640 <gyro_read_byte>
 8007720:	4603      	mov	r3, r0
 8007722:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8007724:	79fb      	ldrb	r3, [r7, #7]
 8007726:	2b98      	cmp	r3, #152	; 0x98
 8007728:	d003      	beq.n	8007732 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 800772a:	4814      	ldr	r0, [pc, #80]	; (800777c <pl_gyro_init+0x8c>)
 800772c:	f019 f9ac 	bl	8020a88 <iprintf>
 8007730:	e7fb      	b.n	800772a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8007732:	2100      	movs	r1, #0
 8007734:	206b      	movs	r0, #107	; 0x6b
 8007736:	f7ff ffaf 	bl	8007698 <gyro_write_byte>

	HAL_Delay(50);
 800773a:	2032      	movs	r0, #50	; 0x32
 800773c:	f011 fa52 	bl	8018be4 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8007740:	2100      	movs	r1, #0
 8007742:	206c      	movs	r0, #108	; 0x6c
 8007744:	f7ff ffa8 	bl	8007698 <gyro_write_byte>

	HAL_Delay(50);
 8007748:	2032      	movs	r0, #50	; 0x32
 800774a:	f011 fa4b 	bl	8018be4 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 800774e:	2118      	movs	r1, #24
 8007750:	201b      	movs	r0, #27
 8007752:	f7ff ffa1 	bl	8007698 <gyro_write_byte>

	HAL_Delay(50);
 8007756:	2032      	movs	r0, #50	; 0x32
 8007758:	f011 fa44 	bl	8018be4 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 800775c:	2118      	movs	r1, #24
 800775e:	201c      	movs	r0, #28
 8007760:	f7ff ff9a 	bl	8007698 <gyro_write_byte>

	HAL_Delay(50);
 8007764:	2032      	movs	r0, #50	; 0x32
 8007766:	f011 fa3d 	bl	8018be4 <HAL_Delay>

	//gyro_write_byte(0x1D, 0x08);
	//HAL_Delay(50);

	set_flag = 1;
 800776a:	4b05      	ldr	r3, [pc, #20]	; (8007780 <pl_gyro_init+0x90>)
 800776c:	2201      	movs	r2, #1
 800776e:	701a      	strb	r2, [r3, #0]

}
 8007770:	bf00      	nop
 8007772:	3708      	adds	r7, #8
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}
 8007778:	08023328 	.word	0x08023328
 800777c:	0802333c 	.word	0x0802333c
 8007780:	200006e0 	.word	0x200006e0

08007784 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8007784:	b590      	push	{r4, r7, lr}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 800778e:	79fb      	ldrb	r3, [r7, #7]
 8007790:	4618      	mov	r0, r3
 8007792:	f7ff ff55 	bl	8007640 <gyro_read_byte>
 8007796:	4603      	mov	r3, r0
 8007798:	021b      	lsls	r3, r3, #8
 800779a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 800779c:	79fb      	ldrb	r3, [r7, #7]
 800779e:	3301      	adds	r3, #1
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	4618      	mov	r0, r3
 80077a4:	f7ff ff4c 	bl	8007640 <gyro_read_byte>
 80077a8:	4603      	mov	r3, r0
 80077aa:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077ac:	4323      	orrs	r3, r4
 80077ae:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 80077b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80077b4:	ee07 3a90 	vmov	s15, r3
 80077b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077bc:	eddf 6a06 	vldr	s13, [pc, #24]	; 80077d8 <ICM20602_GYRO_READ+0x54>
 80077c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077c4:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	ee07 3a90 	vmov	s15, r3

}
 80077ce:	eeb0 0a67 	vmov.f32	s0, s15
 80077d2:	3714      	adds	r7, #20
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd90      	pop	{r4, r7, pc}
 80077d8:	41833333 	.word	0x41833333

080077dc <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 80077dc:	b590      	push	{r4, r7, lr}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 80077e6:	79fb      	ldrb	r3, [r7, #7]
 80077e8:	4618      	mov	r0, r3
 80077ea:	f7ff ff29 	bl	8007640 <gyro_read_byte>
 80077ee:	4603      	mov	r3, r0
 80077f0:	021b      	lsls	r3, r3, #8
 80077f2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 80077f4:	79fb      	ldrb	r3, [r7, #7]
 80077f6:	3301      	adds	r3, #1
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7ff ff20 	bl	8007640 <gyro_read_byte>
 8007800:	4603      	mov	r3, r0
 8007802:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8007804:	4323      	orrs	r3, r4
 8007806:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8007808:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800780c:	ee07 3a90 	vmov	s15, r3
 8007810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007814:	eddf 6a06 	vldr	s13, [pc, #24]	; 8007830 <ICM20602_ACCEL_READ+0x54>
 8007818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800781c:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	ee07 3a90 	vmov	s15, r3

}
 8007826:	eeb0 0a67 	vmov.f32	s0, s15
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	bd90      	pop	{r4, r7, pc}
 8007830:	45000000 	.word	0x45000000

08007834 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8007834:	b580      	push	{r7, lr}
 8007836:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8007838:	4b0e      	ldr	r3, [pc, #56]	; (8007874 <ICM20602_DataUpdate+0x40>)
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d117      	bne.n	8007870 <ICM20602_DataUpdate+0x3c>

// get yawrate

		//gyro.omega_y = ICM20602_GYRO_READ(0x43);

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8007840:	2045      	movs	r0, #69	; 0x45
 8007842:	f7ff ff9f 	bl	8007784 <ICM20602_GYRO_READ>
 8007846:	eef0 7a40 	vmov.f32	s15, s0
 800784a:	4b0b      	ldr	r3, [pc, #44]	; (8007878 <ICM20602_DataUpdate+0x44>)
 800784c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8007850:	2047      	movs	r0, #71	; 0x47
 8007852:	f7ff ff97 	bl	8007784 <ICM20602_GYRO_READ>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4b07      	ldr	r3, [pc, #28]	; (8007878 <ICM20602_DataUpdate+0x44>)
 800785c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8007860:	203b      	movs	r0, #59	; 0x3b
 8007862:	f7ff ffbb 	bl	80077dc <ICM20602_ACCEL_READ>
 8007866:	eef0 7a40 	vmov.f32	s15, s0
 800786a:	4b03      	ldr	r3, [pc, #12]	; (8007878 <ICM20602_DataUpdate+0x44>)
 800786c:	edc3 7a04 	vstr	s15, [r3, #16]

		//gyro.accel_z = ICM20602_ACCEL_READ(0x3F);

	}

}
 8007870:	bf00      	nop
 8007872:	bd80      	pop	{r7, pc}
 8007874:	200006e0 	.word	0x200006e0
 8007878:	200006e4 	.word	0x200006e4

0800787c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8007880:	480f      	ldr	r0, [pc, #60]	; (80078c0 <pl_motor_init+0x44>)
 8007882:	f016 fb13 	bl	801deac <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8007886:	480e      	ldr	r0, [pc, #56]	; (80078c0 <pl_motor_init+0x44>)
 8007888:	f010 f84e 	bl	8017928 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 800788c:	480d      	ldr	r0, [pc, #52]	; (80078c4 <pl_motor_init+0x48>)
 800788e:	f016 fb0d 	bl	801deac <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8007892:	480c      	ldr	r0, [pc, #48]	; (80078c4 <pl_motor_init+0x48>)
 8007894:	f010 f848 	bl	8017928 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8007898:	2001      	movs	r0, #1
 800789a:	f000 f81f 	bl	80078dc <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 800789e:	4b08      	ldr	r3, [pc, #32]	; (80078c0 <pl_motor_init+0x44>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	225a      	movs	r2, #90	; 0x5a
 80078a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 80078a6:	2001      	movs	r0, #1
 80078a8:	f000 f840 	bl	800792c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 80078ac:	4b04      	ldr	r3, [pc, #16]	; (80078c0 <pl_motor_init+0x44>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	225a      	movs	r2, #90	; 0x5a
 80078b2:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 80078b4:	4b03      	ldr	r3, [pc, #12]	; (80078c4 <pl_motor_init+0x48>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	221e      	movs	r2, #30
 80078ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80078bc:	bf00      	nop
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	2000eee8 	.word	0x2000eee8
 80078c4:	2000ef34 	.word	0x2000ef34

080078c8 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 80078d0:	bf00      	nop
 80078d2:	370c      	adds	r7, #12
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr

080078dc <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d819      	bhi.n	800791e <pl_L_DriveMotor_mode+0x42>
 80078ea:	a201      	add	r2, pc, #4	; (adr r2, 80078f0 <pl_L_DriveMotor_mode+0x14>)
 80078ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f0:	0800791d 	.word	0x0800791d
 80078f4:	08007901 	.word	0x08007901
 80078f8:	0800790f 	.word	0x0800790f
 80078fc:	0800791d 	.word	0x0800791d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8007900:	2200      	movs	r2, #0
 8007902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007906:	4808      	ldr	r0, [pc, #32]	; (8007928 <pl_L_DriveMotor_mode+0x4c>)
 8007908:	f014 fb28 	bl	801bf5c <HAL_GPIO_WritePin>
break;
 800790c:	e007      	b.n	800791e <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 800790e:	2201      	movs	r2, #1
 8007910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007914:	4804      	ldr	r0, [pc, #16]	; (8007928 <pl_L_DriveMotor_mode+0x4c>)
 8007916:	f014 fb21 	bl	801bf5c <HAL_GPIO_WritePin>
break;
 800791a:	e000      	b.n	800791e <pl_L_DriveMotor_mode+0x42>
break;
 800791c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	48000800 	.word	0x48000800

0800792c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2b03      	cmp	r3, #3
 8007938:	d817      	bhi.n	800796a <pl_R_DriveMotor_mode+0x3e>
 800793a:	a201      	add	r2, pc, #4	; (adr r2, 8007940 <pl_R_DriveMotor_mode+0x14>)
 800793c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007940:	08007969 	.word	0x08007969
 8007944:	08007951 	.word	0x08007951
 8007948:	0800795d 	.word	0x0800795d
 800794c:	08007969 	.word	0x08007969
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8007950:	2201      	movs	r2, #1
 8007952:	2180      	movs	r1, #128	; 0x80
 8007954:	4807      	ldr	r0, [pc, #28]	; (8007974 <pl_R_DriveMotor_mode+0x48>)
 8007956:	f014 fb01 	bl	801bf5c <HAL_GPIO_WritePin>
break;
 800795a:	e006      	b.n	800796a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 800795c:	2200      	movs	r2, #0
 800795e:	2180      	movs	r1, #128	; 0x80
 8007960:	4804      	ldr	r0, [pc, #16]	; (8007974 <pl_R_DriveMotor_mode+0x48>)
 8007962:	f014 fafb 	bl	801bf5c <HAL_GPIO_WritePin>
break;
 8007966:	e000      	b.n	800796a <pl_R_DriveMotor_mode+0x3e>
break;
 8007968:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 800796a:	bf00      	nop
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	48000400 	.word	0x48000400

08007978 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8007978:	b580      	push	{r7, lr}
 800797a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800797c:	2108      	movs	r1, #8
 800797e:	4804      	ldr	r0, [pc, #16]	; (8007990 <pl_DriveMotor_start+0x18>)
 8007980:	f016 fb5c 	bl	801e03c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8007984:	2100      	movs	r1, #0
 8007986:	4802      	ldr	r0, [pc, #8]	; (8007990 <pl_DriveMotor_start+0x18>)
 8007988:	f016 fb58 	bl	801e03c <HAL_TIM_PWM_Start>
}
 800798c:	bf00      	nop
 800798e:	bd80      	pop	{r7, pc}
 8007990:	2000eee8 	.word	0x2000eee8

08007994 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8007998:	2108      	movs	r1, #8
 800799a:	4804      	ldr	r0, [pc, #16]	; (80079ac <pl_DriveMotor_stop+0x18>)
 800799c:	f016 fc5a 	bl	801e254 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80079a0:	2100      	movs	r1, #0
 80079a2:	4802      	ldr	r0, [pc, #8]	; (80079ac <pl_DriveMotor_stop+0x18>)
 80079a4:	f016 fc56 	bl	801e254 <HAL_TIM_PWM_Stop>
}
 80079a8:	bf00      	nop
 80079aa:	bd80      	pop	{r7, pc}
 80079ac:	2000eee8 	.word	0x2000eee8

080079b0 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <pl_DriveMotor_duty+0x28>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 80079c2:	4b05      	ldr	r3, [pc, #20]	; (80079d8 <pl_DriveMotor_duty+0x28>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	2000eee8 	.word	0x2000eee8

080079dc <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 80079e0:	2100      	movs	r1, #0
 80079e2:	4802      	ldr	r0, [pc, #8]	; (80079ec <pl_FunMotor_start+0x10>)
 80079e4:	f016 fb2a 	bl	801e03c <HAL_TIM_PWM_Start>
}
 80079e8:	bf00      	nop
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	2000ef34 	.word	0x2000ef34

080079f0 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 80079f0:	b580      	push	{r7, lr}
 80079f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 80079f4:	2100      	movs	r1, #0
 80079f6:	4802      	ldr	r0, [pc, #8]	; (8007a00 <pl_FunMotor_stop+0x10>)
 80079f8:	f016 fc2c 	bl	801e254 <HAL_TIM_PWM_Stop>
}
 80079fc:	bf00      	nop
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	2000ef34 	.word	0x2000ef34

08007a04 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8007a0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a12:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8007a48 <pl_FunMotor_duty+0x44>
 8007a16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a1e:	ee17 3a90 	vmov	r3, s15
 8007a22:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8007a24:	4b09      	ldr	r3, [pc, #36]	; (8007a4c <pl_FunMotor_duty+0x48>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2264      	movs	r2, #100	; 0x64
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007a2c:	4b07      	ldr	r3, [pc, #28]	; (8007a4c <pl_FunMotor_duty+0x48>)
 8007a2e:	2264      	movs	r2, #100	; 0x64
 8007a30:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8007a32:	4b06      	ldr	r3, [pc, #24]	; (8007a4c <pl_FunMotor_duty+0x48>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68fa      	ldr	r2, [r7, #12]
 8007a38:	635a      	str	r2, [r3, #52]	; 0x34

}
 8007a3a:	bf00      	nop
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	42c80000 	.word	0x42c80000
 8007a4c:	2000ef34 	.word	0x2000ef34

08007a50 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8007a50:	b580      	push	{r7, lr}
 8007a52:	af00      	add	r7, sp, #0
	AD_step=0;
 8007a54:	4b04      	ldr	r3, [pc, #16]	; (8007a68 <pl_sensor_init+0x18>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8007a5a:	217f      	movs	r1, #127	; 0x7f
 8007a5c:	4803      	ldr	r0, [pc, #12]	; (8007a6c <pl_sensor_init+0x1c>)
 8007a5e:	f013 f93b 	bl	801acd8 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8007a62:	bf00      	nop
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	20000708 	.word	0x20000708
 8007a6c:	20000734 	.word	0x20000734

08007a70 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8007a76:	483c      	ldr	r0, [pc, #240]	; (8007b68 <pl_getbatt+0xf8>)
 8007a78:	f011 fd1c 	bl	80194b4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8007a7c:	2132      	movs	r1, #50	; 0x32
 8007a7e:	483a      	ldr	r0, [pc, #232]	; (8007b68 <pl_getbatt+0xf8>)
 8007a80:	f011 fe16 	bl	80196b0 <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8007a84:	4838      	ldr	r0, [pc, #224]	; (8007b68 <pl_getbatt+0xf8>)
 8007a86:	f012 f832 	bl	8019aee <HAL_ADC_GetValue>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8007a8e:	4836      	ldr	r0, [pc, #216]	; (8007b68 <pl_getbatt+0xf8>)
 8007a90:	f011 fdda 	bl	8019648 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8007a94:	88fb      	ldrh	r3, [r7, #6]
 8007a96:	ee07 3a90 	vmov	s15, r3
 8007a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a9e:	ee17 0a90 	vmov	r0, s15
 8007aa2:	f7f8 fd79 	bl	8000598 <__aeabi_f2d>
 8007aa6:	a326      	add	r3, pc, #152	; (adr r3, 8007b40 <pl_getbatt+0xd0>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	f7f8 fdcc 	bl	8000648 <__aeabi_dmul>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	a323      	add	r3, pc, #140	; (adr r3, 8007b48 <pl_getbatt+0xd8>)
 8007aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abe:	f7f8 feed 	bl	800089c <__aeabi_ddiv>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	4610      	mov	r0, r2
 8007ac8:	4619      	mov	r1, r3
 8007aca:	f04f 0200 	mov.w	r2, #0
 8007ace:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <pl_getbatt+0xfc>)
 8007ad0:	f7f8 fdba 	bl	8000648 <__aeabi_dmul>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4619      	mov	r1, r3
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	4b23      	ldr	r3, [pc, #140]	; (8007b70 <pl_getbatt+0x100>)
 8007ae2:	f7f8 fedb 	bl	800089c <__aeabi_ddiv>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4610      	mov	r0, r2
 8007aec:	4619      	mov	r1, r3
 8007aee:	a318      	add	r3, pc, #96	; (adr r3, 8007b50 <pl_getbatt+0xe0>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 fda8 	bl	8000648 <__aeabi_dmul>
 8007af8:	4602      	mov	r2, r0
 8007afa:	460b      	mov	r3, r1
 8007afc:	4610      	mov	r0, r2
 8007afe:	4619      	mov	r1, r3
 8007b00:	a315      	add	r3, pc, #84	; (adr r3, 8007b58 <pl_getbatt+0xe8>)
 8007b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b06:	f7f8 fd9f 	bl	8000648 <__aeabi_dmul>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	a313      	add	r3, pc, #76	; (adr r3, 8007b60 <pl_getbatt+0xf0>)
 8007b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b18:	f7f8 fec0 	bl	800089c <__aeabi_ddiv>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	460b      	mov	r3, r1
 8007b20:	4610      	mov	r0, r2
 8007b22:	4619      	mov	r1, r3
 8007b24:	f7f9 f868 	bl	8000bf8 <__aeabi_d2f>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	603b      	str	r3, [r7, #0]
return batt;
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	ee07 3a90 	vmov	s15, r3
}
 8007b32:	eeb0 0a67 	vmov.f32	s0, s15
 8007b36:	3708      	adds	r7, #8
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bd80      	pop	{r7, pc}
 8007b3c:	f3af 8000 	nop.w
 8007b40:	66666666 	.word	0x66666666
 8007b44:	400a6666 	.word	0x400a6666
 8007b48:	00000000 	.word	0x00000000
 8007b4c:	40affe00 	.word	0x40affe00
 8007b50:	66666666 	.word	0x66666666
 8007b54:	3ff26666 	.word	0x3ff26666
 8007b58:	9999999a 	.word	0x9999999a
 8007b5c:	400d9999 	.word	0x400d9999
 8007b60:	ae147ae1 	.word	0xae147ae1
 8007b64:	400ee147 	.word	0x400ee147
 8007b68:	20000734 	.word	0x20000734
 8007b6c:	40340000 	.word	0x40340000
 8007b70:	40240000 	.word	0x40240000
 8007b74:	00000000 	.word	0x00000000

08007b78 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 8007b7e:	4882      	ldr	r0, [pc, #520]	; (8007d88 <pl_callback_getSensor+0x210>)
 8007b80:	f011 ff54 	bl	8019a2c <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007b84:	4b81      	ldr	r3, [pc, #516]	; (8007d8c <pl_callback_getSensor+0x214>)
 8007b86:	781b      	ldrb	r3, [r3, #0]
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	f200 80d9 	bhi.w	8007d40 <pl_callback_getSensor+0x1c8>
 8007b8e:	a201      	add	r2, pc, #4	; (adr r2, 8007b94 <pl_callback_getSensor+0x1c>)
 8007b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b94:	08007ba9 	.word	0x08007ba9
 8007b98:	08007be1 	.word	0x08007be1
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c81 	.word	0x08007c81
 8007ba4:	08007d41 	.word	0x08007d41
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 8007ba8:	2201      	movs	r2, #1
 8007baa:	2102      	movs	r1, #2
 8007bac:	4878      	ldr	r0, [pc, #480]	; (8007d90 <pl_callback_getSensor+0x218>)
 8007bae:	f014 f9d5 	bl	801bf5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	2110      	movs	r1, #16
 8007bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007bba:	f014 f9cf 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007bc4:	4873      	ldr	r0, [pc, #460]	; (8007d94 <pl_callback_getSensor+0x21c>)
 8007bc6:	f014 f9c9 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007bce:	e002      	b.n	8007bd6 <pl_callback_getSensor+0x5e>
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	607b      	str	r3, [r7, #4]
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007bdc:	ddf8      	ble.n	8007bd0 <pl_callback_getSensor+0x58>
		break;
 8007bde:	e0af      	b.n	8007d40 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 8007be0:	4b6d      	ldr	r3, [pc, #436]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007be2:	885a      	ldrh	r2, [r3, #2]
 8007be4:	4b6d      	ldr	r3, [pc, #436]	; (8007d9c <pl_callback_getSensor+0x224>)
 8007be6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 8007be8:	4b6b      	ldr	r3, [pc, #428]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007bea:	889a      	ldrh	r2, [r3, #4]
 8007bec:	4b6b      	ldr	r3, [pc, #428]	; (8007d9c <pl_callback_getSensor+0x224>)
 8007bee:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007bf0:	4b69      	ldr	r3, [pc, #420]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007bf2:	88da      	ldrh	r2, [r3, #6]
 8007bf4:	4b6a      	ldr	r3, [pc, #424]	; (8007da0 <pl_callback_getSensor+0x228>)
 8007bf6:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007bf8:	4b67      	ldr	r3, [pc, #412]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007bfa:	891a      	ldrh	r2, [r3, #8]
 8007bfc:	4b68      	ldr	r3, [pc, #416]	; (8007da0 <pl_callback_getSensor+0x228>)
 8007bfe:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007c00:	4b65      	ldr	r3, [pc, #404]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c02:	895a      	ldrh	r2, [r3, #10]
 8007c04:	4b66      	ldr	r3, [pc, #408]	; (8007da0 <pl_callback_getSensor+0x228>)
 8007c06:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c08:	2200      	movs	r2, #0
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	4860      	ldr	r0, [pc, #384]	; (8007d90 <pl_callback_getSensor+0x218>)
 8007c0e:	f014 f9a5 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007c12:	2201      	movs	r2, #1
 8007c14:	2110      	movs	r1, #16
 8007c16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c1a:	f014 f99f 	bl	801bf5c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c24:	485b      	ldr	r0, [pc, #364]	; (8007d94 <pl_callback_getSensor+0x21c>)
 8007c26:	f014 f999 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c2e:	e002      	b.n	8007c36 <pl_callback_getSensor+0xbe>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	3301      	adds	r3, #1
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c3c:	ddf8      	ble.n	8007c30 <pl_callback_getSensor+0xb8>
		break;
 8007c3e:	e07f      	b.n	8007d40 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007c40:	4b55      	ldr	r3, [pc, #340]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c42:	88da      	ldrh	r2, [r3, #6]
 8007c44:	4b55      	ldr	r3, [pc, #340]	; (8007d9c <pl_callback_getSensor+0x224>)
 8007c46:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2102      	movs	r1, #2
 8007c4c:	4850      	ldr	r0, [pc, #320]	; (8007d90 <pl_callback_getSensor+0x218>)
 8007c4e:	f014 f985 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007c52:	2200      	movs	r2, #0
 8007c54:	2110      	movs	r1, #16
 8007c56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007c5a:	f014 f97f 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c64:	484b      	ldr	r0, [pc, #300]	; (8007d94 <pl_callback_getSensor+0x21c>)
 8007c66:	f014 f979 	bl	801bf5c <HAL_GPIO_WritePin>
		j=0;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 8007c6e:	e002      	b.n	8007c76 <pl_callback_getSensor+0xfe>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3301      	adds	r3, #1
 8007c74:	607b      	str	r3, [r7, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007c7c:	ddf8      	ble.n	8007c70 <pl_callback_getSensor+0xf8>
		break;
 8007c7e:	e05f      	b.n	8007d40 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007c80:	4b45      	ldr	r3, [pc, #276]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c82:	885a      	ldrh	r2, [r3, #2]
 8007c84:	4b46      	ldr	r3, [pc, #280]	; (8007da0 <pl_callback_getSensor+0x228>)
 8007c86:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007c88:	4b43      	ldr	r3, [pc, #268]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c8a:	889a      	ldrh	r2, [r3, #4]
 8007c8c:	4b44      	ldr	r3, [pc, #272]	; (8007da0 <pl_callback_getSensor+0x228>)
 8007c8e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 8007c90:	4b41      	ldr	r3, [pc, #260]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c92:	891a      	ldrh	r2, [r3, #8]
 8007c94:	4b41      	ldr	r3, [pc, #260]	; (8007d9c <pl_callback_getSensor+0x224>)
 8007c96:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 8007c98:	4b3f      	ldr	r3, [pc, #252]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007c9a:	895a      	ldrh	r2, [r3, #10]
 8007c9c:	4b3f      	ldr	r3, [pc, #252]	; (8007d9c <pl_callback_getSensor+0x224>)
 8007c9e:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2102      	movs	r1, #2
 8007ca4:	483a      	ldr	r0, [pc, #232]	; (8007d90 <pl_callback_getSensor+0x218>)
 8007ca6:	f014 f959 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007caa:	2200      	movs	r2, #0
 8007cac:	2110      	movs	r1, #16
 8007cae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007cb2:	f014 f953 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cbc:	4835      	ldr	r0, [pc, #212]	; (8007d94 <pl_callback_getSensor+0x21c>)
 8007cbe:	f014 f94d 	bl	801bf5c <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 8007cc6:	e002      	b.n	8007cce <pl_callback_getSensor+0x156>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	607b      	str	r3, [r7, #4]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2b32      	cmp	r3, #50	; 0x32
 8007cd2:	ddf9      	ble.n	8007cc8 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 8007cd4:	4b30      	ldr	r3, [pc, #192]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007cd6:	881b      	ldrh	r3, [r3, #0]
 8007cd8:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 8007cda:	887b      	ldrh	r3, [r7, #2]
 8007cdc:	ee07 3a90 	vmov	s15, r3
 8007ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ce4:	ee17 0a90 	vmov	r0, s15
 8007ce8:	f7f8 fc56 	bl	8000598 <__aeabi_f2d>
 8007cec:	a320      	add	r3, pc, #128	; (adr r3, 8007d70 <pl_callback_getSensor+0x1f8>)
 8007cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf2:	f7f8 fca9 	bl	8000648 <__aeabi_dmul>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	4619      	mov	r1, r3
 8007cfe:	a31e      	add	r3, pc, #120	; (adr r3, 8007d78 <pl_callback_getSensor+0x200>)
 8007d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d04:	f7f8 fdca 	bl	800089c <__aeabi_ddiv>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	460b      	mov	r3, r1
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	4619      	mov	r1, r3
 8007d10:	a31b      	add	r3, pc, #108	; (adr r3, 8007d80 <pl_callback_getSensor+0x208>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fc97 	bl	8000648 <__aeabi_dmul>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4619      	mov	r1, r3
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	4b1f      	ldr	r3, [pc, #124]	; (8007da4 <pl_callback_getSensor+0x22c>)
 8007d28:	f7f8 fdb8 	bl	800089c <__aeabi_ddiv>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	f7f8 ff60 	bl	8000bf8 <__aeabi_d2f>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	4a1b      	ldr	r2, [pc, #108]	; (8007da8 <pl_callback_getSensor+0x230>)
 8007d3c:	6013      	str	r3, [r2, #0]
		break;
 8007d3e:	bf00      	nop

		break;
	}


	AD_step++;
 8007d40:	4b12      	ldr	r3, [pc, #72]	; (8007d8c <pl_callback_getSensor+0x214>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	3301      	adds	r3, #1
 8007d46:	b2da      	uxtb	r2, r3
 8007d48:	4b10      	ldr	r3, [pc, #64]	; (8007d8c <pl_callback_getSensor+0x214>)
 8007d4a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 8007d4c:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <pl_callback_getSensor+0x214>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b04      	cmp	r3, #4
 8007d52:	d005      	beq.n	8007d60 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007d54:	2206      	movs	r2, #6
 8007d56:	4910      	ldr	r1, [pc, #64]	; (8007d98 <pl_callback_getSensor+0x220>)
 8007d58:	480b      	ldr	r0, [pc, #44]	; (8007d88 <pl_callback_getSensor+0x210>)
 8007d5a:	f011 fd9d 	bl	8019898 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 8007d5e:	e002      	b.n	8007d66 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007d60:	4b0a      	ldr	r3, [pc, #40]	; (8007d8c <pl_callback_getSensor+0x214>)
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
}
 8007d66:	bf00      	nop
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	66666666 	.word	0x66666666
 8007d74:	400a6666 	.word	0x400a6666
 8007d78:	00000000 	.word	0x00000000
 8007d7c:	40affe00 	.word	0x40affe00
 8007d80:	00000000 	.word	0x00000000
 8007d84:	4062c000 	.word	0x4062c000
 8007d88:	20000734 	.word	0x20000734
 8007d8c:	20000708 	.word	0x20000708
 8007d90:	48000400 	.word	0x48000400
 8007d94:	48000800 	.word	0x48000800
 8007d98:	200006fc 	.word	0x200006fc
 8007d9c:	2000070c 	.word	0x2000070c
 8007da0:	20000718 	.word	0x20000718
 8007da4:	40490000 	.word	0x40490000
 8007da8:	20000724 	.word	0x20000724

08007dac <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 8007dac:	b580      	push	{r7, lr}
 8007dae:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007db0:	2206      	movs	r2, #6
 8007db2:	4903      	ldr	r1, [pc, #12]	; (8007dc0 <pl_interupt_getSensor+0x14>)
 8007db4:	4803      	ldr	r0, [pc, #12]	; (8007dc4 <pl_interupt_getSensor+0x18>)
 8007db6:	f011 fd6f 	bl	8019898 <HAL_ADC_Start_DMA>

}
 8007dba:	bf00      	nop
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	200006fc 	.word	0x200006fc
 8007dc4:	20000734 	.word	0x20000734

08007dc8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	af00      	add	r7, sp, #0
	count_mode=0;
 8007dcc:	4b05      	ldr	r3, [pc, #20]	; (8007de4 <pl_timer_init+0x1c>)
 8007dce:	2200      	movs	r2, #0
 8007dd0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007dd2:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <pl_timer_init+0x20>)
 8007dd4:	f04f 0200 	mov.w	r2, #0
 8007dd8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 8007dda:	4804      	ldr	r0, [pc, #16]	; (8007dec <pl_timer_init+0x24>)
 8007ddc:	f016 f866 	bl	801deac <HAL_TIM_Base_Start_IT>
}
 8007de0:	bf00      	nop
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000730 	.word	0x20000730
 8007de8:	2000072c 	.word	0x2000072c
 8007dec:	2000ee9c 	.word	0x2000ee9c

08007df0 <interrupt_timer>:

void interrupt_timer(void){
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
	g_timCount++;
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <interrupt_timer+0x48>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	; (8007e38 <interrupt_timer+0x48>)
 8007dfc:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 8007dfe:	4b0f      	ldr	r3, [pc, #60]	; (8007e3c <interrupt_timer+0x4c>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d112      	bne.n	8007e2c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007e06:	4b0e      	ldr	r3, [pc, #56]	; (8007e40 <interrupt_timer+0x50>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7f8 fbc4 	bl	8000598 <__aeabi_f2d>
 8007e10:	a307      	add	r3, pc, #28	; (adr r3, 8007e30 <interrupt_timer+0x40>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	f7f8 fa61 	bl	80002dc <__adddf3>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	4610      	mov	r0, r2
 8007e20:	4619      	mov	r1, r3
 8007e22:	f7f8 fee9 	bl	8000bf8 <__aeabi_d2f>
 8007e26:	4603      	mov	r3, r0
 8007e28:	4a05      	ldr	r2, [pc, #20]	; (8007e40 <interrupt_timer+0x50>)
 8007e2a:	6013      	str	r3, [r2, #0]
	}

}
 8007e2c:	bf00      	nop
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	d2f1a9fc 	.word	0xd2f1a9fc
 8007e34:	3f50624d 	.word	0x3f50624d
 8007e38:	20000728 	.word	0x20000728
 8007e3c:	20000730 	.word	0x20000730
 8007e40:	2000072c 	.word	0x2000072c

08007e44 <tic_timer>:

void tic_timer(void){
 8007e44:	b480      	push	{r7}
 8007e46:	af00      	add	r7, sp, #0
	count_mode=1;
 8007e48:	4b05      	ldr	r3, [pc, #20]	; (8007e60 <tic_timer+0x1c>)
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e4e:	4b05      	ldr	r3, [pc, #20]	; (8007e64 <tic_timer+0x20>)
 8007e50:	f04f 0200 	mov.w	r2, #0
 8007e54:	601a      	str	r2, [r3, #0]
}
 8007e56:	bf00      	nop
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20000730 	.word	0x20000730
 8007e64:	2000072c 	.word	0x2000072c

08007e68 <toc_timer>:

float toc_timer(void){
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
	float timer;
	timer=g_timCount_sec;
 8007e6e:	4b0a      	ldr	r3, [pc, #40]	; (8007e98 <toc_timer+0x30>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	607b      	str	r3, [r7, #4]
	count_mode=0;
 8007e74:	4b09      	ldr	r3, [pc, #36]	; (8007e9c <toc_timer+0x34>)
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 8007e7a:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <toc_timer+0x30>)
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	601a      	str	r2, [r3, #0]
	return timer;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	ee07 3a90 	vmov	s15, r3
}
 8007e88:	eeb0 0a67 	vmov.f32	s0, s15
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	2000072c 	.word	0x2000072c
 8007e9c:	20000730 	.word	0x20000730

08007ea0 <wait_ms>:

void wait_ms(uint32_t waitTime) {
 8007ea0:	b5b0      	push	{r4, r5, r7, lr}
 8007ea2:	b082      	sub	sp, #8
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007ea8:	4b1d      	ldr	r3, [pc, #116]	; (8007f20 <wait_ms+0x80>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007eae:	4b1d      	ldr	r3, [pc, #116]	; (8007f24 <wait_ms+0x84>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007eb6:	bf00      	nop
 8007eb8:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <wait_ms+0x80>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	ee07 3a90 	vmov	s15, r3
 8007ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ec4:	ee17 0a90 	vmov	r0, s15
 8007ec8:	f7f8 fb66 	bl	8000598 <__aeabi_f2d>
 8007ecc:	a312      	add	r3, pc, #72	; (adr r3, 8007f18 <wait_ms+0x78>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	f7f8 fbb9 	bl	8000648 <__aeabi_dmul>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	4610      	mov	r0, r2
 8007edc:	4619      	mov	r1, r3
 8007ede:	a30e      	add	r3, pc, #56	; (adr r3, 8007f18 <wait_ms+0x78>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 fcda 	bl	800089c <__aeabi_ddiv>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	460b      	mov	r3, r1
 8007eec:	4614      	mov	r4, r2
 8007eee:	461d      	mov	r5, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7f8 fb2f 	bl	8000554 <__aeabi_ui2d>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f7f8 fe15 	bl	8000b2c <__aeabi_dcmplt>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1d7      	bne.n	8007eb8 <wait_ms+0x18>
        }

}
 8007f08:	bf00      	nop
 8007f0a:	bf00      	nop
 8007f0c:	3708      	adds	r7, #8
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bdb0      	pop	{r4, r5, r7, pc}
 8007f12:	bf00      	nop
 8007f14:	f3af 8000 	nop.w
 8007f18:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f1c:	3f50624d 	.word	0x3f50624d
 8007f20:	20000728 	.word	0x20000728
 8007f24:	2000ee9c 	.word	0x2000ee9c

08007f28 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 8007f28:	b5b0      	push	{r4, r5, r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007f30:	4b1b      	ldr	r3, [pc, #108]	; (8007fa0 <wait_ms_NoReset+0x78>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 8007f36:	bf00      	nop
 8007f38:	4b19      	ldr	r3, [pc, #100]	; (8007fa0 <wait_ms_NoReset+0x78>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	ee07 3a90 	vmov	s15, r3
 8007f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f44:	ee17 0a90 	vmov	r0, s15
 8007f48:	f7f8 fb26 	bl	8000598 <__aeabi_f2d>
 8007f4c:	a312      	add	r3, pc, #72	; (adr r3, 8007f98 <wait_ms_NoReset+0x70>)
 8007f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f52:	f7f8 fb79 	bl	8000648 <__aeabi_dmul>
 8007f56:	4602      	mov	r2, r0
 8007f58:	460b      	mov	r3, r1
 8007f5a:	4610      	mov	r0, r2
 8007f5c:	4619      	mov	r1, r3
 8007f5e:	a30e      	add	r3, pc, #56	; (adr r3, 8007f98 <wait_ms_NoReset+0x70>)
 8007f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f64:	f7f8 fc9a 	bl	800089c <__aeabi_ddiv>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	460b      	mov	r3, r1
 8007f6c:	4614      	mov	r4, r2
 8007f6e:	461d      	mov	r5, r3
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7f8 faef 	bl	8000554 <__aeabi_ui2d>
 8007f76:	4602      	mov	r2, r0
 8007f78:	460b      	mov	r3, r1
 8007f7a:	4620      	mov	r0, r4
 8007f7c:	4629      	mov	r1, r5
 8007f7e:	f7f8 fdd5 	bl	8000b2c <__aeabi_dcmplt>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1d7      	bne.n	8007f38 <wait_ms_NoReset+0x10>
        }

}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bdb0      	pop	{r4, r5, r7, pc}
 8007f92:	bf00      	nop
 8007f94:	f3af 8000 	nop.w
 8007f98:	d2f1a9fc 	.word	0xd2f1a9fc
 8007f9c:	3f50624d 	.word	0x3f50624d
 8007fa0:	20000728 	.word	0x20000728

08007fa4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08c      	sub	sp, #48	; 0x30
 8007fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007faa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	2220      	movs	r2, #32
 8007fba:	2100      	movs	r1, #0
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f018 f8f1 	bl	80201a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8007fc2:	4b56      	ldr	r3, [pc, #344]	; (800811c <MX_ADC1_Init+0x178>)
 8007fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007fca:	4b54      	ldr	r3, [pc, #336]	; (800811c <MX_ADC1_Init+0x178>)
 8007fcc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007fd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007fd2:	4b52      	ldr	r3, [pc, #328]	; (800811c <MX_ADC1_Init+0x178>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007fd8:	4b50      	ldr	r3, [pc, #320]	; (800811c <MX_ADC1_Init+0x178>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007fde:	4b4f      	ldr	r3, [pc, #316]	; (800811c <MX_ADC1_Init+0x178>)
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8007fe4:	4b4d      	ldr	r3, [pc, #308]	; (800811c <MX_ADC1_Init+0x178>)
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007fea:	4b4c      	ldr	r3, [pc, #304]	; (800811c <MX_ADC1_Init+0x178>)
 8007fec:	2208      	movs	r2, #8
 8007fee:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8007ff0:	4b4a      	ldr	r3, [pc, #296]	; (800811c <MX_ADC1_Init+0x178>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007ff6:	4b49      	ldr	r3, [pc, #292]	; (800811c <MX_ADC1_Init+0x178>)
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 8007ffc:	4b47      	ldr	r3, [pc, #284]	; (800811c <MX_ADC1_Init+0x178>)
 8007ffe:	2206      	movs	r2, #6
 8008000:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008002:	4b46      	ldr	r3, [pc, #280]	; (800811c <MX_ADC1_Init+0x178>)
 8008004:	2200      	movs	r2, #0
 8008006:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800800a:	4b44      	ldr	r3, [pc, #272]	; (800811c <MX_ADC1_Init+0x178>)
 800800c:	2200      	movs	r2, #0
 800800e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8008010:	4b42      	ldr	r3, [pc, #264]	; (800811c <MX_ADC1_Init+0x178>)
 8008012:	2200      	movs	r2, #0
 8008014:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008016:	4b41      	ldr	r3, [pc, #260]	; (800811c <MX_ADC1_Init+0x178>)
 8008018:	2201      	movs	r2, #1
 800801a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800801e:	4b3f      	ldr	r3, [pc, #252]	; (800811c <MX_ADC1_Init+0x178>)
 8008020:	2200      	movs	r2, #0
 8008022:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8008024:	4b3d      	ldr	r3, [pc, #244]	; (800811c <MX_ADC1_Init+0x178>)
 8008026:	2200      	movs	r2, #0
 8008028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800802c:	483b      	ldr	r0, [pc, #236]	; (800811c <MX_ADC1_Init+0x178>)
 800802e:	f011 f88d 	bl	801914c <HAL_ADC_Init>
 8008032:	4603      	mov	r3, r0
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8008038:	f001 fecb 	bl	8009dd2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800803c:	2300      	movs	r3, #0
 800803e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8008040:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008044:	4619      	mov	r1, r3
 8008046:	4835      	ldr	r0, [pc, #212]	; (800811c <MX_ADC1_Init+0x178>)
 8008048:	f012 feda 	bl	801ae00 <HAL_ADCEx_MultiModeConfigChannel>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8008052:	f001 febe 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008056:	4b32      	ldr	r3, [pc, #200]	; (8008120 <MX_ADC1_Init+0x17c>)
 8008058:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800805a:	2306      	movs	r3, #6
 800805c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800805e:	2301      	movs	r3, #1
 8008060:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8008062:	237f      	movs	r3, #127	; 0x7f
 8008064:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8008066:	2304      	movs	r3, #4
 8008068:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800806a:	2300      	movs	r3, #0
 800806c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800806e:	1d3b      	adds	r3, r7, #4
 8008070:	4619      	mov	r1, r3
 8008072:	482a      	ldr	r0, [pc, #168]	; (800811c <MX_ADC1_Init+0x178>)
 8008074:	f011 ffa0 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 8008078:	4603      	mov	r3, r0
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800807e:	f001 fea8 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8008082:	4b28      	ldr	r3, [pc, #160]	; (8008124 <MX_ADC1_Init+0x180>)
 8008084:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8008086:	230c      	movs	r3, #12
 8008088:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800808a:	1d3b      	adds	r3, r7, #4
 800808c:	4619      	mov	r1, r3
 800808e:	4823      	ldr	r0, [pc, #140]	; (800811c <MX_ADC1_Init+0x178>)
 8008090:	f011 ff92 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 8008094:	4603      	mov	r3, r0
 8008096:	2b00      	cmp	r3, #0
 8008098:	d001      	beq.n	800809e <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800809a:	f001 fe9a 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800809e:	4b22      	ldr	r3, [pc, #136]	; (8008128 <MX_ADC1_Init+0x184>)
 80080a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80080a2:	2312      	movs	r3, #18
 80080a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080a6:	1d3b      	adds	r3, r7, #4
 80080a8:	4619      	mov	r1, r3
 80080aa:	481c      	ldr	r0, [pc, #112]	; (800811c <MX_ADC1_Init+0x178>)
 80080ac:	f011 ff84 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80080b6:	f001 fe8c 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80080ba:	4b1c      	ldr	r3, [pc, #112]	; (800812c <MX_ADC1_Init+0x188>)
 80080bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80080be:	2318      	movs	r3, #24
 80080c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080c2:	1d3b      	adds	r3, r7, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4815      	ldr	r0, [pc, #84]	; (800811c <MX_ADC1_Init+0x178>)
 80080c8:	f011 ff76 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 80080cc:	4603      	mov	r3, r0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 80080d2:	f001 fe7e 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80080d6:	4b16      	ldr	r3, [pc, #88]	; (8008130 <MX_ADC1_Init+0x18c>)
 80080d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80080da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80080de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080e0:	1d3b      	adds	r3, r7, #4
 80080e2:	4619      	mov	r1, r3
 80080e4:	480d      	ldr	r0, [pc, #52]	; (800811c <MX_ADC1_Init+0x178>)
 80080e6:	f011 ff67 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80080f0:	f001 fe6f 	bl	8009dd2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <MX_ADC1_Init+0x190>)
 80080f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80080f8:	f44f 7383 	mov.w	r3, #262	; 0x106
 80080fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80080fe:	1d3b      	adds	r3, r7, #4
 8008100:	4619      	mov	r1, r3
 8008102:	4806      	ldr	r0, [pc, #24]	; (800811c <MX_ADC1_Init+0x178>)
 8008104:	f011 ff58 	bl	8019fb8 <HAL_ADC_ConfigChannel>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800810e:	f001 fe60 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8008112:	bf00      	nop
 8008114:	3730      	adds	r7, #48	; 0x30
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	20000734 	.word	0x20000734
 8008120:	2e300800 	.word	0x2e300800
 8008124:	3ef08000 	.word	0x3ef08000
 8008128:	10c00010 	.word	0x10c00010
 800812c:	0c900008 	.word	0x0c900008
 8008130:	08600004 	.word	0x08600004
 8008134:	04300002 	.word	0x04300002

08008138 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b09e      	sub	sp, #120	; 0x78
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	60da      	str	r2, [r3, #12]
 800814e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008150:	f107 0314 	add.w	r3, r7, #20
 8008154:	2250      	movs	r2, #80	; 0x50
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f018 f823 	bl	80201a4 <memset>
  if(adcHandle->Instance==ADC1)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008166:	f040 8082 	bne.w	800826e <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800816a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800816e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8008170:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008174:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008176:	f107 0314 	add.w	r3, r7, #20
 800817a:	4618      	mov	r0, r3
 800817c:	f014 fcea 	bl	801cb54 <HAL_RCCEx_PeriphCLKConfig>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8008186:	f001 fe24 	bl	8009dd2 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800818a:	4b3b      	ldr	r3, [pc, #236]	; (8008278 <HAL_ADC_MspInit+0x140>)
 800818c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800818e:	4a3a      	ldr	r2, [pc, #232]	; (8008278 <HAL_ADC_MspInit+0x140>)
 8008190:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008196:	4b38      	ldr	r3, [pc, #224]	; (8008278 <HAL_ADC_MspInit+0x140>)
 8008198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800819a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80081a2:	4b35      	ldr	r3, [pc, #212]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a6:	4a34      	ldr	r2, [pc, #208]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081a8:	f043 0301 	orr.w	r3, r3, #1
 80081ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ae:	4b32      	ldr	r3, [pc, #200]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	f003 0301 	and.w	r3, r3, #1
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ba:	4b2f      	ldr	r3, [pc, #188]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081be:	4a2e      	ldr	r2, [pc, #184]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081c0:	f043 0302 	orr.w	r3, r3, #2
 80081c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081c6:	4b2c      	ldr	r3, [pc, #176]	; (8008278 <HAL_ADC_MspInit+0x140>)
 80081c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ca:	f003 0302 	and.w	r3, r3, #2
 80081ce:	60bb      	str	r3, [r7, #8]
 80081d0:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 80081d2:	230f      	movs	r3, #15
 80081d4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081d6:	2303      	movs	r3, #3
 80081d8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081da:	2300      	movs	r3, #0
 80081dc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80081de:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081e2:	4619      	mov	r1, r3
 80081e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80081e8:	f013 fd36 	bl	801bc58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80081ec:	f241 0301 	movw	r3, #4097	; 0x1001
 80081f0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80081f2:	2303      	movs	r3, #3
 80081f4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081f6:	2300      	movs	r3, #0
 80081f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80081fe:	4619      	mov	r1, r3
 8008200:	481e      	ldr	r0, [pc, #120]	; (800827c <HAL_ADC_MspInit+0x144>)
 8008202:	f013 fd29 	bl	801bc58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8008206:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008208:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <HAL_ADC_MspInit+0x14c>)
 800820a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800820c:	4b1c      	ldr	r3, [pc, #112]	; (8008280 <HAL_ADC_MspInit+0x148>)
 800820e:	2205      	movs	r2, #5
 8008210:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008212:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008214:	2200      	movs	r2, #0
 8008216:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008218:	4b19      	ldr	r3, [pc, #100]	; (8008280 <HAL_ADC_MspInit+0x148>)
 800821a:	2200      	movs	r2, #0
 800821c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800821e:	4b18      	ldr	r3, [pc, #96]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008220:	2280      	movs	r2, #128	; 0x80
 8008222:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008224:	4b16      	ldr	r3, [pc, #88]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800822a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800822c:	4b14      	ldr	r3, [pc, #80]	; (8008280 <HAL_ADC_MspInit+0x148>)
 800822e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008232:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008234:	4b12      	ldr	r3, [pc, #72]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008236:	2220      	movs	r2, #32
 8008238:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <HAL_ADC_MspInit+0x148>)
 800823c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008240:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008242:	480f      	ldr	r0, [pc, #60]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008244:	f012 ffd4 	bl	801b1f0 <HAL_DMA_Init>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d001      	beq.n	8008252 <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 800824e:	f001 fdc0 	bl	8009dd2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a0a      	ldr	r2, [pc, #40]	; (8008280 <HAL_ADC_MspInit+0x148>)
 8008256:	655a      	str	r2, [r3, #84]	; 0x54
 8008258:	4a09      	ldr	r2, [pc, #36]	; (8008280 <HAL_ADC_MspInit+0x148>)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	2012      	movs	r0, #18
 8008264:	f012 ff8f 	bl	801b186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008268:	2012      	movs	r0, #18
 800826a:	f012 ffa6 	bl	801b1ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800826e:	bf00      	nop
 8008270:	3778      	adds	r7, #120	; 0x78
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	40021000 	.word	0x40021000
 800827c:	48000400 	.word	0x48000400
 8008280:	200007a0 	.word	0x200007a0
 8008284:	40020008 	.word	0x40020008

08008288 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8008290:	f7ff fc72 	bl	8007b78 <pl_callback_getSensor>
}
 8008294:	bf00      	nop
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 800829c:	b084      	sub	sp, #16
 800829e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	f107 0420 	add.w	r4, r7, #32
 80082aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 80082ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80082b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ba:	f2c0 819d 	blt.w	80085f8 <cal_table+0x35c>
	switch (g_acc_flag) {
 80082be:	4bcd      	ldr	r3, [pc, #820]	; (80085f4 <cal_table+0x358>)
 80082c0:	781b      	ldrb	r3, [r3, #0]
 80082c2:	b2db      	uxtb	r3, r3
 80082c4:	2b06      	cmp	r3, #6
 80082c6:	f200 833a 	bhi.w	800893e <cal_table+0x6a2>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <cal_table+0x34>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008931 	.word	0x08008931
 80082d4:	080082ed 	.word	0x080082ed
 80082d8:	0800845f 	.word	0x0800845f
 80082dc:	0800857d 	.word	0x0800857d
 80082e0:	08008931 	.word	0x08008931
 80082e4:	080085a9 	.word	0x080085a9
 80082e8:	080085cf 	.word	0x080085cf
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80082ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ee:	ed93 7a00 	vldr	s14, [r3]
 80082f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80082f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80082fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082fe:	db0a      	blt.n	8008316 <cal_table+0x7a>
				target->velocity = input.count_velocity;
 8008300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008304:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	f04f 0200 	mov.w	r2, #0
 800830c:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800830e:	4bb9      	ldr	r3, [pc, #740]	; (80085f4 <cal_table+0x358>)
 8008310:	2202      	movs	r2, #2
 8008312:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008314:	e313      	b.n	800893e <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 8008316:	ed97 7a08 	vldr	s14, [r7, #32]
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	edd3 7a00 	vldr	s15, [r3]
 8008320:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008326:	edd3 7a00 	vldr	s15, [r3]
 800832a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800832e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008332:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008336:	ee66 7a27 	vmul.f32	s15, s12, s15
 800833a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800833e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008342:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008346:	ee66 7a27 	vmul.f32	s15, s12, s15
 800834a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800834e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008352:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008356:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800835a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 800835e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008366:	d900      	bls.n	800836a <cal_table+0xce>
		break;
 8008368:	e2e9      	b.n	800893e <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 800836a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800836c:	edd3 7a00 	vldr	s15, [r3]
 8008370:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8008374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008376:	edd3 7a00 	vldr	s15, [r3]
 800837a:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 800837e:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8008382:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008386:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800838a:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 800838e:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008392:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008396:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800839a:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 800839e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80083a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80083a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80083aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80083b2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80083b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083b8:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 80083bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083c0:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 80083c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7f8 f8e5 	bl	8000598 <__aeabi_f2d>
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7f8 f8df 	bl	8000598 <__aeabi_f2d>
 80083da:	f04f 0200 	mov.w	r2, #0
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	f7f8 f931 	bl	8000648 <__aeabi_dmul>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	4690      	mov	r8, r2
 80083ec:	4699      	mov	r9, r3
 80083ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80083f2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083f6:	ee17 0a90 	vmov	r0, s15
 80083fa:	f7f8 f8cd 	bl	8000598 <__aeabi_f2d>
 80083fe:	4602      	mov	r2, r0
 8008400:	460b      	mov	r3, r1
 8008402:	4640      	mov	r0, r8
 8008404:	4649      	mov	r1, r9
 8008406:	f7f8 f91f 	bl	8000648 <__aeabi_dmul>
 800840a:	4602      	mov	r2, r0
 800840c:	460b      	mov	r3, r1
 800840e:	4620      	mov	r0, r4
 8008410:	4629      	mov	r1, r5
 8008412:	f7f7 ff61 	bl	80002d8 <__aeabi_dsub>
 8008416:	4602      	mov	r2, r0
 8008418:	460b      	mov	r3, r1
 800841a:	4610      	mov	r0, r2
 800841c:	4619      	mov	r1, r3
 800841e:	f7f8 fbeb 	bl	8000bf8 <__aeabi_d2f>
 8008422:	4602      	mov	r2, r0
 8008424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008426:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 8008428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800842a:	ed93 7a00 	vldr	s14, [r3]
 800842e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008432:	edd7 7a01 	vldr	s15, [r7, #4]
 8008436:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800843a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800843e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008444:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8008448:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800844c:	eef1 7a67 	vneg.f32	s15, s15
 8008450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008452:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 8008456:	4b67      	ldr	r3, [pc, #412]	; (80085f4 <cal_table+0x358>)
 8008458:	2203      	movs	r2, #3
 800845a:	701a      	strb	r2, [r3, #0]
		break;
 800845c:	e26f      	b.n	800893e <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 800845e:	ed97 7a08 	vldr	s14, [r7, #32]
 8008462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008464:	edd3 7a02 	vldr	s15, [r3, #8]
 8008468:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 800846c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8008470:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008474:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8008478:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800847c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008480:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008484:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008488:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800848c:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008490:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008494:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8008498:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800849c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084a0:	d900      	bls.n	80084a4 <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 80084a2:	e24c      	b.n	800893e <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a6:	ed93 7a02 	vldr	s14, [r3, #8]
 80084aa:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80084ae:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80084b2:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80084b6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80084ba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80084be:	ee66 7a27 	vmul.f32	s15, s12, s15
 80084c2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80084c6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80084ca:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 80084ce:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80084d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084d6:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 80084da:	edd7 7a08 	vldr	s15, [r7, #32]
 80084de:	ee77 6a67 	vsub.f32	s13, s14, s15
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80084e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ec:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80084f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	4618      	mov	r0, r3
 80084f6:	f7f8 f84f 	bl	8000598 <__aeabi_f2d>
 80084fa:	4604      	mov	r4, r0
 80084fc:	460d      	mov	r5, r1
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	4618      	mov	r0, r3
 8008502:	f7f8 f849 	bl	8000598 <__aeabi_f2d>
 8008506:	f04f 0200 	mov.w	r2, #0
 800850a:	f04f 0300 	mov.w	r3, #0
 800850e:	f7f8 f89b 	bl	8000648 <__aeabi_dmul>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4690      	mov	r8, r2
 8008518:	4699      	mov	r9, r3
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f7f8 f83c 	bl	8000598 <__aeabi_f2d>
 8008520:	4602      	mov	r2, r0
 8008522:	460b      	mov	r3, r1
 8008524:	4640      	mov	r0, r8
 8008526:	4649      	mov	r1, r9
 8008528:	f7f8 f88e 	bl	8000648 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f7 fed0 	bl	80002d8 <__aeabi_dsub>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4610      	mov	r0, r2
 800853e:	4619      	mov	r1, r3
 8008540:	f7f8 fb5a 	bl	8000bf8 <__aeabi_d2f>
 8008544:	4602      	mov	r2, r0
 8008546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008548:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 800854a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800854c:	ed93 7a00 	vldr	s14, [r3]
 8008550:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008554:	edd7 7a01 	vldr	s15, [r7, #4]
 8008558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800855c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008562:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8008566:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800856a:	eef1 7a67 	vneg.f32	s15, s15
 800856e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008570:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8008574:	4b1f      	ldr	r3, [pc, #124]	; (80085f4 <cal_table+0x358>)
 8008576:	2203      	movs	r2, #3
 8008578:	701a      	strb	r2, [r3, #0]
		break;
 800857a:	e1e0      	b.n	800893e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 800857c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857e:	ed93 7a00 	vldr	s14, [r3]
 8008582:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800858a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858e:	d900      	bls.n	8008592 <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8008590:	e1d5      	b.n	800893e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8008592:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008596:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859a:	f04f 0200 	mov.w	r2, #0
 800859e:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085a0:	4b14      	ldr	r3, [pc, #80]	; (80085f4 <cal_table+0x358>)
 80085a2:	2204      	movs	r2, #4
 80085a4:	701a      	strb	r2, [r3, #0]
		break;
 80085a6:	e1ca      	b.n	800893e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 80085a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80085ae:	edd7 7a08 	vldr	s15, [r7, #32]
 80085b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085ba:	da00      	bge.n	80085be <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085bc:	e1bf      	b.n	800893e <cal_table+0x6a2>
			target->acceleration = 0;
 80085be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085c0:	f04f 0200 	mov.w	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085c6:	4b0b      	ldr	r3, [pc, #44]	; (80085f4 <cal_table+0x358>)
 80085c8:	2204      	movs	r2, #4
 80085ca:	701a      	strb	r2, [r3, #0]
		break;
 80085cc:	e1b7      	b.n	800893e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 80085ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085d0:	ed93 7a02 	vldr	s14, [r3, #8]
 80085d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80085d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80085dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e0:	da00      	bge.n	80085e4 <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80085e2:	e1ac      	b.n	800893e <cal_table+0x6a2>
			target->acceleration = 0;
 80085e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e6:	f04f 0200 	mov.w	r2, #0
 80085ea:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80085ec:	4b01      	ldr	r3, [pc, #4]	; (80085f4 <cal_table+0x358>)
 80085ee:	2204      	movs	r2, #4
 80085f0:	701a      	strb	r2, [r3, #0]
		break;
 80085f2:	e1a4      	b.n	800893e <cal_table+0x6a2>
 80085f4:	20000804 	.word	0x20000804
	}
}else{
	switch (g_acc_flag) {
 80085f8:	4bce      	ldr	r3, [pc, #824]	; (8008934 <cal_table+0x698>)
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	b2db      	uxtb	r3, r3
 80085fe:	2b06      	cmp	r3, #6
 8008600:	f200 819d 	bhi.w	800893e <cal_table+0x6a2>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <cal_table+0x370>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	0800893d 	.word	0x0800893d
 8008610:	08008629 	.word	0x08008629
 8008614:	0800879b 	.word	0x0800879b
 8008618:	080088b1 	.word	0x080088b1
 800861c:	080088dd 	.word	0x080088dd
 8008620:	080088e5 	.word	0x080088e5
 8008624:	0800890b 	.word	0x0800890b
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8008628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862a:	ed93 7a00 	vldr	s14, [r3]
 800862e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8008632:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800863a:	d80a      	bhi.n	8008652 <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 800863c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	f04f 0200 	mov.w	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 800864a:	4bba      	ldr	r3, [pc, #744]	; (8008934 <cal_table+0x698>)
 800864c:	2202      	movs	r2, #2
 800864e:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8008650:	e175      	b.n	800893e <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8008652:	edd7 7a08 	vldr	s15, [r7, #32]
 8008656:	eeb1 7a67 	vneg.f32	s14, s15
 800865a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865c:	edd3 7a00 	vldr	s15, [r3]
 8008660:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8008664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008666:	edd3 7a00 	vldr	s15, [r3]
 800866a:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 800866e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8008672:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008676:	ee66 7a27 	vmul.f32	s15, s12, s15
 800867a:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 800867e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8008682:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8008686:	ee66 7a27 	vmul.f32	s15, s12, s15
 800868a:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 800868e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008692:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8008696:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800869a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 800869e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086a6:	d900      	bls.n	80086aa <cal_table+0x40e>
		break;
 80086a8:	e149      	b.n	800893e <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 80086aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ac:	edd3 7a00 	vldr	s15, [r3]
 80086b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80086b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086b6:	edd3 7a00 	vldr	s15, [r3]
 80086ba:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 80086be:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80086c2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086ca:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 80086ce:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80086d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80086d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80086da:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 80086de:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 80086e2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80086e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086ea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80086ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086f2:	edd7 7a08 	vldr	s15, [r7, #32]
 80086f6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80086fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fc:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	4618      	mov	r0, r3
 800870e:	f7f7 ff43 	bl	8000598 <__aeabi_f2d>
 8008712:	4604      	mov	r4, r0
 8008714:	460d      	mov	r5, r1
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	4618      	mov	r0, r3
 800871a:	f7f7 ff3d 	bl	8000598 <__aeabi_f2d>
 800871e:	f04f 0200 	mov.w	r2, #0
 8008722:	f04f 0300 	mov.w	r3, #0
 8008726:	f7f7 ff8f 	bl	8000648 <__aeabi_dmul>
 800872a:	4602      	mov	r2, r0
 800872c:	460b      	mov	r3, r1
 800872e:	4690      	mov	r8, r2
 8008730:	4699      	mov	r9, r3
 8008732:	edd7 7a01 	vldr	s15, [r7, #4]
 8008736:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800873a:	ee17 0a90 	vmov	r0, s15
 800873e:	f7f7 ff2b 	bl	8000598 <__aeabi_f2d>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	4640      	mov	r0, r8
 8008748:	4649      	mov	r1, r9
 800874a:	f7f7 ff7d 	bl	8000648 <__aeabi_dmul>
 800874e:	4602      	mov	r2, r0
 8008750:	460b      	mov	r3, r1
 8008752:	4620      	mov	r0, r4
 8008754:	4629      	mov	r1, r5
 8008756:	f7f7 fdc1 	bl	80002dc <__adddf3>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4610      	mov	r0, r2
 8008760:	4619      	mov	r1, r3
 8008762:	f7f8 fa49 	bl	8000bf8 <__aeabi_d2f>
 8008766:	4602      	mov	r2, r0
 8008768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876a:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 800876c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800876e:	ed93 7a00 	vldr	s14, [r3]
 8008772:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008776:	edd7 7a01 	vldr	s15, [r7, #4]
 800877a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800877e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008786:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008788:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 800878c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800878e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008790:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8008792:	4b68      	ldr	r3, [pc, #416]	; (8008934 <cal_table+0x698>)
 8008794:	2203      	movs	r2, #3
 8008796:	701a      	strb	r2, [r3, #0]
		break;
 8008798:	e0d1      	b.n	800893e <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 800879a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800879c:	ed93 7a02 	vldr	s14, [r3, #8]
 80087a0:	edd7 7a08 	vldr	s15, [r7, #32]
 80087a4:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 80087a8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087ac:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087b0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 80087b4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087c0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80087c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80087c8:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80087cc:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80087d0:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 80087d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80087d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087dc:	d900      	bls.n	80087e0 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 80087de:	e0ae      	b.n	800893e <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 80087e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087e2:	ed93 7a02 	vldr	s14, [r3, #8]
 80087e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80087ea:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80087ee:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 80087f2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80087f6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80087fa:	ee66 7a27 	vmul.f32	s15, s12, s15
 80087fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008802:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008806:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 800880a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800880e:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008812:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8008816:	edd7 7a08 	vldr	s15, [r7, #32]
 800881a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800881e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008820:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8008824:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008828:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 800882c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	4618      	mov	r0, r3
 8008832:	f7f7 feb1 	bl	8000598 <__aeabi_f2d>
 8008836:	4604      	mov	r4, r0
 8008838:	460d      	mov	r5, r1
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	4618      	mov	r0, r3
 800883e:	f7f7 feab 	bl	8000598 <__aeabi_f2d>
 8008842:	f04f 0200 	mov.w	r2, #0
 8008846:	f04f 0300 	mov.w	r3, #0
 800884a:	f7f7 fefd 	bl	8000648 <__aeabi_dmul>
 800884e:	4602      	mov	r2, r0
 8008850:	460b      	mov	r3, r1
 8008852:	4690      	mov	r8, r2
 8008854:	4699      	mov	r9, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f7f7 fe9e 	bl	8000598 <__aeabi_f2d>
 800885c:	4602      	mov	r2, r0
 800885e:	460b      	mov	r3, r1
 8008860:	4640      	mov	r0, r8
 8008862:	4649      	mov	r1, r9
 8008864:	f7f7 fef0 	bl	8000648 <__aeabi_dmul>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4620      	mov	r0, r4
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 fd34 	bl	80002dc <__adddf3>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4610      	mov	r0, r2
 800887a:	4619      	mov	r1, r3
 800887c:	f7f8 f9bc 	bl	8000bf8 <__aeabi_d2f>
 8008880:	4602      	mov	r2, r0
 8008882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008884:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8008886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008888:	ed93 7a00 	vldr	s14, [r3]
 800888c:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8008890:	edd7 7a01 	vldr	s15, [r7, #4]
 8008894:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800889e:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 80088a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088a6:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 80088a8:	4b22      	ldr	r3, [pc, #136]	; (8008934 <cal_table+0x698>)
 80088aa:	2203      	movs	r2, #3
 80088ac:	701a      	strb	r2, [r3, #0]
		break;
 80088ae:	e046      	b.n	800893e <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 80088b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088b2:	ed93 7a00 	vldr	s14, [r3]
 80088b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80088ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088c2:	da00      	bge.n	80088c6 <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088c4:	e03b      	b.n	800893e <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 80088c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 80088cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ce:	f04f 0200 	mov.w	r2, #0
 80088d2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 80088d4:	4b17      	ldr	r3, [pc, #92]	; (8008934 <cal_table+0x698>)
 80088d6:	2204      	movs	r2, #4
 80088d8:	701a      	strb	r2, [r3, #0]
		break;
 80088da:	e030      	b.n	800893e <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 80088dc:	4b16      	ldr	r3, [pc, #88]	; (8008938 <cal_table+0x69c>)
 80088de:	2201      	movs	r2, #1
 80088e0:	701a      	strb	r2, [r3, #0]
		break;
 80088e2:	e02c      	b.n	800893e <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 80088e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80088ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80088ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80088f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f6:	d900      	bls.n	80088fa <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 80088f8:	e021      	b.n	800893e <cal_table+0x6a2>
			target->acceleration = 0;
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	f04f 0200 	mov.w	r2, #0
 8008900:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008902:	4b0c      	ldr	r3, [pc, #48]	; (8008934 <cal_table+0x698>)
 8008904:	2204      	movs	r2, #4
 8008906:	701a      	strb	r2, [r3, #0]
		break;
 8008908:	e019      	b.n	800893e <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 800890a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800890c:	ed93 7a02 	vldr	s14, [r3, #8]
 8008910:	edd7 7a08 	vldr	s15, [r7, #32]
 8008914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891c:	d900      	bls.n	8008920 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 800891e:	e00e      	b.n	800893e <cal_table+0x6a2>
			target->acceleration = 0;
 8008920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008922:	f04f 0200 	mov.w	r2, #0
 8008926:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8008928:	4b02      	ldr	r3, [pc, #8]	; (8008934 <cal_table+0x698>)
 800892a:	2204      	movs	r2, #4
 800892c:	701a      	strb	r2, [r3, #0]
		break;
 800892e:	e006      	b.n	800893e <cal_table+0x6a2>
		break;
 8008930:	bf00      	nop
 8008932:	e004      	b.n	800893e <cal_table+0x6a2>
 8008934:	20000804 	.word	0x20000804
 8008938:	20000805 	.word	0x20000805
		break;
 800893c:	bf00      	nop
	}

}

}
 800893e:	bf00      	nop
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8008948:	b004      	add	sp, #16
 800894a:	4770      	bx	lr
 800894c:	0000      	movs	r0, r0
	...

08008950 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8008950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008954:	b08c      	sub	sp, #48	; 0x30
 8008956:	af00      	add	r7, sp, #0
 8008958:	eef0 6a40 	vmov.f32	s13, s0
 800895c:	eeb0 7a60 	vmov.f32	s14, s1
 8008960:	eef0 7a41 	vmov.f32	s15, s2
 8008964:	6138      	str	r0, [r7, #16]
 8008966:	edc7 6a05 	vstr	s13, [r7, #20]
 800896a:	ed87 7a06 	vstr	s14, [r7, #24]
 800896e:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8008972:	4be7      	ldr	r3, [pc, #924]	; (8008d10 <cal_mollifier_table+0x3c0>)
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8008976:	4be7      	ldr	r3, [pc, #924]	; (8008d14 <cal_mollifier_table+0x3c4>)
 8008978:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 800897a:	4be7      	ldr	r3, [pc, #924]	; (8008d18 <cal_mollifier_table+0x3c8>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4618      	mov	r0, r3
 8008980:	f7f7 fe0a 	bl	8000598 <__aeabi_f2d>
 8008984:	a3da      	add	r3, pc, #872	; (adr r3, 8008cf0 <cal_mollifier_table+0x3a0>)
 8008986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898a:	f7f7 fca7 	bl	80002dc <__adddf3>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	4610      	mov	r0, r2
 8008994:	4619      	mov	r1, r3
 8008996:	f7f8 f92f 	bl	8000bf8 <__aeabi_d2f>
 800899a:	4603      	mov	r3, r0
 800899c:	4ade      	ldr	r2, [pc, #888]	; (8008d18 <cal_mollifier_table+0x3c8>)
 800899e:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 80089a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80089a4:	eef0 7ae7 	vabs.f32	s15, s15
 80089a8:	ee17 0a90 	vmov	r0, s15
 80089ac:	f7f7 fdf4 	bl	8000598 <__aeabi_f2d>
 80089b0:	4602      	mov	r2, r0
 80089b2:	460b      	mov	r3, r1
 80089b4:	f7f7 fc92 	bl	80002dc <__adddf3>
 80089b8:	4602      	mov	r2, r0
 80089ba:	460b      	mov	r3, r1
 80089bc:	4610      	mov	r0, r2
 80089be:	4619      	mov	r1, r3
 80089c0:	a3cd      	add	r3, pc, #820	; (adr r3, 8008cf8 <cal_mollifier_table+0x3a8>)
 80089c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089c6:	f7f7 ff69 	bl	800089c <__aeabi_ddiv>
 80089ca:	4602      	mov	r2, r0
 80089cc:	460b      	mov	r3, r1
 80089ce:	4610      	mov	r0, r2
 80089d0:	4619      	mov	r1, r3
 80089d2:	a3cb      	add	r3, pc, #812	; (adr r3, 8008d00 <cal_mollifier_table+0x3b0>)
 80089d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089d8:	f7f7 fe36 	bl	8000648 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4614      	mov	r4, r2
 80089e2:	461d      	mov	r5, r3
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7f7 fdd6 	bl	8000598 <__aeabi_f2d>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4620      	mov	r0, r4
 80089f2:	4629      	mov	r1, r5
 80089f4:	f7f7 ff52 	bl	800089c <__aeabi_ddiv>
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	4610      	mov	r0, r2
 80089fe:	4619      	mov	r1, r3
 8008a00:	f7f8 f8fa 	bl	8000bf8 <__aeabi_d2f>
 8008a04:	4603      	mov	r3, r0
 8008a06:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8008a08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a0c:	eef1 7a67 	vneg.f32	s15, s15
 8008a10:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a14:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a18:	4bbf      	ldr	r3, [pc, #764]	; (8008d18 <cal_mollifier_table+0x3c8>)
 8008a1a:	edd3 7a00 	vldr	s15, [r3]
 8008a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a26:	f140 8698 	bpl.w	800975a <cal_mollifier_table+0xe0a>
 8008a2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a36:	4bb8      	ldr	r3, [pc, #736]	; (8008d18 <cal_mollifier_table+0x3c8>)
 8008a38:	edd3 7a00 	vldr	s15, [r3]
 8008a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a44:	f340 8689 	ble.w	800975a <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8008a4e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008a52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a62:	ee17 0a90 	vmov	r0, s15
 8008a66:	f7f7 fd97 	bl	8000598 <__aeabi_f2d>
 8008a6a:	a3a3      	add	r3, pc, #652	; (adr r3, 8008cf8 <cal_mollifier_table+0x3a8>)
 8008a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a70:	f7f7 ff14 	bl	800089c <__aeabi_ddiv>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4614      	mov	r4, r2
 8008a7a:	461d      	mov	r5, r3
 8008a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a80:	eeb1 7a67 	vneg.f32	s14, s15
 8008a84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8008a90:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008a94:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a98:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a9c:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8008aa0:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8008aa4:	4b9c      	ldr	r3, [pc, #624]	; (8008d18 <cal_mollifier_table+0x3c8>)
 8008aa6:	ed93 6a00 	vldr	s12, [r3]
 8008aaa:	4b9b      	ldr	r3, [pc, #620]	; (8008d18 <cal_mollifier_table+0x3c8>)
 8008aac:	edd3 7a00 	vldr	s15, [r3]
 8008ab0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8008ab4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008ab8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008abc:	ee16 0a90 	vmov	r0, s13
 8008ac0:	f7f7 fd6a 	bl	8000598 <__aeabi_f2d>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	ec43 2b10 	vmov	d0, r2, r3
 8008acc:	f01a f9e8 	bl	8022ea0 <exp>
 8008ad0:	ec53 2b10 	vmov	r2, r3, d0
 8008ad4:	4620      	mov	r0, r4
 8008ad6:	4629      	mov	r1, r5
 8008ad8:	f7f7 fdb6 	bl	8000648 <__aeabi_dmul>
 8008adc:	4602      	mov	r2, r0
 8008ade:	460b      	mov	r3, r1
 8008ae0:	4610      	mov	r0, r2
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	f7f8 f888 	bl	8000bf8 <__aeabi_d2f>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008aee:	4b8a      	ldr	r3, [pc, #552]	; (8008d18 <cal_mollifier_table+0x3c8>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7f7 fd50 	bl	8000598 <__aeabi_f2d>
 8008af8:	4604      	mov	r4, r0
 8008afa:	460d      	mov	r5, r1
 8008afc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b00:	eef1 7a67 	vneg.f32	s15, s15
 8008b04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b08:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b0c:	ee16 0a90 	vmov	r0, s13
 8008b10:	f7f7 fd42 	bl	8000598 <__aeabi_f2d>
 8008b14:	a37c      	add	r3, pc, #496	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b1a:	f7f7 febf 	bl	800089c <__aeabi_ddiv>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4690      	mov	r8, r2
 8008b24:	4699      	mov	r9, r3
 8008b26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b28:	f7f7 fd36 	bl	8000598 <__aeabi_f2d>
 8008b2c:	a370      	add	r3, pc, #448	; (adr r3, 8008cf0 <cal_mollifier_table+0x3a0>)
 8008b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b32:	f7f7 fd89 	bl	8000648 <__aeabi_dmul>
 8008b36:	4602      	mov	r2, r0
 8008b38:	460b      	mov	r3, r1
 8008b3a:	4640      	mov	r0, r8
 8008b3c:	4649      	mov	r1, r9
 8008b3e:	f7f7 fbcd 	bl	80002dc <__adddf3>
 8008b42:	4602      	mov	r2, r0
 8008b44:	460b      	mov	r3, r1
 8008b46:	4620      	mov	r0, r4
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7f7 ffef 	bl	8000b2c <__aeabi_dcmplt>
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	f000 8163 	beq.w	8008e1c <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 8008b56:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008b5a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b62:	edd7 7a05 	vldr	s15, [r7, #20]
 8008b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b6a:	ee17 0a90 	vmov	r0, s15
 8008b6e:	f7f7 fd13 	bl	8000598 <__aeabi_f2d>
 8008b72:	a361      	add	r3, pc, #388	; (adr r3, 8008cf8 <cal_mollifier_table+0x3a8>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fe90 	bl	800089c <__aeabi_ddiv>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b84:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b88:	eeb1 7a67 	vneg.f32	s14, s15
 8008b8c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b94:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008b98:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b9c:	ee16 0a90 	vmov	r0, s13
 8008ba0:	f7f7 fcfa 	bl	8000598 <__aeabi_f2d>
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	460d      	mov	r5, r1
 8008ba8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bac:	eef1 7a67 	vneg.f32	s15, s15
 8008bb0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008bb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bb8:	ee16 0a90 	vmov	r0, s13
 8008bbc:	f7f7 fcec 	bl	8000598 <__aeabi_f2d>
 8008bc0:	a351      	add	r3, pc, #324	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc6:	f7f7 fe69 	bl	800089c <__aeabi_ddiv>
 8008bca:	4602      	mov	r2, r0
 8008bcc:	460b      	mov	r3, r1
 8008bce:	4620      	mov	r0, r4
 8008bd0:	4629      	mov	r1, r5
 8008bd2:	f7f7 fd39 	bl	8000648 <__aeabi_dmul>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	460b      	mov	r3, r1
 8008bda:	4690      	mov	r8, r2
 8008bdc:	4699      	mov	r9, r3
 8008bde:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008be6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008bea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008bee:	ee16 0a90 	vmov	r0, s13
 8008bf2:	f7f7 fcd1 	bl	8000598 <__aeabi_f2d>
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008bfe:	eef1 7a67 	vneg.f32	s15, s15
 8008c02:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c0a:	ee16 0a90 	vmov	r0, s13
 8008c0e:	f7f7 fcc3 	bl	8000598 <__aeabi_f2d>
 8008c12:	a33d      	add	r3, pc, #244	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	f7f7 fe40 	bl	800089c <__aeabi_ddiv>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	460b      	mov	r3, r1
 8008c20:	4692      	mov	sl, r2
 8008c22:	469b      	mov	fp, r3
 8008c24:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c28:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c30:	ee16 0a90 	vmov	r0, s13
 8008c34:	f7f7 fcb0 	bl	8000598 <__aeabi_f2d>
 8008c38:	a333      	add	r3, pc, #204	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3e:	f7f7 fe2d 	bl	800089c <__aeabi_ddiv>
 8008c42:	4602      	mov	r2, r0
 8008c44:	460b      	mov	r3, r1
 8008c46:	4650      	mov	r0, sl
 8008c48:	4659      	mov	r1, fp
 8008c4a:	f7f7 fcfd 	bl	8000648 <__aeabi_dmul>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 fb41 	bl	80002dc <__adddf3>
 8008c5a:	4602      	mov	r2, r0
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	4640      	mov	r0, r8
 8008c60:	4649      	mov	r1, r9
 8008c62:	f7f7 fe1b 	bl	800089c <__aeabi_ddiv>
 8008c66:	4602      	mov	r2, r0
 8008c68:	460b      	mov	r3, r1
 8008c6a:	4690      	mov	r8, r2
 8008c6c:	4699      	mov	r9, r3
 8008c6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008c76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008c7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c7e:	ee16 0a90 	vmov	r0, s13
 8008c82:	f7f7 fc89 	bl	8000598 <__aeabi_f2d>
 8008c86:	4604      	mov	r4, r0
 8008c88:	460d      	mov	r5, r1
 8008c8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008c8e:	eef1 7a67 	vneg.f32	s15, s15
 8008c92:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008c96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008c9a:	ee16 0a90 	vmov	r0, s13
 8008c9e:	f7f7 fc7b 	bl	8000598 <__aeabi_f2d>
 8008ca2:	a319      	add	r3, pc, #100	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca8:	f7f7 fdf8 	bl	800089c <__aeabi_ddiv>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4692      	mov	sl, r2
 8008cb2:	469b      	mov	fp, r3
 8008cb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008cb8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008cbc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008cc0:	ee16 0a90 	vmov	r0, s13
 8008cc4:	f7f7 fc68 	bl	8000598 <__aeabi_f2d>
 8008cc8:	a30f      	add	r3, pc, #60	; (adr r3, 8008d08 <cal_mollifier_table+0x3b8>)
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	f7f7 fde5 	bl	800089c <__aeabi_ddiv>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	4659      	mov	r1, fp
 8008cda:	f7f7 fcb5 	bl	8000648 <__aeabi_dmul>
 8008cde:	4602      	mov	r2, r0
 8008ce0:	460b      	mov	r3, r1
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 faf9 	bl	80002dc <__adddf3>
 8008cea:	4602      	mov	r2, r0
 8008cec:	e016      	b.n	8008d1c <cal_mollifier_table+0x3cc>
 8008cee:	bf00      	nop
 8008cf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8008cf4:	3f50624d 	.word	0x3f50624d
 8008cf8:	f9db22d1 	.word	0xf9db22d1
 8008cfc:	3fdc6a7e 	.word	0x3fdc6a7e
 8008d00:	362cef38 	.word	0x362cef38
 8008d04:	3fd78b56 	.word	0x3fd78b56
 8008d08:	04189375 	.word	0x04189375
 8008d0c:	3ff50e56 	.word	0x3ff50e56
 8008d10:	41700000 	.word	0x41700000
 8008d14:	c1700000 	.word	0xc1700000
 8008d18:	20000800 	.word	0x20000800
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	4640      	mov	r0, r8
 8008d20:	4649      	mov	r1, r9
 8008d22:	f7f7 fdbb 	bl	800089c <__aeabi_ddiv>
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008d2e:	f7f7 fc8b 	bl	8000648 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4692      	mov	sl, r2
 8008d38:	469b      	mov	fp, r3
 8008d3a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d3e:	eeb1 7a67 	vneg.f32	s14, s15
 8008d42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d4a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d52:	ee16 0a90 	vmov	r0, s13
 8008d56:	f7f7 fc1f 	bl	8000598 <__aeabi_f2d>
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	460d      	mov	r5, r1
 8008d5e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d62:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008d66:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008d6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d6e:	ee16 0a90 	vmov	r0, s13
 8008d72:	f7f7 fc11 	bl	8000598 <__aeabi_f2d>
 8008d76:	4680      	mov	r8, r0
 8008d78:	4689      	mov	r9, r1
 8008d7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008d7e:	eef1 7a67 	vneg.f32	s15, s15
 8008d82:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008d86:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008d8a:	ee16 0a90 	vmov	r0, s13
 8008d8e:	f7f7 fc03 	bl	8000598 <__aeabi_f2d>
 8008d92:	a3e1      	add	r3, pc, #900	; (adr r3, 8009118 <cal_mollifier_table+0x7c8>)
 8008d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d98:	f7f7 fd80 	bl	800089c <__aeabi_ddiv>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008da4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008da8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008dac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008db0:	ee16 0a90 	vmov	r0, s13
 8008db4:	f7f7 fbf0 	bl	8000598 <__aeabi_f2d>
 8008db8:	a3d7      	add	r3, pc, #860	; (adr r3, 8009118 <cal_mollifier_table+0x7c8>)
 8008dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbe:	f7f7 fd6d 	bl	800089c <__aeabi_ddiv>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008dca:	f7f7 fc3d 	bl	8000648 <__aeabi_dmul>
 8008dce:	4602      	mov	r2, r0
 8008dd0:	460b      	mov	r3, r1
 8008dd2:	4640      	mov	r0, r8
 8008dd4:	4649      	mov	r1, r9
 8008dd6:	f7f7 fa81 	bl	80002dc <__adddf3>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	460b      	mov	r3, r1
 8008dde:	4620      	mov	r0, r4
 8008de0:	4629      	mov	r1, r5
 8008de2:	f7f7 fd5b 	bl	800089c <__aeabi_ddiv>
 8008de6:	4602      	mov	r2, r0
 8008de8:	460b      	mov	r3, r1
 8008dea:	ec43 2b17 	vmov	d7, r2, r3
 8008dee:	eeb0 0a47 	vmov.f32	s0, s14
 8008df2:	eef0 0a67 	vmov.f32	s1, s15
 8008df6:	f01a f853 	bl	8022ea0 <exp>
 8008dfa:	ec53 2b10 	vmov	r2, r3, d0
 8008dfe:	4650      	mov	r0, sl
 8008e00:	4659      	mov	r1, fp
 8008e02:	f7f7 fc21 	bl	8000648 <__aeabi_dmul>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4610      	mov	r0, r2
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f7f7 fef3 	bl	8000bf8 <__aeabi_d2f>
 8008e12:	4602      	mov	r2, r0
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008e18:	f000 bcb4 	b.w	8009784 <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 8008e1c:	4bc0      	ldr	r3, [pc, #768]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008e1e:	edd3 7a00 	vldr	s15, [r3]
 8008e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e2a:	f140 817b 	bpl.w	8009124 <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008e2e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008e32:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8008e3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e42:	ee17 0a90 	vmov	r0, s15
 8008e46:	f7f7 fba7 	bl	8000598 <__aeabi_f2d>
 8008e4a:	a3af      	add	r3, pc, #700	; (adr r3, 8009108 <cal_mollifier_table+0x7b8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fd24 	bl	800089c <__aeabi_ddiv>
 8008e54:	4602      	mov	r2, r0
 8008e56:	460b      	mov	r3, r1
 8008e58:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008e5c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e60:	eeb1 7a67 	vneg.f32	s14, s15
 8008e64:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008e68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e6c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008e70:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008e74:	ee16 0a90 	vmov	r0, s13
 8008e78:	f7f7 fb8e 	bl	8000598 <__aeabi_f2d>
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	460d      	mov	r5, r1
 8008e80:	4ba7      	ldr	r3, [pc, #668]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7f7 fb87 	bl	8000598 <__aeabi_f2d>
 8008e8a:	4680      	mov	r8, r0
 8008e8c:	4689      	mov	r9, r1
 8008e8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008e90:	f7f7 fb82 	bl	8000598 <__aeabi_f2d>
 8008e94:	a39e      	add	r3, pc, #632	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fbd5 	bl	8000648 <__aeabi_dmul>
 8008e9e:	4602      	mov	r2, r0
 8008ea0:	460b      	mov	r3, r1
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fa17 	bl	80002d8 <__aeabi_dsub>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4620      	mov	r0, r4
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 fbc9 	bl	8000648 <__aeabi_dmul>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	460b      	mov	r3, r1
 8008eba:	e9c7 2300 	strd	r2, r3, [r7]
 8008ebe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008ec2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008ec6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008eca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008ece:	ee16 0a90 	vmov	r0, s13
 8008ed2:	f7f7 fb61 	bl	8000598 <__aeabi_f2d>
 8008ed6:	4680      	mov	r8, r0
 8008ed8:	4689      	mov	r9, r1
 8008eda:	4b91      	ldr	r3, [pc, #580]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f7f7 fb5a 	bl	8000598 <__aeabi_f2d>
 8008ee4:	4604      	mov	r4, r0
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008eea:	f7f7 fb55 	bl	8000598 <__aeabi_f2d>
 8008eee:	a388      	add	r3, pc, #544	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8008ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef4:	f7f7 fba8 	bl	8000648 <__aeabi_dmul>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	460b      	mov	r3, r1
 8008efc:	4620      	mov	r0, r4
 8008efe:	4629      	mov	r1, r5
 8008f00:	f7f7 f9ea 	bl	80002d8 <__aeabi_dsub>
 8008f04:	4602      	mov	r2, r0
 8008f06:	460b      	mov	r3, r1
 8008f08:	4692      	mov	sl, r2
 8008f0a:	469b      	mov	fp, r3
 8008f0c:	4b84      	ldr	r3, [pc, #528]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	f7f7 fb41 	bl	8000598 <__aeabi_f2d>
 8008f16:	4604      	mov	r4, r0
 8008f18:	460d      	mov	r5, r1
 8008f1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f1c:	f7f7 fb3c 	bl	8000598 <__aeabi_f2d>
 8008f20:	a37b      	add	r3, pc, #492	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb8f 	bl	8000648 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4620      	mov	r0, r4
 8008f30:	4629      	mov	r1, r5
 8008f32:	f7f7 f9d1 	bl	80002d8 <__aeabi_dsub>
 8008f36:	4602      	mov	r2, r0
 8008f38:	460b      	mov	r3, r1
 8008f3a:	4650      	mov	r0, sl
 8008f3c:	4659      	mov	r1, fp
 8008f3e:	f7f7 fb83 	bl	8000648 <__aeabi_dmul>
 8008f42:	4602      	mov	r2, r0
 8008f44:	460b      	mov	r3, r1
 8008f46:	4640      	mov	r0, r8
 8008f48:	4649      	mov	r1, r9
 8008f4a:	f7f7 f9c5 	bl	80002d8 <__aeabi_dsub>
 8008f4e:	4602      	mov	r2, r0
 8008f50:	460b      	mov	r3, r1
 8008f52:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008f56:	f7f7 fca1 	bl	800089c <__aeabi_ddiv>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	460b      	mov	r3, r1
 8008f5e:	e9c7 2300 	strd	r2, r3, [r7]
 8008f62:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008f66:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f6a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008f6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008f72:	ee16 0a90 	vmov	r0, s13
 8008f76:	f7f7 fb0f 	bl	8000598 <__aeabi_f2d>
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	4b68      	ldr	r3, [pc, #416]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f7f7 fb08 	bl	8000598 <__aeabi_f2d>
 8008f88:	4604      	mov	r4, r0
 8008f8a:	460d      	mov	r5, r1
 8008f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008f8e:	f7f7 fb03 	bl	8000598 <__aeabi_f2d>
 8008f92:	a35f      	add	r3, pc, #380	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f7f7 fb56 	bl	8000648 <__aeabi_dmul>
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7f7 f998 	bl	80002d8 <__aeabi_dsub>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	460b      	mov	r3, r1
 8008fac:	4692      	mov	sl, r2
 8008fae:	469b      	mov	fp, r3
 8008fb0:	4b5b      	ldr	r3, [pc, #364]	; (8009120 <cal_mollifier_table+0x7d0>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f7 faef 	bl	8000598 <__aeabi_f2d>
 8008fba:	4604      	mov	r4, r0
 8008fbc:	460d      	mov	r5, r1
 8008fbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008fc0:	f7f7 faea 	bl	8000598 <__aeabi_f2d>
 8008fc4:	a352      	add	r3, pc, #328	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8008fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fca:	f7f7 fb3d 	bl	8000648 <__aeabi_dmul>
 8008fce:	4602      	mov	r2, r0
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	4620      	mov	r0, r4
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7f7 f97f 	bl	80002d8 <__aeabi_dsub>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	4650      	mov	r0, sl
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	f7f7 fb31 	bl	8000648 <__aeabi_dmul>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 f973 	bl	80002d8 <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ffa:	f7f7 fc4f 	bl	800089c <__aeabi_ddiv>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009006:	f7f7 fb1f 	bl	8000648 <__aeabi_dmul>
 800900a:	4602      	mov	r2, r0
 800900c:	460b      	mov	r3, r1
 800900e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009016:	eeb1 7a67 	vneg.f32	s14, s15
 800901a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800901e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009022:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009026:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800902a:	ee16 0a90 	vmov	r0, s13
 800902e:	f7f7 fab3 	bl	8000598 <__aeabi_f2d>
 8009032:	4680      	mov	r8, r0
 8009034:	4689      	mov	r9, r1
 8009036:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800903a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800903e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009042:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009046:	ee16 0a90 	vmov	r0, s13
 800904a:	f7f7 faa5 	bl	8000598 <__aeabi_f2d>
 800904e:	4682      	mov	sl, r0
 8009050:	468b      	mov	fp, r1
 8009052:	4b33      	ldr	r3, [pc, #204]	; (8009120 <cal_mollifier_table+0x7d0>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f7f7 fa9e 	bl	8000598 <__aeabi_f2d>
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009062:	f7f7 fa99 	bl	8000598 <__aeabi_f2d>
 8009066:	a32a      	add	r3, pc, #168	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 8009068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800906c:	f7f7 faec 	bl	8000648 <__aeabi_dmul>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4620      	mov	r0, r4
 8009076:	4629      	mov	r1, r5
 8009078:	f7f7 f92e 	bl	80002d8 <__aeabi_dsub>
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	e9c7 2300 	strd	r2, r3, [r7]
 8009084:	4b26      	ldr	r3, [pc, #152]	; (8009120 <cal_mollifier_table+0x7d0>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4618      	mov	r0, r3
 800908a:	f7f7 fa85 	bl	8000598 <__aeabi_f2d>
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009094:	f7f7 fa80 	bl	8000598 <__aeabi_f2d>
 8009098:	a31d      	add	r3, pc, #116	; (adr r3, 8009110 <cal_mollifier_table+0x7c0>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 fad3 	bl	8000648 <__aeabi_dmul>
 80090a2:	4602      	mov	r2, r0
 80090a4:	460b      	mov	r3, r1
 80090a6:	4620      	mov	r0, r4
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 f915 	bl	80002d8 <__aeabi_dsub>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80090b6:	f7f7 fac7 	bl	8000648 <__aeabi_dmul>
 80090ba:	4602      	mov	r2, r0
 80090bc:	460b      	mov	r3, r1
 80090be:	4650      	mov	r0, sl
 80090c0:	4659      	mov	r1, fp
 80090c2:	f7f7 f909 	bl	80002d8 <__aeabi_dsub>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fbe5 	bl	800089c <__aeabi_ddiv>
 80090d2:	4602      	mov	r2, r0
 80090d4:	460b      	mov	r3, r1
 80090d6:	ec43 2b17 	vmov	d7, r2, r3
 80090da:	eeb0 0a47 	vmov.f32	s0, s14
 80090de:	eef0 0a67 	vmov.f32	s1, s15
 80090e2:	f019 fedd 	bl	8022ea0 <exp>
 80090e6:	ec53 2b10 	vmov	r2, r3, d0
 80090ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090ee:	f7f7 faab 	bl	8000648 <__aeabi_dmul>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4610      	mov	r0, r2
 80090f8:	4619      	mov	r1, r3
 80090fa:	f7f7 fd7d 	bl	8000bf8 <__aeabi_d2f>
 80090fe:	4602      	mov	r2, r0
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009104:	e33e      	b.n	8009784 <cal_mollifier_table+0xe34>
 8009106:	bf00      	nop
 8009108:	f9db22d1 	.word	0xf9db22d1
 800910c:	3fdc6a7e 	.word	0x3fdc6a7e
 8009110:	d2f1a9fc 	.word	0xd2f1a9fc
 8009114:	3f50624d 	.word	0x3f50624d
 8009118:	04189375 	.word	0x04189375
 800911c:	3ff50e56 	.word	0x3ff50e56
 8009120:	20000800 	.word	0x20000800
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 8009124:	4bd4      	ldr	r3, [pc, #848]	; (8009478 <cal_mollifier_table+0xb28>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f7f7 fa35 	bl	8000598 <__aeabi_f2d>
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009136:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800913a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800913e:	ee16 0a90 	vmov	r0, s13
 8009142:	f7f7 fa29 	bl	8000598 <__aeabi_f2d>
 8009146:	a3c6      	add	r3, pc, #792	; (adr r3, 8009460 <cal_mollifier_table+0xb10>)
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f7f7 fba6 	bl	800089c <__aeabi_ddiv>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4690      	mov	r8, r2
 8009156:	4699      	mov	r9, r3
 8009158:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800915a:	f7f7 fa1d 	bl	8000598 <__aeabi_f2d>
 800915e:	a3c2      	add	r3, pc, #776	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 8009160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009164:	f7f7 fa70 	bl	8000648 <__aeabi_dmul>
 8009168:	4602      	mov	r2, r0
 800916a:	460b      	mov	r3, r1
 800916c:	4640      	mov	r0, r8
 800916e:	4649      	mov	r1, r9
 8009170:	f7f7 f8b4 	bl	80002dc <__adddf3>
 8009174:	4602      	mov	r2, r0
 8009176:	460b      	mov	r3, r1
 8009178:	4620      	mov	r0, r4
 800917a:	4629      	mov	r1, r5
 800917c:	f7f7 fcd6 	bl	8000b2c <__aeabi_dcmplt>
 8009180:	4603      	mov	r3, r0
 8009182:	2b00      	cmp	r3, #0
 8009184:	f000 817a 	beq.w	800947c <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009188:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800918c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009190:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009194:	edd7 7a05 	vldr	s15, [r7, #20]
 8009198:	ee67 7a27 	vmul.f32	s15, s14, s15
 800919c:	ee17 0a90 	vmov	r0, s15
 80091a0:	f7f7 f9fa 	bl	8000598 <__aeabi_f2d>
 80091a4:	a3b2      	add	r3, pc, #712	; (adr r3, 8009470 <cal_mollifier_table+0xb20>)
 80091a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091aa:	f7f7 fb77 	bl	800089c <__aeabi_ddiv>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80091b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091ba:	eeb1 7a67 	vneg.f32	s14, s15
 80091be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80091c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80091c6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80091ca:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80091ce:	ee16 0a90 	vmov	r0, s13
 80091d2:	f7f7 f9e1 	bl	8000598 <__aeabi_f2d>
 80091d6:	4604      	mov	r4, r0
 80091d8:	460d      	mov	r5, r1
 80091da:	4ba7      	ldr	r3, [pc, #668]	; (8009478 <cal_mollifier_table+0xb28>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4618      	mov	r0, r3
 80091e0:	f7f7 f9da 	bl	8000598 <__aeabi_f2d>
 80091e4:	4680      	mov	r8, r0
 80091e6:	4689      	mov	r9, r1
 80091e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80091ea:	f7f7 f9d5 	bl	8000598 <__aeabi_f2d>
 80091ee:	a39e      	add	r3, pc, #632	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 80091f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f4:	f7f7 fa28 	bl	8000648 <__aeabi_dmul>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4640      	mov	r0, r8
 80091fe:	4649      	mov	r1, r9
 8009200:	f7f7 f86a 	bl	80002d8 <__aeabi_dsub>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4620      	mov	r0, r4
 800920a:	4629      	mov	r1, r5
 800920c:	f7f7 fa1c 	bl	8000648 <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	e9c7 2300 	strd	r2, r3, [r7]
 8009218:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800921c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009220:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009228:	ee16 0a90 	vmov	r0, s13
 800922c:	f7f7 f9b4 	bl	8000598 <__aeabi_f2d>
 8009230:	4680      	mov	r8, r0
 8009232:	4689      	mov	r9, r1
 8009234:	4b90      	ldr	r3, [pc, #576]	; (8009478 <cal_mollifier_table+0xb28>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4618      	mov	r0, r3
 800923a:	f7f7 f9ad 	bl	8000598 <__aeabi_f2d>
 800923e:	4604      	mov	r4, r0
 8009240:	460d      	mov	r5, r1
 8009242:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009244:	f7f7 f9a8 	bl	8000598 <__aeabi_f2d>
 8009248:	a387      	add	r3, pc, #540	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9fb 	bl	8000648 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4620      	mov	r0, r4
 8009258:	4629      	mov	r1, r5
 800925a:	f7f7 f83d 	bl	80002d8 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4692      	mov	sl, r2
 8009264:	469b      	mov	fp, r3
 8009266:	4b84      	ldr	r3, [pc, #528]	; (8009478 <cal_mollifier_table+0xb28>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4618      	mov	r0, r3
 800926c:	f7f7 f994 	bl	8000598 <__aeabi_f2d>
 8009270:	4604      	mov	r4, r0
 8009272:	460d      	mov	r5, r1
 8009274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009276:	f7f7 f98f 	bl	8000598 <__aeabi_f2d>
 800927a:	a37b      	add	r3, pc, #492	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 800927c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009280:	f7f7 f9e2 	bl	8000648 <__aeabi_dmul>
 8009284:	4602      	mov	r2, r0
 8009286:	460b      	mov	r3, r1
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f7 f824 	bl	80002d8 <__aeabi_dsub>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	4650      	mov	r0, sl
 8009296:	4659      	mov	r1, fp
 8009298:	f7f7 f9d6 	bl	8000648 <__aeabi_dmul>
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	4640      	mov	r0, r8
 80092a2:	4649      	mov	r1, r9
 80092a4:	f7f7 f818 	bl	80002d8 <__aeabi_dsub>
 80092a8:	4602      	mov	r2, r0
 80092aa:	460b      	mov	r3, r1
 80092ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80092b0:	f7f7 faf4 	bl	800089c <__aeabi_ddiv>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	e9c7 2300 	strd	r2, r3, [r7]
 80092bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80092c0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092c4:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80092c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80092cc:	ee16 0a90 	vmov	r0, s13
 80092d0:	f7f7 f962 	bl	8000598 <__aeabi_f2d>
 80092d4:	4680      	mov	r8, r0
 80092d6:	4689      	mov	r9, r1
 80092d8:	4b67      	ldr	r3, [pc, #412]	; (8009478 <cal_mollifier_table+0xb28>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4618      	mov	r0, r3
 80092de:	f7f7 f95b 	bl	8000598 <__aeabi_f2d>
 80092e2:	4604      	mov	r4, r0
 80092e4:	460d      	mov	r5, r1
 80092e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80092e8:	f7f7 f956 	bl	8000598 <__aeabi_f2d>
 80092ec:	a35e      	add	r3, pc, #376	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 80092ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f2:	f7f7 f9a9 	bl	8000648 <__aeabi_dmul>
 80092f6:	4602      	mov	r2, r0
 80092f8:	460b      	mov	r3, r1
 80092fa:	4620      	mov	r0, r4
 80092fc:	4629      	mov	r1, r5
 80092fe:	f7f6 ffeb 	bl	80002d8 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4692      	mov	sl, r2
 8009308:	469b      	mov	fp, r3
 800930a:	4b5b      	ldr	r3, [pc, #364]	; (8009478 <cal_mollifier_table+0xb28>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4618      	mov	r0, r3
 8009310:	f7f7 f942 	bl	8000598 <__aeabi_f2d>
 8009314:	4604      	mov	r4, r0
 8009316:	460d      	mov	r5, r1
 8009318:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800931a:	f7f7 f93d 	bl	8000598 <__aeabi_f2d>
 800931e:	a352      	add	r3, pc, #328	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	f7f7 f990 	bl	8000648 <__aeabi_dmul>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	4620      	mov	r0, r4
 800932e:	4629      	mov	r1, r5
 8009330:	f7f6 ffd2 	bl	80002d8 <__aeabi_dsub>
 8009334:	4602      	mov	r2, r0
 8009336:	460b      	mov	r3, r1
 8009338:	4650      	mov	r0, sl
 800933a:	4659      	mov	r1, fp
 800933c:	f7f7 f984 	bl	8000648 <__aeabi_dmul>
 8009340:	4602      	mov	r2, r0
 8009342:	460b      	mov	r3, r1
 8009344:	4640      	mov	r0, r8
 8009346:	4649      	mov	r1, r9
 8009348:	f7f6 ffc6 	bl	80002d8 <__aeabi_dsub>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009354:	f7f7 faa2 	bl	800089c <__aeabi_ddiv>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009360:	f7f7 f972 	bl	8000648 <__aeabi_dmul>
 8009364:	4602      	mov	r2, r0
 8009366:	460b      	mov	r3, r1
 8009368:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800936c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009370:	eeb1 7a67 	vneg.f32	s14, s15
 8009374:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800937c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009380:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009384:	ee16 0a90 	vmov	r0, s13
 8009388:	f7f7 f906 	bl	8000598 <__aeabi_f2d>
 800938c:	4680      	mov	r8, r0
 800938e:	4689      	mov	r9, r1
 8009390:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009394:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009398:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800939c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80093a0:	ee16 0a90 	vmov	r0, s13
 80093a4:	f7f7 f8f8 	bl	8000598 <__aeabi_f2d>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	4b32      	ldr	r3, [pc, #200]	; (8009478 <cal_mollifier_table+0xb28>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4618      	mov	r0, r3
 80093b2:	f7f7 f8f1 	bl	8000598 <__aeabi_f2d>
 80093b6:	4604      	mov	r4, r0
 80093b8:	460d      	mov	r5, r1
 80093ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093bc:	f7f7 f8ec 	bl	8000598 <__aeabi_f2d>
 80093c0:	a329      	add	r3, pc, #164	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 80093c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c6:	f7f7 f93f 	bl	8000648 <__aeabi_dmul>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	4620      	mov	r0, r4
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7f6 ff81 	bl	80002d8 <__aeabi_dsub>
 80093d6:	4602      	mov	r2, r0
 80093d8:	460b      	mov	r3, r1
 80093da:	e9c7 2300 	strd	r2, r3, [r7]
 80093de:	4b26      	ldr	r3, [pc, #152]	; (8009478 <cal_mollifier_table+0xb28>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7f7 f8d8 	bl	8000598 <__aeabi_f2d>
 80093e8:	4604      	mov	r4, r0
 80093ea:	460d      	mov	r5, r1
 80093ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80093ee:	f7f7 f8d3 	bl	8000598 <__aeabi_f2d>
 80093f2:	a31d      	add	r3, pc, #116	; (adr r3, 8009468 <cal_mollifier_table+0xb18>)
 80093f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093f8:	f7f7 f926 	bl	8000648 <__aeabi_dmul>
 80093fc:	4602      	mov	r2, r0
 80093fe:	460b      	mov	r3, r1
 8009400:	4620      	mov	r0, r4
 8009402:	4629      	mov	r1, r5
 8009404:	f7f6 ff68 	bl	80002d8 <__aeabi_dsub>
 8009408:	4602      	mov	r2, r0
 800940a:	460b      	mov	r3, r1
 800940c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009410:	f7f7 f91a 	bl	8000648 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4650      	mov	r0, sl
 800941a:	4659      	mov	r1, fp
 800941c:	f7f6 ff5c 	bl	80002d8 <__aeabi_dsub>
 8009420:	4602      	mov	r2, r0
 8009422:	460b      	mov	r3, r1
 8009424:	4640      	mov	r0, r8
 8009426:	4649      	mov	r1, r9
 8009428:	f7f7 fa38 	bl	800089c <__aeabi_ddiv>
 800942c:	4602      	mov	r2, r0
 800942e:	460b      	mov	r3, r1
 8009430:	ec43 2b17 	vmov	d7, r2, r3
 8009434:	eeb0 0a47 	vmov.f32	s0, s14
 8009438:	eef0 0a67 	vmov.f32	s1, s15
 800943c:	f019 fd30 	bl	8022ea0 <exp>
 8009440:	ec53 2b10 	vmov	r2, r3, d0
 8009444:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009448:	f7f7 f8fe 	bl	8000648 <__aeabi_dmul>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4610      	mov	r0, r2
 8009452:	4619      	mov	r1, r3
 8009454:	f7f7 fbd0 	bl	8000bf8 <__aeabi_d2f>
 8009458:	4602      	mov	r2, r0
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 800945e:	e191      	b.n	8009784 <cal_mollifier_table+0xe34>
 8009460:	04189375 	.word	0x04189375
 8009464:	3ff50e56 	.word	0x3ff50e56
 8009468:	d2f1a9fc 	.word	0xd2f1a9fc
 800946c:	3f50624d 	.word	0x3f50624d
 8009470:	f9db22d1 	.word	0xf9db22d1
 8009474:	3fdc6a7e 	.word	0x3fdc6a7e
 8009478:	20000800 	.word	0x20000800
			}else{
				time_delay=0;
 800947c:	f04f 0300 	mov.w	r3, #0
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8009482:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009486:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800948a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800948e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009496:	ee17 0a90 	vmov	r0, s15
 800949a:	f7f7 f87d 	bl	8000598 <__aeabi_f2d>
 800949e:	a3c0      	add	r3, pc, #768	; (adr r3, 80097a0 <cal_mollifier_table+0xe50>)
 80094a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a4:	f7f7 f9fa 	bl	800089c <__aeabi_ddiv>
 80094a8:	4602      	mov	r2, r0
 80094aa:	460b      	mov	r3, r1
 80094ac:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80094b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094b4:	eeb1 7a67 	vneg.f32	s14, s15
 80094b8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80094bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80094c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80094c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80094c8:	ee16 0a90 	vmov	r0, s13
 80094cc:	f7f7 f864 	bl	8000598 <__aeabi_f2d>
 80094d0:	4604      	mov	r4, r0
 80094d2:	460d      	mov	r5, r1
 80094d4:	4bb0      	ldr	r3, [pc, #704]	; (8009798 <cal_mollifier_table+0xe48>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4618      	mov	r0, r3
 80094da:	f7f7 f85d 	bl	8000598 <__aeabi_f2d>
 80094de:	4680      	mov	r8, r0
 80094e0:	4689      	mov	r9, r1
 80094e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80094e4:	f7f7 f858 	bl	8000598 <__aeabi_f2d>
 80094e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 80094ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ee:	f7f7 f8ab 	bl	8000648 <__aeabi_dmul>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4640      	mov	r0, r8
 80094f8:	4649      	mov	r1, r9
 80094fa:	f7f6 feed 	bl	80002d8 <__aeabi_dsub>
 80094fe:	4602      	mov	r2, r0
 8009500:	460b      	mov	r3, r1
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f7 f89f 	bl	8000648 <__aeabi_dmul>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	e9c7 2300 	strd	r2, r3, [r7]
 8009512:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009516:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800951a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800951e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009522:	ee16 0a90 	vmov	r0, s13
 8009526:	f7f7 f837 	bl	8000598 <__aeabi_f2d>
 800952a:	4680      	mov	r8, r0
 800952c:	4689      	mov	r9, r1
 800952e:	4b9a      	ldr	r3, [pc, #616]	; (8009798 <cal_mollifier_table+0xe48>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	4618      	mov	r0, r3
 8009534:	f7f7 f830 	bl	8000598 <__aeabi_f2d>
 8009538:	4604      	mov	r4, r0
 800953a:	460d      	mov	r5, r1
 800953c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800953e:	f7f7 f82b 	bl	8000598 <__aeabi_f2d>
 8009542:	a393      	add	r3, pc, #588	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f7 f87e 	bl	8000648 <__aeabi_dmul>
 800954c:	4602      	mov	r2, r0
 800954e:	460b      	mov	r3, r1
 8009550:	4620      	mov	r0, r4
 8009552:	4629      	mov	r1, r5
 8009554:	f7f6 fec0 	bl	80002d8 <__aeabi_dsub>
 8009558:	4602      	mov	r2, r0
 800955a:	460b      	mov	r3, r1
 800955c:	4692      	mov	sl, r2
 800955e:	469b      	mov	fp, r3
 8009560:	4b8d      	ldr	r3, [pc, #564]	; (8009798 <cal_mollifier_table+0xe48>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4618      	mov	r0, r3
 8009566:	f7f7 f817 	bl	8000598 <__aeabi_f2d>
 800956a:	4604      	mov	r4, r0
 800956c:	460d      	mov	r5, r1
 800956e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009570:	f7f7 f812 	bl	8000598 <__aeabi_f2d>
 8009574:	a386      	add	r3, pc, #536	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 8009576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800957a:	f7f7 f865 	bl	8000648 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4620      	mov	r0, r4
 8009584:	4629      	mov	r1, r5
 8009586:	f7f6 fea7 	bl	80002d8 <__aeabi_dsub>
 800958a:	4602      	mov	r2, r0
 800958c:	460b      	mov	r3, r1
 800958e:	4650      	mov	r0, sl
 8009590:	4659      	mov	r1, fp
 8009592:	f7f7 f859 	bl	8000648 <__aeabi_dmul>
 8009596:	4602      	mov	r2, r0
 8009598:	460b      	mov	r3, r1
 800959a:	4640      	mov	r0, r8
 800959c:	4649      	mov	r1, r9
 800959e:	f7f6 fe9b 	bl	80002d8 <__aeabi_dsub>
 80095a2:	4602      	mov	r2, r0
 80095a4:	460b      	mov	r3, r1
 80095a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80095aa:	f7f7 f977 	bl	800089c <__aeabi_ddiv>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9c7 2300 	strd	r2, r3, [r7]
 80095b6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80095ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80095be:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80095c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80095c6:	ee16 0a90 	vmov	r0, s13
 80095ca:	f7f6 ffe5 	bl	8000598 <__aeabi_f2d>
 80095ce:	4680      	mov	r8, r0
 80095d0:	4689      	mov	r9, r1
 80095d2:	4b71      	ldr	r3, [pc, #452]	; (8009798 <cal_mollifier_table+0xe48>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7f6 ffde 	bl	8000598 <__aeabi_f2d>
 80095dc:	4604      	mov	r4, r0
 80095de:	460d      	mov	r5, r1
 80095e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80095e2:	f7f6 ffd9 	bl	8000598 <__aeabi_f2d>
 80095e6:	a36a      	add	r3, pc, #424	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 80095e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ec:	f7f7 f82c 	bl	8000648 <__aeabi_dmul>
 80095f0:	4602      	mov	r2, r0
 80095f2:	460b      	mov	r3, r1
 80095f4:	4620      	mov	r0, r4
 80095f6:	4629      	mov	r1, r5
 80095f8:	f7f6 fe6e 	bl	80002d8 <__aeabi_dsub>
 80095fc:	4602      	mov	r2, r0
 80095fe:	460b      	mov	r3, r1
 8009600:	4692      	mov	sl, r2
 8009602:	469b      	mov	fp, r3
 8009604:	4b64      	ldr	r3, [pc, #400]	; (8009798 <cal_mollifier_table+0xe48>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4618      	mov	r0, r3
 800960a:	f7f6 ffc5 	bl	8000598 <__aeabi_f2d>
 800960e:	4604      	mov	r4, r0
 8009610:	460d      	mov	r5, r1
 8009612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009614:	f7f6 ffc0 	bl	8000598 <__aeabi_f2d>
 8009618:	a35d      	add	r3, pc, #372	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 800961a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961e:	f7f7 f813 	bl	8000648 <__aeabi_dmul>
 8009622:	4602      	mov	r2, r0
 8009624:	460b      	mov	r3, r1
 8009626:	4620      	mov	r0, r4
 8009628:	4629      	mov	r1, r5
 800962a:	f7f6 fe55 	bl	80002d8 <__aeabi_dsub>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	4650      	mov	r0, sl
 8009634:	4659      	mov	r1, fp
 8009636:	f7f7 f807 	bl	8000648 <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	4640      	mov	r0, r8
 8009640:	4649      	mov	r1, r9
 8009642:	f7f6 fe49 	bl	80002d8 <__aeabi_dsub>
 8009646:	4602      	mov	r2, r0
 8009648:	460b      	mov	r3, r1
 800964a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800964e:	f7f7 f925 	bl	800089c <__aeabi_ddiv>
 8009652:	4602      	mov	r2, r0
 8009654:	460b      	mov	r3, r1
 8009656:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800965a:	f7f6 fff5 	bl	8000648 <__aeabi_dmul>
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8009666:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800966a:	eeb1 7a67 	vneg.f32	s14, s15
 800966e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8009672:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009676:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800967a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800967e:	ee16 0a90 	vmov	r0, s13
 8009682:	f7f6 ff89 	bl	8000598 <__aeabi_f2d>
 8009686:	4680      	mov	r8, r0
 8009688:	4689      	mov	r9, r1
 800968a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800968e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009692:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009696:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800969a:	ee16 0a90 	vmov	r0, s13
 800969e:	f7f6 ff7b 	bl	8000598 <__aeabi_f2d>
 80096a2:	4682      	mov	sl, r0
 80096a4:	468b      	mov	fp, r1
 80096a6:	4b3c      	ldr	r3, [pc, #240]	; (8009798 <cal_mollifier_table+0xe48>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7f6 ff74 	bl	8000598 <__aeabi_f2d>
 80096b0:	4604      	mov	r4, r0
 80096b2:	460d      	mov	r5, r1
 80096b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096b6:	f7f6 ff6f 	bl	8000598 <__aeabi_f2d>
 80096ba:	a335      	add	r3, pc, #212	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 ffc2 	bl	8000648 <__aeabi_dmul>
 80096c4:	4602      	mov	r2, r0
 80096c6:	460b      	mov	r3, r1
 80096c8:	4620      	mov	r0, r4
 80096ca:	4629      	mov	r1, r5
 80096cc:	f7f6 fe04 	bl	80002d8 <__aeabi_dsub>
 80096d0:	4602      	mov	r2, r0
 80096d2:	460b      	mov	r3, r1
 80096d4:	e9c7 2300 	strd	r2, r3, [r7]
 80096d8:	4b2f      	ldr	r3, [pc, #188]	; (8009798 <cal_mollifier_table+0xe48>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f7f6 ff5b 	bl	8000598 <__aeabi_f2d>
 80096e2:	4604      	mov	r4, r0
 80096e4:	460d      	mov	r5, r1
 80096e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80096e8:	f7f6 ff56 	bl	8000598 <__aeabi_f2d>
 80096ec:	a328      	add	r3, pc, #160	; (adr r3, 8009790 <cal_mollifier_table+0xe40>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 ffa9 	bl	8000648 <__aeabi_dmul>
 80096f6:	4602      	mov	r2, r0
 80096f8:	460b      	mov	r3, r1
 80096fa:	4620      	mov	r0, r4
 80096fc:	4629      	mov	r1, r5
 80096fe:	f7f6 fdeb 	bl	80002d8 <__aeabi_dsub>
 8009702:	4602      	mov	r2, r0
 8009704:	460b      	mov	r3, r1
 8009706:	e9d7 0100 	ldrd	r0, r1, [r7]
 800970a:	f7f6 ff9d 	bl	8000648 <__aeabi_dmul>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4650      	mov	r0, sl
 8009714:	4659      	mov	r1, fp
 8009716:	f7f6 fddf 	bl	80002d8 <__aeabi_dsub>
 800971a:	4602      	mov	r2, r0
 800971c:	460b      	mov	r3, r1
 800971e:	4640      	mov	r0, r8
 8009720:	4649      	mov	r1, r9
 8009722:	f7f7 f8bb 	bl	800089c <__aeabi_ddiv>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	ec43 2b17 	vmov	d7, r2, r3
 800972e:	eeb0 0a47 	vmov.f32	s0, s14
 8009732:	eef0 0a67 	vmov.f32	s1, s15
 8009736:	f019 fbb3 	bl	8022ea0 <exp>
 800973a:	ec53 2b10 	vmov	r2, r3, d0
 800973e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009742:	f7f6 ff81 	bl	8000648 <__aeabi_dmul>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4610      	mov	r0, r2
 800974c:	4619      	mov	r1, r3
 800974e:	f7f7 fa53 	bl	8000bf8 <__aeabi_d2f>
 8009752:	4602      	mov	r2, r0
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8009758:	e014      	b.n	8009784 <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	ed93 7a00 	vldr	s14, [r3]
 800976e:	edd7 7a08 	vldr	s15, [r7, #32]
 8009772:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 800977c:	4b07      	ldr	r3, [pc, #28]	; (800979c <cal_mollifier_table+0xe4c>)
 800977e:	2204      	movs	r2, #4
 8009780:	701a      	strb	r2, [r3, #0]
		}

}
 8009782:	bf00      	nop
 8009784:	bf00      	nop
 8009786:	3730      	adds	r7, #48	; 0x30
 8009788:	46bd      	mov	sp, r7
 800978a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800978e:	bf00      	nop
 8009790:	d2f1a9fc 	.word	0xd2f1a9fc
 8009794:	3f50624d 	.word	0x3f50624d
 8009798:	20000800 	.word	0x20000800
 800979c:	20000804 	.word	0x20000804
 80097a0:	f9db22d1 	.word	0xf9db22d1
 80097a4:	3fdc6a7e 	.word	0x3fdc6a7e

080097a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80097ae:	4b12      	ldr	r3, [pc, #72]	; (80097f8 <MX_DMA_Init+0x50>)
 80097b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097b2:	4a11      	ldr	r2, [pc, #68]	; (80097f8 <MX_DMA_Init+0x50>)
 80097b4:	f043 0304 	orr.w	r3, r3, #4
 80097b8:	6493      	str	r3, [r2, #72]	; 0x48
 80097ba:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <MX_DMA_Init+0x50>)
 80097bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097be:	f003 0304 	and.w	r3, r3, #4
 80097c2:	607b      	str	r3, [r7, #4]
 80097c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80097c6:	4b0c      	ldr	r3, [pc, #48]	; (80097f8 <MX_DMA_Init+0x50>)
 80097c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097ca:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <MX_DMA_Init+0x50>)
 80097cc:	f043 0301 	orr.w	r3, r3, #1
 80097d0:	6493      	str	r3, [r2, #72]	; 0x48
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <MX_DMA_Init+0x50>)
 80097d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	603b      	str	r3, [r7, #0]
 80097dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80097de:	2200      	movs	r2, #0
 80097e0:	2100      	movs	r1, #0
 80097e2:	200b      	movs	r0, #11
 80097e4:	f011 fccf 	bl	801b186 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80097e8:	200b      	movs	r0, #11
 80097ea:	f011 fce6 	bl	801b1ba <HAL_NVIC_EnableIRQ>

}
 80097ee:	bf00      	nop
 80097f0:	3708      	adds	r7, #8
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	bf00      	nop
 80097f8:	40021000 	.word	0x40021000

080097fc <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 80097fc:	b480      	push	{r7}
 80097fe:	af00      	add	r7, sp, #0
	error_mode=0;
 8009800:	4b11      	ldr	r3, [pc, #68]	; (8009848 <init_FailSafe+0x4c>)
 8009802:	2200      	movs	r2, #0
 8009804:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8009806:	4b11      	ldr	r3, [pc, #68]	; (800984c <init_FailSafe+0x50>)
 8009808:	2200      	movs	r2, #0
 800980a:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 800980c:	4b10      	ldr	r3, [pc, #64]	; (8009850 <init_FailSafe+0x54>)
 800980e:	2200      	movs	r2, #0
 8009810:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8009812:	4b10      	ldr	r3, [pc, #64]	; (8009854 <init_FailSafe+0x58>)
 8009814:	2200      	movs	r2, #0
 8009816:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1500;
 8009818:	4b0f      	ldr	r3, [pc, #60]	; (8009858 <init_FailSafe+0x5c>)
 800981a:	4a10      	ldr	r2, [pc, #64]	; (800985c <init_FailSafe+0x60>)
 800981c:	601a      	str	r2, [r3, #0]
	gyro_PID_error=800;
 800981e:	4b10      	ldr	r3, [pc, #64]	; (8009860 <init_FailSafe+0x64>)
 8009820:	4a10      	ldr	r2, [pc, #64]	; (8009864 <init_FailSafe+0x68>)
 8009822:	601a      	str	r2, [r3, #0]
	gyro_x_error=1500;
 8009824:	4b10      	ldr	r3, [pc, #64]	; (8009868 <init_FailSafe+0x6c>)
 8009826:	4a0d      	ldr	r2, [pc, #52]	; (800985c <init_FailSafe+0x60>)
 8009828:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=3500;//3000
 800982a:	4b10      	ldr	r3, [pc, #64]	; (800986c <init_FailSafe+0x70>)
 800982c:	4a10      	ldr	r2, [pc, #64]	; (8009870 <init_FailSafe+0x74>)
 800982e:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=1900;
 8009830:	4b10      	ldr	r3, [pc, #64]	; (8009874 <init_FailSafe+0x78>)
 8009832:	4a11      	ldr	r2, [pc, #68]	; (8009878 <init_FailSafe+0x7c>)
 8009834:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1900;
 8009836:	4b11      	ldr	r3, [pc, #68]	; (800987c <init_FailSafe+0x80>)
 8009838:	4a0f      	ldr	r2, [pc, #60]	; (8009878 <init_FailSafe+0x7c>)
 800983a:	601a      	str	r2, [r3, #0]
}
 800983c:	bf00      	nop
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr
 8009846:	bf00      	nop
 8009848:	20000807 	.word	0x20000807
 800984c:	20000806 	.word	0x20000806
 8009850:	20000808 	.word	0x20000808
 8009854:	20000824 	.word	0x20000824
 8009858:	2000080c 	.word	0x2000080c
 800985c:	44bb8000 	.word	0x44bb8000
 8009860:	20000810 	.word	0x20000810
 8009864:	44480000 	.word	0x44480000
 8009868:	20000814 	.word	0x20000814
 800986c:	20000818 	.word	0x20000818
 8009870:	455ac000 	.word	0x455ac000
 8009874:	2000081c 	.word	0x2000081c
 8009878:	44ed8000 	.word	0x44ed8000
 800987c:	20000820 	.word	0x20000820

08009880 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8009886:	4b6e      	ldr	r3, [pc, #440]	; (8009a40 <interrupt_FailSafe+0x1c0>)
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d109      	bne.n	80098a2 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 800988e:	4b6d      	ldr	r3, [pc, #436]	; (8009a44 <interrupt_FailSafe+0x1c4>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8009894:	4b6c      	ldr	r3, [pc, #432]	; (8009a48 <interrupt_FailSafe+0x1c8>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 800989a:	4b6c      	ldr	r3, [pc, #432]	; (8009a4c <interrupt_FailSafe+0x1cc>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	607b      	str	r3, [r7, #4]
 80098a0:	e008      	b.n	80098b4 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 80098a2:	4b6b      	ldr	r3, [pc, #428]	; (8009a50 <interrupt_FailSafe+0x1d0>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 80098a8:	4b6a      	ldr	r3, [pc, #424]	; (8009a54 <interrupt_FailSafe+0x1d4>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 80098ae:	4b6a      	ldr	r3, [pc, #424]	; (8009a58 <interrupt_FailSafe+0x1d8>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 80098b4:	4b69      	ldr	r3, [pc, #420]	; (8009a5c <interrupt_FailSafe+0x1dc>)
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d062      	beq.n	8009982 <interrupt_FailSafe+0x102>
 80098bc:	4b67      	ldr	r3, [pc, #412]	; (8009a5c <interrupt_FailSafe+0x1dc>)
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d05e      	beq.n	8009982 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 80098c4:	4b66      	ldr	r3, [pc, #408]	; (8009a60 <interrupt_FailSafe+0x1e0>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d15a      	bne.n	8009982 <interrupt_FailSafe+0x102>
 80098cc:	4b65      	ldr	r3, [pc, #404]	; (8009a64 <interrupt_FailSafe+0x1e4>)
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d156      	bne.n	8009982 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 80098d4:	4b64      	ldr	r3, [pc, #400]	; (8009a68 <interrupt_FailSafe+0x1e8>)
 80098d6:	ed93 7a00 	vldr	s14, [r3]
 80098da:	4b64      	ldr	r3, [pc, #400]	; (8009a6c <interrupt_FailSafe+0x1ec>)
 80098dc:	edd3 7a00 	vldr	s15, [r3]
 80098e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80098e4:	eef0 7ae7 	vabs.f32	s15, s15
 80098e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80098ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80098f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098f4:	d809      	bhi.n	800990a <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 80098f6:	f7fe f87b 	bl	80079f0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 80098fa:	2001      	movs	r0, #1
 80098fc:	f7fd fa90 	bl	8006e20 <pl_yellow_LED_count>
						error_mode = 1;
 8009900:	4b58      	ldr	r3, [pc, #352]	; (8009a64 <interrupt_FailSafe+0x1e4>)
 8009902:	2201      	movs	r2, #1
 8009904:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8009906:	f7fa fe4d 	bl	80045a4 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 800990a:	4b59      	ldr	r3, [pc, #356]	; (8009a70 <interrupt_FailSafe+0x1f0>)
 800990c:	edd3 7a00 	vldr	s15, [r3]
 8009910:	ed97 7a01 	vldr	s14, [r7, #4]
 8009914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991c:	d809      	bhi.n	8009932 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800991e:	f7fe f867 	bl	80079f0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8009922:	2002      	movs	r0, #2
 8009924:	f7fd fa7c 	bl	8006e20 <pl_yellow_LED_count>
						error_mode = 1;
 8009928:	4b4e      	ldr	r3, [pc, #312]	; (8009a64 <interrupt_FailSafe+0x1e4>)
 800992a:	2201      	movs	r2, #1
 800992c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800992e:	f7fa fe39 	bl	80045a4 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8009932:	4b50      	ldr	r3, [pc, #320]	; (8009a74 <interrupt_FailSafe+0x1f4>)
 8009934:	ed93 7a00 	vldr	s14, [r3]
 8009938:	4b4f      	ldr	r3, [pc, #316]	; (8009a78 <interrupt_FailSafe+0x1f8>)
 800993a:	edd3 6a00 	vldr	s13, [r3]
 800993e:	4b4f      	ldr	r3, [pc, #316]	; (8009a7c <interrupt_FailSafe+0x1fc>)
 8009940:	edd3 7a00 	vldr	s15, [r3]
 8009944:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8009948:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800994c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009954:	eef0 7ae7 	vabs.f32	s15, s15
 8009958:	ed97 7a03 	vldr	s14, [r7, #12]
 800995c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009964:	d80d      	bhi.n	8009982 <interrupt_FailSafe+0x102>
 8009966:	4b3d      	ldr	r3, [pc, #244]	; (8009a5c <interrupt_FailSafe+0x1dc>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	2b01      	cmp	r3, #1
 800996c:	d109      	bne.n	8009982 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 800996e:	f7fe f83f 	bl	80079f0 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8009972:	2004      	movs	r0, #4
 8009974:	f7fd fa54 	bl	8006e20 <pl_yellow_LED_count>
						error_mode = 1;
 8009978:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <interrupt_FailSafe+0x1e4>)
 800997a:	2201      	movs	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 800997e:	f7fa fe11 	bl	80045a4 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8009982:	4b38      	ldr	r3, [pc, #224]	; (8009a64 <interrupt_FailSafe+0x1e4>)
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b01      	cmp	r3, #1
 8009988:	d153      	bne.n	8009a32 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 800998a:	4b3d      	ldr	r3, [pc, #244]	; (8009a80 <interrupt_FailSafe+0x200>)
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8009990:	4b3c      	ldr	r3, [pc, #240]	; (8009a84 <interrupt_FailSafe+0x204>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	3301      	adds	r3, #1
 8009996:	4a3b      	ldr	r2, [pc, #236]	; (8009a84 <interrupt_FailSafe+0x204>)
 8009998:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 800999a:	4b3a      	ldr	r3, [pc, #232]	; (8009a84 <interrupt_FailSafe+0x204>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099a2:	dc05      	bgt.n	80099b0 <interrupt_FailSafe+0x130>
			init_WallControl();
 80099a4:	f7fa ff58 	bl	8004858 <init_WallControl>
			modeacc=100;//エラー用
 80099a8:	4b2c      	ldr	r3, [pc, #176]	; (8009a5c <interrupt_FailSafe+0x1dc>)
 80099aa:	2264      	movs	r2, #100	; 0x64
 80099ac:	701a      	strb	r2, [r3, #0]
 80099ae:	e009      	b.n	80099c4 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 80099b0:	2000      	movs	r0, #0
 80099b2:	f7fd ff89 	bl	80078c8 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 80099b6:	f7fd ffed 	bl	8007994 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 80099ba:	f7fe f819 	bl	80079f0 <pl_FunMotor_stop>
			modeacc=0;
 80099be:	4b27      	ldr	r3, [pc, #156]	; (8009a5c <interrupt_FailSafe+0x1dc>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 80099c4:	4b30      	ldr	r3, [pc, #192]	; (8009a88 <interrupt_FailSafe+0x208>)
 80099c6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ca:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 80099cc:	4b2f      	ldr	r3, [pc, #188]	; (8009a8c <interrupt_FailSafe+0x20c>)
 80099ce:	f04f 32ff 	mov.w	r2, #4294967295
 80099d2:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 80099d4:	4b2e      	ldr	r3, [pc, #184]	; (8009a90 <interrupt_FailSafe+0x210>)
 80099d6:	f04f 32ff 	mov.w	r2, #4294967295
 80099da:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 80099dc:	4b2d      	ldr	r3, [pc, #180]	; (8009a94 <interrupt_FailSafe+0x214>)
 80099de:	f04f 32ff 	mov.w	r2, #4294967295
 80099e2:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 80099e4:	4b2c      	ldr	r3, [pc, #176]	; (8009a98 <interrupt_FailSafe+0x218>)
 80099e6:	f04f 32ff 	mov.w	r2, #4294967295
 80099ea:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 80099ec:	4b2b      	ldr	r3, [pc, #172]	; (8009a9c <interrupt_FailSafe+0x21c>)
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 50;
 80099f4:	4b2a      	ldr	r3, [pc, #168]	; (8009aa0 <interrupt_FailSafe+0x220>)
 80099f6:	4a2b      	ldr	r2, [pc, #172]	; (8009aa4 <interrupt_FailSafe+0x224>)
 80099f8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 50;
 80099fa:	4b2b      	ldr	r3, [pc, #172]	; (8009aa8 <interrupt_FailSafe+0x228>)
 80099fc:	4a29      	ldr	r2, [pc, #164]	; (8009aa4 <interrupt_FailSafe+0x224>)
 80099fe:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 20;
 8009a00:	4b2a      	ldr	r3, [pc, #168]	; (8009aac <interrupt_FailSafe+0x22c>)
 8009a02:	4a2b      	ldr	r2, [pc, #172]	; (8009ab0 <interrupt_FailSafe+0x230>)
 8009a04:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 20;
 8009a06:	4b2b      	ldr	r3, [pc, #172]	; (8009ab4 <interrupt_FailSafe+0x234>)
 8009a08:	4a29      	ldr	r2, [pc, #164]	; (8009ab0 <interrupt_FailSafe+0x230>)
 8009a0a:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 35;
 8009a0c:	4b2a      	ldr	r3, [pc, #168]	; (8009ab8 <interrupt_FailSafe+0x238>)
 8009a0e:	4a2b      	ldr	r2, [pc, #172]	; (8009abc <interrupt_FailSafe+0x23c>)
 8009a10:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 35;
 8009a12:	4b2b      	ldr	r3, [pc, #172]	; (8009ac0 <interrupt_FailSafe+0x240>)
 8009a14:	4a29      	ldr	r2, [pc, #164]	; (8009abc <interrupt_FailSafe+0x23c>)
 8009a16:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 35;
 8009a18:	4b2a      	ldr	r3, [pc, #168]	; (8009ac4 <interrupt_FailSafe+0x244>)
 8009a1a:	4a28      	ldr	r2, [pc, #160]	; (8009abc <interrupt_FailSafe+0x23c>)
 8009a1c:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 35;
 8009a1e:	4b2a      	ldr	r3, [pc, #168]	; (8009ac8 <interrupt_FailSafe+0x248>)
 8009a20:	4a26      	ldr	r2, [pc, #152]	; (8009abc <interrupt_FailSafe+0x23c>)
 8009a22:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8009a24:	4b29      	ldr	r3, [pc, #164]	; (8009acc <interrupt_FailSafe+0x24c>)
 8009a26:	2204      	movs	r2, #4
 8009a28:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8009a2a:	4b29      	ldr	r3, [pc, #164]	; (8009ad0 <interrupt_FailSafe+0x250>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8009a30:	e002      	b.n	8009a38 <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8009a32:	4b14      	ldr	r3, [pc, #80]	; (8009a84 <interrupt_FailSafe+0x204>)
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
}
 8009a38:	bf00      	nop
 8009a3a:	3710      	adds	r7, #16
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	bd80      	pop	{r7, pc}
 8009a40:	20000808 	.word	0x20000808
 8009a44:	2000080c 	.word	0x2000080c
 8009a48:	20000810 	.word	0x20000810
 8009a4c:	20000814 	.word	0x20000814
 8009a50:	20000818 	.word	0x20000818
 8009a54:	2000081c 	.word	0x2000081c
 8009a58:	20000820 	.word	0x20000820
 8009a5c:	20000528 	.word	0x20000528
 8009a60:	20000806 	.word	0x20000806
 8009a64:	20000807 	.word	0x20000807
 8009a68:	200004e4 	.word	0x200004e4
 8009a6c:	20000268 	.word	0x20000268
 8009a70:	20000274 	.word	0x20000274
 8009a74:	200004d8 	.word	0x200004d8
 8009a78:	2000025c 	.word	0x2000025c
 8009a7c:	20000258 	.word	0x20000258
 8009a80:	2000edc0 	.word	0x2000edc0
 8009a84:	20000824 	.word	0x20000824
 8009a88:	200005b8 	.word	0x200005b8
 8009a8c:	200005b4 	.word	0x200005b4
 8009a90:	200005c0 	.word	0x200005c0
 8009a94:	200005bc 	.word	0x200005bc
 8009a98:	200005c8 	.word	0x200005c8
 8009a9c:	200005c4 	.word	0x200005c4
 8009aa0:	200005d0 	.word	0x200005d0
 8009aa4:	42480000 	.word	0x42480000
 8009aa8:	200005cc 	.word	0x200005cc
 8009aac:	200005d8 	.word	0x200005d8
 8009ab0:	41a00000 	.word	0x41a00000
 8009ab4:	200005d4 	.word	0x200005d4
 8009ab8:	200005e0 	.word	0x200005e0
 8009abc:	420c0000 	.word	0x420c0000
 8009ac0:	200005dc 	.word	0x200005dc
 8009ac4:	200005e8 	.word	0x200005e8
 8009ac8:	200005e4 	.word	0x200005e4
 8009acc:	20000804 	.word	0x20000804
 8009ad0:	20000592 	.word	0x20000592

08009ad4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b08a      	sub	sp, #40	; 0x28
 8009ad8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009ada:	f107 0314 	add.w	r3, r7, #20
 8009ade:	2200      	movs	r2, #0
 8009ae0:	601a      	str	r2, [r3, #0]
 8009ae2:	605a      	str	r2, [r3, #4]
 8009ae4:	609a      	str	r2, [r3, #8]
 8009ae6:	60da      	str	r2, [r3, #12]
 8009ae8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009aea:	4b3a      	ldr	r3, [pc, #232]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009aee:	4a39      	ldr	r2, [pc, #228]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009af0:	f043 0304 	orr.w	r3, r3, #4
 8009af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009af6:	4b37      	ldr	r3, [pc, #220]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009afa:	f003 0304 	and.w	r3, r3, #4
 8009afe:	613b      	str	r3, [r7, #16]
 8009b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009b02:	4b34      	ldr	r3, [pc, #208]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b06:	4a33      	ldr	r2, [pc, #204]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b08:	f043 0320 	orr.w	r3, r3, #32
 8009b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b0e:	4b31      	ldr	r3, [pc, #196]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	60fb      	str	r3, [r7, #12]
 8009b18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b1a:	4b2e      	ldr	r3, [pc, #184]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b1e:	4a2d      	ldr	r2, [pc, #180]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b20:	f043 0301 	orr.w	r3, r3, #1
 8009b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b26:	4b2b      	ldr	r3, [pc, #172]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b2a:	f003 0301 	and.w	r3, r3, #1
 8009b2e:	60bb      	str	r3, [r7, #8]
 8009b30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b32:	4b28      	ldr	r3, [pc, #160]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b36:	4a27      	ldr	r2, [pc, #156]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b38:	f043 0302 	orr.w	r3, r3, #2
 8009b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009b3e:	4b25      	ldr	r3, [pc, #148]	; (8009bd4 <MX_GPIO_Init+0x100>)
 8009b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b42:	f003 0302 	and.w	r3, r3, #2
 8009b46:	607b      	str	r3, [r7, #4]
 8009b48:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009b50:	4821      	ldr	r0, [pc, #132]	; (8009bd8 <MX_GPIO_Init+0x104>)
 8009b52:	f012 fa03 	bl	801bf5c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 8009b56:	2200      	movs	r2, #0
 8009b58:	f648 1110 	movw	r1, #35088	; 0x8910
 8009b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009b60:	f012 f9fc 	bl	801bf5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009b64:	2200      	movs	r2, #0
 8009b66:	f64e 4196 	movw	r1, #60566	; 0xec96
 8009b6a:	481c      	ldr	r0, [pc, #112]	; (8009bdc <MX_GPIO_Init+0x108>)
 8009b6c:	f012 f9f6 	bl	801bf5c <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009b70:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009b74:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b76:	2301      	movs	r3, #1
 8009b78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b82:	f107 0314 	add.w	r3, r7, #20
 8009b86:	4619      	mov	r1, r3
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <MX_GPIO_Init+0x104>)
 8009b8a:	f012 f865 	bl	801bc58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009b8e:	f648 1310 	movw	r3, #35088	; 0x8910
 8009b92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009b94:	2301      	movs	r3, #1
 8009b96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ba0:	f107 0314 	add.w	r3, r7, #20
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009baa:	f012 f855 	bl	801bc58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009bae:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009bb2:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bb8:	2300      	movs	r3, #0
 8009bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009bc0:	f107 0314 	add.w	r3, r7, #20
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	4805      	ldr	r0, [pc, #20]	; (8009bdc <MX_GPIO_Init+0x108>)
 8009bc8:	f012 f846 	bl	801bc58 <HAL_GPIO_Init>

}
 8009bcc:	bf00      	nop
 8009bce:	3728      	adds	r7, #40	; 0x28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	40021000 	.word	0x40021000
 8009bd8:	48000800 	.word	0x48000800
 8009bdc:	48000400 	.word	0x48000400

08009be0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009be0:	b590      	push	{r4, r7, lr}
 8009be2:	b087      	sub	sp, #28
 8009be4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009be6:	f00e ff85 	bl	8018af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009bea:	f000 f8a7 	bl	8009d3c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 8009bee:	f7ff fddb 	bl	80097a8 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009bf2:	f7ff ff6f 	bl	8009ad4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8009bf6:	f7fe f9d5 	bl	8007fa4 <MX_ADC1_Init>
  MX_SPI1_Init();
 8009bfa:	f00d fa9f 	bl	801713c <MX_SPI1_Init>
  MX_TIM6_Init();
 8009bfe:	f00d fd0b 	bl	8017618 <MX_TIM6_Init>
  MX_TIM8_Init();
 8009c02:	f00d fd3f 	bl	8017684 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8009c06:	f00e fea7 	bl	8018958 <MX_USART1_UART_Init>
  //MX_DMA_Init();
  MX_SPI3_Init();
 8009c0a:	f00d fad5 	bl	80171b8 <MX_SPI3_Init>
  MX_TIM16_Init();
 8009c0e:	f00d fdd9 	bl	80177c4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 8009c12:	f7fe f8d9 	bl	8007dc8 <pl_timer_init>
  pl_gyro_init();
 8009c16:	f7fd fd6b 	bl	80076f0 <pl_gyro_init>
  pl_sensor_init();
 8009c1a:	f7fd ff19 	bl	8007a50 <pl_sensor_init>
  reset_distance();
 8009c1e:	f7f7 f9bd 	bl	8000f9c <reset_distance>
  reset_gyro();
 8009c22:	f7f7 fda1 	bl	8001768 <reset_gyro>
  reset_speed();
 8009c26:	f7f7 f9f7 	bl	8001018 <reset_speed>
  record_reset();
 8009c2a:	f00d f815 	bl	8016c58 <record_reset>
  pl_motor_init();
 8009c2e:	f7fd fe25 	bl	800787c <pl_motor_init>
  PID_Init();
 8009c32:	f7fa fc7b 	bl	800452c <PID_Init>
  init_WallControl();
 8009c36:	f7fa fe0f 	bl	8004858 <init_WallControl>
  Control_mode_Init();
 8009c3a:	f7f8 f8df 	bl	8001dfc <Control_mode_Init>
  init_FailSafe();
 8009c3e:	f7ff fddd 	bl	80097fc <init_FailSafe>
  input_parameter();
 8009c42:	f00d ff9f 	bl	8017b84 <input_parameter>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c4a:	4b37      	ldr	r3, [pc, #220]	; (8009d28 <main+0x148>)
 8009c4c:	881b      	ldrh	r3, [r3, #0]
 8009c4e:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c50:	4b35      	ldr	r3, [pc, #212]	; (8009d28 <main+0x148>)
 8009c52:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c54:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c56:	4b34      	ldr	r3, [pc, #208]	; (8009d28 <main+0x148>)
 8009c58:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c5a:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c5c:	4b32      	ldr	r3, [pc, #200]	; (8009d28 <main+0x148>)
 8009c5e:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c60:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009c62:	4b31      	ldr	r3, [pc, #196]	; (8009d28 <main+0x148>)
 8009c64:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009c66:	9301      	str	r3, [sp, #4]
 8009c68:	9200      	str	r2, [sp, #0]
 8009c6a:	4623      	mov	r3, r4
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	482f      	ldr	r0, [pc, #188]	; (8009d2c <main+0x14c>)
 8009c70:	f016 ff0a 	bl	8020a88 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c74:	4b2e      	ldr	r3, [pc, #184]	; (8009d30 <main+0x150>)
 8009c76:	881b      	ldrh	r3, [r3, #0]
 8009c78:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <main+0x150>)
 8009c7c:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c7e:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c80:	4b2b      	ldr	r3, [pc, #172]	; (8009d30 <main+0x150>)
 8009c82:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c84:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c86:	4b2a      	ldr	r3, [pc, #168]	; (8009d30 <main+0x150>)
 8009c88:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c8a:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009c8c:	4b28      	ldr	r3, [pc, #160]	; (8009d30 <main+0x150>)
 8009c8e:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009c90:	9301      	str	r3, [sp, #4]
 8009c92:	9200      	str	r2, [sp, #0]
 8009c94:	4623      	mov	r3, r4
 8009c96:	4602      	mov	r2, r0
 8009c98:	4826      	ldr	r0, [pc, #152]	; (8009d34 <main+0x154>)
 8009c9a:	f016 fef5 	bl	8020a88 <iprintf>
	battcheak();
 8009c9e:	f7f7 ff6f 	bl	8001b80 <battcheak>

//起動cheak
	int yellow_count=1;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	607b      	str	r3, [r7, #4]
 8009caa:	e00d      	b.n	8009cc8 <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7fd f8b5 	bl	8006e20 <pl_yellow_LED_count>
		HAL_Delay(50);
 8009cb6:	2032      	movs	r0, #50	; 0x32
 8009cb8:	f00e ff94 	bl	8018be4 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	005b      	lsls	r3, r3, #1
 8009cc0:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	3301      	adds	r3, #1
 8009cc6:	607b      	str	r3, [r7, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2b07      	cmp	r3, #7
 8009ccc:	ddee      	ble.n	8009cac <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009cce:	2300      	movs	r3, #0
 8009cd0:	603b      	str	r3, [r7, #0]
 8009cd2:	e00f      	b.n	8009cf4 <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fd f8a1 	bl	8006e20 <pl_yellow_LED_count>
			HAL_Delay(50);
 8009cde:	2032      	movs	r0, #50	; 0x32
 8009ce0:	f00e ff80 	bl	8018be4 <HAL_Delay>
			yellow_count=yellow_count/2;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	0fda      	lsrs	r2, r3, #31
 8009ce8:	4413      	add	r3, r2
 8009cea:	105b      	asrs	r3, r3, #1
 8009cec:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	603b      	str	r3, [r7, #0]
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	2b08      	cmp	r3, #8
 8009cf8:	ddec      	ble.n	8009cd4 <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f00b fa92 	bl	8015228 <mode_decision>
 8009d04:	4603      	mov	r3, r0
 8009d06:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 8009d08:	f7f7 f948 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 8009d0c:	f7f7 fd2c 	bl	8001768 <reset_gyro>
	  		reset_speed();
 8009d10:	f7f7 f982 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f00b fb7f 	bl	801541c <mode_execution>

	  		error_mode = 0;
 8009d1e:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <main+0x158>)
 8009d20:	2200      	movs	r2, #0
 8009d22:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 8009d24:	e7e9      	b.n	8009cfa <main+0x11a>
 8009d26:	bf00      	nop
 8009d28:	2000070c 	.word	0x2000070c
 8009d2c:	08023348 	.word	0x08023348
 8009d30:	20000718 	.word	0x20000718
 8009d34:	08023374 	.word	0x08023374
 8009d38:	20000807 	.word	0x20000807

08009d3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b094      	sub	sp, #80	; 0x50
 8009d40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d42:	f107 0318 	add.w	r3, r7, #24
 8009d46:	2238      	movs	r2, #56	; 0x38
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f016 fa2a 	bl	80201a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d50:	1d3b      	adds	r3, r7, #4
 8009d52:	2200      	movs	r2, #0
 8009d54:	601a      	str	r2, [r3, #0]
 8009d56:	605a      	str	r2, [r3, #4]
 8009d58:	609a      	str	r2, [r3, #8]
 8009d5a:	60da      	str	r2, [r3, #12]
 8009d5c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f012 f914 	bl	801bf8c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009d6c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d6e:	2302      	movs	r3, #2
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009d72:	2303      	movs	r3, #3
 8009d74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8009d76:	2304      	movs	r3, #4
 8009d78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8009d7a:	2355      	movs	r3, #85	; 0x55
 8009d7c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009d7e:	2302      	movs	r3, #2
 8009d80:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009d82:	2302      	movs	r3, #2
 8009d84:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009d86:	2302      	movs	r3, #2
 8009d88:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009d8a:	f107 0318 	add.w	r3, r7, #24
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f012 f9b0 	bl	801c0f4 <HAL_RCC_OscConfig>
 8009d94:	4603      	mov	r3, r0
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d001      	beq.n	8009d9e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8009d9a:	f000 f81a 	bl	8009dd2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009d9e:	230f      	movs	r3, #15
 8009da0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009da2:	2303      	movs	r3, #3
 8009da4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009da6:	2300      	movs	r3, #0
 8009da8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8009daa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009dae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8009db6:	1d3b      	adds	r3, r7, #4
 8009db8:	2104      	movs	r1, #4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f012 fcb2 	bl	801c724 <HAL_RCC_ClockConfig>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8009dc6:	f000 f804 	bl	8009dd2 <Error_Handler>
  }
}
 8009dca:	bf00      	nop
 8009dcc:	3750      	adds	r7, #80	; 0x50
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009dd2:	b480      	push	{r7}
 8009dd4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8009dd6:	b672      	cpsid	i
}
 8009dd8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8009dda:	e7fe      	b.n	8009dda <Error_Handler+0x8>

08009ddc <backTurn_controlWall>:
		pl_L_DriveMotor_mode(MOTOR_BREAK);
	}

}

void backTurn_controlWall(float input_TurningVelocity,float input_TurningAcceleration,_Bool front_wall,_Bool left_wall,_Bool right_wall){
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	ed87 0a03 	vstr	s0, [r7, #12]
 8009de6:	edc7 0a02 	vstr	s1, [r7, #8]
 8009dea:	4603      	mov	r3, r0
 8009dec:	71fb      	strb	r3, [r7, #7]
 8009dee:	460b      	mov	r3, r1
 8009df0:	71bb      	strb	r3, [r7, #6]
 8009df2:	4613      	mov	r3, r2
 8009df4:	717b      	strb	r3, [r7, #5]
	if(front_wall){
 8009df6:	79fb      	ldrb	r3, [r7, #7]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d00a      	beq.n	8009e12 <backTurn_controlWall+0x36>
		no_frontwall_straight();
 8009dfc:	f7fa f8f8 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e00:	2003      	movs	r0, #3
 8009e02:	f7fd fd93 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e06:	2003      	movs	r0, #3
 8009e08:	f7fd fd68 	bl	80078dc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e0c:	2032      	movs	r0, #50	; 0x32
 8009e0e:	f7fe f88b 	bl	8007f28 <wait_ms_NoReset>
	}
	if(left_wall){
 8009e12:	79bb      	ldrb	r3, [r7, #6]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d02c      	beq.n	8009e72 <backTurn_controlWall+0x96>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e18:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e1c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e20:	ed9f 1a50 	vldr	s2, [pc, #320]	; 8009f64 <backTurn_controlWall+0x188>
 8009e24:	eddf 0a4f 	vldr	s1, [pc, #316]	; 8009f64 <backTurn_controlWall+0x188>
 8009e28:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009f68 <backTurn_controlWall+0x18c>
 8009e2c:	f7f9 fde4 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e30:	2003      	movs	r0, #3
 8009e32:	f7fd fd7b 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e36:	2003      	movs	r0, #3
 8009e38:	f7fd fd50 	bl	80078dc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009e3c:	2032      	movs	r0, #50	; 0x32
 8009e3e:	f7fe f873 	bl	8007f28 <wait_ms_NoReset>
		no_frontwall_straight();
 8009e42:	f7fa f8d5 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009e46:	2003      	movs	r0, #3
 8009e48:	f7fd fd70 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009e4c:	2003      	movs	r0, #3
 8009e4e:	f7fd fd45 	bl	80078dc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009e52:	2032      	movs	r0, #50	; 0x32
 8009e54:	f7fe f868 	bl	8007f28 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009e58:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e5c:	edd7 1a03 	vldr	s3, [r7, #12]
 8009e60:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8009f64 <backTurn_controlWall+0x188>
 8009e64:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009f64 <backTurn_controlWall+0x188>
 8009e68:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8009f68 <backTurn_controlWall+0x18c>
 8009e6c:	f7f9 fdc4 	bl	80039f8 <turning_table2>
 8009e70:	e06a      	b.n	8009f48 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall){
 8009e72:	79bb      	ldrb	r3, [r7, #6]
 8009e74:	f083 0301 	eor.w	r3, r3, #1
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d037      	beq.n	8009eee <backTurn_controlWall+0x112>
 8009e7e:	797b      	ldrb	r3, [r7, #5]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d034      	beq.n	8009eee <backTurn_controlWall+0x112>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009e84:	edd7 7a03 	vldr	s15, [r7, #12]
 8009e88:	eef1 7a67 	vneg.f32	s15, s15
 8009e8c:	ed97 2a02 	vldr	s4, [r7, #8]
 8009e90:	eef0 1a67 	vmov.f32	s3, s15
 8009e94:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8009f64 <backTurn_controlWall+0x188>
 8009e98:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009f64 <backTurn_controlWall+0x188>
 8009e9c:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8009f6c <backTurn_controlWall+0x190>
 8009ea0:	f7f9 fdaa 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009ea4:	2003      	movs	r0, #3
 8009ea6:	f7fd fd41 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009eaa:	2003      	movs	r0, #3
 8009eac:	f7fd fd16 	bl	80078dc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009eb0:	2032      	movs	r0, #50	; 0x32
 8009eb2:	f7fe f839 	bl	8007f28 <wait_ms_NoReset>
		no_frontwall_straight();
 8009eb6:	f7fa f89b 	bl	8003ff0 <no_frontwall_straight>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009eba:	2003      	movs	r0, #3
 8009ebc:	f7fd fd36 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009ec0:	2003      	movs	r0, #3
 8009ec2:	f7fd fd0b 	bl	80078dc <pl_L_DriveMotor_mode>
		//clear_Ierror();
		wait_ms_NoReset(50);
 8009ec6:	2032      	movs	r0, #50	; 0x32
 8009ec8:	f7fe f82e 	bl	8007f28 <wait_ms_NoReset>
		turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 8009ecc:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ed0:	eef1 7a67 	vneg.f32	s15, s15
 8009ed4:	ed97 2a02 	vldr	s4, [r7, #8]
 8009ed8:	eef0 1a67 	vmov.f32	s3, s15
 8009edc:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8009f64 <backTurn_controlWall+0x188>
 8009ee0:	eddf 0a20 	vldr	s1, [pc, #128]	; 8009f64 <backTurn_controlWall+0x188>
 8009ee4:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8009f6c <backTurn_controlWall+0x190>
 8009ee8:	f7f9 fd86 	bl	80039f8 <turning_table2>
 8009eec:	e02c      	b.n	8009f48 <backTurn_controlWall+0x16c>
	}else if(left_wall==0 && right_wall==0){
 8009eee:	79bb      	ldrb	r3, [r7, #6]
 8009ef0:	f083 0301 	eor.w	r3, r3, #1
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d026      	beq.n	8009f48 <backTurn_controlWall+0x16c>
 8009efa:	797b      	ldrb	r3, [r7, #5]
 8009efc:	f083 0301 	eor.w	r3, r3, #1
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d020      	beq.n	8009f48 <backTurn_controlWall+0x16c>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f06:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f0a:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f0e:	ed9f 1a15 	vldr	s2, [pc, #84]	; 8009f64 <backTurn_controlWall+0x188>
 8009f12:	eddf 0a14 	vldr	s1, [pc, #80]	; 8009f64 <backTurn_controlWall+0x188>
 8009f16:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8009f68 <backTurn_controlWall+0x18c>
 8009f1a:	f7f9 fd6d 	bl	80039f8 <turning_table2>
		pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f1e:	2003      	movs	r0, #3
 8009f20:	f7fd fd04 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f24:	2003      	movs	r0, #3
 8009f26:	f7fd fcd9 	bl	80078dc <pl_L_DriveMotor_mode>
		wait_ms_NoReset(50);
 8009f2a:	2032      	movs	r0, #50	; 0x32
 8009f2c:	f7fd fffc 	bl	8007f28 <wait_ms_NoReset>
		turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 8009f30:	ed97 2a02 	vldr	s4, [r7, #8]
 8009f34:	edd7 1a03 	vldr	s3, [r7, #12]
 8009f38:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8009f64 <backTurn_controlWall+0x188>
 8009f3c:	eddf 0a09 	vldr	s1, [pc, #36]	; 8009f64 <backTurn_controlWall+0x188>
 8009f40:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8009f68 <backTurn_controlWall+0x18c>
 8009f44:	f7f9 fd58 	bl	80039f8 <turning_table2>
	}
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009f48:	2003      	movs	r0, #3
 8009f4a:	f7fd fcef 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009f4e:	2003      	movs	r0, #3
 8009f50:	f7fd fcc4 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(50);
 8009f54:	2032      	movs	r0, #50	; 0x32
 8009f56:	f7fd ffe7 	bl	8007f28 <wait_ms_NoReset>

}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
 8009f62:	bf00      	nop
 8009f64:	00000000 	.word	0x00000000
 8009f68:	42b40000 	.word	0x42b40000
 8009f6c:	c2b40000 	.word	0xc2b40000

08009f70 <slalomR>:


void slalomR(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 8009f70:	b084      	sub	sp, #16
 8009f72:	b5b0      	push	{r4, r5, r7, lr}
 8009f74:	ed2d 8b02 	vpush	{d8}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8009f80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009f84:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 8009f88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8009f8c:	2b01      	cmp	r3, #1
 8009f8e:	f040 80f5 	bne.w	800a17c <slalomR+0x20c>
		highspeed_mode = 0;
 8009f92:	4be3      	ldr	r3, [pc, #908]	; (800a320 <slalomR+0x3b0>)
 8009f94:	2200      	movs	r2, #0
 8009f96:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 8009fa8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d11f      	bne.n	8009ff0 <slalomR+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fb0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009fb4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009fb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009fbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8009fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009fc4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009fc8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009fcc:	eddf 5ad5 	vldr	s11, [pc, #852]	; 800a324 <slalomR+0x3b4>
 8009fd0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	eeb0 2a47 	vmov.f32	s4, s14
 8009fda:	eef0 1a46 	vmov.f32	s3, s12
 8009fde:	eeb0 1a66 	vmov.f32	s2, s13
 8009fe2:	eddf 0ad1 	vldr	s1, [pc, #836]	; 800a328 <slalomR+0x3b8>
 8009fe6:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 800a32c <slalomR+0x3bc>
 8009fea:	f7f8 fff7 	bl	8002fdc <straight_table2>
 8009fee:	e01e      	b.n	800a02e <slalomR+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 8009ff0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8009ff4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 8009ff8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8009ffc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a000:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a004:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a008:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a00c:	eddf 5ac5 	vldr	s11, [pc, #788]	; 800a324 <slalomR+0x3b4>
 800a010:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	eeb0 2a47 	vmov.f32	s4, s14
 800a01a:	eef0 1a46 	vmov.f32	s3, s12
 800a01e:	eeb0 1a66 	vmov.f32	s2, s13
 800a022:	eddf 0ac1 	vldr	s1, [pc, #772]	; 800a328 <slalomR+0x3b8>
 800a026:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800a330 <slalomR+0x3c0>
 800a02a:	f7f8 ffd7 	bl	8002fdc <straight_table2>
		}
		wallmode.WallCutMode=1;
 800a02e:	2301      	movs	r3, #1
 800a030:	73fb      	strb	r3, [r7, #15]
		wallmode.WallControlMode=0;
 800a032:	2300      	movs	r3, #0
 800a034:	733b      	strb	r3, [r7, #12]
		if(shortest_mode==0){
 800a036:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d127      	bne.n	800a08e <slalomR+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a03e:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a042:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a046:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a04a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a04e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a052:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a056:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a05a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a05e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a062:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a066:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a06a:	eddf 4aae 	vldr	s9, [pc, #696]	; 800a324 <slalomR+0x3b4>
 800a06e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a072:	68f8      	ldr	r0, [r7, #12]
 800a074:	eeb0 2a47 	vmov.f32	s4, s14
 800a078:	eef0 1a45 	vmov.f32	s3, s10
 800a07c:	eeb0 1a65 	vmov.f32	s2, s11
 800a080:	eef0 0a46 	vmov.f32	s1, s12
 800a084:	eeb0 0a66 	vmov.f32	s0, s13
 800a088:	f7f8 ffa8 	bl	8002fdc <straight_table2>
 800a08c:	e022      	b.n	800a0d4 <slalomR+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a08e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a092:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a096:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a09a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a09e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0a2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a0aa:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a0ae:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a0b2:	eddf 4a9c 	vldr	s9, [pc, #624]	; 800a324 <slalomR+0x3b4>
 800a0b6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	eeb0 2a47 	vmov.f32	s4, s14
 800a0c0:	eef0 1a45 	vmov.f32	s3, s10
 800a0c4:	eeb0 1a65 	vmov.f32	s2, s11
 800a0c8:	eef0 0a46 	vmov.f32	s1, s12
 800a0cc:	eeb0 0a66 	vmov.f32	s0, s13
 800a0d0:	f7f8 ff84 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a0d4:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d10c      	bne.n	800a0f6 <slalomR+0x186>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a0dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a0e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a0e4:	eeb0 1a47 	vmov.f32	s2, s14
 800a0e8:	eddf 0a92 	vldr	s1, [pc, #584]	; 800a334 <slalomR+0x3c4>
 800a0ec:	eeb0 0a67 	vmov.f32	s0, s15
 800a0f0:	f7f9 feea 	bl	8003ec8 <mollifier_slalom_table>
 800a0f4:	e015      	b.n	800a122 <slalomR+0x1b2>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a0f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a0fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a0fe:	eef1 7a67 	vneg.f32	s15, s15
 800a102:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a106:	eef0 2a66 	vmov.f32	s5, s13
 800a10a:	eeb0 2a67 	vmov.f32	s4, s15
 800a10e:	eddf 1a86 	vldr	s3, [pc, #536]	; 800a328 <slalomR+0x3b8>
 800a112:	ed9f 1a85 	vldr	s2, [pc, #532]	; 800a328 <slalomR+0x3b8>
 800a116:	eddf 0a87 	vldr	s1, [pc, #540]	; 800a334 <slalomR+0x3c4>
 800a11a:	eeb0 0a47 	vmov.f32	s0, s14
 800a11e:	f7f9 fd83 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a122:	2300      	movs	r3, #0
 800a124:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a12a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a12e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a324 <slalomR+0x3b4>
 800a132:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a136:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a13a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a13e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a142:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a146:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a14a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a14e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a152:	ed9f 5a74 	vldr	s10, [pc, #464]	; 800a324 <slalomR+0x3b4>
 800a156:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a15a:	68f8      	ldr	r0, [r7, #12]
 800a15c:	eeb0 2a47 	vmov.f32	s4, s14
 800a160:	eef0 1a65 	vmov.f32	s3, s11
 800a164:	ed9f 1a70 	vldr	s2, [pc, #448]	; 800a328 <slalomR+0x3b8>
 800a168:	eef0 0a46 	vmov.f32	s1, s12
 800a16c:	eeb0 0a66 	vmov.f32	s0, s13
 800a170:	f7f8 ff34 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a174:	4b6a      	ldr	r3, [pc, #424]	; (800a320 <slalomR+0x3b0>)
 800a176:	2200      	movs	r2, #0
 800a178:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
//		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
//										fabs(end_velocity*end_velocity-turnpara.g_speed * turnpara.g_speed)  / 2 / turnpara.e_ofset,wallmode);
	}
}
 800a17a:	e0c8      	b.n	800a30e <slalomR+0x39e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a17c:	2300      	movs	r3, #0
 800a17e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a180:	2300      	movs	r3, #0
 800a182:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a184:	2301      	movs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a188:	2300      	movs	r3, #0
 800a18a:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a18c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	d127      	bne.n	800a1e4 <slalomR+0x274>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a194:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a198:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a19c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a1a0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1a4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1a8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1ac:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a1b8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a1bc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1c0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800a324 <slalomR+0x3b4>
 800a1c4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	eeb0 2a47 	vmov.f32	s4, s14
 800a1ce:	eef0 1a45 	vmov.f32	s3, s10
 800a1d2:	eeb0 1a65 	vmov.f32	s2, s11
 800a1d6:	eef0 0a46 	vmov.f32	s1, s12
 800a1da:	eeb0 0a66 	vmov.f32	s0, s13
 800a1de:	f7f8 fefd 	bl	8002fdc <straight_table2>
 800a1e2:	e022      	b.n	800a22a <slalomR+0x2ba>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a1e4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a1e8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a1ec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a1f0:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a1f4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a1f8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a200:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a204:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a208:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a324 <slalomR+0x3b4>
 800a20c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	eeb0 2a47 	vmov.f32	s4, s14
 800a216:	eef0 1a45 	vmov.f32	s3, s10
 800a21a:	eeb0 1a65 	vmov.f32	s2, s11
 800a21e:	eef0 0a46 	vmov.f32	s1, s12
 800a222:	eeb0 0a66 	vmov.f32	s0, s13
 800a226:	f7f8 fed9 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a22a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d10c      	bne.n	800a24c <slalomR+0x2dc>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a232:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a236:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a23a:	eeb0 1a47 	vmov.f32	s2, s14
 800a23e:	eddf 0a3d 	vldr	s1, [pc, #244]	; 800a334 <slalomR+0x3c4>
 800a242:	eeb0 0a67 	vmov.f32	s0, s15
 800a246:	f7f9 fe3f 	bl	8003ec8 <mollifier_slalom_table>
 800a24a:	e015      	b.n	800a278 <slalomR+0x308>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a24c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a250:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a254:	eef1 7a67 	vneg.f32	s15, s15
 800a258:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a25c:	eef0 2a66 	vmov.f32	s5, s13
 800a260:	eeb0 2a67 	vmov.f32	s4, s15
 800a264:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a328 <slalomR+0x3b8>
 800a268:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a328 <slalomR+0x3b8>
 800a26c:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a334 <slalomR+0x3c4>
 800a270:	eeb0 0a47 	vmov.f32	s0, s14
 800a274:	f7f9 fcd8 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a278:	2300      	movs	r3, #0
 800a27a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a280:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a284:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a288:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a28c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a290:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a294:	edd7 7a01 	vldr	s15, [r7, #4]
 800a298:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a29c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a0:	eef0 7ae7 	vabs.f32	s15, s15
 800a2a4:	ee17 0a90 	vmov	r0, s15
 800a2a8:	f7f6 f976 	bl	8000598 <__aeabi_f2d>
 800a2ac:	f04f 0200 	mov.w	r2, #0
 800a2b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a2b4:	f7f6 faf2 	bl	800089c <__aeabi_ddiv>
 800a2b8:	4602      	mov	r2, r0
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	4614      	mov	r4, r2
 800a2be:	461d      	mov	r5, r3
 800a2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7f6 f968 	bl	8000598 <__aeabi_f2d>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	460b      	mov	r3, r1
 800a2cc:	4620      	mov	r0, r4
 800a2ce:	4629      	mov	r1, r5
 800a2d0:	f7f6 fae4 	bl	800089c <__aeabi_ddiv>
 800a2d4:	4602      	mov	r2, r0
 800a2d6:	460b      	mov	r3, r1
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f04f 0200 	mov.w	r2, #0
 800a2e0:	4b15      	ldr	r3, [pc, #84]	; (800a338 <slalomR+0x3c8>)
 800a2e2:	f7f5 fffb 	bl	80002dc <__adddf3>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a2ea:	4610      	mov	r0, r2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	f7f6 fc83 	bl	8000bf8 <__aeabi_d2f>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	ee02 3a10 	vmov	s4, r3
 800a2fa:	edd7 1a01 	vldr	s3, [r7, #4]
 800a2fe:	ed97 1a01 	vldr	s2, [r7, #4]
 800a302:	eef0 0a68 	vmov.f32	s1, s17
 800a306:	eeb0 0a48 	vmov.f32	s0, s16
 800a30a:	f7f8 fe67 	bl	8002fdc <straight_table2>
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	ecbd 8b02 	vpop	{d8}
 800a318:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a31c:	b004      	add	sp, #16
 800a31e:	4770      	bx	lr
 800a320:	20000808 	.word	0x20000808
 800a324:	42340000 	.word	0x42340000
 800a328:	00000000 	.word	0x00000000
 800a32c:	431b8000 	.word	0x431b8000
 800a330:	43138000 	.word	0x43138000
 800a334:	c2b40000 	.word	0xc2b40000
 800a338:	408f4000 	.word	0x408f4000

0800a33c <slalomL>:

void slalomL(parameter turnpara,char test_mode,char shortest_mode,char mollifier_mode,float end_velocity) {
 800a33c:	b084      	sub	sp, #16
 800a33e:	b5b0      	push	{r4, r5, r7, lr}
 800a340:	ed2d 8b02 	vpush	{d8}
 800a344:	b084      	sub	sp, #16
 800a346:	af00      	add	r7, sp, #0
 800a348:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a34c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a350:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == ON) {
 800a354:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a358:	2b01      	cmp	r3, #1
 800a35a:	f040 80f3 	bne.w	800a544 <slalomL+0x208>
		highspeed_mode = 0;
 800a35e:	4be1      	ldr	r3, [pc, #900]	; (800a6e4 <slalomL+0x3a8>)
 800a360:	2200      	movs	r2, #0
 800a362:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a364:	2301      	movs	r3, #1
 800a366:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a368:	2300      	movs	r3, #0
 800a36a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a370:	2300      	movs	r3, #0
 800a372:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a374:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d11f      	bne.n	800a3bc <slalomL+0x80>
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a37c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a380:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a384:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a38c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a390:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a394:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a398:	eddf 5ad3 	vldr	s11, [pc, #844]	; 800a6e8 <slalomL+0x3ac>
 800a39c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3a0:	68f8      	ldr	r0, [r7, #12]
 800a3a2:	eeb0 2a47 	vmov.f32	s4, s14
 800a3a6:	eef0 1a46 	vmov.f32	s3, s12
 800a3aa:	eeb0 1a66 	vmov.f32	s2, s13
 800a3ae:	eddf 0acf 	vldr	s1, [pc, #828]	; 800a6ec <slalomL+0x3b0>
 800a3b2:	ed9f 0acf 	vldr	s0, [pc, #828]	; 800a6f0 <slalomL+0x3b4>
 800a3b6:	f7f8 fe11 	bl	8002fdc <straight_table2>
 800a3ba:	e01e      	b.n	800a3fa <slalomL+0xbe>
		}else{
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3bc:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a3c0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a3c4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a3c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a3cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a3d0:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a3d4:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT + 135, 0, turnpara.g_speed, turnpara.g_speed,
 800a3d8:	eddf 5ac3 	vldr	s11, [pc, #780]	; 800a6e8 <slalomL+0x3ac>
 800a3dc:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	eeb0 2a47 	vmov.f32	s4, s14
 800a3e6:	eef0 1a46 	vmov.f32	s3, s12
 800a3ea:	eeb0 1a66 	vmov.f32	s2, s13
 800a3ee:	eddf 0abf 	vldr	s1, [pc, #764]	; 800a6ec <slalomL+0x3b0>
 800a3f2:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 800a6f4 <slalomL+0x3b8>
 800a3f6:	f7f8 fdf1 	bl	8002fdc <straight_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLALOM;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=1;
 800a3fe:	2301      	movs	r3, #1
 800a400:	73fb      	strb	r3, [r7, #15]
		if(shortest_mode==0){
 800a402:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a406:	2b00      	cmp	r3, #0
 800a408:	d127      	bne.n	800a45a <slalomL+0x11e>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a40a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a40e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a412:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a416:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a41a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a41e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a422:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a426:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a42a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a42e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a432:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a436:	eddf 4aac 	vldr	s9, [pc, #688]	; 800a6e8 <slalomL+0x3ac>
 800a43a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	eeb0 2a47 	vmov.f32	s4, s14
 800a444:	eef0 1a45 	vmov.f32	s3, s10
 800a448:	eeb0 1a65 	vmov.f32	s2, s11
 800a44c:	eef0 0a46 	vmov.f32	s1, s12
 800a450:	eeb0 0a66 	vmov.f32	s0, s13
 800a454:	f7f8 fdc2 	bl	8002fdc <straight_table2>
 800a458:	e022      	b.n	800a4a0 <slalomL+0x164>
		}else{
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a45a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a45e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a462:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a466:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
									turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a46a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a46e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a472:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a476:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a47a:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a47e:	eddf 4a9a 	vldr	s9, [pc, #616]	; 800a6e8 <slalomL+0x3ac>
 800a482:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a486:	68f8      	ldr	r0, [r7, #12]
 800a488:	eeb0 2a47 	vmov.f32	s4, s14
 800a48c:	eef0 1a45 	vmov.f32	s3, s10
 800a490:	eeb0 1a65 	vmov.f32	s2, s11
 800a494:	eef0 0a46 	vmov.f32	s1, s12
 800a498:	eeb0 0a66 	vmov.f32	s0, s13
 800a49c:	f7f8 fd9e 	bl	8002fdc <straight_table2>
		}
		if(mollifier_mode == ON){
 800a4a0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a4a4:	2b01      	cmp	r3, #1
 800a4a6:	d10c      	bne.n	800a4c2 <slalomL+0x186>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a4a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4ac:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4b0:	eeb0 1a47 	vmov.f32	s2, s14
 800a4b4:	eddf 0a90 	vldr	s1, [pc, #576]	; 800a6f8 <slalomL+0x3bc>
 800a4b8:	eeb0 0a67 	vmov.f32	s0, s15
 800a4bc:	f7f9 fd04 	bl	8003ec8 <mollifier_slalom_table>
 800a4c0:	e013      	b.n	800a4ea <slalomL+0x1ae>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a4c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a4c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4ca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a4ce:	eef0 2a66 	vmov.f32	s5, s13
 800a4d2:	eeb0 2a47 	vmov.f32	s4, s14
 800a4d6:	eddf 1a85 	vldr	s3, [pc, #532]	; 800a6ec <slalomL+0x3b0>
 800a4da:	ed9f 1a84 	vldr	s2, [pc, #528]	; 800a6ec <slalomL+0x3b0>
 800a4de:	eddf 0a86 	vldr	s1, [pc, #536]	; 800a6f8 <slalomL+0x3bc>
 800a4e2:	eeb0 0a67 	vmov.f32	s0, s15
 800a4e6:	f7f9 fb9f 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLALOM;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	73fb      	strb	r3, [r7, #15]
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a4f2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a4f6:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 800a6e8 <slalomL+0x3ac>
 800a4fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a4fe:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a502:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a506:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a50a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a50e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a512:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a516:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a51a:	ed9f 5a73 	vldr	s10, [pc, #460]	; 800a6e8 <slalomL+0x3ac>
 800a51e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a522:	68f8      	ldr	r0, [r7, #12]
 800a524:	eeb0 2a47 	vmov.f32	s4, s14
 800a528:	eef0 1a65 	vmov.f32	s3, s11
 800a52c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a6ec <slalomL+0x3b0>
 800a530:	eef0 0a46 	vmov.f32	s1, s12
 800a534:	eeb0 0a66 	vmov.f32	s0, s13
 800a538:	f7f8 fd50 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a53c:	4b69      	ldr	r3, [pc, #420]	; (800a6e4 <slalomL+0x3a8>)
 800a53e:	2200      	movs	r2, #0
 800a540:	701a      	strb	r2, [r3, #0]
		wallmode.WallCutMode=0;
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}
}
 800a542:	e0c6      	b.n	800a6d2 <slalomL+0x396>
		wallmode.WallControlMode=0;
 800a544:	2300      	movs	r3, #0
 800a546:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a548:	2300      	movs	r3, #0
 800a54a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=1;
 800a54c:	2301      	movs	r3, #1
 800a54e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a550:	2300      	movs	r3, #0
 800a552:	73bb      	strb	r3, [r7, #14]
		if(shortest_mode==0){
 800a554:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d127      	bne.n	800a5ac <slalomL+0x270>
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a55c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a560:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800a564:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a568:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a56c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a570:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a574:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a578:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a57c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a580:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a584:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(MAZE_OFFSET+turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a588:	eddf 4a57 	vldr	s9, [pc, #348]	; 800a6e8 <slalomL+0x3ac>
 800a58c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	eeb0 2a47 	vmov.f32	s4, s14
 800a596:	eef0 1a45 	vmov.f32	s3, s10
 800a59a:	eeb0 1a65 	vmov.f32	s2, s11
 800a59e:	eef0 0a46 	vmov.f32	s1, s12
 800a5a2:	eeb0 0a66 	vmov.f32	s0, s13
 800a5a6:	f7f8 fd19 	bl	8002fdc <straight_table2>
 800a5aa:	e022      	b.n	800a5f2 <slalomL+0x2b6>
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5ac:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a5b0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a5b4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a5b8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
														turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a5bc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a5c0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a5c8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a5cc:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a5d0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800a6e8 <slalomL+0x3ac>
 800a5d4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a5d8:	68f8      	ldr	r0, [r7, #12]
 800a5da:	eeb0 2a47 	vmov.f32	s4, s14
 800a5de:	eef0 1a45 	vmov.f32	s3, s10
 800a5e2:	eeb0 1a65 	vmov.f32	s2, s11
 800a5e6:	eef0 0a46 	vmov.f32	s1, s12
 800a5ea:	eeb0 0a66 	vmov.f32	s0, s13
 800a5ee:	f7f8 fcf5 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a5f2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d10c      	bne.n	800a614 <slalomL+0x2d8>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800a5fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a5fe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a602:	eeb0 1a47 	vmov.f32	s2, s14
 800a606:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a6f8 <slalomL+0x3bc>
 800a60a:	eeb0 0a67 	vmov.f32	s0, s15
 800a60e:	f7f9 fc5b 	bl	8003ec8 <mollifier_slalom_table>
 800a612:	e013      	b.n	800a63c <slalomL+0x300>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800a614:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a618:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a61c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a620:	eef0 2a66 	vmov.f32	s5, s13
 800a624:	eeb0 2a47 	vmov.f32	s4, s14
 800a628:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a6ec <slalomL+0x3b0>
 800a62c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a6ec <slalomL+0x3b0>
 800a630:	eddf 0a31 	vldr	s1, [pc, #196]	; 800a6f8 <slalomL+0x3bc>
 800a634:	eeb0 0a67 	vmov.f32	s0, s15
 800a638:	f7f9 faf6 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a640:	2300      	movs	r3, #0
 800a642:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a644:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a648:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a64c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a650:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a654:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a658:	edd7 7a01 	vldr	s15, [r7, #4]
 800a65c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a660:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a664:	eef0 7ae7 	vabs.f32	s15, s15
 800a668:	ee17 0a90 	vmov	r0, s15
 800a66c:	f7f5 ff94 	bl	8000598 <__aeabi_f2d>
 800a670:	f04f 0200 	mov.w	r2, #0
 800a674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a678:	f7f6 f910 	bl	800089c <__aeabi_ddiv>
 800a67c:	4602      	mov	r2, r0
 800a67e:	460b      	mov	r3, r1
 800a680:	4614      	mov	r4, r2
 800a682:	461d      	mov	r5, r3
 800a684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a686:	4618      	mov	r0, r3
 800a688:	f7f5 ff86 	bl	8000598 <__aeabi_f2d>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4620      	mov	r0, r4
 800a692:	4629      	mov	r1, r5
 800a694:	f7f6 f902 	bl	800089c <__aeabi_ddiv>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4610      	mov	r0, r2
 800a69e:	4619      	mov	r1, r3
 800a6a0:	f04f 0200 	mov.w	r2, #0
 800a6a4:	4b15      	ldr	r3, [pc, #84]	; (800a6fc <slalomL+0x3c0>)
 800a6a6:	f7f5 fe19 	bl	80002dc <__adddf3>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a6ae:	4610      	mov	r0, r2
 800a6b0:	4619      	mov	r1, r3
 800a6b2:	f7f6 faa1 	bl	8000bf8 <__aeabi_d2f>
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	68f8      	ldr	r0, [r7, #12]
 800a6ba:	ee02 3a10 	vmov	s4, r3
 800a6be:	edd7 1a01 	vldr	s3, [r7, #4]
 800a6c2:	ed97 1a01 	vldr	s2, [r7, #4]
 800a6c6:	eef0 0a68 	vmov.f32	s1, s17
 800a6ca:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ce:	f7f8 fc85 	bl	8002fdc <straight_table2>
}
 800a6d2:	bf00      	nop
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	ecbd 8b02 	vpop	{d8}
 800a6dc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a6e0:	b004      	add	sp, #16
 800a6e2:	4770      	bx	lr
 800a6e4:	20000808 	.word	0x20000808
 800a6e8:	42340000 	.word	0x42340000
 800a6ec:	00000000 	.word	0x00000000
 800a6f0:	431b8000 	.word	0x431b8000
 800a6f4:	43138000 	.word	0x43138000
 800a6f8:	42b40000 	.word	0x42b40000
 800a6fc:	408f4000 	.word	0x408f4000

0800a700 <turn90R>:


void turn90R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a700:	b084      	sub	sp, #16
 800a702:	b5b0      	push	{r4, r5, r7, lr}
 800a704:	ed2d 8b02 	vpush	{d8}
 800a708:	b084      	sub	sp, #16
 800a70a:	af00      	add	r7, sp, #0
 800a70c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a710:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a714:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a718:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	f040 80a5 	bne.w	800a86c <turn90R+0x16c>
		highspeed_mode = 1;
 800a722:	4ba5      	ldr	r3, [pc, #660]	; (800a9b8 <turn90R+0x2b8>)
 800a724:	2201      	movs	r2, #1
 800a726:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a728:	2301      	movs	r3, #1
 800a72a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800a730:	2300      	movs	r3, #0
 800a732:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a734:	2300      	movs	r3, #0
 800a736:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a738:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800a73c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a740:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a744:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a748:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a74c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800a750:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800a754:	eddf 5a99 	vldr	s11, [pc, #612]	; 800a9bc <turn90R+0x2bc>
 800a758:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	eeb0 2a47 	vmov.f32	s4, s14
 800a762:	eef0 1a46 	vmov.f32	s3, s12
 800a766:	eeb0 1a66 	vmov.f32	s2, s13
 800a76a:	eddf 0a95 	vldr	s1, [pc, #596]	; 800a9c0 <turn90R+0x2c0>
 800a76e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800a9c4 <turn90R+0x2c4>
 800a772:	f7f8 fc33 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800a776:	2300      	movs	r3, #0
 800a778:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800a77a:	2302      	movs	r3, #2
 800a77c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a77e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a782:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a786:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a78a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a78e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a792:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a796:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a79a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a79e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a7a2:	eddf 4a86 	vldr	s9, [pc, #536]	; 800a9bc <turn90R+0x2bc>
 800a7a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	eeb0 2a47 	vmov.f32	s4, s14
 800a7b0:	eef0 1a45 	vmov.f32	s3, s10
 800a7b4:	eeb0 1a65 	vmov.f32	s2, s11
 800a7b8:	eef0 0a46 	vmov.f32	s1, s12
 800a7bc:	eeb0 0a66 	vmov.f32	s0, s13
 800a7c0:	f7f8 fc0c 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a7c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a7c8:	2b01      	cmp	r3, #1
 800a7ca:	d10c      	bne.n	800a7e6 <turn90R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a7cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a7d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a7d4:	eeb0 1a47 	vmov.f32	s2, s14
 800a7d8:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800a9c8 <turn90R+0x2c8>
 800a7dc:	eeb0 0a67 	vmov.f32	s0, s15
 800a7e0:	f7f9 fb72 	bl	8003ec8 <mollifier_slalom_table>
 800a7e4:	e015      	b.n	800a812 <turn90R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a7e6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a7ea:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a7ee:	eef1 7a67 	vneg.f32	s15, s15
 800a7f2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a7f6:	eef0 2a66 	vmov.f32	s5, s13
 800a7fa:	eeb0 2a67 	vmov.f32	s4, s15
 800a7fe:	eddf 1a70 	vldr	s3, [pc, #448]	; 800a9c0 <turn90R+0x2c0>
 800a802:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800a9c0 <turn90R+0x2c0>
 800a806:	eddf 0a70 	vldr	s1, [pc, #448]	; 800a9c8 <turn90R+0x2c8>
 800a80a:	eeb0 0a47 	vmov.f32	s0, s14
 800a80e:	f7f9 fa0b 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800a812:	2300      	movs	r3, #0
 800a814:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a81a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a81e:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800a9cc <turn90R+0x2cc>
 800a822:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a826:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a82a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a82e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a832:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a83a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800a83e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800a842:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800a9bc <turn90R+0x2bc>
 800a846:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800a84a:	68f8      	ldr	r0, [r7, #12]
 800a84c:	eeb0 2a47 	vmov.f32	s4, s14
 800a850:	eef0 1a65 	vmov.f32	s3, s11
 800a854:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800a9c0 <turn90R+0x2c0>
 800a858:	eef0 0a46 	vmov.f32	s1, s12
 800a85c:	eeb0 0a66 	vmov.f32	s0, s13
 800a860:	f7f8 fbbc 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800a864:	4b54      	ldr	r3, [pc, #336]	; (800a9b8 <turn90R+0x2b8>)
 800a866:	2200      	movs	r2, #0
 800a868:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800a86a:	e09c      	b.n	800a9a6 <turn90R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800a86c:	2300      	movs	r3, #0
 800a86e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800a870:	2300      	movs	r3, #0
 800a872:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800a874:	2302      	movs	r3, #2
 800a876:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800a878:	2300      	movs	r3, #0
 800a87a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a87c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800a880:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800a884:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800a888:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800a88c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a890:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a894:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a898:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800a89c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800a8a0:	eddf 4a46 	vldr	s9, [pc, #280]	; 800a9bc <turn90R+0x2bc>
 800a8a4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	eeb0 2a47 	vmov.f32	s4, s14
 800a8ae:	eef0 1a45 	vmov.f32	s3, s10
 800a8b2:	eeb0 1a65 	vmov.f32	s2, s11
 800a8b6:	eef0 0a46 	vmov.f32	s1, s12
 800a8ba:	eeb0 0a66 	vmov.f32	s0, s13
 800a8be:	f7f8 fb8d 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800a8c2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800a8c6:	2b01      	cmp	r3, #1
 800a8c8:	d10c      	bne.n	800a8e4 <turn90R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800a8ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a8ce:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a8d2:	eeb0 1a47 	vmov.f32	s2, s14
 800a8d6:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800a9c8 <turn90R+0x2c8>
 800a8da:	eeb0 0a67 	vmov.f32	s0, s15
 800a8de:	f7f9 faf3 	bl	8003ec8 <mollifier_slalom_table>
 800a8e2:	e015      	b.n	800a910 <turn90R+0x210>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800a8e4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a8e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a8ec:	eef1 7a67 	vneg.f32	s15, s15
 800a8f0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800a8f4:	eef0 2a66 	vmov.f32	s5, s13
 800a8f8:	eeb0 2a67 	vmov.f32	s4, s15
 800a8fc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800a9c0 <turn90R+0x2c0>
 800a900:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800a9c0 <turn90R+0x2c0>
 800a904:	eddf 0a30 	vldr	s1, [pc, #192]	; 800a9c8 <turn90R+0x2c8>
 800a908:	eeb0 0a47 	vmov.f32	s0, s14
 800a90c:	f7f9 f98c 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800a910:	2301      	movs	r3, #1
 800a912:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a918:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800a91c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800a920:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800a924:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a928:	ee27 7a27 	vmul.f32	s14, s14, s15
 800a92c:	edd7 7a01 	vldr	s15, [r7, #4]
 800a930:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800a934:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a938:	eef0 7ae7 	vabs.f32	s15, s15
 800a93c:	ee17 0a90 	vmov	r0, s15
 800a940:	f7f5 fe2a 	bl	8000598 <__aeabi_f2d>
 800a944:	f04f 0200 	mov.w	r2, #0
 800a948:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a94c:	f7f5 ffa6 	bl	800089c <__aeabi_ddiv>
 800a950:	4602      	mov	r2, r0
 800a952:	460b      	mov	r3, r1
 800a954:	4614      	mov	r4, r2
 800a956:	461d      	mov	r5, r3
 800a958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7f5 fe1c 	bl	8000598 <__aeabi_f2d>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4620      	mov	r0, r4
 800a966:	4629      	mov	r1, r5
 800a968:	f7f5 ff98 	bl	800089c <__aeabi_ddiv>
 800a96c:	4602      	mov	r2, r0
 800a96e:	460b      	mov	r3, r1
 800a970:	4610      	mov	r0, r2
 800a972:	4619      	mov	r1, r3
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	4b15      	ldr	r3, [pc, #84]	; (800a9d0 <turn90R+0x2d0>)
 800a97a:	f7f5 fcaf 	bl	80002dc <__adddf3>
 800a97e:	4602      	mov	r2, r0
 800a980:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800a982:	4610      	mov	r0, r2
 800a984:	4619      	mov	r1, r3
 800a986:	f7f6 f937 	bl	8000bf8 <__aeabi_d2f>
 800a98a:	4603      	mov	r3, r0
 800a98c:	68f8      	ldr	r0, [r7, #12]
 800a98e:	ee02 3a10 	vmov	s4, r3
 800a992:	edd7 1a01 	vldr	s3, [r7, #4]
 800a996:	ed97 1a01 	vldr	s2, [r7, #4]
 800a99a:	eef0 0a68 	vmov.f32	s1, s17
 800a99e:	eeb0 0a48 	vmov.f32	s0, s16
 800a9a2:	f7f8 fb1b 	bl	8002fdc <straight_table2>
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	ecbd 8b02 	vpop	{d8}
 800a9b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800a9b4:	b004      	add	sp, #16
 800a9b6:	4770      	bx	lr
 800a9b8:	20000808 	.word	0x20000808
 800a9bc:	42340000 	.word	0x42340000
 800a9c0:	00000000 	.word	0x00000000
 800a9c4:	42cd0000 	.word	0x42cd0000
 800a9c8:	c2b40000 	.word	0xc2b40000
 800a9cc:	42b40000 	.word	0x42b40000
 800a9d0:	408f4000 	.word	0x408f4000

0800a9d4 <turn90L>:

void turn90L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	b5b0      	push	{r4, r5, r7, lr}
 800a9d8:	ed2d 8b02 	vpush	{d8}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a9e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a9e8:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800a9ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	f040 80a3 	bne.w	800ab3c <turn90L+0x168>
		highspeed_mode = 1;
 800a9f6:	4ba3      	ldr	r3, [pc, #652]	; (800ac84 <turn90L+0x2b0>)
 800a9f8:	2201      	movs	r2, #1
 800a9fa:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800aa00:	2300      	movs	r3, #0
 800aa02:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800aa04:	2300      	movs	r3, #0
 800aa06:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa0c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800aa10:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa14:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa18:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa20:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800aa24:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800aa28:	eddf 5a97 	vldr	s11, [pc, #604]	; 800ac88 <turn90L+0x2b4>
 800aa2c:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	eeb0 2a47 	vmov.f32	s4, s14
 800aa36:	eef0 1a46 	vmov.f32	s3, s12
 800aa3a:	eeb0 1a66 	vmov.f32	s2, s13
 800aa3e:	eddf 0a93 	vldr	s1, [pc, #588]	; 800ac8c <turn90L+0x2b8>
 800aa42:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800ac90 <turn90L+0x2bc>
 800aa46:	f7f8 fac9 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800aa4e:	2302      	movs	r3, #2
 800aa50:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa52:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aa56:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aa5a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800aa5e:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aa62:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aa66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aa6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa6e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800aa72:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800aa76:	eddf 4a84 	vldr	s9, [pc, #528]	; 800ac88 <turn90L+0x2b4>
 800aa7a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800aa7e:	68f8      	ldr	r0, [r7, #12]
 800aa80:	eeb0 2a47 	vmov.f32	s4, s14
 800aa84:	eef0 1a45 	vmov.f32	s3, s10
 800aa88:	eeb0 1a65 	vmov.f32	s2, s11
 800aa8c:	eef0 0a46 	vmov.f32	s1, s12
 800aa90:	eeb0 0a66 	vmov.f32	s0, s13
 800aa94:	f7f8 faa2 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800aa98:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d10c      	bne.n	800aaba <turn90L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800aaa0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aaa4:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aaa8:	eeb0 1a47 	vmov.f32	s2, s14
 800aaac:	eddf 0a79 	vldr	s1, [pc, #484]	; 800ac94 <turn90L+0x2c0>
 800aab0:	eeb0 0a67 	vmov.f32	s0, s15
 800aab4:	f7f9 fa08 	bl	8003ec8 <mollifier_slalom_table>
 800aab8:	e013      	b.n	800aae2 <turn90L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800aaba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aabe:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aac2:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800aac6:	eef0 2a66 	vmov.f32	s5, s13
 800aaca:	eeb0 2a47 	vmov.f32	s4, s14
 800aace:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800ac8c <turn90L+0x2b8>
 800aad2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800ac8c <turn90L+0x2b8>
 800aad6:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800ac94 <turn90L+0x2c0>
 800aada:	eeb0 0a67 	vmov.f32	s0, s15
 800aade:	f7f9 f8a3 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aae6:	2300      	movs	r3, #0
 800aae8:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800aaea:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaee:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800ac94 <turn90L+0x2c0>
 800aaf2:	ee77 6a87 	vadd.f32	s13, s15, s14
 800aaf6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aafa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800aafe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab02:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab0a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ab0e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ab12:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800ac88 <turn90L+0x2b4>
 800ab16:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	eeb0 2a47 	vmov.f32	s4, s14
 800ab20:	eef0 1a65 	vmov.f32	s3, s11
 800ab24:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800ac8c <turn90L+0x2b8>
 800ab28:	eef0 0a46 	vmov.f32	s1, s12
 800ab2c:	eeb0 0a66 	vmov.f32	s0, s13
 800ab30:	f7f8 fa54 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ab34:	4b53      	ldr	r3, [pc, #332]	; (800ac84 <turn90L+0x2b0>)
 800ab36:	2200      	movs	r2, #0
 800ab38:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ab3a:	e09a      	b.n	800ac72 <turn90L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ab40:	2300      	movs	r3, #0
 800ab42:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ab44:	2302      	movs	r3, #2
 800ab46:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab4c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ab50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ab54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ab58:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ab5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ab60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ab68:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ab6c:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ab70:	eddf 4a45 	vldr	s9, [pc, #276]	; 800ac88 <turn90L+0x2b4>
 800ab74:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ab78:	68f8      	ldr	r0, [r7, #12]
 800ab7a:	eeb0 2a47 	vmov.f32	s4, s14
 800ab7e:	eef0 1a45 	vmov.f32	s3, s10
 800ab82:	eeb0 1a65 	vmov.f32	s2, s11
 800ab86:	eef0 0a46 	vmov.f32	s1, s12
 800ab8a:	eeb0 0a66 	vmov.f32	s0, s13
 800ab8e:	f7f8 fa25 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ab92:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ab96:	2b01      	cmp	r3, #1
 800ab98:	d10c      	bne.n	800abb4 <turn90L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800ab9a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ab9e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800aba2:	eeb0 1a47 	vmov.f32	s2, s14
 800aba6:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800ac94 <turn90L+0x2c0>
 800abaa:	eeb0 0a67 	vmov.f32	s0, s15
 800abae:	f7f9 f98b 	bl	8003ec8 <mollifier_slalom_table>
 800abb2:	e013      	b.n	800abdc <turn90L+0x208>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800abb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abb8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800abbc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800abc0:	eef0 2a66 	vmov.f32	s5, s13
 800abc4:	eeb0 2a47 	vmov.f32	s4, s14
 800abc8:	eddf 1a30 	vldr	s3, [pc, #192]	; 800ac8c <turn90L+0x2b8>
 800abcc:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800ac8c <turn90L+0x2b8>
 800abd0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800ac94 <turn90L+0x2c0>
 800abd4:	eeb0 0a67 	vmov.f32	s0, s15
 800abd8:	f7f9 f826 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800abdc:	2301      	movs	r3, #1
 800abde:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800abe4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800abe8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800abec:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800abf0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800abf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abf8:	edd7 7a01 	vldr	s15, [r7, #4]
 800abfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ac00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac04:	eef0 7ae7 	vabs.f32	s15, s15
 800ac08:	ee17 0a90 	vmov	r0, s15
 800ac0c:	f7f5 fcc4 	bl	8000598 <__aeabi_f2d>
 800ac10:	f04f 0200 	mov.w	r2, #0
 800ac14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac18:	f7f5 fe40 	bl	800089c <__aeabi_ddiv>
 800ac1c:	4602      	mov	r2, r0
 800ac1e:	460b      	mov	r3, r1
 800ac20:	4614      	mov	r4, r2
 800ac22:	461d      	mov	r5, r3
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7f5 fcb6 	bl	8000598 <__aeabi_f2d>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	460b      	mov	r3, r1
 800ac30:	4620      	mov	r0, r4
 800ac32:	4629      	mov	r1, r5
 800ac34:	f7f5 fe32 	bl	800089c <__aeabi_ddiv>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4610      	mov	r0, r2
 800ac3e:	4619      	mov	r1, r3
 800ac40:	f04f 0200 	mov.w	r2, #0
 800ac44:	4b14      	ldr	r3, [pc, #80]	; (800ac98 <turn90L+0x2c4>)
 800ac46:	f7f5 fb49 	bl	80002dc <__adddf3>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800ac4e:	4610      	mov	r0, r2
 800ac50:	4619      	mov	r1, r3
 800ac52:	f7f5 ffd1 	bl	8000bf8 <__aeabi_d2f>
 800ac56:	4603      	mov	r3, r0
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	ee02 3a10 	vmov	s4, r3
 800ac5e:	edd7 1a01 	vldr	s3, [r7, #4]
 800ac62:	ed97 1a01 	vldr	s2, [r7, #4]
 800ac66:	eef0 0a68 	vmov.f32	s1, s17
 800ac6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac6e:	f7f8 f9b5 	bl	8002fdc <straight_table2>
}
 800ac72:	bf00      	nop
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	ecbd 8b02 	vpop	{d8}
 800ac7c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800ac80:	b004      	add	sp, #16
 800ac82:	4770      	bx	lr
 800ac84:	20000808 	.word	0x20000808
 800ac88:	42340000 	.word	0x42340000
 800ac8c:	00000000 	.word	0x00000000
 800ac90:	42cd0000 	.word	0x42cd0000
 800ac94:	42b40000 	.word	0x42b40000
 800ac98:	408f4000 	.word	0x408f4000

0800ac9c <turn180R>:


void turn180R(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	b5b0      	push	{r4, r5, r7, lr}
 800aca0:	ed2d 8b02 	vpush	{d8}
 800aca4:	b084      	sub	sp, #16
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800acac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800acb0:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800acb4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800acb8:	2b01      	cmp	r3, #1
 800acba:	f040 80a5 	bne.w	800ae08 <turn180R+0x16c>
		highspeed_mode = 1;
 800acbe:	4ba5      	ldr	r3, [pc, #660]	; (800af54 <turn180R+0x2b8>)
 800acc0:	2201      	movs	r2, #1
 800acc2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800acc4:	2301      	movs	r3, #1
 800acc6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800acc8:	2300      	movs	r3, #0
 800acca:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800accc:	2300      	movs	r3, #0
 800acce:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800acd0:	2300      	movs	r3, #0
 800acd2:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acd4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800acd8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800acdc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ace0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ace4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ace8:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800acec:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800acf0:	eddf 5a99 	vldr	s11, [pc, #612]	; 800af58 <turn180R+0x2bc>
 800acf4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	eeb0 2a47 	vmov.f32	s4, s14
 800acfe:	eef0 1a46 	vmov.f32	s3, s12
 800ad02:	eeb0 1a66 	vmov.f32	s2, s13
 800ad06:	eddf 0a95 	vldr	s1, [pc, #596]	; 800af5c <turn180R+0x2c0>
 800ad0a:	ed9f 0a95 	vldr	s0, [pc, #596]	; 800af60 <turn180R+0x2c4>
 800ad0e:	f7f8 f965 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800ad12:	2300      	movs	r3, #0
 800ad14:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800ad16:	2302      	movs	r3, #2
 800ad18:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad1a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ad1e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ad22:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ad26:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ad2a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad32:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ad36:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ad3a:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ad3e:	eddf 4a86 	vldr	s9, [pc, #536]	; 800af58 <turn180R+0x2bc>
 800ad42:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	eeb0 2a47 	vmov.f32	s4, s14
 800ad4c:	eef0 1a45 	vmov.f32	s3, s10
 800ad50:	eeb0 1a65 	vmov.f32	s2, s11
 800ad54:	eef0 0a46 	vmov.f32	s1, s12
 800ad58:	eeb0 0a66 	vmov.f32	s0, s13
 800ad5c:	f7f8 f93e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ad60:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d10c      	bne.n	800ad82 <turn180R+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ad68:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ad6c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ad70:	eeb0 1a47 	vmov.f32	s2, s14
 800ad74:	eddf 0a7b 	vldr	s1, [pc, #492]	; 800af64 <turn180R+0x2c8>
 800ad78:	eeb0 0a67 	vmov.f32	s0, s15
 800ad7c:	f7f9 f8a4 	bl	8003ec8 <mollifier_slalom_table>
 800ad80:	e015      	b.n	800adae <turn180R+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ad82:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ad86:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ad8a:	eef1 7a67 	vneg.f32	s15, s15
 800ad8e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ad92:	eef0 2a66 	vmov.f32	s5, s13
 800ad96:	eeb0 2a67 	vmov.f32	s4, s15
 800ad9a:	eddf 1a70 	vldr	s3, [pc, #448]	; 800af5c <turn180R+0x2c0>
 800ad9e:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800af5c <turn180R+0x2c0>
 800ada2:	eddf 0a70 	vldr	s1, [pc, #448]	; 800af64 <turn180R+0x2c8>
 800ada6:	eeb0 0a47 	vmov.f32	s0, s14
 800adaa:	f7f8 ff3d 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800adae:	2300      	movs	r3, #0
 800adb0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adb6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800adba:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800af68 <turn180R+0x2cc>
 800adbe:	ee77 6a87 	vadd.f32	s13, s15, s14
 800adc2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800adc6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800adca:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800adce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800add2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800add6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800adda:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800adde:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800af58 <turn180R+0x2bc>
 800ade2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ade6:	68f8      	ldr	r0, [r7, #12]
 800ade8:	eeb0 2a47 	vmov.f32	s4, s14
 800adec:	eef0 1a65 	vmov.f32	s3, s11
 800adf0:	ed9f 1a5a 	vldr	s2, [pc, #360]	; 800af5c <turn180R+0x2c0>
 800adf4:	eef0 0a46 	vmov.f32	s1, s12
 800adf8:	eeb0 0a66 	vmov.f32	s0, s13
 800adfc:	f7f8 f8ee 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ae00:	4b54      	ldr	r3, [pc, #336]	; (800af54 <turn180R+0x2b8>)
 800ae02:	2200      	movs	r2, #0
 800ae04:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800ae06:	e09c      	b.n	800af42 <turn180R+0x2a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800ae10:	2302      	movs	r3, #2
 800ae12:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae18:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ae1c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ae20:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ae24:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ae28:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae2c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae30:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ae34:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ae38:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ae3c:	eddf 4a46 	vldr	s9, [pc, #280]	; 800af58 <turn180R+0x2bc>
 800ae40:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ae44:	68f8      	ldr	r0, [r7, #12]
 800ae46:	eeb0 2a47 	vmov.f32	s4, s14
 800ae4a:	eef0 1a45 	vmov.f32	s3, s10
 800ae4e:	eeb0 1a65 	vmov.f32	s2, s11
 800ae52:	eef0 0a46 	vmov.f32	s1, s12
 800ae56:	eeb0 0a66 	vmov.f32	s0, s13
 800ae5a:	f7f8 f8bf 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ae5e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d10c      	bne.n	800ae80 <turn180R+0x1e4>
			mollifier_slalom_table(turnpara.g_speed,-180,turnpara.t_speed);
 800ae66:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ae6a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae6e:	eeb0 1a47 	vmov.f32	s2, s14
 800ae72:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800af64 <turn180R+0x2c8>
 800ae76:	eeb0 0a67 	vmov.f32	s0, s15
 800ae7a:	f7f9 f825 	bl	8003ec8 <mollifier_slalom_table>
 800ae7e:	e015      	b.n	800aeac <turn180R+0x210>
			slalom_table2(turnpara.g_speed,-180, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ae80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ae84:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ae88:	eef1 7a67 	vneg.f32	s15, s15
 800ae8c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ae90:	eef0 2a66 	vmov.f32	s5, s13
 800ae94:	eeb0 2a67 	vmov.f32	s4, s15
 800ae98:	eddf 1a30 	vldr	s3, [pc, #192]	; 800af5c <turn180R+0x2c0>
 800ae9c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800af5c <turn180R+0x2c0>
 800aea0:	eddf 0a30 	vldr	s1, [pc, #192]	; 800af64 <turn180R+0x2c8>
 800aea4:	eeb0 0a47 	vmov.f32	s0, s14
 800aea8:	f7f8 febe 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800aeac:	2301      	movs	r3, #1
 800aeae:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800aeb4:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800aeb8:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800aebc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800aec0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800aec4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aec8:	edd7 7a01 	vldr	s15, [r7, #4]
 800aecc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800aed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed4:	eef0 7ae7 	vabs.f32	s15, s15
 800aed8:	ee17 0a90 	vmov	r0, s15
 800aedc:	f7f5 fb5c 	bl	8000598 <__aeabi_f2d>
 800aee0:	f04f 0200 	mov.w	r2, #0
 800aee4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aee8:	f7f5 fcd8 	bl	800089c <__aeabi_ddiv>
 800aeec:	4602      	mov	r2, r0
 800aeee:	460b      	mov	r3, r1
 800aef0:	4614      	mov	r4, r2
 800aef2:	461d      	mov	r5, r3
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7f5 fb4e 	bl	8000598 <__aeabi_f2d>
 800aefc:	4602      	mov	r2, r0
 800aefe:	460b      	mov	r3, r1
 800af00:	4620      	mov	r0, r4
 800af02:	4629      	mov	r1, r5
 800af04:	f7f5 fcca 	bl	800089c <__aeabi_ddiv>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4610      	mov	r0, r2
 800af0e:	4619      	mov	r1, r3
 800af10:	f04f 0200 	mov.w	r2, #0
 800af14:	4b15      	ldr	r3, [pc, #84]	; (800af6c <turn180R+0x2d0>)
 800af16:	f7f5 f9e1 	bl	80002dc <__adddf3>
 800af1a:	4602      	mov	r2, r0
 800af1c:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800af1e:	4610      	mov	r0, r2
 800af20:	4619      	mov	r1, r3
 800af22:	f7f5 fe69 	bl	8000bf8 <__aeabi_d2f>
 800af26:	4603      	mov	r3, r0
 800af28:	68f8      	ldr	r0, [r7, #12]
 800af2a:	ee02 3a10 	vmov	s4, r3
 800af2e:	edd7 1a01 	vldr	s3, [r7, #4]
 800af32:	ed97 1a01 	vldr	s2, [r7, #4]
 800af36:	eef0 0a68 	vmov.f32	s1, s17
 800af3a:	eeb0 0a48 	vmov.f32	s0, s16
 800af3e:	f7f8 f84d 	bl	8002fdc <straight_table2>
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	ecbd 8b02 	vpop	{d8}
 800af4c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800af50:	b004      	add	sp, #16
 800af52:	4770      	bx	lr
 800af54:	20000808 	.word	0x20000808
 800af58:	42340000 	.word	0x42340000
 800af5c:	00000000 	.word	0x00000000
 800af60:	42cd0000 	.word	0x42cd0000
 800af64:	c3340000 	.word	0xc3340000
 800af68:	42b40000 	.word	0x42b40000
 800af6c:	408f4000 	.word	0x408f4000

0800af70 <turn180L>:

void turn180L(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800af70:	b084      	sub	sp, #16
 800af72:	b5b0      	push	{r4, r5, r7, lr}
 800af74:	ed2d 8b02 	vpush	{d8}
 800af78:	b084      	sub	sp, #16
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800af80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800af84:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800af88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	f040 80a3 	bne.w	800b0d8 <turn180L+0x168>
		highspeed_mode = 1;
 800af92:	4ba3      	ldr	r3, [pc, #652]	; (800b220 <turn180L+0x2b0>)
 800af94:	2201      	movs	r2, #1
 800af96:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800af98:	2301      	movs	r3, #1
 800af9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800af9c:	2300      	movs	r3, #0
 800af9e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800afa0:	2300      	movs	r3, #0
 800afa2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afa8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800afac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800afb0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800afb4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800afb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afbc:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800afc0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800afc4:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b224 <turn180L+0x2b4>
 800afc8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800afcc:	68f8      	ldr	r0, [r7, #12]
 800afce:	eeb0 2a47 	vmov.f32	s4, s14
 800afd2:	eef0 1a46 	vmov.f32	s3, s12
 800afd6:	eeb0 1a66 	vmov.f32	s2, s13
 800afda:	eddf 0a93 	vldr	s1, [pc, #588]	; 800b228 <turn180L+0x2b8>
 800afde:	ed9f 0a93 	vldr	s0, [pc, #588]	; 800b22c <turn180L+0x2bc>
 800afe2:	f7f7 fffb 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800afe6:	2300      	movs	r3, #0
 800afe8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800afea:	2302      	movs	r3, #2
 800afec:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800afee:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800aff2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800aff6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800affa:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800affe:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b002:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b006:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b00a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b00e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b012:	eddf 4a84 	vldr	s9, [pc, #528]	; 800b224 <turn180L+0x2b4>
 800b016:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b01a:	68f8      	ldr	r0, [r7, #12]
 800b01c:	eeb0 2a47 	vmov.f32	s4, s14
 800b020:	eef0 1a45 	vmov.f32	s3, s10
 800b024:	eeb0 1a65 	vmov.f32	s2, s11
 800b028:	eef0 0a46 	vmov.f32	s1, s12
 800b02c:	eeb0 0a66 	vmov.f32	s0, s13
 800b030:	f7f7 ffd4 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b034:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d10c      	bne.n	800b056 <turn180L+0xe6>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b03c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b040:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b044:	eeb0 1a47 	vmov.f32	s2, s14
 800b048:	eddf 0a79 	vldr	s1, [pc, #484]	; 800b230 <turn180L+0x2c0>
 800b04c:	eeb0 0a67 	vmov.f32	s0, s15
 800b050:	f7f8 ff3a 	bl	8003ec8 <mollifier_slalom_table>
 800b054:	e013      	b.n	800b07e <turn180L+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b056:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b05a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b05e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b062:	eef0 2a66 	vmov.f32	s5, s13
 800b066:	eeb0 2a47 	vmov.f32	s4, s14
 800b06a:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800b228 <turn180L+0x2b8>
 800b06e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800b228 <turn180L+0x2b8>
 800b072:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800b230 <turn180L+0x2c0>
 800b076:	eeb0 0a67 	vmov.f32	s0, s15
 800b07a:	f7f8 fdd5 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b07e:	2300      	movs	r3, #0
 800b080:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b082:	2300      	movs	r3, #0
 800b084:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b086:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800b08a:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800b234 <turn180L+0x2c4>
 800b08e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b092:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b096:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b09a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b09e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b0a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b0a6:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b0aa:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b0ae:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800b224 <turn180L+0x2b4>
 800b0b2:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	eeb0 2a47 	vmov.f32	s4, s14
 800b0bc:	eef0 1a65 	vmov.f32	s3, s11
 800b0c0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800b228 <turn180L+0x2b8>
 800b0c4:	eef0 0a46 	vmov.f32	s1, s12
 800b0c8:	eeb0 0a66 	vmov.f32	s0, s13
 800b0cc:	f7f7 ff86 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b0d0:	4b53      	ldr	r3, [pc, #332]	; (800b220 <turn180L+0x2b0>)
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800b0d6:	e09a      	b.n	800b20e <turn180L+0x29e>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b0e0:	2302      	movs	r3, #2
 800b0e2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b0e8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b0ec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b0f0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b0f4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b0f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b0fc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b100:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b104:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b108:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b10c:	eddf 4a45 	vldr	s9, [pc, #276]	; 800b224 <turn180L+0x2b4>
 800b110:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b114:	68f8      	ldr	r0, [r7, #12]
 800b116:	eeb0 2a47 	vmov.f32	s4, s14
 800b11a:	eef0 1a45 	vmov.f32	s3, s10
 800b11e:	eeb0 1a65 	vmov.f32	s2, s11
 800b122:	eef0 0a46 	vmov.f32	s1, s12
 800b126:	eeb0 0a66 	vmov.f32	s0, s13
 800b12a:	f7f7 ff57 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b12e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b132:	2b01      	cmp	r3, #1
 800b134:	d10c      	bne.n	800b150 <turn180L+0x1e0>
			mollifier_slalom_table(turnpara.g_speed,180,turnpara.t_speed);
 800b136:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b13a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b13e:	eeb0 1a47 	vmov.f32	s2, s14
 800b142:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800b230 <turn180L+0x2c0>
 800b146:	eeb0 0a67 	vmov.f32	s0, s15
 800b14a:	f7f8 febd 	bl	8003ec8 <mollifier_slalom_table>
 800b14e:	e013      	b.n	800b178 <turn180L+0x208>
			slalom_table2(turnpara.g_speed,180, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b150:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b154:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b158:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b15c:	eef0 2a66 	vmov.f32	s5, s13
 800b160:	eeb0 2a47 	vmov.f32	s4, s14
 800b164:	eddf 1a30 	vldr	s3, [pc, #192]	; 800b228 <turn180L+0x2b8>
 800b168:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800b228 <turn180L+0x2b8>
 800b16c:	eddf 0a30 	vldr	s1, [pc, #192]	; 800b230 <turn180L+0x2c0>
 800b170:	eeb0 0a67 	vmov.f32	s0, s15
 800b174:	f7f8 fd58 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800b178:	2301      	movs	r3, #1
 800b17a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b180:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b184:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b188:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b18c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b190:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b194:	edd7 7a01 	vldr	s15, [r7, #4]
 800b198:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b19c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b1a0:	eef0 7ae7 	vabs.f32	s15, s15
 800b1a4:	ee17 0a90 	vmov	r0, s15
 800b1a8:	f7f5 f9f6 	bl	8000598 <__aeabi_f2d>
 800b1ac:	f04f 0200 	mov.w	r2, #0
 800b1b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b1b4:	f7f5 fb72 	bl	800089c <__aeabi_ddiv>
 800b1b8:	4602      	mov	r2, r0
 800b1ba:	460b      	mov	r3, r1
 800b1bc:	4614      	mov	r4, r2
 800b1be:	461d      	mov	r5, r3
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	f7f5 f9e8 	bl	8000598 <__aeabi_f2d>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	460b      	mov	r3, r1
 800b1cc:	4620      	mov	r0, r4
 800b1ce:	4629      	mov	r1, r5
 800b1d0:	f7f5 fb64 	bl	800089c <__aeabi_ddiv>
 800b1d4:	4602      	mov	r2, r0
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4610      	mov	r0, r2
 800b1da:	4619      	mov	r1, r3
 800b1dc:	f04f 0200 	mov.w	r2, #0
 800b1e0:	4b15      	ldr	r3, [pc, #84]	; (800b238 <turn180L+0x2c8>)
 800b1e2:	f7f5 f87b 	bl	80002dc <__adddf3>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b1ea:	4610      	mov	r0, r2
 800b1ec:	4619      	mov	r1, r3
 800b1ee:	f7f5 fd03 	bl	8000bf8 <__aeabi_d2f>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	ee02 3a10 	vmov	s4, r3
 800b1fa:	edd7 1a01 	vldr	s3, [r7, #4]
 800b1fe:	ed97 1a01 	vldr	s2, [r7, #4]
 800b202:	eef0 0a68 	vmov.f32	s1, s17
 800b206:	eeb0 0a48 	vmov.f32	s0, s16
 800b20a:	f7f7 fee7 	bl	8002fdc <straight_table2>
}
 800b20e:	bf00      	nop
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	ecbd 8b02 	vpop	{d8}
 800b218:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b21c:	b004      	add	sp, #16
 800b21e:	4770      	bx	lr
 800b220:	20000808 	.word	0x20000808
 800b224:	42340000 	.word	0x42340000
 800b228:	00000000 	.word	0x00000000
 800b22c:	42cd0000 	.word	0x42cd0000
 800b230:	43340000 	.word	0x43340000
 800b234:	42b40000 	.word	0x42b40000
 800b238:	408f4000 	.word	0x408f4000
 800b23c:	00000000 	.word	0x00000000

0800b240 <turn45inR>:



void turn45inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b240:	b084      	sub	sp, #16
 800b242:	b5b0      	push	{r4, r5, r7, lr}
 800b244:	ed2d 8b02 	vpush	{d8}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b254:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b258:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	f040 80ae 	bne.w	800b3be <turn45inR+0x17e>
		highspeed_mode = 1;
 800b262:	4bdd      	ldr	r3, [pc, #884]	; (800b5d8 <turn45inR+0x398>)
 800b264:	2201      	movs	r2, #1
 800b266:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b268:	2301      	movs	r3, #1
 800b26a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b26c:	2300      	movs	r3, #0
 800b26e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b270:	2300      	movs	r3, #0
 800b272:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b274:	2300      	movs	r3, #0
 800b276:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b278:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b27c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b280:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b284:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b288:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b28c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b290:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b294:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800b5dc <turn45inR+0x39c>
 800b298:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b29c:	68f8      	ldr	r0, [r7, #12]
 800b29e:	eeb0 2a47 	vmov.f32	s4, s14
 800b2a2:	eef0 1a46 	vmov.f32	s3, s12
 800b2a6:	eeb0 1a66 	vmov.f32	s2, s13
 800b2aa:	eddf 0acf 	vldr	s1, [pc, #828]	; 800b5e8 <turn45inR+0x3a8>
 800b2ae:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800b5e0 <turn45inR+0x3a0>
 800b2b2:	f7f7 fe93 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b2ba:	2302      	movs	r3, #2
 800b2bc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2be:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b2c2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b2c6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b2ca:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b2ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b2d2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b2d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b2da:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b2de:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b2e2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800b5dc <turn45inR+0x39c>
 800b2e6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	eeb0 2a47 	vmov.f32	s4, s14
 800b2f0:	eef0 1a45 	vmov.f32	s3, s10
 800b2f4:	eeb0 1a65 	vmov.f32	s2, s11
 800b2f8:	eef0 0a46 	vmov.f32	s1, s12
 800b2fc:	eeb0 0a66 	vmov.f32	s0, s13
 800b300:	f7f7 fe6c 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b304:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b308:	2b01      	cmp	r3, #1
 800b30a:	d10c      	bne.n	800b326 <turn45inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b30c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b310:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b314:	eeb0 1a47 	vmov.f32	s2, s14
 800b318:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800b5ec <turn45inR+0x3ac>
 800b31c:	eeb0 0a67 	vmov.f32	s0, s15
 800b320:	f7f8 fdd2 	bl	8003ec8 <mollifier_slalom_table>
 800b324:	e015      	b.n	800b352 <turn45inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b326:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b32a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b32e:	eef1 7a67 	vneg.f32	s15, s15
 800b332:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b336:	eef0 2a66 	vmov.f32	s5, s13
 800b33a:	eeb0 2a67 	vmov.f32	s4, s15
 800b33e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800b5e8 <turn45inR+0x3a8>
 800b342:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800b5e8 <turn45inR+0x3a8>
 800b346:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800b5ec <turn45inR+0x3ac>
 800b34a:	eeb0 0a47 	vmov.f32	s0, s14
 800b34e:	f7f8 fc6b 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b352:	2300      	movs	r3, #0
 800b354:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b356:	2300      	movs	r3, #0
 800b358:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b35c:	4618      	mov	r0, r3
 800b35e:	f7f5 f91b 	bl	8000598 <__aeabi_f2d>
 800b362:	a39b      	add	r3, pc, #620	; (adr r3, 800b5d0 <turn45inR+0x390>)
 800b364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b368:	f7f4 ffb8 	bl	80002dc <__adddf3>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	4610      	mov	r0, r2
 800b372:	4619      	mov	r1, r3
 800b374:	f7f5 fc40 	bl	8000bf8 <__aeabi_d2f>
 800b378:	4603      	mov	r3, r0
 800b37a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b37e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b382:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b386:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b38a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b38e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b392:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b396:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b5dc <turn45inR+0x39c>
 800b39a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b39e:	68f8      	ldr	r0, [r7, #12]
 800b3a0:	eeb0 2a47 	vmov.f32	s4, s14
 800b3a4:	eef0 1a46 	vmov.f32	s3, s12
 800b3a8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800b5e8 <turn45inR+0x3a8>
 800b3ac:	eef0 0a66 	vmov.f32	s1, s13
 800b3b0:	ee00 3a10 	vmov	s0, r3
 800b3b4:	f7f7 fe12 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b3b8:	4b87      	ldr	r3, [pc, #540]	; (800b5d8 <turn45inR+0x398>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b3be:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f040 809d 	bne.w	800b502 <turn45inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b3d0:	2302      	movs	r3, #2
 800b3d2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3d8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b3dc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b3e0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b3e4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b3e8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b3ec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b3f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b3f4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b3f8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b3fc:	eddf 4a77 	vldr	s9, [pc, #476]	; 800b5dc <turn45inR+0x39c>
 800b400:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	eeb0 2a47 	vmov.f32	s4, s14
 800b40a:	eef0 1a45 	vmov.f32	s3, s10
 800b40e:	eeb0 1a65 	vmov.f32	s2, s11
 800b412:	eef0 0a46 	vmov.f32	s1, s12
 800b416:	eeb0 0a66 	vmov.f32	s0, s13
 800b41a:	f7f7 fddf 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b41e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b422:	2b01      	cmp	r3, #1
 800b424:	d10c      	bne.n	800b440 <turn45inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b426:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b42a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b42e:	eeb0 1a47 	vmov.f32	s2, s14
 800b432:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800b5ec <turn45inR+0x3ac>
 800b436:	eeb0 0a67 	vmov.f32	s0, s15
 800b43a:	f7f8 fd45 	bl	8003ec8 <mollifier_slalom_table>
 800b43e:	e015      	b.n	800b46c <turn45inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b440:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b444:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b448:	eef1 7a67 	vneg.f32	s15, s15
 800b44c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b450:	eef0 2a66 	vmov.f32	s5, s13
 800b454:	eeb0 2a67 	vmov.f32	s4, s15
 800b458:	eddf 1a63 	vldr	s3, [pc, #396]	; 800b5e8 <turn45inR+0x3a8>
 800b45c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800b5e8 <turn45inR+0x3a8>
 800b460:	eddf 0a62 	vldr	s1, [pc, #392]	; 800b5ec <turn45inR+0x3ac>
 800b464:	eeb0 0a47 	vmov.f32	s0, s14
 800b468:	f7f8 fbde 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b470:	2300      	movs	r3, #0
 800b472:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b474:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b478:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b47c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b480:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b484:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b488:	edd7 7a01 	vldr	s15, [r7, #4]
 800b48c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b490:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b494:	eef0 7ae7 	vabs.f32	s15, s15
 800b498:	ee17 0a90 	vmov	r0, s15
 800b49c:	f7f5 f87c 	bl	8000598 <__aeabi_f2d>
 800b4a0:	f04f 0200 	mov.w	r2, #0
 800b4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b4a8:	f7f5 f9f8 	bl	800089c <__aeabi_ddiv>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4614      	mov	r4, r2
 800b4b2:	461d      	mov	r5, r3
 800b4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f5 f86e 	bl	8000598 <__aeabi_f2d>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	4629      	mov	r1, r5
 800b4c4:	f7f5 f9ea 	bl	800089c <__aeabi_ddiv>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f04f 0200 	mov.w	r2, #0
 800b4d4:	4b43      	ldr	r3, [pc, #268]	; (800b5e4 <turn45inR+0x3a4>)
 800b4d6:	f7f4 ff01 	bl	80002dc <__adddf3>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f7f5 fb89 	bl	8000bf8 <__aeabi_d2f>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	ee02 3a10 	vmov	s4, r3
 800b4ee:	edd7 1a01 	vldr	s3, [r7, #4]
 800b4f2:	ed97 1a01 	vldr	s2, [r7, #4]
 800b4f6:	eef0 0a68 	vmov.f32	s1, s17
 800b4fa:	eeb0 0a48 	vmov.f32	s0, s16
 800b4fe:	f7f7 fd6d 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b502:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b506:	2b01      	cmp	r3, #1
 800b508:	f240 80d0 	bls.w	800b6ac <turn45inR+0x46c>

		highspeed_mode = 1;
 800b50c:	4b32      	ldr	r3, [pc, #200]	; (800b5d8 <turn45inR+0x398>)
 800b50e:	2201      	movs	r2, #1
 800b510:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b512:	2301      	movs	r3, #1
 800b514:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b516:	2300      	movs	r3, #0
 800b518:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b51e:	2300      	movs	r3, #0
 800b520:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b522:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b526:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b52a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b52e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b532:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b536:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b53a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b53e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800b5dc <turn45inR+0x39c>
 800b542:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b546:	68f8      	ldr	r0, [r7, #12]
 800b548:	eeb0 2a47 	vmov.f32	s4, s14
 800b54c:	eef0 1a46 	vmov.f32	s3, s12
 800b550:	eeb0 1a66 	vmov.f32	s2, s13
 800b554:	eddf 0a24 	vldr	s1, [pc, #144]	; 800b5e8 <turn45inR+0x3a8>
 800b558:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800b5e0 <turn45inR+0x3a0>
 800b55c:	f7f7 fd3e 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b560:	2300      	movs	r3, #0
 800b562:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b564:	2302      	movs	r3, #2
 800b566:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b568:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b56c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b570:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b574:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b578:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b57c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b580:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b584:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b588:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b58c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800b5dc <turn45inR+0x39c>
 800b590:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	eeb0 2a47 	vmov.f32	s4, s14
 800b59a:	eef0 1a45 	vmov.f32	s3, s10
 800b59e:	eeb0 1a65 	vmov.f32	s2, s11
 800b5a2:	eef0 0a46 	vmov.f32	s1, s12
 800b5a6:	eeb0 0a66 	vmov.f32	s0, s13
 800b5aa:	f7f7 fd17 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b5ae:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d11c      	bne.n	800b5f0 <turn45inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800b5b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b5ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b5be:	eeb0 1a47 	vmov.f32	s2, s14
 800b5c2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800b5ec <turn45inR+0x3ac>
 800b5c6:	eeb0 0a67 	vmov.f32	s0, s15
 800b5ca:	f7f8 fc7d 	bl	8003ec8 <mollifier_slalom_table>
 800b5ce:	e025      	b.n	800b61c <turn45inR+0x3dc>
 800b5d0:	c022ec18 	.word	0xc022ec18
 800b5d4:	405fd1de 	.word	0x405fd1de
 800b5d8:	20000808 	.word	0x20000808
 800b5dc:	42340000 	.word	0x42340000
 800b5e0:	42cd0000 	.word	0x42cd0000
 800b5e4:	408f4000 	.word	0x408f4000
 800b5e8:	00000000 	.word	0x00000000
 800b5ec:	c2340000 	.word	0xc2340000
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800b5f0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b5f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800b5f8:	eef1 7a67 	vneg.f32	s15, s15
 800b5fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b600:	eef0 2a66 	vmov.f32	s5, s13
 800b604:	eeb0 2a67 	vmov.f32	s4, s15
 800b608:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800b5e8 <turn45inR+0x3a8>
 800b60c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800b5e8 <turn45inR+0x3a8>
 800b610:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800b5ec <turn45inR+0x3ac>
 800b614:	eeb0 0a47 	vmov.f32	s0, s14
 800b618:	f7f8 fb06 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b61c:	2300      	movs	r3, #0
 800b61e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b620:	2300      	movs	r3, #0
 800b622:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b624:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b628:	3b02      	subs	r3, #2
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f4 ffa2 	bl	8000574 <__aeabi_i2d>
 800b630:	a325      	add	r3, pc, #148	; (adr r3, 800b6c8 <turn45inR+0x488>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f5 f807 	bl	8000648 <__aeabi_dmul>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4614      	mov	r4, r2
 800b640:	461d      	mov	r5, r3
 800b642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b644:	4618      	mov	r0, r3
 800b646:	f7f4 ffa7 	bl	8000598 <__aeabi_f2d>
 800b64a:	4602      	mov	r2, r0
 800b64c:	460b      	mov	r3, r1
 800b64e:	4620      	mov	r0, r4
 800b650:	4629      	mov	r1, r5
 800b652:	f7f4 fe43 	bl	80002dc <__adddf3>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4610      	mov	r0, r2
 800b65c:	4619      	mov	r1, r3
 800b65e:	f7f5 facb 	bl	8000bf8 <__aeabi_d2f>
 800b662:	4603      	mov	r3, r0
 800b664:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b668:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b66c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b670:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b674:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b67c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b680:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b684:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800b6c0 <turn45inR+0x480>
 800b688:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800b68c:	68f8      	ldr	r0, [r7, #12]
 800b68e:	eeb0 2a47 	vmov.f32	s4, s14
 800b692:	eef0 1a65 	vmov.f32	s3, s11
 800b696:	eeb0 1a46 	vmov.f32	s2, s12
 800b69a:	eef0 0a66 	vmov.f32	s1, s13
 800b69e:	ee00 3a10 	vmov	s0, r3
 800b6a2:	f7f7 fc9b 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b6a6:	4b07      	ldr	r3, [pc, #28]	; (800b6c4 <turn45inR+0x484>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	701a      	strb	r2, [r3, #0]
	}

}
 800b6ac:	bf00      	nop
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	ecbd 8b02 	vpop	{d8}
 800b6b6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800b6ba:	b004      	add	sp, #16
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	42340000 	.word	0x42340000
 800b6c4:	20000808 	.word	0x20000808
 800b6c8:	c022ec18 	.word	0xc022ec18
 800b6cc:	404fd1de 	.word	0x404fd1de

0800b6d0 <turn45inL>:

void turn45inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	b5b0      	push	{r4, r5, r7, lr}
 800b6d4:	ed2d 8b02 	vpush	{d8}
 800b6d8:	b084      	sub	sp, #16
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800b6e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800b6e4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800b6e8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	f040 80ac 	bne.w	800b84a <turn45inL+0x17a>
		highspeed_mode = 1;
 800b6f2:	4bdb      	ldr	r3, [pc, #876]	; (800ba60 <turn45inL+0x390>)
 800b6f4:	2201      	movs	r2, #1
 800b6f6:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b700:	2300      	movs	r3, #0
 800b702:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b704:	2300      	movs	r3, #0
 800b706:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b708:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b70c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b710:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b714:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b718:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b71c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b720:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b724:	eddf 5ad2 	vldr	s11, [pc, #840]	; 800ba70 <turn45inL+0x3a0>
 800b728:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b72c:	68f8      	ldr	r0, [r7, #12]
 800b72e:	eeb0 2a47 	vmov.f32	s4, s14
 800b732:	eef0 1a46 	vmov.f32	s3, s12
 800b736:	eeb0 1a66 	vmov.f32	s2, s13
 800b73a:	eddf 0acc 	vldr	s1, [pc, #816]	; 800ba6c <turn45inL+0x39c>
 800b73e:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 800ba64 <turn45inL+0x394>
 800b742:	f7f7 fc4b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b746:	2300      	movs	r3, #0
 800b748:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b74a:	2302      	movs	r3, #2
 800b74c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b74e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b752:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b756:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b75a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b75e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b762:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b766:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b76a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b76e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b772:	eddf 4abf 	vldr	s9, [pc, #764]	; 800ba70 <turn45inL+0x3a0>
 800b776:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	eeb0 2a47 	vmov.f32	s4, s14
 800b780:	eef0 1a45 	vmov.f32	s3, s10
 800b784:	eeb0 1a65 	vmov.f32	s2, s11
 800b788:	eef0 0a46 	vmov.f32	s1, s12
 800b78c:	eeb0 0a66 	vmov.f32	s0, s13
 800b790:	f7f7 fc24 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b794:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b798:	2b01      	cmp	r3, #1
 800b79a:	d10c      	bne.n	800b7b6 <turn45inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b79c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7a0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7a4:	eeb0 1a47 	vmov.f32	s2, s14
 800b7a8:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800ba70 <turn45inL+0x3a0>
 800b7ac:	eeb0 0a67 	vmov.f32	s0, s15
 800b7b0:	f7f8 fb8a 	bl	8003ec8 <mollifier_slalom_table>
 800b7b4:	e013      	b.n	800b7de <turn45inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b7b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b7ba:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b7be:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b7c2:	eef0 2a66 	vmov.f32	s5, s13
 800b7c6:	eeb0 2a47 	vmov.f32	s4, s14
 800b7ca:	eddf 1aa8 	vldr	s3, [pc, #672]	; 800ba6c <turn45inL+0x39c>
 800b7ce:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 800ba6c <turn45inL+0x39c>
 800b7d2:	eddf 0aa7 	vldr	s1, [pc, #668]	; 800ba70 <turn45inL+0x3a0>
 800b7d6:	eeb0 0a67 	vmov.f32	s0, s15
 800b7da:	f7f8 fa25 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7f4 fed5 	bl	8000598 <__aeabi_f2d>
 800b7ee:	a39a      	add	r3, pc, #616	; (adr r3, 800ba58 <turn45inL+0x388>)
 800b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f4:	f7f4 fd72 	bl	80002dc <__adddf3>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4610      	mov	r0, r2
 800b7fe:	4619      	mov	r1, r3
 800b800:	f7f5 f9fa 	bl	8000bf8 <__aeabi_d2f>
 800b804:	4603      	mov	r3, r0
 800b806:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b80a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b80e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b812:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b81a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b81e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800b822:	eddf 5a93 	vldr	s11, [pc, #588]	; 800ba70 <turn45inL+0x3a0>
 800b826:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b82a:	68f8      	ldr	r0, [r7, #12]
 800b82c:	eeb0 2a47 	vmov.f32	s4, s14
 800b830:	eef0 1a46 	vmov.f32	s3, s12
 800b834:	ed9f 1a8d 	vldr	s2, [pc, #564]	; 800ba6c <turn45inL+0x39c>
 800b838:	eef0 0a66 	vmov.f32	s1, s13
 800b83c:	ee00 3a10 	vmov	s0, r3
 800b840:	f7f7 fbcc 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800b844:	4b86      	ldr	r3, [pc, #536]	; (800ba60 <turn45inL+0x390>)
 800b846:	2200      	movs	r2, #0
 800b848:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800b84a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b84e:	2b00      	cmp	r3, #0
 800b850:	f040 809b 	bne.w	800b98a <turn45inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800b854:	2300      	movs	r3, #0
 800b856:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b858:	2300      	movs	r3, #0
 800b85a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800b85c:	2302      	movs	r3, #2
 800b85e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b860:	2300      	movs	r3, #0
 800b862:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b864:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b868:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b86c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b870:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b874:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b878:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b87c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b880:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800b884:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b888:	eddf 4a79 	vldr	s9, [pc, #484]	; 800ba70 <turn45inL+0x3a0>
 800b88c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800b890:	68f8      	ldr	r0, [r7, #12]
 800b892:	eeb0 2a47 	vmov.f32	s4, s14
 800b896:	eef0 1a45 	vmov.f32	s3, s10
 800b89a:	eeb0 1a65 	vmov.f32	s2, s11
 800b89e:	eef0 0a46 	vmov.f32	s1, s12
 800b8a2:	eeb0 0a66 	vmov.f32	s0, s13
 800b8a6:	f7f7 fb99 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800b8aa:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b8ae:	2b01      	cmp	r3, #1
 800b8b0:	d10c      	bne.n	800b8cc <turn45inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800b8b2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8b6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8ba:	eeb0 1a47 	vmov.f32	s2, s14
 800b8be:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800ba70 <turn45inL+0x3a0>
 800b8c2:	eeb0 0a67 	vmov.f32	s0, s15
 800b8c6:	f7f8 faff 	bl	8003ec8 <mollifier_slalom_table>
 800b8ca:	e013      	b.n	800b8f4 <turn45inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800b8cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b8d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800b8d4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800b8d8:	eef0 2a66 	vmov.f32	s5, s13
 800b8dc:	eeb0 2a47 	vmov.f32	s4, s14
 800b8e0:	eddf 1a62 	vldr	s3, [pc, #392]	; 800ba6c <turn45inL+0x39c>
 800b8e4:	ed9f 1a61 	vldr	s2, [pc, #388]	; 800ba6c <turn45inL+0x39c>
 800b8e8:	eddf 0a61 	vldr	s1, [pc, #388]	; 800ba70 <turn45inL+0x3a0>
 800b8ec:	eeb0 0a67 	vmov.f32	s0, s15
 800b8f0:	f7f8 f99a 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b8fc:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800b900:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800b904:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b908:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b90c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b910:	edd7 7a01 	vldr	s15, [r7, #4]
 800b914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b918:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b91c:	eef0 7ae7 	vabs.f32	s15, s15
 800b920:	ee17 0a90 	vmov	r0, s15
 800b924:	f7f4 fe38 	bl	8000598 <__aeabi_f2d>
 800b928:	f04f 0200 	mov.w	r2, #0
 800b92c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b930:	f7f4 ffb4 	bl	800089c <__aeabi_ddiv>
 800b934:	4602      	mov	r2, r0
 800b936:	460b      	mov	r3, r1
 800b938:	4614      	mov	r4, r2
 800b93a:	461d      	mov	r5, r3
 800b93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b93e:	4618      	mov	r0, r3
 800b940:	f7f4 fe2a 	bl	8000598 <__aeabi_f2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4620      	mov	r0, r4
 800b94a:	4629      	mov	r1, r5
 800b94c:	f7f4 ffa6 	bl	800089c <__aeabi_ddiv>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4610      	mov	r0, r2
 800b956:	4619      	mov	r1, r3
 800b958:	f04f 0200 	mov.w	r2, #0
 800b95c:	4b42      	ldr	r3, [pc, #264]	; (800ba68 <turn45inL+0x398>)
 800b95e:	f7f4 fcbd 	bl	80002dc <__adddf3>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800b966:	4610      	mov	r0, r2
 800b968:	4619      	mov	r1, r3
 800b96a:	f7f5 f945 	bl	8000bf8 <__aeabi_d2f>
 800b96e:	4603      	mov	r3, r0
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	ee02 3a10 	vmov	s4, r3
 800b976:	edd7 1a01 	vldr	s3, [r7, #4]
 800b97a:	ed97 1a01 	vldr	s2, [r7, #4]
 800b97e:	eef0 0a68 	vmov.f32	s1, s17
 800b982:	eeb0 0a48 	vmov.f32	s0, s16
 800b986:	f7f7 fb29 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800b98a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b98e:	2b01      	cmp	r3, #1
 800b990:	f240 80cc 	bls.w	800bb2c <turn45inL+0x45c>

		highspeed_mode = 1;
 800b994:	4b32      	ldr	r3, [pc, #200]	; (800ba60 <turn45inL+0x390>)
 800b996:	2201      	movs	r2, #1
 800b998:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800b99a:	2301      	movs	r3, #1
 800b99c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800b99e:	2300      	movs	r3, #0
 800b9a0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9aa:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800b9ae:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800b9b2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800b9b6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800b9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b9be:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800b9c2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800b9c6:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800ba70 <turn45inL+0x3a0>
 800b9ca:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800b9ce:	68f8      	ldr	r0, [r7, #12]
 800b9d0:	eeb0 2a47 	vmov.f32	s4, s14
 800b9d4:	eef0 1a46 	vmov.f32	s3, s12
 800b9d8:	eeb0 1a66 	vmov.f32	s2, s13
 800b9dc:	eddf 0a23 	vldr	s1, [pc, #140]	; 800ba6c <turn45inL+0x39c>
 800b9e0:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800ba64 <turn45inL+0x394>
 800b9e4:	f7f7 fafa 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800b9ec:	2302      	movs	r3, #2
 800b9ee:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800b9f0:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800b9f4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800b9f8:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800b9fc:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ba00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ba04:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba08:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ba0c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ba10:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ba14:	eddf 4a16 	vldr	s9, [pc, #88]	; 800ba70 <turn45inL+0x3a0>
 800ba18:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	eeb0 2a47 	vmov.f32	s4, s14
 800ba22:	eef0 1a45 	vmov.f32	s3, s10
 800ba26:	eeb0 1a65 	vmov.f32	s2, s11
 800ba2a:	eef0 0a46 	vmov.f32	s1, s12
 800ba2e:	eeb0 0a66 	vmov.f32	s0, s13
 800ba32:	f7f7 fad3 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ba36:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d11a      	bne.n	800ba74 <turn45inL+0x3a4>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ba3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba42:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba46:	eeb0 1a47 	vmov.f32	s2, s14
 800ba4a:	eddf 0a09 	vldr	s1, [pc, #36]	; 800ba70 <turn45inL+0x3a0>
 800ba4e:	eeb0 0a67 	vmov.f32	s0, s15
 800ba52:	f7f8 fa39 	bl	8003ec8 <mollifier_slalom_table>
 800ba56:	e021      	b.n	800ba9c <turn45inL+0x3cc>
 800ba58:	c022ec18 	.word	0xc022ec18
 800ba5c:	405fd1de 	.word	0x405fd1de
 800ba60:	20000808 	.word	0x20000808
 800ba64:	42cd0000 	.word	0x42cd0000
 800ba68:	408f4000 	.word	0x408f4000
 800ba6c:	00000000 	.word	0x00000000
 800ba70:	42340000 	.word	0x42340000
		}else{
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ba74:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ba78:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ba7c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ba80:	eef0 2a66 	vmov.f32	s5, s13
 800ba84:	eeb0 2a47 	vmov.f32	s4, s14
 800ba88:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800ba6c <turn45inL+0x39c>
 800ba8c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800ba6c <turn45inL+0x39c>
 800ba90:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800ba70 <turn45inL+0x3a0>
 800ba94:	eeb0 0a67 	vmov.f32	s0, s15
 800ba98:	f7f8 f8c6 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800baa4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800baa8:	3b02      	subs	r3, #2
 800baaa:	4618      	mov	r0, r3
 800baac:	f7f4 fd62 	bl	8000574 <__aeabi_i2d>
 800bab0:	a325      	add	r3, pc, #148	; (adr r3, 800bb48 <turn45inL+0x478>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fdc7 	bl	8000648 <__aeabi_dmul>
 800baba:	4602      	mov	r2, r0
 800babc:	460b      	mov	r3, r1
 800babe:	4614      	mov	r4, r2
 800bac0:	461d      	mov	r5, r3
 800bac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7f4 fd67 	bl	8000598 <__aeabi_f2d>
 800baca:	4602      	mov	r2, r0
 800bacc:	460b      	mov	r3, r1
 800bace:	4620      	mov	r0, r4
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7f4 fc03 	bl	80002dc <__adddf3>
 800bad6:	4602      	mov	r2, r0
 800bad8:	460b      	mov	r3, r1
 800bada:	4610      	mov	r0, r2
 800badc:	4619      	mov	r1, r3
 800bade:	f7f5 f88b 	bl	8000bf8 <__aeabi_d2f>
 800bae2:	4603      	mov	r3, r0
 800bae4:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bae8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800baec:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800baf0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800baf4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800baf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bafc:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bb00:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bb04:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bb40 <turn45inL+0x470>
 800bb08:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	eeb0 2a47 	vmov.f32	s4, s14
 800bb12:	eef0 1a65 	vmov.f32	s3, s11
 800bb16:	eeb0 1a46 	vmov.f32	s2, s12
 800bb1a:	eef0 0a66 	vmov.f32	s1, s13
 800bb1e:	ee00 3a10 	vmov	s0, r3
 800bb22:	f7f7 fa5b 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bb26:	4b07      	ldr	r3, [pc, #28]	; (800bb44 <turn45inL+0x474>)
 800bb28:	2200      	movs	r2, #0
 800bb2a:	701a      	strb	r2, [r3, #0]
	}

}
 800bb2c:	bf00      	nop
 800bb2e:	3710      	adds	r7, #16
 800bb30:	46bd      	mov	sp, r7
 800bb32:	ecbd 8b02 	vpop	{d8}
 800bb36:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bb3a:	b004      	add	sp, #16
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop
 800bb40:	42340000 	.word	0x42340000
 800bb44:	20000808 	.word	0x20000808
 800bb48:	c022ec18 	.word	0xc022ec18
 800bb4c:	404fd1de 	.word	0x404fd1de

0800bb50 <turn135inR>:

void turn135inR(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bb50:	b084      	sub	sp, #16
 800bb52:	b5b0      	push	{r4, r5, r7, lr}
 800bb54:	ed2d 8b02 	vpush	{d8}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bb60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bb64:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bb68:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	f040 80ae 	bne.w	800bcce <turn135inR+0x17e>
		highspeed_mode = 1;
 800bb72:	4bdd      	ldr	r3, [pc, #884]	; (800bee8 <turn135inR+0x398>)
 800bb74:	2201      	movs	r2, #1
 800bb76:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800bb78:	2301      	movs	r3, #1
 800bb7a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800bb80:	2300      	movs	r3, #0
 800bb82:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bb88:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bb8c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bb90:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bb94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bb98:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bb9c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bba0:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800bba4:	eddf 5ad1 	vldr	s11, [pc, #836]	; 800beec <turn135inR+0x39c>
 800bba8:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	eeb0 2a47 	vmov.f32	s4, s14
 800bbb2:	eef0 1a46 	vmov.f32	s3, s12
 800bbb6:	eeb0 1a66 	vmov.f32	s2, s13
 800bbba:	eddf 0acf 	vldr	s1, [pc, #828]	; 800bef8 <turn135inR+0x3a8>
 800bbbe:	ed9f 0acc 	vldr	s0, [pc, #816]	; 800bef0 <turn135inR+0x3a0>
 800bbc2:	f7f7 fa0b 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800bbca:	2302      	movs	r3, #2
 800bbcc:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbce:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bbd2:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bbd6:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bbda:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bbde:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bbe2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bbe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bbea:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bbee:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bbf2:	eddf 4abe 	vldr	s9, [pc, #760]	; 800beec <turn135inR+0x39c>
 800bbf6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bbfa:	68f8      	ldr	r0, [r7, #12]
 800bbfc:	eeb0 2a47 	vmov.f32	s4, s14
 800bc00:	eef0 1a45 	vmov.f32	s3, s10
 800bc04:	eeb0 1a65 	vmov.f32	s2, s11
 800bc08:	eef0 0a46 	vmov.f32	s1, s12
 800bc0c:	eeb0 0a66 	vmov.f32	s0, s13
 800bc10:	f7f7 f9e4 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bc14:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	d10c      	bne.n	800bc36 <turn135inR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bc1c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc20:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bc24:	eeb0 1a47 	vmov.f32	s2, s14
 800bc28:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800befc <turn135inR+0x3ac>
 800bc2c:	eeb0 0a67 	vmov.f32	s0, s15
 800bc30:	f7f8 f94a 	bl	8003ec8 <mollifier_slalom_table>
 800bc34:	e015      	b.n	800bc62 <turn135inR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bc36:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc3a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bc3e:	eef1 7a67 	vneg.f32	s15, s15
 800bc42:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bc46:	eef0 2a66 	vmov.f32	s5, s13
 800bc4a:	eeb0 2a67 	vmov.f32	s4, s15
 800bc4e:	eddf 1aaa 	vldr	s3, [pc, #680]	; 800bef8 <turn135inR+0x3a8>
 800bc52:	ed9f 1aa9 	vldr	s2, [pc, #676]	; 800bef8 <turn135inR+0x3a8>
 800bc56:	eddf 0aa9 	vldr	s1, [pc, #676]	; 800befc <turn135inR+0x3ac>
 800bc5a:	eeb0 0a47 	vmov.f32	s0, s14
 800bc5e:	f7f7 ffe3 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bc62:	2300      	movs	r3, #0
 800bc64:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bc66:	2300      	movs	r3, #0
 800bc68:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7f4 fc93 	bl	8000598 <__aeabi_f2d>
 800bc72:	a39b      	add	r3, pc, #620	; (adr r3, 800bee0 <turn135inR+0x390>)
 800bc74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc78:	f7f4 fb30 	bl	80002dc <__adddf3>
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	460b      	mov	r3, r1
 800bc80:	4610      	mov	r0, r2
 800bc82:	4619      	mov	r1, r3
 800bc84:	f7f4 ffb8 	bl	8000bf8 <__aeabi_d2f>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bc8e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bc92:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bc96:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bc9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bc9e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800bca2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800bca6:	eddf 5a91 	vldr	s11, [pc, #580]	; 800beec <turn135inR+0x39c>
 800bcaa:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	eeb0 2a47 	vmov.f32	s4, s14
 800bcb4:	eef0 1a46 	vmov.f32	s3, s12
 800bcb8:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 800bef8 <turn135inR+0x3a8>
 800bcbc:	eef0 0a66 	vmov.f32	s1, s13
 800bcc0:	ee00 3a10 	vmov	s0, r3
 800bcc4:	f7f7 f98a 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bcc8:	4b87      	ldr	r3, [pc, #540]	; (800bee8 <turn135inR+0x398>)
 800bcca:	2200      	movs	r2, #0
 800bccc:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800bcce:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f040 809d 	bne.w	800be12 <turn135inR+0x2c2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800bcdc:	2300      	movs	r3, #0
 800bcde:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800bce0:	2302      	movs	r3, #2
 800bce2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bce8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800bcec:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bcf0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800bcf4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bcf8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bcfc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd00:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd04:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800bd08:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bd0c:	eddf 4a77 	vldr	s9, [pc, #476]	; 800beec <turn135inR+0x39c>
 800bd10:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bd14:	68f8      	ldr	r0, [r7, #12]
 800bd16:	eeb0 2a47 	vmov.f32	s4, s14
 800bd1a:	eef0 1a45 	vmov.f32	s3, s10
 800bd1e:	eeb0 1a65 	vmov.f32	s2, s11
 800bd22:	eef0 0a46 	vmov.f32	s1, s12
 800bd26:	eeb0 0a66 	vmov.f32	s0, s13
 800bd2a:	f7f7 f957 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bd2e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d10c      	bne.n	800bd50 <turn135inR+0x200>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bd36:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd3a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bd3e:	eeb0 1a47 	vmov.f32	s2, s14
 800bd42:	eddf 0a6e 	vldr	s1, [pc, #440]	; 800befc <turn135inR+0x3ac>
 800bd46:	eeb0 0a67 	vmov.f32	s0, s15
 800bd4a:	f7f8 f8bd 	bl	8003ec8 <mollifier_slalom_table>
 800bd4e:	e015      	b.n	800bd7c <turn135inR+0x22c>
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bd50:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd54:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bd58:	eef1 7a67 	vneg.f32	s15, s15
 800bd5c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bd60:	eef0 2a66 	vmov.f32	s5, s13
 800bd64:	eeb0 2a67 	vmov.f32	s4, s15
 800bd68:	eddf 1a63 	vldr	s3, [pc, #396]	; 800bef8 <turn135inR+0x3a8>
 800bd6c:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800bef8 <turn135inR+0x3a8>
 800bd70:	eddf 0a62 	vldr	s1, [pc, #392]	; 800befc <turn135inR+0x3ac>
 800bd74:	eeb0 0a47 	vmov.f32	s0, s14
 800bd78:	f7f7 ff56 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bd80:	2300      	movs	r3, #0
 800bd82:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bd84:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800bd88:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800bd8c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bd90:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bd94:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bd98:	edd7 7a01 	vldr	s15, [r7, #4]
 800bd9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800bda0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bda4:	eef0 7ae7 	vabs.f32	s15, s15
 800bda8:	ee17 0a90 	vmov	r0, s15
 800bdac:	f7f4 fbf4 	bl	8000598 <__aeabi_f2d>
 800bdb0:	f04f 0200 	mov.w	r2, #0
 800bdb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bdb8:	f7f4 fd70 	bl	800089c <__aeabi_ddiv>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4614      	mov	r4, r2
 800bdc2:	461d      	mov	r5, r3
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7f4 fbe6 	bl	8000598 <__aeabi_f2d>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4620      	mov	r0, r4
 800bdd2:	4629      	mov	r1, r5
 800bdd4:	f7f4 fd62 	bl	800089c <__aeabi_ddiv>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4610      	mov	r0, r2
 800bdde:	4619      	mov	r1, r3
 800bde0:	f04f 0200 	mov.w	r2, #0
 800bde4:	4b43      	ldr	r3, [pc, #268]	; (800bef4 <turn135inR+0x3a4>)
 800bde6:	f7f4 fa79 	bl	80002dc <__adddf3>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800bdee:	4610      	mov	r0, r2
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	f7f4 ff01 	bl	8000bf8 <__aeabi_d2f>
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	68f8      	ldr	r0, [r7, #12]
 800bdfa:	ee02 3a10 	vmov	s4, r3
 800bdfe:	edd7 1a01 	vldr	s3, [r7, #4]
 800be02:	ed97 1a01 	vldr	s2, [r7, #4]
 800be06:	eef0 0a68 	vmov.f32	s1, s17
 800be0a:	eeb0 0a48 	vmov.f32	s0, s16
 800be0e:	f7f7 f8e5 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800be12:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800be16:	2b01      	cmp	r3, #1
 800be18:	f240 80d0 	bls.w	800bfbc <turn135inR+0x46c>

		highspeed_mode = 1;
 800be1c:	4b32      	ldr	r3, [pc, #200]	; (800bee8 <turn135inR+0x398>)
 800be1e:	2201      	movs	r2, #1
 800be20:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800be22:	2301      	movs	r3, #1
 800be24:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800be26:	2300      	movs	r3, #0
 800be28:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800be2e:	2300      	movs	r3, #0
 800be30:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be32:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800be36:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be3e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be46:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800be4a:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800be4e:	eddf 5a27 	vldr	s11, [pc, #156]	; 800beec <turn135inR+0x39c>
 800be52:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800be56:	68f8      	ldr	r0, [r7, #12]
 800be58:	eeb0 2a47 	vmov.f32	s4, s14
 800be5c:	eef0 1a46 	vmov.f32	s3, s12
 800be60:	eeb0 1a66 	vmov.f32	s2, s13
 800be64:	eddf 0a24 	vldr	s1, [pc, #144]	; 800bef8 <turn135inR+0x3a8>
 800be68:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800bef0 <turn135inR+0x3a0>
 800be6c:	f7f7 f8b6 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800be70:	2300      	movs	r3, #0
 800be72:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800be74:	2302      	movs	r3, #2
 800be76:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be78:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800be7c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800be80:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800be84:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800be88:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800be8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800be90:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be94:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800be98:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800be9c:	eddf 4a13 	vldr	s9, [pc, #76]	; 800beec <turn135inR+0x39c>
 800bea0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800bea4:	68f8      	ldr	r0, [r7, #12]
 800bea6:	eeb0 2a47 	vmov.f32	s4, s14
 800beaa:	eef0 1a45 	vmov.f32	s3, s10
 800beae:	eeb0 1a65 	vmov.f32	s2, s11
 800beb2:	eef0 0a46 	vmov.f32	s1, s12
 800beb6:	eeb0 0a66 	vmov.f32	s0, s13
 800beba:	f7f7 f88f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800bebe:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d11c      	bne.n	800bf00 <turn135inR+0x3b0>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800bec6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800beca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800bece:	eeb0 1a47 	vmov.f32	s2, s14
 800bed2:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800befc <turn135inR+0x3ac>
 800bed6:	eeb0 0a67 	vmov.f32	s0, s15
 800beda:	f7f7 fff5 	bl	8003ec8 <mollifier_slalom_table>
 800bede:	e025      	b.n	800bf2c <turn135inR+0x3dc>
 800bee0:	c022ec18 	.word	0xc022ec18
 800bee4:	405fd1de 	.word	0x405fd1de
 800bee8:	20000808 	.word	0x20000808
 800beec:	42340000 	.word	0x42340000
 800bef0:	42cd0000 	.word	0x42cd0000
 800bef4:	408f4000 	.word	0x408f4000
 800bef8:	00000000 	.word	0x00000000
 800befc:	c3070000 	.word	0xc3070000
		}else{
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800bf00:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf04:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800bf08:	eef1 7a67 	vneg.f32	s15, s15
 800bf0c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800bf10:	eef0 2a66 	vmov.f32	s5, s13
 800bf14:	eeb0 2a67 	vmov.f32	s4, s15
 800bf18:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800bef8 <turn135inR+0x3a8>
 800bf1c:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800bef8 <turn135inR+0x3a8>
 800bf20:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800befc <turn135inR+0x3ac>
 800bf24:	eeb0 0a47 	vmov.f32	s0, s14
 800bf28:	f7f7 fe7e 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800bf30:	2300      	movs	r3, #0
 800bf32:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bf38:	3b02      	subs	r3, #2
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7f4 fb1a 	bl	8000574 <__aeabi_i2d>
 800bf40:	a325      	add	r3, pc, #148	; (adr r3, 800bfd8 <turn135inR+0x488>)
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	f7f4 fb7f 	bl	8000648 <__aeabi_dmul>
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4614      	mov	r4, r2
 800bf50:	461d      	mov	r5, r3
 800bf52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7f4 fb1f 	bl	8000598 <__aeabi_f2d>
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4620      	mov	r0, r4
 800bf60:	4629      	mov	r1, r5
 800bf62:	f7f4 f9bb 	bl	80002dc <__adddf3>
 800bf66:	4602      	mov	r2, r0
 800bf68:	460b      	mov	r3, r1
 800bf6a:	4610      	mov	r0, r2
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	f7f4 fe43 	bl	8000bf8 <__aeabi_d2f>
 800bf72:	4603      	mov	r3, r0
 800bf74:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800bf78:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800bf7c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800bf80:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf84:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bf88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf8c:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800bf90:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800bf94:	ed9f 5a0e 	vldr	s10, [pc, #56]	; 800bfd0 <turn135inR+0x480>
 800bf98:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	eeb0 2a47 	vmov.f32	s4, s14
 800bfa2:	eef0 1a65 	vmov.f32	s3, s11
 800bfa6:	eeb0 1a46 	vmov.f32	s2, s12
 800bfaa:	eef0 0a66 	vmov.f32	s1, s13
 800bfae:	ee00 3a10 	vmov	s0, r3
 800bfb2:	f7f7 f813 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800bfb6:	4b07      	ldr	r3, [pc, #28]	; (800bfd4 <turn135inR+0x484>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	701a      	strb	r2, [r3, #0]
	}

}
 800bfbc:	bf00      	nop
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	ecbd 8b02 	vpop	{d8}
 800bfc6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800bfca:	b004      	add	sp, #16
 800bfcc:	4770      	bx	lr
 800bfce:	bf00      	nop
 800bfd0:	42340000 	.word	0x42340000
 800bfd4:	20000808 	.word	0x20000808
 800bfd8:	c022ec18 	.word	0xc022ec18
 800bfdc:	404fd1de 	.word	0x404fd1de

0800bfe0 <turn135inL>:

void turn135inL(parameter turnpara, char test_mode,char mollifier_mode,float end_velocity) {
 800bfe0:	b084      	sub	sp, #16
 800bfe2:	b5b0      	push	{r4, r5, r7, lr}
 800bfe4:	ed2d 8b02 	vpush	{d8}
 800bfe8:	b084      	sub	sp, #16
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800bff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800bff4:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800bff8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	f040 80ac 	bne.w	800c15a <turn135inL+0x17a>
		highspeed_mode = 1;
 800c002:	4bdb      	ldr	r3, [pc, #876]	; (800c370 <turn135inL+0x390>)
 800c004:	2201      	movs	r2, #1
 800c006:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c008:	2301      	movs	r3, #1
 800c00a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c00c:	2300      	movs	r3, #0
 800c00e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c010:	2300      	movs	r3, #0
 800c012:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c014:	2300      	movs	r3, #0
 800c016:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c018:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c01c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c020:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c024:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c028:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c02c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c030:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c034:	eddf 5acf 	vldr	s11, [pc, #828]	; 800c374 <turn135inL+0x394>
 800c038:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c03c:	68f8      	ldr	r0, [r7, #12]
 800c03e:	eeb0 2a47 	vmov.f32	s4, s14
 800c042:	eef0 1a46 	vmov.f32	s3, s12
 800c046:	eeb0 1a66 	vmov.f32	s2, s13
 800c04a:	eddf 0acd 	vldr	s1, [pc, #820]	; 800c380 <turn135inL+0x3a0>
 800c04e:	ed9f 0aca 	vldr	s0, [pc, #808]	; 800c378 <turn135inL+0x398>
 800c052:	f7f6 ffc3 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c056:	2300      	movs	r3, #0
 800c058:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c05a:	2302      	movs	r3, #2
 800c05c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c05e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c062:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c066:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c06a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c06e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c072:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c07a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c07e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c082:	eddf 4abc 	vldr	s9, [pc, #752]	; 800c374 <turn135inL+0x394>
 800c086:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c08a:	68f8      	ldr	r0, [r7, #12]
 800c08c:	eeb0 2a47 	vmov.f32	s4, s14
 800c090:	eef0 1a45 	vmov.f32	s3, s10
 800c094:	eeb0 1a65 	vmov.f32	s2, s11
 800c098:	eef0 0a46 	vmov.f32	s1, s12
 800c09c:	eeb0 0a66 	vmov.f32	s0, s13
 800c0a0:	f7f6 ff9c 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c0a4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d10c      	bne.n	800c0c6 <turn135inL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c0ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0b4:	eeb0 1a47 	vmov.f32	s2, s14
 800c0b8:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800c384 <turn135inL+0x3a4>
 800c0bc:	eeb0 0a67 	vmov.f32	s0, s15
 800c0c0:	f7f7 ff02 	bl	8003ec8 <mollifier_slalom_table>
 800c0c4:	e013      	b.n	800c0ee <turn135inL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c0c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c0ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c0ce:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c0d2:	eef0 2a66 	vmov.f32	s5, s13
 800c0d6:	eeb0 2a47 	vmov.f32	s4, s14
 800c0da:	eddf 1aa9 	vldr	s3, [pc, #676]	; 800c380 <turn135inL+0x3a0>
 800c0de:	ed9f 1aa8 	vldr	s2, [pc, #672]	; 800c380 <turn135inL+0x3a0>
 800c0e2:	eddf 0aa8 	vldr	s1, [pc, #672]	; 800c384 <turn135inL+0x3a4>
 800c0e6:	eeb0 0a67 	vmov.f32	s0, s15
 800c0ea:	f7f7 fd9d 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c0f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7f4 fa4d 	bl	8000598 <__aeabi_f2d>
 800c0fe:	a39a      	add	r3, pc, #616	; (adr r3, 800c368 <turn135inL+0x388>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f8ea 	bl	80002dc <__adddf3>
 800c108:	4602      	mov	r2, r0
 800c10a:	460b      	mov	r3, r1
 800c10c:	4610      	mov	r0, r2
 800c10e:	4619      	mov	r1, r3
 800c110:	f7f4 fd72 	bl	8000bf8 <__aeabi_d2f>
 800c114:	4603      	mov	r3, r0
 800c116:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c11a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c11e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c122:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c126:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c12a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c12e:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c132:	eddf 5a90 	vldr	s11, [pc, #576]	; 800c374 <turn135inL+0x394>
 800c136:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	eeb0 2a47 	vmov.f32	s4, s14
 800c140:	eef0 1a46 	vmov.f32	s3, s12
 800c144:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 800c380 <turn135inL+0x3a0>
 800c148:	eef0 0a66 	vmov.f32	s1, s13
 800c14c:	ee00 3a10 	vmov	s0, r3
 800c150:	f7f6 ff44 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c154:	4b86      	ldr	r3, [pc, #536]	; (800c370 <turn135inL+0x390>)
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
	}
	if (test_mode == 0) {
 800c15a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c15e:	2b00      	cmp	r3, #0
 800c160:	f040 809b 	bne.w	800c29a <turn135inL+0x2ba>
		wallmode.WallControlMode=OFFSET_CONTROL_IN;
 800c164:	2300      	movs	r3, #0
 800c166:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c168:	2300      	movs	r3, #0
 800c16a:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=2;
 800c16c:	2302      	movs	r3, #2
 800c16e:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c170:	2300      	movs	r3, #0
 800c172:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c174:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c178:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c17c:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c180:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c184:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c188:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c18c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c190:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c194:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c198:	eddf 4a76 	vldr	s9, [pc, #472]	; 800c374 <turn135inL+0x394>
 800c19c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c1a0:	68f8      	ldr	r0, [r7, #12]
 800c1a2:	eeb0 2a47 	vmov.f32	s4, s14
 800c1a6:	eef0 1a45 	vmov.f32	s3, s10
 800c1aa:	eeb0 1a65 	vmov.f32	s2, s11
 800c1ae:	eef0 0a46 	vmov.f32	s1, s12
 800c1b2:	eeb0 0a66 	vmov.f32	s0, s13
 800c1b6:	f7f6 ff11 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c1ba:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d10c      	bne.n	800c1dc <turn135inL+0x1fc>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c1c2:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1c6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1ca:	eeb0 1a47 	vmov.f32	s2, s14
 800c1ce:	eddf 0a6d 	vldr	s1, [pc, #436]	; 800c384 <turn135inL+0x3a4>
 800c1d2:	eeb0 0a67 	vmov.f32	s0, s15
 800c1d6:	f7f7 fe77 	bl	8003ec8 <mollifier_slalom_table>
 800c1da:	e013      	b.n	800c204 <turn135inL+0x224>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c1dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c1e0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c1e4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c1e8:	eef0 2a66 	vmov.f32	s5, s13
 800c1ec:	eeb0 2a47 	vmov.f32	s4, s14
 800c1f0:	eddf 1a63 	vldr	s3, [pc, #396]	; 800c380 <turn135inL+0x3a0>
 800c1f4:	ed9f 1a62 	vldr	s2, [pc, #392]	; 800c380 <turn135inL+0x3a0>
 800c1f8:	eddf 0a62 	vldr	s1, [pc, #392]	; 800c384 <turn135inL+0x3a4>
 800c1fc:	eeb0 0a67 	vmov.f32	s0, s15
 800c200:	f7f7 fd12 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800c204:	2303      	movs	r3, #3
 800c206:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c20c:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c210:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c214:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c218:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c21c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c220:	edd7 7a01 	vldr	s15, [r7, #4]
 800c224:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c22c:	eef0 7ae7 	vabs.f32	s15, s15
 800c230:	ee17 0a90 	vmov	r0, s15
 800c234:	f7f4 f9b0 	bl	8000598 <__aeabi_f2d>
 800c238:	f04f 0200 	mov.w	r2, #0
 800c23c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c240:	f7f4 fb2c 	bl	800089c <__aeabi_ddiv>
 800c244:	4602      	mov	r2, r0
 800c246:	460b      	mov	r3, r1
 800c248:	4614      	mov	r4, r2
 800c24a:	461d      	mov	r5, r3
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	4618      	mov	r0, r3
 800c250:	f7f4 f9a2 	bl	8000598 <__aeabi_f2d>
 800c254:	4602      	mov	r2, r0
 800c256:	460b      	mov	r3, r1
 800c258:	4620      	mov	r0, r4
 800c25a:	4629      	mov	r1, r5
 800c25c:	f7f4 fb1e 	bl	800089c <__aeabi_ddiv>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4610      	mov	r0, r2
 800c266:	4619      	mov	r1, r3
 800c268:	f04f 0200 	mov.w	r2, #0
 800c26c:	4b43      	ldr	r3, [pc, #268]	; (800c37c <turn135inL+0x39c>)
 800c26e:	f7f4 f835 	bl	80002dc <__adddf3>
 800c272:	4602      	mov	r2, r0
 800c274:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c276:	4610      	mov	r0, r2
 800c278:	4619      	mov	r1, r3
 800c27a:	f7f4 fcbd 	bl	8000bf8 <__aeabi_d2f>
 800c27e:	4603      	mov	r3, r0
 800c280:	68f8      	ldr	r0, [r7, #12]
 800c282:	ee02 3a10 	vmov	s4, r3
 800c286:	edd7 1a01 	vldr	s3, [r7, #4]
 800c28a:	ed97 1a01 	vldr	s2, [r7, #4]
 800c28e:	eef0 0a68 	vmov.f32	s1, s17
 800c292:	eeb0 0a48 	vmov.f32	s0, s16
 800c296:	f7f6 fea1 	bl	8002fdc <straight_table2>

	}
	if (test_mode >= 2) {
 800c29a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	f240 80ce 	bls.w	800c440 <turn135inL+0x460>

		highspeed_mode = 1;
 800c2a4:	4b32      	ldr	r3, [pc, #200]	; (800c370 <turn135inL+0x390>)
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=1;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2ba:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c2be:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c2c2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c2c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c2ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c2ce:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c2d2:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT + 90, 0, turnpara.g_speed, turnpara.g_speed,
 800c2d6:	eddf 5a27 	vldr	s11, [pc, #156]	; 800c374 <turn135inL+0x394>
 800c2da:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	eeb0 2a47 	vmov.f32	s4, s14
 800c2e4:	eef0 1a46 	vmov.f32	s3, s12
 800c2e8:	eeb0 1a66 	vmov.f32	s2, s13
 800c2ec:	eddf 0a24 	vldr	s1, [pc, #144]	; 800c380 <turn135inL+0x3a0>
 800c2f0:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800c378 <turn135inL+0x398>
 800c2f4:	f7f6 fe72 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=2;
 800c2fc:	2302      	movs	r3, #2
 800c2fe:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c300:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c304:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c308:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c30c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c310:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c314:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c318:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c31c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c320:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c324:	eddf 4a13 	vldr	s9, [pc, #76]	; 800c374 <turn135inL+0x394>
 800c328:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c32c:	68f8      	ldr	r0, [r7, #12]
 800c32e:	eeb0 2a47 	vmov.f32	s4, s14
 800c332:	eef0 1a45 	vmov.f32	s3, s10
 800c336:	eeb0 1a65 	vmov.f32	s2, s11
 800c33a:	eef0 0a46 	vmov.f32	s1, s12
 800c33e:	eeb0 0a66 	vmov.f32	s0, s13
 800c342:	f7f6 fe4b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c346:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	d11c      	bne.n	800c388 <turn135inL+0x3a8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800c34e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c352:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c356:	eeb0 1a47 	vmov.f32	s2, s14
 800c35a:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800c384 <turn135inL+0x3a4>
 800c35e:	eeb0 0a67 	vmov.f32	s0, s15
 800c362:	f7f7 fdb1 	bl	8003ec8 <mollifier_slalom_table>
 800c366:	e023      	b.n	800c3b0 <turn135inL+0x3d0>
 800c368:	c022ec18 	.word	0xc022ec18
 800c36c:	405fd1de 	.word	0x405fd1de
 800c370:	20000808 	.word	0x20000808
 800c374:	42340000 	.word	0x42340000
 800c378:	42cd0000 	.word	0x42cd0000
 800c37c:	408f4000 	.word	0x408f4000
 800c380:	00000000 	.word	0x00000000
 800c384:	43070000 	.word	0x43070000
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c388:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c38c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c390:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c394:	eef0 2a66 	vmov.f32	s5, s13
 800c398:	eeb0 2a47 	vmov.f32	s4, s14
 800c39c:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800c380 <turn135inL+0x3a0>
 800c3a0:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800c380 <turn135inL+0x3a0>
 800c3a4:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800c384 <turn135inL+0x3a4>
 800c3a8:	eeb0 0a67 	vmov.f32	s0, s15
 800c3ac:	f7f7 fc3c 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	73fb      	strb	r3, [r7, #15]
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c3b8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c3bc:	3b02      	subs	r3, #2
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7f4 f8d8 	bl	8000574 <__aeabi_i2d>
 800c3c4:	a326      	add	r3, pc, #152	; (adr r3, 800c460 <turn135inL+0x480>)
 800c3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ca:	f7f4 f93d 	bl	8000648 <__aeabi_dmul>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	460b      	mov	r3, r1
 800c3d2:	4614      	mov	r4, r2
 800c3d4:	461d      	mov	r5, r3
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d8:	4618      	mov	r0, r3
 800c3da:	f7f4 f8dd 	bl	8000598 <__aeabi_f2d>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	4629      	mov	r1, r5
 800c3e6:	f7f3 ff79 	bl	80002dc <__adddf3>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	460b      	mov	r3, r1
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	f7f4 fc01 	bl	8000bf8 <__aeabi_d2f>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c3fc:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c400:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c404:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c408:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c40c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c410:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c414:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(45*sqrt(2)*(test_mode - 2) + turnpara.e_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c418:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 800c458 <turn135inL+0x478>
 800c41c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c420:	68f8      	ldr	r0, [r7, #12]
 800c422:	eeb0 2a47 	vmov.f32	s4, s14
 800c426:	eef0 1a65 	vmov.f32	s3, s11
 800c42a:	eeb0 1a46 	vmov.f32	s2, s12
 800c42e:	eef0 0a66 	vmov.f32	s1, s13
 800c432:	ee00 3a10 	vmov	s0, r3
 800c436:	f7f6 fdd1 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c43a:	4b08      	ldr	r3, [pc, #32]	; (800c45c <turn135inL+0x47c>)
 800c43c:	2200      	movs	r2, #0
 800c43e:	701a      	strb	r2, [r3, #0]
	}

}
 800c440:	bf00      	nop
 800c442:	3710      	adds	r7, #16
 800c444:	46bd      	mov	sp, r7
 800c446:	ecbd 8b02 	vpop	{d8}
 800c44a:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c44e:	b004      	add	sp, #16
 800c450:	4770      	bx	lr
 800c452:	bf00      	nop
 800c454:	f3af 8000 	nop.w
 800c458:	42340000 	.word	0x42340000
 800c45c:	20000808 	.word	0x20000808
 800c460:	c022ec18 	.word	0xc022ec18
 800c464:	404fd1de 	.word	0x404fd1de

0800c468 <turn45outR>:


void turn45outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c468:	b084      	sub	sp, #16
 800c46a:	b5b0      	push	{r4, r5, r7, lr}
 800c46c:	ed2d 8b02 	vpush	{d8}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c47c:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;

	if (test_mode == 1) {
 800c480:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c484:	2b01      	cmp	r3, #1
 800c486:	f040 80a5 	bne.w	800c5d4 <turn45outR+0x16c>
		highspeed_mode = 1;
 800c48a:	4be9      	ldr	r3, [pc, #932]	; (800c830 <turn45outR+0x3c8>)
 800c48c:	2201      	movs	r2, #1
 800c48e:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c490:	2300      	movs	r3, #0
 800c492:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c494:	2300      	movs	r3, #0
 800c496:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800c498:	2300      	movs	r3, #0
 800c49a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c49c:	2300      	movs	r3, #0
 800c49e:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4a0:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c4a4:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4a8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4ac:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4b4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c4b8:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c4bc:	eddf 5add 	vldr	s11, [pc, #884]	; 800c834 <turn45outR+0x3cc>
 800c4c0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c4c4:	68f8      	ldr	r0, [r7, #12]
 800c4c6:	eeb0 2a47 	vmov.f32	s4, s14
 800c4ca:	eef0 1a46 	vmov.f32	s3, s12
 800c4ce:	eeb0 1a66 	vmov.f32	s2, s13
 800c4d2:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800c838 <turn45outR+0x3d0>
 800c4d6:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800c83c <turn45outR+0x3d4>
 800c4da:	f7f6 fd7f 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=3;
 800c4e2:	2303      	movs	r3, #3
 800c4e4:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c4e6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c4ea:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c4ee:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c4f2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c4f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c4fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c4fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c502:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c506:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c50a:	eddf 4aca 	vldr	s9, [pc, #808]	; 800c834 <turn45outR+0x3cc>
 800c50e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c512:	68f8      	ldr	r0, [r7, #12]
 800c514:	eeb0 2a47 	vmov.f32	s4, s14
 800c518:	eef0 1a45 	vmov.f32	s3, s10
 800c51c:	eeb0 1a65 	vmov.f32	s2, s11
 800c520:	eef0 0a46 	vmov.f32	s1, s12
 800c524:	eeb0 0a66 	vmov.f32	s0, s13
 800c528:	f7f6 fd58 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c52c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c530:	2b01      	cmp	r3, #1
 800c532:	d10c      	bne.n	800c54e <turn45outR+0xe6>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c534:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c538:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c53c:	eeb0 1a47 	vmov.f32	s2, s14
 800c540:	eddf 0abf 	vldr	s1, [pc, #764]	; 800c840 <turn45outR+0x3d8>
 800c544:	eeb0 0a67 	vmov.f32	s0, s15
 800c548:	f7f7 fcbe 	bl	8003ec8 <mollifier_slalom_table>
 800c54c:	e015      	b.n	800c57a <turn45outR+0x112>
		}else{
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c54e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c552:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c556:	eef1 7a67 	vneg.f32	s15, s15
 800c55a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c55e:	eef0 2a66 	vmov.f32	s5, s13
 800c562:	eeb0 2a67 	vmov.f32	s4, s15
 800c566:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800c838 <turn45outR+0x3d0>
 800c56a:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800c838 <turn45outR+0x3d0>
 800c56e:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800c840 <turn45outR+0x3d8>
 800c572:	eeb0 0a47 	vmov.f32	s0, s14
 800c576:	f7f7 fb57 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800c57a:	2300      	movs	r3, #0
 800c57c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c57e:	2300      	movs	r3, #0
 800c580:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c582:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c586:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c844 <turn45outR+0x3dc>
 800c58a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c58e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c592:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c596:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c59a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c59e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c5a2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c5a6:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c5aa:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800c834 <turn45outR+0x3cc>
 800c5ae:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	eeb0 2a47 	vmov.f32	s4, s14
 800c5b8:	eef0 1a65 	vmov.f32	s3, s11
 800c5bc:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800c838 <turn45outR+0x3d0>
 800c5c0:	eef0 0a46 	vmov.f32	s1, s12
 800c5c4:	eeb0 0a66 	vmov.f32	s0, s13
 800c5c8:	f7f6 fd08 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c5cc:	4b98      	ldr	r3, [pc, #608]	; (800c830 <turn45outR+0x3c8>)
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c5d2:	e123      	b.n	800c81c <turn45outR+0x3b4>
	}else if (test_mode >= 2) {
 800c5d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	f240 8082 	bls.w	800c6e2 <turn45outR+0x27a>
		highspeed_mode = 1;
 800c5de:	4b94      	ldr	r3, [pc, #592]	; (800c830 <turn45outR+0x3c8>)
 800c5e0:	2201      	movs	r2, #1
 800c5e2:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c5f4:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c5f8:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c5fc:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c600:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c604:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c608:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c60c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c610:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c614:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c618:	eddf 4a86 	vldr	s9, [pc, #536]	; 800c834 <turn45outR+0x3cc>
 800c61c:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c620:	68f8      	ldr	r0, [r7, #12]
 800c622:	eeb0 2a47 	vmov.f32	s4, s14
 800c626:	eef0 1a45 	vmov.f32	s3, s10
 800c62a:	eeb0 1a65 	vmov.f32	s2, s11
 800c62e:	eef0 0a46 	vmov.f32	s1, s12
 800c632:	eeb0 0a66 	vmov.f32	s0, s13
 800c636:	f7f6 fcd1 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c63a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d10c      	bne.n	800c65c <turn45outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c642:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c646:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c64a:	eeb0 1a47 	vmov.f32	s2, s14
 800c64e:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800c840 <turn45outR+0x3d8>
 800c652:	eeb0 0a67 	vmov.f32	s0, s15
 800c656:	f7f7 fc37 	bl	8003ec8 <mollifier_slalom_table>
 800c65a:	e015      	b.n	800c688 <turn45outR+0x220>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c65c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c660:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c664:	eef1 7a67 	vneg.f32	s15, s15
 800c668:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c66c:	eef0 2a66 	vmov.f32	s5, s13
 800c670:	eeb0 2a67 	vmov.f32	s4, s15
 800c674:	eddf 1a70 	vldr	s3, [pc, #448]	; 800c838 <turn45outR+0x3d0>
 800c678:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800c838 <turn45outR+0x3d0>
 800c67c:	eddf 0a70 	vldr	s1, [pc, #448]	; 800c840 <turn45outR+0x3d8>
 800c680:	eeb0 0a47 	vmov.f32	s0, s14
 800c684:	f7f7 fad0 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800c688:	2300      	movs	r3, #0
 800c68a:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c690:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c694:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800c844 <turn45outR+0x3dc>
 800c698:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c69c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6a0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c6a4:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6a8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6b0:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c6b4:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c6b8:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800c834 <turn45outR+0x3cc>
 800c6bc:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	eeb0 2a47 	vmov.f32	s4, s14
 800c6c6:	eef0 1a65 	vmov.f32	s3, s11
 800c6ca:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800c838 <turn45outR+0x3d0>
 800c6ce:	eef0 0a46 	vmov.f32	s1, s12
 800c6d2:	eeb0 0a66 	vmov.f32	s0, s13
 800c6d6:	f7f6 fc81 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800c6da:	4b55      	ldr	r3, [pc, #340]	; (800c830 <turn45outR+0x3c8>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	701a      	strb	r2, [r3, #0]
}
 800c6e0:	e09c      	b.n	800c81c <turn45outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800c6ea:	2303      	movs	r3, #3
 800c6ec:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c6f2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c6f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c6fa:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c6fe:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c702:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c706:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c70a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c70e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c712:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c716:	eddf 4a47 	vldr	s9, [pc, #284]	; 800c834 <turn45outR+0x3cc>
 800c71a:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	eeb0 2a47 	vmov.f32	s4, s14
 800c724:	eef0 1a45 	vmov.f32	s3, s10
 800c728:	eeb0 1a65 	vmov.f32	s2, s11
 800c72c:	eef0 0a46 	vmov.f32	s1, s12
 800c730:	eeb0 0a66 	vmov.f32	s0, s13
 800c734:	f7f6 fc52 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800c738:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d10c      	bne.n	800c75a <turn45outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-45,turnpara.t_speed);
 800c740:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c744:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c748:	eeb0 1a47 	vmov.f32	s2, s14
 800c74c:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800c840 <turn45outR+0x3d8>
 800c750:	eeb0 0a67 	vmov.f32	s0, s15
 800c754:	f7f7 fbb8 	bl	8003ec8 <mollifier_slalom_table>
 800c758:	e015      	b.n	800c786 <turn45outR+0x31e>
			slalom_table2(turnpara.g_speed,-45, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800c75a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c75e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c762:	eef1 7a67 	vneg.f32	s15, s15
 800c766:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c76a:	eef0 2a66 	vmov.f32	s5, s13
 800c76e:	eeb0 2a67 	vmov.f32	s4, s15
 800c772:	eddf 1a31 	vldr	s3, [pc, #196]	; 800c838 <turn45outR+0x3d0>
 800c776:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800c838 <turn45outR+0x3d0>
 800c77a:	eddf 0a31 	vldr	s1, [pc, #196]	; 800c840 <turn45outR+0x3d8>
 800c77e:	eeb0 0a47 	vmov.f32	s0, s14
 800c782:	f7f7 fa51 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800c786:	2301      	movs	r3, #1
 800c788:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800c78a:	2300      	movs	r3, #0
 800c78c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c78e:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800c792:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800c796:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c79a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c79e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7a2:	edd7 7a01 	vldr	s15, [r7, #4]
 800c7a6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c7aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c7ae:	eef0 7ae7 	vabs.f32	s15, s15
 800c7b2:	ee17 0a90 	vmov	r0, s15
 800c7b6:	f7f3 feef 	bl	8000598 <__aeabi_f2d>
 800c7ba:	f04f 0200 	mov.w	r2, #0
 800c7be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c7c2:	f7f4 f86b 	bl	800089c <__aeabi_ddiv>
 800c7c6:	4602      	mov	r2, r0
 800c7c8:	460b      	mov	r3, r1
 800c7ca:	4614      	mov	r4, r2
 800c7cc:	461d      	mov	r5, r3
 800c7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7f3 fee1 	bl	8000598 <__aeabi_f2d>
 800c7d6:	4602      	mov	r2, r0
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4620      	mov	r0, r4
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7f4 f85d 	bl	800089c <__aeabi_ddiv>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	460b      	mov	r3, r1
 800c7e6:	4610      	mov	r0, r2
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f04f 0200 	mov.w	r2, #0
 800c7ee:	4b16      	ldr	r3, [pc, #88]	; (800c848 <turn45outR+0x3e0>)
 800c7f0:	f7f3 fd74 	bl	80002dc <__adddf3>
 800c7f4:	4602      	mov	r2, r0
 800c7f6:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800c7f8:	4610      	mov	r0, r2
 800c7fa:	4619      	mov	r1, r3
 800c7fc:	f7f4 f9fc 	bl	8000bf8 <__aeabi_d2f>
 800c800:	4603      	mov	r3, r0
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	ee02 3a10 	vmov	s4, r3
 800c808:	edd7 1a01 	vldr	s3, [r7, #4]
 800c80c:	ed97 1a01 	vldr	s2, [r7, #4]
 800c810:	eef0 0a68 	vmov.f32	s1, s17
 800c814:	eeb0 0a48 	vmov.f32	s0, s16
 800c818:	f7f6 fbe0 	bl	8002fdc <straight_table2>
}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	ecbd 8b02 	vpop	{d8}
 800c826:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800c82a:	b004      	add	sp, #16
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	20000808 	.word	0x20000808
 800c834:	42340000 	.word	0x42340000
 800c838:	00000000 	.word	0x00000000
 800c83c:	42c4477b 	.word	0x42c4477b
 800c840:	c2340000 	.word	0xc2340000
 800c844:	42b40000 	.word	0x42b40000
 800c848:	408f4000 	.word	0x408f4000

0800c84c <turn45outL>:


void turn45outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800c84c:	b084      	sub	sp, #16
 800c84e:	b5b0      	push	{r4, r5, r7, lr}
 800c850:	ed2d 8b02 	vpush	{d8}
 800c854:	b084      	sub	sp, #16
 800c856:	af00      	add	r7, sp, #0
 800c858:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800c85c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800c860:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800c864:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c868:	2b01      	cmp	r3, #1
 800c86a:	f040 80a3 	bne.w	800c9b4 <turn45outL+0x168>
			highspeed_mode = 1;
 800c86e:	4be5      	ldr	r3, [pc, #916]	; (800cc04 <turn45outL+0x3b8>)
 800c870:	2201      	movs	r2, #1
 800c872:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800c874:	2300      	movs	r3, #0
 800c876:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800c878:	2300      	movs	r3, #0
 800c87a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800c87c:	2300      	movs	r3, #0
 800c87e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800c880:	2300      	movs	r3, #0
 800c882:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c884:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800c888:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c88c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c890:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c894:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c898:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800c89c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800c8a0:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800cc08 <turn45outL+0x3bc>
 800c8a4:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	eeb0 2a47 	vmov.f32	s4, s14
 800c8ae:	eef0 1a46 	vmov.f32	s3, s12
 800c8b2:	eeb0 1a66 	vmov.f32	s2, s13
 800c8b6:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800cc0c <turn45outL+0x3c0>
 800c8ba:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800cc10 <turn45outL+0x3c4>
 800c8be:	f7f6 fb8d 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=4;
 800c8c6:	2304      	movs	r3, #4
 800c8c8:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8ca:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c8ce:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c8d2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c8d6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c8da:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c8de:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c8e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c8e6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c8ea:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c8ee:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800cc08 <turn45outL+0x3bc>
 800c8f2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c8f6:	68f8      	ldr	r0, [r7, #12]
 800c8f8:	eeb0 2a47 	vmov.f32	s4, s14
 800c8fc:	eef0 1a45 	vmov.f32	s3, s10
 800c900:	eeb0 1a65 	vmov.f32	s2, s11
 800c904:	eef0 0a46 	vmov.f32	s1, s12
 800c908:	eeb0 0a66 	vmov.f32	s0, s13
 800c90c:	f7f6 fb66 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800c910:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800c914:	2b01      	cmp	r3, #1
 800c916:	d10c      	bne.n	800c932 <turn45outL+0xe6>
				mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800c918:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c91c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c920:	eeb0 1a47 	vmov.f32	s2, s14
 800c924:	eddf 0ab8 	vldr	s1, [pc, #736]	; 800cc08 <turn45outL+0x3bc>
 800c928:	eeb0 0a67 	vmov.f32	s0, s15
 800c92c:	f7f7 facc 	bl	8003ec8 <mollifier_slalom_table>
 800c930:	e013      	b.n	800c95a <turn45outL+0x10e>
			}else{
				slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800c932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c936:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c93a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800c93e:	eef0 2a66 	vmov.f32	s5, s13
 800c942:	eeb0 2a47 	vmov.f32	s4, s14
 800c946:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800cc0c <turn45outL+0x3c0>
 800c94a:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800cc0c <turn45outL+0x3c0>
 800c94e:	eddf 0aae 	vldr	s1, [pc, #696]	; 800cc08 <turn45outL+0x3bc>
 800c952:	eeb0 0a67 	vmov.f32	s0, s15
 800c956:	f7f7 f967 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800c95a:	2300      	movs	r3, #0
 800c95c:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800c95e:	2300      	movs	r3, #0
 800c960:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c962:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c966:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800cc14 <turn45outL+0x3c8>
 800c96a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c96e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c972:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c976:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c97a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c97e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c982:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800c986:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800c98a:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800cc08 <turn45outL+0x3bc>
 800c98e:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800c992:	68f8      	ldr	r0, [r7, #12]
 800c994:	eeb0 2a47 	vmov.f32	s4, s14
 800c998:	eef0 1a65 	vmov.f32	s3, s11
 800c99c:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800cc0c <turn45outL+0x3c0>
 800c9a0:	eef0 0a46 	vmov.f32	s1, s12
 800c9a4:	eeb0 0a66 	vmov.f32	s0, s13
 800c9a8:	f7f6 fb18 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800c9ac:	4b95      	ldr	r3, [pc, #596]	; (800cc04 <turn45outL+0x3b8>)
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800c9b2:	e11e      	b.n	800cbf2 <turn45outL+0x3a6>
		}else if (test_mode >= 2) {
 800c9b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d97f      	bls.n	800cabc <turn45outL+0x270>
		highspeed_mode = 1;
 800c9bc:	4b91      	ldr	r3, [pc, #580]	; (800cc04 <turn45outL+0x3b8>)
 800c9be:	2201      	movs	r2, #1
 800c9c0:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800c9ca:	2304      	movs	r3, #4
 800c9cc:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9d2:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800c9d6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800c9da:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800c9de:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800c9e2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c9e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c9ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c9ee:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800c9f2:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800c9f6:	eddf 4a84 	vldr	s9, [pc, #528]	; 800cc08 <turn45outL+0x3bc>
 800c9fa:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	eeb0 2a47 	vmov.f32	s4, s14
 800ca04:	eef0 1a45 	vmov.f32	s3, s10
 800ca08:	eeb0 1a65 	vmov.f32	s2, s11
 800ca0c:	eef0 0a46 	vmov.f32	s1, s12
 800ca10:	eeb0 0a66 	vmov.f32	s0, s13
 800ca14:	f7f6 fae2 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ca18:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d10c      	bne.n	800ca3a <turn45outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800ca20:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca24:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca28:	eeb0 1a47 	vmov.f32	s2, s14
 800ca2c:	eddf 0a76 	vldr	s1, [pc, #472]	; 800cc08 <turn45outL+0x3bc>
 800ca30:	eeb0 0a67 	vmov.f32	s0, s15
 800ca34:	f7f7 fa48 	bl	8003ec8 <mollifier_slalom_table>
 800ca38:	e013      	b.n	800ca62 <turn45outL+0x216>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800ca3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca3e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ca42:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ca46:	eef0 2a66 	vmov.f32	s5, s13
 800ca4a:	eeb0 2a47 	vmov.f32	s4, s14
 800ca4e:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800cc0c <turn45outL+0x3c0>
 800ca52:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800cc0c <turn45outL+0x3c0>
 800ca56:	eddf 0a6c 	vldr	s1, [pc, #432]	; 800cc08 <turn45outL+0x3bc>
 800ca5a:	eeb0 0a67 	vmov.f32	s0, s15
 800ca5e:	f7f7 f8e3 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ca62:	2300      	movs	r3, #0
 800ca64:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ca66:	2300      	movs	r3, #0
 800ca68:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca6a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ca6e:	ed9f 7a69 	vldr	s14, [pc, #420]	; 800cc14 <turn45outL+0x3c8>
 800ca72:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ca76:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ca7a:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ca7e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ca82:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ca86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ca8a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ca8e:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ca92:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800cc08 <turn45outL+0x3bc>
 800ca96:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	eeb0 2a47 	vmov.f32	s4, s14
 800caa0:	eef0 1a65 	vmov.f32	s3, s11
 800caa4:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800cc0c <turn45outL+0x3c0>
 800caa8:	eef0 0a46 	vmov.f32	s1, s12
 800caac:	eeb0 0a66 	vmov.f32	s0, s13
 800cab0:	f7f6 fa94 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800cab4:	4b53      	ldr	r3, [pc, #332]	; (800cc04 <turn45outL+0x3b8>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	701a      	strb	r2, [r3, #0]
}
 800caba:	e09a      	b.n	800cbf2 <turn45outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800cabc:	2300      	movs	r3, #0
 800cabe:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cac0:	2300      	movs	r3, #0
 800cac2:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800cac4:	2304      	movs	r3, #4
 800cac6:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cac8:	2300      	movs	r3, #0
 800caca:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cacc:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cad0:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cad4:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cad8:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cadc:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cae0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cae4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cae8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800caec:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800caf0:	eddf 4a45 	vldr	s9, [pc, #276]	; 800cc08 <turn45outL+0x3bc>
 800caf4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	eeb0 2a47 	vmov.f32	s4, s14
 800cafe:	eef0 1a45 	vmov.f32	s3, s10
 800cb02:	eeb0 1a65 	vmov.f32	s2, s11
 800cb06:	eef0 0a46 	vmov.f32	s1, s12
 800cb0a:	eeb0 0a66 	vmov.f32	s0, s13
 800cb0e:	f7f6 fa65 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cb12:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cb16:	2b01      	cmp	r3, #1
 800cb18:	d10c      	bne.n	800cb34 <turn45outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,45,turnpara.t_speed);
 800cb1a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb1e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb22:	eeb0 1a47 	vmov.f32	s2, s14
 800cb26:	eddf 0a38 	vldr	s1, [pc, #224]	; 800cc08 <turn45outL+0x3bc>
 800cb2a:	eeb0 0a67 	vmov.f32	s0, s15
 800cb2e:	f7f7 f9cb 	bl	8003ec8 <mollifier_slalom_table>
 800cb32:	e013      	b.n	800cb5c <turn45outL+0x310>
			slalom_table2(turnpara.g_speed,45, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800cb34:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb38:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cb3c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cb40:	eef0 2a66 	vmov.f32	s5, s13
 800cb44:	eeb0 2a47 	vmov.f32	s4, s14
 800cb48:	eddf 1a30 	vldr	s3, [pc, #192]	; 800cc0c <turn45outL+0x3c0>
 800cb4c:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800cc0c <turn45outL+0x3c0>
 800cb50:	eddf 0a2d 	vldr	s1, [pc, #180]	; 800cc08 <turn45outL+0x3bc>
 800cb54:	eeb0 0a67 	vmov.f32	s0, s15
 800cb58:	f7f7 f866 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cb60:	2300      	movs	r3, #0
 800cb62:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cb64:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cb68:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cb6c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cb70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cb74:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cb78:	edd7 7a01 	vldr	s15, [r7, #4]
 800cb7c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cb80:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cb84:	eef0 7ae7 	vabs.f32	s15, s15
 800cb88:	ee17 0a90 	vmov	r0, s15
 800cb8c:	f7f3 fd04 	bl	8000598 <__aeabi_f2d>
 800cb90:	f04f 0200 	mov.w	r2, #0
 800cb94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cb98:	f7f3 fe80 	bl	800089c <__aeabi_ddiv>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4614      	mov	r4, r2
 800cba2:	461d      	mov	r5, r3
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	4618      	mov	r0, r3
 800cba8:	f7f3 fcf6 	bl	8000598 <__aeabi_f2d>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	f7f3 fe72 	bl	800089c <__aeabi_ddiv>
 800cbb8:	4602      	mov	r2, r0
 800cbba:	460b      	mov	r3, r1
 800cbbc:	4610      	mov	r0, r2
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	f04f 0200 	mov.w	r2, #0
 800cbc4:	4b14      	ldr	r3, [pc, #80]	; (800cc18 <turn45outL+0x3cc>)
 800cbc6:	f7f3 fb89 	bl	80002dc <__adddf3>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cbce:	4610      	mov	r0, r2
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f7f4 f811 	bl	8000bf8 <__aeabi_d2f>
 800cbd6:	4603      	mov	r3, r0
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	ee02 3a10 	vmov	s4, r3
 800cbde:	edd7 1a01 	vldr	s3, [r7, #4]
 800cbe2:	ed97 1a01 	vldr	s2, [r7, #4]
 800cbe6:	eef0 0a68 	vmov.f32	s1, s17
 800cbea:	eeb0 0a48 	vmov.f32	s0, s16
 800cbee:	f7f6 f9f5 	bl	8002fdc <straight_table2>
}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	ecbd 8b02 	vpop	{d8}
 800cbfc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cc00:	b004      	add	sp, #16
 800cc02:	4770      	bx	lr
 800cc04:	20000808 	.word	0x20000808
 800cc08:	42340000 	.word	0x42340000
 800cc0c:	00000000 	.word	0x00000000
 800cc10:	42c4477b 	.word	0x42c4477b
 800cc14:	42b40000 	.word	0x42b40000
 800cc18:	408f4000 	.word	0x408f4000

0800cc1c <turn135outR>:



void turn135outR(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	b5b0      	push	{r4, r5, r7, lr}
 800cc20:	ed2d 8b02 	vpush	{d8}
 800cc24:	b084      	sub	sp, #16
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800cc2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800cc30:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800cc34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cc38:	2b01      	cmp	r3, #1
 800cc3a:	f040 80a5 	bne.w	800cd88 <turn135outR+0x16c>
			highspeed_mode = 1;
 800cc3e:	4be9      	ldr	r3, [pc, #932]	; (800cfe4 <turn135outR+0x3c8>)
 800cc40:	2201      	movs	r2, #1
 800cc42:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800cc44:	2300      	movs	r3, #0
 800cc46:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc54:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800cc58:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cc5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cc60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cc64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cc68:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800cc6c:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800cc70:	eddf 5add 	vldr	s11, [pc, #884]	; 800cfe8 <turn135outR+0x3cc>
 800cc74:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	eeb0 2a47 	vmov.f32	s4, s14
 800cc7e:	eef0 1a46 	vmov.f32	s3, s12
 800cc82:	eeb0 1a66 	vmov.f32	s2, s13
 800cc86:	eddf 0ad9 	vldr	s1, [pc, #868]	; 800cfec <turn135outR+0x3d0>
 800cc8a:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800cff0 <turn135outR+0x3d4>
 800cc8e:	f7f6 f9a5 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800cc96:	2303      	movs	r3, #3
 800cc98:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cc9a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cc9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cca2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cca6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ccaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ccae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccb6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800ccba:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ccbe:	eddf 4aca 	vldr	s9, [pc, #808]	; 800cfe8 <turn135outR+0x3cc>
 800ccc2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ccc6:	68f8      	ldr	r0, [r7, #12]
 800ccc8:	eeb0 2a47 	vmov.f32	s4, s14
 800cccc:	eef0 1a45 	vmov.f32	s3, s10
 800ccd0:	eeb0 1a65 	vmov.f32	s2, s11
 800ccd4:	eef0 0a46 	vmov.f32	s1, s12
 800ccd8:	eeb0 0a66 	vmov.f32	s0, s13
 800ccdc:	f7f6 f97e 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800cce0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cce4:	2b01      	cmp	r3, #1
 800cce6:	d10c      	bne.n	800cd02 <turn135outR+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cce8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ccec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ccf0:	eeb0 1a47 	vmov.f32	s2, s14
 800ccf4:	eddf 0abf 	vldr	s1, [pc, #764]	; 800cff4 <turn135outR+0x3d8>
 800ccf8:	eeb0 0a67 	vmov.f32	s0, s15
 800ccfc:	f7f7 f8e4 	bl	8003ec8 <mollifier_slalom_table>
 800cd00:	e015      	b.n	800cd2e <turn135outR+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cd02:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd06:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cd0a:	eef1 7a67 	vneg.f32	s15, s15
 800cd0e:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cd12:	eef0 2a66 	vmov.f32	s5, s13
 800cd16:	eeb0 2a67 	vmov.f32	s4, s15
 800cd1a:	eddf 1ab4 	vldr	s3, [pc, #720]	; 800cfec <turn135outR+0x3d0>
 800cd1e:	ed9f 1ab3 	vldr	s2, [pc, #716]	; 800cfec <turn135outR+0x3d0>
 800cd22:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800cff4 <turn135outR+0x3d8>
 800cd26:	eeb0 0a47 	vmov.f32	s0, s14
 800cd2a:	f7f6 ff7d 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800cd2e:	2300      	movs	r3, #0
 800cd30:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800cd32:	2300      	movs	r3, #0
 800cd34:	73fb      	strb	r3, [r7, #15]
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd36:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800cd3a:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800cff8 <turn135outR+0x3dc>
 800cd3e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800cd42:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cd46:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cd4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cd4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cd52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd56:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800cd5a:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800cd5e:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 800cfe8 <turn135outR+0x3cc>
 800cd62:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800cd66:	68f8      	ldr	r0, [r7, #12]
 800cd68:	eeb0 2a47 	vmov.f32	s4, s14
 800cd6c:	eef0 1a65 	vmov.f32	s3, s11
 800cd70:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 800cfec <turn135outR+0x3d0>
 800cd74:	eef0 0a46 	vmov.f32	s1, s12
 800cd78:	eeb0 0a66 	vmov.f32	s0, s13
 800cd7c:	f7f6 f92e 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800cd80:	4b98      	ldr	r3, [pc, #608]	; (800cfe4 <turn135outR+0x3c8>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800cd86:	e123      	b.n	800cfd0 <turn135outR+0x3b4>
		}else if (test_mode >= 2) {
 800cd88:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	f240 8082 	bls.w	800ce96 <turn135outR+0x27a>
		highspeed_mode = 1;
 800cd92:	4b94      	ldr	r3, [pc, #592]	; (800cfe4 <turn135outR+0x3c8>)
 800cd94:	2201      	movs	r2, #1
 800cd96:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800cd98:	2300      	movs	r3, #0
 800cd9a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800cda0:	2303      	movs	r3, #3
 800cda2:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cda8:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800cdac:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800cdb0:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800cdb4:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800cdb8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cdbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cdc4:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cdc8:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cdcc:	eddf 4a86 	vldr	s9, [pc, #536]	; 800cfe8 <turn135outR+0x3cc>
 800cdd0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	eeb0 2a47 	vmov.f32	s4, s14
 800cdda:	eef0 1a45 	vmov.f32	s3, s10
 800cdde:	eeb0 1a65 	vmov.f32	s2, s11
 800cde2:	eef0 0a46 	vmov.f32	s1, s12
 800cde6:	eeb0 0a66 	vmov.f32	s0, s13
 800cdea:	f7f6 f8f7 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800cdee:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cdf2:	2b01      	cmp	r3, #1
 800cdf4:	d10c      	bne.n	800ce10 <turn135outR+0x1f4>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cdf6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cdfa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cdfe:	eeb0 1a47 	vmov.f32	s2, s14
 800ce02:	eddf 0a7c 	vldr	s1, [pc, #496]	; 800cff4 <turn135outR+0x3d8>
 800ce06:	eeb0 0a67 	vmov.f32	s0, s15
 800ce0a:	f7f7 f85d 	bl	8003ec8 <mollifier_slalom_table>
 800ce0e:	e015      	b.n	800ce3c <turn135outR+0x220>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800ce10:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce14:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ce18:	eef1 7a67 	vneg.f32	s15, s15
 800ce1c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800ce20:	eef0 2a66 	vmov.f32	s5, s13
 800ce24:	eeb0 2a67 	vmov.f32	s4, s15
 800ce28:	eddf 1a70 	vldr	s3, [pc, #448]	; 800cfec <turn135outR+0x3d0>
 800ce2c:	ed9f 1a6f 	vldr	s2, [pc, #444]	; 800cfec <turn135outR+0x3d0>
 800ce30:	eddf 0a70 	vldr	s1, [pc, #448]	; 800cff4 <turn135outR+0x3d8>
 800ce34:	eeb0 0a47 	vmov.f32	s0, s14
 800ce38:	f7f6 fef6 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800ce40:	2300      	movs	r3, #0
 800ce42:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ce48:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800cff8 <turn135outR+0x3dc>
 800ce4c:	ee77 6a87 	vadd.f32	s13, s15, s14
 800ce50:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ce54:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ce58:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ce5c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ce60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce64:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800ce68:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800ce6c:	ed9f 5a5e 	vldr	s10, [pc, #376]	; 800cfe8 <turn135outR+0x3cc>
 800ce70:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800ce74:	68f8      	ldr	r0, [r7, #12]
 800ce76:	eeb0 2a47 	vmov.f32	s4, s14
 800ce7a:	eef0 1a65 	vmov.f32	s3, s11
 800ce7e:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 800cfec <turn135outR+0x3d0>
 800ce82:	eef0 0a46 	vmov.f32	s1, s12
 800ce86:	eeb0 0a66 	vmov.f32	s0, s13
 800ce8a:	f7f6 f8a7 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800ce8e:	4b55      	ldr	r3, [pc, #340]	; (800cfe4 <turn135outR+0x3c8>)
 800ce90:	2200      	movs	r2, #0
 800ce92:	701a      	strb	r2, [r3, #0]
}
 800ce94:	e09c      	b.n	800cfd0 <turn135outR+0x3b4>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800ce96:	2300      	movs	r3, #0
 800ce98:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800ce9e:	2303      	movs	r3, #3
 800cea0:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800cea2:	2300      	movs	r3, #0
 800cea4:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800cea6:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800ceaa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800ceae:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800ceb2:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800ceb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800ceba:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cec2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800cec6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800ceca:	eddf 4a47 	vldr	s9, [pc, #284]	; 800cfe8 <turn135outR+0x3cc>
 800cece:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800ced2:	68f8      	ldr	r0, [r7, #12]
 800ced4:	eeb0 2a47 	vmov.f32	s4, s14
 800ced8:	eef0 1a45 	vmov.f32	s3, s10
 800cedc:	eeb0 1a65 	vmov.f32	s2, s11
 800cee0:	eef0 0a46 	vmov.f32	s1, s12
 800cee4:	eeb0 0a66 	vmov.f32	s0, s13
 800cee8:	f7f6 f878 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800ceec:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800cef0:	2b01      	cmp	r3, #1
 800cef2:	d10c      	bne.n	800cf0e <turn135outR+0x2f2>
			mollifier_slalom_table(turnpara.g_speed,-135,turnpara.t_speed);
 800cef4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cef8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800cefc:	eeb0 1a47 	vmov.f32	s2, s14
 800cf00:	eddf 0a3c 	vldr	s1, [pc, #240]	; 800cff4 <turn135outR+0x3d8>
 800cf04:	eeb0 0a67 	vmov.f32	s0, s15
 800cf08:	f7f6 ffde 	bl	8003ec8 <mollifier_slalom_table>
 800cf0c:	e015      	b.n	800cf3a <turn135outR+0x31e>
			slalom_table2(turnpara.g_speed,-135, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800cf0e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf12:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800cf16:	eef1 7a67 	vneg.f32	s15, s15
 800cf1a:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800cf1e:	eef0 2a66 	vmov.f32	s5, s13
 800cf22:	eeb0 2a67 	vmov.f32	s4, s15
 800cf26:	eddf 1a31 	vldr	s3, [pc, #196]	; 800cfec <turn135outR+0x3d0>
 800cf2a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800cfec <turn135outR+0x3d0>
 800cf2e:	eddf 0a31 	vldr	s1, [pc, #196]	; 800cff4 <turn135outR+0x3d8>
 800cf32:	eeb0 0a47 	vmov.f32	s0, s14
 800cf36:	f7f6 fe77 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cf42:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800cf46:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800cf4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800cf4e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800cf52:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf56:	edd7 7a01 	vldr	s15, [r7, #4]
 800cf5a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800cf5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf62:	eef0 7ae7 	vabs.f32	s15, s15
 800cf66:	ee17 0a90 	vmov	r0, s15
 800cf6a:	f7f3 fb15 	bl	8000598 <__aeabi_f2d>
 800cf6e:	f04f 0200 	mov.w	r2, #0
 800cf72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cf76:	f7f3 fc91 	bl	800089c <__aeabi_ddiv>
 800cf7a:	4602      	mov	r2, r0
 800cf7c:	460b      	mov	r3, r1
 800cf7e:	4614      	mov	r4, r2
 800cf80:	461d      	mov	r5, r3
 800cf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7f3 fb07 	bl	8000598 <__aeabi_f2d>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	460b      	mov	r3, r1
 800cf8e:	4620      	mov	r0, r4
 800cf90:	4629      	mov	r1, r5
 800cf92:	f7f3 fc83 	bl	800089c <__aeabi_ddiv>
 800cf96:	4602      	mov	r2, r0
 800cf98:	460b      	mov	r3, r1
 800cf9a:	4610      	mov	r0, r2
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	f04f 0200 	mov.w	r2, #0
 800cfa2:	4b16      	ldr	r3, [pc, #88]	; (800cffc <turn135outR+0x3e0>)
 800cfa4:	f7f3 f99a 	bl	80002dc <__adddf3>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800cfac:	4610      	mov	r0, r2
 800cfae:	4619      	mov	r1, r3
 800cfb0:	f7f3 fe22 	bl	8000bf8 <__aeabi_d2f>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	68f8      	ldr	r0, [r7, #12]
 800cfb8:	ee02 3a10 	vmov	s4, r3
 800cfbc:	edd7 1a01 	vldr	s3, [r7, #4]
 800cfc0:	ed97 1a01 	vldr	s2, [r7, #4]
 800cfc4:	eef0 0a68 	vmov.f32	s1, s17
 800cfc8:	eeb0 0a48 	vmov.f32	s0, s16
 800cfcc:	f7f6 f806 	bl	8002fdc <straight_table2>
}
 800cfd0:	bf00      	nop
 800cfd2:	3710      	adds	r7, #16
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	ecbd 8b02 	vpop	{d8}
 800cfda:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800cfde:	b004      	add	sp, #16
 800cfe0:	4770      	bx	lr
 800cfe2:	bf00      	nop
 800cfe4:	20000808 	.word	0x20000808
 800cfe8:	42340000 	.word	0x42340000
 800cfec:	00000000 	.word	0x00000000
 800cff0:	42c4477b 	.word	0x42c4477b
 800cff4:	c3070000 	.word	0xc3070000
 800cff8:	42b40000 	.word	0x42b40000
 800cffc:	408f4000 	.word	0x408f4000

0800d000 <turn135outL>:


void turn135outL(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d000:	b084      	sub	sp, #16
 800d002:	b5b0      	push	{r4, r5, r7, lr}
 800d004:	ed2d 8b02 	vpush	{d8}
 800d008:	b084      	sub	sp, #16
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d010:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d014:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d018:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d01c:	2b01      	cmp	r3, #1
 800d01e:	f040 80a3 	bne.w	800d168 <turn135outL+0x168>
		highspeed_mode = 1;
 800d022:	4be5      	ldr	r3, [pc, #916]	; (800d3b8 <turn135outL+0x3b8>)
 800d024:	2201      	movs	r2, #1
 800d026:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d028:	2300      	movs	r3, #0
 800d02a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d02c:	2300      	movs	r3, #0
 800d02e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=0;
 800d030:	2300      	movs	r3, #0
 800d032:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d034:	2300      	movs	r3, #0
 800d036:	73bb      	strb	r3, [r7, #14]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d038:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d03c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d040:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d044:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d04c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d050:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d054:	eddf 5ad9 	vldr	s11, [pc, #868]	; 800d3bc <turn135outL+0x3bc>
 800d058:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d05c:	68f8      	ldr	r0, [r7, #12]
 800d05e:	eeb0 2a47 	vmov.f32	s4, s14
 800d062:	eef0 1a46 	vmov.f32	s3, s12
 800d066:	eeb0 1a66 	vmov.f32	s2, s13
 800d06a:	eddf 0ad5 	vldr	s1, [pc, #852]	; 800d3c0 <turn135outL+0x3c0>
 800d06e:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 800d3c4 <turn135outL+0x3c4>
 800d072:	f7f5 ffb3 	bl	8002fdc <straight_table2>
		wallmode.WallControlMode=0;
 800d076:	2300      	movs	r3, #0
 800d078:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=4;
 800d07a:	2304      	movs	r3, #4
 800d07c:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d07e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d082:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d086:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d08a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d08e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d092:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d09a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d09e:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d0a2:	eddf 4ac6 	vldr	s9, [pc, #792]	; 800d3bc <turn135outL+0x3bc>
 800d0a6:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d0aa:	68f8      	ldr	r0, [r7, #12]
 800d0ac:	eeb0 2a47 	vmov.f32	s4, s14
 800d0b0:	eef0 1a45 	vmov.f32	s3, s10
 800d0b4:	eeb0 1a65 	vmov.f32	s2, s11
 800d0b8:	eef0 0a46 	vmov.f32	s1, s12
 800d0bc:	eeb0 0a66 	vmov.f32	s0, s13
 800d0c0:	f7f5 ff8c 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d0c4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d10c      	bne.n	800d0e6 <turn135outL+0xe6>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d0cc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0d4:	eeb0 1a47 	vmov.f32	s2, s14
 800d0d8:	eddf 0abb 	vldr	s1, [pc, #748]	; 800d3c8 <turn135outL+0x3c8>
 800d0dc:	eeb0 0a67 	vmov.f32	s0, s15
 800d0e0:	f7f6 fef2 	bl	8003ec8 <mollifier_slalom_table>
 800d0e4:	e013      	b.n	800d10e <turn135outL+0x10e>
		}else{
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d0e6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0ea:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d0ee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d0f2:	eef0 2a66 	vmov.f32	s5, s13
 800d0f6:	eeb0 2a47 	vmov.f32	s4, s14
 800d0fa:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800d3c0 <turn135outL+0x3c0>
 800d0fe:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 800d3c0 <turn135outL+0x3c0>
 800d102:	eddf 0ab1 	vldr	s1, [pc, #708]	; 800d3c8 <turn135outL+0x3c8>
 800d106:	eeb0 0a67 	vmov.f32	s0, s15
 800d10a:	f7f6 fd8d 	bl	8003c28 <slalom_table2>
		}
		wallmode.WallControlMode=0;
 800d10e:	2300      	movs	r3, #0
 800d110:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d112:	2300      	movs	r3, #0
 800d114:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d116:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d11a:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800d3cc <turn135outL+0x3cc>
 800d11e:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d122:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d126:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d12a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d12e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d132:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d136:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d13a:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d13e:	ed9f 5a9f 	vldr	s10, [pc, #636]	; 800d3bc <turn135outL+0x3bc>
 800d142:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	eeb0 2a47 	vmov.f32	s4, s14
 800d14c:	eef0 1a65 	vmov.f32	s3, s11
 800d150:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 800d3c0 <turn135outL+0x3c0>
 800d154:	eef0 0a46 	vmov.f32	s1, s12
 800d158:	eeb0 0a66 	vmov.f32	s0, s13
 800d15c:	f7f5 ff3e 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d160:	4b95      	ldr	r3, [pc, #596]	; (800d3b8 <turn135outL+0x3b8>)
 800d162:	2200      	movs	r2, #0
 800d164:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d166:	e11e      	b.n	800d3a6 <turn135outL+0x3a6>
	}else if (test_mode >= 2) {
 800d168:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d97f      	bls.n	800d270 <turn135outL+0x270>
		highspeed_mode = 1;
 800d170:	4b91      	ldr	r3, [pc, #580]	; (800d3b8 <turn135outL+0x3b8>)
 800d172:	2201      	movs	r2, #1
 800d174:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d176:	2300      	movs	r3, #0
 800d178:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d17a:	2300      	movs	r3, #0
 800d17c:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d17e:	2304      	movs	r3, #4
 800d180:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d182:	2300      	movs	r3, #0
 800d184:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d186:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d18a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d18e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d192:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d196:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d19a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d19e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1a2:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d1a6:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d1aa:	eddf 4a84 	vldr	s9, [pc, #528]	; 800d3bc <turn135outL+0x3bc>
 800d1ae:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	eeb0 2a47 	vmov.f32	s4, s14
 800d1b8:	eef0 1a45 	vmov.f32	s3, s10
 800d1bc:	eeb0 1a65 	vmov.f32	s2, s11
 800d1c0:	eef0 0a46 	vmov.f32	s1, s12
 800d1c4:	eeb0 0a66 	vmov.f32	s0, s13
 800d1c8:	f7f5 ff08 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d1cc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d1d0:	2b01      	cmp	r3, #1
 800d1d2:	d10c      	bne.n	800d1ee <turn135outL+0x1ee>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d1d4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1d8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1dc:	eeb0 1a47 	vmov.f32	s2, s14
 800d1e0:	eddf 0a79 	vldr	s1, [pc, #484]	; 800d3c8 <turn135outL+0x3c8>
 800d1e4:	eeb0 0a67 	vmov.f32	s0, s15
 800d1e8:	f7f6 fe6e 	bl	8003ec8 <mollifier_slalom_table>
 800d1ec:	e013      	b.n	800d216 <turn135outL+0x216>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d1ee:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d1f2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d1f6:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d1fa:	eef0 2a66 	vmov.f32	s5, s13
 800d1fe:	eeb0 2a47 	vmov.f32	s4, s14
 800d202:	eddf 1a6f 	vldr	s3, [pc, #444]	; 800d3c0 <turn135outL+0x3c0>
 800d206:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 800d3c0 <turn135outL+0x3c0>
 800d20a:	eddf 0a6f 	vldr	s1, [pc, #444]	; 800d3c8 <turn135outL+0x3c8>
 800d20e:	eeb0 0a67 	vmov.f32	s0, s15
 800d212:	f7f6 fd09 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d216:	2300      	movs	r3, #0
 800d218:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d21a:	2300      	movs	r3, #0
 800d21c:	73fb      	strb	r3, [r7, #15]
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d21e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d222:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 800d3cc <turn135outL+0x3cc>
 800d226:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d22a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d22e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d232:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d236:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d23a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d23e:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800d242:	eec7 7a05 	vdiv.f32	s15, s14, s10
		straight_table2(90 + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d246:	ed9f 5a5d 	vldr	s10, [pc, #372]	; 800d3bc <turn135outL+0x3bc>
 800d24a:	ee87 7a85 	vdiv.f32	s14, s15, s10
 800d24e:	68f8      	ldr	r0, [r7, #12]
 800d250:	eeb0 2a47 	vmov.f32	s4, s14
 800d254:	eef0 1a65 	vmov.f32	s3, s11
 800d258:	ed9f 1a59 	vldr	s2, [pc, #356]	; 800d3c0 <turn135outL+0x3c0>
 800d25c:	eef0 0a46 	vmov.f32	s1, s12
 800d260:	eeb0 0a66 	vmov.f32	s0, s13
 800d264:	f7f5 feba 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d268:	4b53      	ldr	r3, [pc, #332]	; (800d3b8 <turn135outL+0x3b8>)
 800d26a:	2200      	movs	r2, #0
 800d26c:	701a      	strb	r2, [r3, #0]
}
 800d26e:	e09a      	b.n	800d3a6 <turn135outL+0x3a6>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d270:	2300      	movs	r3, #0
 800d272:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d274:	2300      	movs	r3, #0
 800d276:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d278:	2304      	movs	r3, #4
 800d27a:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d27c:	2300      	movs	r3, #0
 800d27e:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d280:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d284:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d288:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d28c:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d290:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d294:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d29c:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d2a0:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d2a4:	eddf 4a45 	vldr	s9, [pc, #276]	; 800d3bc <turn135outL+0x3bc>
 800d2a8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d2ac:	68f8      	ldr	r0, [r7, #12]
 800d2ae:	eeb0 2a47 	vmov.f32	s4, s14
 800d2b2:	eef0 1a45 	vmov.f32	s3, s10
 800d2b6:	eeb0 1a65 	vmov.f32	s2, s11
 800d2ba:	eef0 0a46 	vmov.f32	s1, s12
 800d2be:	eeb0 0a66 	vmov.f32	s0, s13
 800d2c2:	f7f5 fe8b 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d2c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d2ca:	2b01      	cmp	r3, #1
 800d2cc:	d10c      	bne.n	800d2e8 <turn135outL+0x2e8>
			mollifier_slalom_table(turnpara.g_speed,135,turnpara.t_speed);
 800d2ce:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2d2:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2d6:	eeb0 1a47 	vmov.f32	s2, s14
 800d2da:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800d3c8 <turn135outL+0x3c8>
 800d2de:	eeb0 0a67 	vmov.f32	s0, s15
 800d2e2:	f7f6 fdf1 	bl	8003ec8 <mollifier_slalom_table>
 800d2e6:	e013      	b.n	800d310 <turn135outL+0x310>
			slalom_table2(turnpara.g_speed,135, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d2f0:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d2f4:	eef0 2a66 	vmov.f32	s5, s13
 800d2f8:	eeb0 2a47 	vmov.f32	s4, s14
 800d2fc:	eddf 1a30 	vldr	s3, [pc, #192]	; 800d3c0 <turn135outL+0x3c0>
 800d300:	ed9f 1a2f 	vldr	s2, [pc, #188]	; 800d3c0 <turn135outL+0x3c0>
 800d304:	eddf 0a30 	vldr	s1, [pc, #192]	; 800d3c8 <turn135outL+0x3c8>
 800d308:	eeb0 0a67 	vmov.f32	s0, s15
 800d30c:	f7f6 fc8c 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT;
 800d310:	2301      	movs	r3, #1
 800d312:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d318:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d31c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d320:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d328:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d32c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d330:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d338:	eef0 7ae7 	vabs.f32	s15, s15
 800d33c:	ee17 0a90 	vmov	r0, s15
 800d340:	f7f3 f92a 	bl	8000598 <__aeabi_f2d>
 800d344:	f04f 0200 	mov.w	r2, #0
 800d348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d34c:	f7f3 faa6 	bl	800089c <__aeabi_ddiv>
 800d350:	4602      	mov	r2, r0
 800d352:	460b      	mov	r3, r1
 800d354:	4614      	mov	r4, r2
 800d356:	461d      	mov	r5, r3
 800d358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f3 f91c 	bl	8000598 <__aeabi_f2d>
 800d360:	4602      	mov	r2, r0
 800d362:	460b      	mov	r3, r1
 800d364:	4620      	mov	r0, r4
 800d366:	4629      	mov	r1, r5
 800d368:	f7f3 fa98 	bl	800089c <__aeabi_ddiv>
 800d36c:	4602      	mov	r2, r0
 800d36e:	460b      	mov	r3, r1
 800d370:	4610      	mov	r0, r2
 800d372:	4619      	mov	r1, r3
 800d374:	f04f 0200 	mov.w	r2, #0
 800d378:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <turn135outL+0x3d0>)
 800d37a:	f7f2 ffaf 	bl	80002dc <__adddf3>
 800d37e:	4602      	mov	r2, r0
 800d380:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d382:	4610      	mov	r0, r2
 800d384:	4619      	mov	r1, r3
 800d386:	f7f3 fc37 	bl	8000bf8 <__aeabi_d2f>
 800d38a:	4603      	mov	r3, r0
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	ee02 3a10 	vmov	s4, r3
 800d392:	edd7 1a01 	vldr	s3, [r7, #4]
 800d396:	ed97 1a01 	vldr	s2, [r7, #4]
 800d39a:	eef0 0a68 	vmov.f32	s1, s17
 800d39e:	eeb0 0a48 	vmov.f32	s0, s16
 800d3a2:	f7f5 fe1b 	bl	8002fdc <straight_table2>
}
 800d3a6:	bf00      	nop
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	ecbd 8b02 	vpop	{d8}
 800d3b0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d3b4:	b004      	add	sp, #16
 800d3b6:	4770      	bx	lr
 800d3b8:	20000808 	.word	0x20000808
 800d3bc:	42340000 	.word	0x42340000
 800d3c0:	00000000 	.word	0x00000000
 800d3c4:	42c4477b 	.word	0x42c4477b
 800d3c8:	43070000 	.word	0x43070000
 800d3cc:	42b40000 	.word	0x42b40000
 800d3d0:	408f4000 	.word	0x408f4000
 800d3d4:	00000000 	.word	0x00000000

0800d3d8 <V90R>:


void V90R(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d3d8:	b084      	sub	sp, #16
 800d3da:	b5b0      	push	{r4, r5, r7, lr}
 800d3dc:	ed2d 8b02 	vpush	{d8}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d3e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d3ec:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d3f0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	f040 80af 	bne.w	800d558 <V90R+0x180>
			highspeed_mode = 1;
 800d3fa:	4bc1      	ldr	r3, [pc, #772]	; (800d700 <V90R+0x328>)
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	701a      	strb	r2, [r3, #0]
			wallmode.WallControlMode=0;
 800d400:	2300      	movs	r3, #0
 800d402:	733b      	strb	r3, [r7, #12]
			wallmode.WallControlStatus=0;
 800d404:	2300      	movs	r3, #0
 800d406:	737b      	strb	r3, [r7, #13]
			wallmode.WallCutMode=0;
 800d408:	2300      	movs	r3, #0
 800d40a:	73fb      	strb	r3, [r7, #15]
			wallmode.calMazeMode=0;
 800d40c:	2300      	movs	r3, #0
 800d40e:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d410:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d414:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d418:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d41c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d420:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d424:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d428:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d42c:	eddf 5ab5 	vldr	s11, [pc, #724]	; 800d704 <V90R+0x32c>
 800d430:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	eeb0 2a47 	vmov.f32	s4, s14
 800d43a:	eef0 1a46 	vmov.f32	s3, s12
 800d43e:	eeb0 1a66 	vmov.f32	s2, s13
 800d442:	eddf 0ab2 	vldr	s1, [pc, #712]	; 800d70c <V90R+0x334>
 800d446:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 800d708 <V90R+0x330>
 800d44a:	f7f5 fdc7 	bl	8002fdc <straight_table2>
			wallmode.WallControlMode=0;
 800d44e:	2300      	movs	r3, #0
 800d450:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=3;
 800d452:	2303      	movs	r3, #3
 800d454:	73fb      	strb	r3, [r7, #15]
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d456:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d45a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d45e:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d462:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d466:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d46a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d46e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d472:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d476:	eec7 7a24 	vdiv.f32	s15, s14, s9
			straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d47a:	eddf 4aa2 	vldr	s9, [pc, #648]	; 800d704 <V90R+0x32c>
 800d47e:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d482:	68f8      	ldr	r0, [r7, #12]
 800d484:	eeb0 2a47 	vmov.f32	s4, s14
 800d488:	eef0 1a45 	vmov.f32	s3, s10
 800d48c:	eeb0 1a65 	vmov.f32	s2, s11
 800d490:	eef0 0a46 	vmov.f32	s1, s12
 800d494:	eeb0 0a66 	vmov.f32	s0, s13
 800d498:	f7f5 fda0 	bl	8002fdc <straight_table2>
			if(mollifier_mode == ON){
 800d49c:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d4a0:	2b01      	cmp	r3, #1
 800d4a2:	d10c      	bne.n	800d4be <V90R+0xe6>
				mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d4a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d4a8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d4ac:	eeb0 1a47 	vmov.f32	s2, s14
 800d4b0:	eddf 0a97 	vldr	s1, [pc, #604]	; 800d710 <V90R+0x338>
 800d4b4:	eeb0 0a67 	vmov.f32	s0, s15
 800d4b8:	f7f6 fd06 	bl	8003ec8 <mollifier_slalom_table>
 800d4bc:	e015      	b.n	800d4ea <V90R+0x112>
			}else{
				slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d4be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d4c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d4c6:	eef1 7a67 	vneg.f32	s15, s15
 800d4ca:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d4ce:	eef0 2a66 	vmov.f32	s5, s13
 800d4d2:	eeb0 2a67 	vmov.f32	s4, s15
 800d4d6:	eddf 1a8d 	vldr	s3, [pc, #564]	; 800d70c <V90R+0x334>
 800d4da:	ed9f 1a8c 	vldr	s2, [pc, #560]	; 800d70c <V90R+0x334>
 800d4de:	eddf 0a8c 	vldr	s1, [pc, #560]	; 800d710 <V90R+0x338>
 800d4e2:	eeb0 0a47 	vmov.f32	s0, s14
 800d4e6:	f7f6 fb9f 	bl	8003c28 <slalom_table2>
			}
			wallmode.WallControlMode=0;
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	733b      	strb	r3, [r7, #12]
			wallmode.WallCutMode=0;
 800d4ee:	2300      	movs	r3, #0
 800d4f0:	73fb      	strb	r3, [r7, #15]
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f7f3 f84f 	bl	8000598 <__aeabi_f2d>
 800d4fa:	a37f      	add	r3, pc, #508	; (adr r3, 800d6f8 <V90R+0x320>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	f7f2 feec 	bl	80002dc <__adddf3>
 800d504:	4602      	mov	r2, r0
 800d506:	460b      	mov	r3, r1
 800d508:	4610      	mov	r0, r2
 800d50a:	4619      	mov	r1, r3
 800d50c:	f7f3 fb74 	bl	8000bf8 <__aeabi_d2f>
 800d510:	4603      	mov	r3, r0
 800d512:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d516:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
					turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d51a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d51e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d522:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d526:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d52a:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d52e:	eddf 5a75 	vldr	s11, [pc, #468]	; 800d704 <V90R+0x32c>
 800d532:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	eeb0 2a47 	vmov.f32	s4, s14
 800d53c:	eef0 1a46 	vmov.f32	s3, s12
 800d540:	ed9f 1a72 	vldr	s2, [pc, #456]	; 800d70c <V90R+0x334>
 800d544:	eef0 0a66 	vmov.f32	s1, s13
 800d548:	ee00 3a10 	vmov	s0, r3
 800d54c:	f7f5 fd46 	bl	8002fdc <straight_table2>
			highspeed_mode = 0;
 800d550:	4b6b      	ldr	r3, [pc, #428]	; (800d700 <V90R+0x328>)
 800d552:	2200      	movs	r2, #0
 800d554:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d556:	e13e      	b.n	800d7d6 <V90R+0x3fe>
		}else if (test_mode >= 2) {
 800d558:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	f240 808c 	bls.w	800d67a <V90R+0x2a2>
		highspeed_mode = 1;
 800d562:	4b67      	ldr	r3, [pc, #412]	; (800d700 <V90R+0x328>)
 800d564:	2201      	movs	r2, #1
 800d566:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d568:	2300      	movs	r3, #0
 800d56a:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d56c:	2300      	movs	r3, #0
 800d56e:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d570:	2303      	movs	r3, #3
 800d572:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d574:	2300      	movs	r3, #0
 800d576:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d578:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d57c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d580:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d584:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d588:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d58c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d590:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d594:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d598:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d59c:	eddf 4a59 	vldr	s9, [pc, #356]	; 800d704 <V90R+0x32c>
 800d5a0:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	eeb0 2a47 	vmov.f32	s4, s14
 800d5aa:	eef0 1a45 	vmov.f32	s3, s10
 800d5ae:	eeb0 1a65 	vmov.f32	s2, s11
 800d5b2:	eef0 0a46 	vmov.f32	s1, s12
 800d5b6:	eeb0 0a66 	vmov.f32	s0, s13
 800d5ba:	f7f5 fd0f 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d5be:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d5c2:	2b01      	cmp	r3, #1
 800d5c4:	d10c      	bne.n	800d5e0 <V90R+0x208>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d5c6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d5ca:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d5ce:	eeb0 1a47 	vmov.f32	s2, s14
 800d5d2:	eddf 0a4f 	vldr	s1, [pc, #316]	; 800d710 <V90R+0x338>
 800d5d6:	eeb0 0a67 	vmov.f32	s0, s15
 800d5da:	f7f6 fc75 	bl	8003ec8 <mollifier_slalom_table>
 800d5de:	e015      	b.n	800d60c <V90R+0x234>
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d5e0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d5e4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d5e8:	eef1 7a67 	vneg.f32	s15, s15
 800d5ec:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d5f0:	eef0 2a66 	vmov.f32	s5, s13
 800d5f4:	eeb0 2a67 	vmov.f32	s4, s15
 800d5f8:	eddf 1a44 	vldr	s3, [pc, #272]	; 800d70c <V90R+0x334>
 800d5fc:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800d70c <V90R+0x334>
 800d600:	eddf 0a43 	vldr	s1, [pc, #268]	; 800d710 <V90R+0x338>
 800d604:	eeb0 0a47 	vmov.f32	s0, s14
 800d608:	f7f6 fb0e 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800d60c:	2300      	movs	r3, #0
 800d60e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d610:	2300      	movs	r3, #0
 800d612:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d616:	4618      	mov	r0, r3
 800d618:	f7f2 ffbe 	bl	8000598 <__aeabi_f2d>
 800d61c:	a336      	add	r3, pc, #216	; (adr r3, 800d6f8 <V90R+0x320>)
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f7f2 fe5b 	bl	80002dc <__adddf3>
 800d626:	4602      	mov	r2, r0
 800d628:	460b      	mov	r3, r1
 800d62a:	4610      	mov	r0, r2
 800d62c:	4619      	mov	r1, r3
 800d62e:	f7f3 fae3 	bl	8000bf8 <__aeabi_d2f>
 800d632:	4603      	mov	r3, r0
 800d634:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d638:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d63c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d640:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d644:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d648:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d64c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d650:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800d704 <V90R+0x32c>
 800d654:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	eeb0 2a47 	vmov.f32	s4, s14
 800d65e:	eef0 1a46 	vmov.f32	s3, s12
 800d662:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800d70c <V90R+0x334>
 800d666:	eef0 0a66 	vmov.f32	s1, s13
 800d66a:	ee00 3a10 	vmov	s0, r3
 800d66e:	f7f5 fcb5 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800d672:	4b23      	ldr	r3, [pc, #140]	; (800d700 <V90R+0x328>)
 800d674:	2200      	movs	r2, #0
 800d676:	701a      	strb	r2, [r3, #0]
}
 800d678:	e0ad      	b.n	800d7d6 <V90R+0x3fe>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800d67a:	2300      	movs	r3, #0
 800d67c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d67e:	2300      	movs	r3, #0
 800d680:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=3;
 800d682:	2303      	movs	r3, #3
 800d684:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d686:	2300      	movs	r3, #0
 800d688:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d68a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d68e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d692:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d696:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d69a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d69e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6a6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d6aa:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d6ae:	eddf 4a15 	vldr	s9, [pc, #84]	; 800d704 <V90R+0x32c>
 800d6b2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d6b6:	68f8      	ldr	r0, [r7, #12]
 800d6b8:	eeb0 2a47 	vmov.f32	s4, s14
 800d6bc:	eef0 1a45 	vmov.f32	s3, s10
 800d6c0:	eeb0 1a65 	vmov.f32	s2, s11
 800d6c4:	eef0 0a46 	vmov.f32	s1, s12
 800d6c8:	eeb0 0a66 	vmov.f32	s0, s13
 800d6cc:	f7f5 fc86 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d6d0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d11d      	bne.n	800d714 <V90R+0x33c>
			mollifier_slalom_table(turnpara.g_speed,-90,turnpara.t_speed);
 800d6d8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d6dc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d6e0:	eeb0 1a47 	vmov.f32	s2, s14
 800d6e4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800d710 <V90R+0x338>
 800d6e8:	eeb0 0a67 	vmov.f32	s0, s15
 800d6ec:	f7f6 fbec 	bl	8003ec8 <mollifier_slalom_table>
 800d6f0:	e026      	b.n	800d740 <V90R+0x368>
 800d6f2:	bf00      	nop
 800d6f4:	f3af 8000 	nop.w
 800d6f8:	c022ec18 	.word	0xc022ec18
 800d6fc:	405fd1de 	.word	0x405fd1de
 800d700:	20000808 	.word	0x20000808
 800d704:	42340000 	.word	0x42340000
 800d708:	42c4477b 	.word	0x42c4477b
 800d70c:	00000000 	.word	0x00000000
 800d710:	c2b40000 	.word	0xc2b40000
			slalom_table2(turnpara.g_speed,-90, 0, 0, -turnpara.t_speed, turnpara.t_acc);
 800d714:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d718:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d71c:	eef1 7a67 	vneg.f32	s15, s15
 800d720:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d724:	eef0 2a66 	vmov.f32	s5, s13
 800d728:	eeb0 2a67 	vmov.f32	s4, s15
 800d72c:	ed5f 1a09 	vldr	s3, [pc, #-36]	; 800d70c <V90R+0x334>
 800d730:	ed1f 1a0a 	vldr	s2, [pc, #-40]	; 800d70c <V90R+0x334>
 800d734:	ed5f 0a0a 	vldr	s1, [pc, #-40]	; 800d710 <V90R+0x338>
 800d738:	eeb0 0a47 	vmov.f32	s0, s14
 800d73c:	f7f6 fa74 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800d740:	2303      	movs	r3, #3
 800d742:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800d744:	2300      	movs	r3, #0
 800d746:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d748:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800d74c:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800d750:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d754:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d758:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d75c:	edd7 7a01 	vldr	s15, [r7, #4]
 800d760:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800d764:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d768:	eef0 7ae7 	vabs.f32	s15, s15
 800d76c:	ee17 0a90 	vmov	r0, s15
 800d770:	f7f2 ff12 	bl	8000598 <__aeabi_f2d>
 800d774:	f04f 0200 	mov.w	r2, #0
 800d778:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d77c:	f7f3 f88e 	bl	800089c <__aeabi_ddiv>
 800d780:	4602      	mov	r2, r0
 800d782:	460b      	mov	r3, r1
 800d784:	4614      	mov	r4, r2
 800d786:	461d      	mov	r5, r3
 800d788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d78a:	4618      	mov	r0, r3
 800d78c:	f7f2 ff04 	bl	8000598 <__aeabi_f2d>
 800d790:	4602      	mov	r2, r0
 800d792:	460b      	mov	r3, r1
 800d794:	4620      	mov	r0, r4
 800d796:	4629      	mov	r1, r5
 800d798:	f7f3 f880 	bl	800089c <__aeabi_ddiv>
 800d79c:	4602      	mov	r2, r0
 800d79e:	460b      	mov	r3, r1
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	4619      	mov	r1, r3
 800d7a4:	f04f 0200 	mov.w	r2, #0
 800d7a8:	4b0f      	ldr	r3, [pc, #60]	; (800d7e8 <V90R+0x410>)
 800d7aa:	f7f2 fd97 	bl	80002dc <__adddf3>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800d7b2:	4610      	mov	r0, r2
 800d7b4:	4619      	mov	r1, r3
 800d7b6:	f7f3 fa1f 	bl	8000bf8 <__aeabi_d2f>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	ee02 3a10 	vmov	s4, r3
 800d7c2:	edd7 1a01 	vldr	s3, [r7, #4]
 800d7c6:	ed97 1a01 	vldr	s2, [r7, #4]
 800d7ca:	eef0 0a68 	vmov.f32	s1, s17
 800d7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800d7d2:	f7f5 fc03 	bl	8002fdc <straight_table2>
}
 800d7d6:	bf00      	nop
 800d7d8:	3710      	adds	r7, #16
 800d7da:	46bd      	mov	sp, r7
 800d7dc:	ecbd 8b02 	vpop	{d8}
 800d7e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800d7e4:	b004      	add	sp, #16
 800d7e6:	4770      	bx	lr
 800d7e8:	408f4000 	.word	0x408f4000
 800d7ec:	00000000 	.word	0x00000000

0800d7f0 <V90L>:

void V90L(parameter turnpara,  char test_mode,char mollifier_mode,float end_velocity) {
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	b5b0      	push	{r4, r5, r7, lr}
 800d7f4:	ed2d 8b02 	vpush	{d8}
 800d7f8:	b084      	sub	sp, #16
 800d7fa:	af00      	add	r7, sp, #0
 800d7fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800d800:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d804:	ed87 0a01 	vstr	s0, [r7, #4]
	MOTOR_MODE wallmode;
	if (test_mode == 1) {
 800d808:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	f040 80ad 	bne.w	800d96c <V90L+0x17c>
				highspeed_mode = 1;
 800d812:	4bbf      	ldr	r3, [pc, #764]	; (800db10 <V90L+0x320>)
 800d814:	2201      	movs	r2, #1
 800d816:	701a      	strb	r2, [r3, #0]
				wallmode.WallControlMode=0;
 800d818:	2300      	movs	r3, #0
 800d81a:	733b      	strb	r3, [r7, #12]
				wallmode.WallControlStatus=0;
 800d81c:	2300      	movs	r3, #0
 800d81e:	737b      	strb	r3, [r7, #13]
				wallmode.WallCutMode=0;
 800d820:	2300      	movs	r3, #0
 800d822:	73fb      	strb	r3, [r7, #15]
				wallmode.calMazeMode=0;
 800d824:	2300      	movs	r3, #0
 800d826:	73bb      	strb	r3, [r7, #14]
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d828:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d82c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
							turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d830:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d834:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d838:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d83c:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d840:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(BACK_TO_CENTER_SLANT + 45*sqrt(2), 0, turnpara.g_speed, turnpara.g_speed,
 800d844:	eddf 5ab3 	vldr	s11, [pc, #716]	; 800db14 <V90L+0x324>
 800d848:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	eeb0 2a47 	vmov.f32	s4, s14
 800d852:	eef0 1a46 	vmov.f32	s3, s12
 800d856:	eeb0 1a66 	vmov.f32	s2, s13
 800d85a:	eddf 0ab0 	vldr	s1, [pc, #704]	; 800db1c <V90L+0x32c>
 800d85e:	ed9f 0aae 	vldr	s0, [pc, #696]	; 800db18 <V90L+0x328>
 800d862:	f7f5 fbbb 	bl	8002fdc <straight_table2>
				wallmode.WallControlMode=0;
 800d866:	2300      	movs	r3, #0
 800d868:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=4;
 800d86a:	2304      	movs	r3, #4
 800d86c:	73fb      	strb	r3, [r7, #15]
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d86e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d872:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d876:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d87a:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d87e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d882:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d886:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d88a:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d88e:	eec7 7a24 	vdiv.f32	s15, s14, s9
				straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d892:	eddf 4aa0 	vldr	s9, [pc, #640]	; 800db14 <V90L+0x324>
 800d896:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	eeb0 2a47 	vmov.f32	s4, s14
 800d8a0:	eef0 1a45 	vmov.f32	s3, s10
 800d8a4:	eeb0 1a65 	vmov.f32	s2, s11
 800d8a8:	eef0 0a46 	vmov.f32	s1, s12
 800d8ac:	eeb0 0a66 	vmov.f32	s0, s13
 800d8b0:	f7f5 fb94 	bl	8002fdc <straight_table2>
				if(mollifier_mode == ON){
 800d8b4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d10c      	bne.n	800d8d6 <V90L+0xe6>
					mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d8bc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8c0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8c4:	eeb0 1a47 	vmov.f32	s2, s14
 800d8c8:	eddf 0a95 	vldr	s1, [pc, #596]	; 800db20 <V90L+0x330>
 800d8cc:	eeb0 0a67 	vmov.f32	s0, s15
 800d8d0:	f7f6 fafa 	bl	8003ec8 <mollifier_slalom_table>
 800d8d4:	e013      	b.n	800d8fe <V90L+0x10e>
				}else{
					slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d8d6:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d8da:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d8de:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800d8e2:	eef0 2a66 	vmov.f32	s5, s13
 800d8e6:	eeb0 2a47 	vmov.f32	s4, s14
 800d8ea:	eddf 1a8c 	vldr	s3, [pc, #560]	; 800db1c <V90L+0x32c>
 800d8ee:	ed9f 1a8b 	vldr	s2, [pc, #556]	; 800db1c <V90L+0x32c>
 800d8f2:	eddf 0a8b 	vldr	s1, [pc, #556]	; 800db20 <V90L+0x330>
 800d8f6:	eeb0 0a67 	vmov.f32	s0, s15
 800d8fa:	f7f6 f995 	bl	8003c28 <slalom_table2>
				}
				wallmode.WallControlMode=0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	733b      	strb	r3, [r7, #12]
				wallmode.WallCutMode=0;
 800d902:	2300      	movs	r3, #0
 800d904:	73fb      	strb	r3, [r7, #15]
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d908:	4618      	mov	r0, r3
 800d90a:	f7f2 fe45 	bl	8000598 <__aeabi_f2d>
 800d90e:	a37e      	add	r3, pc, #504	; (adr r3, 800db08 <V90L+0x318>)
 800d910:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d914:	f7f2 fce2 	bl	80002dc <__adddf3>
 800d918:	4602      	mov	r2, r0
 800d91a:	460b      	mov	r3, r1
 800d91c:	4610      	mov	r0, r2
 800d91e:	4619      	mov	r1, r3
 800d920:	f7f3 f96a 	bl	8000bf8 <__aeabi_d2f>
 800d924:	4603      	mov	r3, r0
 800d926:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800d92a:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
						turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d92e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d932:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d93a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800d93e:	eec7 7a25 	vdiv.f32	s15, s14, s11
				straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800d942:	eddf 5a74 	vldr	s11, [pc, #464]	; 800db14 <V90L+0x324>
 800d946:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	eeb0 2a47 	vmov.f32	s4, s14
 800d950:	eef0 1a46 	vmov.f32	s3, s12
 800d954:	ed9f 1a71 	vldr	s2, [pc, #452]	; 800db1c <V90L+0x32c>
 800d958:	eef0 0a66 	vmov.f32	s1, s13
 800d95c:	ee00 3a10 	vmov	s0, r3
 800d960:	f7f5 fb3c 	bl	8002fdc <straight_table2>
				highspeed_mode = 0;
 800d964:	4b6a      	ldr	r3, [pc, #424]	; (800db10 <V90L+0x320>)
 800d966:	2200      	movs	r2, #0
 800d968:	701a      	strb	r2, [r3, #0]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);

	}

}
 800d96a:	e13a      	b.n	800dbe2 <V90L+0x3f2>
			}else if (test_mode >= 2) {
 800d96c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800d970:	2b01      	cmp	r3, #1
 800d972:	f240 808a 	bls.w	800da8a <V90L+0x29a>
		highspeed_mode = 1;
 800d976:	4b66      	ldr	r3, [pc, #408]	; (800db10 <V90L+0x320>)
 800d978:	2201      	movs	r2, #1
 800d97a:	701a      	strb	r2, [r3, #0]
		wallmode.WallControlMode=0;
 800d97c:	2300      	movs	r3, #0
 800d97e:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800d980:	2300      	movs	r3, #0
 800d982:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800d984:	2304      	movs	r3, #4
 800d986:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800d988:	2300      	movs	r3, #0
 800d98a:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d98c:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800d990:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800d994:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800d998:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800d99c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d9a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9a8:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800d9ac:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800d9b0:	eddf 4a58 	vldr	s9, [pc, #352]	; 800db14 <V90L+0x324>
 800d9b4:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800d9b8:	68f8      	ldr	r0, [r7, #12]
 800d9ba:	eeb0 2a47 	vmov.f32	s4, s14
 800d9be:	eef0 1a45 	vmov.f32	s3, s10
 800d9c2:	eeb0 1a65 	vmov.f32	s2, s11
 800d9c6:	eef0 0a46 	vmov.f32	s1, s12
 800d9ca:	eeb0 0a66 	vmov.f32	s0, s13
 800d9ce:	f7f5 fb05 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800d9d2:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d10c      	bne.n	800d9f4 <V90L+0x204>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800d9da:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9de:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9e2:	eeb0 1a47 	vmov.f32	s2, s14
 800d9e6:	eddf 0a4e 	vldr	s1, [pc, #312]	; 800db20 <V90L+0x330>
 800d9ea:	eeb0 0a67 	vmov.f32	s0, s15
 800d9ee:	f7f6 fa6b 	bl	8003ec8 <mollifier_slalom_table>
 800d9f2:	e013      	b.n	800da1c <V90L+0x22c>
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800d9f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d9f8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d9fc:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800da00:	eef0 2a66 	vmov.f32	s5, s13
 800da04:	eeb0 2a47 	vmov.f32	s4, s14
 800da08:	eddf 1a44 	vldr	s3, [pc, #272]	; 800db1c <V90L+0x32c>
 800da0c:	ed9f 1a43 	vldr	s2, [pc, #268]	; 800db1c <V90L+0x32c>
 800da10:	eddf 0a43 	vldr	s1, [pc, #268]	; 800db20 <V90L+0x330>
 800da14:	eeb0 0a67 	vmov.f32	s0, s15
 800da18:	f7f6 f906 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da26:	4618      	mov	r0, r3
 800da28:	f7f2 fdb6 	bl	8000598 <__aeabi_f2d>
 800da2c:	a336      	add	r3, pc, #216	; (adr r3, 800db08 <V90L+0x318>)
 800da2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da32:	f7f2 fc53 	bl	80002dc <__adddf3>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	4610      	mov	r0, r2
 800da3c:	4619      	mov	r1, r3
 800da3e:	f7f3 f8db 	bl	8000bf8 <__aeabi_d2f>
 800da42:	4603      	mov	r3, r0
 800da44:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800da48:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800da4c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800da50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800da54:	ee27 7a27 	vmul.f32	s14, s14, s15
 800da58:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800da5c:	eec7 7a25 	vdiv.f32	s15, s14, s11
		straight_table2(90*sqrt(2) + turnpara.e_ofset, turnpara.g_speed, 0, turnpara.g_speed,
 800da60:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800db14 <V90L+0x324>
 800da64:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800da68:	68f8      	ldr	r0, [r7, #12]
 800da6a:	eeb0 2a47 	vmov.f32	s4, s14
 800da6e:	eef0 1a46 	vmov.f32	s3, s12
 800da72:	ed9f 1a2a 	vldr	s2, [pc, #168]	; 800db1c <V90L+0x32c>
 800da76:	eef0 0a66 	vmov.f32	s1, s13
 800da7a:	ee00 3a10 	vmov	s0, r3
 800da7e:	f7f5 faad 	bl	8002fdc <straight_table2>
		highspeed_mode = 0;
 800da82:	4b23      	ldr	r3, [pc, #140]	; (800db10 <V90L+0x320>)
 800da84:	2200      	movs	r2, #0
 800da86:	701a      	strb	r2, [r3, #0]
}
 800da88:	e0ab      	b.n	800dbe2 <V90L+0x3f2>
		wallmode.WallControlMode=OFFSET_CONTROL_IN_SLANT;
 800da8a:	2300      	movs	r3, #0
 800da8c:	733b      	strb	r3, [r7, #12]
		wallmode.WallControlStatus=0;
 800da8e:	2300      	movs	r3, #0
 800da90:	737b      	strb	r3, [r7, #13]
		wallmode.WallCutMode=4;
 800da92:	2304      	movs	r3, #4
 800da94:	73fb      	strb	r3, [r7, #15]
		wallmode.calMazeMode=0;
 800da96:	2300      	movs	r3, #0
 800da98:	73bb      	strb	r3, [r7, #14]
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800da9a:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800da9e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 800daa2:	edd7 5a0a 	vldr	s11, [r7, #40]	; 0x28
 800daa6:	ed97 5a0a 	vldr	s10, [r7, #40]	; 0x28
				turnpara.g_speed * turnpara.g_speed  / 2 / 45,wallmode);
 800daaa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800daae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800dab2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dab6:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
 800daba:	eec7 7a24 	vdiv.f32	s15, s14, s9
		straight_table2(turnpara.f_ofset, turnpara.g_speed, turnpara.g_speed, turnpara.g_speed,
 800dabe:	eddf 4a15 	vldr	s9, [pc, #84]	; 800db14 <V90L+0x324>
 800dac2:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 800dac6:	68f8      	ldr	r0, [r7, #12]
 800dac8:	eeb0 2a47 	vmov.f32	s4, s14
 800dacc:	eef0 1a45 	vmov.f32	s3, s10
 800dad0:	eeb0 1a65 	vmov.f32	s2, s11
 800dad4:	eef0 0a46 	vmov.f32	s1, s12
 800dad8:	eeb0 0a66 	vmov.f32	s0, s13
 800dadc:	f7f5 fa7e 	bl	8002fdc <straight_table2>
		if(mollifier_mode == ON){
 800dae0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800dae4:	2b01      	cmp	r3, #1
 800dae6:	d11d      	bne.n	800db24 <V90L+0x334>
			mollifier_slalom_table(turnpara.g_speed,90,turnpara.t_speed);
 800dae8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800daec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800daf0:	eeb0 1a47 	vmov.f32	s2, s14
 800daf4:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800db20 <V90L+0x330>
 800daf8:	eeb0 0a67 	vmov.f32	s0, s15
 800dafc:	f7f6 f9e4 	bl	8003ec8 <mollifier_slalom_table>
 800db00:	e024      	b.n	800db4c <V90L+0x35c>
 800db02:	bf00      	nop
 800db04:	f3af 8000 	nop.w
 800db08:	c022ec18 	.word	0xc022ec18
 800db0c:	405fd1de 	.word	0x405fd1de
 800db10:	20000808 	.word	0x20000808
 800db14:	42340000 	.word	0x42340000
 800db18:	42d4477b 	.word	0x42d4477b
 800db1c:	00000000 	.word	0x00000000
 800db20:	42b40000 	.word	0x42b40000
			slalom_table2(turnpara.g_speed,90, 0, 0, turnpara.t_speed, turnpara.t_acc);
 800db24:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db28:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800db2c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 800db30:	eef0 2a66 	vmov.f32	s5, s13
 800db34:	eeb0 2a47 	vmov.f32	s4, s14
 800db38:	ed5f 1a08 	vldr	s3, [pc, #-32]	; 800db1c <V90L+0x32c>
 800db3c:	ed1f 1a09 	vldr	s2, [pc, #-36]	; 800db1c <V90L+0x32c>
 800db40:	ed5f 0a09 	vldr	s1, [pc, #-36]	; 800db20 <V90L+0x330>
 800db44:	eeb0 0a67 	vmov.f32	s0, s15
 800db48:	f7f6 f86e 	bl	8003c28 <slalom_table2>
		wallmode.WallControlMode=OFFSET_CONTROL_OUT_SLANT;
 800db4c:	2303      	movs	r3, #3
 800db4e:	733b      	strb	r3, [r7, #12]
		wallmode.WallCutMode=0;
 800db50:	2300      	movs	r3, #0
 800db52:	73fb      	strb	r3, [r7, #15]
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800db54:	ed97 8a0c 	vldr	s16, [r7, #48]	; 0x30
 800db58:	edd7 8a0a 	vldr	s17, [r7, #40]	; 0x28
								fabs(turnpara.g_speed * turnpara.g_speed-end_velocity*end_velocity)  / 2 / turnpara.e_ofset+1000,wallmode);
 800db5c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800db60:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800db64:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db68:	edd7 7a01 	vldr	s15, [r7, #4]
 800db6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800db70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db74:	eef0 7ae7 	vabs.f32	s15, s15
 800db78:	ee17 0a90 	vmov	r0, s15
 800db7c:	f7f2 fd0c 	bl	8000598 <__aeabi_f2d>
 800db80:	f04f 0200 	mov.w	r2, #0
 800db84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800db88:	f7f2 fe88 	bl	800089c <__aeabi_ddiv>
 800db8c:	4602      	mov	r2, r0
 800db8e:	460b      	mov	r3, r1
 800db90:	4614      	mov	r4, r2
 800db92:	461d      	mov	r5, r3
 800db94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db96:	4618      	mov	r0, r3
 800db98:	f7f2 fcfe 	bl	8000598 <__aeabi_f2d>
 800db9c:	4602      	mov	r2, r0
 800db9e:	460b      	mov	r3, r1
 800dba0:	4620      	mov	r0, r4
 800dba2:	4629      	mov	r1, r5
 800dba4:	f7f2 fe7a 	bl	800089c <__aeabi_ddiv>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4610      	mov	r0, r2
 800dbae:	4619      	mov	r1, r3
 800dbb0:	f04f 0200 	mov.w	r2, #0
 800dbb4:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <V90L+0x404>)
 800dbb6:	f7f2 fb91 	bl	80002dc <__adddf3>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	460b      	mov	r3, r1
		straight_table2(turnpara.e_ofset, turnpara.g_speed, end_velocity, end_velocity,
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	4619      	mov	r1, r3
 800dbc2:	f7f3 f819 	bl	8000bf8 <__aeabi_d2f>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	68f8      	ldr	r0, [r7, #12]
 800dbca:	ee02 3a10 	vmov	s4, r3
 800dbce:	edd7 1a01 	vldr	s3, [r7, #4]
 800dbd2:	ed97 1a01 	vldr	s2, [r7, #4]
 800dbd6:	eef0 0a68 	vmov.f32	s1, s17
 800dbda:	eeb0 0a48 	vmov.f32	s0, s16
 800dbde:	f7f5 f9fd 	bl	8002fdc <straight_table2>
}
 800dbe2:	bf00      	nop
 800dbe4:	3710      	adds	r7, #16
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	ecbd 8b02 	vpop	{d8}
 800dbec:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 800dbf0:	b004      	add	sp, #16
 800dbf2:	4770      	bx	lr
 800dbf4:	408f4000 	.word	0x408f4000

0800dbf8 <testturning>:


void testturning(parameter_speed Howspeed,int turnmode,char shortest_mode,char funmode,float funduty,char mollifier_mode){
 800dbf8:	b084      	sub	sp, #16
 800dbfa:	b580      	push	{r7, lr}
 800dbfc:	b086      	sub	sp, #24
 800dbfe:	af04      	add	r7, sp, #16
 800dc00:	f107 0c10 	add.w	ip, r7, #16
 800dc04:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800dc08:	ed87 0a01 	vstr	s0, [r7, #4]
	//0=slalomR,1=slalomL,2=90R,3=90L,4=180R,5=180L,6=in45R,7=in45L,8=in135R,9=in135L
	//10=out45R,11=out45L,12=out135R,13=out135L,14=V90R,15=V90L
	if(funmode==ON){
 800dc0c:	f897 3160 	ldrb.w	r3, [r7, #352]	; 0x160
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d116      	bne.n	800dc42 <testturning+0x4a>
		pl_DriveMotor_standby(ON);
 800dc14:	2001      	movs	r0, #1
 800dc16:	f7f9 fe57 	bl	80078c8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc1a:	2003      	movs	r0, #3
 800dc1c:	f7f9 fe5e 	bl	80078dc <pl_L_DriveMotor_mode>
		pl_FunMotor_duty(funduty);
 800dc20:	ed97 0a01 	vldr	s0, [r7, #4]
 800dc24:	f7f9 feee 	bl	8007a04 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800dc28:	f7f9 fed8 	bl	80079dc <pl_FunMotor_start>
		HAL_Delay(600);
 800dc2c:	f44f 7016 	mov.w	r0, #600	; 0x258
 800dc30:	f00a ffd8 	bl	8018be4 <HAL_Delay>
		reset_gyro();
 800dc34:	f7f3 fd98 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc38:	f7f3 f9ee 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc3c:	f7f6 fcb2 	bl	80045a4 <clear_Ierror>
 800dc40:	e00b      	b.n	800dc5a <testturning+0x62>

	}else{
		pl_DriveMotor_standby(ON);
 800dc42:	2001      	movs	r0, #1
 800dc44:	f7f9 fe40 	bl	80078c8 <pl_DriveMotor_standby>
		pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dc48:	2003      	movs	r0, #3
 800dc4a:	f7f9 fe47 	bl	80078dc <pl_L_DriveMotor_mode>
		reset_gyro();
 800dc4e:	f7f3 fd8b 	bl	8001768 <reset_gyro>
		reset_speed();
 800dc52:	f7f3 f9e1 	bl	8001018 <reset_speed>
		clear_Ierror();
 800dc56:	f7f6 fca5 	bl	80045a4 <clear_Ierror>

	}
	record_mode=2;
 800dc5a:	4ba8      	ldr	r3, [pc, #672]	; (800defc <testturning+0x304>)
 800dc5c:	2202      	movs	r2, #2
 800dc5e:	701a      	strb	r2, [r3, #0]
//	if(turnmode==0){test_mollifier_slalomR(Howspeed.slalom_R);}
	if(turnmode==0){slalomR(Howspeed.slalom_R,ON,shortest_mode,mollifier_mode,-100);}
 800dc60:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d110      	bne.n	800dc8a <testturning+0x92>
 800dc68:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc6c:	9303      	str	r3, [sp, #12]
 800dc6e:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc72:	9302      	str	r3, [sp, #8]
 800dc74:	2301      	movs	r3, #1
 800dc76:	9301      	str	r3, [sp, #4]
 800dc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7a:	9300      	str	r3, [sp, #0]
 800dc7c:	f107 0318 	add.w	r3, r7, #24
 800dc80:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc82:	ed9f 0a9f 	vldr	s0, [pc, #636]	; 800df00 <testturning+0x308>
 800dc86:	f7fc f973 	bl	8009f70 <slalomR>
	if(turnmode==1){slalomL(Howspeed.slalom_L,ON,shortest_mode,mollifier_mode,-100);}
 800dc8a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d110      	bne.n	800dcb4 <testturning+0xbc>
 800dc92:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dc96:	9303      	str	r3, [sp, #12]
 800dc98:	f897 315c 	ldrb.w	r3, [r7, #348]	; 0x15c
 800dc9c:	9302      	str	r3, [sp, #8]
 800dc9e:	2301      	movs	r3, #1
 800dca0:	9301      	str	r3, [sp, #4]
 800dca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dca4:	9300      	str	r3, [sp, #0]
 800dca6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800dcaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcac:	ed9f 0a94 	vldr	s0, [pc, #592]	; 800df00 <testturning+0x308>
 800dcb0:	f7fc fb44 	bl	800a33c <slalomL>
	if(turnmode==2){turn90R(Howspeed.turn90_R,ON,mollifier_mode,-100);}
 800dcb4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcb8:	2b02      	cmp	r3, #2
 800dcba:	d10d      	bne.n	800dcd8 <testturning+0xe0>
 800dcbc:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dcc0:	9302      	str	r3, [sp, #8]
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	9301      	str	r3, [sp, #4]
 800dcc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcc8:	9300      	str	r3, [sp, #0]
 800dcca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800dcce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcd0:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800df00 <testturning+0x308>
 800dcd4:	f7fc fd14 	bl	800a700 <turn90R>
	if(turnmode==3){turn90L(Howspeed.turn90_L,ON,mollifier_mode,-100);}
 800dcd8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dcdc:	2b03      	cmp	r3, #3
 800dcde:	d10d      	bne.n	800dcfc <testturning+0x104>
 800dce0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dce4:	9302      	str	r3, [sp, #8]
 800dce6:	2301      	movs	r3, #1
 800dce8:	9301      	str	r3, [sp, #4]
 800dcea:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dcec:	9300      	str	r3, [sp, #0]
 800dcee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800dcf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dcf4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 800df00 <testturning+0x308>
 800dcf8:	f7fc fe6c 	bl	800a9d4 <turn90L>
	if(turnmode==4){turn180R(Howspeed.turn180_R,ON,mollifier_mode,-100);}
 800dcfc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd00:	2b04      	cmp	r3, #4
 800dd02:	d10d      	bne.n	800dd20 <testturning+0x128>
 800dd04:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd08:	9302      	str	r3, [sp, #8]
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	9301      	str	r3, [sp, #4]
 800dd0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dd10:	9300      	str	r3, [sp, #0]
 800dd12:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800dd16:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd18:	ed9f 0a79 	vldr	s0, [pc, #484]	; 800df00 <testturning+0x308>
 800dd1c:	f7fc ffbe 	bl	800ac9c <turn180R>
	if(turnmode==5){turn180L(Howspeed.turn180_L,ON,mollifier_mode,-100);}
 800dd20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd24:	2b05      	cmp	r3, #5
 800dd26:	d10e      	bne.n	800dd46 <testturning+0x14e>
 800dd28:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd2c:	9302      	str	r3, [sp, #8]
 800dd2e:	2301      	movs	r3, #1
 800dd30:	9301      	str	r3, [sp, #4]
 800dd32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd36:	9300      	str	r3, [sp, #0]
 800dd38:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800dd3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd3e:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800df00 <testturning+0x308>
 800dd42:	f7fd f915 	bl	800af70 <turn180L>
	if(turnmode==6){turn45inR(Howspeed.turn45in_R,ON,mollifier_mode,-100);}
 800dd46:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd4a:	2b06      	cmp	r3, #6
 800dd4c:	d10e      	bne.n	800dd6c <testturning+0x174>
 800dd4e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd52:	9302      	str	r3, [sp, #8]
 800dd54:	2301      	movs	r3, #1
 800dd56:	9301      	str	r3, [sp, #4]
 800dd58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800dd5c:	9300      	str	r3, [sp, #0]
 800dd5e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800dd62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd64:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800df00 <testturning+0x308>
 800dd68:	f7fd fa6a 	bl	800b240 <turn45inR>
	if(turnmode==7){turn45inL(Howspeed.turn45in_L,ON,mollifier_mode,-100);}
 800dd6c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd70:	2b07      	cmp	r3, #7
 800dd72:	d10e      	bne.n	800dd92 <testturning+0x19a>
 800dd74:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd78:	9302      	str	r3, [sp, #8]
 800dd7a:	2301      	movs	r3, #1
 800dd7c:	9301      	str	r3, [sp, #4]
 800dd7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800dd82:	9300      	str	r3, [sp, #0]
 800dd84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800dd88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dd8a:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 800df00 <testturning+0x308>
 800dd8e:	f7fd fc9f 	bl	800b6d0 <turn45inL>
	if(turnmode==8){turn135inR(Howspeed.turn135in_R,ON,mollifier_mode,-100);}
 800dd92:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dd96:	2b08      	cmp	r3, #8
 800dd98:	d10e      	bne.n	800ddb8 <testturning+0x1c0>
 800dd9a:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dd9e:	9302      	str	r3, [sp, #8]
 800dda0:	2301      	movs	r3, #1
 800dda2:	9301      	str	r3, [sp, #4]
 800dda4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800ddae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddb0:	ed9f 0a53 	vldr	s0, [pc, #332]	; 800df00 <testturning+0x308>
 800ddb4:	f7fd fecc 	bl	800bb50 <turn135inR>
	if(turnmode==9){turn135inL(Howspeed.turn135in_L,ON,mollifier_mode,-100);}
 800ddb8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ddbc:	2b09      	cmp	r3, #9
 800ddbe:	d10e      	bne.n	800ddde <testturning+0x1e6>
 800ddc0:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddc4:	9302      	str	r3, [sp, #8]
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	9301      	str	r3, [sp, #4]
 800ddca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ddce:	9300      	str	r3, [sp, #0]
 800ddd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ddd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddd6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800df00 <testturning+0x308>
 800ddda:	f7fe f901 	bl	800bfe0 <turn135inL>
	if(turnmode==10){turn45outR(Howspeed.turn45out_R,ON,mollifier_mode,-100);}
 800ddde:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dde2:	2b0a      	cmp	r3, #10
 800dde4:	d10e      	bne.n	800de04 <testturning+0x20c>
 800dde6:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800ddea:	9302      	str	r3, [sp, #8]
 800ddec:	2301      	movs	r3, #1
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800ddf4:	9300      	str	r3, [sp, #0]
 800ddf6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800ddfa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ddfc:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800df00 <testturning+0x308>
 800de00:	f7fe fb32 	bl	800c468 <turn45outR>
	if(turnmode==11){turn45outL(Howspeed.turn45out_L,ON,mollifier_mode,-100);}
 800de04:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de08:	2b0b      	cmp	r3, #11
 800de0a:	d10e      	bne.n	800de2a <testturning+0x232>
 800de0c:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de10:	9302      	str	r3, [sp, #8]
 800de12:	2301      	movs	r3, #1
 800de14:	9301      	str	r3, [sp, #4]
 800de16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800de20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de22:	ed9f 0a37 	vldr	s0, [pc, #220]	; 800df00 <testturning+0x308>
 800de26:	f7fe fd11 	bl	800c84c <turn45outL>
	if(turnmode==12){turn135outR(Howspeed.turn135out_R,ON,mollifier_mode,-100);}
 800de2a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de2e:	2b0c      	cmp	r3, #12
 800de30:	d10e      	bne.n	800de50 <testturning+0x258>
 800de32:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de36:	9302      	str	r3, [sp, #8]
 800de38:	2301      	movs	r3, #1
 800de3a:	9301      	str	r3, [sp, #4]
 800de3c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800de40:	9300      	str	r3, [sp, #0]
 800de42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de48:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800df00 <testturning+0x308>
 800de4c:	f7fe fee6 	bl	800cc1c <turn135outR>
	if(turnmode==13){turn135outL(Howspeed.turn135out_L,ON,mollifier_mode,-100);}
 800de50:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de54:	2b0d      	cmp	r3, #13
 800de56:	d10e      	bne.n	800de76 <testturning+0x27e>
 800de58:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de5c:	9302      	str	r3, [sp, #8]
 800de5e:	2301      	movs	r3, #1
 800de60:	9301      	str	r3, [sp, #4]
 800de62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800de6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de6e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800df00 <testturning+0x308>
 800de72:	f7ff f8c5 	bl	800d000 <turn135outL>
	if(turnmode==14){V90R(Howspeed.V90_R,ON,mollifier_mode,-100);}
 800de76:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800de7a:	2b0e      	cmp	r3, #14
 800de7c:	d10e      	bne.n	800de9c <testturning+0x2a4>
 800de7e:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800de82:	9302      	str	r3, [sp, #8]
 800de84:	2301      	movs	r3, #1
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800de8c:	9300      	str	r3, [sp, #0]
 800de8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800de92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800de94:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 800df00 <testturning+0x308>
 800de98:	f7ff fa9e 	bl	800d3d8 <V90R>
	if(turnmode==15){V90L(Howspeed.V90_L,ON,mollifier_mode,-100);}
 800de9c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800dea0:	2b0f      	cmp	r3, #15
 800dea2:	d10e      	bne.n	800dec2 <testturning+0x2ca>
 800dea4:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 800dea8:	9302      	str	r3, [sp, #8]
 800deaa:	2301      	movs	r3, #1
 800deac:	9301      	str	r3, [sp, #4]
 800deae:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800deb2:	9300      	str	r3, [sp, #0]
 800deb4:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 800deb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800deba:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800df00 <testturning+0x308>
 800debe:	f7ff fc97 	bl	800d7f0 <V90L>
//	if(turnmode==12){turn135inL(Howspeed.turn135in_L, CONNECT);turn135outR(Howspeed.turn135out_R,CONNECT);}
//	if(turnmode==13){turn135inR(Howspeed.turn135in_R, CONNECT);turn135outL(Howspeed.turn135out_L,CONNECT);}
//	if(turnmode==14){turn45inL(Howspeed.turn45in_L, CONNECT);V90R(Howspeed.V90_R,CONNECT);}
//	if(turnmode==15){turn45inR(Howspeed.turn45in_R, CONNECT);V90L(Howspeed.V90_L,CONNECT);}

	record_mode=0;
 800dec2:	4b0e      	ldr	r3, [pc, #56]	; (800defc <testturning+0x304>)
 800dec4:	2200      	movs	r2, #0
 800dec6:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800dec8:	2003      	movs	r0, #3
 800deca:	f7f9 fd2f 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800dece:	2003      	movs	r0, #3
 800ded0:	f7f9 fd04 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800ded4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800ded8:	f7fa f826 	bl	8007f28 <wait_ms_NoReset>
	pl_FunMotor_stop();
 800dedc:	f7f9 fd88 	bl	80079f0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 800dee0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800dee4:	f7fa f820 	bl	8007f28 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 800dee8:	2000      	movs	r0, #0
 800deea:	f7f9 fced 	bl	80078c8 <pl_DriveMotor_standby>

}
 800deee:	bf00      	nop
 800def0:	3708      	adds	r7, #8
 800def2:	46bd      	mov	sp, r7
 800def4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800def8:	b004      	add	sp, #16
 800defa:	4770      	bx	lr
 800defc:	2000edc0 	.word	0x2000edc0
 800df00:	c2c80000 	.word	0xc2c80000

0800df04 <update_coordinate>:
//char slant_break;
//拡張左手法***********************************************



void update_coordinate(int *x,int *y,int direction){
 800df04:	b480      	push	{r7}
 800df06:	b085      	sub	sp, #20
 800df08:	af00      	add	r7, sp, #0
 800df0a:	60f8      	str	r0, [r7, #12]
 800df0c:	60b9      	str	r1, [r7, #8]
 800df0e:	607a      	str	r2, [r7, #4]
// int direction,int *x_coordinate,int *y_coordinate
//	*direction = *direction % 4;
//	if (*direction <= 0) {
//		*direction = *direction+4;
//	}
	switch (direction) {
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3b01      	subs	r3, #1
 800df14:	2b03      	cmp	r3, #3
 800df16:	d823      	bhi.n	800df60 <update_coordinate+0x5c>
 800df18:	a201      	add	r2, pc, #4	; (adr r2, 800df20 <update_coordinate+0x1c>)
 800df1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df1e:	bf00      	nop
 800df20:	0800df31 	.word	0x0800df31
 800df24:	0800df3d 	.word	0x0800df3d
 800df28:	0800df49 	.word	0x0800df49
 800df2c:	0800df55 	.word	0x0800df55
	case 1://北
		*y += 1;
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	681b      	ldr	r3, [r3, #0]
 800df34:	1c5a      	adds	r2, r3, #1
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	601a      	str	r2, [r3, #0]
		break;
 800df3a:	e011      	b.n	800df60 <update_coordinate+0x5c>
	case 2://東
		*x += 1;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	1c5a      	adds	r2, r3, #1
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	601a      	str	r2, [r3, #0]
		break;
 800df46:	e00b      	b.n	800df60 <update_coordinate+0x5c>
	case 3://南
		*y -= 1;
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	1e5a      	subs	r2, r3, #1
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	601a      	str	r2, [r3, #0]
		break;
 800df52:	e005      	b.n	800df60 <update_coordinate+0x5c>
	case 4://西
		*x -= 1;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	1e5a      	subs	r2, r3, #1
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	601a      	str	r2, [r3, #0]
		break;
 800df5e:	bf00      	nop
	}



}
 800df60:	bf00      	nop
 800df62:	3714      	adds	r7, #20
 800df64:	46bd      	mov	sp, r7
 800df66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6a:	4770      	bx	lr

0800df6c <AdatiWayReturn>:




void AdatiWayReturn(float input_StraightVelocity, float input_TurningVelocity, float input_StraightAcceleration,
		float input_TurningAcceleration, parameter_speed howspeed,int know_mode,uint8_t Dijkstra_mode) {
 800df6c:	b084      	sub	sp, #16
 800df6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df70:	b091      	sub	sp, #68	; 0x44
 800df72:	af04      	add	r7, sp, #16
 800df74:	ed87 0a03 	vstr	s0, [r7, #12]
 800df78:	edc7 0a02 	vstr	s1, [r7, #8]
 800df7c:	ed87 1a01 	vstr	s2, [r7, #4]
 800df80:	edc7 1a00 	vstr	s3, [r7]
 800df84:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800df88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	unsigned short front_count, right_count, back_count, left_count;
//	float v_e,v_ea;

	maze_mode = 1; //***************************************************************************************
 800df8c:	4b7d      	ldr	r3, [pc, #500]	; (800e184 <AdatiWayReturn+0x218>)
 800df8e:	2201      	movs	r2, #1
 800df90:	701a      	strb	r2, [r3, #0]
	//Avespeed = 700;
	pl_DriveMotor_standby(ON);
 800df92:	2001      	movs	r0, #1
 800df94:	f7f9 fc98 	bl	80078c8 <pl_DriveMotor_standby>
	HAL_Delay(500);
 800df98:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800df9c:	f00a fe22 	bl	8018be4 <HAL_Delay>
//初期化
	//構造体にする
	int x=0;
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	623b      	str	r3, [r7, #32]
	int y=0;
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	61fb      	str	r3, [r7, #28]
	int direction=1;
 800dfa8:	2301      	movs	r3, #1
 800dfaa:	61bb      	str	r3, [r7, #24]
	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;
	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800dfac:	2301      	movs	r3, #1
 800dfae:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	75bb      	strb	r3, [r7, #22]


//初期位置のセンサー確認
	front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800dfbc:	4b72      	ldr	r3, [pc, #456]	; (800e188 <AdatiWayReturn+0x21c>)
 800dfbe:	689b      	ldr	r3, [r3, #8]
 800dfc0:	2b95      	cmp	r3, #149	; 0x95
 800dfc2:	bfcc      	ite	gt
 800dfc4:	2301      	movgt	r3, #1
 800dfc6:	2300      	movle	r3, #0
 800dfc8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800dfcc:	4b6e      	ldr	r3, [pc, #440]	; (800e188 <AdatiWayReturn+0x21c>)
 800dfce:	691b      	ldr	r3, [r3, #16]
 800dfd0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfd4:	4293      	cmp	r3, r2
 800dfd6:	bfcc      	ite	gt
 800dfd8:	2301      	movgt	r3, #1
 800dfda:	2300      	movle	r3, #0
 800dfdc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800dfe0:	4b69      	ldr	r3, [pc, #420]	; (800e188 <AdatiWayReturn+0x21c>)
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	bfcc      	ite	gt
 800dfec:	2301      	movgt	r3, #1
 800dfee:	2300      	movle	r3, #0
 800dff0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800dff4:	6a38      	ldr	r0, [r7, #32]
 800dff6:	69f9      	ldr	r1, [r7, #28]
 800dff8:	69ba      	ldr	r2, [r7, #24]
 800dffa:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800dffe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e002:	9301      	str	r3, [sp, #4]
 800e004:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	4623      	mov	r3, r4
 800e00c:	f002 fcbe 	bl	801098c <update_wall>
	//初期位置での迷路展開
	create_StepCountMap_queue();
 800e010:	f006 f8e0 	bl	80141d4 <create_StepCountMap_queue>
	HAL_Delay(100);
 800e014:	2064      	movs	r0, #100	; 0x64
 800e016:	f00a fde5 	bl	8018be4 <HAL_Delay>
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e01a:	6978      	ldr	r0, [r7, #20]
 800e01c:	ed97 2a01 	vldr	s4, [r7, #4]
 800e020:	edd7 1a03 	vldr	s3, [r7, #12]
 800e024:	ed97 1a03 	vldr	s2, [r7, #12]
 800e028:	eddf 0a58 	vldr	s1, [pc, #352]	; 800e18c <AdatiWayReturn+0x220>
 800e02c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 800e190 <AdatiWayReturn+0x224>
 800e030:	f7f4 ffd4 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e034:	69ba      	ldr	r2, [r7, #24]
 800e036:	f107 011c 	add.w	r1, r7, #28
 800e03a:	f107 0320 	add.w	r3, r7, #32
 800e03e:	4618      	mov	r0, r3
 800e040:	f7ff ff60 	bl	800df04 <update_coordinate>


		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e044:	4b50      	ldr	r3, [pc, #320]	; (800e188 <AdatiWayReturn+0x21c>)
 800e046:	689b      	ldr	r3, [r3, #8]
 800e048:	2b95      	cmp	r3, #149	; 0x95
 800e04a:	bfcc      	ite	gt
 800e04c:	2301      	movgt	r3, #1
 800e04e:	2300      	movle	r3, #0
 800e050:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e054:	4b4c      	ldr	r3, [pc, #304]	; (800e188 <AdatiWayReturn+0x21c>)
 800e056:	691b      	ldr	r3, [r3, #16]
 800e058:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e05c:	4293      	cmp	r3, r2
 800e05e:	bfcc      	ite	gt
 800e060:	2301      	movgt	r3, #1
 800e062:	2300      	movle	r3, #0
 800e064:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e068:	4b47      	ldr	r3, [pc, #284]	; (800e188 <AdatiWayReturn+0x21c>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e070:	4293      	cmp	r3, r2
 800e072:	bfcc      	ite	gt
 800e074:	2301      	movgt	r3, #1
 800e076:	2300      	movle	r3, #0
 800e078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e07c:	2301      	movs	r3, #1
 800e07e:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e080:	2301      	movs	r3, #1
 800e082:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e084:	2300      	movs	r3, #0
 800e086:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e088:	6978      	ldr	r0, [r7, #20]
 800e08a:	ed97 2a01 	vldr	s4, [r7, #4]
 800e08e:	edd7 1a03 	vldr	s3, [r7, #12]
 800e092:	ed97 1a03 	vldr	s2, [r7, #12]
 800e096:	edd7 0a03 	vldr	s1, [r7, #12]
 800e09a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e09e:	f7f4 ff9d 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e0a2:	6a38      	ldr	r0, [r7, #32]
 800e0a4:	69f9      	ldr	r1, [r7, #28]
 800e0a6:	69ba      	ldr	r2, [r7, #24]
 800e0a8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e0ac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e0b0:	9301      	str	r3, [sp, #4]
 800e0b2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e0b6:	9300      	str	r3, [sp, #0]
 800e0b8:	4623      	mov	r3, r4
 800e0ba:	f002 fc67 	bl	801098c <update_wall>
		if(Dijkstra_mode==2){
 800e0be:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e0c2:	2b02      	cmp	r3, #2
 800e0c4:	d104      	bne.n	800e0d0 <AdatiWayReturn+0x164>
					route_Dijkstra();
 800e0c6:	f005 f84b 	bl	8013160 <route_Dijkstra>
					create_StepCountMap_unknown();
 800e0ca:	f005 fd4d 	bl	8013b68 <create_StepCountMap_unknown>
 800e0ce:	e001      	b.n	800e0d4 <AdatiWayReturn+0x168>
				}else{
					create_StepCountMap_queue();
 800e0d0:	f006 f880 	bl	80141d4 <create_StepCountMap_queue>
				}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e0d4:	6a3b      	ldr	r3, [r7, #32]
 800e0d6:	69fa      	ldr	r2, [r7, #28]
 800e0d8:	69b9      	ldr	r1, [r7, #24]
 800e0da:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e0de:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e0e2:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0e6:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e0ea:	9102      	str	r1, [sp, #8]
 800e0ec:	9201      	str	r2, [sp, #4]
 800e0ee:	9300      	str	r3, [sp, #0]
 800e0f0:	4633      	mov	r3, r6
 800e0f2:	462a      	mov	r2, r5
 800e0f4:	4621      	mov	r1, r4
 800e0f6:	f003 f9c3 	bl	8011480 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e0fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d001      	beq.n	800e106 <AdatiWayReturn+0x19a>
 800e102:	23ff      	movs	r3, #255	; 0xff
 800e104:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e106:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d001      	beq.n	800e112 <AdatiWayReturn+0x1a6>
 800e10e:	23ff      	movs	r3, #255	; 0xff
 800e110:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e112:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e116:	2b00      	cmp	r3, #0
 800e118:	d001      	beq.n	800e11e <AdatiWayReturn+0x1b2>
 800e11a:	23ff      	movs	r3, #255	; 0xff
 800e11c:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e11e:	6a38      	ldr	r0, [r7, #32]
 800e120:	69fc      	ldr	r4, [r7, #28]
 800e122:	69bd      	ldr	r5, [r7, #24]
 800e124:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e126:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e128:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e12a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e12c:	9102      	str	r1, [sp, #8]
 800e12e:	9201      	str	r2, [sp, #4]
 800e130:	9300      	str	r3, [sp, #0]
 800e132:	4633      	mov	r3, r6
 800e134:	462a      	mov	r2, r5
 800e136:	4621      	mov	r1, r4
 800e138:	f002 f9d4 	bl	80104e4 <decision_kitiku>
		mode.WallCutMode=1;
 800e13c:	2301      	movs	r3, #1
 800e13e:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET, mode,right_wall,left_wall);
 800e140:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e144:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e148:	4619      	mov	r1, r3
 800e14a:	6978      	ldr	r0, [r7, #20]
 800e14c:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e150:	f7f5 fbee 	bl	8003930 <End_straight>



		if (x == 0 && y == 0) {break;}
 800e154:	6a3b      	ldr	r3, [r7, #32]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d103      	bne.n	800e162 <AdatiWayReturn+0x1f6>
 800e15a:	69fb      	ldr	r3, [r7, #28]
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 827c 	beq.w	800e65a <AdatiWayReturn+0x6ee>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800e162:	6a3b      	ldr	r3, [r7, #32]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d003      	beq.n	800e170 <AdatiWayReturn+0x204>
 800e168:	6a3b      	ldr	r3, [r7, #32]
 800e16a:	2b02      	cmp	r3, #2
 800e16c:	f040 810d 	bne.w	800e38a <AdatiWayReturn+0x41e>
 800e170:	69fb      	ldr	r3, [r7, #28]
 800e172:	2b00      	cmp	r3, #0
 800e174:	f000 809b 	beq.w	800e2ae <AdatiWayReturn+0x342>
 800e178:	69fb      	ldr	r3, [r7, #28]
 800e17a:	2b01      	cmp	r3, #1
 800e17c:	f040 8105 	bne.w	800e38a <AdatiWayReturn+0x41e>


			while (front_wall==0) {
 800e180:	e095      	b.n	800e2ae <AdatiWayReturn+0x342>
 800e182:	bf00      	nop
 800e184:	20000834 	.word	0x20000834
 800e188:	20000470 	.word	0x20000470
 800e18c:	00000000 	.word	0x00000000
 800e190:	42830000 	.word	0x42830000
 800e194:	42a40000 	.word	0x42a40000
				//直進
				mode.WallControlMode=1;
 800e198:	2301      	movs	r3, #1
 800e19a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e19c:	2300      	movs	r3, #0
 800e19e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e1a4:	6978      	ldr	r0, [r7, #20]
 800e1a6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e1aa:	edd7 1a03 	vldr	s3, [r7, #12]
 800e1ae:	ed97 1a03 	vldr	s2, [r7, #12]
 800e1b2:	edd7 0a03 	vldr	s1, [r7, #12]
 800e1b6:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800e194 <AdatiWayReturn+0x228>
 800e1ba:	f7f4 ff0f 	bl	8002fdc <straight_table2>

				update_coordinate(&x,&y,direction);
 800e1be:	69ba      	ldr	r2, [r7, #24]
 800e1c0:	f107 011c 	add.w	r1, r7, #28
 800e1c4:	f107 0320 	add.w	r3, r7, #32
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f7ff fe9b 	bl	800df04 <update_coordinate>

				front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e1ce:	4b7f      	ldr	r3, [pc, #508]	; (800e3cc <AdatiWayReturn+0x460>)
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	2b95      	cmp	r3, #149	; 0x95
 800e1d4:	bfcc      	ite	gt
 800e1d6:	2301      	movgt	r3, #1
 800e1d8:	2300      	movle	r3, #0
 800e1da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e1de:	4b7b      	ldr	r3, [pc, #492]	; (800e3cc <AdatiWayReturn+0x460>)
 800e1e0:	691b      	ldr	r3, [r3, #16]
 800e1e2:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	bfcc      	ite	gt
 800e1ea:	2301      	movgt	r3, #1
 800e1ec:	2300      	movle	r3, #0
 800e1ee:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e1f2:	4b76      	ldr	r3, [pc, #472]	; (800e3cc <AdatiWayReturn+0x460>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	bfcc      	ite	gt
 800e1fe:	2301      	movgt	r3, #1
 800e200:	2300      	movle	r3, #0
 800e202:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

				mode.WallControlMode=1;
 800e206:	2301      	movs	r3, #1
 800e208:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800e20a:	2301      	movs	r3, #1
 800e20c:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e20e:	2300      	movs	r3, #0
 800e210:	75fb      	strb	r3, [r7, #23]
				straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e212:	6978      	ldr	r0, [r7, #20]
 800e214:	ed97 2a01 	vldr	s4, [r7, #4]
 800e218:	edd7 1a03 	vldr	s3, [r7, #12]
 800e21c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e220:	edd7 0a03 	vldr	s1, [r7, #12]
 800e224:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e228:	f7f4 fed8 	bl	8002fdc <straight_table2>
				update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e22c:	6a38      	ldr	r0, [r7, #32]
 800e22e:	69f9      	ldr	r1, [r7, #28]
 800e230:	69ba      	ldr	r2, [r7, #24]
 800e232:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e236:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e23a:	9301      	str	r3, [sp, #4]
 800e23c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e240:	9300      	str	r3, [sp, #0]
 800e242:	4623      	mov	r3, r4
 800e244:	f002 fba2 	bl	801098c <update_wall>
				create_StepCountMap_queue();
 800e248:	f005 ffc4 	bl	80141d4 <create_StepCountMap_queue>
				search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	69fa      	ldr	r2, [r7, #28]
 800e250:	69b9      	ldr	r1, [r7, #24]
 800e252:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e256:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e25a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e25e:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e262:	9102      	str	r1, [sp, #8]
 800e264:	9201      	str	r2, [sp, #4]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4633      	mov	r3, r6
 800e26a:	462a      	mov	r2, r5
 800e26c:	4621      	mov	r1, r4
 800e26e:	f003 f907 	bl	8011480 <search_AroundWalkCount>
				if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e276:	2b00      	cmp	r3, #0
 800e278:	d001      	beq.n	800e27e <AdatiWayReturn+0x312>
 800e27a:	23ff      	movs	r3, #255	; 0xff
 800e27c:	857b      	strh	r3, [r7, #42]	; 0x2a
				if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e27e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <AdatiWayReturn+0x31e>
 800e286:	23ff      	movs	r3, #255	; 0xff
 800e288:	853b      	strh	r3, [r7, #40]	; 0x28
				if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e28a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <AdatiWayReturn+0x32a>
 800e292:	23ff      	movs	r3, #255	; 0xff
 800e294:	84bb      	strh	r3, [r7, #36]	; 0x24
				mode.WallCutMode=1;
 800e296:	2301      	movs	r3, #1
 800e298:	75fb      	strb	r3, [r7, #23]
				End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e29a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e29e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e2a2:	4619      	mov	r1, r3
 800e2a4:	6978      	ldr	r0, [r7, #20]
 800e2a6:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e2aa:	f7f5 fb41 	bl	8003930 <End_straight>
			while (front_wall==0) {
 800e2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2b2:	f083 0301 	eor.w	r3, r3, #1
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	f47f af6d 	bne.w	800e198 <AdatiWayReturn+0x22c>


			}
			mode.WallControlMode=0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e2ca:	6978      	ldr	r0, [r7, #20]
 800e2cc:	ed97 2a01 	vldr	s4, [r7, #4]
 800e2d0:	edd7 1a03 	vldr	s3, [r7, #12]
 800e2d4:	ed9f 1a48 	vldr	s2, [pc, #288]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e2d8:	edd7 0a03 	vldr	s1, [r7, #12]
 800e2dc:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 800e3d0 <AdatiWayReturn+0x464>
 800e2e0:	f7f4 fe7c 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e2e4:	2003      	movs	r0, #3
 800e2e6:	f7f9 fb21 	bl	800792c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e2ea:	2003      	movs	r0, #3
 800e2ec:	f7f9 faf6 	bl	80078dc <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e2f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e2f4:	f7f9 fe18 	bl	8007f28 <wait_ms_NoReset>
			no_safty = 1;
 800e2f8:	4b36      	ldr	r3, [pc, #216]	; (800e3d4 <AdatiWayReturn+0x468>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	701a      	strb	r2, [r3, #0]
			turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e2fe:	ed97 2a00 	vldr	s4, [r7]
 800e302:	edd7 1a02 	vldr	s3, [r7, #8]
 800e306:	ed9f 1a3c 	vldr	s2, [pc, #240]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e30a:	eddf 0a3b 	vldr	s1, [pc, #236]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e30e:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800e3d8 <AdatiWayReturn+0x46c>
 800e312:	f7f5 fb71 	bl	80039f8 <turning_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e316:	2003      	movs	r0, #3
 800e318:	f7f9 fb08 	bl	800792c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e31c:	2003      	movs	r0, #3
 800e31e:	f7f9 fadd 	bl	80078dc <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e322:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e326:	f7f9 fdff 	bl	8007f28 <wait_ms_NoReset>
			straight_table2(-BACK_TO_CENTER-20/2, 0,0,-150,1000, mode);
 800e32a:	6978      	ldr	r0, [r7, #20]
 800e32c:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 800e3dc <AdatiWayReturn+0x470>
 800e330:	eddf 1a2b 	vldr	s3, [pc, #172]	; 800e3e0 <AdatiWayReturn+0x474>
 800e334:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e338:	eddf 0a2f 	vldr	s1, [pc, #188]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e33c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800e3e4 <AdatiWayReturn+0x478>
 800e340:	f7f4 fe4c 	bl	8002fdc <straight_table2>
			pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e344:	2003      	movs	r0, #3
 800e346:	f7f9 faf1 	bl	800792c <pl_R_DriveMotor_mode>
			pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e34a:	2003      	movs	r0, #3
 800e34c:	f7f9 fac6 	bl	80078dc <pl_L_DriveMotor_mode>
			wait_ms_NoReset(500);
 800e350:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e354:	f7f9 fde8 	bl	8007f28 <wait_ms_NoReset>
			no_safty = 0;
 800e358:	4b1e      	ldr	r3, [pc, #120]	; (800e3d4 <AdatiWayReturn+0x468>)
 800e35a:	2200      	movs	r2, #0
 800e35c:	701a      	strb	r2, [r3, #0]
			clear_Ierror();
 800e35e:	f7f6 f921 	bl	80045a4 <clear_Ierror>
			maze_mode = 0;
 800e362:	4b21      	ldr	r3, [pc, #132]	; (800e3e8 <AdatiWayReturn+0x47c>)
 800e364:	2200      	movs	r2, #0
 800e366:	701a      	strb	r2, [r3, #0]

			direction = direction + 2;
 800e368:	69bb      	ldr	r3, [r7, #24]
 800e36a:	3302      	adds	r3, #2
 800e36c:	61bb      	str	r3, [r7, #24]

			if (direction >= 5) {
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	2b04      	cmp	r3, #4
 800e372:	dd02      	ble.n	800e37a <AdatiWayReturn+0x40e>
				direction = direction-4;
 800e374:	69bb      	ldr	r3, [r7, #24]
 800e376:	3b04      	subs	r3, #4
 800e378:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800e37a:	69bb      	ldr	r3, [r7, #24]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f300 816e 	bgt.w	800e65e <AdatiWayReturn+0x6f2>
				direction = direction+4;
 800e382:	69bb      	ldr	r3, [r7, #24]
 800e384:	3304      	adds	r3, #4
 800e386:	61bb      	str	r3, [r7, #24]
			}

			break;
 800e388:	e169      	b.n	800e65e <AdatiWayReturn+0x6f2>
		}
		if(know_mode==0){
 800e38a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d102      	bne.n	800e398 <AdatiWayReturn+0x42c>
			kitikukan = 0;
 800e392:	4b16      	ldr	r3, [pc, #88]	; (800e3ec <AdatiWayReturn+0x480>)
 800e394:	2200      	movs	r2, #0
 800e396:	601a      	str	r2, [r3, #0]
		}
		if (kitikukan == OFF) {
 800e398:	4b14      	ldr	r3, [pc, #80]	; (800e3ec <AdatiWayReturn+0x480>)
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	f040 80f8 	bne.w	800e592 <AdatiWayReturn+0x626>

			// 移動の優先順位 ： 前→右→左→後
			if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e3a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e3a4:	2bff      	cmp	r3, #255	; 0xff
 800e3a6:	d12b      	bne.n	800e400 <AdatiWayReturn+0x494>
 800e3a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e3aa:	2bff      	cmp	r3, #255	; 0xff
 800e3ac:	d128      	bne.n	800e400 <AdatiWayReturn+0x494>
 800e3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e3b0:	2bff      	cmp	r3, #255	; 0xff
 800e3b2:	d125      	bne.n	800e400 <AdatiWayReturn+0x494>
 800e3b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e3b6:	2bff      	cmp	r3, #255	; 0xff
 800e3b8:	d122      	bne.n	800e400 <AdatiWayReturn+0x494>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
				error_mode=1;
 800e3ba:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <AdatiWayReturn+0x484>)
 800e3bc:	2201      	movs	r2, #1
 800e3be:	701a      	strb	r2, [r3, #0]
				pl_DriveMotor_stop();
 800e3c0:	f7f9 fae8 	bl	8007994 <pl_DriveMotor_stop>
				pl_DriveMotor_standby(OFF);
 800e3c4:	2000      	movs	r0, #0
 800e3c6:	f7f9 fa7f 	bl	80078c8 <pl_DriveMotor_standby>

				break;
 800e3ca:	e14b      	b.n	800e664 <AdatiWayReturn+0x6f8>
 800e3cc:	20000470 	.word	0x20000470
 800e3d0:	42140000 	.word	0x42140000
 800e3d4:	20000806 	.word	0x20000806
 800e3d8:	43340000 	.word	0x43340000
 800e3dc:	447a0000 	.word	0x447a0000
 800e3e0:	c3160000 	.word	0xc3160000
 800e3e4:	c1f40000 	.word	0xc1f40000
 800e3e8:	20000834 	.word	0x20000834
 800e3ec:	20000838 	.word	0x20000838
 800e3f0:	20000807 	.word	0x20000807
 800e3f4:	42a40000 	.word	0x42a40000
 800e3f8:	00000000 	.word	0x00000000
 800e3fc:	42080000 	.word	0x42080000
			}
			if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e400:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e402:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e404:	429a      	cmp	r2, r3
 800e406:	d81a      	bhi.n	800e43e <AdatiWayReturn+0x4d2>
 800e408:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e40a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d816      	bhi.n	800e43e <AdatiWayReturn+0x4d2>
 800e410:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e412:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e414:	429a      	cmp	r2, r3
 800e416:	d812      	bhi.n	800e43e <AdatiWayReturn+0x4d2>
				// 直進
				mode.WallControlMode=1;
 800e418:	2301      	movs	r3, #1
 800e41a:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e41c:	2300      	movs	r3, #0
 800e41e:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e420:	2300      	movs	r3, #0
 800e422:	75fb      	strb	r3, [r7, #23]
				straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e424:	6978      	ldr	r0, [r7, #20]
 800e426:	ed97 2a01 	vldr	s4, [r7, #4]
 800e42a:	edd7 1a03 	vldr	s3, [r7, #12]
 800e42e:	ed97 1a03 	vldr	s2, [r7, #12]
 800e432:	edd7 0a03 	vldr	s1, [r7, #12]
 800e436:	ed1f 0a11 	vldr	s0, [pc, #-68]	; 800e3f4 <AdatiWayReturn+0x488>
 800e43a:	f7f4 fdcf 	bl	8002fdc <straight_table2>
			}
			if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e43e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e440:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e442:	429a      	cmp	r2, r3
 800e444:	d219      	bcs.n	800e47a <AdatiWayReturn+0x50e>
 800e446:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d815      	bhi.n	800e47a <AdatiWayReturn+0x50e>
 800e44e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e450:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e452:	429a      	cmp	r2, r3
 800e454:	d811      	bhi.n	800e47a <AdatiWayReturn+0x50e>
				// 右旋回
				slalomR(howspeed.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800e456:	2300      	movs	r3, #0
 800e458:	9303      	str	r3, [sp, #12]
 800e45a:	2300      	movs	r3, #0
 800e45c:	9302      	str	r3, [sp, #8]
 800e45e:	2300      	movs	r3, #0
 800e460:	9301      	str	r3, [sp, #4]
 800e462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e464:	9300      	str	r3, [sp, #0]
 800e466:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800e46a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e46c:	ed97 0a03 	vldr	s0, [r7, #12]
 800e470:	f7fb fd7e 	bl	8009f70 <slalomR>
				direction++;
 800e474:	69bb      	ldr	r3, [r7, #24]
 800e476:	3301      	adds	r3, #1
 800e478:	61bb      	str	r3, [r7, #24]
			}
			if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e47a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e47c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e47e:	429a      	cmp	r2, r3
 800e480:	d219      	bcs.n	800e4b6 <AdatiWayReturn+0x54a>
 800e482:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e484:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e486:	429a      	cmp	r2, r3
 800e488:	d215      	bcs.n	800e4b6 <AdatiWayReturn+0x54a>
 800e48a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e48c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e48e:	429a      	cmp	r2, r3
 800e490:	d811      	bhi.n	800e4b6 <AdatiWayReturn+0x54a>
				// 左旋回
				slalomL(howspeed.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800e492:	2300      	movs	r3, #0
 800e494:	9303      	str	r3, [sp, #12]
 800e496:	2300      	movs	r3, #0
 800e498:	9302      	str	r3, [sp, #8]
 800e49a:	2300      	movs	r3, #0
 800e49c:	9301      	str	r3, [sp, #4]
 800e49e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e4a0:	9300      	str	r3, [sp, #0]
 800e4a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800e4a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e4a8:	ed97 0a03 	vldr	s0, [r7, #12]
 800e4ac:	f7fb ff46 	bl	800a33c <slalomL>
				direction--;
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	61bb      	str	r3, [r7, #24]
			}
			if(back_count < front_count && back_count < right_count
 800e4b6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	f080 80ac 	bcs.w	800e618 <AdatiWayReturn+0x6ac>
 800e4c0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	f080 80a7 	bcs.w	800e618 <AdatiWayReturn+0x6ac>
					&& back_count < left_count){
 800e4ca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e4cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e4ce:	429a      	cmp	r2, r3
 800e4d0:	f080 80a2 	bcs.w	800e618 <AdatiWayReturn+0x6ac>
				//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
				mode.WallControlMode=1;
 800e4d4:	2301      	movs	r3, #1
 800e4d6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e4dc:	2300      	movs	r3, #0
 800e4de:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-3, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e4e0:	6978      	ldr	r0, [r7, #20]
 800e4e2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e4e6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e4ea:	ed1f 1a3d 	vldr	s2, [pc, #-244]	; 800e3f8 <AdatiWayReturn+0x48c>
 800e4ee:	edd7 0a03 	vldr	s1, [r7, #12]
 800e4f2:	ed1f 0a3e 	vldr	s0, [pc, #-248]	; 800e3fc <AdatiWayReturn+0x490>
 800e4f6:	f7f4 fd71 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e4fa:	2003      	movs	r0, #3
 800e4fc:	f7f9 fa16 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e500:	2003      	movs	r0, #3
 800e502:	f7f9 f9eb 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e506:	2064      	movs	r0, #100	; 0x64
 800e508:	f7f9 fd0e 	bl	8007f28 <wait_ms_NoReset>
				no_safty = 1;
 800e50c:	4b8a      	ldr	r3, [pc, #552]	; (800e738 <AdatiWayReturn+0x7cc>)
 800e50e:	2201      	movs	r2, #1
 800e510:	701a      	strb	r2, [r3, #0]
				backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800e512:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e516:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800e51a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e51e:	4618      	mov	r0, r3
 800e520:	edd7 0a00 	vldr	s1, [r7]
 800e524:	ed97 0a02 	vldr	s0, [r7, #8]
 800e528:	f7fb fc58 	bl	8009ddc <backTurn_controlWall>
				//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
				wait_ms_NoReset(100);
 800e52c:	2064      	movs	r0, #100	; 0x64
 800e52e:	f7f9 fcfb 	bl	8007f28 <wait_ms_NoReset>
				no_safty = 0;
 800e532:	4b81      	ldr	r3, [pc, #516]	; (800e738 <AdatiWayReturn+0x7cc>)
 800e534:	2200      	movs	r2, #0
 800e536:	701a      	strb	r2, [r3, #0]
				//clear_Ierror();
				mode.WallControlMode=0;
 800e538:	2300      	movs	r3, #0
 800e53a:	753b      	strb	r3, [r7, #20]
				straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800e53c:	6978      	ldr	r0, [r7, #20]
 800e53e:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 800e73c <AdatiWayReturn+0x7d0>
 800e542:	eddf 1a7f 	vldr	s3, [pc, #508]	; 800e740 <AdatiWayReturn+0x7d4>
 800e546:	ed9f 1a88 	vldr	s2, [pc, #544]	; 800e768 <AdatiWayReturn+0x7fc>
 800e54a:	eddf 0a87 	vldr	s1, [pc, #540]	; 800e768 <AdatiWayReturn+0x7fc>
 800e54e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e744 <AdatiWayReturn+0x7d8>
 800e552:	f7f4 fd43 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e556:	2003      	movs	r0, #3
 800e558:	f7f9 f9e8 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e55c:	2003      	movs	r0, #3
 800e55e:	f7f9 f9bd 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e562:	2064      	movs	r0, #100	; 0x64
 800e564:	f7f9 fce0 	bl	8007f28 <wait_ms_NoReset>
				clear_Ierror();
 800e568:	f7f6 f81c 	bl	80045a4 <clear_Ierror>
				mode.WallControlMode=1;
 800e56c:	2301      	movs	r3, #1
 800e56e:	753b      	strb	r3, [r7, #20]
				straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e570:	6978      	ldr	r0, [r7, #20]
 800e572:	ed97 2a01 	vldr	s4, [r7, #4]
 800e576:	edd7 1a03 	vldr	s3, [r7, #12]
 800e57a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e57e:	eddf 0a7a 	vldr	s1, [pc, #488]	; 800e768 <AdatiWayReturn+0x7fc>
 800e582:	ed9f 0a71 	vldr	s0, [pc, #452]	; 800e748 <AdatiWayReturn+0x7dc>
 800e586:	f7f4 fd29 	bl	8002fdc <straight_table2>
				//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
				direction = direction + 2;
 800e58a:	69bb      	ldr	r3, [r7, #24]
 800e58c:	3302      	adds	r3, #2
 800e58e:	61bb      	str	r3, [r7, #24]
 800e590:	e042      	b.n	800e618 <AdatiWayReturn+0x6ac>

			}

		} else {
			mode.WallControlMode=1;
 800e592:	2301      	movs	r3, #1
 800e594:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e596:	2300      	movs	r3, #0
 800e598:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e59a:	2300      	movs	r3, #0
 800e59c:	75fb      	strb	r3, [r7, #23]
			straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e59e:	6978      	ldr	r0, [r7, #20]
 800e5a0:	ed97 2a01 	vldr	s4, [r7, #4]
 800e5a4:	edd7 1a03 	vldr	s3, [r7, #12]
 800e5a8:	ed97 1a03 	vldr	s2, [r7, #12]
 800e5ac:	edd7 0a03 	vldr	s1, [r7, #12]
 800e5b0:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 800e76c <AdatiWayReturn+0x800>
 800e5b4:	f7f4 fd12 	bl	8002fdc <straight_table2>
			compress_kitiku(&x,&y,&direction);
 800e5b8:	f107 0218 	add.w	r2, r7, #24
 800e5bc:	f107 011c 	add.w	r1, r7, #28
 800e5c0:	f107 0320 	add.w	r3, r7, #32
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	f001 ffff 	bl	80105c8 <compress_kitiku>
			mode.WallCutMode=0;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	75fb      	strb	r3, [r7, #23]
			End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800e5ce:	2201      	movs	r2, #1
 800e5d0:	2101      	movs	r1, #1
 800e5d2:	6978      	ldr	r0, [r7, #20]
 800e5d4:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800e76c <AdatiWayReturn+0x800>
 800e5d8:	f7f5 f9aa 	bl	8003930 <End_straight>
			mode.WallControlMode=1;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	753b      	strb	r3, [r7, #20]
			mode.calMazeMode=0;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	75bb      	strb	r3, [r7, #22]
			mode.WallCutMode=0;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	75fb      	strb	r3, [r7, #23]
			straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,900,input_StraightAcceleration, mode);
 800e5e8:	4b58      	ldr	r3, [pc, #352]	; (800e74c <AdatiWayReturn+0x7e0>)
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	005b      	lsls	r3, r3, #1
 800e5f0:	4413      	add	r3, r2
 800e5f2:	011a      	lsls	r2, r3, #4
 800e5f4:	1ad3      	subs	r3, r2, r3
 800e5f6:	ee07 3a90 	vmov	s15, r3
 800e5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e5fe:	6978      	ldr	r0, [r7, #20]
 800e600:	ed97 2a01 	vldr	s4, [r7, #4]
 800e604:	eddf 1a52 	vldr	s3, [pc, #328]	; 800e750 <AdatiWayReturn+0x7e4>
 800e608:	ed97 1a03 	vldr	s2, [r7, #12]
 800e60c:	edd7 0a03 	vldr	s1, [r7, #12]
 800e610:	eeb0 0a67 	vmov.f32	s0, s15
 800e614:	f7f4 fce2 	bl	8002fdc <straight_table2>

		}

		if (direction >= 5) {
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	dd02      	ble.n	800e624 <AdatiWayReturn+0x6b8>
			direction = direction-4;
 800e61e:	69bb      	ldr	r3, [r7, #24]
 800e620:	3b04      	subs	r3, #4
 800e622:	61bb      	str	r3, [r7, #24]
		}
		if (direction <= 0) {
 800e624:	69bb      	ldr	r3, [r7, #24]
 800e626:	2b00      	cmp	r3, #0
 800e628:	dc02      	bgt.n	800e630 <AdatiWayReturn+0x6c4>
			direction = direction+4;
 800e62a:	69bb      	ldr	r3, [r7, #24]
 800e62c:	3304      	adds	r3, #4
 800e62e:	61bb      	str	r3, [r7, #24]
//基地区間**********************************************************************
//		if (know_road == 1) {
//			most_speed_kitikukan_play(850, 1600);
//		}
//基地区間
		if(error_mode==1){break;}
 800e630:	4b48      	ldr	r3, [pc, #288]	; (800e754 <AdatiWayReturn+0x7e8>)
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	2b01      	cmp	r3, #1
 800e636:	d014      	beq.n	800e662 <AdatiWayReturn+0x6f6>
		if (g_timCount_sec>240){
 800e638:	4b47      	ldr	r3, [pc, #284]	; (800e758 <AdatiWayReturn+0x7ec>)
 800e63a:	edd3 7a00 	vldr	s15, [r3]
 800e63e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800e75c <AdatiWayReturn+0x7f0>
 800e642:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64a:	dd05      	ble.n	800e658 <AdatiWayReturn+0x6ec>
					// 秒数エンド

						pl_DriveMotor_stop();
 800e64c:	f7f9 f9a2 	bl	8007994 <pl_DriveMotor_stop>
						pl_DriveMotor_standby(OFF);
 800e650:	2000      	movs	r0, #0
 800e652:	f7f9 f939 	bl	80078c8 <pl_DriveMotor_standby>
						break;
 800e656:	e005      	b.n	800e664 <AdatiWayReturn+0x6f8>
		update_coordinate(&x,&y,direction);
 800e658:	e4ec      	b.n	800e034 <AdatiWayReturn+0xc8>
		if (x == 0 && y == 0) {break;}
 800e65a:	bf00      	nop
 800e65c:	e002      	b.n	800e664 <AdatiWayReturn+0x6f8>
			break;
 800e65e:	bf00      	nop
 800e660:	e000      	b.n	800e664 <AdatiWayReturn+0x6f8>
		if(error_mode==1){break;}
 800e662:	bf00      	nop
					}

	}
	if(error_mode==0){
 800e664:	4b3b      	ldr	r3, [pc, #236]	; (800e754 <AdatiWayReturn+0x7e8>)
 800e666:	781b      	ldrb	r3, [r3, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d101      	bne.n	800e670 <AdatiWayReturn+0x704>
	record_in();
 800e66c:	f7f8 fe3a 	bl	80072e4 <record_in>
	}
	create_DijkstraMap();
 800e670:	f003 f82e 	bl	80116d0 <create_DijkstraMap>
	clear_Ierror();
 800e674:	f7f5 ff96 	bl	80045a4 <clear_Ierror>
	reset_gyro();
 800e678:	f7f3 f876 	bl	8001768 <reset_gyro>
	//reset_speed();
	maze_mode = 1;
 800e67c:	4b38      	ldr	r3, [pc, #224]	; (800e760 <AdatiWayReturn+0x7f4>)
 800e67e:	2201      	movs	r2, #1
 800e680:	701a      	strb	r2, [r3, #0]
	straight_table2(90/2+BACK_TO_CENTER,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e682:	6978      	ldr	r0, [r7, #20]
 800e684:	ed97 2a01 	vldr	s4, [r7, #4]
 800e688:	edd7 1a03 	vldr	s3, [r7, #12]
 800e68c:	ed97 1a03 	vldr	s2, [r7, #12]
 800e690:	eddf 0a35 	vldr	s1, [pc, #212]	; 800e768 <AdatiWayReturn+0x7fc>
 800e694:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800e748 <AdatiWayReturn+0x7dc>
 800e698:	f7f4 fca0 	bl	8002fdc <straight_table2>

	while (1) {

		//straight_table2(90, 300, 300, 500);

		update_coordinate(&x,&y,direction);
 800e69c:	69ba      	ldr	r2, [r7, #24]
 800e69e:	f107 011c 	add.w	r1, r7, #28
 800e6a2:	f107 0320 	add.w	r3, r7, #32
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f7ff fc2c 	bl	800df04 <update_coordinate>

		front_wall=(g_sensor_mean[SENSOR_FRONT] >= F_PRESENCE);
 800e6ac:	4b2d      	ldr	r3, [pc, #180]	; (800e764 <AdatiWayReturn+0x7f8>)
 800e6ae:	689b      	ldr	r3, [r3, #8]
 800e6b0:	2b95      	cmp	r3, #149	; 0x95
 800e6b2:	bfcc      	ite	gt
 800e6b4:	2301      	movgt	r3, #1
 800e6b6:	2300      	movle	r3, #0
 800e6b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		right_wall=(g_sensor_mean[SENSOR_RIGHT] >= R_PRESENCE);
 800e6bc:	4b29      	ldr	r3, [pc, #164]	; (800e764 <AdatiWayReturn+0x7f8>)
 800e6be:	691b      	ldr	r3, [r3, #16]
 800e6c0:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6c4:	4293      	cmp	r3, r2
 800e6c6:	bfcc      	ite	gt
 800e6c8:	2301      	movgt	r3, #1
 800e6ca:	2300      	movle	r3, #0
 800e6cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		left_wall=(g_sensor_mean[SENSOR_LEFT] >= L_PRESENCE);
 800e6d0:	4b24      	ldr	r3, [pc, #144]	; (800e764 <AdatiWayReturn+0x7f8>)
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800e6d8:	4293      	cmp	r3, r2
 800e6da:	bfcc      	ite	gt
 800e6dc:	2301      	movgt	r3, #1
 800e6de:	2300      	movle	r3, #0
 800e6e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

		mode.WallControlMode=1;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	753b      	strb	r3, [r7, #20]
		mode.calMazeMode=1;
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	75bb      	strb	r3, [r7, #22]
		mode.WallCutMode=0;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	75fb      	strb	r3, [r7, #23]
		straight_table2(MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e6f0:	6978      	ldr	r0, [r7, #20]
 800e6f2:	ed97 2a01 	vldr	s4, [r7, #4]
 800e6f6:	edd7 1a03 	vldr	s3, [r7, #12]
 800e6fa:	ed97 1a03 	vldr	s2, [r7, #12]
 800e6fe:	edd7 0a03 	vldr	s1, [r7, #12]
 800e702:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e706:	f7f4 fc69 	bl	8002fdc <straight_table2>
		update_wall(x,y,direction,front_wall,right_wall,left_wall);
 800e70a:	6a38      	ldr	r0, [r7, #32]
 800e70c:	69f9      	ldr	r1, [r7, #28]
 800e70e:	69ba      	ldr	r2, [r7, #24]
 800e710:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 800e714:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e718:	9301      	str	r3, [sp, #4]
 800e71a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e71e:	9300      	str	r3, [sp, #0]
 800e720:	4623      	mov	r3, r4
 800e722:	f002 f933 	bl	801098c <update_wall>
		if(Dijkstra_mode==1){
 800e726:	f897 3194 	ldrb.w	r3, [r7, #404]	; 0x194
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d120      	bne.n	800e770 <AdatiWayReturn+0x804>
			route_Dijkstra();//ダイクストラ法のマップを作成
 800e72e:	f004 fd17 	bl	8013160 <route_Dijkstra>
			create_StepCountMap_unknown();
 800e732:	f005 fa19 	bl	8013b68 <create_StepCountMap_unknown>
 800e736:	e01d      	b.n	800e774 <AdatiWayReturn+0x808>
 800e738:	20000806 	.word	0x20000806
 800e73c:	447a0000 	.word	0x447a0000
 800e740:	c3160000 	.word	0xc3160000
 800e744:	c1a40000 	.word	0xc1a40000
 800e748:	42830000 	.word	0x42830000
 800e74c:	2000082c 	.word	0x2000082c
 800e750:	44610000 	.word	0x44610000
 800e754:	20000807 	.word	0x20000807
 800e758:	2000072c 	.word	0x2000072c
 800e75c:	43700000 	.word	0x43700000
 800e760:	20000834 	.word	0x20000834
 800e764:	20000470 	.word	0x20000470
 800e768:	00000000 	.word	0x00000000
 800e76c:	42140000 	.word	0x42140000
		}else{
			create_StepCountMapBack_queue();
 800e770:	f006 f818 	bl	80147a4 <create_StepCountMapBack_queue>
		}
		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800e774:	6a3b      	ldr	r3, [r7, #32]
 800e776:	69fa      	ldr	r2, [r7, #28]
 800e778:	69b9      	ldr	r1, [r7, #24]
 800e77a:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800e77e:	f107 0526 	add.w	r5, r7, #38	; 0x26
 800e782:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e786:	f107 002a 	add.w	r0, r7, #42	; 0x2a
 800e78a:	9102      	str	r1, [sp, #8]
 800e78c:	9201      	str	r2, [sp, #4]
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	4633      	mov	r3, r6
 800e792:	462a      	mov	r2, r5
 800e794:	4621      	mov	r1, r4
 800e796:	f002 fe73 	bl	8011480 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 800e79a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <AdatiWayReturn+0x83a>
 800e7a2:	23ff      	movs	r3, #255	; 0xff
 800e7a4:	857b      	strh	r3, [r7, #42]	; 0x2a
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 800e7a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d001      	beq.n	800e7b2 <AdatiWayReturn+0x846>
 800e7ae:	23ff      	movs	r3, #255	; 0xff
 800e7b0:	853b      	strh	r3, [r7, #40]	; 0x28
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 800e7b2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d001      	beq.n	800e7be <AdatiWayReturn+0x852>
 800e7ba:	23ff      	movs	r3, #255	; 0xff
 800e7bc:	84bb      	strh	r3, [r7, #36]	; 0x24
		decision_kitiku(x,y,direction,front_count,right_count,back_count,left_count);
 800e7be:	6a38      	ldr	r0, [r7, #32]
 800e7c0:	69fc      	ldr	r4, [r7, #28]
 800e7c2:	69bd      	ldr	r5, [r7, #24]
 800e7c4:	8d7e      	ldrh	r6, [r7, #42]	; 0x2a
 800e7c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e7c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e7ca:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800e7cc:	9102      	str	r1, [sp, #8]
 800e7ce:	9201      	str	r2, [sp, #4]
 800e7d0:	9300      	str	r3, [sp, #0]
 800e7d2:	4633      	mov	r3, r6
 800e7d4:	462a      	mov	r2, r5
 800e7d6:	4621      	mov	r1, r4
 800e7d8:	f001 fe84 	bl	80104e4 <decision_kitiku>
		mode.WallCutMode=1;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	75fb      	strb	r3, [r7, #23]
		End_straight(MAZE_OFFSET,mode,right_wall,left_wall);
 800e7e0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800e7e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	6978      	ldr	r0, [r7, #20]
 800e7ec:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800e7f0:	f7f5 f89e 	bl	8003930 <End_straight>


			if(x == 0 && y == 0) {
 800e7f4:	6a3b      	ldr	r3, [r7, #32]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d165      	bne.n	800e8c6 <AdatiWayReturn+0x95a>
 800e7fa:	69fb      	ldr	r3, [r7, #28]
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d162      	bne.n	800e8c6 <AdatiWayReturn+0x95a>

				mode.WallControlMode=0;
 800e800:	2300      	movs	r3, #0
 800e802:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e804:	2300      	movs	r3, #0
 800e806:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e808:	2300      	movs	r3, #0
 800e80a:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e80c:	6978      	ldr	r0, [r7, #20]
 800e80e:	ed97 2a01 	vldr	s4, [r7, #4]
 800e812:	edd7 1a03 	vldr	s3, [r7, #12]
 800e816:	ed1f 1a2c 	vldr	s2, [pc, #-176]	; 800e768 <AdatiWayReturn+0x7fc>
 800e81a:	edd7 0a03 	vldr	s1, [r7, #12]
 800e81e:	ed1f 0a2d 	vldr	s0, [pc, #-180]	; 800e76c <AdatiWayReturn+0x800>
 800e822:	f7f4 fbdb 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e826:	2003      	movs	r0, #3
 800e828:	f7f9 f880 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e82c:	2003      	movs	r0, #3
 800e82e:	f7f9 f855 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e832:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e836:	f7f9 fb77 	bl	8007f28 <wait_ms_NoReset>
				no_safty = 1;
 800e83a:	4bbb      	ldr	r3, [pc, #748]	; (800eb28 <AdatiWayReturn+0xbbc>)
 800e83c:	2201      	movs	r2, #1
 800e83e:	701a      	strb	r2, [r3, #0]
				turning_table2(180,0,0,input_TurningVelocity,input_TurningAcceleration);
 800e840:	ed97 2a00 	vldr	s4, [r7]
 800e844:	edd7 1a02 	vldr	s3, [r7, #8]
 800e848:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e84c:	eddf 0ab7 	vldr	s1, [pc, #732]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e850:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 800eb30 <AdatiWayReturn+0xbc4>
 800e854:	f7f5 f8d0 	bl	80039f8 <turning_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e858:	2003      	movs	r0, #3
 800e85a:	f7f9 f867 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e85e:	2003      	movs	r0, #3
 800e860:	f7f9 f83c 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e864:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e868:	f7f9 fb5e 	bl	8007f28 <wait_ms_NoReset>
				straight_table2(-60/2, 0,0,-150,1000, mode);
 800e86c:	6978      	ldr	r0, [r7, #20]
 800e86e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 800eb34 <AdatiWayReturn+0xbc8>
 800e872:	eddf 1ab1 	vldr	s3, [pc, #708]	; 800eb38 <AdatiWayReturn+0xbcc>
 800e876:	ed9f 1aad 	vldr	s2, [pc, #692]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e87a:	eddf 0aac 	vldr	s1, [pc, #688]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e87e:	eebb 0a0e 	vmov.f32	s0, #190	; 0xc1f00000 -30.0
 800e882:	f7f4 fbab 	bl	8002fdc <straight_table2>
				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e886:	2003      	movs	r0, #3
 800e888:	f7f9 f850 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e88c:	2003      	movs	r0, #3
 800e88e:	f7f9 f825 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(500);
 800e892:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800e896:	f7f9 fb47 	bl	8007f28 <wait_ms_NoReset>
				no_safty = 0;
 800e89a:	4ba3      	ldr	r3, [pc, #652]	; (800eb28 <AdatiWayReturn+0xbbc>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
				clear_Ierror();
 800e8a0:	f7f5 fe80 	bl	80045a4 <clear_Ierror>

				direction = direction + 2;
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	3302      	adds	r3, #2
 800e8a8:	61bb      	str	r3, [r7, #24]

				if (direction >= 5) {
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	2b04      	cmp	r3, #4
 800e8ae:	dd02      	ble.n	800e8b6 <AdatiWayReturn+0x94a>
					direction = direction-4;
 800e8b0:	69bb      	ldr	r3, [r7, #24]
 800e8b2:	3b04      	subs	r3, #4
 800e8b4:	61bb      	str	r3, [r7, #24]
				}
				if (direction <= 0) {
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	f300 82f0 	bgt.w	800ee9e <AdatiWayReturn+0xf32>
					direction = direction+4;
 800e8be:	69bb      	ldr	r3, [r7, #24]
 800e8c0:	3304      	adds	r3, #4
 800e8c2:	61bb      	str	r3, [r7, #24]
				}

				break;
 800e8c4:	e2eb      	b.n	800ee9e <AdatiWayReturn+0xf32>
			}


			if(Dijkstra_maker_flag==1){
 800e8c6:	4b9d      	ldr	r3, [pc, #628]	; (800eb3c <AdatiWayReturn+0xbd0>)
 800e8c8:	781b      	ldrb	r3, [r3, #0]
 800e8ca:	2b01      	cmp	r3, #1
 800e8cc:	f040 8144 	bne.w	800eb58 <AdatiWayReturn+0xbec>
				// 移動の優先順位 ： 前→右→左→後
				mode.WallControlMode=1;
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET-(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800e8dc:	6978      	ldr	r0, [r7, #20]
 800e8de:	ed97 2a01 	vldr	s4, [r7, #4]
 800e8e2:	edd7 1a03 	vldr	s3, [r7, #12]
 800e8e6:	ed9f 1a91 	vldr	s2, [pc, #580]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e8ea:	edd7 0a03 	vldr	s1, [r7, #12]
 800e8ee:	eeb3 0a0d 	vmov.f32	s0, #61	; 0x41e80000  29.0
 800e8f2:	f7f4 fb73 	bl	8002fdc <straight_table2>

				pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e8f6:	2003      	movs	r0, #3
 800e8f8:	f7f9 f818 	bl	800792c <pl_R_DriveMotor_mode>
				pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e8fc:	2003      	movs	r0, #3
 800e8fe:	f7f8 ffed 	bl	80078dc <pl_L_DriveMotor_mode>
				wait_ms_NoReset(100);
 800e902:	2064      	movs	r0, #100	; 0x64
 800e904:	f7f9 fb10 	bl	8007f28 <wait_ms_NoReset>
				create_DijkstraMap();
 800e908:	f002 fee2 	bl	80116d0 <create_DijkstraMap>
								if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800e90c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e90e:	2bff      	cmp	r3, #255	; 0xff
 800e910:	d10c      	bne.n	800e92c <AdatiWayReturn+0x9c0>
 800e912:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e914:	2bff      	cmp	r3, #255	; 0xff
 800e916:	d109      	bne.n	800e92c <AdatiWayReturn+0x9c0>
 800e918:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e91a:	2bff      	cmp	r3, #255	; 0xff
 800e91c:	d106      	bne.n	800e92c <AdatiWayReturn+0x9c0>
 800e91e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e920:	2bff      	cmp	r3, #255	; 0xff
 800e922:	d103      	bne.n	800e92c <AdatiWayReturn+0x9c0>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
									error_mode=1;
 800e924:	4b86      	ldr	r3, [pc, #536]	; (800eb40 <AdatiWayReturn+0xbd4>)
 800e926:	2201      	movs	r2, #1
 800e928:	701a      	strb	r2, [r3, #0]
									break;
 800e92a:	e2bb      	b.n	800eea4 <AdatiWayReturn+0xf38>
								}
								if (x<0 || y<0 || x>15 || y>15){
 800e92c:	6a3b      	ldr	r3, [r7, #32]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	db08      	blt.n	800e944 <AdatiWayReturn+0x9d8>
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	2b00      	cmp	r3, #0
 800e936:	db05      	blt.n	800e944 <AdatiWayReturn+0x9d8>
 800e938:	6a3b      	ldr	r3, [r7, #32]
 800e93a:	2b0f      	cmp	r3, #15
 800e93c:	dc02      	bgt.n	800e944 <AdatiWayReturn+0x9d8>
 800e93e:	69fb      	ldr	r3, [r7, #28]
 800e940:	2b0f      	cmp	r3, #15
 800e942:	dd03      	ble.n	800e94c <AdatiWayReturn+0x9e0>
												// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
													error_mode=1;
 800e944:	4b7e      	ldr	r3, [pc, #504]	; (800eb40 <AdatiWayReturn+0xbd4>)
 800e946:	2201      	movs	r2, #1
 800e948:	701a      	strb	r2, [r3, #0]
													break;
 800e94a:	e2ab      	b.n	800eea4 <AdatiWayReturn+0xf38>
								}
								mode.WallControlMode=0;
 800e94c:	2300      	movs	r3, #0
 800e94e:	753b      	strb	r3, [r7, #20]
								mode.WallCutMode=0;
 800e950:	2300      	movs	r3, #0
 800e952:	75fb      	strb	r3, [r7, #23]
								mode.calMazeMode=0;
 800e954:	2300      	movs	r3, #0
 800e956:	75bb      	strb	r3, [r7, #22]
								if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800e958:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e95a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e95c:	429a      	cmp	r2, r3
 800e95e:	d814      	bhi.n	800e98a <AdatiWayReturn+0xa1e>
 800e960:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e964:	429a      	cmp	r2, r3
 800e966:	d810      	bhi.n	800e98a <AdatiWayReturn+0xa1e>
 800e968:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800e96a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e96c:	429a      	cmp	r2, r3
 800e96e:	d80c      	bhi.n	800e98a <AdatiWayReturn+0xa1e>
									// 直進
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e970:	6978      	ldr	r0, [r7, #20]
 800e972:	ed97 2a01 	vldr	s4, [r7, #4]
 800e976:	edd7 1a03 	vldr	s3, [r7, #12]
 800e97a:	ed97 1a03 	vldr	s2, [r7, #12]
 800e97e:	eddf 0a6b 	vldr	s1, [pc, #428]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e982:	ed9f 0a70 	vldr	s0, [pc, #448]	; 800eb44 <AdatiWayReturn+0xbd8>
 800e986:	f7f4 fb29 	bl	8002fdc <straight_table2>
								}
								if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800e98a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e98c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e98e:	429a      	cmp	r2, r3
 800e990:	d230      	bcs.n	800e9f4 <AdatiWayReturn+0xa88>
 800e992:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e996:	429a      	cmp	r2, r3
 800e998:	d82c      	bhi.n	800e9f4 <AdatiWayReturn+0xa88>
 800e99a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800e99c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e99e:	429a      	cmp	r2, r3
 800e9a0:	d828      	bhi.n	800e9f4 <AdatiWayReturn+0xa88>
									// 右旋回
									turning_table2(-90,0,0,-input_TurningVelocity,input_TurningAcceleration);
 800e9a2:	edd7 7a02 	vldr	s15, [r7, #8]
 800e9a6:	eef1 7a67 	vneg.f32	s15, s15
 800e9aa:	ed97 2a00 	vldr	s4, [r7]
 800e9ae:	eef0 1a67 	vmov.f32	s3, s15
 800e9b2:	ed9f 1a5e 	vldr	s2, [pc, #376]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e9b6:	eddf 0a5d 	vldr	s1, [pc, #372]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e9ba:	ed9f 0a63 	vldr	s0, [pc, #396]	; 800eb48 <AdatiWayReturn+0xbdc>
 800e9be:	f7f5 f81b 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800e9c2:	2003      	movs	r0, #3
 800e9c4:	f7f8 ffb2 	bl	800792c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800e9c8:	2003      	movs	r0, #3
 800e9ca:	f7f8 ff87 	bl	80078dc <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800e9ce:	2064      	movs	r0, #100	; 0x64
 800e9d0:	f7f9 faaa 	bl	8007f28 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800e9d4:	6978      	ldr	r0, [r7, #20]
 800e9d6:	ed97 2a01 	vldr	s4, [r7, #4]
 800e9da:	edd7 1a03 	vldr	s3, [r7, #12]
 800e9de:	ed97 1a03 	vldr	s2, [r7, #12]
 800e9e2:	eddf 0a52 	vldr	s1, [pc, #328]	; 800eb2c <AdatiWayReturn+0xbc0>
 800e9e6:	ed9f 0a57 	vldr	s0, [pc, #348]	; 800eb44 <AdatiWayReturn+0xbd8>
 800e9ea:	f7f4 faf7 	bl	8002fdc <straight_table2>
									direction++;
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	61bb      	str	r3, [r7, #24]
								}
								if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800e9f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d22c      	bcs.n	800ea56 <AdatiWayReturn+0xaea>
 800e9fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e9fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea00:	429a      	cmp	r2, r3
 800ea02:	d228      	bcs.n	800ea56 <AdatiWayReturn+0xaea>
 800ea04:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea06:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d824      	bhi.n	800ea56 <AdatiWayReturn+0xaea>
									// 左旋回
									turning_table2(90,0,0,input_TurningVelocity,input_TurningAcceleration);
 800ea0c:	ed97 2a00 	vldr	s4, [r7]
 800ea10:	edd7 1a02 	vldr	s3, [r7, #8]
 800ea14:	ed9f 1a45 	vldr	s2, [pc, #276]	; 800eb2c <AdatiWayReturn+0xbc0>
 800ea18:	eddf 0a44 	vldr	s1, [pc, #272]	; 800eb2c <AdatiWayReturn+0xbc0>
 800ea1c:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 800eb4c <AdatiWayReturn+0xbe0>
 800ea20:	f7f4 ffea 	bl	80039f8 <turning_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ea24:	2003      	movs	r0, #3
 800ea26:	f7f8 ff81 	bl	800792c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ea2a:	2003      	movs	r0, #3
 800ea2c:	f7f8 ff56 	bl	80078dc <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800ea30:	2064      	movs	r0, #100	; 0x64
 800ea32:	f7f9 fa79 	bl	8007f28 <wait_ms_NoReset>
									straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT), 0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ea36:	6978      	ldr	r0, [r7, #20]
 800ea38:	ed97 2a01 	vldr	s4, [r7, #4]
 800ea3c:	edd7 1a03 	vldr	s3, [r7, #12]
 800ea40:	ed97 1a03 	vldr	s2, [r7, #12]
 800ea44:	eddf 0a39 	vldr	s1, [pc, #228]	; 800eb2c <AdatiWayReturn+0xbc0>
 800ea48:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 800eb44 <AdatiWayReturn+0xbd8>
 800ea4c:	f7f4 fac6 	bl	8002fdc <straight_table2>
									direction--;
 800ea50:	69bb      	ldr	r3, [r7, #24]
 800ea52:	3b01      	subs	r3, #1
 800ea54:	61bb      	str	r3, [r7, #24]
								}
								if(back_count < front_count && back_count < right_count
 800ea56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ea5a:	429a      	cmp	r2, r3
 800ea5c:	f080 820d 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
 800ea60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ea64:	429a      	cmp	r2, r3
 800ea66:	f080 8208 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
										&& back_count < left_count){
 800ea6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ea6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	f080 8203 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
									//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
									no_safty = 1;
 800ea74:	4b2c      	ldr	r3, [pc, #176]	; (800eb28 <AdatiWayReturn+0xbbc>)
 800ea76:	2201      	movs	r2, #1
 800ea78:	701a      	strb	r2, [r3, #0]
									backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ea7a:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ea7e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ea82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea86:	4618      	mov	r0, r3
 800ea88:	edd7 0a00 	vldr	s1, [r7]
 800ea8c:	ed97 0a02 	vldr	s0, [r7, #8]
 800ea90:	f7fb f9a4 	bl	8009ddc <backTurn_controlWall>
									//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
									wait_ms_NoReset(100);
 800ea94:	2064      	movs	r0, #100	; 0x64
 800ea96:	f7f9 fa47 	bl	8007f28 <wait_ms_NoReset>
									no_safty = 0;
 800ea9a:	4b23      	ldr	r3, [pc, #140]	; (800eb28 <AdatiWayReturn+0xbbc>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	701a      	strb	r2, [r3, #0]
									//clear_Ierror();
									mode.WallControlMode=0;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	753b      	strb	r3, [r7, #20]
									if(front_wall){
 800eaa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d027      	beq.n	800eafc <AdatiWayReturn+0xb90>
									straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800eaac:	6978      	ldr	r0, [r7, #20]
 800eaae:	ed9f 2a21 	vldr	s4, [pc, #132]	; 800eb34 <AdatiWayReturn+0xbc8>
 800eab2:	eddf 1a21 	vldr	s3, [pc, #132]	; 800eb38 <AdatiWayReturn+0xbcc>
 800eab6:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800eb2c <AdatiWayReturn+0xbc0>
 800eaba:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800eb2c <AdatiWayReturn+0xbc0>
 800eabe:	ed9f 0a24 	vldr	s0, [pc, #144]	; 800eb50 <AdatiWayReturn+0xbe4>
 800eac2:	f7f4 fa8b 	bl	8002fdc <straight_table2>
									pl_R_DriveMotor_mode(MOTOR_BREAK);
 800eac6:	2003      	movs	r0, #3
 800eac8:	f7f8 ff30 	bl	800792c <pl_R_DriveMotor_mode>
									pl_L_DriveMotor_mode(MOTOR_BREAK);
 800eacc:	2003      	movs	r0, #3
 800eace:	f7f8 ff05 	bl	80078dc <pl_L_DriveMotor_mode>
									wait_ms_NoReset(100);
 800ead2:	2064      	movs	r0, #100	; 0x64
 800ead4:	f7f9 fa28 	bl	8007f28 <wait_ms_NoReset>

									clear_Ierror();
 800ead8:	f7f5 fd64 	bl	80045a4 <clear_Ierror>
									mode.WallControlMode=1;
 800eadc:	2301      	movs	r3, #1
 800eade:	753b      	strb	r3, [r7, #20]
									straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eae0:	6978      	ldr	r0, [r7, #20]
 800eae2:	ed97 2a01 	vldr	s4, [r7, #4]
 800eae6:	edd7 1a03 	vldr	s3, [r7, #12]
 800eaea:	ed97 1a03 	vldr	s2, [r7, #12]
 800eaee:	eddf 0a0f 	vldr	s1, [pc, #60]	; 800eb2c <AdatiWayReturn+0xbc0>
 800eaf2:	ed9f 0a18 	vldr	s0, [pc, #96]	; 800eb54 <AdatiWayReturn+0xbe8>
 800eaf6:	f7f4 fa71 	bl	8002fdc <straight_table2>
 800eafa:	e010      	b.n	800eb1e <AdatiWayReturn+0xbb2>
									}else{
										clear_Ierror();
 800eafc:	f7f5 fd52 	bl	80045a4 <clear_Ierror>
										mode.WallControlMode=1;
 800eb00:	2301      	movs	r3, #1
 800eb02:	753b      	strb	r3, [r7, #20]
										straight_table2(90/2+(BACK_TO_CENTER-BACK_TO_CENTER_FRONT),0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800eb04:	6978      	ldr	r0, [r7, #20]
 800eb06:	ed97 2a01 	vldr	s4, [r7, #4]
 800eb0a:	edd7 1a03 	vldr	s3, [r7, #12]
 800eb0e:	ed97 1a03 	vldr	s2, [r7, #12]
 800eb12:	eddf 0a06 	vldr	s1, [pc, #24]	; 800eb2c <AdatiWayReturn+0xbc0>
 800eb16:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800eb44 <AdatiWayReturn+0xbd8>
 800eb1a:	f7f4 fa5f 	bl	8002fdc <straight_table2>

									}
									//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
									direction = direction + 2;
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	3302      	adds	r3, #2
 800eb22:	61bb      	str	r3, [r7, #24]
 800eb24:	e1a9      	b.n	800ee7a <AdatiWayReturn+0xf0e>
 800eb26:	bf00      	nop
 800eb28:	20000806 	.word	0x20000806
 800eb2c:	00000000 	.word	0x00000000
 800eb30:	43340000 	.word	0x43340000
 800eb34:	447a0000 	.word	0x447a0000
 800eb38:	c3160000 	.word	0xc3160000
 800eb3c:	20000d2c 	.word	0x20000d2c
 800eb40:	20000807 	.word	0x20000807
 800eb44:	42540000 	.word	0x42540000
 800eb48:	c2b40000 	.word	0xc2b40000
 800eb4c:	42b40000 	.word	0x42b40000
 800eb50:	c1a40000 	.word	0xc1a40000
 800eb54:	42830000 	.word	0x42830000
								}


			}else{

				if(know_mode==0){
 800eb58:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d102      	bne.n	800eb66 <AdatiWayReturn+0xbfa>
					kitikukan = 0;
 800eb60:	4b97      	ldr	r3, [pc, #604]	; (800edc0 <AdatiWayReturn+0xe54>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	601a      	str	r2, [r3, #0]
				}
			if (kitikukan == OFF) {
 800eb66:	4b96      	ldr	r3, [pc, #600]	; (800edc0 <AdatiWayReturn+0xe54>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f040 8142 	bne.w	800edf4 <AdatiWayReturn+0xe88>

				// 移動の優先順位 ： 前→右→左→後
				if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 800eb70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800eb72:	2bff      	cmp	r3, #255	; 0xff
 800eb74:	d10c      	bne.n	800eb90 <AdatiWayReturn+0xc24>
 800eb76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800eb78:	2bff      	cmp	r3, #255	; 0xff
 800eb7a:	d109      	bne.n	800eb90 <AdatiWayReturn+0xc24>
 800eb7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb7e:	2bff      	cmp	r3, #255	; 0xff
 800eb80:	d106      	bne.n	800eb90 <AdatiWayReturn+0xc24>
 800eb82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800eb84:	2bff      	cmp	r3, #255	; 0xff
 800eb86:	d103      	bne.n	800eb90 <AdatiWayReturn+0xc24>
				// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

					error_mode=1;
 800eb88:	4b8e      	ldr	r3, [pc, #568]	; (800edc4 <AdatiWayReturn+0xe58>)
 800eb8a:	2201      	movs	r2, #1
 800eb8c:	701a      	strb	r2, [r3, #0]
					break;
 800eb8e:	e189      	b.n	800eea4 <AdatiWayReturn+0xf38>
				}
				if (x<0 || y<0 || x>15 || y>15){
 800eb90:	6a3b      	ldr	r3, [r7, #32]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	db08      	blt.n	800eba8 <AdatiWayReturn+0xc3c>
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	db05      	blt.n	800eba8 <AdatiWayReturn+0xc3c>
 800eb9c:	6a3b      	ldr	r3, [r7, #32]
 800eb9e:	2b0f      	cmp	r3, #15
 800eba0:	dc02      	bgt.n	800eba8 <AdatiWayReturn+0xc3c>
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	2b0f      	cmp	r3, #15
 800eba6:	dd03      	ble.n	800ebb0 <AdatiWayReturn+0xc44>
								// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

									error_mode=1;
 800eba8:	4b86      	ldr	r3, [pc, #536]	; (800edc4 <AdatiWayReturn+0xe58>)
 800ebaa:	2201      	movs	r2, #1
 800ebac:	701a      	strb	r2, [r3, #0]
									break;
 800ebae:	e179      	b.n	800eea4 <AdatiWayReturn+0xf38>
				}
				if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800ebb0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebb2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d81a      	bhi.n	800ebee <AdatiWayReturn+0xc82>
 800ebb8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d816      	bhi.n	800ebee <AdatiWayReturn+0xc82>
 800ebc0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800ebc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d812      	bhi.n	800ebee <AdatiWayReturn+0xc82>
					// 直進
					mode.WallControlMode=1;
 800ebc8:	2301      	movs	r3, #1
 800ebca:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ebcc:	2300      	movs	r3, #0
 800ebce:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	75fb      	strb	r3, [r7, #23]
					straight_table2(180/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ebd4:	6978      	ldr	r0, [r7, #20]
 800ebd6:	ed97 2a01 	vldr	s4, [r7, #4]
 800ebda:	edd7 1a03 	vldr	s3, [r7, #12]
 800ebde:	ed97 1a03 	vldr	s2, [r7, #12]
 800ebe2:	edd7 0a03 	vldr	s1, [r7, #12]
 800ebe6:	ed9f 0a78 	vldr	s0, [pc, #480]	; 800edc8 <AdatiWayReturn+0xe5c>
 800ebea:	f7f4 f9f7 	bl	8002fdc <straight_table2>
				}
				if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800ebee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d22c      	bcs.n	800ec50 <AdatiWayReturn+0xce4>
 800ebf6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ebf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d828      	bhi.n	800ec50 <AdatiWayReturn+0xce4>
 800ebfe:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ec00:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d824      	bhi.n	800ec50 <AdatiWayReturn+0xce4>
					// 右旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec06:	6a3b      	ldr	r3, [r7, #32]
 800ec08:	2b01      	cmp	r3, #1
 800ec0a:	d002      	beq.n	800ec12 <AdatiWayReturn+0xca6>
 800ec0c:	6a3b      	ldr	r3, [r7, #32]
 800ec0e:	2b02      	cmp	r3, #2
 800ec10:	d109      	bne.n	800ec26 <AdatiWayReturn+0xcba>
 800ec12:	69fb      	ldr	r3, [r7, #28]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <AdatiWayReturn+0xcb2>
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	d103      	bne.n	800ec26 <AdatiWayReturn+0xcba>
						noGoalPillarMode=1;
 800ec1e:	4b6b      	ldr	r3, [pc, #428]	; (800edcc <AdatiWayReturn+0xe60>)
 800ec20:	2201      	movs	r2, #1
 800ec22:	701a      	strb	r2, [r3, #0]
 800ec24:	e002      	b.n	800ec2c <AdatiWayReturn+0xcc0>
					}else{
						noGoalPillarMode=0;
 800ec26:	4b69      	ldr	r3, [pc, #420]	; (800edcc <AdatiWayReturn+0xe60>)
 800ec28:	2200      	movs	r2, #0
 800ec2a:	701a      	strb	r2, [r3, #0]
					}
					slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec2c:	4b68      	ldr	r3, [pc, #416]	; (800edd0 <AdatiWayReturn+0xe64>)
 800ec2e:	2200      	movs	r2, #0
 800ec30:	9203      	str	r2, [sp, #12]
 800ec32:	2200      	movs	r2, #0
 800ec34:	9202      	str	r2, [sp, #8]
 800ec36:	2200      	movs	r2, #0
 800ec38:	9201      	str	r2, [sp, #4]
 800ec3a:	699a      	ldr	r2, [r3, #24]
 800ec3c:	9200      	str	r2, [sp, #0]
 800ec3e:	3308      	adds	r3, #8
 800ec40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ec42:	ed97 0a03 	vldr	s0, [r7, #12]
 800ec46:	f7fb f993 	bl	8009f70 <slalomR>
					direction++;
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	61bb      	str	r3, [r7, #24]
				}
				if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800ec50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec52:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d22c      	bcs.n	800ecb2 <AdatiWayReturn+0xd46>
 800ec58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec5a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d228      	bcs.n	800ecb2 <AdatiWayReturn+0xd46>
 800ec60:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ec64:	429a      	cmp	r2, r3
 800ec66:	d824      	bhi.n	800ecb2 <AdatiWayReturn+0xd46>
					// 左旋回
					if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ec68:	6a3b      	ldr	r3, [r7, #32]
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d002      	beq.n	800ec74 <AdatiWayReturn+0xd08>
 800ec6e:	6a3b      	ldr	r3, [r7, #32]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d109      	bne.n	800ec88 <AdatiWayReturn+0xd1c>
 800ec74:	69fb      	ldr	r3, [r7, #28]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <AdatiWayReturn+0xd14>
 800ec7a:	69fb      	ldr	r3, [r7, #28]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	d103      	bne.n	800ec88 <AdatiWayReturn+0xd1c>
						noGoalPillarMode=1;
 800ec80:	4b52      	ldr	r3, [pc, #328]	; (800edcc <AdatiWayReturn+0xe60>)
 800ec82:	2201      	movs	r2, #1
 800ec84:	701a      	strb	r2, [r3, #0]
 800ec86:	e002      	b.n	800ec8e <AdatiWayReturn+0xd22>
					}else{
						noGoalPillarMode=0;
 800ec88:	4b50      	ldr	r3, [pc, #320]	; (800edcc <AdatiWayReturn+0xe60>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	701a      	strb	r2, [r3, #0]
					}
					slalomL(speed300_exploration.slalom_L, OFF,EXPLORATION,0,input_StraightVelocity);
 800ec8e:	4b50      	ldr	r3, [pc, #320]	; (800edd0 <AdatiWayReturn+0xe64>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	9203      	str	r2, [sp, #12]
 800ec94:	2200      	movs	r2, #0
 800ec96:	9202      	str	r2, [sp, #8]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	9201      	str	r2, [sp, #4]
 800ec9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec9e:	9200      	str	r2, [sp, #0]
 800eca0:	331c      	adds	r3, #28
 800eca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800eca4:	ed97 0a03 	vldr	s0, [r7, #12]
 800eca8:	f7fb fb48 	bl	800a33c <slalomL>
					direction--;
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	3b01      	subs	r3, #1
 800ecb0:	61bb      	str	r3, [r7, #24]
				}
				if(back_count < front_count && back_count < right_count
 800ecb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecb4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ecb6:	429a      	cmp	r2, r3
 800ecb8:	f080 80df 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
 800ecbc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecbe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	f080 80da 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
						&& back_count < left_count){
 800ecc6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ecc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecca:	429a      	cmp	r2, r3
 800eccc:	f080 80d5 	bcs.w	800ee7a <AdatiWayReturn+0xf0e>
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
					mode.WallControlMode=1;
 800ecd0:	2301      	movs	r3, #1
 800ecd2:	753b      	strb	r3, [r7, #20]
					mode.calMazeMode=0;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	75bb      	strb	r3, [r7, #22]
					mode.WallCutMode=0;
 800ecd8:	2300      	movs	r3, #0
 800ecda:	75fb      	strb	r3, [r7, #23]
					straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,0,input_StraightVelocity,input_StraightAcceleration, mode);
 800ecdc:	6978      	ldr	r0, [r7, #20]
 800ecde:	ed97 2a01 	vldr	s4, [r7, #4]
 800ece2:	edd7 1a03 	vldr	s3, [r7, #12]
 800ece6:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800edd4 <AdatiWayReturn+0xe68>
 800ecea:	edd7 0a03 	vldr	s1, [r7, #12]
 800ecee:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800edf0 <AdatiWayReturn+0xe84>
 800ecf2:	f7f4 f973 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ecf6:	2003      	movs	r0, #3
 800ecf8:	f7f8 fe18 	bl	800792c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ecfc:	2003      	movs	r0, #3
 800ecfe:	f7f8 fded 	bl	80078dc <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed02:	2064      	movs	r0, #100	; 0x64
 800ed04:	f7f9 f910 	bl	8007f28 <wait_ms_NoReset>
					create_DijkstraMap();
 800ed08:	f002 fce2 	bl	80116d0 <create_DijkstraMap>
					no_safty = 1;
 800ed0c:	4b32      	ldr	r3, [pc, #200]	; (800edd8 <AdatiWayReturn+0xe6c>)
 800ed0e:	2201      	movs	r2, #1
 800ed10:	701a      	strb	r2, [r3, #0]
					backTurn_controlWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
 800ed12:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ed16:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 800ed1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed1e:	4618      	mov	r0, r3
 800ed20:	edd7 0a00 	vldr	s1, [r7]
 800ed24:	ed97 0a02 	vldr	s0, [r7, #8]
 800ed28:	f7fb f858 	bl	8009ddc <backTurn_controlWall>
					//backTurn_hitWall(input_TurningVelocity, input_TurningAcceleration, front_wall, left_wall, right_wall);
					wait_ms_NoReset(100);
 800ed2c:	2064      	movs	r0, #100	; 0x64
 800ed2e:	f7f9 f8fb 	bl	8007f28 <wait_ms_NoReset>
					no_safty = 0;
 800ed32:	4b29      	ldr	r3, [pc, #164]	; (800edd8 <AdatiWayReturn+0xe6c>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	701a      	strb	r2, [r3, #0]
					//clear_Ierror();
					mode.WallControlMode=0;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	753b      	strb	r3, [r7, #20]
					if(front_wall){
 800ed3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d027      	beq.n	800ed94 <AdatiWayReturn+0xe28>
					straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 800ed44:	6978      	ldr	r0, [r7, #20]
 800ed46:	ed9f 2a25 	vldr	s4, [pc, #148]	; 800eddc <AdatiWayReturn+0xe70>
 800ed4a:	eddf 1a25 	vldr	s3, [pc, #148]	; 800ede0 <AdatiWayReturn+0xe74>
 800ed4e:	ed9f 1a21 	vldr	s2, [pc, #132]	; 800edd4 <AdatiWayReturn+0xe68>
 800ed52:	eddf 0a20 	vldr	s1, [pc, #128]	; 800edd4 <AdatiWayReturn+0xe68>
 800ed56:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800ede4 <AdatiWayReturn+0xe78>
 800ed5a:	f7f4 f93f 	bl	8002fdc <straight_table2>
					pl_R_DriveMotor_mode(MOTOR_BREAK);
 800ed5e:	2003      	movs	r0, #3
 800ed60:	f7f8 fde4 	bl	800792c <pl_R_DriveMotor_mode>
					pl_L_DriveMotor_mode(MOTOR_BREAK);
 800ed64:	2003      	movs	r0, #3
 800ed66:	f7f8 fdb9 	bl	80078dc <pl_L_DriveMotor_mode>
					wait_ms_NoReset(100);
 800ed6a:	2064      	movs	r0, #100	; 0x64
 800ed6c:	f7f9 f8dc 	bl	8007f28 <wait_ms_NoReset>

					clear_Ierror();
 800ed70:	f7f5 fc18 	bl	80045a4 <clear_Ierror>
					mode.WallControlMode=1;
 800ed74:	2301      	movs	r3, #1
 800ed76:	753b      	strb	r3, [r7, #20]
					straight_table2(BACK_TO_CENTER +90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed78:	6978      	ldr	r0, [r7, #20]
 800ed7a:	ed97 2a01 	vldr	s4, [r7, #4]
 800ed7e:	edd7 1a03 	vldr	s3, [r7, #12]
 800ed82:	ed97 1a03 	vldr	s2, [r7, #12]
 800ed86:	eddf 0a13 	vldr	s1, [pc, #76]	; 800edd4 <AdatiWayReturn+0xe68>
 800ed8a:	ed9f 0a17 	vldr	s0, [pc, #92]	; 800ede8 <AdatiWayReturn+0xe7c>
 800ed8e:	f7f4 f925 	bl	8002fdc <straight_table2>
 800ed92:	e010      	b.n	800edb6 <AdatiWayReturn+0xe4a>
					}else{
						clear_Ierror();
 800ed94:	f7f5 fc06 	bl	80045a4 <clear_Ierror>
						mode.WallControlMode=1;
 800ed98:	2301      	movs	r3, #1
 800ed9a:	753b      	strb	r3, [r7, #20]
						straight_table2(90/2,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ed9c:	6978      	ldr	r0, [r7, #20]
 800ed9e:	ed97 2a01 	vldr	s4, [r7, #4]
 800eda2:	edd7 1a03 	vldr	s3, [r7, #12]
 800eda6:	ed97 1a03 	vldr	s2, [r7, #12]
 800edaa:	eddf 0a0a 	vldr	s1, [pc, #40]	; 800edd4 <AdatiWayReturn+0xe68>
 800edae:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800edec <AdatiWayReturn+0xe80>
 800edb2:	f7f4 f913 	bl	8002fdc <straight_table2>

					}
					//straight_table2(BACK_TO_CENTER + 90,0,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
					direction = direction + 2;
 800edb6:	69bb      	ldr	r3, [r7, #24]
 800edb8:	3302      	adds	r3, #2
 800edba:	61bb      	str	r3, [r7, #24]
 800edbc:	e05d      	b.n	800ee7a <AdatiWayReturn+0xf0e>
 800edbe:	bf00      	nop
 800edc0:	20000838 	.word	0x20000838
 800edc4:	20000807 	.word	0x20000807
 800edc8:	42a40000 	.word	0x42a40000
 800edcc:	20000529 	.word	0x20000529
 800edd0:	2000ef80 	.word	0x2000ef80
 800edd4:	00000000 	.word	0x00000000
 800edd8:	20000806 	.word	0x20000806
 800eddc:	447a0000 	.word	0x447a0000
 800ede0:	c3160000 	.word	0xc3160000
 800ede4:	c1a40000 	.word	0xc1a40000
 800ede8:	42830000 	.word	0x42830000
 800edec:	42340000 	.word	0x42340000
 800edf0:	42140000 	.word	0x42140000

				}

			} else {
				mode.WallControlMode=1;
 800edf4:	2301      	movs	r3, #1
 800edf6:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=1;
 800edf8:	2301      	movs	r3, #1
 800edfa:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	75fb      	strb	r3, [r7, #23]
				straight_table2(90/2-MAZE_OFFSET, input_StraightVelocity,input_StraightVelocity,input_StraightVelocity,input_StraightAcceleration, mode);
 800ee00:	6978      	ldr	r0, [r7, #20]
 800ee02:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee06:	edd7 1a03 	vldr	s3, [r7, #12]
 800ee0a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee0e:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee12:	ed1f 0a09 	vldr	s0, [pc, #-36]	; 800edf0 <AdatiWayReturn+0xe84>
 800ee16:	f7f4 f8e1 	bl	8002fdc <straight_table2>
				compress_kitiku(&x,&y,&direction);
 800ee1a:	f107 0218 	add.w	r2, r7, #24
 800ee1e:	f107 011c 	add.w	r1, r7, #28
 800ee22:	f107 0320 	add.w	r3, r7, #32
 800ee26:	4618      	mov	r0, r3
 800ee28:	f001 fbce 	bl	80105c8 <compress_kitiku>
				mode.WallCutMode=0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	75fb      	strb	r3, [r7, #23]
				End_straight(90/2-MAZE_OFFSET,mode,1,1);
 800ee30:	2201      	movs	r2, #1
 800ee32:	2101      	movs	r1, #1
 800ee34:	6978      	ldr	r0, [r7, #20]
 800ee36:	ed1f 0a12 	vldr	s0, [pc, #-72]	; 800edf0 <AdatiWayReturn+0xe84>
 800ee3a:	f7f4 fd79 	bl	8003930 <End_straight>
				mode.WallControlMode=1;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	753b      	strb	r3, [r7, #20]
				mode.calMazeMode=0;
 800ee42:	2300      	movs	r3, #0
 800ee44:	75bb      	strb	r3, [r7, #22]
				mode.WallCutMode=0;
 800ee46:	2300      	movs	r3, #0
 800ee48:	75fb      	strb	r3, [r7, #23]
				straight_table2((90/2 * kitiku_distance),input_StraightVelocity,input_StraightVelocity,1000,input_StraightAcceleration, mode);
 800ee4a:	4b28      	ldr	r3, [pc, #160]	; (800eeec <AdatiWayReturn+0xf80>)
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	011a      	lsls	r2, r3, #4
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	ee07 3a90 	vmov	s15, r3
 800ee5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ee60:	6978      	ldr	r0, [r7, #20]
 800ee62:	ed97 2a01 	vldr	s4, [r7, #4]
 800ee66:	eddf 1a22 	vldr	s3, [pc, #136]	; 800eef0 <AdatiWayReturn+0xf84>
 800ee6a:	ed97 1a03 	vldr	s2, [r7, #12]
 800ee6e:	edd7 0a03 	vldr	s1, [r7, #12]
 800ee72:	eeb0 0a67 	vmov.f32	s0, s15
 800ee76:	f7f4 f8b1 	bl	8002fdc <straight_table2>

			}
			}

			if (direction >= 5) {
 800ee7a:	69bb      	ldr	r3, [r7, #24]
 800ee7c:	2b04      	cmp	r3, #4
 800ee7e:	dd02      	ble.n	800ee86 <AdatiWayReturn+0xf1a>
				direction = direction-4;
 800ee80:	69bb      	ldr	r3, [r7, #24]
 800ee82:	3b04      	subs	r3, #4
 800ee84:	61bb      	str	r3, [r7, #24]
			}
			if (direction <= 0) {
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	dc02      	bgt.n	800ee92 <AdatiWayReturn+0xf26>
				direction = direction+4;
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	61bb      	str	r3, [r7, #24]
	//基地区間**********************************************************************
	//		if (know_road == 1) {
	//			most_speed_kitikukan_play(850, 1600);
	//		}
	//基地区間
			if(error_mode==1){break;}
 800ee92:	4b18      	ldr	r3, [pc, #96]	; (800eef4 <AdatiWayReturn+0xf88>)
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b01      	cmp	r3, #1
 800ee98:	d003      	beq.n	800eea2 <AdatiWayReturn+0xf36>
		update_coordinate(&x,&y,direction);
 800ee9a:	f7ff bbff 	b.w	800e69c <AdatiWayReturn+0x730>
				break;
 800ee9e:	bf00      	nop
 800eea0:	e000      	b.n	800eea4 <AdatiWayReturn+0xf38>
			if(error_mode==1){break;}
 800eea2:	bf00      	nop
		}

	pl_DriveMotor_standby(OFF); //MTU2.TSTR.BIT.CST0 = 0;
 800eea4:	2000      	movs	r0, #0
 800eea6:	f7f8 fd0f 	bl	80078c8 <pl_DriveMotor_standby>
	maze_mode = 0;
 800eeaa:	4b13      	ldr	r3, [pc, #76]	; (800eef8 <AdatiWayReturn+0xf8c>)
 800eeac:	2200      	movs	r2, #0
 800eeae:	701a      	strb	r2, [r3, #0]
	HAL_Delay(100);
 800eeb0:	2064      	movs	r0, #100	; 0x64
 800eeb2:	f009 fe97 	bl	8018be4 <HAL_Delay>
	maze_display();
 800eeb6:	f005 ffb1 	bl	8014e1c <maze_display>
	create_StepCountMap_queue();
 800eeba:	f005 f98b 	bl	80141d4 <create_StepCountMap_queue>
	if(walk_count[0][0] == 255){
 800eebe:	4b0f      	ldr	r3, [pc, #60]	; (800eefc <AdatiWayReturn+0xf90>)
 800eec0:	881b      	ldrh	r3, [r3, #0]
 800eec2:	2bff      	cmp	r3, #255	; 0xff
 800eec4:	d102      	bne.n	800eecc <AdatiWayReturn+0xf60>
		error_mode = 1;
 800eec6:	4b0b      	ldr	r3, [pc, #44]	; (800eef4 <AdatiWayReturn+0xf88>)
 800eec8:	2201      	movs	r2, #1
 800eeca:	701a      	strb	r2, [r3, #0]
	}
	if (error_mode == 0) {
 800eecc:	4b09      	ldr	r3, [pc, #36]	; (800eef4 <AdatiWayReturn+0xf88>)
 800eece:	781b      	ldrb	r3, [r3, #0]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d102      	bne.n	800eeda <AdatiWayReturn+0xf6e>
		record_in();
 800eed4:	f7f8 fa06 	bl	80072e4 <record_in>
	} else {
		record_out();
	}

}
 800eed8:	e001      	b.n	800eede <AdatiWayReturn+0xf72>
		record_out();
 800eeda:	f7f8 fabf 	bl	800745c <record_out>
}
 800eede:	bf00      	nop
 800eee0:	3734      	adds	r7, #52	; 0x34
 800eee2:	46bd      	mov	sp, r7
 800eee4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eee8:	b004      	add	sp, #16
 800eeea:	4770      	bx	lr
 800eeec:	2000082c 	.word	0x2000082c
 800eef0:	447a0000 	.word	0x447a0000
 800eef4:	20000807 	.word	0x20000807
 800eef8:	20000834 	.word	0x20000834
 800eefc:	20000d30 	.word	0x20000d30

0800ef00 <pass_maker_Dijkstra>:





void pass_maker_Dijkstra(void){
 800ef00:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef02:	b08b      	sub	sp, #44	; 0x2c
 800ef04:	af04      	add	r7, sp, #16

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 800ef06:	2300      	movs	r3, #0
 800ef08:	607b      	str	r3, [r7, #4]
	int y = 0;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	603b      	str	r3, [r7, #0]
	int direction = 1;
 800ef0e:	2301      	movs	r3, #1
 800ef10:	617b      	str	r3, [r7, #20]
	pass_count = 0;
 800ef12:	4b8b      	ldr	r3, [pc, #556]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef14:	2200      	movs	r2, #0
 800ef16:	701a      	strb	r2, [r3, #0]
	create_DijkstraMap();
 800ef18:	f002 fbda 	bl	80116d0 <create_DijkstraMap>
	maze_display_Dijkstra();
 800ef1c:	f006 f89c 	bl	8015058 <maze_display_Dijkstra>
	pass[0] = 1;
 800ef20:	4b88      	ldr	r3, [pc, #544]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800ef22:	2201      	movs	r2, #1
 800ef24:	601a      	str	r2, [r3, #0]
	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 800ef26:	4639      	mov	r1, r7
 800ef28:	1d3b      	adds	r3, r7, #4
 800ef2a:	697a      	ldr	r2, [r7, #20]
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	f7fe ffe9 	bl	800df04 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d002      	beq.n	800ef3e <pass_maker_Dijkstra+0x3e>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b02      	cmp	r3, #2
 800ef3c:	d13a      	bne.n	800efb4 <pass_maker_Dijkstra+0xb4>
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d002      	beq.n	800ef4a <pass_maker_Dijkstra+0x4a>
 800ef44:	683b      	ldr	r3, [r7, #0]
 800ef46:	2b01      	cmp	r3, #1
 800ef48:	d134      	bne.n	800efb4 <pass_maker_Dijkstra+0xb4>

			if (pass[pass_count] >= 0) {
 800ef4a:	4b7d      	ldr	r3, [pc, #500]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef4c:	781b      	ldrb	r3, [r3, #0]
 800ef4e:	461a      	mov	r2, r3
 800ef50:	4b7c      	ldr	r3, [pc, #496]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800ef52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	da05      	bge.n	800ef66 <pass_maker_Dijkstra+0x66>
					} else {
						pass_count++;
 800ef5a:	4b79      	ldr	r3, [pc, #484]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef5c:	781b      	ldrb	r3, [r3, #0]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	b2da      	uxtb	r2, r3
 800ef62:	4b77      	ldr	r3, [pc, #476]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef64:	701a      	strb	r2, [r3, #0]
					}
					pass[pass_count] = pass[pass_count] + 1;
 800ef66:	4b76      	ldr	r3, [pc, #472]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef68:	781b      	ldrb	r3, [r3, #0]
 800ef6a:	461a      	mov	r2, r3
 800ef6c:	4b75      	ldr	r3, [pc, #468]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800ef6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ef72:	4a73      	ldr	r2, [pc, #460]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800ef74:	7812      	ldrb	r2, [r2, #0]
 800ef76:	4611      	mov	r1, r2
 800ef78:	3301      	adds	r3, #1
 800ef7a:	4a72      	ldr	r2, [pc, #456]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800ef7c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		//			wait(10);
		//			maze_display();
		//			x = 0;
		//			y = 0;
					direction = direction + 2;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	3302      	adds	r3, #2
 800ef84:	617b      	str	r3, [r7, #20]
					if (direction == 5) {
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	2b05      	cmp	r3, #5
 800ef8a:	d101      	bne.n	800ef90 <pass_maker_Dijkstra+0x90>
						direction = 1;
 800ef8c:	2301      	movs	r3, #1
 800ef8e:	617b      	str	r3, [r7, #20]
					}
					if (direction == 6) {
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	2b06      	cmp	r3, #6
 800ef94:	d101      	bne.n	800ef9a <pass_maker_Dijkstra+0x9a>
						direction = 2;
 800ef96:	2302      	movs	r3, #2
 800ef98:	617b      	str	r3, [r7, #20]
					}
					if (direction == 0) {
 800ef9a:	697b      	ldr	r3, [r7, #20]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d101      	bne.n	800efa4 <pass_maker_Dijkstra+0xa4>
						direction = 4;
 800efa0:	2304      	movs	r3, #4
 800efa2:	617b      	str	r3, [r7, #20]
					}
					if (direction == -1) {
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efaa:	f040 80c2 	bne.w	800f132 <pass_maker_Dijkstra+0x232>
						direction = 3;
 800efae:	2303      	movs	r3, #3
 800efb0:	617b      	str	r3, [r7, #20]
					}
					break;
 800efb2:	e0be      	b.n	800f132 <pass_maker_Dijkstra+0x232>

		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	f107 020b 	add.w	r2, r7, #11
 800efbc:	f107 0309 	add.w	r3, r7, #9
 800efc0:	9301      	str	r3, [sp, #4]
 800efc2:	f107 030a 	add.w	r3, r7, #10
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	4613      	mov	r3, r2
 800efca:	697a      	ldr	r2, [r7, #20]
 800efcc:	f001 ff64 	bl	8010e98 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	683a      	ldr	r2, [r7, #0]
 800efd4:	f107 060c 	add.w	r6, r7, #12
 800efd8:	f107 050e 	add.w	r5, r7, #14
 800efdc:	f107 0410 	add.w	r4, r7, #16
 800efe0:	f107 0012 	add.w	r0, r7, #18
 800efe4:	6979      	ldr	r1, [r7, #20]
 800efe6:	9102      	str	r1, [sp, #8]
 800efe8:	9201      	str	r2, [sp, #4]
 800efea:	9300      	str	r3, [sp, #0]
 800efec:	4633      	mov	r3, r6
 800efee:	462a      	mov	r2, r5
 800eff0:	4621      	mov	r1, r4
 800eff2:	f002 fad3 	bl	801159c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 800eff6:	7afb      	ldrb	r3, [r7, #11]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d002      	beq.n	800f002 <pass_maker_Dijkstra+0x102>
 800effc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f000:	827b      	strh	r3, [r7, #18]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f002:	7abb      	ldrb	r3, [r7, #10]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d002      	beq.n	800f00e <pass_maker_Dijkstra+0x10e>
 800f008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f00c:	823b      	strh	r3, [r7, #16]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 800f00e:	7a7b      	ldrb	r3, [r7, #9]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <pass_maker_Dijkstra+0x11a>
 800f014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f018:	81bb      	strh	r3, [r7, #12]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 800f01a:	8a7b      	ldrh	r3, [r7, #18]
 800f01c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f020:	4293      	cmp	r3, r2
 800f022:	d10e      	bne.n	800f042 <pass_maker_Dijkstra+0x142>
 800f024:	8a3b      	ldrh	r3, [r7, #16]
 800f026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d109      	bne.n	800f042 <pass_maker_Dijkstra+0x142>
 800f02e:	89bb      	ldrh	r3, [r7, #12]
 800f030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f034:	4293      	cmp	r3, r2
 800f036:	d104      	bne.n	800f042 <pass_maker_Dijkstra+0x142>
 800f038:	89fb      	ldrh	r3, [r7, #14]
 800f03a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f03e:	4293      	cmp	r3, r2
 800f040:	d079      	beq.n	800f136 <pass_maker_Dijkstra+0x236>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 800f042:	8a7a      	ldrh	r2, [r7, #18]
 800f044:	8a3b      	ldrh	r3, [r7, #16]
 800f046:	429a      	cmp	r2, r3
 800f048:	d822      	bhi.n	800f090 <pass_maker_Dijkstra+0x190>
 800f04a:	8a7a      	ldrh	r2, [r7, #18]
 800f04c:	89bb      	ldrh	r3, [r7, #12]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d81e      	bhi.n	800f090 <pass_maker_Dijkstra+0x190>
 800f052:	8a7a      	ldrh	r2, [r7, #18]
 800f054:	89fb      	ldrh	r3, [r7, #14]
 800f056:	429a      	cmp	r2, r3
 800f058:	d81a      	bhi.n	800f090 <pass_maker_Dijkstra+0x190>
			// 直進
			if (pass[pass_count] >= 0) {} else {pass_count++;}
 800f05a:	4b39      	ldr	r3, [pc, #228]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f05c:	781b      	ldrb	r3, [r3, #0]
 800f05e:	461a      	mov	r2, r3
 800f060:	4b38      	ldr	r3, [pc, #224]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800f062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f066:	2b00      	cmp	r3, #0
 800f068:	da05      	bge.n	800f076 <pass_maker_Dijkstra+0x176>
 800f06a:	4b35      	ldr	r3, [pc, #212]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	3301      	adds	r3, #1
 800f070:	b2da      	uxtb	r2, r3
 800f072:	4b33      	ldr	r3, [pc, #204]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f074:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = pass[pass_count] + 2;
 800f076:	4b32      	ldr	r3, [pc, #200]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f078:	781b      	ldrb	r3, [r3, #0]
 800f07a:	461a      	mov	r2, r3
 800f07c:	4b31      	ldr	r3, [pc, #196]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800f07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f082:	4a2f      	ldr	r2, [pc, #188]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f084:	7812      	ldrb	r2, [r2, #0]
 800f086:	4611      	mov	r1, r2
 800f088:	3302      	adds	r3, #2
 800f08a:	4a2e      	ldr	r2, [pc, #184]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800f08c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 800f090:	8a3a      	ldrh	r2, [r7, #16]
 800f092:	8a7b      	ldrh	r3, [r7, #18]
 800f094:	429a      	cmp	r2, r3
 800f096:	d218      	bcs.n	800f0ca <pass_maker_Dijkstra+0x1ca>
 800f098:	8a3a      	ldrh	r2, [r7, #16]
 800f09a:	89bb      	ldrh	r3, [r7, #12]
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d814      	bhi.n	800f0ca <pass_maker_Dijkstra+0x1ca>
 800f0a0:	8a3a      	ldrh	r2, [r7, #16]
 800f0a2:	89fb      	ldrh	r3, [r7, #14]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d810      	bhi.n	800f0ca <pass_maker_Dijkstra+0x1ca>
			// 右旋回
			pass_count++;
 800f0a8:	4b25      	ldr	r3, [pc, #148]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	b2da      	uxtb	r2, r3
 800f0b0:	4b23      	ldr	r3, [pc, #140]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0b2:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -2;
 800f0b4:	4b22      	ldr	r3, [pc, #136]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	4619      	mov	r1, r3
 800f0ba:	4b22      	ldr	r3, [pc, #136]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800f0bc:	f06f 0201 	mvn.w	r2, #1
 800f0c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction++;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	617b      	str	r3, [r7, #20]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 800f0ca:	89ba      	ldrh	r2, [r7, #12]
 800f0cc:	8a7b      	ldrh	r3, [r7, #18]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d218      	bcs.n	800f104 <pass_maker_Dijkstra+0x204>
 800f0d2:	89ba      	ldrh	r2, [r7, #12]
 800f0d4:	8a3b      	ldrh	r3, [r7, #16]
 800f0d6:	429a      	cmp	r2, r3
 800f0d8:	d214      	bcs.n	800f104 <pass_maker_Dijkstra+0x204>
 800f0da:	89ba      	ldrh	r2, [r7, #12]
 800f0dc:	89fb      	ldrh	r3, [r7, #14]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d810      	bhi.n	800f104 <pass_maker_Dijkstra+0x204>
			// 左旋回
			pass_count++;
 800f0e2:	4b17      	ldr	r3, [pc, #92]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0e4:	781b      	ldrb	r3, [r3, #0]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	b2da      	uxtb	r2, r3
 800f0ea:	4b15      	ldr	r3, [pc, #84]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0ec:	701a      	strb	r2, [r3, #0]
			pass[pass_count] = -3;
 800f0ee:	4b14      	ldr	r3, [pc, #80]	; (800f140 <pass_maker_Dijkstra+0x240>)
 800f0f0:	781b      	ldrb	r3, [r3, #0]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	4b13      	ldr	r3, [pc, #76]	; (800f144 <pass_maker_Dijkstra+0x244>)
 800f0f6:	f06f 0202 	mvn.w	r2, #2
 800f0fa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			direction--;
 800f0fe:	697b      	ldr	r3, [r7, #20]
 800f100:	3b01      	subs	r3, #1
 800f102:	617b      	str	r3, [r7, #20]
		}

		if (direction == 5) {
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b05      	cmp	r3, #5
 800f108:	d101      	bne.n	800f10e <pass_maker_Dijkstra+0x20e>
			direction = 1;
 800f10a:	2301      	movs	r3, #1
 800f10c:	617b      	str	r3, [r7, #20]
		}
		if (direction == 6) {
 800f10e:	697b      	ldr	r3, [r7, #20]
 800f110:	2b06      	cmp	r3, #6
 800f112:	d101      	bne.n	800f118 <pass_maker_Dijkstra+0x218>
			direction = 2;
 800f114:	2302      	movs	r3, #2
 800f116:	617b      	str	r3, [r7, #20]
		}
		if (direction == 0) {
 800f118:	697b      	ldr	r3, [r7, #20]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d101      	bne.n	800f122 <pass_maker_Dijkstra+0x222>
			direction = 4;
 800f11e:	2304      	movs	r3, #4
 800f120:	617b      	str	r3, [r7, #20]
		}
		if (direction == -1) {
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f128:	f47f aefd 	bne.w	800ef26 <pass_maker_Dijkstra+0x26>
			direction = 3;
 800f12c:	2303      	movs	r3, #3
 800f12e:	617b      	str	r3, [r7, #20]
		update_coordinate(&x,&y,direction);
 800f130:	e6f9      	b.n	800ef26 <pass_maker_Dijkstra+0x26>
					break;
 800f132:	bf00      	nop
 800f134:	e000      	b.n	800f138 <pass_maker_Dijkstra+0x238>
			break;
 800f136:	bf00      	nop
		}

	}
}
 800f138:	bf00      	nop
 800f13a:	371c      	adds	r7, #28
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f140:	20000828 	.word	0x20000828
 800f144:	2000083c 	.word	0x2000083c

0800f148 <run_shortest>:


void run_shortest(float inspeed, float inacc, int stmass, char pass_mode, char fun_mode,
		char slant_mode, parameter_speed howspeed,float fun_ratio,char mollifier_mode) {
 800f148:	b5b0      	push	{r4, r5, r7, lr}
 800f14a:	b0e0      	sub	sp, #384	; 0x180
 800f14c:	af50      	add	r7, sp, #320	; 0x140
 800f14e:	ed87 0a05 	vstr	s0, [r7, #20]
 800f152:	edc7 0a04 	vstr	s1, [r7, #16]
 800f156:	60f8      	str	r0, [r7, #12]
 800f158:	4608      	mov	r0, r1
 800f15a:	4611      	mov	r1, r2
 800f15c:	461a      	mov	r2, r3
 800f15e:	ed87 1a01 	vstr	s2, [r7, #4]
 800f162:	4603      	mov	r3, r0
 800f164:	72fb      	strb	r3, [r7, #11]
 800f166:	460b      	mov	r3, r1
 800f168:	72bb      	strb	r3, [r7, #10]
 800f16a:	4613      	mov	r3, r2
 800f16c:	727b      	strb	r3, [r7, #9]
//	_Bool left_wall;
//
//	int x = 0;
//	int y = 0;
//	int direction = 1;
	slant_direction = -2;
 800f16e:	f06f 0301 	mvn.w	r3, #1
 800f172:	63bb      	str	r3, [r7, #56]	; 0x38

	MOTOR_MODE mode;
	mode.WallControlMode=1;
 800f174:	2301      	movs	r3, #1
 800f176:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800f178:	2300      	movs	r3, #0
 800f17a:	767b      	strb	r3, [r7, #25]
	mode.WallCutMode=0;
 800f17c:	2300      	movs	r3, #0
 800f17e:	76fb      	strb	r3, [r7, #27]
	mode.calMazeMode=0;
 800f180:	2300      	movs	r3, #0
 800f182:	76bb      	strb	r3, [r7, #26]

	//highspeed_mode = 1;
	for(int i = 0; i <= 254; i++){pass[i] = 0;}
 800f184:	2300      	movs	r3, #0
 800f186:	633b      	str	r3, [r7, #48]	; 0x30
 800f188:	e007      	b.n	800f19a <run_shortest+0x52>
 800f18a:	4a07      	ldr	r2, [pc, #28]	; (800f1a8 <run_shortest+0x60>)
 800f18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f18e:	2100      	movs	r1, #0
 800f190:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f196:	3301      	adds	r3, #1
 800f198:	633b      	str	r3, [r7, #48]	; 0x30
 800f19a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19c:	2bfe      	cmp	r3, #254	; 0xfe
 800f19e:	ddf4      	ble.n	800f18a <run_shortest+0x42>
	for(int i = 0; i <= 14; i++){
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f1a4:	e077      	b.n	800f296 <run_shortest+0x14e>
 800f1a6:	bf00      	nop
 800f1a8:	2000083c 	.word	0x2000083c
		record.row[i] = wall.row[i];
 800f1ac:	4aa9      	ldr	r2, [pc, #676]	; (800f454 <run_shortest+0x30c>)
 800f1ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800f1b4:	4aa8      	ldr	r2, [pc, #672]	; (800f458 <run_shortest+0x310>)
 800f1b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1b8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		record.column[i] = wall.column[i];
 800f1bc:	4aa5      	ldr	r2, [pc, #660]	; (800f454 <run_shortest+0x30c>)
 800f1be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c0:	330c      	adds	r3, #12
 800f1c2:	005b      	lsls	r3, r3, #1
 800f1c4:	4413      	add	r3, r2
 800f1c6:	88d9      	ldrh	r1, [r3, #6]
 800f1c8:	4aa3      	ldr	r2, [pc, #652]	; (800f458 <run_shortest+0x310>)
 800f1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1cc:	330c      	adds	r3, #12
 800f1ce:	005b      	lsls	r3, r3, #1
 800f1d0:	4413      	add	r3, r2
 800f1d2:	460a      	mov	r2, r1
 800f1d4:	80da      	strh	r2, [r3, #6]
		record.row_look[i] = wall.row_look[i];
 800f1d6:	4a9f      	ldr	r2, [pc, #636]	; (800f454 <run_shortest+0x30c>)
 800f1d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1da:	331c      	adds	r3, #28
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	8899      	ldrh	r1, [r3, #4]
 800f1e2:	4a9d      	ldr	r2, [pc, #628]	; (800f458 <run_shortest+0x310>)
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	331c      	adds	r3, #28
 800f1e8:	005b      	lsls	r3, r3, #1
 800f1ea:	4413      	add	r3, r2
 800f1ec:	460a      	mov	r2, r1
 800f1ee:	809a      	strh	r2, [r3, #4]
		record.column_look[i] = wall.column_look[i];
 800f1f0:	4a98      	ldr	r2, [pc, #608]	; (800f454 <run_shortest+0x30c>)
 800f1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f4:	332c      	adds	r3, #44	; 0x2c
 800f1f6:	005b      	lsls	r3, r3, #1
 800f1f8:	4413      	add	r3, r2
 800f1fa:	8859      	ldrh	r1, [r3, #2]
 800f1fc:	4a96      	ldr	r2, [pc, #600]	; (800f458 <run_shortest+0x310>)
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	332c      	adds	r3, #44	; 0x2c
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	4413      	add	r3, r2
 800f206:	460a      	mov	r2, r1
 800f208:	805a      	strh	r2, [r3, #2]
		wall.row_look[i] = ~wall.row_look[i];
 800f20a:	4a92      	ldr	r2, [pc, #584]	; (800f454 <run_shortest+0x30c>)
 800f20c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f20e:	331c      	adds	r3, #28
 800f210:	005b      	lsls	r3, r3, #1
 800f212:	4413      	add	r3, r2
 800f214:	889b      	ldrh	r3, [r3, #4]
 800f216:	43db      	mvns	r3, r3
 800f218:	b299      	uxth	r1, r3
 800f21a:	4a8e      	ldr	r2, [pc, #568]	; (800f454 <run_shortest+0x30c>)
 800f21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f21e:	331c      	adds	r3, #28
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	460a      	mov	r2, r1
 800f226:	809a      	strh	r2, [r3, #4]
		wall.column_look[i] = ~wall.column_look[i];
 800f228:	4a8a      	ldr	r2, [pc, #552]	; (800f454 <run_shortest+0x30c>)
 800f22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22c:	332c      	adds	r3, #44	; 0x2c
 800f22e:	005b      	lsls	r3, r3, #1
 800f230:	4413      	add	r3, r2
 800f232:	885b      	ldrh	r3, [r3, #2]
 800f234:	43db      	mvns	r3, r3
 800f236:	b299      	uxth	r1, r3
 800f238:	4a86      	ldr	r2, [pc, #536]	; (800f454 <run_shortest+0x30c>)
 800f23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f23c:	332c      	adds	r3, #44	; 0x2c
 800f23e:	005b      	lsls	r3, r3, #1
 800f240:	4413      	add	r3, r2
 800f242:	460a      	mov	r2, r1
 800f244:	805a      	strh	r2, [r3, #2]
		wall.row[i] = wall.row[i] | wall.row_look[i];
 800f246:	4a83      	ldr	r2, [pc, #524]	; (800f454 <run_shortest+0x30c>)
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800f24e:	4981      	ldr	r1, [pc, #516]	; (800f454 <run_shortest+0x30c>)
 800f250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f252:	331c      	adds	r3, #28
 800f254:	005b      	lsls	r3, r3, #1
 800f256:	440b      	add	r3, r1
 800f258:	889b      	ldrh	r3, [r3, #4]
 800f25a:	4313      	orrs	r3, r2
 800f25c:	b299      	uxth	r1, r3
 800f25e:	4a7d      	ldr	r2, [pc, #500]	; (800f454 <run_shortest+0x30c>)
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[i] = wall.column[i] | wall.column_look[i];
 800f266:	4a7b      	ldr	r2, [pc, #492]	; (800f454 <run_shortest+0x30c>)
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	330c      	adds	r3, #12
 800f26c:	005b      	lsls	r3, r3, #1
 800f26e:	4413      	add	r3, r2
 800f270:	88da      	ldrh	r2, [r3, #6]
 800f272:	4978      	ldr	r1, [pc, #480]	; (800f454 <run_shortest+0x30c>)
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	332c      	adds	r3, #44	; 0x2c
 800f278:	005b      	lsls	r3, r3, #1
 800f27a:	440b      	add	r3, r1
 800f27c:	885b      	ldrh	r3, [r3, #2]
 800f27e:	4313      	orrs	r3, r2
 800f280:	b299      	uxth	r1, r3
 800f282:	4a74      	ldr	r2, [pc, #464]	; (800f454 <run_shortest+0x30c>)
 800f284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f286:	330c      	adds	r3, #12
 800f288:	005b      	lsls	r3, r3, #1
 800f28a:	4413      	add	r3, r2
 800f28c:	460a      	mov	r2, r1
 800f28e:	80da      	strh	r2, [r3, #6]
	for(int i = 0; i <= 14; i++){
 800f290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f292:	3301      	adds	r3, #1
 800f294:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f298:	2b0e      	cmp	r3, #14
 800f29a:	dd87      	ble.n	800f1ac <run_shortest+0x64>
	}
	//pass_maker();
   pass_maker_Dijkstra();
 800f29c:	f7ff fe30 	bl	800ef00 <pass_maker_Dijkstra>

	pass_count = 1;
 800f2a0:	4b6e      	ldr	r3, [pc, #440]	; (800f45c <run_shortest+0x314>)
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	701a      	strb	r2, [r3, #0]
if(pass_mode==1){
 800f2a6:	7afb      	ldrb	r3, [r7, #11]
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	f040 84b5 	bne.w	800fc18 <run_shortest+0xad0>
	while (1) {		//パス圧縮
//		if (mode_safty == 1) {
//
//			break;
//		}
		if (pass[pass_count] == 0) {
 800f2ae:	4b6b      	ldr	r3, [pc, #428]	; (800f45c <run_shortest+0x314>)
 800f2b0:	781b      	ldrb	r3, [r3, #0]
 800f2b2:	461a      	mov	r2, r3
 800f2b4:	4b6a      	ldr	r3, [pc, #424]	; (800f460 <run_shortest+0x318>)
 800f2b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	f000 813a 	beq.w	800f534 <run_shortest+0x3ec>
			break;
		}

		if (pass[pass_count] == -2 && pass[pass_count - 1] >= 1	//右90度大回りの条件
 800f2c0:	4b66      	ldr	r3, [pc, #408]	; (800f45c <run_shortest+0x314>)
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	461a      	mov	r2, r3
 800f2c6:	4b66      	ldr	r3, [pc, #408]	; (800f460 <run_shortest+0x318>)
 800f2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2cc:	f113 0f02 	cmn.w	r3, #2
 800f2d0:	d131      	bne.n	800f336 <run_shortest+0x1ee>
 800f2d2:	4b62      	ldr	r3, [pc, #392]	; (800f45c <run_shortest+0x314>)
 800f2d4:	781b      	ldrb	r3, [r3, #0]
 800f2d6:	3b01      	subs	r3, #1
 800f2d8:	4a61      	ldr	r2, [pc, #388]	; (800f460 <run_shortest+0x318>)
 800f2da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	dd29      	ble.n	800f336 <run_shortest+0x1ee>
		&& pass[pass_count + 1] >= 1) {
 800f2e2:	4b5e      	ldr	r3, [pc, #376]	; (800f45c <run_shortest+0x314>)
 800f2e4:	781b      	ldrb	r3, [r3, #0]
 800f2e6:	3301      	adds	r3, #1
 800f2e8:	4a5d      	ldr	r2, [pc, #372]	; (800f460 <run_shortest+0x318>)
 800f2ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	dd21      	ble.n	800f336 <run_shortest+0x1ee>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f2f2:	4b5a      	ldr	r3, [pc, #360]	; (800f45c <run_shortest+0x314>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	3b01      	subs	r3, #1
 800f2f8:	4a59      	ldr	r2, [pc, #356]	; (800f460 <run_shortest+0x318>)
 800f2fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f2fe:	4b57      	ldr	r3, [pc, #348]	; (800f45c <run_shortest+0x314>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	3b01      	subs	r3, #1
 800f304:	3a01      	subs	r2, #1
 800f306:	4956      	ldr	r1, [pc, #344]	; (800f460 <run_shortest+0x318>)
 800f308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f30c:	4b53      	ldr	r3, [pc, #332]	; (800f45c <run_shortest+0x314>)
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	3301      	adds	r3, #1
 800f312:	4a53      	ldr	r2, [pc, #332]	; (800f460 <run_shortest+0x318>)
 800f314:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f318:	4b50      	ldr	r3, [pc, #320]	; (800f45c <run_shortest+0x314>)
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	3301      	adds	r3, #1
 800f31e:	3a01      	subs	r2, #1
 800f320:	494f      	ldr	r1, [pc, #316]	; (800f460 <run_shortest+0x318>)
 800f322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -4;		//右90度大回り
 800f326:	4b4d      	ldr	r3, [pc, #308]	; (800f45c <run_shortest+0x314>)
 800f328:	781b      	ldrb	r3, [r3, #0]
 800f32a:	4619      	mov	r1, r3
 800f32c:	4b4c      	ldr	r3, [pc, #304]	; (800f460 <run_shortest+0x318>)
 800f32e:	f06f 0203 	mvn.w	r2, #3
 800f332:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count] == -3 && pass[pass_count - 1] >= 1	//左90度大回りの条件
 800f336:	4b49      	ldr	r3, [pc, #292]	; (800f45c <run_shortest+0x314>)
 800f338:	781b      	ldrb	r3, [r3, #0]
 800f33a:	461a      	mov	r2, r3
 800f33c:	4b48      	ldr	r3, [pc, #288]	; (800f460 <run_shortest+0x318>)
 800f33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f342:	f113 0f03 	cmn.w	r3, #3
 800f346:	d131      	bne.n	800f3ac <run_shortest+0x264>
 800f348:	4b44      	ldr	r3, [pc, #272]	; (800f45c <run_shortest+0x314>)
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	3b01      	subs	r3, #1
 800f34e:	4a44      	ldr	r2, [pc, #272]	; (800f460 <run_shortest+0x318>)
 800f350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f354:	2b00      	cmp	r3, #0
 800f356:	dd29      	ble.n	800f3ac <run_shortest+0x264>
		&& pass[pass_count + 1] >= 1) {
 800f358:	4b40      	ldr	r3, [pc, #256]	; (800f45c <run_shortest+0x314>)
 800f35a:	781b      	ldrb	r3, [r3, #0]
 800f35c:	3301      	adds	r3, #1
 800f35e:	4a40      	ldr	r2, [pc, #256]	; (800f460 <run_shortest+0x318>)
 800f360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f364:	2b00      	cmp	r3, #0
 800f366:	dd21      	ble.n	800f3ac <run_shortest+0x264>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;	//前90直進の削除
 800f368:	4b3c      	ldr	r3, [pc, #240]	; (800f45c <run_shortest+0x314>)
 800f36a:	781b      	ldrb	r3, [r3, #0]
 800f36c:	3b01      	subs	r3, #1
 800f36e:	4a3c      	ldr	r2, [pc, #240]	; (800f460 <run_shortest+0x318>)
 800f370:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f374:	4b39      	ldr	r3, [pc, #228]	; (800f45c <run_shortest+0x314>)
 800f376:	781b      	ldrb	r3, [r3, #0]
 800f378:	3b01      	subs	r3, #1
 800f37a:	3a01      	subs	r2, #1
 800f37c:	4938      	ldr	r1, [pc, #224]	; (800f460 <run_shortest+0x318>)
 800f37e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count + 1] = pass[pass_count + 1] - 1;	//後90直進の削除
 800f382:	4b36      	ldr	r3, [pc, #216]	; (800f45c <run_shortest+0x314>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	3301      	adds	r3, #1
 800f388:	4a35      	ldr	r2, [pc, #212]	; (800f460 <run_shortest+0x318>)
 800f38a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f38e:	4b33      	ldr	r3, [pc, #204]	; (800f45c <run_shortest+0x314>)
 800f390:	781b      	ldrb	r3, [r3, #0]
 800f392:	3301      	adds	r3, #1
 800f394:	3a01      	subs	r2, #1
 800f396:	4932      	ldr	r1, [pc, #200]	; (800f460 <run_shortest+0x318>)
 800f398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -5;		//左90度大回り
 800f39c:	4b2f      	ldr	r3, [pc, #188]	; (800f45c <run_shortest+0x314>)
 800f39e:	781b      	ldrb	r3, [r3, #0]
 800f3a0:	4619      	mov	r1, r3
 800f3a2:	4b2f      	ldr	r3, [pc, #188]	; (800f460 <run_shortest+0x318>)
 800f3a4:	f06f 0204 	mvn.w	r2, #4
 800f3a8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -2
 800f3ac:	4b2b      	ldr	r3, [pc, #172]	; (800f45c <run_shortest+0x314>)
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	4a2b      	ldr	r2, [pc, #172]	; (800f460 <run_shortest+0x318>)
 800f3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	dd43      	ble.n	800f444 <run_shortest+0x2fc>
 800f3bc:	4b27      	ldr	r3, [pc, #156]	; (800f45c <run_shortest+0x314>)
 800f3be:	781b      	ldrb	r3, [r3, #0]
 800f3c0:	461a      	mov	r2, r3
 800f3c2:	4b27      	ldr	r3, [pc, #156]	; (800f460 <run_shortest+0x318>)
 800f3c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c8:	f113 0f02 	cmn.w	r3, #2
 800f3cc:	d13a      	bne.n	800f444 <run_shortest+0x2fc>
				&& pass[pass_count + 1] == -2 && pass[pass_count + 2] >= 1) {//右180度大回りの条件
 800f3ce:	4b23      	ldr	r3, [pc, #140]	; (800f45c <run_shortest+0x314>)
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	4a22      	ldr	r2, [pc, #136]	; (800f460 <run_shortest+0x318>)
 800f3d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3da:	f113 0f02 	cmn.w	r3, #2
 800f3de:	d131      	bne.n	800f444 <run_shortest+0x2fc>
 800f3e0:	4b1e      	ldr	r3, [pc, #120]	; (800f45c <run_shortest+0x314>)
 800f3e2:	781b      	ldrb	r3, [r3, #0]
 800f3e4:	3302      	adds	r3, #2
 800f3e6:	4a1e      	ldr	r2, [pc, #120]	; (800f460 <run_shortest+0x318>)
 800f3e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	dd29      	ble.n	800f444 <run_shortest+0x2fc>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f3f0:	4b1a      	ldr	r3, [pc, #104]	; (800f45c <run_shortest+0x314>)
 800f3f2:	781b      	ldrb	r3, [r3, #0]
 800f3f4:	3b01      	subs	r3, #1
 800f3f6:	4a1a      	ldr	r2, [pc, #104]	; (800f460 <run_shortest+0x318>)
 800f3f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f3fc:	4b17      	ldr	r3, [pc, #92]	; (800f45c <run_shortest+0x314>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	3b01      	subs	r3, #1
 800f402:	3a01      	subs	r2, #1
 800f404:	4916      	ldr	r1, [pc, #88]	; (800f460 <run_shortest+0x318>)
 800f406:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -6;
 800f40a:	4b14      	ldr	r3, [pc, #80]	; (800f45c <run_shortest+0x314>)
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	4619      	mov	r1, r3
 800f410:	4b13      	ldr	r3, [pc, #76]	; (800f460 <run_shortest+0x318>)
 800f412:	f06f 0205 	mvn.w	r2, #5
 800f416:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f41a:	4b10      	ldr	r3, [pc, #64]	; (800f45c <run_shortest+0x314>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	3301      	adds	r3, #1
 800f420:	4a0f      	ldr	r2, [pc, #60]	; (800f460 <run_shortest+0x318>)
 800f422:	f04f 31ff 	mov.w	r1, #4294967295
 800f426:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f42a:	4b0c      	ldr	r3, [pc, #48]	; (800f45c <run_shortest+0x314>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	3302      	adds	r3, #2
 800f430:	4a0b      	ldr	r2, [pc, #44]	; (800f460 <run_shortest+0x318>)
 800f432:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f436:	4b09      	ldr	r3, [pc, #36]	; (800f45c <run_shortest+0x314>)
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	3302      	adds	r3, #2
 800f43c:	3a01      	subs	r2, #1
 800f43e:	4908      	ldr	r1, [pc, #32]	; (800f460 <run_shortest+0x318>)
 800f440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		}
		if (pass[pass_count - 1] >= 1 && pass[pass_count] == -3
 800f444:	4b05      	ldr	r3, [pc, #20]	; (800f45c <run_shortest+0x314>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	3b01      	subs	r3, #1
 800f44a:	4a05      	ldr	r2, [pc, #20]	; (800f460 <run_shortest+0x318>)
 800f44c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f450:	2b00      	cmp	r3, #0
 800f452:	e007      	b.n	800f464 <run_shortest+0x31c>
 800f454:	20000c3c 	.word	0x20000c3c
 800f458:	20000cb4 	.word	0x20000cb4
 800f45c:	20000828 	.word	0x20000828
 800f460:	2000083c 	.word	0x2000083c
 800f464:	dd43      	ble.n	800f4ee <run_shortest+0x3a6>
 800f466:	4b31      	ldr	r3, [pc, #196]	; (800f52c <run_shortest+0x3e4>)
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	461a      	mov	r2, r3
 800f46c:	4b30      	ldr	r3, [pc, #192]	; (800f530 <run_shortest+0x3e8>)
 800f46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f472:	f113 0f03 	cmn.w	r3, #3
 800f476:	d13a      	bne.n	800f4ee <run_shortest+0x3a6>
				&& pass[pass_count + 1] == -3 && pass[pass_count + 2] >= 1) {//左180度大回りの条件
 800f478:	4b2c      	ldr	r3, [pc, #176]	; (800f52c <run_shortest+0x3e4>)
 800f47a:	781b      	ldrb	r3, [r3, #0]
 800f47c:	3301      	adds	r3, #1
 800f47e:	4a2c      	ldr	r2, [pc, #176]	; (800f530 <run_shortest+0x3e8>)
 800f480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f484:	f113 0f03 	cmn.w	r3, #3
 800f488:	d131      	bne.n	800f4ee <run_shortest+0x3a6>
 800f48a:	4b28      	ldr	r3, [pc, #160]	; (800f52c <run_shortest+0x3e4>)
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	3302      	adds	r3, #2
 800f490:	4a27      	ldr	r2, [pc, #156]	; (800f530 <run_shortest+0x3e8>)
 800f492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f496:	2b00      	cmp	r3, #0
 800f498:	dd29      	ble.n	800f4ee <run_shortest+0x3a6>
			pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f49a:	4b24      	ldr	r3, [pc, #144]	; (800f52c <run_shortest+0x3e4>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	4a23      	ldr	r2, [pc, #140]	; (800f530 <run_shortest+0x3e8>)
 800f4a2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4a6:	4b21      	ldr	r3, [pc, #132]	; (800f52c <run_shortest+0x3e4>)
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	3b01      	subs	r3, #1
 800f4ac:	3a01      	subs	r2, #1
 800f4ae:	4920      	ldr	r1, [pc, #128]	; (800f530 <run_shortest+0x3e8>)
 800f4b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			pass[pass_count] = -7;
 800f4b4:	4b1d      	ldr	r3, [pc, #116]	; (800f52c <run_shortest+0x3e4>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	4619      	mov	r1, r3
 800f4ba:	4b1d      	ldr	r3, [pc, #116]	; (800f530 <run_shortest+0x3e8>)
 800f4bc:	f06f 0206 	mvn.w	r2, #6
 800f4c0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			pass[pass_count + 1] = -1;
 800f4c4:	4b19      	ldr	r3, [pc, #100]	; (800f52c <run_shortest+0x3e4>)
 800f4c6:	781b      	ldrb	r3, [r3, #0]
 800f4c8:	3301      	adds	r3, #1
 800f4ca:	4a19      	ldr	r2, [pc, #100]	; (800f530 <run_shortest+0x3e8>)
 800f4cc:	f04f 31ff 	mov.w	r1, #4294967295
 800f4d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			pass[pass_count + 2] = pass[pass_count + 2] - 1;
 800f4d4:	4b15      	ldr	r3, [pc, #84]	; (800f52c <run_shortest+0x3e4>)
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	3302      	adds	r3, #2
 800f4da:	4a15      	ldr	r2, [pc, #84]	; (800f530 <run_shortest+0x3e8>)
 800f4dc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f4e0:	4b12      	ldr	r3, [pc, #72]	; (800f52c <run_shortest+0x3e4>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	3302      	adds	r3, #2
 800f4e6:	3a01      	subs	r2, #1
 800f4e8:	4911      	ldr	r1, [pc, #68]	; (800f530 <run_shortest+0x3e8>)
 800f4ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if (pass[pass_count] == -2 && pass[pass_count - 1] == -3	//左90度大回りの条件
 800f4ee:	4b0f      	ldr	r3, [pc, #60]	; (800f52c <run_shortest+0x3e4>)
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4b0e      	ldr	r3, [pc, #56]	; (800f530 <run_shortest+0x3e8>)
 800f4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4fa:	f113 0f02 	cmn.w	r3, #2

				) {
		}
//		if(){}
		if (pass[pass_count - 1] == 0) {
 800f4fe:	4b0b      	ldr	r3, [pc, #44]	; (800f52c <run_shortest+0x3e4>)
 800f500:	781b      	ldrb	r3, [r3, #0]
 800f502:	3b01      	subs	r3, #1
 800f504:	4a0a      	ldr	r2, [pc, #40]	; (800f530 <run_shortest+0x3e8>)
 800f506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d107      	bne.n	800f51e <run_shortest+0x3d6>
			pass[pass_count - 1] = -1;		//passが0になってしまったときの対策
 800f50e:	4b07      	ldr	r3, [pc, #28]	; (800f52c <run_shortest+0x3e4>)
 800f510:	781b      	ldrb	r3, [r3, #0]
 800f512:	3b01      	subs	r3, #1
 800f514:	4a06      	ldr	r2, [pc, #24]	; (800f530 <run_shortest+0x3e8>)
 800f516:	f04f 31ff 	mov.w	r1, #4294967295
 800f51a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		pass_count++;
 800f51e:	4b03      	ldr	r3, [pc, #12]	; (800f52c <run_shortest+0x3e4>)
 800f520:	781b      	ldrb	r3, [r3, #0]
 800f522:	3301      	adds	r3, #1
 800f524:	b2da      	uxtb	r2, r3
 800f526:	4b01      	ldr	r3, [pc, #4]	; (800f52c <run_shortest+0x3e4>)
 800f528:	701a      	strb	r2, [r3, #0]
		if (pass[pass_count] == 0) {
 800f52a:	e6c0      	b.n	800f2ae <run_shortest+0x166>
 800f52c:	20000828 	.word	0x20000828
 800f530:	2000083c 	.word	0x2000083c
			break;
 800f534:	bf00      	nop
	}

	pass_count = 1;
 800f536:	4b8c      	ldr	r3, [pc, #560]	; (800f768 <run_shortest+0x620>)
 800f538:	2201      	movs	r2, #1
 800f53a:	701a      	strb	r2, [r3, #0]
	if (slant_mode == 1) {
 800f53c:	7a7b      	ldrb	r3, [r7, #9]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	f040 836a 	bne.w	800fc18 <run_shortest+0xad0>
		while (1) {		//斜め入出の圧縮
			if (pass[pass_count] == 0) {
 800f544:	4b88      	ldr	r3, [pc, #544]	; (800f768 <run_shortest+0x620>)
 800f546:	781b      	ldrb	r3, [r3, #0]
 800f548:	461a      	mov	r2, r3
 800f54a:	4b88      	ldr	r3, [pc, #544]	; (800f76c <run_shortest+0x624>)
 800f54c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f550:	2b00      	cmp	r3, #0
 800f552:	f000 81f1 	beq.w	800f938 <run_shortest+0x7f0>
				break;
			}

			if (pass[pass_count - 1] >= 1) {
 800f556:	4b84      	ldr	r3, [pc, #528]	; (800f768 <run_shortest+0x620>)
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	3b01      	subs	r3, #1
 800f55c:	4a83      	ldr	r2, [pc, #524]	; (800f76c <run_shortest+0x624>)
 800f55e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f562:	2b00      	cmp	r3, #0
 800f564:	f340 81dc 	ble.w	800f920 <run_shortest+0x7d8>
				if (pass[pass_count] == -2 || pass[pass_count] == -3) {
 800f568:	4b7f      	ldr	r3, [pc, #508]	; (800f768 <run_shortest+0x620>)
 800f56a:	781b      	ldrb	r3, [r3, #0]
 800f56c:	461a      	mov	r2, r3
 800f56e:	4b7f      	ldr	r3, [pc, #508]	; (800f76c <run_shortest+0x624>)
 800f570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f574:	f113 0f02 	cmn.w	r3, #2
 800f578:	d009      	beq.n	800f58e <run_shortest+0x446>
 800f57a:	4b7b      	ldr	r3, [pc, #492]	; (800f768 <run_shortest+0x620>)
 800f57c:	781b      	ldrb	r3, [r3, #0]
 800f57e:	461a      	mov	r2, r3
 800f580:	4b7a      	ldr	r3, [pc, #488]	; (800f76c <run_shortest+0x624>)
 800f582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f586:	f113 0f03 	cmn.w	r3, #3
 800f58a:	f040 81c9 	bne.w	800f920 <run_shortest+0x7d8>
//***************************************************************************************入りのモーションstart
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -3) {
 800f58e:	4b76      	ldr	r3, [pc, #472]	; (800f768 <run_shortest+0x620>)
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	461a      	mov	r2, r3
 800f594:	4b75      	ldr	r3, [pc, #468]	; (800f76c <run_shortest+0x624>)
 800f596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f59a:	f113 0f02 	cmn.w	r3, #2
 800f59e:	d12d      	bne.n	800f5fc <run_shortest+0x4b4>
 800f5a0:	4b71      	ldr	r3, [pc, #452]	; (800f768 <run_shortest+0x620>)
 800f5a2:	781b      	ldrb	r3, [r3, #0]
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	4a71      	ldr	r2, [pc, #452]	; (800f76c <run_shortest+0x624>)
 800f5a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5ac:	f113 0f03 	cmn.w	r3, #3
 800f5b0:	d124      	bne.n	800f5fc <run_shortest+0x4b4>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f5b2:	4b6d      	ldr	r3, [pc, #436]	; (800f768 <run_shortest+0x620>)
 800f5b4:	781b      	ldrb	r3, [r3, #0]
 800f5b6:	3b01      	subs	r3, #1
 800f5b8:	4a6c      	ldr	r2, [pc, #432]	; (800f76c <run_shortest+0x624>)
 800f5ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f5be:	4b6a      	ldr	r3, [pc, #424]	; (800f768 <run_shortest+0x620>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	3a01      	subs	r2, #1
 800f5c6:	4969      	ldr	r1, [pc, #420]	; (800f76c <run_shortest+0x624>)
 800f5c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f5cc:	4b66      	ldr	r3, [pc, #408]	; (800f768 <run_shortest+0x620>)
 800f5ce:	781b      	ldrb	r3, [r3, #0]
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	4a66      	ldr	r2, [pc, #408]	; (800f76c <run_shortest+0x624>)
 800f5d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d107      	bne.n	800f5ec <run_shortest+0x4a4>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f5dc:	4b62      	ldr	r3, [pc, #392]	; (800f768 <run_shortest+0x620>)
 800f5de:	781b      	ldrb	r3, [r3, #0]
 800f5e0:	3b01      	subs	r3, #1
 800f5e2:	4a62      	ldr	r2, [pc, #392]	; (800f76c <run_shortest+0x624>)
 800f5e4:	f04f 31ff 	mov.w	r1, #4294967295
 800f5e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -8;		//右45
 800f5ec:	4b5e      	ldr	r3, [pc, #376]	; (800f768 <run_shortest+0x620>)
 800f5ee:	781b      	ldrb	r3, [r3, #0]
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4b5e      	ldr	r3, [pc, #376]	; (800f76c <run_shortest+0x624>)
 800f5f4:	f06f 0207 	mvn.w	r2, #7
 800f5f8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -2) {
 800f5fc:	4b5a      	ldr	r3, [pc, #360]	; (800f768 <run_shortest+0x620>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	461a      	mov	r2, r3
 800f602:	4b5a      	ldr	r3, [pc, #360]	; (800f76c <run_shortest+0x624>)
 800f604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f608:	f113 0f03 	cmn.w	r3, #3
 800f60c:	d12d      	bne.n	800f66a <run_shortest+0x522>
 800f60e:	4b56      	ldr	r3, [pc, #344]	; (800f768 <run_shortest+0x620>)
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	3301      	adds	r3, #1
 800f614:	4a55      	ldr	r2, [pc, #340]	; (800f76c <run_shortest+0x624>)
 800f616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f61a:	f113 0f02 	cmn.w	r3, #2
 800f61e:	d124      	bne.n	800f66a <run_shortest+0x522>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f620:	4b51      	ldr	r3, [pc, #324]	; (800f768 <run_shortest+0x620>)
 800f622:	781b      	ldrb	r3, [r3, #0]
 800f624:	3b01      	subs	r3, #1
 800f626:	4a51      	ldr	r2, [pc, #324]	; (800f76c <run_shortest+0x624>)
 800f628:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f62c:	4b4e      	ldr	r3, [pc, #312]	; (800f768 <run_shortest+0x620>)
 800f62e:	781b      	ldrb	r3, [r3, #0]
 800f630:	3b01      	subs	r3, #1
 800f632:	3a01      	subs	r2, #1
 800f634:	494d      	ldr	r1, [pc, #308]	; (800f76c <run_shortest+0x624>)
 800f636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f63a:	4b4b      	ldr	r3, [pc, #300]	; (800f768 <run_shortest+0x620>)
 800f63c:	781b      	ldrb	r3, [r3, #0]
 800f63e:	3b01      	subs	r3, #1
 800f640:	4a4a      	ldr	r2, [pc, #296]	; (800f76c <run_shortest+0x624>)
 800f642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d107      	bne.n	800f65a <run_shortest+0x512>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f64a:	4b47      	ldr	r3, [pc, #284]	; (800f768 <run_shortest+0x620>)
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	3b01      	subs	r3, #1
 800f650:	4a46      	ldr	r2, [pc, #280]	; (800f76c <run_shortest+0x624>)
 800f652:	f04f 31ff 	mov.w	r1, #4294967295
 800f656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -9;		//左45
 800f65a:	4b43      	ldr	r3, [pc, #268]	; (800f768 <run_shortest+0x620>)
 800f65c:	781b      	ldrb	r3, [r3, #0]
 800f65e:	4619      	mov	r1, r3
 800f660:	4b42      	ldr	r3, [pc, #264]	; (800f76c <run_shortest+0x624>)
 800f662:	f06f 0208 	mvn.w	r2, #8
 800f666:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
					}
					if (pass[pass_count] == -2 && pass[pass_count + 1] == -2) {
 800f66a:	4b3f      	ldr	r3, [pc, #252]	; (800f768 <run_shortest+0x620>)
 800f66c:	781b      	ldrb	r3, [r3, #0]
 800f66e:	461a      	mov	r2, r3
 800f670:	4b3e      	ldr	r3, [pc, #248]	; (800f76c <run_shortest+0x624>)
 800f672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f676:	f113 0f02 	cmn.w	r3, #2
 800f67a:	d135      	bne.n	800f6e8 <run_shortest+0x5a0>
 800f67c:	4b3a      	ldr	r3, [pc, #232]	; (800f768 <run_shortest+0x620>)
 800f67e:	781b      	ldrb	r3, [r3, #0]
 800f680:	3301      	adds	r3, #1
 800f682:	4a3a      	ldr	r2, [pc, #232]	; (800f76c <run_shortest+0x624>)
 800f684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f688:	f113 0f02 	cmn.w	r3, #2
 800f68c:	d12c      	bne.n	800f6e8 <run_shortest+0x5a0>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f68e:	4b36      	ldr	r3, [pc, #216]	; (800f768 <run_shortest+0x620>)
 800f690:	781b      	ldrb	r3, [r3, #0]
 800f692:	3b01      	subs	r3, #1
 800f694:	4a35      	ldr	r2, [pc, #212]	; (800f76c <run_shortest+0x624>)
 800f696:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f69a:	4b33      	ldr	r3, [pc, #204]	; (800f768 <run_shortest+0x620>)
 800f69c:	781b      	ldrb	r3, [r3, #0]
 800f69e:	3b01      	subs	r3, #1
 800f6a0:	3a01      	subs	r2, #1
 800f6a2:	4932      	ldr	r1, [pc, #200]	; (800f76c <run_shortest+0x624>)
 800f6a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f6a8:	4b2f      	ldr	r3, [pc, #188]	; (800f768 <run_shortest+0x620>)
 800f6aa:	781b      	ldrb	r3, [r3, #0]
 800f6ac:	3b01      	subs	r3, #1
 800f6ae:	4a2f      	ldr	r2, [pc, #188]	; (800f76c <run_shortest+0x624>)
 800f6b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d107      	bne.n	800f6c8 <run_shortest+0x580>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f6b8:	4b2b      	ldr	r3, [pc, #172]	; (800f768 <run_shortest+0x620>)
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	4a2b      	ldr	r2, [pc, #172]	; (800f76c <run_shortest+0x624>)
 800f6c0:	f04f 31ff 	mov.w	r1, #4294967295
 800f6c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -10;		//右135
 800f6c8:	4b27      	ldr	r3, [pc, #156]	; (800f768 <run_shortest+0x620>)
 800f6ca:	781b      	ldrb	r3, [r3, #0]
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	4b27      	ldr	r3, [pc, #156]	; (800f76c <run_shortest+0x624>)
 800f6d0:	f06f 0209 	mvn.w	r2, #9
 800f6d4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f6d8:	4b23      	ldr	r3, [pc, #140]	; (800f768 <run_shortest+0x620>)
 800f6da:	781b      	ldrb	r3, [r3, #0]
 800f6dc:	3301      	adds	r3, #1
 800f6de:	4a23      	ldr	r2, [pc, #140]	; (800f76c <run_shortest+0x624>)
 800f6e0:	f04f 31ff 	mov.w	r1, #4294967295
 800f6e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (pass[pass_count] == -3 && pass[pass_count + 1] == -3) {
 800f6e8:	4b1f      	ldr	r3, [pc, #124]	; (800f768 <run_shortest+0x620>)
 800f6ea:	781b      	ldrb	r3, [r3, #0]
 800f6ec:	461a      	mov	r2, r3
 800f6ee:	4b1f      	ldr	r3, [pc, #124]	; (800f76c <run_shortest+0x624>)
 800f6f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6f4:	f113 0f03 	cmn.w	r3, #3
 800f6f8:	d140      	bne.n	800f77c <run_shortest+0x634>
 800f6fa:	4b1b      	ldr	r3, [pc, #108]	; (800f768 <run_shortest+0x620>)
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	3301      	adds	r3, #1
 800f700:	4a1a      	ldr	r2, [pc, #104]	; (800f76c <run_shortest+0x624>)
 800f702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f706:	f113 0f03 	cmn.w	r3, #3
 800f70a:	d137      	bne.n	800f77c <run_shortest+0x634>
						pass[pass_count - 1] = pass[pass_count - 1] - 1;
 800f70c:	4b16      	ldr	r3, [pc, #88]	; (800f768 <run_shortest+0x620>)
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	3b01      	subs	r3, #1
 800f712:	4a16      	ldr	r2, [pc, #88]	; (800f76c <run_shortest+0x624>)
 800f714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f718:	4b13      	ldr	r3, [pc, #76]	; (800f768 <run_shortest+0x620>)
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	3a01      	subs	r2, #1
 800f720:	4912      	ldr	r1, [pc, #72]	; (800f76c <run_shortest+0x624>)
 800f722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (pass[pass_count - 1] == 0) {
 800f726:	4b10      	ldr	r3, [pc, #64]	; (800f768 <run_shortest+0x620>)
 800f728:	781b      	ldrb	r3, [r3, #0]
 800f72a:	3b01      	subs	r3, #1
 800f72c:	4a0f      	ldr	r2, [pc, #60]	; (800f76c <run_shortest+0x624>)
 800f72e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d107      	bne.n	800f746 <run_shortest+0x5fe>
							pass[pass_count - 1] = -1;	//passが0になってしまったときの対策
 800f736:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <run_shortest+0x620>)
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	3b01      	subs	r3, #1
 800f73c:	4a0b      	ldr	r2, [pc, #44]	; (800f76c <run_shortest+0x624>)
 800f73e:	f04f 31ff 	mov.w	r1, #4294967295
 800f742:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[pass_count] = -11;		//左135
 800f746:	4b08      	ldr	r3, [pc, #32]	; (800f768 <run_shortest+0x620>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	4619      	mov	r1, r3
 800f74c:	4b07      	ldr	r3, [pc, #28]	; (800f76c <run_shortest+0x624>)
 800f74e:	f06f 020a 	mvn.w	r2, #10
 800f752:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						pass[pass_count + 1] = -1;
 800f756:	4b04      	ldr	r3, [pc, #16]	; (800f768 <run_shortest+0x620>)
 800f758:	781b      	ldrb	r3, [r3, #0]
 800f75a:	3301      	adds	r3, #1
 800f75c:	4a03      	ldr	r2, [pc, #12]	; (800f76c <run_shortest+0x624>)
 800f75e:	f04f 31ff 	mov.w	r1, #4294967295
 800f762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
//***************************************************************************************入りのモーションend

//***************************************************************************************途中のモーションstart
					while (pass[pass_count] <= -1) {
 800f766:	e009      	b.n	800f77c <run_shortest+0x634>
 800f768:	20000828 	.word	0x20000828
 800f76c:	2000083c 	.word	0x2000083c
						pass_count++;
 800f770:	4b6f      	ldr	r3, [pc, #444]	; (800f930 <run_shortest+0x7e8>)
 800f772:	781b      	ldrb	r3, [r3, #0]
 800f774:	3301      	adds	r3, #1
 800f776:	b2da      	uxtb	r2, r3
 800f778:	4b6d      	ldr	r3, [pc, #436]	; (800f930 <run_shortest+0x7e8>)
 800f77a:	701a      	strb	r2, [r3, #0]
					while (pass[pass_count] <= -1) {
 800f77c:	4b6c      	ldr	r3, [pc, #432]	; (800f930 <run_shortest+0x7e8>)
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	461a      	mov	r2, r3
 800f782:	4b6c      	ldr	r3, [pc, #432]	; (800f934 <run_shortest+0x7ec>)
 800f784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	dbf1      	blt.n	800f770 <run_shortest+0x628>
					}
//***************************************************************************************途中のモーションend

//***************************************************************************************出のモーションstart
					if (pass[pass_count - 1] == -2) {
 800f78c:	4b68      	ldr	r3, [pc, #416]	; (800f930 <run_shortest+0x7e8>)
 800f78e:	781b      	ldrb	r3, [r3, #0]
 800f790:	3b01      	subs	r3, #1
 800f792:	4a68      	ldr	r2, [pc, #416]	; (800f934 <run_shortest+0x7ec>)
 800f794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f798:	f113 0f02 	cmn.w	r3, #2
 800f79c:	d15b      	bne.n	800f856 <run_shortest+0x70e>
						if (pass[pass_count - 2] == -2) {
 800f79e:	4b64      	ldr	r3, [pc, #400]	; (800f930 <run_shortest+0x7e8>)
 800f7a0:	781b      	ldrb	r3, [r3, #0]
 800f7a2:	3b02      	subs	r3, #2
 800f7a4:	4a63      	ldr	r2, [pc, #396]	; (800f934 <run_shortest+0x7ec>)
 800f7a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7aa:	f113 0f02 	cmn.w	r3, #2
 800f7ae:	d12d      	bne.n	800f80c <run_shortest+0x6c4>
							pass[pass_count] = pass[pass_count] - 1;
 800f7b0:	4b5f      	ldr	r3, [pc, #380]	; (800f930 <run_shortest+0x7e8>)
 800f7b2:	781b      	ldrb	r3, [r3, #0]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	4b5f      	ldr	r3, [pc, #380]	; (800f934 <run_shortest+0x7ec>)
 800f7b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7bc:	4a5c      	ldr	r2, [pc, #368]	; (800f930 <run_shortest+0x7e8>)
 800f7be:	7812      	ldrb	r2, [r2, #0]
 800f7c0:	4611      	mov	r1, r2
 800f7c2:	3b01      	subs	r3, #1
 800f7c4:	4a5b      	ldr	r2, [pc, #364]	; (800f934 <run_shortest+0x7ec>)
 800f7c6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f7ca:	4b59      	ldr	r3, [pc, #356]	; (800f930 <run_shortest+0x7e8>)
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	4b58      	ldr	r3, [pc, #352]	; (800f934 <run_shortest+0x7ec>)
 800f7d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d107      	bne.n	800f7ea <run_shortest+0x6a2>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f7da:	4b55      	ldr	r3, [pc, #340]	; (800f930 <run_shortest+0x7e8>)
 800f7dc:	781b      	ldrb	r3, [r3, #0]
 800f7de:	4619      	mov	r1, r3
 800f7e0:	4b54      	ldr	r3, [pc, #336]	; (800f934 <run_shortest+0x7ec>)
 800f7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f7e6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -14;		//右135
 800f7ea:	4b51      	ldr	r3, [pc, #324]	; (800f930 <run_shortest+0x7e8>)
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	3b01      	subs	r3, #1
 800f7f0:	4a50      	ldr	r2, [pc, #320]	; (800f934 <run_shortest+0x7ec>)
 800f7f2:	f06f 010d 	mvn.w	r1, #13
 800f7f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f7fa:	4b4d      	ldr	r3, [pc, #308]	; (800f930 <run_shortest+0x7e8>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	3b02      	subs	r3, #2
 800f800:	4a4c      	ldr	r2, [pc, #304]	; (800f934 <run_shortest+0x7ec>)
 800f802:	f04f 31ff 	mov.w	r1, #4294967295
 800f806:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f80a:	e024      	b.n	800f856 <run_shortest+0x70e>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f80c:	4b48      	ldr	r3, [pc, #288]	; (800f930 <run_shortest+0x7e8>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	461a      	mov	r2, r3
 800f812:	4b48      	ldr	r3, [pc, #288]	; (800f934 <run_shortest+0x7ec>)
 800f814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f818:	4a45      	ldr	r2, [pc, #276]	; (800f930 <run_shortest+0x7e8>)
 800f81a:	7812      	ldrb	r2, [r2, #0]
 800f81c:	4611      	mov	r1, r2
 800f81e:	3b01      	subs	r3, #1
 800f820:	4a44      	ldr	r2, [pc, #272]	; (800f934 <run_shortest+0x7ec>)
 800f822:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f826:	4b42      	ldr	r3, [pc, #264]	; (800f930 <run_shortest+0x7e8>)
 800f828:	781b      	ldrb	r3, [r3, #0]
 800f82a:	461a      	mov	r2, r3
 800f82c:	4b41      	ldr	r3, [pc, #260]	; (800f934 <run_shortest+0x7ec>)
 800f82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d107      	bne.n	800f846 <run_shortest+0x6fe>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f836:	4b3e      	ldr	r3, [pc, #248]	; (800f930 <run_shortest+0x7e8>)
 800f838:	781b      	ldrb	r3, [r3, #0]
 800f83a:	4619      	mov	r1, r3
 800f83c:	4b3d      	ldr	r3, [pc, #244]	; (800f934 <run_shortest+0x7ec>)
 800f83e:	f04f 32ff 	mov.w	r2, #4294967295
 800f842:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -12;		//右45
 800f846:	4b3a      	ldr	r3, [pc, #232]	; (800f930 <run_shortest+0x7e8>)
 800f848:	781b      	ldrb	r3, [r3, #0]
 800f84a:	3b01      	subs	r3, #1
 800f84c:	4a39      	ldr	r2, [pc, #228]	; (800f934 <run_shortest+0x7ec>)
 800f84e:	f06f 010b 	mvn.w	r1, #11
 800f852:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}

					}
					if (pass[pass_count - 1] == -3) {
 800f856:	4b36      	ldr	r3, [pc, #216]	; (800f930 <run_shortest+0x7e8>)
 800f858:	781b      	ldrb	r3, [r3, #0]
 800f85a:	3b01      	subs	r3, #1
 800f85c:	4a35      	ldr	r2, [pc, #212]	; (800f934 <run_shortest+0x7ec>)
 800f85e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f862:	f113 0f03 	cmn.w	r3, #3
 800f866:	d15b      	bne.n	800f920 <run_shortest+0x7d8>
						if (pass[pass_count - 2] == -3) {
 800f868:	4b31      	ldr	r3, [pc, #196]	; (800f930 <run_shortest+0x7e8>)
 800f86a:	781b      	ldrb	r3, [r3, #0]
 800f86c:	3b02      	subs	r3, #2
 800f86e:	4a31      	ldr	r2, [pc, #196]	; (800f934 <run_shortest+0x7ec>)
 800f870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f874:	f113 0f03 	cmn.w	r3, #3
 800f878:	d12d      	bne.n	800f8d6 <run_shortest+0x78e>
							pass[pass_count] = pass[pass_count] - 1;
 800f87a:	4b2d      	ldr	r3, [pc, #180]	; (800f930 <run_shortest+0x7e8>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	4b2c      	ldr	r3, [pc, #176]	; (800f934 <run_shortest+0x7ec>)
 800f882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f886:	4a2a      	ldr	r2, [pc, #168]	; (800f930 <run_shortest+0x7e8>)
 800f888:	7812      	ldrb	r2, [r2, #0]
 800f88a:	4611      	mov	r1, r2
 800f88c:	3b01      	subs	r3, #1
 800f88e:	4a29      	ldr	r2, [pc, #164]	; (800f934 <run_shortest+0x7ec>)
 800f890:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f894:	4b26      	ldr	r3, [pc, #152]	; (800f930 <run_shortest+0x7e8>)
 800f896:	781b      	ldrb	r3, [r3, #0]
 800f898:	461a      	mov	r2, r3
 800f89a:	4b26      	ldr	r3, [pc, #152]	; (800f934 <run_shortest+0x7ec>)
 800f89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d107      	bne.n	800f8b4 <run_shortest+0x76c>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f8a4:	4b22      	ldr	r3, [pc, #136]	; (800f930 <run_shortest+0x7e8>)
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	4b22      	ldr	r3, [pc, #136]	; (800f934 <run_shortest+0x7ec>)
 800f8ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f8b0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -15;		//左135
 800f8b4:	4b1e      	ldr	r3, [pc, #120]	; (800f930 <run_shortest+0x7e8>)
 800f8b6:	781b      	ldrb	r3, [r3, #0]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	4a1e      	ldr	r2, [pc, #120]	; (800f934 <run_shortest+0x7ec>)
 800f8bc:	f06f 010e 	mvn.w	r1, #14
 800f8c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
							pass[pass_count - 2] = -1;
 800f8c4:	4b1a      	ldr	r3, [pc, #104]	; (800f930 <run_shortest+0x7e8>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	3b02      	subs	r3, #2
 800f8ca:	4a1a      	ldr	r2, [pc, #104]	; (800f934 <run_shortest+0x7ec>)
 800f8cc:	f04f 31ff 	mov.w	r1, #4294967295
 800f8d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800f8d4:	e024      	b.n	800f920 <run_shortest+0x7d8>
						} else {
							pass[pass_count] = pass[pass_count] - 1;
 800f8d6:	4b16      	ldr	r3, [pc, #88]	; (800f930 <run_shortest+0x7e8>)
 800f8d8:	781b      	ldrb	r3, [r3, #0]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	4b15      	ldr	r3, [pc, #84]	; (800f934 <run_shortest+0x7ec>)
 800f8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8e2:	4a13      	ldr	r2, [pc, #76]	; (800f930 <run_shortest+0x7e8>)
 800f8e4:	7812      	ldrb	r2, [r2, #0]
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	3b01      	subs	r3, #1
 800f8ea:	4a12      	ldr	r2, [pc, #72]	; (800f934 <run_shortest+0x7ec>)
 800f8ec:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
							if (pass[pass_count] == 0) {
 800f8f0:	4b0f      	ldr	r3, [pc, #60]	; (800f930 <run_shortest+0x7e8>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <run_shortest+0x7ec>)
 800f8f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d107      	bne.n	800f910 <run_shortest+0x7c8>
								pass[pass_count] = -1;	//passが0になってしまったときの対策
 800f900:	4b0b      	ldr	r3, [pc, #44]	; (800f930 <run_shortest+0x7e8>)
 800f902:	781b      	ldrb	r3, [r3, #0]
 800f904:	4619      	mov	r1, r3
 800f906:	4b0b      	ldr	r3, [pc, #44]	; (800f934 <run_shortest+0x7ec>)
 800f908:	f04f 32ff 	mov.w	r2, #4294967295
 800f90c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
							}
							pass[pass_count - 1] = -13;		//左45
 800f910:	4b07      	ldr	r3, [pc, #28]	; (800f930 <run_shortest+0x7e8>)
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	3b01      	subs	r3, #1
 800f916:	4a07      	ldr	r2, [pc, #28]	; (800f934 <run_shortest+0x7ec>)
 800f918:	f06f 010c 	mvn.w	r1, #12
 800f91c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//***************************************************************************************出のモーションend
				}
			}
			//		if(){}

			pass_count++;
 800f920:	4b03      	ldr	r3, [pc, #12]	; (800f930 <run_shortest+0x7e8>)
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	3301      	adds	r3, #1
 800f926:	b2da      	uxtb	r2, r3
 800f928:	4b01      	ldr	r3, [pc, #4]	; (800f930 <run_shortest+0x7e8>)
 800f92a:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800f92c:	e60a      	b.n	800f544 <run_shortest+0x3fc>
 800f92e:	bf00      	nop
 800f930:	20000828 	.word	0x20000828
 800f934:	2000083c 	.word	0x2000083c
				break;
 800f938:	bf00      	nop
		}

		pass_count = 1;
 800f93a:	4ba3      	ldr	r3, [pc, #652]	; (800fbc8 <run_shortest+0xa80>)
 800f93c:	2201      	movs	r2, #1
 800f93e:	701a      	strb	r2, [r3, #0]
		while (1) {		//斜の圧縮
			if (pass[pass_count] == 0) {
 800f940:	4ba1      	ldr	r3, [pc, #644]	; (800fbc8 <run_shortest+0xa80>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	461a      	mov	r2, r3
 800f946:	4ba1      	ldr	r3, [pc, #644]	; (800fbcc <run_shortest+0xa84>)
 800f948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	f000 813f 	beq.w	800fbd0 <run_shortest+0xa88>
				break;
			}

			if (pass[pass_count] == -8 || pass[pass_count] == -9
 800f952:	4b9d      	ldr	r3, [pc, #628]	; (800fbc8 <run_shortest+0xa80>)
 800f954:	781b      	ldrb	r3, [r3, #0]
 800f956:	461a      	mov	r2, r3
 800f958:	4b9c      	ldr	r3, [pc, #624]	; (800fbcc <run_shortest+0xa84>)
 800f95a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f95e:	f113 0f08 	cmn.w	r3, #8
 800f962:	d01b      	beq.n	800f99c <run_shortest+0x854>
 800f964:	4b98      	ldr	r3, [pc, #608]	; (800fbc8 <run_shortest+0xa80>)
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	461a      	mov	r2, r3
 800f96a:	4b98      	ldr	r3, [pc, #608]	; (800fbcc <run_shortest+0xa84>)
 800f96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f970:	f113 0f09 	cmn.w	r3, #9
 800f974:	d012      	beq.n	800f99c <run_shortest+0x854>
					|| pass[pass_count] == -10 || pass[pass_count] == -11) {
 800f976:	4b94      	ldr	r3, [pc, #592]	; (800fbc8 <run_shortest+0xa80>)
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	461a      	mov	r2, r3
 800f97c:	4b93      	ldr	r3, [pc, #588]	; (800fbcc <run_shortest+0xa84>)
 800f97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f982:	f113 0f0a 	cmn.w	r3, #10
 800f986:	d009      	beq.n	800f99c <run_shortest+0x854>
 800f988:	4b8f      	ldr	r3, [pc, #572]	; (800fbc8 <run_shortest+0xa80>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	461a      	mov	r2, r3
 800f98e:	4b8f      	ldr	r3, [pc, #572]	; (800fbcc <run_shortest+0xa84>)
 800f990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f994:	f113 0f0b 	cmn.w	r3, #11
 800f998:	f040 810f 	bne.w	800fbba <run_shortest+0xa72>
				if (pass[pass_count] == -8 || pass[pass_count] == -10) {
 800f99c:	4b8a      	ldr	r3, [pc, #552]	; (800fbc8 <run_shortest+0xa80>)
 800f99e:	781b      	ldrb	r3, [r3, #0]
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	4b8a      	ldr	r3, [pc, #552]	; (800fbcc <run_shortest+0xa84>)
 800f9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9a8:	f113 0f08 	cmn.w	r3, #8
 800f9ac:	d008      	beq.n	800f9c0 <run_shortest+0x878>
 800f9ae:	4b86      	ldr	r3, [pc, #536]	; (800fbc8 <run_shortest+0xa80>)
 800f9b0:	781b      	ldrb	r3, [r3, #0]
 800f9b2:	461a      	mov	r2, r3
 800f9b4:	4b85      	ldr	r3, [pc, #532]	; (800fbcc <run_shortest+0xa84>)
 800f9b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9ba:	f113 0f0a 	cmn.w	r3, #10
 800f9be:	d102      	bne.n	800f9c6 <run_shortest+0x87e>
					slant_direction = -3;
 800f9c0:	f06f 0302 	mvn.w	r3, #2
 800f9c4:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				if (pass[pass_count] == -9 || pass[pass_count] == -11) {
 800f9c6:	4b80      	ldr	r3, [pc, #512]	; (800fbc8 <run_shortest+0xa80>)
 800f9c8:	781b      	ldrb	r3, [r3, #0]
 800f9ca:	461a      	mov	r2, r3
 800f9cc:	4b7f      	ldr	r3, [pc, #508]	; (800fbcc <run_shortest+0xa84>)
 800f9ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9d2:	f113 0f09 	cmn.w	r3, #9
 800f9d6:	d008      	beq.n	800f9ea <run_shortest+0x8a2>
 800f9d8:	4b7b      	ldr	r3, [pc, #492]	; (800fbc8 <run_shortest+0xa80>)
 800f9da:	781b      	ldrb	r3, [r3, #0]
 800f9dc:	461a      	mov	r2, r3
 800f9de:	4b7b      	ldr	r3, [pc, #492]	; (800fbcc <run_shortest+0xa84>)
 800f9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9e4:	f113 0f0b 	cmn.w	r3, #11
 800f9e8:	d102      	bne.n	800f9f0 <run_shortest+0x8a8>
					slant_direction = -2;
 800f9ea:	f06f 0301 	mvn.w	r3, #1
 800f9ee:	63bb      	str	r3, [r7, #56]	; 0x38
				}
				pass_count++;
 800f9f0:	4b75      	ldr	r3, [pc, #468]	; (800fbc8 <run_shortest+0xa80>)
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	3301      	adds	r3, #1
 800f9f6:	b2da      	uxtb	r2, r3
 800f9f8:	4b73      	ldr	r3, [pc, #460]	; (800fbc8 <run_shortest+0xa80>)
 800f9fa:	701a      	strb	r2, [r3, #0]
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800f9fc:	4b72      	ldr	r3, [pc, #456]	; (800fbc8 <run_shortest+0xa80>)
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	461a      	mov	r2, r3
 800fa02:	4b72      	ldr	r3, [pc, #456]	; (800fbcc <run_shortest+0xa84>)
 800fa04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa0c:	d105      	bne.n	800fa1a <run_shortest+0x8d2>
					pass_count++;
 800fa0e:	4b6e      	ldr	r3, [pc, #440]	; (800fbc8 <run_shortest+0xa80>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	3301      	adds	r3, #1
 800fa14:	b2da      	uxtb	r2, r3
 800fa16:	4b6c      	ldr	r3, [pc, #432]	; (800fbc8 <run_shortest+0xa80>)
 800fa18:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa1a:	4b6b      	ldr	r3, [pc, #428]	; (800fbc8 <run_shortest+0xa80>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	461a      	mov	r2, r3
 800fa20:	4b6a      	ldr	r3, [pc, #424]	; (800fbcc <run_shortest+0xa84>)
 800fa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa2a:	d105      	bne.n	800fa38 <run_shortest+0x8f0>
					pass_count++;
 800fa2c:	4b66      	ldr	r3, [pc, #408]	; (800fbc8 <run_shortest+0xa80>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	3301      	adds	r3, #1
 800fa32:	b2da      	uxtb	r2, r3
 800fa34:	4b64      	ldr	r3, [pc, #400]	; (800fbc8 <run_shortest+0xa80>)
 800fa36:	701a      	strb	r2, [r3, #0]
				}
				if (pass[pass_count] >= -3) {
 800fa38:	4b63      	ldr	r3, [pc, #396]	; (800fbc8 <run_shortest+0xa80>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	4b63      	ldr	r3, [pc, #396]	; (800fbcc <run_shortest+0xa84>)
 800fa40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa44:	f113 0f03 	cmn.w	r3, #3
 800fa48:	f2c0 80ad 	blt.w	800fba6 <run_shortest+0xa5e>
					slant_count = pass_count;
 800fa4c:	4b5e      	ldr	r3, [pc, #376]	; (800fbc8 <run_shortest+0xa80>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					pass[slant_count] = 51;
 800fa54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fa58:	4a5c      	ldr	r2, [pc, #368]	; (800fbcc <run_shortest+0xa84>)
 800fa5a:	2133      	movs	r1, #51	; 0x33
 800fa5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					pass_count++;
 800fa60:	4b59      	ldr	r3, [pc, #356]	; (800fbc8 <run_shortest+0xa80>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	3301      	adds	r3, #1
 800fa66:	b2da      	uxtb	r2, r3
 800fa68:	4b57      	ldr	r3, [pc, #348]	; (800fbc8 <run_shortest+0xa80>)
 800fa6a:	701a      	strb	r2, [r3, #0]
				}

				//***************************************************************************************途中のモーションstart
				while (pass[pass_count] >= -3) {
 800fa6c:	e09b      	b.n	800fba6 <run_shortest+0xa5e>
					if (pass[pass_count] == -1) {		//135ターンようのー１を進めるため
 800fa6e:	4b56      	ldr	r3, [pc, #344]	; (800fbc8 <run_shortest+0xa80>)
 800fa70:	781b      	ldrb	r3, [r3, #0]
 800fa72:	461a      	mov	r2, r3
 800fa74:	4b55      	ldr	r3, [pc, #340]	; (800fbcc <run_shortest+0xa84>)
 800fa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa7e:	d105      	bne.n	800fa8c <run_shortest+0x944>
						pass_count++;
 800fa80:	4b51      	ldr	r3, [pc, #324]	; (800fbc8 <run_shortest+0xa80>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	3301      	adds	r3, #1
 800fa86:	b2da      	uxtb	r2, r3
 800fa88:	4b4f      	ldr	r3, [pc, #316]	; (800fbc8 <run_shortest+0xa80>)
 800fa8a:	701a      	strb	r2, [r3, #0]
					}
					if (pass[pass_count] == -12 || pass[pass_count] == -13
 800fa8c:	4b4e      	ldr	r3, [pc, #312]	; (800fbc8 <run_shortest+0xa80>)
 800fa8e:	781b      	ldrb	r3, [r3, #0]
 800fa90:	461a      	mov	r2, r3
 800fa92:	4b4e      	ldr	r3, [pc, #312]	; (800fbcc <run_shortest+0xa84>)
 800fa94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa98:	f113 0f0c 	cmn.w	r3, #12
 800fa9c:	f000 808d 	beq.w	800fbba <run_shortest+0xa72>
 800faa0:	4b49      	ldr	r3, [pc, #292]	; (800fbc8 <run_shortest+0xa80>)
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4b49      	ldr	r3, [pc, #292]	; (800fbcc <run_shortest+0xa84>)
 800faa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faac:	f113 0f0d 	cmn.w	r3, #13
 800fab0:	f000 8083 	beq.w	800fbba <run_shortest+0xa72>
							|| pass[pass_count] == -14
 800fab4:	4b44      	ldr	r3, [pc, #272]	; (800fbc8 <run_shortest+0xa80>)
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	461a      	mov	r2, r3
 800faba:	4b44      	ldr	r3, [pc, #272]	; (800fbcc <run_shortest+0xa84>)
 800fabc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fac0:	f113 0f0e 	cmn.w	r3, #14
 800fac4:	d079      	beq.n	800fbba <run_shortest+0xa72>
							|| pass[pass_count] == -15) {
 800fac6:	4b40      	ldr	r3, [pc, #256]	; (800fbc8 <run_shortest+0xa80>)
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	461a      	mov	r2, r3
 800facc:	4b3f      	ldr	r3, [pc, #252]	; (800fbcc <run_shortest+0xa84>)
 800face:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fad2:	f113 0f0f 	cmn.w	r3, #15
 800fad6:	d070      	beq.n	800fbba <run_shortest+0xa72>
						break;
					}
					if (pass[pass_count] == slant_direction) {
 800fad8:	4b3b      	ldr	r3, [pc, #236]	; (800fbc8 <run_shortest+0xa80>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	461a      	mov	r2, r3
 800fade:	4b3b      	ldr	r3, [pc, #236]	; (800fbcc <run_shortest+0xa84>)
 800fae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fae4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fae6:	429a      	cmp	r2, r3
 800fae8:	d127      	bne.n	800fb3a <run_shortest+0x9f2>
						pass[slant_count] = pass[slant_count] - 1;
 800faea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faee:	4a37      	ldr	r2, [pc, #220]	; (800fbcc <run_shortest+0xa84>)
 800faf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800faf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800faf8:	3a01      	subs	r2, #1
 800fafa:	4934      	ldr	r1, [pc, #208]	; (800fbcc <run_shortest+0xa84>)
 800fafc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						slant_count = pass_count;
 800fb00:	4b31      	ldr	r3, [pc, #196]	; (800fbc8 <run_shortest+0xa80>)
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
						if (slant_direction == -2) {
 800fb08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb0a:	f113 0f02 	cmn.w	r3, #2
 800fb0e:	d107      	bne.n	800fb20 <run_shortest+0x9d8>
							pass[pass_count] = -16;
 800fb10:	4b2d      	ldr	r3, [pc, #180]	; (800fbc8 <run_shortest+0xa80>)
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	4619      	mov	r1, r3
 800fb16:	4b2d      	ldr	r3, [pc, #180]	; (800fbcc <run_shortest+0xa84>)
 800fb18:	f06f 020f 	mvn.w	r2, #15
 800fb1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
						}
						if (slant_direction == -3) {
 800fb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb22:	f113 0f03 	cmn.w	r3, #3
 800fb26:	d138      	bne.n	800fb9a <run_shortest+0xa52>
							pass[pass_count] = -17;
 800fb28:	4b27      	ldr	r3, [pc, #156]	; (800fbc8 <run_shortest+0xa80>)
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	4619      	mov	r1, r3
 800fb2e:	4b27      	ldr	r3, [pc, #156]	; (800fbcc <run_shortest+0xa84>)
 800fb30:	f06f 0210 	mvn.w	r2, #16
 800fb34:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb38:	e02f      	b.n	800fb9a <run_shortest+0xa52>
						}

					} else {
						if (pass[slant_count] >= 50) {
 800fb3a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb3e:	4a23      	ldr	r2, [pc, #140]	; (800fbcc <run_shortest+0xa84>)
 800fb40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb44:	2b31      	cmp	r3, #49	; 0x31
 800fb46:	dd08      	ble.n	800fb5a <run_shortest+0xa12>
							pass[pass_count] = -1;
 800fb48:	4b1f      	ldr	r3, [pc, #124]	; (800fbc8 <run_shortest+0xa80>)
 800fb4a:	781b      	ldrb	r3, [r3, #0]
 800fb4c:	4619      	mov	r1, r3
 800fb4e:	4b1f      	ldr	r3, [pc, #124]	; (800fbcc <run_shortest+0xa84>)
 800fb50:	f04f 32ff 	mov.w	r2, #4294967295
 800fb54:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800fb58:	e009      	b.n	800fb6e <run_shortest+0xa26>
						} else {
							slant_count = pass_count;
 800fb5a:	4b1b      	ldr	r3, [pc, #108]	; (800fbc8 <run_shortest+0xa80>)
 800fb5c:	781b      	ldrb	r3, [r3, #0]
 800fb5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
							pass[slant_count] = 50;
 800fb62:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb66:	4a19      	ldr	r2, [pc, #100]	; (800fbcc <run_shortest+0xa84>)
 800fb68:	2132      	movs	r1, #50	; 0x32
 800fb6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
						}
						pass[slant_count] = pass[slant_count] + 1;
 800fb6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb72:	4a16      	ldr	r2, [pc, #88]	; (800fbcc <run_shortest+0xa84>)
 800fb74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fb78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800fb7c:	3201      	adds	r2, #1
 800fb7e:	4913      	ldr	r1, [pc, #76]	; (800fbcc <run_shortest+0xa84>)
 800fb80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						if (slant_direction == -2) {
 800fb84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb86:	f113 0f02 	cmn.w	r3, #2
 800fb8a:	d103      	bne.n	800fb94 <run_shortest+0xa4c>
							slant_direction = -3;
 800fb8c:	f06f 0302 	mvn.w	r3, #2
 800fb90:	63bb      	str	r3, [r7, #56]	; 0x38
 800fb92:	e002      	b.n	800fb9a <run_shortest+0xa52>
						} else {
							slant_direction = -2;
 800fb94:	f06f 0301 	mvn.w	r3, #1
 800fb98:	63bb      	str	r3, [r7, #56]	; 0x38
						}

					}

					pass_count++;
 800fb9a:	4b0b      	ldr	r3, [pc, #44]	; (800fbc8 <run_shortest+0xa80>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	3301      	adds	r3, #1
 800fba0:	b2da      	uxtb	r2, r3
 800fba2:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <run_shortest+0xa80>)
 800fba4:	701a      	strb	r2, [r3, #0]
				while (pass[pass_count] >= -3) {
 800fba6:	4b08      	ldr	r3, [pc, #32]	; (800fbc8 <run_shortest+0xa80>)
 800fba8:	781b      	ldrb	r3, [r3, #0]
 800fbaa:	461a      	mov	r2, r3
 800fbac:	4b07      	ldr	r3, [pc, #28]	; (800fbcc <run_shortest+0xa84>)
 800fbae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbb2:	f113 0f03 	cmn.w	r3, #3
 800fbb6:	f6bf af5a 	bge.w	800fa6e <run_shortest+0x926>

			}

			//		if(){}

			pass_count++;
 800fbba:	4b03      	ldr	r3, [pc, #12]	; (800fbc8 <run_shortest+0xa80>)
 800fbbc:	781b      	ldrb	r3, [r3, #0]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	4b01      	ldr	r3, [pc, #4]	; (800fbc8 <run_shortest+0xa80>)
 800fbc4:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 0) {
 800fbc6:	e6bb      	b.n	800f940 <run_shortest+0x7f8>
 800fbc8:	20000828 	.word	0x20000828
 800fbcc:	2000083c 	.word	0x2000083c
				break;
 800fbd0:	bf00      	nop
		}
		pass_count=0;
 800fbd2:	4bb3      	ldr	r3, [pc, #716]	; (800fea0 <run_shortest+0xd58>)
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	701a      	strb	r2, [r3, #0]
		while (1) {		//パス圧縮

			if (pass[pass_count] == 50) {
 800fbd8:	4bb1      	ldr	r3, [pc, #708]	; (800fea0 <run_shortest+0xd58>)
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4bb1      	ldr	r3, [pc, #708]	; (800fea4 <run_shortest+0xd5c>)
 800fbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe4:	2b32      	cmp	r3, #50	; 0x32
 800fbe6:	d107      	bne.n	800fbf8 <run_shortest+0xab0>
				pass[pass_count] =-1;
 800fbe8:	4bad      	ldr	r3, [pc, #692]	; (800fea0 <run_shortest+0xd58>)
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	4619      	mov	r1, r3
 800fbee:	4bad      	ldr	r3, [pc, #692]	; (800fea4 <run_shortest+0xd5c>)
 800fbf0:	f04f 32ff 	mov.w	r2, #4294967295
 800fbf4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

			}
			if (pass[pass_count] == 0) {
 800fbf8:	4ba9      	ldr	r3, [pc, #676]	; (800fea0 <run_shortest+0xd58>)
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4ba9      	ldr	r3, [pc, #676]	; (800fea4 <run_shortest+0xd5c>)
 800fc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d006      	beq.n	800fc16 <run_shortest+0xace>
				break;
			}
			pass_count++;
 800fc08:	4ba5      	ldr	r3, [pc, #660]	; (800fea0 <run_shortest+0xd58>)
 800fc0a:	781b      	ldrb	r3, [r3, #0]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	b2da      	uxtb	r2, r3
 800fc10:	4ba3      	ldr	r3, [pc, #652]	; (800fea0 <run_shortest+0xd58>)
 800fc12:	701a      	strb	r2, [r3, #0]
			if (pass[pass_count] == 50) {
 800fc14:	e7e0      	b.n	800fbd8 <run_shortest+0xa90>
				break;
 800fc16:	bf00      	nop
		}

	}
}
	int j = 0;
 800fc18:	2300      	movs	r3, #0
 800fc1a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc1c:	e00b      	b.n	800fc36 <run_shortest+0xaee>
		printf("pass_count %d pass %d\n", j, pass[j]);
 800fc1e:	4aa1      	ldr	r2, [pc, #644]	; (800fea4 <run_shortest+0xd5c>)
 800fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc26:	461a      	mov	r2, r3
 800fc28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fc2a:	489f      	ldr	r0, [pc, #636]	; (800fea8 <run_shortest+0xd60>)
 800fc2c:	f010 ff2c 	bl	8020a88 <iprintf>
		j++;
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	3301      	adds	r3, #1
 800fc34:	62bb      	str	r3, [r7, #40]	; 0x28
	while (pass[j] != 0) {
 800fc36:	4a9b      	ldr	r2, [pc, #620]	; (800fea4 <run_shortest+0xd5c>)
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc3e:	2b00      	cmp	r3, #0
 800fc40:	d1ed      	bne.n	800fc1e <run_shortest+0xad6>
	}
	int pass_count2;
	pass_count2=0;
 800fc42:	2300      	movs	r3, #0
 800fc44:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc46:	e002      	b.n	800fc4e <run_shortest+0xb06>
		pass_count2++;
 800fc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fc4e:	4a95      	ldr	r2, [pc, #596]	; (800fea4 <run_shortest+0xd5c>)
 800fc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc5a:	d0f5      	beq.n	800fc48 <run_shortest+0xb00>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fc5c:	4a91      	ldr	r2, [pc, #580]	; (800fea4 <run_shortest+0xd5c>)
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc64:	934e      	str	r3, [sp, #312]	; 0x138
 800fc66:	4668      	mov	r0, sp
 800fc68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fc6c:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fc70:	4619      	mov	r1, r3
 800fc72:	f010 fa89 	bl	8020188 <memcpy>
 800fc76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fc7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fc7c:	f007 fee2 	bl	8017a44 <get_center_velocity>
 800fc80:	ed87 0a08 	vstr	s0, [r7, #32]
	printf("%d,%f\n",pass_count2, end_velocity);
 800fc84:	6a38      	ldr	r0, [r7, #32]
 800fc86:	f7f0 fc87 	bl	8000598 <__aeabi_f2d>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc90:	4886      	ldr	r0, [pc, #536]	; (800feac <run_shortest+0xd64>)
 800fc92:	f010 fef9 	bl	8020a88 <iprintf>

	HAL_Delay(500);
 800fc96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fc9a:	f008 ffa3 	bl	8018be4 <HAL_Delay>
	pl_DriveMotor_standby(ON);
 800fc9e:	2001      	movs	r0, #1
 800fca0:	f7f7 fe12 	bl	80078c8 <pl_DriveMotor_standby>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 800fca4:	2003      	movs	r0, #3
 800fca6:	f7f7 fe41 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 800fcaa:	2003      	movs	r0, #3
 800fcac:	f7f7 fe16 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 800fcb0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800fcb4:	f7f8 f938 	bl	8007f28 <wait_ms_NoReset>
	no_safty = 1;
 800fcb8:	4b7d      	ldr	r3, [pc, #500]	; (800feb0 <run_shortest+0xd68>)
 800fcba:	2201      	movs	r2, #1
 800fcbc:	701a      	strb	r2, [r3, #0]
	no_safty = 0;
 800fcbe:	4b7c      	ldr	r3, [pc, #496]	; (800feb0 <run_shortest+0xd68>)
 800fcc0:	2200      	movs	r2, #0
 800fcc2:	701a      	strb	r2, [r3, #0]
	clear_Ierror();
 800fcc4:	f7f4 fc6e 	bl	80045a4 <clear_Ierror>
	////wall_control_mode = 1;
	if (fun_mode == 1) {
 800fcc8:	7abb      	ldrb	r3, [r7, #10]
 800fcca:	2b01      	cmp	r3, #1
 800fccc:	d12d      	bne.n	800fd2a <run_shortest+0xbe2>
		pl_FunMotor_duty(fun_ratio*BATT_MAX/g_V_battery_mean);
 800fcce:	6878      	ldr	r0, [r7, #4]
 800fcd0:	f7f0 fc62 	bl	8000598 <__aeabi_f2d>
 800fcd4:	a370      	add	r3, pc, #448	; (adr r3, 800fe98 <run_shortest+0xd50>)
 800fcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcda:	f7f0 fcb5 	bl	8000648 <__aeabi_dmul>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	4614      	mov	r4, r2
 800fce4:	461d      	mov	r5, r3
 800fce6:	4b73      	ldr	r3, [pc, #460]	; (800feb4 <run_shortest+0xd6c>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f0 fc54 	bl	8000598 <__aeabi_f2d>
 800fcf0:	4602      	mov	r2, r0
 800fcf2:	460b      	mov	r3, r1
 800fcf4:	4620      	mov	r0, r4
 800fcf6:	4629      	mov	r1, r5
 800fcf8:	f7f0 fdd0 	bl	800089c <__aeabi_ddiv>
 800fcfc:	4602      	mov	r2, r0
 800fcfe:	460b      	mov	r3, r1
 800fd00:	4610      	mov	r0, r2
 800fd02:	4619      	mov	r1, r3
 800fd04:	f7f0 ff78 	bl	8000bf8 <__aeabi_d2f>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	ee00 3a10 	vmov	s0, r3
 800fd0e:	f7f7 fe79 	bl	8007a04 <pl_FunMotor_duty>
		pl_FunMotor_start();
 800fd12:	f7f7 fe63 	bl	80079dc <pl_FunMotor_start>
		HAL_Delay(600);
 800fd16:	f44f 7016 	mov.w	r0, #600	; 0x258
 800fd1a:	f008 ff63 	bl	8018be4 <HAL_Delay>
		reset_gyro();
 800fd1e:	f7f1 fd23 	bl	8001768 <reset_gyro>
		reset_speed();
 800fd22:	f7f1 f979 	bl	8001018 <reset_speed>
		clear_Ierror();
 800fd26:	f7f4 fc3d 	bl	80045a4 <clear_Ierror>
//				pl_FunMotor_duty(160);
//		pl_FunMotor_start();
//						HAL_Delay(2000);	//候補1

	}
	maze_mode = 1;
 800fd2a:	4b63      	ldr	r3, [pc, #396]	; (800feb8 <run_shortest+0xd70>)
 800fd2c:	2201      	movs	r2, #1
 800fd2e:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 1;
 800fd30:	4b62      	ldr	r3, [pc, #392]	; (800febc <run_shortest+0xd74>)
 800fd32:	2201      	movs	r2, #1
 800fd34:	701a      	strb	r2, [r3, #0]
//	record_mode=14;
	record_mode=18;
 800fd36:	4b62      	ldr	r3, [pc, #392]	; (800fec0 <run_shortest+0xd78>)
 800fd38:	2212      	movs	r2, #18
 800fd3a:	701a      	strb	r2, [r3, #0]
//	encoder_PID_error=2500;
//	gyro_PID_error=1800;
	wall_control = 0;
 800fd3c:	4b61      	ldr	r3, [pc, #388]	; (800fec4 <run_shortest+0xd7c>)
 800fd3e:	2200      	movs	r2, #0
 800fd40:	601a      	str	r2, [r3, #0]
	pass_count = 0;
 800fd42:	4b57      	ldr	r3, [pc, #348]	; (800fea0 <run_shortest+0xd58>)
 800fd44:	2200      	movs	r2, #0
 800fd46:	701a      	strb	r2, [r3, #0]


	mode.WallControlMode=1;
 800fd48:	2301      	movs	r3, #1
 800fd4a:	763b      	strb	r3, [r7, #24]
	mode.WallControlStatus=0;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	767b      	strb	r3, [r7, #25]
	mode.calMazeMode=0;
 800fd50:	2300      	movs	r3, #0
 800fd52:	76bb      	strb	r3, [r7, #26]
	mode.WallCutMode=0;
 800fd54:	2300      	movs	r3, #0
 800fd56:	76fb      	strb	r3, [r7, #27]
	pass_count2=0;
 800fd58:	2300      	movs	r3, #0
 800fd5a:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd5c:	e002      	b.n	800fd64 <run_shortest+0xc1c>
		pass_count2++;
 800fd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd60:	3301      	adds	r3, #1
 800fd62:	627b      	str	r3, [r7, #36]	; 0x24
	while(pass[pass_count2] == -1){
 800fd64:	4a4f      	ldr	r2, [pc, #316]	; (800fea4 <run_shortest+0xd5c>)
 800fd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd70:	d0f5      	beq.n	800fd5e <run_shortest+0xc16>
	}
	end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fd72:	4a4c      	ldr	r2, [pc, #304]	; (800fea4 <run_shortest+0xd5c>)
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd7a:	934e      	str	r3, [sp, #312]	; 0x138
 800fd7c:	4668      	mov	r0, sp
 800fd7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fd82:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fd86:	4619      	mov	r1, r3
 800fd88:	f010 f9fe 	bl	8020188 <memcpy>
 800fd8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fd90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fd92:	f007 fe57 	bl	8017a44 <get_center_velocity>
 800fd96:	ed87 0a08 	vstr	s0, [r7, #32]
	straight_table2(BACK_TO_CENTER_FRONT,0,end_velocity,end_velocity,end_velocity*end_velocity/ BACK_TO_CENTER_FRONT/2, mode);
 800fd9a:	edd7 7a08 	vldr	s15, [r7, #32]
 800fd9e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800fda2:	ee17 0a90 	vmov	r0, s15
 800fda6:	f7f0 fbf7 	bl	8000598 <__aeabi_f2d>
 800fdaa:	f04f 0200 	mov.w	r2, #0
 800fdae:	4b46      	ldr	r3, [pc, #280]	; (800fec8 <run_shortest+0xd80>)
 800fdb0:	f7f0 fd74 	bl	800089c <__aeabi_ddiv>
 800fdb4:	4602      	mov	r2, r0
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	4610      	mov	r0, r2
 800fdba:	4619      	mov	r1, r3
 800fdbc:	f04f 0200 	mov.w	r2, #0
 800fdc0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fdc4:	f7f0 fd6a 	bl	800089c <__aeabi_ddiv>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	460b      	mov	r3, r1
 800fdcc:	4610      	mov	r0, r2
 800fdce:	4619      	mov	r1, r3
 800fdd0:	f7f0 ff12 	bl	8000bf8 <__aeabi_d2f>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	69b8      	ldr	r0, [r7, #24]
 800fdd8:	ee02 3a10 	vmov	s4, r3
 800fddc:	edd7 1a08 	vldr	s3, [r7, #32]
 800fde0:	ed97 1a08 	vldr	s2, [r7, #32]
 800fde4:	eddf 0a39 	vldr	s1, [pc, #228]	; 800fecc <run_shortest+0xd84>
 800fde8:	eeb2 0a09 	vmov.f32	s0, #41	; 0x41480000  12.5
 800fdec:	f7f3 f8f6 	bl	8002fdc <straight_table2>


	while (pass_count <= 255) {
		pass_count2=pass_count+1;
 800fdf0:	4b2b      	ldr	r3, [pc, #172]	; (800fea0 <run_shortest+0xd58>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	3301      	adds	r3, #1
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fdf8:	e002      	b.n	800fe00 <run_shortest+0xcb8>
			pass_count2++;
 800fdfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	627b      	str	r3, [r7, #36]	; 0x24
		while(pass[pass_count2] == -1){
 800fe00:	4a28      	ldr	r2, [pc, #160]	; (800fea4 <run_shortest+0xd5c>)
 800fe02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe0c:	d0f5      	beq.n	800fdfa <run_shortest+0xcb2>
		}
		end_velocity=get_center_velocity(howspeed,pass[pass_count2]);
 800fe0e:	4a25      	ldr	r2, [pc, #148]	; (800fea4 <run_shortest+0xd5c>)
 800fe10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe16:	934e      	str	r3, [sp, #312]	; 0x138
 800fe18:	4668      	mov	r0, sp
 800fe1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800fe1e:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fe22:	4619      	mov	r1, r3
 800fe24:	f010 f9b0 	bl	8020188 <memcpy>
 800fe28:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800fe2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe2e:	f007 fe09 	bl	8017a44 <get_center_velocity>
 800fe32:	ed87 0a08 	vstr	s0, [r7, #32]

		if (pass[pass_count] == -1) {
 800fe36:	4b1a      	ldr	r3, [pc, #104]	; (800fea0 <run_shortest+0xd58>)
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	4b19      	ldr	r3, [pc, #100]	; (800fea4 <run_shortest+0xd5c>)
 800fe3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe46:	d106      	bne.n	800fe56 <run_shortest+0xd0e>
			pass_count++;
 800fe48:	4b15      	ldr	r3, [pc, #84]	; (800fea0 <run_shortest+0xd58>)
 800fe4a:	781b      	ldrb	r3, [r3, #0]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	b2da      	uxtb	r2, r3
 800fe50:	4b13      	ldr	r3, [pc, #76]	; (800fea0 <run_shortest+0xd58>)
 800fe52:	701a      	strb	r2, [r3, #0]
 800fe54:	e2a1      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -2) {
 800fe56:	4b12      	ldr	r3, [pc, #72]	; (800fea0 <run_shortest+0xd58>)
 800fe58:	781b      	ldrb	r3, [r3, #0]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	4b11      	ldr	r3, [pc, #68]	; (800fea4 <run_shortest+0xd5c>)
 800fe5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe62:	f113 0f02 	cmn.w	r3, #2
 800fe66:	d133      	bne.n	800fed0 <run_shortest+0xd88>

			slalomR(howspeed.slalom_R, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fe68:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fe6c:	9303      	str	r3, [sp, #12]
 800fe6e:	2301      	movs	r3, #1
 800fe70:	9302      	str	r3, [sp, #8]
 800fe72:	2300      	movs	r3, #0
 800fe74:	9301      	str	r3, [sp, #4]
 800fe76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe78:	9300      	str	r3, [sp, #0]
 800fe7a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800fe7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fe80:	ed97 0a08 	vldr	s0, [r7, #32]
 800fe84:	f7fa f874 	bl	8009f70 <slalomR>

			pass_count++;
 800fe88:	4b05      	ldr	r3, [pc, #20]	; (800fea0 <run_shortest+0xd58>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	3301      	adds	r3, #1
 800fe8e:	b2da      	uxtb	r2, r3
 800fe90:	4b03      	ldr	r3, [pc, #12]	; (800fea0 <run_shortest+0xd58>)
 800fe92:	701a      	strb	r2, [r3, #0]
 800fe94:	e281      	b.n	801039a <run_shortest+0x1252>
 800fe96:	bf00      	nop
 800fe98:	cccccccd 	.word	0xcccccccd
 800fe9c:	4010cccc 	.word	0x4010cccc
 800fea0:	20000828 	.word	0x20000828
 800fea4:	2000083c 	.word	0x2000083c
 800fea8:	080233a4 	.word	0x080233a4
 800feac:	080233bc 	.word	0x080233bc
 800feb0:	20000806 	.word	0x20000806
 800feb4:	200004d4 	.word	0x200004d4
 800feb8:	20000834 	.word	0x20000834
 800febc:	20000808 	.word	0x20000808
 800fec0:	2000edc0 	.word	0x2000edc0
 800fec4:	20000830 	.word	0x20000830
 800fec8:	40290000 	.word	0x40290000
 800fecc:	00000000 	.word	0x00000000
		}
		else if (pass[pass_count] == -3) {
 800fed0:	4baa      	ldr	r3, [pc, #680]	; (801017c <run_shortest+0x1034>)
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	461a      	mov	r2, r3
 800fed6:	4baa      	ldr	r3, [pc, #680]	; (8010180 <run_shortest+0x1038>)
 800fed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fedc:	f113 0f03 	cmn.w	r3, #3
 800fee0:	d116      	bne.n	800ff10 <run_shortest+0xdc8>

			slalomL(howspeed.slalom_L, OFF,SHORTEST,mollifier_mode,end_velocity);
 800fee2:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800fee6:	9303      	str	r3, [sp, #12]
 800fee8:	2301      	movs	r3, #1
 800feea:	9302      	str	r3, [sp, #8]
 800feec:	2300      	movs	r3, #0
 800feee:	9301      	str	r3, [sp, #4]
 800fef0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fef2:	9300      	str	r3, [sp, #0]
 800fef4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800fef8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fefa:	ed97 0a08 	vldr	s0, [r7, #32]
 800fefe:	f7fa fa1d 	bl	800a33c <slalomL>

			pass_count++;
 800ff02:	4b9e      	ldr	r3, [pc, #632]	; (801017c <run_shortest+0x1034>)
 800ff04:	781b      	ldrb	r3, [r3, #0]
 800ff06:	3301      	adds	r3, #1
 800ff08:	b2da      	uxtb	r2, r3
 800ff0a:	4b9c      	ldr	r3, [pc, #624]	; (801017c <run_shortest+0x1034>)
 800ff0c:	701a      	strb	r2, [r3, #0]
 800ff0e:	e244      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -4) {
 800ff10:	4b9a      	ldr	r3, [pc, #616]	; (801017c <run_shortest+0x1034>)
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	461a      	mov	r2, r3
 800ff16:	4b9a      	ldr	r3, [pc, #616]	; (8010180 <run_shortest+0x1038>)
 800ff18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff1c:	f113 0f04 	cmn.w	r3, #4
 800ff20:	d115      	bne.n	800ff4e <run_shortest+0xe06>
			turn90R(howspeed.turn90_R, OFF,mollifier_mode,end_velocity);
 800ff22:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff26:	9302      	str	r3, [sp, #8]
 800ff28:	2300      	movs	r3, #0
 800ff2a:	9301      	str	r3, [sp, #4]
 800ff2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ff36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff38:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff3c:	f7fa fbe0 	bl	800a700 <turn90R>
			pass_count++;
 800ff40:	4b8e      	ldr	r3, [pc, #568]	; (801017c <run_shortest+0x1034>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	3301      	adds	r3, #1
 800ff46:	b2da      	uxtb	r2, r3
 800ff48:	4b8c      	ldr	r3, [pc, #560]	; (801017c <run_shortest+0x1034>)
 800ff4a:	701a      	strb	r2, [r3, #0]
 800ff4c:	e225      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -5) {
 800ff4e:	4b8b      	ldr	r3, [pc, #556]	; (801017c <run_shortest+0x1034>)
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	461a      	mov	r2, r3
 800ff54:	4b8a      	ldr	r3, [pc, #552]	; (8010180 <run_shortest+0x1038>)
 800ff56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff5a:	f113 0f05 	cmn.w	r3, #5
 800ff5e:	d115      	bne.n	800ff8c <run_shortest+0xe44>
			turn90L(howspeed.turn90_L, OFF,mollifier_mode,end_velocity);
 800ff60:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ff64:	9302      	str	r3, [sp, #8]
 800ff66:	2300      	movs	r3, #0
 800ff68:	9301      	str	r3, [sp, #4]
 800ff6a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ff6e:	9300      	str	r3, [sp, #0]
 800ff70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800ff74:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ff76:	ed97 0a08 	vldr	s0, [r7, #32]
 800ff7a:	f7fa fd2b 	bl	800a9d4 <turn90L>
			pass_count++;
 800ff7e:	4b7f      	ldr	r3, [pc, #508]	; (801017c <run_shortest+0x1034>)
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	3301      	adds	r3, #1
 800ff84:	b2da      	uxtb	r2, r3
 800ff86:	4b7d      	ldr	r3, [pc, #500]	; (801017c <run_shortest+0x1034>)
 800ff88:	701a      	strb	r2, [r3, #0]
 800ff8a:	e206      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -6) {
 800ff8c:	4b7b      	ldr	r3, [pc, #492]	; (801017c <run_shortest+0x1034>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	461a      	mov	r2, r3
 800ff92:	4b7b      	ldr	r3, [pc, #492]	; (8010180 <run_shortest+0x1038>)
 800ff94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff98:	f113 0f06 	cmn.w	r3, #6
 800ff9c:	d115      	bne.n	800ffca <run_shortest+0xe82>
			turn180R(howspeed.turn180_R, OFF,mollifier_mode,end_velocity);
 800ff9e:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffa2:	9302      	str	r3, [sp, #8]
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	9301      	str	r3, [sp, #4]
 800ffa8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800ffb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ffb4:	ed97 0a08 	vldr	s0, [r7, #32]
 800ffb8:	f7fa fe70 	bl	800ac9c <turn180R>
			pass_count++;
 800ffbc:	4b6f      	ldr	r3, [pc, #444]	; (801017c <run_shortest+0x1034>)
 800ffbe:	781b      	ldrb	r3, [r3, #0]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	b2da      	uxtb	r2, r3
 800ffc4:	4b6d      	ldr	r3, [pc, #436]	; (801017c <run_shortest+0x1034>)
 800ffc6:	701a      	strb	r2, [r3, #0]
 800ffc8:	e1e7      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -7) {
 800ffca:	4b6c      	ldr	r3, [pc, #432]	; (801017c <run_shortest+0x1034>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	461a      	mov	r2, r3
 800ffd0:	4b6b      	ldr	r3, [pc, #428]	; (8010180 <run_shortest+0x1038>)
 800ffd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffd6:	f113 0f07 	cmn.w	r3, #7
 800ffda:	d115      	bne.n	8010008 <run_shortest+0xec0>
			turn180L(howspeed.turn180_L, OFF,mollifier_mode,end_velocity);
 800ffdc:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 800ffe0:	9302      	str	r3, [sp, #8]
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	9301      	str	r3, [sp, #4]
 800ffe6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ffea:	9300      	str	r3, [sp, #0]
 800ffec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800fff0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fff2:	ed97 0a08 	vldr	s0, [r7, #32]
 800fff6:	f7fa ffbb 	bl	800af70 <turn180L>
			pass_count++;
 800fffa:	4b60      	ldr	r3, [pc, #384]	; (801017c <run_shortest+0x1034>)
 800fffc:	781b      	ldrb	r3, [r3, #0]
 800fffe:	3301      	adds	r3, #1
 8010000:	b2da      	uxtb	r2, r3
 8010002:	4b5e      	ldr	r3, [pc, #376]	; (801017c <run_shortest+0x1034>)
 8010004:	701a      	strb	r2, [r3, #0]
 8010006:	e1c8      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -8) { //入り45R
 8010008:	4b5c      	ldr	r3, [pc, #368]	; (801017c <run_shortest+0x1034>)
 801000a:	781b      	ldrb	r3, [r3, #0]
 801000c:	461a      	mov	r2, r3
 801000e:	4b5c      	ldr	r3, [pc, #368]	; (8010180 <run_shortest+0x1038>)
 8010010:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010014:	f113 0f08 	cmn.w	r3, #8
 8010018:	d115      	bne.n	8010046 <run_shortest+0xefe>
			turn45inR(howspeed.turn45in_R, OFF,mollifier_mode,end_velocity);
 801001a:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801001e:	9302      	str	r3, [sp, #8]
 8010020:	2300      	movs	r3, #0
 8010022:	9301      	str	r3, [sp, #4]
 8010024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801002e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010030:	ed97 0a08 	vldr	s0, [r7, #32]
 8010034:	f7fb f904 	bl	800b240 <turn45inR>
			pass_count++;
 8010038:	4b50      	ldr	r3, [pc, #320]	; (801017c <run_shortest+0x1034>)
 801003a:	781b      	ldrb	r3, [r3, #0]
 801003c:	3301      	adds	r3, #1
 801003e:	b2da      	uxtb	r2, r3
 8010040:	4b4e      	ldr	r3, [pc, #312]	; (801017c <run_shortest+0x1034>)
 8010042:	701a      	strb	r2, [r3, #0]
 8010044:	e1a9      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -9) { //入り45L
 8010046:	4b4d      	ldr	r3, [pc, #308]	; (801017c <run_shortest+0x1034>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	461a      	mov	r2, r3
 801004c:	4b4c      	ldr	r3, [pc, #304]	; (8010180 <run_shortest+0x1038>)
 801004e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010052:	f113 0f09 	cmn.w	r3, #9
 8010056:	d115      	bne.n	8010084 <run_shortest+0xf3c>
			turn45inL(howspeed.turn45in_L, OFF,mollifier_mode,end_velocity);
 8010058:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801005c:	9302      	str	r3, [sp, #8]
 801005e:	2300      	movs	r3, #0
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801006c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801006e:	ed97 0a08 	vldr	s0, [r7, #32]
 8010072:	f7fb fb2d 	bl	800b6d0 <turn45inL>
			pass_count++;
 8010076:	4b41      	ldr	r3, [pc, #260]	; (801017c <run_shortest+0x1034>)
 8010078:	781b      	ldrb	r3, [r3, #0]
 801007a:	3301      	adds	r3, #1
 801007c:	b2da      	uxtb	r2, r3
 801007e:	4b3f      	ldr	r3, [pc, #252]	; (801017c <run_shortest+0x1034>)
 8010080:	701a      	strb	r2, [r3, #0]
 8010082:	e18a      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -10) { //入り135R
 8010084:	4b3d      	ldr	r3, [pc, #244]	; (801017c <run_shortest+0x1034>)
 8010086:	781b      	ldrb	r3, [r3, #0]
 8010088:	461a      	mov	r2, r3
 801008a:	4b3d      	ldr	r3, [pc, #244]	; (8010180 <run_shortest+0x1038>)
 801008c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010090:	f113 0f0a 	cmn.w	r3, #10
 8010094:	d115      	bne.n	80100c2 <run_shortest+0xf7a>
			turn135inR(howspeed.turn135in_R, OFF,mollifier_mode,end_velocity);
 8010096:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801009a:	9302      	str	r3, [sp, #8]
 801009c:	2300      	movs	r3, #0
 801009e:	9301      	str	r3, [sp, #4]
 80100a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80100a4:	9300      	str	r3, [sp, #0]
 80100a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80100aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100ac:	ed97 0a08 	vldr	s0, [r7, #32]
 80100b0:	f7fb fd4e 	bl	800bb50 <turn135inR>
			pass_count++;
 80100b4:	4b31      	ldr	r3, [pc, #196]	; (801017c <run_shortest+0x1034>)
 80100b6:	781b      	ldrb	r3, [r3, #0]
 80100b8:	3301      	adds	r3, #1
 80100ba:	b2da      	uxtb	r2, r3
 80100bc:	4b2f      	ldr	r3, [pc, #188]	; (801017c <run_shortest+0x1034>)
 80100be:	701a      	strb	r2, [r3, #0]
 80100c0:	e16b      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -11) { //入り135L
 80100c2:	4b2e      	ldr	r3, [pc, #184]	; (801017c <run_shortest+0x1034>)
 80100c4:	781b      	ldrb	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	4b2d      	ldr	r3, [pc, #180]	; (8010180 <run_shortest+0x1038>)
 80100ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100ce:	f113 0f0b 	cmn.w	r3, #11
 80100d2:	d115      	bne.n	8010100 <run_shortest+0xfb8>
			turn135inL(howspeed.turn135in_L, OFF,mollifier_mode,end_velocity);
 80100d4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80100d8:	9302      	str	r3, [sp, #8]
 80100da:	2300      	movs	r3, #0
 80100dc:	9301      	str	r3, [sp, #4]
 80100de:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80100e2:	9300      	str	r3, [sp, #0]
 80100e4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80100e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80100ea:	ed97 0a08 	vldr	s0, [r7, #32]
 80100ee:	f7fb ff77 	bl	800bfe0 <turn135inL>
			pass_count++;
 80100f2:	4b22      	ldr	r3, [pc, #136]	; (801017c <run_shortest+0x1034>)
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	3301      	adds	r3, #1
 80100f8:	b2da      	uxtb	r2, r3
 80100fa:	4b20      	ldr	r3, [pc, #128]	; (801017c <run_shortest+0x1034>)
 80100fc:	701a      	strb	r2, [r3, #0]
 80100fe:	e14c      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -12) { //出り45R
 8010100:	4b1e      	ldr	r3, [pc, #120]	; (801017c <run_shortest+0x1034>)
 8010102:	781b      	ldrb	r3, [r3, #0]
 8010104:	461a      	mov	r2, r3
 8010106:	4b1e      	ldr	r3, [pc, #120]	; (8010180 <run_shortest+0x1038>)
 8010108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801010c:	f113 0f0c 	cmn.w	r3, #12
 8010110:	d115      	bne.n	801013e <run_shortest+0xff6>
			turn45outR(howspeed.turn45out_R, OFF,mollifier_mode,end_velocity);
 8010112:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010116:	9302      	str	r3, [sp, #8]
 8010118:	2300      	movs	r3, #0
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010120:	9300      	str	r3, [sp, #0]
 8010122:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8010126:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010128:	ed97 0a08 	vldr	s0, [r7, #32]
 801012c:	f7fc f99c 	bl	800c468 <turn45outR>
			pass_count++;
 8010130:	4b12      	ldr	r3, [pc, #72]	; (801017c <run_shortest+0x1034>)
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	3301      	adds	r3, #1
 8010136:	b2da      	uxtb	r2, r3
 8010138:	4b10      	ldr	r3, [pc, #64]	; (801017c <run_shortest+0x1034>)
 801013a:	701a      	strb	r2, [r3, #0]
 801013c:	e12d      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -13) { //出り45L
 801013e:	4b0f      	ldr	r3, [pc, #60]	; (801017c <run_shortest+0x1034>)
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	4b0e      	ldr	r3, [pc, #56]	; (8010180 <run_shortest+0x1038>)
 8010146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801014a:	f113 0f0d 	cmn.w	r3, #13
 801014e:	d119      	bne.n	8010184 <run_shortest+0x103c>
			turn45outL(howspeed.turn45out_L, OFF,mollifier_mode,end_velocity);
 8010150:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010154:	9302      	str	r3, [sp, #8]
 8010156:	2300      	movs	r3, #0
 8010158:	9301      	str	r3, [sp, #4]
 801015a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801015e:	9300      	str	r3, [sp, #0]
 8010160:	f507 739a 	add.w	r3, r7, #308	; 0x134
 8010164:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010166:	ed97 0a08 	vldr	s0, [r7, #32]
 801016a:	f7fc fb6f 	bl	800c84c <turn45outL>
			pass_count++;
 801016e:	4b03      	ldr	r3, [pc, #12]	; (801017c <run_shortest+0x1034>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	3301      	adds	r3, #1
 8010174:	b2da      	uxtb	r2, r3
 8010176:	4b01      	ldr	r3, [pc, #4]	; (801017c <run_shortest+0x1034>)
 8010178:	701a      	strb	r2, [r3, #0]
 801017a:	e10e      	b.n	801039a <run_shortest+0x1252>
 801017c:	20000828 	.word	0x20000828
 8010180:	2000083c 	.word	0x2000083c
		}
		else if (pass[pass_count] == -14) { //出り135R
 8010184:	4ba0      	ldr	r3, [pc, #640]	; (8010408 <run_shortest+0x12c0>)
 8010186:	781b      	ldrb	r3, [r3, #0]
 8010188:	461a      	mov	r2, r3
 801018a:	4ba0      	ldr	r3, [pc, #640]	; (801040c <run_shortest+0x12c4>)
 801018c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010190:	f113 0f0e 	cmn.w	r3, #14
 8010194:	d115      	bne.n	80101c2 <run_shortest+0x107a>
			turn135outR(howspeed.turn135out_R, OFF,mollifier_mode,end_velocity);
 8010196:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 801019a:	9302      	str	r3, [sp, #8]
 801019c:	2300      	movs	r3, #0
 801019e:	9301      	str	r3, [sp, #4]
 80101a0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80101a4:	9300      	str	r3, [sp, #0]
 80101a6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80101aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101ac:	ed97 0a08 	vldr	s0, [r7, #32]
 80101b0:	f7fc fd34 	bl	800cc1c <turn135outR>
			pass_count++;
 80101b4:	4b94      	ldr	r3, [pc, #592]	; (8010408 <run_shortest+0x12c0>)
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	3301      	adds	r3, #1
 80101ba:	b2da      	uxtb	r2, r3
 80101bc:	4b92      	ldr	r3, [pc, #584]	; (8010408 <run_shortest+0x12c0>)
 80101be:	701a      	strb	r2, [r3, #0]
 80101c0:	e0eb      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -15) { //出り135L
 80101c2:	4b91      	ldr	r3, [pc, #580]	; (8010408 <run_shortest+0x12c0>)
 80101c4:	781b      	ldrb	r3, [r3, #0]
 80101c6:	461a      	mov	r2, r3
 80101c8:	4b90      	ldr	r3, [pc, #576]	; (801040c <run_shortest+0x12c4>)
 80101ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ce:	f113 0f0f 	cmn.w	r3, #15
 80101d2:	d115      	bne.n	8010200 <run_shortest+0x10b8>
			turn135outL(howspeed.turn135out_L, OFF,mollifier_mode,end_velocity);
 80101d4:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 80101d8:	9302      	str	r3, [sp, #8]
 80101da:	2300      	movs	r3, #0
 80101dc:	9301      	str	r3, [sp, #4]
 80101de:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80101e2:	9300      	str	r3, [sp, #0]
 80101e4:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 80101e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80101ea:	ed97 0a08 	vldr	s0, [r7, #32]
 80101ee:	f7fc ff07 	bl	800d000 <turn135outL>
			pass_count++;
 80101f2:	4b85      	ldr	r3, [pc, #532]	; (8010408 <run_shortest+0x12c0>)
 80101f4:	781b      	ldrb	r3, [r3, #0]
 80101f6:	3301      	adds	r3, #1
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	4b83      	ldr	r3, [pc, #524]	; (8010408 <run_shortest+0x12c0>)
 80101fc:	701a      	strb	r2, [r3, #0]
 80101fe:	e0cc      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -16) { //V90R
 8010200:	4b81      	ldr	r3, [pc, #516]	; (8010408 <run_shortest+0x12c0>)
 8010202:	781b      	ldrb	r3, [r3, #0]
 8010204:	461a      	mov	r2, r3
 8010206:	4b81      	ldr	r3, [pc, #516]	; (801040c <run_shortest+0x12c4>)
 8010208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801020c:	f113 0f10 	cmn.w	r3, #16
 8010210:	d115      	bne.n	801023e <run_shortest+0x10f6>
			V90R(howspeed.V90_R, OFF,mollifier_mode,end_velocity);
 8010212:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010216:	9302      	str	r3, [sp, #8]
 8010218:	2300      	movs	r3, #0
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8010226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010228:	ed97 0a08 	vldr	s0, [r7, #32]
 801022c:	f7fd f8d4 	bl	800d3d8 <V90R>
			pass_count++;
 8010230:	4b75      	ldr	r3, [pc, #468]	; (8010408 <run_shortest+0x12c0>)
 8010232:	781b      	ldrb	r3, [r3, #0]
 8010234:	3301      	adds	r3, #1
 8010236:	b2da      	uxtb	r2, r3
 8010238:	4b73      	ldr	r3, [pc, #460]	; (8010408 <run_shortest+0x12c0>)
 801023a:	701a      	strb	r2, [r3, #0]
 801023c:	e0ad      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] == -17) { //V90L
 801023e:	4b72      	ldr	r3, [pc, #456]	; (8010408 <run_shortest+0x12c0>)
 8010240:	781b      	ldrb	r3, [r3, #0]
 8010242:	461a      	mov	r2, r3
 8010244:	4b71      	ldr	r3, [pc, #452]	; (801040c <run_shortest+0x12c4>)
 8010246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801024a:	f113 0f11 	cmn.w	r3, #17
 801024e:	d115      	bne.n	801027c <run_shortest+0x1134>
			V90L(howspeed.V90_L, OFF,mollifier_mode,end_velocity);
 8010250:	f897 3198 	ldrb.w	r3, [r7, #408]	; 0x198
 8010254:	9302      	str	r3, [sp, #8]
 8010256:	2300      	movs	r3, #0
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010264:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010266:	ed97 0a08 	vldr	s0, [r7, #32]
 801026a:	f7fd fac1 	bl	800d7f0 <V90L>
			pass_count++;
 801026e:	4b66      	ldr	r3, [pc, #408]	; (8010408 <run_shortest+0x12c0>)
 8010270:	781b      	ldrb	r3, [r3, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	b2da      	uxtb	r2, r3
 8010276:	4b64      	ldr	r3, [pc, #400]	; (8010408 <run_shortest+0x12c0>)
 8010278:	701a      	strb	r2, [r3, #0]
 801027a:	e08e      	b.n	801039a <run_shortest+0x1252>
		}
		else if (pass[pass_count] >= 1) {
 801027c:	4b62      	ldr	r3, [pc, #392]	; (8010408 <run_shortest+0x12c0>)
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	461a      	mov	r2, r3
 8010282:	4b62      	ldr	r3, [pc, #392]	; (801040c <run_shortest+0x12c4>)
 8010284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010288:	2b00      	cmp	r3, #0
 801028a:	f340 8086 	ble.w	801039a <run_shortest+0x1252>
			first_v = howspeed.TurnCentervelocity;
 801028e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010290:	637b      	str	r3, [r7, #52]	; 0x34
			last_v = howspeed.TurnCentervelocity;
 8010292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010294:	61fb      	str	r3, [r7, #28]
			if (pass_count >= 1) {
 8010296:	4b5c      	ldr	r3, [pc, #368]	; (8010408 <run_shortest+0x12c0>)
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d013      	beq.n	80102c6 <run_shortest+0x117e>

				if (pass[pass_count - 1] == -2 || pass[pass_count - 1] == -3) {
 801029e:	4b5a      	ldr	r3, [pc, #360]	; (8010408 <run_shortest+0x12c0>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	3b01      	subs	r3, #1
 80102a4:	4a59      	ldr	r2, [pc, #356]	; (801040c <run_shortest+0x12c4>)
 80102a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102aa:	f113 0f02 	cmn.w	r3, #2
 80102ae:	d008      	beq.n	80102c2 <run_shortest+0x117a>
 80102b0:	4b55      	ldr	r3, [pc, #340]	; (8010408 <run_shortest+0x12c0>)
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	3b01      	subs	r3, #1
 80102b6:	4a55      	ldr	r2, [pc, #340]	; (801040c <run_shortest+0x12c4>)
 80102b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102bc:	f113 0f03 	cmn.w	r3, #3
 80102c0:	d101      	bne.n	80102c6 <run_shortest+0x117e>
					first_v = howspeed.SlalomCentervelocity;
 80102c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
			if (pass[pass_count + 1] == -2 || pass[pass_count + 1] == -3) {
 80102c6:	4b50      	ldr	r3, [pc, #320]	; (8010408 <run_shortest+0x12c0>)
 80102c8:	781b      	ldrb	r3, [r3, #0]
 80102ca:	3301      	adds	r3, #1
 80102cc:	4a4f      	ldr	r2, [pc, #316]	; (801040c <run_shortest+0x12c4>)
 80102ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102d2:	f113 0f02 	cmn.w	r3, #2
 80102d6:	d008      	beq.n	80102ea <run_shortest+0x11a2>
 80102d8:	4b4b      	ldr	r3, [pc, #300]	; (8010408 <run_shortest+0x12c0>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	3301      	adds	r3, #1
 80102de:	4a4b      	ldr	r2, [pc, #300]	; (801040c <run_shortest+0x12c4>)
 80102e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102e4:	f113 0f03 	cmn.w	r3, #3
 80102e8:	d101      	bne.n	80102ee <run_shortest+0x11a6>
				last_v = howspeed.SlalomCentervelocity;
 80102ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102ec:	61fb      	str	r3, [r7, #28]
			}
			if (pass[pass_count] >= 50) {
 80102ee:	4b46      	ldr	r3, [pc, #280]	; (8010408 <run_shortest+0x12c0>)
 80102f0:	781b      	ldrb	r3, [r3, #0]
 80102f2:	461a      	mov	r2, r3
 80102f4:	4b45      	ldr	r3, [pc, #276]	; (801040c <run_shortest+0x12c4>)
 80102f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80102fa:	2b31      	cmp	r3, #49	; 0x31
 80102fc:	dd27      	ble.n	801034e <run_shortest+0x1206>
				mode.WallControlMode=3;
 80102fe:	2303      	movs	r3, #3
 8010300:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010302:	2300      	movs	r3, #0
 8010304:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * sqrt(2) * (pass[pass_count] - 50)),first_v, end_velocity,inspeed, inacc, mode);
 8010306:	4b40      	ldr	r3, [pc, #256]	; (8010408 <run_shortest+0x12c0>)
 8010308:	781b      	ldrb	r3, [r3, #0]
 801030a:	461a      	mov	r2, r3
 801030c:	4b3f      	ldr	r3, [pc, #252]	; (801040c <run_shortest+0x12c4>)
 801030e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010312:	3b32      	subs	r3, #50	; 0x32
 8010314:	4618      	mov	r0, r3
 8010316:	f7f0 f92d 	bl	8000574 <__aeabi_i2d>
 801031a:	a339      	add	r3, pc, #228	; (adr r3, 8010400 <run_shortest+0x12b8>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	f7f0 f992 	bl	8000648 <__aeabi_dmul>
 8010324:	4602      	mov	r2, r0
 8010326:	460b      	mov	r3, r1
 8010328:	4610      	mov	r0, r2
 801032a:	4619      	mov	r1, r3
 801032c:	f7f0 fc64 	bl	8000bf8 <__aeabi_d2f>
 8010330:	4603      	mov	r3, r0
 8010332:	69b8      	ldr	r0, [r7, #24]
 8010334:	ed97 2a04 	vldr	s4, [r7, #16]
 8010338:	edd7 1a05 	vldr	s3, [r7, #20]
 801033c:	ed97 1a08 	vldr	s2, [r7, #32]
 8010340:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010344:	ee00 3a10 	vmov	s0, r3
 8010348:	f7f2 fe48 	bl	8002fdc <straight_table2>
 801034c:	e01f      	b.n	801038e <run_shortest+0x1246>
			} else {
				mode.WallControlMode=1;
 801034e:	2301      	movs	r3, #1
 8010350:	763b      	strb	r3, [r7, #24]
				mode.WallControlStatus=0;
 8010352:	2300      	movs	r3, #0
 8010354:	767b      	strb	r3, [r7, #25]
				straight_table2((45 * pass[pass_count]),first_v, end_velocity,inspeed, inacc, mode);
 8010356:	4b2c      	ldr	r3, [pc, #176]	; (8010408 <run_shortest+0x12c0>)
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	461a      	mov	r2, r3
 801035c:	4b2b      	ldr	r3, [pc, #172]	; (801040c <run_shortest+0x12c4>)
 801035e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010362:	4613      	mov	r3, r2
 8010364:	005b      	lsls	r3, r3, #1
 8010366:	4413      	add	r3, r2
 8010368:	011a      	lsls	r2, r3, #4
 801036a:	1ad3      	subs	r3, r2, r3
 801036c:	ee07 3a90 	vmov	s15, r3
 8010370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010374:	69b8      	ldr	r0, [r7, #24]
 8010376:	ed97 2a04 	vldr	s4, [r7, #16]
 801037a:	edd7 1a05 	vldr	s3, [r7, #20]
 801037e:	ed97 1a08 	vldr	s2, [r7, #32]
 8010382:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
 8010386:	eeb0 0a67 	vmov.f32	s0, s15
 801038a:	f7f2 fe27 	bl	8002fdc <straight_table2>
			}

			pass_count++;
 801038e:	4b1e      	ldr	r3, [pc, #120]	; (8010408 <run_shortest+0x12c0>)
 8010390:	781b      	ldrb	r3, [r3, #0]
 8010392:	3301      	adds	r3, #1
 8010394:	b2da      	uxtb	r2, r3
 8010396:	4b1c      	ldr	r3, [pc, #112]	; (8010408 <run_shortest+0x12c0>)
 8010398:	701a      	strb	r2, [r3, #0]
		}

		if (pass[pass_count] == 0) {
 801039a:	4b1b      	ldr	r3, [pc, #108]	; (8010408 <run_shortest+0x12c0>)
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	461a      	mov	r2, r3
 80103a0:	4b1a      	ldr	r3, [pc, #104]	; (801040c <run_shortest+0x12c4>)
 80103a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d000      	beq.n	80103ac <run_shortest+0x1264>
		pass_count2=pass_count+1;
 80103aa:	e521      	b.n	800fdf0 <run_shortest+0xca8>
			break;
 80103ac:	bf00      	nop
//
//			break;
//		}
	}

		mode.WallControlMode=1;
 80103ae:	2301      	movs	r3, #1
 80103b0:	763b      	strb	r3, [r7, #24]
		mode.WallControlStatus=0;
 80103b2:	2300      	movs	r3, #0
 80103b4:	767b      	strb	r3, [r7, #25]
		straight_table2(90,end_velocity, 0,inspeed, inacc, mode);
 80103b6:	69b8      	ldr	r0, [r7, #24]
 80103b8:	ed97 2a04 	vldr	s4, [r7, #16]
 80103bc:	edd7 1a05 	vldr	s3, [r7, #20]
 80103c0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8010410 <run_shortest+0x12c8>
 80103c4:	edd7 0a08 	vldr	s1, [r7, #32]
 80103c8:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8010414 <run_shortest+0x12cc>
 80103cc:	f7f2 fe06 	bl	8002fdc <straight_table2>
		HAL_Delay(700);
 80103d0:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 80103d4:	f008 fc06 	bl	8018be4 <HAL_Delay>
		pl_FunMotor_stop();
 80103d8:	f7f7 fb0a 	bl	80079f0 <pl_FunMotor_stop>
//		turning_table(180, 0, 0, 400, 5000);

	maze_mode = 0;
 80103dc:	4b0e      	ldr	r3, [pc, #56]	; (8010418 <run_shortest+0x12d0>)
 80103de:	2200      	movs	r2, #0
 80103e0:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 80103e2:	4b0e      	ldr	r3, [pc, #56]	; (801041c <run_shortest+0x12d4>)
 80103e4:	2200      	movs	r2, #0
 80103e6:	701a      	strb	r2, [r3, #0]
	record_mode=0;
 80103e8:	4b0d      	ldr	r3, [pc, #52]	; (8010420 <run_shortest+0x12d8>)
 80103ea:	2200      	movs	r2, #0
 80103ec:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_standby(OFF);
 80103ee:	2000      	movs	r0, #0
 80103f0:	f7f7 fa6a 	bl	80078c8 <pl_DriveMotor_standby>
	t = 0;
 80103f4:	4b0b      	ldr	r3, [pc, #44]	; (8010424 <run_shortest+0x12dc>)
 80103f6:	2200      	movs	r2, #0
 80103f8:	601a      	str	r2, [r3, #0]

	while (t <= 14) {
 80103fa:	e034      	b.n	8010466 <run_shortest+0x131e>
 80103fc:	f3af 8000 	nop.w
 8010400:	c022ec18 	.word	0xc022ec18
 8010404:	404fd1de 	.word	0x404fd1de
 8010408:	20000828 	.word	0x20000828
 801040c:	2000083c 	.word	0x2000083c
 8010410:	00000000 	.word	0x00000000
 8010414:	42b40000 	.word	0x42b40000
 8010418:	20000834 	.word	0x20000834
 801041c:	20000808 	.word	0x20000808
 8010420:	2000edc0 	.word	0x2000edc0
 8010424:	20000c38 	.word	0x20000c38
		wall.row[t] = record.row[t];
 8010428:	4b2b      	ldr	r3, [pc, #172]	; (80104d8 <run_shortest+0x1390>)
 801042a:	681a      	ldr	r2, [r3, #0]
 801042c:	4b2a      	ldr	r3, [pc, #168]	; (80104d8 <run_shortest+0x1390>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	492a      	ldr	r1, [pc, #168]	; (80104dc <run_shortest+0x1394>)
 8010432:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8010436:	4a2a      	ldr	r2, [pc, #168]	; (80104e0 <run_shortest+0x1398>)
 8010438:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		wall.column[t] = record.column[t];
 801043c:	4b26      	ldr	r3, [pc, #152]	; (80104d8 <run_shortest+0x1390>)
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	4a25      	ldr	r2, [pc, #148]	; (80104d8 <run_shortest+0x1390>)
 8010442:	6812      	ldr	r2, [r2, #0]
 8010444:	4925      	ldr	r1, [pc, #148]	; (80104dc <run_shortest+0x1394>)
 8010446:	330c      	adds	r3, #12
 8010448:	005b      	lsls	r3, r3, #1
 801044a:	440b      	add	r3, r1
 801044c:	88d8      	ldrh	r0, [r3, #6]
 801044e:	4924      	ldr	r1, [pc, #144]	; (80104e0 <run_shortest+0x1398>)
 8010450:	f102 030c 	add.w	r3, r2, #12
 8010454:	005b      	lsls	r3, r3, #1
 8010456:	440b      	add	r3, r1
 8010458:	4602      	mov	r2, r0
 801045a:	80da      	strh	r2, [r3, #6]
		t++;
 801045c:	4b1e      	ldr	r3, [pc, #120]	; (80104d8 <run_shortest+0x1390>)
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	3301      	adds	r3, #1
 8010462:	4a1d      	ldr	r2, [pc, #116]	; (80104d8 <run_shortest+0x1390>)
 8010464:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 8010466:	4b1c      	ldr	r3, [pc, #112]	; (80104d8 <run_shortest+0x1390>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	2b0e      	cmp	r3, #14
 801046c:	dddc      	ble.n	8010428 <run_shortest+0x12e0>
	}
	t = 0;
 801046e:	4b1a      	ldr	r3, [pc, #104]	; (80104d8 <run_shortest+0x1390>)
 8010470:	2200      	movs	r2, #0
 8010472:	601a      	str	r2, [r3, #0]
	while (t <= 14) {
 8010474:	e026      	b.n	80104c4 <run_shortest+0x137c>
		wall.row_look[t] = ~wall.row_look[t];
 8010476:	4b18      	ldr	r3, [pc, #96]	; (80104d8 <run_shortest+0x1390>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	4a19      	ldr	r2, [pc, #100]	; (80104e0 <run_shortest+0x1398>)
 801047c:	331c      	adds	r3, #28
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	4413      	add	r3, r2
 8010482:	889a      	ldrh	r2, [r3, #4]
 8010484:	4b14      	ldr	r3, [pc, #80]	; (80104d8 <run_shortest+0x1390>)
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	43d2      	mvns	r2, r2
 801048a:	b291      	uxth	r1, r2
 801048c:	4a14      	ldr	r2, [pc, #80]	; (80104e0 <run_shortest+0x1398>)
 801048e:	331c      	adds	r3, #28
 8010490:	005b      	lsls	r3, r3, #1
 8010492:	4413      	add	r3, r2
 8010494:	460a      	mov	r2, r1
 8010496:	809a      	strh	r2, [r3, #4]
		wall.column_look[t] = ~wall.column_look[t];
 8010498:	4b0f      	ldr	r3, [pc, #60]	; (80104d8 <run_shortest+0x1390>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a10      	ldr	r2, [pc, #64]	; (80104e0 <run_shortest+0x1398>)
 801049e:	332c      	adds	r3, #44	; 0x2c
 80104a0:	005b      	lsls	r3, r3, #1
 80104a2:	4413      	add	r3, r2
 80104a4:	885a      	ldrh	r2, [r3, #2]
 80104a6:	4b0c      	ldr	r3, [pc, #48]	; (80104d8 <run_shortest+0x1390>)
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	43d2      	mvns	r2, r2
 80104ac:	b291      	uxth	r1, r2
 80104ae:	4a0c      	ldr	r2, [pc, #48]	; (80104e0 <run_shortest+0x1398>)
 80104b0:	332c      	adds	r3, #44	; 0x2c
 80104b2:	005b      	lsls	r3, r3, #1
 80104b4:	4413      	add	r3, r2
 80104b6:	460a      	mov	r2, r1
 80104b8:	805a      	strh	r2, [r3, #2]
		t++;
 80104ba:	4b07      	ldr	r3, [pc, #28]	; (80104d8 <run_shortest+0x1390>)
 80104bc:	681b      	ldr	r3, [r3, #0]
 80104be:	3301      	adds	r3, #1
 80104c0:	4a05      	ldr	r2, [pc, #20]	; (80104d8 <run_shortest+0x1390>)
 80104c2:	6013      	str	r3, [r2, #0]
	while (t <= 14) {
 80104c4:	4b04      	ldr	r3, [pc, #16]	; (80104d8 <run_shortest+0x1390>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	2b0e      	cmp	r3, #14
 80104ca:	ddd4      	ble.n	8010476 <run_shortest+0x132e>
	}

}
 80104cc:	bf00      	nop
 80104ce:	bf00      	nop
 80104d0:	3740      	adds	r7, #64	; 0x40
 80104d2:	46bd      	mov	sp, r7
 80104d4:	bdb0      	pop	{r4, r5, r7, pc}
 80104d6:	bf00      	nop
 80104d8:	20000c38 	.word	0x20000c38
 80104dc:	20000cb4 	.word	0x20000cb4
 80104e0:	20000c3c 	.word	0x20000c3c

080104e4 <decision_kitiku>:





void decision_kitiku(int x,int y,int direction,unsigned short front_count,unsigned short right_count,unsigned short back_count,unsigned short left_count){
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b08a      	sub	sp, #40	; 0x28
 80104e8:	af02      	add	r7, sp, #8
 80104ea:	60f8      	str	r0, [r7, #12]
 80104ec:	60b9      	str	r1, [r7, #8]
 80104ee:	607a      	str	r2, [r7, #4]
 80104f0:	807b      	strh	r3, [r7, #2]
	_Bool front_wall=1;
 80104f2:	2301      	movs	r3, #1
 80104f4:	77bb      	strb	r3, [r7, #30]
	_Bool right_wall=1;
 80104f6:	2301      	movs	r3, #1
 80104f8:	777b      	strb	r3, [r7, #29]
	_Bool left_wall=1;
 80104fa:	2301      	movs	r3, #1
 80104fc:	773b      	strb	r3, [r7, #28]
	int x_front=x;
 80104fe:	68fb      	ldr	r3, [r7, #12]
 8010500:	61bb      	str	r3, [r7, #24]
	int y_front=y;
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	617b      	str	r3, [r7, #20]
	update_coordinate(&x_front,&y_front,direction);
 8010506:	f107 0114 	add.w	r1, r7, #20
 801050a:	f107 0318 	add.w	r3, r7, #24
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	4618      	mov	r0, r3
 8010512:	f7fd fcf7 	bl	800df04 <update_coordinate>
	get_wall_look(x_front,y_front,direction,&front_wall,&right_wall,&left_wall);
 8010516:	69b8      	ldr	r0, [r7, #24]
 8010518:	6979      	ldr	r1, [r7, #20]
 801051a:	f107 021e 	add.w	r2, r7, #30
 801051e:	f107 031c 	add.w	r3, r7, #28
 8010522:	9301      	str	r3, [sp, #4]
 8010524:	f107 031d 	add.w	r3, r7, #29
 8010528:	9300      	str	r3, [sp, #0]
 801052a:	4613      	mov	r3, r2
 801052c:	687a      	ldr	r2, [r7, #4]
 801052e:	f000 fe27 	bl	8011180 <get_wall_look>
	_Bool look_f=(front_wall && right_wall && left_wall);
 8010532:	7fbb      	ldrb	r3, [r7, #30]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d007      	beq.n	8010548 <decision_kitiku+0x64>
 8010538:	7f7b      	ldrb	r3, [r7, #29]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d004      	beq.n	8010548 <decision_kitiku+0x64>
 801053e:	7f3b      	ldrb	r3, [r7, #28]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d001      	beq.n	8010548 <decision_kitiku+0x64>
 8010544:	2301      	movs	r3, #1
 8010546:	e000      	b.n	801054a <decision_kitiku+0x66>
 8010548:	2300      	movs	r3, #0
 801054a:	77fb      	strb	r3, [r7, #31]
 801054c:	7ffb      	ldrb	r3, [r7, #31]
 801054e:	f003 0301 	and.w	r3, r3, #1
 8010552:	77fb      	strb	r3, [r7, #31]

	//ここに壁条件がない
	if (look_f && front_count <= right_count
 8010554:	7ffb      	ldrb	r3, [r7, #31]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d02b      	beq.n	80105b2 <decision_kitiku+0xce>
 801055a:	887a      	ldrh	r2, [r7, #2]
 801055c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801055e:	429a      	cmp	r2, r3
 8010560:	d827      	bhi.n	80105b2 <decision_kitiku+0xce>
			&& front_count <= left_count && front_count <= back_count) {
 8010562:	887a      	ldrh	r2, [r7, #2]
 8010564:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010566:	429a      	cmp	r2, r3
 8010568:	d823      	bhi.n	80105b2 <decision_kitiku+0xce>
 801056a:	887a      	ldrh	r2, [r7, #2]
 801056c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801056e:	429a      	cmp	r2, r3
 8010570:	d81f      	bhi.n	80105b2 <decision_kitiku+0xce>
		if ((direction==1 && y>=14) ||
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	2b01      	cmp	r3, #1
 8010576:	d102      	bne.n	801057e <decision_kitiku+0x9a>
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	2b0d      	cmp	r3, #13
 801057c:	dc11      	bgt.n	80105a2 <decision_kitiku+0xbe>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2b02      	cmp	r3, #2
 8010582:	d102      	bne.n	801058a <decision_kitiku+0xa6>
			(direction==2 && x>=14) ||
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	2b0d      	cmp	r3, #13
 8010588:	dc0b      	bgt.n	80105a2 <decision_kitiku+0xbe>
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2b03      	cmp	r3, #3
 801058e:	d102      	bne.n	8010596 <decision_kitiku+0xb2>
			(direction==3 && y<=1) ||
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b01      	cmp	r3, #1
 8010594:	dd05      	ble.n	80105a2 <decision_kitiku+0xbe>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	2b04      	cmp	r3, #4
 801059a:	d106      	bne.n	80105aa <decision_kitiku+0xc6>
			(direction==4 && x<=1) ){
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	2b01      	cmp	r3, #1
 80105a0:	dc03      	bgt.n	80105aa <decision_kitiku+0xc6>
			kitikukan = 0;
 80105a2:	4b08      	ldr	r3, [pc, #32]	; (80105c4 <decision_kitiku+0xe0>)
 80105a4:	2200      	movs	r2, #0
 80105a6:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80105a8:	e007      	b.n	80105ba <decision_kitiku+0xd6>
		}else{
			kitikukan = 1;
 80105aa:	4b06      	ldr	r3, [pc, #24]	; (80105c4 <decision_kitiku+0xe0>)
 80105ac:	2201      	movs	r2, #1
 80105ae:	601a      	str	r2, [r3, #0]
		if ((direction==1 && y>=14) ||
 80105b0:	e003      	b.n	80105ba <decision_kitiku+0xd6>
		}

	} else {
		kitikukan = 0;
 80105b2:	4b04      	ldr	r3, [pc, #16]	; (80105c4 <decision_kitiku+0xe0>)
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
	}


}
 80105b8:	bf00      	nop
 80105ba:	bf00      	nop
 80105bc:	3720      	adds	r7, #32
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}
 80105c2:	bf00      	nop
 80105c4:	20000838 	.word	0x20000838

080105c8 <compress_kitiku>:

void compress_kitiku(int *x,int *y,int *direction) {
 80105c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ca:	b099      	sub	sp, #100	; 0x64
 80105cc:	af04      	add	r7, sp, #16
 80105ce:	60f8      	str	r0, [r7, #12]
 80105d0:	60b9      	str	r1, [r7, #8]
 80105d2:	607a      	str	r2, [r7, #4]
	kitiku_distance = 1;
 80105d4:	4b9f      	ldr	r3, [pc, #636]	; (8010854 <compress_kitiku+0x28c>)
 80105d6:	2201      	movs	r2, #1
 80105d8:	601a      	str	r2, [r3, #0]
	kitiku = 1;
 80105da:	4b9f      	ldr	r3, [pc, #636]	; (8010858 <compress_kitiku+0x290>)
 80105dc:	2201      	movs	r2, #1
 80105de:	701a      	strb	r2, [r3, #0]
	_Bool look_f,look_r,look_l;
	int x_now,y_now,direction_now;
	int x_front,y_front,x_right,y_right,x_left,y_left;
	int direction_right,direction_left;
	unsigned short front_count, right_count, back_count, left_count;
	x_now=*x;y_now=*y;direction_now=*direction;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	637b      	str	r3, [r7, #52]	; 0x34
 80105e6:	68bb      	ldr	r3, [r7, #8]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	633b      	str	r3, [r7, #48]	; 0x30
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	64fb      	str	r3, [r7, #76]	; 0x4c
	while (1) {
		update_coordinate(&x_now,&y_now,direction_now);
 80105f2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80105f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80105fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7fd fc81 	bl	800df04 <update_coordinate>
		x_front=x_now;y_front=y_now;x_right=x_now;y_right=y_now;x_left=x_now;y_left=y_now;
 8010602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010608:	62bb      	str	r3, [r7, #40]	; 0x28
 801060a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801060c:	627b      	str	r3, [r7, #36]	; 0x24
 801060e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010610:	623b      	str	r3, [r7, #32]
 8010612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010614:	61fb      	str	r3, [r7, #28]
 8010616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010618:	61bb      	str	r3, [r7, #24]

		update_coordinate(&x_front,&y_front,direction_now);
 801061a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801061e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010622:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010624:	4618      	mov	r0, r3
 8010626:	f7fd fc6d 	bl	800df04 <update_coordinate>
		get_wall_look(x_front,y_front,direction_now,&front_wall,&right_wall,&left_wall);
 801062a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801062c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801062e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010632:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010636:	9301      	str	r3, [sp, #4]
 8010638:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801063c:	9300      	str	r3, [sp, #0]
 801063e:	4613      	mov	r3, r2
 8010640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010642:	f000 fd9d 	bl	8011180 <get_wall_look>
		look_f=(front_wall && right_wall && left_wall);
 8010646:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 801064a:	2b00      	cmp	r3, #0
 801064c:	d009      	beq.n	8010662 <compress_kitiku+0x9a>
 801064e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010652:	2b00      	cmp	r3, #0
 8010654:	d005      	beq.n	8010662 <compress_kitiku+0x9a>
 8010656:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <compress_kitiku+0x9a>
 801065e:	2301      	movs	r3, #1
 8010660:	e000      	b.n	8010664 <compress_kitiku+0x9c>
 8010662:	2300      	movs	r3, #0
 8010664:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010668:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801066c:	f003 0301 	and.w	r3, r3, #1
 8010670:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


		if(direction_now==4){direction_right=1;}else{direction_right=direction_now+1;}
 8010674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010676:	2b04      	cmp	r3, #4
 8010678:	d102      	bne.n	8010680 <compress_kitiku+0xb8>
 801067a:	2301      	movs	r3, #1
 801067c:	64bb      	str	r3, [r7, #72]	; 0x48
 801067e:	e002      	b.n	8010686 <compress_kitiku+0xbe>
 8010680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010682:	3301      	adds	r3, #1
 8010684:	64bb      	str	r3, [r7, #72]	; 0x48
		update_coordinate(&x_right,&y_right,direction_right);
 8010686:	f107 0120 	add.w	r1, r7, #32
 801068a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801068e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010690:	4618      	mov	r0, r3
 8010692:	f7fd fc37 	bl	800df04 <update_coordinate>
		get_wall_look(x_right,y_right,direction_right,&front_wall,&right_wall,&left_wall);
 8010696:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010698:	6a39      	ldr	r1, [r7, #32]
 801069a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801069e:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 80106a2:	9301      	str	r3, [sp, #4]
 80106a4:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 80106a8:	9300      	str	r3, [sp, #0]
 80106aa:	4613      	mov	r3, r2
 80106ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80106ae:	f000 fd67 	bl	8011180 <get_wall_look>
		look_r=(front_wall && right_wall && left_wall);
 80106b2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d009      	beq.n	80106ce <compress_kitiku+0x106>
 80106ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d005      	beq.n	80106ce <compress_kitiku+0x106>
 80106c2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d001      	beq.n	80106ce <compress_kitiku+0x106>
 80106ca:	2301      	movs	r3, #1
 80106cc:	e000      	b.n	80106d0 <compress_kitiku+0x108>
 80106ce:	2300      	movs	r3, #0
 80106d0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80106d4:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80106d8:	f003 0301 	and.w	r3, r3, #1
 80106dc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e


		if(direction_now==1){direction_left=4;}else{direction_left=direction_now-1;}
 80106e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106e2:	2b01      	cmp	r3, #1
 80106e4:	d102      	bne.n	80106ec <compress_kitiku+0x124>
 80106e6:	2304      	movs	r3, #4
 80106e8:	647b      	str	r3, [r7, #68]	; 0x44
 80106ea:	e002      	b.n	80106f2 <compress_kitiku+0x12a>
 80106ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106ee:	3b01      	subs	r3, #1
 80106f0:	647b      	str	r3, [r7, #68]	; 0x44
		update_coordinate(&x_left,&y_left,direction_left);
 80106f2:	f107 0118 	add.w	r1, r7, #24
 80106f6:	f107 031c 	add.w	r3, r7, #28
 80106fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fd fc01 	bl	800df04 <update_coordinate>
		get_wall_look(x_left,y_left,direction_left,&front_wall,&right_wall,&left_wall);
 8010702:	69f8      	ldr	r0, [r7, #28]
 8010704:	69b9      	ldr	r1, [r7, #24]
 8010706:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801070a:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 801070e:	9301      	str	r3, [sp, #4]
 8010710:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 8010714:	9300      	str	r3, [sp, #0]
 8010716:	4613      	mov	r3, r2
 8010718:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801071a:	f000 fd31 	bl	8011180 <get_wall_look>
		look_l=(front_wall && right_wall && left_wall);
 801071e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010722:	2b00      	cmp	r3, #0
 8010724:	d009      	beq.n	801073a <compress_kitiku+0x172>
 8010726:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801072a:	2b00      	cmp	r3, #0
 801072c:	d005      	beq.n	801073a <compress_kitiku+0x172>
 801072e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <compress_kitiku+0x172>
 8010736:	2301      	movs	r3, #1
 8010738:	e000      	b.n	801073c <compress_kitiku+0x174>
 801073a:	2300      	movs	r3, #0
 801073c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8010740:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8010744:	f003 0301 	and.w	r3, r3, #1
 8010748:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

		get_wall(x_now,y_now,direction_now,&front_wall,&right_wall,&left_wall);
 801074c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801074e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010750:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010754:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8010758:	9301      	str	r3, [sp, #4]
 801075a:	f107 033b 	add.w	r3, r7, #59	; 0x3b
 801075e:	9300      	str	r3, [sp, #0]
 8010760:	4613      	mov	r3, r2
 8010762:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010764:	f000 fb98 	bl	8010e98 <get_wall>

		search_AroundWalkCount(&front_count,&right_count,&back_count,&left_count,x_now,y_now,direction_now);
 8010768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801076a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801076c:	f107 0610 	add.w	r6, r7, #16
 8010770:	f107 0512 	add.w	r5, r7, #18
 8010774:	f107 0414 	add.w	r4, r7, #20
 8010778:	f107 0016 	add.w	r0, r7, #22
 801077c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801077e:	9102      	str	r1, [sp, #8]
 8010780:	9201      	str	r2, [sp, #4]
 8010782:	9300      	str	r3, [sp, #0]
 8010784:	4633      	mov	r3, r6
 8010786:	462a      	mov	r2, r5
 8010788:	4621      	mov	r1, r4
 801078a:	f000 fe79 	bl	8011480 <search_AroundWalkCount>
		if (front_wall) {front_count = MAX_WALKCOUNT;}
 801078e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8010792:	2b00      	cmp	r3, #0
 8010794:	d001      	beq.n	801079a <compress_kitiku+0x1d2>
 8010796:	23ff      	movs	r3, #255	; 0xff
 8010798:	82fb      	strh	r3, [r7, #22]
		if (right_wall) {right_count = MAX_WALKCOUNT;}
 801079a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <compress_kitiku+0x1de>
 80107a2:	23ff      	movs	r3, #255	; 0xff
 80107a4:	82bb      	strh	r3, [r7, #20]
		if (left_wall) {left_count = MAX_WALKCOUNT;}
 80107a6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d001      	beq.n	80107b2 <compress_kitiku+0x1ea>
 80107ae:	23ff      	movs	r3, #255	; 0xff
 80107b0:	823b      	strh	r3, [r7, #16]
		// 移動の優先順位 ： 前→右→左→後
		if (walk_count[x_now][y_now] <= 1) {
 80107b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107b6:	4929      	ldr	r1, [pc, #164]	; (801085c <compress_kitiku+0x294>)
 80107b8:	0112      	lsls	r2, r2, #4
 80107ba:	4413      	add	r3, r2
 80107bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80107c0:	2b01      	cmp	r3, #1
 80107c2:	f240 80a9 	bls.w	8010918 <compress_kitiku+0x350>
			//goal間近で停止
			break;
		}
		if (direction_now==1 && y_now>=14) {break;}
 80107c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107c8:	2b01      	cmp	r3, #1
 80107ca:	d103      	bne.n	80107d4 <compress_kitiku+0x20c>
 80107cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ce:	2b0d      	cmp	r3, #13
 80107d0:	f300 80a4 	bgt.w	801091c <compress_kitiku+0x354>
		if (direction_now==2 && x_now>=14) {break;}
 80107d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d6:	2b02      	cmp	r3, #2
 80107d8:	d103      	bne.n	80107e2 <compress_kitiku+0x21a>
 80107da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107dc:	2b0d      	cmp	r3, #13
 80107de:	f300 809f 	bgt.w	8010920 <compress_kitiku+0x358>
		if (direction_now==3 && y_now<=1) {break;}
 80107e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107e4:	2b03      	cmp	r3, #3
 80107e6:	d103      	bne.n	80107f0 <compress_kitiku+0x228>
 80107e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	f340 809a 	ble.w	8010924 <compress_kitiku+0x35c>
		if (direction_now==4 && x_now<=1) {break;}
 80107f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107f2:	2b04      	cmp	r3, #4
 80107f4:	d103      	bne.n	80107fe <compress_kitiku+0x236>
 80107f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107f8:	2b01      	cmp	r3, #1
 80107fa:	f340 8095 	ble.w	8010928 <compress_kitiku+0x360>
		if (front_count==MAX_WALKCOUNT && right_count==MAX_WALKCOUNT && left_count==MAX_WALKCOUNT && back_count==MAX_WALKCOUNT){
 80107fe:	8afb      	ldrh	r3, [r7, #22]
 8010800:	2bff      	cmp	r3, #255	; 0xff
 8010802:	d10c      	bne.n	801081e <compress_kitiku+0x256>
 8010804:	8abb      	ldrh	r3, [r7, #20]
 8010806:	2bff      	cmp	r3, #255	; 0xff
 8010808:	d109      	bne.n	801081e <compress_kitiku+0x256>
 801080a:	8a3b      	ldrh	r3, [r7, #16]
 801080c:	2bff      	cmp	r3, #255	; 0xff
 801080e:	d106      	bne.n	801081e <compress_kitiku+0x256>
 8010810:	8a7b      	ldrh	r3, [r7, #18]
 8010812:	2bff      	cmp	r3, #255	; 0xff
 8010814:	d103      	bne.n	801081e <compress_kitiku+0x256>
		// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)
			error_mode=1;
 8010816:	4b12      	ldr	r3, [pc, #72]	; (8010860 <compress_kitiku+0x298>)
 8010818:	2201      	movs	r2, #1
 801081a:	701a      	strb	r2, [r3, #0]
		break;
 801081c:	e087      	b.n	801092e <compress_kitiku+0x366>
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801081e:	8afa      	ldrh	r2, [r7, #22]
 8010820:	8abb      	ldrh	r3, [r7, #20]
 8010822:	429a      	cmp	r2, r3
 8010824:	d81e      	bhi.n	8010864 <compress_kitiku+0x29c>
 8010826:	8afa      	ldrh	r2, [r7, #22]
 8010828:	8a3b      	ldrh	r3, [r7, #16]
 801082a:	429a      	cmp	r2, r3
 801082c:	d81a      	bhi.n	8010864 <compress_kitiku+0x29c>
 801082e:	8afa      	ldrh	r2, [r7, #22]
 8010830:	8a7b      	ldrh	r3, [r7, #18]
 8010832:	429a      	cmp	r2, r3
 8010834:	d816      	bhi.n	8010864 <compress_kitiku+0x29c>
		// 直進
			if(look_f){
 8010836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801083a:	2b00      	cmp	r3, #0
 801083c:	d005      	beq.n	801084a <compress_kitiku+0x282>
				kitiku_distance += 2;
 801083e:	4b05      	ldr	r3, [pc, #20]	; (8010854 <compress_kitiku+0x28c>)
 8010840:	681b      	ldr	r3, [r3, #0]
 8010842:	3302      	adds	r3, #2
 8010844:	4a03      	ldr	r2, [pc, #12]	; (8010854 <compress_kitiku+0x28c>)
 8010846:	6013      	str	r3, [r2, #0]
 8010848:	e00c      	b.n	8010864 <compress_kitiku+0x29c>
			}else{
				kitiku = 0;
 801084a:	4b03      	ldr	r3, [pc, #12]	; (8010858 <compress_kitiku+0x290>)
 801084c:	2200      	movs	r2, #0
 801084e:	701a      	strb	r2, [r3, #0]
				break;
 8010850:	e06d      	b.n	801092e <compress_kitiku+0x366>
 8010852:	bf00      	nop
 8010854:	2000082c 	.word	0x2000082c
 8010858:	20000829 	.word	0x20000829
 801085c:	20000d30 	.word	0x20000d30
 8010860:	20000807 	.word	0x20000807
			}
		}
		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8010864:	8aba      	ldrh	r2, [r7, #20]
 8010866:	8afb      	ldrh	r3, [r7, #22]
 8010868:	429a      	cmp	r2, r3
 801086a:	d213      	bcs.n	8010894 <compress_kitiku+0x2cc>
 801086c:	8aba      	ldrh	r2, [r7, #20]
 801086e:	8a3b      	ldrh	r3, [r7, #16]
 8010870:	429a      	cmp	r2, r3
 8010872:	d80f      	bhi.n	8010894 <compress_kitiku+0x2cc>
 8010874:	8aba      	ldrh	r2, [r7, #20]
 8010876:	8a7b      	ldrh	r3, [r7, #18]
 8010878:	429a      	cmp	r2, r3
 801087a:	d80b      	bhi.n	8010894 <compress_kitiku+0x2cc>
		// 右旋回
			if(look_r){
 801087c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010880:	2b00      	cmp	r3, #0
 8010882:	d003      	beq.n	801088c <compress_kitiku+0x2c4>
				kitiku = 0;
 8010884:	4b40      	ldr	r3, [pc, #256]	; (8010988 <compress_kitiku+0x3c0>)
 8010886:	2200      	movs	r2, #0
 8010888:	701a      	strb	r2, [r3, #0]
				break;
 801088a:	e050      	b.n	801092e <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 801088c:	4b3e      	ldr	r3, [pc, #248]	; (8010988 <compress_kitiku+0x3c0>)
 801088e:	2200      	movs	r2, #0
 8010890:	701a      	strb	r2, [r3, #0]
				break;
 8010892:	e04c      	b.n	801092e <compress_kitiku+0x366>
			}
			direction_now++;
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 8010894:	8a3a      	ldrh	r2, [r7, #16]
 8010896:	8afb      	ldrh	r3, [r7, #22]
 8010898:	429a      	cmp	r2, r3
 801089a:	d213      	bcs.n	80108c4 <compress_kitiku+0x2fc>
 801089c:	8a3a      	ldrh	r2, [r7, #16]
 801089e:	8abb      	ldrh	r3, [r7, #20]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d20f      	bcs.n	80108c4 <compress_kitiku+0x2fc>
 80108a4:	8a3a      	ldrh	r2, [r7, #16]
 80108a6:	8a7b      	ldrh	r3, [r7, #18]
 80108a8:	429a      	cmp	r2, r3
 80108aa:	d80b      	bhi.n	80108c4 <compress_kitiku+0x2fc>
		// 左旋回
			if(look_l){
 80108ac:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <compress_kitiku+0x2f4>
				kitiku = 0;
 80108b4:	4b34      	ldr	r3, [pc, #208]	; (8010988 <compress_kitiku+0x3c0>)
 80108b6:	2200      	movs	r2, #0
 80108b8:	701a      	strb	r2, [r3, #0]
				break;
 80108ba:	e038      	b.n	801092e <compress_kitiku+0x366>
			}else{
				kitiku = 0;
 80108bc:	4b32      	ldr	r3, [pc, #200]	; (8010988 <compress_kitiku+0x3c0>)
 80108be:	2200      	movs	r2, #0
 80108c0:	701a      	strb	r2, [r3, #0]
				break;
 80108c2:	e034      	b.n	801092e <compress_kitiku+0x366>
			}
			direction_now--;
		}
		if(back_count < front_count && back_count < right_count
 80108c4:	8a7a      	ldrh	r2, [r7, #18]
 80108c6:	8afb      	ldrh	r3, [r7, #22]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d20b      	bcs.n	80108e4 <compress_kitiku+0x31c>
 80108cc:	8a7a      	ldrh	r2, [r7, #18]
 80108ce:	8abb      	ldrh	r3, [r7, #20]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d207      	bcs.n	80108e4 <compress_kitiku+0x31c>
								&& back_count < left_count){
 80108d4:	8a7a      	ldrh	r2, [r7, #18]
 80108d6:	8a3b      	ldrh	r3, [r7, #16]
 80108d8:	429a      	cmp	r2, r3
 80108da:	d203      	bcs.n	80108e4 <compress_kitiku+0x31c>
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
		//180度旋回(前壁がある場合は尻当てを行うことで位置修正)
			kitiku = 0;
 80108dc:	4b2a      	ldr	r3, [pc, #168]	; (8010988 <compress_kitiku+0x3c0>)
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
			break;
 80108e2:	e024      	b.n	801092e <compress_kitiku+0x366>
			direction_now+=2;
		}


		if (direction_now == 5) {
 80108e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e6:	2b05      	cmp	r3, #5
 80108e8:	d101      	bne.n	80108ee <compress_kitiku+0x326>
			direction_now = 1;
 80108ea:	2301      	movs	r3, #1
 80108ec:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 6) {
 80108ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108f0:	2b06      	cmp	r3, #6
 80108f2:	d101      	bne.n	80108f8 <compress_kitiku+0x330>
			direction_now = 2;
 80108f4:	2302      	movs	r3, #2
 80108f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == 0) {
 80108f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <compress_kitiku+0x33a>
			direction_now = 4;
 80108fe:	2304      	movs	r3, #4
 8010900:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (direction_now == -1) {
 8010902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010908:	d101      	bne.n	801090e <compress_kitiku+0x346>
			direction_now = 3;
 801090a:	2303      	movs	r3, #3
 801090c:	64fb      	str	r3, [r7, #76]	; 0x4c
		}
		if (kitiku == 0) {
 801090e:	4b1e      	ldr	r3, [pc, #120]	; (8010988 <compress_kitiku+0x3c0>)
 8010910:	781b      	ldrb	r3, [r3, #0]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d00a      	beq.n	801092c <compress_kitiku+0x364>
		update_coordinate(&x_now,&y_now,direction_now);
 8010916:	e66c      	b.n	80105f2 <compress_kitiku+0x2a>
			break;
 8010918:	bf00      	nop
 801091a:	e008      	b.n	801092e <compress_kitiku+0x366>
		if (direction_now==1 && y_now>=14) {break;}
 801091c:	bf00      	nop
 801091e:	e006      	b.n	801092e <compress_kitiku+0x366>
		if (direction_now==2 && x_now>=14) {break;}
 8010920:	bf00      	nop
 8010922:	e004      	b.n	801092e <compress_kitiku+0x366>
		if (direction_now==3 && y_now<=1) {break;}
 8010924:	bf00      	nop
 8010926:	e002      	b.n	801092e <compress_kitiku+0x366>
		if (direction_now==4 && x_now<=1) {break;}
 8010928:	bf00      	nop
 801092a:	e000      	b.n	801092e <compress_kitiku+0x366>

			break;
 801092c:	bf00      	nop
		}

	}

	int direction2=direction_now+2;
 801092e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010930:	3302      	adds	r3, #2
 8010932:	643b      	str	r3, [r7, #64]	; 0x40
	if (direction2 == 5) {
 8010934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010936:	2b05      	cmp	r3, #5
 8010938:	d101      	bne.n	801093e <compress_kitiku+0x376>
				direction2 = 1;
 801093a:	2301      	movs	r3, #1
 801093c:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 6) {
 801093e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010940:	2b06      	cmp	r3, #6
 8010942:	d101      	bne.n	8010948 <compress_kitiku+0x380>
				direction2 = 2;
 8010944:	2302      	movs	r3, #2
 8010946:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == 0) {
 8010948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801094a:	2b00      	cmp	r3, #0
 801094c:	d101      	bne.n	8010952 <compress_kitiku+0x38a>
				direction2 = 4;
 801094e:	2304      	movs	r3, #4
 8010950:	643b      	str	r3, [r7, #64]	; 0x40
			}
			if (direction2 == -1) {
 8010952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010958:	d101      	bne.n	801095e <compress_kitiku+0x396>
				direction2 = 3;
 801095a:	2303      	movs	r3, #3
 801095c:	643b      	str	r3, [r7, #64]	; 0x40
			}

	update_coordinate(&x_now,&y_now,direction2);
 801095e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8010962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010966:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010968:	4618      	mov	r0, r3
 801096a:	f7fd facb 	bl	800df04 <update_coordinate>

	*x=x_now;
 801096e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010970:	68fb      	ldr	r3, [r7, #12]
 8010972:	601a      	str	r2, [r3, #0]
	*y=y_now;
 8010974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	601a      	str	r2, [r3, #0]
	*direction=direction_now;
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801097e:	601a      	str	r2, [r3, #0]

}
 8010980:	bf00      	nop
 8010982:	3754      	adds	r7, #84	; 0x54
 8010984:	46bd      	mov	sp, r7
 8010986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010988:	20000829 	.word	0x20000829

0801098c <update_wall>:

}



void update_wall(int x,int y,int direction,_Bool front_wall,_Bool right_wall,_Bool left_wall){
 801098c:	b480      	push	{r7}
 801098e:	b085      	sub	sp, #20
 8010990:	af00      	add	r7, sp, #0
 8010992:	60f8      	str	r0, [r7, #12]
 8010994:	60b9      	str	r1, [r7, #8]
 8010996:	607a      	str	r2, [r7, #4]
 8010998:	70fb      	strb	r3, [r7, #3]
// x:x座標, y:y座標, direction:向き(北1東2南3西4),
//front_wall:前壁の有無(Ture=1 false=0), right_wall:右壁の有無(Ture=1 false=0), left_wall:左壁の有無(Ture=1 false=0)

	switch (direction) {
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	3b01      	subs	r3, #1
 801099e:	2b03      	cmp	r3, #3
 80109a0:	f200 8272 	bhi.w	8010e88 <update_wall+0x4fc>
 80109a4:	a201      	add	r2, pc, #4	; (adr r2, 80109ac <update_wall+0x20>)
 80109a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109aa:	bf00      	nop
 80109ac:	080109bd 	.word	0x080109bd
 80109b0:	08010ae3 	.word	0x08010ae3
 80109b4:	08010c19 	.word	0x08010c19
 80109b8:	08010d47 	.word	0x08010d47
	case 1:
		if (y <= 14) {
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	2b0e      	cmp	r3, #14
 80109c0:	dc2e      	bgt.n	8010a20 <update_wall+0x94>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 80109c2:	4a94      	ldr	r2, [pc, #592]	; (8010c14 <update_wall+0x288>)
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	332c      	adds	r3, #44	; 0x2c
 80109c8:	005b      	lsls	r3, r3, #1
 80109ca:	4413      	add	r3, r2
 80109cc:	885b      	ldrh	r3, [r3, #2]
 80109ce:	b21a      	sxth	r2, r3
 80109d0:	2101      	movs	r1, #1
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	fa01 f303 	lsl.w	r3, r1, r3
 80109d8:	b21b      	sxth	r3, r3
 80109da:	4313      	orrs	r3, r2
 80109dc:	b21b      	sxth	r3, r3
 80109de:	b299      	uxth	r1, r3
 80109e0:	4a8c      	ldr	r2, [pc, #560]	; (8010c14 <update_wall+0x288>)
 80109e2:	68bb      	ldr	r3, [r7, #8]
 80109e4:	332c      	adds	r3, #44	; 0x2c
 80109e6:	005b      	lsls	r3, r3, #1
 80109e8:	4413      	add	r3, r2
 80109ea:	460a      	mov	r2, r1
 80109ec:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y] = wall.column[y] | (1 << x);}
 80109ee:	78fb      	ldrb	r3, [r7, #3]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d015      	beq.n	8010a20 <update_wall+0x94>
 80109f4:	4a87      	ldr	r2, [pc, #540]	; (8010c14 <update_wall+0x288>)
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	330c      	adds	r3, #12
 80109fa:	005b      	lsls	r3, r3, #1
 80109fc:	4413      	add	r3, r2
 80109fe:	88db      	ldrh	r3, [r3, #6]
 8010a00:	b21a      	sxth	r2, r3
 8010a02:	2101      	movs	r1, #1
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	fa01 f303 	lsl.w	r3, r1, r3
 8010a0a:	b21b      	sxth	r3, r3
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	b21b      	sxth	r3, r3
 8010a10:	b299      	uxth	r1, r3
 8010a12:	4a80      	ldr	r2, [pc, #512]	; (8010c14 <update_wall+0x288>)
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	330c      	adds	r3, #12
 8010a18:	005b      	lsls	r3, r3, #1
 8010a1a:	4413      	add	r3, r2
 8010a1c:	460a      	mov	r2, r1
 8010a1e:	80da      	strh	r2, [r3, #6]
		}

		if (x >= 1) {
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	dd2d      	ble.n	8010a82 <update_wall+0xf6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3b01      	subs	r3, #1
 8010a2a:	4a7a      	ldr	r2, [pc, #488]	; (8010c14 <update_wall+0x288>)
 8010a2c:	331c      	adds	r3, #28
 8010a2e:	005b      	lsls	r3, r3, #1
 8010a30:	4413      	add	r3, r2
 8010a32:	889b      	ldrh	r3, [r3, #4]
 8010a34:	b21a      	sxth	r2, r3
 8010a36:	2101      	movs	r1, #1
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8010a3e:	b21b      	sxth	r3, r3
 8010a40:	4313      	orrs	r3, r2
 8010a42:	b21a      	sxth	r2, r3
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	3b01      	subs	r3, #1
 8010a48:	b291      	uxth	r1, r2
 8010a4a:	4a72      	ldr	r2, [pc, #456]	; (8010c14 <update_wall+0x288>)
 8010a4c:	331c      	adds	r3, #28
 8010a4e:	005b      	lsls	r3, r3, #1
 8010a50:	4413      	add	r3, r2
 8010a52:	460a      	mov	r2, r1
 8010a54:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010a56:	7f3b      	ldrb	r3, [r7, #28]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d012      	beq.n	8010a82 <update_wall+0xf6>
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3b01      	subs	r3, #1
 8010a60:	4a6c      	ldr	r2, [pc, #432]	; (8010c14 <update_wall+0x288>)
 8010a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a66:	b21a      	sxth	r2, r3
 8010a68:	2101      	movs	r1, #1
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8010a70:	b21b      	sxth	r3, r3
 8010a72:	4313      	orrs	r3, r2
 8010a74:	b21a      	sxth	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	3b01      	subs	r3, #1
 8010a7a:	b291      	uxth	r1, r2
 8010a7c:	4a65      	ldr	r2, [pc, #404]	; (8010c14 <update_wall+0x288>)
 8010a7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x <= 14) {
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	2b0e      	cmp	r3, #14
 8010a86:	f300 81f8 	bgt.w	8010e7a <update_wall+0x4ee>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010a8a:	4a62      	ldr	r2, [pc, #392]	; (8010c14 <update_wall+0x288>)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	331c      	adds	r3, #28
 8010a90:	005b      	lsls	r3, r3, #1
 8010a92:	4413      	add	r3, r2
 8010a94:	889b      	ldrh	r3, [r3, #4]
 8010a96:	b21a      	sxth	r2, r3
 8010a98:	2101      	movs	r1, #1
 8010a9a:	68bb      	ldr	r3, [r7, #8]
 8010a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010aa0:	b21b      	sxth	r3, r3
 8010aa2:	4313      	orrs	r3, r2
 8010aa4:	b21b      	sxth	r3, r3
 8010aa6:	b299      	uxth	r1, r3
 8010aa8:	4a5a      	ldr	r2, [pc, #360]	; (8010c14 <update_wall+0x288>)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	331c      	adds	r3, #28
 8010aae:	005b      	lsls	r3, r3, #1
 8010ab0:	4413      	add	r3, r2
 8010ab2:	460a      	mov	r2, r1
 8010ab4:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010ab6:	7e3b      	ldrb	r3, [r7, #24]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 81de 	beq.w	8010e7a <update_wall+0x4ee>
 8010abe:	4a55      	ldr	r2, [pc, #340]	; (8010c14 <update_wall+0x288>)
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ac6:	b21a      	sxth	r2, r3
 8010ac8:	2101      	movs	r1, #1
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	fa01 f303 	lsl.w	r3, r1, r3
 8010ad0:	b21b      	sxth	r3, r3
 8010ad2:	4313      	orrs	r3, r2
 8010ad4:	b21b      	sxth	r3, r3
 8010ad6:	b299      	uxth	r1, r3
 8010ad8:	4a4e      	ldr	r2, [pc, #312]	; (8010c14 <update_wall+0x288>)
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010ae0:	e1cb      	b.n	8010e7a <update_wall+0x4ee>
	case 2:
		if (x <= 14) {
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	2b0e      	cmp	r3, #14
 8010ae6:	dc29      	bgt.n	8010b3c <update_wall+0x1b0>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010ae8:	4a4a      	ldr	r2, [pc, #296]	; (8010c14 <update_wall+0x288>)
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	331c      	adds	r3, #28
 8010aee:	005b      	lsls	r3, r3, #1
 8010af0:	4413      	add	r3, r2
 8010af2:	889b      	ldrh	r3, [r3, #4]
 8010af4:	b21a      	sxth	r2, r3
 8010af6:	2101      	movs	r1, #1
 8010af8:	68bb      	ldr	r3, [r7, #8]
 8010afa:	fa01 f303 	lsl.w	r3, r1, r3
 8010afe:	b21b      	sxth	r3, r3
 8010b00:	4313      	orrs	r3, r2
 8010b02:	b21b      	sxth	r3, r3
 8010b04:	b299      	uxth	r1, r3
 8010b06:	4a43      	ldr	r2, [pc, #268]	; (8010c14 <update_wall+0x288>)
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	331c      	adds	r3, #28
 8010b0c:	005b      	lsls	r3, r3, #1
 8010b0e:	4413      	add	r3, r2
 8010b10:	460a      	mov	r2, r1
 8010b12:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010b14:	78fb      	ldrb	r3, [r7, #3]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d010      	beq.n	8010b3c <update_wall+0x1b0>
 8010b1a:	4a3e      	ldr	r2, [pc, #248]	; (8010c14 <update_wall+0x288>)
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b22:	b21a      	sxth	r2, r3
 8010b24:	2101      	movs	r1, #1
 8010b26:	68bb      	ldr	r3, [r7, #8]
 8010b28:	fa01 f303 	lsl.w	r3, r1, r3
 8010b2c:	b21b      	sxth	r3, r3
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	b21b      	sxth	r3, r3
 8010b32:	b299      	uxth	r1, r3
 8010b34:	4a37      	ldr	r2, [pc, #220]	; (8010c14 <update_wall+0x288>)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y <= 14) {
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	2b0e      	cmp	r3, #14
 8010b40:	dc2e      	bgt.n	8010ba0 <update_wall+0x214>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010b42:	4a34      	ldr	r2, [pc, #208]	; (8010c14 <update_wall+0x288>)
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	332c      	adds	r3, #44	; 0x2c
 8010b48:	005b      	lsls	r3, r3, #1
 8010b4a:	4413      	add	r3, r2
 8010b4c:	885b      	ldrh	r3, [r3, #2]
 8010b4e:	b21a      	sxth	r2, r3
 8010b50:	2101      	movs	r1, #1
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	fa01 f303 	lsl.w	r3, r1, r3
 8010b58:	b21b      	sxth	r3, r3
 8010b5a:	4313      	orrs	r3, r2
 8010b5c:	b21b      	sxth	r3, r3
 8010b5e:	b299      	uxth	r1, r3
 8010b60:	4a2c      	ldr	r2, [pc, #176]	; (8010c14 <update_wall+0x288>)
 8010b62:	68bb      	ldr	r3, [r7, #8]
 8010b64:	332c      	adds	r3, #44	; 0x2c
 8010b66:	005b      	lsls	r3, r3, #1
 8010b68:	4413      	add	r3, r2
 8010b6a:	460a      	mov	r2, r1
 8010b6c:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010b6e:	7f3b      	ldrb	r3, [r7, #28]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d015      	beq.n	8010ba0 <update_wall+0x214>
 8010b74:	4a27      	ldr	r2, [pc, #156]	; (8010c14 <update_wall+0x288>)
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	330c      	adds	r3, #12
 8010b7a:	005b      	lsls	r3, r3, #1
 8010b7c:	4413      	add	r3, r2
 8010b7e:	88db      	ldrh	r3, [r3, #6]
 8010b80:	b21a      	sxth	r2, r3
 8010b82:	2101      	movs	r1, #1
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	fa01 f303 	lsl.w	r3, r1, r3
 8010b8a:	b21b      	sxth	r3, r3
 8010b8c:	4313      	orrs	r3, r2
 8010b8e:	b21b      	sxth	r3, r3
 8010b90:	b299      	uxth	r1, r3
 8010b92:	4a20      	ldr	r2, [pc, #128]	; (8010c14 <update_wall+0x288>)
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	330c      	adds	r3, #12
 8010b98:	005b      	lsls	r3, r3, #1
 8010b9a:	4413      	add	r3, r2
 8010b9c:	460a      	mov	r2, r1
 8010b9e:	80da      	strh	r2, [r3, #6]
		}

		if (y >= 1) {
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	f340 816b 	ble.w	8010e7e <update_wall+0x4f2>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	3b01      	subs	r3, #1
 8010bac:	4a19      	ldr	r2, [pc, #100]	; (8010c14 <update_wall+0x288>)
 8010bae:	332c      	adds	r3, #44	; 0x2c
 8010bb0:	005b      	lsls	r3, r3, #1
 8010bb2:	4413      	add	r3, r2
 8010bb4:	885b      	ldrh	r3, [r3, #2]
 8010bb6:	b21a      	sxth	r2, r3
 8010bb8:	2101      	movs	r1, #1
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8010bc0:	b21b      	sxth	r3, r3
 8010bc2:	4313      	orrs	r3, r2
 8010bc4:	b21a      	sxth	r2, r3
 8010bc6:	68bb      	ldr	r3, [r7, #8]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	b291      	uxth	r1, r2
 8010bcc:	4a11      	ldr	r2, [pc, #68]	; (8010c14 <update_wall+0x288>)
 8010bce:	332c      	adds	r3, #44	; 0x2c
 8010bd0:	005b      	lsls	r3, r3, #1
 8010bd2:	4413      	add	r3, r2
 8010bd4:	460a      	mov	r2, r1
 8010bd6:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010bd8:	7e3b      	ldrb	r3, [r7, #24]
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 814f 	beq.w	8010e7e <update_wall+0x4f2>
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	3b01      	subs	r3, #1
 8010be4:	4a0b      	ldr	r2, [pc, #44]	; (8010c14 <update_wall+0x288>)
 8010be6:	330c      	adds	r3, #12
 8010be8:	005b      	lsls	r3, r3, #1
 8010bea:	4413      	add	r3, r2
 8010bec:	88db      	ldrh	r3, [r3, #6]
 8010bee:	b21a      	sxth	r2, r3
 8010bf0:	2101      	movs	r1, #1
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8010bf8:	b21b      	sxth	r3, r3
 8010bfa:	4313      	orrs	r3, r2
 8010bfc:	b21a      	sxth	r2, r3
 8010bfe:	68bb      	ldr	r3, [r7, #8]
 8010c00:	3b01      	subs	r3, #1
 8010c02:	b291      	uxth	r1, r2
 8010c04:	4a03      	ldr	r2, [pc, #12]	; (8010c14 <update_wall+0x288>)
 8010c06:	330c      	adds	r3, #12
 8010c08:	005b      	lsls	r3, r3, #1
 8010c0a:	4413      	add	r3, r2
 8010c0c:	460a      	mov	r2, r1
 8010c0e:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010c10:	e135      	b.n	8010e7e <update_wall+0x4f2>
 8010c12:	bf00      	nop
 8010c14:	20000c3c 	.word	0x20000c3c
	case 3:
		if (y >= 1) {
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	dd32      	ble.n	8010c84 <update_wall+0x2f8>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010c1e:	68bb      	ldr	r3, [r7, #8]
 8010c20:	3b01      	subs	r3, #1
 8010c22:	4a9c      	ldr	r2, [pc, #624]	; (8010e94 <update_wall+0x508>)
 8010c24:	332c      	adds	r3, #44	; 0x2c
 8010c26:	005b      	lsls	r3, r3, #1
 8010c28:	4413      	add	r3, r2
 8010c2a:	885b      	ldrh	r3, [r3, #2]
 8010c2c:	b21a      	sxth	r2, r3
 8010c2e:	2101      	movs	r1, #1
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	fa01 f303 	lsl.w	r3, r1, r3
 8010c36:	b21b      	sxth	r3, r3
 8010c38:	4313      	orrs	r3, r2
 8010c3a:	b21a      	sxth	r2, r3
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	3b01      	subs	r3, #1
 8010c40:	b291      	uxth	r1, r2
 8010c42:	4a94      	ldr	r2, [pc, #592]	; (8010e94 <update_wall+0x508>)
 8010c44:	332c      	adds	r3, #44	; 0x2c
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	4413      	add	r3, r2
 8010c4a:	460a      	mov	r2, r1
 8010c4c:	805a      	strh	r2, [r3, #2]
			if(front_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010c4e:	78fb      	ldrb	r3, [r7, #3]
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d017      	beq.n	8010c84 <update_wall+0x2f8>
 8010c54:	68bb      	ldr	r3, [r7, #8]
 8010c56:	3b01      	subs	r3, #1
 8010c58:	4a8e      	ldr	r2, [pc, #568]	; (8010e94 <update_wall+0x508>)
 8010c5a:	330c      	adds	r3, #12
 8010c5c:	005b      	lsls	r3, r3, #1
 8010c5e:	4413      	add	r3, r2
 8010c60:	88db      	ldrh	r3, [r3, #6]
 8010c62:	b21a      	sxth	r2, r3
 8010c64:	2101      	movs	r1, #1
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	fa01 f303 	lsl.w	r3, r1, r3
 8010c6c:	b21b      	sxth	r3, r3
 8010c6e:	4313      	orrs	r3, r2
 8010c70:	b21a      	sxth	r2, r3
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	3b01      	subs	r3, #1
 8010c76:	b291      	uxth	r1, r2
 8010c78:	4a86      	ldr	r2, [pc, #536]	; (8010e94 <update_wall+0x508>)
 8010c7a:	330c      	adds	r3, #12
 8010c7c:	005b      	lsls	r3, r3, #1
 8010c7e:	4413      	add	r3, r2
 8010c80:	460a      	mov	r2, r1
 8010c82:	80da      	strh	r2, [r3, #6]
		}

		if (x <= 14) {
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	2b0e      	cmp	r3, #14
 8010c88:	dc29      	bgt.n	8010cde <update_wall+0x352>
			wall.row_look[x] = wall.row_look[x] | (1 << y);
 8010c8a:	4a82      	ldr	r2, [pc, #520]	; (8010e94 <update_wall+0x508>)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	331c      	adds	r3, #28
 8010c90:	005b      	lsls	r3, r3, #1
 8010c92:	4413      	add	r3, r2
 8010c94:	889b      	ldrh	r3, [r3, #4]
 8010c96:	b21a      	sxth	r2, r3
 8010c98:	2101      	movs	r1, #1
 8010c9a:	68bb      	ldr	r3, [r7, #8]
 8010c9c:	fa01 f303 	lsl.w	r3, r1, r3
 8010ca0:	b21b      	sxth	r3, r3
 8010ca2:	4313      	orrs	r3, r2
 8010ca4:	b21b      	sxth	r3, r3
 8010ca6:	b299      	uxth	r1, r3
 8010ca8:	4a7a      	ldr	r2, [pc, #488]	; (8010e94 <update_wall+0x508>)
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	331c      	adds	r3, #28
 8010cae:	005b      	lsls	r3, r3, #1
 8010cb0:	4413      	add	r3, r2
 8010cb2:	460a      	mov	r2, r1
 8010cb4:	809a      	strh	r2, [r3, #4]
			if(left_wall){wall.row[x] = wall.row[x] | (1 << y);}
 8010cb6:	7f3b      	ldrb	r3, [r7, #28]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d010      	beq.n	8010cde <update_wall+0x352>
 8010cbc:	4a75      	ldr	r2, [pc, #468]	; (8010e94 <update_wall+0x508>)
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cc4:	b21a      	sxth	r2, r3
 8010cc6:	2101      	movs	r1, #1
 8010cc8:	68bb      	ldr	r3, [r7, #8]
 8010cca:	fa01 f303 	lsl.w	r3, r1, r3
 8010cce:	b21b      	sxth	r3, r3
 8010cd0:	4313      	orrs	r3, r2
 8010cd2:	b21b      	sxth	r3, r3
 8010cd4:	b299      	uxth	r1, r3
 8010cd6:	4a6f      	ldr	r2, [pc, #444]	; (8010e94 <update_wall+0x508>)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (x >= 1) {
 8010cde:	68fb      	ldr	r3, [r7, #12]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f340 80ce 	ble.w	8010e82 <update_wall+0x4f6>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010ce6:	68fb      	ldr	r3, [r7, #12]
 8010ce8:	3b01      	subs	r3, #1
 8010cea:	4a6a      	ldr	r2, [pc, #424]	; (8010e94 <update_wall+0x508>)
 8010cec:	331c      	adds	r3, #28
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	4413      	add	r3, r2
 8010cf2:	889b      	ldrh	r3, [r3, #4]
 8010cf4:	b21a      	sxth	r2, r3
 8010cf6:	2101      	movs	r1, #1
 8010cf8:	68bb      	ldr	r3, [r7, #8]
 8010cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8010cfe:	b21b      	sxth	r3, r3
 8010d00:	4313      	orrs	r3, r2
 8010d02:	b21a      	sxth	r2, r3
 8010d04:	68fb      	ldr	r3, [r7, #12]
 8010d06:	3b01      	subs	r3, #1
 8010d08:	b291      	uxth	r1, r2
 8010d0a:	4a62      	ldr	r2, [pc, #392]	; (8010e94 <update_wall+0x508>)
 8010d0c:	331c      	adds	r3, #28
 8010d0e:	005b      	lsls	r3, r3, #1
 8010d10:	4413      	add	r3, r2
 8010d12:	460a      	mov	r2, r1
 8010d14:	809a      	strh	r2, [r3, #4]
			if(right_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d16:	7e3b      	ldrb	r3, [r7, #24]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	f000 80b2 	beq.w	8010e82 <update_wall+0x4f6>
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	3b01      	subs	r3, #1
 8010d22:	4a5c      	ldr	r2, [pc, #368]	; (8010e94 <update_wall+0x508>)
 8010d24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d28:	b21a      	sxth	r2, r3
 8010d2a:	2101      	movs	r1, #1
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d32:	b21b      	sxth	r3, r3
 8010d34:	4313      	orrs	r3, r2
 8010d36:	b21a      	sxth	r2, r3
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	3b01      	subs	r3, #1
 8010d3c:	b291      	uxth	r1, r2
 8010d3e:	4a55      	ldr	r2, [pc, #340]	; (8010e94 <update_wall+0x508>)
 8010d40:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		break;
 8010d44:	e09d      	b.n	8010e82 <update_wall+0x4f6>
	case 4:
		if (x >= 1) {
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	dd2d      	ble.n	8010da8 <update_wall+0x41c>
			wall.row_look[x - 1] = wall.row_look[x - 1] | (1 << y);
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	4a50      	ldr	r2, [pc, #320]	; (8010e94 <update_wall+0x508>)
 8010d52:	331c      	adds	r3, #28
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	4413      	add	r3, r2
 8010d58:	889b      	ldrh	r3, [r3, #4]
 8010d5a:	b21a      	sxth	r2, r3
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	fa01 f303 	lsl.w	r3, r1, r3
 8010d64:	b21b      	sxth	r3, r3
 8010d66:	4313      	orrs	r3, r2
 8010d68:	b21a      	sxth	r2, r3
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3b01      	subs	r3, #1
 8010d6e:	b291      	uxth	r1, r2
 8010d70:	4a48      	ldr	r2, [pc, #288]	; (8010e94 <update_wall+0x508>)
 8010d72:	331c      	adds	r3, #28
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	4413      	add	r3, r2
 8010d78:	460a      	mov	r2, r1
 8010d7a:	809a      	strh	r2, [r3, #4]
			if(front_wall){wall.row[x - 1] = wall.row[x - 1] | (1 << y);}
 8010d7c:	78fb      	ldrb	r3, [r7, #3]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d012      	beq.n	8010da8 <update_wall+0x41c>
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	3b01      	subs	r3, #1
 8010d86:	4a43      	ldr	r2, [pc, #268]	; (8010e94 <update_wall+0x508>)
 8010d88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d8c:	b21a      	sxth	r2, r3
 8010d8e:	2101      	movs	r1, #1
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	fa01 f303 	lsl.w	r3, r1, r3
 8010d96:	b21b      	sxth	r3, r3
 8010d98:	4313      	orrs	r3, r2
 8010d9a:	b21a      	sxth	r2, r3
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	3b01      	subs	r3, #1
 8010da0:	b291      	uxth	r1, r2
 8010da2:	4a3c      	ldr	r2, [pc, #240]	; (8010e94 <update_wall+0x508>)
 8010da4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}

		if (y >= 1) {
 8010da8:	68bb      	ldr	r3, [r7, #8]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	dd32      	ble.n	8010e14 <update_wall+0x488>
			wall.column_look[y - 1] = wall.column_look[y - 1] | (1 << x);
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	3b01      	subs	r3, #1
 8010db2:	4a38      	ldr	r2, [pc, #224]	; (8010e94 <update_wall+0x508>)
 8010db4:	332c      	adds	r3, #44	; 0x2c
 8010db6:	005b      	lsls	r3, r3, #1
 8010db8:	4413      	add	r3, r2
 8010dba:	885b      	ldrh	r3, [r3, #2]
 8010dbc:	b21a      	sxth	r2, r3
 8010dbe:	2101      	movs	r1, #1
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8010dc6:	b21b      	sxth	r3, r3
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	b21a      	sxth	r2, r3
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	3b01      	subs	r3, #1
 8010dd0:	b291      	uxth	r1, r2
 8010dd2:	4a30      	ldr	r2, [pc, #192]	; (8010e94 <update_wall+0x508>)
 8010dd4:	332c      	adds	r3, #44	; 0x2c
 8010dd6:	005b      	lsls	r3, r3, #1
 8010dd8:	4413      	add	r3, r2
 8010dda:	460a      	mov	r2, r1
 8010ddc:	805a      	strh	r2, [r3, #2]
			if(left_wall){wall.column[y - 1] = wall.column[y - 1] | (1 << x);}
 8010dde:	7f3b      	ldrb	r3, [r7, #28]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d017      	beq.n	8010e14 <update_wall+0x488>
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	3b01      	subs	r3, #1
 8010de8:	4a2a      	ldr	r2, [pc, #168]	; (8010e94 <update_wall+0x508>)
 8010dea:	330c      	adds	r3, #12
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	4413      	add	r3, r2
 8010df0:	88db      	ldrh	r3, [r3, #6]
 8010df2:	b21a      	sxth	r2, r3
 8010df4:	2101      	movs	r1, #1
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	fa01 f303 	lsl.w	r3, r1, r3
 8010dfc:	b21b      	sxth	r3, r3
 8010dfe:	4313      	orrs	r3, r2
 8010e00:	b21a      	sxth	r2, r3
 8010e02:	68bb      	ldr	r3, [r7, #8]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	b291      	uxth	r1, r2
 8010e08:	4a22      	ldr	r2, [pc, #136]	; (8010e94 <update_wall+0x508>)
 8010e0a:	330c      	adds	r3, #12
 8010e0c:	005b      	lsls	r3, r3, #1
 8010e0e:	4413      	add	r3, r2
 8010e10:	460a      	mov	r2, r1
 8010e12:	80da      	strh	r2, [r3, #6]
		}

		if (y <= 14) {
 8010e14:	68bb      	ldr	r3, [r7, #8]
 8010e16:	2b0e      	cmp	r3, #14
 8010e18:	dc35      	bgt.n	8010e86 <update_wall+0x4fa>
			wall.column_look[y] = wall.column_look[y] | (1 << x);
 8010e1a:	4a1e      	ldr	r2, [pc, #120]	; (8010e94 <update_wall+0x508>)
 8010e1c:	68bb      	ldr	r3, [r7, #8]
 8010e1e:	332c      	adds	r3, #44	; 0x2c
 8010e20:	005b      	lsls	r3, r3, #1
 8010e22:	4413      	add	r3, r2
 8010e24:	885b      	ldrh	r3, [r3, #2]
 8010e26:	b21a      	sxth	r2, r3
 8010e28:	2101      	movs	r1, #1
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8010e30:	b21b      	sxth	r3, r3
 8010e32:	4313      	orrs	r3, r2
 8010e34:	b21b      	sxth	r3, r3
 8010e36:	b299      	uxth	r1, r3
 8010e38:	4a16      	ldr	r2, [pc, #88]	; (8010e94 <update_wall+0x508>)
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	332c      	adds	r3, #44	; 0x2c
 8010e3e:	005b      	lsls	r3, r3, #1
 8010e40:	4413      	add	r3, r2
 8010e42:	460a      	mov	r2, r1
 8010e44:	805a      	strh	r2, [r3, #2]
			if(right_wall){wall.column[y] = wall.column[y] | (1 << x);}
 8010e46:	7e3b      	ldrb	r3, [r7, #24]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d01c      	beq.n	8010e86 <update_wall+0x4fa>
 8010e4c:	4a11      	ldr	r2, [pc, #68]	; (8010e94 <update_wall+0x508>)
 8010e4e:	68bb      	ldr	r3, [r7, #8]
 8010e50:	330c      	adds	r3, #12
 8010e52:	005b      	lsls	r3, r3, #1
 8010e54:	4413      	add	r3, r2
 8010e56:	88db      	ldrh	r3, [r3, #6]
 8010e58:	b21a      	sxth	r2, r3
 8010e5a:	2101      	movs	r1, #1
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010e62:	b21b      	sxth	r3, r3
 8010e64:	4313      	orrs	r3, r2
 8010e66:	b21b      	sxth	r3, r3
 8010e68:	b299      	uxth	r1, r3
 8010e6a:	4a0a      	ldr	r2, [pc, #40]	; (8010e94 <update_wall+0x508>)
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	330c      	adds	r3, #12
 8010e70:	005b      	lsls	r3, r3, #1
 8010e72:	4413      	add	r3, r2
 8010e74:	460a      	mov	r2, r1
 8010e76:	80da      	strh	r2, [r3, #6]
		}

		break;
 8010e78:	e005      	b.n	8010e86 <update_wall+0x4fa>
		break;
 8010e7a:	bf00      	nop
 8010e7c:	e004      	b.n	8010e88 <update_wall+0x4fc>
		break;
 8010e7e:	bf00      	nop
 8010e80:	e002      	b.n	8010e88 <update_wall+0x4fc>
		break;
 8010e82:	bf00      	nop
 8010e84:	e000      	b.n	8010e88 <update_wall+0x4fc>
		break;
 8010e86:	bf00      	nop

	}


}
 8010e88:	bf00      	nop
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr
 8010e94:	20000c3c 	.word	0x20000c3c

08010e98 <get_wall>:



void get_wall(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8010e98:	b480      	push	{r7}
 8010e9a:	b085      	sub	sp, #20
 8010e9c:	af00      	add	r7, sp, #0
 8010e9e:	60f8      	str	r0, [r7, #12]
 8010ea0:	60b9      	str	r1, [r7, #8]
 8010ea2:	607a      	str	r2, [r7, #4]
 8010ea4:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	2201      	movs	r2, #1
 8010eaa:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	2201      	movs	r2, #1
 8010eb0:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 8010eb2:	69fb      	ldr	r3, [r7, #28]
 8010eb4:	2201      	movs	r2, #1
 8010eb6:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	2b03      	cmp	r3, #3
 8010ebe:	f200 8156 	bhi.w	801116e <get_wall+0x2d6>
 8010ec2:	a201      	add	r2, pc, #4	; (adr r2, 8010ec8 <get_wall+0x30>)
 8010ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ec8:	08010ed9 	.word	0x08010ed9
 8010ecc:	08010f79 	.word	0x08010f79
 8010ed0:	0801101d 	.word	0x0801101d
 8010ed4:	080110bd 	.word	0x080110bd
	case 1:
		if (y <= 14) {
 8010ed8:	68bb      	ldr	r3, [r7, #8]
 8010eda:	2b0e      	cmp	r3, #14
 8010edc:	dc17      	bgt.n	8010f0e <get_wall+0x76>
			*front_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010ede:	4aa7      	ldr	r2, [pc, #668]	; (801117c <get_wall+0x2e4>)
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	330c      	adds	r3, #12
 8010ee4:	005b      	lsls	r3, r3, #1
 8010ee6:	4413      	add	r3, r2
 8010ee8:	88db      	ldrh	r3, [r3, #6]
 8010eea:	4619      	mov	r1, r3
 8010eec:	2201      	movs	r2, #1
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8010ef4:	ea01 0203 	and.w	r2, r1, r3
 8010ef8:	2101      	movs	r1, #1
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	fa01 f303 	lsl.w	r3, r1, r3
 8010f00:	429a      	cmp	r2, r3
 8010f02:	bf0c      	ite	eq
 8010f04:	2301      	moveq	r3, #1
 8010f06:	2300      	movne	r3, #0
 8010f08:	b2da      	uxtb	r2, r3
 8010f0a:	683b      	ldr	r3, [r7, #0]
 8010f0c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	dd16      	ble.n	8010f42 <get_wall+0xaa>
			*left_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	3b01      	subs	r3, #1
 8010f18:	4a98      	ldr	r2, [pc, #608]	; (801117c <get_wall+0x2e4>)
 8010f1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f1e:	4619      	mov	r1, r3
 8010f20:	2201      	movs	r2, #1
 8010f22:	68bb      	ldr	r3, [r7, #8]
 8010f24:	fa02 f303 	lsl.w	r3, r2, r3
 8010f28:	ea01 0203 	and.w	r2, r1, r3
 8010f2c:	2101      	movs	r1, #1
 8010f2e:	68bb      	ldr	r3, [r7, #8]
 8010f30:	fa01 f303 	lsl.w	r3, r1, r3
 8010f34:	429a      	cmp	r2, r3
 8010f36:	bf0c      	ite	eq
 8010f38:	2301      	moveq	r3, #1
 8010f3a:	2300      	movne	r3, #0
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	2b0e      	cmp	r3, #14
 8010f46:	f300 810b 	bgt.w	8011160 <get_wall+0x2c8>
			*right_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f4a:	4a8c      	ldr	r2, [pc, #560]	; (801117c <get_wall+0x2e4>)
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f52:	4619      	mov	r1, r3
 8010f54:	2201      	movs	r2, #1
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5c:	ea01 0203 	and.w	r2, r1, r3
 8010f60:	2101      	movs	r1, #1
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	fa01 f303 	lsl.w	r3, r1, r3
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	bf0c      	ite	eq
 8010f6c:	2301      	moveq	r3, #1
 8010f6e:	2300      	movne	r3, #0
 8010f70:	b2da      	uxtb	r2, r3
 8010f72:	69bb      	ldr	r3, [r7, #24]
 8010f74:	701a      	strb	r2, [r3, #0]
		}
		break;
 8010f76:	e0f3      	b.n	8011160 <get_wall+0x2c8>
	case 2:
		if (x <= 14) {
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	2b0e      	cmp	r3, #14
 8010f7c:	dc15      	bgt.n	8010faa <get_wall+0x112>
			*front_wall=((wall.row[x] & (1 << y)) == (1 << y));
 8010f7e:	4a7f      	ldr	r2, [pc, #508]	; (801117c <get_wall+0x2e4>)
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f86:	4619      	mov	r1, r3
 8010f88:	2201      	movs	r2, #1
 8010f8a:	68bb      	ldr	r3, [r7, #8]
 8010f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010f90:	ea01 0203 	and.w	r2, r1, r3
 8010f94:	2101      	movs	r1, #1
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	fa01 f303 	lsl.w	r3, r1, r3
 8010f9c:	429a      	cmp	r2, r3
 8010f9e:	bf0c      	ite	eq
 8010fa0:	2301      	moveq	r3, #1
 8010fa2:	2300      	movne	r3, #0
 8010fa4:	b2da      	uxtb	r2, r3
 8010fa6:	683b      	ldr	r3, [r7, #0]
 8010fa8:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	2b0e      	cmp	r3, #14
 8010fae:	dc17      	bgt.n	8010fe0 <get_wall+0x148>
			*left_wall=((wall.column[y] & (1 << x)) == (1 << x));
 8010fb0:	4a72      	ldr	r2, [pc, #456]	; (801117c <get_wall+0x2e4>)
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	330c      	adds	r3, #12
 8010fb6:	005b      	lsls	r3, r3, #1
 8010fb8:	4413      	add	r3, r2
 8010fba:	88db      	ldrh	r3, [r3, #6]
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8010fc6:	ea01 0203 	and.w	r2, r1, r3
 8010fca:	2101      	movs	r1, #1
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	fa01 f303 	lsl.w	r3, r1, r3
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	bf0c      	ite	eq
 8010fd6:	2301      	moveq	r3, #1
 8010fd8:	2300      	movne	r3, #0
 8010fda:	b2da      	uxtb	r2, r3
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	f340 80be 	ble.w	8011164 <get_wall+0x2cc>
			*right_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8010fe8:	68bb      	ldr	r3, [r7, #8]
 8010fea:	3b01      	subs	r3, #1
 8010fec:	4a63      	ldr	r2, [pc, #396]	; (801117c <get_wall+0x2e4>)
 8010fee:	330c      	adds	r3, #12
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	4413      	add	r3, r2
 8010ff4:	88db      	ldrh	r3, [r3, #6]
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	2201      	movs	r2, #1
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8011000:	ea01 0203 	and.w	r2, r1, r3
 8011004:	2101      	movs	r1, #1
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	fa01 f303 	lsl.w	r3, r1, r3
 801100c:	429a      	cmp	r2, r3
 801100e:	bf0c      	ite	eq
 8011010:	2301      	moveq	r3, #1
 8011012:	2300      	movne	r3, #0
 8011014:	b2da      	uxtb	r2, r3
 8011016:	69bb      	ldr	r3, [r7, #24]
 8011018:	701a      	strb	r2, [r3, #0]
		}
		break;
 801101a:	e0a3      	b.n	8011164 <get_wall+0x2cc>
	case 3:
		if (y >= 1) {
 801101c:	68bb      	ldr	r3, [r7, #8]
 801101e:	2b00      	cmp	r3, #0
 8011020:	dd18      	ble.n	8011054 <get_wall+0x1bc>
			*front_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	3b01      	subs	r3, #1
 8011026:	4a55      	ldr	r2, [pc, #340]	; (801117c <get_wall+0x2e4>)
 8011028:	330c      	adds	r3, #12
 801102a:	005b      	lsls	r3, r3, #1
 801102c:	4413      	add	r3, r2
 801102e:	88db      	ldrh	r3, [r3, #6]
 8011030:	4619      	mov	r1, r3
 8011032:	2201      	movs	r2, #1
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	fa02 f303 	lsl.w	r3, r2, r3
 801103a:	ea01 0203 	and.w	r2, r1, r3
 801103e:	2101      	movs	r1, #1
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	fa01 f303 	lsl.w	r3, r1, r3
 8011046:	429a      	cmp	r2, r3
 8011048:	bf0c      	ite	eq
 801104a:	2301      	moveq	r3, #1
 801104c:	2300      	movne	r3, #0
 801104e:	b2da      	uxtb	r2, r3
 8011050:	683b      	ldr	r3, [r7, #0]
 8011052:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	2b0e      	cmp	r3, #14
 8011058:	dc15      	bgt.n	8011086 <get_wall+0x1ee>
			*left_wall=((wall.row[x] & (1 << y)) == (1 << y));
 801105a:	4a48      	ldr	r2, [pc, #288]	; (801117c <get_wall+0x2e4>)
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011062:	4619      	mov	r1, r3
 8011064:	2201      	movs	r2, #1
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	fa02 f303 	lsl.w	r3, r2, r3
 801106c:	ea01 0203 	and.w	r2, r1, r3
 8011070:	2101      	movs	r1, #1
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	fa01 f303 	lsl.w	r3, r1, r3
 8011078:	429a      	cmp	r2, r3
 801107a:	bf0c      	ite	eq
 801107c:	2301      	moveq	r3, #1
 801107e:	2300      	movne	r3, #0
 8011080:	b2da      	uxtb	r2, r3
 8011082:	69fb      	ldr	r3, [r7, #28]
 8011084:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	dd6d      	ble.n	8011168 <get_wall+0x2d0>
			*right_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	3b01      	subs	r3, #1
 8011090:	4a3a      	ldr	r2, [pc, #232]	; (801117c <get_wall+0x2e4>)
 8011092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011096:	4619      	mov	r1, r3
 8011098:	2201      	movs	r2, #1
 801109a:	68bb      	ldr	r3, [r7, #8]
 801109c:	fa02 f303 	lsl.w	r3, r2, r3
 80110a0:	ea01 0203 	and.w	r2, r1, r3
 80110a4:	2101      	movs	r1, #1
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	fa01 f303 	lsl.w	r3, r1, r3
 80110ac:	429a      	cmp	r2, r3
 80110ae:	bf0c      	ite	eq
 80110b0:	2301      	moveq	r3, #1
 80110b2:	2300      	movne	r3, #0
 80110b4:	b2da      	uxtb	r2, r3
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	701a      	strb	r2, [r3, #0]
		}
		break;
 80110ba:	e055      	b.n	8011168 <get_wall+0x2d0>
	case 4:
		if (x >= 1) {
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	dd16      	ble.n	80110f0 <get_wall+0x258>
			*front_wall=((wall.row[x - 1] & (1 << y)) == (1 << y));
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	4a2d      	ldr	r2, [pc, #180]	; (801117c <get_wall+0x2e4>)
 80110c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80110cc:	4619      	mov	r1, r3
 80110ce:	2201      	movs	r2, #1
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	fa02 f303 	lsl.w	r3, r2, r3
 80110d6:	ea01 0203 	and.w	r2, r1, r3
 80110da:	2101      	movs	r1, #1
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	fa01 f303 	lsl.w	r3, r1, r3
 80110e2:	429a      	cmp	r2, r3
 80110e4:	bf0c      	ite	eq
 80110e6:	2301      	moveq	r3, #1
 80110e8:	2300      	movne	r3, #0
 80110ea:	b2da      	uxtb	r2, r3
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	dd18      	ble.n	8011128 <get_wall+0x290>
			*left_wall=((wall.column[y - 1] & (1 << x)) == (1 << x));
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	4a20      	ldr	r2, [pc, #128]	; (801117c <get_wall+0x2e4>)
 80110fc:	330c      	adds	r3, #12
 80110fe:	005b      	lsls	r3, r3, #1
 8011100:	4413      	add	r3, r2
 8011102:	88db      	ldrh	r3, [r3, #6]
 8011104:	4619      	mov	r1, r3
 8011106:	2201      	movs	r2, #1
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	fa02 f303 	lsl.w	r3, r2, r3
 801110e:	ea01 0203 	and.w	r2, r1, r3
 8011112:	2101      	movs	r1, #1
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	fa01 f303 	lsl.w	r3, r1, r3
 801111a:	429a      	cmp	r2, r3
 801111c:	bf0c      	ite	eq
 801111e:	2301      	moveq	r3, #1
 8011120:	2300      	movne	r3, #0
 8011122:	b2da      	uxtb	r2, r3
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2b0e      	cmp	r3, #14
 801112c:	dc1e      	bgt.n	801116c <get_wall+0x2d4>
			*right_wall=((wall.column[y] & (1 << x)) == (1 << x));
 801112e:	4a13      	ldr	r2, [pc, #76]	; (801117c <get_wall+0x2e4>)
 8011130:	68bb      	ldr	r3, [r7, #8]
 8011132:	330c      	adds	r3, #12
 8011134:	005b      	lsls	r3, r3, #1
 8011136:	4413      	add	r3, r2
 8011138:	88db      	ldrh	r3, [r3, #6]
 801113a:	4619      	mov	r1, r3
 801113c:	2201      	movs	r2, #1
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	fa02 f303 	lsl.w	r3, r2, r3
 8011144:	ea01 0203 	and.w	r2, r1, r3
 8011148:	2101      	movs	r1, #1
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	fa01 f303 	lsl.w	r3, r1, r3
 8011150:	429a      	cmp	r2, r3
 8011152:	bf0c      	ite	eq
 8011154:	2301      	moveq	r3, #1
 8011156:	2300      	movne	r3, #0
 8011158:	b2da      	uxtb	r2, r3
 801115a:	69bb      	ldr	r3, [r7, #24]
 801115c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801115e:	e005      	b.n	801116c <get_wall+0x2d4>
		break;
 8011160:	bf00      	nop
 8011162:	e004      	b.n	801116e <get_wall+0x2d6>
		break;
 8011164:	bf00      	nop
 8011166:	e002      	b.n	801116e <get_wall+0x2d6>
		break;
 8011168:	bf00      	nop
 801116a:	e000      	b.n	801116e <get_wall+0x2d6>
		break;
 801116c:	bf00      	nop
	}

}
 801116e:	bf00      	nop
 8011170:	3714      	adds	r7, #20
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr
 801117a:	bf00      	nop
 801117c:	20000c3c 	.word	0x20000c3c

08011180 <get_wall_look>:


void get_wall_look(int x,int y,int direction,_Bool* front_wall,_Bool* right_wall,_Bool* left_wall){
 8011180:	b480      	push	{r7}
 8011182:	b085      	sub	sp, #20
 8011184:	af00      	add	r7, sp, #0
 8011186:	60f8      	str	r0, [r7, #12]
 8011188:	60b9      	str	r1, [r7, #8]
 801118a:	607a      	str	r2, [r7, #4]
 801118c:	603b      	str	r3, [r7, #0]
	*front_wall=1;
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	2201      	movs	r2, #1
 8011192:	701a      	strb	r2, [r3, #0]
	*right_wall=1;
 8011194:	69bb      	ldr	r3, [r7, #24]
 8011196:	2201      	movs	r2, #1
 8011198:	701a      	strb	r2, [r3, #0]
	*left_wall=1;
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	2201      	movs	r2, #1
 801119e:	701a      	strb	r2, [r3, #0]
	switch (direction) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	3b01      	subs	r3, #1
 80111a4:	2b03      	cmp	r3, #3
 80111a6:	f200 8162 	bhi.w	801146e <get_wall_look+0x2ee>
 80111aa:	a201      	add	r2, pc, #4	; (adr r2, 80111b0 <get_wall_look+0x30>)
 80111ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b0:	080111c1 	.word	0x080111c1
 80111b4:	08011269 	.word	0x08011269
 80111b8:	08011311 	.word	0x08011311
 80111bc:	080113b9 	.word	0x080113b9
	case 1:
		if (y <= 14) {
 80111c0:	68bb      	ldr	r3, [r7, #8]
 80111c2:	2b0e      	cmp	r3, #14
 80111c4:	dc17      	bgt.n	80111f6 <get_wall_look+0x76>
			*front_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80111c6:	4aad      	ldr	r2, [pc, #692]	; (801147c <get_wall_look+0x2fc>)
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	332c      	adds	r3, #44	; 0x2c
 80111cc:	005b      	lsls	r3, r3, #1
 80111ce:	4413      	add	r3, r2
 80111d0:	885b      	ldrh	r3, [r3, #2]
 80111d2:	4619      	mov	r1, r3
 80111d4:	2201      	movs	r2, #1
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	fa02 f303 	lsl.w	r3, r2, r3
 80111dc:	ea01 0203 	and.w	r2, r1, r3
 80111e0:	2101      	movs	r1, #1
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	fa01 f303 	lsl.w	r3, r1, r3
 80111e8:	429a      	cmp	r2, r3
 80111ea:	bf0c      	ite	eq
 80111ec:	2301      	moveq	r3, #1
 80111ee:	2300      	movne	r3, #0
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	dd18      	ble.n	801122e <get_wall_look+0xae>
			*left_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	3b01      	subs	r3, #1
 8011200:	4a9e      	ldr	r2, [pc, #632]	; (801147c <get_wall_look+0x2fc>)
 8011202:	331c      	adds	r3, #28
 8011204:	005b      	lsls	r3, r3, #1
 8011206:	4413      	add	r3, r2
 8011208:	889b      	ldrh	r3, [r3, #4]
 801120a:	4619      	mov	r1, r3
 801120c:	2201      	movs	r2, #1
 801120e:	68bb      	ldr	r3, [r7, #8]
 8011210:	fa02 f303 	lsl.w	r3, r2, r3
 8011214:	ea01 0203 	and.w	r2, r1, r3
 8011218:	2101      	movs	r1, #1
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	fa01 f303 	lsl.w	r3, r1, r3
 8011220:	429a      	cmp	r2, r3
 8011222:	bf0c      	ite	eq
 8011224:	2301      	moveq	r3, #1
 8011226:	2300      	movne	r3, #0
 8011228:	b2da      	uxtb	r2, r3
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	2b0e      	cmp	r3, #14
 8011232:	f300 8115 	bgt.w	8011460 <get_wall_look+0x2e0>
			*right_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 8011236:	4a91      	ldr	r2, [pc, #580]	; (801147c <get_wall_look+0x2fc>)
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	331c      	adds	r3, #28
 801123c:	005b      	lsls	r3, r3, #1
 801123e:	4413      	add	r3, r2
 8011240:	889b      	ldrh	r3, [r3, #4]
 8011242:	4619      	mov	r1, r3
 8011244:	2201      	movs	r2, #1
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	fa02 f303 	lsl.w	r3, r2, r3
 801124c:	ea01 0203 	and.w	r2, r1, r3
 8011250:	2101      	movs	r1, #1
 8011252:	68bb      	ldr	r3, [r7, #8]
 8011254:	fa01 f303 	lsl.w	r3, r1, r3
 8011258:	429a      	cmp	r2, r3
 801125a:	bf0c      	ite	eq
 801125c:	2301      	moveq	r3, #1
 801125e:	2300      	movne	r3, #0
 8011260:	b2da      	uxtb	r2, r3
 8011262:	69bb      	ldr	r3, [r7, #24]
 8011264:	701a      	strb	r2, [r3, #0]
		}
		break;
 8011266:	e0fb      	b.n	8011460 <get_wall_look+0x2e0>
	case 2:
		if (x <= 14) {
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2b0e      	cmp	r3, #14
 801126c:	dc17      	bgt.n	801129e <get_wall_look+0x11e>
			*front_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801126e:	4a83      	ldr	r2, [pc, #524]	; (801147c <get_wall_look+0x2fc>)
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	331c      	adds	r3, #28
 8011274:	005b      	lsls	r3, r3, #1
 8011276:	4413      	add	r3, r2
 8011278:	889b      	ldrh	r3, [r3, #4]
 801127a:	4619      	mov	r1, r3
 801127c:	2201      	movs	r2, #1
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	fa02 f303 	lsl.w	r3, r2, r3
 8011284:	ea01 0203 	and.w	r2, r1, r3
 8011288:	2101      	movs	r1, #1
 801128a:	68bb      	ldr	r3, [r7, #8]
 801128c:	fa01 f303 	lsl.w	r3, r1, r3
 8011290:	429a      	cmp	r2, r3
 8011292:	bf0c      	ite	eq
 8011294:	2301      	moveq	r3, #1
 8011296:	2300      	movne	r3, #0
 8011298:	b2da      	uxtb	r2, r3
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	2b0e      	cmp	r3, #14
 80112a2:	dc17      	bgt.n	80112d4 <get_wall_look+0x154>
			*left_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 80112a4:	4a75      	ldr	r2, [pc, #468]	; (801147c <get_wall_look+0x2fc>)
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	332c      	adds	r3, #44	; 0x2c
 80112aa:	005b      	lsls	r3, r3, #1
 80112ac:	4413      	add	r3, r2
 80112ae:	885b      	ldrh	r3, [r3, #2]
 80112b0:	4619      	mov	r1, r3
 80112b2:	2201      	movs	r2, #1
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	fa02 f303 	lsl.w	r3, r2, r3
 80112ba:	ea01 0203 	and.w	r2, r1, r3
 80112be:	2101      	movs	r1, #1
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	fa01 f303 	lsl.w	r3, r1, r3
 80112c6:	429a      	cmp	r2, r3
 80112c8:	bf0c      	ite	eq
 80112ca:	2301      	moveq	r3, #1
 80112cc:	2300      	movne	r3, #0
 80112ce:	b2da      	uxtb	r2, r3
 80112d0:	69fb      	ldr	r3, [r7, #28]
 80112d2:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80112d4:	68bb      	ldr	r3, [r7, #8]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	f340 80c4 	ble.w	8011464 <get_wall_look+0x2e4>
			*right_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80112dc:	68bb      	ldr	r3, [r7, #8]
 80112de:	3b01      	subs	r3, #1
 80112e0:	4a66      	ldr	r2, [pc, #408]	; (801147c <get_wall_look+0x2fc>)
 80112e2:	332c      	adds	r3, #44	; 0x2c
 80112e4:	005b      	lsls	r3, r3, #1
 80112e6:	4413      	add	r3, r2
 80112e8:	885b      	ldrh	r3, [r3, #2]
 80112ea:	4619      	mov	r1, r3
 80112ec:	2201      	movs	r2, #1
 80112ee:	68fb      	ldr	r3, [r7, #12]
 80112f0:	fa02 f303 	lsl.w	r3, r2, r3
 80112f4:	ea01 0203 	and.w	r2, r1, r3
 80112f8:	2101      	movs	r1, #1
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011300:	429a      	cmp	r2, r3
 8011302:	bf0c      	ite	eq
 8011304:	2301      	moveq	r3, #1
 8011306:	2300      	movne	r3, #0
 8011308:	b2da      	uxtb	r2, r3
 801130a:	69bb      	ldr	r3, [r7, #24]
 801130c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801130e:	e0a9      	b.n	8011464 <get_wall_look+0x2e4>
	case 3:
		if (y >= 1) {
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	2b00      	cmp	r3, #0
 8011314:	dd18      	ble.n	8011348 <get_wall_look+0x1c8>
			*front_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	3b01      	subs	r3, #1
 801131a:	4a58      	ldr	r2, [pc, #352]	; (801147c <get_wall_look+0x2fc>)
 801131c:	332c      	adds	r3, #44	; 0x2c
 801131e:	005b      	lsls	r3, r3, #1
 8011320:	4413      	add	r3, r2
 8011322:	885b      	ldrh	r3, [r3, #2]
 8011324:	4619      	mov	r1, r3
 8011326:	2201      	movs	r2, #1
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	fa02 f303 	lsl.w	r3, r2, r3
 801132e:	ea01 0203 	and.w	r2, r1, r3
 8011332:	2101      	movs	r1, #1
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	fa01 f303 	lsl.w	r3, r1, r3
 801133a:	429a      	cmp	r2, r3
 801133c:	bf0c      	ite	eq
 801133e:	2301      	moveq	r3, #1
 8011340:	2300      	movne	r3, #0
 8011342:	b2da      	uxtb	r2, r3
 8011344:	683b      	ldr	r3, [r7, #0]
 8011346:	701a      	strb	r2, [r3, #0]
		}
		if (x <= 14) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2b0e      	cmp	r3, #14
 801134c:	dc17      	bgt.n	801137e <get_wall_look+0x1fe>
			*left_wall=((wall.row_look[x] & (1 << y)) == (1 << y));
 801134e:	4a4b      	ldr	r2, [pc, #300]	; (801147c <get_wall_look+0x2fc>)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	331c      	adds	r3, #28
 8011354:	005b      	lsls	r3, r3, #1
 8011356:	4413      	add	r3, r2
 8011358:	889b      	ldrh	r3, [r3, #4]
 801135a:	4619      	mov	r1, r3
 801135c:	2201      	movs	r2, #1
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	fa02 f303 	lsl.w	r3, r2, r3
 8011364:	ea01 0203 	and.w	r2, r1, r3
 8011368:	2101      	movs	r1, #1
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	fa01 f303 	lsl.w	r3, r1, r3
 8011370:	429a      	cmp	r2, r3
 8011372:	bf0c      	ite	eq
 8011374:	2301      	moveq	r3, #1
 8011376:	2300      	movne	r3, #0
 8011378:	b2da      	uxtb	r2, r3
 801137a:	69fb      	ldr	r3, [r7, #28]
 801137c:	701a      	strb	r2, [r3, #0]
		}
		if (x >= 1) {
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd71      	ble.n	8011468 <get_wall_look+0x2e8>
			*right_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	3b01      	subs	r3, #1
 8011388:	4a3c      	ldr	r2, [pc, #240]	; (801147c <get_wall_look+0x2fc>)
 801138a:	331c      	adds	r3, #28
 801138c:	005b      	lsls	r3, r3, #1
 801138e:	4413      	add	r3, r2
 8011390:	889b      	ldrh	r3, [r3, #4]
 8011392:	4619      	mov	r1, r3
 8011394:	2201      	movs	r2, #1
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	fa02 f303 	lsl.w	r3, r2, r3
 801139c:	ea01 0203 	and.w	r2, r1, r3
 80113a0:	2101      	movs	r1, #1
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	fa01 f303 	lsl.w	r3, r1, r3
 80113a8:	429a      	cmp	r2, r3
 80113aa:	bf0c      	ite	eq
 80113ac:	2301      	moveq	r3, #1
 80113ae:	2300      	movne	r3, #0
 80113b0:	b2da      	uxtb	r2, r3
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	701a      	strb	r2, [r3, #0]
		}
		break;
 80113b6:	e057      	b.n	8011468 <get_wall_look+0x2e8>
	case 4:
		if (x >= 1) {
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	dd18      	ble.n	80113f0 <get_wall_look+0x270>
			*front_wall=((wall.row_look[x - 1] & (1 << y)) == (1 << y));
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	3b01      	subs	r3, #1
 80113c2:	4a2e      	ldr	r2, [pc, #184]	; (801147c <get_wall_look+0x2fc>)
 80113c4:	331c      	adds	r3, #28
 80113c6:	005b      	lsls	r3, r3, #1
 80113c8:	4413      	add	r3, r2
 80113ca:	889b      	ldrh	r3, [r3, #4]
 80113cc:	4619      	mov	r1, r3
 80113ce:	2201      	movs	r2, #1
 80113d0:	68bb      	ldr	r3, [r7, #8]
 80113d2:	fa02 f303 	lsl.w	r3, r2, r3
 80113d6:	ea01 0203 	and.w	r2, r1, r3
 80113da:	2101      	movs	r1, #1
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	fa01 f303 	lsl.w	r3, r1, r3
 80113e2:	429a      	cmp	r2, r3
 80113e4:	bf0c      	ite	eq
 80113e6:	2301      	moveq	r3, #1
 80113e8:	2300      	movne	r3, #0
 80113ea:	b2da      	uxtb	r2, r3
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	701a      	strb	r2, [r3, #0]
		}
		if (y >= 1) {
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	dd18      	ble.n	8011428 <get_wall_look+0x2a8>
			*left_wall=((wall.column_look[y - 1] & (1 << x)) == (1 << x));
 80113f6:	68bb      	ldr	r3, [r7, #8]
 80113f8:	3b01      	subs	r3, #1
 80113fa:	4a20      	ldr	r2, [pc, #128]	; (801147c <get_wall_look+0x2fc>)
 80113fc:	332c      	adds	r3, #44	; 0x2c
 80113fe:	005b      	lsls	r3, r3, #1
 8011400:	4413      	add	r3, r2
 8011402:	885b      	ldrh	r3, [r3, #2]
 8011404:	4619      	mov	r1, r3
 8011406:	2201      	movs	r2, #1
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	fa02 f303 	lsl.w	r3, r2, r3
 801140e:	ea01 0203 	and.w	r2, r1, r3
 8011412:	2101      	movs	r1, #1
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	fa01 f303 	lsl.w	r3, r1, r3
 801141a:	429a      	cmp	r2, r3
 801141c:	bf0c      	ite	eq
 801141e:	2301      	moveq	r3, #1
 8011420:	2300      	movne	r3, #0
 8011422:	b2da      	uxtb	r2, r3
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	701a      	strb	r2, [r3, #0]
		}
		if (y <= 14) {
 8011428:	68bb      	ldr	r3, [r7, #8]
 801142a:	2b0e      	cmp	r3, #14
 801142c:	dc1e      	bgt.n	801146c <get_wall_look+0x2ec>
			*right_wall=((wall.column_look[y] & (1 << x)) == (1 << x));
 801142e:	4a13      	ldr	r2, [pc, #76]	; (801147c <get_wall_look+0x2fc>)
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	332c      	adds	r3, #44	; 0x2c
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	4413      	add	r3, r2
 8011438:	885b      	ldrh	r3, [r3, #2]
 801143a:	4619      	mov	r1, r3
 801143c:	2201      	movs	r2, #1
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	fa02 f303 	lsl.w	r3, r2, r3
 8011444:	ea01 0203 	and.w	r2, r1, r3
 8011448:	2101      	movs	r1, #1
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	fa01 f303 	lsl.w	r3, r1, r3
 8011450:	429a      	cmp	r2, r3
 8011452:	bf0c      	ite	eq
 8011454:	2301      	moveq	r3, #1
 8011456:	2300      	movne	r3, #0
 8011458:	b2da      	uxtb	r2, r3
 801145a:	69bb      	ldr	r3, [r7, #24]
 801145c:	701a      	strb	r2, [r3, #0]
		}
		break;
 801145e:	e005      	b.n	801146c <get_wall_look+0x2ec>
		break;
 8011460:	bf00      	nop
 8011462:	e004      	b.n	801146e <get_wall_look+0x2ee>
		break;
 8011464:	bf00      	nop
 8011466:	e002      	b.n	801146e <get_wall_look+0x2ee>
		break;
 8011468:	bf00      	nop
 801146a:	e000      	b.n	801146e <get_wall_look+0x2ee>
		break;
 801146c:	bf00      	nop
	}

}
 801146e:	bf00      	nop
 8011470:	3714      	adds	r7, #20
 8011472:	46bd      	mov	sp, r7
 8011474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop
 801147c:	20000c3c 	.word	0x20000c3c

08011480 <search_AroundWalkCount>:


void search_AroundWalkCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 8011480:	b480      	push	{r7}
 8011482:	b087      	sub	sp, #28
 8011484:	af00      	add	r7, sp, #0
 8011486:	60f8      	str	r0, [r7, #12]
 8011488:	60b9      	str	r1, [r7, #8]
 801148a:	607a      	str	r2, [r7, #4]
 801148c:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = MAX_WALKCOUNT;}
 801148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011490:	2b0e      	cmp	r3, #14
 8011492:	dd02      	ble.n	801149a <search_AroundWalkCount+0x1a>
 8011494:	23ff      	movs	r3, #255	; 0xff
 8011496:	82fb      	strh	r3, [r7, #22]
 8011498:	e008      	b.n	80114ac <search_AroundWalkCount+0x2c>
	else {north_count = walk_count[x][y + 1];}
 801149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801149c:	3301      	adds	r3, #1
 801149e:	493e      	ldr	r1, [pc, #248]	; (8011598 <search_AroundWalkCount+0x118>)
 80114a0:	6a3a      	ldr	r2, [r7, #32]
 80114a2:	0112      	lsls	r2, r2, #4
 80114a4:	4413      	add	r3, r2
 80114a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114aa:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = MAX_WALKCOUNT;}
 80114ac:	6a3b      	ldr	r3, [r7, #32]
 80114ae:	2b0e      	cmp	r3, #14
 80114b0:	dd02      	ble.n	80114b8 <search_AroundWalkCount+0x38>
 80114b2:	23ff      	movs	r3, #255	; 0xff
 80114b4:	82bb      	strh	r3, [r7, #20]
 80114b6:	e008      	b.n	80114ca <search_AroundWalkCount+0x4a>
	else {east_count = walk_count[x + 1][y];}
 80114b8:	6a3b      	ldr	r3, [r7, #32]
 80114ba:	3301      	adds	r3, #1
 80114bc:	4936      	ldr	r1, [pc, #216]	; (8011598 <search_AroundWalkCount+0x118>)
 80114be:	011a      	lsls	r2, r3, #4
 80114c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c2:	4413      	add	r3, r2
 80114c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114c8:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = MAX_WALKCOUNT;}
 80114ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	dc02      	bgt.n	80114d6 <search_AroundWalkCount+0x56>
 80114d0:	23ff      	movs	r3, #255	; 0xff
 80114d2:	827b      	strh	r3, [r7, #18]
 80114d4:	e008      	b.n	80114e8 <search_AroundWalkCount+0x68>
	else {south_count = walk_count[x][y - 1];}
 80114d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d8:	3b01      	subs	r3, #1
 80114da:	492f      	ldr	r1, [pc, #188]	; (8011598 <search_AroundWalkCount+0x118>)
 80114dc:	6a3a      	ldr	r2, [r7, #32]
 80114de:	0112      	lsls	r2, r2, #4
 80114e0:	4413      	add	r3, r2
 80114e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80114e6:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = MAX_WALKCOUNT;}
 80114e8:	6a3b      	ldr	r3, [r7, #32]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	dc02      	bgt.n	80114f4 <search_AroundWalkCount+0x74>
 80114ee:	23ff      	movs	r3, #255	; 0xff
 80114f0:	823b      	strh	r3, [r7, #16]
 80114f2:	e008      	b.n	8011506 <search_AroundWalkCount+0x86>
	else {west_count = walk_count[x - 1][y];}
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	3b01      	subs	r3, #1
 80114f8:	4927      	ldr	r1, [pc, #156]	; (8011598 <search_AroundWalkCount+0x118>)
 80114fa:	011a      	lsls	r2, r3, #4
 80114fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114fe:	4413      	add	r3, r2
 8011500:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011504:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 8011506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011508:	3b01      	subs	r3, #1
 801150a:	2b03      	cmp	r3, #3
 801150c:	d83e      	bhi.n	801158c <search_AroundWalkCount+0x10c>
 801150e:	a201      	add	r2, pc, #4	; (adr r2, 8011514 <search_AroundWalkCount+0x94>)
 8011510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011514:	08011525 	.word	0x08011525
 8011518:	0801153f 	.word	0x0801153f
 801151c:	08011559 	.word	0x08011559
 8011520:	08011573 	.word	0x08011573
	case 1:
		*front_count = north_count;
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	8afa      	ldrh	r2, [r7, #22]
 8011528:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	8aba      	ldrh	r2, [r7, #20]
 801152e:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	8a7a      	ldrh	r2, [r7, #18]
 8011534:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 8011536:	683b      	ldr	r3, [r7, #0]
 8011538:	8a3a      	ldrh	r2, [r7, #16]
 801153a:	801a      	strh	r2, [r3, #0]
		break;
 801153c:	e026      	b.n	801158c <search_AroundWalkCount+0x10c>
	case 2:
		*front_count = east_count;
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	8aba      	ldrh	r2, [r7, #20]
 8011542:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011544:	68bb      	ldr	r3, [r7, #8]
 8011546:	8a7a      	ldrh	r2, [r7, #18]
 8011548:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	8a3a      	ldrh	r2, [r7, #16]
 801154e:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011550:	683b      	ldr	r3, [r7, #0]
 8011552:	8afa      	ldrh	r2, [r7, #22]
 8011554:	801a      	strh	r2, [r3, #0]
		break;
 8011556:	e019      	b.n	801158c <search_AroundWalkCount+0x10c>
	case 3:
		*front_count = south_count;
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	8a7a      	ldrh	r2, [r7, #18]
 801155c:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 801155e:	68bb      	ldr	r3, [r7, #8]
 8011560:	8a3a      	ldrh	r2, [r7, #16]
 8011562:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	8afa      	ldrh	r2, [r7, #22]
 8011568:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	8aba      	ldrh	r2, [r7, #20]
 801156e:	801a      	strh	r2, [r3, #0]
		break;
 8011570:	e00c      	b.n	801158c <search_AroundWalkCount+0x10c>
	case 4:
		*front_count = west_count;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	8a3a      	ldrh	r2, [r7, #16]
 8011576:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	8afa      	ldrh	r2, [r7, #22]
 801157c:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	8aba      	ldrh	r2, [r7, #20]
 8011582:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 8011584:	683b      	ldr	r3, [r7, #0]
 8011586:	8a7a      	ldrh	r2, [r7, #18]
 8011588:	801a      	strh	r2, [r3, #0]
		break;
 801158a:	bf00      	nop

	}


}
 801158c:	bf00      	nop
 801158e:	371c      	adds	r7, #28
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr
 8011598:	20000d30 	.word	0x20000d30

0801159c <search_AroundDijkstraCount>:





void search_AroundDijkstraCount(unsigned short *front_count,unsigned short *right_count,unsigned short *back_count,unsigned short *left_count,int x,int y,int direction){
 801159c:	b480      	push	{r7}
 801159e:	b087      	sub	sp, #28
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
//int direction,int x_coordinate,int y_coordinate
	unsigned short north_count,east_count,south_count,west_count;
//	unsigned short front_count, right_count, back_count, left_count;

	if (y >= 15) {north_count = 65535;}
 80115aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ac:	2b0e      	cmp	r3, #14
 80115ae:	dd03      	ble.n	80115b8 <search_AroundDijkstraCount+0x1c>
 80115b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115b4:	82fb      	strh	r3, [r7, #22]
 80115b6:	e00a      	b.n	80115ce <search_AroundDijkstraCount+0x32>
	else {north_count = Dijkstra.column_count[x][y];}
 80115b8:	4944      	ldr	r1, [pc, #272]	; (80116cc <search_AroundDijkstraCount+0x130>)
 80115ba:	6a3a      	ldr	r2, [r7, #32]
 80115bc:	4613      	mov	r3, r2
 80115be:	011b      	lsls	r3, r3, #4
 80115c0:	1a9b      	subs	r3, r3, r2
 80115c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115c4:	4413      	add	r3, r2
 80115c6:	33f0      	adds	r3, #240	; 0xf0
 80115c8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115cc:	82fb      	strh	r3, [r7, #22]

	if (x >= 15) {east_count = 65535;}
 80115ce:	6a3b      	ldr	r3, [r7, #32]
 80115d0:	2b0e      	cmp	r3, #14
 80115d2:	dd03      	ble.n	80115dc <search_AroundDijkstraCount+0x40>
 80115d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115d8:	82bb      	strh	r3, [r7, #20]
 80115da:	e009      	b.n	80115f0 <search_AroundDijkstraCount+0x54>
	else {east_count = Dijkstra.row_count[y][x];}
 80115dc:	493b      	ldr	r1, [pc, #236]	; (80116cc <search_AroundDijkstraCount+0x130>)
 80115de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115e0:	4613      	mov	r3, r2
 80115e2:	011b      	lsls	r3, r3, #4
 80115e4:	1a9b      	subs	r3, r3, r2
 80115e6:	6a3a      	ldr	r2, [r7, #32]
 80115e8:	4413      	add	r3, r2
 80115ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80115ee:	82bb      	strh	r3, [r7, #20]

	if (y <= 0) {south_count = 65535;}
 80115f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	dc03      	bgt.n	80115fe <search_AroundDijkstraCount+0x62>
 80115f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115fa:	827b      	strh	r3, [r7, #18]
 80115fc:	e00b      	b.n	8011616 <search_AroundDijkstraCount+0x7a>
	else {south_count = Dijkstra.column_count[x][y-1];}
 80115fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011600:	1e59      	subs	r1, r3, #1
 8011602:	4832      	ldr	r0, [pc, #200]	; (80116cc <search_AroundDijkstraCount+0x130>)
 8011604:	6a3a      	ldr	r2, [r7, #32]
 8011606:	4613      	mov	r3, r2
 8011608:	011b      	lsls	r3, r3, #4
 801160a:	1a9b      	subs	r3, r3, r2
 801160c:	440b      	add	r3, r1
 801160e:	33f0      	adds	r3, #240	; 0xf0
 8011610:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011614:	827b      	strh	r3, [r7, #18]

	if (x <= 0) {west_count = 65535;}
 8011616:	6a3b      	ldr	r3, [r7, #32]
 8011618:	2b00      	cmp	r3, #0
 801161a:	dc03      	bgt.n	8011624 <search_AroundDijkstraCount+0x88>
 801161c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011620:	823b      	strh	r3, [r7, #16]
 8011622:	e00a      	b.n	801163a <search_AroundDijkstraCount+0x9e>
	else {west_count = Dijkstra.row_count[y][x-1];}
 8011624:	6a3b      	ldr	r3, [r7, #32]
 8011626:	1e59      	subs	r1, r3, #1
 8011628:	4828      	ldr	r0, [pc, #160]	; (80116cc <search_AroundDijkstraCount+0x130>)
 801162a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801162c:	4613      	mov	r3, r2
 801162e:	011b      	lsls	r3, r3, #4
 8011630:	1a9b      	subs	r3, r3, r2
 8011632:	440b      	add	r3, r1
 8011634:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011638:	823b      	strh	r3, [r7, #16]


	switch (direction) {		//
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	3b01      	subs	r3, #1
 801163e:	2b03      	cmp	r3, #3
 8011640:	d83e      	bhi.n	80116c0 <search_AroundDijkstraCount+0x124>
 8011642:	a201      	add	r2, pc, #4	; (adr r2, 8011648 <search_AroundDijkstraCount+0xac>)
 8011644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011648:	08011659 	.word	0x08011659
 801164c:	08011673 	.word	0x08011673
 8011650:	0801168d 	.word	0x0801168d
 8011654:	080116a7 	.word	0x080116a7
	case 1:
		*front_count = north_count;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	8afa      	ldrh	r2, [r7, #22]
 801165c:	801a      	strh	r2, [r3, #0]
		*right_count = east_count;
 801165e:	68bb      	ldr	r3, [r7, #8]
 8011660:	8aba      	ldrh	r2, [r7, #20]
 8011662:	801a      	strh	r2, [r3, #0]
		*back_count = south_count;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	8a7a      	ldrh	r2, [r7, #18]
 8011668:	801a      	strh	r2, [r3, #0]
		*left_count = west_count;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	8a3a      	ldrh	r2, [r7, #16]
 801166e:	801a      	strh	r2, [r3, #0]
		break;
 8011670:	e026      	b.n	80116c0 <search_AroundDijkstraCount+0x124>
	case 2:
		*front_count = east_count;
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	8aba      	ldrh	r2, [r7, #20]
 8011676:	801a      	strh	r2, [r3, #0]
		*right_count = south_count;
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	8a7a      	ldrh	r2, [r7, #18]
 801167c:	801a      	strh	r2, [r3, #0]
		*back_count = west_count;
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	8a3a      	ldrh	r2, [r7, #16]
 8011682:	801a      	strh	r2, [r3, #0]
		*left_count = north_count;
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	8afa      	ldrh	r2, [r7, #22]
 8011688:	801a      	strh	r2, [r3, #0]
		break;
 801168a:	e019      	b.n	80116c0 <search_AroundDijkstraCount+0x124>
	case 3:
		*front_count = south_count;
 801168c:	68fb      	ldr	r3, [r7, #12]
 801168e:	8a7a      	ldrh	r2, [r7, #18]
 8011690:	801a      	strh	r2, [r3, #0]
		*right_count = west_count;
 8011692:	68bb      	ldr	r3, [r7, #8]
 8011694:	8a3a      	ldrh	r2, [r7, #16]
 8011696:	801a      	strh	r2, [r3, #0]
		*back_count = north_count;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	8afa      	ldrh	r2, [r7, #22]
 801169c:	801a      	strh	r2, [r3, #0]
		*left_count = east_count;
 801169e:	683b      	ldr	r3, [r7, #0]
 80116a0:	8aba      	ldrh	r2, [r7, #20]
 80116a2:	801a      	strh	r2, [r3, #0]
		break;
 80116a4:	e00c      	b.n	80116c0 <search_AroundDijkstraCount+0x124>
	case 4:
		*front_count = west_count;
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	8a3a      	ldrh	r2, [r7, #16]
 80116aa:	801a      	strh	r2, [r3, #0]
		*right_count = north_count;
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	8afa      	ldrh	r2, [r7, #22]
 80116b0:	801a      	strh	r2, [r3, #0]
		*back_count = east_count;
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	8aba      	ldrh	r2, [r7, #20]
 80116b6:	801a      	strh	r2, [r3, #0]
		*left_count = south_count;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	8a7a      	ldrh	r2, [r7, #18]
 80116bc:	801a      	strh	r2, [r3, #0]
		break;
 80116be:	bf00      	nop

	}


}
 80116c0:	bf00      	nop
 80116c2:	371c      	adds	r7, #28
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	20000f30 	.word	0x20000f30

080116d0 <create_DijkstraMap>:




void create_DijkstraMap(void){
 80116d0:	b590      	push	{r4, r7, lr}
 80116d2:	f5ad 4d9d 	sub.w	sp, sp, #20096	; 0x4e80
 80116d6:	b081      	sub	sp, #4
 80116d8:	af00      	add	r7, sp, #0
	STACK_T stack_x;
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_direction;//向き(0北　1北東　2東　3南東　4南　5南西　6西　7北西　8エラー)
	STACK_T stack_cost;//引かれるコスト
	int16_t VerticalCost=VERTICALCOST;
 80116da:	23b4      	movs	r3, #180	; 0xb4
 80116dc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116e0:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 80116e4:	8013      	strh	r3, [r2, #0]
	int16_t DiagonalCost=DIAGONALCOST;
 80116e6:	237f      	movs	r3, #127	; 0x7f
 80116e8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80116ec:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80116f0:	8013      	strh	r3, [r2, #0]
	int16_t discount_v[V_NUM_MAX]={180,118,100,91,90};
 80116f2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80116f6:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 80116fa:	4a1d      	ldr	r2, [pc, #116]	; (8011770 <create_DijkstraMap+0xa0>)
 80116fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80116fe:	c303      	stmia	r3!, {r0, r1}
 8011700:	801a      	strh	r2, [r3, #0]
	int16_t discount_d[D_NUM_MAX]={127,91,79,71,65,64};
 8011702:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011706:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 801170a:	4a1a      	ldr	r2, [pc, #104]	; (8011774 <create_DijkstraMap+0xa4>)
 801170c:	ca07      	ldmia	r2, {r0, r1, r2}
 801170e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int16_t dis_cost_in;
	//printf("%d,%d,%d,%d,%d\n",discount_v[0],discount_v[1],discount_v[2],discount_v[3],discount_v[4]);
	//printf("%d,%d,%d,%d,%d,%d\n",discount_d[0],discount_d[1],discount_d[2],discount_d[3],discount_d[4],discount_d[5]);
	initStack_walk(&stack_x);
 8011712:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011716:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801171a:	4618      	mov	r0, r3
 801171c:	f003 fb1a 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_y);
 8011720:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011724:	f103 0320 	add.w	r3, r3, #32
 8011728:	3b0c      	subs	r3, #12
 801172a:	4618      	mov	r0, r3
 801172c:	f003 fb12 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_matrix);
 8011730:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011734:	3b14      	subs	r3, #20
 8011736:	4618      	mov	r0, r3
 8011738:	f003 fb0c 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_direction);
 801173c:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011740:	3b3c      	subs	r3, #60	; 0x3c
 8011742:	4618      	mov	r0, r3
 8011744:	f003 fb06 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_cost);
 8011748:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801174c:	3b64      	subs	r3, #100	; 0x64
 801174e:	4618      	mov	r0, r3
 8011750:	f003 fb00 	bl	8014d54 <initStack_walk>
	for(int i=0;i<=15;i++){
 8011754:	2300      	movs	r3, #0
 8011756:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801175a:	f102 0274 	add.w	r2, r2, #116	; 0x74
 801175e:	6013      	str	r3, [r2, #0]
 8011760:	e04e      	b.n	8011800 <create_DijkstraMap+0x130>
		for(int j=0;j<=14;j++){
 8011762:	2300      	movs	r3, #0
 8011764:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011768:	f102 0270 	add.w	r2, r2, #112	; 0x70
 801176c:	6013      	str	r3, [r2, #0]
 801176e:	e035      	b.n	80117dc <create_DijkstraMap+0x10c>
 8011770:	080233c4 	.word	0x080233c4
 8011774:	080233d0 	.word	0x080233d0
			Dijkstra.column_count[i][j]=65535;
 8011778:	49c6      	ldr	r1, [pc, #792]	; (8011a94 <create_DijkstraMap+0x3c4>)
 801177a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801177e:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	4613      	mov	r3, r2
 8011786:	011b      	lsls	r3, r3, #4
 8011788:	1a9b      	subs	r3, r3, r2
 801178a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801178e:	f102 0270 	add.w	r2, r2, #112	; 0x70
 8011792:	6812      	ldr	r2, [r2, #0]
 8011794:	4413      	add	r3, r2
 8011796:	33f0      	adds	r3, #240	; 0xf0
 8011798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801179c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			Dijkstra.row_count[i][j]=65535;
 80117a0:	49bc      	ldr	r1, [pc, #752]	; (8011a94 <create_DijkstraMap+0x3c4>)
 80117a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117a6:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117aa:	681a      	ldr	r2, [r3, #0]
 80117ac:	4613      	mov	r3, r2
 80117ae:	011b      	lsls	r3, r3, #4
 80117b0:	1a9b      	subs	r3, r3, r2
 80117b2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117b6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117ba:	6812      	ldr	r2, [r2, #0]
 80117bc:	4413      	add	r3, r2
 80117be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80117c2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(int j=0;j<=14;j++){
 80117c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117ca:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	3301      	adds	r3, #1
 80117d2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117d6:	f102 0270 	add.w	r2, r2, #112	; 0x70
 80117da:	6013      	str	r3, [r2, #0]
 80117dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117e0:	f103 0370 	add.w	r3, r3, #112	; 0x70
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	2b0e      	cmp	r3, #14
 80117e8:	ddc6      	ble.n	8011778 <create_DijkstraMap+0xa8>
	for(int i=0;i<=15;i++){
 80117ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80117ee:	f103 0374 	add.w	r3, r3, #116	; 0x74
 80117f2:	681b      	ldr	r3, [r3, #0]
 80117f4:	3301      	adds	r3, #1
 80117f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80117fa:	f102 0274 	add.w	r2, r2, #116	; 0x74
 80117fe:	6013      	str	r3, [r2, #0]
 8011800:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011804:	f103 0374 	add.w	r3, r3, #116	; 0x74
 8011808:	681b      	ldr	r3, [r3, #0]
 801180a:	2b0f      	cmp	r3, #15
 801180c:	dda9      	ble.n	8011762 <create_DijkstraMap+0x92>
		}
	}
	Dijkstra.column_count[GOAL_X][GOAL_Y]=0;
 801180e:	4ba1      	ldr	r3, [pc, #644]	; (8011a94 <create_DijkstraMap+0x3c4>)
 8011810:	2200      	movs	r2, #0
 8011812:	f8a3 21fe 	strh.w	r2, [r3, #510]	; 0x1fe
	Dijkstra.column_count[GOAL_X+1][GOAL_Y]=0;
 8011816:	4b9f      	ldr	r3, [pc, #636]	; (8011a94 <create_DijkstraMap+0x3c4>)
 8011818:	2200      	movs	r2, #0
 801181a:	f8a3 221c 	strh.w	r2, [r3, #540]	; 0x21c
	Dijkstra.row_count[GOAL_Y][GOAL_X]=0;
 801181e:	4b9d      	ldr	r3, [pc, #628]	; (8011a94 <create_DijkstraMap+0x3c4>)
 8011820:	2200      	movs	r2, #0
 8011822:	805a      	strh	r2, [r3, #2]
	Dijkstra.row_count[GOAL_Y+1][GOAL_X]=0;
 8011824:	4b9b      	ldr	r3, [pc, #620]	; (8011a94 <create_DijkstraMap+0x3c4>)
 8011826:	2200      	movs	r2, #0
 8011828:	841a      	strh	r2, [r3, #32]
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801182a:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801182e:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011832:	2101      	movs	r1, #1
 8011834:	4618      	mov	r0, r3
 8011836:	f003 fa9d 	bl	8014d74 <pushStack_walk>
 801183a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801183e:	f103 0320 	add.w	r3, r3, #32
 8011842:	3b0c      	subs	r3, #12
 8011844:	2100      	movs	r1, #0
 8011846:	4618      	mov	r0, r3
 8011848:	f003 fa94 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 801184c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011850:	3b14      	subs	r3, #20
 8011852:	2100      	movs	r1, #0
 8011854:	4618      	mov	r0, r3
 8011856:	f003 fa8d 	bl	8014d74 <pushStack_walk>
 801185a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801185e:	3b3c      	subs	r3, #60	; 0x3c
 8011860:	2108      	movs	r1, #8
 8011862:	4618      	mov	r0, r3
 8011864:	f003 fa86 	bl	8014d74 <pushStack_walk>
 8011868:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801186c:	3b64      	subs	r3, #100	; 0x64
 801186e:	2100      	movs	r1, #0
 8011870:	4618      	mov	r0, r3
 8011872:	f003 fa7f 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X+1);pushStack_walk(&stack_y,GOAL_Y);
 8011876:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801187a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801187e:	2102      	movs	r1, #2
 8011880:	4618      	mov	r0, r3
 8011882:	f003 fa77 	bl	8014d74 <pushStack_walk>
 8011886:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801188a:	f103 0320 	add.w	r3, r3, #32
 801188e:	3b0c      	subs	r3, #12
 8011890:	2100      	movs	r1, #0
 8011892:	4618      	mov	r0, r3
 8011894:	f003 fa6e 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011898:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801189c:	3b14      	subs	r3, #20
 801189e:	2100      	movs	r1, #0
 80118a0:	4618      	mov	r0, r3
 80118a2:	f003 fa67 	bl	8014d74 <pushStack_walk>
 80118a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118aa:	3b3c      	subs	r3, #60	; 0x3c
 80118ac:	2108      	movs	r1, #8
 80118ae:	4618      	mov	r0, r3
 80118b0:	f003 fa60 	bl	8014d74 <pushStack_walk>
 80118b4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80118b8:	3b64      	subs	r3, #100	; 0x64
 80118ba:	2100      	movs	r1, #0
 80118bc:	4618      	mov	r0, r3
 80118be:	f003 fa59 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 80118c2:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80118c6:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80118ca:	2101      	movs	r1, #1
 80118cc:	4618      	mov	r0, r3
 80118ce:	f003 fa51 	bl	8014d74 <pushStack_walk>
 80118d2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80118d6:	f103 0320 	add.w	r3, r3, #32
 80118da:	3b0c      	subs	r3, #12
 80118dc:	2100      	movs	r1, #0
 80118de:	4618      	mov	r0, r3
 80118e0:	f003 fa48 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 80118e4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80118e8:	3b14      	subs	r3, #20
 80118ea:	2101      	movs	r1, #1
 80118ec:	4618      	mov	r0, r3
 80118ee:	f003 fa41 	bl	8014d74 <pushStack_walk>
 80118f2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80118f6:	3b3c      	subs	r3, #60	; 0x3c
 80118f8:	2108      	movs	r1, #8
 80118fa:	4618      	mov	r0, r3
 80118fc:	f003 fa3a 	bl	8014d74 <pushStack_walk>
 8011900:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011904:	3b64      	subs	r3, #100	; 0x64
 8011906:	2100      	movs	r1, #0
 8011908:	4618      	mov	r0, r3
 801190a:	f003 fa33 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y+1);
 801190e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011912:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011916:	2101      	movs	r1, #1
 8011918:	4618      	mov	r0, r3
 801191a:	f003 fa2b 	bl	8014d74 <pushStack_walk>
 801191e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011922:	f103 0320 	add.w	r3, r3, #32
 8011926:	3b0c      	subs	r3, #12
 8011928:	2101      	movs	r1, #1
 801192a:	4618      	mov	r0, r3
 801192c:	f003 fa22 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_matrix,ROW);pushStack_walk(&stack_direction,8);pushStack_walk(&stack_cost,0);
 8011930:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011934:	3b14      	subs	r3, #20
 8011936:	2101      	movs	r1, #1
 8011938:	4618      	mov	r0, r3
 801193a:	f003 fa1b 	bl	8014d74 <pushStack_walk>
 801193e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011942:	3b3c      	subs	r3, #60	; 0x3c
 8011944:	2108      	movs	r1, #8
 8011946:	4618      	mov	r0, r3
 8011948:	f003 fa14 	bl	8014d74 <pushStack_walk>
 801194c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011950:	3b64      	subs	r3, #100	; 0x64
 8011952:	2100      	movs	r1, #0
 8011954:	4618      	mov	r0, r3
 8011956:	f003 fa0d 	bl	8014d74 <pushStack_walk>



	unsigned short count_number = 1;
 801195a:	2301      	movs	r3, #1
 801195c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011960:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8011964:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate,Row_or_Column,Direction,dis_cost;
	while (1) {

		Xcoordinate = popStack_walk(&stack_x);
 8011966:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801196a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801196e:	4618      	mov	r0, r3
 8011970:	f003 fa2a 	bl	8014dc8 <popStack_walk>
 8011974:	4603      	mov	r3, r0
 8011976:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801197a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 801197e:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8011980:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011984:	f103 0320 	add.w	r3, r3, #32
 8011988:	3b0c      	subs	r3, #12
 801198a:	4618      	mov	r0, r3
 801198c:	f003 fa1c 	bl	8014dc8 <popStack_walk>
 8011990:	4603      	mov	r3, r0
 8011992:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011996:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801199a:	8013      	strh	r3, [r2, #0]
		Row_or_Column = popStack_walk(&stack_matrix);
 801199c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 80119a0:	3b14      	subs	r3, #20
 80119a2:	4618      	mov	r0, r3
 80119a4:	f003 fa10 	bl	8014dc8 <popStack_walk>
 80119a8:	4603      	mov	r3, r0
 80119aa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119ae:	f102 0268 	add.w	r2, r2, #104	; 0x68
 80119b2:	8013      	strh	r3, [r2, #0]
		Direction = popStack_walk(&stack_direction);
 80119b4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80119b8:	3b3c      	subs	r3, #60	; 0x3c
 80119ba:	4618      	mov	r0, r3
 80119bc:	f003 fa04 	bl	8014dc8 <popStack_walk>
 80119c0:	4603      	mov	r3, r0
 80119c2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119c6:	f102 0266 	add.w	r2, r2, #102	; 0x66
 80119ca:	8013      	strh	r3, [r2, #0]
		dis_cost = popStack_walk(&stack_cost);
 80119cc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80119d0:	3b64      	subs	r3, #100	; 0x64
 80119d2:	4618      	mov	r0, r3
 80119d4:	f003 f9f8 	bl	8014dc8 <popStack_walk>
 80119d8:	4603      	mov	r3, r0
 80119da:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80119de:	f102 0264 	add.w	r2, r2, #100	; 0x64
 80119e2:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
		//printf("cost_num %d\n",dis_cost);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80119e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119e8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80119ec:	881b      	ldrh	r3, [r3, #0]
 80119ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80119f2:	4293      	cmp	r3, r2
 80119f4:	f001 83a9 	beq.w	801314a <create_DijkstraMap+0x1a7a>
 80119f8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80119fc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a00:	881b      	ldrh	r3, [r3, #0]
 8011a02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011a06:	4293      	cmp	r3, r2
 8011a08:	f001 839f 	beq.w	801314a <create_DijkstraMap+0x1a7a>
			//printf("stack_end\n");
			break;
		}
		if(Row_or_Column==COLUMN){
 8011a0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a10:	f103 0368 	add.w	r3, r3, #104	; 0x68
 8011a14:	881b      	ldrh	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	f040 85c5 	bne.w	80125a6 <create_DijkstraMap+0xed6>
			if(Ycoordinate <= 13){
 8011a1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a20:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011a24:	881b      	ldrh	r3, [r3, #0]
 8011a26:	2b0d      	cmp	r3, #13
 8011a28:	f200 80f2 	bhi.w	8011c10 <create_DijkstraMap+0x540>
				if(Direction==SLANT_NORTH){
 8011a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a30:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011a34:	881b      	ldrh	r3, [r3, #0]
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d12e      	bne.n	8011a98 <create_DijkstraMap+0x3c8>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011a3a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a3e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	3301      	adds	r3, #1
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a4c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a50:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011a52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a56:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a5e:	2b04      	cmp	r3, #4
 8011a60:	dd05      	ble.n	8011a6e <create_DijkstraMap+0x39e>
 8011a62:	2304      	movs	r3, #4
 8011a64:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a68:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011a6c:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011a6e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011a72:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011a76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011a7a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011a7e:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011a82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011a86:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011a8a:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011a8e:	8013      	strh	r3, [r2, #0]
 8011a90:	e012      	b.n	8011ab8 <create_DijkstraMap+0x3e8>
 8011a92:	bf00      	nop
 8011a94:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011a98:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011a9c:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011aa6:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011aaa:	8013      	strh	r3, [r2, #0]
 8011aac:	2300      	movs	r3, #0
 8011aae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ab2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ab6:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate+1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate+1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011ab8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011abc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ac0:	881b      	ldrh	r3, [r3, #0]
 8011ac2:	3301      	adds	r3, #1
 8011ac4:	4a70      	ldr	r2, [pc, #448]	; (8011c88 <create_DijkstraMap+0x5b8>)
 8011ac6:	330c      	adds	r3, #12
 8011ac8:	005b      	lsls	r3, r3, #1
 8011aca:	4413      	add	r3, r2
 8011acc:	88db      	ldrh	r3, [r3, #6]
 8011ace:	461a      	mov	r2, r3
 8011ad0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ad4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ad8:	881b      	ldrh	r3, [r3, #0]
 8011ada:	fa42 f303 	asr.w	r3, r2, r3
 8011ade:	f003 0301 	and.w	r3, r3, #1
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	f040 8094 	bne.w	8011c10 <create_DijkstraMap+0x540>
 8011ae8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011aec:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011af0:	881a      	ldrh	r2, [r3, #0]
 8011af2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011af6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	1c59      	adds	r1, r3, #1
 8011afe:	4863      	ldr	r0, [pc, #396]	; (8011c8c <create_DijkstraMap+0x5bc>)
 8011b00:	4613      	mov	r3, r2
 8011b02:	011b      	lsls	r3, r3, #4
 8011b04:	1a9b      	subs	r3, r3, r2
 8011b06:	440b      	add	r3, r1
 8011b08:	33f0      	adds	r3, #240	; 0xf0
 8011b0a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b0e:	461c      	mov	r4, r3
 8011b10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b18:	881a      	ldrh	r2, [r3, #0]
 8011b1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b1e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b22:	8819      	ldrh	r1, [r3, #0]
 8011b24:	4859      	ldr	r0, [pc, #356]	; (8011c8c <create_DijkstraMap+0x5bc>)
 8011b26:	4613      	mov	r3, r2
 8011b28:	011b      	lsls	r3, r3, #4
 8011b2a:	1a9b      	subs	r3, r3, r2
 8011b2c:	440b      	add	r3, r1
 8011b2e:	33f0      	adds	r3, #240	; 0xf0
 8011b30:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011b34:	461a      	mov	r2, r3
 8011b36:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b3a:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b42:	4413      	add	r3, r2
 8011b44:	429c      	cmp	r4, r3
 8011b46:	dd63      	ble.n	8011c10 <create_DijkstraMap+0x540>
					Dijkstra.column_count[Xcoordinate][Ycoordinate+1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011b48:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b4c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011b50:	881a      	ldrh	r2, [r3, #0]
 8011b52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b56:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011b5a:	8819      	ldrh	r1, [r3, #0]
 8011b5c:	484b      	ldr	r0, [pc, #300]	; (8011c8c <create_DijkstraMap+0x5bc>)
 8011b5e:	4613      	mov	r3, r2
 8011b60:	011b      	lsls	r3, r3, #4
 8011b62:	1a9b      	subs	r3, r3, r2
 8011b64:	440b      	add	r3, r1
 8011b66:	33f0      	adds	r3, #240	; 0xf0
 8011b68:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011b6c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011b70:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011b74:	881b      	ldrh	r3, [r3, #0]
 8011b76:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011b7a:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011b7e:	8812      	ldrh	r2, [r2, #0]
 8011b80:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011b84:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011b88:	8809      	ldrh	r1, [r1, #0]
 8011b8a:	3101      	adds	r1, #1
 8011b8c:	4403      	add	r3, r0
 8011b8e:	b29c      	uxth	r4, r3
 8011b90:	483e      	ldr	r0, [pc, #248]	; (8011c8c <create_DijkstraMap+0x5bc>)
 8011b92:	4613      	mov	r3, r2
 8011b94:	011b      	lsls	r3, r3, #4
 8011b96:	1a9b      	subs	r3, r3, r2
 8011b98:	440b      	add	r3, r1
 8011b9a:	33f0      	adds	r3, #240	; 0xf0
 8011b9c:	4622      	mov	r2, r4
 8011b9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011ba2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ba6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011baa:	881a      	ldrh	r2, [r3, #0]
 8011bac:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011bb0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011bb4:	4611      	mov	r1, r2
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	f003 f8dc 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate + 1);
 8011bbc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bc0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011bc4:	881b      	ldrh	r3, [r3, #0]
 8011bc6:	3301      	adds	r3, #1
 8011bc8:	b29a      	uxth	r2, r3
 8011bca:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011bce:	f103 0320 	add.w	r3, r3, #32
 8011bd2:	3b0c      	subs	r3, #12
 8011bd4:	4611      	mov	r1, r2
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f003 f8cc 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011bdc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011be0:	3b14      	subs	r3, #20
 8011be2:	2100      	movs	r1, #0
 8011be4:	4618      	mov	r0, r3
 8011be6:	f003 f8c5 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH);
 8011bea:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011bee:	3b3c      	subs	r3, #60	; 0x3c
 8011bf0:	2100      	movs	r1, #0
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f003 f8be 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011bf8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011bfc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c00:	881a      	ldrh	r2, [r3, #0]
 8011c02:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011c06:	3b64      	subs	r3, #100	; 0x64
 8011c08:	4611      	mov	r1, r2
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f003 f8b2 	bl	8014d74 <pushStack_walk>
				}
			}
			if (Ycoordinate >= 1) {
 8011c10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c14:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011c18:	881b      	ldrh	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f000 80f4 	beq.w	8011e08 <create_DijkstraMap+0x738>
				if(Direction==SLANT_SOUTH){
 8011c20:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c24:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011c28:	881b      	ldrh	r3, [r3, #0]
 8011c2a:	2b04      	cmp	r3, #4
 8011c2c:	d130      	bne.n	8011c90 <create_DijkstraMap+0x5c0>
					dis_cost_in=dis_cost+DISCOUNTCOST_V;
 8011c2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c32:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	3301      	adds	r3, #1
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c40:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c44:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 8011c46:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c4a:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011c52:	2b04      	cmp	r3, #4
 8011c54:	dd05      	ble.n	8011c62 <create_DijkstraMap+0x592>
 8011c56:	2304      	movs	r3, #4
 8011c58:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c5c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011c60:	8013      	strh	r3, [r2, #0]
					VerticalCost=discount_v[dis_cost_in];
 8011c62:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011c66:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011c6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c6e:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c72:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011c76:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011c7a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c7e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011c82:	8013      	strh	r3, [r2, #0]
 8011c84:	e014      	b.n	8011cb0 <create_DijkstraMap+0x5e0>
 8011c86:	bf00      	nop
 8011c88:	20000c3c 	.word	0x20000c3c
 8011c8c:	20000f30 	.word	0x20000f30
				}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8011c90:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011c94:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8011c98:	881b      	ldrh	r3, [r3, #0]
 8011c9a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011c9e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8011ca2:	8013      	strh	r3, [r2, #0]
 8011ca4:	2300      	movs	r3, #0
 8011ca6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011caa:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011cae:	8013      	strh	r3, [r2, #0]
				if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost){
 8011cb0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cb4:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cb8:	881b      	ldrh	r3, [r3, #0]
 8011cba:	3b01      	subs	r3, #1
 8011cbc:	4a70      	ldr	r2, [pc, #448]	; (8011e80 <create_DijkstraMap+0x7b0>)
 8011cbe:	330c      	adds	r3, #12
 8011cc0:	005b      	lsls	r3, r3, #1
 8011cc2:	4413      	add	r3, r2
 8011cc4:	88db      	ldrh	r3, [r3, #6]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ccc:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011cd0:	881b      	ldrh	r3, [r3, #0]
 8011cd2:	fa42 f303 	asr.w	r3, r2, r3
 8011cd6:	f003 0301 	and.w	r3, r3, #1
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	f040 8094 	bne.w	8011e08 <create_DijkstraMap+0x738>
 8011ce0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ce4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ce8:	881a      	ldrh	r2, [r3, #0]
 8011cea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011cee:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011cf2:	881b      	ldrh	r3, [r3, #0]
 8011cf4:	1e59      	subs	r1, r3, #1
 8011cf6:	4863      	ldr	r0, [pc, #396]	; (8011e84 <create_DijkstraMap+0x7b4>)
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	011b      	lsls	r3, r3, #4
 8011cfc:	1a9b      	subs	r3, r3, r2
 8011cfe:	440b      	add	r3, r1
 8011d00:	33f0      	adds	r3, #240	; 0xf0
 8011d02:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d06:	461c      	mov	r4, r3
 8011d08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d0c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d10:	881a      	ldrh	r2, [r3, #0]
 8011d12:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d16:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d1a:	8819      	ldrh	r1, [r3, #0]
 8011d1c:	4859      	ldr	r0, [pc, #356]	; (8011e84 <create_DijkstraMap+0x7b4>)
 8011d1e:	4613      	mov	r3, r2
 8011d20:	011b      	lsls	r3, r3, #4
 8011d22:	1a9b      	subs	r3, r3, r2
 8011d24:	440b      	add	r3, r1
 8011d26:	33f0      	adds	r3, #240	; 0xf0
 8011d28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d32:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d3a:	4413      	add	r3, r2
 8011d3c:	429c      	cmp	r4, r3
 8011d3e:	dd63      	ble.n	8011e08 <create_DijkstraMap+0x738>
					Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+VerticalCost;
 8011d40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d44:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011d48:	881a      	ldrh	r2, [r3, #0]
 8011d4a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d4e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011d52:	8819      	ldrh	r1, [r3, #0]
 8011d54:	484b      	ldr	r0, [pc, #300]	; (8011e84 <create_DijkstraMap+0x7b4>)
 8011d56:	4613      	mov	r3, r2
 8011d58:	011b      	lsls	r3, r3, #4
 8011d5a:	1a9b      	subs	r3, r3, r2
 8011d5c:	440b      	add	r3, r1
 8011d5e:	33f0      	adds	r3, #240	; 0xf0
 8011d60:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011d64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d68:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8011d6c:	881b      	ldrh	r3, [r3, #0]
 8011d6e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011d72:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8011d76:	8812      	ldrh	r2, [r2, #0]
 8011d78:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011d7c:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8011d80:	8809      	ldrh	r1, [r1, #0]
 8011d82:	3901      	subs	r1, #1
 8011d84:	4403      	add	r3, r0
 8011d86:	b29c      	uxth	r4, r3
 8011d88:	483e      	ldr	r0, [pc, #248]	; (8011e84 <create_DijkstraMap+0x7b4>)
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	011b      	lsls	r3, r3, #4
 8011d8e:	1a9b      	subs	r3, r3, r2
 8011d90:	440b      	add	r3, r1
 8011d92:	33f0      	adds	r3, #240	; 0xf0
 8011d94:	4622      	mov	r2, r4
 8011d96:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011d9a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011d9e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011da2:	881a      	ldrh	r2, [r3, #0]
 8011da4:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011da8:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011dac:	4611      	mov	r1, r2
 8011dae:	4618      	mov	r0, r3
 8011db0:	f002 ffe0 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate - 1);
 8011db4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011db8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011dbc:	881b      	ldrh	r3, [r3, #0]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011dc6:	f103 0320 	add.w	r3, r3, #32
 8011dca:	3b0c      	subs	r3, #12
 8011dcc:	4611      	mov	r1, r2
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f002 ffd0 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,COLUMN);
 8011dd4:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011dd8:	3b14      	subs	r3, #20
 8011dda:	2100      	movs	r1, #0
 8011ddc:	4618      	mov	r0, r3
 8011dde:	f002 ffc9 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH);
 8011de2:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011de6:	3b3c      	subs	r3, #60	; 0x3c
 8011de8:	2104      	movs	r1, #4
 8011dea:	4618      	mov	r0, r3
 8011dec:	f002 ffc2 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011df0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011df4:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011df8:	881a      	ldrh	r2, [r3, #0]
 8011dfa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011dfe:	3b64      	subs	r3, #100	; 0x64
 8011e00:	4611      	mov	r1, r2
 8011e02:	4618      	mov	r0, r3
 8011e04:	f002 ffb6 	bl	8014d74 <pushStack_walk>
				}
			}
			if (Xcoordinate <= 14) {
 8011e08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e0c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011e10:	881b      	ldrh	r3, [r3, #0]
 8011e12:	2b0e      	cmp	r3, #14
 8011e14:	f200 81da 	bhi.w	80121cc <create_DijkstraMap+0xafc>
				if(Direction==SLANT_SOUTH_EAST){
 8011e18:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e1c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011e20:	881b      	ldrh	r3, [r3, #0]
 8011e22:	2b03      	cmp	r3, #3
 8011e24:	d130      	bne.n	8011e88 <create_DijkstraMap+0x7b8>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011e26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e2a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8011e2e:	881b      	ldrh	r3, [r3, #0]
 8011e30:	3301      	adds	r3, #1
 8011e32:	b29b      	uxth	r3, r3
 8011e34:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e38:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e3c:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8011e3e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e42:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011e4a:	2b05      	cmp	r3, #5
 8011e4c:	dd05      	ble.n	8011e5a <create_DijkstraMap+0x78a>
 8011e4e:	2305      	movs	r3, #5
 8011e50:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e54:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011e58:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8011e5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011e5e:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011e62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011e66:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e6a:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e72:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e76:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011e7a:	8013      	strh	r3, [r2, #0]
 8011e7c:	e014      	b.n	8011ea8 <create_DijkstraMap+0x7d8>
 8011e7e:	bf00      	nop
 8011e80:	20000c3c 	.word	0x20000c3c
 8011e84:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8011e88:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8011e8c:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8011e90:	881b      	ldrh	r3, [r3, #0]
 8011e92:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011e96:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8011e9a:	8013      	strh	r3, [r2, #0]
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011ea2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8011ea6:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 8011ea8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011eac:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011eb0:	881b      	ldrh	r3, [r3, #0]
 8011eb2:	4a68      	ldr	r2, [pc, #416]	; (8012054 <create_DijkstraMap+0x984>)
 8011eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011eb8:	461a      	mov	r2, r3
 8011eba:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ebe:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011ec2:	881b      	ldrh	r3, [r3, #0]
 8011ec4:	fa42 f303 	asr.w	r3, r2, r3
 8011ec8:	f003 0301 	and.w	r3, r3, #1
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	f040 808e 	bne.w	8011fee <create_DijkstraMap+0x91e>
 8011ed2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ed6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011eda:	881a      	ldrh	r2, [r3, #0]
 8011edc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ee0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011ee4:	8819      	ldrh	r1, [r3, #0]
 8011ee6:	485c      	ldr	r0, [pc, #368]	; (8012058 <create_DijkstraMap+0x988>)
 8011ee8:	4613      	mov	r3, r2
 8011eea:	011b      	lsls	r3, r3, #4
 8011eec:	1a9b      	subs	r3, r3, r2
 8011eee:	440b      	add	r3, r1
 8011ef0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011ef4:	461c      	mov	r4, r3
 8011ef6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011efa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011efe:	881a      	ldrh	r2, [r3, #0]
 8011f00:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f04:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f08:	8819      	ldrh	r1, [r3, #0]
 8011f0a:	4853      	ldr	r0, [pc, #332]	; (8012058 <create_DijkstraMap+0x988>)
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	011b      	lsls	r3, r3, #4
 8011f10:	1a9b      	subs	r3, r3, r2
 8011f12:	440b      	add	r3, r1
 8011f14:	33f0      	adds	r3, #240	; 0xf0
 8011f16:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8011f1a:	461a      	mov	r2, r3
 8011f1c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f20:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011f28:	4413      	add	r3, r2
 8011f2a:	429c      	cmp	r4, r3
 8011f2c:	dd5f      	ble.n	8011fee <create_DijkstraMap+0x91e>
					Dijkstra.row_count[Ycoordinate][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8011f2e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f32:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f36:	881a      	ldrh	r2, [r3, #0]
 8011f38:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f3c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011f40:	8819      	ldrh	r1, [r3, #0]
 8011f42:	4845      	ldr	r0, [pc, #276]	; (8012058 <create_DijkstraMap+0x988>)
 8011f44:	4613      	mov	r3, r2
 8011f46:	011b      	lsls	r3, r3, #4
 8011f48:	1a9b      	subs	r3, r3, r2
 8011f4a:	440b      	add	r3, r1
 8011f4c:	33f0      	adds	r3, #240	; 0xf0
 8011f4e:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8011f52:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f56:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8011f5a:	881b      	ldrh	r3, [r3, #0]
 8011f5c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8011f60:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8011f64:	8812      	ldrh	r2, [r2, #0]
 8011f66:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8011f6a:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8011f6e:	8809      	ldrh	r1, [r1, #0]
 8011f70:	4403      	add	r3, r0
 8011f72:	b29c      	uxth	r4, r3
 8011f74:	4838      	ldr	r0, [pc, #224]	; (8012058 <create_DijkstraMap+0x988>)
 8011f76:	4613      	mov	r3, r2
 8011f78:	011b      	lsls	r3, r3, #4
 8011f7a:	1a9b      	subs	r3, r3, r2
 8011f7c:	440b      	add	r3, r1
 8011f7e:	4622      	mov	r2, r4
 8011f80:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 8011f84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011f88:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8011f8c:	881a      	ldrh	r2, [r3, #0]
 8011f8e:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8011f92:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8011f96:	4611      	mov	r1, r2
 8011f98:	4618      	mov	r0, r3
 8011f9a:	f002 feeb 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 8011f9e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fa2:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8011fa6:	881a      	ldrh	r2, [r3, #0]
 8011fa8:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8011fac:	f103 0320 	add.w	r3, r3, #32
 8011fb0:	3b0c      	subs	r3, #12
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	4618      	mov	r0, r3
 8011fb6:	f002 fedd 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8011fba:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8011fbe:	3b14      	subs	r3, #20
 8011fc0:	2101      	movs	r1, #1
 8011fc2:	4618      	mov	r0, r3
 8011fc4:	f002 fed6 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 8011fc8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8011fcc:	3b3c      	subs	r3, #60	; 0x3c
 8011fce:	2103      	movs	r1, #3
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f002 fecf 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 8011fd6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011fda:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8011fde:	881a      	ldrh	r2, [r3, #0]
 8011fe0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011fe4:	3b64      	subs	r3, #100	; 0x64
 8011fe6:	4611      	mov	r1, r2
 8011fe8:	4618      	mov	r0, r3
 8011fea:	f002 fec3 	bl	8014d74 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_EAST){
 8011fee:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8011ff2:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8011ff6:	881b      	ldrh	r3, [r3, #0]
 8011ff8:	2b01      	cmp	r3, #1
 8011ffa:	d12f      	bne.n	801205c <create_DijkstraMap+0x98c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8011ffc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012000:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012004:	881b      	ldrh	r3, [r3, #0]
 8012006:	3301      	adds	r3, #1
 8012008:	b29b      	uxth	r3, r3
 801200a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801200e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012012:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012014:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012018:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801201c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012020:	2b05      	cmp	r3, #5
 8012022:	dd05      	ble.n	8012030 <create_DijkstraMap+0x960>
 8012024:	2305      	movs	r3, #5
 8012026:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801202a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801202e:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 8012030:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012034:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012038:	f9b3 2000 	ldrsh.w	r2, [r3]
 801203c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012040:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012044:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012048:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801204c:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012050:	8013      	strh	r3, [r2, #0]
 8012052:	e013      	b.n	801207c <create_DijkstraMap+0x9ac>
 8012054:	20000c3c 	.word	0x20000c3c
 8012058:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801205c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012060:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012064:	881b      	ldrh	r3, [r3, #0]
 8012066:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801206a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801206e:	8013      	strh	r3, [r2, #0]
 8012070:	2300      	movs	r3, #0
 8012072:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012076:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801207a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801207c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012080:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012084:	881b      	ldrh	r3, [r3, #0]
 8012086:	4a6f      	ldr	r2, [pc, #444]	; (8012244 <create_DijkstraMap+0xb74>)
 8012088:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801208c:	461a      	mov	r2, r3
 801208e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012092:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012096:	881b      	ldrh	r3, [r3, #0]
 8012098:	3301      	adds	r3, #1
 801209a:	fa42 f303 	asr.w	r3, r2, r3
 801209e:	f003 0301 	and.w	r3, r3, #1
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	f040 8092 	bne.w	80121cc <create_DijkstraMap+0xafc>
 80120a8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120ac:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120b0:	881b      	ldrh	r3, [r3, #0]
 80120b2:	1c5a      	adds	r2, r3, #1
 80120b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120b8:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120bc:	8819      	ldrh	r1, [r3, #0]
 80120be:	4862      	ldr	r0, [pc, #392]	; (8012248 <create_DijkstraMap+0xb78>)
 80120c0:	4613      	mov	r3, r2
 80120c2:	011b      	lsls	r3, r3, #4
 80120c4:	1a9b      	subs	r3, r3, r2
 80120c6:	440b      	add	r3, r1
 80120c8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120cc:	461c      	mov	r4, r3
 80120ce:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120d2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80120d6:	881a      	ldrh	r2, [r3, #0]
 80120d8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120dc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80120e0:	8819      	ldrh	r1, [r3, #0]
 80120e2:	4859      	ldr	r0, [pc, #356]	; (8012248 <create_DijkstraMap+0xb78>)
 80120e4:	4613      	mov	r3, r2
 80120e6:	011b      	lsls	r3, r3, #4
 80120e8:	1a9b      	subs	r3, r3, r2
 80120ea:	440b      	add	r3, r1
 80120ec:	33f0      	adds	r3, #240	; 0xf0
 80120ee:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80120f2:	461a      	mov	r2, r3
 80120f4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80120f8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80120fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012100:	4413      	add	r3, r2
 8012102:	429c      	cmp	r4, r3
 8012104:	dd62      	ble.n	80121cc <create_DijkstraMap+0xafc>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 8012106:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801210a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801210e:	881a      	ldrh	r2, [r3, #0]
 8012110:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012114:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012118:	8819      	ldrh	r1, [r3, #0]
 801211a:	484b      	ldr	r0, [pc, #300]	; (8012248 <create_DijkstraMap+0xb78>)
 801211c:	4613      	mov	r3, r2
 801211e:	011b      	lsls	r3, r3, #4
 8012120:	1a9b      	subs	r3, r3, r2
 8012122:	440b      	add	r3, r1
 8012124:	33f0      	adds	r3, #240	; 0xf0
 8012126:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801212a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801212e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012132:	881b      	ldrh	r3, [r3, #0]
 8012134:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012138:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801213c:	8812      	ldrh	r2, [r2, #0]
 801213e:	3201      	adds	r2, #1
 8012140:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012144:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012148:	8809      	ldrh	r1, [r1, #0]
 801214a:	4403      	add	r3, r0
 801214c:	b29c      	uxth	r4, r3
 801214e:	483e      	ldr	r0, [pc, #248]	; (8012248 <create_DijkstraMap+0xb78>)
 8012150:	4613      	mov	r3, r2
 8012152:	011b      	lsls	r3, r3, #4
 8012154:	1a9b      	subs	r3, r3, r2
 8012156:	440b      	add	r3, r1
 8012158:	4622      	mov	r2, r4
 801215a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate);
 801215e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012162:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012166:	881a      	ldrh	r2, [r3, #0]
 8012168:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 801216c:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012170:	4611      	mov	r1, r2
 8012172:	4618      	mov	r0, r3
 8012174:	f002 fdfe 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012178:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801217c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012180:	881b      	ldrh	r3, [r3, #0]
 8012182:	3301      	adds	r3, #1
 8012184:	b29a      	uxth	r2, r3
 8012186:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801218a:	f103 0320 	add.w	r3, r3, #32
 801218e:	3b0c      	subs	r3, #12
 8012190:	4611      	mov	r1, r2
 8012192:	4618      	mov	r0, r3
 8012194:	f002 fdee 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012198:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801219c:	3b14      	subs	r3, #20
 801219e:	2101      	movs	r1, #1
 80121a0:	4618      	mov	r0, r3
 80121a2:	f002 fde7 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 80121a6:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80121aa:	3b3c      	subs	r3, #60	; 0x3c
 80121ac:	2101      	movs	r1, #1
 80121ae:	4618      	mov	r0, r3
 80121b0:	f002 fde0 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80121b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121b8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80121bc:	881a      	ldrh	r2, [r3, #0]
 80121be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80121c2:	3b64      	subs	r3, #100	; 0x64
 80121c4:	4611      	mov	r1, r2
 80121c6:	4618      	mov	r0, r3
 80121c8:	f002 fdd4 	bl	8014d74 <pushStack_walk>
				}
			}
			if (Xcoordinate >= 1) {
 80121cc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121d0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80121d4:	881b      	ldrh	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f000 81e5 	beq.w	80125a6 <create_DijkstraMap+0xed6>
				if(Direction==SLANT_SOUTH_WEST){
 80121dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121e0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80121e4:	881b      	ldrh	r3, [r3, #0]
 80121e6:	2b05      	cmp	r3, #5
 80121e8:	d130      	bne.n	801224c <create_DijkstraMap+0xb7c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80121ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80121ee:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80121f2:	881b      	ldrh	r3, [r3, #0]
 80121f4:	3301      	adds	r3, #1
 80121f6:	b29b      	uxth	r3, r3
 80121f8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80121fc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012200:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012202:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012206:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801220a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801220e:	2b05      	cmp	r3, #5
 8012210:	dd05      	ble.n	801221e <create_DijkstraMap+0xb4e>
 8012212:	2305      	movs	r3, #5
 8012214:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012218:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801221c:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 801221e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012222:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012226:	f9b3 2000 	ldrsh.w	r2, [r3]
 801222a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801222e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012232:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012236:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801223a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801223e:	8013      	strh	r3, [r2, #0]
 8012240:	e014      	b.n	801226c <create_DijkstraMap+0xb9c>
 8012242:	bf00      	nop
 8012244:	20000c3c 	.word	0x20000c3c
 8012248:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801224c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012250:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012254:	881b      	ldrh	r3, [r3, #0]
 8012256:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801225a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801225e:	8013      	strh	r3, [r2, #0]
 8012260:	2300      	movs	r3, #0
 8012262:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012266:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801226a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801226c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012270:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012274:	881b      	ldrh	r3, [r3, #0]
 8012276:	3b01      	subs	r3, #1
 8012278:	4a6a      	ldr	r2, [pc, #424]	; (8012424 <create_DijkstraMap+0xd54>)
 801227a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801227e:	461a      	mov	r2, r3
 8012280:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012284:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012288:	881b      	ldrh	r3, [r3, #0]
 801228a:	fa42 f303 	asr.w	r3, r2, r3
 801228e:	f003 0301 	and.w	r3, r3, #1
 8012292:	2b00      	cmp	r3, #0
 8012294:	f040 8092 	bne.w	80123bc <create_DijkstraMap+0xcec>
 8012298:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801229c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122a0:	881a      	ldrh	r2, [r3, #0]
 80122a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122aa:	881b      	ldrh	r3, [r3, #0]
 80122ac:	1e59      	subs	r1, r3, #1
 80122ae:	485e      	ldr	r0, [pc, #376]	; (8012428 <create_DijkstraMap+0xd58>)
 80122b0:	4613      	mov	r3, r2
 80122b2:	011b      	lsls	r3, r3, #4
 80122b4:	1a9b      	subs	r3, r3, r2
 80122b6:	440b      	add	r3, r1
 80122b8:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122bc:	461c      	mov	r4, r3
 80122be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122c2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122c6:	881a      	ldrh	r2, [r3, #0]
 80122c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122cc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80122d0:	8819      	ldrh	r1, [r3, #0]
 80122d2:	4855      	ldr	r0, [pc, #340]	; (8012428 <create_DijkstraMap+0xd58>)
 80122d4:	4613      	mov	r3, r2
 80122d6:	011b      	lsls	r3, r3, #4
 80122d8:	1a9b      	subs	r3, r3, r2
 80122da:	440b      	add	r3, r1
 80122dc:	33f0      	adds	r3, #240	; 0xf0
 80122de:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80122e2:	461a      	mov	r2, r3
 80122e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122e8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80122ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122f0:	4413      	add	r3, r2
 80122f2:	429c      	cmp	r4, r3
 80122f4:	dd62      	ble.n	80123bc <create_DijkstraMap+0xcec>
					Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80122f6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80122fa:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80122fe:	881a      	ldrh	r2, [r3, #0]
 8012300:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012304:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012308:	8819      	ldrh	r1, [r3, #0]
 801230a:	4847      	ldr	r0, [pc, #284]	; (8012428 <create_DijkstraMap+0xd58>)
 801230c:	4613      	mov	r3, r2
 801230e:	011b      	lsls	r3, r3, #4
 8012310:	1a9b      	subs	r3, r3, r2
 8012312:	440b      	add	r3, r1
 8012314:	33f0      	adds	r3, #240	; 0xf0
 8012316:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 801231a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801231e:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012328:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 801232c:	8812      	ldrh	r2, [r2, #0]
 801232e:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012332:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012336:	8809      	ldrh	r1, [r1, #0]
 8012338:	3901      	subs	r1, #1
 801233a:	4403      	add	r3, r0
 801233c:	b29c      	uxth	r4, r3
 801233e:	483a      	ldr	r0, [pc, #232]	; (8012428 <create_DijkstraMap+0xd58>)
 8012340:	4613      	mov	r3, r2
 8012342:	011b      	lsls	r3, r3, #4
 8012344:	1a9b      	subs	r3, r3, r2
 8012346:	440b      	add	r3, r1
 8012348:	4622      	mov	r2, r4
 801234a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 801234e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012352:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	3b01      	subs	r3, #1
 801235a:	b29a      	uxth	r2, r3
 801235c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012360:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012364:	4611      	mov	r1, r2
 8012366:	4618      	mov	r0, r3
 8012368:	f002 fd04 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate);
 801236c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012370:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012374:	881a      	ldrh	r2, [r3, #0]
 8012376:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801237a:	f103 0320 	add.w	r3, r3, #32
 801237e:	3b0c      	subs	r3, #12
 8012380:	4611      	mov	r1, r2
 8012382:	4618      	mov	r0, r3
 8012384:	f002 fcf6 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012388:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801238c:	3b14      	subs	r3, #20
 801238e:	2101      	movs	r1, #1
 8012390:	4618      	mov	r0, r3
 8012392:	f002 fcef 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012396:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801239a:	3b3c      	subs	r3, #60	; 0x3c
 801239c:	2105      	movs	r1, #5
 801239e:	4618      	mov	r0, r3
 80123a0:	f002 fce8 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 80123a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123a8:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123ac:	881a      	ldrh	r2, [r3, #0]
 80123ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80123b2:	3b64      	subs	r3, #100	; 0x64
 80123b4:	4611      	mov	r1, r2
 80123b6:	4618      	mov	r0, r3
 80123b8:	f002 fcdc 	bl	8014d74 <pushStack_walk>
				}
				if(Direction==SLANT_NORTH_WEST){
 80123bc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123c0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80123c4:	881b      	ldrh	r3, [r3, #0]
 80123c6:	2b07      	cmp	r3, #7
 80123c8:	d130      	bne.n	801242c <create_DijkstraMap+0xd5c>
					dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80123ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123ce:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80123d2:	881b      	ldrh	r3, [r3, #0]
 80123d4:	3301      	adds	r3, #1
 80123d6:	b29b      	uxth	r3, r3
 80123d8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123dc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80123e0:	8013      	strh	r3, [r2, #0]
					if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80123e2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80123e6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80123ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123ee:	2b05      	cmp	r3, #5
 80123f0:	dd05      	ble.n	80123fe <create_DijkstraMap+0xd2e>
 80123f2:	2305      	movs	r3, #5
 80123f4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80123f8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80123fc:	8013      	strh	r3, [r2, #0]
					DiagonalCost=discount_d[dis_cost_in];
 80123fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012402:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012406:	f9b3 2000 	ldrsh.w	r2, [r3]
 801240a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 801240e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012412:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012416:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801241a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801241e:	8013      	strh	r3, [r2, #0]
 8012420:	e014      	b.n	801244c <create_DijkstraMap+0xd7c>
 8012422:	bf00      	nop
 8012424:	20000c3c 	.word	0x20000c3c
 8012428:	20000f30 	.word	0x20000f30
				}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 801242c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012430:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012434:	881b      	ldrh	r3, [r3, #0]
 8012436:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801243a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 801243e:	8013      	strh	r3, [r2, #0]
 8012440:	2300      	movs	r3, #0
 8012442:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012446:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801244a:	8013      	strh	r3, [r2, #0]
				if((wall.row[Xcoordinate-1] & (1 << (Ycoordinate+1)))==0 && Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]>Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost){
 801244c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012450:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012454:	881b      	ldrh	r3, [r3, #0]
 8012456:	3b01      	subs	r3, #1
 8012458:	4a74      	ldr	r2, [pc, #464]	; (801262c <create_DijkstraMap+0xf5c>)
 801245a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801245e:	461a      	mov	r2, r3
 8012460:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012464:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012468:	881b      	ldrh	r3, [r3, #0]
 801246a:	3301      	adds	r3, #1
 801246c:	fa42 f303 	asr.w	r3, r2, r3
 8012470:	f003 0301 	and.w	r3, r3, #1
 8012474:	2b00      	cmp	r3, #0
 8012476:	f040 8096 	bne.w	80125a6 <create_DijkstraMap+0xed6>
 801247a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801247e:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012482:	881b      	ldrh	r3, [r3, #0]
 8012484:	1c5a      	adds	r2, r3, #1
 8012486:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801248a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	1e59      	subs	r1, r3, #1
 8012492:	4867      	ldr	r0, [pc, #412]	; (8012630 <create_DijkstraMap+0xf60>)
 8012494:	4613      	mov	r3, r2
 8012496:	011b      	lsls	r3, r3, #4
 8012498:	1a9b      	subs	r3, r3, r2
 801249a:	440b      	add	r3, r1
 801249c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124a0:	461c      	mov	r4, r3
 80124a2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124a6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124aa:	881a      	ldrh	r2, [r3, #0]
 80124ac:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124b0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124b4:	8819      	ldrh	r1, [r3, #0]
 80124b6:	485e      	ldr	r0, [pc, #376]	; (8012630 <create_DijkstraMap+0xf60>)
 80124b8:	4613      	mov	r3, r2
 80124ba:	011b      	lsls	r3, r3, #4
 80124bc:	1a9b      	subs	r3, r3, r2
 80124be:	440b      	add	r3, r1
 80124c0:	33f0      	adds	r3, #240	; 0xf0
 80124c2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80124c6:	461a      	mov	r2, r3
 80124c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124cc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 80124d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80124d4:	4413      	add	r3, r2
 80124d6:	429c      	cmp	r4, r3
 80124d8:	dd65      	ble.n	80125a6 <create_DijkstraMap+0xed6>
					Dijkstra.row_count[Ycoordinate+1][Xcoordinate-1]=Dijkstra.column_count[Xcoordinate][Ycoordinate]+DiagonalCost;
 80124da:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124de:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80124e2:	881a      	ldrh	r2, [r3, #0]
 80124e4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80124e8:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80124ec:	8819      	ldrh	r1, [r3, #0]
 80124ee:	4850      	ldr	r0, [pc, #320]	; (8012630 <create_DijkstraMap+0xf60>)
 80124f0:	4613      	mov	r3, r2
 80124f2:	011b      	lsls	r3, r3, #4
 80124f4:	1a9b      	subs	r3, r3, r2
 80124f6:	440b      	add	r3, r1
 80124f8:	33f0      	adds	r3, #240	; 0xf0
 80124fa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80124fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012502:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012506:	881b      	ldrh	r3, [r3, #0]
 8012508:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801250c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012510:	8812      	ldrh	r2, [r2, #0]
 8012512:	3201      	adds	r2, #1
 8012514:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012518:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801251c:	8809      	ldrh	r1, [r1, #0]
 801251e:	3901      	subs	r1, #1
 8012520:	4403      	add	r3, r0
 8012522:	b29c      	uxth	r4, r3
 8012524:	4842      	ldr	r0, [pc, #264]	; (8012630 <create_DijkstraMap+0xf60>)
 8012526:	4613      	mov	r3, r2
 8012528:	011b      	lsls	r3, r3, #4
 801252a:	1a9b      	subs	r3, r3, r2
 801252c:	440b      	add	r3, r1
 801252e:	4622      	mov	r2, r4
 8012530:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					pushStack_walk(&stack_x,Xcoordinate-1);
 8012534:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012538:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801253c:	881b      	ldrh	r3, [r3, #0]
 801253e:	3b01      	subs	r3, #1
 8012540:	b29a      	uxth	r2, r3
 8012542:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012546:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 801254a:	4611      	mov	r1, r2
 801254c:	4618      	mov	r0, r3
 801254e:	f002 fc11 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_y,Ycoordinate+1);
 8012552:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012556:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801255a:	881b      	ldrh	r3, [r3, #0]
 801255c:	3301      	adds	r3, #1
 801255e:	b29a      	uxth	r2, r3
 8012560:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012564:	f103 0320 	add.w	r3, r3, #32
 8012568:	3b0c      	subs	r3, #12
 801256a:	4611      	mov	r1, r2
 801256c:	4618      	mov	r0, r3
 801256e:	f002 fc01 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_matrix,ROW);
 8012572:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012576:	3b14      	subs	r3, #20
 8012578:	2101      	movs	r1, #1
 801257a:	4618      	mov	r0, r3
 801257c:	f002 fbfa 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012580:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012584:	3b3c      	subs	r3, #60	; 0x3c
 8012586:	2107      	movs	r1, #7
 8012588:	4618      	mov	r0, r3
 801258a:	f002 fbf3 	bl	8014d74 <pushStack_walk>
					pushStack_walk(&stack_cost,dis_cost_in);
 801258e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012592:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012596:	881a      	ldrh	r2, [r3, #0]
 8012598:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801259c:	3b64      	subs	r3, #100	; 0x64
 801259e:	4611      	mov	r1, r2
 80125a0:	4618      	mov	r0, r3
 80125a2:	f002 fbe7 	bl	8014d74 <pushStack_walk>
				}
			}

		}
		if(Row_or_Column==ROW){
 80125a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125aa:	f103 0368 	add.w	r3, r3, #104	; 0x68
 80125ae:	881b      	ldrh	r3, [r3, #0]
 80125b0:	2b01      	cmp	r3, #1
 80125b2:	f040 85bd 	bne.w	8013130 <create_DijkstraMap+0x1a60>
					if(Xcoordinate <= 13){
 80125b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ba:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80125be:	881b      	ldrh	r3, [r3, #0]
 80125c0:	2b0d      	cmp	r3, #13
 80125c2:	f200 80ed 	bhi.w	80127a0 <create_DijkstraMap+0x10d0>
						if(Direction==SLANT_EAST){
 80125c6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125ca:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80125ce:	881b      	ldrh	r3, [r3, #0]
 80125d0:	2b02      	cmp	r3, #2
 80125d2:	d12f      	bne.n	8012634 <create_DijkstraMap+0xf64>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80125d4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125d8:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80125dc:	881b      	ldrh	r3, [r3, #0]
 80125de:	3301      	adds	r3, #1
 80125e0:	b29b      	uxth	r3, r3
 80125e2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80125e6:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80125ea:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80125ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80125f0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80125f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80125f8:	2b04      	cmp	r3, #4
 80125fa:	dd05      	ble.n	8012608 <create_DijkstraMap+0xf38>
 80125fc:	2304      	movs	r3, #4
 80125fe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012602:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012606:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 8012608:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801260c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012610:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012614:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012618:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801261c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012620:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012624:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012628:	8013      	strh	r3, [r2, #0]
 801262a:	e013      	b.n	8012654 <create_DijkstraMap+0xf84>
 801262c:	20000c3c 	.word	0x20000c3c
 8012630:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012634:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012638:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012642:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012646:	8013      	strh	r3, [r2, #0]
 8012648:	2300      	movs	r3, #0
 801264a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801264e:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012652:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate+1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate+1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012654:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012658:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801265c:	881b      	ldrh	r3, [r3, #0]
 801265e:	3301      	adds	r3, #1
 8012660:	4a6d      	ldr	r2, [pc, #436]	; (8012818 <create_DijkstraMap+0x1148>)
 8012662:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012666:	461a      	mov	r2, r3
 8012668:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801266c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012670:	881b      	ldrh	r3, [r3, #0]
 8012672:	fa42 f303 	asr.w	r3, r2, r3
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	f040 8090 	bne.w	80127a0 <create_DijkstraMap+0x10d0>
 8012680:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012684:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012688:	881a      	ldrh	r2, [r3, #0]
 801268a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801268e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012692:	881b      	ldrh	r3, [r3, #0]
 8012694:	1c59      	adds	r1, r3, #1
 8012696:	4861      	ldr	r0, [pc, #388]	; (801281c <create_DijkstraMap+0x114c>)
 8012698:	4613      	mov	r3, r2
 801269a:	011b      	lsls	r3, r3, #4
 801269c:	1a9b      	subs	r3, r3, r2
 801269e:	440b      	add	r3, r1
 80126a0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80126a4:	461c      	mov	r4, r3
 80126a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126aa:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126ae:	881a      	ldrh	r2, [r3, #0]
 80126b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126b4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126b8:	8819      	ldrh	r1, [r3, #0]
 80126ba:	4858      	ldr	r0, [pc, #352]	; (801281c <create_DijkstraMap+0x114c>)
 80126bc:	4613      	mov	r3, r2
 80126be:	011b      	lsls	r3, r3, #4
 80126c0:	1a9b      	subs	r3, r3, r2
 80126c2:	440b      	add	r3, r1
 80126c4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80126c8:	461a      	mov	r2, r3
 80126ca:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ce:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80126d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126d6:	4413      	add	r3, r2
 80126d8:	429c      	cmp	r4, r3
 80126da:	dd61      	ble.n	80127a0 <create_DijkstraMap+0x10d0>
							Dijkstra.row_count[Ycoordinate][Xcoordinate+1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80126dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80126e4:	881a      	ldrh	r2, [r3, #0]
 80126e6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80126ea:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80126ee:	8819      	ldrh	r1, [r3, #0]
 80126f0:	484a      	ldr	r0, [pc, #296]	; (801281c <create_DijkstraMap+0x114c>)
 80126f2:	4613      	mov	r3, r2
 80126f4:	011b      	lsls	r3, r3, #4
 80126f6:	1a9b      	subs	r3, r3, r2
 80126f8:	440b      	add	r3, r1
 80126fa:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80126fe:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012702:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 8012706:	881b      	ldrh	r3, [r3, #0]
 8012708:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801270c:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 8012710:	8812      	ldrh	r2, [r2, #0]
 8012712:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012716:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 801271a:	8809      	ldrh	r1, [r1, #0]
 801271c:	3101      	adds	r1, #1
 801271e:	4403      	add	r3, r0
 8012720:	b29c      	uxth	r4, r3
 8012722:	483e      	ldr	r0, [pc, #248]	; (801281c <create_DijkstraMap+0x114c>)
 8012724:	4613      	mov	r3, r2
 8012726:	011b      	lsls	r3, r3, #4
 8012728:	1a9b      	subs	r3, r3, r2
 801272a:	440b      	add	r3, r1
 801272c:	4622      	mov	r2, r4
 801272e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012732:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012736:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801273a:	881b      	ldrh	r3, [r3, #0]
 801273c:	3301      	adds	r3, #1
 801273e:	b29a      	uxth	r2, r3
 8012740:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012744:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012748:	4611      	mov	r1, r2
 801274a:	4618      	mov	r0, r3
 801274c:	f002 fb12 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012750:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012754:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801275e:	f103 0320 	add.w	r3, r3, #32
 8012762:	3b0c      	subs	r3, #12
 8012764:	4611      	mov	r1, r2
 8012766:	4618      	mov	r0, r3
 8012768:	f002 fb04 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 801276c:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012770:	3b14      	subs	r3, #20
 8012772:	2101      	movs	r1, #1
 8012774:	4618      	mov	r0, r3
 8012776:	f002 fafd 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_EAST);
 801277a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801277e:	3b3c      	subs	r3, #60	; 0x3c
 8012780:	2102      	movs	r1, #2
 8012782:	4618      	mov	r0, r3
 8012784:	f002 faf6 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012788:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801278c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012790:	881a      	ldrh	r2, [r3, #0]
 8012792:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012796:	3b64      	subs	r3, #100	; 0x64
 8012798:	4611      	mov	r1, r2
 801279a:	4618      	mov	r0, r3
 801279c:	f002 faea 	bl	8014d74 <pushStack_walk>
						}
					}
					if (Xcoordinate >= 1) {
 80127a0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127a4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80127a8:	881b      	ldrh	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	f000 80ee 	beq.w	801298c <create_DijkstraMap+0x12bc>
						if(Direction==SLANT_WEST){
 80127b0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127b4:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80127b8:	881b      	ldrh	r3, [r3, #0]
 80127ba:	2b06      	cmp	r3, #6
 80127bc:	d130      	bne.n	8012820 <create_DijkstraMap+0x1150>
							dis_cost_in=dis_cost+DISCOUNTCOST_V;
 80127be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127c2:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	3301      	adds	r3, #1
 80127ca:	b29b      	uxth	r3, r3
 80127cc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127d0:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127d4:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=V_NUM_MAX){dis_cost_in=V_NUM_MAX-1;}
 80127d6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127da:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80127e2:	2b04      	cmp	r3, #4
 80127e4:	dd05      	ble.n	80127f2 <create_DijkstraMap+0x1122>
 80127e6:	2304      	movs	r3, #4
 80127e8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80127ec:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80127f0:	8013      	strh	r3, [r2, #0]
							VerticalCost=discount_v[dis_cost_in];
 80127f2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80127f6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80127fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80127fe:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012802:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012806:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801280a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801280e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012812:	8013      	strh	r3, [r2, #0]
 8012814:	e014      	b.n	8012840 <create_DijkstraMap+0x1170>
 8012816:	bf00      	nop
 8012818:	20000c3c 	.word	0x20000c3c
 801281c:	20000f30 	.word	0x20000f30
						}else{VerticalCost=discount_v[0];dis_cost_in=0;}
 8012820:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012824:	f5a3 6367 	sub.w	r3, r3, #3696	; 0xe70
 8012828:	881b      	ldrh	r3, [r3, #0]
 801282a:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801282e:	f102 027e 	add.w	r2, r2, #126	; 0x7e
 8012832:	8013      	strh	r3, [r2, #0]
 8012834:	2300      	movs	r3, #0
 8012836:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 801283a:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 801283e:	8013      	strh	r3, [r2, #0]
						if((wall.row[Xcoordinate-1] & (1 << Ycoordinate))==0 && Dijkstra.row_count[Ycoordinate][Xcoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost){
 8012840:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012844:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012848:	881b      	ldrh	r3, [r3, #0]
 801284a:	3b01      	subs	r3, #1
 801284c:	4a6d      	ldr	r2, [pc, #436]	; (8012a04 <create_DijkstraMap+0x1334>)
 801284e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012852:	461a      	mov	r2, r3
 8012854:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012858:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801285c:	881b      	ldrh	r3, [r3, #0]
 801285e:	fa42 f303 	asr.w	r3, r2, r3
 8012862:	f003 0301 	and.w	r3, r3, #1
 8012866:	2b00      	cmp	r3, #0
 8012868:	f040 8090 	bne.w	801298c <create_DijkstraMap+0x12bc>
 801286c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012870:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012874:	881a      	ldrh	r2, [r3, #0]
 8012876:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801287a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801287e:	881b      	ldrh	r3, [r3, #0]
 8012880:	1e59      	subs	r1, r3, #1
 8012882:	4861      	ldr	r0, [pc, #388]	; (8012a08 <create_DijkstraMap+0x1338>)
 8012884:	4613      	mov	r3, r2
 8012886:	011b      	lsls	r3, r3, #4
 8012888:	1a9b      	subs	r3, r3, r2
 801288a:	440b      	add	r3, r1
 801288c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012890:	461c      	mov	r4, r3
 8012892:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012896:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801289a:	881a      	ldrh	r2, [r3, #0]
 801289c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128a0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128a4:	8819      	ldrh	r1, [r3, #0]
 80128a6:	4858      	ldr	r0, [pc, #352]	; (8012a08 <create_DijkstraMap+0x1338>)
 80128a8:	4613      	mov	r3, r2
 80128aa:	011b      	lsls	r3, r3, #4
 80128ac:	1a9b      	subs	r3, r3, r2
 80128ae:	440b      	add	r3, r1
 80128b0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80128b4:	461a      	mov	r2, r3
 80128b6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128ba:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80128c2:	4413      	add	r3, r2
 80128c4:	429c      	cmp	r4, r3
 80128c6:	dd61      	ble.n	801298c <create_DijkstraMap+0x12bc>
							Dijkstra.row_count[Ycoordinate][Xcoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+VerticalCost;
 80128c8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128cc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80128d0:	881a      	ldrh	r2, [r3, #0]
 80128d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128d6:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80128da:	8819      	ldrh	r1, [r3, #0]
 80128dc:	484a      	ldr	r0, [pc, #296]	; (8012a08 <create_DijkstraMap+0x1338>)
 80128de:	4613      	mov	r3, r2
 80128e0:	011b      	lsls	r3, r3, #4
 80128e2:	1a9b      	subs	r3, r3, r2
 80128e4:	440b      	add	r3, r1
 80128e6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 80128ea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80128ee:	f103 037e 	add.w	r3, r3, #126	; 0x7e
 80128f2:	881b      	ldrh	r3, [r3, #0]
 80128f4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80128f8:	f102 026a 	add.w	r2, r2, #106	; 0x6a
 80128fc:	8812      	ldrh	r2, [r2, #0]
 80128fe:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012902:	f101 016c 	add.w	r1, r1, #108	; 0x6c
 8012906:	8809      	ldrh	r1, [r1, #0]
 8012908:	3901      	subs	r1, #1
 801290a:	4403      	add	r3, r0
 801290c:	b29c      	uxth	r4, r3
 801290e:	483e      	ldr	r0, [pc, #248]	; (8012a08 <create_DijkstraMap+0x1338>)
 8012910:	4613      	mov	r3, r2
 8012912:	011b      	lsls	r3, r3, #4
 8012914:	1a9b      	subs	r3, r3, r2
 8012916:	440b      	add	r3, r1
 8012918:	4622      	mov	r2, r4
 801291a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate - 1);
 801291e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012922:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	3b01      	subs	r3, #1
 801292a:	b29a      	uxth	r2, r3
 801292c:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012930:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012934:	4611      	mov	r1, r2
 8012936:	4618      	mov	r0, r3
 8012938:	f002 fa1c 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 801293c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012940:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012944:	881a      	ldrh	r2, [r3, #0]
 8012946:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801294a:	f103 0320 	add.w	r3, r3, #32
 801294e:	3b0c      	subs	r3, #12
 8012950:	4611      	mov	r1, r2
 8012952:	4618      	mov	r0, r3
 8012954:	f002 fa0e 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,ROW);
 8012958:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 801295c:	3b14      	subs	r3, #20
 801295e:	2101      	movs	r1, #1
 8012960:	4618      	mov	r0, r3
 8012962:	f002 fa07 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_WEST);
 8012966:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801296a:	3b3c      	subs	r3, #60	; 0x3c
 801296c:	2106      	movs	r1, #6
 801296e:	4618      	mov	r0, r3
 8012970:	f002 fa00 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012974:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012978:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 801297c:	881a      	ldrh	r2, [r3, #0]
 801297e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012982:	3b64      	subs	r3, #100	; 0x64
 8012984:	4611      	mov	r1, r2
 8012986:	4618      	mov	r0, r3
 8012988:	f002 f9f4 	bl	8014d74 <pushStack_walk>
						}
					}
					if (Ycoordinate <= 14) {
 801298c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012990:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012994:	881b      	ldrh	r3, [r3, #0]
 8012996:	2b0e      	cmp	r3, #14
 8012998:	f200 81de 	bhi.w	8012d58 <create_DijkstraMap+0x1688>
						if(Direction==SLANT_NORTH_WEST){
 801299c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129a0:	f103 0366 	add.w	r3, r3, #102	; 0x66
 80129a4:	881b      	ldrh	r3, [r3, #0]
 80129a6:	2b07      	cmp	r3, #7
 80129a8:	d130      	bne.n	8012a0c <create_DijkstraMap+0x133c>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 80129aa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129ae:	f103 0364 	add.w	r3, r3, #100	; 0x64
 80129b2:	881b      	ldrh	r3, [r3, #0]
 80129b4:	3301      	adds	r3, #1
 80129b6:	b29b      	uxth	r3, r3
 80129b8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129bc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129c0:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 80129c2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129c6:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80129ce:	2b05      	cmp	r3, #5
 80129d0:	dd05      	ble.n	80129de <create_DijkstraMap+0x130e>
 80129d2:	2305      	movs	r3, #5
 80129d4:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129d8:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 80129dc:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 80129de:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80129e2:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 80129e6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80129ea:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 80129ee:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 80129f2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80129f6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 80129fa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 80129fe:	8013      	strh	r3, [r2, #0]
 8012a00:	e014      	b.n	8012a2c <create_DijkstraMap+0x135c>
 8012a02:	bf00      	nop
 8012a04:	20000c3c 	.word	0x20000c3c
 8012a08:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012a0c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012a10:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012a14:	881b      	ldrh	r3, [r3, #0]
 8012a16:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a1a:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012a1e:	8013      	strh	r3, [r2, #0]
 8012a20:	2300      	movs	r3, #0
 8012a22:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012a26:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012a2a:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012a2c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a30:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	4a69      	ldr	r2, [pc, #420]	; (8012bdc <create_DijkstraMap+0x150c>)
 8012a38:	330c      	adds	r3, #12
 8012a3a:	005b      	lsls	r3, r3, #1
 8012a3c:	4413      	add	r3, r2
 8012a3e:	88db      	ldrh	r3, [r3, #6]
 8012a40:	461a      	mov	r2, r3
 8012a42:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a46:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a4a:	881b      	ldrh	r3, [r3, #0]
 8012a4c:	fa42 f303 	asr.w	r3, r2, r3
 8012a50:	f003 0301 	and.w	r3, r3, #1
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	f040 808e 	bne.w	8012b76 <create_DijkstraMap+0x14a6>
 8012a5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a5e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a62:	881a      	ldrh	r2, [r3, #0]
 8012a64:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a68:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a6c:	8819      	ldrh	r1, [r3, #0]
 8012a6e:	485c      	ldr	r0, [pc, #368]	; (8012be0 <create_DijkstraMap+0x1510>)
 8012a70:	4613      	mov	r3, r2
 8012a72:	011b      	lsls	r3, r3, #4
 8012a74:	1a9b      	subs	r3, r3, r2
 8012a76:	440b      	add	r3, r1
 8012a78:	33f0      	adds	r3, #240	; 0xf0
 8012a7a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012a7e:	461c      	mov	r4, r3
 8012a80:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a84:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012a88:	881a      	ldrh	r2, [r3, #0]
 8012a8a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012a8e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012a92:	8819      	ldrh	r1, [r3, #0]
 8012a94:	4852      	ldr	r0, [pc, #328]	; (8012be0 <create_DijkstraMap+0x1510>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	011b      	lsls	r3, r3, #4
 8012a9a:	1a9b      	subs	r3, r3, r2
 8012a9c:	440b      	add	r3, r1
 8012a9e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aa8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ab0:	4413      	add	r3, r2
 8012ab2:	429c      	cmp	r4, r3
 8012ab4:	dd5f      	ble.n	8012b76 <create_DijkstraMap+0x14a6>
							Dijkstra.column_count[Xcoordinate][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012ab6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012aba:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012abe:	881a      	ldrh	r2, [r3, #0]
 8012ac0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ac4:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ac8:	8819      	ldrh	r1, [r3, #0]
 8012aca:	4845      	ldr	r0, [pc, #276]	; (8012be0 <create_DijkstraMap+0x1510>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	011b      	lsls	r3, r3, #4
 8012ad0:	1a9b      	subs	r3, r3, r2
 8012ad2:	440b      	add	r3, r1
 8012ad4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012ad8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012adc:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012ae0:	881b      	ldrh	r3, [r3, #0]
 8012ae2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012ae6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012aea:	8812      	ldrh	r2, [r2, #0]
 8012aec:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012af0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012af4:	8809      	ldrh	r1, [r1, #0]
 8012af6:	4403      	add	r3, r0
 8012af8:	b29c      	uxth	r4, r3
 8012afa:	4839      	ldr	r0, [pc, #228]	; (8012be0 <create_DijkstraMap+0x1510>)
 8012afc:	4613      	mov	r3, r2
 8012afe:	011b      	lsls	r3, r3, #4
 8012b00:	1a9b      	subs	r3, r3, r2
 8012b02:	440b      	add	r3, r1
 8012b04:	33f0      	adds	r3, #240	; 0xf0
 8012b06:	4622      	mov	r2, r4
 8012b08:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012b0c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b10:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012b14:	881a      	ldrh	r2, [r3, #0]
 8012b16:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012b1a:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012b1e:	4611      	mov	r1, r2
 8012b20:	4618      	mov	r0, r3
 8012b22:	f002 f927 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012b26:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b2a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012b2e:	881a      	ldrh	r2, [r3, #0]
 8012b30:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012b34:	f103 0320 	add.w	r3, r3, #32
 8012b38:	3b0c      	subs	r3, #12
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f002 f919 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012b42:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012b46:	3b14      	subs	r3, #20
 8012b48:	2100      	movs	r1, #0
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	f002 f912 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_WEST);
 8012b50:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012b54:	3b3c      	subs	r3, #60	; 0x3c
 8012b56:	2107      	movs	r1, #7
 8012b58:	4618      	mov	r0, r3
 8012b5a:	f002 f90b 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012b5e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b62:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012b66:	881a      	ldrh	r2, [r3, #0]
 8012b68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012b6c:	3b64      	subs	r3, #100	; 0x64
 8012b6e:	4611      	mov	r1, r2
 8012b70:	4618      	mov	r0, r3
 8012b72:	f002 f8ff 	bl	8014d74 <pushStack_walk>
						}
						if(Direction==SLANT_NORTH_EAST){
 8012b76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b7a:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012b7e:	881b      	ldrh	r3, [r3, #0]
 8012b80:	2b01      	cmp	r3, #1
 8012b82:	d12f      	bne.n	8012be4 <create_DijkstraMap+0x1514>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012b84:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012b88:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012b8c:	881b      	ldrh	r3, [r3, #0]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	b29b      	uxth	r3, r3
 8012b92:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012b96:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012b9a:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012b9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ba0:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012ba4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012ba8:	2b05      	cmp	r3, #5
 8012baa:	dd05      	ble.n	8012bb8 <create_DijkstraMap+0x14e8>
 8012bac:	2305      	movs	r3, #5
 8012bae:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bb2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012bb6:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012bb8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012bbc:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012bc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bc4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012bc8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bcc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012bd0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bd4:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012bd8:	8013      	strh	r3, [r2, #0]
 8012bda:	e013      	b.n	8012c04 <create_DijkstraMap+0x1534>
 8012bdc:	20000c3c 	.word	0x20000c3c
 8012be0:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012be4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012be8:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012bec:	881b      	ldrh	r3, [r3, #0]
 8012bee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bf2:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012bf6:	8013      	strh	r3, [r2, #0]
 8012bf8:	2300      	movs	r3, #0
 8012bfa:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012bfe:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012c02:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012c04:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c08:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c0c:	881b      	ldrh	r3, [r3, #0]
 8012c0e:	4a70      	ldr	r2, [pc, #448]	; (8012dd0 <create_DijkstraMap+0x1700>)
 8012c10:	330c      	adds	r3, #12
 8012c12:	005b      	lsls	r3, r3, #1
 8012c14:	4413      	add	r3, r2
 8012c16:	88db      	ldrh	r3, [r3, #6]
 8012c18:	461a      	mov	r2, r3
 8012c1a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c1e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c22:	881b      	ldrh	r3, [r3, #0]
 8012c24:	3301      	adds	r3, #1
 8012c26:	fa42 f303 	asr.w	r3, r2, r3
 8012c2a:	f003 0301 	and.w	r3, r3, #1
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	f040 8092 	bne.w	8012d58 <create_DijkstraMap+0x1688>
 8012c34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c38:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c3c:	881b      	ldrh	r3, [r3, #0]
 8012c3e:	1c5a      	adds	r2, r3, #1
 8012c40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c44:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c48:	8819      	ldrh	r1, [r3, #0]
 8012c4a:	4862      	ldr	r0, [pc, #392]	; (8012dd4 <create_DijkstraMap+0x1704>)
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	011b      	lsls	r3, r3, #4
 8012c50:	1a9b      	subs	r3, r3, r2
 8012c52:	440b      	add	r3, r1
 8012c54:	33f0      	adds	r3, #240	; 0xf0
 8012c56:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c5a:	461c      	mov	r4, r3
 8012c5c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c60:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c64:	881a      	ldrh	r2, [r3, #0]
 8012c66:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c6a:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012c6e:	8819      	ldrh	r1, [r3, #0]
 8012c70:	4858      	ldr	r0, [pc, #352]	; (8012dd4 <create_DijkstraMap+0x1704>)
 8012c72:	4613      	mov	r3, r2
 8012c74:	011b      	lsls	r3, r3, #4
 8012c76:	1a9b      	subs	r3, r3, r2
 8012c78:	440b      	add	r3, r1
 8012c7a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012c7e:	461a      	mov	r2, r3
 8012c80:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c84:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	429c      	cmp	r4, r3
 8012c90:	dd62      	ble.n	8012d58 <create_DijkstraMap+0x1688>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012c92:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012c96:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012c9a:	881a      	ldrh	r2, [r3, #0]
 8012c9c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ca0:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ca4:	8819      	ldrh	r1, [r3, #0]
 8012ca6:	484b      	ldr	r0, [pc, #300]	; (8012dd4 <create_DijkstraMap+0x1704>)
 8012ca8:	4613      	mov	r3, r2
 8012caa:	011b      	lsls	r3, r3, #4
 8012cac:	1a9b      	subs	r3, r3, r2
 8012cae:	440b      	add	r3, r1
 8012cb0:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012cb4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cb8:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012cbc:	881b      	ldrh	r3, [r3, #0]
 8012cbe:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012cc2:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012cc6:	8812      	ldrh	r2, [r2, #0]
 8012cc8:	3201      	adds	r2, #1
 8012cca:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012cce:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012cd2:	8809      	ldrh	r1, [r1, #0]
 8012cd4:	4403      	add	r3, r0
 8012cd6:	b29c      	uxth	r4, r3
 8012cd8:	483e      	ldr	r0, [pc, #248]	; (8012dd4 <create_DijkstraMap+0x1704>)
 8012cda:	4613      	mov	r3, r2
 8012cdc:	011b      	lsls	r3, r3, #4
 8012cde:	1a9b      	subs	r3, r3, r2
 8012ce0:	440b      	add	r3, r1
 8012ce2:	33f0      	adds	r3, #240	; 0xf0
 8012ce4:	4622      	mov	r2, r4
 8012ce6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate + 1);
 8012cea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012cee:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012cf2:	881b      	ldrh	r3, [r3, #0]
 8012cf4:	3301      	adds	r3, #1
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012cfc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f002 f836 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate);
 8012d08:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d0c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d10:	881a      	ldrh	r2, [r3, #0]
 8012d12:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012d16:	f103 0320 	add.w	r3, r3, #32
 8012d1a:	3b0c      	subs	r3, #12
 8012d1c:	4611      	mov	r1, r2
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f002 f828 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012d24:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012d28:	3b14      	subs	r3, #20
 8012d2a:	2100      	movs	r1, #0
 8012d2c:	4618      	mov	r0, r3
 8012d2e:	f002 f821 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_NORTH_EAST);
 8012d32:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012d36:	3b3c      	subs	r3, #60	; 0x3c
 8012d38:	2101      	movs	r1, #1
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	f002 f81a 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012d40:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d44:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d48:	881a      	ldrh	r2, [r3, #0]
 8012d4a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012d4e:	3b64      	subs	r3, #100	; 0x64
 8012d50:	4611      	mov	r1, r2
 8012d52:	4618      	mov	r0, r3
 8012d54:	f002 f80e 	bl	8014d74 <pushStack_walk>
						}
					}
					if (Ycoordinate >= 1) {
 8012d58:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d5c:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012d60:	881b      	ldrh	r3, [r3, #0]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	f000 81e4 	beq.w	8013130 <create_DijkstraMap+0x1a60>
						if(Direction==SLANT_SOUTH_WEST){
 8012d68:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d6c:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012d70:	881b      	ldrh	r3, [r3, #0]
 8012d72:	2b05      	cmp	r3, #5
 8012d74:	d130      	bne.n	8012dd8 <create_DijkstraMap+0x1708>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012d76:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d7a:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012d7e:	881b      	ldrh	r3, [r3, #0]
 8012d80:	3301      	adds	r3, #1
 8012d82:	b29b      	uxth	r3, r3
 8012d84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012d88:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012d8c:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012d8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012d92:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012d9a:	2b05      	cmp	r3, #5
 8012d9c:	dd05      	ble.n	8012daa <create_DijkstraMap+0x16da>
 8012d9e:	2305      	movs	r3, #5
 8012da0:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012da4:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012da8:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012daa:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dae:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012db2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012db6:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012dba:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012dbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012dc2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012dc6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012dca:	8013      	strh	r3, [r2, #0]
 8012dcc:	e014      	b.n	8012df8 <create_DijkstraMap+0x1728>
 8012dce:	bf00      	nop
 8012dd0:	20000c3c 	.word	0x20000c3c
 8012dd4:	20000f30 	.word	0x20000f30
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012dd8:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012ddc:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012de6:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012dea:	8013      	strh	r3, [r2, #0]
 8012dec:	2300      	movs	r3, #0
 8012dee:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012df2:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012df6:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << Xcoordinate))==0 && Dijkstra.column_count[Xcoordinate][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012df8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012dfc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e00:	881b      	ldrh	r3, [r3, #0]
 8012e02:	3b01      	subs	r3, #1
 8012e04:	4ad4      	ldr	r2, [pc, #848]	; (8013158 <create_DijkstraMap+0x1a88>)
 8012e06:	330c      	adds	r3, #12
 8012e08:	005b      	lsls	r3, r3, #1
 8012e0a:	4413      	add	r3, r2
 8012e0c:	88db      	ldrh	r3, [r3, #6]
 8012e0e:	461a      	mov	r2, r3
 8012e10:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e14:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e18:	881b      	ldrh	r3, [r3, #0]
 8012e1a:	fa42 f303 	asr.w	r3, r2, r3
 8012e1e:	f003 0301 	and.w	r3, r3, #1
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	f040 8092 	bne.w	8012f4c <create_DijkstraMap+0x187c>
 8012e28:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e2c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e30:	881a      	ldrh	r2, [r3, #0]
 8012e32:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e36:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	1e59      	subs	r1, r3, #1
 8012e3e:	48c7      	ldr	r0, [pc, #796]	; (801315c <create_DijkstraMap+0x1a8c>)
 8012e40:	4613      	mov	r3, r2
 8012e42:	011b      	lsls	r3, r3, #4
 8012e44:	1a9b      	subs	r3, r3, r2
 8012e46:	440b      	add	r3, r1
 8012e48:	33f0      	adds	r3, #240	; 0xf0
 8012e4a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e4e:	461c      	mov	r4, r3
 8012e50:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e54:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e58:	881a      	ldrh	r2, [r3, #0]
 8012e5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e5e:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e62:	8819      	ldrh	r1, [r3, #0]
 8012e64:	48bd      	ldr	r0, [pc, #756]	; (801315c <create_DijkstraMap+0x1a8c>)
 8012e66:	4613      	mov	r3, r2
 8012e68:	011b      	lsls	r3, r3, #4
 8012e6a:	1a9b      	subs	r3, r3, r2
 8012e6c:	440b      	add	r3, r1
 8012e6e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8012e72:	461a      	mov	r2, r3
 8012e74:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e78:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012e80:	4413      	add	r3, r2
 8012e82:	429c      	cmp	r4, r3
 8012e84:	dd62      	ble.n	8012f4c <create_DijkstraMap+0x187c>
							Dijkstra.column_count[Xcoordinate][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8012e86:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e8a:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012e8e:	881a      	ldrh	r2, [r3, #0]
 8012e90:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012e94:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012e98:	8819      	ldrh	r1, [r3, #0]
 8012e9a:	48b0      	ldr	r0, [pc, #704]	; (801315c <create_DijkstraMap+0x1a8c>)
 8012e9c:	4613      	mov	r3, r2
 8012e9e:	011b      	lsls	r3, r3, #4
 8012ea0:	1a9b      	subs	r3, r3, r2
 8012ea2:	440b      	add	r3, r1
 8012ea4:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8012ea8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012eac:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 8012eb0:	881b      	ldrh	r3, [r3, #0]
 8012eb2:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012eb6:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8012eba:	8812      	ldrh	r2, [r2, #0]
 8012ebc:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 8012ec0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 8012ec4:	8809      	ldrh	r1, [r1, #0]
 8012ec6:	3901      	subs	r1, #1
 8012ec8:	4403      	add	r3, r0
 8012eca:	b29c      	uxth	r4, r3
 8012ecc:	48a3      	ldr	r0, [pc, #652]	; (801315c <create_DijkstraMap+0x1a8c>)
 8012ece:	4613      	mov	r3, r2
 8012ed0:	011b      	lsls	r3, r3, #4
 8012ed2:	1a9b      	subs	r3, r3, r2
 8012ed4:	440b      	add	r3, r1
 8012ed6:	33f0      	adds	r3, #240	; 0xf0
 8012ed8:	4622      	mov	r2, r4
 8012eda:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate);
 8012ede:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012ee2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ee6:	881a      	ldrh	r2, [r3, #0]
 8012ee8:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 8012eec:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 8012ef0:	4611      	mov	r1, r2
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f001 ff3e 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate - 1);
 8012ef8:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012efc:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012f00:	881b      	ldrh	r3, [r3, #0]
 8012f02:	3b01      	subs	r3, #1
 8012f04:	b29a      	uxth	r2, r3
 8012f06:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8012f0a:	f103 0320 	add.w	r3, r3, #32
 8012f0e:	3b0c      	subs	r3, #12
 8012f10:	4611      	mov	r1, r2
 8012f12:	4618      	mov	r0, r3
 8012f14:	f001 ff2e 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 8012f18:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8012f1c:	3b14      	subs	r3, #20
 8012f1e:	2100      	movs	r1, #0
 8012f20:	4618      	mov	r0, r3
 8012f22:	f001 ff27 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_WEST);
 8012f26:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8012f2a:	3b3c      	subs	r3, #60	; 0x3c
 8012f2c:	2105      	movs	r1, #5
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f001 ff20 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8012f34:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f38:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f3c:	881a      	ldrh	r2, [r3, #0]
 8012f3e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012f42:	3b64      	subs	r3, #100	; 0x64
 8012f44:	4611      	mov	r1, r2
 8012f46:	4618      	mov	r0, r3
 8012f48:	f001 ff14 	bl	8014d74 <pushStack_walk>
						}
						if(Direction==SLANT_SOUTH_EAST){
 8012f4c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f50:	f103 0366 	add.w	r3, r3, #102	; 0x66
 8012f54:	881b      	ldrh	r3, [r3, #0]
 8012f56:	2b03      	cmp	r3, #3
 8012f58:	d12b      	bne.n	8012fb2 <create_DijkstraMap+0x18e2>
							dis_cost_in=dis_cost+DISCOUNTCOST_D;
 8012f5a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f5e:	f103 0364 	add.w	r3, r3, #100	; 0x64
 8012f62:	881b      	ldrh	r3, [r3, #0]
 8012f64:	3301      	adds	r3, #1
 8012f66:	b29b      	uxth	r3, r3
 8012f68:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f6c:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f70:	8013      	strh	r3, [r2, #0]
							if(dis_cost_in>=D_NUM_MAX){dis_cost_in=D_NUM_MAX-1;}
 8012f72:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f76:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012f7e:	2b05      	cmp	r3, #5
 8012f80:	dd05      	ble.n	8012f8e <create_DijkstraMap+0x18be>
 8012f82:	2305      	movs	r3, #5
 8012f84:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012f88:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012f8c:	8013      	strh	r3, [r2, #0]
							DiagonalCost=discount_d[dis_cost_in];
 8012f8e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012f92:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8012f96:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012f9a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012f9e:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012fa2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8012fa6:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012faa:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012fae:	8013      	strh	r3, [r2, #0]
 8012fb0:	e00f      	b.n	8012fd2 <create_DijkstraMap+0x1902>
						}else{DiagonalCost=discount_d[0];dis_cost_in=0;}
 8012fb2:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8012fb6:	f6a3 637c 	subw	r3, r3, #3708	; 0xe7c
 8012fba:	881b      	ldrh	r3, [r3, #0]
 8012fbc:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fc0:	f102 027c 	add.w	r2, r2, #124	; 0x7c
 8012fc4:	8013      	strh	r3, [r2, #0]
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8012fcc:	f102 027a 	add.w	r2, r2, #122	; 0x7a
 8012fd0:	8013      	strh	r3, [r2, #0]
						if((wall.column[Ycoordinate-1] & (1 << (Xcoordinate+1)))==0 && Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]>Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost){
 8012fd2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fd6:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	3b01      	subs	r3, #1
 8012fde:	4a5e      	ldr	r2, [pc, #376]	; (8013158 <create_DijkstraMap+0x1a88>)
 8012fe0:	330c      	adds	r3, #12
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	4413      	add	r3, r2
 8012fe6:	88db      	ldrh	r3, [r3, #6]
 8012fe8:	461a      	mov	r2, r3
 8012fea:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8012fee:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8012ff2:	881b      	ldrh	r3, [r3, #0]
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	fa42 f303 	asr.w	r3, r2, r3
 8012ffa:	f003 0301 	and.w	r3, r3, #1
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f040 8096 	bne.w	8013130 <create_DijkstraMap+0x1a60>
 8013004:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013008:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 801300c:	881b      	ldrh	r3, [r3, #0]
 801300e:	1c5a      	adds	r2, r3, #1
 8013010:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013014:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013018:	881b      	ldrh	r3, [r3, #0]
 801301a:	1e59      	subs	r1, r3, #1
 801301c:	484f      	ldr	r0, [pc, #316]	; (801315c <create_DijkstraMap+0x1a8c>)
 801301e:	4613      	mov	r3, r2
 8013020:	011b      	lsls	r3, r3, #4
 8013022:	1a9b      	subs	r3, r3, r2
 8013024:	440b      	add	r3, r1
 8013026:	33f0      	adds	r3, #240	; 0xf0
 8013028:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801302c:	461c      	mov	r4, r3
 801302e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013032:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 8013036:	881a      	ldrh	r2, [r3, #0]
 8013038:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801303c:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013040:	8819      	ldrh	r1, [r3, #0]
 8013042:	4846      	ldr	r0, [pc, #280]	; (801315c <create_DijkstraMap+0x1a8c>)
 8013044:	4613      	mov	r3, r2
 8013046:	011b      	lsls	r3, r3, #4
 8013048:	1a9b      	subs	r3, r3, r2
 801304a:	440b      	add	r3, r1
 801304c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8013050:	461a      	mov	r2, r3
 8013052:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013056:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801305a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801305e:	4413      	add	r3, r2
 8013060:	429c      	cmp	r4, r3
 8013062:	dd65      	ble.n	8013130 <create_DijkstraMap+0x1a60>
							Dijkstra.column_count[Xcoordinate+1][Ycoordinate-1]=Dijkstra.row_count[Ycoordinate][Xcoordinate]+DiagonalCost;
 8013064:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013068:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 801306c:	881a      	ldrh	r2, [r3, #0]
 801306e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013072:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 8013076:	8819      	ldrh	r1, [r3, #0]
 8013078:	4838      	ldr	r0, [pc, #224]	; (801315c <create_DijkstraMap+0x1a8c>)
 801307a:	4613      	mov	r3, r2
 801307c:	011b      	lsls	r3, r3, #4
 801307e:	1a9b      	subs	r3, r3, r2
 8013080:	440b      	add	r3, r1
 8013082:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
 8013086:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801308a:	f103 037c 	add.w	r3, r3, #124	; 0x7c
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013094:	f102 026c 	add.w	r2, r2, #108	; 0x6c
 8013098:	8812      	ldrh	r2, [r2, #0]
 801309a:	3201      	adds	r2, #1
 801309c:	f507 419c 	add.w	r1, r7, #19968	; 0x4e00
 80130a0:	f101 016a 	add.w	r1, r1, #106	; 0x6a
 80130a4:	8809      	ldrh	r1, [r1, #0]
 80130a6:	3901      	subs	r1, #1
 80130a8:	4403      	add	r3, r0
 80130aa:	b29c      	uxth	r4, r3
 80130ac:	482b      	ldr	r0, [pc, #172]	; (801315c <create_DijkstraMap+0x1a8c>)
 80130ae:	4613      	mov	r3, r2
 80130b0:	011b      	lsls	r3, r3, #4
 80130b2:	1a9b      	subs	r3, r3, r2
 80130b4:	440b      	add	r3, r1
 80130b6:	33f0      	adds	r3, #240	; 0xf0
 80130b8:	4622      	mov	r2, r4
 80130ba:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
							pushStack_walk(&stack_x,Xcoordinate+1);
 80130be:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130c2:	f103 036c 	add.w	r3, r3, #108	; 0x6c
 80130c6:	881b      	ldrh	r3, [r3, #0]
 80130c8:	3301      	adds	r3, #1
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	f507 537a 	add.w	r3, r7, #16000	; 0x3e80
 80130d0:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80130d4:	4611      	mov	r1, r2
 80130d6:	4618      	mov	r0, r3
 80130d8:	f001 fe4c 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_y,Ycoordinate-1);
 80130dc:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80130e0:	f103 036a 	add.w	r3, r3, #106	; 0x6a
 80130e4:	881b      	ldrh	r3, [r3, #0]
 80130e6:	3b01      	subs	r3, #1
 80130e8:	b29a      	uxth	r2, r3
 80130ea:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80130ee:	f103 0320 	add.w	r3, r3, #32
 80130f2:	3b0c      	subs	r3, #12
 80130f4:	4611      	mov	r1, r2
 80130f6:	4618      	mov	r0, r3
 80130f8:	f001 fe3c 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_matrix,COLUMN);
 80130fc:	f507 53fc 	add.w	r3, r7, #8064	; 0x1f80
 8013100:	3b14      	subs	r3, #20
 8013102:	2100      	movs	r1, #0
 8013104:	4618      	mov	r0, r3
 8013106:	f001 fe35 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_direction,SLANT_SOUTH_EAST);
 801310a:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 801310e:	3b3c      	subs	r3, #60	; 0x3c
 8013110:	2103      	movs	r1, #3
 8013112:	4618      	mov	r0, r3
 8013114:	f001 fe2e 	bl	8014d74 <pushStack_walk>
							pushStack_walk(&stack_cost,dis_cost_in);
 8013118:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801311c:	f103 037a 	add.w	r3, r3, #122	; 0x7a
 8013120:	881a      	ldrh	r2, [r3, #0]
 8013122:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013126:	3b64      	subs	r3, #100	; 0x64
 8013128:	4611      	mov	r1, r2
 801312a:	4618      	mov	r0, r3
 801312c:	f001 fe22 	bl	8014d74 <pushStack_walk>
						}
					}

				}

		count_number+=1;
 8013130:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013134:	f103 036e 	add.w	r3, r3, #110	; 0x6e
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	3301      	adds	r3, #1
 801313c:	f507 429c 	add.w	r2, r7, #19968	; 0x4e00
 8013140:	f102 026e 	add.w	r2, r2, #110	; 0x6e
 8013144:	8013      	strh	r3, [r2, #0]
		Xcoordinate = popStack_walk(&stack_x);
 8013146:	f7fe bc0e 	b.w	8011966 <create_DijkstraMap+0x296>

		}



}
 801314a:	bf00      	nop
 801314c:	f507 479d 	add.w	r7, r7, #20096	; 0x4e80
 8013150:	3704      	adds	r7, #4
 8013152:	46bd      	mov	sp, r7
 8013154:	bd90      	pop	{r4, r7, pc}
 8013156:	bf00      	nop
 8013158:	20000c3c 	.word	0x20000c3c
 801315c:	20000f30 	.word	0x20000f30

08013160 <route_Dijkstra>:





void route_Dijkstra(void){
 8013160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013162:	f5ad 4dbc 	sub.w	sp, sp, #24064	; 0x5e00
 8013166:	b089      	sub	sp, #36	; 0x24
 8013168:	af04      	add	r7, sp, #16
	STACK_T stack_y;
	STACK_T stack_matrix;//行列
	STACK_T stack_x_unknow;
	STACK_T stack_y_unknow;
	STACK_T stack_matrix_unknow;//行列
	initStack_walk(&stack_x);
 801316a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801316e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013172:	4618      	mov	r0, r3
 8013174:	f001 fdee 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_y);
 8013178:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801317c:	f103 0310 	add.w	r3, r3, #16
 8013180:	3b1c      	subs	r3, #28
 8013182:	4618      	mov	r0, r3
 8013184:	f001 fde6 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_matrix);
 8013188:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801318c:	f103 0310 	add.w	r3, r3, #16
 8013190:	3b04      	subs	r3, #4
 8013192:	4618      	mov	r0, r3
 8013194:	f001 fdde 	bl	8014d54 <initStack_walk>
	initStack_walk(&g_Goal_x);
 8013198:	48ce      	ldr	r0, [pc, #824]	; (80134d4 <route_Dijkstra+0x374>)
 801319a:	f001 fddb 	bl	8014d54 <initStack_walk>
	initStack_walk(&g_Goal_y);
 801319e:	48ce      	ldr	r0, [pc, #824]	; (80134d8 <route_Dijkstra+0x378>)
 80131a0:	f001 fdd8 	bl	8014d54 <initStack_walk>

	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 80131a4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80131a8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80131ac:	2100      	movs	r1, #0
 80131ae:	4618      	mov	r0, r3
 80131b0:	f001 fde0 	bl	8014d74 <pushStack_walk>
 80131b4:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80131b8:	f103 0310 	add.w	r3, r3, #16
 80131bc:	3b1c      	subs	r3, #28
 80131be:	2100      	movs	r1, #0
 80131c0:	4618      	mov	r0, r3
 80131c2:	f001 fdd7 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_matrix,COLUMN);
 80131c6:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80131ca:	f103 0310 	add.w	r3, r3, #16
 80131ce:	3b04      	subs	r3, #4
 80131d0:	2100      	movs	r1, #0
 80131d2:	4618      	mov	r0, r3
 80131d4:	f001 fdce 	bl	8014d74 <pushStack_walk>

	_Bool front_wall;
	_Bool right_wall;
	_Bool left_wall;

	int x = 0;
 80131d8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131dc:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80131e0:	2200      	movs	r2, #0
 80131e2:	601a      	str	r2, [r3, #0]
	int y = 0;
 80131e4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80131e8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80131ec:	2200      	movs	r2, #0
 80131ee:	601a      	str	r2, [r3, #0]
	int direction = 1;
 80131f0:	2301      	movs	r3, #1
 80131f2:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80131f6:	f102 020c 	add.w	r2, r2, #12
 80131fa:	6013      	str	r3, [r2, #0]


	while (1) {
//		if (mode_safty == 1) {break;}
		update_coordinate(&x,&y,direction);
 80131fc:	f107 0110 	add.w	r1, r7, #16
 8013200:	3910      	subs	r1, #16
 8013202:	f107 0310 	add.w	r3, r7, #16
 8013206:	3b0c      	subs	r3, #12
 8013208:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801320c:	f102 020c 	add.w	r2, r2, #12
 8013210:	6812      	ldr	r2, [r2, #0]
 8013212:	4618      	mov	r0, r3
 8013214:	f7fa fe76 	bl	800df04 <update_coordinate>

		if((x == GOAL_X || x == GOAL_X+1) && (y == GOAL_Y || y == GOAL_Y+1)){
 8013218:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801321c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	2b01      	cmp	r3, #1
 8013224:	d006      	beq.n	8013234 <route_Dijkstra+0xd4>
 8013226:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801322a:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b02      	cmp	r3, #2
 8013232:	d10f      	bne.n	8013254 <route_Dijkstra+0xf4>
 8013234:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013238:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	2b00      	cmp	r3, #0
 8013240:	f000 837b 	beq.w	801393a <route_Dijkstra+0x7da>
 8013244:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013248:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	2b01      	cmp	r3, #1
 8013250:	f000 8373 	beq.w	801393a <route_Dijkstra+0x7da>
					break;
		}

		get_wall(x,y,direction,&front_wall,&right_wall,&left_wall);
 8013254:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013258:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801325c:	6818      	ldr	r0, [r3, #0]
 801325e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013262:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013266:	6819      	ldr	r1, [r3, #0]
 8013268:	f107 0210 	add.w	r2, r7, #16
 801326c:	3a05      	subs	r2, #5
 801326e:	f107 0310 	add.w	r3, r7, #16
 8013272:	3b07      	subs	r3, #7
 8013274:	9301      	str	r3, [sp, #4]
 8013276:	f107 0310 	add.w	r3, r7, #16
 801327a:	3b06      	subs	r3, #6
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	4613      	mov	r3, r2
 8013280:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013284:	f102 020c 	add.w	r2, r2, #12
 8013288:	6812      	ldr	r2, [r2, #0]
 801328a:	f7fd fe05 	bl	8010e98 <get_wall>
		search_AroundDijkstraCount(&front_count,&right_count,&back_count,&left_count,x,y,direction);
 801328e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013292:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013296:	6819      	ldr	r1, [r3, #0]
 8013298:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801329c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80132a0:	681c      	ldr	r4, [r3, #0]
 80132a2:	f107 0310 	add.w	r3, r7, #16
 80132a6:	3b04      	subs	r3, #4
 80132a8:	f107 0210 	add.w	r2, r7, #16
 80132ac:	3a02      	subs	r2, #2
 80132ae:	f107 0610 	add.w	r6, r7, #16
 80132b2:	f107 0090 	add.w	r0, r7, #144	; 0x90
 80132b6:	387e      	subs	r0, #126	; 0x7e
 80132b8:	f507 45bc 	add.w	r5, r7, #24064	; 0x5e00
 80132bc:	f105 050c 	add.w	r5, r5, #12
 80132c0:	682d      	ldr	r5, [r5, #0]
 80132c2:	9502      	str	r5, [sp, #8]
 80132c4:	9401      	str	r4, [sp, #4]
 80132c6:	9100      	str	r1, [sp, #0]
 80132c8:	4631      	mov	r1, r6
 80132ca:	f7fe f967 	bl	801159c <search_AroundDijkstraCount>
		if (front_wall) {front_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132ce:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132d2:	f6a3 6305 	subw	r3, r3, #3589	; 0xe05
 80132d6:	781b      	ldrb	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d006      	beq.n	80132ea <route_Dijkstra+0x18a>
 80132dc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132e0:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80132e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132e8:	801a      	strh	r2, [r3, #0]
		if (right_wall) {right_count = MAX_WALKCOUNT_DIJKSTRA;}
 80132ea:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132ee:	f6a3 6306 	subw	r3, r3, #3590	; 0xe06
 80132f2:	781b      	ldrb	r3, [r3, #0]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d006      	beq.n	8013306 <route_Dijkstra+0x1a6>
 80132f8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80132fc:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013300:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013304:	801a      	strh	r2, [r3, #0]
		if (left_wall) {left_count = MAX_WALKCOUNT_DIJKSTRA;}
 8013306:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801330a:	f6a3 6307 	subw	r3, r3, #3591	; 0xe07
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d006      	beq.n	8013322 <route_Dijkstra+0x1c2>
 8013314:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013318:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801331c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013320:	801a      	strh	r2, [r3, #0]

		if (front_count==MAX_WALKCOUNT_DIJKSTRA && right_count==MAX_WALKCOUNT_DIJKSTRA && left_count==MAX_WALKCOUNT_DIJKSTRA && back_count==MAX_WALKCOUNT_DIJKSTRA){
 8013322:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013326:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801332a:	881b      	ldrh	r3, [r3, #0]
 801332c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013330:	4293      	cmp	r3, r2
 8013332:	d11b      	bne.n	801336c <route_Dijkstra+0x20c>
 8013334:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013338:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801333c:	881b      	ldrh	r3, [r3, #0]
 801333e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013342:	4293      	cmp	r3, r2
 8013344:	d112      	bne.n	801336c <route_Dijkstra+0x20c>
 8013346:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801334a:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801334e:	881b      	ldrh	r3, [r3, #0]
 8013350:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013354:	4293      	cmp	r3, r2
 8013356:	d109      	bne.n	801336c <route_Dijkstra+0x20c>
 8013358:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801335c:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013360:	881b      	ldrh	r3, [r3, #0]
 8013362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013366:	4293      	cmp	r3, r2
 8013368:	f000 82e6 	beq.w	8013938 <route_Dijkstra+0x7d8>
			// 迷路破損のため停止(一時停止後に周辺の地図情報を初期化して再探索に変更予定)

			break;
		}
		if (front_count <= right_count && front_count <= left_count && front_count <= back_count){
 801336c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013370:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013374:	881a      	ldrh	r2, [r3, #0]
 8013376:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801337a:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801337e:	881b      	ldrh	r3, [r3, #0]
 8013380:	429a      	cmp	r2, r3
 8013382:	f200 80d4 	bhi.w	801352e <route_Dijkstra+0x3ce>
 8013386:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801338a:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 801338e:	881a      	ldrh	r2, [r3, #0]
 8013390:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013394:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013398:	881b      	ldrh	r3, [r3, #0]
 801339a:	429a      	cmp	r2, r3
 801339c:	f200 80c7 	bhi.w	801352e <route_Dijkstra+0x3ce>
 80133a0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133a4:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 80133a8:	881a      	ldrh	r2, [r3, #0]
 80133aa:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133ae:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 80133b2:	881b      	ldrh	r3, [r3, #0]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	f200 80ba 	bhi.w	801352e <route_Dijkstra+0x3ce>
			// 直進
			switch (direction) {		//
 80133ba:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80133be:	f103 030c 	add.w	r3, r3, #12
 80133c2:	681b      	ldr	r3, [r3, #0]
 80133c4:	3b01      	subs	r3, #1
 80133c6:	2b03      	cmp	r3, #3
 80133c8:	f200 80b2 	bhi.w	8013530 <route_Dijkstra+0x3d0>
 80133cc:	a201      	add	r2, pc, #4	; (adr r2, 80133d4 <route_Dijkstra+0x274>)
 80133ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133d2:	bf00      	nop
 80133d4:	080133e5 	.word	0x080133e5
 80133d8:	08013433 	.word	0x08013433
 80133dc:	08013481 	.word	0x08013481
 80133e0:	080134dd 	.word	0x080134dd
			case 1:
				pushStack_walk(&stack_x,x);
 80133e4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80133e8:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	b29a      	uxth	r2, r3
 80133f0:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80133f4:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80133f8:	4611      	mov	r1, r2
 80133fa:	4618      	mov	r0, r3
 80133fc:	f001 fcba 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013400:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013404:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	b29a      	uxth	r2, r3
 801340c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013410:	f103 0310 	add.w	r3, r3, #16
 8013414:	3b1c      	subs	r3, #28
 8013416:	4611      	mov	r1, r2
 8013418:	4618      	mov	r0, r3
 801341a:	f001 fcab 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 801341e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013422:	f103 0310 	add.w	r3, r3, #16
 8013426:	3b04      	subs	r3, #4
 8013428:	2100      	movs	r1, #0
 801342a:	4618      	mov	r0, r3
 801342c:	f001 fca2 	bl	8014d74 <pushStack_walk>
				break;
 8013430:	e07e      	b.n	8013530 <route_Dijkstra+0x3d0>
			case 2:
				pushStack_walk(&stack_x,x);
 8013432:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013436:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801343a:	681b      	ldr	r3, [r3, #0]
 801343c:	b29a      	uxth	r2, r3
 801343e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013442:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013446:	4611      	mov	r1, r2
 8013448:	4618      	mov	r0, r3
 801344a:	f001 fc93 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 801344e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013452:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013456:	681b      	ldr	r3, [r3, #0]
 8013458:	b29a      	uxth	r2, r3
 801345a:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801345e:	f103 0310 	add.w	r3, r3, #16
 8013462:	3b1c      	subs	r3, #28
 8013464:	4611      	mov	r1, r2
 8013466:	4618      	mov	r0, r3
 8013468:	f001 fc84 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801346c:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013470:	f103 0310 	add.w	r3, r3, #16
 8013474:	3b04      	subs	r3, #4
 8013476:	2101      	movs	r1, #1
 8013478:	4618      	mov	r0, r3
 801347a:	f001 fc7b 	bl	8014d74 <pushStack_walk>
				break;
 801347e:	e057      	b.n	8013530 <route_Dijkstra+0x3d0>
			case 3:
				pushStack_walk(&stack_x,x);
 8013480:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013484:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	b29a      	uxth	r2, r3
 801348c:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013490:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013494:	4611      	mov	r1, r2
 8013496:	4618      	mov	r0, r3
 8013498:	f001 fc6c 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801349c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134a0:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	b29b      	uxth	r3, r3
 80134a8:	3b01      	subs	r3, #1
 80134aa:	b29a      	uxth	r2, r3
 80134ac:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80134b0:	f103 0310 	add.w	r3, r3, #16
 80134b4:	3b1c      	subs	r3, #28
 80134b6:	4611      	mov	r1, r2
 80134b8:	4618      	mov	r0, r3
 80134ba:	f001 fc5b 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80134be:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80134c2:	f103 0310 	add.w	r3, r3, #16
 80134c6:	3b04      	subs	r3, #4
 80134c8:	2100      	movs	r1, #0
 80134ca:	4618      	mov	r0, r3
 80134cc:	f001 fc52 	bl	8014d74 <pushStack_walk>
				break;
 80134d0:	e02e      	b.n	8013530 <route_Dijkstra+0x3d0>
 80134d2:	bf00      	nop
 80134d4:	200012f0 	.word	0x200012f0
 80134d8:	20002298 	.word	0x20002298
			case 4:
				pushStack_walk(&stack_x,x-1);
 80134dc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80134e0:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80134e4:	681b      	ldr	r3, [r3, #0]
 80134e6:	b29b      	uxth	r3, r3
 80134e8:	3b01      	subs	r3, #1
 80134ea:	b29a      	uxth	r2, r3
 80134ec:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80134f0:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80134f4:	4611      	mov	r1, r2
 80134f6:	4618      	mov	r0, r3
 80134f8:	f001 fc3c 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80134fc:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013500:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013504:	681b      	ldr	r3, [r3, #0]
 8013506:	b29a      	uxth	r2, r3
 8013508:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 801350c:	f103 0310 	add.w	r3, r3, #16
 8013510:	3b1c      	subs	r3, #28
 8013512:	4611      	mov	r1, r2
 8013514:	4618      	mov	r0, r3
 8013516:	f001 fc2d 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801351a:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801351e:	f103 0310 	add.w	r3, r3, #16
 8013522:	3b04      	subs	r3, #4
 8013524:	2101      	movs	r1, #1
 8013526:	4618      	mov	r0, r3
 8013528:	f001 fc24 	bl	8014d74 <pushStack_walk>
				break;
 801352c:	e000      	b.n	8013530 <route_Dijkstra+0x3d0>
			}

		}
 801352e:	bf00      	nop

		if(right_count < front_count && right_count <= left_count && right_count <= back_count){
 8013530:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013534:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013538:	881a      	ldrh	r2, [r3, #0]
 801353a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801353e:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	429a      	cmp	r2, r3
 8013546:	f080 80da 	bcs.w	80136fe <route_Dijkstra+0x59e>
 801354a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801354e:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 8013552:	881a      	ldrh	r2, [r3, #0]
 8013554:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013558:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801355c:	881b      	ldrh	r3, [r3, #0]
 801355e:	429a      	cmp	r2, r3
 8013560:	f200 80cd 	bhi.w	80136fe <route_Dijkstra+0x59e>
 8013564:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013568:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801356c:	881a      	ldrh	r2, [r3, #0]
 801356e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013572:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013576:	881b      	ldrh	r3, [r3, #0]
 8013578:	429a      	cmp	r2, r3
 801357a:	f200 80c0 	bhi.w	80136fe <route_Dijkstra+0x59e>
			// 右旋回
			switch (direction) {		//
 801357e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013582:	f103 030c 	add.w	r3, r3, #12
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	3b01      	subs	r3, #1
 801358a:	2b03      	cmp	r3, #3
 801358c:	f200 80ac 	bhi.w	80136e8 <route_Dijkstra+0x588>
 8013590:	a201      	add	r2, pc, #4	; (adr r2, 8013598 <route_Dijkstra+0x438>)
 8013592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013596:	bf00      	nop
 8013598:	080135a9 	.word	0x080135a9
 801359c:	080135f7 	.word	0x080135f7
 80135a0:	08013649 	.word	0x08013649
 80135a4:	0801369b 	.word	0x0801369b
			case 1:
				pushStack_walk(&stack_x,x);
 80135a8:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135ac:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80135b0:	681b      	ldr	r3, [r3, #0]
 80135b2:	b29a      	uxth	r2, r3
 80135b4:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80135b8:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80135bc:	4611      	mov	r1, r2
 80135be:	4618      	mov	r0, r3
 80135c0:	f001 fbd8 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80135c4:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135c8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	b29a      	uxth	r2, r3
 80135d0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80135d4:	f103 0310 	add.w	r3, r3, #16
 80135d8:	3b1c      	subs	r3, #28
 80135da:	4611      	mov	r1, r2
 80135dc:	4618      	mov	r0, r3
 80135de:	f001 fbc9 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80135e2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80135e6:	f103 0310 	add.w	r3, r3, #16
 80135ea:	3b04      	subs	r3, #4
 80135ec:	2101      	movs	r1, #1
 80135ee:	4618      	mov	r0, r3
 80135f0:	f001 fbc0 	bl	8014d74 <pushStack_walk>
				break;
 80135f4:	e078      	b.n	80136e8 <route_Dijkstra+0x588>
			case 2:
				pushStack_walk(&stack_x,x);
 80135f6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80135fa:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	b29a      	uxth	r2, r3
 8013602:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013606:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801360a:	4611      	mov	r1, r2
 801360c:	4618      	mov	r0, r3
 801360e:	f001 fbb1 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 8013612:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013616:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	b29b      	uxth	r3, r3
 801361e:	3b01      	subs	r3, #1
 8013620:	b29a      	uxth	r2, r3
 8013622:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013626:	f103 0310 	add.w	r3, r3, #16
 801362a:	3b1c      	subs	r3, #28
 801362c:	4611      	mov	r1, r2
 801362e:	4618      	mov	r0, r3
 8013630:	f001 fba0 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013634:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013638:	f103 0310 	add.w	r3, r3, #16
 801363c:	3b04      	subs	r3, #4
 801363e:	2100      	movs	r1, #0
 8013640:	4618      	mov	r0, r3
 8013642:	f001 fb97 	bl	8014d74 <pushStack_walk>
				break;
 8013646:	e04f      	b.n	80136e8 <route_Dijkstra+0x588>
			case 3:
				pushStack_walk(&stack_x,x-1);
 8013648:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801364c:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	b29b      	uxth	r3, r3
 8013654:	3b01      	subs	r3, #1
 8013656:	b29a      	uxth	r2, r3
 8013658:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801365c:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013660:	4611      	mov	r1, r2
 8013662:	4618      	mov	r0, r3
 8013664:	f001 fb86 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013668:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801366c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	b29a      	uxth	r2, r3
 8013674:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013678:	f103 0310 	add.w	r3, r3, #16
 801367c:	3b1c      	subs	r3, #28
 801367e:	4611      	mov	r1, r2
 8013680:	4618      	mov	r0, r3
 8013682:	f001 fb77 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 8013686:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 801368a:	f103 0310 	add.w	r3, r3, #16
 801368e:	3b04      	subs	r3, #4
 8013690:	2101      	movs	r1, #1
 8013692:	4618      	mov	r0, r3
 8013694:	f001 fb6e 	bl	8014d74 <pushStack_walk>
				break;
 8013698:	e026      	b.n	80136e8 <route_Dijkstra+0x588>
			case 4:
				pushStack_walk(&stack_x,x);
 801369a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801369e:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80136aa:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80136ae:	4611      	mov	r1, r2
 80136b0:	4618      	mov	r0, r3
 80136b2:	f001 fb5f 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80136b6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80136ba:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80136be:	681b      	ldr	r3, [r3, #0]
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80136c6:	f103 0310 	add.w	r3, r3, #16
 80136ca:	3b1c      	subs	r3, #28
 80136cc:	4611      	mov	r1, r2
 80136ce:	4618      	mov	r0, r3
 80136d0:	f001 fb50 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80136d4:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80136d8:	f103 0310 	add.w	r3, r3, #16
 80136dc:	3b04      	subs	r3, #4
 80136de:	2100      	movs	r1, #0
 80136e0:	4618      	mov	r0, r3
 80136e2:	f001 fb47 	bl	8014d74 <pushStack_walk>
				break;
 80136e6:	bf00      	nop
			}
			direction++;
 80136e8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80136ec:	f103 030c 	add.w	r3, r3, #12
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	3301      	adds	r3, #1
 80136f4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80136f8:	f102 020c 	add.w	r2, r2, #12
 80136fc:	6013      	str	r3, [r2, #0]
		}
		if(left_count < front_count && left_count < right_count && left_count <= back_count){
 80136fe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013702:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013706:	881a      	ldrh	r2, [r3, #0]
 8013708:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801370c:	f6a3 53fe 	subw	r3, r3, #3582	; 0xdfe
 8013710:	881b      	ldrh	r3, [r3, #0]
 8013712:	429a      	cmp	r2, r3
 8013714:	f080 80d9 	bcs.w	80138ca <route_Dijkstra+0x76a>
 8013718:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 801371c:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 8013720:	881a      	ldrh	r2, [r3, #0]
 8013722:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013726:	f5a3 6360 	sub.w	r3, r3, #3584	; 0xe00
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	429a      	cmp	r2, r3
 801372e:	f080 80cc 	bcs.w	80138ca <route_Dijkstra+0x76a>
 8013732:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013736:	f6a3 6304 	subw	r3, r3, #3588	; 0xe04
 801373a:	881a      	ldrh	r2, [r3, #0]
 801373c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013740:	f6a3 6302 	subw	r3, r3, #3586	; 0xe02
 8013744:	881b      	ldrh	r3, [r3, #0]
 8013746:	429a      	cmp	r2, r3
 8013748:	f200 80bf 	bhi.w	80138ca <route_Dijkstra+0x76a>
			// 左旋回
			switch (direction) {		//
 801374c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013750:	f103 030c 	add.w	r3, r3, #12
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	3b01      	subs	r3, #1
 8013758:	2b03      	cmp	r3, #3
 801375a:	f200 80ab 	bhi.w	80138b4 <route_Dijkstra+0x754>
 801375e:	a201      	add	r2, pc, #4	; (adr r2, 8013764 <route_Dijkstra+0x604>)
 8013760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013764:	08013775 	.word	0x08013775
 8013768:	080137c7 	.word	0x080137c7
 801376c:	08013815 	.word	0x08013815
 8013770:	08013863 	.word	0x08013863
			case 1:
				pushStack_walk(&stack_x,x-1);
 8013774:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013778:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	b29b      	uxth	r3, r3
 8013780:	3b01      	subs	r3, #1
 8013782:	b29a      	uxth	r2, r3
 8013784:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013788:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 801378c:	4611      	mov	r1, r2
 801378e:	4618      	mov	r0, r3
 8013790:	f001 faf0 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013794:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013798:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	b29a      	uxth	r2, r3
 80137a0:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80137a4:	f103 0310 	add.w	r3, r3, #16
 80137a8:	3b1c      	subs	r3, #28
 80137aa:	4611      	mov	r1, r2
 80137ac:	4618      	mov	r0, r3
 80137ae:	f001 fae1 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 80137b2:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80137b6:	f103 0310 	add.w	r3, r3, #16
 80137ba:	3b04      	subs	r3, #4
 80137bc:	2101      	movs	r1, #1
 80137be:	4618      	mov	r0, r3
 80137c0:	f001 fad8 	bl	8014d74 <pushStack_walk>
				break;
 80137c4:	e076      	b.n	80138b4 <route_Dijkstra+0x754>
			case 2:
				pushStack_walk(&stack_x,x);
 80137c6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137ca:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 80137ce:	681b      	ldr	r3, [r3, #0]
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 80137d6:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 80137da:	4611      	mov	r1, r2
 80137dc:	4618      	mov	r0, r3
 80137de:	f001 fac9 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 80137e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80137e6:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	b29a      	uxth	r2, r3
 80137ee:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 80137f2:	f103 0310 	add.w	r3, r3, #16
 80137f6:	3b1c      	subs	r3, #28
 80137f8:	4611      	mov	r1, r2
 80137fa:	4618      	mov	r0, r3
 80137fc:	f001 faba 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 8013800:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013804:	f103 0310 	add.w	r3, r3, #16
 8013808:	3b04      	subs	r3, #4
 801380a:	2100      	movs	r1, #0
 801380c:	4618      	mov	r0, r3
 801380e:	f001 fab1 	bl	8014d74 <pushStack_walk>
				break;
 8013812:	e04f      	b.n	80138b4 <route_Dijkstra+0x754>
			case 3:
				pushStack_walk(&stack_x,x);
 8013814:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013818:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	b29a      	uxth	r2, r3
 8013820:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013824:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f001 faa2 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y);
 8013830:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013834:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	b29a      	uxth	r2, r3
 801383c:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013840:	f103 0310 	add.w	r3, r3, #16
 8013844:	3b1c      	subs	r3, #28
 8013846:	4611      	mov	r1, r2
 8013848:	4618      	mov	r0, r3
 801384a:	f001 fa93 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,ROW);
 801384e:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013852:	f103 0310 	add.w	r3, r3, #16
 8013856:	3b04      	subs	r3, #4
 8013858:	2101      	movs	r1, #1
 801385a:	4618      	mov	r0, r3
 801385c:	f001 fa8a 	bl	8014d74 <pushStack_walk>
				break;
 8013860:	e028      	b.n	80138b4 <route_Dijkstra+0x754>
			case 4:
				pushStack_walk(&stack_x,x);
 8013862:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013866:	f6a3 630c 	subw	r3, r3, #3596	; 0xe0c
 801386a:	681b      	ldr	r3, [r3, #0]
 801386c:	b29a      	uxth	r2, r3
 801386e:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 8013872:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013876:	4611      	mov	r1, r2
 8013878:	4618      	mov	r0, r3
 801387a:	f001 fa7b 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_y,y-1);
 801387e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8013882:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	b29b      	uxth	r3, r3
 801388a:	3b01      	subs	r3, #1
 801388c:	b29a      	uxth	r2, r3
 801388e:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013892:	f103 0310 	add.w	r3, r3, #16
 8013896:	3b1c      	subs	r3, #28
 8013898:	4611      	mov	r1, r2
 801389a:	4618      	mov	r0, r3
 801389c:	f001 fa6a 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&stack_matrix,COLUMN);
 80138a0:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 80138a4:	f103 0310 	add.w	r3, r3, #16
 80138a8:	3b04      	subs	r3, #4
 80138aa:	2100      	movs	r1, #0
 80138ac:	4618      	mov	r0, r3
 80138ae:	f001 fa61 	bl	8014d74 <pushStack_walk>
				break;
 80138b2:	bf00      	nop
			}
			direction--;
 80138b4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138b8:	f103 030c 	add.w	r3, r3, #12
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	3b01      	subs	r3, #1
 80138c0:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138c4:	f102 020c 	add.w	r2, r2, #12
 80138c8:	6013      	str	r3, [r2, #0]
		}

		if (direction == 5) {
 80138ca:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138ce:	f103 030c 	add.w	r3, r3, #12
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	2b05      	cmp	r3, #5
 80138d6:	d105      	bne.n	80138e4 <route_Dijkstra+0x784>
			direction = 1;
 80138d8:	2301      	movs	r3, #1
 80138da:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138de:	f102 020c 	add.w	r2, r2, #12
 80138e2:	6013      	str	r3, [r2, #0]
		}
		if (direction == 6) {
 80138e4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80138e8:	f103 030c 	add.w	r3, r3, #12
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	2b06      	cmp	r3, #6
 80138f0:	d105      	bne.n	80138fe <route_Dijkstra+0x79e>
			direction = 2;
 80138f2:	2302      	movs	r3, #2
 80138f4:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 80138f8:	f102 020c 	add.w	r2, r2, #12
 80138fc:	6013      	str	r3, [r2, #0]
		}
		if (direction == 0) {
 80138fe:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013902:	f103 030c 	add.w	r3, r3, #12
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	2b00      	cmp	r3, #0
 801390a:	d105      	bne.n	8013918 <route_Dijkstra+0x7b8>
			direction = 4;
 801390c:	2304      	movs	r3, #4
 801390e:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013912:	f102 020c 	add.w	r2, r2, #12
 8013916:	6013      	str	r3, [r2, #0]
		}
		if (direction == -1) {
 8013918:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 801391c:	f103 030c 	add.w	r3, r3, #12
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013926:	f47f ac69 	bne.w	80131fc <route_Dijkstra+0x9c>
			direction = 3;
 801392a:	2303      	movs	r3, #3
 801392c:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013930:	f102 020c 	add.w	r2, r2, #12
 8013934:	6013      	str	r3, [r2, #0]
		update_coordinate(&x,&y,direction);
 8013936:	e461      	b.n	80131fc <route_Dijkstra+0x9c>
			break;
 8013938:	bf00      	nop
	}

	unsigned short Xcoordinate,Ycoordinate,Row_or_Column;
	while (1) {

			Xcoordinate = popStack_walk(&stack_x);
 801393a:	f507 439c 	add.w	r3, r7, #19968	; 0x4e00
 801393e:	f103 035c 	add.w	r3, r3, #92	; 0x5c
 8013942:	4618      	mov	r0, r3
 8013944:	f001 fa40 	bl	8014dc8 <popStack_walk>
 8013948:	4603      	mov	r3, r0
 801394a:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801394e:	f102 020a 	add.w	r2, r2, #10
 8013952:	8013      	strh	r3, [r2, #0]
			Ycoordinate = popStack_walk(&stack_y);
 8013954:	f507 537b 	add.w	r3, r7, #16064	; 0x3ec0
 8013958:	f103 0310 	add.w	r3, r3, #16
 801395c:	3b1c      	subs	r3, #28
 801395e:	4618      	mov	r0, r3
 8013960:	f001 fa32 	bl	8014dc8 <popStack_walk>
 8013964:	4603      	mov	r3, r0
 8013966:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 801396a:	f102 0208 	add.w	r2, r2, #8
 801396e:	8013      	strh	r3, [r2, #0]
			Row_or_Column = popStack_walk(&stack_matrix);
 8013970:	f507 533c 	add.w	r3, r7, #12032	; 0x2f00
 8013974:	f103 0310 	add.w	r3, r3, #16
 8013978:	3b04      	subs	r3, #4
 801397a:	4618      	mov	r0, r3
 801397c:	f001 fa24 	bl	8014dc8 <popStack_walk>
 8013980:	4603      	mov	r3, r0
 8013982:	f507 42bc 	add.w	r2, r7, #24064	; 0x5e00
 8013986:	f102 0206 	add.w	r2, r2, #6
 801398a:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 801398c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013990:	f103 030a 	add.w	r3, r3, #10
 8013994:	881b      	ldrh	r3, [r3, #0]
 8013996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801399a:	4293      	cmp	r3, r2
 801399c:	f000 80d5 	beq.w	8013b4a <route_Dijkstra+0x9ea>
 80139a0:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139a4:	f103 0308 	add.w	r3, r3, #8
 80139a8:	881b      	ldrh	r3, [r3, #0]
 80139aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80139ae:	4293      	cmp	r3, r2
 80139b0:	f000 80cb 	beq.w	8013b4a <route_Dijkstra+0x9ea>
				//printf("stack_end\n");
				break;
			}
			if(Row_or_Column==COLUMN && ((wall.column_look[Ycoordinate] & (1 << Xcoordinate)) == 0)){
 80139b4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139b8:	f103 0306 	add.w	r3, r3, #6
 80139bc:	881b      	ldrh	r3, [r3, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d15c      	bne.n	8013a7c <route_Dijkstra+0x91c>
 80139c2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139c6:	f103 0308 	add.w	r3, r3, #8
 80139ca:	881b      	ldrh	r3, [r3, #0]
 80139cc:	4a62      	ldr	r2, [pc, #392]	; (8013b58 <route_Dijkstra+0x9f8>)
 80139ce:	332c      	adds	r3, #44	; 0x2c
 80139d0:	005b      	lsls	r3, r3, #1
 80139d2:	4413      	add	r3, r2
 80139d4:	885b      	ldrh	r3, [r3, #2]
 80139d6:	461a      	mov	r2, r3
 80139d8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139dc:	f103 030a 	add.w	r3, r3, #10
 80139e0:	881b      	ldrh	r3, [r3, #0]
 80139e2:	fa42 f303 	asr.w	r3, r2, r3
 80139e6:	f003 0301 	and.w	r3, r3, #1
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d146      	bne.n	8013a7c <route_Dijkstra+0x91c>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 80139ee:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139f2:	f103 030a 	add.w	r3, r3, #10
 80139f6:	881a      	ldrh	r2, [r3, #0]
 80139f8:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 80139fc:	f103 0308 	add.w	r3, r3, #8
 8013a00:	881b      	ldrh	r3, [r3, #0]
 8013a02:	4956      	ldr	r1, [pc, #344]	; (8013b5c <route_Dijkstra+0x9fc>)
 8013a04:	0112      	lsls	r2, r2, #4
 8013a06:	4413      	add	r3, r2
 8013a08:	2200      	movs	r2, #0
 8013a0a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate][Ycoordinate + 1] = 0;
 8013a0e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a12:	f103 030a 	add.w	r3, r3, #10
 8013a16:	881a      	ldrh	r2, [r3, #0]
 8013a18:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a1c:	f103 0308 	add.w	r3, r3, #8
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	3301      	adds	r3, #1
 8013a24:	494d      	ldr	r1, [pc, #308]	; (8013b5c <route_Dijkstra+0x9fc>)
 8013a26:	0112      	lsls	r2, r2, #4
 8013a28:	4413      	add	r3, r2
 8013a2a:	2200      	movs	r2, #0
 8013a2c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013a30:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a34:	f103 030a 	add.w	r3, r3, #10
 8013a38:	881b      	ldrh	r3, [r3, #0]
 8013a3a:	4619      	mov	r1, r3
 8013a3c:	4848      	ldr	r0, [pc, #288]	; (8013b60 <route_Dijkstra+0xa00>)
 8013a3e:	f001 f999 	bl	8014d74 <pushStack_walk>
 8013a42:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a46:	f103 0308 	add.w	r3, r3, #8
 8013a4a:	881b      	ldrh	r3, [r3, #0]
 8013a4c:	4619      	mov	r1, r3
 8013a4e:	4845      	ldr	r0, [pc, #276]	; (8013b64 <route_Dijkstra+0xa04>)
 8013a50:	f001 f990 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate+1);
 8013a54:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a58:	f103 030a 	add.w	r3, r3, #10
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	4619      	mov	r1, r3
 8013a60:	483f      	ldr	r0, [pc, #252]	; (8013b60 <route_Dijkstra+0xa00>)
 8013a62:	f001 f987 	bl	8014d74 <pushStack_walk>
 8013a66:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a6a:	f103 0308 	add.w	r3, r3, #8
 8013a6e:	881b      	ldrh	r3, [r3, #0]
 8013a70:	3301      	adds	r3, #1
 8013a72:	b29b      	uxth	r3, r3
 8013a74:	4619      	mov	r1, r3
 8013a76:	483b      	ldr	r0, [pc, #236]	; (8013b64 <route_Dijkstra+0xa04>)
 8013a78:	f001 f97c 	bl	8014d74 <pushStack_walk>
			}
			if(Row_or_Column==ROW && ((wall.row_look[Xcoordinate] & (1 << Ycoordinate)) == 0)){
 8013a7c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a80:	f103 0306 	add.w	r3, r3, #6
 8013a84:	881b      	ldrh	r3, [r3, #0]
 8013a86:	2b01      	cmp	r3, #1
 8013a88:	f47f af57 	bne.w	801393a <route_Dijkstra+0x7da>
 8013a8c:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013a90:	f103 030a 	add.w	r3, r3, #10
 8013a94:	881b      	ldrh	r3, [r3, #0]
 8013a96:	4a30      	ldr	r2, [pc, #192]	; (8013b58 <route_Dijkstra+0x9f8>)
 8013a98:	331c      	adds	r3, #28
 8013a9a:	005b      	lsls	r3, r3, #1
 8013a9c:	4413      	add	r3, r2
 8013a9e:	889b      	ldrh	r3, [r3, #4]
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aa6:	f103 0308 	add.w	r3, r3, #8
 8013aaa:	881b      	ldrh	r3, [r3, #0]
 8013aac:	fa42 f303 	asr.w	r3, r2, r3
 8013ab0:	f003 0301 	and.w	r3, r3, #1
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f47f af40 	bne.w	801393a <route_Dijkstra+0x7da>
				//pushStack_walk(&stack_x_unknow,Xcoordinate);
				//pushStack_walk(&stack_y_unknow,Ycoordinate);
				//pushStack_walk(&stack_matrix_unknow,Row_or_Column);
				walk_count[Xcoordinate][Ycoordinate] = 0;
 8013aba:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013abe:	f103 030a 	add.w	r3, r3, #10
 8013ac2:	881a      	ldrh	r2, [r3, #0]
 8013ac4:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ac8:	f103 0308 	add.w	r3, r3, #8
 8013acc:	881b      	ldrh	r3, [r3, #0]
 8013ace:	4923      	ldr	r1, [pc, #140]	; (8013b5c <route_Dijkstra+0x9fc>)
 8013ad0:	0112      	lsls	r2, r2, #4
 8013ad2:	4413      	add	r3, r2
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				walk_count[Xcoordinate + 1][Ycoordinate] = 0;
 8013ada:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013ade:	f103 030a 	add.w	r3, r3, #10
 8013ae2:	881b      	ldrh	r3, [r3, #0]
 8013ae4:	1c5a      	adds	r2, r3, #1
 8013ae6:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013aea:	f103 0308 	add.w	r3, r3, #8
 8013aee:	881b      	ldrh	r3, [r3, #0]
 8013af0:	491a      	ldr	r1, [pc, #104]	; (8013b5c <route_Dijkstra+0x9fc>)
 8013af2:	0112      	lsls	r2, r2, #4
 8013af4:	4413      	add	r3, r2
 8013af6:	2200      	movs	r2, #0
 8013af8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				pushStack_walk(&g_Goal_x,Xcoordinate);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013afc:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b00:	f103 030a 	add.w	r3, r3, #10
 8013b04:	881b      	ldrh	r3, [r3, #0]
 8013b06:	4619      	mov	r1, r3
 8013b08:	4815      	ldr	r0, [pc, #84]	; (8013b60 <route_Dijkstra+0xa00>)
 8013b0a:	f001 f933 	bl	8014d74 <pushStack_walk>
 8013b0e:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b12:	f103 0308 	add.w	r3, r3, #8
 8013b16:	881b      	ldrh	r3, [r3, #0]
 8013b18:	4619      	mov	r1, r3
 8013b1a:	4812      	ldr	r0, [pc, #72]	; (8013b64 <route_Dijkstra+0xa04>)
 8013b1c:	f001 f92a 	bl	8014d74 <pushStack_walk>
				pushStack_walk(&g_Goal_x,Xcoordinate+1);pushStack_walk(&g_Goal_y,Ycoordinate);
 8013b20:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b24:	f103 030a 	add.w	r3, r3, #10
 8013b28:	881b      	ldrh	r3, [r3, #0]
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	b29b      	uxth	r3, r3
 8013b2e:	4619      	mov	r1, r3
 8013b30:	480b      	ldr	r0, [pc, #44]	; (8013b60 <route_Dijkstra+0xa00>)
 8013b32:	f001 f91f 	bl	8014d74 <pushStack_walk>
 8013b36:	f507 43bc 	add.w	r3, r7, #24064	; 0x5e00
 8013b3a:	f103 0308 	add.w	r3, r3, #8
 8013b3e:	881b      	ldrh	r3, [r3, #0]
 8013b40:	4619      	mov	r1, r3
 8013b42:	4808      	ldr	r0, [pc, #32]	; (8013b64 <route_Dijkstra+0xa04>)
 8013b44:	f001 f916 	bl	8014d74 <pushStack_walk>
			Xcoordinate = popStack_walk(&stack_x);
 8013b48:	e6f7      	b.n	801393a <route_Dijkstra+0x7da>
			}
	}


}
 8013b4a:	bf00      	nop
 8013b4c:	f507 47bc 	add.w	r7, r7, #24064	; 0x5e00
 8013b50:	3714      	adds	r7, #20
 8013b52:	46bd      	mov	sp, r7
 8013b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013b56:	bf00      	nop
 8013b58:	20000c3c 	.word	0x20000c3c
 8013b5c:	20000d30 	.word	0x20000d30
 8013b60:	200012f0 	.word	0x200012f0
 8013b64:	20002298 	.word	0x20002298

08013b68 <create_StepCountMap_unknown>:




void create_StepCountMap_unknown(void){
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 8013b6e:	b082      	sub	sp, #8
 8013b70:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	unsigned short goalX,goalY;
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013b72:	2300      	movs	r3, #0
 8013b74:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b78:	f102 0207 	add.w	r2, r2, #7
 8013b7c:	7013      	strb	r3, [r2, #0]
 8013b7e:	e033      	b.n	8013be8 <create_StepCountMap_unknown+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013b80:	2300      	movs	r3, #0
 8013b82:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013b86:	f102 0206 	add.w	r2, r2, #6
 8013b8a:	7013      	strb	r3, [r2, #0]
 8013b8c:	e01a      	b.n	8013bc4 <create_StepCountMap_unknown+0x5c>
			walk_count[xx][yy] = 255;
 8013b8e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b92:	f103 0307 	add.w	r3, r3, #7
 8013b96:	781a      	ldrb	r2, [r3, #0]
 8013b98:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013b9c:	f103 0306 	add.w	r3, r3, #6
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	4966      	ldr	r1, [pc, #408]	; (8013d3c <create_StepCountMap_unknown+0x1d4>)
 8013ba4:	0112      	lsls	r2, r2, #4
 8013ba6:	4413      	add	r3, r2
 8013ba8:	22ff      	movs	r2, #255	; 0xff
 8013baa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8013bae:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bb2:	f103 0306 	add.w	r3, r3, #6
 8013bb6:	781b      	ldrb	r3, [r3, #0]
 8013bb8:	3301      	adds	r3, #1
 8013bba:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013bbe:	f102 0206 	add.w	r2, r2, #6
 8013bc2:	7013      	strb	r3, [r2, #0]
 8013bc4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bc8:	f103 0306 	add.w	r3, r3, #6
 8013bcc:	781b      	ldrb	r3, [r3, #0]
 8013bce:	2b0f      	cmp	r3, #15
 8013bd0:	d9dd      	bls.n	8013b8e <create_StepCountMap_unknown+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 8013bd2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bd6:	f103 0307 	add.w	r3, r3, #7
 8013bda:	781b      	ldrb	r3, [r3, #0]
 8013bdc:	3301      	adds	r3, #1
 8013bde:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013be2:	f102 0207 	add.w	r2, r2, #7
 8013be6:	7013      	strb	r3, [r2, #0]
 8013be8:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013bec:	f103 0307 	add.w	r3, r3, #7
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	2b0f      	cmp	r3, #15
 8013bf4:	d9c4      	bls.n	8013b80 <create_StepCountMap_unknown+0x18>
		}
	}

	initStack_walk(&stack_x);
 8013bf6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013bfa:	4618      	mov	r0, r3
 8013bfc:	f001 f8aa 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_y);
 8013c00:	f107 0308 	add.w	r3, r7, #8
 8013c04:	3b04      	subs	r3, #4
 8013c06:	4618      	mov	r0, r3
 8013c08:	f001 f8a4 	bl	8014d54 <initStack_walk>

	while (1) {

			goalX = popStack_walk(&g_Goal_x);
 8013c0c:	484c      	ldr	r0, [pc, #304]	; (8013d40 <create_StepCountMap_unknown+0x1d8>)
 8013c0e:	f001 f8db 	bl	8014dc8 <popStack_walk>
 8013c12:	4603      	mov	r3, r0
 8013c14:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c18:	f102 021a 	add.w	r2, r2, #26
 8013c1c:	8013      	strh	r3, [r2, #0]
			goalY = popStack_walk(&g_Goal_y);
 8013c1e:	4849      	ldr	r0, [pc, #292]	; (8013d44 <create_StepCountMap_unknown+0x1dc>)
 8013c20:	f001 f8d2 	bl	8014dc8 <popStack_walk>
 8013c24:	4603      	mov	r3, r0
 8013c26:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013c2a:	f102 0218 	add.w	r2, r2, #24
 8013c2e:	8013      	strh	r3, [r2, #0]
			//printf("x %d,y %d,C(0)R(1) %d\n",Xcoordinate,Ycoordinate,Row_or_Column);
			//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
			if (goalX == 65535 || goalY == 65535) {
 8013c30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c34:	f103 031a 	add.w	r3, r3, #26
 8013c38:	881b      	ldrh	r3, [r3, #0]
 8013c3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c3e:	4293      	cmp	r3, r2
 8013c40:	d030      	beq.n	8013ca4 <create_StepCountMap_unknown+0x13c>
 8013c42:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c46:	f103 0318 	add.w	r3, r3, #24
 8013c4a:	881b      	ldrh	r3, [r3, #0]
 8013c4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c50:	4293      	cmp	r3, r2
 8013c52:	d027      	beq.n	8013ca4 <create_StepCountMap_unknown+0x13c>
				//printf("stack_end\n");
				break;
			}
			walk_count[goalX][goalY] = 0;
 8013c54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c58:	f103 031a 	add.w	r3, r3, #26
 8013c5c:	881a      	ldrh	r2, [r3, #0]
 8013c5e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c62:	f103 0318 	add.w	r3, r3, #24
 8013c66:	881b      	ldrh	r3, [r3, #0]
 8013c68:	4934      	ldr	r1, [pc, #208]	; (8013d3c <create_StepCountMap_unknown+0x1d4>)
 8013c6a:	0112      	lsls	r2, r2, #4
 8013c6c:	4413      	add	r3, r2
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,goalX);pushStack_walk(&stack_y,goalY);
 8013c74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c78:	f103 031a 	add.w	r3, r3, #26
 8013c7c:	881a      	ldrh	r2, [r3, #0]
 8013c7e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013c82:	4611      	mov	r1, r2
 8013c84:	4618      	mov	r0, r3
 8013c86:	f001 f875 	bl	8014d74 <pushStack_walk>
 8013c8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013c8e:	f103 0318 	add.w	r3, r3, #24
 8013c92:	881a      	ldrh	r2, [r3, #0]
 8013c94:	f107 0308 	add.w	r3, r7, #8
 8013c98:	3b04      	subs	r3, #4
 8013c9a:	4611      	mov	r1, r2
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f001 f869 	bl	8014d74 <pushStack_walk>
			goalX = popStack_walk(&g_Goal_x);
 8013ca2:	e7b3      	b.n	8013c0c <create_StepCountMap_unknown+0xa4>
	}
	if(stack_x.tail == stack_x.head){
 8013ca4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ca8:	f103 0308 	add.w	r3, r3, #8
 8013cac:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013cb0:	685a      	ldr	r2, [r3, #4]
 8013cb2:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013cb6:	f103 0308 	add.w	r3, r3, #8
 8013cba:	f6a3 73bc 	subw	r3, r3, #4028	; 0xfbc
 8013cbe:	681b      	ldr	r3, [r3, #0]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d11b      	bne.n	8013cfc <create_StepCountMap_unknown+0x194>
		walk_count[0][0] = 0;
 8013cc4:	4b1d      	ldr	r3, [pc, #116]	; (8013d3c <create_StepCountMap_unknown+0x1d4>)
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	801a      	strh	r2, [r3, #0]
		pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 8013cca:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013cce:	2100      	movs	r1, #0
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f001 f84f 	bl	8014d74 <pushStack_walk>
 8013cd6:	f107 0308 	add.w	r3, r7, #8
 8013cda:	3b04      	subs	r3, #4
 8013cdc:	2100      	movs	r1, #0
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f001 f848 	bl	8014d74 <pushStack_walk>
		if (Dijkstra_maker_flag>=1){
 8013ce4:	4b18      	ldr	r3, [pc, #96]	; (8013d48 <create_StepCountMap_unknown+0x1e0>)
 8013ce6:	781b      	ldrb	r3, [r3, #0]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d003      	beq.n	8013cf4 <create_StepCountMap_unknown+0x18c>
			Dijkstra_maker_flag=2;
 8013cec:	4b16      	ldr	r3, [pc, #88]	; (8013d48 <create_StepCountMap_unknown+0x1e0>)
 8013cee:	2202      	movs	r2, #2
 8013cf0:	701a      	strb	r2, [r3, #0]
 8013cf2:	e006      	b.n	8013d02 <create_StepCountMap_unknown+0x19a>
		}else{
			Dijkstra_maker_flag=1;
 8013cf4:	4b14      	ldr	r3, [pc, #80]	; (8013d48 <create_StepCountMap_unknown+0x1e0>)
 8013cf6:	2201      	movs	r2, #1
 8013cf8:	701a      	strb	r2, [r3, #0]
 8013cfa:	e002      	b.n	8013d02 <create_StepCountMap_unknown+0x19a>
		}
	}else{
		Dijkstra_maker_flag=0;
 8013cfc:	4b12      	ldr	r3, [pc, #72]	; (8013d48 <create_StepCountMap_unknown+0x1e0>)
 8013cfe:	2200      	movs	r2, #0
 8013d00:	701a      	strb	r2, [r3, #0]
	}
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 8013d02:	2301      	movs	r3, #1
 8013d04:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d08:	f102 0204 	add.w	r2, r2, #4
 8013d0c:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8013d0e:	2301      	movs	r3, #1
 8013d10:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d14:	f102 0202 	add.w	r2, r2, #2
 8013d18:	8013      	strh	r3, [r2, #0]
 8013d1a:	2301      	movs	r3, #1
 8013d1c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013d20:	8013      	strh	r3, [r2, #0]
 8013d22:	2301      	movs	r3, #1
 8013d24:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d28:	f102 021e 	add.w	r2, r2, #30
 8013d2c:	8013      	strh	r3, [r2, #0]
 8013d2e:	2301      	movs	r3, #1
 8013d30:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d34:	f102 021c 	add.w	r2, r2, #28
 8013d38:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8013d3a:	e23b      	b.n	80141b4 <create_StepCountMap_unknown+0x64c>
 8013d3c:	20000d30 	.word	0x20000d30
 8013d40:	200012f0 	.word	0x200012f0
 8013d44:	20002298 	.word	0x20002298
 8013d48:	20000d2c 	.word	0x20000d2c

		Xcoordinate = popStack_walk(&stack_x);
 8013d4c:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013d50:	4618      	mov	r0, r3
 8013d52:	f001 f839 	bl	8014dc8 <popStack_walk>
 8013d56:	4603      	mov	r3, r0
 8013d58:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d5c:	f102 0216 	add.w	r2, r2, #22
 8013d60:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 8013d62:	f107 0308 	add.w	r3, r7, #8
 8013d66:	3b04      	subs	r3, #4
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f001 f82d 	bl	8014dc8 <popStack_walk>
 8013d6e:	4603      	mov	r3, r0
 8013d70:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013d74:	f102 0214 	add.w	r2, r2, #20
 8013d78:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8013d7a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d7e:	f103 0316 	add.w	r3, r3, #22
 8013d82:	881b      	ldrh	r3, [r3, #0]
 8013d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d88:	4293      	cmp	r3, r2
 8013d8a:	f000 821b 	beq.w	80141c4 <create_StepCountMap_unknown+0x65c>
 8013d8e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013d92:	f103 0314 	add.w	r3, r3, #20
 8013d96:	881b      	ldrh	r3, [r3, #0]
 8013d98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d9c:	4293      	cmp	r3, r2
 8013d9e:	f000 8211 	beq.w	80141c4 <create_StepCountMap_unknown+0x65c>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 8013da2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013da6:	f103 0314 	add.w	r3, r3, #20
 8013daa:	881b      	ldrh	r3, [r3, #0]
 8013dac:	2b0e      	cmp	r3, #14
 8013dae:	d81a      	bhi.n	8013de6 <create_StepCountMap_unknown+0x27e>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8013db0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013db4:	f103 0314 	add.w	r3, r3, #20
 8013db8:	881b      	ldrh	r3, [r3, #0]
 8013dba:	4ac4      	ldr	r2, [pc, #784]	; (80140cc <create_StepCountMap_unknown+0x564>)
 8013dbc:	330c      	adds	r3, #12
 8013dbe:	005b      	lsls	r3, r3, #1
 8013dc0:	4413      	add	r3, r2
 8013dc2:	88db      	ldrh	r3, [r3, #6]
 8013dc4:	b21a      	sxth	r2, r3
 8013dc6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dca:	f103 0316 	add.w	r3, r3, #22
 8013dce:	881b      	ldrh	r3, [r3, #0]
 8013dd0:	2101      	movs	r1, #1
 8013dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013dd6:	b21b      	sxth	r3, r3
 8013dd8:	4013      	ands	r3, r2
 8013dda:	b21b      	sxth	r3, r3
 8013ddc:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013de0:	f102 0202 	add.w	r2, r2, #2
 8013de4:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8013de6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013dea:	f103 0314 	add.w	r3, r3, #20
 8013dee:	881b      	ldrh	r3, [r3, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d019      	beq.n	8013e28 <create_StepCountMap_unknown+0x2c0>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8013df4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013df8:	f103 0314 	add.w	r3, r3, #20
 8013dfc:	881b      	ldrh	r3, [r3, #0]
 8013dfe:	3b01      	subs	r3, #1
 8013e00:	4ab2      	ldr	r2, [pc, #712]	; (80140cc <create_StepCountMap_unknown+0x564>)
 8013e02:	330c      	adds	r3, #12
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	4413      	add	r3, r2
 8013e08:	88db      	ldrh	r3, [r3, #6]
 8013e0a:	b21a      	sxth	r2, r3
 8013e0c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e10:	f103 0316 	add.w	r3, r3, #22
 8013e14:	881b      	ldrh	r3, [r3, #0]
 8013e16:	2101      	movs	r1, #1
 8013e18:	fa01 f303 	lsl.w	r3, r1, r3
 8013e1c:	b21b      	sxth	r3, r3
 8013e1e:	4013      	ands	r3, r2
 8013e20:	b21b      	sxth	r3, r3
 8013e22:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8013e26:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8013e28:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e2c:	f103 0316 	add.w	r3, r3, #22
 8013e30:	881b      	ldrh	r3, [r3, #0]
 8013e32:	2b0e      	cmp	r3, #14
 8013e34:	d818      	bhi.n	8013e68 <create_StepCountMap_unknown+0x300>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8013e36:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e3a:	f103 0316 	add.w	r3, r3, #22
 8013e3e:	881b      	ldrh	r3, [r3, #0]
 8013e40:	4aa2      	ldr	r2, [pc, #648]	; (80140cc <create_StepCountMap_unknown+0x564>)
 8013e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e46:	b21a      	sxth	r2, r3
 8013e48:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e4c:	f103 0314 	add.w	r3, r3, #20
 8013e50:	881b      	ldrh	r3, [r3, #0]
 8013e52:	2101      	movs	r1, #1
 8013e54:	fa01 f303 	lsl.w	r3, r1, r3
 8013e58:	b21b      	sxth	r3, r3
 8013e5a:	4013      	ands	r3, r2
 8013e5c:	b21b      	sxth	r3, r3
 8013e5e:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013e62:	f102 021e 	add.w	r2, r2, #30
 8013e66:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8013e68:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e6c:	f103 0316 	add.w	r3, r3, #22
 8013e70:	881b      	ldrh	r3, [r3, #0]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d019      	beq.n	8013eaa <create_StepCountMap_unknown+0x342>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8013e76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e7a:	f103 0316 	add.w	r3, r3, #22
 8013e7e:	881b      	ldrh	r3, [r3, #0]
 8013e80:	3b01      	subs	r3, #1
 8013e82:	4a92      	ldr	r2, [pc, #584]	; (80140cc <create_StepCountMap_unknown+0x564>)
 8013e84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013e88:	b21a      	sxth	r2, r3
 8013e8a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013e8e:	f103 0314 	add.w	r3, r3, #20
 8013e92:	881b      	ldrh	r3, [r3, #0]
 8013e94:	2101      	movs	r1, #1
 8013e96:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9a:	b21b      	sxth	r3, r3
 8013e9c:	4013      	ands	r3, r2
 8013e9e:	b21b      	sxth	r3, r3
 8013ea0:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8013ea4:	f102 021c 	add.w	r2, r2, #28
 8013ea8:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8013eaa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eae:	f103 0316 	add.w	r3, r3, #22
 8013eb2:	881a      	ldrh	r2, [r3, #0]
 8013eb4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eb8:	f103 0314 	add.w	r3, r3, #20
 8013ebc:	881b      	ldrh	r3, [r3, #0]
 8013ebe:	3301      	adds	r3, #1
 8013ec0:	4983      	ldr	r1, [pc, #524]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013ec2:	0112      	lsls	r2, r2, #4
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013eca:	2bff      	cmp	r3, #255	; 0xff
 8013ecc:	d148      	bne.n	8013f60 <create_StepCountMap_unknown+0x3f8>
 8013ece:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ed2:	f103 0314 	add.w	r3, r3, #20
 8013ed6:	881b      	ldrh	r3, [r3, #0]
 8013ed8:	2b0f      	cmp	r3, #15
 8013eda:	d041      	beq.n	8013f60 <create_StepCountMap_unknown+0x3f8>
 8013edc:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013ee0:	f103 0302 	add.w	r3, r3, #2
 8013ee4:	881b      	ldrh	r3, [r3, #0]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d13a      	bne.n	8013f60 <create_StepCountMap_unknown+0x3f8>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013eea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013eee:	f103 0316 	add.w	r3, r3, #22
 8013ef2:	881a      	ldrh	r2, [r3, #0]
 8013ef4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ef8:	f103 0314 	add.w	r3, r3, #20
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	4974      	ldr	r1, [pc, #464]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013f00:	0112      	lsls	r2, r2, #4
 8013f02:	4413      	add	r3, r2
 8013f04:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013f08:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f0c:	f103 0316 	add.w	r3, r3, #22
 8013f10:	881a      	ldrh	r2, [r3, #0]
 8013f12:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f16:	f103 0314 	add.w	r3, r3, #20
 8013f1a:	881b      	ldrh	r3, [r3, #0]
 8013f1c:	3301      	adds	r3, #1
 8013f1e:	3101      	adds	r1, #1
 8013f20:	b288      	uxth	r0, r1
 8013f22:	496b      	ldr	r1, [pc, #428]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013f24:	0112      	lsls	r2, r2, #4
 8013f26:	4413      	add	r3, r2
 8013f28:	4602      	mov	r2, r0
 8013f2a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013f2e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f32:	f103 0316 	add.w	r3, r3, #22
 8013f36:	881a      	ldrh	r2, [r3, #0]
 8013f38:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013f3c:	4611      	mov	r1, r2
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f000 ff18 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8013f44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f48:	f103 0314 	add.w	r3, r3, #20
 8013f4c:	881b      	ldrh	r3, [r3, #0]
 8013f4e:	3301      	adds	r3, #1
 8013f50:	b29a      	uxth	r2, r3
 8013f52:	f107 0308 	add.w	r3, r7, #8
 8013f56:	3b04      	subs	r3, #4
 8013f58:	4611      	mov	r1, r2
 8013f5a:	4618      	mov	r0, r3
 8013f5c:	f000 ff0a 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8013f60:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f64:	f103 0316 	add.w	r3, r3, #22
 8013f68:	881a      	ldrh	r2, [r3, #0]
 8013f6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f6e:	f103 0314 	add.w	r3, r3, #20
 8013f72:	881b      	ldrh	r3, [r3, #0]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	4956      	ldr	r1, [pc, #344]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013f78:	0112      	lsls	r2, r2, #4
 8013f7a:	4413      	add	r3, r2
 8013f7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8013f80:	2bff      	cmp	r3, #255	; 0xff
 8013f82:	d146      	bne.n	8014012 <create_StepCountMap_unknown+0x4aa>
 8013f84:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013f88:	f103 0314 	add.w	r3, r3, #20
 8013f8c:	881b      	ldrh	r3, [r3, #0]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d03f      	beq.n	8014012 <create_StepCountMap_unknown+0x4aa>
 8013f92:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8013f96:	881b      	ldrh	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d13a      	bne.n	8014012 <create_StepCountMap_unknown+0x4aa>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8013f9c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fa0:	f103 0316 	add.w	r3, r3, #22
 8013fa4:	881a      	ldrh	r2, [r3, #0]
 8013fa6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013faa:	f103 0314 	add.w	r3, r3, #20
 8013fae:	881b      	ldrh	r3, [r3, #0]
 8013fb0:	4947      	ldr	r1, [pc, #284]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013fb2:	0112      	lsls	r2, r2, #4
 8013fb4:	4413      	add	r3, r2
 8013fb6:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8013fba:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fbe:	f103 0316 	add.w	r3, r3, #22
 8013fc2:	881a      	ldrh	r2, [r3, #0]
 8013fc4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fc8:	f103 0314 	add.w	r3, r3, #20
 8013fcc:	881b      	ldrh	r3, [r3, #0]
 8013fce:	3b01      	subs	r3, #1
 8013fd0:	3101      	adds	r1, #1
 8013fd2:	b288      	uxth	r0, r1
 8013fd4:	493e      	ldr	r1, [pc, #248]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8013fd6:	0112      	lsls	r2, r2, #4
 8013fd8:	4413      	add	r3, r2
 8013fda:	4602      	mov	r2, r0
 8013fdc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8013fe0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013fe4:	f103 0316 	add.w	r3, r3, #22
 8013fe8:	881a      	ldrh	r2, [r3, #0]
 8013fea:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8013fee:	4611      	mov	r1, r2
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f000 febf 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8013ff6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8013ffa:	f103 0314 	add.w	r3, r3, #20
 8013ffe:	881b      	ldrh	r3, [r3, #0]
 8014000:	3b01      	subs	r3, #1
 8014002:	b29a      	uxth	r2, r3
 8014004:	f107 0308 	add.w	r3, r7, #8
 8014008:	3b04      	subs	r3, #4
 801400a:	4611      	mov	r1, r2
 801400c:	4618      	mov	r0, r3
 801400e:	f000 feb1 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014012:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014016:	f103 0316 	add.w	r3, r3, #22
 801401a:	881b      	ldrh	r3, [r3, #0]
 801401c:	1c5a      	adds	r2, r3, #1
 801401e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014022:	f103 0314 	add.w	r3, r3, #20
 8014026:	881b      	ldrh	r3, [r3, #0]
 8014028:	4929      	ldr	r1, [pc, #164]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 801402a:	0112      	lsls	r2, r2, #4
 801402c:	4413      	add	r3, r2
 801402e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014032:	2bff      	cmp	r3, #255	; 0xff
 8014034:	d14e      	bne.n	80140d4 <create_StepCountMap_unknown+0x56c>
 8014036:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801403a:	f103 0316 	add.w	r3, r3, #22
 801403e:	881b      	ldrh	r3, [r3, #0]
 8014040:	2b0f      	cmp	r3, #15
 8014042:	d047      	beq.n	80140d4 <create_StepCountMap_unknown+0x56c>
 8014044:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014048:	f103 031e 	add.w	r3, r3, #30
 801404c:	881b      	ldrh	r3, [r3, #0]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d140      	bne.n	80140d4 <create_StepCountMap_unknown+0x56c>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014052:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014056:	f103 0316 	add.w	r3, r3, #22
 801405a:	881a      	ldrh	r2, [r3, #0]
 801405c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014060:	f103 0314 	add.w	r3, r3, #20
 8014064:	881b      	ldrh	r3, [r3, #0]
 8014066:	491a      	ldr	r1, [pc, #104]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 8014068:	0112      	lsls	r2, r2, #4
 801406a:	4413      	add	r3, r2
 801406c:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014070:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014074:	f103 0316 	add.w	r3, r3, #22
 8014078:	881b      	ldrh	r3, [r3, #0]
 801407a:	1c5a      	adds	r2, r3, #1
 801407c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014080:	f103 0314 	add.w	r3, r3, #20
 8014084:	881b      	ldrh	r3, [r3, #0]
 8014086:	3101      	adds	r1, #1
 8014088:	b288      	uxth	r0, r1
 801408a:	4911      	ldr	r1, [pc, #68]	; (80140d0 <create_StepCountMap_unknown+0x568>)
 801408c:	0112      	lsls	r2, r2, #4
 801408e:	4413      	add	r3, r2
 8014090:	4602      	mov	r2, r0
 8014092:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014096:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801409a:	f103 0316 	add.w	r3, r3, #22
 801409e:	881b      	ldrh	r3, [r3, #0]
 80140a0:	3301      	adds	r3, #1
 80140a2:	b29a      	uxth	r2, r3
 80140a4:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80140a8:	4611      	mov	r1, r2
 80140aa:	4618      	mov	r0, r3
 80140ac:	f000 fe62 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 80140b0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140b4:	f103 0314 	add.w	r3, r3, #20
 80140b8:	881a      	ldrh	r2, [r3, #0]
 80140ba:	f107 0308 	add.w	r3, r7, #8
 80140be:	3b04      	subs	r3, #4
 80140c0:	4611      	mov	r1, r2
 80140c2:	4618      	mov	r0, r3
 80140c4:	f000 fe56 	bl	8014d74 <pushStack_walk>
 80140c8:	e004      	b.n	80140d4 <create_StepCountMap_unknown+0x56c>
 80140ca:	bf00      	nop
 80140cc:	20000c3c 	.word	0x20000c3c
 80140d0:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 80140d4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140d8:	f103 0316 	add.w	r3, r3, #22
 80140dc:	881b      	ldrh	r3, [r3, #0]
 80140de:	1e5a      	subs	r2, r3, #1
 80140e0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140e4:	f103 0314 	add.w	r3, r3, #20
 80140e8:	881b      	ldrh	r3, [r3, #0]
 80140ea:	4939      	ldr	r1, [pc, #228]	; (80141d0 <create_StepCountMap_unknown+0x668>)
 80140ec:	0112      	lsls	r2, r2, #4
 80140ee:	4413      	add	r3, r2
 80140f0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80140f4:	2bff      	cmp	r3, #255	; 0xff
 80140f6:	d148      	bne.n	801418a <create_StepCountMap_unknown+0x622>
 80140f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80140fc:	f103 0316 	add.w	r3, r3, #22
 8014100:	881b      	ldrh	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d041      	beq.n	801418a <create_StepCountMap_unknown+0x622>
 8014106:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801410a:	f103 031c 	add.w	r3, r3, #28
 801410e:	881b      	ldrh	r3, [r3, #0]
 8014110:	2b00      	cmp	r3, #0
 8014112:	d13a      	bne.n	801418a <create_StepCountMap_unknown+0x622>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014114:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014118:	f103 0316 	add.w	r3, r3, #22
 801411c:	881a      	ldrh	r2, [r3, #0]
 801411e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014122:	f103 0314 	add.w	r3, r3, #20
 8014126:	881b      	ldrh	r3, [r3, #0]
 8014128:	4929      	ldr	r1, [pc, #164]	; (80141d0 <create_StepCountMap_unknown+0x668>)
 801412a:	0112      	lsls	r2, r2, #4
 801412c:	4413      	add	r3, r2
 801412e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014132:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014136:	f103 0316 	add.w	r3, r3, #22
 801413a:	881b      	ldrh	r3, [r3, #0]
 801413c:	1e5a      	subs	r2, r3, #1
 801413e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014142:	f103 0314 	add.w	r3, r3, #20
 8014146:	881b      	ldrh	r3, [r3, #0]
 8014148:	3101      	adds	r1, #1
 801414a:	b288      	uxth	r0, r1
 801414c:	4920      	ldr	r1, [pc, #128]	; (80141d0 <create_StepCountMap_unknown+0x668>)
 801414e:	0112      	lsls	r2, r2, #4
 8014150:	4413      	add	r3, r2
 8014152:	4602      	mov	r2, r0
 8014154:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014158:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801415c:	f103 0316 	add.w	r3, r3, #22
 8014160:	881b      	ldrh	r3, [r3, #0]
 8014162:	3b01      	subs	r3, #1
 8014164:	b29a      	uxth	r2, r3
 8014166:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 801416a:	4611      	mov	r1, r2
 801416c:	4618      	mov	r0, r3
 801416e:	f000 fe01 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014172:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014176:	f103 0314 	add.w	r3, r3, #20
 801417a:	881a      	ldrh	r2, [r3, #0]
 801417c:	f107 0308 	add.w	r3, r7, #8
 8014180:	3b04      	subs	r3, #4
 8014182:	4611      	mov	r1, r2
 8014184:	4618      	mov	r0, r3
 8014186:	f000 fdf5 	bl	8014d74 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801418a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801418e:	f103 0316 	add.w	r3, r3, #22
 8014192:	881a      	ldrh	r2, [r3, #0]
 8014194:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014198:	f103 0314 	add.w	r3, r3, #20
 801419c:	881b      	ldrh	r3, [r3, #0]
 801419e:	490c      	ldr	r1, [pc, #48]	; (80141d0 <create_StepCountMap_unknown+0x668>)
 80141a0:	0112      	lsls	r2, r2, #4
 80141a2:	4413      	add	r3, r2
 80141a4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80141a8:	3301      	adds	r3, #1
 80141aa:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80141ae:	f102 0204 	add.w	r2, r2, #4
 80141b2:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80141b4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80141b8:	f103 0304 	add.w	r3, r3, #4
 80141bc:	881b      	ldrh	r3, [r3, #0]
 80141be:	2bfe      	cmp	r3, #254	; 0xfe
 80141c0:	f67f adc4 	bls.w	8013d4c <create_StepCountMap_unknown+0x1e4>

		}

}
 80141c4:	bf00      	nop
 80141c6:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 80141ca:	3708      	adds	r7, #8
 80141cc:	46bd      	mov	sp, r7
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	20000d30 	.word	0x20000d30

080141d4 <create_StepCountMap_queue>:





void create_StepCountMap_queue(void){
 80141d4:	b580      	push	{r7, lr}
 80141d6:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80141da:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80141dc:	2300      	movs	r3, #0
 80141de:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141e2:	f102 021f 	add.w	r2, r2, #31
 80141e6:	7013      	strb	r3, [r2, #0]
 80141e8:	e033      	b.n	8014252 <create_StepCountMap_queue+0x7e>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80141ea:	2300      	movs	r3, #0
 80141ec:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80141f0:	f102 021e 	add.w	r2, r2, #30
 80141f4:	7013      	strb	r3, [r2, #0]
 80141f6:	e01a      	b.n	801422e <create_StepCountMap_queue+0x5a>
			walk_count[xx][yy] = 255;
 80141f8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80141fc:	f103 031f 	add.w	r3, r3, #31
 8014200:	781a      	ldrb	r2, [r3, #0]
 8014202:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014206:	f103 031e 	add.w	r3, r3, #30
 801420a:	781b      	ldrb	r3, [r3, #0]
 801420c:	4945      	ldr	r1, [pc, #276]	; (8014324 <create_StepCountMap_queue+0x150>)
 801420e:	0112      	lsls	r2, r2, #4
 8014210:	4413      	add	r3, r2
 8014212:	22ff      	movs	r2, #255	; 0xff
 8014214:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 8014218:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801421c:	f103 031e 	add.w	r3, r3, #30
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	3301      	adds	r3, #1
 8014224:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014228:	f102 021e 	add.w	r2, r2, #30
 801422c:	7013      	strb	r3, [r2, #0]
 801422e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014232:	f103 031e 	add.w	r3, r3, #30
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	2b0f      	cmp	r3, #15
 801423a:	d9dd      	bls.n	80141f8 <create_StepCountMap_queue+0x24>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801423c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014240:	f103 031f 	add.w	r3, r3, #31
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	3301      	adds	r3, #1
 8014248:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801424c:	f102 021f 	add.w	r2, r2, #31
 8014250:	7013      	strb	r3, [r2, #0]
 8014252:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014256:	f103 031f 	add.w	r3, r3, #31
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	2b0f      	cmp	r3, #15
 801425e:	d9c4      	bls.n	80141ea <create_StepCountMap_queue+0x16>
		}
	}
	initStack_walk(&stack_x);
 8014260:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014264:	4618      	mov	r0, r3
 8014266:	f000 fd75 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_y);
 801426a:	463b      	mov	r3, r7
 801426c:	4618      	mov	r0, r3
 801426e:	f000 fd71 	bl	8014d54 <initStack_walk>


	walk_count[GOAL_X][GOAL_Y] = 0;
 8014272:	4b2c      	ldr	r3, [pc, #176]	; (8014324 <create_StepCountMap_queue+0x150>)
 8014274:	2200      	movs	r2, #0
 8014276:	841a      	strh	r2, [r3, #32]
	walk_count[GOAL_X + 1][GOAL_Y] = 0;
 8014278:	4b2a      	ldr	r3, [pc, #168]	; (8014324 <create_StepCountMap_queue+0x150>)
 801427a:	2200      	movs	r2, #0
 801427c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	walk_count[GOAL_X][GOAL_Y + 1] = 0;
 8014280:	4b28      	ldr	r3, [pc, #160]	; (8014324 <create_StepCountMap_queue+0x150>)
 8014282:	2200      	movs	r2, #0
 8014284:	845a      	strh	r2, [r3, #34]	; 0x22
	walk_count[GOAL_X + 1][GOAL_Y + 1] = 0;
 8014286:	4b27      	ldr	r3, [pc, #156]	; (8014324 <create_StepCountMap_queue+0x150>)
 8014288:	2200      	movs	r2, #0
 801428a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y);
 801428e:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014292:	2101      	movs	r1, #1
 8014294:	4618      	mov	r0, r3
 8014296:	f000 fd6d 	bl	8014d74 <pushStack_walk>
 801429a:	463b      	mov	r3, r7
 801429c:	2100      	movs	r1, #0
 801429e:	4618      	mov	r0, r3
 80142a0:	f000 fd68 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y);
 80142a4:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142a8:	2102      	movs	r1, #2
 80142aa:	4618      	mov	r0, r3
 80142ac:	f000 fd62 	bl	8014d74 <pushStack_walk>
 80142b0:	463b      	mov	r3, r7
 80142b2:	2100      	movs	r1, #0
 80142b4:	4618      	mov	r0, r3
 80142b6:	f000 fd5d 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142ba:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142be:	2101      	movs	r1, #1
 80142c0:	4618      	mov	r0, r3
 80142c2:	f000 fd57 	bl	8014d74 <pushStack_walk>
 80142c6:	463b      	mov	r3, r7
 80142c8:	2101      	movs	r1, #1
 80142ca:	4618      	mov	r0, r3
 80142cc:	f000 fd52 	bl	8014d74 <pushStack_walk>
	pushStack_walk(&stack_x,GOAL_X + 1);pushStack_walk(&stack_y,GOAL_Y + 1);
 80142d0:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80142d4:	2102      	movs	r1, #2
 80142d6:	4618      	mov	r0, r3
 80142d8:	f000 fd4c 	bl	8014d74 <pushStack_walk>
 80142dc:	463b      	mov	r3, r7
 80142de:	2101      	movs	r1, #1
 80142e0:	4618      	mov	r0, r3
 80142e2:	f000 fd47 	bl	8014d74 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short count_number = 1;
 80142e6:	2301      	movs	r3, #1
 80142e8:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142ec:	f102 021c 	add.w	r2, r2, #28
 80142f0:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 80142f2:	2301      	movs	r3, #1
 80142f4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80142f8:	f102 021a 	add.w	r2, r2, #26
 80142fc:	8013      	strh	r3, [r2, #0]
 80142fe:	2301      	movs	r3, #1
 8014300:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014304:	f102 0218 	add.w	r2, r2, #24
 8014308:	8013      	strh	r3, [r2, #0]
 801430a:	2301      	movs	r3, #1
 801430c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014310:	f102 0216 	add.w	r2, r2, #22
 8014314:	8013      	strh	r3, [r2, #0]
 8014316:	2301      	movs	r3, #1
 8014318:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801431c:	f102 0214 	add.w	r2, r2, #20
 8014320:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014322:	e22f      	b.n	8014784 <create_StepCountMap_queue+0x5b0>
 8014324:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 8014328:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801432c:	4618      	mov	r0, r3
 801432e:	f000 fd4b 	bl	8014dc8 <popStack_walk>
 8014332:	4603      	mov	r3, r0
 8014334:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014338:	f102 0212 	add.w	r2, r2, #18
 801433c:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 801433e:	463b      	mov	r3, r7
 8014340:	4618      	mov	r0, r3
 8014342:	f000 fd41 	bl	8014dc8 <popStack_walk>
 8014346:	4603      	mov	r3, r0
 8014348:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801434c:	f102 0210 	add.w	r2, r2, #16
 8014350:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 8014352:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014356:	f103 0312 	add.w	r3, r3, #18
 801435a:	881b      	ldrh	r3, [r3, #0]
 801435c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014360:	4293      	cmp	r3, r2
 8014362:	f000 8217 	beq.w	8014794 <create_StepCountMap_queue+0x5c0>
 8014366:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801436a:	f103 0310 	add.w	r3, r3, #16
 801436e:	881b      	ldrh	r3, [r3, #0]
 8014370:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014374:	4293      	cmp	r3, r2
 8014376:	f000 820d 	beq.w	8014794 <create_StepCountMap_queue+0x5c0>
			//printf("stack_end\n");
			break;
		}

		if (Ycoordinate <= 14) {
 801437a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801437e:	f103 0310 	add.w	r3, r3, #16
 8014382:	881b      	ldrh	r3, [r3, #0]
 8014384:	2b0e      	cmp	r3, #14
 8014386:	d81a      	bhi.n	80143be <create_StepCountMap_queue+0x1ea>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014388:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801438c:	f103 0310 	add.w	r3, r3, #16
 8014390:	881b      	ldrh	r3, [r3, #0]
 8014392:	4aca      	ldr	r2, [pc, #808]	; (80146bc <create_StepCountMap_queue+0x4e8>)
 8014394:	330c      	adds	r3, #12
 8014396:	005b      	lsls	r3, r3, #1
 8014398:	4413      	add	r3, r2
 801439a:	88db      	ldrh	r3, [r3, #6]
 801439c:	b21a      	sxth	r2, r3
 801439e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143a2:	f103 0312 	add.w	r3, r3, #18
 80143a6:	881b      	ldrh	r3, [r3, #0]
 80143a8:	2101      	movs	r1, #1
 80143aa:	fa01 f303 	lsl.w	r3, r1, r3
 80143ae:	b21b      	sxth	r3, r3
 80143b0:	4013      	ands	r3, r2
 80143b2:	b21b      	sxth	r3, r3
 80143b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143b8:	f102 021a 	add.w	r2, r2, #26
 80143bc:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 80143be:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143c2:	f103 0310 	add.w	r3, r3, #16
 80143c6:	881b      	ldrh	r3, [r3, #0]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d01b      	beq.n	8014404 <create_StepCountMap_queue+0x230>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 80143cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143d0:	f103 0310 	add.w	r3, r3, #16
 80143d4:	881b      	ldrh	r3, [r3, #0]
 80143d6:	3b01      	subs	r3, #1
 80143d8:	4ab8      	ldr	r2, [pc, #736]	; (80146bc <create_StepCountMap_queue+0x4e8>)
 80143da:	330c      	adds	r3, #12
 80143dc:	005b      	lsls	r3, r3, #1
 80143de:	4413      	add	r3, r2
 80143e0:	88db      	ldrh	r3, [r3, #6]
 80143e2:	b21a      	sxth	r2, r3
 80143e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80143e8:	f103 0312 	add.w	r3, r3, #18
 80143ec:	881b      	ldrh	r3, [r3, #0]
 80143ee:	2101      	movs	r1, #1
 80143f0:	fa01 f303 	lsl.w	r3, r1, r3
 80143f4:	b21b      	sxth	r3, r3
 80143f6:	4013      	ands	r3, r2
 80143f8:	b21b      	sxth	r3, r3
 80143fa:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80143fe:	f102 0218 	add.w	r2, r2, #24
 8014402:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 8014404:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014408:	f103 0312 	add.w	r3, r3, #18
 801440c:	881b      	ldrh	r3, [r3, #0]
 801440e:	2b0e      	cmp	r3, #14
 8014410:	d818      	bhi.n	8014444 <create_StepCountMap_queue+0x270>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 8014412:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014416:	f103 0312 	add.w	r3, r3, #18
 801441a:	881b      	ldrh	r3, [r3, #0]
 801441c:	4aa7      	ldr	r2, [pc, #668]	; (80146bc <create_StepCountMap_queue+0x4e8>)
 801441e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014422:	b21a      	sxth	r2, r3
 8014424:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014428:	f103 0310 	add.w	r3, r3, #16
 801442c:	881b      	ldrh	r3, [r3, #0]
 801442e:	2101      	movs	r1, #1
 8014430:	fa01 f303 	lsl.w	r3, r1, r3
 8014434:	b21b      	sxth	r3, r3
 8014436:	4013      	ands	r3, r2
 8014438:	b21b      	sxth	r3, r3
 801443a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801443e:	f102 0216 	add.w	r2, r2, #22
 8014442:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 8014444:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014448:	f103 0312 	add.w	r3, r3, #18
 801444c:	881b      	ldrh	r3, [r3, #0]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d019      	beq.n	8014486 <create_StepCountMap_queue+0x2b2>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 8014452:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014456:	f103 0312 	add.w	r3, r3, #18
 801445a:	881b      	ldrh	r3, [r3, #0]
 801445c:	3b01      	subs	r3, #1
 801445e:	4a97      	ldr	r2, [pc, #604]	; (80146bc <create_StepCountMap_queue+0x4e8>)
 8014460:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014464:	b21a      	sxth	r2, r3
 8014466:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801446a:	f103 0310 	add.w	r3, r3, #16
 801446e:	881b      	ldrh	r3, [r3, #0]
 8014470:	2101      	movs	r1, #1
 8014472:	fa01 f303 	lsl.w	r3, r1, r3
 8014476:	b21b      	sxth	r3, r3
 8014478:	4013      	ands	r3, r2
 801447a:	b21b      	sxth	r3, r3
 801447c:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014480:	f102 0214 	add.w	r2, r2, #20
 8014484:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014486:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801448a:	f103 0312 	add.w	r3, r3, #18
 801448e:	881a      	ldrh	r2, [r3, #0]
 8014490:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014494:	f103 0310 	add.w	r3, r3, #16
 8014498:	881b      	ldrh	r3, [r3, #0]
 801449a:	3301      	adds	r3, #1
 801449c:	4988      	ldr	r1, [pc, #544]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 801449e:	0112      	lsls	r2, r2, #4
 80144a0:	4413      	add	r3, r2
 80144a2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80144a6:	2bff      	cmp	r3, #255	; 0xff
 80144a8:	d146      	bne.n	8014538 <create_StepCountMap_queue+0x364>
 80144aa:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ae:	f103 0310 	add.w	r3, r3, #16
 80144b2:	881b      	ldrh	r3, [r3, #0]
 80144b4:	2b0f      	cmp	r3, #15
 80144b6:	d03f      	beq.n	8014538 <create_StepCountMap_queue+0x364>
 80144b8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144bc:	f103 031a 	add.w	r3, r3, #26
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d138      	bne.n	8014538 <create_StepCountMap_queue+0x364>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80144c6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144ca:	f103 0312 	add.w	r3, r3, #18
 80144ce:	881a      	ldrh	r2, [r3, #0]
 80144d0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144d4:	f103 0310 	add.w	r3, r3, #16
 80144d8:	881b      	ldrh	r3, [r3, #0]
 80144da:	4979      	ldr	r1, [pc, #484]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 80144dc:	0112      	lsls	r2, r2, #4
 80144de:	4413      	add	r3, r2
 80144e0:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 80144e4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144e8:	f103 0312 	add.w	r3, r3, #18
 80144ec:	881a      	ldrh	r2, [r3, #0]
 80144ee:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80144f2:	f103 0310 	add.w	r3, r3, #16
 80144f6:	881b      	ldrh	r3, [r3, #0]
 80144f8:	3301      	adds	r3, #1
 80144fa:	3101      	adds	r1, #1
 80144fc:	b288      	uxth	r0, r1
 80144fe:	4970      	ldr	r1, [pc, #448]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 8014500:	0112      	lsls	r2, r2, #4
 8014502:	4413      	add	r3, r2
 8014504:	4602      	mov	r2, r0
 8014506:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 801450a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801450e:	f103 0312 	add.w	r3, r3, #18
 8014512:	881a      	ldrh	r2, [r3, #0]
 8014514:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014518:	4611      	mov	r1, r2
 801451a:	4618      	mov	r0, r3
 801451c:	f000 fc2a 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014520:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014524:	f103 0310 	add.w	r3, r3, #16
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	3301      	adds	r3, #1
 801452c:	b29a      	uxth	r2, r3
 801452e:	463b      	mov	r3, r7
 8014530:	4611      	mov	r1, r2
 8014532:	4618      	mov	r0, r3
 8014534:	f000 fc1e 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014538:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801453c:	f103 0312 	add.w	r3, r3, #18
 8014540:	881a      	ldrh	r2, [r3, #0]
 8014542:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014546:	f103 0310 	add.w	r3, r3, #16
 801454a:	881b      	ldrh	r3, [r3, #0]
 801454c:	3b01      	subs	r3, #1
 801454e:	495c      	ldr	r1, [pc, #368]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 8014550:	0112      	lsls	r2, r2, #4
 8014552:	4413      	add	r3, r2
 8014554:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014558:	2bff      	cmp	r3, #255	; 0xff
 801455a:	d146      	bne.n	80145ea <create_StepCountMap_queue+0x416>
 801455c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014560:	f103 0310 	add.w	r3, r3, #16
 8014564:	881b      	ldrh	r3, [r3, #0]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d03f      	beq.n	80145ea <create_StepCountMap_queue+0x416>
 801456a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801456e:	f103 0318 	add.w	r3, r3, #24
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d138      	bne.n	80145ea <create_StepCountMap_queue+0x416>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014578:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801457c:	f103 0312 	add.w	r3, r3, #18
 8014580:	881a      	ldrh	r2, [r3, #0]
 8014582:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014586:	f103 0310 	add.w	r3, r3, #16
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	494c      	ldr	r1, [pc, #304]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 801458e:	0112      	lsls	r2, r2, #4
 8014590:	4413      	add	r3, r2
 8014592:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014596:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801459a:	f103 0312 	add.w	r3, r3, #18
 801459e:	881a      	ldrh	r2, [r3, #0]
 80145a0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145a4:	f103 0310 	add.w	r3, r3, #16
 80145a8:	881b      	ldrh	r3, [r3, #0]
 80145aa:	3b01      	subs	r3, #1
 80145ac:	3101      	adds	r1, #1
 80145ae:	b288      	uxth	r0, r1
 80145b0:	4943      	ldr	r1, [pc, #268]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 80145b2:	0112      	lsls	r2, r2, #4
 80145b4:	4413      	add	r3, r2
 80145b6:	4602      	mov	r2, r0
 80145b8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 80145bc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145c0:	f103 0312 	add.w	r3, r3, #18
 80145c4:	881a      	ldrh	r2, [r3, #0]
 80145c6:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 80145ca:	4611      	mov	r1, r2
 80145cc:	4618      	mov	r0, r3
 80145ce:	f000 fbd1 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 80145d2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145d6:	f103 0310 	add.w	r3, r3, #16
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	3b01      	subs	r3, #1
 80145de:	b29a      	uxth	r2, r3
 80145e0:	463b      	mov	r3, r7
 80145e2:	4611      	mov	r1, r2
 80145e4:	4618      	mov	r0, r3
 80145e6:	f000 fbc5 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 80145ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145ee:	f103 0312 	add.w	r3, r3, #18
 80145f2:	881b      	ldrh	r3, [r3, #0]
 80145f4:	1c5a      	adds	r2, r3, #1
 80145f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80145fa:	f103 0310 	add.w	r3, r3, #16
 80145fe:	881b      	ldrh	r3, [r3, #0]
 8014600:	492f      	ldr	r1, [pc, #188]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 8014602:	0112      	lsls	r2, r2, #4
 8014604:	4413      	add	r3, r2
 8014606:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801460a:	2bff      	cmp	r3, #255	; 0xff
 801460c:	d146      	bne.n	801469c <create_StepCountMap_queue+0x4c8>
 801460e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014612:	f103 0312 	add.w	r3, r3, #18
 8014616:	881b      	ldrh	r3, [r3, #0]
 8014618:	2b0f      	cmp	r3, #15
 801461a:	d03f      	beq.n	801469c <create_StepCountMap_queue+0x4c8>
 801461c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014620:	f103 0316 	add.w	r3, r3, #22
 8014624:	881b      	ldrh	r3, [r3, #0]
 8014626:	2b00      	cmp	r3, #0
 8014628:	d138      	bne.n	801469c <create_StepCountMap_queue+0x4c8>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 801462a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801462e:	f103 0312 	add.w	r3, r3, #18
 8014632:	881a      	ldrh	r2, [r3, #0]
 8014634:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014638:	f103 0310 	add.w	r3, r3, #16
 801463c:	881b      	ldrh	r3, [r3, #0]
 801463e:	4920      	ldr	r1, [pc, #128]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 8014640:	0112      	lsls	r2, r2, #4
 8014642:	4413      	add	r3, r2
 8014644:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014648:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801464c:	f103 0312 	add.w	r3, r3, #18
 8014650:	881b      	ldrh	r3, [r3, #0]
 8014652:	1c5a      	adds	r2, r3, #1
 8014654:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014658:	f103 0310 	add.w	r3, r3, #16
 801465c:	881b      	ldrh	r3, [r3, #0]
 801465e:	3101      	adds	r1, #1
 8014660:	b288      	uxth	r0, r1
 8014662:	4917      	ldr	r1, [pc, #92]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 8014664:	0112      	lsls	r2, r2, #4
 8014666:	4413      	add	r3, r2
 8014668:	4602      	mov	r2, r0
 801466a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 801466e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014672:	f103 0312 	add.w	r3, r3, #18
 8014676:	881b      	ldrh	r3, [r3, #0]
 8014678:	3301      	adds	r3, #1
 801467a:	b29a      	uxth	r2, r3
 801467c:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 8014680:	4611      	mov	r1, r2
 8014682:	4618      	mov	r0, r3
 8014684:	f000 fb76 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014688:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801468c:	f103 0310 	add.w	r3, r3, #16
 8014690:	881a      	ldrh	r2, [r3, #0]
 8014692:	463b      	mov	r3, r7
 8014694:	4611      	mov	r1, r2
 8014696:	4618      	mov	r0, r3
 8014698:	f000 fb6c 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 801469c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146a0:	f103 0312 	add.w	r3, r3, #18
 80146a4:	881b      	ldrh	r3, [r3, #0]
 80146a6:	1e5a      	subs	r2, r3, #1
 80146a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ac:	f103 0310 	add.w	r3, r3, #16
 80146b0:	881b      	ldrh	r3, [r3, #0]
 80146b2:	4903      	ldr	r1, [pc, #12]	; (80146c0 <create_StepCountMap_queue+0x4ec>)
 80146b4:	0112      	lsls	r2, r2, #4
 80146b6:	4413      	add	r3, r2
 80146b8:	e004      	b.n	80146c4 <create_StepCountMap_queue+0x4f0>
 80146ba:	bf00      	nop
 80146bc:	20000c3c 	.word	0x20000c3c
 80146c0:	20000d30 	.word	0x20000d30
 80146c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80146c8:	2bff      	cmp	r3, #255	; 0xff
 80146ca:	d146      	bne.n	801475a <create_StepCountMap_queue+0x586>
 80146cc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146d0:	f103 0312 	add.w	r3, r3, #18
 80146d4:	881b      	ldrh	r3, [r3, #0]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d03f      	beq.n	801475a <create_StepCountMap_queue+0x586>
 80146da:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146de:	f103 0314 	add.w	r3, r3, #20
 80146e2:	881b      	ldrh	r3, [r3, #0]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d138      	bne.n	801475a <create_StepCountMap_queue+0x586>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 80146e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146ec:	f103 0312 	add.w	r3, r3, #18
 80146f0:	881a      	ldrh	r2, [r3, #0]
 80146f2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80146f6:	f103 0310 	add.w	r3, r3, #16
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	4928      	ldr	r1, [pc, #160]	; (80147a0 <create_StepCountMap_queue+0x5cc>)
 80146fe:	0112      	lsls	r2, r2, #4
 8014700:	4413      	add	r3, r2
 8014702:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014706:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801470a:	f103 0312 	add.w	r3, r3, #18
 801470e:	881b      	ldrh	r3, [r3, #0]
 8014710:	1e5a      	subs	r2, r3, #1
 8014712:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014716:	f103 0310 	add.w	r3, r3, #16
 801471a:	881b      	ldrh	r3, [r3, #0]
 801471c:	3101      	adds	r1, #1
 801471e:	b288      	uxth	r0, r1
 8014720:	491f      	ldr	r1, [pc, #124]	; (80147a0 <create_StepCountMap_queue+0x5cc>)
 8014722:	0112      	lsls	r2, r2, #4
 8014724:	4413      	add	r3, r2
 8014726:	4602      	mov	r2, r0
 8014728:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 801472c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014730:	f103 0312 	add.w	r3, r3, #18
 8014734:	881b      	ldrh	r3, [r3, #0]
 8014736:	3b01      	subs	r3, #1
 8014738:	b29a      	uxth	r2, r3
 801473a:	f607 73a8 	addw	r3, r7, #4008	; 0xfa8
 801473e:	4611      	mov	r1, r2
 8014740:	4618      	mov	r0, r3
 8014742:	f000 fb17 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014746:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801474a:	f103 0310 	add.w	r3, r3, #16
 801474e:	881a      	ldrh	r2, [r3, #0]
 8014750:	463b      	mov	r3, r7
 8014752:	4611      	mov	r1, r2
 8014754:	4618      	mov	r0, r3
 8014756:	f000 fb0d 	bl	8014d74 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 801475a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801475e:	f103 0312 	add.w	r3, r3, #18
 8014762:	881a      	ldrh	r2, [r3, #0]
 8014764:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014768:	f103 0310 	add.w	r3, r3, #16
 801476c:	881b      	ldrh	r3, [r3, #0]
 801476e:	490c      	ldr	r1, [pc, #48]	; (80147a0 <create_StepCountMap_queue+0x5cc>)
 8014770:	0112      	lsls	r2, r2, #4
 8014772:	4413      	add	r3, r2
 8014774:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014778:	3301      	adds	r3, #1
 801477a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801477e:	f102 021c 	add.w	r2, r2, #28
 8014782:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014784:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014788:	f103 031c 	add.w	r3, r3, #28
 801478c:	881b      	ldrh	r3, [r3, #0]
 801478e:	2bfe      	cmp	r3, #254	; 0xfe
 8014790:	f67f adca 	bls.w	8014328 <create_StepCountMap_queue+0x154>

		}

}
 8014794:	bf00      	nop
 8014796:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 801479a:	46bd      	mov	sp, r7
 801479c:	bd80      	pop	{r7, pc}
 801479e:	bf00      	nop
 80147a0:	20000d30 	.word	0x20000d30

080147a4 <create_StepCountMapBack_queue>:



void create_StepCountMapBack_queue(void){
 80147a4:	b580      	push	{r7, lr}
 80147a6:	f5ad 5dfb 	sub.w	sp, sp, #8032	; 0x1f60
 80147aa:	b082      	sub	sp, #8
 80147ac:	af00      	add	r7, sp, #0
	//ここから歩数マップを作る．*************************************
	STACK_T stack_x;
	STACK_T stack_y;
	for(uint8_t xx = 0;xx <= 15;xx++){
 80147ae:	2300      	movs	r3, #0
 80147b0:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147b4:	f102 0207 	add.w	r2, r2, #7
 80147b8:	7013      	strb	r3, [r2, #0]
 80147ba:	e033      	b.n	8014824 <create_StepCountMapBack_queue+0x80>
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147bc:	2300      	movs	r3, #0
 80147be:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147c2:	f102 0206 	add.w	r2, r2, #6
 80147c6:	7013      	strb	r3, [r2, #0]
 80147c8:	e01a      	b.n	8014800 <create_StepCountMapBack_queue+0x5c>
			walk_count[xx][yy] = 255;
 80147ca:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147ce:	f103 0307 	add.w	r3, r3, #7
 80147d2:	781a      	ldrb	r2, [r3, #0]
 80147d4:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147d8:	f103 0306 	add.w	r3, r3, #6
 80147dc:	781b      	ldrb	r3, [r3, #0]
 80147de:	4931      	ldr	r1, [pc, #196]	; (80148a4 <create_StepCountMapBack_queue+0x100>)
 80147e0:	0112      	lsls	r2, r2, #4
 80147e2:	4413      	add	r3, r2
 80147e4:	22ff      	movs	r2, #255	; 0xff
 80147e6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(uint8_t yy = 0;yy <= 15;yy++){
 80147ea:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 80147ee:	f103 0306 	add.w	r3, r3, #6
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	3301      	adds	r3, #1
 80147f6:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80147fa:	f102 0206 	add.w	r2, r2, #6
 80147fe:	7013      	strb	r3, [r2, #0]
 8014800:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014804:	f103 0306 	add.w	r3, r3, #6
 8014808:	781b      	ldrb	r3, [r3, #0]
 801480a:	2b0f      	cmp	r3, #15
 801480c:	d9dd      	bls.n	80147ca <create_StepCountMapBack_queue+0x26>
	for(uint8_t xx = 0;xx <= 15;xx++){
 801480e:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014812:	f103 0307 	add.w	r3, r3, #7
 8014816:	781b      	ldrb	r3, [r3, #0]
 8014818:	3301      	adds	r3, #1
 801481a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801481e:	f102 0207 	add.w	r2, r2, #7
 8014822:	7013      	strb	r3, [r2, #0]
 8014824:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014828:	f103 0307 	add.w	r3, r3, #7
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	2b0f      	cmp	r3, #15
 8014830:	d9c4      	bls.n	80147bc <create_StepCountMapBack_queue+0x18>
		}
	}
	initStack_walk(&stack_x);
 8014832:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014836:	4618      	mov	r0, r3
 8014838:	f000 fa8c 	bl	8014d54 <initStack_walk>
	initStack_walk(&stack_y);
 801483c:	f107 0308 	add.w	r3, r7, #8
 8014840:	3b04      	subs	r3, #4
 8014842:	4618      	mov	r0, r3
 8014844:	f000 fa86 	bl	8014d54 <initStack_walk>


	walk_count[0][0] = 0;
 8014848:	4b16      	ldr	r3, [pc, #88]	; (80148a4 <create_StepCountMapBack_queue+0x100>)
 801484a:	2200      	movs	r2, #0
 801484c:	801a      	strh	r2, [r3, #0]
	pushStack_walk(&stack_x,0);pushStack_walk(&stack_y,0);
 801484e:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014852:	2100      	movs	r1, #0
 8014854:	4618      	mov	r0, r3
 8014856:	f000 fa8d 	bl	8014d74 <pushStack_walk>
 801485a:	f107 0308 	add.w	r3, r7, #8
 801485e:	3b04      	subs	r3, #4
 8014860:	2100      	movs	r1, #0
 8014862:	4618      	mov	r0, r3
 8014864:	f000 fa86 	bl	8014d74 <pushStack_walk>
	//printf("(%d,%d),(%d,%d),(%d,%d),(%d,%d)\n",stack_x.data[0],stack_y.data[0],stack_x.data[1],stack_y.data[1],stack_x.data[2],stack_y.data[2],stack_x.data[3],stack_y.data[3]);
	//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
	unsigned short coordinate;
	unsigned short count_number = 1;
 8014868:	2301      	movs	r3, #1
 801486a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801486e:	f102 0204 	add.w	r2, r2, #4
 8014872:	8013      	strh	r3, [r2, #0]
	unsigned short Xcoordinate,Ycoordinate;
	unsigned short wall_north=1,wall_south=1,wall_east=1,wall_west=1;
 8014874:	2301      	movs	r3, #1
 8014876:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 801487a:	f102 0202 	add.w	r2, r2, #2
 801487e:	8013      	strh	r3, [r2, #0]
 8014880:	2301      	movs	r3, #1
 8014882:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014886:	8013      	strh	r3, [r2, #0]
 8014888:	2301      	movs	r3, #1
 801488a:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801488e:	f102 021e 	add.w	r2, r2, #30
 8014892:	8013      	strh	r3, [r2, #0]
 8014894:	2301      	movs	r3, #1
 8014896:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801489a:	f102 021c 	add.w	r2, r2, #28
 801489e:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 80148a0:	e248      	b.n	8014d34 <create_StepCountMapBack_queue+0x590>
 80148a2:	bf00      	nop
 80148a4:	20000d30 	.word	0x20000d30

		Xcoordinate = popStack_walk(&stack_x);
 80148a8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 80148ac:	4618      	mov	r0, r3
 80148ae:	f000 fa8b 	bl	8014dc8 <popStack_walk>
 80148b2:	4603      	mov	r3, r0
 80148b4:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148b8:	f102 021a 	add.w	r2, r2, #26
 80148bc:	8013      	strh	r3, [r2, #0]
		Ycoordinate = popStack_walk(&stack_y);
 80148be:	f107 0308 	add.w	r3, r7, #8
 80148c2:	3b04      	subs	r3, #4
 80148c4:	4618      	mov	r0, r3
 80148c6:	f000 fa7f 	bl	8014dc8 <popStack_walk>
 80148ca:	4603      	mov	r3, r0
 80148cc:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80148d0:	f102 0218 	add.w	r2, r2, #24
 80148d4:	8013      	strh	r3, [r2, #0]
		//printf("x %d,y %d\n",Xcoordinate,Ycoordinate);
		//printf("x head %d tail %d\n y head %d tail %d\n",stack_x.head,stack_x.tail,stack_y.head,stack_y.tail);
		if (Xcoordinate == 65535 || Ycoordinate == 65535) {
 80148d6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148da:	f103 031a 	add.w	r3, r3, #26
 80148de:	881b      	ldrh	r3, [r3, #0]
 80148e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148e4:	4293      	cmp	r3, r2
 80148e6:	f000 822d 	beq.w	8014d44 <create_StepCountMapBack_queue+0x5a0>
 80148ea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80148ee:	f103 0318 	add.w	r3, r3, #24
 80148f2:	881b      	ldrh	r3, [r3, #0]
 80148f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80148f8:	4293      	cmp	r3, r2
 80148fa:	f000 8223 	beq.w	8014d44 <create_StepCountMapBack_queue+0x5a0>
			//printf("stack_end\n");
			break;
		}

		coordinate = (Xcoordinate * 16) + Ycoordinate;
 80148fe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014902:	f103 031a 	add.w	r3, r3, #26
 8014906:	881b      	ldrh	r3, [r3, #0]
 8014908:	011b      	lsls	r3, r3, #4
 801490a:	b29a      	uxth	r2, r3
 801490c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014910:	f103 0318 	add.w	r3, r3, #24
 8014914:	881b      	ldrh	r3, [r3, #0]
 8014916:	4413      	add	r3, r2
 8014918:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 801491c:	f102 0216 	add.w	r2, r2, #22
 8014920:	8013      	strh	r3, [r2, #0]
		if (Ycoordinate <= 14) {
 8014922:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014926:	f103 0318 	add.w	r3, r3, #24
 801492a:	881b      	ldrh	r3, [r3, #0]
 801492c:	2b0e      	cmp	r3, #14
 801492e:	d81a      	bhi.n	8014966 <create_StepCountMapBack_queue+0x1c2>
			wall_north = wall.column[Ycoordinate] & (1 << Xcoordinate);
 8014930:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014934:	f103 0318 	add.w	r3, r3, #24
 8014938:	881b      	ldrh	r3, [r3, #0]
 801493a:	4ac4      	ldr	r2, [pc, #784]	; (8014c4c <create_StepCountMapBack_queue+0x4a8>)
 801493c:	330c      	adds	r3, #12
 801493e:	005b      	lsls	r3, r3, #1
 8014940:	4413      	add	r3, r2
 8014942:	88db      	ldrh	r3, [r3, #6]
 8014944:	b21a      	sxth	r2, r3
 8014946:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801494a:	f103 031a 	add.w	r3, r3, #26
 801494e:	881b      	ldrh	r3, [r3, #0]
 8014950:	2101      	movs	r1, #1
 8014952:	fa01 f303 	lsl.w	r3, r1, r3
 8014956:	b21b      	sxth	r3, r3
 8014958:	4013      	ands	r3, r2
 801495a:	b21b      	sxth	r3, r3
 801495c:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014960:	f102 0202 	add.w	r2, r2, #2
 8014964:	8013      	strh	r3, [r2, #0]
		}
		if (Ycoordinate >= 1) {
 8014966:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 801496a:	f103 0318 	add.w	r3, r3, #24
 801496e:	881b      	ldrh	r3, [r3, #0]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d019      	beq.n	80149a8 <create_StepCountMapBack_queue+0x204>
			wall_south = wall.column[Ycoordinate - 1] & (1 << Xcoordinate);
 8014974:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014978:	f103 0318 	add.w	r3, r3, #24
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	3b01      	subs	r3, #1
 8014980:	4ab2      	ldr	r2, [pc, #712]	; (8014c4c <create_StepCountMapBack_queue+0x4a8>)
 8014982:	330c      	adds	r3, #12
 8014984:	005b      	lsls	r3, r3, #1
 8014986:	4413      	add	r3, r2
 8014988:	88db      	ldrh	r3, [r3, #6]
 801498a:	b21a      	sxth	r2, r3
 801498c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014990:	f103 031a 	add.w	r3, r3, #26
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	2101      	movs	r1, #1
 8014998:	fa01 f303 	lsl.w	r3, r1, r3
 801499c:	b21b      	sxth	r3, r3
 801499e:	4013      	ands	r3, r2
 80149a0:	b21b      	sxth	r3, r3
 80149a2:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 80149a6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate <= 14) {
 80149a8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ac:	f103 031a 	add.w	r3, r3, #26
 80149b0:	881b      	ldrh	r3, [r3, #0]
 80149b2:	2b0e      	cmp	r3, #14
 80149b4:	d818      	bhi.n	80149e8 <create_StepCountMapBack_queue+0x244>
			wall_east = wall.row[Xcoordinate] & (1 << Ycoordinate);
 80149b6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ba:	f103 031a 	add.w	r3, r3, #26
 80149be:	881b      	ldrh	r3, [r3, #0]
 80149c0:	4aa2      	ldr	r2, [pc, #648]	; (8014c4c <create_StepCountMapBack_queue+0x4a8>)
 80149c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80149c6:	b21a      	sxth	r2, r3
 80149c8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149cc:	f103 0318 	add.w	r3, r3, #24
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	2101      	movs	r1, #1
 80149d4:	fa01 f303 	lsl.w	r3, r1, r3
 80149d8:	b21b      	sxth	r3, r3
 80149da:	4013      	ands	r3, r2
 80149dc:	b21b      	sxth	r3, r3
 80149de:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 80149e2:	f102 021e 	add.w	r2, r2, #30
 80149e6:	8013      	strh	r3, [r2, #0]
		}
		if (Xcoordinate >= 1) {
 80149e8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149ec:	f103 031a 	add.w	r3, r3, #26
 80149f0:	881b      	ldrh	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d019      	beq.n	8014a2a <create_StepCountMapBack_queue+0x286>
			wall_west = wall.row[Xcoordinate - 1] & (1 << Ycoordinate);
 80149f6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 80149fa:	f103 031a 	add.w	r3, r3, #26
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	3b01      	subs	r3, #1
 8014a02:	4a92      	ldr	r2, [pc, #584]	; (8014c4c <create_StepCountMapBack_queue+0x4a8>)
 8014a04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014a08:	b21a      	sxth	r2, r3
 8014a0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a0e:	f103 0318 	add.w	r3, r3, #24
 8014a12:	881b      	ldrh	r3, [r3, #0]
 8014a14:	2101      	movs	r1, #1
 8014a16:	fa01 f303 	lsl.w	r3, r1, r3
 8014a1a:	b21b      	sxth	r3, r3
 8014a1c:	4013      	ands	r3, r2
 8014a1e:	b21b      	sxth	r3, r3
 8014a20:	f507 52fa 	add.w	r2, r7, #8000	; 0x1f40
 8014a24:	f102 021c 	add.w	r2, r2, #28
 8014a28:	8013      	strh	r3, [r2, #0]
		}

		if (walk_count[Xcoordinate][Ycoordinate + 1] == 255 && Ycoordinate != 15 && wall_north == 0) {
 8014a2a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a2e:	f103 031a 	add.w	r3, r3, #26
 8014a32:	881a      	ldrh	r2, [r3, #0]
 8014a34:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a38:	f103 0318 	add.w	r3, r3, #24
 8014a3c:	881b      	ldrh	r3, [r3, #0]
 8014a3e:	3301      	adds	r3, #1
 8014a40:	4983      	ldr	r1, [pc, #524]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014a42:	0112      	lsls	r2, r2, #4
 8014a44:	4413      	add	r3, r2
 8014a46:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014a4a:	2bff      	cmp	r3, #255	; 0xff
 8014a4c:	d148      	bne.n	8014ae0 <create_StepCountMapBack_queue+0x33c>
 8014a4e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a52:	f103 0318 	add.w	r3, r3, #24
 8014a56:	881b      	ldrh	r3, [r3, #0]
 8014a58:	2b0f      	cmp	r3, #15
 8014a5a:	d041      	beq.n	8014ae0 <create_StepCountMapBack_queue+0x33c>
 8014a5c:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014a60:	f103 0302 	add.w	r3, r3, #2
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d13a      	bne.n	8014ae0 <create_StepCountMapBack_queue+0x33c>
			walk_count[Xcoordinate][Ycoordinate + 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014a6a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a6e:	f103 031a 	add.w	r3, r3, #26
 8014a72:	881a      	ldrh	r2, [r3, #0]
 8014a74:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a78:	f103 0318 	add.w	r3, r3, #24
 8014a7c:	881b      	ldrh	r3, [r3, #0]
 8014a7e:	4974      	ldr	r1, [pc, #464]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014a80:	0112      	lsls	r2, r2, #4
 8014a82:	4413      	add	r3, r2
 8014a84:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014a88:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a8c:	f103 031a 	add.w	r3, r3, #26
 8014a90:	881a      	ldrh	r2, [r3, #0]
 8014a92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014a96:	f103 0318 	add.w	r3, r3, #24
 8014a9a:	881b      	ldrh	r3, [r3, #0]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	3101      	adds	r1, #1
 8014aa0:	b288      	uxth	r0, r1
 8014aa2:	496b      	ldr	r1, [pc, #428]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014aa4:	0112      	lsls	r2, r2, #4
 8014aa6:	4413      	add	r3, r2
 8014aa8:	4602      	mov	r2, r0
 8014aaa:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014aae:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ab2:	f103 031a 	add.w	r3, r3, #26
 8014ab6:	881a      	ldrh	r2, [r3, #0]
 8014ab8:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014abc:	4611      	mov	r1, r2
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f000 f958 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate + 1);
 8014ac4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ac8:	f103 0318 	add.w	r3, r3, #24
 8014acc:	881b      	ldrh	r3, [r3, #0]
 8014ace:	3301      	adds	r3, #1
 8014ad0:	b29a      	uxth	r2, r3
 8014ad2:	f107 0308 	add.w	r3, r7, #8
 8014ad6:	3b04      	subs	r3, #4
 8014ad8:	4611      	mov	r1, r2
 8014ada:	4618      	mov	r0, r3
 8014adc:	f000 f94a 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate][Ycoordinate - 1] == 255 && Ycoordinate != 0 && wall_south == 0) {
 8014ae0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ae4:	f103 031a 	add.w	r3, r3, #26
 8014ae8:	881a      	ldrh	r2, [r3, #0]
 8014aea:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014aee:	f103 0318 	add.w	r3, r3, #24
 8014af2:	881b      	ldrh	r3, [r3, #0]
 8014af4:	3b01      	subs	r3, #1
 8014af6:	4956      	ldr	r1, [pc, #344]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014af8:	0112      	lsls	r2, r2, #4
 8014afa:	4413      	add	r3, r2
 8014afc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014b00:	2bff      	cmp	r3, #255	; 0xff
 8014b02:	d146      	bne.n	8014b92 <create_StepCountMapBack_queue+0x3ee>
 8014b04:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b08:	f103 0318 	add.w	r3, r3, #24
 8014b0c:	881b      	ldrh	r3, [r3, #0]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d03f      	beq.n	8014b92 <create_StepCountMapBack_queue+0x3ee>
 8014b12:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014b16:	881b      	ldrh	r3, [r3, #0]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d13a      	bne.n	8014b92 <create_StepCountMapBack_queue+0x3ee>
			walk_count[Xcoordinate][Ycoordinate - 1] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014b1c:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b20:	f103 031a 	add.w	r3, r3, #26
 8014b24:	881a      	ldrh	r2, [r3, #0]
 8014b26:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b2a:	f103 0318 	add.w	r3, r3, #24
 8014b2e:	881b      	ldrh	r3, [r3, #0]
 8014b30:	4947      	ldr	r1, [pc, #284]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014b32:	0112      	lsls	r2, r2, #4
 8014b34:	4413      	add	r3, r2
 8014b36:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014b3a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b3e:	f103 031a 	add.w	r3, r3, #26
 8014b42:	881a      	ldrh	r2, [r3, #0]
 8014b44:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b48:	f103 0318 	add.w	r3, r3, #24
 8014b4c:	881b      	ldrh	r3, [r3, #0]
 8014b4e:	3b01      	subs	r3, #1
 8014b50:	3101      	adds	r1, #1
 8014b52:	b288      	uxth	r0, r1
 8014b54:	493e      	ldr	r1, [pc, #248]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014b56:	0112      	lsls	r2, r2, #4
 8014b58:	4413      	add	r3, r2
 8014b5a:	4602      	mov	r2, r0
 8014b5c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate);
 8014b60:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b64:	f103 031a 	add.w	r3, r3, #26
 8014b68:	881a      	ldrh	r2, [r3, #0]
 8014b6a:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014b6e:	4611      	mov	r1, r2
 8014b70:	4618      	mov	r0, r3
 8014b72:	f000 f8ff 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate - 1);
 8014b76:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b7a:	f103 0318 	add.w	r3, r3, #24
 8014b7e:	881b      	ldrh	r3, [r3, #0]
 8014b80:	3b01      	subs	r3, #1
 8014b82:	b29a      	uxth	r2, r3
 8014b84:	f107 0308 	add.w	r3, r7, #8
 8014b88:	3b04      	subs	r3, #4
 8014b8a:	4611      	mov	r1, r2
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	f000 f8f1 	bl	8014d74 <pushStack_walk>
		}
		if (walk_count[Xcoordinate + 1][Ycoordinate] == 255 && Xcoordinate != 15 && wall_east == 0) {
 8014b92:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014b96:	f103 031a 	add.w	r3, r3, #26
 8014b9a:	881b      	ldrh	r3, [r3, #0]
 8014b9c:	1c5a      	adds	r2, r3, #1
 8014b9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ba2:	f103 0318 	add.w	r3, r3, #24
 8014ba6:	881b      	ldrh	r3, [r3, #0]
 8014ba8:	4929      	ldr	r1, [pc, #164]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014baa:	0112      	lsls	r2, r2, #4
 8014bac:	4413      	add	r3, r2
 8014bae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014bb2:	2bff      	cmp	r3, #255	; 0xff
 8014bb4:	d14e      	bne.n	8014c54 <create_StepCountMapBack_queue+0x4b0>
 8014bb6:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bba:	f103 031a 	add.w	r3, r3, #26
 8014bbe:	881b      	ldrh	r3, [r3, #0]
 8014bc0:	2b0f      	cmp	r3, #15
 8014bc2:	d047      	beq.n	8014c54 <create_StepCountMapBack_queue+0x4b0>
 8014bc4:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bc8:	f103 031e 	add.w	r3, r3, #30
 8014bcc:	881b      	ldrh	r3, [r3, #0]
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d140      	bne.n	8014c54 <create_StepCountMapBack_queue+0x4b0>
			walk_count[Xcoordinate + 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014bd2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bd6:	f103 031a 	add.w	r3, r3, #26
 8014bda:	881a      	ldrh	r2, [r3, #0]
 8014bdc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014be0:	f103 0318 	add.w	r3, r3, #24
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	491a      	ldr	r1, [pc, #104]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014be8:	0112      	lsls	r2, r2, #4
 8014bea:	4413      	add	r3, r2
 8014bec:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014bf0:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014bf4:	f103 031a 	add.w	r3, r3, #26
 8014bf8:	881b      	ldrh	r3, [r3, #0]
 8014bfa:	1c5a      	adds	r2, r3, #1
 8014bfc:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c00:	f103 0318 	add.w	r3, r3, #24
 8014c04:	881b      	ldrh	r3, [r3, #0]
 8014c06:	3101      	adds	r1, #1
 8014c08:	b288      	uxth	r0, r1
 8014c0a:	4911      	ldr	r1, [pc, #68]	; (8014c50 <create_StepCountMapBack_queue+0x4ac>)
 8014c0c:	0112      	lsls	r2, r2, #4
 8014c0e:	4413      	add	r3, r2
 8014c10:	4602      	mov	r2, r0
 8014c12:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate + 1);
 8014c16:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c1a:	f103 031a 	add.w	r3, r3, #26
 8014c1e:	881b      	ldrh	r3, [r3, #0]
 8014c20:	3301      	adds	r3, #1
 8014c22:	b29a      	uxth	r2, r3
 8014c24:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014c28:	4611      	mov	r1, r2
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f000 f8a2 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014c30:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c34:	f103 0318 	add.w	r3, r3, #24
 8014c38:	881a      	ldrh	r2, [r3, #0]
 8014c3a:	f107 0308 	add.w	r3, r7, #8
 8014c3e:	3b04      	subs	r3, #4
 8014c40:	4611      	mov	r1, r2
 8014c42:	4618      	mov	r0, r3
 8014c44:	f000 f896 	bl	8014d74 <pushStack_walk>
 8014c48:	e004      	b.n	8014c54 <create_StepCountMapBack_queue+0x4b0>
 8014c4a:	bf00      	nop
 8014c4c:	20000c3c 	.word	0x20000c3c
 8014c50:	20000d30 	.word	0x20000d30
		}
		if (walk_count[Xcoordinate - 1][Ycoordinate] == 255 && Xcoordinate != 0 && wall_west == 0) {
 8014c54:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c58:	f103 031a 	add.w	r3, r3, #26
 8014c5c:	881b      	ldrh	r3, [r3, #0]
 8014c5e:	1e5a      	subs	r2, r3, #1
 8014c60:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c64:	f103 0318 	add.w	r3, r3, #24
 8014c68:	881b      	ldrh	r3, [r3, #0]
 8014c6a:	4939      	ldr	r1, [pc, #228]	; (8014d50 <create_StepCountMapBack_queue+0x5ac>)
 8014c6c:	0112      	lsls	r2, r2, #4
 8014c6e:	4413      	add	r3, r2
 8014c70:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014c74:	2bff      	cmp	r3, #255	; 0xff
 8014c76:	d148      	bne.n	8014d0a <create_StepCountMapBack_queue+0x566>
 8014c78:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c7c:	f103 031a 	add.w	r3, r3, #26
 8014c80:	881b      	ldrh	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d041      	beq.n	8014d0a <create_StepCountMapBack_queue+0x566>
 8014c86:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c8a:	f103 031c 	add.w	r3, r3, #28
 8014c8e:	881b      	ldrh	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d13a      	bne.n	8014d0a <create_StepCountMapBack_queue+0x566>
			walk_count[Xcoordinate - 1][Ycoordinate] = walk_count[Xcoordinate][Ycoordinate] + 1;
 8014c94:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014c98:	f103 031a 	add.w	r3, r3, #26
 8014c9c:	881a      	ldrh	r2, [r3, #0]
 8014c9e:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014ca2:	f103 0318 	add.w	r3, r3, #24
 8014ca6:	881b      	ldrh	r3, [r3, #0]
 8014ca8:	4929      	ldr	r1, [pc, #164]	; (8014d50 <create_StepCountMapBack_queue+0x5ac>)
 8014caa:	0112      	lsls	r2, r2, #4
 8014cac:	4413      	add	r3, r2
 8014cae:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
 8014cb2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cb6:	f103 031a 	add.w	r3, r3, #26
 8014cba:	881b      	ldrh	r3, [r3, #0]
 8014cbc:	1e5a      	subs	r2, r3, #1
 8014cbe:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cc2:	f103 0318 	add.w	r3, r3, #24
 8014cc6:	881b      	ldrh	r3, [r3, #0]
 8014cc8:	3101      	adds	r1, #1
 8014cca:	b288      	uxth	r0, r1
 8014ccc:	4920      	ldr	r1, [pc, #128]	; (8014d50 <create_StepCountMapBack_queue+0x5ac>)
 8014cce:	0112      	lsls	r2, r2, #4
 8014cd0:	4413      	add	r3, r2
 8014cd2:	4602      	mov	r2, r0
 8014cd4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			pushStack_walk(&stack_x,Xcoordinate - 1);
 8014cd8:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cdc:	f103 031a 	add.w	r3, r3, #26
 8014ce0:	881b      	ldrh	r3, [r3, #0]
 8014ce2:	3b01      	subs	r3, #1
 8014ce4:	b29a      	uxth	r2, r3
 8014ce6:	f607 73ac 	addw	r3, r7, #4012	; 0xfac
 8014cea:	4611      	mov	r1, r2
 8014cec:	4618      	mov	r0, r3
 8014cee:	f000 f841 	bl	8014d74 <pushStack_walk>
			pushStack_walk(&stack_y,Ycoordinate);
 8014cf2:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014cf6:	f103 0318 	add.w	r3, r3, #24
 8014cfa:	881a      	ldrh	r2, [r3, #0]
 8014cfc:	f107 0308 	add.w	r3, r7, #8
 8014d00:	3b04      	subs	r3, #4
 8014d02:	4611      	mov	r1, r2
 8014d04:	4618      	mov	r0, r3
 8014d06:	f000 f835 	bl	8014d74 <pushStack_walk>
		}
		count_number=walk_count[Xcoordinate][Ycoordinate] + 1;
 8014d0a:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d0e:	f103 031a 	add.w	r3, r3, #26
 8014d12:	881a      	ldrh	r2, [r3, #0]
 8014d14:	f507 53fa 	add.w	r3, r7, #8000	; 0x1f40
 8014d18:	f103 0318 	add.w	r3, r3, #24
 8014d1c:	881b      	ldrh	r3, [r3, #0]
 8014d1e:	490c      	ldr	r1, [pc, #48]	; (8014d50 <create_StepCountMapBack_queue+0x5ac>)
 8014d20:	0112      	lsls	r2, r2, #4
 8014d22:	4413      	add	r3, r2
 8014d24:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014d28:	3301      	adds	r3, #1
 8014d2a:	f507 52fb 	add.w	r2, r7, #8032	; 0x1f60
 8014d2e:	f102 0204 	add.w	r2, r2, #4
 8014d32:	8013      	strh	r3, [r2, #0]
	while (count_number <= 254) {
 8014d34:	f507 53fb 	add.w	r3, r7, #8032	; 0x1f60
 8014d38:	f103 0304 	add.w	r3, r3, #4
 8014d3c:	881b      	ldrh	r3, [r3, #0]
 8014d3e:	2bfe      	cmp	r3, #254	; 0xfe
 8014d40:	f67f adb2 	bls.w	80148a8 <create_StepCountMapBack_queue+0x104>

		}

}
 8014d44:	bf00      	nop
 8014d46:	f507 57fb 	add.w	r7, r7, #8032	; 0x1f60
 8014d4a:	3708      	adds	r7, #8
 8014d4c:	46bd      	mov	sp, r7
 8014d4e:	bd80      	pop	{r7, pc}
 8014d50:	20000d30 	.word	0x20000d30

08014d54 <initStack_walk>:




void initStack_walk(STACK_T *stack){
 8014d54:	b480      	push	{r7}
 8014d56:	b083      	sub	sp, #12
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
//	for(int i=0;i<=MAX_QUEUE_NUM-1;i++){
//		stack->data[i] = 0;
//	}
    /* スタックを空に設定 */
	stack->head = 0;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	601a      	str	r2, [r3, #0]
    stack->tail = 0;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	2200      	movs	r2, #0
 8014d66:	605a      	str	r2, [r3, #4]
}
 8014d68:	bf00      	nop
 8014d6a:	370c      	adds	r7, #12
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d72:	4770      	bx	lr

08014d74 <pushStack_walk>:



void pushStack_walk(STACK_T *stack, unsigned short input){
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b082      	sub	sp, #8
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	6078      	str	r0, [r7, #4]
 8014d7c:	460b      	mov	r3, r1
 8014d7e:	807b      	strh	r3, [r7, #2]

    /* データをデータの最後尾の１つ後ろに格納 */
    stack->data[stack->tail] = input;
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	685a      	ldr	r2, [r3, #4]
 8014d84:	8879      	ldrh	r1, [r7, #2]
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	3202      	adds	r2, #2
 8014d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* データの最後尾を１つ後ろに移動 */
    stack->tail = stack->tail + 1;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	685b      	ldr	r3, [r3, #4]
 8014d92:	1c5a      	adds	r2, r3, #1
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	605a      	str	r2, [r3, #4]

    /* 巡回シフト */
    if(stack->tail == MAX_QUEUE_NUM) stack->tail = 0;
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	685b      	ldr	r3, [r3, #4]
 8014d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014da0:	d102      	bne.n	8014da8 <pushStack_walk+0x34>
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	605a      	str	r2, [r3, #4]

    /* スタックが満杯なら何もせず関数終了 */
    if(stack->tail == stack->head ){
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	685a      	ldr	r2, [r3, #4]
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d103      	bne.n	8014dbc <pushStack_walk+0x48>
    	printf("stack_full\n");
 8014db4:	4803      	ldr	r0, [pc, #12]	; (8014dc4 <pushStack_walk+0x50>)
 8014db6:	f00b ff03 	bl	8020bc0 <puts>
        return;
 8014dba:	bf00      	nop
    }
}
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	080233dc 	.word	0x080233dc

08014dc8 <popStack_walk>:


unsigned short popStack_walk(STACK_T *stack){
 8014dc8:	b480      	push	{r7}
 8014dca:	b085      	sub	sp, #20
 8014dcc:	af00      	add	r7, sp, #0
 8014dce:	6078      	str	r0, [r7, #4]
    unsigned short ret = 0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	81fb      	strh	r3, [r7, #14]

    /* スタックが空なら何もせずに関数終了 */
    if(stack->tail == stack->head){
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	685a      	ldr	r2, [r3, #4]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d102      	bne.n	8014de6 <popStack_walk+0x1e>
    	//printf("stack_empty\n");
        return 65535;
 8014de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014de4:	e014      	b.n	8014e10 <popStack_walk+0x48>
    }

    /* データの最前列からデータを取得 */
    ret = stack->data[stack->head];
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	3202      	adds	r2, #2
 8014dee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014df2:	81fb      	strh	r3, [r7, #14]

    /* データの最前列を１つ前にずらす */
    stack->head = stack->head + 1;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	1c5a      	adds	r2, r3, #1
 8014dfa:	687b      	ldr	r3, [r7, #4]
 8014dfc:	601a      	str	r2, [r3, #0]

    /* 巡回シフト */
    if(stack->head == MAX_QUEUE_NUM) stack->head = 0;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014e06:	d102      	bne.n	8014e0e <popStack_walk+0x46>
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	601a      	str	r2, [r3, #0]

    /* 取得したデータを返却 */
    return ret;
 8014e0e:	89fb      	ldrh	r3, [r7, #14]
}
 8014e10:	4618      	mov	r0, r3
 8014e12:	3714      	adds	r7, #20
 8014e14:	46bd      	mov	sp, r7
 8014e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e1a:	4770      	bx	lr

08014e1c <maze_display>:

void maze_makerback(int direction, int front_SEN, int left_SEN, int right_SEN,
		int x, int y) {}


void maze_display(void) {
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	b082      	sub	sp, #8
 8014e20:	af00      	add	r7, sp, #0

	int tt = 14;
 8014e22:	230e      	movs	r3, #14
 8014e24:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8014e26:	2300      	movs	r3, #0
 8014e28:	603b      	str	r3, [r7, #0]

	printf(
 8014e2a:	4881      	ldr	r0, [pc, #516]	; (8015030 <maze_display+0x214>)
 8014e2c:	f00b fec8 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8014e30:	230e      	movs	r3, #14
 8014e32:	607b      	str	r3, [r7, #4]
 8014e34:	e06e      	b.n	8014f14 <maze_display+0xf8>

		printf("|%5d", walk_count[0][tt + 1]);
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	3301      	adds	r3, #1
 8014e3a:	4a7e      	ldr	r2, [pc, #504]	; (8015034 <maze_display+0x218>)
 8014e3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e40:	4619      	mov	r1, r3
 8014e42:	487d      	ldr	r0, [pc, #500]	; (8015038 <maze_display+0x21c>)
 8014e44:	f00b fe20 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014e48:	2300      	movs	r3, #0
 8014e4a:	603b      	str	r3, [r7, #0]
 8014e4c:	e030      	b.n	8014eb0 <maze_display+0x94>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014e4e:	4a7b      	ldr	r2, [pc, #492]	; (801503c <maze_display+0x220>)
 8014e50:	683b      	ldr	r3, [r7, #0]
 8014e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014e56:	4619      	mov	r1, r3
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	2201      	movs	r2, #1
 8014e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e62:	ea01 0203 	and.w	r2, r1, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	3301      	adds	r3, #1
 8014e6a:	2101      	movs	r1, #1
 8014e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d10d      	bne.n	8014e90 <maze_display+0x74>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	1c5a      	adds	r2, r3, #1
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	3301      	adds	r3, #1
 8014e7c:	496d      	ldr	r1, [pc, #436]	; (8015034 <maze_display+0x218>)
 8014e7e:	0112      	lsls	r2, r2, #4
 8014e80:	4413      	add	r3, r2
 8014e82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014e86:	4619      	mov	r1, r3
 8014e88:	486b      	ldr	r0, [pc, #428]	; (8015038 <maze_display+0x21c>)
 8014e8a:	f00b fdfd 	bl	8020a88 <iprintf>
 8014e8e:	e00c      	b.n	8014eaa <maze_display+0x8e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014e90:	683b      	ldr	r3, [r7, #0]
 8014e92:	1c5a      	adds	r2, r3, #1
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	3301      	adds	r3, #1
 8014e98:	4966      	ldr	r1, [pc, #408]	; (8015034 <maze_display+0x218>)
 8014e9a:	0112      	lsls	r2, r2, #4
 8014e9c:	4413      	add	r3, r2
 8014e9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014ea2:	4619      	mov	r1, r3
 8014ea4:	4866      	ldr	r0, [pc, #408]	; (8015040 <maze_display+0x224>)
 8014ea6:	f00b fdef 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014eaa:	683b      	ldr	r3, [r7, #0]
 8014eac:	3301      	adds	r3, #1
 8014eae:	603b      	str	r3, [r7, #0]
 8014eb0:	683b      	ldr	r3, [r7, #0]
 8014eb2:	2b0e      	cmp	r3, #14
 8014eb4:	ddcb      	ble.n	8014e4e <maze_display+0x32>
			}
		}
		printf("|\n");
 8014eb6:	4863      	ldr	r0, [pc, #396]	; (8015044 <maze_display+0x228>)
 8014eb8:	f00b fe82 	bl	8020bc0 <puts>
		if (tt <= -1) {
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	db2d      	blt.n	8014f1e <maze_display+0x102>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	603b      	str	r3, [r7, #0]
 8014ec6:	e01c      	b.n	8014f02 <maze_display+0xe6>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 8014ec8:	4a5c      	ldr	r2, [pc, #368]	; (801503c <maze_display+0x220>)
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	330c      	adds	r3, #12
 8014ece:	005b      	lsls	r3, r3, #1
 8014ed0:	4413      	add	r3, r2
 8014ed2:	88db      	ldrh	r3, [r3, #6]
 8014ed4:	4619      	mov	r1, r3
 8014ed6:	2201      	movs	r2, #1
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	fa02 f303 	lsl.w	r3, r2, r3
 8014ede:	ea01 0203 	and.w	r2, r1, r3
 8014ee2:	2101      	movs	r1, #1
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8014eea:	429a      	cmp	r2, r3
 8014eec:	d103      	bne.n	8014ef6 <maze_display+0xda>
				printf("+-----");
 8014eee:	4856      	ldr	r0, [pc, #344]	; (8015048 <maze_display+0x22c>)
 8014ef0:	f00b fdca 	bl	8020a88 <iprintf>
 8014ef4:	e002      	b.n	8014efc <maze_display+0xe0>
			}else{
				printf("+     ");
 8014ef6:	4855      	ldr	r0, [pc, #340]	; (801504c <maze_display+0x230>)
 8014ef8:	f00b fdc6 	bl	8020a88 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014efc:	683b      	ldr	r3, [r7, #0]
 8014efe:	3301      	adds	r3, #1
 8014f00:	603b      	str	r3, [r7, #0]
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	2b0f      	cmp	r3, #15
 8014f06:	dddf      	ble.n	8014ec8 <maze_display+0xac>
			}
		}

		printf("+\n");
 8014f08:	4851      	ldr	r0, [pc, #324]	; (8015050 <maze_display+0x234>)
 8014f0a:	f00b fe59 	bl	8020bc0 <puts>
	for (tt = 14;tt >= -1;tt--){
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	3b01      	subs	r3, #1
 8014f12:	607b      	str	r3, [r7, #4]
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1a:	da8c      	bge.n	8014e36 <maze_display+0x1a>
 8014f1c:	e000      	b.n	8014f20 <maze_display+0x104>
			break;
 8014f1e:	bf00      	nop

	}

	printf(
 8014f20:	484c      	ldr	r0, [pc, #304]	; (8015054 <maze_display+0x238>)
 8014f22:	f00b fe4d 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 8014f26:	4842      	ldr	r0, [pc, #264]	; (8015030 <maze_display+0x214>)
 8014f28:	f00b fe4a 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");

	for (tt = 14;tt >= -1;tt--){
 8014f2c:	230e      	movs	r3, #14
 8014f2e:	607b      	str	r3, [r7, #4]
 8014f30:	e070      	b.n	8015014 <maze_display+0x1f8>
		printf("|%5d", walk_count[0][tt + 1]);
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	3301      	adds	r3, #1
 8014f36:	4a3f      	ldr	r2, [pc, #252]	; (8015034 <maze_display+0x218>)
 8014f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f3c:	4619      	mov	r1, r3
 8014f3e:	483e      	ldr	r0, [pc, #248]	; (8015038 <maze_display+0x21c>)
 8014f40:	f00b fda2 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014f44:	2300      	movs	r3, #0
 8014f46:	603b      	str	r3, [r7, #0]
 8014f48:	e032      	b.n	8014fb0 <maze_display+0x194>
			if ((wall.row_look[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 8014f4a:	4a3c      	ldr	r2, [pc, #240]	; (801503c <maze_display+0x220>)
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	331c      	adds	r3, #28
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	889b      	ldrh	r3, [r3, #4]
 8014f56:	4619      	mov	r1, r3
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	2201      	movs	r2, #1
 8014f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8014f62:	ea01 0203 	and.w	r2, r1, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	3301      	adds	r3, #1
 8014f6a:	2101      	movs	r1, #1
 8014f6c:	fa01 f303 	lsl.w	r3, r1, r3
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d10d      	bne.n	8014f90 <maze_display+0x174>
				printf("|%5d", walk_count[ss + 1][tt + 1]);
 8014f74:	683b      	ldr	r3, [r7, #0]
 8014f76:	1c5a      	adds	r2, r3, #1
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	3301      	adds	r3, #1
 8014f7c:	492d      	ldr	r1, [pc, #180]	; (8015034 <maze_display+0x218>)
 8014f7e:	0112      	lsls	r2, r2, #4
 8014f80:	4413      	add	r3, r2
 8014f82:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014f86:	4619      	mov	r1, r3
 8014f88:	482b      	ldr	r0, [pc, #172]	; (8015038 <maze_display+0x21c>)
 8014f8a:	f00b fd7d 	bl	8020a88 <iprintf>
 8014f8e:	e00c      	b.n	8014faa <maze_display+0x18e>
			}else{
				printf(" %5d", walk_count[ss + 1][tt + 1]);
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	1c5a      	adds	r2, r3, #1
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	3301      	adds	r3, #1
 8014f98:	4926      	ldr	r1, [pc, #152]	; (8015034 <maze_display+0x218>)
 8014f9a:	0112      	lsls	r2, r2, #4
 8014f9c:	4413      	add	r3, r2
 8014f9e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	4826      	ldr	r0, [pc, #152]	; (8015040 <maze_display+0x224>)
 8014fa6:	f00b fd6f 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	3301      	adds	r3, #1
 8014fae:	603b      	str	r3, [r7, #0]
 8014fb0:	683b      	ldr	r3, [r7, #0]
 8014fb2:	2b0e      	cmp	r3, #14
 8014fb4:	ddc9      	ble.n	8014f4a <maze_display+0x12e>
			}
		}
		printf("|\n");
 8014fb6:	4823      	ldr	r0, [pc, #140]	; (8015044 <maze_display+0x228>)
 8014fb8:	f00b fe02 	bl	8020bc0 <puts>
		if (tt <= -1) {
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	db2d      	blt.n	801501e <maze_display+0x202>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 8014fc2:	2300      	movs	r3, #0
 8014fc4:	603b      	str	r3, [r7, #0]
 8014fc6:	e01c      	b.n	8015002 <maze_display+0x1e6>
			if ((wall.column_look[tt] & (1 << ss)) == (1 << ss)){
 8014fc8:	4a1c      	ldr	r2, [pc, #112]	; (801503c <maze_display+0x220>)
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	332c      	adds	r3, #44	; 0x2c
 8014fce:	005b      	lsls	r3, r3, #1
 8014fd0:	4413      	add	r3, r2
 8014fd2:	885b      	ldrh	r3, [r3, #2]
 8014fd4:	4619      	mov	r1, r3
 8014fd6:	2201      	movs	r2, #1
 8014fd8:	683b      	ldr	r3, [r7, #0]
 8014fda:	fa02 f303 	lsl.w	r3, r2, r3
 8014fde:	ea01 0203 	and.w	r2, r1, r3
 8014fe2:	2101      	movs	r1, #1
 8014fe4:	683b      	ldr	r3, [r7, #0]
 8014fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8014fea:	429a      	cmp	r2, r3
 8014fec:	d103      	bne.n	8014ff6 <maze_display+0x1da>
				printf("+-----");
 8014fee:	4816      	ldr	r0, [pc, #88]	; (8015048 <maze_display+0x22c>)
 8014ff0:	f00b fd4a 	bl	8020a88 <iprintf>
 8014ff4:	e002      	b.n	8014ffc <maze_display+0x1e0>
			}else{
				printf("+     ");
 8014ff6:	4815      	ldr	r0, [pc, #84]	; (801504c <maze_display+0x230>)
 8014ff8:	f00b fd46 	bl	8020a88 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8014ffc:	683b      	ldr	r3, [r7, #0]
 8014ffe:	3301      	adds	r3, #1
 8015000:	603b      	str	r3, [r7, #0]
 8015002:	683b      	ldr	r3, [r7, #0]
 8015004:	2b0f      	cmp	r3, #15
 8015006:	dddf      	ble.n	8014fc8 <maze_display+0x1ac>
			}
		}
		printf("+\n");
 8015008:	4811      	ldr	r0, [pc, #68]	; (8015050 <maze_display+0x234>)
 801500a:	f00b fdd9 	bl	8020bc0 <puts>
	for (tt = 14;tt >= -1;tt--){
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	3b01      	subs	r3, #1
 8015012:	607b      	str	r3, [r7, #4]
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f1b3 3fff 	cmp.w	r3, #4294967295
 801501a:	da8a      	bge.n	8014f32 <maze_display+0x116>
 801501c:	e000      	b.n	8015020 <maze_display+0x204>
			break;
 801501e:	bf00      	nop
	}

	printf(
 8015020:	480c      	ldr	r0, [pc, #48]	; (8015054 <maze_display+0x238>)
 8015022:	f00b fdcd 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");

}
 8015026:	bf00      	nop
 8015028:	3708      	adds	r7, #8
 801502a:	46bd      	mov	sp, r7
 801502c:	bd80      	pop	{r7, pc}
 801502e:	bf00      	nop
 8015030:	080233e8 	.word	0x080233e8
 8015034:	20000d30 	.word	0x20000d30
 8015038:	0802344c 	.word	0x0802344c
 801503c:	20000c3c 	.word	0x20000c3c
 8015040:	08023454 	.word	0x08023454
 8015044:	0802345c 	.word	0x0802345c
 8015048:	08023460 	.word	0x08023460
 801504c:	08023468 	.word	0x08023468
 8015050:	08023470 	.word	0x08023470
 8015054:	08023474 	.word	0x08023474

08015058 <maze_display_Dijkstra>:





void maze_display_Dijkstra(void) {
 8015058:	b580      	push	{r7, lr}
 801505a:	b082      	sub	sp, #8
 801505c:	af00      	add	r7, sp, #0

	int tt = 14;
 801505e:	230e      	movs	r3, #14
 8015060:	607b      	str	r3, [r7, #4]
	int ss = 0;
 8015062:	2300      	movs	r3, #0
 8015064:	603b      	str	r3, [r7, #0]

	printf(
 8015066:	4865      	ldr	r0, [pc, #404]	; (80151fc <maze_display_Dijkstra+0x1a4>)
 8015068:	f00b fdaa 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 801506c:	230e      	movs	r3, #14
 801506e:	607b      	str	r3, [r7, #4]
 8015070:	e06a      	b.n	8015148 <maze_display_Dijkstra+0xf0>

		printf("|   ");//walk_count[tt + 1]
 8015072:	4863      	ldr	r0, [pc, #396]	; (8015200 <maze_display_Dijkstra+0x1a8>)
 8015074:	f00b fd08 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 8015078:	2300      	movs	r3, #0
 801507a:	603b      	str	r3, [r7, #0]
 801507c:	e027      	b.n	80150ce <maze_display_Dijkstra+0x76>
			if ((wall.row[ss] & (1 << (tt + 1))) == (1 << (tt + 1))){
 801507e:	4a61      	ldr	r2, [pc, #388]	; (8015204 <maze_display_Dijkstra+0x1ac>)
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015086:	4619      	mov	r1, r3
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	3301      	adds	r3, #1
 801508c:	2201      	movs	r2, #1
 801508e:	fa02 f303 	lsl.w	r3, r2, r3
 8015092:	ea01 0203 	and.w	r2, r1, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	3301      	adds	r3, #1
 801509a:	2101      	movs	r1, #1
 801509c:	fa01 f303 	lsl.w	r3, r1, r3
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d103      	bne.n	80150ac <maze_display_Dijkstra+0x54>
				printf("  |   ");
 80150a4:	4858      	ldr	r0, [pc, #352]	; (8015208 <maze_display_Dijkstra+0x1b0>)
 80150a6:	f00b fcef 	bl	8020a88 <iprintf>
 80150aa:	e00d      	b.n	80150c8 <maze_display_Dijkstra+0x70>
			}else{
				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	1c5a      	adds	r2, r3, #1
 80150b0:	4956      	ldr	r1, [pc, #344]	; (801520c <maze_display_Dijkstra+0x1b4>)
 80150b2:	4613      	mov	r3, r2
 80150b4:	011b      	lsls	r3, r3, #4
 80150b6:	1a9b      	subs	r3, r3, r2
 80150b8:	683a      	ldr	r2, [r7, #0]
 80150ba:	4413      	add	r3, r2
 80150bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80150c0:	4619      	mov	r1, r3
 80150c2:	4853      	ldr	r0, [pc, #332]	; (8015210 <maze_display_Dijkstra+0x1b8>)
 80150c4:	f00b fce0 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	3301      	adds	r3, #1
 80150cc:	603b      	str	r3, [r7, #0]
 80150ce:	683b      	ldr	r3, [r7, #0]
 80150d0:	2b0e      	cmp	r3, #14
 80150d2:	ddd4      	ble.n	801507e <maze_display_Dijkstra+0x26>
			}
		}
		printf("   |\n");
 80150d4:	484f      	ldr	r0, [pc, #316]	; (8015214 <maze_display_Dijkstra+0x1bc>)
 80150d6:	f00b fd73 	bl	8020bc0 <puts>
		if (tt <= -1) {
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	db38      	blt.n	8015152 <maze_display_Dijkstra+0xfa>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80150e0:	2300      	movs	r3, #0
 80150e2:	603b      	str	r3, [r7, #0]
 80150e4:	e027      	b.n	8015136 <maze_display_Dijkstra+0xde>
			if ((wall.column[tt] & (1 << ss)) == (1 << ss)){
 80150e6:	4a47      	ldr	r2, [pc, #284]	; (8015204 <maze_display_Dijkstra+0x1ac>)
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	330c      	adds	r3, #12
 80150ec:	005b      	lsls	r3, r3, #1
 80150ee:	4413      	add	r3, r2
 80150f0:	88db      	ldrh	r3, [r3, #6]
 80150f2:	4619      	mov	r1, r3
 80150f4:	2201      	movs	r2, #1
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	fa02 f303 	lsl.w	r3, r2, r3
 80150fc:	ea01 0203 	and.w	r2, r1, r3
 8015100:	2101      	movs	r1, #1
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	fa01 f303 	lsl.w	r3, r1, r3
 8015108:	429a      	cmp	r2, r3
 801510a:	d103      	bne.n	8015114 <maze_display_Dijkstra+0xbc>
				printf("+-----");
 801510c:	4842      	ldr	r0, [pc, #264]	; (8015218 <maze_display_Dijkstra+0x1c0>)
 801510e:	f00b fcbb 	bl	8020a88 <iprintf>
 8015112:	e00d      	b.n	8015130 <maze_display_Dijkstra+0xd8>
			}else{
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 8015114:	493d      	ldr	r1, [pc, #244]	; (801520c <maze_display_Dijkstra+0x1b4>)
 8015116:	683a      	ldr	r2, [r7, #0]
 8015118:	4613      	mov	r3, r2
 801511a:	011b      	lsls	r3, r3, #4
 801511c:	1a9b      	subs	r3, r3, r2
 801511e:	687a      	ldr	r2, [r7, #4]
 8015120:	4413      	add	r3, r2
 8015122:	33f0      	adds	r3, #240	; 0xf0
 8015124:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015128:	4619      	mov	r1, r3
 801512a:	483c      	ldr	r0, [pc, #240]	; (801521c <maze_display_Dijkstra+0x1c4>)
 801512c:	f00b fcac 	bl	8020a88 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 8015130:	683b      	ldr	r3, [r7, #0]
 8015132:	3301      	adds	r3, #1
 8015134:	603b      	str	r3, [r7, #0]
 8015136:	683b      	ldr	r3, [r7, #0]
 8015138:	2b0f      	cmp	r3, #15
 801513a:	ddd4      	ble.n	80150e6 <maze_display_Dijkstra+0x8e>
			}
		}

		printf("+\n");
 801513c:	4838      	ldr	r0, [pc, #224]	; (8015220 <maze_display_Dijkstra+0x1c8>)
 801513e:	f00b fd3f 	bl	8020bc0 <puts>
	for (tt = 14;tt >= -1;tt--){
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	3b01      	subs	r3, #1
 8015146:	607b      	str	r3, [r7, #4]
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801514e:	da90      	bge.n	8015072 <maze_display_Dijkstra+0x1a>
 8015150:	e000      	b.n	8015154 <maze_display_Dijkstra+0xfc>
			break;
 8015152:	bf00      	nop

	}

	printf(
 8015154:	4833      	ldr	r0, [pc, #204]	; (8015224 <maze_display_Dijkstra+0x1cc>)
 8015156:	f00b fd33 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");


	printf(
 801515a:	4828      	ldr	r0, [pc, #160]	; (80151fc <maze_display_Dijkstra+0x1a4>)
 801515c:	f00b fd30 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n");
	for (tt = 14;tt >= -1;tt--){
 8015160:	230e      	movs	r3, #14
 8015162:	607b      	str	r3, [r7, #4]
 8015164:	e03c      	b.n	80151e0 <maze_display_Dijkstra+0x188>

		printf("|   ");//walk_count[tt + 1]
 8015166:	4826      	ldr	r0, [pc, #152]	; (8015200 <maze_display_Dijkstra+0x1a8>)
 8015168:	f00b fc8e 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801516c:	2300      	movs	r3, #0
 801516e:	603b      	str	r3, [r7, #0]
 8015170:	e010      	b.n	8015194 <maze_display_Dijkstra+0x13c>

				printf("%5d ", Dijkstra.row_count[(tt + 1)][ss]);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	1c5a      	adds	r2, r3, #1
 8015176:	4925      	ldr	r1, [pc, #148]	; (801520c <maze_display_Dijkstra+0x1b4>)
 8015178:	4613      	mov	r3, r2
 801517a:	011b      	lsls	r3, r3, #4
 801517c:	1a9b      	subs	r3, r3, r2
 801517e:	683a      	ldr	r2, [r7, #0]
 8015180:	4413      	add	r3, r2
 8015182:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015186:	4619      	mov	r1, r3
 8015188:	4821      	ldr	r0, [pc, #132]	; (8015210 <maze_display_Dijkstra+0x1b8>)
 801518a:	f00b fc7d 	bl	8020a88 <iprintf>
		for(ss = 0;ss < 15;ss++){
 801518e:	683b      	ldr	r3, [r7, #0]
 8015190:	3301      	adds	r3, #1
 8015192:	603b      	str	r3, [r7, #0]
 8015194:	683b      	ldr	r3, [r7, #0]
 8015196:	2b0e      	cmp	r3, #14
 8015198:	ddeb      	ble.n	8015172 <maze_display_Dijkstra+0x11a>

		}
		printf("   |\n");
 801519a:	481e      	ldr	r0, [pc, #120]	; (8015214 <maze_display_Dijkstra+0x1bc>)
 801519c:	f00b fd10 	bl	8020bc0 <puts>
		if (tt <= -1) {
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	db21      	blt.n	80151ea <maze_display_Dijkstra+0x192>
			break;
		}
		for(ss = 0;ss <= 15;ss++){
 80151a6:	2300      	movs	r3, #0
 80151a8:	603b      	str	r3, [r7, #0]
 80151aa:	e010      	b.n	80151ce <maze_display_Dijkstra+0x176>
				printf("+%5d",Dijkstra.column_count[ss][tt]);
 80151ac:	4917      	ldr	r1, [pc, #92]	; (801520c <maze_display_Dijkstra+0x1b4>)
 80151ae:	683a      	ldr	r2, [r7, #0]
 80151b0:	4613      	mov	r3, r2
 80151b2:	011b      	lsls	r3, r3, #4
 80151b4:	1a9b      	subs	r3, r3, r2
 80151b6:	687a      	ldr	r2, [r7, #4]
 80151b8:	4413      	add	r3, r2
 80151ba:	33f0      	adds	r3, #240	; 0xf0
 80151bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80151c0:	4619      	mov	r1, r3
 80151c2:	4816      	ldr	r0, [pc, #88]	; (801521c <maze_display_Dijkstra+0x1c4>)
 80151c4:	f00b fc60 	bl	8020a88 <iprintf>
		for(ss = 0;ss <= 15;ss++){
 80151c8:	683b      	ldr	r3, [r7, #0]
 80151ca:	3301      	adds	r3, #1
 80151cc:	603b      	str	r3, [r7, #0]
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	2b0f      	cmp	r3, #15
 80151d2:	ddeb      	ble.n	80151ac <maze_display_Dijkstra+0x154>
		}

		printf("+\n");
 80151d4:	4812      	ldr	r0, [pc, #72]	; (8015220 <maze_display_Dijkstra+0x1c8>)
 80151d6:	f00b fcf3 	bl	8020bc0 <puts>
	for (tt = 14;tt >= -1;tt--){
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	3b01      	subs	r3, #1
 80151de:	607b      	str	r3, [r7, #4]
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80151e6:	dabe      	bge.n	8015166 <maze_display_Dijkstra+0x10e>
 80151e8:	e000      	b.n	80151ec <maze_display_Dijkstra+0x194>
			break;
 80151ea:	bf00      	nop

	}

	printf(
 80151ec:	480d      	ldr	r0, [pc, #52]	; (8015224 <maze_display_Dijkstra+0x1cc>)
 80151ee:	f00b fce7 	bl	8020bc0 <puts>
			"+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+\n\n");




}
 80151f2:	bf00      	nop
 80151f4:	3708      	adds	r7, #8
 80151f6:	46bd      	mov	sp, r7
 80151f8:	bd80      	pop	{r7, pc}
 80151fa:	bf00      	nop
 80151fc:	080233e8 	.word	0x080233e8
 8015200:	080234d8 	.word	0x080234d8
 8015204:	20000c3c 	.word	0x20000c3c
 8015208:	080234e0 	.word	0x080234e0
 801520c:	20000f30 	.word	0x20000f30
 8015210:	080234e8 	.word	0x080234e8
 8015214:	080234f0 	.word	0x080234f0
 8015218:	08023460 	.word	0x08023460
 801521c:	080234f8 	.word	0x080234f8
 8015220:	08023470 	.word	0x08023470
 8015224:	08023474 	.word	0x08023474

08015228 <mode_decision>:





unsigned char mode_decision(unsigned char now_mode){
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	4603      	mov	r3, r0
 8015230:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015232:	2300      	movs	r3, #0
 8015234:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 8015236:	2300      	movs	r3, #0
 8015238:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 801523a:	2300      	movs	r3, #0
 801523c:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 801523e:	4b71      	ldr	r3, [pc, #452]	; (8015404 <mode_decision+0x1dc>)
 8015240:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 8015242:	79fb      	ldrb	r3, [r7, #7]
 8015244:	f003 030f 	and.w	r3, r3, #15
 8015248:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 801524a:	79fb      	ldrb	r3, [r7, #7]
 801524c:	091b      	lsrs	r3, r3, #4
 801524e:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015250:	7bbb      	ldrb	r3, [r7, #14]
 8015252:	011b      	lsls	r3, r3, #4
 8015254:	b2da      	uxtb	r2, r3
 8015256:	7bfb      	ldrb	r3, [r7, #15]
 8015258:	4413      	add	r3, r2
 801525a:	b2db      	uxtb	r3, r3
 801525c:	4618      	mov	r0, r3
 801525e:	f7f1 fddf 	bl	8006e20 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 8015262:	e07f      	b.n	8015364 <mode_decision+0x13c>
				HAL_Delay(1);
 8015264:	2001      	movs	r0, #1
 8015266:	f003 fcbd 	bl	8018be4 <HAL_Delay>
				if (E_distanceR >= dis8) {
 801526a:	4b67      	ldr	r3, [pc, #412]	; (8015408 <mode_decision+0x1e0>)
 801526c:	edd3 7a00 	vldr	s15, [r3]
 8015270:	ed97 7a02 	vldr	s14, [r7, #8]
 8015274:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801527c:	d813      	bhi.n	80152a6 <mode_decision+0x7e>
					if (main_modeR == 15) {
 801527e:	7bfb      	ldrb	r3, [r7, #15]
 8015280:	2b0f      	cmp	r3, #15
 8015282:	d102      	bne.n	801528a <mode_decision+0x62>
						main_modeR = 0;
 8015284:	2300      	movs	r3, #0
 8015286:	73fb      	strb	r3, [r7, #15]
 8015288:	e002      	b.n	8015290 <mode_decision+0x68>
					} else {
						main_modeR++;
 801528a:	7bfb      	ldrb	r3, [r7, #15]
 801528c:	3301      	adds	r3, #1
 801528e:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8015290:	f7eb fe84 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015294:	7bbb      	ldrb	r3, [r7, #14]
 8015296:	011b      	lsls	r3, r3, #4
 8015298:	b2da      	uxtb	r2, r3
 801529a:	7bfb      	ldrb	r3, [r7, #15]
 801529c:	4413      	add	r3, r2
 801529e:	b2db      	uxtb	r3, r3
 80152a0:	4618      	mov	r0, r3
 80152a2:	f7f1 fdbd 	bl	8006e20 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 80152a6:	edd7 7a02 	vldr	s15, [r7, #8]
 80152aa:	eeb1 7a67 	vneg.f32	s14, s15
 80152ae:	4b56      	ldr	r3, [pc, #344]	; (8015408 <mode_decision+0x1e0>)
 80152b0:	edd3 7a00 	vldr	s15, [r3]
 80152b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152bc:	db13      	blt.n	80152e6 <mode_decision+0xbe>
					if (main_modeR == 0) {
 80152be:	7bfb      	ldrb	r3, [r7, #15]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d102      	bne.n	80152ca <mode_decision+0xa2>
						main_modeR = 15;
 80152c4:	230f      	movs	r3, #15
 80152c6:	73fb      	strb	r3, [r7, #15]
 80152c8:	e002      	b.n	80152d0 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 80152ca:	7bfb      	ldrb	r3, [r7, #15]
 80152cc:	3b01      	subs	r3, #1
 80152ce:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 80152d0:	f7eb fe64 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80152d4:	7bbb      	ldrb	r3, [r7, #14]
 80152d6:	011b      	lsls	r3, r3, #4
 80152d8:	b2da      	uxtb	r2, r3
 80152da:	7bfb      	ldrb	r3, [r7, #15]
 80152dc:	4413      	add	r3, r2
 80152de:	b2db      	uxtb	r3, r3
 80152e0:	4618      	mov	r0, r3
 80152e2:	f7f1 fd9d 	bl	8006e20 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 80152e6:	4b49      	ldr	r3, [pc, #292]	; (801540c <mode_decision+0x1e4>)
 80152e8:	edd3 7a00 	vldr	s15, [r3]
 80152ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80152f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80152f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152f8:	d813      	bhi.n	8015322 <mode_decision+0xfa>
					if (main_modeL == 15) {
 80152fa:	7bbb      	ldrb	r3, [r7, #14]
 80152fc:	2b0f      	cmp	r3, #15
 80152fe:	d102      	bne.n	8015306 <mode_decision+0xde>
						main_modeL = 0;
 8015300:	2300      	movs	r3, #0
 8015302:	73bb      	strb	r3, [r7, #14]
 8015304:	e002      	b.n	801530c <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 8015306:	7bbb      	ldrb	r3, [r7, #14]
 8015308:	3301      	adds	r3, #1
 801530a:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801530c:	f7eb fe46 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015310:	7bbb      	ldrb	r3, [r7, #14]
 8015312:	011b      	lsls	r3, r3, #4
 8015314:	b2da      	uxtb	r2, r3
 8015316:	7bfb      	ldrb	r3, [r7, #15]
 8015318:	4413      	add	r3, r2
 801531a:	b2db      	uxtb	r3, r3
 801531c:	4618      	mov	r0, r3
 801531e:	f7f1 fd7f 	bl	8006e20 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 8015322:	edd7 7a02 	vldr	s15, [r7, #8]
 8015326:	eeb1 7a67 	vneg.f32	s14, s15
 801532a:	4b38      	ldr	r3, [pc, #224]	; (801540c <mode_decision+0x1e4>)
 801532c:	edd3 7a00 	vldr	s15, [r3]
 8015330:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015338:	da00      	bge.n	801533c <mode_decision+0x114>
 801533a:	e013      	b.n	8015364 <mode_decision+0x13c>
					if (main_modeL == 0) {
 801533c:	7bbb      	ldrb	r3, [r7, #14]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d102      	bne.n	8015348 <mode_decision+0x120>
						main_modeL = 15;
 8015342:	230f      	movs	r3, #15
 8015344:	73bb      	strb	r3, [r7, #14]
 8015346:	e002      	b.n	801534e <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 8015348:	7bbb      	ldrb	r3, [r7, #14]
 801534a:	3b01      	subs	r3, #1
 801534c:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 801534e:	f7eb fe25 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8015352:	7bbb      	ldrb	r3, [r7, #14]
 8015354:	011b      	lsls	r3, r3, #4
 8015356:	b2da      	uxtb	r2, r3
 8015358:	7bfb      	ldrb	r3, [r7, #15]
 801535a:	4413      	add	r3, r2
 801535c:	b2db      	uxtb	r3, r3
 801535e:	4618      	mov	r0, r3
 8015360:	f7f1 fd5e 	bl	8006e20 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 8015364:	4b2a      	ldr	r3, [pc, #168]	; (8015410 <mode_decision+0x1e8>)
 8015366:	edd3 7a00 	vldr	s15, [r3]
 801536a:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8015414 <mode_decision+0x1ec>
 801536e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8015372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015376:	f67f af75 	bls.w	8015264 <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_off();
 801537a:	f7f1 fd17 	bl	8006dac <pl_yellow_LED_off>
			pl_r_blue_LED(ON);
 801537e:	2001      	movs	r0, #1
 8015380:	f7f1 fdfe 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015384:	2001      	movs	r0, #1
 8015386:	f7f1 fe0d 	bl	8006fa4 <pl_l_blue_LED>
			HAL_Delay(1000);
 801538a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801538e:	f003 fc29 	bl	8018be4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8015392:	e011      	b.n	80153b8 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 8015394:	4b1e      	ldr	r3, [pc, #120]	; (8015410 <mode_decision+0x1e8>)
 8015396:	edd3 7a00 	vldr	s15, [r3]
 801539a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8015414 <mode_decision+0x1ec>
 801539e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80153a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153a6:	db04      	blt.n	80153b2 <mode_decision+0x18a>
					main_modeL = 0;
 80153a8:	2300      	movs	r3, #0
 80153aa:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	73fb      	strb	r3, [r7, #15]
					break;
 80153b0:	e013      	b.n	80153da <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 80153b2:	2001      	movs	r0, #1
 80153b4:	f003 fc16 	bl	8018be4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 80153b8:	4b17      	ldr	r3, [pc, #92]	; (8015418 <mode_decision+0x1f0>)
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153c0:	dde8      	ble.n	8015394 <mode_decision+0x16c>
 80153c2:	4b15      	ldr	r3, [pc, #84]	; (8015418 <mode_decision+0x1f0>)
 80153c4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80153c8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153cc:	dde2      	ble.n	8015394 <mode_decision+0x16c>
 80153ce:	4b12      	ldr	r3, [pc, #72]	; (8015418 <mode_decision+0x1f0>)
 80153d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80153d4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80153d8:	dddc      	ble.n	8015394 <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 80153da:	2000      	movs	r0, #0
 80153dc:	f7f1 fdd0 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80153e0:	2000      	movs	r0, #0
 80153e2:	f7f1 fddf 	bl	8006fa4 <pl_l_blue_LED>
			pl_yellow_LED_off();
 80153e6:	f7f1 fce1 	bl	8006dac <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 80153ea:	7bbb      	ldrb	r3, [r7, #14]
 80153ec:	011b      	lsls	r3, r3, #4
 80153ee:	b25a      	sxtb	r2, r3
 80153f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80153f4:	4313      	orrs	r3, r2
 80153f6:	b25b      	sxtb	r3, r3
 80153f8:	737b      	strb	r3, [r7, #13]

return main_mode;
 80153fa:	7b7b      	ldrb	r3, [r7, #13]
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3710      	adds	r7, #16
 8015400:	46bd      	mov	sp, r7
 8015402:	bd80      	pop	{r7, pc}
 8015404:	41200000 	.word	0x41200000
 8015408:	20000224 	.word	0x20000224
 801540c:	20000220 	.word	0x20000220
 8015410:	20000270 	.word	0x20000270
 8015414:	43c80000 	.word	0x43c80000
 8015418:	200002b8 	.word	0x200002b8

0801541c <mode_execution>:


void mode_execution(unsigned char now_mode){
 801541c:	b590      	push	{r4, r7, lr}
 801541e:	b0d7      	sub	sp, #348	; 0x15c
 8015420:	af52      	add	r7, sp, #328	; 0x148
 8015422:	4603      	mov	r3, r0
 8015424:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 8015426:	2300      	movs	r3, #0
 8015428:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 801542a:	2300      	movs	r3, #0
 801542c:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 801542e:	79fb      	ldrb	r3, [r7, #7]
 8015430:	f003 030f 	and.w	r3, r3, #15
 8015434:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 8015436:	79fb      	ldrb	r3, [r7, #7]
 8015438:	091b      	lsrs	r3, r3, #4
 801543a:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 801543c:	7bbb      	ldrb	r3, [r7, #14]
 801543e:	2b0f      	cmp	r3, #15
 8015440:	f200 809e 	bhi.w	8015580 <mode_execution+0x164>
 8015444:	a201      	add	r2, pc, #4	; (adr r2, 801544c <mode_execution+0x30>)
 8015446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801544a:	bf00      	nop
 801544c:	0801548d 	.word	0x0801548d
 8015450:	08015497 	.word	0x08015497
 8015454:	0801557f 	.word	0x0801557f
 8015458:	080154a1 	.word	0x080154a1
 801545c:	080154ab 	.word	0x080154ab
 8015460:	080154b5 	.word	0x080154b5
 8015464:	080154e5 	.word	0x080154e5
 8015468:	080154ef 	.word	0x080154ef
 801546c:	0801551f 	.word	0x0801551f
 8015470:	0801554f 	.word	0x0801554f
 8015474:	0801557f 	.word	0x0801557f
 8015478:	0801557f 	.word	0x0801557f
 801547c:	0801557f 	.word	0x0801557f
 8015480:	0801557f 	.word	0x0801557f
 8015484:	0801557f 	.word	0x0801557f
 8015488:	0801557f 	.word	0x0801557f
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 801548c:	7bfb      	ldrb	r3, [r7, #15]
 801548e:	4618      	mov	r0, r3
 8015490:	f000 f886 	bl	80155a0 <mode_PLtest>
	break;
 8015494:	e074      	b.n	8015580 <mode_execution+0x164>
	case 0b0001://実行モード1
		mode_Running(main_modeR);
 8015496:	7bfb      	ldrb	r3, [r7, #15]
 8015498:	4618      	mov	r0, r3
 801549a:	f000 fa41 	bl	8015920 <mode_Running>
	break;
 801549e:	e06f      	b.n	8015580 <mode_execution+0x164>
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 80154a0:	7bfb      	ldrb	r3, [r7, #15]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f000 fc08 	bl	8015cb8 <mode_Tuning0>
	break;
 80154a8:	e06a      	b.n	8015580 <mode_execution+0x164>
	case 0b0100:
		mode_WallSensorTuning(main_modeR);
 80154aa:	7bfb      	ldrb	r3, [r7, #15]
 80154ac:	4618      	mov	r0, r3
 80154ae:	f000 ff45 	bl	801633c <mode_WallSensorTuning>
	break;
 80154b2:	e065      	b.n	8015580 <mode_execution+0x164>
	case 0b0101://試験モード
		testturning(speed600_shortest_mollifier,main_modeR,1,OFF,0.51,1);
 80154b4:	7bfb      	ldrb	r3, [r7, #15]
 80154b6:	4c34      	ldr	r4, [pc, #208]	; (8015588 <mode_execution+0x16c>)
 80154b8:	2201      	movs	r2, #1
 80154ba:	9251      	str	r2, [sp, #324]	; 0x144
 80154bc:	2200      	movs	r2, #0
 80154be:	9250      	str	r2, [sp, #320]	; 0x140
 80154c0:	2201      	movs	r2, #1
 80154c2:	924f      	str	r2, [sp, #316]	; 0x13c
 80154c4:	934e      	str	r3, [sp, #312]	; 0x138
 80154c6:	4668      	mov	r0, sp
 80154c8:	f104 0310 	add.w	r3, r4, #16
 80154cc:	f44f 729c 	mov.w	r2, #312	; 0x138
 80154d0:	4619      	mov	r1, r3
 80154d2:	f00a fe59 	bl	8020188 <memcpy>
 80154d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80154da:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 801558c <mode_execution+0x170>
 80154de:	f7f8 fb8b 	bl	800dbf8 <testturning>
	break;
 80154e2:	e04d      	b.n	8015580 <mode_execution+0x164>
	case 0b0110:
		mode_WallSensorTuning_fast(main_modeR);
 80154e4:	7bfb      	ldrb	r3, [r7, #15]
 80154e6:	4618      	mov	r0, r3
 80154e8:	f001 f960 	bl	80167ac <mode_WallSensorTuning_fast>
	break;
 80154ec:	e048      	b.n	8015580 <mode_execution+0x164>
	case 0b0111:
		testturning(speed1000_shortest_mollifier,main_modeR,1,ON,0.99,1);
 80154ee:	7bfb      	ldrb	r3, [r7, #15]
 80154f0:	4c27      	ldr	r4, [pc, #156]	; (8015590 <mode_execution+0x174>)
 80154f2:	2201      	movs	r2, #1
 80154f4:	9251      	str	r2, [sp, #324]	; 0x144
 80154f6:	2201      	movs	r2, #1
 80154f8:	9250      	str	r2, [sp, #320]	; 0x140
 80154fa:	2201      	movs	r2, #1
 80154fc:	924f      	str	r2, [sp, #316]	; 0x13c
 80154fe:	934e      	str	r3, [sp, #312]	; 0x138
 8015500:	4668      	mov	r0, sp
 8015502:	f104 0310 	add.w	r3, r4, #16
 8015506:	f44f 729c 	mov.w	r2, #312	; 0x138
 801550a:	4619      	mov	r1, r3
 801550c:	f00a fe3c 	bl	8020188 <memcpy>
 8015510:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015514:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8015594 <mode_execution+0x178>
 8015518:	f7f8 fb6e 	bl	800dbf8 <testturning>
	break;
 801551c:	e030      	b.n	8015580 <mode_execution+0x164>
	case 0b1000:
		testturning(speed1200_shortest_mollifier,main_modeR,1,ON,0.99,1);
 801551e:	7bfb      	ldrb	r3, [r7, #15]
 8015520:	4c1d      	ldr	r4, [pc, #116]	; (8015598 <mode_execution+0x17c>)
 8015522:	2201      	movs	r2, #1
 8015524:	9251      	str	r2, [sp, #324]	; 0x144
 8015526:	2201      	movs	r2, #1
 8015528:	9250      	str	r2, [sp, #320]	; 0x140
 801552a:	2201      	movs	r2, #1
 801552c:	924f      	str	r2, [sp, #316]	; 0x13c
 801552e:	934e      	str	r3, [sp, #312]	; 0x138
 8015530:	4668      	mov	r0, sp
 8015532:	f104 0310 	add.w	r3, r4, #16
 8015536:	f44f 729c 	mov.w	r2, #312	; 0x138
 801553a:	4619      	mov	r1, r3
 801553c:	f00a fe24 	bl	8020188 <memcpy>
 8015540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015544:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8015594 <mode_execution+0x178>
 8015548:	f7f8 fb56 	bl	800dbf8 <testturning>
	break;
 801554c:	e018      	b.n	8015580 <mode_execution+0x164>
	case 0b1001:
		testturning(speed1600_shortest_mollifier,main_modeR,1,ON,0.99,1);
 801554e:	7bfb      	ldrb	r3, [r7, #15]
 8015550:	4c12      	ldr	r4, [pc, #72]	; (801559c <mode_execution+0x180>)
 8015552:	2201      	movs	r2, #1
 8015554:	9251      	str	r2, [sp, #324]	; 0x144
 8015556:	2201      	movs	r2, #1
 8015558:	9250      	str	r2, [sp, #320]	; 0x140
 801555a:	2201      	movs	r2, #1
 801555c:	924f      	str	r2, [sp, #316]	; 0x13c
 801555e:	934e      	str	r3, [sp, #312]	; 0x138
 8015560:	4668      	mov	r0, sp
 8015562:	f104 0310 	add.w	r3, r4, #16
 8015566:	f44f 729c 	mov.w	r2, #312	; 0x138
 801556a:	4619      	mov	r1, r3
 801556c:	f00a fe0c 	bl	8020188 <memcpy>
 8015570:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015574:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8015594 <mode_execution+0x178>
 8015578:	f7f8 fb3e 	bl	800dbf8 <testturning>
	break;
 801557c:	e000      	b.n	8015580 <mode_execution+0x164>
	break;
 801557e:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8015580:	bf00      	nop
 8015582:	3714      	adds	r7, #20
 8015584:	46bd      	mov	sp, r7
 8015586:	bd90      	pop	{r4, r7, pc}
 8015588:	2000f358 	.word	0x2000f358
 801558c:	3f028f5c 	.word	0x3f028f5c
 8015590:	2000f4a0 	.word	0x2000f4a0
 8015594:	3f7d70a4 	.word	0x3f7d70a4
 8015598:	2000f5e8 	.word	0x2000f5e8
 801559c:	2000f730 	.word	0x2000f730

080155a0 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 80155a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80155a4:	b092      	sub	sp, #72	; 0x48
 80155a6:	af0a      	add	r7, sp, #40	; 0x28
 80155a8:	4603      	mov	r3, r0
 80155aa:	75fb      	strb	r3, [r7, #23]
	int duty_L=0, duty_R=0;
 80155ac:	2300      	movs	r3, #0
 80155ae:	61fb      	str	r3, [r7, #28]
 80155b0:	2300      	movs	r3, #0
 80155b2:	61bb      	str	r3, [r7, #24]
	switch (main_modeR) {
 80155b4:	7dfb      	ldrb	r3, [r7, #23]
 80155b6:	2b0f      	cmp	r3, #15
 80155b8:	f200 819f 	bhi.w	80158fa <mode_PLtest+0x35a>
 80155bc:	a201      	add	r2, pc, #4	; (adr r2, 80155c4 <mode_PLtest+0x24>)
 80155be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155c2:	bf00      	nop
 80155c4:	080158f9 	.word	0x080158f9
 80155c8:	08015605 	.word	0x08015605
 80155cc:	08015637 	.word	0x08015637
 80155d0:	080156b3 	.word	0x080156b3
 80155d4:	08015717 	.word	0x08015717
 80155d8:	08015797 	.word	0x08015797
 80155dc:	0801579d 	.word	0x0801579d
 80155e0:	080158fb 	.word	0x080158fb
 80155e4:	080158fb 	.word	0x080158fb
 80155e8:	08015823 	.word	0x08015823
 80155ec:	0801588b 	.word	0x0801588b
 80155f0:	080158fb 	.word	0x080158fb
 80155f4:	080158fb 	.word	0x080158fb
 80155f8:	080158fb 	.word	0x080158fb
 80155fc:	080158fb 	.word	0x080158fb
 8015600:	080158f3 	.word	0x080158f3
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015604:	4bbf      	ldr	r3, [pc, #764]	; (8015904 <mode_PLtest+0x364>)
 8015606:	6819      	ldr	r1, [r3, #0]
 8015608:	4bbe      	ldr	r3, [pc, #760]	; (8015904 <mode_PLtest+0x364>)
 801560a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801560c:	4bbd      	ldr	r3, [pc, #756]	; (8015904 <mode_PLtest+0x364>)
 801560e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 8015612:	4bbc      	ldr	r3, [pc, #752]	; (8015904 <mode_PLtest+0x364>)
 8015614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8015618:	4aba      	ldr	r2, [pc, #744]	; (8015904 <mode_PLtest+0x364>)
 801561a:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 801561e:	9201      	str	r2, [sp, #4]
 8015620:	9300      	str	r3, [sp, #0]
 8015622:	4623      	mov	r3, r4
 8015624:	4602      	mov	r2, r0
 8015626:	48b8      	ldr	r0, [pc, #736]	; (8015908 <mode_PLtest+0x368>)
 8015628:	f00b fa2e 	bl	8020a88 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 801562c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015630:	f7f2 fc36 	bl	8007ea0 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 8015634:	e7e6      	b.n	8015604 <mode_PLtest+0x64>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 8015636:	2001      	movs	r0, #1
 8015638:	f7f1 fca2 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 801563c:	2001      	movs	r0, #1
 801563e:	f7f1 fcb1 	bl	8006fa4 <pl_l_blue_LED>
		record_mode = 1;
 8015642:	4bb2      	ldr	r3, [pc, #712]	; (801590c <mode_PLtest+0x36c>)
 8015644:	2201      	movs	r2, #1
 8015646:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(900, 900);
 8015648:	f44f 7161 	mov.w	r1, #900	; 0x384
 801564c:	f44f 7061 	mov.w	r0, #900	; 0x384
 8015650:	f7f2 f9ae 	bl	80079b0 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8015654:	2001      	movs	r0, #1
 8015656:	f7f2 f969 	bl	800792c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 801565a:	2001      	movs	r0, #1
 801565c:	f7f2 f93e 	bl	80078dc <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 8015660:	f7f2 f98a 	bl	8007978 <pl_DriveMotor_start>
		wait_ms(2500);
 8015664:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8015668:	f7f2 fc1a 	bl	8007ea0 <wait_ms>
		pl_DriveMotor_stop();
 801566c:	f7f2 f992 	bl	8007994 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015670:	2000      	movs	r0, #0
 8015672:	f7f1 fc85 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8015676:	2000      	movs	r0, #0
 8015678:	f7f1 fc94 	bl	8006fa4 <pl_l_blue_LED>
		record_mode = 0;
 801567c:	4ba3      	ldr	r3, [pc, #652]	; (801590c <mode_PLtest+0x36c>)
 801567e:	2200      	movs	r2, #0
 8015680:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8015682:	e002      	b.n	801568a <mode_PLtest+0xea>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8015684:	2001      	movs	r0, #1
 8015686:	f7f2 fc0b 	bl	8007ea0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 801568a:	4b9e      	ldr	r3, [pc, #632]	; (8015904 <mode_PLtest+0x364>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015692:	ddf7      	ble.n	8015684 <mode_PLtest+0xe4>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8015694:	4b9b      	ldr	r3, [pc, #620]	; (8015904 <mode_PLtest+0x364>)
 8015696:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801569a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801569e:	ddf1      	ble.n	8015684 <mode_PLtest+0xe4>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 80156a0:	4b98      	ldr	r3, [pc, #608]	; (8015904 <mode_PLtest+0x364>)
 80156a2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80156a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156aa:	ddeb      	ble.n	8015684 <mode_PLtest+0xe4>
		}
		record_print();
 80156ac:	f001 fb30 	bl	8016d10 <record_print>
		break;
 80156b0:	e123      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b0011:	//gyro
		reset_gyro();
 80156b2:	f7ec f859 	bl	8001768 <reset_gyro>
		reset_speed();
 80156b6:	f7eb fcaf 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 80156ba:	2001      	movs	r0, #1
 80156bc:	f7f1 fc60 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80156c0:	2001      	movs	r0, #1
 80156c2:	f7f1 fc6f 	bl	8006fa4 <pl_l_blue_LED>
		record_mode = 2;
 80156c6:	4b91      	ldr	r3, [pc, #580]	; (801590c <mode_PLtest+0x36c>)
 80156c8:	2202      	movs	r2, #2
 80156ca:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 80156cc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80156d0:	f7f2 fbe6 	bl	8007ea0 <wait_ms>
		pl_r_blue_LED(OFF);
 80156d4:	2000      	movs	r0, #0
 80156d6:	f7f1 fc53 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80156da:	2000      	movs	r0, #0
 80156dc:	f7f1 fc62 	bl	8006fa4 <pl_l_blue_LED>
		record_mode = 0;
 80156e0:	4b8a      	ldr	r3, [pc, #552]	; (801590c <mode_PLtest+0x36c>)
 80156e2:	2200      	movs	r2, #0
 80156e4:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156e6:	e002      	b.n	80156ee <mode_PLtest+0x14e>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80156e8:	2001      	movs	r0, #1
 80156ea:	f7f2 fbd9 	bl	8007ea0 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80156ee:	4b85      	ldr	r3, [pc, #532]	; (8015904 <mode_PLtest+0x364>)
 80156f0:	681b      	ldr	r3, [r3, #0]
 80156f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80156f6:	ddf7      	ble.n	80156e8 <mode_PLtest+0x148>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 80156f8:	4b82      	ldr	r3, [pc, #520]	; (8015904 <mode_PLtest+0x364>)
 80156fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80156fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015702:	ddf1      	ble.n	80156e8 <mode_PLtest+0x148>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015704:	4b7f      	ldr	r3, [pc, #508]	; (8015904 <mode_PLtest+0x364>)
 8015706:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801570a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801570e:	ddeb      	ble.n	80156e8 <mode_PLtest+0x148>
		}
		record_print();
 8015710:	f001 fafe 	bl	8016d10 <record_print>
		break;
 8015714:	e0f1      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015716:	4b7e      	ldr	r3, [pc, #504]	; (8015910 <mode_PLtest+0x370>)
 8015718:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 801571a:	4618      	mov	r0, r3
 801571c:	f7ea ff3c 	bl	8000598 <__aeabi_f2d>
 8015720:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015724:	4b7a      	ldr	r3, [pc, #488]	; (8015910 <mode_PLtest+0x370>)
 8015726:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015728:	4618      	mov	r0, r3
 801572a:	f7ea ff35 	bl	8000598 <__aeabi_f2d>
 801572e:	4604      	mov	r4, r0
 8015730:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015732:	4b77      	ldr	r3, [pc, #476]	; (8015910 <mode_PLtest+0x370>)
 8015734:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015736:	4618      	mov	r0, r3
 8015738:	f7ea ff2e 	bl	8000598 <__aeabi_f2d>
 801573c:	4680      	mov	r8, r0
 801573e:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 8015740:	4b73      	ldr	r3, [pc, #460]	; (8015910 <mode_PLtest+0x370>)
 8015742:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015744:	4618      	mov	r0, r3
 8015746:	f7ea ff27 	bl	8000598 <__aeabi_f2d>
 801574a:	4682      	mov	sl, r0
 801574c:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801574e:	4b70      	ldr	r3, [pc, #448]	; (8015910 <mode_PLtest+0x370>)
 8015750:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015752:	4618      	mov	r0, r3
 8015754:	f7ea ff20 	bl	8000598 <__aeabi_f2d>
 8015758:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 801575c:	4b6c      	ldr	r3, [pc, #432]	; (8015910 <mode_PLtest+0x370>)
 801575e:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015760:	4618      	mov	r0, r3
 8015762:	f7ea ff19 	bl	8000598 <__aeabi_f2d>
 8015766:	4602      	mov	r2, r0
 8015768:	460b      	mov	r3, r1
 801576a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801576e:	ed97 7b00 	vldr	d7, [r7]
 8015772:	ed8d 7b06 	vstr	d7, [sp, #24]
 8015776:	e9cd ab04 	strd	sl, fp, [sp, #16]
 801577a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801577e:	e9cd 4500 	strd	r4, r5, [sp]
 8015782:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8015786:	4863      	ldr	r0, [pc, #396]	; (8015914 <mode_PLtest+0x374>)
 8015788:	f00b f97e 	bl	8020a88 <iprintf>
			wait_ms(500);
 801578c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8015790:	f7f2 fb86 	bl	8007ea0 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8015794:	e7bf      	b.n	8015716 <mode_PLtest+0x176>
		}
	break;
	case 0b0101:
		test_flash();
 8015796:	f7f1 fd43 	bl	8007220 <test_flash>
		break;
 801579a:	e0ae      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b0110:
		record_mode=6;
 801579c:	4b5b      	ldr	r3, [pc, #364]	; (801590c <mode_PLtest+0x36c>)
 801579e:	2206      	movs	r2, #6
 80157a0:	701a      	strb	r2, [r3, #0]
		pl_r_blue_LED(ON);
 80157a2:	2001      	movs	r0, #1
 80157a4:	f7f1 fbec 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80157a8:	2001      	movs	r0, #1
 80157aa:	f7f1 fbfb 	bl	8006fa4 <pl_l_blue_LED>
		get_duty(1.0, -1.0,&duty_L,&duty_R);
 80157ae:	f107 0218 	add.w	r2, r7, #24
 80157b2:	f107 031c 	add.w	r3, r7, #28
 80157b6:	4611      	mov	r1, r2
 80157b8:	4618      	mov	r0, r3
 80157ba:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80157be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80157c2:	f7ec fb37 	bl	8001e34 <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	69ba      	ldr	r2, [r7, #24]
 80157ca:	4611      	mov	r1, r2
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7f2 f8ef 	bl	80079b0 <pl_DriveMotor_duty>
		pl_DriveMotor_start();
 80157d2:	f7f2 f8d1 	bl	8007978 <pl_DriveMotor_start>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157d6:	e00a      	b.n	80157ee <mode_PLtest+0x24e>
			wait_ms(1);
 80157d8:	2001      	movs	r0, #1
 80157da:	f7f2 fb61 	bl	8007ea0 <wait_ms>
			if(record_rupe_flag==1){
 80157de:	4b4e      	ldr	r3, [pc, #312]	; (8015918 <mode_PLtest+0x378>)
 80157e0:	781b      	ldrb	r3, [r3, #0]
 80157e2:	2b01      	cmp	r3, #1
 80157e4:	d103      	bne.n	80157ee <mode_PLtest+0x24e>
				record_mode=0;
 80157e6:	4b49      	ldr	r3, [pc, #292]	; (801590c <mode_PLtest+0x36c>)
 80157e8:	2200      	movs	r2, #0
 80157ea:	701a      	strb	r2, [r3, #0]
				break;
 80157ec:	e010      	b.n	8015810 <mode_PLtest+0x270>
		while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80157ee:	4b45      	ldr	r3, [pc, #276]	; (8015904 <mode_PLtest+0x364>)
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80157f6:	ddef      	ble.n	80157d8 <mode_PLtest+0x238>
 80157f8:	4b42      	ldr	r3, [pc, #264]	; (8015904 <mode_PLtest+0x364>)
 80157fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80157fe:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015802:	dde9      	ble.n	80157d8 <mode_PLtest+0x238>
 8015804:	4b3f      	ldr	r3, [pc, #252]	; (8015904 <mode_PLtest+0x364>)
 8015806:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801580a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801580e:	dde3      	ble.n	80157d8 <mode_PLtest+0x238>
			}
		}
		pl_DriveMotor_stop();
 8015810:	f7f2 f8c0 	bl	8007994 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 8015814:	2000      	movs	r0, #0
 8015816:	f7f1 fbb3 	bl	8006f80 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 801581a:	2000      	movs	r0, #0
 801581c:	f7f1 fbc2 	bl	8006fa4 <pl_l_blue_LED>

		break;
 8015820:	e06b      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 8015822:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8015826:	f7f2 f8ed 	bl	8007a04 <pl_FunMotor_duty>
			pl_FunMotor_start();
 801582a:	f7f2 f8d7 	bl	80079dc <pl_FunMotor_start>
			HAL_Delay(2000);
 801582e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8015832:	f003 f9d7 	bl	8018be4 <HAL_Delay>
			reset_gyro();
 8015836:	f7eb ff97 	bl	8001768 <reset_gyro>
			reset_speed();
 801583a:	f7eb fbed 	bl	8001018 <reset_speed>
			clear_Ierror();
 801583e:	f7ee feb1 	bl	80045a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 8015842:	2001      	movs	r0, #1
 8015844:	f7f1 fb9c 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015848:	2001      	movs	r0, #1
 801584a:	f7f1 fbab 	bl	8006fa4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801584e:	e002      	b.n	8015856 <mode_PLtest+0x2b6>
				HAL_Delay(1);
 8015850:	2001      	movs	r0, #1
 8015852:	f003 f9c7 	bl	8018be4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015856:	4b2b      	ldr	r3, [pc, #172]	; (8015904 <mode_PLtest+0x364>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801585e:	ddf7      	ble.n	8015850 <mode_PLtest+0x2b0>
 8015860:	4b28      	ldr	r3, [pc, #160]	; (8015904 <mode_PLtest+0x364>)
 8015862:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015866:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801586a:	ddf1      	ble.n	8015850 <mode_PLtest+0x2b0>
 801586c:	4b25      	ldr	r3, [pc, #148]	; (8015904 <mode_PLtest+0x364>)
 801586e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015872:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015876:	ddeb      	ble.n	8015850 <mode_PLtest+0x2b0>
			}
			pl_r_blue_LED(OFF);
 8015878:	2000      	movs	r0, #0
 801587a:	f7f1 fb81 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 801587e:	2000      	movs	r0, #0
 8015880:	f7f1 fb90 	bl	8006fa4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8015884:	f7f2 f8b4 	bl	80079f0 <pl_FunMotor_stop>
		break;
 8015888:	e037      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 801588a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 801591c <mode_PLtest+0x37c>
 801588e:	f7f2 f8b9 	bl	8007a04 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8015892:	f7f2 f8a3 	bl	80079dc <pl_FunMotor_start>
			HAL_Delay(2000);
 8015896:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 801589a:	f003 f9a3 	bl	8018be4 <HAL_Delay>
			reset_gyro();
 801589e:	f7eb ff63 	bl	8001768 <reset_gyro>
			reset_speed();
 80158a2:	f7eb fbb9 	bl	8001018 <reset_speed>
			clear_Ierror();
 80158a6:	f7ee fe7d 	bl	80045a4 <clear_Ierror>
			pl_r_blue_LED(ON);
 80158aa:	2001      	movs	r0, #1
 80158ac:	f7f1 fb68 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80158b0:	2001      	movs	r0, #1
 80158b2:	f7f1 fb77 	bl	8006fa4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158b6:	e002      	b.n	80158be <mode_PLtest+0x31e>
				HAL_Delay(1);
 80158b8:	2001      	movs	r0, #1
 80158ba:	f003 f993 	bl	8018be4 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80158be:	4b11      	ldr	r3, [pc, #68]	; (8015904 <mode_PLtest+0x364>)
 80158c0:	681b      	ldr	r3, [r3, #0]
 80158c2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158c6:	ddf7      	ble.n	80158b8 <mode_PLtest+0x318>
 80158c8:	4b0e      	ldr	r3, [pc, #56]	; (8015904 <mode_PLtest+0x364>)
 80158ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80158ce:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158d2:	ddf1      	ble.n	80158b8 <mode_PLtest+0x318>
 80158d4:	4b0b      	ldr	r3, [pc, #44]	; (8015904 <mode_PLtest+0x364>)
 80158d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80158da:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80158de:	ddeb      	ble.n	80158b8 <mode_PLtest+0x318>
			}
			pl_r_blue_LED(OFF);
 80158e0:	2000      	movs	r0, #0
 80158e2:	f7f1 fb4d 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80158e6:	2000      	movs	r0, #0
 80158e8:	f7f1 fb5c 	bl	8006fa4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80158ec:	f7f2 f880 	bl	80079f0 <pl_FunMotor_stop>
		break;
 80158f0:	e003      	b.n	80158fa <mode_PLtest+0x35a>
	case 0b1111:	//record_out
		record_print();
 80158f2:	f001 fa0d 	bl	8016d10 <record_print>
		break;
 80158f6:	e000      	b.n	80158fa <mode_PLtest+0x35a>
		break;
 80158f8:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80158fa:	bf00      	nop
 80158fc:	3720      	adds	r7, #32
 80158fe:	46bd      	mov	sp, r7
 8015900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015904:	200002b8 	.word	0x200002b8
 8015908:	08023500 	.word	0x08023500
 801590c:	2000edc0 	.word	0x2000edc0
 8015910:	200006e4 	.word	0x200006e4
 8015914:	0802352c 	.word	0x0802352c
 8015918:	2000edcc 	.word	0x2000edcc
 801591c:	3f7d70a4 	.word	0x3f7d70a4

08015920 <mode_Running>:


void mode_Running(unsigned char main_modeR){
 8015920:	b5b0      	push	{r4, r5, r7, lr}
 8015922:	b0da      	sub	sp, #360	; 0x168
 8015924:	af54      	add	r7, sp, #336	; 0x150
 8015926:	4603      	mov	r3, r0
 8015928:	71fb      	strb	r3, [r7, #7]
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801592a:	2003      	movs	r0, #3
 801592c:	f7f1 ffd6 	bl	80078dc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015930:	2003      	movs	r0, #3
 8015932:	f7f1 fffb 	bl	800792c <pl_R_DriveMotor_mode>
	reset_gyro();
 8015936:	f7eb ff17 	bl	8001768 <reset_gyro>
	reset_speed();
 801593a:	f7eb fb6d 	bl	8001018 <reset_speed>
	reset_distance();
 801593e:	f7eb fb2d 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015942:	f7ee fe2f 	bl	80045a4 <clear_Ierror>
	switch (main_modeR) {
 8015946:	79fb      	ldrb	r3, [r7, #7]
 8015948:	2b0f      	cmp	r3, #15
 801594a:	f200 818b 	bhi.w	8015c64 <mode_Running+0x344>
 801594e:	a201      	add	r2, pc, #4	; (adr r2, 8015954 <mode_Running+0x34>)
 8015950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015954:	08015995 	.word	0x08015995
 8015958:	08015a45 	.word	0x08015a45
 801595c:	08015a7d 	.word	0x08015a7d
 8015960:	08015a83 	.word	0x08015a83
 8015964:	08015abb 	.word	0x08015abb
 8015968:	08015aed 	.word	0x08015aed
 801596c:	08015b1f 	.word	0x08015b1f
 8015970:	08015b51 	.word	0x08015b51
 8015974:	08015b83 	.word	0x08015b83
 8015978:	08015bb5 	.word	0x08015bb5
 801597c:	08015be7 	.word	0x08015be7
 8015980:	08015c19 	.word	0x08015c19
 8015984:	08015c1f 	.word	0x08015c1f
 8015988:	08015c25 	.word	0x08015c25
 801598c:	08015c2b 	.word	0x08015c2b
 8015990:	08015c31 	.word	0x08015c31
		case 0b0000://迷路表示
			//maze_maker2(1, 0, 0, 0, 7, 7);
			//record_out();
			//wall.row[8]=(1<<8);
			create_StepCountMap_queue();
 8015994:	f7fe fc1e 	bl	80141d4 <create_StepCountMap_queue>
			maze_display();
 8015998:	f7ff fa40 	bl	8014e1c <maze_display>

			create_DijkstraMap();
 801599c:	f7fb fe98 	bl	80116d0 <create_DijkstraMap>
			maze_display_Dijkstra();
 80159a0:	f7ff fb5a 	bl	8015058 <maze_display_Dijkstra>

			route_Dijkstra();
 80159a4:	f7fd fbdc 	bl	8013160 <route_Dijkstra>
			create_StepCountMap_unknown();
 80159a8:	f7fe f8de 	bl	8013b68 <create_StepCountMap_unknown>
			maze_display();
 80159ac:	f7ff fa36 	bl	8014e1c <maze_display>

			tic_timer();
 80159b0:	f7f2 fa48 	bl	8007e44 <tic_timer>
			for(int j=0;j<5000;j++){
 80159b4:	2300      	movs	r3, #0
 80159b6:	617b      	str	r3, [r7, #20]
 80159b8:	e004      	b.n	80159c4 <mode_Running+0xa4>
			create_StepCountMap_queue();
 80159ba:	f7fe fc0b 	bl	80141d4 <create_StepCountMap_queue>
			for(int j=0;j<5000;j++){
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	3301      	adds	r3, #1
 80159c2:	617b      	str	r3, [r7, #20]
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	f241 3287 	movw	r2, #4999	; 0x1387
 80159ca:	4293      	cmp	r3, r2
 80159cc:	ddf5      	ble.n	80159ba <mode_Running+0x9a>
			}
			float tim2 = toc_timer();
 80159ce:	f7f2 fa4b 	bl	8007e68 <toc_timer>
 80159d2:	ed87 0a03 	vstr	s0, [r7, #12]
			maze_display();
 80159d6:	f7ff fa21 	bl	8014e1c <maze_display>
			printf("tim2=%f\n", tim2);
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f7ea fddc 	bl	8000598 <__aeabi_f2d>
 80159e0:	4602      	mov	r2, r0
 80159e2:	460b      	mov	r3, r1
 80159e4:	48a1      	ldr	r0, [pc, #644]	; (8015c6c <mode_Running+0x34c>)
 80159e6:	f00b f84f 	bl	8020a88 <iprintf>
			tic_timer();
 80159ea:	f7f2 fa2b 	bl	8007e44 <tic_timer>
			create_DijkstraMap();
 80159ee:	f7fb fe6f 	bl	80116d0 <create_DijkstraMap>
			for(int j=0;j<5000;j++){
 80159f2:	2300      	movs	r3, #0
 80159f4:	613b      	str	r3, [r7, #16]
 80159f6:	e006      	b.n	8015a06 <mode_Running+0xe6>
			//create_StepCountMap();
			//maze_clear();
			//create_DijkstraMap();
			route_Dijkstra();
 80159f8:	f7fd fbb2 	bl	8013160 <route_Dijkstra>
			create_StepCountMap_unknown();
 80159fc:	f7fe f8b4 	bl	8013b68 <create_StepCountMap_unknown>
			for(int j=0;j<5000;j++){
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	3301      	adds	r3, #1
 8015a04:	613b      	str	r3, [r7, #16]
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	f241 3287 	movw	r2, #4999	; 0x1387
 8015a0c:	4293      	cmp	r3, r2
 8015a0e:	ddf3      	ble.n	80159f8 <mode_Running+0xd8>

			}
			float tim1 = toc_timer();
 8015a10:	f7f2 fa2a 	bl	8007e68 <toc_timer>
 8015a14:	ed87 0a02 	vstr	s0, [r7, #8]
			maze_display();
 8015a18:	f7ff fa00 	bl	8014e1c <maze_display>
			maze_display_Dijkstra();
 8015a1c:	f7ff fb1c 	bl	8015058 <maze_display_Dijkstra>
			printf("tim1=%f,tim2=%f\n", tim1, tim2);
 8015a20:	68b8      	ldr	r0, [r7, #8]
 8015a22:	f7ea fdb9 	bl	8000598 <__aeabi_f2d>
 8015a26:	4604      	mov	r4, r0
 8015a28:	460d      	mov	r5, r1
 8015a2a:	68f8      	ldr	r0, [r7, #12]
 8015a2c:	f7ea fdb4 	bl	8000598 <__aeabi_f2d>
 8015a30:	4602      	mov	r2, r0
 8015a32:	460b      	mov	r3, r1
 8015a34:	e9cd 2300 	strd	r2, r3, [sp]
 8015a38:	4622      	mov	r2, r4
 8015a3a:	462b      	mov	r3, r5
 8015a3c:	488c      	ldr	r0, [pc, #560]	; (8015c70 <mode_Running+0x350>)
 8015a3e:	f00b f823 	bl	8020a88 <iprintf>
		break;
 8015a42:	e10f      	b.n	8015c64 <mode_Running+0x344>
		case 0b0001://足立法(遅い)
			tic_timer();
 8015a44:	f7f2 f9fe 	bl	8007e44 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,0);
 8015a48:	4c8a      	ldr	r4, [pc, #552]	; (8015c74 <mode_Running+0x354>)
 8015a4a:	2300      	movs	r3, #0
 8015a4c:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a4e:	2301      	movs	r3, #1
 8015a50:	934e      	str	r3, [sp, #312]	; 0x138
 8015a52:	4668      	mov	r0, sp
 8015a54:	f104 0310 	add.w	r3, r4, #16
 8015a58:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	f00a fb93 	bl	8020188 <memcpy>
 8015a62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015a66:	eddf 1a84 	vldr	s3, [pc, #528]	; 8015c78 <mode_Running+0x358>
 8015a6a:	ed9f 1a84 	vldr	s2, [pc, #528]	; 8015c7c <mode_Running+0x35c>
 8015a6e:	eddf 0a84 	vldr	s1, [pc, #528]	; 8015c80 <mode_Running+0x360>
 8015a72:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8015c84 <mode_Running+0x364>
 8015a76:	f7f8 fa79 	bl	800df6c <AdatiWayReturn>
			//adati_wayreturn(400, 400, 3000, 13000);
		break;
 8015a7a:	e0f3      	b.n	8015c64 <mode_Running+0x344>
		case 0b0010://Flashから
			record_out();
 8015a7c:	f7f1 fcee 	bl	800745c <record_out>
		break;
 8015a80:	e0f0      	b.n	8015c64 <mode_Running+0x344>
		case 0b0011://ゴミ
			tic_timer();
 8015a82:	f7f2 f9df 	bl	8007e44 <tic_timer>
			AdatiWayReturn(300,400,2000,3000,speed300_exploration,1,1);
 8015a86:	4c7b      	ldr	r4, [pc, #492]	; (8015c74 <mode_Running+0x354>)
 8015a88:	2301      	movs	r3, #1
 8015a8a:	934f      	str	r3, [sp, #316]	; 0x13c
 8015a8c:	2301      	movs	r3, #1
 8015a8e:	934e      	str	r3, [sp, #312]	; 0x138
 8015a90:	4668      	mov	r0, sp
 8015a92:	f104 0310 	add.w	r3, r4, #16
 8015a96:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015a9a:	4619      	mov	r1, r3
 8015a9c:	f00a fb74 	bl	8020188 <memcpy>
 8015aa0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015aa4:	eddf 1a74 	vldr	s3, [pc, #464]	; 8015c78 <mode_Running+0x358>
 8015aa8:	ed9f 1a74 	vldr	s2, [pc, #464]	; 8015c7c <mode_Running+0x35c>
 8015aac:	eddf 0a74 	vldr	s1, [pc, #464]	; 8015c80 <mode_Running+0x360>
 8015ab0:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8015c84 <mode_Running+0x364>
 8015ab4:	f7f8 fa5a 	bl	800df6c <AdatiWayReturn>
		break;
 8015ab8:	e0d4      	b.n	8015c64 <mode_Running+0x344>
		case 0b0100://ゴミ
			record_out();
 8015aba:	f7f1 fccf 	bl	800745c <record_out>
			run_shortest(1000,3000,0,TURN_OFF,FUN_OFF,SLANT_OFF,speed300_shortest,0.3,0);
 8015abe:	2300      	movs	r3, #0
 8015ac0:	9352      	str	r3, [sp, #328]	; 0x148
 8015ac2:	4a71      	ldr	r2, [pc, #452]	; (8015c88 <mode_Running+0x368>)
 8015ac4:	466b      	mov	r3, sp
 8015ac6:	4611      	mov	r1, r2
 8015ac8:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015acc:	4618      	mov	r0, r3
 8015ace:	f00a fb5b 	bl	8020188 <memcpy>
 8015ad2:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8015c8c <mode_Running+0x36c>
 8015ad6:	2300      	movs	r3, #0
 8015ad8:	2200      	movs	r2, #0
 8015ada:	2100      	movs	r1, #0
 8015adc:	2000      	movs	r0, #0
 8015ade:	eddf 0a66 	vldr	s1, [pc, #408]	; 8015c78 <mode_Running+0x358>
 8015ae2:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8015c90 <mode_Running+0x370>
 8015ae6:	f7f9 fb2f 	bl	800f148 <run_shortest>
		break;
 8015aea:	e0bb      	b.n	8015c64 <mode_Running+0x344>
		case 0b0101://
			record_out();
 8015aec:	f7f1 fcb6 	bl	800745c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_OFF,speed600_shortest_mollifier,0.3,1);
 8015af0:	2301      	movs	r3, #1
 8015af2:	9352      	str	r3, [sp, #328]	; 0x148
 8015af4:	4a67      	ldr	r2, [pc, #412]	; (8015c94 <mode_Running+0x374>)
 8015af6:	466b      	mov	r3, sp
 8015af8:	4611      	mov	r1, r2
 8015afa:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015afe:	4618      	mov	r0, r3
 8015b00:	f00a fb42 	bl	8020188 <memcpy>
 8015b04:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8015c8c <mode_Running+0x36c>
 8015b08:	2300      	movs	r3, #0
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	2101      	movs	r1, #1
 8015b0e:	2000      	movs	r0, #0
 8015b10:	eddf 0a59 	vldr	s1, [pc, #356]	; 8015c78 <mode_Running+0x358>
 8015b14:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8015c90 <mode_Running+0x370>
 8015b18:	f7f9 fb16 	bl	800f148 <run_shortest>
		break;
 8015b1c:	e0a2      	b.n	8015c64 <mode_Running+0x344>
		case 0b0110://吸引なしで斜め走行
			record_out();
 8015b1e:	f7f1 fc9d 	bl	800745c <record_out>
			run_shortest(1000,3000,0,TURN_ON,FUN_OFF,SLANT_ON,speed600_shortest_mollifier,0.3,1);
 8015b22:	2301      	movs	r3, #1
 8015b24:	9352      	str	r3, [sp, #328]	; 0x148
 8015b26:	4a5b      	ldr	r2, [pc, #364]	; (8015c94 <mode_Running+0x374>)
 8015b28:	466b      	mov	r3, sp
 8015b2a:	4611      	mov	r1, r2
 8015b2c:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b30:	4618      	mov	r0, r3
 8015b32:	f00a fb29 	bl	8020188 <memcpy>
 8015b36:	ed9f 1a55 	vldr	s2, [pc, #340]	; 8015c8c <mode_Running+0x36c>
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2101      	movs	r1, #1
 8015b40:	2000      	movs	r0, #0
 8015b42:	eddf 0a4d 	vldr	s1, [pc, #308]	; 8015c78 <mode_Running+0x358>
 8015b46:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8015c90 <mode_Running+0x370>
 8015b4a:	f7f9 fafd 	bl	800f148 <run_shortest>
		break;
 8015b4e:	e089      	b.n	8015c64 <mode_Running+0x344>
		case 0b0111://吸引ありで斜め走行
			record_out();
 8015b50:	f7f1 fc84 	bl	800745c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b54:	2301      	movs	r3, #1
 8015b56:	9352      	str	r3, [sp, #328]	; 0x148
 8015b58:	4a4f      	ldr	r2, [pc, #316]	; (8015c98 <mode_Running+0x378>)
 8015b5a:	466b      	mov	r3, sp
 8015b5c:	4611      	mov	r1, r2
 8015b5e:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b62:	4618      	mov	r0, r3
 8015b64:	f00a fb10 	bl	8020188 <memcpy>
 8015b68:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 8015c9c <mode_Running+0x37c>
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	2201      	movs	r2, #1
 8015b70:	2101      	movs	r1, #1
 8015b72:	2000      	movs	r0, #0
 8015b74:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8015ca0 <mode_Running+0x380>
 8015b78:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015c78 <mode_Running+0x358>
 8015b7c:	f7f9 fae4 	bl	800f148 <run_shortest>
		break;
 8015b80:	e070      	b.n	8015c64 <mode_Running+0x344>
		case 0b1000://
			record_out();
 8015b82:	f7f1 fc6b 	bl	800745c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1000_shortest_mollifier,0.99,1);
 8015b86:	2301      	movs	r3, #1
 8015b88:	9352      	str	r3, [sp, #328]	; 0x148
 8015b8a:	4a43      	ldr	r2, [pc, #268]	; (8015c98 <mode_Running+0x378>)
 8015b8c:	466b      	mov	r3, sp
 8015b8e:	4611      	mov	r1, r2
 8015b90:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015b94:	4618      	mov	r0, r3
 8015b96:	f00a faf7 	bl	8020188 <memcpy>
 8015b9a:	ed9f 1a40 	vldr	s2, [pc, #256]	; 8015c9c <mode_Running+0x37c>
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	2201      	movs	r2, #1
 8015ba2:	2101      	movs	r1, #1
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8015ca4 <mode_Running+0x384>
 8015baa:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 8015ca8 <mode_Running+0x388>
 8015bae:	f7f9 facb 	bl	800f148 <run_shortest>
		break;
 8015bb2:	e057      	b.n	8015c64 <mode_Running+0x344>
		case 0b1001:
			record_out();
 8015bb4:	f7f1 fc52 	bl	800745c <record_out>
			run_shortest(3000,10000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015bb8:	2301      	movs	r3, #1
 8015bba:	9352      	str	r3, [sp, #328]	; 0x148
 8015bbc:	4a3b      	ldr	r2, [pc, #236]	; (8015cac <mode_Running+0x38c>)
 8015bbe:	466b      	mov	r3, sp
 8015bc0:	4611      	mov	r1, r2
 8015bc2:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f00a fade 	bl	8020188 <memcpy>
 8015bcc:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8015c9c <mode_Running+0x37c>
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	2201      	movs	r2, #1
 8015bd4:	2101      	movs	r1, #1
 8015bd6:	2000      	movs	r0, #0
 8015bd8:	eddf 0a31 	vldr	s1, [pc, #196]	; 8015ca0 <mode_Running+0x380>
 8015bdc:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8015c78 <mode_Running+0x358>
 8015be0:	f7f9 fab2 	bl	800f148 <run_shortest>
		break;
 8015be4:	e03e      	b.n	8015c64 <mode_Running+0x344>
		case 0b1010:
			record_out();
 8015be6:	f7f1 fc39 	bl	800745c <record_out>
			run_shortest(3200,13000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest_mollifier,0.99,1);
 8015bea:	2301      	movs	r3, #1
 8015bec:	9352      	str	r3, [sp, #328]	; 0x148
 8015bee:	4a2f      	ldr	r2, [pc, #188]	; (8015cac <mode_Running+0x38c>)
 8015bf0:	466b      	mov	r3, sp
 8015bf2:	4611      	mov	r1, r2
 8015bf4:	f44f 72a4 	mov.w	r2, #328	; 0x148
 8015bf8:	4618      	mov	r0, r3
 8015bfa:	f00a fac5 	bl	8020188 <memcpy>
 8015bfe:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8015c9c <mode_Running+0x37c>
 8015c02:	2301      	movs	r3, #1
 8015c04:	2201      	movs	r2, #1
 8015c06:	2101      	movs	r1, #1
 8015c08:	2000      	movs	r0, #0
 8015c0a:	eddf 0a26 	vldr	s1, [pc, #152]	; 8015ca4 <mode_Running+0x384>
 8015c0e:	ed9f 0a26 	vldr	s0, [pc, #152]	; 8015ca8 <mode_Running+0x388>
 8015c12:	f7f9 fa99 	bl	800f148 <run_shortest>
		break;
 8015c16:	e025      	b.n	8015c64 <mode_Running+0x344>
		case 0b1011:
			record_out();
 8015c18:	f7f1 fc20 	bl	800745c <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1200_shortest,0.35,0);
		break;
 8015c1c:	e022      	b.n	8015c64 <mode_Running+0x344>
		case 0b1100:
			record_out();
 8015c1e:	f7f1 fc1d 	bl	800745c <record_out>
			//run_shortest(2500,15000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015c22:	e01f      	b.n	8015c64 <mode_Running+0x344>
		case 0b1101:
			record_out();
 8015c24:	f7f1 fc1a 	bl	800745c <record_out>
			//run_shortest(3000,18000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015c28:	e01c      	b.n	8015c64 <mode_Running+0x344>
		case 0b1110:
			record_out();
 8015c2a:	f7f1 fc17 	bl	800745c <record_out>
			//run_shortest(4000,20000,0,TURN_ON,FUN_ON,SLANT_ON,speed1600_shortest,0.51,0);
		break;
 8015c2e:	e019      	b.n	8015c64 <mode_Running+0x344>
		case 0b1111:
			AdatiWayReturn(250,400,2000,3000,speed250_exploration,1,0);
 8015c30:	4c1f      	ldr	r4, [pc, #124]	; (8015cb0 <mode_Running+0x390>)
 8015c32:	2300      	movs	r3, #0
 8015c34:	934f      	str	r3, [sp, #316]	; 0x13c
 8015c36:	2301      	movs	r3, #1
 8015c38:	934e      	str	r3, [sp, #312]	; 0x138
 8015c3a:	4668      	mov	r0, sp
 8015c3c:	f104 0310 	add.w	r3, r4, #16
 8015c40:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015c44:	4619      	mov	r1, r3
 8015c46:	f00a fa9f 	bl	8020188 <memcpy>
 8015c4a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015c4e:	eddf 1a0a 	vldr	s3, [pc, #40]	; 8015c78 <mode_Running+0x358>
 8015c52:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8015c7c <mode_Running+0x35c>
 8015c56:	eddf 0a0a 	vldr	s1, [pc, #40]	; 8015c80 <mode_Running+0x360>
 8015c5a:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8015cb4 <mode_Running+0x394>
 8015c5e:	f7f8 f985 	bl	800df6c <AdatiWayReturn>
		break;
 8015c62:	bf00      	nop
	}


}
 8015c64:	bf00      	nop
 8015c66:	3718      	adds	r7, #24
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bdb0      	pop	{r4, r5, r7, pc}
 8015c6c:	08023578 	.word	0x08023578
 8015c70:	08023584 	.word	0x08023584
 8015c74:	2000ef80 	.word	0x2000ef80
 8015c78:	453b8000 	.word	0x453b8000
 8015c7c:	44fa0000 	.word	0x44fa0000
 8015c80:	43c80000 	.word	0x43c80000
 8015c84:	43960000 	.word	0x43960000
 8015c88:	2000f210 	.word	0x2000f210
 8015c8c:	3e99999a 	.word	0x3e99999a
 8015c90:	447a0000 	.word	0x447a0000
 8015c94:	2000f358 	.word	0x2000f358
 8015c98:	2000f4a0 	.word	0x2000f4a0
 8015c9c:	3f7d70a4 	.word	0x3f7d70a4
 8015ca0:	461c4000 	.word	0x461c4000
 8015ca4:	464b2000 	.word	0x464b2000
 8015ca8:	45480000 	.word	0x45480000
 8015cac:	2000f5e8 	.word	0x2000f5e8
 8015cb0:	2000f0c8 	.word	0x2000f0c8
 8015cb4:	437a0000 	.word	0x437a0000

08015cb8 <mode_Tuning0>:





void mode_Tuning0(unsigned char main_modeR){
 8015cb8:	b590      	push	{r4, r7, lr}
 8015cba:	b0db      	sub	sp, #364	; 0x16c
 8015cbc:	af52      	add	r7, sp, #328	; 0x148
 8015cbe:	4603      	mov	r3, r0
 8015cc0:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	int duty_L=0, duty_R=0;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	613b      	str	r3, [r7, #16]
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	60fb      	str	r3, [r7, #12]
	mode.WallControlMode=0;
 8015cca:	2300      	movs	r3, #0
 8015ccc:	753b      	strb	r3, [r7, #20]
	mode.WallControlStatus=0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	757b      	strb	r3, [r7, #21]
	mode.WallCutMode=0;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	75fb      	strb	r3, [r7, #23]
	mode.calMazeMode=0;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	75bb      	strb	r3, [r7, #22]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8015cda:	2003      	movs	r0, #3
 8015cdc:	f7f1 fdfe 	bl	80078dc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8015ce0:	2003      	movs	r0, #3
 8015ce2:	f7f1 fe23 	bl	800792c <pl_R_DriveMotor_mode>
	reset_gyro();
 8015ce6:	f7eb fd3f 	bl	8001768 <reset_gyro>
	reset_speed();
 8015cea:	f7eb f995 	bl	8001018 <reset_speed>
	reset_distance();
 8015cee:	f7eb f955 	bl	8000f9c <reset_distance>
	clear_Ierror();
 8015cf2:	f7ee fc57 	bl	80045a4 <clear_Ierror>

	switch (main_modeR) {
 8015cf6:	79fb      	ldrb	r3, [r7, #7]
 8015cf8:	2b0f      	cmp	r3, #15
 8015cfa:	f200 82c7 	bhi.w	801628c <mode_Tuning0+0x5d4>
 8015cfe:	a201      	add	r2, pc, #4	; (adr r2, 8015d04 <mode_Tuning0+0x4c>)
 8015d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d04:	08015d45 	.word	0x08015d45
 8015d08:	08015dcf 	.word	0x08015dcf
 8015d0c:	08015df5 	.word	0x08015df5
 8015d10:	08015e1b 	.word	0x08015e1b
 8015d14:	08015e4b 	.word	0x08015e4b
 8015d18:	08015e7b 	.word	0x08015e7b
 8015d1c:	08015ea1 	.word	0x08015ea1
 8015d20:	08015ec7 	.word	0x08015ec7
 8015d24:	08015eed 	.word	0x08015eed
 8015d28:	08015f11 	.word	0x08015f11
 8015d2c:	08015f93 	.word	0x08015f93
 8015d30:	08016019 	.word	0x08016019
 8015d34:	0801603f 	.word	0x0801603f
 8015d38:	080160d9 	.word	0x080160d9
 8015d3c:	080161f1 	.word	0x080161f1
 8015d40:	08016241 	.word	0x08016241
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 8015d44:	4bca      	ldr	r3, [pc, #808]	; (8016070 <mode_Tuning0+0x3b8>)
 8015d46:	2203      	movs	r2, #3
 8015d48:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015d4a:	2300      	movs	r3, #0
 8015d4c:	753b      	strb	r3, [r7, #20]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8015d4e:	6978      	ldr	r0, [r7, #20]
 8015d50:	ed9f 2ac8 	vldr	s4, [pc, #800]	; 8016074 <mode_Tuning0+0x3bc>
 8015d54:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8016078 <mode_Tuning0+0x3c0>
 8015d58:	ed9f 1ac8 	vldr	s2, [pc, #800]	; 801607c <mode_Tuning0+0x3c4>
 8015d5c:	eddf 0ac7 	vldr	s1, [pc, #796]	; 801607c <mode_Tuning0+0x3c4>
 8015d60:	ed9f 0ac7 	vldr	s0, [pc, #796]	; 8016080 <mode_Tuning0+0x3c8>
 8015d64:	f7ed f93a 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015d68:	ed9f 2ac6 	vldr	s4, [pc, #792]	; 8016084 <mode_Tuning0+0x3cc>
 8015d6c:	eddf 1ac6 	vldr	s3, [pc, #792]	; 8016088 <mode_Tuning0+0x3d0>
 8015d70:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 801607c <mode_Tuning0+0x3c4>
 8015d74:	eddf 0ac1 	vldr	s1, [pc, #772]	; 801607c <mode_Tuning0+0x3c4>
 8015d78:	ed9f 0ac4 	vldr	s0, [pc, #784]	; 801608c <mode_Tuning0+0x3d4>
 8015d7c:	f7ed fe3c 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 8015d80:	6978      	ldr	r0, [r7, #20]
 8015d82:	ed9f 2ac3 	vldr	s4, [pc, #780]	; 8016090 <mode_Tuning0+0x3d8>
 8015d86:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8016094 <mode_Tuning0+0x3dc>
 8015d8a:	ed9f 1abc 	vldr	s2, [pc, #752]	; 801607c <mode_Tuning0+0x3c4>
 8015d8e:	eddf 0abb 	vldr	s1, [pc, #748]	; 801607c <mode_Tuning0+0x3c4>
 8015d92:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8016080 <mode_Tuning0+0x3c8>
 8015d96:	f7ed f921 	bl	8002fdc <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 8015d9a:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8016084 <mode_Tuning0+0x3cc>
 8015d9e:	eddf 1aba 	vldr	s3, [pc, #744]	; 8016088 <mode_Tuning0+0x3d0>
 8015da2:	ed9f 1ab6 	vldr	s2, [pc, #728]	; 801607c <mode_Tuning0+0x3c4>
 8015da6:	eddf 0ab5 	vldr	s1, [pc, #724]	; 801607c <mode_Tuning0+0x3c4>
 8015daa:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 801608c <mode_Tuning0+0x3d4>
 8015dae:	f7ed fe23 	bl	80039f8 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 8015db2:	6978      	ldr	r0, [r7, #20]
 8015db4:	ed9f 2ab8 	vldr	s4, [pc, #736]	; 8016098 <mode_Tuning0+0x3e0>
 8015db8:	eddf 1ab8 	vldr	s3, [pc, #736]	; 801609c <mode_Tuning0+0x3e4>
 8015dbc:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 801607c <mode_Tuning0+0x3c4>
 8015dc0:	eddf 0aae 	vldr	s1, [pc, #696]	; 801607c <mode_Tuning0+0x3c4>
 8015dc4:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8016080 <mode_Tuning0+0x3c8>
 8015dc8:	f7ed f908 	bl	8002fdc <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8015dcc:	e25e      	b.n	801628c <mode_Tuning0+0x5d4>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8015dce:	4ba8      	ldr	r3, [pc, #672]	; (8016070 <mode_Tuning0+0x3b8>)
 8015dd0:	2205      	movs	r2, #5
 8015dd2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015dd4:	2300      	movs	r3, #0
 8015dd6:	753b      	strb	r3, [r7, #20]
//			straight_table2(400, 0, 0, 400, 3000,mode);
			straight_table2(-BACK_TO_CENTER, 0,0,-150,1000, mode);
 8015dd8:	6978      	ldr	r0, [r7, #20]
 8015dda:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 80160a0 <mode_Tuning0+0x3e8>
 8015dde:	eddf 1ab1 	vldr	s3, [pc, #708]	; 80160a4 <mode_Tuning0+0x3ec>
 8015de2:	ed9f 1aa6 	vldr	s2, [pc, #664]	; 801607c <mode_Tuning0+0x3c4>
 8015de6:	eddf 0aa5 	vldr	s1, [pc, #660]	; 801607c <mode_Tuning0+0x3c4>
 8015dea:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 80160a8 <mode_Tuning0+0x3f0>
 8015dee:	f7ed f8f5 	bl	8002fdc <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 8015df2:	e24b      	b.n	801628c <mode_Tuning0+0x5d4>
		case 2://壁制御
			record_mode=6;
 8015df4:	4b9e      	ldr	r3, [pc, #632]	; (8016070 <mode_Tuning0+0x3b8>)
 8015df6:	2206      	movs	r2, #6
 8015df8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8015dfa:	2301      	movs	r3, #1
 8015dfc:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8015dfe:	6978      	ldr	r0, [r7, #20]
 8015e00:	ed9f 2aaa 	vldr	s4, [pc, #680]	; 80160ac <mode_Tuning0+0x3f4>
 8015e04:	eddf 1aaa 	vldr	s3, [pc, #680]	; 80160b0 <mode_Tuning0+0x3f8>
 8015e08:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 801607c <mode_Tuning0+0x3c4>
 8015e0c:	eddf 0a9b 	vldr	s1, [pc, #620]	; 801607c <mode_Tuning0+0x3c4>
 8015e10:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 80160b4 <mode_Tuning0+0x3fc>
 8015e14:	f7ed f8e2 	bl	8002fdc <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8015e18:	e238      	b.n	801628c <mode_Tuning0+0x5d4>
		case 3://右スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,-90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);

			testturning(speed300_exploration,0,0,0,0,0);
 8015e1a:	4ca7      	ldr	r4, [pc, #668]	; (80160b8 <mode_Tuning0+0x400>)
 8015e1c:	2300      	movs	r3, #0
 8015e1e:	9351      	str	r3, [sp, #324]	; 0x144
 8015e20:	2300      	movs	r3, #0
 8015e22:	9350      	str	r3, [sp, #320]	; 0x140
 8015e24:	2300      	movs	r3, #0
 8015e26:	934f      	str	r3, [sp, #316]	; 0x13c
 8015e28:	2300      	movs	r3, #0
 8015e2a:	934e      	str	r3, [sp, #312]	; 0x138
 8015e2c:	4668      	mov	r0, sp
 8015e2e:	f104 0310 	add.w	r3, r4, #16
 8015e32:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015e36:	4619      	mov	r1, r3
 8015e38:	f00a f9a6 	bl	8020188 <memcpy>
 8015e3c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015e40:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 801607c <mode_Tuning0+0x3c4>
 8015e44:	f7f7 fed8 	bl	800dbf8 <testturning>
		break;
 8015e48:	e220      	b.n	801628c <mode_Tuning0+0x5d4>
		case 4://左スラローム(探索)
//			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
//			mollifier_slalom_table(300,90,500);
//			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
			testturning(speed300_exploration,1,0,0,0,0);
 8015e4a:	4c9b      	ldr	r4, [pc, #620]	; (80160b8 <mode_Tuning0+0x400>)
 8015e4c:	2300      	movs	r3, #0
 8015e4e:	9351      	str	r3, [sp, #324]	; 0x144
 8015e50:	2300      	movs	r3, #0
 8015e52:	9350      	str	r3, [sp, #320]	; 0x140
 8015e54:	2300      	movs	r3, #0
 8015e56:	934f      	str	r3, [sp, #316]	; 0x13c
 8015e58:	2301      	movs	r3, #1
 8015e5a:	934e      	str	r3, [sp, #312]	; 0x138
 8015e5c:	4668      	mov	r0, sp
 8015e5e:	f104 0310 	add.w	r3, r4, #16
 8015e62:	f44f 729c 	mov.w	r2, #312	; 0x138
 8015e66:	4619      	mov	r1, r3
 8015e68:	f00a f98e 	bl	8020188 <memcpy>
 8015e6c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015e70:	ed9f 0a82 	vldr	s0, [pc, #520]	; 801607c <mode_Tuning0+0x3c4>
 8015e74:	f7f7 fec0 	bl	800dbf8 <testturning>
		break;
 8015e78:	e208      	b.n	801628c <mode_Tuning0+0x5d4>
		case 5://直進(制御なし)
			record_mode=7;
 8015e7a:	4b7d      	ldr	r3, [pc, #500]	; (8016070 <mode_Tuning0+0x3b8>)
 8015e7c:	2207      	movs	r2, #7
 8015e7e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	753b      	strb	r3, [r7, #20]
			straight_table2(180, 0, 0, 300, 6000,mode);
 8015e84:	6978      	ldr	r0, [r7, #20]
 8015e86:	ed9f 2a89 	vldr	s4, [pc, #548]	; 80160ac <mode_Tuning0+0x3f4>
 8015e8a:	eddf 1a89 	vldr	s3, [pc, #548]	; 80160b0 <mode_Tuning0+0x3f8>
 8015e8e:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 801607c <mode_Tuning0+0x3c4>
 8015e92:	eddf 0a7a 	vldr	s1, [pc, #488]	; 801607c <mode_Tuning0+0x3c4>
 8015e96:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801608c <mode_Tuning0+0x3d4>
 8015e9a:	f7ed f89f 	bl	8002fdc <straight_table2>
		break;
 8015e9e:	e1f5      	b.n	801628c <mode_Tuning0+0x5d4>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8015ea0:	4b73      	ldr	r3, [pc, #460]	; (8016070 <mode_Tuning0+0x3b8>)
 8015ea2:	2207      	movs	r2, #7
 8015ea4:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8015eaa:	6978      	ldr	r0, [r7, #20]
 8015eac:	ed9f 2a7f 	vldr	s4, [pc, #508]	; 80160ac <mode_Tuning0+0x3f4>
 8015eb0:	eddf 1a82 	vldr	s3, [pc, #520]	; 80160bc <mode_Tuning0+0x404>
 8015eb4:	ed9f 1a71 	vldr	s2, [pc, #452]	; 801607c <mode_Tuning0+0x3c4>
 8015eb8:	eddf 0a70 	vldr	s1, [pc, #448]	; 801607c <mode_Tuning0+0x3c4>
 8015ebc:	ed9f 0a80 	vldr	s0, [pc, #512]	; 80160c0 <mode_Tuning0+0x408>
 8015ec0:	f7ed f88c 	bl	8002fdc <straight_table2>
		break;
 8015ec4:	e1e2      	b.n	801628c <mode_Tuning0+0x5d4>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8015ec6:	4b6a      	ldr	r3, [pc, #424]	; (8016070 <mode_Tuning0+0x3b8>)
 8015ec8:	2207      	movs	r2, #7
 8015eca:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8015ecc:	2303      	movs	r3, #3
 8015ece:	753b      	strb	r3, [r7, #20]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8015ed0:	6978      	ldr	r0, [r7, #20]
 8015ed2:	ed9f 2a76 	vldr	s4, [pc, #472]	; 80160ac <mode_Tuning0+0x3f4>
 8015ed6:	eddf 1a6f 	vldr	s3, [pc, #444]	; 8016094 <mode_Tuning0+0x3dc>
 8015eda:	ed9f 1a68 	vldr	s2, [pc, #416]	; 801607c <mode_Tuning0+0x3c4>
 8015ede:	eddf 0a67 	vldr	s1, [pc, #412]	; 801607c <mode_Tuning0+0x3c4>
 8015ee2:	ed9f 0a77 	vldr	s0, [pc, #476]	; 80160c0 <mode_Tuning0+0x408>
 8015ee6:	f7ed f879 	bl	8002fdc <straight_table2>
		break;
 8015eea:	e1cf      	b.n	801628c <mode_Tuning0+0x5d4>
		case 8://宴会芸
			record_mode=2;
 8015eec:	4b60      	ldr	r3, [pc, #384]	; (8016070 <mode_Tuning0+0x3b8>)
 8015eee:	2202      	movs	r2, #2
 8015ef0:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015ef2:	2001      	movs	r0, #1
 8015ef4:	f7f1 f844 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015ef8:	2001      	movs	r0, #1
 8015efa:	f7f1 f853 	bl	8006fa4 <pl_l_blue_LED>
			no_angle();
 8015efe:	f7ed ff8f 	bl	8003e20 <no_angle>
			pl_r_blue_LED(OFF);
 8015f02:	2000      	movs	r0, #0
 8015f04:	f7f1 f83c 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015f08:	2000      	movs	r0, #0
 8015f0a:	f7f1 f84b 	bl	8006fa4 <pl_l_blue_LED>
		break;
 8015f0e:	e1bd      	b.n	801628c <mode_Tuning0+0x5d4>
		case 9://システム同定enc
			record_mode=6;
 8015f10:	4b57      	ldr	r3, [pc, #348]	; (8016070 <mode_Tuning0+0x3b8>)
 8015f12:	2206      	movs	r2, #6
 8015f14:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015f16:	2001      	movs	r0, #1
 8015f18:	f7f1 f832 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015f1c:	2001      	movs	r0, #1
 8015f1e:	f7f1 f841 	bl	8006fa4 <pl_l_blue_LED>
//			straight_table_ff(90, 0, 300, 300, 500);
//			straight_table_ff(90, 300, 600, 600, 1500);
//			straight_table_ff(90, 600, 300, 600, 1500);
//			straight_table_ff(90, 300, 0, 300, 500);

			get_duty(1, 1,&duty_L,&duty_R);
 8015f22:	f107 020c 	add.w	r2, r7, #12
 8015f26:	f107 0310 	add.w	r3, r7, #16
 8015f2a:	4611      	mov	r1, r2
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015f32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8015f36:	f7eb ff7d 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	68fa      	ldr	r2, [r7, #12]
 8015f3e:	4611      	mov	r1, r2
 8015f40:	4618      	mov	r0, r3
 8015f42:	f7f1 fd35 	bl	80079b0 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015f46:	f7f1 fd17 	bl	8007978 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f4a:	e006      	b.n	8015f5a <mode_Tuning0+0x2a2>
				wait_ms(1);
 8015f4c:	2001      	movs	r0, #1
 8015f4e:	f7f1 ffa7 	bl	8007ea0 <wait_ms>
				if(record_rupe_flag==1){
 8015f52:	4b5c      	ldr	r3, [pc, #368]	; (80160c4 <mode_Tuning0+0x40c>)
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b01      	cmp	r3, #1
 8015f58:	d011      	beq.n	8015f7e <mode_Tuning0+0x2c6>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015f5a:	4b5b      	ldr	r3, [pc, #364]	; (80160c8 <mode_Tuning0+0x410>)
 8015f5c:	681b      	ldr	r3, [r3, #0]
 8015f5e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f62:	ddf3      	ble.n	8015f4c <mode_Tuning0+0x294>
 8015f64:	4b58      	ldr	r3, [pc, #352]	; (80160c8 <mode_Tuning0+0x410>)
 8015f66:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015f6a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f6e:	dded      	ble.n	8015f4c <mode_Tuning0+0x294>
 8015f70:	4b55      	ldr	r3, [pc, #340]	; (80160c8 <mode_Tuning0+0x410>)
 8015f72:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8015f76:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015f7a:	dde7      	ble.n	8015f4c <mode_Tuning0+0x294>
 8015f7c:	e000      	b.n	8015f80 <mode_Tuning0+0x2c8>
					break;
 8015f7e:	bf00      	nop
				}
			}
			pl_DriveMotor_stop();
 8015f80:	f7f1 fd08 	bl	8007994 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 8015f84:	2000      	movs	r0, #0
 8015f86:	f7f0 fffb 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8015f8a:	2000      	movs	r0, #0
 8015f8c:	f7f1 f80a 	bl	8006fa4 <pl_l_blue_LED>
		break;
 8015f90:	e17c      	b.n	801628c <mode_Tuning0+0x5d4>
		case 10://システム同定gyro
			record_mode=6;
 8015f92:	4b37      	ldr	r3, [pc, #220]	; (8016070 <mode_Tuning0+0x3b8>)
 8015f94:	2206      	movs	r2, #6
 8015f96:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8015f98:	2001      	movs	r0, #1
 8015f9a:	f7f0 fff1 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8015f9e:	2001      	movs	r0, #1
 8015fa0:	f7f1 f800 	bl	8006fa4 <pl_l_blue_LED>
//			turning_table_ff(90, 0, 300, 300, 500);
//			turning_table_ff(90, 300, 600, 600, 1500);
//			turning_table_ff(90, 600, 300, 600, 1500);
//			turning_table_ff(90, 300, 0, 300, 500);
			get_duty(-1.0, 1.0,&duty_L,&duty_R);
 8015fa4:	f107 020c 	add.w	r2, r7, #12
 8015fa8:	f107 0310 	add.w	r3, r7, #16
 8015fac:	4611      	mov	r1, r2
 8015fae:	4618      	mov	r0, r3
 8015fb0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8015fb4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015fb8:	f7eb ff3c 	bl	8001e34 <get_duty>
			pl_DriveMotor_duty(duty_L,duty_R);
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	68fa      	ldr	r2, [r7, #12]
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	4618      	mov	r0, r3
 8015fc4:	f7f1 fcf4 	bl	80079b0 <pl_DriveMotor_duty>
			pl_DriveMotor_start();
 8015fc8:	f7f1 fcd6 	bl	8007978 <pl_DriveMotor_start>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fcc:	e00a      	b.n	8015fe4 <mode_Tuning0+0x32c>
				wait_ms(1);
 8015fce:	2001      	movs	r0, #1
 8015fd0:	f7f1 ff66 	bl	8007ea0 <wait_ms>
				if(record_rupe_flag==1){
 8015fd4:	4b3b      	ldr	r3, [pc, #236]	; (80160c4 <mode_Tuning0+0x40c>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	2b01      	cmp	r3, #1
 8015fda:	d103      	bne.n	8015fe4 <mode_Tuning0+0x32c>
					record_mode=0;
 8015fdc:	4b24      	ldr	r3, [pc, #144]	; (8016070 <mode_Tuning0+0x3b8>)
 8015fde:	2200      	movs	r2, #0
 8015fe0:	701a      	strb	r2, [r3, #0]
					break;
 8015fe2:	e010      	b.n	8016006 <mode_Tuning0+0x34e>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8015fe4:	4b38      	ldr	r3, [pc, #224]	; (80160c8 <mode_Tuning0+0x410>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015fec:	ddef      	ble.n	8015fce <mode_Tuning0+0x316>
 8015fee:	4b36      	ldr	r3, [pc, #216]	; (80160c8 <mode_Tuning0+0x410>)
 8015ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8015ff4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8015ff8:	dde9      	ble.n	8015fce <mode_Tuning0+0x316>
 8015ffa:	4b33      	ldr	r3, [pc, #204]	; (80160c8 <mode_Tuning0+0x410>)
 8015ffc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016000:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016004:	dde3      	ble.n	8015fce <mode_Tuning0+0x316>
				}
			}
			pl_DriveMotor_stop();
 8016006:	f7f1 fcc5 	bl	8007994 <pl_DriveMotor_stop>
			pl_r_blue_LED(OFF);
 801600a:	2000      	movs	r0, #0
 801600c:	f7f0 ffb8 	bl	8006f80 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8016010:	2000      	movs	r0, #0
 8016012:	f7f0 ffc7 	bl	8006fa4 <pl_l_blue_LED>
		break;
 8016016:	e139      	b.n	801628c <mode_Tuning0+0x5d4>
		case 11:
		record_mode=1;
 8016018:	4b15      	ldr	r3, [pc, #84]	; (8016070 <mode_Tuning0+0x3b8>)
 801601a:	2201      	movs	r2, #1
 801601c:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 801601e:	2300      	movs	r3, #0
 8016020:	753b      	strb	r3, [r7, #20]
		straight_table2(BACK_TO_CENTER_FRONT_SLANT, 0, 0, 300, 6000,mode);
 8016022:	6978      	ldr	r0, [r7, #20]
 8016024:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80160ac <mode_Tuning0+0x3f4>
 8016028:	eddf 1a21 	vldr	s3, [pc, #132]	; 80160b0 <mode_Tuning0+0x3f8>
 801602c:	ed9f 1a13 	vldr	s2, [pc, #76]	; 801607c <mode_Tuning0+0x3c4>
 8016030:	eddf 0a12 	vldr	s1, [pc, #72]	; 801607c <mode_Tuning0+0x3c4>
 8016034:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80160cc <mode_Tuning0+0x414>
 8016038:	f7ec ffd0 	bl	8002fdc <straight_table2>
		break;
 801603c:	e126      	b.n	801628c <mode_Tuning0+0x5d4>
		case 12:
		record_mode=2;
 801603e:	4b0c      	ldr	r3, [pc, #48]	; (8016070 <mode_Tuning0+0x3b8>)
 8016040:	2202      	movs	r2, #2
 8016042:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8016044:	2300      	movs	r3, #0
 8016046:	61fb      	str	r3, [r7, #28]
 8016048:	e00e      	b.n	8016068 <mode_Tuning0+0x3b0>
		turning_table2(90, 0, 0, 400, 3000);
 801604a:	ed9f 2a21 	vldr	s4, [pc, #132]	; 80160d0 <mode_Tuning0+0x418>
 801604e:	eddf 1a0e 	vldr	s3, [pc, #56]	; 8016088 <mode_Tuning0+0x3d0>
 8016052:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801607c <mode_Tuning0+0x3c4>
 8016056:	eddf 0a09 	vldr	s1, [pc, #36]	; 801607c <mode_Tuning0+0x3c4>
 801605a:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80160d4 <mode_Tuning0+0x41c>
 801605e:	f7ed fccb 	bl	80039f8 <turning_table2>
		for(int i=0;i<40;i++){
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	3301      	adds	r3, #1
 8016066:	61fb      	str	r3, [r7, #28]
 8016068:	69fb      	ldr	r3, [r7, #28]
 801606a:	2b27      	cmp	r3, #39	; 0x27
 801606c:	dded      	ble.n	801604a <mode_Tuning0+0x392>
		}
		break;
 801606e:	e10d      	b.n	801628c <mode_Tuning0+0x5d4>
 8016070:	2000edc0 	.word	0x2000edc0
 8016074:	464b2000 	.word	0x464b2000
 8016078:	44c80000 	.word	0x44c80000
 801607c:	00000000 	.word	0x00000000
 8016080:	44070000 	.word	0x44070000
 8016084:	457a0000 	.word	0x457a0000
 8016088:	43c80000 	.word	0x43c80000
 801608c:	43340000 	.word	0x43340000
 8016090:	466a6000 	.word	0x466a6000
 8016094:	44fa0000 	.word	0x44fa0000
 8016098:	469c4000 	.word	0x469c4000
 801609c:	45160000 	.word	0x45160000
 80160a0:	447a0000 	.word	0x447a0000
 80160a4:	c3160000 	.word	0xc3160000
 80160a8:	c1a40000 	.word	0xc1a40000
 80160ac:	45bb8000 	.word	0x45bb8000
 80160b0:	43960000 	.word	0x43960000
 80160b4:	44340000 	.word	0x44340000
 80160b8:	2000ef80 	.word	0x2000ef80
 80160bc:	43fa0000 	.word	0x43fa0000
 80160c0:	443eeb39 	.word	0x443eeb39
 80160c4:	2000edcc 	.word	0x2000edcc
 80160c8:	200002b8 	.word	0x200002b8
 80160cc:	420a0000 	.word	0x420a0000
 80160d0:	453b8000 	.word	0x453b8000
 80160d4:	42b40000 	.word	0x42b40000
		case 13:
			record_mode=2;
 80160d8:	4b89      	ldr	r3, [pc, #548]	; (8016300 <mode_Tuning0+0x648>)
 80160da:	2202      	movs	r2, #2
 80160dc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80160de:	2301      	movs	r3, #1
 80160e0:	753b      	strb	r3, [r7, #20]
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 80160e2:	4b88      	ldr	r3, [pc, #544]	; (8016304 <mode_Tuning0+0x64c>)
 80160e4:	edd3 6a02 	vldr	s13, [r3, #8]
 80160e8:	4b86      	ldr	r3, [pc, #536]	; (8016304 <mode_Tuning0+0x64c>)
 80160ea:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80160ee:	4b85      	ldr	r3, [pc, #532]	; (8016304 <mode_Tuning0+0x64c>)
 80160f0:	ed93 7a02 	vldr	s14, [r3, #8]
 80160f4:	4b83      	ldr	r3, [pc, #524]	; (8016304 <mode_Tuning0+0x64c>)
 80160f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80160fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80160fe:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8016102:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(BACK_TO_CENTER + 135, 0, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016106:	eddf 5a80 	vldr	s11, [pc, #512]	; 8016308 <mode_Tuning0+0x650>
 801610a:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 801610e:	6978      	ldr	r0, [r7, #20]
 8016110:	eeb0 2a47 	vmov.f32	s4, s14
 8016114:	eef0 1a46 	vmov.f32	s3, s12
 8016118:	eeb0 1a66 	vmov.f32	s2, s13
 801611c:	eddf 0a7b 	vldr	s1, [pc, #492]	; 801630c <mode_Tuning0+0x654>
 8016120:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8016310 <mode_Tuning0+0x658>
 8016124:	f7ec ff5a 	bl	8002fdc <straight_table2>
			for(int i=0;i<40;i++){
 8016128:	2300      	movs	r3, #0
 801612a:	61bb      	str	r3, [r7, #24]
 801612c:	e037      	b.n	801619e <mode_Tuning0+0x4e6>
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 801612e:	4b75      	ldr	r3, [pc, #468]	; (8016304 <mode_Tuning0+0x64c>)
 8016130:	edd3 6a02 	vldr	s13, [r3, #8]
 8016134:	4b73      	ldr	r3, [pc, #460]	; (8016304 <mode_Tuning0+0x64c>)
 8016136:	ed93 6a02 	vldr	s12, [r3, #8]
 801613a:	4b72      	ldr	r3, [pc, #456]	; (8016304 <mode_Tuning0+0x64c>)
 801613c:	edd3 5a02 	vldr	s11, [r3, #8]
									speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 8016140:	4b70      	ldr	r3, [pc, #448]	; (8016304 <mode_Tuning0+0x64c>)
 8016142:	ed93 7a02 	vldr	s14, [r3, #8]
 8016146:	4b6f      	ldr	r3, [pc, #444]	; (8016304 <mode_Tuning0+0x64c>)
 8016148:	edd3 7a02 	vldr	s15, [r3, #8]
 801614c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8016150:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016154:	eec7 7a05 	vdiv.f32	s15, s14, s10
			straight_table2(MAZE_OFFSET, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed, speed300_exploration.slalom_R.g_speed,
 8016158:	ed9f 5a6b 	vldr	s10, [pc, #428]	; 8016308 <mode_Tuning0+0x650>
 801615c:	ee87 7a85 	vdiv.f32	s14, s15, s10
 8016160:	6978      	ldr	r0, [r7, #20]
 8016162:	eeb0 2a47 	vmov.f32	s4, s14
 8016166:	eef0 1a65 	vmov.f32	s3, s11
 801616a:	eeb0 1a46 	vmov.f32	s2, s12
 801616e:	eef0 0a66 	vmov.f32	s1, s13
 8016172:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 8016176:	f7ec ff31 	bl	8002fdc <straight_table2>
			slalomR(speed300_exploration.slalom_R, OFF,EXPLORATION,0,300);
 801617a:	4b62      	ldr	r3, [pc, #392]	; (8016304 <mode_Tuning0+0x64c>)
 801617c:	2200      	movs	r2, #0
 801617e:	9203      	str	r2, [sp, #12]
 8016180:	2200      	movs	r2, #0
 8016182:	9202      	str	r2, [sp, #8]
 8016184:	2200      	movs	r2, #0
 8016186:	9201      	str	r2, [sp, #4]
 8016188:	699a      	ldr	r2, [r3, #24]
 801618a:	9200      	str	r2, [sp, #0]
 801618c:	3308      	adds	r3, #8
 801618e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016190:	ed9f 0a60 	vldr	s0, [pc, #384]	; 8016314 <mode_Tuning0+0x65c>
 8016194:	f7f3 feec 	bl	8009f70 <slalomR>
			for(int i=0;i<40;i++){
 8016198:	69bb      	ldr	r3, [r7, #24]
 801619a:	3301      	adds	r3, #1
 801619c:	61bb      	str	r3, [r7, #24]
 801619e:	69bb      	ldr	r3, [r7, #24]
 80161a0:	2b27      	cmp	r3, #39	; 0x27
 80161a2:	ddc4      	ble.n	801612e <mode_Tuning0+0x476>
			}
			mode.WallControlMode=0;
 80161a4:	2300      	movs	r3, #0
 80161a6:	753b      	strb	r3, [r7, #20]
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80161a8:	4b56      	ldr	r3, [pc, #344]	; (8016304 <mode_Tuning0+0x64c>)
 80161aa:	edd3 6a02 	vldr	s13, [r3, #8]
 80161ae:	4b55      	ldr	r3, [pc, #340]	; (8016304 <mode_Tuning0+0x64c>)
 80161b0:	ed93 6a02 	vldr	s12, [r3, #8]
					speed300_exploration.slalom_R.g_speed * speed300_exploration.slalom_R.g_speed  / 2 / 45,mode);
 80161b4:	4b53      	ldr	r3, [pc, #332]	; (8016304 <mode_Tuning0+0x64c>)
 80161b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80161ba:	4b52      	ldr	r3, [pc, #328]	; (8016304 <mode_Tuning0+0x64c>)
 80161bc:	edd3 7a02 	vldr	s15, [r3, #8]
 80161c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80161c4:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80161c8:	eec7 7a25 	vdiv.f32	s15, s14, s11
			straight_table2(45, speed300_exploration.slalom_R.g_speed, 0, speed300_exploration.slalom_R.g_speed,
 80161cc:	eddf 5a4e 	vldr	s11, [pc, #312]	; 8016308 <mode_Tuning0+0x650>
 80161d0:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80161d4:	6978      	ldr	r0, [r7, #20]
 80161d6:	eeb0 2a47 	vmov.f32	s4, s14
 80161da:	eef0 1a46 	vmov.f32	s3, s12
 80161de:	ed9f 1a4b 	vldr	s2, [pc, #300]	; 801630c <mode_Tuning0+0x654>
 80161e2:	eef0 0a66 	vmov.f32	s1, s13
 80161e6:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8016308 <mode_Tuning0+0x650>
 80161ea:	f7ec fef7 	bl	8002fdc <straight_table2>
			//pl_r_blue_LED(ON);
			//pl_l_blue_LED(ON);
			//no_frontwall_straight();
			//pl_r_blue_LED(OFF);
			//pl_l_blue_LED(OFF);
		break;
 80161ee:	e04d      	b.n	801628c <mode_Tuning0+0x5d4>
		case 14://宴会芸＋吸引
//			record_mode=2;
//			for(int i=0;i<40;i++){
//			turning_table2(90, 0, 0, 930, 11000);
//			}
			highspeed_mode = 1;
 80161f0:	4b49      	ldr	r3, [pc, #292]	; (8016318 <mode_Tuning0+0x660>)
 80161f2:	2201      	movs	r2, #1
 80161f4:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.99);
 80161f6:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801631c <mode_Tuning0+0x664>
 80161fa:	f7f1 fc03 	bl	8007a04 <pl_FunMotor_duty>
			pl_FunMotor_start();
 80161fe:	f7f1 fbed 	bl	80079dc <pl_FunMotor_start>
			HAL_Delay(600);
 8016202:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016206:	f002 fced 	bl	8018be4 <HAL_Delay>
			reset_gyro();
 801620a:	f7eb faad 	bl	8001768 <reset_gyro>
			reset_speed();
 801620e:	f7ea ff03 	bl	8001018 <reset_speed>
			reset_distance();
 8016212:	f7ea fec3 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8016216:	f7ee f9c5 	bl	80045a4 <clear_Ierror>
			record_mode=3;
 801621a:	4b39      	ldr	r3, [pc, #228]	; (8016300 <mode_Tuning0+0x648>)
 801621c:	2203      	movs	r2, #3
 801621e:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8016220:	2301      	movs	r3, #1
 8016222:	753b      	strb	r3, [r7, #20]
			straight_table2(90*8, 0, 0, 3200, 14000,mode);
 8016224:	6978      	ldr	r0, [r7, #20]
 8016226:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016320 <mode_Tuning0+0x668>
 801622a:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016324 <mode_Tuning0+0x66c>
 801622e:	ed9f 1a37 	vldr	s2, [pc, #220]	; 801630c <mode_Tuning0+0x654>
 8016232:	eddf 0a36 	vldr	s1, [pc, #216]	; 801630c <mode_Tuning0+0x654>
 8016236:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016328 <mode_Tuning0+0x670>
 801623a:	f7ec fecf 	bl	8002fdc <straight_table2>
		break;
 801623e:	e025      	b.n	801628c <mode_Tuning0+0x5d4>
		case 15:
			highspeed_mode = 1;
 8016240:	4b35      	ldr	r3, [pc, #212]	; (8016318 <mode_Tuning0+0x660>)
 8016242:	2201      	movs	r2, #1
 8016244:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 8016246:	ed9f 0a39 	vldr	s0, [pc, #228]	; 801632c <mode_Tuning0+0x674>
 801624a:	f7f1 fbdb 	bl	8007a04 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 801624e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8016252:	f002 fcc7 	bl	8018be4 <HAL_Delay>
						reset_gyro();
 8016256:	f7eb fa87 	bl	8001768 <reset_gyro>
						reset_speed();
 801625a:	f7ea fedd 	bl	8001018 <reset_speed>
						reset_distance();
 801625e:	f7ea fe9d 	bl	8000f9c <reset_distance>
						clear_Ierror();
 8016262:	f7ee f99f 	bl	80045a4 <clear_Ierror>
						record_mode=3;
 8016266:	4b26      	ldr	r3, [pc, #152]	; (8016300 <mode_Tuning0+0x648>)
 8016268:	2203      	movs	r2, #3
 801626a:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 801626c:	2301      	movs	r3, #1
 801626e:	753b      	strb	r3, [r7, #20]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8016270:	6978      	ldr	r0, [r7, #20]
 8016272:	ed9f 2a2f 	vldr	s4, [pc, #188]	; 8016330 <mode_Tuning0+0x678>
 8016276:	eddf 1a2f 	vldr	s3, [pc, #188]	; 8016334 <mode_Tuning0+0x67c>
 801627a:	ed9f 1a24 	vldr	s2, [pc, #144]	; 801630c <mode_Tuning0+0x654>
 801627e:	eddf 0a23 	vldr	s1, [pc, #140]	; 801630c <mode_Tuning0+0x654>
 8016282:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8016328 <mode_Tuning0+0x670>
 8016286:	f7ec fea9 	bl	8002fdc <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 801628a:	bf00      	nop
	}
	record_mode=0;
 801628c:	4b1c      	ldr	r3, [pc, #112]	; (8016300 <mode_Tuning0+0x648>)
 801628e:	2200      	movs	r2, #0
 8016290:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016292:	2003      	movs	r0, #3
 8016294:	f7f1 fb4a 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016298:	2003      	movs	r0, #3
 801629a:	f7f1 fb1f 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 801629e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80162a2:	f7f1 fe41 	bl	8007f28 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80162a6:	f7f1 fba3 	bl	80079f0 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 80162aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80162ae:	f7f1 fe3b 	bl	8007f28 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 80162b2:	2000      	movs	r0, #0
 80162b4:	f7f1 fb08 	bl	80078c8 <pl_DriveMotor_standby>
	record_mode=0;
 80162b8:	4b11      	ldr	r3, [pc, #68]	; (8016300 <mode_Tuning0+0x648>)
 80162ba:	2200      	movs	r2, #0
 80162bc:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80162be:	e002      	b.n	80162c6 <mode_Tuning0+0x60e>
		HAL_Delay(1);
 80162c0:	2001      	movs	r0, #1
 80162c2:	f002 fc8f 	bl	8018be4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80162c6:	4b1c      	ldr	r3, [pc, #112]	; (8016338 <mode_Tuning0+0x680>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80162ce:	ddf7      	ble.n	80162c0 <mode_Tuning0+0x608>
 80162d0:	4b19      	ldr	r3, [pc, #100]	; (8016338 <mode_Tuning0+0x680>)
 80162d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80162d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80162da:	ddf1      	ble.n	80162c0 <mode_Tuning0+0x608>
 80162dc:	4b16      	ldr	r3, [pc, #88]	; (8016338 <mode_Tuning0+0x680>)
 80162de:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80162e2:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80162e6:	ddeb      	ble.n	80162c0 <mode_Tuning0+0x608>
	}
	pl_r_blue_LED(ON);
 80162e8:	2001      	movs	r0, #1
 80162ea:	f7f0 fe49 	bl	8006f80 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 80162ee:	2001      	movs	r0, #1
 80162f0:	f7f0 fe58 	bl	8006fa4 <pl_l_blue_LED>
	record_print();
 80162f4:	f000 fd0c 	bl	8016d10 <record_print>



}
 80162f8:	bf00      	nop
 80162fa:	3724      	adds	r7, #36	; 0x24
 80162fc:	46bd      	mov	sp, r7
 80162fe:	bd90      	pop	{r4, r7, pc}
 8016300:	2000edc0 	.word	0x2000edc0
 8016304:	2000ef80 	.word	0x2000ef80
 8016308:	42340000 	.word	0x42340000
 801630c:	00000000 	.word	0x00000000
 8016310:	431b8000 	.word	0x431b8000
 8016314:	43960000 	.word	0x43960000
 8016318:	20000808 	.word	0x20000808
 801631c:	3f7d70a4 	.word	0x3f7d70a4
 8016320:	465ac000 	.word	0x465ac000
 8016324:	45480000 	.word	0x45480000
 8016328:	44340000 	.word	0x44340000
 801632c:	3f733333 	.word	0x3f733333
 8016330:	45dac000 	.word	0x45dac000
 8016334:	447a0000 	.word	0x447a0000
 8016338:	200002b8 	.word	0x200002b8

0801633c <mode_WallSensorTuning>:


void mode_WallSensorTuning(unsigned char main_modeR){
 801633c:	b580      	push	{r7, lr}
 801633e:	b084      	sub	sp, #16
 8016340:	af00      	add	r7, sp, #0
 8016342:	4603      	mov	r3, r0
 8016344:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8016346:	2300      	movs	r3, #0
 8016348:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 801634a:	2300      	movs	r3, #0
 801634c:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 801634e:	2300      	movs	r3, #0
 8016350:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 8016352:	2300      	movs	r3, #0
 8016354:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 8016356:	2001      	movs	r0, #1
 8016358:	f7f1 fab6 	bl	80078c8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 801635c:	2003      	movs	r0, #3
 801635e:	f7f1 fabd 	bl	80078dc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016362:	2003      	movs	r0, #3
 8016364:	f7f1 fae2 	bl	800792c <pl_R_DriveMotor_mode>
	reset_gyro();
 8016368:	f7eb f9fe 	bl	8001768 <reset_gyro>
	reset_speed();
 801636c:	f7ea fe54 	bl	8001018 <reset_speed>
	clear_Ierror();
 8016370:	f7ee f918 	bl	80045a4 <clear_Ierror>

	switch (main_modeR) {
 8016374:	79fb      	ldrb	r3, [r7, #7]
 8016376:	2b0f      	cmp	r3, #15
 8016378:	f200 81b0 	bhi.w	80166dc <mode_WallSensorTuning+0x3a0>
 801637c:	a201      	add	r2, pc, #4	; (adr r2, 8016384 <mode_WallSensorTuning+0x48>)
 801637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016382:	bf00      	nop
 8016384:	080163c5 	.word	0x080163c5
 8016388:	080163eb 	.word	0x080163eb
 801638c:	08016403 	.word	0x08016403
 8016390:	08016479 	.word	0x08016479
 8016394:	080164ef 	.word	0x080164ef
 8016398:	08016565 	.word	0x08016565
 801639c:	080165d5 	.word	0x080165d5
 80163a0:	080165fb 	.word	0x080165fb
 80163a4:	08016621 	.word	0x08016621
 80163a8:	08016647 	.word	0x08016647
 80163ac:	080166dd 	.word	0x080166dd
 80163b0:	080166dd 	.word	0x080166dd
 80163b4:	080166dd 	.word	0x080166dd
 80163b8:	080166dd 	.word	0x080166dd
 80163bc:	080166dd 	.word	0x080166dd
 80163c0:	0801666d 	.word	0x0801666d
		case 0://横壁追従制御
			record_mode=16;
 80163c4:	4bd2      	ldr	r3, [pc, #840]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80163c6:	2210      	movs	r2, #16
 80163c8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80163ca:	2301      	movs	r3, #1
 80163cc:	723b      	strb	r3, [r7, #8]
			straight_table2(180*8, 0, 0, 500, 5000,mode);
 80163ce:	68b8      	ldr	r0, [r7, #8]
 80163d0:	ed9f 2ad0 	vldr	s4, [pc, #832]	; 8016714 <mode_WallSensorTuning+0x3d8>
 80163d4:	eddf 1ad0 	vldr	s3, [pc, #832]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80163d8:	ed9f 1ad0 	vldr	s2, [pc, #832]	; 801671c <mode_WallSensorTuning+0x3e0>
 80163dc:	eddf 0acf 	vldr	s1, [pc, #828]	; 801671c <mode_WallSensorTuning+0x3e0>
 80163e0:	ed9f 0acf 	vldr	s0, [pc, #828]	; 8016720 <mode_WallSensorTuning+0x3e4>
 80163e4:	f7ec fdfa 	bl	8002fdc <straight_table2>
		break;
 80163e8:	e178      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 1://前壁制御
			for(int ii=0;ii<=20;ii++){
 80163ea:	2300      	movs	r3, #0
 80163ec:	60fb      	str	r3, [r7, #12]
 80163ee:	e004      	b.n	80163fa <mode_WallSensorTuning+0xbe>
			no_frontwall_straight();
 80163f0:	f7ed fdfe 	bl	8003ff0 <no_frontwall_straight>
			for(int ii=0;ii<=20;ii++){
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	3301      	adds	r3, #1
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	2b14      	cmp	r3, #20
 80163fe:	ddf7      	ble.n	80163f0 <mode_WallSensorTuning+0xb4>
			}
		break;
 8016400:	e16c      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 2://壁切れ90度
			record_mode = 7;
 8016402:	4bc3      	ldr	r3, [pc, #780]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 8016404:	2207      	movs	r2, #7
 8016406:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016408:	2300      	movs	r3, #0
 801640a:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 801640c:	2300      	movs	r3, #0
 801640e:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016410:	2300      	movs	r3, #0
 8016412:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016414:	2300      	movs	r3, #0
 8016416:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 135, 0, 300, 300,3000,mode);
 8016418:	68b8      	ldr	r0, [r7, #8]
 801641a:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801641e:	eddf 1ac2 	vldr	s3, [pc, #776]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016422:	ed9f 1ac1 	vldr	s2, [pc, #772]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016426:	eddf 0abd 	vldr	s1, [pc, #756]	; 801671c <mode_WallSensorTuning+0x3e0>
 801642a:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 801672c <mode_WallSensorTuning+0x3f0>
 801642e:	f7ec fdd5 	bl	8002fdc <straight_table2>
			mode.WallCutMode=1;
 8016432:	2301      	movs	r3, #1
 8016434:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016436:	2300      	movs	r3, #0
 8016438:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 801643a:	68b8      	ldr	r0, [r7, #8]
 801643c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8016724 <mode_WallSensorTuning+0x3e8>
 8016440:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016444:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016448:	eddf 0ab7 	vldr	s1, [pc, #732]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801644c:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8016730 <mode_WallSensorTuning+0x3f4>
 8016450:	f7ec fdc4 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016454:	2300      	movs	r3, #0
 8016456:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016458:	2300      	movs	r3, #0
 801645a:	72fb      	strb	r3, [r7, #11]
			straight_table2(45 + 22.5, 300, 0, 300,3000,mode);
 801645c:	68b8      	ldr	r0, [r7, #8]
 801645e:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016724 <mode_WallSensorTuning+0x3e8>
 8016462:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016466:	ed9f 1aad 	vldr	s2, [pc, #692]	; 801671c <mode_WallSensorTuning+0x3e0>
 801646a:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801646e:	ed9f 0ab1 	vldr	s0, [pc, #708]	; 8016734 <mode_WallSensorTuning+0x3f8>
 8016472:	f7ec fdb3 	bl	8002fdc <straight_table2>
		break;
 8016476:	e131      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 3://壁切れ45度//90°大回り
			record_mode = 8;
 8016478:	4ba5      	ldr	r3, [pc, #660]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 801647a:	2208      	movs	r2, #8
 801647c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 801647e:	2300      	movs	r3, #0
 8016480:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016482:	2300      	movs	r3, #0
 8016484:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016486:	2300      	movs	r3, #0
 8016488:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 801648a:	2300      	movs	r3, #0
 801648c:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 300, 300,3000,mode);
 801648e:	68b8      	ldr	r0, [r7, #8]
 8016490:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8016724 <mode_WallSensorTuning+0x3e8>
 8016494:	eddf 1aa4 	vldr	s3, [pc, #656]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016498:	ed9f 1aa3 	vldr	s2, [pc, #652]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801649c:	eddf 0a9f 	vldr	s1, [pc, #636]	; 801671c <mode_WallSensorTuning+0x3e0>
 80164a0:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8016738 <mode_WallSensorTuning+0x3fc>
 80164a4:	f7ec fd9a 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80164a8:	2302      	movs	r3, #2
 80164aa:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 80164ac:	2300      	movs	r3, #0
 80164ae:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5, 300, 300, 300,3000,mode);
 80164b0:	68b8      	ldr	r0, [r7, #8]
 80164b2:	ed9f 2a9c 	vldr	s4, [pc, #624]	; 8016724 <mode_WallSensorTuning+0x3e8>
 80164b6:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80164ba:	ed9f 1a9b 	vldr	s2, [pc, #620]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80164be:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80164c2:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 8016730 <mode_WallSensorTuning+0x3f4>
 80164c6:	f7ec fd89 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80164ca:	2300      	movs	r3, #0
 80164cc:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80164ce:	2300      	movs	r3, #0
 80164d0:	72fb      	strb	r3, [r7, #11]
			straight_table2(45+22.5, 300, 0, 300,3000,mode);
 80164d2:	68b8      	ldr	r0, [r7, #8]
 80164d4:	ed9f 2a93 	vldr	s4, [pc, #588]	; 8016724 <mode_WallSensorTuning+0x3e8>
 80164d8:	eddf 1a93 	vldr	s3, [pc, #588]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80164dc:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 801671c <mode_WallSensorTuning+0x3e0>
 80164e0:	eddf 0a91 	vldr	s1, [pc, #580]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80164e4:	ed9f 0a93 	vldr	s0, [pc, #588]	; 8016734 <mode_WallSensorTuning+0x3f8>
 80164e8:	f7ec fd78 	bl	8002fdc <straight_table2>
		break;
 80164ec:	e0f6      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 4://壁切れ45度斜め(考え中)
			record_mode = 8;
 80164ee:	4b88      	ldr	r3, [pc, #544]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80164f0:	2208      	movs	r2, #8
 80164f2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80164f4:	2300      	movs	r3, #0
 80164f6:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 80164f8:	2300      	movs	r3, #0
 80164fa:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 80164fc:	2300      	movs	r3, #0
 80164fe:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016500:	2300      	movs	r3, #0
 8016502:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT + 90*sqrt(2), 0, 300, 300,3000,mode);
 8016504:	68b8      	ldr	r0, [r7, #8]
 8016506:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801650a:	eddf 1a87 	vldr	s3, [pc, #540]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801650e:	ed9f 1a86 	vldr	s2, [pc, #536]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016512:	eddf 0a82 	vldr	s1, [pc, #520]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016516:	ed9f 0a89 	vldr	s0, [pc, #548]	; 801673c <mode_WallSensorTuning+0x400>
 801651a:	f7ec fd5f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 801651e:	2303      	movs	r3, #3
 8016520:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016522:	2300      	movs	r3, #0
 8016524:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016526:	68b8      	ldr	r0, [r7, #8]
 8016528:	ed9f 2a7e 	vldr	s4, [pc, #504]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801652c:	eddf 1a7e 	vldr	s3, [pc, #504]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016530:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016534:	eddf 0a7c 	vldr	s1, [pc, #496]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016538:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8016740 <mode_WallSensorTuning+0x404>
 801653c:	f7ec fd4e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016540:	2300      	movs	r3, #0
 8016542:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 8016544:	2300      	movs	r3, #0
 8016546:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 8016548:	68b8      	ldr	r0, [r7, #8]
 801654a:	ed9f 2a76 	vldr	s4, [pc, #472]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801654e:	eddf 1a76 	vldr	s3, [pc, #472]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016552:	ed9f 1a72 	vldr	s2, [pc, #456]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016556:	eddf 0a74 	vldr	s1, [pc, #464]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801655a:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 8016744 <mode_WallSensorTuning+0x408>
 801655e:	f7ec fd3d 	bl	8002fdc <straight_table2>
		break;
 8016562:	e0bb      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 5://壁切れ45度斜め(考え中)
			mode.WallControlMode=0;//3でもいいかも
 8016564:	2300      	movs	r3, #0
 8016566:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016568:	2300      	movs	r3, #0
 801656a:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 801656c:	2300      	movs	r3, #0
 801656e:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016570:	2300      	movs	r3, #0
 8016572:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER_SLANT+90*sqrt(2), 0, 300, 300,3000,mode);
 8016574:	68b8      	ldr	r0, [r7, #8]
 8016576:	ed9f 2a6b 	vldr	s4, [pc, #428]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801657a:	eddf 1a6b 	vldr	s3, [pc, #428]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801657e:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016582:	eddf 0a66 	vldr	s1, [pc, #408]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016586:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801673c <mode_WallSensorTuning+0x400>
 801658a:	f7ec fd27 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 801658e:	2304      	movs	r3, #4
 8016590:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 8016592:	2300      	movs	r3, #0
 8016594:	723b      	strb	r3, [r7, #8]
			straight_table2(22.5*sqrt(2), 300, 300, 300,3000,mode);
 8016596:	68b8      	ldr	r0, [r7, #8]
 8016598:	ed9f 2a62 	vldr	s4, [pc, #392]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801659c:	eddf 1a62 	vldr	s3, [pc, #392]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165a0:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165a4:	eddf 0a60 	vldr	s1, [pc, #384]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165a8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8016740 <mode_WallSensorTuning+0x404>
 80165ac:	f7ec fd16 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80165b0:	2300      	movs	r3, #0
 80165b2:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80165b4:	2300      	movs	r3, #0
 80165b6:	72fb      	strb	r3, [r7, #11]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 300, 0, 300,3000,mode);
 80165b8:	68b8      	ldr	r0, [r7, #8]
 80165ba:	ed9f 2a5a 	vldr	s4, [pc, #360]	; 8016724 <mode_WallSensorTuning+0x3e8>
 80165be:	eddf 1a5a 	vldr	s3, [pc, #360]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165c2:	ed9f 1a56 	vldr	s2, [pc, #344]	; 801671c <mode_WallSensorTuning+0x3e0>
 80165c6:	eddf 0a58 	vldr	s1, [pc, #352]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165ca:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 8016744 <mode_WallSensorTuning+0x408>
 80165ce:	f7ec fd05 	bl	8002fdc <straight_table2>
		break;
 80165d2:	e083      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 6://斜め直進(90)
			record_mode=9;
 80165d4:	4b4e      	ldr	r3, [pc, #312]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80165d6:	2209      	movs	r2, #9
 80165d8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80165da:	2300      	movs	r3, #0
 80165dc:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 80165de:	68b8      	ldr	r0, [r7, #8]
 80165e0:	ed9f 2a50 	vldr	s4, [pc, #320]	; 8016724 <mode_WallSensorTuning+0x3e8>
 80165e4:	eddf 1a50 	vldr	s3, [pc, #320]	; 8016728 <mode_WallSensorTuning+0x3ec>
 80165e8:	ed9f 1a4c 	vldr	s2, [pc, #304]	; 801671c <mode_WallSensorTuning+0x3e0>
 80165ec:	eddf 0a4b 	vldr	s1, [pc, #300]	; 801671c <mode_WallSensorTuning+0x3e0>
 80165f0:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8016748 <mode_WallSensorTuning+0x40c>
 80165f4:	f7ec fcf2 	bl	8002fdc <straight_table2>
		break;
 80165f8:	e070      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 7://斜め直進(45)
			record_mode=10;
 80165fa:	4b45      	ldr	r3, [pc, #276]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80165fc:	220a      	movs	r2, #10
 80165fe:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016600:	2300      	movs	r3, #0
 8016602:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 8016604:	68b8      	ldr	r0, [r7, #8]
 8016606:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8016724 <mode_WallSensorTuning+0x3e8>
 801660a:	eddf 1a47 	vldr	s3, [pc, #284]	; 8016728 <mode_WallSensorTuning+0x3ec>
 801660e:	ed9f 1a43 	vldr	s2, [pc, #268]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016612:	eddf 0a42 	vldr	s1, [pc, #264]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016616:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8016748 <mode_WallSensorTuning+0x40c>
 801661a:	f7ec fcdf 	bl	8002fdc <straight_table2>

		break;
 801661e:	e05d      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016620:	4b3b      	ldr	r3, [pc, #236]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 8016622:	2207      	movs	r2, #7
 8016624:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016626:	2303      	movs	r3, #3
 8016628:	723b      	strb	r3, [r7, #8]
			straight_table2(90*3*sqrt(2), 0, 0, 300, 3000,mode);
 801662a:	68b8      	ldr	r0, [r7, #8]
 801662c:	ed9f 2a3d 	vldr	s4, [pc, #244]	; 8016724 <mode_WallSensorTuning+0x3e8>
 8016630:	eddf 1a3d 	vldr	s3, [pc, #244]	; 8016728 <mode_WallSensorTuning+0x3ec>
 8016634:	ed9f 1a39 	vldr	s2, [pc, #228]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016638:	eddf 0a38 	vldr	s1, [pc, #224]	; 801671c <mode_WallSensorTuning+0x3e0>
 801663c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8016748 <mode_WallSensorTuning+0x40c>
 8016640:	f7ec fccc 	bl	8002fdc <straight_table2>
		break;
 8016644:	e04a      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 9:
			record_mode=8;
 8016646:	4b32      	ldr	r3, [pc, #200]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 8016648:	2208      	movs	r2, #8
 801664a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 801664c:	2303      	movs	r3, #3
 801664e:	723b      	strb	r3, [r7, #8]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 700, 10000,mode);
 8016650:	68b8      	ldr	r0, [r7, #8]
 8016652:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 801674c <mode_WallSensorTuning+0x410>
 8016656:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016750 <mode_WallSensorTuning+0x414>
 801665a:	ed9f 1a30 	vldr	s2, [pc, #192]	; 801671c <mode_WallSensorTuning+0x3e0>
 801665e:	eddf 0a2f 	vldr	s1, [pc, #188]	; 801671c <mode_WallSensorTuning+0x3e0>
 8016662:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016754 <mode_WallSensorTuning+0x418>
 8016666:	f7ec fcb9 	bl	8002fdc <straight_table2>
		break;
 801666a:	e037      	b.n	80166dc <mode_WallSensorTuning+0x3a0>
		case 10:
		break;
		case 11:
		break;
		case 15:
			mode.WallControlMode=5;
 801666c:	2305      	movs	r3, #5
 801666e:	723b      	strb	r3, [r7, #8]
			mode.WallControlStatus=0;
 8016670:	2300      	movs	r3, #0
 8016672:	727b      	strb	r3, [r7, #9]
			mode.WallCutMode=0;
 8016674:	2300      	movs	r3, #0
 8016676:	72fb      	strb	r3, [r7, #11]
			mode.calMazeMode=0;
 8016678:	2300      	movs	r3, #0
 801667a:	72bb      	strb	r3, [r7, #10]
			straight_table2(BACK_TO_CENTER + 180, 0, 500, 500,1500,mode);
 801667c:	68b8      	ldr	r0, [r7, #8]
 801667e:	ed9f 2a36 	vldr	s4, [pc, #216]	; 8016758 <mode_WallSensorTuning+0x41c>
 8016682:	eddf 1a25 	vldr	s3, [pc, #148]	; 8016718 <mode_WallSensorTuning+0x3dc>
 8016686:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016718 <mode_WallSensorTuning+0x3dc>
 801668a:	eddf 0a24 	vldr	s1, [pc, #144]	; 801671c <mode_WallSensorTuning+0x3e0>
 801668e:	ed9f 0a33 	vldr	s0, [pc, #204]	; 801675c <mode_WallSensorTuning+0x420>
 8016692:	f7ec fca3 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016696:	2302      	movs	r3, #2
 8016698:	72fb      	strb	r3, [r7, #11]
			mode.WallControlMode=0;
 801669a:	2300      	movs	r3, #0
 801669c:	723b      	strb	r3, [r7, #8]
			straight_table2(45, 500, 500, 500,1500,mode);
 801669e:	68b8      	ldr	r0, [r7, #8]
 80166a0:	ed9f 2a2d 	vldr	s4, [pc, #180]	; 8016758 <mode_WallSensorTuning+0x41c>
 80166a4:	eddf 1a1c 	vldr	s3, [pc, #112]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80166a8:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80166ac:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80166b0:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8016760 <mode_WallSensorTuning+0x424>
 80166b4:	f7ec fc92 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80166b8:	2300      	movs	r3, #0
 80166ba:	723b      	strb	r3, [r7, #8]
			mode.WallCutMode=0;
 80166bc:	2300      	movs	r3, #0
 80166be:	72fb      	strb	r3, [r7, #11]
			straight_table2(90+45, 500, 0, 500,1500,mode);
 80166c0:	68b8      	ldr	r0, [r7, #8]
 80166c2:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8016758 <mode_WallSensorTuning+0x41c>
 80166c6:	eddf 1a14 	vldr	s3, [pc, #80]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80166ca:	ed9f 1a14 	vldr	s2, [pc, #80]	; 801671c <mode_WallSensorTuning+0x3e0>
 80166ce:	eddf 0a12 	vldr	s1, [pc, #72]	; 8016718 <mode_WallSensorTuning+0x3dc>
 80166d2:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8016764 <mode_WallSensorTuning+0x428>
 80166d6:	f7ec fc81 	bl	8002fdc <straight_table2>
		break;
 80166da:	bf00      	nop
	}
	record_mode=0;
 80166dc:	4b0c      	ldr	r3, [pc, #48]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80166de:	2200      	movs	r2, #0
 80166e0:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80166e2:	2003      	movs	r0, #3
 80166e4:	f7f1 f922 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80166e8:	2003      	movs	r0, #3
 80166ea:	f7f1 f8f7 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 80166ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80166f2:	f7f1 fc19 	bl	8007f28 <wait_ms_NoReset>
	pl_FunMotor_stop();
 80166f6:	f7f1 f97b 	bl	80079f0 <pl_FunMotor_stop>
	record_mode=0;
 80166fa:	4b05      	ldr	r3, [pc, #20]	; (8016710 <mode_WallSensorTuning+0x3d4>)
 80166fc:	2200      	movs	r2, #0
 80166fe:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016700:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016704:	f7f1 fc10 	bl	8007f28 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016708:	2000      	movs	r0, #0
 801670a:	f7f1 f8dd 	bl	80078c8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801670e:	e02e      	b.n	801676e <mode_WallSensorTuning+0x432>
 8016710:	2000edc0 	.word	0x2000edc0
 8016714:	459c4000 	.word	0x459c4000
 8016718:	43fa0000 	.word	0x43fa0000
 801671c:	00000000 	.word	0x00000000
 8016720:	44b40000 	.word	0x44b40000
 8016724:	453b8000 	.word	0x453b8000
 8016728:	43960000 	.word	0x43960000
 801672c:	431b8000 	.word	0x431b8000
 8016730:	41b40000 	.word	0x41b40000
 8016734:	42870000 	.word	0x42870000
 8016738:	42cd0000 	.word	0x42cd0000
 801673c:	4329c77b 	.word	0x4329c77b
 8016740:	41fe8ef6 	.word	0x41fe8ef6
 8016744:	42beeb39 	.word	0x42beeb39
 8016748:	43beeb39 	.word	0x43beeb39
 801674c:	461c4000 	.word	0x461c4000
 8016750:	442f0000 	.word	0x442f0000
 8016754:	4484977b 	.word	0x4484977b
 8016758:	44bb8000 	.word	0x44bb8000
 801675c:	43488000 	.word	0x43488000
 8016760:	42340000 	.word	0x42340000
 8016764:	43070000 	.word	0x43070000
		HAL_Delay(1);
 8016768:	2001      	movs	r0, #1
 801676a:	f002 fa3b 	bl	8018be4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 801676e:	4b0e      	ldr	r3, [pc, #56]	; (80167a8 <mode_WallSensorTuning+0x46c>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016776:	ddf7      	ble.n	8016768 <mode_WallSensorTuning+0x42c>
 8016778:	4b0b      	ldr	r3, [pc, #44]	; (80167a8 <mode_WallSensorTuning+0x46c>)
 801677a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801677e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016782:	ddf1      	ble.n	8016768 <mode_WallSensorTuning+0x42c>
 8016784:	4b08      	ldr	r3, [pc, #32]	; (80167a8 <mode_WallSensorTuning+0x46c>)
 8016786:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 801678a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 801678e:	ddeb      	ble.n	8016768 <mode_WallSensorTuning+0x42c>
	}
	pl_r_blue_LED(ON);
 8016790:	2001      	movs	r0, #1
 8016792:	f7f0 fbf5 	bl	8006f80 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016796:	2001      	movs	r0, #1
 8016798:	f7f0 fc04 	bl	8006fa4 <pl_l_blue_LED>
	record_print();
 801679c:	f000 fab8 	bl	8016d10 <record_print>



}
 80167a0:	bf00      	nop
 80167a2:	3710      	adds	r7, #16
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	200002b8 	.word	0x200002b8

080167ac <mode_WallSensorTuning_fast>:





void mode_WallSensorTuning_fast(unsigned char main_modeR){
 80167ac:	b580      	push	{r7, lr}
 80167ae:	b084      	sub	sp, #16
 80167b0:	af00      	add	r7, sp, #0
 80167b2:	4603      	mov	r3, r0
 80167b4:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 80167b6:	2300      	movs	r3, #0
 80167b8:	733b      	strb	r3, [r7, #12]
	mode.WallControlStatus=0;
 80167ba:	2300      	movs	r3, #0
 80167bc:	737b      	strb	r3, [r7, #13]
	mode.WallCutMode=0;
 80167be:	2300      	movs	r3, #0
 80167c0:	73fb      	strb	r3, [r7, #15]
	mode.calMazeMode=0;
 80167c2:	2300      	movs	r3, #0
 80167c4:	73bb      	strb	r3, [r7, #14]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_DriveMotor_standby(ON);
 80167c6:	2001      	movs	r0, #1
 80167c8:	f7f1 f87e 	bl	80078c8 <pl_DriveMotor_standby>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 80167cc:	2003      	movs	r0, #3
 80167ce:	f7f1 f885 	bl	80078dc <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 80167d2:	2003      	movs	r0, #3
 80167d4:	f7f1 f8aa 	bl	800792c <pl_R_DriveMotor_mode>
	pl_FunMotor_duty(0.99);
 80167d8:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 8016b40 <mode_WallSensorTuning_fast+0x394>
 80167dc:	f7f1 f912 	bl	8007a04 <pl_FunMotor_duty>
	pl_FunMotor_start();
 80167e0:	f7f1 f8fc 	bl	80079dc <pl_FunMotor_start>
	HAL_Delay(600);
 80167e4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80167e8:	f002 f9fc 	bl	8018be4 <HAL_Delay>
	reset_gyro();
 80167ec:	f7ea ffbc 	bl	8001768 <reset_gyro>
	reset_speed();
 80167f0:	f7ea fc12 	bl	8001018 <reset_speed>
	clear_Ierror();
 80167f4:	f7ed fed6 	bl	80045a4 <clear_Ierror>
	angle=0;
 80167f8:	4bd2      	ldr	r3, [pc, #840]	; (8016b44 <mode_WallSensorTuning_fast+0x398>)
 80167fa:	f04f 0200 	mov.w	r2, #0
 80167fe:	601a      	str	r2, [r3, #0]

	switch (main_modeR) {
 8016800:	79fb      	ldrb	r3, [r7, #7]
 8016802:	2b0f      	cmp	r3, #15
 8016804:	f200 81e1 	bhi.w	8016bca <mode_WallSensorTuning_fast+0x41e>
 8016808:	a201      	add	r2, pc, #4	; (adr r2, 8016810 <mode_WallSensorTuning_fast+0x64>)
 801680a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801680e:	bf00      	nop
 8016810:	08016851 	.word	0x08016851
 8016814:	08016bcb 	.word	0x08016bcb
 8016818:	08016883 	.word	0x08016883
 801681c:	080168f9 	.word	0x080168f9
 8016820:	0801696f 	.word	0x0801696f
 8016824:	080169e5 	.word	0x080169e5
 8016828:	08016a5b 	.word	0x08016a5b
 801682c:	08016a81 	.word	0x08016a81
 8016830:	08016aa7 	.word	0x08016aa7
 8016834:	08016acd 	.word	0x08016acd
 8016838:	08016af3 	.word	0x08016af3
 801683c:	08016b19 	.word	0x08016b19
 8016840:	08016ba5 	.word	0x08016ba5
 8016844:	08016bcb 	.word	0x08016bcb
 8016848:	08016bcb 	.word	0x08016bcb
 801684c:	08016bcb 	.word	0x08016bcb
		case 0://横壁追従制御
			record_mode=15;
 8016850:	4bbd      	ldr	r3, [pc, #756]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016852:	220f      	movs	r2, #15
 8016854:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016856:	2301      	movs	r3, #1
 8016858:	733b      	strb	r3, [r7, #12]
			highspeed_mode=1;
 801685a:	4bbc      	ldr	r3, [pc, #752]	; (8016b4c <mode_WallSensorTuning_fast+0x3a0>)
 801685c:	2201      	movs	r2, #1
 801685e:	701a      	strb	r2, [r3, #0]
			straight_table2(BACK_TO_CENTER+180*10, 0, 0, 5000, 24000,mode);
 8016860:	68f8      	ldr	r0, [r7, #12]
 8016862:	ed9f 2abb 	vldr	s4, [pc, #748]	; 8016b50 <mode_WallSensorTuning_fast+0x3a4>
 8016866:	eddf 1abb 	vldr	s3, [pc, #748]	; 8016b54 <mode_WallSensorTuning_fast+0x3a8>
 801686a:	ed9f 1abb 	vldr	s2, [pc, #748]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 801686e:	eddf 0aba 	vldr	s1, [pc, #744]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016872:	ed9f 0aba 	vldr	s0, [pc, #744]	; 8016b5c <mode_WallSensorTuning_fast+0x3b0>
 8016876:	f7ec fbb1 	bl	8002fdc <straight_table2>
			highspeed_mode=0;
 801687a:	4bb4      	ldr	r3, [pc, #720]	; (8016b4c <mode_WallSensorTuning_fast+0x3a0>)
 801687c:	2200      	movs	r2, #0
 801687e:	701a      	strb	r2, [r3, #0]
		break;
 8016880:	e1a3      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 1://なし
		break;
		case 2://なし
			record_mode=8;
 8016882:	4bb1      	ldr	r3, [pc, #708]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016884:	2208      	movs	r2, #8
 8016886:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8016888:	2301      	movs	r3, #1
 801688a:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 801688c:	2300      	movs	r3, #0
 801688e:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016890:	2300      	movs	r3, #0
 8016892:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016894:	2300      	movs	r3, #0
 8016896:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 600, 600,15000,mode);
 8016898:	68f8      	ldr	r0, [r7, #12]
 801689a:	ed9f 2ab1 	vldr	s4, [pc, #708]	; 8016b60 <mode_WallSensorTuning_fast+0x3b4>
 801689e:	eddf 1ab1 	vldr	s3, [pc, #708]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168a2:	ed9f 1ab0 	vldr	s2, [pc, #704]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168a6:	eddf 0aac 	vldr	s1, [pc, #688]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 80168aa:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 8016b68 <mode_WallSensorTuning_fast+0x3bc>
 80168ae:	f7ec fb95 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 80168b2:	2302      	movs	r3, #2
 80168b4:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80168b6:	2300      	movs	r3, #0
 80168b8:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 600, 600, 600,15000,mode);
 80168ba:	68f8      	ldr	r0, [r7, #12]
 80168bc:	ed9f 2aa8 	vldr	s4, [pc, #672]	; 8016b60 <mode_WallSensorTuning_fast+0x3b4>
 80168c0:	eddf 1aa8 	vldr	s3, [pc, #672]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168c4:	ed9f 1aa7 	vldr	s2, [pc, #668]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168c8:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168cc:	ed9f 0aa7 	vldr	s0, [pc, #668]	; 8016b6c <mode_WallSensorTuning_fast+0x3c0>
 80168d0:	f7ec fb84 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 80168d4:	2301      	movs	r3, #1
 80168d6:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80168d8:	2300      	movs	r3, #0
 80168da:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 600, 0, 600,15000,mode);
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	ed9f 2aa0 	vldr	s4, [pc, #640]	; 8016b60 <mode_WallSensorTuning_fast+0x3b4>
 80168e2:	eddf 1aa0 	vldr	s3, [pc, #640]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168e6:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 80168ea:	eddf 0a9e 	vldr	s1, [pc, #632]	; 8016b64 <mode_WallSensorTuning_fast+0x3b8>
 80168ee:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 8016b70 <mode_WallSensorTuning_fast+0x3c4>
 80168f2:	f7ec fb73 	bl	8002fdc <straight_table2>
		break;
 80168f6:	e168      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 3://壁切れ45度//90°大回り
			record_mode=8;
 80168f8:	4b93      	ldr	r3, [pc, #588]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 80168fa:	2208      	movs	r2, #8
 80168fc:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 80168fe:	2301      	movs	r3, #1
 8016900:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016902:	2300      	movs	r3, #0
 8016904:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 8016906:	2300      	movs	r3, #0
 8016908:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 801690a:	2300      	movs	r3, #0
 801690c:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT + 90, 0, 1000, 1000,10000,mode);
 801690e:	68f8      	ldr	r0, [r7, #12]
 8016910:	ed9f 2a98 	vldr	s4, [pc, #608]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016914:	eddf 1a98 	vldr	s3, [pc, #608]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016918:	ed9f 1a97 	vldr	s2, [pc, #604]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 801691c:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016920:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8016b68 <mode_WallSensorTuning_fast+0x3bc>
 8016924:	f7ec fb5a 	bl	8002fdc <straight_table2>
			mode.WallCutMode=2;
 8016928:	2302      	movs	r3, #2
 801692a:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 801692c:	2300      	movs	r3, #0
 801692e:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5, 1000, 1000, 1000,10000,mode);
 8016930:	68f8      	ldr	r0, [r7, #12]
 8016932:	ed9f 2a90 	vldr	s4, [pc, #576]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016936:	eddf 1a90 	vldr	s3, [pc, #576]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 801693a:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 801693e:	eddf 0a8e 	vldr	s1, [pc, #568]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016942:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 8016b6c <mode_WallSensorTuning_fast+0x3c0>
 8016946:	f7ec fb49 	bl	8002fdc <straight_table2>
			mode.WallControlMode=1;
 801694a:	2301      	movs	r3, #1
 801694c:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 801694e:	2300      	movs	r3, #0
 8016950:	73fb      	strb	r3, [r7, #15]
			straight_table2(90+22.5, 1000, 0, 1000,10000,mode);
 8016952:	68f8      	ldr	r0, [r7, #12]
 8016954:	ed9f 2a87 	vldr	s4, [pc, #540]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016958:	eddf 1a87 	vldr	s3, [pc, #540]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 801695c:	ed9f 1a7e 	vldr	s2, [pc, #504]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016960:	eddf 0a85 	vldr	s1, [pc, #532]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016964:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8016b70 <mode_WallSensorTuning_fast+0x3c4>
 8016968:	f7ec fb38 	bl	8002fdc <straight_table2>
		break;
 801696c:	e12d      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 4://壁切れ45度斜め(考え中)右
			record_mode=8;
 801696e:	4b76      	ldr	r3, [pc, #472]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016970:	2208      	movs	r2, #8
 8016972:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 8016974:	2300      	movs	r3, #0
 8016976:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 8016978:	2300      	movs	r3, #0
 801697a:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 801697c:	2300      	movs	r3, #0
 801697e:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 8016980:	2300      	movs	r3, #0
 8016982:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT + 90*sqrt(2), 0, 1000, 1000,10000,mode);
 8016984:	68f8      	ldr	r0, [r7, #12]
 8016986:	ed9f 2a7b 	vldr	s4, [pc, #492]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 801698a:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 801698e:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016992:	eddf 0a71 	vldr	s1, [pc, #452]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016996:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8016b7c <mode_WallSensorTuning_fast+0x3d0>
 801699a:	f7ec fb1f 	bl	8002fdc <straight_table2>
			mode.WallCutMode=3;
 801699e:	2303      	movs	r3, #3
 80169a0:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 80169a2:	2300      	movs	r3, #0
 80169a4:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 80169a6:	68f8      	ldr	r0, [r7, #12]
 80169a8:	ed9f 2a72 	vldr	s4, [pc, #456]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 80169ac:	eddf 1a72 	vldr	s3, [pc, #456]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 80169b0:	ed9f 1a71 	vldr	s2, [pc, #452]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 80169b4:	eddf 0a70 	vldr	s1, [pc, #448]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 80169b8:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8016b80 <mode_WallSensorTuning_fast+0x3d4>
 80169bc:	f7ec fb0e 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 80169c0:	2300      	movs	r3, #0
 80169c2:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 80169c4:	2300      	movs	r3, #0
 80169c6:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 80169c8:	68f8      	ldr	r0, [r7, #12]
 80169ca:	ed9f 2a6a 	vldr	s4, [pc, #424]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 80169ce:	eddf 1a6a 	vldr	s3, [pc, #424]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 80169d2:	ed9f 1a61 	vldr	s2, [pc, #388]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 80169d6:	eddf 0a68 	vldr	s1, [pc, #416]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 80169da:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8016b84 <mode_WallSensorTuning_fast+0x3d8>
 80169de:	f7ec fafd 	bl	8002fdc <straight_table2>
		break;
 80169e2:	e0f2      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 5://壁切れ45度斜め(考え中)左
			record_mode=8;
 80169e4:	4b58      	ldr	r3, [pc, #352]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 80169e6:	2208      	movs	r2, #8
 80169e8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;//3でもいいかも
 80169ea:	2300      	movs	r3, #0
 80169ec:	733b      	strb	r3, [r7, #12]
			mode.WallControlStatus=0;
 80169ee:	2300      	movs	r3, #0
 80169f0:	737b      	strb	r3, [r7, #13]
			mode.WallCutMode=0;
 80169f2:	2300      	movs	r3, #0
 80169f4:	73fb      	strb	r3, [r7, #15]
			mode.calMazeMode=0;
 80169f6:	2300      	movs	r3, #0
 80169f8:	73bb      	strb	r3, [r7, #14]
			straight_table2(BACK_TO_CENTER_FRONT_SLANT+90*sqrt(2), 0, 1000, 1000,10000,mode);
 80169fa:	68f8      	ldr	r0, [r7, #12]
 80169fc:	ed9f 2a5d 	vldr	s4, [pc, #372]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016a00:	eddf 1a5d 	vldr	s3, [pc, #372]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a04:	ed9f 1a5c 	vldr	s2, [pc, #368]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a08:	eddf 0a53 	vldr	s1, [pc, #332]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a0c:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8016b7c <mode_WallSensorTuning_fast+0x3d0>
 8016a10:	f7ec fae4 	bl	8002fdc <straight_table2>
			mode.WallCutMode=4;
 8016a14:	2304      	movs	r3, #4
 8016a16:	73fb      	strb	r3, [r7, #15]
			mode.WallControlMode=0;
 8016a18:	2300      	movs	r3, #0
 8016a1a:	733b      	strb	r3, [r7, #12]
			straight_table2(22.5*sqrt(2), 1000, 1000, 1000,10000,mode);
 8016a1c:	68f8      	ldr	r0, [r7, #12]
 8016a1e:	ed9f 2a55 	vldr	s4, [pc, #340]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016a22:	eddf 1a55 	vldr	s3, [pc, #340]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a26:	ed9f 1a54 	vldr	s2, [pc, #336]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a2a:	eddf 0a53 	vldr	s1, [pc, #332]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a2e:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8016b80 <mode_WallSensorTuning_fast+0x3d4>
 8016a32:	f7ec fad3 	bl	8002fdc <straight_table2>
			mode.WallControlMode=0;
 8016a36:	2300      	movs	r3, #0
 8016a38:	733b      	strb	r3, [r7, #12]
			mode.WallCutMode=0;
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	73fb      	strb	r3, [r7, #15]
			straight_table2(45*sqrt(2) + 22.5*sqrt(2), 1000, 0, 1000,10000,mode);
 8016a3e:	68f8      	ldr	r0, [r7, #12]
 8016a40:	ed9f 2a4c 	vldr	s4, [pc, #304]	; 8016b74 <mode_WallSensorTuning_fast+0x3c8>
 8016a44:	eddf 1a4c 	vldr	s3, [pc, #304]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a48:	ed9f 1a43 	vldr	s2, [pc, #268]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a4c:	eddf 0a4a 	vldr	s1, [pc, #296]	; 8016b78 <mode_WallSensorTuning_fast+0x3cc>
 8016a50:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8016b84 <mode_WallSensorTuning_fast+0x3d8>
 8016a54:	f7ec fac2 	bl	8002fdc <straight_table2>
		break;
 8016a58:	e0b7      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 6://斜め直進(制御あり)
			record_mode=7;
 8016a5a:	4b3b      	ldr	r3, [pc, #236]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016a5c:	2207      	movs	r2, #7
 8016a5e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016a60:	2300      	movs	r3, #0
 8016a62:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	ed9f 2a48 	vldr	s4, [pc, #288]	; 8016b88 <mode_WallSensorTuning_fast+0x3dc>
 8016a6a:	eddf 1a48 	vldr	s3, [pc, #288]	; 8016b8c <mode_WallSensorTuning_fast+0x3e0>
 8016a6e:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a72:	eddf 0a39 	vldr	s1, [pc, #228]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a76:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8016b90 <mode_WallSensorTuning_fast+0x3e4>
 8016a7a:	f7ec faaf 	bl	8002fdc <straight_table2>
		break;
 8016a7e:	e0a4      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=9;
 8016a80:	4b31      	ldr	r3, [pc, #196]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016a82:	2209      	movs	r2, #9
 8016a84:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8016a86:	2300      	movs	r3, #0
 8016a88:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2)+90*sqrt(2), 0, 0, 2000, 20000,mode);
 8016a8a:	68f8      	ldr	r0, [r7, #12]
 8016a8c:	ed9f 2a3e 	vldr	s4, [pc, #248]	; 8016b88 <mode_WallSensorTuning_fast+0x3dc>
 8016a90:	eddf 1a3e 	vldr	s3, [pc, #248]	; 8016b8c <mode_WallSensorTuning_fast+0x3e0>
 8016a94:	ed9f 1a30 	vldr	s2, [pc, #192]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a98:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016a9c:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8016b90 <mode_WallSensorTuning_fast+0x3e4>
 8016aa0:	f7ec fa9c 	bl	8002fdc <straight_table2>

		break;
 8016aa4:	e091      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 8://斜め直進(平松さん式制御あり)
			record_mode=7;
 8016aa6:	4b28      	ldr	r3, [pc, #160]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016aa8:	2207      	movs	r2, #7
 8016aaa:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016aac:	2303      	movs	r3, #3
 8016aae:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016ab0:	68f8      	ldr	r0, [r7, #12]
 8016ab2:	ed9f 2a35 	vldr	s4, [pc, #212]	; 8016b88 <mode_WallSensorTuning_fast+0x3dc>
 8016ab6:	eddf 1a37 	vldr	s3, [pc, #220]	; 8016b94 <mode_WallSensorTuning_fast+0x3e8>
 8016aba:	ed9f 1a27 	vldr	s2, [pc, #156]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016abe:	eddf 0a26 	vldr	s1, [pc, #152]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016ac2:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8016b98 <mode_WallSensorTuning_fast+0x3ec>
 8016ac6:	f7ec fa89 	bl	8002fdc <straight_table2>
		break;
 8016aca:	e07e      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 9:
			record_mode=8;
 8016acc:	4b1e      	ldr	r3, [pc, #120]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016ace:	2208      	movs	r2, #8
 8016ad0:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016ad2:	2303      	movs	r3, #3
 8016ad4:	733b      	strb	r3, [r7, #12]
			straight_table2(BACK_TO_CENTER_SLANT+180*4*sqrt(2), 0, 0, 3500, 20000,mode);
 8016ad6:	68f8      	ldr	r0, [r7, #12]
 8016ad8:	ed9f 2a2b 	vldr	s4, [pc, #172]	; 8016b88 <mode_WallSensorTuning_fast+0x3dc>
 8016adc:	eddf 1a2d 	vldr	s3, [pc, #180]	; 8016b94 <mode_WallSensorTuning_fast+0x3e8>
 8016ae0:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016ae4:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016ae8:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8016b9c <mode_WallSensorTuning_fast+0x3f0>
 8016aec:	f7ec fa76 	bl	8002fdc <straight_table2>
		break;
 8016af0:	e06b      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 10:
			record_mode=10;
 8016af2:	4b15      	ldr	r3, [pc, #84]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016af4:	220a      	movs	r2, #10
 8016af6:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016af8:	2303      	movs	r3, #3
 8016afa:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3500, 20000,mode);
 8016afc:	68f8      	ldr	r0, [r7, #12]
 8016afe:	ed9f 2a22 	vldr	s4, [pc, #136]	; 8016b88 <mode_WallSensorTuning_fast+0x3dc>
 8016b02:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016b94 <mode_WallSensorTuning_fast+0x3e8>
 8016b06:	ed9f 1a14 	vldr	s2, [pc, #80]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016b0a:	eddf 0a13 	vldr	s1, [pc, #76]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016b0e:	ed9f 0a22 	vldr	s0, [pc, #136]	; 8016b98 <mode_WallSensorTuning_fast+0x3ec>
 8016b12:	f7ec fa63 	bl	8002fdc <straight_table2>
		break;
 8016b16:	e058      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
		case 11:
			record_mode=11;
 8016b18:	4b0b      	ldr	r3, [pc, #44]	; (8016b48 <mode_WallSensorTuning_fast+0x39c>)
 8016b1a:	220b      	movs	r2, #11
 8016b1c:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016b1e:	2303      	movs	r3, #3
 8016b20:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016b22:	68f8      	ldr	r0, [r7, #12]
 8016b24:	ed9f 2a0e 	vldr	s4, [pc, #56]	; 8016b60 <mode_WallSensorTuning_fast+0x3b4>
 8016b28:	eddf 1a1d 	vldr	s3, [pc, #116]	; 8016ba0 <mode_WallSensorTuning_fast+0x3f4>
 8016b2c:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016b30:	eddf 0a09 	vldr	s1, [pc, #36]	; 8016b58 <mode_WallSensorTuning_fast+0x3ac>
 8016b34:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8016b98 <mode_WallSensorTuning_fast+0x3ec>
 8016b38:	f7ec fa50 	bl	8002fdc <straight_table2>
		break;
 8016b3c:	e045      	b.n	8016bca <mode_WallSensorTuning_fast+0x41e>
 8016b3e:	bf00      	nop
 8016b40:	3f7d70a4 	.word	0x3f7d70a4
 8016b44:	20000264 	.word	0x20000264
 8016b48:	2000edc0 	.word	0x2000edc0
 8016b4c:	20000808 	.word	0x20000808
 8016b50:	46bb8000 	.word	0x46bb8000
 8016b54:	459c4000 	.word	0x459c4000
 8016b58:	00000000 	.word	0x00000000
 8016b5c:	44e39000 	.word	0x44e39000
 8016b60:	466a6000 	.word	0x466a6000
 8016b64:	44160000 	.word	0x44160000
 8016b68:	42cd0000 	.word	0x42cd0000
 8016b6c:	41b40000 	.word	0x41b40000
 8016b70:	42e10000 	.word	0x42e10000
 8016b74:	461c4000 	.word	0x461c4000
 8016b78:	447a0000 	.word	0x447a0000
 8016b7c:	4321c77b 	.word	0x4321c77b
 8016b80:	41fe8ef6 	.word	0x41fe8ef6
 8016b84:	42beeb39 	.word	0x42beeb39
 8016b88:	469c4000 	.word	0x469c4000
 8016b8c:	44fa0000 	.word	0x44fa0000
 8016b90:	445ebd17 	.word	0x445ebd17
 8016b94:	455ac000 	.word	0x455ac000
 8016b98:	443eeb39 	.word	0x443eeb39
 8016b9c:	4484977b 	.word	0x4484977b
 8016ba0:	453b8000 	.word	0x453b8000
		case 12:
			record_mode=12;
 8016ba4:	4b26      	ldr	r3, [pc, #152]	; (8016c40 <mode_WallSensorTuning_fast+0x494>)
 8016ba6:	220c      	movs	r2, #12
 8016ba8:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8016baa:	2303      	movs	r3, #3
 8016bac:	733b      	strb	r3, [r7, #12]
			straight_table2(180*3*sqrt(2), 0, 0, 3000, 15000,mode);
 8016bae:	68f8      	ldr	r0, [r7, #12]
 8016bb0:	ed9f 2a24 	vldr	s4, [pc, #144]	; 8016c44 <mode_WallSensorTuning_fast+0x498>
 8016bb4:	eddf 1a24 	vldr	s3, [pc, #144]	; 8016c48 <mode_WallSensorTuning_fast+0x49c>
 8016bb8:	ed9f 1a24 	vldr	s2, [pc, #144]	; 8016c4c <mode_WallSensorTuning_fast+0x4a0>
 8016bbc:	eddf 0a23 	vldr	s1, [pc, #140]	; 8016c4c <mode_WallSensorTuning_fast+0x4a0>
 8016bc0:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8016c50 <mode_WallSensorTuning_fast+0x4a4>
 8016bc4:	f7ec fa0a 	bl	8002fdc <straight_table2>
		break;
 8016bc8:	bf00      	nop
		case 15:
		break;
	}
	record_mode=0;
 8016bca:	4b1d      	ldr	r3, [pc, #116]	; (8016c40 <mode_WallSensorTuning_fast+0x494>)
 8016bcc:	2200      	movs	r2, #0
 8016bce:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8016bd0:	2003      	movs	r0, #3
 8016bd2:	f7f0 feab 	bl	800792c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8016bd6:	2003      	movs	r0, #3
 8016bd8:	f7f0 fe80 	bl	80078dc <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8016bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016be0:	f7f1 f9a2 	bl	8007f28 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8016be4:	f7f0 ff04 	bl	80079f0 <pl_FunMotor_stop>
	record_mode=0;
 8016be8:	4b15      	ldr	r3, [pc, #84]	; (8016c40 <mode_WallSensorTuning_fast+0x494>)
 8016bea:	2200      	movs	r2, #0
 8016bec:	701a      	strb	r2, [r3, #0]
	wait_ms_NoReset(500);
 8016bee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8016bf2:	f7f1 f999 	bl	8007f28 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8016bf6:	2000      	movs	r0, #0
 8016bf8:	f7f0 fe66 	bl	80078c8 <pl_DriveMotor_standby>

	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016bfc:	e002      	b.n	8016c04 <mode_WallSensorTuning_fast+0x458>
		HAL_Delay(1);
 8016bfe:	2001      	movs	r0, #1
 8016c00:	f001 fff0 	bl	8018be4 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8016c04:	4b13      	ldr	r3, [pc, #76]	; (8016c54 <mode_WallSensorTuning_fast+0x4a8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c0c:	ddf7      	ble.n	8016bfe <mode_WallSensorTuning_fast+0x452>
 8016c0e:	4b11      	ldr	r3, [pc, #68]	; (8016c54 <mode_WallSensorTuning_fast+0x4a8>)
 8016c10:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016c14:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c18:	ddf1      	ble.n	8016bfe <mode_WallSensorTuning_fast+0x452>
 8016c1a:	4b0e      	ldr	r3, [pc, #56]	; (8016c54 <mode_WallSensorTuning_fast+0x4a8>)
 8016c1c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016c20:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8016c24:	ddeb      	ble.n	8016bfe <mode_WallSensorTuning_fast+0x452>
	}
	pl_r_blue_LED(ON);
 8016c26:	2001      	movs	r0, #1
 8016c28:	f7f0 f9aa 	bl	8006f80 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8016c2c:	2001      	movs	r0, #1
 8016c2e:	f7f0 f9b9 	bl	8006fa4 <pl_l_blue_LED>
	record_print();
 8016c32:	f000 f86d 	bl	8016d10 <record_print>



}
 8016c36:	bf00      	nop
 8016c38:	3710      	adds	r7, #16
 8016c3a:	46bd      	mov	sp, r7
 8016c3c:	bd80      	pop	{r7, pc}
 8016c3e:	bf00      	nop
 8016c40:	2000edc0 	.word	0x2000edc0
 8016c44:	466a6000 	.word	0x466a6000
 8016c48:	453b8000 	.word	0x453b8000
 8016c4c:	00000000 	.word	0x00000000
 8016c50:	443eeb39 	.word	0x443eeb39
 8016c54:	200002b8 	.word	0x200002b8

08016c58 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8016c58:	b480      	push	{r7}
 8016c5a:	af00      	add	r7, sp, #0
	record_mode = 0;
 8016c5c:	4b06      	ldr	r3, [pc, #24]	; (8016c78 <record_reset+0x20>)
 8016c5e:	2200      	movs	r2, #0
 8016c60:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8016c62:	4b06      	ldr	r3, [pc, #24]	; (8016c7c <record_reset+0x24>)
 8016c64:	2200      	movs	r2, #0
 8016c66:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8016c68:	4b05      	ldr	r3, [pc, #20]	; (8016c80 <record_reset+0x28>)
 8016c6a:	2200      	movs	r2, #0
 8016c6c:	701a      	strb	r2, [r3, #0]
}
 8016c6e:	bf00      	nop
 8016c70:	46bd      	mov	sp, r7
 8016c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c76:	4770      	bx	lr
 8016c78:	2000edc0 	.word	0x2000edc0
 8016c7c:	2000edc4 	.word	0x2000edc4
 8016c80:	2000edcc 	.word	0x2000edcc

08016c84 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8016c84:	b490      	push	{r4, r7}
 8016c86:	b084      	sub	sp, #16
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
 8016c8c:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8016c8e:	2300      	movs	r3, #0
 8016c90:	60fb      	str	r3, [r7, #12]
 8016c92:	e013      	b.n	8016cbc <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	009b      	lsls	r3, r3, #2
 8016c98:	687a      	ldr	r2, [r7, #4]
 8016c9a:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8016c9c:	4b18      	ldr	r3, [pc, #96]	; (8016d00 <record_data+0x7c>)
 8016c9e:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8016ca0:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8016ca2:	4818      	ldr	r0, [pc, #96]	; (8016d04 <record_data+0x80>)
 8016ca4:	68f9      	ldr	r1, [r7, #12]
 8016ca6:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8016caa:	fb04 f101 	mul.w	r1, r4, r1
 8016cae:	440b      	add	r3, r1
 8016cb0:	009b      	lsls	r3, r3, #2
 8016cb2:	4403      	add	r3, r0
 8016cb4:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	3301      	adds	r3, #1
 8016cba:	60fb      	str	r3, [r7, #12]
 8016cbc:	68fa      	ldr	r2, [r7, #12]
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	dbe7      	blt.n	8016c94 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8016cc4:	4b10      	ldr	r3, [pc, #64]	; (8016d08 <record_data+0x84>)
 8016cc6:	781b      	ldrb	r3, [r3, #0]
 8016cc8:	2b01      	cmp	r3, #1
 8016cca:	d103      	bne.n	8016cd4 <record_data+0x50>
		record_end_point = record_time;
 8016ccc:	4b0c      	ldr	r3, [pc, #48]	; (8016d00 <record_data+0x7c>)
 8016cce:	681b      	ldr	r3, [r3, #0]
 8016cd0:	4a0e      	ldr	r2, [pc, #56]	; (8016d0c <record_data+0x88>)
 8016cd2:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8016cd4:	4b0a      	ldr	r3, [pc, #40]	; (8016d00 <record_data+0x7c>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	3301      	adds	r3, #1
 8016cda:	4a09      	ldr	r2, [pc, #36]	; (8016d00 <record_data+0x7c>)
 8016cdc:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8016cde:	4b08      	ldr	r3, [pc, #32]	; (8016d00 <record_data+0x7c>)
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016ce6:	4293      	cmp	r3, r2
 8016ce8:	dd05      	ble.n	8016cf6 <record_data+0x72>
		record_time = 0;
 8016cea:	4b05      	ldr	r3, [pc, #20]	; (8016d00 <record_data+0x7c>)
 8016cec:	2200      	movs	r2, #0
 8016cee:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8016cf0:	4b05      	ldr	r3, [pc, #20]	; (8016d08 <record_data+0x84>)
 8016cf2:	2201      	movs	r2, #1
 8016cf4:	701a      	strb	r2, [r3, #0]
	}

}
 8016cf6:	bf00      	nop
 8016cf8:	3710      	adds	r7, #16
 8016cfa:	46bd      	mov	sp, r7
 8016cfc:	bc90      	pop	{r4, r7}
 8016cfe:	4770      	bx	lr
 8016d00:	2000edc4 	.word	0x2000edc4
 8016d04:	20003240 	.word	0x20003240
 8016d08:	2000edcc 	.word	0x2000edcc
 8016d0c:	2000edc8 	.word	0x2000edc8

08016d10 <record_print>:

void record_print(void) {
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b084      	sub	sp, #16
 8016d14:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8016d16:	4b3a      	ldr	r3, [pc, #232]	; (8016e00 <record_print+0xf0>)
 8016d18:	781b      	ldrb	r3, [r3, #0]
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d12e      	bne.n	8016d7c <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8016d1e:	2300      	movs	r3, #0
 8016d20:	60fb      	str	r3, [r7, #12]
 8016d22:	e025      	b.n	8016d70 <record_print+0x60>

			printf("%d", a);
 8016d24:	68f9      	ldr	r1, [r7, #12]
 8016d26:	4837      	ldr	r0, [pc, #220]	; (8016e04 <record_print+0xf4>)
 8016d28:	f009 feae 	bl	8020a88 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016d2c:	2300      	movs	r3, #0
 8016d2e:	607b      	str	r3, [r7, #4]
 8016d30:	e015      	b.n	8016d5e <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8016d32:	4935      	ldr	r1, [pc, #212]	; (8016e08 <record_print+0xf8>)
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016d3a:	fb03 f202 	mul.w	r2, r3, r2
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	4413      	add	r3, r2
 8016d42:	009b      	lsls	r3, r3, #2
 8016d44:	440b      	add	r3, r1
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f7e9 fc25 	bl	8000598 <__aeabi_f2d>
 8016d4e:	4602      	mov	r2, r0
 8016d50:	460b      	mov	r3, r1
 8016d52:	482e      	ldr	r0, [pc, #184]	; (8016e0c <record_print+0xfc>)
 8016d54:	f009 fe98 	bl	8020a88 <iprintf>
					record_count++) {
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	2b03      	cmp	r3, #3
 8016d62:	dde6      	ble.n	8016d32 <record_print+0x22>
			}
			printf("\n");
 8016d64:	200a      	movs	r0, #10
 8016d66:	f009 fea7 	bl	8020ab8 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8016d6a:	68fb      	ldr	r3, [r7, #12]
 8016d6c:	3301      	adds	r3, #1
 8016d6e:	60fb      	str	r3, [r7, #12]
 8016d70:	4b27      	ldr	r3, [pc, #156]	; (8016e10 <record_print+0x100>)
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	68fa      	ldr	r2, [r7, #12]
 8016d76:	429a      	cmp	r2, r3
 8016d78:	dbd4      	blt.n	8016d24 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8016d7a:	e03c      	b.n	8016df6 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	60fb      	str	r3, [r7, #12]
 8016d80:	e034      	b.n	8016dec <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8016d82:	4b24      	ldr	r3, [pc, #144]	; (8016e14 <record_print+0x104>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	3301      	adds	r3, #1
 8016d88:	68fa      	ldr	r2, [r7, #12]
 8016d8a:	4413      	add	r3, r2
 8016d8c:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8016d8e:	68bb      	ldr	r3, [r7, #8]
 8016d90:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016d94:	4293      	cmp	r3, r2
 8016d96:	dd03      	ble.n	8016da0 <record_print+0x90>
				time_index -= max_record_time;
 8016d98:	68bb      	ldr	r3, [r7, #8]
 8016d9a:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8016d9e:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8016da0:	68f9      	ldr	r1, [r7, #12]
 8016da2:	4818      	ldr	r0, [pc, #96]	; (8016e04 <record_print+0xf4>)
 8016da4:	f009 fe70 	bl	8020a88 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8016da8:	2300      	movs	r3, #0
 8016daa:	603b      	str	r3, [r7, #0]
 8016dac:	e015      	b.n	8016dda <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8016dae:	4916      	ldr	r1, [pc, #88]	; (8016e08 <record_print+0xf8>)
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016db6:	fb03 f202 	mul.w	r2, r3, r2
 8016dba:	68bb      	ldr	r3, [r7, #8]
 8016dbc:	4413      	add	r3, r2
 8016dbe:	009b      	lsls	r3, r3, #2
 8016dc0:	440b      	add	r3, r1
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7e9 fbe7 	bl	8000598 <__aeabi_f2d>
 8016dca:	4602      	mov	r2, r0
 8016dcc:	460b      	mov	r3, r1
 8016dce:	480f      	ldr	r0, [pc, #60]	; (8016e0c <record_print+0xfc>)
 8016dd0:	f009 fe5a 	bl	8020a88 <iprintf>
					record_count++) {
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	3301      	adds	r3, #1
 8016dd8:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	2b03      	cmp	r3, #3
 8016dde:	dde6      	ble.n	8016dae <record_print+0x9e>
			printf("\n");
 8016de0:	200a      	movs	r0, #10
 8016de2:	f009 fe69 	bl	8020ab8 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8016de6:	68fb      	ldr	r3, [r7, #12]
 8016de8:	3301      	adds	r3, #1
 8016dea:	60fb      	str	r3, [r7, #12]
 8016dec:	68fb      	ldr	r3, [r7, #12]
 8016dee:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8016df2:	4293      	cmp	r3, r2
 8016df4:	ddc5      	ble.n	8016d82 <record_print+0x72>
}
 8016df6:	bf00      	nop
 8016df8:	3710      	adds	r7, #16
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	2000edcc 	.word	0x2000edcc
 8016e04:	08023598 	.word	0x08023598
 8016e08:	20003240 	.word	0x20003240
 8016e0c:	0802359c 	.word	0x0802359c
 8016e10:	2000edc4 	.word	0x2000edc4
 8016e14:	2000edc8 	.word	0x2000edc8

08016e18 <interrupt_record>:

void interrupt_record(void) {
 8016e18:	b580      	push	{r7, lr}
 8016e1a:	b084      	sub	sp, #16
 8016e1c:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8016e1e:	4baf      	ldr	r3, [pc, #700]	; (80170dc <interrupt_record+0x2c4>)
 8016e20:	781b      	ldrb	r3, [r3, #0]
 8016e22:	2b01      	cmp	r3, #1
 8016e24:	d110      	bne.n	8016e48 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8016e26:	4bae      	ldr	r3, [pc, #696]	; (80170e0 <interrupt_record+0x2c8>)
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8016e2c:	4bad      	ldr	r3, [pc, #692]	; (80170e4 <interrupt_record+0x2cc>)
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8016e32:	4bad      	ldr	r3, [pc, #692]	; (80170e8 <interrupt_record+0x2d0>)
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8016e38:	4bac      	ldr	r3, [pc, #688]	; (80170ec <interrupt_record+0x2d4>)
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016e3e:	463b      	mov	r3, r7
 8016e40:	2104      	movs	r1, #4
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7ff ff1e 	bl	8016c84 <record_data>
		}
	if (record_mode == 2) {
 8016e48:	4ba4      	ldr	r3, [pc, #656]	; (80170dc <interrupt_record+0x2c4>)
 8016e4a:	781b      	ldrb	r3, [r3, #0]
 8016e4c:	2b02      	cmp	r3, #2
 8016e4e:	d11b      	bne.n	8016e88 <interrupt_record+0x70>
		r_data[0] = turning.velocity;
 8016e50:	4ba7      	ldr	r3, [pc, #668]	; (80170f0 <interrupt_record+0x2d8>)
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	603b      	str	r3, [r7, #0]
		r_data[1] = angle_speed;
 8016e56:	4ba7      	ldr	r3, [pc, #668]	; (80170f4 <interrupt_record+0x2dc>)
 8016e58:	681b      	ldr	r3, [r3, #0]
 8016e5a:	607b      	str	r3, [r7, #4]
		r_data[2] = straight.velocity;
 8016e5c:	4ba6      	ldr	r3, [pc, #664]	; (80170f8 <interrupt_record+0x2e0>)
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	60bb      	str	r3, [r7, #8]
		r_data[3] = (fusion_speedR + fusion_speedL) / 2;
 8016e62:	4ba6      	ldr	r3, [pc, #664]	; (80170fc <interrupt_record+0x2e4>)
 8016e64:	ed93 7a00 	vldr	s14, [r3]
 8016e68:	4ba5      	ldr	r3, [pc, #660]	; (8017100 <interrupt_record+0x2e8>)
 8016e6a:	edd3 7a00 	vldr	s15, [r3]
 8016e6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016e72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016e76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016e7a:	edc7 7a03 	vstr	s15, [r7, #12]
				record_data(r_data, 4);
 8016e7e:	463b      	mov	r3, r7
 8016e80:	2104      	movs	r1, #4
 8016e82:	4618      	mov	r0, r3
 8016e84:	f7ff fefe 	bl	8016c84 <record_data>
		}
	if (record_mode == 3) {
 8016e88:	4b94      	ldr	r3, [pc, #592]	; (80170dc <interrupt_record+0x2c4>)
 8016e8a:	781b      	ldrb	r3, [r3, #0]
 8016e8c:	2b03      	cmp	r3, #3
 8016e8e:	d126      	bne.n	8016ede <interrupt_record+0xc6>
			r_data[0] = straight.velocity;
 8016e90:	4b99      	ldr	r3, [pc, #612]	; (80170f8 <interrupt_record+0x2e0>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8016e96:	4b98      	ldr	r3, [pc, #608]	; (80170f8 <interrupt_record+0x2e0>)
 8016e98:	689b      	ldr	r3, [r3, #8]
 8016e9a:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8016e9c:	4b97      	ldr	r3, [pc, #604]	; (80170fc <interrupt_record+0x2e4>)
 8016e9e:	ed93 7a00 	vldr	s14, [r3]
 8016ea2:	4b97      	ldr	r3, [pc, #604]	; (8017100 <interrupt_record+0x2e8>)
 8016ea4:	edd3 7a00 	vldr	s15, [r3]
 8016ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016eac:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016eb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016eb4:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016eb8:	4b92      	ldr	r3, [pc, #584]	; (8017104 <interrupt_record+0x2ec>)
 8016eba:	ed93 7a00 	vldr	s14, [r3]
 8016ebe:	4b92      	ldr	r3, [pc, #584]	; (8017108 <interrupt_record+0x2f0>)
 8016ec0:	edd3 7a00 	vldr	s15, [r3]
 8016ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016ec8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016ecc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016ed0:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016ed4:	463b      	mov	r3, r7
 8016ed6:	2104      	movs	r1, #4
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7ff fed3 	bl	8016c84 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8016ede:	4b7f      	ldr	r3, [pc, #508]	; (80170dc <interrupt_record+0x2c4>)
 8016ee0:	781b      	ldrb	r3, [r3, #0]
 8016ee2:	2b04      	cmp	r3, #4
 8016ee4:	d126      	bne.n	8016f34 <interrupt_record+0x11c>
			r_data[0] = straight.displacement;
 8016ee6:	4b84      	ldr	r3, [pc, #528]	; (80170f8 <interrupt_record+0x2e0>)
 8016ee8:	689b      	ldr	r3, [r3, #8]
 8016eea:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 8016eec:	4b7e      	ldr	r3, [pc, #504]	; (80170e8 <interrupt_record+0x2d0>)
 8016eee:	ed93 7a00 	vldr	s14, [r3]
 8016ef2:	4b7e      	ldr	r3, [pc, #504]	; (80170ec <interrupt_record+0x2d4>)
 8016ef4:	edd3 7a00 	vldr	s15, [r3]
 8016ef8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016efc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016f04:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 8016f08:	4b80      	ldr	r3, [pc, #512]	; (801710c <interrupt_record+0x2f4>)
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8016f0e:	4b7d      	ldr	r3, [pc, #500]	; (8017104 <interrupt_record+0x2ec>)
 8016f10:	ed93 7a00 	vldr	s14, [r3]
 8016f14:	4b7c      	ldr	r3, [pc, #496]	; (8017108 <interrupt_record+0x2f0>)
 8016f16:	edd3 7a00 	vldr	s15, [r3]
 8016f1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8016f1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8016f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016f26:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016f2a:	463b      	mov	r3, r7
 8016f2c:	2104      	movs	r1, #4
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7ff fea8 	bl	8016c84 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016f34:	4b69      	ldr	r3, [pc, #420]	; (80170dc <interrupt_record+0x2c4>)
 8016f36:	781b      	ldrb	r3, [r3, #0]
 8016f38:	2b05      	cmp	r3, #5
 8016f3a:	d110      	bne.n	8016f5e <interrupt_record+0x146>
			r_data[0] = straight.displacement;
 8016f3c:	4b6e      	ldr	r3, [pc, #440]	; (80170f8 <interrupt_record+0x2e0>)
 8016f3e:	689b      	ldr	r3, [r3, #8]
 8016f40:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016f42:	4b69      	ldr	r3, [pc, #420]	; (80170e8 <interrupt_record+0x2d0>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016f48:	4b68      	ldr	r3, [pc, #416]	; (80170ec <interrupt_record+0x2d4>)
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016f4e:	4b6f      	ldr	r3, [pc, #444]	; (801710c <interrupt_record+0x2f4>)
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f54:	463b      	mov	r3, r7
 8016f56:	2104      	movs	r1, #4
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7ff fe93 	bl	8016c84 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 8016f5e:	4b5f      	ldr	r3, [pc, #380]	; (80170dc <interrupt_record+0x2c4>)
 8016f60:	781b      	ldrb	r3, [r3, #0]
 8016f62:	2b05      	cmp	r3, #5
 8016f64:	d110      	bne.n	8016f88 <interrupt_record+0x170>
			r_data[0] = g_V_L;
 8016f66:	4b6a      	ldr	r3, [pc, #424]	; (8017110 <interrupt_record+0x2f8>)
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 8016f6c:	4b5e      	ldr	r3, [pc, #376]	; (80170e8 <interrupt_record+0x2d0>)
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 8016f72:	4b5e      	ldr	r3, [pc, #376]	; (80170ec <interrupt_record+0x2d4>)
 8016f74:	681b      	ldr	r3, [r3, #0]
 8016f76:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 8016f78:	4b64      	ldr	r3, [pc, #400]	; (801710c <interrupt_record+0x2f4>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8016f7e:	463b      	mov	r3, r7
 8016f80:	2104      	movs	r1, #4
 8016f82:	4618      	mov	r0, r3
 8016f84:	f7ff fe7e 	bl	8016c84 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 8016f88:	4b54      	ldr	r3, [pc, #336]	; (80170dc <interrupt_record+0x2c4>)
 8016f8a:	781b      	ldrb	r3, [r3, #0]
 8016f8c:	2b06      	cmp	r3, #6
 8016f8e:	d110      	bne.n	8016fb2 <interrupt_record+0x19a>
				r_data[0] = straight.velocity;
 8016f90:	4b59      	ldr	r3, [pc, #356]	; (80170f8 <interrupt_record+0x2e0>)
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 8016f96:	4b5f      	ldr	r3, [pc, #380]	; (8017114 <interrupt_record+0x2fc>)
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 8016f9c:	4b5e      	ldr	r3, [pc, #376]	; (8017118 <interrupt_record+0x300>)
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 8016fa2:	4b5e      	ldr	r3, [pc, #376]	; (801711c <interrupt_record+0x304>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8016fa8:	463b      	mov	r3, r7
 8016faa:	2104      	movs	r1, #4
 8016fac:	4618      	mov	r0, r3
 8016fae:	f7ff fe69 	bl	8016c84 <record_data>
			}
	if (record_mode == 7) {
 8016fb2:	4b4a      	ldr	r3, [pc, #296]	; (80170dc <interrupt_record+0x2c4>)
 8016fb4:	781b      	ldrb	r3, [r3, #0]
 8016fb6:	2b07      	cmp	r3, #7
 8016fb8:	d125      	bne.n	8017006 <interrupt_record+0x1ee>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8016fba:	4b59      	ldr	r3, [pc, #356]	; (8017120 <interrupt_record+0x308>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	ee07 3a90 	vmov	s15, r3
 8016fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fc6:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff[SENSOR_LEFT];
 8016fca:	4b56      	ldr	r3, [pc, #344]	; (8017124 <interrupt_record+0x30c>)
 8016fcc:	681b      	ldr	r3, [r3, #0]
 8016fce:	ee07 3a90 	vmov	s15, r3
 8016fd2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fd6:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_RIGHT][0];
 8016fda:	4b51      	ldr	r3, [pc, #324]	; (8017120 <interrupt_record+0x308>)
 8016fdc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8016fe0:	ee07 3a90 	vmov	s15, r3
 8016fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016fe8:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff[SENSOR_RIGHT];
 8016fec:	4b4d      	ldr	r3, [pc, #308]	; (8017124 <interrupt_record+0x30c>)
 8016fee:	691b      	ldr	r3, [r3, #16]
 8016ff0:	ee07 3a90 	vmov	s15, r3
 8016ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016ff8:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8016ffc:	463b      	mov	r3, r7
 8016ffe:	2104      	movs	r1, #4
 8017000:	4618      	mov	r0, r3
 8017002:	f7ff fe3f 	bl	8016c84 <record_data>
		}
	if (record_mode == 8) {
 8017006:	4b35      	ldr	r3, [pc, #212]	; (80170dc <interrupt_record+0x2c4>)
 8017008:	781b      	ldrb	r3, [r3, #0]
 801700a:	2b08      	cmp	r3, #8
 801700c:	d125      	bne.n	801705a <interrupt_record+0x242>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 801700e:	4b44      	ldr	r3, [pc, #272]	; (8017120 <interrupt_record+0x308>)
 8017010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017012:	ee07 3a90 	vmov	s15, r3
 8017016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801701a:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_LEFT];
 801701e:	4b42      	ldr	r3, [pc, #264]	; (8017128 <interrupt_record+0x310>)
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	ee07 3a90 	vmov	s15, r3
 8017026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801702a:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 801702e:	4b3c      	ldr	r3, [pc, #240]	; (8017120 <interrupt_record+0x308>)
 8017030:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8017034:	ee07 3a90 	vmov	s15, r3
 8017038:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801703c:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (float) g_sensor_diff_wallcut[SENSOR_FRONT_RIGHT];
 8017040:	4b39      	ldr	r3, [pc, #228]	; (8017128 <interrupt_record+0x310>)
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	ee07 3a90 	vmov	s15, r3
 8017048:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801704c:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8017050:	463b      	mov	r3, r7
 8017052:	2104      	movs	r1, #4
 8017054:	4618      	mov	r0, r3
 8017056:	f7ff fe15 	bl	8016c84 <record_data>
		}
	if (record_mode == 9) { //90
 801705a:	4b20      	ldr	r3, [pc, #128]	; (80170dc <interrupt_record+0x2c4>)
 801705c:	781b      	ldrb	r3, [r3, #0]
 801705e:	2b09      	cmp	r3, #9
 8017060:	d11b      	bne.n	801709a <interrupt_record+0x282>
			r_data[0] = (float) g_sensor[SENSOR_LEFT][0];
 8017062:	4b2f      	ldr	r3, [pc, #188]	; (8017120 <interrupt_record+0x308>)
 8017064:	681b      	ldr	r3, [r3, #0]
 8017066:	ee07 3a90 	vmov	s15, r3
 801706a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801706e:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_RIGHT][0];
 8017072:	4b2b      	ldr	r3, [pc, #172]	; (8017120 <interrupt_record+0x308>)
 8017074:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8017078:	ee07 3a90 	vmov	s15, r3
 801707c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017080:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 8017084:	4b29      	ldr	r3, [pc, #164]	; (801712c <interrupt_record+0x314>)
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 801708a:	4b29      	ldr	r3, [pc, #164]	; (8017130 <interrupt_record+0x318>)
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8017090:	463b      	mov	r3, r7
 8017092:	2104      	movs	r1, #4
 8017094:	4618      	mov	r0, r3
 8017096:	f7ff fdf5 	bl	8016c84 <record_data>
		}
	if (record_mode == 10) { //90
 801709a:	4b10      	ldr	r3, [pc, #64]	; (80170dc <interrupt_record+0x2c4>)
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	2b0a      	cmp	r3, #10
 80170a0:	d148      	bne.n	8017134 <interrupt_record+0x31c>
			r_data[0] = (float) g_sensor[SENSOR_FRONT_LEFT][0];
 80170a2:	4b1f      	ldr	r3, [pc, #124]	; (8017120 <interrupt_record+0x308>)
 80170a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80170a6:	ee07 3a90 	vmov	s15, r3
 80170aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170ae:	edc7 7a00 	vstr	s15, [r7]
			r_data[1] = (float) g_sensor[SENSOR_FRONT_RIGHT][0];
 80170b2:	4b1b      	ldr	r3, [pc, #108]	; (8017120 <interrupt_record+0x308>)
 80170b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80170b8:	ee07 3a90 	vmov	s15, r3
 80170bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80170c0:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = NoWallDisplacementL45slant;
 80170c4:	4b19      	ldr	r3, [pc, #100]	; (801712c <interrupt_record+0x314>)
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	60bb      	str	r3, [r7, #8]
			r_data[3] = NoWallDisplacementR45slant;
 80170ca:	4b19      	ldr	r3, [pc, #100]	; (8017130 <interrupt_record+0x318>)
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 80170d0:	463b      	mov	r3, r7
 80170d2:	2104      	movs	r1, #4
 80170d4:	4618      	mov	r0, r3
 80170d6:	f7ff fdd5 	bl	8016c84 <record_data>
 80170da:	e02b      	b.n	8017134 <interrupt_record+0x31c>
 80170dc:	2000edc0 	.word	0x2000edc0
 80170e0:	2000022c 	.word	0x2000022c
 80170e4:	20000228 	.word	0x20000228
 80170e8:	20000224 	.word	0x20000224
 80170ec:	20000220 	.word	0x20000220
 80170f0:	200004e4 	.word	0x200004e4
 80170f4:	20000268 	.word	0x20000268
 80170f8:	200004d8 	.word	0x200004d8
 80170fc:	2000025c 	.word	0x2000025c
 8017100:	20000258 	.word	0x20000258
 8017104:	20000254 	.word	0x20000254
 8017108:	20000250 	.word	0x20000250
 801710c:	2000027c 	.word	0x2000027c
 8017110:	2000052c 	.word	0x2000052c
 8017114:	20000238 	.word	0x20000238
 8017118:	2000023c 	.word	0x2000023c
 801711c:	20000278 	.word	0x20000278
 8017120:	200002b8 	.word	0x200002b8
 8017124:	20000448 	.word	0x20000448
 8017128:	2000045c 	.word	0x2000045c
 801712c:	200005e0 	.word	0x200005e0
 8017130:	200005dc 	.word	0x200005dc
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 8017134:	bf00      	nop
 8017136:	3710      	adds	r7, #16
 8017138:	46bd      	mov	sp, r7
 801713a:	bd80      	pop	{r7, pc}

0801713c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017140:	4b1b      	ldr	r3, [pc, #108]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017142:	4a1c      	ldr	r2, [pc, #112]	; (80171b4 <MX_SPI1_Init+0x78>)
 8017144:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017146:	4b1a      	ldr	r3, [pc, #104]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017148:	f44f 7282 	mov.w	r2, #260	; 0x104
 801714c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801714e:	4b18      	ldr	r3, [pc, #96]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017150:	2200      	movs	r2, #0
 8017152:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017154:	4b16      	ldr	r3, [pc, #88]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017156:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801715a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 801715c:	4b14      	ldr	r3, [pc, #80]	; (80171b0 <MX_SPI1_Init+0x74>)
 801715e:	2200      	movs	r2, #0
 8017160:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017162:	4b13      	ldr	r3, [pc, #76]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017164:	2200      	movs	r2, #0
 8017166:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017168:	4b11      	ldr	r3, [pc, #68]	; (80171b0 <MX_SPI1_Init+0x74>)
 801716a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801716e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8017170:	4b0f      	ldr	r3, [pc, #60]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017172:	2210      	movs	r2, #16
 8017174:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017176:	4b0e      	ldr	r3, [pc, #56]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017178:	2200      	movs	r2, #0
 801717a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801717c:	4b0c      	ldr	r3, [pc, #48]	; (80171b0 <MX_SPI1_Init+0x74>)
 801717e:	2200      	movs	r2, #0
 8017180:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017182:	4b0b      	ldr	r3, [pc, #44]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017184:	2200      	movs	r2, #0
 8017186:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017188:	4b09      	ldr	r3, [pc, #36]	; (80171b0 <MX_SPI1_Init+0x74>)
 801718a:	2207      	movs	r2, #7
 801718c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801718e:	4b08      	ldr	r3, [pc, #32]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017190:	2200      	movs	r2, #0
 8017192:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017194:	4b06      	ldr	r3, [pc, #24]	; (80171b0 <MX_SPI1_Init+0x74>)
 8017196:	2208      	movs	r2, #8
 8017198:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801719a:	4805      	ldr	r0, [pc, #20]	; (80171b0 <MX_SPI1_Init+0x74>)
 801719c:	f005 ff16 	bl	801cfcc <HAL_SPI_Init>
 80171a0:	4603      	mov	r3, r0
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d001      	beq.n	80171aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80171a6:	f7f2 fe14 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80171aa:	bf00      	nop
 80171ac:	bd80      	pop	{r7, pc}
 80171ae:	bf00      	nop
 80171b0:	2000edd0 	.word	0x2000edd0
 80171b4:	40013000 	.word	0x40013000

080171b8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80171b8:	b580      	push	{r7, lr}
 80171ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80171bc:	4b1b      	ldr	r3, [pc, #108]	; (801722c <MX_SPI3_Init+0x74>)
 80171be:	4a1c      	ldr	r2, [pc, #112]	; (8017230 <MX_SPI3_Init+0x78>)
 80171c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80171c2:	4b1a      	ldr	r3, [pc, #104]	; (801722c <MX_SPI3_Init+0x74>)
 80171c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80171c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80171ca:	4b18      	ldr	r3, [pc, #96]	; (801722c <MX_SPI3_Init+0x74>)
 80171cc:	2200      	movs	r2, #0
 80171ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80171d0:	4b16      	ldr	r3, [pc, #88]	; (801722c <MX_SPI3_Init+0x74>)
 80171d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80171d6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80171d8:	4b14      	ldr	r3, [pc, #80]	; (801722c <MX_SPI3_Init+0x74>)
 80171da:	2200      	movs	r2, #0
 80171dc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80171de:	4b13      	ldr	r3, [pc, #76]	; (801722c <MX_SPI3_Init+0x74>)
 80171e0:	2201      	movs	r2, #1
 80171e2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80171e4:	4b11      	ldr	r3, [pc, #68]	; (801722c <MX_SPI3_Init+0x74>)
 80171e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80171ea:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80171ec:	4b0f      	ldr	r3, [pc, #60]	; (801722c <MX_SPI3_Init+0x74>)
 80171ee:	2208      	movs	r2, #8
 80171f0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80171f2:	4b0e      	ldr	r3, [pc, #56]	; (801722c <MX_SPI3_Init+0x74>)
 80171f4:	2200      	movs	r2, #0
 80171f6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80171f8:	4b0c      	ldr	r3, [pc, #48]	; (801722c <MX_SPI3_Init+0x74>)
 80171fa:	2200      	movs	r2, #0
 80171fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80171fe:	4b0b      	ldr	r3, [pc, #44]	; (801722c <MX_SPI3_Init+0x74>)
 8017200:	2200      	movs	r2, #0
 8017202:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8017204:	4b09      	ldr	r3, [pc, #36]	; (801722c <MX_SPI3_Init+0x74>)
 8017206:	2207      	movs	r2, #7
 8017208:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801720a:	4b08      	ldr	r3, [pc, #32]	; (801722c <MX_SPI3_Init+0x74>)
 801720c:	2200      	movs	r2, #0
 801720e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8017210:	4b06      	ldr	r3, [pc, #24]	; (801722c <MX_SPI3_Init+0x74>)
 8017212:	2200      	movs	r2, #0
 8017214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8017216:	4805      	ldr	r0, [pc, #20]	; (801722c <MX_SPI3_Init+0x74>)
 8017218:	f005 fed8 	bl	801cfcc <HAL_SPI_Init>
 801721c:	4603      	mov	r3, r0
 801721e:	2b00      	cmp	r3, #0
 8017220:	d001      	beq.n	8017226 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8017222:	f7f2 fdd6 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8017226:	bf00      	nop
 8017228:	bd80      	pop	{r7, pc}
 801722a:	bf00      	nop
 801722c:	2000ee34 	.word	0x2000ee34
 8017230:	40003c00 	.word	0x40003c00

08017234 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017234:	b580      	push	{r7, lr}
 8017236:	b08c      	sub	sp, #48	; 0x30
 8017238:	af00      	add	r7, sp, #0
 801723a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801723c:	f107 031c 	add.w	r3, r7, #28
 8017240:	2200      	movs	r2, #0
 8017242:	601a      	str	r2, [r3, #0]
 8017244:	605a      	str	r2, [r3, #4]
 8017246:	609a      	str	r2, [r3, #8]
 8017248:	60da      	str	r2, [r3, #12]
 801724a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	4a3d      	ldr	r2, [pc, #244]	; (8017348 <HAL_SPI_MspInit+0x114>)
 8017252:	4293      	cmp	r3, r2
 8017254:	d129      	bne.n	80172aa <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017256:	4b3d      	ldr	r3, [pc, #244]	; (801734c <HAL_SPI_MspInit+0x118>)
 8017258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801725a:	4a3c      	ldr	r2, [pc, #240]	; (801734c <HAL_SPI_MspInit+0x118>)
 801725c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017260:	6613      	str	r3, [r2, #96]	; 0x60
 8017262:	4b3a      	ldr	r3, [pc, #232]	; (801734c <HAL_SPI_MspInit+0x118>)
 8017264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801726a:	61bb      	str	r3, [r7, #24]
 801726c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801726e:	4b37      	ldr	r3, [pc, #220]	; (801734c <HAL_SPI_MspInit+0x118>)
 8017270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017272:	4a36      	ldr	r2, [pc, #216]	; (801734c <HAL_SPI_MspInit+0x118>)
 8017274:	f043 0301 	orr.w	r3, r3, #1
 8017278:	64d3      	str	r3, [r2, #76]	; 0x4c
 801727a:	4b34      	ldr	r3, [pc, #208]	; (801734c <HAL_SPI_MspInit+0x118>)
 801727c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801727e:	f003 0301 	and.w	r3, r3, #1
 8017282:	617b      	str	r3, [r7, #20]
 8017284:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8017286:	23e0      	movs	r3, #224	; 0xe0
 8017288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801728a:	2302      	movs	r3, #2
 801728c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801728e:	2300      	movs	r3, #0
 8017290:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017292:	2300      	movs	r3, #0
 8017294:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017296:	2305      	movs	r3, #5
 8017298:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801729a:	f107 031c 	add.w	r3, r7, #28
 801729e:	4619      	mov	r1, r3
 80172a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80172a4:	f004 fcd8 	bl	801bc58 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80172a8:	e049      	b.n	801733e <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	4a28      	ldr	r2, [pc, #160]	; (8017350 <HAL_SPI_MspInit+0x11c>)
 80172b0:	4293      	cmp	r3, r2
 80172b2:	d144      	bne.n	801733e <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80172b4:	4b25      	ldr	r3, [pc, #148]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172b8:	4a24      	ldr	r2, [pc, #144]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80172be:	6593      	str	r3, [r2, #88]	; 0x58
 80172c0:	4b22      	ldr	r3, [pc, #136]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80172c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80172c8:	613b      	str	r3, [r7, #16]
 80172ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80172cc:	4b1f      	ldr	r3, [pc, #124]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172d0:	4a1e      	ldr	r2, [pc, #120]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172d2:	f043 0304 	orr.w	r3, r3, #4
 80172d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80172d8:	4b1c      	ldr	r3, [pc, #112]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172dc:	f003 0304 	and.w	r3, r3, #4
 80172e0:	60fb      	str	r3, [r7, #12]
 80172e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80172e4:	4b19      	ldr	r3, [pc, #100]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172e8:	4a18      	ldr	r2, [pc, #96]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172ea:	f043 0302 	orr.w	r3, r3, #2
 80172ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80172f0:	4b16      	ldr	r3, [pc, #88]	; (801734c <HAL_SPI_MspInit+0x118>)
 80172f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80172f4:	f003 0302 	and.w	r3, r3, #2
 80172f8:	60bb      	str	r3, [r7, #8]
 80172fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80172fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8017300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017302:	2302      	movs	r3, #2
 8017304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017306:	2300      	movs	r3, #0
 8017308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801730a:	2300      	movs	r3, #0
 801730c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801730e:	2306      	movs	r3, #6
 8017310:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8017312:	f107 031c 	add.w	r3, r7, #28
 8017316:	4619      	mov	r1, r3
 8017318:	480e      	ldr	r0, [pc, #56]	; (8017354 <HAL_SPI_MspInit+0x120>)
 801731a:	f004 fc9d 	bl	801bc58 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 801731e:	2320      	movs	r3, #32
 8017320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017322:	2302      	movs	r3, #2
 8017324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017326:	2300      	movs	r3, #0
 8017328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801732a:	2300      	movs	r3, #0
 801732c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801732e:	2306      	movs	r3, #6
 8017330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017332:	f107 031c 	add.w	r3, r7, #28
 8017336:	4619      	mov	r1, r3
 8017338:	4807      	ldr	r0, [pc, #28]	; (8017358 <HAL_SPI_MspInit+0x124>)
 801733a:	f004 fc8d 	bl	801bc58 <HAL_GPIO_Init>
}
 801733e:	bf00      	nop
 8017340:	3730      	adds	r7, #48	; 0x30
 8017342:	46bd      	mov	sp, r7
 8017344:	bd80      	pop	{r7, pc}
 8017346:	bf00      	nop
 8017348:	40013000 	.word	0x40013000
 801734c:	40021000 	.word	0x40021000
 8017350:	40003c00 	.word	0x40003c00
 8017354:	48000800 	.word	0x48000800
 8017358:	48000400 	.word	0x48000400

0801735c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017362:	4b0f      	ldr	r3, [pc, #60]	; (80173a0 <HAL_MspInit+0x44>)
 8017364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017366:	4a0e      	ldr	r2, [pc, #56]	; (80173a0 <HAL_MspInit+0x44>)
 8017368:	f043 0301 	orr.w	r3, r3, #1
 801736c:	6613      	str	r3, [r2, #96]	; 0x60
 801736e:	4b0c      	ldr	r3, [pc, #48]	; (80173a0 <HAL_MspInit+0x44>)
 8017370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017372:	f003 0301 	and.w	r3, r3, #1
 8017376:	607b      	str	r3, [r7, #4]
 8017378:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801737a:	4b09      	ldr	r3, [pc, #36]	; (80173a0 <HAL_MspInit+0x44>)
 801737c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801737e:	4a08      	ldr	r2, [pc, #32]	; (80173a0 <HAL_MspInit+0x44>)
 8017380:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017384:	6593      	str	r3, [r2, #88]	; 0x58
 8017386:	4b06      	ldr	r3, [pc, #24]	; (80173a0 <HAL_MspInit+0x44>)
 8017388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801738a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801738e:	603b      	str	r3, [r7, #0]
 8017390:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8017392:	f004 fe9f 	bl	801c0d4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017396:	bf00      	nop
 8017398:	3708      	adds	r7, #8
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	40021000 	.word	0x40021000

080173a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80173a4:	b480      	push	{r7}
 80173a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80173a8:	e7fe      	b.n	80173a8 <NMI_Handler+0x4>

080173aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80173aa:	b480      	push	{r7}
 80173ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80173ae:	e7fe      	b.n	80173ae <HardFault_Handler+0x4>

080173b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80173b0:	b480      	push	{r7}
 80173b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80173b4:	e7fe      	b.n	80173b4 <MemManage_Handler+0x4>

080173b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80173b6:	b480      	push	{r7}
 80173b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80173ba:	e7fe      	b.n	80173ba <BusFault_Handler+0x4>

080173bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80173bc:	b480      	push	{r7}
 80173be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80173c0:	e7fe      	b.n	80173c0 <UsageFault_Handler+0x4>

080173c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80173c2:	b480      	push	{r7}
 80173c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80173c6:	bf00      	nop
 80173c8:	46bd      	mov	sp, r7
 80173ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ce:	4770      	bx	lr

080173d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80173d0:	b480      	push	{r7}
 80173d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80173d4:	bf00      	nop
 80173d6:	46bd      	mov	sp, r7
 80173d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173dc:	4770      	bx	lr

080173de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80173de:	b480      	push	{r7}
 80173e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80173e2:	bf00      	nop
 80173e4:	46bd      	mov	sp, r7
 80173e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173ea:	4770      	bx	lr

080173ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80173ec:	b580      	push	{r7, lr}
 80173ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80173f0:	f001 fbda 	bl	8018ba8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80173f4:	bf00      	nop
 80173f6:	bd80      	pop	{r7, pc}

080173f8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80173fc:	4802      	ldr	r0, [pc, #8]	; (8017408 <DMA1_Channel1_IRQHandler+0x10>)
 80173fe:	f004 f873 	bl	801b4e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8017402:	bf00      	nop
 8017404:	bd80      	pop	{r7, pc}
 8017406:	bf00      	nop
 8017408:	200007a0 	.word	0x200007a0

0801740c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 801740c:	b580      	push	{r7, lr}
 801740e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8017410:	4802      	ldr	r0, [pc, #8]	; (801741c <ADC1_2_IRQHandler+0x10>)
 8017412:	f002 fb79 	bl	8019b08 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 8017416:	bf00      	nop
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	20000734 	.word	0x20000734

08017420 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017424:	480d      	ldr	r0, [pc, #52]	; (801745c <TIM6_DAC_IRQHandler+0x3c>)
 8017426:	f006 ffb1 	bl	801e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 801742a:	f7f0 fce1 	bl	8007df0 <interrupt_timer>
  interupt_calSensor();
 801742e:	f7ea fc21 	bl	8001c74 <interupt_calSensor>
  ICM20602_DataUpdate();
 8017432:	f7f0 f9ff 	bl	8007834 <ICM20602_DataUpdate>
  interrupt_calGyro();
 8017436:	f7ea fa2b 	bl	8001890 <interrupt_calGyro>
  AS5047_DataUpdate();
 801743a:	f7ef feb7 	bl	80071ac <AS5047_DataUpdate>
  interupt_calEncoder();
 801743e:	f7e9 fe1f 	bl	8001080 <interupt_calEncoder>
  interupt_calFusion();
 8017442:	f7ea f82d 	bl	80014a0 <interupt_calFusion>
  interrupt_WallCut();
 8017446:	f7ee fe1f 	bl	8006088 <interrupt_WallCut>
  interupt_DriveMotor();
 801744a:	f7ea fd85 	bl	8001f58 <interupt_DriveMotor>

  interrupt_FailSafe();
 801744e:	f7f2 fa17 	bl	8009880 <interrupt_FailSafe>
  interrupt_record();
 8017452:	f7ff fce1 	bl	8016e18 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017456:	bf00      	nop
 8017458:	bd80      	pop	{r7, pc}
 801745a:	bf00      	nop
 801745c:	2000ee9c 	.word	0x2000ee9c

08017460 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017460:	b480      	push	{r7}
 8017462:	af00      	add	r7, sp, #0
	return 1;
 8017464:	2301      	movs	r3, #1
}
 8017466:	4618      	mov	r0, r3
 8017468:	46bd      	mov	sp, r7
 801746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801746e:	4770      	bx	lr

08017470 <_kill>:

int _kill(int pid, int sig)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b082      	sub	sp, #8
 8017474:	af00      	add	r7, sp, #0
 8017476:	6078      	str	r0, [r7, #4]
 8017478:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801747a:	f008 fe5b 	bl	8020134 <__errno>
 801747e:	4603      	mov	r3, r0
 8017480:	2216      	movs	r2, #22
 8017482:	601a      	str	r2, [r3, #0]
	return -1;
 8017484:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017488:	4618      	mov	r0, r3
 801748a:	3708      	adds	r7, #8
 801748c:	46bd      	mov	sp, r7
 801748e:	bd80      	pop	{r7, pc}

08017490 <_exit>:

void _exit (int status)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b082      	sub	sp, #8
 8017494:	af00      	add	r7, sp, #0
 8017496:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017498:	f04f 31ff 	mov.w	r1, #4294967295
 801749c:	6878      	ldr	r0, [r7, #4]
 801749e:	f7ff ffe7 	bl	8017470 <_kill>
	while (1) {}		/* Make sure we hang here */
 80174a2:	e7fe      	b.n	80174a2 <_exit+0x12>

080174a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b086      	sub	sp, #24
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	60f8      	str	r0, [r7, #12]
 80174ac:	60b9      	str	r1, [r7, #8]
 80174ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80174b0:	2300      	movs	r3, #0
 80174b2:	617b      	str	r3, [r7, #20]
 80174b4:	e00a      	b.n	80174cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80174b6:	f3af 8000 	nop.w
 80174ba:	4601      	mov	r1, r0
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	1c5a      	adds	r2, r3, #1
 80174c0:	60ba      	str	r2, [r7, #8]
 80174c2:	b2ca      	uxtb	r2, r1
 80174c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80174c6:	697b      	ldr	r3, [r7, #20]
 80174c8:	3301      	adds	r3, #1
 80174ca:	617b      	str	r3, [r7, #20]
 80174cc:	697a      	ldr	r2, [r7, #20]
 80174ce:	687b      	ldr	r3, [r7, #4]
 80174d0:	429a      	cmp	r2, r3
 80174d2:	dbf0      	blt.n	80174b6 <_read+0x12>
	}

return len;
 80174d4:	687b      	ldr	r3, [r7, #4]
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3718      	adds	r7, #24
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}
	...

080174e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b086      	sub	sp, #24
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	60f8      	str	r0, [r7, #12]
 80174e8:	60b9      	str	r1, [r7, #8]
 80174ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80174ec:	2300      	movs	r3, #0
 80174ee:	617b      	str	r3, [r7, #20]
 80174f0:	e00a      	b.n	8017508 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 80174f2:	68b9      	ldr	r1, [r7, #8]
 80174f4:	1c4b      	adds	r3, r1, #1
 80174f6:	60bb      	str	r3, [r7, #8]
 80174f8:	2301      	movs	r3, #1
 80174fa:	2201      	movs	r2, #1
 80174fc:	4807      	ldr	r0, [pc, #28]	; (801751c <_write+0x3c>)
 80174fe:	f007 ffcf 	bl	801f4a0 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017502:	697b      	ldr	r3, [r7, #20]
 8017504:	3301      	adds	r3, #1
 8017506:	617b      	str	r3, [r7, #20]
 8017508:	697a      	ldr	r2, [r7, #20]
 801750a:	687b      	ldr	r3, [r7, #4]
 801750c:	429a      	cmp	r2, r3
 801750e:	dbf0      	blt.n	80174f2 <_write+0x12>
	}
	return len;
 8017510:	687b      	ldr	r3, [r7, #4]
}
 8017512:	4618      	mov	r0, r3
 8017514:	3718      	adds	r7, #24
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	2000f878 	.word	0x2000f878

08017520 <_close>:

int _close(int file)
{
 8017520:	b480      	push	{r7}
 8017522:	b083      	sub	sp, #12
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
	return -1;
 8017528:	f04f 33ff 	mov.w	r3, #4294967295
}
 801752c:	4618      	mov	r0, r3
 801752e:	370c      	adds	r7, #12
 8017530:	46bd      	mov	sp, r7
 8017532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017536:	4770      	bx	lr

08017538 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017538:	b480      	push	{r7}
 801753a:	b083      	sub	sp, #12
 801753c:	af00      	add	r7, sp, #0
 801753e:	6078      	str	r0, [r7, #4]
 8017540:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017542:	683b      	ldr	r3, [r7, #0]
 8017544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017548:	605a      	str	r2, [r3, #4]
	return 0;
 801754a:	2300      	movs	r3, #0
}
 801754c:	4618      	mov	r0, r3
 801754e:	370c      	adds	r7, #12
 8017550:	46bd      	mov	sp, r7
 8017552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017556:	4770      	bx	lr

08017558 <_isatty>:

int _isatty(int file)
{
 8017558:	b480      	push	{r7}
 801755a:	b083      	sub	sp, #12
 801755c:	af00      	add	r7, sp, #0
 801755e:	6078      	str	r0, [r7, #4]
	return 1;
 8017560:	2301      	movs	r3, #1
}
 8017562:	4618      	mov	r0, r3
 8017564:	370c      	adds	r7, #12
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801756e:	b480      	push	{r7}
 8017570:	b085      	sub	sp, #20
 8017572:	af00      	add	r7, sp, #0
 8017574:	60f8      	str	r0, [r7, #12]
 8017576:	60b9      	str	r1, [r7, #8]
 8017578:	607a      	str	r2, [r7, #4]
	return 0;
 801757a:	2300      	movs	r3, #0
}
 801757c:	4618      	mov	r0, r3
 801757e:	3714      	adds	r7, #20
 8017580:	46bd      	mov	sp, r7
 8017582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017586:	4770      	bx	lr

08017588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b086      	sub	sp, #24
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017590:	4a14      	ldr	r2, [pc, #80]	; (80175e4 <_sbrk+0x5c>)
 8017592:	4b15      	ldr	r3, [pc, #84]	; (80175e8 <_sbrk+0x60>)
 8017594:	1ad3      	subs	r3, r2, r3
 8017596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801759c:	4b13      	ldr	r3, [pc, #76]	; (80175ec <_sbrk+0x64>)
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d102      	bne.n	80175aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80175a4:	4b11      	ldr	r3, [pc, #68]	; (80175ec <_sbrk+0x64>)
 80175a6:	4a12      	ldr	r2, [pc, #72]	; (80175f0 <_sbrk+0x68>)
 80175a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80175aa:	4b10      	ldr	r3, [pc, #64]	; (80175ec <_sbrk+0x64>)
 80175ac:	681a      	ldr	r2, [r3, #0]
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	4413      	add	r3, r2
 80175b2:	693a      	ldr	r2, [r7, #16]
 80175b4:	429a      	cmp	r2, r3
 80175b6:	d207      	bcs.n	80175c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80175b8:	f008 fdbc 	bl	8020134 <__errno>
 80175bc:	4603      	mov	r3, r0
 80175be:	220c      	movs	r2, #12
 80175c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80175c2:	f04f 33ff 	mov.w	r3, #4294967295
 80175c6:	e009      	b.n	80175dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80175c8:	4b08      	ldr	r3, [pc, #32]	; (80175ec <_sbrk+0x64>)
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80175ce:	4b07      	ldr	r3, [pc, #28]	; (80175ec <_sbrk+0x64>)
 80175d0:	681a      	ldr	r2, [r3, #0]
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	4413      	add	r3, r2
 80175d6:	4a05      	ldr	r2, [pc, #20]	; (80175ec <_sbrk+0x64>)
 80175d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80175da:	68fb      	ldr	r3, [r7, #12]
}
 80175dc:	4618      	mov	r0, r3
 80175de:	3718      	adds	r7, #24
 80175e0:	46bd      	mov	sp, r7
 80175e2:	bd80      	pop	{r7, pc}
 80175e4:	2001c000 	.word	0x2001c000
 80175e8:	00000400 	.word	0x00000400
 80175ec:	2000ee98 	.word	0x2000ee98
 80175f0:	2000f920 	.word	0x2000f920

080175f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80175f4:	b480      	push	{r7}
 80175f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80175f8:	4b06      	ldr	r3, [pc, #24]	; (8017614 <SystemInit+0x20>)
 80175fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80175fe:	4a05      	ldr	r2, [pc, #20]	; (8017614 <SystemInit+0x20>)
 8017600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017608:	bf00      	nop
 801760a:	46bd      	mov	sp, r7
 801760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017610:	4770      	bx	lr
 8017612:	bf00      	nop
 8017614:	e000ed00 	.word	0xe000ed00

08017618 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b084      	sub	sp, #16
 801761c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801761e:	1d3b      	adds	r3, r7, #4
 8017620:	2200      	movs	r2, #0
 8017622:	601a      	str	r2, [r3, #0]
 8017624:	605a      	str	r2, [r3, #4]
 8017626:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8017628:	4b14      	ldr	r3, [pc, #80]	; (801767c <MX_TIM6_Init+0x64>)
 801762a:	4a15      	ldr	r2, [pc, #84]	; (8017680 <MX_TIM6_Init+0x68>)
 801762c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 801762e:	4b13      	ldr	r3, [pc, #76]	; (801767c <MX_TIM6_Init+0x64>)
 8017630:	2254      	movs	r2, #84	; 0x54
 8017632:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017634:	4b11      	ldr	r3, [pc, #68]	; (801767c <MX_TIM6_Init+0x64>)
 8017636:	2200      	movs	r2, #0
 8017638:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 801763a:	4b10      	ldr	r3, [pc, #64]	; (801767c <MX_TIM6_Init+0x64>)
 801763c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017640:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017642:	4b0e      	ldr	r3, [pc, #56]	; (801767c <MX_TIM6_Init+0x64>)
 8017644:	2200      	movs	r2, #0
 8017646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8017648:	480c      	ldr	r0, [pc, #48]	; (801767c <MX_TIM6_Init+0x64>)
 801764a:	f006 fbd7 	bl	801ddfc <HAL_TIM_Base_Init>
 801764e:	4603      	mov	r3, r0
 8017650:	2b00      	cmp	r3, #0
 8017652:	d001      	beq.n	8017658 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8017654:	f7f2 fbbd 	bl	8009dd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017658:	2300      	movs	r3, #0
 801765a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801765c:	2300      	movs	r3, #0
 801765e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8017660:	1d3b      	adds	r3, r7, #4
 8017662:	4619      	mov	r1, r3
 8017664:	4805      	ldr	r0, [pc, #20]	; (801767c <MX_TIM6_Init+0x64>)
 8017666:	f007 fd45 	bl	801f0f4 <HAL_TIMEx_MasterConfigSynchronization>
 801766a:	4603      	mov	r3, r0
 801766c:	2b00      	cmp	r3, #0
 801766e:	d001      	beq.n	8017674 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8017670:	f7f2 fbaf 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8017674:	bf00      	nop
 8017676:	3710      	adds	r7, #16
 8017678:	46bd      	mov	sp, r7
 801767a:	bd80      	pop	{r7, pc}
 801767c:	2000ee9c 	.word	0x2000ee9c
 8017680:	40001000 	.word	0x40001000

08017684 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b098      	sub	sp, #96	; 0x60
 8017688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801768a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801768e:	2200      	movs	r2, #0
 8017690:	601a      	str	r2, [r3, #0]
 8017692:	605a      	str	r2, [r3, #4]
 8017694:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801769a:	2200      	movs	r2, #0
 801769c:	601a      	str	r2, [r3, #0]
 801769e:	605a      	str	r2, [r3, #4]
 80176a0:	609a      	str	r2, [r3, #8]
 80176a2:	60da      	str	r2, [r3, #12]
 80176a4:	611a      	str	r2, [r3, #16]
 80176a6:	615a      	str	r2, [r3, #20]
 80176a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80176aa:	1d3b      	adds	r3, r7, #4
 80176ac:	2234      	movs	r2, #52	; 0x34
 80176ae:	2100      	movs	r1, #0
 80176b0:	4618      	mov	r0, r3
 80176b2:	f008 fd77 	bl	80201a4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80176b6:	4b41      	ldr	r3, [pc, #260]	; (80177bc <MX_TIM8_Init+0x138>)
 80176b8:	4a41      	ldr	r2, [pc, #260]	; (80177c0 <MX_TIM8_Init+0x13c>)
 80176ba:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 80176bc:	4b3f      	ldr	r3, [pc, #252]	; (80177bc <MX_TIM8_Init+0x138>)
 80176be:	2201      	movs	r2, #1
 80176c0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80176c2:	4b3e      	ldr	r3, [pc, #248]	; (80177bc <MX_TIM8_Init+0x138>)
 80176c4:	2200      	movs	r2, #0
 80176c6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 80176c8:	4b3c      	ldr	r3, [pc, #240]	; (80177bc <MX_TIM8_Init+0x138>)
 80176ca:	f240 628f 	movw	r2, #1679	; 0x68f
 80176ce:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80176d0:	4b3a      	ldr	r3, [pc, #232]	; (80177bc <MX_TIM8_Init+0x138>)
 80176d2:	2200      	movs	r2, #0
 80176d4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80176d6:	4b39      	ldr	r3, [pc, #228]	; (80177bc <MX_TIM8_Init+0x138>)
 80176d8:	2200      	movs	r2, #0
 80176da:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80176dc:	4b37      	ldr	r3, [pc, #220]	; (80177bc <MX_TIM8_Init+0x138>)
 80176de:	2200      	movs	r2, #0
 80176e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80176e2:	4836      	ldr	r0, [pc, #216]	; (80177bc <MX_TIM8_Init+0x138>)
 80176e4:	f006 fc52 	bl	801df8c <HAL_TIM_PWM_Init>
 80176e8:	4603      	mov	r3, r0
 80176ea:	2b00      	cmp	r3, #0
 80176ec:	d001      	beq.n	80176f2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80176ee:	f7f2 fb70 	bl	8009dd2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80176f2:	2300      	movs	r3, #0
 80176f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80176f6:	2300      	movs	r3, #0
 80176f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80176fa:	2300      	movs	r3, #0
 80176fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80176fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8017702:	4619      	mov	r1, r3
 8017704:	482d      	ldr	r0, [pc, #180]	; (80177bc <MX_TIM8_Init+0x138>)
 8017706:	f007 fcf5 	bl	801f0f4 <HAL_TIMEx_MasterConfigSynchronization>
 801770a:	4603      	mov	r3, r0
 801770c:	2b00      	cmp	r3, #0
 801770e:	d001      	beq.n	8017714 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8017710:	f7f2 fb5f 	bl	8009dd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017714:	2360      	movs	r3, #96	; 0x60
 8017716:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 8017718:	f240 13a3 	movw	r3, #419	; 0x1a3
 801771c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801771e:	2300      	movs	r3, #0
 8017720:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017722:	2300      	movs	r3, #0
 8017724:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017726:	2300      	movs	r3, #0
 8017728:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801772a:	2300      	movs	r3, #0
 801772c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801772e:	2300      	movs	r3, #0
 8017730:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8017736:	2200      	movs	r2, #0
 8017738:	4619      	mov	r1, r3
 801773a:	4820      	ldr	r0, [pc, #128]	; (80177bc <MX_TIM8_Init+0x138>)
 801773c:	f006 ffa6 	bl	801e68c <HAL_TIM_PWM_ConfigChannel>
 8017740:	4603      	mov	r3, r0
 8017742:	2b00      	cmp	r3, #0
 8017744:	d001      	beq.n	801774a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8017746:	f7f2 fb44 	bl	8009dd2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801774a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801774e:	2208      	movs	r2, #8
 8017750:	4619      	mov	r1, r3
 8017752:	481a      	ldr	r0, [pc, #104]	; (80177bc <MX_TIM8_Init+0x138>)
 8017754:	f006 ff9a 	bl	801e68c <HAL_TIM_PWM_ConfigChannel>
 8017758:	4603      	mov	r3, r0
 801775a:	2b00      	cmp	r3, #0
 801775c:	d001      	beq.n	8017762 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 801775e:	f7f2 fb38 	bl	8009dd2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017762:	2300      	movs	r3, #0
 8017764:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8017766:	2300      	movs	r3, #0
 8017768:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801776a:	2300      	movs	r3, #0
 801776c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 801776e:	2300      	movs	r3, #0
 8017770:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017772:	2300      	movs	r3, #0
 8017774:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8017776:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801777a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 801777c:	2300      	movs	r3, #0
 801777e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8017780:	2300      	movs	r3, #0
 8017782:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8017784:	2300      	movs	r3, #0
 8017786:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8017788:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801778c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 801778e:	2300      	movs	r3, #0
 8017790:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8017792:	2300      	movs	r3, #0
 8017794:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017796:	2300      	movs	r3, #0
 8017798:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801779a:	1d3b      	adds	r3, r7, #4
 801779c:	4619      	mov	r1, r3
 801779e:	4807      	ldr	r0, [pc, #28]	; (80177bc <MX_TIM8_Init+0x138>)
 80177a0:	f007 fd36 	bl	801f210 <HAL_TIMEx_ConfigBreakDeadTime>
 80177a4:	4603      	mov	r3, r0
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d001      	beq.n	80177ae <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80177aa:	f7f2 fb12 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80177ae:	4803      	ldr	r0, [pc, #12]	; (80177bc <MX_TIM8_Init+0x138>)
 80177b0:	f000 f8da 	bl	8017968 <HAL_TIM_MspPostInit>

}
 80177b4:	bf00      	nop
 80177b6:	3760      	adds	r7, #96	; 0x60
 80177b8:	46bd      	mov	sp, r7
 80177ba:	bd80      	pop	{r7, pc}
 80177bc:	2000eee8 	.word	0x2000eee8
 80177c0:	40013400 	.word	0x40013400

080177c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80177c4:	b580      	push	{r7, lr}
 80177c6:	b094      	sub	sp, #80	; 0x50
 80177c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80177ca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80177ce:	2200      	movs	r2, #0
 80177d0:	601a      	str	r2, [r3, #0]
 80177d2:	605a      	str	r2, [r3, #4]
 80177d4:	609a      	str	r2, [r3, #8]
 80177d6:	60da      	str	r2, [r3, #12]
 80177d8:	611a      	str	r2, [r3, #16]
 80177da:	615a      	str	r2, [r3, #20]
 80177dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80177de:	463b      	mov	r3, r7
 80177e0:	2234      	movs	r2, #52	; 0x34
 80177e2:	2100      	movs	r1, #0
 80177e4:	4618      	mov	r0, r3
 80177e6:	f008 fcdd 	bl	80201a4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80177ea:	4b30      	ldr	r3, [pc, #192]	; (80178ac <MX_TIM16_Init+0xe8>)
 80177ec:	4a30      	ldr	r2, [pc, #192]	; (80178b0 <MX_TIM16_Init+0xec>)
 80177ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 80177f0:	4b2e      	ldr	r3, [pc, #184]	; (80178ac <MX_TIM16_Init+0xe8>)
 80177f2:	2201      	movs	r2, #1
 80177f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80177f6:	4b2d      	ldr	r3, [pc, #180]	; (80178ac <MX_TIM16_Init+0xe8>)
 80177f8:	2200      	movs	r2, #0
 80177fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 80177fc:	4b2b      	ldr	r3, [pc, #172]	; (80178ac <MX_TIM16_Init+0xe8>)
 80177fe:	2264      	movs	r2, #100	; 0x64
 8017800:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017802:	4b2a      	ldr	r3, [pc, #168]	; (80178ac <MX_TIM16_Init+0xe8>)
 8017804:	2200      	movs	r2, #0
 8017806:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8017808:	4b28      	ldr	r3, [pc, #160]	; (80178ac <MX_TIM16_Init+0xe8>)
 801780a:	2200      	movs	r2, #0
 801780c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801780e:	4b27      	ldr	r3, [pc, #156]	; (80178ac <MX_TIM16_Init+0xe8>)
 8017810:	2200      	movs	r2, #0
 8017812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8017814:	4825      	ldr	r0, [pc, #148]	; (80178ac <MX_TIM16_Init+0xe8>)
 8017816:	f006 faf1 	bl	801ddfc <HAL_TIM_Base_Init>
 801781a:	4603      	mov	r3, r0
 801781c:	2b00      	cmp	r3, #0
 801781e:	d001      	beq.n	8017824 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 8017820:	f7f2 fad7 	bl	8009dd2 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8017824:	4821      	ldr	r0, [pc, #132]	; (80178ac <MX_TIM16_Init+0xe8>)
 8017826:	f006 fbb1 	bl	801df8c <HAL_TIM_PWM_Init>
 801782a:	4603      	mov	r3, r0
 801782c:	2b00      	cmp	r3, #0
 801782e:	d001      	beq.n	8017834 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 8017830:	f7f2 facf 	bl	8009dd2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017834:	2360      	movs	r3, #96	; 0x60
 8017836:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 8017838:	231e      	movs	r3, #30
 801783a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801783c:	2300      	movs	r3, #0
 801783e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8017840:	2300      	movs	r3, #0
 8017842:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017844:	2300      	movs	r3, #0
 8017846:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8017848:	2300      	movs	r3, #0
 801784a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801784c:	2300      	movs	r3, #0
 801784e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8017854:	2200      	movs	r2, #0
 8017856:	4619      	mov	r1, r3
 8017858:	4814      	ldr	r0, [pc, #80]	; (80178ac <MX_TIM16_Init+0xe8>)
 801785a:	f006 ff17 	bl	801e68c <HAL_TIM_PWM_ConfigChannel>
 801785e:	4603      	mov	r3, r0
 8017860:	2b00      	cmp	r3, #0
 8017862:	d001      	beq.n	8017868 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 8017864:	f7f2 fab5 	bl	8009dd2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8017868:	2300      	movs	r3, #0
 801786a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801786c:	2300      	movs	r3, #0
 801786e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8017870:	2300      	movs	r3, #0
 8017872:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8017874:	2300      	movs	r3, #0
 8017876:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8017878:	2300      	movs	r3, #0
 801787a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 801787c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017880:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8017882:	2300      	movs	r3, #0
 8017884:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017886:	2300      	movs	r3, #0
 8017888:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 801788a:	463b      	mov	r3, r7
 801788c:	4619      	mov	r1, r3
 801788e:	4807      	ldr	r0, [pc, #28]	; (80178ac <MX_TIM16_Init+0xe8>)
 8017890:	f007 fcbe 	bl	801f210 <HAL_TIMEx_ConfigBreakDeadTime>
 8017894:	4603      	mov	r3, r0
 8017896:	2b00      	cmp	r3, #0
 8017898:	d001      	beq.n	801789e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 801789a:	f7f2 fa9a 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 801789e:	4803      	ldr	r0, [pc, #12]	; (80178ac <MX_TIM16_Init+0xe8>)
 80178a0:	f000 f862 	bl	8017968 <HAL_TIM_MspPostInit>

}
 80178a4:	bf00      	nop
 80178a6:	3750      	adds	r7, #80	; 0x50
 80178a8:	46bd      	mov	sp, r7
 80178aa:	bd80      	pop	{r7, pc}
 80178ac:	2000ef34 	.word	0x2000ef34
 80178b0:	40014400 	.word	0x40014400

080178b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80178b4:	b580      	push	{r7, lr}
 80178b6:	b084      	sub	sp, #16
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a16      	ldr	r2, [pc, #88]	; (801791c <HAL_TIM_Base_MspInit+0x68>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d114      	bne.n	80178f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80178c6:	4b16      	ldr	r3, [pc, #88]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 80178c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80178ca:	4a15      	ldr	r2, [pc, #84]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 80178cc:	f043 0310 	orr.w	r3, r3, #16
 80178d0:	6593      	str	r3, [r2, #88]	; 0x58
 80178d2:	4b13      	ldr	r3, [pc, #76]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 80178d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80178d6:	f003 0310 	and.w	r3, r3, #16
 80178da:	60fb      	str	r3, [r7, #12]
 80178dc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 80178de:	2200      	movs	r2, #0
 80178e0:	2103      	movs	r1, #3
 80178e2:	2036      	movs	r0, #54	; 0x36
 80178e4:	f003 fc4f 	bl	801b186 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80178e8:	2036      	movs	r0, #54	; 0x36
 80178ea:	f003 fc66 	bl	801b1ba <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 80178ee:	e010      	b.n	8017912 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a0b      	ldr	r2, [pc, #44]	; (8017924 <HAL_TIM_Base_MspInit+0x70>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d10b      	bne.n	8017912 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80178fa:	4b09      	ldr	r3, [pc, #36]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 80178fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80178fe:	4a08      	ldr	r2, [pc, #32]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 8017900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017904:	6613      	str	r3, [r2, #96]	; 0x60
 8017906:	4b06      	ldr	r3, [pc, #24]	; (8017920 <HAL_TIM_Base_MspInit+0x6c>)
 8017908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801790a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801790e:	60bb      	str	r3, [r7, #8]
 8017910:	68bb      	ldr	r3, [r7, #8]
}
 8017912:	bf00      	nop
 8017914:	3710      	adds	r7, #16
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}
 801791a:	bf00      	nop
 801791c:	40001000 	.word	0x40001000
 8017920:	40021000 	.word	0x40021000
 8017924:	40014400 	.word	0x40014400

08017928 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8017928:	b480      	push	{r7}
 801792a:	b085      	sub	sp, #20
 801792c:	af00      	add	r7, sp, #0
 801792e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	4a0a      	ldr	r2, [pc, #40]	; (8017960 <HAL_TIM_PWM_MspInit+0x38>)
 8017936:	4293      	cmp	r3, r2
 8017938:	d10b      	bne.n	8017952 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 801793a:	4b0a      	ldr	r3, [pc, #40]	; (8017964 <HAL_TIM_PWM_MspInit+0x3c>)
 801793c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801793e:	4a09      	ldr	r2, [pc, #36]	; (8017964 <HAL_TIM_PWM_MspInit+0x3c>)
 8017940:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017944:	6613      	str	r3, [r2, #96]	; 0x60
 8017946:	4b07      	ldr	r3, [pc, #28]	; (8017964 <HAL_TIM_PWM_MspInit+0x3c>)
 8017948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801794a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801794e:	60fb      	str	r3, [r7, #12]
 8017950:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8017952:	bf00      	nop
 8017954:	3714      	adds	r7, #20
 8017956:	46bd      	mov	sp, r7
 8017958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795c:	4770      	bx	lr
 801795e:	bf00      	nop
 8017960:	40013400 	.word	0x40013400
 8017964:	40021000 	.word	0x40021000

08017968 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8017968:	b580      	push	{r7, lr}
 801796a:	b08a      	sub	sp, #40	; 0x28
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017970:	f107 0314 	add.w	r3, r7, #20
 8017974:	2200      	movs	r2, #0
 8017976:	601a      	str	r2, [r3, #0]
 8017978:	605a      	str	r2, [r3, #4]
 801797a:	609a      	str	r2, [r3, #8]
 801797c:	60da      	str	r2, [r3, #12]
 801797e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	681b      	ldr	r3, [r3, #0]
 8017984:	4a2b      	ldr	r2, [pc, #172]	; (8017a34 <HAL_TIM_MspPostInit+0xcc>)
 8017986:	4293      	cmp	r3, r2
 8017988:	d12d      	bne.n	80179e6 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801798a:	4b2b      	ldr	r3, [pc, #172]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 801798c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801798e:	4a2a      	ldr	r2, [pc, #168]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 8017990:	f043 0302 	orr.w	r3, r3, #2
 8017994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017996:	4b28      	ldr	r3, [pc, #160]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 8017998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801799a:	f003 0302 	and.w	r3, r3, #2
 801799e:	613b      	str	r3, [r7, #16]
 80179a0:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 80179a2:	2340      	movs	r3, #64	; 0x40
 80179a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179a6:	2302      	movs	r3, #2
 80179a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179aa:	2300      	movs	r3, #0
 80179ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80179ae:	2300      	movs	r3, #0
 80179b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 80179b2:	2305      	movs	r3, #5
 80179b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80179b6:	f107 0314 	add.w	r3, r7, #20
 80179ba:	4619      	mov	r1, r3
 80179bc:	481f      	ldr	r0, [pc, #124]	; (8017a3c <HAL_TIM_MspPostInit+0xd4>)
 80179be:	f004 f94b 	bl	801bc58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 80179c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80179c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80179c8:	2302      	movs	r3, #2
 80179ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80179cc:	2300      	movs	r3, #0
 80179ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80179d0:	2300      	movs	r3, #0
 80179d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80179d4:	230a      	movs	r3, #10
 80179d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 80179d8:	f107 0314 	add.w	r3, r7, #20
 80179dc:	4619      	mov	r1, r3
 80179de:	4817      	ldr	r0, [pc, #92]	; (8017a3c <HAL_TIM_MspPostInit+0xd4>)
 80179e0:	f004 f93a 	bl	801bc58 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80179e4:	e022      	b.n	8017a2c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	4a15      	ldr	r2, [pc, #84]	; (8017a40 <HAL_TIM_MspPostInit+0xd8>)
 80179ec:	4293      	cmp	r3, r2
 80179ee:	d11d      	bne.n	8017a2c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80179f0:	4b11      	ldr	r3, [pc, #68]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 80179f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80179f4:	4a10      	ldr	r2, [pc, #64]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 80179f6:	f043 0301 	orr.w	r3, r3, #1
 80179fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80179fc:	4b0e      	ldr	r3, [pc, #56]	; (8017a38 <HAL_TIM_MspPostInit+0xd0>)
 80179fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017a00:	f003 0301 	and.w	r3, r3, #1
 8017a04:	60fb      	str	r3, [r7, #12]
 8017a06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 8017a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017a0e:	2302      	movs	r3, #2
 8017a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017a12:	2300      	movs	r3, #0
 8017a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017a16:	2300      	movs	r3, #0
 8017a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8017a1a:	2301      	movs	r3, #1
 8017a1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8017a1e:	f107 0314 	add.w	r3, r7, #20
 8017a22:	4619      	mov	r1, r3
 8017a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8017a28:	f004 f916 	bl	801bc58 <HAL_GPIO_Init>
}
 8017a2c:	bf00      	nop
 8017a2e:	3728      	adds	r7, #40	; 0x28
 8017a30:	46bd      	mov	sp, r7
 8017a32:	bd80      	pop	{r7, pc}
 8017a34:	40013400 	.word	0x40013400
 8017a38:	40021000 	.word	0x40021000
 8017a3c:	48000400 	.word	0x48000400
 8017a40:	40014400 	.word	0x40014400

08017a44 <get_center_velocity>:
parameter_speed speed1000_shortest_mollifier;

parameter_speed speed1200_shortest_mollifier;
parameter_speed speed1600_shortest_mollifier;

float get_center_velocity(parameter_speed Howspeed, int pass_number) {
 8017a44:	b084      	sub	sp, #16
 8017a46:	b480      	push	{r7}
 8017a48:	b083      	sub	sp, #12
 8017a4a:	af00      	add	r7, sp, #0
 8017a4c:	f107 0c10 	add.w	ip, r7, #16
 8017a50:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	float End_velocity;
	if (pass_number == -2) {
 8017a54:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a58:	f113 0f02 	cmn.w	r3, #2
 8017a5c:	d102      	bne.n	8017a64 <get_center_velocity+0x20>
		End_velocity = Howspeed.slalom_R.g_speed;
 8017a5e:	69bb      	ldr	r3, [r7, #24]
 8017a60:	607b      	str	r3, [r7, #4]
 8017a62:	e083      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -3) {
 8017a64:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a68:	f113 0f03 	cmn.w	r3, #3
 8017a6c:	d102      	bne.n	8017a74 <get_center_velocity+0x30>
		End_velocity = Howspeed.slalom_L.g_speed;
 8017a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a70:	607b      	str	r3, [r7, #4]
 8017a72:	e07b      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -4) {
 8017a74:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a78:	f113 0f04 	cmn.w	r3, #4
 8017a7c:	d102      	bne.n	8017a84 <get_center_velocity+0x40>
		End_velocity = Howspeed.turn90_R.g_speed;
 8017a7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a80:	607b      	str	r3, [r7, #4]
 8017a82:	e073      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -5) {
 8017a84:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a88:	f113 0f05 	cmn.w	r3, #5
 8017a8c:	d102      	bne.n	8017a94 <get_center_velocity+0x50>
		End_velocity = Howspeed.turn90_L.g_speed;
 8017a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017a90:	607b      	str	r3, [r7, #4]
 8017a92:	e06b      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -6) {
 8017a94:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017a98:	f113 0f06 	cmn.w	r3, #6
 8017a9c:	d102      	bne.n	8017aa4 <get_center_velocity+0x60>
		End_velocity = Howspeed.turn180_R.g_speed;
 8017a9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017aa0:	607b      	str	r3, [r7, #4]
 8017aa2:	e063      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -7) {
 8017aa4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017aa8:	f113 0f07 	cmn.w	r3, #7
 8017aac:	d102      	bne.n	8017ab4 <get_center_velocity+0x70>
		End_velocity = Howspeed.turn180_L.g_speed;
 8017aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017ab0:	607b      	str	r3, [r7, #4]
 8017ab2:	e05b      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -8) {
 8017ab4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017ab8:	f113 0f08 	cmn.w	r3, #8
 8017abc:	d103      	bne.n	8017ac6 <get_center_velocity+0x82>
		End_velocity = Howspeed.turn45in_R.g_speed;
 8017abe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017ac2:	607b      	str	r3, [r7, #4]
 8017ac4:	e052      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -9) {
 8017ac6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017aca:	f113 0f09 	cmn.w	r3, #9
 8017ace:	d103      	bne.n	8017ad8 <get_center_velocity+0x94>
		End_velocity = Howspeed.turn45in_L.g_speed;
 8017ad0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8017ad4:	607b      	str	r3, [r7, #4]
 8017ad6:	e049      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -10) {
 8017ad8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017adc:	f113 0f0a 	cmn.w	r3, #10
 8017ae0:	d103      	bne.n	8017aea <get_center_velocity+0xa6>
		End_velocity = Howspeed.turn135in_R.g_speed;
 8017ae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8017ae6:	607b      	str	r3, [r7, #4]
 8017ae8:	e040      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -11) {
 8017aea:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017aee:	f113 0f0b 	cmn.w	r3, #11
 8017af2:	d103      	bne.n	8017afc <get_center_velocity+0xb8>
		End_velocity = Howspeed.turn135in_L.g_speed;
 8017af4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8017af8:	607b      	str	r3, [r7, #4]
 8017afa:	e037      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -12) {
 8017afc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b00:	f113 0f0c 	cmn.w	r3, #12
 8017b04:	d103      	bne.n	8017b0e <get_center_velocity+0xca>
		End_velocity = Howspeed.turn45out_R.g_speed;
 8017b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8017b0a:	607b      	str	r3, [r7, #4]
 8017b0c:	e02e      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -13) {
 8017b0e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b12:	f113 0f0d 	cmn.w	r3, #13
 8017b16:	d103      	bne.n	8017b20 <get_center_velocity+0xdc>
		End_velocity = Howspeed.turn45out_L.g_speed;
 8017b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017b1c:	607b      	str	r3, [r7, #4]
 8017b1e:	e025      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -14) {
 8017b20:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b24:	f113 0f0e 	cmn.w	r3, #14
 8017b28:	d103      	bne.n	8017b32 <get_center_velocity+0xee>
		End_velocity = Howspeed.turn135out_R.g_speed;
 8017b2a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8017b2e:	607b      	str	r3, [r7, #4]
 8017b30:	e01c      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -15) {
 8017b32:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b36:	f113 0f0f 	cmn.w	r3, #15
 8017b3a:	d103      	bne.n	8017b44 <get_center_velocity+0x100>
		End_velocity = Howspeed.turn135out_L.g_speed;
 8017b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017b40:	607b      	str	r3, [r7, #4]
 8017b42:	e013      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -16) {
 8017b44:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b48:	f113 0f10 	cmn.w	r3, #16
 8017b4c:	d103      	bne.n	8017b56 <get_center_velocity+0x112>
		End_velocity = Howspeed.V90_R.g_speed;
 8017b4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017b52:	607b      	str	r3, [r7, #4]
 8017b54:	e00a      	b.n	8017b6c <get_center_velocity+0x128>
	} else if (pass_number == -17) {
 8017b56:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017b5a:	f113 0f11 	cmn.w	r3, #17
 8017b5e:	d103      	bne.n	8017b68 <get_center_velocity+0x124>
		End_velocity = Howspeed.V90_L.g_speed;
 8017b60:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017b64:	607b      	str	r3, [r7, #4]
 8017b66:	e001      	b.n	8017b6c <get_center_velocity+0x128>
	} else {
		End_velocity = Howspeed.TurnCentervelocity;
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	607b      	str	r3, [r7, #4]
	}

	return End_velocity;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	ee07 3a90 	vmov	s15, r3
}
 8017b72:	eeb0 0a67 	vmov.f32	s0, s15
 8017b76:	370c      	adds	r7, #12
 8017b78:	46bd      	mov	sp, r7
 8017b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b7e:	b004      	add	sp, #16
 8017b80:	4770      	bx	lr
	...

08017b84 <input_parameter>:

void input_parameter(void) {
 8017b84:	b480      	push	{r7}
 8017b86:	af00      	add	r7, sp, #0

	speed300_exploration.SlalomCentervelocity = 300;
 8017b88:	4b8f      	ldr	r3, [pc, #572]	; (8017dc8 <input_parameter+0x244>)
 8017b8a:	4a90      	ldr	r2, [pc, #576]	; (8017dcc <input_parameter+0x248>)
 8017b8c:	601a      	str	r2, [r3, #0]
	speed300_exploration.TurnCentervelocity = 300;
 8017b8e:	4b8e      	ldr	r3, [pc, #568]	; (8017dc8 <input_parameter+0x244>)
 8017b90:	4a8e      	ldr	r2, [pc, #568]	; (8017dcc <input_parameter+0x248>)
 8017b92:	605a      	str	r2, [r3, #4]

	speed300_exploration.slalom_R.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017b94:	4b8c      	ldr	r3, [pc, #560]	; (8017dc8 <input_parameter+0x244>)
 8017b96:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_R.g_speed =
 8017b98:	4a8b      	ldr	r2, [pc, #556]	; (8017dc8 <input_parameter+0x244>)
 8017b9a:	6093      	str	r3, [r2, #8]
	speed300_exploration.slalom_R.t_speed = 980; //550
 8017b9c:	4b8a      	ldr	r3, [pc, #552]	; (8017dc8 <input_parameter+0x244>)
 8017b9e:	4a8c      	ldr	r2, [pc, #560]	; (8017dd0 <input_parameter+0x24c>)
 8017ba0:	615a      	str	r2, [r3, #20]
	speed300_exploration.slalom_R.t_acc = 13000; //10000
 8017ba2:	4b89      	ldr	r3, [pc, #548]	; (8017dc8 <input_parameter+0x244>)
 8017ba4:	4a8b      	ldr	r2, [pc, #556]	; (8017dd4 <input_parameter+0x250>)
 8017ba6:	619a      	str	r2, [r3, #24]
	speed300_exploration.slalom_R.f_ofset = 3; //55;
 8017ba8:	4b87      	ldr	r3, [pc, #540]	; (8017dc8 <input_parameter+0x244>)
 8017baa:	4a8b      	ldr	r2, [pc, #556]	; (8017dd8 <input_parameter+0x254>)
 8017bac:	60da      	str	r2, [r3, #12]
	speed300_exploration.slalom_R.e_ofset = 20;
 8017bae:	4b86      	ldr	r3, [pc, #536]	; (8017dc8 <input_parameter+0x244>)
 8017bb0:	4a8a      	ldr	r2, [pc, #552]	; (8017ddc <input_parameter+0x258>)
 8017bb2:	611a      	str	r2, [r3, #16]

	speed300_exploration.slalom_L.g_speed =
			speed300_exploration.SlalomCentervelocity;
 8017bb4:	4b84      	ldr	r3, [pc, #528]	; (8017dc8 <input_parameter+0x244>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
	speed300_exploration.slalom_L.g_speed =
 8017bb8:	4a83      	ldr	r2, [pc, #524]	; (8017dc8 <input_parameter+0x244>)
 8017bba:	61d3      	str	r3, [r2, #28]
	speed300_exploration.slalom_L.t_speed = 980;
 8017bbc:	4b82      	ldr	r3, [pc, #520]	; (8017dc8 <input_parameter+0x244>)
 8017bbe:	4a84      	ldr	r2, [pc, #528]	; (8017dd0 <input_parameter+0x24c>)
 8017bc0:	629a      	str	r2, [r3, #40]	; 0x28
	speed300_exploration.slalom_L.t_acc = 13000;
 8017bc2:	4b81      	ldr	r3, [pc, #516]	; (8017dc8 <input_parameter+0x244>)
 8017bc4:	4a83      	ldr	r2, [pc, #524]	; (8017dd4 <input_parameter+0x250>)
 8017bc6:	62da      	str	r2, [r3, #44]	; 0x2c
	speed300_exploration.slalom_L.f_ofset = 2; //50;
 8017bc8:	4b7f      	ldr	r3, [pc, #508]	; (8017dc8 <input_parameter+0x244>)
 8017bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8017bce:	621a      	str	r2, [r3, #32]
	speed300_exploration.slalom_L.e_ofset = 19;
 8017bd0:	4b7d      	ldr	r3, [pc, #500]	; (8017dc8 <input_parameter+0x244>)
 8017bd2:	4a83      	ldr	r2, [pc, #524]	; (8017de0 <input_parameter+0x25c>)
 8017bd4:	625a      	str	r2, [r3, #36]	; 0x24



	speed250_exploration.SlalomCentervelocity = 250;
 8017bd6:	4b83      	ldr	r3, [pc, #524]	; (8017de4 <input_parameter+0x260>)
 8017bd8:	4a83      	ldr	r2, [pc, #524]	; (8017de8 <input_parameter+0x264>)
 8017bda:	601a      	str	r2, [r3, #0]
	speed250_exploration.TurnCentervelocity = 250;
 8017bdc:	4b81      	ldr	r3, [pc, #516]	; (8017de4 <input_parameter+0x260>)
 8017bde:	4a82      	ldr	r2, [pc, #520]	; (8017de8 <input_parameter+0x264>)
 8017be0:	605a      	str	r2, [r3, #4]

	speed250_exploration.slalom_R.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017be2:	4b80      	ldr	r3, [pc, #512]	; (8017de4 <input_parameter+0x260>)
 8017be4:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_R.g_speed =
 8017be6:	4a7f      	ldr	r2, [pc, #508]	; (8017de4 <input_parameter+0x260>)
 8017be8:	6093      	str	r3, [r2, #8]
	speed250_exploration.slalom_R.t_speed = 830; //550
 8017bea:	4b7e      	ldr	r3, [pc, #504]	; (8017de4 <input_parameter+0x260>)
 8017bec:	4a7f      	ldr	r2, [pc, #508]	; (8017dec <input_parameter+0x268>)
 8017bee:	615a      	str	r2, [r3, #20]
	speed250_exploration.slalom_R.t_acc = 9000; //10000
 8017bf0:	4b7c      	ldr	r3, [pc, #496]	; (8017de4 <input_parameter+0x260>)
 8017bf2:	4a7f      	ldr	r2, [pc, #508]	; (8017df0 <input_parameter+0x26c>)
 8017bf4:	619a      	str	r2, [r3, #24]
	speed250_exploration.slalom_R.f_ofset = 0.5; //55;
 8017bf6:	4b7b      	ldr	r3, [pc, #492]	; (8017de4 <input_parameter+0x260>)
 8017bf8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017bfc:	60da      	str	r2, [r3, #12]
	speed250_exploration.slalom_R.e_ofset = 20;
 8017bfe:	4b79      	ldr	r3, [pc, #484]	; (8017de4 <input_parameter+0x260>)
 8017c00:	4a76      	ldr	r2, [pc, #472]	; (8017ddc <input_parameter+0x258>)
 8017c02:	611a      	str	r2, [r3, #16]

	speed250_exploration.slalom_L.g_speed =
			speed250_exploration.SlalomCentervelocity;
 8017c04:	4b77      	ldr	r3, [pc, #476]	; (8017de4 <input_parameter+0x260>)
 8017c06:	681b      	ldr	r3, [r3, #0]
	speed250_exploration.slalom_L.g_speed =
 8017c08:	4a76      	ldr	r2, [pc, #472]	; (8017de4 <input_parameter+0x260>)
 8017c0a:	61d3      	str	r3, [r2, #28]
	speed250_exploration.slalom_L.t_speed = 730;
 8017c0c:	4b75      	ldr	r3, [pc, #468]	; (8017de4 <input_parameter+0x260>)
 8017c0e:	4a79      	ldr	r2, [pc, #484]	; (8017df4 <input_parameter+0x270>)
 8017c10:	629a      	str	r2, [r3, #40]	; 0x28
	speed250_exploration.slalom_L.t_acc = 9000;
 8017c12:	4b74      	ldr	r3, [pc, #464]	; (8017de4 <input_parameter+0x260>)
 8017c14:	4a76      	ldr	r2, [pc, #472]	; (8017df0 <input_parameter+0x26c>)
 8017c16:	62da      	str	r2, [r3, #44]	; 0x2c
	speed250_exploration.slalom_L.f_ofset = 0.5; //50;
 8017c18:	4b72      	ldr	r3, [pc, #456]	; (8017de4 <input_parameter+0x260>)
 8017c1a:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8017c1e:	621a      	str	r2, [r3, #32]
	speed250_exploration.slalom_L.e_ofset = 19;
 8017c20:	4b70      	ldr	r3, [pc, #448]	; (8017de4 <input_parameter+0x260>)
 8017c22:	4a6f      	ldr	r2, [pc, #444]	; (8017de0 <input_parameter+0x25c>)
 8017c24:	625a      	str	r2, [r3, #36]	; 0x24


	speed300_shortest.SlalomCentervelocity =
			speed300_exploration.SlalomCentervelocity;
 8017c26:	4b68      	ldr	r3, [pc, #416]	; (8017dc8 <input_parameter+0x244>)
 8017c28:	681b      	ldr	r3, [r3, #0]
	speed300_shortest.SlalomCentervelocity =
 8017c2a:	4a73      	ldr	r2, [pc, #460]	; (8017df8 <input_parameter+0x274>)
 8017c2c:	6013      	str	r3, [r2, #0]
	speed300_shortest.TurnCentervelocity =
			speed300_exploration.TurnCentervelocity + 200;
 8017c2e:	4b66      	ldr	r3, [pc, #408]	; (8017dc8 <input_parameter+0x244>)
 8017c30:	edd3 7a01 	vldr	s15, [r3, #4]
 8017c34:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8017dfc <input_parameter+0x278>
 8017c38:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.TurnCentervelocity =
 8017c3c:	4b6e      	ldr	r3, [pc, #440]	; (8017df8 <input_parameter+0x274>)
 8017c3e:	edc3 7a01 	vstr	s15, [r3, #4]

	speed300_shortest.slalom_R.g_speed = speed300_exploration.slalom_R.g_speed;
 8017c42:	4b61      	ldr	r3, [pc, #388]	; (8017dc8 <input_parameter+0x244>)
 8017c44:	689b      	ldr	r3, [r3, #8]
 8017c46:	4a6c      	ldr	r2, [pc, #432]	; (8017df8 <input_parameter+0x274>)
 8017c48:	6093      	str	r3, [r2, #8]
	speed300_shortest.slalom_R.t_speed = speed300_exploration.slalom_R.t_speed;
 8017c4a:	4b5f      	ldr	r3, [pc, #380]	; (8017dc8 <input_parameter+0x244>)
 8017c4c:	695b      	ldr	r3, [r3, #20]
 8017c4e:	4a6a      	ldr	r2, [pc, #424]	; (8017df8 <input_parameter+0x274>)
 8017c50:	6153      	str	r3, [r2, #20]
	speed300_shortest.slalom_R.t_acc = speed300_exploration.slalom_R.t_acc;
 8017c52:	4b5d      	ldr	r3, [pc, #372]	; (8017dc8 <input_parameter+0x244>)
 8017c54:	699b      	ldr	r3, [r3, #24]
 8017c56:	4a68      	ldr	r2, [pc, #416]	; (8017df8 <input_parameter+0x274>)
 8017c58:	6193      	str	r3, [r2, #24]
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017c5a:	4b5b      	ldr	r3, [pc, #364]	; (8017dc8 <input_parameter+0x244>)
 8017c5c:	edd3 7a03 	vldr	s15, [r3, #12]
			+ MAZE_OFFSET; //55;
 8017c60:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017c64:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_R.f_ofset = speed300_exploration.slalom_R.f_ofset
 8017c68:	4b63      	ldr	r3, [pc, #396]	; (8017df8 <input_parameter+0x274>)
 8017c6a:	edc3 7a03 	vstr	s15, [r3, #12]
	speed300_shortest.slalom_R.e_ofset = speed300_exploration.slalom_R.e_ofset;
 8017c6e:	4b56      	ldr	r3, [pc, #344]	; (8017dc8 <input_parameter+0x244>)
 8017c70:	691b      	ldr	r3, [r3, #16]
 8017c72:	4a61      	ldr	r2, [pc, #388]	; (8017df8 <input_parameter+0x274>)
 8017c74:	6113      	str	r3, [r2, #16]

	speed300_shortest.slalom_L.g_speed = speed300_exploration.slalom_L.g_speed;
 8017c76:	4b54      	ldr	r3, [pc, #336]	; (8017dc8 <input_parameter+0x244>)
 8017c78:	69db      	ldr	r3, [r3, #28]
 8017c7a:	4a5f      	ldr	r2, [pc, #380]	; (8017df8 <input_parameter+0x274>)
 8017c7c:	61d3      	str	r3, [r2, #28]
	speed300_shortest.slalom_L.t_speed = speed300_exploration.slalom_L.t_speed;
 8017c7e:	4b52      	ldr	r3, [pc, #328]	; (8017dc8 <input_parameter+0x244>)
 8017c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c82:	4a5d      	ldr	r2, [pc, #372]	; (8017df8 <input_parameter+0x274>)
 8017c84:	6293      	str	r3, [r2, #40]	; 0x28
	speed300_shortest.slalom_L.t_acc = speed300_exploration.slalom_L.t_acc;
 8017c86:	4b50      	ldr	r3, [pc, #320]	; (8017dc8 <input_parameter+0x244>)
 8017c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c8a:	4a5b      	ldr	r2, [pc, #364]	; (8017df8 <input_parameter+0x274>)
 8017c8c:	62d3      	str	r3, [r2, #44]	; 0x2c
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017c8e:	4b4e      	ldr	r3, [pc, #312]	; (8017dc8 <input_parameter+0x244>)
 8017c90:	edd3 7a08 	vldr	s15, [r3, #32]
			+ MAZE_OFFSET; //50;
 8017c94:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8017c98:	ee77 7a87 	vadd.f32	s15, s15, s14
	speed300_shortest.slalom_L.f_ofset = speed300_exploration.slalom_L.f_ofset
 8017c9c:	4b56      	ldr	r3, [pc, #344]	; (8017df8 <input_parameter+0x274>)
 8017c9e:	edc3 7a08 	vstr	s15, [r3, #32]
	speed300_shortest.slalom_L.e_ofset = speed300_exploration.slalom_L.e_ofset;
 8017ca2:	4b49      	ldr	r3, [pc, #292]	; (8017dc8 <input_parameter+0x244>)
 8017ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ca6:	4a54      	ldr	r2, [pc, #336]	; (8017df8 <input_parameter+0x274>)
 8017ca8:	6253      	str	r3, [r2, #36]	; 0x24

	speed300_shortest.turn90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017caa:	4b53      	ldr	r3, [pc, #332]	; (8017df8 <input_parameter+0x274>)
 8017cac:	685b      	ldr	r3, [r3, #4]
 8017cae:	4a52      	ldr	r2, [pc, #328]	; (8017df8 <input_parameter+0x274>)
 8017cb0:	6313      	str	r3, [r2, #48]	; 0x30
	speed300_shortest.turn90_R.t_speed = 600;
 8017cb2:	4b51      	ldr	r3, [pc, #324]	; (8017df8 <input_parameter+0x274>)
 8017cb4:	4a52      	ldr	r2, [pc, #328]	; (8017e00 <input_parameter+0x27c>)
 8017cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	speed300_shortest.turn90_R.t_acc = 10000;
 8017cb8:	4b4f      	ldr	r3, [pc, #316]	; (8017df8 <input_parameter+0x274>)
 8017cba:	4a52      	ldr	r2, [pc, #328]	; (8017e04 <input_parameter+0x280>)
 8017cbc:	641a      	str	r2, [r3, #64]	; 0x40
	speed300_shortest.turn90_R.f_ofset = 76;
 8017cbe:	4b4e      	ldr	r3, [pc, #312]	; (8017df8 <input_parameter+0x274>)
 8017cc0:	4a51      	ldr	r2, [pc, #324]	; (8017e08 <input_parameter+0x284>)
 8017cc2:	635a      	str	r2, [r3, #52]	; 0x34
	speed300_shortest.turn90_R.e_ofset = 107;
 8017cc4:	4b4c      	ldr	r3, [pc, #304]	; (8017df8 <input_parameter+0x274>)
 8017cc6:	4a51      	ldr	r2, [pc, #324]	; (8017e0c <input_parameter+0x288>)
 8017cc8:	639a      	str	r2, [r3, #56]	; 0x38

	speed300_shortest.turn90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017cca:	4b4b      	ldr	r3, [pc, #300]	; (8017df8 <input_parameter+0x274>)
 8017ccc:	685b      	ldr	r3, [r3, #4]
 8017cce:	4a4a      	ldr	r2, [pc, #296]	; (8017df8 <input_parameter+0x274>)
 8017cd0:	6453      	str	r3, [r2, #68]	; 0x44
	speed300_shortest.turn90_L.t_speed = 600;
 8017cd2:	4b49      	ldr	r3, [pc, #292]	; (8017df8 <input_parameter+0x274>)
 8017cd4:	4a4a      	ldr	r2, [pc, #296]	; (8017e00 <input_parameter+0x27c>)
 8017cd6:	651a      	str	r2, [r3, #80]	; 0x50
	speed300_shortest.turn90_L.t_acc = 10000;
 8017cd8:	4b47      	ldr	r3, [pc, #284]	; (8017df8 <input_parameter+0x274>)
 8017cda:	4a4a      	ldr	r2, [pc, #296]	; (8017e04 <input_parameter+0x280>)
 8017cdc:	655a      	str	r2, [r3, #84]	; 0x54
	speed300_shortest.turn90_L.f_ofset = 77;
 8017cde:	4b46      	ldr	r3, [pc, #280]	; (8017df8 <input_parameter+0x274>)
 8017ce0:	4a4b      	ldr	r2, [pc, #300]	; (8017e10 <input_parameter+0x28c>)
 8017ce2:	649a      	str	r2, [r3, #72]	; 0x48
	speed300_shortest.turn90_L.e_ofset = 103;
 8017ce4:	4b44      	ldr	r3, [pc, #272]	; (8017df8 <input_parameter+0x274>)
 8017ce6:	4a4b      	ldr	r2, [pc, #300]	; (8017e14 <input_parameter+0x290>)
 8017ce8:	64da      	str	r2, [r3, #76]	; 0x4c

	speed300_shortest.turn180_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017cea:	4b43      	ldr	r3, [pc, #268]	; (8017df8 <input_parameter+0x274>)
 8017cec:	685b      	ldr	r3, [r3, #4]
 8017cee:	4a42      	ldr	r2, [pc, #264]	; (8017df8 <input_parameter+0x274>)
 8017cf0:	6593      	str	r3, [r2, #88]	; 0x58
	speed300_shortest.turn180_R.t_speed = 430;
 8017cf2:	4b41      	ldr	r3, [pc, #260]	; (8017df8 <input_parameter+0x274>)
 8017cf4:	4a48      	ldr	r2, [pc, #288]	; (8017e18 <input_parameter+0x294>)
 8017cf6:	665a      	str	r2, [r3, #100]	; 0x64
	speed300_shortest.turn180_R.t_acc = 8000;
 8017cf8:	4b3f      	ldr	r3, [pc, #252]	; (8017df8 <input_parameter+0x274>)
 8017cfa:	4a48      	ldr	r2, [pc, #288]	; (8017e1c <input_parameter+0x298>)
 8017cfc:	669a      	str	r2, [r3, #104]	; 0x68
	speed300_shortest.turn180_R.f_ofset = 65;
 8017cfe:	4b3e      	ldr	r3, [pc, #248]	; (8017df8 <input_parameter+0x274>)
 8017d00:	4a47      	ldr	r2, [pc, #284]	; (8017e20 <input_parameter+0x29c>)
 8017d02:	65da      	str	r2, [r3, #92]	; 0x5c
	speed300_shortest.turn180_R.e_ofset = 80;
 8017d04:	4b3c      	ldr	r3, [pc, #240]	; (8017df8 <input_parameter+0x274>)
 8017d06:	4a47      	ldr	r2, [pc, #284]	; (8017e24 <input_parameter+0x2a0>)
 8017d08:	661a      	str	r2, [r3, #96]	; 0x60

	speed300_shortest.turn180_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017d0a:	4b3b      	ldr	r3, [pc, #236]	; (8017df8 <input_parameter+0x274>)
 8017d0c:	685b      	ldr	r3, [r3, #4]
 8017d0e:	4a3a      	ldr	r2, [pc, #232]	; (8017df8 <input_parameter+0x274>)
 8017d10:	66d3      	str	r3, [r2, #108]	; 0x6c
	speed300_shortest.turn180_L.t_speed = 450;
 8017d12:	4b39      	ldr	r3, [pc, #228]	; (8017df8 <input_parameter+0x274>)
 8017d14:	4a44      	ldr	r2, [pc, #272]	; (8017e28 <input_parameter+0x2a4>)
 8017d16:	679a      	str	r2, [r3, #120]	; 0x78
	speed300_shortest.turn180_L.t_acc = 8000;
 8017d18:	4b37      	ldr	r3, [pc, #220]	; (8017df8 <input_parameter+0x274>)
 8017d1a:	4a40      	ldr	r2, [pc, #256]	; (8017e1c <input_parameter+0x298>)
 8017d1c:	67da      	str	r2, [r3, #124]	; 0x7c
	speed300_shortest.turn180_L.f_ofset = 60;
 8017d1e:	4b36      	ldr	r3, [pc, #216]	; (8017df8 <input_parameter+0x274>)
 8017d20:	4a42      	ldr	r2, [pc, #264]	; (8017e2c <input_parameter+0x2a8>)
 8017d22:	671a      	str	r2, [r3, #112]	; 0x70
	speed300_shortest.turn180_L.e_ofset = 71;
 8017d24:	4b34      	ldr	r3, [pc, #208]	; (8017df8 <input_parameter+0x274>)
 8017d26:	4a42      	ldr	r2, [pc, #264]	; (8017e30 <input_parameter+0x2ac>)
 8017d28:	675a      	str	r2, [r3, #116]	; 0x74

	speed300_shortest.turn45in_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017d2a:	4b33      	ldr	r3, [pc, #204]	; (8017df8 <input_parameter+0x274>)
 8017d2c:	685b      	ldr	r3, [r3, #4]
 8017d2e:	4a32      	ldr	r2, [pc, #200]	; (8017df8 <input_parameter+0x274>)
 8017d30:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	speed300_shortest.turn45in_R.t_speed = 600;
 8017d34:	4b30      	ldr	r3, [pc, #192]	; (8017df8 <input_parameter+0x274>)
 8017d36:	4a32      	ldr	r2, [pc, #200]	; (8017e00 <input_parameter+0x27c>)
 8017d38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed300_shortest.turn45in_R.t_acc = 10000;
 8017d3c:	4b2e      	ldr	r3, [pc, #184]	; (8017df8 <input_parameter+0x274>)
 8017d3e:	4a31      	ldr	r2, [pc, #196]	; (8017e04 <input_parameter+0x280>)
 8017d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed300_shortest.turn45in_R.f_ofset = 27;
 8017d44:	4b2c      	ldr	r3, [pc, #176]	; (8017df8 <input_parameter+0x274>)
 8017d46:	4a3b      	ldr	r2, [pc, #236]	; (8017e34 <input_parameter+0x2b0>)
 8017d48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed300_shortest.turn45in_R.e_ofset = 89;
 8017d4c:	4b2a      	ldr	r3, [pc, #168]	; (8017df8 <input_parameter+0x274>)
 8017d4e:	4a3a      	ldr	r2, [pc, #232]	; (8017e38 <input_parameter+0x2b4>)
 8017d50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed300_shortest.turn45in_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017d54:	4b28      	ldr	r3, [pc, #160]	; (8017df8 <input_parameter+0x274>)
 8017d56:	685b      	ldr	r3, [r3, #4]
 8017d58:	4a27      	ldr	r2, [pc, #156]	; (8017df8 <input_parameter+0x274>)
 8017d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	speed300_shortest.turn45in_L.t_speed = 600;
 8017d5e:	4b26      	ldr	r3, [pc, #152]	; (8017df8 <input_parameter+0x274>)
 8017d60:	4a27      	ldr	r2, [pc, #156]	; (8017e00 <input_parameter+0x27c>)
 8017d62:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed300_shortest.turn45in_L.t_acc = 10000;
 8017d66:	4b24      	ldr	r3, [pc, #144]	; (8017df8 <input_parameter+0x274>)
 8017d68:	4a26      	ldr	r2, [pc, #152]	; (8017e04 <input_parameter+0x280>)
 8017d6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed300_shortest.turn45in_L.f_ofset = 33;
 8017d6e:	4b22      	ldr	r3, [pc, #136]	; (8017df8 <input_parameter+0x274>)
 8017d70:	4a32      	ldr	r2, [pc, #200]	; (8017e3c <input_parameter+0x2b8>)
 8017d72:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed300_shortest.turn45in_L.e_ofset = 90;
 8017d76:	4b20      	ldr	r3, [pc, #128]	; (8017df8 <input_parameter+0x274>)
 8017d78:	4a31      	ldr	r2, [pc, #196]	; (8017e40 <input_parameter+0x2bc>)
 8017d7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed300_shortest.turn135in_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017d7e:	4b1e      	ldr	r3, [pc, #120]	; (8017df8 <input_parameter+0x274>)
 8017d80:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_R.g_speed =
 8017d82:	4a1d      	ldr	r2, [pc, #116]	; (8017df8 <input_parameter+0x274>)
 8017d84:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	speed300_shortest.turn135in_R.t_speed = 610;
 8017d88:	4b1b      	ldr	r3, [pc, #108]	; (8017df8 <input_parameter+0x274>)
 8017d8a:	4a2e      	ldr	r2, [pc, #184]	; (8017e44 <input_parameter+0x2c0>)
 8017d8c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed300_shortest.turn135in_R.t_acc = 8000;
 8017d90:	4b19      	ldr	r3, [pc, #100]	; (8017df8 <input_parameter+0x274>)
 8017d92:	4a22      	ldr	r2, [pc, #136]	; (8017e1c <input_parameter+0x298>)
 8017d94:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed300_shortest.turn135in_R.f_ofset = 67;
 8017d98:	4b17      	ldr	r3, [pc, #92]	; (8017df8 <input_parameter+0x274>)
 8017d9a:	4a2b      	ldr	r2, [pc, #172]	; (8017e48 <input_parameter+0x2c4>)
 8017d9c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed300_shortest.turn135in_R.e_ofset = 73;
 8017da0:	4b15      	ldr	r3, [pc, #84]	; (8017df8 <input_parameter+0x274>)
 8017da2:	4a2a      	ldr	r2, [pc, #168]	; (8017e4c <input_parameter+0x2c8>)
 8017da4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed300_shortest.turn135in_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017da8:	4b13      	ldr	r3, [pc, #76]	; (8017df8 <input_parameter+0x274>)
 8017daa:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135in_L.g_speed =
 8017dac:	4a12      	ldr	r2, [pc, #72]	; (8017df8 <input_parameter+0x274>)
 8017dae:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
	speed300_shortest.turn135in_L.t_speed = 610;
 8017db2:	4b11      	ldr	r3, [pc, #68]	; (8017df8 <input_parameter+0x274>)
 8017db4:	4a23      	ldr	r2, [pc, #140]	; (8017e44 <input_parameter+0x2c0>)
 8017db6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed300_shortest.turn135in_L.t_acc = 8000;
 8017dba:	4b0f      	ldr	r3, [pc, #60]	; (8017df8 <input_parameter+0x274>)
 8017dbc:	4a17      	ldr	r2, [pc, #92]	; (8017e1c <input_parameter+0x298>)
 8017dbe:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	speed300_shortest.turn135in_L.f_ofset = 67;
 8017dc2:	4b0d      	ldr	r3, [pc, #52]	; (8017df8 <input_parameter+0x274>)
 8017dc4:	e044      	b.n	8017e50 <input_parameter+0x2cc>
 8017dc6:	bf00      	nop
 8017dc8:	2000ef80 	.word	0x2000ef80
 8017dcc:	43960000 	.word	0x43960000
 8017dd0:	44750000 	.word	0x44750000
 8017dd4:	464b2000 	.word	0x464b2000
 8017dd8:	40400000 	.word	0x40400000
 8017ddc:	41a00000 	.word	0x41a00000
 8017de0:	41980000 	.word	0x41980000
 8017de4:	2000f0c8 	.word	0x2000f0c8
 8017de8:	437a0000 	.word	0x437a0000
 8017dec:	444f8000 	.word	0x444f8000
 8017df0:	460ca000 	.word	0x460ca000
 8017df4:	44368000 	.word	0x44368000
 8017df8:	2000f210 	.word	0x2000f210
 8017dfc:	43480000 	.word	0x43480000
 8017e00:	44160000 	.word	0x44160000
 8017e04:	461c4000 	.word	0x461c4000
 8017e08:	42980000 	.word	0x42980000
 8017e0c:	42d60000 	.word	0x42d60000
 8017e10:	429a0000 	.word	0x429a0000
 8017e14:	42ce0000 	.word	0x42ce0000
 8017e18:	43d70000 	.word	0x43d70000
 8017e1c:	45fa0000 	.word	0x45fa0000
 8017e20:	42820000 	.word	0x42820000
 8017e24:	42a00000 	.word	0x42a00000
 8017e28:	43e10000 	.word	0x43e10000
 8017e2c:	42700000 	.word	0x42700000
 8017e30:	428e0000 	.word	0x428e0000
 8017e34:	41d80000 	.word	0x41d80000
 8017e38:	42b20000 	.word	0x42b20000
 8017e3c:	42040000 	.word	0x42040000
 8017e40:	42b40000 	.word	0x42b40000
 8017e44:	44188000 	.word	0x44188000
 8017e48:	42860000 	.word	0x42860000
 8017e4c:	42920000 	.word	0x42920000
 8017e50:	4a99      	ldr	r2, [pc, #612]	; (80180b8 <input_parameter+0x534>)
 8017e52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed300_shortest.turn135in_L.e_ofset = 73;
 8017e56:	4b99      	ldr	r3, [pc, #612]	; (80180bc <input_parameter+0x538>)
 8017e58:	4a99      	ldr	r2, [pc, #612]	; (80180c0 <input_parameter+0x53c>)
 8017e5a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed300_shortest.turn45out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017e5e:	4b97      	ldr	r3, [pc, #604]	; (80180bc <input_parameter+0x538>)
 8017e60:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_R.g_speed =
 8017e62:	4a96      	ldr	r2, [pc, #600]	; (80180bc <input_parameter+0x538>)
 8017e64:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
	speed300_shortest.turn45out_R.t_speed = 600;
 8017e68:	4b94      	ldr	r3, [pc, #592]	; (80180bc <input_parameter+0x538>)
 8017e6a:	4a96      	ldr	r2, [pc, #600]	; (80180c4 <input_parameter+0x540>)
 8017e6c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed300_shortest.turn45out_R.t_acc = 10000;
 8017e70:	4b92      	ldr	r3, [pc, #584]	; (80180bc <input_parameter+0x538>)
 8017e72:	4a95      	ldr	r2, [pc, #596]	; (80180c8 <input_parameter+0x544>)
 8017e74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed300_shortest.turn45out_R.f_ofset = 57;
 8017e78:	4b90      	ldr	r3, [pc, #576]	; (80180bc <input_parameter+0x538>)
 8017e7a:	4a94      	ldr	r2, [pc, #592]	; (80180cc <input_parameter+0x548>)
 8017e7c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed300_shortest.turn45out_R.e_ofset = 57;
 8017e80:	4b8e      	ldr	r3, [pc, #568]	; (80180bc <input_parameter+0x538>)
 8017e82:	4a92      	ldr	r2, [pc, #584]	; (80180cc <input_parameter+0x548>)
 8017e84:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed300_shortest.turn45out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017e88:	4b8c      	ldr	r3, [pc, #560]	; (80180bc <input_parameter+0x538>)
 8017e8a:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn45out_L.g_speed =
 8017e8c:	4a8b      	ldr	r2, [pc, #556]	; (80180bc <input_parameter+0x538>)
 8017e8e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
	speed300_shortest.turn45out_L.t_speed = 600;
 8017e92:	4b8a      	ldr	r3, [pc, #552]	; (80180bc <input_parameter+0x538>)
 8017e94:	4a8b      	ldr	r2, [pc, #556]	; (80180c4 <input_parameter+0x540>)
 8017e96:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed300_shortest.turn45out_L.t_acc = 10000;
 8017e9a:	4b88      	ldr	r3, [pc, #544]	; (80180bc <input_parameter+0x538>)
 8017e9c:	4a8a      	ldr	r2, [pc, #552]	; (80180c8 <input_parameter+0x544>)
 8017e9e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed300_shortest.turn45out_L.f_ofset = 64;
 8017ea2:	4b86      	ldr	r3, [pc, #536]	; (80180bc <input_parameter+0x538>)
 8017ea4:	f04f 4285 	mov.w	r2, #1115684864	; 0x42800000
 8017ea8:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed300_shortest.turn45out_L.e_ofset = 52;
 8017eac:	4b83      	ldr	r3, [pc, #524]	; (80180bc <input_parameter+0x538>)
 8017eae:	4a88      	ldr	r2, [pc, #544]	; (80180d0 <input_parameter+0x54c>)
 8017eb0:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed300_shortest.turn135out_R.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017eb4:	4b81      	ldr	r3, [pc, #516]	; (80180bc <input_parameter+0x538>)
 8017eb6:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_R.g_speed =
 8017eb8:	4a80      	ldr	r2, [pc, #512]	; (80180bc <input_parameter+0x538>)
 8017eba:	f8c2 30f8 	str.w	r3, [r2, #248]	; 0xf8
	speed300_shortest.turn135out_R.t_speed = 660;
 8017ebe:	4b7f      	ldr	r3, [pc, #508]	; (80180bc <input_parameter+0x538>)
 8017ec0:	4a84      	ldr	r2, [pc, #528]	; (80180d4 <input_parameter+0x550>)
 8017ec2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed300_shortest.turn135out_R.t_acc = 8000;
 8017ec6:	4b7d      	ldr	r3, [pc, #500]	; (80180bc <input_parameter+0x538>)
 8017ec8:	4a83      	ldr	r2, [pc, #524]	; (80180d8 <input_parameter+0x554>)
 8017eca:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed300_shortest.turn135out_R.f_ofset = 55;
 8017ece:	4b7b      	ldr	r3, [pc, #492]	; (80180bc <input_parameter+0x538>)
 8017ed0:	4a82      	ldr	r2, [pc, #520]	; (80180dc <input_parameter+0x558>)
 8017ed2:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed300_shortest.turn135out_R.e_ofset = 100;
 8017ed6:	4b79      	ldr	r3, [pc, #484]	; (80180bc <input_parameter+0x538>)
 8017ed8:	4a81      	ldr	r2, [pc, #516]	; (80180e0 <input_parameter+0x55c>)
 8017eda:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed300_shortest.turn135out_L.g_speed =
			speed300_shortest.TurnCentervelocity;
 8017ede:	4b77      	ldr	r3, [pc, #476]	; (80180bc <input_parameter+0x538>)
 8017ee0:	685b      	ldr	r3, [r3, #4]
	speed300_shortest.turn135out_L.g_speed =
 8017ee2:	4a76      	ldr	r2, [pc, #472]	; (80180bc <input_parameter+0x538>)
 8017ee4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
	speed300_shortest.turn135out_L.t_speed = 660;
 8017ee8:	4b74      	ldr	r3, [pc, #464]	; (80180bc <input_parameter+0x538>)
 8017eea:	4a7a      	ldr	r2, [pc, #488]	; (80180d4 <input_parameter+0x550>)
 8017eec:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed300_shortest.turn135out_L.t_acc = 8000;
 8017ef0:	4b72      	ldr	r3, [pc, #456]	; (80180bc <input_parameter+0x538>)
 8017ef2:	4a79      	ldr	r2, [pc, #484]	; (80180d8 <input_parameter+0x554>)
 8017ef4:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed300_shortest.turn135out_L.f_ofset = 55;
 8017ef8:	4b70      	ldr	r3, [pc, #448]	; (80180bc <input_parameter+0x538>)
 8017efa:	4a78      	ldr	r2, [pc, #480]	; (80180dc <input_parameter+0x558>)
 8017efc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed300_shortest.turn135out_L.e_ofset = 103;
 8017f00:	4b6e      	ldr	r3, [pc, #440]	; (80180bc <input_parameter+0x538>)
 8017f02:	4a78      	ldr	r2, [pc, #480]	; (80180e4 <input_parameter+0x560>)
 8017f04:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed300_shortest.V90_R.g_speed = speed300_shortest.TurnCentervelocity;
 8017f08:	4b6c      	ldr	r3, [pc, #432]	; (80180bc <input_parameter+0x538>)
 8017f0a:	685b      	ldr	r3, [r3, #4]
 8017f0c:	4a6b      	ldr	r2, [pc, #428]	; (80180bc <input_parameter+0x538>)
 8017f0e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	speed300_shortest.V90_R.t_speed = 700;
 8017f12:	4b6a      	ldr	r3, [pc, #424]	; (80180bc <input_parameter+0x538>)
 8017f14:	4a74      	ldr	r2, [pc, #464]	; (80180e8 <input_parameter+0x564>)
 8017f16:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed300_shortest.V90_R.t_acc = 11000;
 8017f1a:	4b68      	ldr	r3, [pc, #416]	; (80180bc <input_parameter+0x538>)
 8017f1c:	4a73      	ldr	r2, [pc, #460]	; (80180ec <input_parameter+0x568>)
 8017f1e:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed300_shortest.V90_R.f_ofset = 35;
 8017f22:	4b66      	ldr	r3, [pc, #408]	; (80180bc <input_parameter+0x538>)
 8017f24:	4a72      	ldr	r2, [pc, #456]	; (80180f0 <input_parameter+0x56c>)
 8017f26:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed300_shortest.V90_R.e_ofset = 56;
 8017f2a:	4b64      	ldr	r3, [pc, #400]	; (80180bc <input_parameter+0x538>)
 8017f2c:	4a71      	ldr	r2, [pc, #452]	; (80180f4 <input_parameter+0x570>)
 8017f2e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed300_shortest.V90_L.g_speed = speed300_shortest.TurnCentervelocity;
 8017f32:	4b62      	ldr	r3, [pc, #392]	; (80180bc <input_parameter+0x538>)
 8017f34:	685b      	ldr	r3, [r3, #4]
 8017f36:	4a61      	ldr	r2, [pc, #388]	; (80180bc <input_parameter+0x538>)
 8017f38:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
	speed300_shortest.V90_L.t_speed = 700;
 8017f3c:	4b5f      	ldr	r3, [pc, #380]	; (80180bc <input_parameter+0x538>)
 8017f3e:	4a6a      	ldr	r2, [pc, #424]	; (80180e8 <input_parameter+0x564>)
 8017f40:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed300_shortest.V90_L.t_acc = 11000;
 8017f44:	4b5d      	ldr	r3, [pc, #372]	; (80180bc <input_parameter+0x538>)
 8017f46:	4a69      	ldr	r2, [pc, #420]	; (80180ec <input_parameter+0x568>)
 8017f48:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed300_shortest.V90_L.f_ofset = 32;
 8017f4c:	4b5b      	ldr	r3, [pc, #364]	; (80180bc <input_parameter+0x538>)
 8017f4e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017f52:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed300_shortest.V90_L.e_ofset = 60;
 8017f56:	4b59      	ldr	r3, [pc, #356]	; (80180bc <input_parameter+0x538>)
 8017f58:	4a67      	ldr	r2, [pc, #412]	; (80180f8 <input_parameter+0x574>)
 8017f5a:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c



//********************************600********************************************
	speed600_shortest_mollifier.SlalomCentervelocity = 600;
 8017f5e:	4b67      	ldr	r3, [pc, #412]	; (80180fc <input_parameter+0x578>)
 8017f60:	4a58      	ldr	r2, [pc, #352]	; (80180c4 <input_parameter+0x540>)
 8017f62:	601a      	str	r2, [r3, #0]
	speed600_shortest_mollifier.TurnCentervelocity = 600;
 8017f64:	4b65      	ldr	r3, [pc, #404]	; (80180fc <input_parameter+0x578>)
 8017f66:	4a57      	ldr	r2, [pc, #348]	; (80180c4 <input_parameter+0x540>)
 8017f68:	605a      	str	r2, [r3, #4]

	speed600_shortest_mollifier.slalom_R.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017f6a:	4b64      	ldr	r3, [pc, #400]	; (80180fc <input_parameter+0x578>)
 8017f6c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_R.g_speed =
 8017f6e:	4a63      	ldr	r2, [pc, #396]	; (80180fc <input_parameter+0x578>)
 8017f70:	6093      	str	r3, [r2, #8]
	speed600_shortest_mollifier.slalom_R.t_speed = 1100;
 8017f72:	4b62      	ldr	r3, [pc, #392]	; (80180fc <input_parameter+0x578>)
 8017f74:	4a62      	ldr	r2, [pc, #392]	; (8018100 <input_parameter+0x57c>)
 8017f76:	615a      	str	r2, [r3, #20]
	speed600_shortest_mollifier.slalom_R.t_acc = 60000;
 8017f78:	4b60      	ldr	r3, [pc, #384]	; (80180fc <input_parameter+0x578>)
 8017f7a:	4a62      	ldr	r2, [pc, #392]	; (8018104 <input_parameter+0x580>)
 8017f7c:	619a      	str	r2, [r3, #24]
	speed600_shortest_mollifier.slalom_R.f_ofset = 5;
 8017f7e:	4b5f      	ldr	r3, [pc, #380]	; (80180fc <input_parameter+0x578>)
 8017f80:	4a61      	ldr	r2, [pc, #388]	; (8018108 <input_parameter+0x584>)
 8017f82:	60da      	str	r2, [r3, #12]
	speed600_shortest_mollifier.slalom_R.e_ofset = 28;
 8017f84:	4b5d      	ldr	r3, [pc, #372]	; (80180fc <input_parameter+0x578>)
 8017f86:	4a61      	ldr	r2, [pc, #388]	; (801810c <input_parameter+0x588>)
 8017f88:	611a      	str	r2, [r3, #16]

	speed600_shortest_mollifier.slalom_L.g_speed =
			speed600_shortest_mollifier.SlalomCentervelocity;
 8017f8a:	4b5c      	ldr	r3, [pc, #368]	; (80180fc <input_parameter+0x578>)
 8017f8c:	681b      	ldr	r3, [r3, #0]
	speed600_shortest_mollifier.slalom_L.g_speed =
 8017f8e:	4a5b      	ldr	r2, [pc, #364]	; (80180fc <input_parameter+0x578>)
 8017f90:	61d3      	str	r3, [r2, #28]
	speed600_shortest_mollifier.slalom_L.t_speed = 1100;
 8017f92:	4b5a      	ldr	r3, [pc, #360]	; (80180fc <input_parameter+0x578>)
 8017f94:	4a5a      	ldr	r2, [pc, #360]	; (8018100 <input_parameter+0x57c>)
 8017f96:	629a      	str	r2, [r3, #40]	; 0x28
	speed600_shortest_mollifier.slalom_L.t_acc = 60000;
 8017f98:	4b58      	ldr	r3, [pc, #352]	; (80180fc <input_parameter+0x578>)
 8017f9a:	4a5a      	ldr	r2, [pc, #360]	; (8018104 <input_parameter+0x580>)
 8017f9c:	62da      	str	r2, [r3, #44]	; 0x2c
	speed600_shortest_mollifier.slalom_L.f_ofset = 5;
 8017f9e:	4b57      	ldr	r3, [pc, #348]	; (80180fc <input_parameter+0x578>)
 8017fa0:	4a59      	ldr	r2, [pc, #356]	; (8018108 <input_parameter+0x584>)
 8017fa2:	621a      	str	r2, [r3, #32]
	speed600_shortest_mollifier.slalom_L.e_ofset = 32;
 8017fa4:	4b55      	ldr	r3, [pc, #340]	; (80180fc <input_parameter+0x578>)
 8017fa6:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8017faa:	625a      	str	r2, [r3, #36]	; 0x24

	speed600_shortest_mollifier.turn90_R.g_speed = 600;
 8017fac:	4b53      	ldr	r3, [pc, #332]	; (80180fc <input_parameter+0x578>)
 8017fae:	4a45      	ldr	r2, [pc, #276]	; (80180c4 <input_parameter+0x540>)
 8017fb0:	631a      	str	r2, [r3, #48]	; 0x30
	speed600_shortest_mollifier.turn90_R.t_speed = 950;
 8017fb2:	4b52      	ldr	r3, [pc, #328]	; (80180fc <input_parameter+0x578>)
 8017fb4:	4a56      	ldr	r2, [pc, #344]	; (8018110 <input_parameter+0x58c>)
 8017fb6:	63da      	str	r2, [r3, #60]	; 0x3c
	speed600_shortest_mollifier.turn90_R.t_acc = 15000;
 8017fb8:	4b50      	ldr	r3, [pc, #320]	; (80180fc <input_parameter+0x578>)
 8017fba:	4a56      	ldr	r2, [pc, #344]	; (8018114 <input_parameter+0x590>)
 8017fbc:	641a      	str	r2, [r3, #64]	; 0x40
	speed600_shortest_mollifier.turn90_R.f_ofset = 31;
 8017fbe:	4b4f      	ldr	r3, [pc, #316]	; (80180fc <input_parameter+0x578>)
 8017fc0:	4a55      	ldr	r2, [pc, #340]	; (8018118 <input_parameter+0x594>)
 8017fc2:	635a      	str	r2, [r3, #52]	; 0x34
	speed600_shortest_mollifier.turn90_R.e_ofset = 31;
 8017fc4:	4b4d      	ldr	r3, [pc, #308]	; (80180fc <input_parameter+0x578>)
 8017fc6:	4a54      	ldr	r2, [pc, #336]	; (8018118 <input_parameter+0x594>)
 8017fc8:	639a      	str	r2, [r3, #56]	; 0x38

	speed600_shortest_mollifier.turn90_L.g_speed = 600;
 8017fca:	4b4c      	ldr	r3, [pc, #304]	; (80180fc <input_parameter+0x578>)
 8017fcc:	4a3d      	ldr	r2, [pc, #244]	; (80180c4 <input_parameter+0x540>)
 8017fce:	645a      	str	r2, [r3, #68]	; 0x44
	speed600_shortest_mollifier.turn90_L.t_speed = 950;
 8017fd0:	4b4a      	ldr	r3, [pc, #296]	; (80180fc <input_parameter+0x578>)
 8017fd2:	4a4f      	ldr	r2, [pc, #316]	; (8018110 <input_parameter+0x58c>)
 8017fd4:	651a      	str	r2, [r3, #80]	; 0x50
	speed600_shortest_mollifier.turn90_L.t_acc = 15000;
 8017fd6:	4b49      	ldr	r3, [pc, #292]	; (80180fc <input_parameter+0x578>)
 8017fd8:	4a4e      	ldr	r2, [pc, #312]	; (8018114 <input_parameter+0x590>)
 8017fda:	655a      	str	r2, [r3, #84]	; 0x54
	speed600_shortest_mollifier.turn90_L.f_ofset = 31;
 8017fdc:	4b47      	ldr	r3, [pc, #284]	; (80180fc <input_parameter+0x578>)
 8017fde:	4a4e      	ldr	r2, [pc, #312]	; (8018118 <input_parameter+0x594>)
 8017fe0:	649a      	str	r2, [r3, #72]	; 0x48
	speed600_shortest_mollifier.turn90_L.e_ofset = 35;
 8017fe2:	4b46      	ldr	r3, [pc, #280]	; (80180fc <input_parameter+0x578>)
 8017fe4:	4a42      	ldr	r2, [pc, #264]	; (80180f0 <input_parameter+0x56c>)
 8017fe6:	64da      	str	r2, [r3, #76]	; 0x4c

	speed600_shortest_mollifier.turn180_R.g_speed =600;
 8017fe8:	4b44      	ldr	r3, [pc, #272]	; (80180fc <input_parameter+0x578>)
 8017fea:	4a36      	ldr	r2, [pc, #216]	; (80180c4 <input_parameter+0x540>)
 8017fec:	659a      	str	r2, [r3, #88]	; 0x58
	speed600_shortest_mollifier.turn180_R.t_speed = 840;
 8017fee:	4b43      	ldr	r3, [pc, #268]	; (80180fc <input_parameter+0x578>)
 8017ff0:	4a4a      	ldr	r2, [pc, #296]	; (801811c <input_parameter+0x598>)
 8017ff2:	665a      	str	r2, [r3, #100]	; 0x64
	speed600_shortest_mollifier.turn180_R.t_acc = 14000;
 8017ff4:	4b41      	ldr	r3, [pc, #260]	; (80180fc <input_parameter+0x578>)
 8017ff6:	4a4a      	ldr	r2, [pc, #296]	; (8018120 <input_parameter+0x59c>)
 8017ff8:	669a      	str	r2, [r3, #104]	; 0x68
	speed600_shortest_mollifier.turn180_R.f_ofset = 7;
 8017ffa:	4b40      	ldr	r3, [pc, #256]	; (80180fc <input_parameter+0x578>)
 8017ffc:	4a49      	ldr	r2, [pc, #292]	; (8018124 <input_parameter+0x5a0>)
 8017ffe:	65da      	str	r2, [r3, #92]	; 0x5c
	speed600_shortest_mollifier.turn180_R.e_ofset = 20;
 8018000:	4b3e      	ldr	r3, [pc, #248]	; (80180fc <input_parameter+0x578>)
 8018002:	4a49      	ldr	r2, [pc, #292]	; (8018128 <input_parameter+0x5a4>)
 8018004:	661a      	str	r2, [r3, #96]	; 0x60

	speed600_shortest_mollifier.turn180_L.g_speed = 600;
 8018006:	4b3d      	ldr	r3, [pc, #244]	; (80180fc <input_parameter+0x578>)
 8018008:	4a2e      	ldr	r2, [pc, #184]	; (80180c4 <input_parameter+0x540>)
 801800a:	66da      	str	r2, [r3, #108]	; 0x6c
	speed600_shortest_mollifier.turn180_L.t_speed = 820;
 801800c:	4b3b      	ldr	r3, [pc, #236]	; (80180fc <input_parameter+0x578>)
 801800e:	4a47      	ldr	r2, [pc, #284]	; (801812c <input_parameter+0x5a8>)
 8018010:	679a      	str	r2, [r3, #120]	; 0x78
	speed600_shortest_mollifier.turn180_L.t_acc = 14000;
 8018012:	4b3a      	ldr	r3, [pc, #232]	; (80180fc <input_parameter+0x578>)
 8018014:	4a42      	ldr	r2, [pc, #264]	; (8018120 <input_parameter+0x59c>)
 8018016:	67da      	str	r2, [r3, #124]	; 0x7c
	speed600_shortest_mollifier.turn180_L.f_ofset = 7;
 8018018:	4b38      	ldr	r3, [pc, #224]	; (80180fc <input_parameter+0x578>)
 801801a:	4a42      	ldr	r2, [pc, #264]	; (8018124 <input_parameter+0x5a0>)
 801801c:	671a      	str	r2, [r3, #112]	; 0x70
	speed600_shortest_mollifier.turn180_L.e_ofset = 18;
 801801e:	4b37      	ldr	r3, [pc, #220]	; (80180fc <input_parameter+0x578>)
 8018020:	4a43      	ldr	r2, [pc, #268]	; (8018130 <input_parameter+0x5ac>)
 8018022:	675a      	str	r2, [r3, #116]	; 0x74

	speed600_shortest_mollifier.turn45in_R.g_speed = 600;
 8018024:	4b35      	ldr	r3, [pc, #212]	; (80180fc <input_parameter+0x578>)
 8018026:	4a27      	ldr	r2, [pc, #156]	; (80180c4 <input_parameter+0x540>)
 8018028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	speed600_shortest_mollifier.turn45in_R.t_speed = 830;
 801802c:	4b33      	ldr	r3, [pc, #204]	; (80180fc <input_parameter+0x578>)
 801802e:	4a41      	ldr	r2, [pc, #260]	; (8018134 <input_parameter+0x5b0>)
 8018030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	speed600_shortest_mollifier.turn45in_R.t_acc = 12000;
 8018034:	4b31      	ldr	r3, [pc, #196]	; (80180fc <input_parameter+0x578>)
 8018036:	4a40      	ldr	r2, [pc, #256]	; (8018138 <input_parameter+0x5b4>)
 8018038:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	speed600_shortest_mollifier.turn45in_R.f_ofset = 13;
 801803c:	4b2f      	ldr	r3, [pc, #188]	; (80180fc <input_parameter+0x578>)
 801803e:	4a3f      	ldr	r2, [pc, #252]	; (801813c <input_parameter+0x5b8>)
 8018040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	speed600_shortest_mollifier.turn45in_R.e_ofset = 38;
 8018044:	4b2d      	ldr	r3, [pc, #180]	; (80180fc <input_parameter+0x578>)
 8018046:	4a3e      	ldr	r2, [pc, #248]	; (8018140 <input_parameter+0x5bc>)
 8018048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	speed600_shortest_mollifier.turn45in_L.g_speed = 600;
 801804c:	4b2b      	ldr	r3, [pc, #172]	; (80180fc <input_parameter+0x578>)
 801804e:	4a1d      	ldr	r2, [pc, #116]	; (80180c4 <input_parameter+0x540>)
 8018050:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	speed600_shortest_mollifier.turn45in_L.t_speed = 898;
 8018054:	4b29      	ldr	r3, [pc, #164]	; (80180fc <input_parameter+0x578>)
 8018056:	4a3b      	ldr	r2, [pc, #236]	; (8018144 <input_parameter+0x5c0>)
 8018058:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	speed600_shortest_mollifier.turn45in_L.t_acc = 12000;
 801805c:	4b27      	ldr	r3, [pc, #156]	; (80180fc <input_parameter+0x578>)
 801805e:	4a36      	ldr	r2, [pc, #216]	; (8018138 <input_parameter+0x5b4>)
 8018060:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	speed600_shortest_mollifier.turn45in_L.f_ofset = 12;
 8018064:	4b25      	ldr	r3, [pc, #148]	; (80180fc <input_parameter+0x578>)
 8018066:	4a38      	ldr	r2, [pc, #224]	; (8018148 <input_parameter+0x5c4>)
 8018068:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	speed600_shortest_mollifier.turn45in_L.e_ofset = 36;
 801806c:	4b23      	ldr	r3, [pc, #140]	; (80180fc <input_parameter+0x578>)
 801806e:	4a37      	ldr	r2, [pc, #220]	; (801814c <input_parameter+0x5c8>)
 8018070:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	speed600_shortest_mollifier.turn135in_R.g_speed = 600;
 8018074:	4b21      	ldr	r3, [pc, #132]	; (80180fc <input_parameter+0x578>)
 8018076:	4a13      	ldr	r2, [pc, #76]	; (80180c4 <input_parameter+0x540>)
 8018078:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	speed600_shortest_mollifier.turn135in_R.t_speed = 940;
 801807c:	4b1f      	ldr	r3, [pc, #124]	; (80180fc <input_parameter+0x578>)
 801807e:	4a34      	ldr	r2, [pc, #208]	; (8018150 <input_parameter+0x5cc>)
 8018080:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	speed600_shortest_mollifier.turn135in_R.t_acc = 14000;
 8018084:	4b1d      	ldr	r3, [pc, #116]	; (80180fc <input_parameter+0x578>)
 8018086:	4a26      	ldr	r2, [pc, #152]	; (8018120 <input_parameter+0x59c>)
 8018088:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	speed600_shortest_mollifier.turn135in_R.f_ofset = 9.5;
 801808c:	4b1b      	ldr	r3, [pc, #108]	; (80180fc <input_parameter+0x578>)
 801808e:	4a31      	ldr	r2, [pc, #196]	; (8018154 <input_parameter+0x5d0>)
 8018090:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	speed600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018094:	4b19      	ldr	r3, [pc, #100]	; (80180fc <input_parameter+0x578>)
 8018096:	4a2d      	ldr	r2, [pc, #180]	; (801814c <input_parameter+0x5c8>)
 8018098:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	speed600_shortest_mollifier.turn135in_L.g_speed = 600;
 801809c:	4b17      	ldr	r3, [pc, #92]	; (80180fc <input_parameter+0x578>)
 801809e:	4a09      	ldr	r2, [pc, #36]	; (80180c4 <input_parameter+0x540>)
 80180a0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	speed600_shortest_mollifier.turn135in_L.t_speed = 900;
 80180a4:	4b15      	ldr	r3, [pc, #84]	; (80180fc <input_parameter+0x578>)
 80180a6:	4a2c      	ldr	r2, [pc, #176]	; (8018158 <input_parameter+0x5d4>)
 80180a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	speed600_shortest_mollifier.turn135in_L.t_acc = 14000;
 80180ac:	4b13      	ldr	r3, [pc, #76]	; (80180fc <input_parameter+0x578>)
 80180ae:	4a1c      	ldr	r2, [pc, #112]	; (8018120 <input_parameter+0x59c>)
 80180b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
 80180b4:	e052      	b.n	801815c <input_parameter+0x5d8>
 80180b6:	bf00      	nop
 80180b8:	42860000 	.word	0x42860000
 80180bc:	2000f210 	.word	0x2000f210
 80180c0:	42920000 	.word	0x42920000
 80180c4:	44160000 	.word	0x44160000
 80180c8:	461c4000 	.word	0x461c4000
 80180cc:	42640000 	.word	0x42640000
 80180d0:	42500000 	.word	0x42500000
 80180d4:	44250000 	.word	0x44250000
 80180d8:	45fa0000 	.word	0x45fa0000
 80180dc:	425c0000 	.word	0x425c0000
 80180e0:	42c80000 	.word	0x42c80000
 80180e4:	42ce0000 	.word	0x42ce0000
 80180e8:	442f0000 	.word	0x442f0000
 80180ec:	462be000 	.word	0x462be000
 80180f0:	420c0000 	.word	0x420c0000
 80180f4:	42600000 	.word	0x42600000
 80180f8:	42700000 	.word	0x42700000
 80180fc:	2000f358 	.word	0x2000f358
 8018100:	44898000 	.word	0x44898000
 8018104:	476a6000 	.word	0x476a6000
 8018108:	40a00000 	.word	0x40a00000
 801810c:	41e00000 	.word	0x41e00000
 8018110:	446d8000 	.word	0x446d8000
 8018114:	466a6000 	.word	0x466a6000
 8018118:	41f80000 	.word	0x41f80000
 801811c:	44520000 	.word	0x44520000
 8018120:	465ac000 	.word	0x465ac000
 8018124:	40e00000 	.word	0x40e00000
 8018128:	41a00000 	.word	0x41a00000
 801812c:	444d0000 	.word	0x444d0000
 8018130:	41900000 	.word	0x41900000
 8018134:	444f8000 	.word	0x444f8000
 8018138:	463b8000 	.word	0x463b8000
 801813c:	41500000 	.word	0x41500000
 8018140:	42180000 	.word	0x42180000
 8018144:	44608000 	.word	0x44608000
 8018148:	41400000 	.word	0x41400000
 801814c:	42100000 	.word	0x42100000
 8018150:	446b0000 	.word	0x446b0000
 8018154:	41180000 	.word	0x41180000
 8018158:	44610000 	.word	0x44610000
	speed600_shortest_mollifier.turn135in_L.f_ofset = 8;
 801815c:	4b9e      	ldr	r3, [pc, #632]	; (80183d8 <input_parameter+0x854>)
 801815e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018162:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	speed600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018166:	4b9c      	ldr	r3, [pc, #624]	; (80183d8 <input_parameter+0x854>)
 8018168:	4a9c      	ldr	r2, [pc, #624]	; (80183dc <input_parameter+0x858>)
 801816a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

	speed600_shortest_mollifier.turn45out_R.g_speed = 600;
 801816e:	4b9a      	ldr	r3, [pc, #616]	; (80183d8 <input_parameter+0x854>)
 8018170:	4a9b      	ldr	r2, [pc, #620]	; (80183e0 <input_parameter+0x85c>)
 8018172:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	speed600_shortest_mollifier.turn45out_R.t_speed = 720;
 8018176:	4b98      	ldr	r3, [pc, #608]	; (80183d8 <input_parameter+0x854>)
 8018178:	4a9a      	ldr	r2, [pc, #616]	; (80183e4 <input_parameter+0x860>)
 801817a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	speed600_shortest_mollifier.turn45out_R.t_acc = 12000;
 801817e:	4b96      	ldr	r3, [pc, #600]	; (80183d8 <input_parameter+0x854>)
 8018180:	4a99      	ldr	r2, [pc, #612]	; (80183e8 <input_parameter+0x864>)
 8018182:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	speed600_shortest_mollifier.turn45out_R.f_ofset = 43;
 8018186:	4b94      	ldr	r3, [pc, #592]	; (80183d8 <input_parameter+0x854>)
 8018188:	4a98      	ldr	r2, [pc, #608]	; (80183ec <input_parameter+0x868>)
 801818a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	speed600_shortest_mollifier.turn45out_R.e_ofset = 22;
 801818e:	4b92      	ldr	r3, [pc, #584]	; (80183d8 <input_parameter+0x854>)
 8018190:	4a97      	ldr	r2, [pc, #604]	; (80183f0 <input_parameter+0x86c>)
 8018192:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

	speed600_shortest_mollifier.turn45out_L.g_speed = 600;
 8018196:	4b90      	ldr	r3, [pc, #576]	; (80183d8 <input_parameter+0x854>)
 8018198:	4a91      	ldr	r2, [pc, #580]	; (80183e0 <input_parameter+0x85c>)
 801819a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	speed600_shortest_mollifier.turn45out_L.t_speed = 750;
 801819e:	4b8e      	ldr	r3, [pc, #568]	; (80183d8 <input_parameter+0x854>)
 80181a0:	4a94      	ldr	r2, [pc, #592]	; (80183f4 <input_parameter+0x870>)
 80181a2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	speed600_shortest_mollifier.turn45out_L.t_acc = 12000;
 80181a6:	4b8c      	ldr	r3, [pc, #560]	; (80183d8 <input_parameter+0x854>)
 80181a8:	4a8f      	ldr	r2, [pc, #572]	; (80183e8 <input_parameter+0x864>)
 80181aa:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	speed600_shortest_mollifier.turn45out_L.f_ofset = 40;
 80181ae:	4b8a      	ldr	r3, [pc, #552]	; (80183d8 <input_parameter+0x854>)
 80181b0:	4a91      	ldr	r2, [pc, #580]	; (80183f8 <input_parameter+0x874>)
 80181b2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
	speed600_shortest_mollifier.turn45out_L.e_ofset = 24;
 80181b6:	4b88      	ldr	r3, [pc, #544]	; (80183d8 <input_parameter+0x854>)
 80181b8:	4a90      	ldr	r2, [pc, #576]	; (80183fc <input_parameter+0x878>)
 80181ba:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

	speed600_shortest_mollifier.turn135out_R.g_speed = 600;
 80181be:	4b86      	ldr	r3, [pc, #536]	; (80183d8 <input_parameter+0x854>)
 80181c0:	4a87      	ldr	r2, [pc, #540]	; (80183e0 <input_parameter+0x85c>)
 80181c2:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	speed600_shortest_mollifier.turn135out_R.t_speed = 920;
 80181c6:	4b84      	ldr	r3, [pc, #528]	; (80183d8 <input_parameter+0x854>)
 80181c8:	4a8d      	ldr	r2, [pc, #564]	; (8018400 <input_parameter+0x87c>)
 80181ca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	speed600_shortest_mollifier.turn135out_R.t_acc = 15000;
 80181ce:	4b82      	ldr	r3, [pc, #520]	; (80183d8 <input_parameter+0x854>)
 80181d0:	4a8c      	ldr	r2, [pc, #560]	; (8018404 <input_parameter+0x880>)
 80181d2:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	speed600_shortest_mollifier.turn135out_R.f_ofset = 5;
 80181d6:	4b80      	ldr	r3, [pc, #512]	; (80183d8 <input_parameter+0x854>)
 80181d8:	4a8b      	ldr	r2, [pc, #556]	; (8018408 <input_parameter+0x884>)
 80181da:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	speed600_shortest_mollifier.turn135out_R.e_ofset = 22;
 80181de:	4b7e      	ldr	r3, [pc, #504]	; (80183d8 <input_parameter+0x854>)
 80181e0:	4a83      	ldr	r2, [pc, #524]	; (80183f0 <input_parameter+0x86c>)
 80181e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

	speed600_shortest_mollifier.turn135out_L.g_speed = 600;
 80181e6:	4b7c      	ldr	r3, [pc, #496]	; (80183d8 <input_parameter+0x854>)
 80181e8:	4a7d      	ldr	r2, [pc, #500]	; (80183e0 <input_parameter+0x85c>)
 80181ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	speed600_shortest_mollifier.turn135out_L.t_speed = 890;
 80181ee:	4b7a      	ldr	r3, [pc, #488]	; (80183d8 <input_parameter+0x854>)
 80181f0:	4a86      	ldr	r2, [pc, #536]	; (801840c <input_parameter+0x888>)
 80181f2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	speed600_shortest_mollifier.turn135out_L.t_acc = 14000;
 80181f6:	4b78      	ldr	r3, [pc, #480]	; (80183d8 <input_parameter+0x854>)
 80181f8:	4a85      	ldr	r2, [pc, #532]	; (8018410 <input_parameter+0x88c>)
 80181fa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
	speed600_shortest_mollifier.turn135out_L.f_ofset = 8;
 80181fe:	4b76      	ldr	r3, [pc, #472]	; (80183d8 <input_parameter+0x854>)
 8018200:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8018204:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	speed600_shortest_mollifier.turn135out_L.e_ofset = 36;
 8018208:	4b73      	ldr	r3, [pc, #460]	; (80183d8 <input_parameter+0x854>)
 801820a:	4a82      	ldr	r2, [pc, #520]	; (8018414 <input_parameter+0x890>)
 801820c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

	speed600_shortest_mollifier.V90_R.g_speed = 600;
 8018210:	4b71      	ldr	r3, [pc, #452]	; (80183d8 <input_parameter+0x854>)
 8018212:	4a73      	ldr	r2, [pc, #460]	; (80183e0 <input_parameter+0x85c>)
 8018214:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
	speed600_shortest_mollifier.V90_R.t_speed = 940;
 8018218:	4b6f      	ldr	r3, [pc, #444]	; (80183d8 <input_parameter+0x854>)
 801821a:	4a7f      	ldr	r2, [pc, #508]	; (8018418 <input_parameter+0x894>)
 801821c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
	speed600_shortest_mollifier.V90_R.t_acc = 15000;
 8018220:	4b6d      	ldr	r3, [pc, #436]	; (80183d8 <input_parameter+0x854>)
 8018222:	4a78      	ldr	r2, [pc, #480]	; (8018404 <input_parameter+0x880>)
 8018224:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	speed600_shortest_mollifier.V90_R.f_ofset = 17;
 8018228:	4b6b      	ldr	r3, [pc, #428]	; (80183d8 <input_parameter+0x854>)
 801822a:	4a7c      	ldr	r2, [pc, #496]	; (801841c <input_parameter+0x898>)
 801822c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	speed600_shortest_mollifier.V90_R.e_ofset = 20;
 8018230:	4b69      	ldr	r3, [pc, #420]	; (80183d8 <input_parameter+0x854>)
 8018232:	4a7b      	ldr	r2, [pc, #492]	; (8018420 <input_parameter+0x89c>)
 8018234:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

	speed600_shortest_mollifier.V90_L.g_speed = 600;
 8018238:	4b67      	ldr	r3, [pc, #412]	; (80183d8 <input_parameter+0x854>)
 801823a:	4a69      	ldr	r2, [pc, #420]	; (80183e0 <input_parameter+0x85c>)
 801823c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	speed600_shortest_mollifier.V90_L.t_speed = 960;
 8018240:	4b65      	ldr	r3, [pc, #404]	; (80183d8 <input_parameter+0x854>)
 8018242:	4a78      	ldr	r2, [pc, #480]	; (8018424 <input_parameter+0x8a0>)
 8018244:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	speed600_shortest_mollifier.V90_L.t_acc = 16000;
 8018248:	4b63      	ldr	r3, [pc, #396]	; (80183d8 <input_parameter+0x854>)
 801824a:	4a77      	ldr	r2, [pc, #476]	; (8018428 <input_parameter+0x8a4>)
 801824c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	speed600_shortest_mollifier.V90_L.f_ofset = 10;
 8018250:	4b61      	ldr	r3, [pc, #388]	; (80183d8 <input_parameter+0x854>)
 8018252:	4a76      	ldr	r2, [pc, #472]	; (801842c <input_parameter+0x8a8>)
 8018254:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	speed600_shortest_mollifier.V90_L.e_ofset = 20;
 8018258:	4b5f      	ldr	r3, [pc, #380]	; (80183d8 <input_parameter+0x854>)
 801825a:	4a71      	ldr	r2, [pc, #452]	; (8018420 <input_parameter+0x89c>)
 801825c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c




	//********************************1000********************************************
		speed1000_shortest_mollifier.SlalomCentervelocity = 1000;
 8018260:	4b73      	ldr	r3, [pc, #460]	; (8018430 <input_parameter+0x8ac>)
 8018262:	4a74      	ldr	r2, [pc, #464]	; (8018434 <input_parameter+0x8b0>)
 8018264:	601a      	str	r2, [r3, #0]
		speed1000_shortest_mollifier.TurnCentervelocity = 1000;
 8018266:	4b72      	ldr	r3, [pc, #456]	; (8018430 <input_parameter+0x8ac>)
 8018268:	4a72      	ldr	r2, [pc, #456]	; (8018434 <input_parameter+0x8b0>)
 801826a:	605a      	str	r2, [r3, #4]

		speed1000_shortest_mollifier.slalom_R.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 801826c:	4b70      	ldr	r3, [pc, #448]	; (8018430 <input_parameter+0x8ac>)
 801826e:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_R.g_speed =
 8018270:	4a6f      	ldr	r2, [pc, #444]	; (8018430 <input_parameter+0x8ac>)
 8018272:	6093      	str	r3, [r2, #8]
		speed1000_shortest_mollifier.slalom_R.t_speed = 1100;
 8018274:	4b6e      	ldr	r3, [pc, #440]	; (8018430 <input_parameter+0x8ac>)
 8018276:	4a70      	ldr	r2, [pc, #448]	; (8018438 <input_parameter+0x8b4>)
 8018278:	615a      	str	r2, [r3, #20]
		speed1000_shortest_mollifier.slalom_R.f_ofset = 5;
 801827a:	4b6d      	ldr	r3, [pc, #436]	; (8018430 <input_parameter+0x8ac>)
 801827c:	4a62      	ldr	r2, [pc, #392]	; (8018408 <input_parameter+0x884>)
 801827e:	60da      	str	r2, [r3, #12]
		speed1000_shortest_mollifier.slalom_R.e_ofset = 28;
 8018280:	4b6b      	ldr	r3, [pc, #428]	; (8018430 <input_parameter+0x8ac>)
 8018282:	4a6e      	ldr	r2, [pc, #440]	; (801843c <input_parameter+0x8b8>)
 8018284:	611a      	str	r2, [r3, #16]

		speed1000_shortest_mollifier.slalom_L.g_speed =
				speed1000_shortest_mollifier.SlalomCentervelocity;
 8018286:	4b6a      	ldr	r3, [pc, #424]	; (8018430 <input_parameter+0x8ac>)
 8018288:	681b      	ldr	r3, [r3, #0]
		speed1000_shortest_mollifier.slalom_L.g_speed =
 801828a:	4a69      	ldr	r2, [pc, #420]	; (8018430 <input_parameter+0x8ac>)
 801828c:	61d3      	str	r3, [r2, #28]
		speed1000_shortest_mollifier.slalom_L.t_speed = 1100;
 801828e:	4b68      	ldr	r3, [pc, #416]	; (8018430 <input_parameter+0x8ac>)
 8018290:	4a69      	ldr	r2, [pc, #420]	; (8018438 <input_parameter+0x8b4>)
 8018292:	629a      	str	r2, [r3, #40]	; 0x28
		speed1000_shortest_mollifier.slalom_L.f_ofset = 5;
 8018294:	4b66      	ldr	r3, [pc, #408]	; (8018430 <input_parameter+0x8ac>)
 8018296:	4a5c      	ldr	r2, [pc, #368]	; (8018408 <input_parameter+0x884>)
 8018298:	621a      	str	r2, [r3, #32]
		speed1000_shortest_mollifier.slalom_L.e_ofset = 32;
 801829a:	4b65      	ldr	r3, [pc, #404]	; (8018430 <input_parameter+0x8ac>)
 801829c:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80182a0:	625a      	str	r2, [r3, #36]	; 0x24

		speed1000_shortest_mollifier.turn90_R.g_speed = 1000;
 80182a2:	4b63      	ldr	r3, [pc, #396]	; (8018430 <input_parameter+0x8ac>)
 80182a4:	4a63      	ldr	r2, [pc, #396]	; (8018434 <input_parameter+0x8b0>)
 80182a6:	631a      	str	r2, [r3, #48]	; 0x30
		speed1000_shortest_mollifier.turn90_R.t_speed = 1450;
 80182a8:	4b61      	ldr	r3, [pc, #388]	; (8018430 <input_parameter+0x8ac>)
 80182aa:	4a65      	ldr	r2, [pc, #404]	; (8018440 <input_parameter+0x8bc>)
 80182ac:	63da      	str	r2, [r3, #60]	; 0x3c
		speed1000_shortest_mollifier.turn90_R.f_ofset = 32;
 80182ae:	4b60      	ldr	r3, [pc, #384]	; (8018430 <input_parameter+0x8ac>)
 80182b0:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80182b4:	635a      	str	r2, [r3, #52]	; 0x34
		speed1000_shortest_mollifier.turn90_R.e_ofset = 31;
 80182b6:	4b5e      	ldr	r3, [pc, #376]	; (8018430 <input_parameter+0x8ac>)
 80182b8:	4a62      	ldr	r2, [pc, #392]	; (8018444 <input_parameter+0x8c0>)
 80182ba:	639a      	str	r2, [r3, #56]	; 0x38

		speed1000_shortest_mollifier.turn90_L.g_speed = 1000;
 80182bc:	4b5c      	ldr	r3, [pc, #368]	; (8018430 <input_parameter+0x8ac>)
 80182be:	4a5d      	ldr	r2, [pc, #372]	; (8018434 <input_parameter+0x8b0>)
 80182c0:	645a      	str	r2, [r3, #68]	; 0x44
		speed1000_shortest_mollifier.turn90_L.t_speed = 1450;
 80182c2:	4b5b      	ldr	r3, [pc, #364]	; (8018430 <input_parameter+0x8ac>)
 80182c4:	4a5e      	ldr	r2, [pc, #376]	; (8018440 <input_parameter+0x8bc>)
 80182c6:	651a      	str	r2, [r3, #80]	; 0x50
		speed1000_shortest_mollifier.turn90_L.f_ofset = 32;
 80182c8:	4b59      	ldr	r3, [pc, #356]	; (8018430 <input_parameter+0x8ac>)
 80182ca:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80182ce:	649a      	str	r2, [r3, #72]	; 0x48
		speed1000_shortest_mollifier.turn90_L.e_ofset = 35;
 80182d0:	4b57      	ldr	r3, [pc, #348]	; (8018430 <input_parameter+0x8ac>)
 80182d2:	4a5d      	ldr	r2, [pc, #372]	; (8018448 <input_parameter+0x8c4>)
 80182d4:	64da      	str	r2, [r3, #76]	; 0x4c

		speed1000_shortest_mollifier.turn180_R.g_speed =1000;
 80182d6:	4b56      	ldr	r3, [pc, #344]	; (8018430 <input_parameter+0x8ac>)
 80182d8:	4a56      	ldr	r2, [pc, #344]	; (8018434 <input_parameter+0x8b0>)
 80182da:	659a      	str	r2, [r3, #88]	; 0x58
		speed1000_shortest_mollifier.turn180_R.t_speed = 1400;
 80182dc:	4b54      	ldr	r3, [pc, #336]	; (8018430 <input_parameter+0x8ac>)
 80182de:	4a5b      	ldr	r2, [pc, #364]	; (801844c <input_parameter+0x8c8>)
 80182e0:	665a      	str	r2, [r3, #100]	; 0x64
		speed1000_shortest_mollifier.turn180_R.f_ofset = 20;
 80182e2:	4b53      	ldr	r3, [pc, #332]	; (8018430 <input_parameter+0x8ac>)
 80182e4:	4a4e      	ldr	r2, [pc, #312]	; (8018420 <input_parameter+0x89c>)
 80182e6:	65da      	str	r2, [r3, #92]	; 0x5c
		speed1000_shortest_mollifier.turn180_R.e_ofset = 20;
 80182e8:	4b51      	ldr	r3, [pc, #324]	; (8018430 <input_parameter+0x8ac>)
 80182ea:	4a4d      	ldr	r2, [pc, #308]	; (8018420 <input_parameter+0x89c>)
 80182ec:	661a      	str	r2, [r3, #96]	; 0x60

		speed1000_shortest_mollifier.turn180_L.g_speed = 1000;
 80182ee:	4b50      	ldr	r3, [pc, #320]	; (8018430 <input_parameter+0x8ac>)
 80182f0:	4a50      	ldr	r2, [pc, #320]	; (8018434 <input_parameter+0x8b0>)
 80182f2:	66da      	str	r2, [r3, #108]	; 0x6c
		speed1000_shortest_mollifier.turn180_L.t_speed = 1400;
 80182f4:	4b4e      	ldr	r3, [pc, #312]	; (8018430 <input_parameter+0x8ac>)
 80182f6:	4a55      	ldr	r2, [pc, #340]	; (801844c <input_parameter+0x8c8>)
 80182f8:	679a      	str	r2, [r3, #120]	; 0x78
		speed1000_shortest_mollifier.turn180_L.f_ofset = 20;
 80182fa:	4b4d      	ldr	r3, [pc, #308]	; (8018430 <input_parameter+0x8ac>)
 80182fc:	4a48      	ldr	r2, [pc, #288]	; (8018420 <input_parameter+0x89c>)
 80182fe:	671a      	str	r2, [r3, #112]	; 0x70
		speed1000_shortest_mollifier.turn180_L.e_ofset = 18;
 8018300:	4b4b      	ldr	r3, [pc, #300]	; (8018430 <input_parameter+0x8ac>)
 8018302:	4a53      	ldr	r2, [pc, #332]	; (8018450 <input_parameter+0x8cc>)
 8018304:	675a      	str	r2, [r3, #116]	; 0x74

		speed1000_shortest_mollifier.turn45in_R.g_speed = 1000;
 8018306:	4b4a      	ldr	r3, [pc, #296]	; (8018430 <input_parameter+0x8ac>)
 8018308:	4a4a      	ldr	r2, [pc, #296]	; (8018434 <input_parameter+0x8b0>)
 801830a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		speed1000_shortest_mollifier.turn45in_R.t_speed = 1300;
 801830e:	4b48      	ldr	r3, [pc, #288]	; (8018430 <input_parameter+0x8ac>)
 8018310:	4a50      	ldr	r2, [pc, #320]	; (8018454 <input_parameter+0x8d0>)
 8018312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		speed1000_shortest_mollifier.turn45in_R.f_ofset = 20;
 8018316:	4b46      	ldr	r3, [pc, #280]	; (8018430 <input_parameter+0x8ac>)
 8018318:	4a41      	ldr	r2, [pc, #260]	; (8018420 <input_parameter+0x89c>)
 801831a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		speed1000_shortest_mollifier.turn45in_R.e_ofset = 38;
 801831e:	4b44      	ldr	r3, [pc, #272]	; (8018430 <input_parameter+0x8ac>)
 8018320:	4a4d      	ldr	r2, [pc, #308]	; (8018458 <input_parameter+0x8d4>)
 8018322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

		speed1000_shortest_mollifier.turn45in_L.g_speed = 1000;
 8018326:	4b42      	ldr	r3, [pc, #264]	; (8018430 <input_parameter+0x8ac>)
 8018328:	4a42      	ldr	r2, [pc, #264]	; (8018434 <input_parameter+0x8b0>)
 801832a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		speed1000_shortest_mollifier.turn45in_L.t_speed = 1300;
 801832e:	4b40      	ldr	r3, [pc, #256]	; (8018430 <input_parameter+0x8ac>)
 8018330:	4a48      	ldr	r2, [pc, #288]	; (8018454 <input_parameter+0x8d0>)
 8018332:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		speed1000_shortest_mollifier.turn45in_L.f_ofset = 20;
 8018336:	4b3e      	ldr	r3, [pc, #248]	; (8018430 <input_parameter+0x8ac>)
 8018338:	4a39      	ldr	r2, [pc, #228]	; (8018420 <input_parameter+0x89c>)
 801833a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		speed1000_shortest_mollifier.turn45in_L.e_ofset = 36;
 801833e:	4b3c      	ldr	r3, [pc, #240]	; (8018430 <input_parameter+0x8ac>)
 8018340:	4a34      	ldr	r2, [pc, #208]	; (8018414 <input_parameter+0x890>)
 8018342:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

		speed1000_shortest_mollifier.turn135in_R.g_speed = 1000;
 8018346:	4b3a      	ldr	r3, [pc, #232]	; (8018430 <input_parameter+0x8ac>)
 8018348:	4a3a      	ldr	r2, [pc, #232]	; (8018434 <input_parameter+0x8b0>)
 801834a:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		speed1000_shortest_mollifier.turn135in_R.t_speed = 1590;
 801834e:	4b38      	ldr	r3, [pc, #224]	; (8018430 <input_parameter+0x8ac>)
 8018350:	4a42      	ldr	r2, [pc, #264]	; (801845c <input_parameter+0x8d8>)
 8018352:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		speed1000_shortest_mollifier.turn135in_R.f_ofset = 22;
 8018356:	4b36      	ldr	r3, [pc, #216]	; (8018430 <input_parameter+0x8ac>)
 8018358:	4a25      	ldr	r2, [pc, #148]	; (80183f0 <input_parameter+0x86c>)
 801835a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		speed1000_shortest_mollifier.turn135in_R.e_ofset = 25;
 801835e:	4b34      	ldr	r3, [pc, #208]	; (8018430 <input_parameter+0x8ac>)
 8018360:	4a3f      	ldr	r2, [pc, #252]	; (8018460 <input_parameter+0x8dc>)
 8018362:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

		speed1000_shortest_mollifier.turn135in_L.g_speed = 1000;
 8018366:	4b32      	ldr	r3, [pc, #200]	; (8018430 <input_parameter+0x8ac>)
 8018368:	4a32      	ldr	r2, [pc, #200]	; (8018434 <input_parameter+0x8b0>)
 801836a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		speed1000_shortest_mollifier.turn135in_L.t_speed = 1560;
 801836e:	4b30      	ldr	r3, [pc, #192]	; (8018430 <input_parameter+0x8ac>)
 8018370:	4a3c      	ldr	r2, [pc, #240]	; (8018464 <input_parameter+0x8e0>)
 8018372:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
		speed1000_shortest_mollifier.turn135in_L.f_ofset = 20;
 8018376:	4b2e      	ldr	r3, [pc, #184]	; (8018430 <input_parameter+0x8ac>)
 8018378:	4a29      	ldr	r2, [pc, #164]	; (8018420 <input_parameter+0x89c>)
 801837a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
		speed1000_shortest_mollifier.turn135in_L.e_ofset = 22;
 801837e:	4b2c      	ldr	r3, [pc, #176]	; (8018430 <input_parameter+0x8ac>)
 8018380:	4a1b      	ldr	r2, [pc, #108]	; (80183f0 <input_parameter+0x86c>)
 8018382:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

		speed1000_shortest_mollifier.turn45out_R.g_speed = 1000;
 8018386:	4b2a      	ldr	r3, [pc, #168]	; (8018430 <input_parameter+0x8ac>)
 8018388:	4a2a      	ldr	r2, [pc, #168]	; (8018434 <input_parameter+0x8b0>)
 801838a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		speed1000_shortest_mollifier.turn45out_R.t_speed = 1300;
 801838e:	4b28      	ldr	r3, [pc, #160]	; (8018430 <input_parameter+0x8ac>)
 8018390:	4a30      	ldr	r2, [pc, #192]	; (8018454 <input_parameter+0x8d0>)
 8018392:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
		speed1000_shortest_mollifier.turn45out_R.f_ofset = 38;
 8018396:	4b26      	ldr	r3, [pc, #152]	; (8018430 <input_parameter+0x8ac>)
 8018398:	4a2f      	ldr	r2, [pc, #188]	; (8018458 <input_parameter+0x8d4>)
 801839a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
		speed1000_shortest_mollifier.turn45out_R.e_ofset = 22;
 801839e:	4b24      	ldr	r3, [pc, #144]	; (8018430 <input_parameter+0x8ac>)
 80183a0:	4a13      	ldr	r2, [pc, #76]	; (80183f0 <input_parameter+0x86c>)
 80183a2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

		speed1000_shortest_mollifier.turn45out_L.g_speed = 1000;
 80183a6:	4b22      	ldr	r3, [pc, #136]	; (8018430 <input_parameter+0x8ac>)
 80183a8:	4a22      	ldr	r2, [pc, #136]	; (8018434 <input_parameter+0x8b0>)
 80183aa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
		speed1000_shortest_mollifier.turn45out_L.t_speed = 1300;
 80183ae:	4b20      	ldr	r3, [pc, #128]	; (8018430 <input_parameter+0x8ac>)
 80183b0:	4a28      	ldr	r2, [pc, #160]	; (8018454 <input_parameter+0x8d0>)
 80183b2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
		speed1000_shortest_mollifier.turn45out_L.f_ofset = 30;
 80183b6:	4b1e      	ldr	r3, [pc, #120]	; (8018430 <input_parameter+0x8ac>)
 80183b8:	4a2b      	ldr	r2, [pc, #172]	; (8018468 <input_parameter+0x8e4>)
 80183ba:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
		speed1000_shortest_mollifier.turn45out_L.e_ofset = 24;
 80183be:	4b1c      	ldr	r3, [pc, #112]	; (8018430 <input_parameter+0x8ac>)
 80183c0:	4a0e      	ldr	r2, [pc, #56]	; (80183fc <input_parameter+0x878>)
 80183c2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

		speed1000_shortest_mollifier.turn135out_R.g_speed = 1000;
 80183c6:	4b1a      	ldr	r3, [pc, #104]	; (8018430 <input_parameter+0x8ac>)
 80183c8:	4a1a      	ldr	r2, [pc, #104]	; (8018434 <input_parameter+0x8b0>)
 80183ca:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
		speed1000_shortest_mollifier.turn135out_R.t_speed = 1660;
 80183ce:	4b18      	ldr	r3, [pc, #96]	; (8018430 <input_parameter+0x8ac>)
 80183d0:	4a26      	ldr	r2, [pc, #152]	; (801846c <input_parameter+0x8e8>)
 80183d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80183d6:	e04b      	b.n	8018470 <input_parameter+0x8ec>
 80183d8:	2000f358 	.word	0x2000f358
 80183dc:	42080000 	.word	0x42080000
 80183e0:	44160000 	.word	0x44160000
 80183e4:	44340000 	.word	0x44340000
 80183e8:	463b8000 	.word	0x463b8000
 80183ec:	422c0000 	.word	0x422c0000
 80183f0:	41b00000 	.word	0x41b00000
 80183f4:	443b8000 	.word	0x443b8000
 80183f8:	42200000 	.word	0x42200000
 80183fc:	41c00000 	.word	0x41c00000
 8018400:	44660000 	.word	0x44660000
 8018404:	466a6000 	.word	0x466a6000
 8018408:	40a00000 	.word	0x40a00000
 801840c:	445e8000 	.word	0x445e8000
 8018410:	465ac000 	.word	0x465ac000
 8018414:	42100000 	.word	0x42100000
 8018418:	446b0000 	.word	0x446b0000
 801841c:	41880000 	.word	0x41880000
 8018420:	41a00000 	.word	0x41a00000
 8018424:	44700000 	.word	0x44700000
 8018428:	467a0000 	.word	0x467a0000
 801842c:	41200000 	.word	0x41200000
 8018430:	2000f4a0 	.word	0x2000f4a0
 8018434:	447a0000 	.word	0x447a0000
 8018438:	44898000 	.word	0x44898000
 801843c:	41e00000 	.word	0x41e00000
 8018440:	44b54000 	.word	0x44b54000
 8018444:	41f80000 	.word	0x41f80000
 8018448:	420c0000 	.word	0x420c0000
 801844c:	44af0000 	.word	0x44af0000
 8018450:	41900000 	.word	0x41900000
 8018454:	44a28000 	.word	0x44a28000
 8018458:	42180000 	.word	0x42180000
 801845c:	44c6c000 	.word	0x44c6c000
 8018460:	41c80000 	.word	0x41c80000
 8018464:	44c30000 	.word	0x44c30000
 8018468:	41f00000 	.word	0x41f00000
 801846c:	44cf8000 	.word	0x44cf8000
		speed1000_shortest_mollifier.turn135out_R.f_ofset = 12;
 8018470:	4b9d      	ldr	r3, [pc, #628]	; (80186e8 <input_parameter+0xb64>)
 8018472:	4a9e      	ldr	r2, [pc, #632]	; (80186ec <input_parameter+0xb68>)
 8018474:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
		speed1000_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018478:	4b9b      	ldr	r3, [pc, #620]	; (80186e8 <input_parameter+0xb64>)
 801847a:	4a9d      	ldr	r2, [pc, #628]	; (80186f0 <input_parameter+0xb6c>)
 801847c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		speed1000_shortest_mollifier.turn135out_L.g_speed = 1000;
 8018480:	4b99      	ldr	r3, [pc, #612]	; (80186e8 <input_parameter+0xb64>)
 8018482:	4a9c      	ldr	r2, [pc, #624]	; (80186f4 <input_parameter+0xb70>)
 8018484:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		speed1000_shortest_mollifier.turn135out_L.t_speed = 1660;
 8018488:	4b97      	ldr	r3, [pc, #604]	; (80186e8 <input_parameter+0xb64>)
 801848a:	4a9b      	ldr	r2, [pc, #620]	; (80186f8 <input_parameter+0xb74>)
 801848c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		speed1000_shortest_mollifier.turn135out_L.f_ofset = 10;
 8018490:	4b95      	ldr	r3, [pc, #596]	; (80186e8 <input_parameter+0xb64>)
 8018492:	4a9a      	ldr	r2, [pc, #616]	; (80186fc <input_parameter+0xb78>)
 8018494:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		speed1000_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018498:	4b93      	ldr	r3, [pc, #588]	; (80186e8 <input_parameter+0xb64>)
 801849a:	4a99      	ldr	r2, [pc, #612]	; (8018700 <input_parameter+0xb7c>)
 801849c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

		speed1000_shortest_mollifier.V90_R.g_speed = 1000;
 80184a0:	4b91      	ldr	r3, [pc, #580]	; (80186e8 <input_parameter+0xb64>)
 80184a2:	4a94      	ldr	r2, [pc, #592]	; (80186f4 <input_parameter+0xb70>)
 80184a4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
		speed1000_shortest_mollifier.V90_R.t_speed = 1750;
 80184a8:	4b8f      	ldr	r3, [pc, #572]	; (80186e8 <input_parameter+0xb64>)
 80184aa:	4a96      	ldr	r2, [pc, #600]	; (8018704 <input_parameter+0xb80>)
 80184ac:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
		speed1000_shortest_mollifier.V90_R.f_ofset = 10;
 80184b0:	4b8d      	ldr	r3, [pc, #564]	; (80186e8 <input_parameter+0xb64>)
 80184b2:	4a92      	ldr	r2, [pc, #584]	; (80186fc <input_parameter+0xb78>)
 80184b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
		speed1000_shortest_mollifier.V90_R.e_ofset = 20;
 80184b8:	4b8b      	ldr	r3, [pc, #556]	; (80186e8 <input_parameter+0xb64>)
 80184ba:	4a93      	ldr	r2, [pc, #588]	; (8018708 <input_parameter+0xb84>)
 80184bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

		speed1000_shortest_mollifier.V90_L.g_speed = 1000;
 80184c0:	4b89      	ldr	r3, [pc, #548]	; (80186e8 <input_parameter+0xb64>)
 80184c2:	4a8c      	ldr	r2, [pc, #560]	; (80186f4 <input_parameter+0xb70>)
 80184c4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
		speed1000_shortest_mollifier.V90_L.t_speed = 1750;
 80184c8:	4b87      	ldr	r3, [pc, #540]	; (80186e8 <input_parameter+0xb64>)
 80184ca:	4a8e      	ldr	r2, [pc, #568]	; (8018704 <input_parameter+0xb80>)
 80184cc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		speed1000_shortest_mollifier.V90_L.f_ofset = 8;
 80184d0:	4b85      	ldr	r3, [pc, #532]	; (80186e8 <input_parameter+0xb64>)
 80184d2:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80184d6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
		speed1000_shortest_mollifier.V90_L.e_ofset = 20;
 80184da:	4b83      	ldr	r3, [pc, #524]	; (80186e8 <input_parameter+0xb64>)
 80184dc:	4a8a      	ldr	r2, [pc, #552]	; (8018708 <input_parameter+0xb84>)
 80184de:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


		//********************************1200********************************************
			speed1200_shortest_mollifier.SlalomCentervelocity = 1200;
 80184e2:	4b8a      	ldr	r3, [pc, #552]	; (801870c <input_parameter+0xb88>)
 80184e4:	4a8a      	ldr	r2, [pc, #552]	; (8018710 <input_parameter+0xb8c>)
 80184e6:	601a      	str	r2, [r3, #0]
			speed1200_shortest_mollifier.TurnCentervelocity = 1200;
 80184e8:	4b88      	ldr	r3, [pc, #544]	; (801870c <input_parameter+0xb88>)
 80184ea:	4a89      	ldr	r2, [pc, #548]	; (8018710 <input_parameter+0xb8c>)
 80184ec:	605a      	str	r2, [r3, #4]

			speed1200_shortest_mollifier.slalom_R.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 80184ee:	4b87      	ldr	r3, [pc, #540]	; (801870c <input_parameter+0xb88>)
 80184f0:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_R.g_speed =
 80184f2:	4a86      	ldr	r2, [pc, #536]	; (801870c <input_parameter+0xb88>)
 80184f4:	6093      	str	r3, [r2, #8]
			speed1200_shortest_mollifier.slalom_R.t_speed = 1100;
 80184f6:	4b85      	ldr	r3, [pc, #532]	; (801870c <input_parameter+0xb88>)
 80184f8:	4a86      	ldr	r2, [pc, #536]	; (8018714 <input_parameter+0xb90>)
 80184fa:	615a      	str	r2, [r3, #20]
			speed1200_shortest_mollifier.slalom_R.f_ofset = 5;
 80184fc:	4b83      	ldr	r3, [pc, #524]	; (801870c <input_parameter+0xb88>)
 80184fe:	4a86      	ldr	r2, [pc, #536]	; (8018718 <input_parameter+0xb94>)
 8018500:	60da      	str	r2, [r3, #12]
			speed1200_shortest_mollifier.slalom_R.e_ofset = 28;
 8018502:	4b82      	ldr	r3, [pc, #520]	; (801870c <input_parameter+0xb88>)
 8018504:	4a85      	ldr	r2, [pc, #532]	; (801871c <input_parameter+0xb98>)
 8018506:	611a      	str	r2, [r3, #16]

			speed1200_shortest_mollifier.slalom_L.g_speed =
					speed1200_shortest_mollifier.SlalomCentervelocity;
 8018508:	4b80      	ldr	r3, [pc, #512]	; (801870c <input_parameter+0xb88>)
 801850a:	681b      	ldr	r3, [r3, #0]
			speed1200_shortest_mollifier.slalom_L.g_speed =
 801850c:	4a7f      	ldr	r2, [pc, #508]	; (801870c <input_parameter+0xb88>)
 801850e:	61d3      	str	r3, [r2, #28]
			speed1200_shortest_mollifier.slalom_L.t_speed = 1100;
 8018510:	4b7e      	ldr	r3, [pc, #504]	; (801870c <input_parameter+0xb88>)
 8018512:	4a80      	ldr	r2, [pc, #512]	; (8018714 <input_parameter+0xb90>)
 8018514:	629a      	str	r2, [r3, #40]	; 0x28
			speed1200_shortest_mollifier.slalom_L.f_ofset = 5;
 8018516:	4b7d      	ldr	r3, [pc, #500]	; (801870c <input_parameter+0xb88>)
 8018518:	4a7f      	ldr	r2, [pc, #508]	; (8018718 <input_parameter+0xb94>)
 801851a:	621a      	str	r2, [r3, #32]
			speed1200_shortest_mollifier.slalom_L.e_ofset = 32;
 801851c:	4b7b      	ldr	r3, [pc, #492]	; (801870c <input_parameter+0xb88>)
 801851e:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 8018522:	625a      	str	r2, [r3, #36]	; 0x24

			speed1200_shortest_mollifier.turn90_R.g_speed = 1200;
 8018524:	4b79      	ldr	r3, [pc, #484]	; (801870c <input_parameter+0xb88>)
 8018526:	4a7a      	ldr	r2, [pc, #488]	; (8018710 <input_parameter+0xb8c>)
 8018528:	631a      	str	r2, [r3, #48]	; 0x30
			speed1200_shortest_mollifier.turn90_R.t_speed = 1510;
 801852a:	4b78      	ldr	r3, [pc, #480]	; (801870c <input_parameter+0xb88>)
 801852c:	4a7c      	ldr	r2, [pc, #496]	; (8018720 <input_parameter+0xb9c>)
 801852e:	63da      	str	r2, [r3, #60]	; 0x3c
			speed1200_shortest_mollifier.turn90_R.f_ofset = 24;
 8018530:	4b76      	ldr	r3, [pc, #472]	; (801870c <input_parameter+0xb88>)
 8018532:	4a7c      	ldr	r2, [pc, #496]	; (8018724 <input_parameter+0xba0>)
 8018534:	635a      	str	r2, [r3, #52]	; 0x34
			speed1200_shortest_mollifier.turn90_R.e_ofset = 20;
 8018536:	4b75      	ldr	r3, [pc, #468]	; (801870c <input_parameter+0xb88>)
 8018538:	4a73      	ldr	r2, [pc, #460]	; (8018708 <input_parameter+0xb84>)
 801853a:	639a      	str	r2, [r3, #56]	; 0x38

			speed1200_shortest_mollifier.turn90_L.g_speed = 1200;
 801853c:	4b73      	ldr	r3, [pc, #460]	; (801870c <input_parameter+0xb88>)
 801853e:	4a74      	ldr	r2, [pc, #464]	; (8018710 <input_parameter+0xb8c>)
 8018540:	645a      	str	r2, [r3, #68]	; 0x44
			speed1200_shortest_mollifier.turn90_L.t_speed = 1510;
 8018542:	4b72      	ldr	r3, [pc, #456]	; (801870c <input_parameter+0xb88>)
 8018544:	4a76      	ldr	r2, [pc, #472]	; (8018720 <input_parameter+0xb9c>)
 8018546:	651a      	str	r2, [r3, #80]	; 0x50
			speed1200_shortest_mollifier.turn90_L.f_ofset = 19;
 8018548:	4b70      	ldr	r3, [pc, #448]	; (801870c <input_parameter+0xb88>)
 801854a:	4a77      	ldr	r2, [pc, #476]	; (8018728 <input_parameter+0xba4>)
 801854c:	649a      	str	r2, [r3, #72]	; 0x48
			speed1200_shortest_mollifier.turn90_L.e_ofset = 25;
 801854e:	4b6f      	ldr	r3, [pc, #444]	; (801870c <input_parameter+0xb88>)
 8018550:	4a76      	ldr	r2, [pc, #472]	; (801872c <input_parameter+0xba8>)
 8018552:	64da      	str	r2, [r3, #76]	; 0x4c

			speed1200_shortest_mollifier.turn180_R.g_speed =1200;
 8018554:	4b6d      	ldr	r3, [pc, #436]	; (801870c <input_parameter+0xb88>)
 8018556:	4a6e      	ldr	r2, [pc, #440]	; (8018710 <input_parameter+0xb8c>)
 8018558:	659a      	str	r2, [r3, #88]	; 0x58
			speed1200_shortest_mollifier.turn180_R.t_speed = 1650;
 801855a:	4b6c      	ldr	r3, [pc, #432]	; (801870c <input_parameter+0xb88>)
 801855c:	4a74      	ldr	r2, [pc, #464]	; (8018730 <input_parameter+0xbac>)
 801855e:	665a      	str	r2, [r3, #100]	; 0x64
			speed1200_shortest_mollifier.turn180_R.f_ofset = 20;
 8018560:	4b6a      	ldr	r3, [pc, #424]	; (801870c <input_parameter+0xb88>)
 8018562:	4a69      	ldr	r2, [pc, #420]	; (8018708 <input_parameter+0xb84>)
 8018564:	65da      	str	r2, [r3, #92]	; 0x5c
			speed1200_shortest_mollifier.turn180_R.e_ofset = 20;
 8018566:	4b69      	ldr	r3, [pc, #420]	; (801870c <input_parameter+0xb88>)
 8018568:	4a67      	ldr	r2, [pc, #412]	; (8018708 <input_parameter+0xb84>)
 801856a:	661a      	str	r2, [r3, #96]	; 0x60

			speed1200_shortest_mollifier.turn180_L.g_speed = 1200;
 801856c:	4b67      	ldr	r3, [pc, #412]	; (801870c <input_parameter+0xb88>)
 801856e:	4a68      	ldr	r2, [pc, #416]	; (8018710 <input_parameter+0xb8c>)
 8018570:	66da      	str	r2, [r3, #108]	; 0x6c
			speed1200_shortest_mollifier.turn180_L.t_speed = 1650;
 8018572:	4b66      	ldr	r3, [pc, #408]	; (801870c <input_parameter+0xb88>)
 8018574:	4a6e      	ldr	r2, [pc, #440]	; (8018730 <input_parameter+0xbac>)
 8018576:	679a      	str	r2, [r3, #120]	; 0x78
			speed1200_shortest_mollifier.turn180_L.f_ofset = 18;
 8018578:	4b64      	ldr	r3, [pc, #400]	; (801870c <input_parameter+0xb88>)
 801857a:	4a6e      	ldr	r2, [pc, #440]	; (8018734 <input_parameter+0xbb0>)
 801857c:	671a      	str	r2, [r3, #112]	; 0x70
			speed1200_shortest_mollifier.turn180_L.e_ofset = 20;
 801857e:	4b63      	ldr	r3, [pc, #396]	; (801870c <input_parameter+0xb88>)
 8018580:	4a61      	ldr	r2, [pc, #388]	; (8018708 <input_parameter+0xb84>)
 8018582:	675a      	str	r2, [r3, #116]	; 0x74

			speed1200_shortest_mollifier.turn45in_R.g_speed = 1200;
 8018584:	4b61      	ldr	r3, [pc, #388]	; (801870c <input_parameter+0xb88>)
 8018586:	4a62      	ldr	r2, [pc, #392]	; (8018710 <input_parameter+0xb8c>)
 8018588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			speed1200_shortest_mollifier.turn45in_R.t_speed = 1550;
 801858c:	4b5f      	ldr	r3, [pc, #380]	; (801870c <input_parameter+0xb88>)
 801858e:	4a6a      	ldr	r2, [pc, #424]	; (8018738 <input_parameter+0xbb4>)
 8018590:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
			speed1200_shortest_mollifier.turn45in_R.f_ofset = 18;
 8018594:	4b5d      	ldr	r3, [pc, #372]	; (801870c <input_parameter+0xb88>)
 8018596:	4a67      	ldr	r2, [pc, #412]	; (8018734 <input_parameter+0xbb0>)
 8018598:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
			speed1200_shortest_mollifier.turn45in_R.e_ofset = 33;
 801859c:	4b5b      	ldr	r3, [pc, #364]	; (801870c <input_parameter+0xb88>)
 801859e:	4a67      	ldr	r2, [pc, #412]	; (801873c <input_parameter+0xbb8>)
 80185a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

			speed1200_shortest_mollifier.turn45in_L.g_speed = 1200;
 80185a4:	4b59      	ldr	r3, [pc, #356]	; (801870c <input_parameter+0xb88>)
 80185a6:	4a5a      	ldr	r2, [pc, #360]	; (8018710 <input_parameter+0xb8c>)
 80185a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
			speed1200_shortest_mollifier.turn45in_L.t_speed = 1550;
 80185ac:	4b57      	ldr	r3, [pc, #348]	; (801870c <input_parameter+0xb88>)
 80185ae:	4a62      	ldr	r2, [pc, #392]	; (8018738 <input_parameter+0xbb4>)
 80185b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
			speed1200_shortest_mollifier.turn45in_L.f_ofset = 18;
 80185b4:	4b55      	ldr	r3, [pc, #340]	; (801870c <input_parameter+0xb88>)
 80185b6:	4a5f      	ldr	r2, [pc, #380]	; (8018734 <input_parameter+0xbb0>)
 80185b8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			speed1200_shortest_mollifier.turn45in_L.e_ofset = 32;
 80185bc:	4b53      	ldr	r3, [pc, #332]	; (801870c <input_parameter+0xb88>)
 80185be:	f04f 4284 	mov.w	r2, #1107296256	; 0x42000000
 80185c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

			speed1200_shortest_mollifier.turn135in_R.g_speed = 1200;
 80185c6:	4b51      	ldr	r3, [pc, #324]	; (801870c <input_parameter+0xb88>)
 80185c8:	4a51      	ldr	r2, [pc, #324]	; (8018710 <input_parameter+0xb8c>)
 80185ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			speed1200_shortest_mollifier.turn135in_R.t_speed = 1850;
 80185ce:	4b4f      	ldr	r3, [pc, #316]	; (801870c <input_parameter+0xb88>)
 80185d0:	4a5b      	ldr	r2, [pc, #364]	; (8018740 <input_parameter+0xbbc>)
 80185d2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			speed1200_shortest_mollifier.turn135in_R.f_ofset = 18;
 80185d6:	4b4d      	ldr	r3, [pc, #308]	; (801870c <input_parameter+0xb88>)
 80185d8:	4a56      	ldr	r2, [pc, #344]	; (8018734 <input_parameter+0xbb0>)
 80185da:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			speed1200_shortest_mollifier.turn135in_R.e_ofset = 22;
 80185de:	4b4b      	ldr	r3, [pc, #300]	; (801870c <input_parameter+0xb88>)
 80185e0:	4a43      	ldr	r2, [pc, #268]	; (80186f0 <input_parameter+0xb6c>)
 80185e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

			speed1200_shortest_mollifier.turn135in_L.g_speed = 1200;
 80185e6:	4b49      	ldr	r3, [pc, #292]	; (801870c <input_parameter+0xb88>)
 80185e8:	4a49      	ldr	r2, [pc, #292]	; (8018710 <input_parameter+0xb8c>)
 80185ea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
			speed1200_shortest_mollifier.turn135in_L.t_speed = 1850;
 80185ee:	4b47      	ldr	r3, [pc, #284]	; (801870c <input_parameter+0xb88>)
 80185f0:	4a53      	ldr	r2, [pc, #332]	; (8018740 <input_parameter+0xbbc>)
 80185f2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
			speed1200_shortest_mollifier.turn135in_L.f_ofset = 18;
 80185f6:	4b45      	ldr	r3, [pc, #276]	; (801870c <input_parameter+0xb88>)
 80185f8:	4a4e      	ldr	r2, [pc, #312]	; (8018734 <input_parameter+0xbb0>)
 80185fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
			speed1200_shortest_mollifier.turn135in_L.e_ofset = 20;
 80185fe:	4b43      	ldr	r3, [pc, #268]	; (801870c <input_parameter+0xb88>)
 8018600:	4a41      	ldr	r2, [pc, #260]	; (8018708 <input_parameter+0xb84>)
 8018602:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

			speed1200_shortest_mollifier.turn45out_R.g_speed = 1200;
 8018606:	4b41      	ldr	r3, [pc, #260]	; (801870c <input_parameter+0xb88>)
 8018608:	4a41      	ldr	r2, [pc, #260]	; (8018710 <input_parameter+0xb8c>)
 801860a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
			speed1200_shortest_mollifier.turn45out_R.t_speed = 1400;
 801860e:	4b3f      	ldr	r3, [pc, #252]	; (801870c <input_parameter+0xb88>)
 8018610:	4a4c      	ldr	r2, [pc, #304]	; (8018744 <input_parameter+0xbc0>)
 8018612:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			speed1200_shortest_mollifier.turn45out_R.f_ofset = 28;
 8018616:	4b3d      	ldr	r3, [pc, #244]	; (801870c <input_parameter+0xb88>)
 8018618:	4a40      	ldr	r2, [pc, #256]	; (801871c <input_parameter+0xb98>)
 801861a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			speed1200_shortest_mollifier.turn45out_R.e_ofset = 16;
 801861e:	4b3b      	ldr	r3, [pc, #236]	; (801870c <input_parameter+0xb88>)
 8018620:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018624:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

			speed1200_shortest_mollifier.turn45out_L.g_speed = 1200;
 8018628:	4b38      	ldr	r3, [pc, #224]	; (801870c <input_parameter+0xb88>)
 801862a:	4a39      	ldr	r2, [pc, #228]	; (8018710 <input_parameter+0xb8c>)
 801862c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			speed1200_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018630:	4b36      	ldr	r3, [pc, #216]	; (801870c <input_parameter+0xb88>)
 8018632:	4a44      	ldr	r2, [pc, #272]	; (8018744 <input_parameter+0xbc0>)
 8018634:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
			speed1200_shortest_mollifier.turn45out_L.f_ofset = 24;
 8018638:	4b34      	ldr	r3, [pc, #208]	; (801870c <input_parameter+0xb88>)
 801863a:	4a3a      	ldr	r2, [pc, #232]	; (8018724 <input_parameter+0xba0>)
 801863c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
			speed1200_shortest_mollifier.turn45out_L.e_ofset = 16;
 8018640:	4b32      	ldr	r3, [pc, #200]	; (801870c <input_parameter+0xb88>)
 8018642:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8018646:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

			speed1200_shortest_mollifier.turn135out_R.g_speed = 1200;
 801864a:	4b30      	ldr	r3, [pc, #192]	; (801870c <input_parameter+0xb88>)
 801864c:	4a30      	ldr	r2, [pc, #192]	; (8018710 <input_parameter+0xb8c>)
 801864e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
			speed1200_shortest_mollifier.turn135out_R.t_speed = 1850;
 8018652:	4b2e      	ldr	r3, [pc, #184]	; (801870c <input_parameter+0xb88>)
 8018654:	4a3a      	ldr	r2, [pc, #232]	; (8018740 <input_parameter+0xbbc>)
 8018656:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
			speed1200_shortest_mollifier.turn135out_R.f_ofset = 12;
 801865a:	4b2c      	ldr	r3, [pc, #176]	; (801870c <input_parameter+0xb88>)
 801865c:	4a23      	ldr	r2, [pc, #140]	; (80186ec <input_parameter+0xb68>)
 801865e:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
			speed1200_shortest_mollifier.turn135out_R.e_ofset = 30;
 8018662:	4b2a      	ldr	r3, [pc, #168]	; (801870c <input_parameter+0xb88>)
 8018664:	4a26      	ldr	r2, [pc, #152]	; (8018700 <input_parameter+0xb7c>)
 8018666:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

			speed1200_shortest_mollifier.turn135out_L.g_speed = 1200;
 801866a:	4b28      	ldr	r3, [pc, #160]	; (801870c <input_parameter+0xb88>)
 801866c:	4a28      	ldr	r2, [pc, #160]	; (8018710 <input_parameter+0xb8c>)
 801866e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
			speed1200_shortest_mollifier.turn135out_L.t_speed = 1850;
 8018672:	4b26      	ldr	r3, [pc, #152]	; (801870c <input_parameter+0xb88>)
 8018674:	4a32      	ldr	r2, [pc, #200]	; (8018740 <input_parameter+0xbbc>)
 8018676:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			speed1200_shortest_mollifier.turn135out_L.f_ofset = 10;
 801867a:	4b24      	ldr	r3, [pc, #144]	; (801870c <input_parameter+0xb88>)
 801867c:	4a1f      	ldr	r2, [pc, #124]	; (80186fc <input_parameter+0xb78>)
 801867e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
			speed1200_shortest_mollifier.turn135out_L.e_ofset = 30;
 8018682:	4b22      	ldr	r3, [pc, #136]	; (801870c <input_parameter+0xb88>)
 8018684:	4a1e      	ldr	r2, [pc, #120]	; (8018700 <input_parameter+0xb7c>)
 8018686:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

			speed1200_shortest_mollifier.V90_R.g_speed = 1200;
 801868a:	4b20      	ldr	r3, [pc, #128]	; (801870c <input_parameter+0xb88>)
 801868c:	4a20      	ldr	r2, [pc, #128]	; (8018710 <input_parameter+0xb8c>)
 801868e:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
			speed1200_shortest_mollifier.V90_R.t_speed = 1950;
 8018692:	4b1e      	ldr	r3, [pc, #120]	; (801870c <input_parameter+0xb88>)
 8018694:	4a2c      	ldr	r2, [pc, #176]	; (8018748 <input_parameter+0xbc4>)
 8018696:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
			speed1200_shortest_mollifier.V90_R.f_ofset = 10;
 801869a:	4b1c      	ldr	r3, [pc, #112]	; (801870c <input_parameter+0xb88>)
 801869c:	4a17      	ldr	r2, [pc, #92]	; (80186fc <input_parameter+0xb78>)
 801869e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
			speed1200_shortest_mollifier.V90_R.e_ofset = 20;
 80186a2:	4b1a      	ldr	r3, [pc, #104]	; (801870c <input_parameter+0xb88>)
 80186a4:	4a18      	ldr	r2, [pc, #96]	; (8018708 <input_parameter+0xb84>)
 80186a6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

			speed1200_shortest_mollifier.V90_L.g_speed = 1200;
 80186aa:	4b18      	ldr	r3, [pc, #96]	; (801870c <input_parameter+0xb88>)
 80186ac:	4a18      	ldr	r2, [pc, #96]	; (8018710 <input_parameter+0xb8c>)
 80186ae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
			speed1200_shortest_mollifier.V90_L.t_speed = 1950;
 80186b2:	4b16      	ldr	r3, [pc, #88]	; (801870c <input_parameter+0xb88>)
 80186b4:	4a24      	ldr	r2, [pc, #144]	; (8018748 <input_parameter+0xbc4>)
 80186b6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			speed1200_shortest_mollifier.V90_L.f_ofset = 8;
 80186ba:	4b14      	ldr	r3, [pc, #80]	; (801870c <input_parameter+0xb88>)
 80186bc:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80186c0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
			speed1200_shortest_mollifier.V90_L.e_ofset = 20;
 80186c4:	4b11      	ldr	r3, [pc, #68]	; (801870c <input_parameter+0xb88>)
 80186c6:	4a10      	ldr	r2, [pc, #64]	; (8018708 <input_parameter+0xb84>)
 80186c8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c

//********************************1600********************************************
				speed1600_shortest_mollifier.SlalomCentervelocity = 1500;
 80186cc:	4b1f      	ldr	r3, [pc, #124]	; (801874c <input_parameter+0xbc8>)
 80186ce:	4a20      	ldr	r2, [pc, #128]	; (8018750 <input_parameter+0xbcc>)
 80186d0:	601a      	str	r2, [r3, #0]
				speed1600_shortest_mollifier.TurnCentervelocity = 1500;
 80186d2:	4b1e      	ldr	r3, [pc, #120]	; (801874c <input_parameter+0xbc8>)
 80186d4:	4a1e      	ldr	r2, [pc, #120]	; (8018750 <input_parameter+0xbcc>)
 80186d6:	605a      	str	r2, [r3, #4]

				speed1600_shortest_mollifier.turn90_R.g_speed = 1600;
 80186d8:	4b1c      	ldr	r3, [pc, #112]	; (801874c <input_parameter+0xbc8>)
 80186da:	4a1e      	ldr	r2, [pc, #120]	; (8018754 <input_parameter+0xbd0>)
 80186dc:	631a      	str	r2, [r3, #48]	; 0x30
				speed1600_shortest_mollifier.turn90_R.t_speed = 1510;
 80186de:	4b1b      	ldr	r3, [pc, #108]	; (801874c <input_parameter+0xbc8>)
 80186e0:	4a0f      	ldr	r2, [pc, #60]	; (8018720 <input_parameter+0xb9c>)
 80186e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80186e4:	e038      	b.n	8018758 <input_parameter+0xbd4>
 80186e6:	bf00      	nop
 80186e8:	2000f4a0 	.word	0x2000f4a0
 80186ec:	41400000 	.word	0x41400000
 80186f0:	41b00000 	.word	0x41b00000
 80186f4:	447a0000 	.word	0x447a0000
 80186f8:	44cf8000 	.word	0x44cf8000
 80186fc:	41200000 	.word	0x41200000
 8018700:	41f00000 	.word	0x41f00000
 8018704:	44dac000 	.word	0x44dac000
 8018708:	41a00000 	.word	0x41a00000
 801870c:	2000f5e8 	.word	0x2000f5e8
 8018710:	44960000 	.word	0x44960000
 8018714:	44898000 	.word	0x44898000
 8018718:	40a00000 	.word	0x40a00000
 801871c:	41e00000 	.word	0x41e00000
 8018720:	44bcc000 	.word	0x44bcc000
 8018724:	41c00000 	.word	0x41c00000
 8018728:	41980000 	.word	0x41980000
 801872c:	41c80000 	.word	0x41c80000
 8018730:	44ce4000 	.word	0x44ce4000
 8018734:	41900000 	.word	0x41900000
 8018738:	44c1c000 	.word	0x44c1c000
 801873c:	42040000 	.word	0x42040000
 8018740:	44e74000 	.word	0x44e74000
 8018744:	44af0000 	.word	0x44af0000
 8018748:	44f3c000 	.word	0x44f3c000
 801874c:	2000f730 	.word	0x2000f730
 8018750:	44bb8000 	.word	0x44bb8000
 8018754:	44c80000 	.word	0x44c80000
				speed1600_shortest_mollifier.turn90_R.f_ofset = 23;
 8018758:	4b67      	ldr	r3, [pc, #412]	; (80188f8 <input_parameter+0xd74>)
 801875a:	4a68      	ldr	r2, [pc, #416]	; (80188fc <input_parameter+0xd78>)
 801875c:	635a      	str	r2, [r3, #52]	; 0x34
				speed1600_shortest_mollifier.turn90_R.e_ofset = 31;
 801875e:	4b66      	ldr	r3, [pc, #408]	; (80188f8 <input_parameter+0xd74>)
 8018760:	4a67      	ldr	r2, [pc, #412]	; (8018900 <input_parameter+0xd7c>)
 8018762:	639a      	str	r2, [r3, #56]	; 0x38

				speed1600_shortest_mollifier.turn90_L.g_speed = 1600;
 8018764:	4b64      	ldr	r3, [pc, #400]	; (80188f8 <input_parameter+0xd74>)
 8018766:	4a67      	ldr	r2, [pc, #412]	; (8018904 <input_parameter+0xd80>)
 8018768:	645a      	str	r2, [r3, #68]	; 0x44
				speed1600_shortest_mollifier.turn90_L.t_speed = 1510;
 801876a:	4b63      	ldr	r3, [pc, #396]	; (80188f8 <input_parameter+0xd74>)
 801876c:	4a66      	ldr	r2, [pc, #408]	; (8018908 <input_parameter+0xd84>)
 801876e:	651a      	str	r2, [r3, #80]	; 0x50
				speed1600_shortest_mollifier.turn90_L.f_ofset = 23;
 8018770:	4b61      	ldr	r3, [pc, #388]	; (80188f8 <input_parameter+0xd74>)
 8018772:	4a62      	ldr	r2, [pc, #392]	; (80188fc <input_parameter+0xd78>)
 8018774:	649a      	str	r2, [r3, #72]	; 0x48
				speed1600_shortest_mollifier.turn90_L.e_ofset = 35;
 8018776:	4b60      	ldr	r3, [pc, #384]	; (80188f8 <input_parameter+0xd74>)
 8018778:	4a64      	ldr	r2, [pc, #400]	; (801890c <input_parameter+0xd88>)
 801877a:	64da      	str	r2, [r3, #76]	; 0x4c

				speed1600_shortest_mollifier.turn180_R.g_speed =1600;
 801877c:	4b5e      	ldr	r3, [pc, #376]	; (80188f8 <input_parameter+0xd74>)
 801877e:	4a61      	ldr	r2, [pc, #388]	; (8018904 <input_parameter+0xd80>)
 8018780:	659a      	str	r2, [r3, #88]	; 0x58
				speed1600_shortest_mollifier.turn180_R.t_speed = 1650;
 8018782:	4b5d      	ldr	r3, [pc, #372]	; (80188f8 <input_parameter+0xd74>)
 8018784:	4a62      	ldr	r2, [pc, #392]	; (8018910 <input_parameter+0xd8c>)
 8018786:	665a      	str	r2, [r3, #100]	; 0x64
				speed1600_shortest_mollifier.turn180_R.f_ofset = 20;
 8018788:	4b5b      	ldr	r3, [pc, #364]	; (80188f8 <input_parameter+0xd74>)
 801878a:	4a62      	ldr	r2, [pc, #392]	; (8018914 <input_parameter+0xd90>)
 801878c:	65da      	str	r2, [r3, #92]	; 0x5c
				speed1600_shortest_mollifier.turn180_R.e_ofset = 20;
 801878e:	4b5a      	ldr	r3, [pc, #360]	; (80188f8 <input_parameter+0xd74>)
 8018790:	4a60      	ldr	r2, [pc, #384]	; (8018914 <input_parameter+0xd90>)
 8018792:	661a      	str	r2, [r3, #96]	; 0x60

				speed1600_shortest_mollifier.turn180_L.g_speed = 1600;
 8018794:	4b58      	ldr	r3, [pc, #352]	; (80188f8 <input_parameter+0xd74>)
 8018796:	4a5b      	ldr	r2, [pc, #364]	; (8018904 <input_parameter+0xd80>)
 8018798:	66da      	str	r2, [r3, #108]	; 0x6c
				speed1600_shortest_mollifier.turn180_L.t_speed = 1650;
 801879a:	4b57      	ldr	r3, [pc, #348]	; (80188f8 <input_parameter+0xd74>)
 801879c:	4a5c      	ldr	r2, [pc, #368]	; (8018910 <input_parameter+0xd8c>)
 801879e:	679a      	str	r2, [r3, #120]	; 0x78
				speed1600_shortest_mollifier.turn180_L.f_ofset = 20;
 80187a0:	4b55      	ldr	r3, [pc, #340]	; (80188f8 <input_parameter+0xd74>)
 80187a2:	4a5c      	ldr	r2, [pc, #368]	; (8018914 <input_parameter+0xd90>)
 80187a4:	671a      	str	r2, [r3, #112]	; 0x70
				speed1600_shortest_mollifier.turn180_L.e_ofset = 18;
 80187a6:	4b54      	ldr	r3, [pc, #336]	; (80188f8 <input_parameter+0xd74>)
 80187a8:	4a5b      	ldr	r2, [pc, #364]	; (8018918 <input_parameter+0xd94>)
 80187aa:	675a      	str	r2, [r3, #116]	; 0x74

				speed1600_shortest_mollifier.turn45in_R.g_speed = 1600;
 80187ac:	4b52      	ldr	r3, [pc, #328]	; (80188f8 <input_parameter+0xd74>)
 80187ae:	4a55      	ldr	r2, [pc, #340]	; (8018904 <input_parameter+0xd80>)
 80187b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
				speed1600_shortest_mollifier.turn45in_R.t_speed = 1400;
 80187b4:	4b50      	ldr	r3, [pc, #320]	; (80188f8 <input_parameter+0xd74>)
 80187b6:	4a59      	ldr	r2, [pc, #356]	; (801891c <input_parameter+0xd98>)
 80187b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
				speed1600_shortest_mollifier.turn45in_R.f_ofset = 20;
 80187bc:	4b4e      	ldr	r3, [pc, #312]	; (80188f8 <input_parameter+0xd74>)
 80187be:	4a55      	ldr	r2, [pc, #340]	; (8018914 <input_parameter+0xd90>)
 80187c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
				speed1600_shortest_mollifier.turn45in_R.e_ofset = 38;
 80187c4:	4b4c      	ldr	r3, [pc, #304]	; (80188f8 <input_parameter+0xd74>)
 80187c6:	4a56      	ldr	r2, [pc, #344]	; (8018920 <input_parameter+0xd9c>)
 80187c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

				speed1600_shortest_mollifier.turn45in_L.g_speed = 1600;
 80187cc:	4b4a      	ldr	r3, [pc, #296]	; (80188f8 <input_parameter+0xd74>)
 80187ce:	4a4d      	ldr	r2, [pc, #308]	; (8018904 <input_parameter+0xd80>)
 80187d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
				speed1600_shortest_mollifier.turn45in_L.t_speed = 1400;
 80187d4:	4b48      	ldr	r3, [pc, #288]	; (80188f8 <input_parameter+0xd74>)
 80187d6:	4a51      	ldr	r2, [pc, #324]	; (801891c <input_parameter+0xd98>)
 80187d8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				speed1600_shortest_mollifier.turn45in_L.f_ofset = 20;
 80187dc:	4b46      	ldr	r3, [pc, #280]	; (80188f8 <input_parameter+0xd74>)
 80187de:	4a4d      	ldr	r2, [pc, #308]	; (8018914 <input_parameter+0xd90>)
 80187e0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
				speed1600_shortest_mollifier.turn45in_L.e_ofset = 36;
 80187e4:	4b44      	ldr	r3, [pc, #272]	; (80188f8 <input_parameter+0xd74>)
 80187e6:	4a4f      	ldr	r2, [pc, #316]	; (8018924 <input_parameter+0xda0>)
 80187e8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

				speed1600_shortest_mollifier.turn135in_R.g_speed = 1600;
 80187ec:	4b42      	ldr	r3, [pc, #264]	; (80188f8 <input_parameter+0xd74>)
 80187ee:	4a45      	ldr	r2, [pc, #276]	; (8018904 <input_parameter+0xd80>)
 80187f0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
				speed1600_shortest_mollifier.turn135in_R.t_speed = 1750;
 80187f4:	4b40      	ldr	r3, [pc, #256]	; (80188f8 <input_parameter+0xd74>)
 80187f6:	4a4c      	ldr	r2, [pc, #304]	; (8018928 <input_parameter+0xda4>)
 80187f8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				speed1600_shortest_mollifier.turn135in_R.f_ofset = 20;
 80187fc:	4b3e      	ldr	r3, [pc, #248]	; (80188f8 <input_parameter+0xd74>)
 80187fe:	4a45      	ldr	r2, [pc, #276]	; (8018914 <input_parameter+0xd90>)
 8018800:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				speed1600_shortest_mollifier.turn135in_R.e_ofset = 36;
 8018804:	4b3c      	ldr	r3, [pc, #240]	; (80188f8 <input_parameter+0xd74>)
 8018806:	4a47      	ldr	r2, [pc, #284]	; (8018924 <input_parameter+0xda0>)
 8018808:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

				speed1600_shortest_mollifier.turn135in_L.g_speed = 1600;
 801880c:	4b3a      	ldr	r3, [pc, #232]	; (80188f8 <input_parameter+0xd74>)
 801880e:	4a3d      	ldr	r2, [pc, #244]	; (8018904 <input_parameter+0xd80>)
 8018810:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
				speed1600_shortest_mollifier.turn135in_L.t_speed = 1750;
 8018814:	4b38      	ldr	r3, [pc, #224]	; (80188f8 <input_parameter+0xd74>)
 8018816:	4a44      	ldr	r2, [pc, #272]	; (8018928 <input_parameter+0xda4>)
 8018818:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
				speed1600_shortest_mollifier.turn135in_L.f_ofset = 20;
 801881c:	4b36      	ldr	r3, [pc, #216]	; (80188f8 <input_parameter+0xd74>)
 801881e:	4a3d      	ldr	r2, [pc, #244]	; (8018914 <input_parameter+0xd90>)
 8018820:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
				speed1600_shortest_mollifier.turn135in_L.e_ofset = 34;
 8018824:	4b34      	ldr	r3, [pc, #208]	; (80188f8 <input_parameter+0xd74>)
 8018826:	4a41      	ldr	r2, [pc, #260]	; (801892c <input_parameter+0xda8>)
 8018828:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4

				speed1600_shortest_mollifier.turn45out_R.g_speed = 1600;
 801882c:	4b32      	ldr	r3, [pc, #200]	; (80188f8 <input_parameter+0xd74>)
 801882e:	4a35      	ldr	r2, [pc, #212]	; (8018904 <input_parameter+0xd80>)
 8018830:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
				speed1600_shortest_mollifier.turn45out_R.t_speed = 1400;
 8018834:	4b30      	ldr	r3, [pc, #192]	; (80188f8 <input_parameter+0xd74>)
 8018836:	4a39      	ldr	r2, [pc, #228]	; (801891c <input_parameter+0xd98>)
 8018838:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
				speed1600_shortest_mollifier.turn45out_R.f_ofset = 25;
 801883c:	4b2e      	ldr	r3, [pc, #184]	; (80188f8 <input_parameter+0xd74>)
 801883e:	4a3c      	ldr	r2, [pc, #240]	; (8018930 <input_parameter+0xdac>)
 8018840:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
				speed1600_shortest_mollifier.turn45out_R.e_ofset = 22;
 8018844:	4b2c      	ldr	r3, [pc, #176]	; (80188f8 <input_parameter+0xd74>)
 8018846:	4a3b      	ldr	r2, [pc, #236]	; (8018934 <input_parameter+0xdb0>)
 8018848:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

				speed1600_shortest_mollifier.turn45out_L.g_speed = 1600;
 801884c:	4b2a      	ldr	r3, [pc, #168]	; (80188f8 <input_parameter+0xd74>)
 801884e:	4a2d      	ldr	r2, [pc, #180]	; (8018904 <input_parameter+0xd80>)
 8018850:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
				speed1600_shortest_mollifier.turn45out_L.t_speed = 1400;
 8018854:	4b28      	ldr	r3, [pc, #160]	; (80188f8 <input_parameter+0xd74>)
 8018856:	4a31      	ldr	r2, [pc, #196]	; (801891c <input_parameter+0xd98>)
 8018858:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
				speed1600_shortest_mollifier.turn45out_L.f_ofset = 25;
 801885c:	4b26      	ldr	r3, [pc, #152]	; (80188f8 <input_parameter+0xd74>)
 801885e:	4a34      	ldr	r2, [pc, #208]	; (8018930 <input_parameter+0xdac>)
 8018860:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
				speed1600_shortest_mollifier.turn45out_L.e_ofset = 24;
 8018864:	4b24      	ldr	r3, [pc, #144]	; (80188f8 <input_parameter+0xd74>)
 8018866:	4a34      	ldr	r2, [pc, #208]	; (8018938 <input_parameter+0xdb4>)
 8018868:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

				speed1600_shortest_mollifier.turn135out_R.g_speed = 1600;
 801886c:	4b22      	ldr	r3, [pc, #136]	; (80188f8 <input_parameter+0xd74>)
 801886e:	4a25      	ldr	r2, [pc, #148]	; (8018904 <input_parameter+0xd80>)
 8018870:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
				speed1600_shortest_mollifier.turn135out_R.t_speed = 1800;
 8018874:	4b20      	ldr	r3, [pc, #128]	; (80188f8 <input_parameter+0xd74>)
 8018876:	4a31      	ldr	r2, [pc, #196]	; (801893c <input_parameter+0xdb8>)
 8018878:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
				speed1600_shortest_mollifier.turn135out_R.f_ofset = 12;
 801887c:	4b1e      	ldr	r3, [pc, #120]	; (80188f8 <input_parameter+0xd74>)
 801887e:	4a30      	ldr	r2, [pc, #192]	; (8018940 <input_parameter+0xdbc>)
 8018880:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
				speed1600_shortest_mollifier.turn135out_R.e_ofset = 22;
 8018884:	4b1c      	ldr	r3, [pc, #112]	; (80188f8 <input_parameter+0xd74>)
 8018886:	4a2b      	ldr	r2, [pc, #172]	; (8018934 <input_parameter+0xdb0>)
 8018888:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

				speed1600_shortest_mollifier.turn135out_L.g_speed = 1600;
 801888c:	4b1a      	ldr	r3, [pc, #104]	; (80188f8 <input_parameter+0xd74>)
 801888e:	4a1d      	ldr	r2, [pc, #116]	; (8018904 <input_parameter+0xd80>)
 8018890:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
				speed1600_shortest_mollifier.turn135out_L.t_speed = 1800;
 8018894:	4b18      	ldr	r3, [pc, #96]	; (80188f8 <input_parameter+0xd74>)
 8018896:	4a29      	ldr	r2, [pc, #164]	; (801893c <input_parameter+0xdb8>)
 8018898:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				speed1600_shortest_mollifier.turn135out_L.f_ofset = 10;
 801889c:	4b16      	ldr	r3, [pc, #88]	; (80188f8 <input_parameter+0xd74>)
 801889e:	4a29      	ldr	r2, [pc, #164]	; (8018944 <input_parameter+0xdc0>)
 80188a0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
				speed1600_shortest_mollifier.turn135out_L.e_ofset = 30;
 80188a4:	4b14      	ldr	r3, [pc, #80]	; (80188f8 <input_parameter+0xd74>)
 80188a6:	4a28      	ldr	r2, [pc, #160]	; (8018948 <input_parameter+0xdc4>)
 80188a8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

				speed1600_shortest_mollifier.V90_R.g_speed = 1500;
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <input_parameter+0xd74>)
 80188ae:	4a27      	ldr	r2, [pc, #156]	; (801894c <input_parameter+0xdc8>)
 80188b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				speed1600_shortest_mollifier.V90_R.t_speed = 2000;
 80188b4:	4b10      	ldr	r3, [pc, #64]	; (80188f8 <input_parameter+0xd74>)
 80188b6:	4a26      	ldr	r2, [pc, #152]	; (8018950 <input_parameter+0xdcc>)
 80188b8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
				speed1600_shortest_mollifier.V90_R.f_ofset = 3;
 80188bc:	4b0e      	ldr	r3, [pc, #56]	; (80188f8 <input_parameter+0xd74>)
 80188be:	4a25      	ldr	r2, [pc, #148]	; (8018954 <input_parameter+0xdd0>)
 80188c0:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
				speed1600_shortest_mollifier.V90_R.e_ofset = 20;
 80188c4:	4b0c      	ldr	r3, [pc, #48]	; (80188f8 <input_parameter+0xd74>)
 80188c6:	4a13      	ldr	r2, [pc, #76]	; (8018914 <input_parameter+0xd90>)
 80188c8:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128

				speed1600_shortest_mollifier.V90_L.g_speed = 1500;
 80188cc:	4b0a      	ldr	r3, [pc, #40]	; (80188f8 <input_parameter+0xd74>)
 80188ce:	4a1f      	ldr	r2, [pc, #124]	; (801894c <input_parameter+0xdc8>)
 80188d0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
				speed1600_shortest_mollifier.V90_L.t_speed = 2000;
 80188d4:	4b08      	ldr	r3, [pc, #32]	; (80188f8 <input_parameter+0xd74>)
 80188d6:	4a1e      	ldr	r2, [pc, #120]	; (8018950 <input_parameter+0xdcc>)
 80188d8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				speed1600_shortest_mollifier.V90_L.f_ofset = 3;
 80188dc:	4b06      	ldr	r3, [pc, #24]	; (80188f8 <input_parameter+0xd74>)
 80188de:	4a1d      	ldr	r2, [pc, #116]	; (8018954 <input_parameter+0xdd0>)
 80188e0:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				speed1600_shortest_mollifier.V90_L.e_ofset = 20;
 80188e4:	4b04      	ldr	r3, [pc, #16]	; (80188f8 <input_parameter+0xd74>)
 80188e6:	4a0b      	ldr	r2, [pc, #44]	; (8018914 <input_parameter+0xd90>)
 80188e8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c


}
 80188ec:	bf00      	nop
 80188ee:	46bd      	mov	sp, r7
 80188f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f4:	4770      	bx	lr
 80188f6:	bf00      	nop
 80188f8:	2000f730 	.word	0x2000f730
 80188fc:	41b80000 	.word	0x41b80000
 8018900:	41f80000 	.word	0x41f80000
 8018904:	44c80000 	.word	0x44c80000
 8018908:	44bcc000 	.word	0x44bcc000
 801890c:	420c0000 	.word	0x420c0000
 8018910:	44ce4000 	.word	0x44ce4000
 8018914:	41a00000 	.word	0x41a00000
 8018918:	41900000 	.word	0x41900000
 801891c:	44af0000 	.word	0x44af0000
 8018920:	42180000 	.word	0x42180000
 8018924:	42100000 	.word	0x42100000
 8018928:	44dac000 	.word	0x44dac000
 801892c:	42080000 	.word	0x42080000
 8018930:	41c80000 	.word	0x41c80000
 8018934:	41b00000 	.word	0x41b00000
 8018938:	41c00000 	.word	0x41c00000
 801893c:	44e10000 	.word	0x44e10000
 8018940:	41400000 	.word	0x41400000
 8018944:	41200000 	.word	0x41200000
 8018948:	41f00000 	.word	0x41f00000
 801894c:	44bb8000 	.word	0x44bb8000
 8018950:	44fa0000 	.word	0x44fa0000
 8018954:	40400000 	.word	0x40400000

08018958 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 801895c:	4b22      	ldr	r3, [pc, #136]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 801895e:	4a23      	ldr	r2, [pc, #140]	; (80189ec <MX_USART1_UART_Init+0x94>)
 8018960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018962:	4b21      	ldr	r3, [pc, #132]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801896a:	4b1f      	ldr	r3, [pc, #124]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 801896c:	2200      	movs	r2, #0
 801896e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018970:	4b1d      	ldr	r3, [pc, #116]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018972:	2200      	movs	r2, #0
 8018974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8018976:	4b1c      	ldr	r3, [pc, #112]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018978:	2200      	movs	r2, #0
 801897a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 801897c:	4b1a      	ldr	r3, [pc, #104]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 801897e:	220c      	movs	r2, #12
 8018980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018982:	4b19      	ldr	r3, [pc, #100]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018984:	2200      	movs	r2, #0
 8018986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8018988:	4b17      	ldr	r3, [pc, #92]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 801898a:	2200      	movs	r2, #0
 801898c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801898e:	4b16      	ldr	r3, [pc, #88]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018990:	2200      	movs	r2, #0
 8018992:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8018994:	4b14      	ldr	r3, [pc, #80]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 8018996:	2200      	movs	r2, #0
 8018998:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801899a:	4b13      	ldr	r3, [pc, #76]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 801899c:	2200      	movs	r2, #0
 801899e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80189a0:	4811      	ldr	r0, [pc, #68]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 80189a2:	f006 fd2d 	bl	801f400 <HAL_UART_Init>
 80189a6:	4603      	mov	r3, r0
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d001      	beq.n	80189b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80189ac:	f7f1 fa11 	bl	8009dd2 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80189b0:	2100      	movs	r1, #0
 80189b2:	480d      	ldr	r0, [pc, #52]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 80189b4:	f007 faf4 	bl	801ffa0 <HAL_UARTEx_SetTxFifoThreshold>
 80189b8:	4603      	mov	r3, r0
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d001      	beq.n	80189c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80189be:	f7f1 fa08 	bl	8009dd2 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80189c2:	2100      	movs	r1, #0
 80189c4:	4808      	ldr	r0, [pc, #32]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 80189c6:	f007 fb29 	bl	802001c <HAL_UARTEx_SetRxFifoThreshold>
 80189ca:	4603      	mov	r3, r0
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d001      	beq.n	80189d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80189d0:	f7f1 f9ff 	bl	8009dd2 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80189d4:	4804      	ldr	r0, [pc, #16]	; (80189e8 <MX_USART1_UART_Init+0x90>)
 80189d6:	f007 faaa 	bl	801ff2e <HAL_UARTEx_DisableFifoMode>
 80189da:	4603      	mov	r3, r0
 80189dc:	2b00      	cmp	r3, #0
 80189de:	d001      	beq.n	80189e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80189e0:	f7f1 f9f7 	bl	8009dd2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80189e4:	bf00      	nop
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	2000f878 	.word	0x2000f878
 80189ec:	40013800 	.word	0x40013800

080189f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80189f0:	b580      	push	{r7, lr}
 80189f2:	b09e      	sub	sp, #120	; 0x78
 80189f4:	af00      	add	r7, sp, #0
 80189f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80189f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80189fc:	2200      	movs	r2, #0
 80189fe:	601a      	str	r2, [r3, #0]
 8018a00:	605a      	str	r2, [r3, #4]
 8018a02:	609a      	str	r2, [r3, #8]
 8018a04:	60da      	str	r2, [r3, #12]
 8018a06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8018a08:	f107 0314 	add.w	r3, r7, #20
 8018a0c:	2250      	movs	r2, #80	; 0x50
 8018a0e:	2100      	movs	r1, #0
 8018a10:	4618      	mov	r0, r3
 8018a12:	f007 fbc7 	bl	80201a4 <memset>
  if(uartHandle->Instance==USART1)
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	681b      	ldr	r3, [r3, #0]
 8018a1a:	4a1f      	ldr	r2, [pc, #124]	; (8018a98 <HAL_UART_MspInit+0xa8>)
 8018a1c:	4293      	cmp	r3, r2
 8018a1e:	d137      	bne.n	8018a90 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8018a20:	2301      	movs	r3, #1
 8018a22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8018a24:	2300      	movs	r3, #0
 8018a26:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8018a28:	f107 0314 	add.w	r3, r7, #20
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f004 f891 	bl	801cb54 <HAL_RCCEx_PeriphCLKConfig>
 8018a32:	4603      	mov	r3, r0
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d001      	beq.n	8018a3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8018a38:	f7f1 f9cb 	bl	8009dd2 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8018a3c:	4b17      	ldr	r3, [pc, #92]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a40:	4a16      	ldr	r2, [pc, #88]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018a46:	6613      	str	r3, [r2, #96]	; 0x60
 8018a48:	4b14      	ldr	r3, [pc, #80]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018a50:	613b      	str	r3, [r7, #16]
 8018a52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018a54:	4b11      	ldr	r3, [pc, #68]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a58:	4a10      	ldr	r2, [pc, #64]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a5a:	f043 0301 	orr.w	r3, r3, #1
 8018a5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8018a60:	4b0e      	ldr	r3, [pc, #56]	; (8018a9c <HAL_UART_MspInit+0xac>)
 8018a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a64:	f003 0301 	and.w	r3, r3, #1
 8018a68:	60fb      	str	r3, [r7, #12]
 8018a6a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8018a6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8018a70:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a72:	2302      	movs	r3, #2
 8018a74:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a76:	2300      	movs	r3, #0
 8018a78:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a7a:	2300      	movs	r3, #0
 8018a7c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018a7e:	2307      	movs	r3, #7
 8018a80:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018a82:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8018a86:	4619      	mov	r1, r3
 8018a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8018a8c:	f003 f8e4 	bl	801bc58 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018a90:	bf00      	nop
 8018a92:	3778      	adds	r7, #120	; 0x78
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}
 8018a98:	40013800 	.word	0x40013800
 8018a9c:	40021000 	.word	0x40021000

08018aa0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8018aa0:	480d      	ldr	r0, [pc, #52]	; (8018ad8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8018aa2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8018aa4:	480d      	ldr	r0, [pc, #52]	; (8018adc <LoopForever+0x6>)
  ldr r1, =_edata
 8018aa6:	490e      	ldr	r1, [pc, #56]	; (8018ae0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8018aa8:	4a0e      	ldr	r2, [pc, #56]	; (8018ae4 <LoopForever+0xe>)
  movs r3, #0
 8018aaa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8018aac:	e002      	b.n	8018ab4 <LoopCopyDataInit>

08018aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018ab2:	3304      	adds	r3, #4

08018ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018ab8:	d3f9      	bcc.n	8018aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018aba:	4a0b      	ldr	r2, [pc, #44]	; (8018ae8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8018abc:	4c0b      	ldr	r4, [pc, #44]	; (8018aec <LoopForever+0x16>)
  movs r3, #0
 8018abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018ac0:	e001      	b.n	8018ac6 <LoopFillZerobss>

08018ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018ac4:	3204      	adds	r2, #4

08018ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018ac8:	d3fb      	bcc.n	8018ac2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8018aca:	f7fe fd93 	bl	80175f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018ace:	f007 fb37 	bl	8020140 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8018ad2:	f7f1 f885 	bl	8009be0 <main>

08018ad6 <LoopForever>:

LoopForever:
    b LoopForever
 8018ad6:	e7fe      	b.n	8018ad6 <LoopForever>
  ldr   r0, =_estack
 8018ad8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8018adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018ae0:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8018ae4:	08023a00 	.word	0x08023a00
  ldr r2, =_sbss
 8018ae8:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8018aec:	2000f91c 	.word	0x2000f91c

08018af0 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8018af0:	e7fe      	b.n	8018af0 <ADC3_IRQHandler>
	...

08018af4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018af4:	b580      	push	{r7, lr}
 8018af6:	b082      	sub	sp, #8
 8018af8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8018afa:	2300      	movs	r3, #0
 8018afc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018afe:	4b0c      	ldr	r3, [pc, #48]	; (8018b30 <HAL_Init+0x3c>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	4a0b      	ldr	r2, [pc, #44]	; (8018b30 <HAL_Init+0x3c>)
 8018b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018b08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018b0a:	2003      	movs	r0, #3
 8018b0c:	f002 fb30 	bl	801b170 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8018b10:	2000      	movs	r0, #0
 8018b12:	f000 f80f 	bl	8018b34 <HAL_InitTick>
 8018b16:	4603      	mov	r3, r0
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d002      	beq.n	8018b22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8018b1c:	2301      	movs	r3, #1
 8018b1e:	71fb      	strb	r3, [r7, #7]
 8018b20:	e001      	b.n	8018b26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8018b22:	f7fe fc1b 	bl	801735c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8018b26:	79fb      	ldrb	r3, [r7, #7]

}
 8018b28:	4618      	mov	r0, r3
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	40022000 	.word	0x40022000

08018b34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b084      	sub	sp, #16
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8018b40:	4b16      	ldr	r3, [pc, #88]	; (8018b9c <HAL_InitTick+0x68>)
 8018b42:	681b      	ldr	r3, [r3, #0]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d022      	beq.n	8018b8e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8018b48:	4b15      	ldr	r3, [pc, #84]	; (8018ba0 <HAL_InitTick+0x6c>)
 8018b4a:	681a      	ldr	r2, [r3, #0]
 8018b4c:	4b13      	ldr	r3, [pc, #76]	; (8018b9c <HAL_InitTick+0x68>)
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8018b54:	fbb1 f3f3 	udiv	r3, r1, r3
 8018b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b5c:	4618      	mov	r0, r3
 8018b5e:	f002 fb3a 	bl	801b1d6 <HAL_SYSTICK_Config>
 8018b62:	4603      	mov	r3, r0
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d10f      	bne.n	8018b88 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	2b0f      	cmp	r3, #15
 8018b6c:	d809      	bhi.n	8018b82 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018b6e:	2200      	movs	r2, #0
 8018b70:	6879      	ldr	r1, [r7, #4]
 8018b72:	f04f 30ff 	mov.w	r0, #4294967295
 8018b76:	f002 fb06 	bl	801b186 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8018b7a:	4a0a      	ldr	r2, [pc, #40]	; (8018ba4 <HAL_InitTick+0x70>)
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	6013      	str	r3, [r2, #0]
 8018b80:	e007      	b.n	8018b92 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8018b82:	2301      	movs	r3, #1
 8018b84:	73fb      	strb	r3, [r7, #15]
 8018b86:	e004      	b.n	8018b92 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8018b88:	2301      	movs	r3, #1
 8018b8a:	73fb      	strb	r3, [r7, #15]
 8018b8c:	e001      	b.n	8018b92 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8018b8e:	2301      	movs	r3, #1
 8018b90:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8018b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b94:	4618      	mov	r0, r3
 8018b96:	3710      	adds	r7, #16
 8018b98:	46bd      	mov	sp, r7
 8018b9a:	bd80      	pop	{r7, pc}
 8018b9c:	20000008 	.word	0x20000008
 8018ba0:	20000000 	.word	0x20000000
 8018ba4:	20000004 	.word	0x20000004

08018ba8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018ba8:	b480      	push	{r7}
 8018baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018bac:	4b05      	ldr	r3, [pc, #20]	; (8018bc4 <HAL_IncTick+0x1c>)
 8018bae:	681a      	ldr	r2, [r3, #0]
 8018bb0:	4b05      	ldr	r3, [pc, #20]	; (8018bc8 <HAL_IncTick+0x20>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	4413      	add	r3, r2
 8018bb6:	4a03      	ldr	r2, [pc, #12]	; (8018bc4 <HAL_IncTick+0x1c>)
 8018bb8:	6013      	str	r3, [r2, #0]
}
 8018bba:	bf00      	nop
 8018bbc:	46bd      	mov	sp, r7
 8018bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bc2:	4770      	bx	lr
 8018bc4:	2000f908 	.word	0x2000f908
 8018bc8:	20000008 	.word	0x20000008

08018bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018bcc:	b480      	push	{r7}
 8018bce:	af00      	add	r7, sp, #0
  return uwTick;
 8018bd0:	4b03      	ldr	r3, [pc, #12]	; (8018be0 <HAL_GetTick+0x14>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
}
 8018bd4:	4618      	mov	r0, r3
 8018bd6:	46bd      	mov	sp, r7
 8018bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bdc:	4770      	bx	lr
 8018bde:	bf00      	nop
 8018be0:	2000f908 	.word	0x2000f908

08018be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b084      	sub	sp, #16
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018bec:	f7ff ffee 	bl	8018bcc <HAL_GetTick>
 8018bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bfc:	d004      	beq.n	8018c08 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8018bfe:	4b09      	ldr	r3, [pc, #36]	; (8018c24 <HAL_Delay+0x40>)
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	68fa      	ldr	r2, [r7, #12]
 8018c04:	4413      	add	r3, r2
 8018c06:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018c08:	bf00      	nop
 8018c0a:	f7ff ffdf 	bl	8018bcc <HAL_GetTick>
 8018c0e:	4602      	mov	r2, r0
 8018c10:	68bb      	ldr	r3, [r7, #8]
 8018c12:	1ad3      	subs	r3, r2, r3
 8018c14:	68fa      	ldr	r2, [r7, #12]
 8018c16:	429a      	cmp	r2, r3
 8018c18:	d8f7      	bhi.n	8018c0a <HAL_Delay+0x26>
  {
  }
}
 8018c1a:	bf00      	nop
 8018c1c:	bf00      	nop
 8018c1e:	3710      	adds	r7, #16
 8018c20:	46bd      	mov	sp, r7
 8018c22:	bd80      	pop	{r7, pc}
 8018c24:	20000008 	.word	0x20000008

08018c28 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8018c28:	b480      	push	{r7}
 8018c2a:	b083      	sub	sp, #12
 8018c2c:	af00      	add	r7, sp, #0
 8018c2e:	6078      	str	r0, [r7, #4]
 8018c30:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8018c32:	687b      	ldr	r3, [r7, #4]
 8018c34:	689b      	ldr	r3, [r3, #8]
 8018c36:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8018c3a:	683b      	ldr	r3, [r7, #0]
 8018c3c:	431a      	orrs	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	609a      	str	r2, [r3, #8]
}
 8018c42:	bf00      	nop
 8018c44:	370c      	adds	r7, #12
 8018c46:	46bd      	mov	sp, r7
 8018c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c4c:	4770      	bx	lr

08018c4e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8018c4e:	b480      	push	{r7}
 8018c50:	b083      	sub	sp, #12
 8018c52:	af00      	add	r7, sp, #0
 8018c54:	6078      	str	r0, [r7, #4]
 8018c56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	689b      	ldr	r3, [r3, #8]
 8018c5c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8018c60:	683b      	ldr	r3, [r7, #0]
 8018c62:	431a      	orrs	r2, r3
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	609a      	str	r2, [r3, #8]
}
 8018c68:	bf00      	nop
 8018c6a:	370c      	adds	r7, #12
 8018c6c:	46bd      	mov	sp, r7
 8018c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c72:	4770      	bx	lr

08018c74 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018c74:	b480      	push	{r7}
 8018c76:	b083      	sub	sp, #12
 8018c78:	af00      	add	r7, sp, #0
 8018c7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8018c7c:	687b      	ldr	r3, [r7, #4]
 8018c7e:	689b      	ldr	r3, [r3, #8]
 8018c80:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8018c84:	4618      	mov	r0, r3
 8018c86:	370c      	adds	r7, #12
 8018c88:	46bd      	mov	sp, r7
 8018c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c8e:	4770      	bx	lr

08018c90 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8018c90:	b480      	push	{r7}
 8018c92:	b087      	sub	sp, #28
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	60f8      	str	r0, [r7, #12]
 8018c98:	60b9      	str	r1, [r7, #8]
 8018c9a:	607a      	str	r2, [r7, #4]
 8018c9c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	3360      	adds	r3, #96	; 0x60
 8018ca2:	461a      	mov	r2, r3
 8018ca4:	68bb      	ldr	r3, [r7, #8]
 8018ca6:	009b      	lsls	r3, r3, #2
 8018ca8:	4413      	add	r3, r2
 8018caa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	681a      	ldr	r2, [r3, #0]
 8018cb0:	4b08      	ldr	r3, [pc, #32]	; (8018cd4 <LL_ADC_SetOffset+0x44>)
 8018cb2:	4013      	ands	r3, r2
 8018cb4:	687a      	ldr	r2, [r7, #4]
 8018cb6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8018cba:	683a      	ldr	r2, [r7, #0]
 8018cbc:	430a      	orrs	r2, r1
 8018cbe:	4313      	orrs	r3, r2
 8018cc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8018cc8:	bf00      	nop
 8018cca:	371c      	adds	r7, #28
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cd2:	4770      	bx	lr
 8018cd4:	03fff000 	.word	0x03fff000

08018cd8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8018cd8:	b480      	push	{r7}
 8018cda:	b085      	sub	sp, #20
 8018cdc:	af00      	add	r7, sp, #0
 8018cde:	6078      	str	r0, [r7, #4]
 8018ce0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	3360      	adds	r3, #96	; 0x60
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	683b      	ldr	r3, [r7, #0]
 8018cea:	009b      	lsls	r3, r3, #2
 8018cec:	4413      	add	r3, r2
 8018cee:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8018cf8:	4618      	mov	r0, r3
 8018cfa:	3714      	adds	r7, #20
 8018cfc:	46bd      	mov	sp, r7
 8018cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d02:	4770      	bx	lr

08018d04 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8018d04:	b480      	push	{r7}
 8018d06:	b087      	sub	sp, #28
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	60f8      	str	r0, [r7, #12]
 8018d0c:	60b9      	str	r1, [r7, #8]
 8018d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	3360      	adds	r3, #96	; 0x60
 8018d14:	461a      	mov	r2, r3
 8018d16:	68bb      	ldr	r3, [r7, #8]
 8018d18:	009b      	lsls	r3, r3, #2
 8018d1a:	4413      	add	r3, r2
 8018d1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018d1e:	697b      	ldr	r3, [r7, #20]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	431a      	orrs	r2, r3
 8018d2a:	697b      	ldr	r3, [r7, #20]
 8018d2c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8018d2e:	bf00      	nop
 8018d30:	371c      	adds	r7, #28
 8018d32:	46bd      	mov	sp, r7
 8018d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d38:	4770      	bx	lr

08018d3a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8018d3a:	b480      	push	{r7}
 8018d3c:	b087      	sub	sp, #28
 8018d3e:	af00      	add	r7, sp, #0
 8018d40:	60f8      	str	r0, [r7, #12]
 8018d42:	60b9      	str	r1, [r7, #8]
 8018d44:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	3360      	adds	r3, #96	; 0x60
 8018d4a:	461a      	mov	r2, r3
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	009b      	lsls	r3, r3, #2
 8018d50:	4413      	add	r3, r2
 8018d52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018d54:	697b      	ldr	r3, [r7, #20]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	431a      	orrs	r2, r3
 8018d60:	697b      	ldr	r3, [r7, #20]
 8018d62:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8018d64:	bf00      	nop
 8018d66:	371c      	adds	r7, #28
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d6e:	4770      	bx	lr

08018d70 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8018d70:	b480      	push	{r7}
 8018d72:	b087      	sub	sp, #28
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	60f8      	str	r0, [r7, #12]
 8018d78:	60b9      	str	r1, [r7, #8]
 8018d7a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	3360      	adds	r3, #96	; 0x60
 8018d80:	461a      	mov	r2, r3
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	009b      	lsls	r3, r3, #2
 8018d86:	4413      	add	r3, r2
 8018d88:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018d8a:	697b      	ldr	r3, [r7, #20]
 8018d8c:	681b      	ldr	r3, [r3, #0]
 8018d8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	431a      	orrs	r2, r3
 8018d96:	697b      	ldr	r3, [r7, #20]
 8018d98:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8018d9a:	bf00      	nop
 8018d9c:	371c      	adds	r7, #28
 8018d9e:	46bd      	mov	sp, r7
 8018da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018da4:	4770      	bx	lr

08018da6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8018da6:	b480      	push	{r7}
 8018da8:	b083      	sub	sp, #12
 8018daa:	af00      	add	r7, sp, #0
 8018dac:	6078      	str	r0, [r7, #4]
 8018dae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	695b      	ldr	r3, [r3, #20]
 8018db4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	431a      	orrs	r2, r3
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	615a      	str	r2, [r3, #20]
}
 8018dc0:	bf00      	nop
 8018dc2:	370c      	adds	r7, #12
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dca:	4770      	bx	lr

08018dcc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018dcc:	b480      	push	{r7}
 8018dce:	b083      	sub	sp, #12
 8018dd0:	af00      	add	r7, sp, #0
 8018dd2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	68db      	ldr	r3, [r3, #12]
 8018dd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d101      	bne.n	8018de4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8018de0:	2301      	movs	r3, #1
 8018de2:	e000      	b.n	8018de6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8018de4:	2300      	movs	r3, #0
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	370c      	adds	r7, #12
 8018dea:	46bd      	mov	sp, r7
 8018dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018df0:	4770      	bx	lr

08018df2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8018df2:	b480      	push	{r7}
 8018df4:	b087      	sub	sp, #28
 8018df6:	af00      	add	r7, sp, #0
 8018df8:	60f8      	str	r0, [r7, #12]
 8018dfa:	60b9      	str	r1, [r7, #8]
 8018dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	3330      	adds	r3, #48	; 0x30
 8018e02:	461a      	mov	r2, r3
 8018e04:	68bb      	ldr	r3, [r7, #8]
 8018e06:	0a1b      	lsrs	r3, r3, #8
 8018e08:	009b      	lsls	r3, r3, #2
 8018e0a:	f003 030c 	and.w	r3, r3, #12
 8018e0e:	4413      	add	r3, r2
 8018e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e12:	697b      	ldr	r3, [r7, #20]
 8018e14:	681a      	ldr	r2, [r3, #0]
 8018e16:	68bb      	ldr	r3, [r7, #8]
 8018e18:	f003 031f 	and.w	r3, r3, #31
 8018e1c:	211f      	movs	r1, #31
 8018e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8018e22:	43db      	mvns	r3, r3
 8018e24:	401a      	ands	r2, r3
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	0e9b      	lsrs	r3, r3, #26
 8018e2a:	f003 011f 	and.w	r1, r3, #31
 8018e2e:	68bb      	ldr	r3, [r7, #8]
 8018e30:	f003 031f 	and.w	r3, r3, #31
 8018e34:	fa01 f303 	lsl.w	r3, r1, r3
 8018e38:	431a      	orrs	r2, r3
 8018e3a:	697b      	ldr	r3, [r7, #20]
 8018e3c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8018e3e:	bf00      	nop
 8018e40:	371c      	adds	r7, #28
 8018e42:	46bd      	mov	sp, r7
 8018e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e48:	4770      	bx	lr

08018e4a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8018e4a:	b480      	push	{r7}
 8018e4c:	b083      	sub	sp, #12
 8018e4e:	af00      	add	r7, sp, #0
 8018e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018e56:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8018e5a:	2b00      	cmp	r3, #0
 8018e5c:	d101      	bne.n	8018e62 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8018e5e:	2301      	movs	r3, #1
 8018e60:	e000      	b.n	8018e64 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8018e62:	2300      	movs	r3, #0
}
 8018e64:	4618      	mov	r0, r3
 8018e66:	370c      	adds	r7, #12
 8018e68:	46bd      	mov	sp, r7
 8018e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e6e:	4770      	bx	lr

08018e70 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8018e70:	b480      	push	{r7}
 8018e72:	b087      	sub	sp, #28
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	60f8      	str	r0, [r7, #12]
 8018e78:	60b9      	str	r1, [r7, #8]
 8018e7a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	3314      	adds	r3, #20
 8018e80:	461a      	mov	r2, r3
 8018e82:	68bb      	ldr	r3, [r7, #8]
 8018e84:	0e5b      	lsrs	r3, r3, #25
 8018e86:	009b      	lsls	r3, r3, #2
 8018e88:	f003 0304 	and.w	r3, r3, #4
 8018e8c:	4413      	add	r3, r2
 8018e8e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8018e90:	697b      	ldr	r3, [r7, #20]
 8018e92:	681a      	ldr	r2, [r3, #0]
 8018e94:	68bb      	ldr	r3, [r7, #8]
 8018e96:	0d1b      	lsrs	r3, r3, #20
 8018e98:	f003 031f 	and.w	r3, r3, #31
 8018e9c:	2107      	movs	r1, #7
 8018e9e:	fa01 f303 	lsl.w	r3, r1, r3
 8018ea2:	43db      	mvns	r3, r3
 8018ea4:	401a      	ands	r2, r3
 8018ea6:	68bb      	ldr	r3, [r7, #8]
 8018ea8:	0d1b      	lsrs	r3, r3, #20
 8018eaa:	f003 031f 	and.w	r3, r3, #31
 8018eae:	6879      	ldr	r1, [r7, #4]
 8018eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8018eb4:	431a      	orrs	r2, r3
 8018eb6:	697b      	ldr	r3, [r7, #20]
 8018eb8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8018eba:	bf00      	nop
 8018ebc:	371c      	adds	r7, #28
 8018ebe:	46bd      	mov	sp, r7
 8018ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ec4:	4770      	bx	lr
	...

08018ec8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8018ec8:	b480      	push	{r7}
 8018eca:	b085      	sub	sp, #20
 8018ecc:	af00      	add	r7, sp, #0
 8018ece:	60f8      	str	r0, [r7, #12]
 8018ed0:	60b9      	str	r1, [r7, #8]
 8018ed2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	4a0f      	ldr	r2, [pc, #60]	; (8018f14 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8018ed8:	4293      	cmp	r3, r2
 8018eda:	d10a      	bne.n	8018ef2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018ee2:	68bb      	ldr	r3, [r7, #8]
 8018ee4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018ee8:	431a      	orrs	r2, r3
 8018eea:	68fb      	ldr	r3, [r7, #12]
 8018eec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8018ef0:	e00a      	b.n	8018f08 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8018ef8:	68bb      	ldr	r3, [r7, #8]
 8018efa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8018efe:	43db      	mvns	r3, r3
 8018f00:	401a      	ands	r2, r3
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8018f08:	bf00      	nop
 8018f0a:	3714      	adds	r7, #20
 8018f0c:	46bd      	mov	sp, r7
 8018f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f12:	4770      	bx	lr
 8018f14:	407f0000 	.word	0x407f0000

08018f18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018f18:	b480      	push	{r7}
 8018f1a:	b083      	sub	sp, #12
 8018f1c:	af00      	add	r7, sp, #0
 8018f1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	689b      	ldr	r3, [r3, #8]
 8018f24:	f003 031f 	and.w	r3, r3, #31
}
 8018f28:	4618      	mov	r0, r3
 8018f2a:	370c      	adds	r7, #12
 8018f2c:	46bd      	mov	sp, r7
 8018f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f32:	4770      	bx	lr

08018f34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8018f34:	b480      	push	{r7}
 8018f36:	b083      	sub	sp, #12
 8018f38:	af00      	add	r7, sp, #0
 8018f3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	689b      	ldr	r3, [r3, #8]
 8018f40:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8018f44:	4618      	mov	r0, r3
 8018f46:	370c      	adds	r7, #12
 8018f48:	46bd      	mov	sp, r7
 8018f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4e:	4770      	bx	lr

08018f50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8018f50:	b480      	push	{r7}
 8018f52:	b083      	sub	sp, #12
 8018f54:	af00      	add	r7, sp, #0
 8018f56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	689b      	ldr	r3, [r3, #8]
 8018f5c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8018f60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018f64:	687a      	ldr	r2, [r7, #4]
 8018f66:	6093      	str	r3, [r2, #8]
}
 8018f68:	bf00      	nop
 8018f6a:	370c      	adds	r7, #12
 8018f6c:	46bd      	mov	sp, r7
 8018f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f72:	4770      	bx	lr

08018f74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8018f74:	b480      	push	{r7}
 8018f76:	b083      	sub	sp, #12
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	689b      	ldr	r3, [r3, #8]
 8018f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8018f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8018f88:	d101      	bne.n	8018f8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8018f8a:	2301      	movs	r3, #1
 8018f8c:	e000      	b.n	8018f90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8018f8e:	2300      	movs	r3, #0
}
 8018f90:	4618      	mov	r0, r3
 8018f92:	370c      	adds	r7, #12
 8018f94:	46bd      	mov	sp, r7
 8018f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f9a:	4770      	bx	lr

08018f9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8018f9c:	b480      	push	{r7}
 8018f9e:	b083      	sub	sp, #12
 8018fa0:	af00      	add	r7, sp, #0
 8018fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	689b      	ldr	r3, [r3, #8]
 8018fa8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8018fac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8018fb0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8018fb8:	bf00      	nop
 8018fba:	370c      	adds	r7, #12
 8018fbc:	46bd      	mov	sp, r7
 8018fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fc2:	4770      	bx	lr

08018fc4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8018fc4:	b480      	push	{r7}
 8018fc6:	b083      	sub	sp, #12
 8018fc8:	af00      	add	r7, sp, #0
 8018fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	689b      	ldr	r3, [r3, #8]
 8018fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8018fd8:	d101      	bne.n	8018fde <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8018fda:	2301      	movs	r3, #1
 8018fdc:	e000      	b.n	8018fe0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8018fde:	2300      	movs	r3, #0
}
 8018fe0:	4618      	mov	r0, r3
 8018fe2:	370c      	adds	r7, #12
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fea:	4770      	bx	lr

08018fec <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8018fec:	b480      	push	{r7}
 8018fee:	b083      	sub	sp, #12
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	689b      	ldr	r3, [r3, #8]
 8018ff8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018ffc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019000:	f043 0201 	orr.w	r2, r3, #1
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8019008:	bf00      	nop
 801900a:	370c      	adds	r7, #12
 801900c:	46bd      	mov	sp, r7
 801900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019012:	4770      	bx	lr

08019014 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8019014:	b480      	push	{r7}
 8019016:	b083      	sub	sp, #12
 8019018:	af00      	add	r7, sp, #0
 801901a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801901c:	687b      	ldr	r3, [r7, #4]
 801901e:	689b      	ldr	r3, [r3, #8]
 8019020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019028:	f043 0202 	orr.w	r2, r3, #2
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8019030:	bf00      	nop
 8019032:	370c      	adds	r7, #12
 8019034:	46bd      	mov	sp, r7
 8019036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801903a:	4770      	bx	lr

0801903c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801903c:	b480      	push	{r7}
 801903e:	b083      	sub	sp, #12
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	689b      	ldr	r3, [r3, #8]
 8019048:	f003 0301 	and.w	r3, r3, #1
 801904c:	2b01      	cmp	r3, #1
 801904e:	d101      	bne.n	8019054 <LL_ADC_IsEnabled+0x18>
 8019050:	2301      	movs	r3, #1
 8019052:	e000      	b.n	8019056 <LL_ADC_IsEnabled+0x1a>
 8019054:	2300      	movs	r3, #0
}
 8019056:	4618      	mov	r0, r3
 8019058:	370c      	adds	r7, #12
 801905a:	46bd      	mov	sp, r7
 801905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019060:	4770      	bx	lr

08019062 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8019062:	b480      	push	{r7}
 8019064:	b083      	sub	sp, #12
 8019066:	af00      	add	r7, sp, #0
 8019068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 801906a:	687b      	ldr	r3, [r7, #4]
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	f003 0302 	and.w	r3, r3, #2
 8019072:	2b02      	cmp	r3, #2
 8019074:	d101      	bne.n	801907a <LL_ADC_IsDisableOngoing+0x18>
 8019076:	2301      	movs	r3, #1
 8019078:	e000      	b.n	801907c <LL_ADC_IsDisableOngoing+0x1a>
 801907a:	2300      	movs	r3, #0
}
 801907c:	4618      	mov	r0, r3
 801907e:	370c      	adds	r7, #12
 8019080:	46bd      	mov	sp, r7
 8019082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019086:	4770      	bx	lr

08019088 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8019088:	b480      	push	{r7}
 801908a:	b083      	sub	sp, #12
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	689b      	ldr	r3, [r3, #8]
 8019094:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019098:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801909c:	f043 0204 	orr.w	r2, r3, #4
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80190a4:	bf00      	nop
 80190a6:	370c      	adds	r7, #12
 80190a8:	46bd      	mov	sp, r7
 80190aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190ae:	4770      	bx	lr

080190b0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80190b0:	b480      	push	{r7}
 80190b2:	b083      	sub	sp, #12
 80190b4:	af00      	add	r7, sp, #0
 80190b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	689b      	ldr	r3, [r3, #8]
 80190bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80190c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80190c4:	f043 0210 	orr.w	r2, r3, #16
 80190c8:	687b      	ldr	r3, [r7, #4]
 80190ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80190cc:	bf00      	nop
 80190ce:	370c      	adds	r7, #12
 80190d0:	46bd      	mov	sp, r7
 80190d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d6:	4770      	bx	lr

080190d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80190d8:	b480      	push	{r7}
 80190da:	b083      	sub	sp, #12
 80190dc:	af00      	add	r7, sp, #0
 80190de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	689b      	ldr	r3, [r3, #8]
 80190e4:	f003 0304 	and.w	r3, r3, #4
 80190e8:	2b04      	cmp	r3, #4
 80190ea:	d101      	bne.n	80190f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80190ec:	2301      	movs	r3, #1
 80190ee:	e000      	b.n	80190f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80190f0:	2300      	movs	r3, #0
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	370c      	adds	r7, #12
 80190f6:	46bd      	mov	sp, r7
 80190f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fc:	4770      	bx	lr

080190fe <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80190fe:	b480      	push	{r7}
 8019100:	b083      	sub	sp, #12
 8019102:	af00      	add	r7, sp, #0
 8019104:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	689b      	ldr	r3, [r3, #8]
 801910a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801910e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8019112:	f043 0220 	orr.w	r2, r3, #32
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 801911a:	bf00      	nop
 801911c:	370c      	adds	r7, #12
 801911e:	46bd      	mov	sp, r7
 8019120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019124:	4770      	bx	lr

08019126 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8019126:	b480      	push	{r7}
 8019128:	b083      	sub	sp, #12
 801912a:	af00      	add	r7, sp, #0
 801912c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	689b      	ldr	r3, [r3, #8]
 8019132:	f003 0308 	and.w	r3, r3, #8
 8019136:	2b08      	cmp	r3, #8
 8019138:	d101      	bne.n	801913e <LL_ADC_INJ_IsConversionOngoing+0x18>
 801913a:	2301      	movs	r3, #1
 801913c:	e000      	b.n	8019140 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801913e:	2300      	movs	r3, #0
}
 8019140:	4618      	mov	r0, r3
 8019142:	370c      	adds	r7, #12
 8019144:	46bd      	mov	sp, r7
 8019146:	f85d 7b04 	ldr.w	r7, [sp], #4
 801914a:	4770      	bx	lr

0801914c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 801914c:	b590      	push	{r4, r7, lr}
 801914e:	b089      	sub	sp, #36	; 0x24
 8019150:	af00      	add	r7, sp, #0
 8019152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019154:	2300      	movs	r3, #0
 8019156:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8019158:	2300      	movs	r3, #0
 801915a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d101      	bne.n	8019166 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8019162:	2301      	movs	r3, #1
 8019164:	e1a1      	b.n	80194aa <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	695b      	ldr	r3, [r3, #20]
 801916a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019170:	2b00      	cmp	r3, #0
 8019172:	d109      	bne.n	8019188 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8019174:	6878      	ldr	r0, [r7, #4]
 8019176:	f7ee ffdf 	bl	8008138 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2200      	movs	r2, #0
 801917e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2200      	movs	r2, #0
 8019184:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	681b      	ldr	r3, [r3, #0]
 801918c:	4618      	mov	r0, r3
 801918e:	f7ff fef1 	bl	8018f74 <LL_ADC_IsDeepPowerDownEnabled>
 8019192:	4603      	mov	r3, r0
 8019194:	2b00      	cmp	r3, #0
 8019196:	d004      	beq.n	80191a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	4618      	mov	r0, r3
 801919e:	f7ff fed7 	bl	8018f50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	4618      	mov	r0, r3
 80191a8:	f7ff ff0c 	bl	8018fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80191ac:	4603      	mov	r3, r0
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d115      	bne.n	80191de <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	4618      	mov	r0, r3
 80191b8:	f7ff fef0 	bl	8018f9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80191bc:	4b9a      	ldr	r3, [pc, #616]	; (8019428 <HAL_ADC_Init+0x2dc>)
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	099b      	lsrs	r3, r3, #6
 80191c2:	4a9a      	ldr	r2, [pc, #616]	; (801942c <HAL_ADC_Init+0x2e0>)
 80191c4:	fba2 2303 	umull	r2, r3, r2, r3
 80191c8:	099b      	lsrs	r3, r3, #6
 80191ca:	3301      	adds	r3, #1
 80191cc:	005b      	lsls	r3, r3, #1
 80191ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80191d0:	e002      	b.n	80191d8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80191d2:	68bb      	ldr	r3, [r7, #8]
 80191d4:	3b01      	subs	r3, #1
 80191d6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80191d8:	68bb      	ldr	r3, [r7, #8]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d1f9      	bne.n	80191d2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	681b      	ldr	r3, [r3, #0]
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7ff feee 	bl	8018fc4 <LL_ADC_IsInternalRegulatorEnabled>
 80191e8:	4603      	mov	r3, r0
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d10d      	bne.n	801920a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80191ee:	687b      	ldr	r3, [r7, #4]
 80191f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191f2:	f043 0210 	orr.w	r2, r3, #16
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80191fa:	687b      	ldr	r3, [r7, #4]
 80191fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80191fe:	f043 0201 	orr.w	r2, r3, #1
 8019202:	687b      	ldr	r3, [r7, #4]
 8019204:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8019206:	2301      	movs	r3, #1
 8019208:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4618      	mov	r0, r3
 8019210:	f7ff ff62 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 8019214:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019216:	687b      	ldr	r3, [r7, #4]
 8019218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801921a:	f003 0310 	and.w	r3, r3, #16
 801921e:	2b00      	cmp	r3, #0
 8019220:	f040 813a 	bne.w	8019498 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8019224:	697b      	ldr	r3, [r7, #20]
 8019226:	2b00      	cmp	r3, #0
 8019228:	f040 8136 	bne.w	8019498 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019230:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8019234:	f043 0202 	orr.w	r2, r3, #2
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	4618      	mov	r0, r3
 8019242:	f7ff fefb 	bl	801903c <LL_ADC_IsEnabled>
 8019246:	4603      	mov	r3, r0
 8019248:	2b00      	cmp	r3, #0
 801924a:	d137      	bne.n	80192bc <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	681b      	ldr	r3, [r3, #0]
 8019250:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019254:	d004      	beq.n	8019260 <HAL_ADC_Init+0x114>
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	4a75      	ldr	r2, [pc, #468]	; (8019430 <HAL_ADC_Init+0x2e4>)
 801925c:	4293      	cmp	r3, r2
 801925e:	d10f      	bne.n	8019280 <HAL_ADC_Init+0x134>
 8019260:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8019264:	f7ff feea 	bl	801903c <LL_ADC_IsEnabled>
 8019268:	4604      	mov	r4, r0
 801926a:	4871      	ldr	r0, [pc, #452]	; (8019430 <HAL_ADC_Init+0x2e4>)
 801926c:	f7ff fee6 	bl	801903c <LL_ADC_IsEnabled>
 8019270:	4603      	mov	r3, r0
 8019272:	4323      	orrs	r3, r4
 8019274:	2b00      	cmp	r3, #0
 8019276:	bf0c      	ite	eq
 8019278:	2301      	moveq	r3, #1
 801927a:	2300      	movne	r3, #0
 801927c:	b2db      	uxtb	r3, r3
 801927e:	e008      	b.n	8019292 <HAL_ADC_Init+0x146>
 8019280:	486c      	ldr	r0, [pc, #432]	; (8019434 <HAL_ADC_Init+0x2e8>)
 8019282:	f7ff fedb 	bl	801903c <LL_ADC_IsEnabled>
 8019286:	4603      	mov	r3, r0
 8019288:	2b00      	cmp	r3, #0
 801928a:	bf0c      	ite	eq
 801928c:	2301      	moveq	r3, #1
 801928e:	2300      	movne	r3, #0
 8019290:	b2db      	uxtb	r3, r3
 8019292:	2b00      	cmp	r3, #0
 8019294:	d012      	beq.n	80192bc <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681b      	ldr	r3, [r3, #0]
 801929a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801929e:	d004      	beq.n	80192aa <HAL_ADC_Init+0x15e>
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	4a62      	ldr	r2, [pc, #392]	; (8019430 <HAL_ADC_Init+0x2e4>)
 80192a6:	4293      	cmp	r3, r2
 80192a8:	d101      	bne.n	80192ae <HAL_ADC_Init+0x162>
 80192aa:	4a63      	ldr	r2, [pc, #396]	; (8019438 <HAL_ADC_Init+0x2ec>)
 80192ac:	e000      	b.n	80192b0 <HAL_ADC_Init+0x164>
 80192ae:	4a63      	ldr	r2, [pc, #396]	; (801943c <HAL_ADC_Init+0x2f0>)
 80192b0:	687b      	ldr	r3, [r7, #4]
 80192b2:	685b      	ldr	r3, [r3, #4]
 80192b4:	4619      	mov	r1, r3
 80192b6:	4610      	mov	r0, r2
 80192b8:	f7ff fcb6 	bl	8018c28 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	7f5b      	ldrb	r3, [r3, #29]
 80192c0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80192c6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80192cc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80192d2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80192da:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80192dc:	4313      	orrs	r3, r2
 80192de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d106      	bne.n	80192f8 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80192ee:	3b01      	subs	r3, #1
 80192f0:	045b      	lsls	r3, r3, #17
 80192f2:	69ba      	ldr	r2, [r7, #24]
 80192f4:	4313      	orrs	r3, r2
 80192f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80192fc:	2b00      	cmp	r3, #0
 80192fe:	d009      	beq.n	8019314 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019304:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801930c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801930e:	69ba      	ldr	r2, [r7, #24]
 8019310:	4313      	orrs	r3, r2
 8019312:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	68da      	ldr	r2, [r3, #12]
 801931a:	4b49      	ldr	r3, [pc, #292]	; (8019440 <HAL_ADC_Init+0x2f4>)
 801931c:	4013      	ands	r3, r2
 801931e:	687a      	ldr	r2, [r7, #4]
 8019320:	6812      	ldr	r2, [r2, #0]
 8019322:	69b9      	ldr	r1, [r7, #24]
 8019324:	430b      	orrs	r3, r1
 8019326:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	691b      	ldr	r3, [r3, #16]
 801932e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	430a      	orrs	r2, r1
 801933c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801933e:	687b      	ldr	r3, [r7, #4]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	4618      	mov	r0, r3
 8019344:	f7ff fec8 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 8019348:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	4618      	mov	r0, r3
 8019350:	f7ff fee9 	bl	8019126 <LL_ADC_INJ_IsConversionOngoing>
 8019354:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8019356:	693b      	ldr	r3, [r7, #16]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d17b      	bne.n	8019454 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	2b00      	cmp	r3, #0
 8019360:	d178      	bne.n	8019454 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019366:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801936e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8019370:	4313      	orrs	r3, r2
 8019372:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	68db      	ldr	r3, [r3, #12]
 801937a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801937e:	f023 0302 	bic.w	r3, r3, #2
 8019382:	687a      	ldr	r2, [r7, #4]
 8019384:	6812      	ldr	r2, [r2, #0]
 8019386:	69b9      	ldr	r1, [r7, #24]
 8019388:	430b      	orrs	r3, r1
 801938a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	691b      	ldr	r3, [r3, #16]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d017      	beq.n	80193c4 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	691a      	ldr	r2, [r3, #16]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80193a2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80193ac:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80193b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80193b4:	687a      	ldr	r2, [r7, #4]
 80193b6:	6911      	ldr	r1, [r2, #16]
 80193b8:	687a      	ldr	r2, [r7, #4]
 80193ba:	6812      	ldr	r2, [r2, #0]
 80193bc:	430b      	orrs	r3, r1
 80193be:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80193c2:	e013      	b.n	80193ec <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	691a      	ldr	r2, [r3, #16]
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80193d2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80193dc:	687a      	ldr	r2, [r7, #4]
 80193de:	6812      	ldr	r2, [r2, #0]
 80193e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80193e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80193e8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d126      	bne.n	8019444 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	681b      	ldr	r3, [r3, #0]
 80193fa:	691b      	ldr	r3, [r3, #16]
 80193fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8019400:	f023 0304 	bic.w	r3, r3, #4
 8019404:	687a      	ldr	r2, [r7, #4]
 8019406:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8019408:	687a      	ldr	r2, [r7, #4]
 801940a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801940c:	4311      	orrs	r1, r2
 801940e:	687a      	ldr	r2, [r7, #4]
 8019410:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8019412:	4311      	orrs	r1, r2
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8019418:	430a      	orrs	r2, r1
 801941a:	431a      	orrs	r2, r3
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	f042 0201 	orr.w	r2, r2, #1
 8019424:	611a      	str	r2, [r3, #16]
 8019426:	e015      	b.n	8019454 <HAL_ADC_Init+0x308>
 8019428:	20000000 	.word	0x20000000
 801942c:	053e2d63 	.word	0x053e2d63
 8019430:	50000100 	.word	0x50000100
 8019434:	50000400 	.word	0x50000400
 8019438:	50000300 	.word	0x50000300
 801943c:	50000700 	.word	0x50000700
 8019440:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	681b      	ldr	r3, [r3, #0]
 8019448:	691a      	ldr	r2, [r3, #16]
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	681b      	ldr	r3, [r3, #0]
 801944e:	f022 0201 	bic.w	r2, r2, #1
 8019452:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	695b      	ldr	r3, [r3, #20]
 8019458:	2b01      	cmp	r3, #1
 801945a:	d10c      	bne.n	8019476 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	681b      	ldr	r3, [r3, #0]
 8019460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019462:	f023 010f 	bic.w	r1, r3, #15
 8019466:	687b      	ldr	r3, [r7, #4]
 8019468:	6a1b      	ldr	r3, [r3, #32]
 801946a:	1e5a      	subs	r2, r3, #1
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	430a      	orrs	r2, r1
 8019472:	631a      	str	r2, [r3, #48]	; 0x30
 8019474:	e007      	b.n	8019486 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	f022 020f 	bic.w	r2, r2, #15
 8019484:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801948a:	f023 0303 	bic.w	r3, r3, #3
 801948e:	f043 0201 	orr.w	r2, r3, #1
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	65da      	str	r2, [r3, #92]	; 0x5c
 8019496:	e007      	b.n	80194a8 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801949c:	f043 0210 	orr.w	r2, r3, #16
 80194a0:	687b      	ldr	r3, [r7, #4]
 80194a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80194a4:	2301      	movs	r3, #1
 80194a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80194a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80194aa:	4618      	mov	r0, r3
 80194ac:	3724      	adds	r7, #36	; 0x24
 80194ae:	46bd      	mov	sp, r7
 80194b0:	bd90      	pop	{r4, r7, pc}
 80194b2:	bf00      	nop

080194b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80194b4:	b580      	push	{r7, lr}
 80194b6:	b086      	sub	sp, #24
 80194b8:	af00      	add	r7, sp, #0
 80194ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80194c4:	d004      	beq.n	80194d0 <HAL_ADC_Start+0x1c>
 80194c6:	687b      	ldr	r3, [r7, #4]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	4a5c      	ldr	r2, [pc, #368]	; (801963c <HAL_ADC_Start+0x188>)
 80194cc:	4293      	cmp	r3, r2
 80194ce:	d101      	bne.n	80194d4 <HAL_ADC_Start+0x20>
 80194d0:	4b5b      	ldr	r3, [pc, #364]	; (8019640 <HAL_ADC_Start+0x18c>)
 80194d2:	e000      	b.n	80194d6 <HAL_ADC_Start+0x22>
 80194d4:	4b5b      	ldr	r3, [pc, #364]	; (8019644 <HAL_ADC_Start+0x190>)
 80194d6:	4618      	mov	r0, r3
 80194d8:	f7ff fd1e 	bl	8018f18 <LL_ADC_GetMultimode>
 80194dc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80194de:	687b      	ldr	r3, [r7, #4]
 80194e0:	681b      	ldr	r3, [r3, #0]
 80194e2:	4618      	mov	r0, r3
 80194e4:	f7ff fdf8 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 80194e8:	4603      	mov	r3, r0
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	f040 809f 	bne.w	801962e <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80194f6:	2b01      	cmp	r3, #1
 80194f8:	d101      	bne.n	80194fe <HAL_ADC_Start+0x4a>
 80194fa:	2302      	movs	r3, #2
 80194fc:	e09a      	b.n	8019634 <HAL_ADC_Start+0x180>
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	2201      	movs	r2, #1
 8019502:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8019506:	6878      	ldr	r0, [r7, #4]
 8019508:	f001 fa3e 	bl	801a988 <ADC_Enable>
 801950c:	4603      	mov	r3, r0
 801950e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8019510:	7dfb      	ldrb	r3, [r7, #23]
 8019512:	2b00      	cmp	r3, #0
 8019514:	f040 8086 	bne.w	8019624 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801951c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019520:	f023 0301 	bic.w	r3, r3, #1
 8019524:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	681b      	ldr	r3, [r3, #0]
 8019530:	4a42      	ldr	r2, [pc, #264]	; (801963c <HAL_ADC_Start+0x188>)
 8019532:	4293      	cmp	r3, r2
 8019534:	d002      	beq.n	801953c <HAL_ADC_Start+0x88>
 8019536:	687b      	ldr	r3, [r7, #4]
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	e001      	b.n	8019540 <HAL_ADC_Start+0x8c>
 801953c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019540:	687a      	ldr	r2, [r7, #4]
 8019542:	6812      	ldr	r2, [r2, #0]
 8019544:	4293      	cmp	r3, r2
 8019546:	d002      	beq.n	801954e <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019548:	693b      	ldr	r3, [r7, #16]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d105      	bne.n	801955a <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 801954e:	687b      	ldr	r3, [r7, #4]
 8019550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019552:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801955e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8019566:	d106      	bne.n	8019576 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801956c:	f023 0206 	bic.w	r2, r3, #6
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	661a      	str	r2, [r3, #96]	; 0x60
 8019574:	e002      	b.n	801957c <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	2200      	movs	r2, #0
 801957a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	221c      	movs	r2, #28
 8019582:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8019584:	687b      	ldr	r3, [r7, #4]
 8019586:	2200      	movs	r2, #0
 8019588:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	4a2a      	ldr	r2, [pc, #168]	; (801963c <HAL_ADC_Start+0x188>)
 8019592:	4293      	cmp	r3, r2
 8019594:	d002      	beq.n	801959c <HAL_ADC_Start+0xe8>
 8019596:	687b      	ldr	r3, [r7, #4]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	e001      	b.n	80195a0 <HAL_ADC_Start+0xec>
 801959c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80195a0:	687a      	ldr	r2, [r7, #4]
 80195a2:	6812      	ldr	r2, [r2, #0]
 80195a4:	4293      	cmp	r3, r2
 80195a6:	d008      	beq.n	80195ba <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	2b00      	cmp	r3, #0
 80195ac:	d005      	beq.n	80195ba <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80195ae:	693b      	ldr	r3, [r7, #16]
 80195b0:	2b05      	cmp	r3, #5
 80195b2:	d002      	beq.n	80195ba <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	2b09      	cmp	r3, #9
 80195b8:	d114      	bne.n	80195e4 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	68db      	ldr	r3, [r3, #12]
 80195c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d007      	beq.n	80195d8 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80195d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	681b      	ldr	r3, [r3, #0]
 80195dc:	4618      	mov	r0, r3
 80195de:	f7ff fd53 	bl	8019088 <LL_ADC_REG_StartConversion>
 80195e2:	e026      	b.n	8019632 <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80195e8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4a11      	ldr	r2, [pc, #68]	; (801963c <HAL_ADC_Start+0x188>)
 80195f6:	4293      	cmp	r3, r2
 80195f8:	d002      	beq.n	8019600 <HAL_ADC_Start+0x14c>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	e001      	b.n	8019604 <HAL_ADC_Start+0x150>
 8019600:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019604:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	68db      	ldr	r3, [r3, #12]
 801960a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801960e:	2b00      	cmp	r3, #0
 8019610:	d00f      	beq.n	8019632 <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 801961a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	65da      	str	r2, [r3, #92]	; 0x5c
 8019622:	e006      	b.n	8019632 <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	2200      	movs	r2, #0
 8019628:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 801962c:	e001      	b.n	8019632 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 801962e:	2302      	movs	r3, #2
 8019630:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019632:	7dfb      	ldrb	r3, [r7, #23]
}
 8019634:	4618      	mov	r0, r3
 8019636:	3718      	adds	r7, #24
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}
 801963c:	50000100 	.word	0x50000100
 8019640:	50000300 	.word	0x50000300
 8019644:	50000700 	.word	0x50000700

08019648 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b084      	sub	sp, #16
 801964c:	af00      	add	r7, sp, #0
 801964e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019656:	2b01      	cmp	r3, #1
 8019658:	d101      	bne.n	801965e <HAL_ADC_Stop+0x16>
 801965a:	2302      	movs	r3, #2
 801965c:	e023      	b.n	80196a6 <HAL_ADC_Stop+0x5e>
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	2201      	movs	r2, #1
 8019662:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019666:	2103      	movs	r1, #3
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f001 f8d1 	bl	801a810 <ADC_ConversionStop>
 801966e:	4603      	mov	r3, r0
 8019670:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8019672:	7bfb      	ldrb	r3, [r7, #15]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d111      	bne.n	801969c <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8019678:	6878      	ldr	r0, [r7, #4]
 801967a:	f001 f9e7 	bl	801aa4c <ADC_Disable>
 801967e:	4603      	mov	r3, r0
 8019680:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019682:	7bfb      	ldrb	r3, [r7, #15]
 8019684:	2b00      	cmp	r3, #0
 8019686:	d109      	bne.n	801969c <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801968c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019690:	f023 0301 	bic.w	r3, r3, #1
 8019694:	f043 0201 	orr.w	r2, r3, #1
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	2200      	movs	r2, #0
 80196a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80196a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3710      	adds	r7, #16
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}
	...

080196b0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80196b0:	b580      	push	{r7, lr}
 80196b2:	b088      	sub	sp, #32
 80196b4:	af00      	add	r7, sp, #0
 80196b6:	6078      	str	r0, [r7, #4]
 80196b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80196c2:	d004      	beq.n	80196ce <HAL_ADC_PollForConversion+0x1e>
 80196c4:	687b      	ldr	r3, [r7, #4]
 80196c6:	681b      	ldr	r3, [r3, #0]
 80196c8:	4a70      	ldr	r2, [pc, #448]	; (801988c <HAL_ADC_PollForConversion+0x1dc>)
 80196ca:	4293      	cmp	r3, r2
 80196cc:	d101      	bne.n	80196d2 <HAL_ADC_PollForConversion+0x22>
 80196ce:	4b70      	ldr	r3, [pc, #448]	; (8019890 <HAL_ADC_PollForConversion+0x1e0>)
 80196d0:	e000      	b.n	80196d4 <HAL_ADC_PollForConversion+0x24>
 80196d2:	4b70      	ldr	r3, [pc, #448]	; (8019894 <HAL_ADC_PollForConversion+0x1e4>)
 80196d4:	4618      	mov	r0, r3
 80196d6:	f7ff fc1f 	bl	8018f18 <LL_ADC_GetMultimode>
 80196da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	699b      	ldr	r3, [r3, #24]
 80196e0:	2b08      	cmp	r3, #8
 80196e2:	d102      	bne.n	80196ea <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80196e4:	2308      	movs	r3, #8
 80196e6:	61fb      	str	r3, [r7, #28]
 80196e8:	e037      	b.n	801975a <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80196ea:	697b      	ldr	r3, [r7, #20]
 80196ec:	2b00      	cmp	r3, #0
 80196ee:	d005      	beq.n	80196fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80196f0:	697b      	ldr	r3, [r7, #20]
 80196f2:	2b05      	cmp	r3, #5
 80196f4:	d002      	beq.n	80196fc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80196f6:	697b      	ldr	r3, [r7, #20]
 80196f8:	2b09      	cmp	r3, #9
 80196fa:	d111      	bne.n	8019720 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	68db      	ldr	r3, [r3, #12]
 8019702:	f003 0301 	and.w	r3, r3, #1
 8019706:	2b00      	cmp	r3, #0
 8019708:	d007      	beq.n	801971a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801970e:	f043 0220 	orr.w	r2, r3, #32
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8019716:	2301      	movs	r3, #1
 8019718:	e0b3      	b.n	8019882 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 801971a:	2304      	movs	r3, #4
 801971c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 801971e:	e01c      	b.n	801975a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019728:	d004      	beq.n	8019734 <HAL_ADC_PollForConversion+0x84>
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	4a57      	ldr	r2, [pc, #348]	; (801988c <HAL_ADC_PollForConversion+0x1dc>)
 8019730:	4293      	cmp	r3, r2
 8019732:	d101      	bne.n	8019738 <HAL_ADC_PollForConversion+0x88>
 8019734:	4b56      	ldr	r3, [pc, #344]	; (8019890 <HAL_ADC_PollForConversion+0x1e0>)
 8019736:	e000      	b.n	801973a <HAL_ADC_PollForConversion+0x8a>
 8019738:	4b56      	ldr	r3, [pc, #344]	; (8019894 <HAL_ADC_PollForConversion+0x1e4>)
 801973a:	4618      	mov	r0, r3
 801973c:	f7ff fbfa 	bl	8018f34 <LL_ADC_GetMultiDMATransfer>
 8019740:	4603      	mov	r3, r0
 8019742:	2b00      	cmp	r3, #0
 8019744:	d007      	beq.n	8019756 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801974a:	f043 0220 	orr.w	r2, r3, #32
 801974e:	687b      	ldr	r3, [r7, #4]
 8019750:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8019752:	2301      	movs	r3, #1
 8019754:	e095      	b.n	8019882 <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8019756:	2304      	movs	r3, #4
 8019758:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 801975a:	f7ff fa37 	bl	8018bcc <HAL_GetTick>
 801975e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019760:	e021      	b.n	80197a6 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8019762:	683b      	ldr	r3, [r7, #0]
 8019764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019768:	d01d      	beq.n	80197a6 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 801976a:	f7ff fa2f 	bl	8018bcc <HAL_GetTick>
 801976e:	4602      	mov	r2, r0
 8019770:	693b      	ldr	r3, [r7, #16]
 8019772:	1ad3      	subs	r3, r2, r3
 8019774:	683a      	ldr	r2, [r7, #0]
 8019776:	429a      	cmp	r2, r3
 8019778:	d302      	bcc.n	8019780 <HAL_ADC_PollForConversion+0xd0>
 801977a:	683b      	ldr	r3, [r7, #0]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d112      	bne.n	80197a6 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8019780:	687b      	ldr	r3, [r7, #4]
 8019782:	681b      	ldr	r3, [r3, #0]
 8019784:	681a      	ldr	r2, [r3, #0]
 8019786:	69fb      	ldr	r3, [r7, #28]
 8019788:	4013      	ands	r3, r2
 801978a:	2b00      	cmp	r3, #0
 801978c:	d10b      	bne.n	80197a6 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019792:	f043 0204 	orr.w	r2, r3, #4
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	2200      	movs	r2, #0
 801979e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80197a2:	2303      	movs	r3, #3
 80197a4:	e06d      	b.n	8019882 <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	681b      	ldr	r3, [r3, #0]
 80197aa:	681a      	ldr	r2, [r3, #0]
 80197ac:	69fb      	ldr	r3, [r7, #28]
 80197ae:	4013      	ands	r3, r2
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d0d6      	beq.n	8019762 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197b8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	681b      	ldr	r3, [r3, #0]
 80197c4:	4618      	mov	r0, r3
 80197c6:	f7ff fb01 	bl	8018dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 80197ca:	4603      	mov	r3, r0
 80197cc:	2b00      	cmp	r3, #0
 80197ce:	d01c      	beq.n	801980a <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	7f5b      	ldrb	r3, [r3, #29]
 80197d4:	2b00      	cmp	r3, #0
 80197d6:	d118      	bne.n	801980a <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	681b      	ldr	r3, [r3, #0]
 80197dc:	681b      	ldr	r3, [r3, #0]
 80197de:	f003 0308 	and.w	r3, r3, #8
 80197e2:	2b08      	cmp	r3, #8
 80197e4:	d111      	bne.n	801980a <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80197f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d105      	bne.n	801980a <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019802:	f043 0201 	orr.w	r2, r3, #1
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801980a:	687b      	ldr	r3, [r7, #4]
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	4a1f      	ldr	r2, [pc, #124]	; (801988c <HAL_ADC_PollForConversion+0x1dc>)
 8019810:	4293      	cmp	r3, r2
 8019812:	d002      	beq.n	801981a <HAL_ADC_PollForConversion+0x16a>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	e001      	b.n	801981e <HAL_ADC_PollForConversion+0x16e>
 801981a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 801981e:	687a      	ldr	r2, [r7, #4]
 8019820:	6812      	ldr	r2, [r2, #0]
 8019822:	4293      	cmp	r3, r2
 8019824:	d008      	beq.n	8019838 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019826:	697b      	ldr	r3, [r7, #20]
 8019828:	2b00      	cmp	r3, #0
 801982a:	d005      	beq.n	8019838 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 801982c:	697b      	ldr	r3, [r7, #20]
 801982e:	2b05      	cmp	r3, #5
 8019830:	d002      	beq.n	8019838 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019832:	697b      	ldr	r3, [r7, #20]
 8019834:	2b09      	cmp	r3, #9
 8019836:	d104      	bne.n	8019842 <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	68db      	ldr	r3, [r3, #12]
 801983e:	61bb      	str	r3, [r7, #24]
 8019840:	e00d      	b.n	801985e <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	681b      	ldr	r3, [r3, #0]
 8019846:	4a11      	ldr	r2, [pc, #68]	; (801988c <HAL_ADC_PollForConversion+0x1dc>)
 8019848:	4293      	cmp	r3, r2
 801984a:	d002      	beq.n	8019852 <HAL_ADC_PollForConversion+0x1a2>
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	e001      	b.n	8019856 <HAL_ADC_PollForConversion+0x1a6>
 8019852:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019856:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	68db      	ldr	r3, [r3, #12]
 801985c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 801985e:	69fb      	ldr	r3, [r7, #28]
 8019860:	2b08      	cmp	r3, #8
 8019862:	d104      	bne.n	801986e <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	2208      	movs	r2, #8
 801986a:	601a      	str	r2, [r3, #0]
 801986c:	e008      	b.n	8019880 <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 801986e:	69bb      	ldr	r3, [r7, #24]
 8019870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019874:	2b00      	cmp	r3, #0
 8019876:	d103      	bne.n	8019880 <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	681b      	ldr	r3, [r3, #0]
 801987c:	220c      	movs	r2, #12
 801987e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	3720      	adds	r7, #32
 8019886:	46bd      	mov	sp, r7
 8019888:	bd80      	pop	{r7, pc}
 801988a:	bf00      	nop
 801988c:	50000100 	.word	0x50000100
 8019890:	50000300 	.word	0x50000300
 8019894:	50000700 	.word	0x50000700

08019898 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b086      	sub	sp, #24
 801989c:	af00      	add	r7, sp, #0
 801989e:	60f8      	str	r0, [r7, #12]
 80198a0:	60b9      	str	r1, [r7, #8]
 80198a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681b      	ldr	r3, [r3, #0]
 80198a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80198ac:	d004      	beq.n	80198b8 <HAL_ADC_Start_DMA+0x20>
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	4a57      	ldr	r2, [pc, #348]	; (8019a10 <HAL_ADC_Start_DMA+0x178>)
 80198b4:	4293      	cmp	r3, r2
 80198b6:	d101      	bne.n	80198bc <HAL_ADC_Start_DMA+0x24>
 80198b8:	4b56      	ldr	r3, [pc, #344]	; (8019a14 <HAL_ADC_Start_DMA+0x17c>)
 80198ba:	e000      	b.n	80198be <HAL_ADC_Start_DMA+0x26>
 80198bc:	4b56      	ldr	r3, [pc, #344]	; (8019a18 <HAL_ADC_Start_DMA+0x180>)
 80198be:	4618      	mov	r0, r3
 80198c0:	f7ff fb2a 	bl	8018f18 <LL_ADC_GetMultimode>
 80198c4:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80198c6:	68fb      	ldr	r3, [r7, #12]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7ff fc04 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 80198d0:	4603      	mov	r3, r0
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	f040 8094 	bne.w	8019a00 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80198d8:	68fb      	ldr	r3, [r7, #12]
 80198da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d101      	bne.n	80198e6 <HAL_ADC_Start_DMA+0x4e>
 80198e2:	2302      	movs	r3, #2
 80198e4:	e08f      	b.n	8019a06 <HAL_ADC_Start_DMA+0x16e>
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	2201      	movs	r2, #1
 80198ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	4a4a      	ldr	r2, [pc, #296]	; (8019a1c <HAL_ADC_Start_DMA+0x184>)
 80198f4:	4293      	cmp	r3, r2
 80198f6:	d008      	beq.n	801990a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80198f8:	693b      	ldr	r3, [r7, #16]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d005      	beq.n	801990a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80198fe:	693b      	ldr	r3, [r7, #16]
 8019900:	2b05      	cmp	r3, #5
 8019902:	d002      	beq.n	801990a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019904:	693b      	ldr	r3, [r7, #16]
 8019906:	2b09      	cmp	r3, #9
 8019908:	d173      	bne.n	80199f2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 801990a:	68f8      	ldr	r0, [r7, #12]
 801990c:	f001 f83c 	bl	801a988 <ADC_Enable>
 8019910:	4603      	mov	r3, r0
 8019912:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8019914:	7dfb      	ldrb	r3, [r7, #23]
 8019916:	2b00      	cmp	r3, #0
 8019918:	d166      	bne.n	80199e8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 801991a:	68fb      	ldr	r3, [r7, #12]
 801991c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801991e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8019922:	f023 0301 	bic.w	r3, r3, #1
 8019926:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 801992a:	68fb      	ldr	r3, [r7, #12]
 801992c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	4a37      	ldr	r2, [pc, #220]	; (8019a10 <HAL_ADC_Start_DMA+0x178>)
 8019934:	4293      	cmp	r3, r2
 8019936:	d002      	beq.n	801993e <HAL_ADC_Start_DMA+0xa6>
 8019938:	68fb      	ldr	r3, [r7, #12]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	e001      	b.n	8019942 <HAL_ADC_Start_DMA+0xaa>
 801993e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019942:	68fa      	ldr	r2, [r7, #12]
 8019944:	6812      	ldr	r2, [r2, #0]
 8019946:	4293      	cmp	r3, r2
 8019948:	d002      	beq.n	8019950 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801994a:	693b      	ldr	r3, [r7, #16]
 801994c:	2b00      	cmp	r3, #0
 801994e:	d105      	bne.n	801995c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019954:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8019958:	68fb      	ldr	r3, [r7, #12]
 801995a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019960:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019964:	2b00      	cmp	r3, #0
 8019966:	d006      	beq.n	8019976 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801996c:	f023 0206 	bic.w	r2, r3, #6
 8019970:	68fb      	ldr	r3, [r7, #12]
 8019972:	661a      	str	r2, [r3, #96]	; 0x60
 8019974:	e002      	b.n	801997c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2200      	movs	r2, #0
 801997a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019980:	4a27      	ldr	r2, [pc, #156]	; (8019a20 <HAL_ADC_Start_DMA+0x188>)
 8019982:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019988:	4a26      	ldr	r2, [pc, #152]	; (8019a24 <HAL_ADC_Start_DMA+0x18c>)
 801998a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019990:	4a25      	ldr	r2, [pc, #148]	; (8019a28 <HAL_ADC_Start_DMA+0x190>)
 8019992:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8019994:	68fb      	ldr	r3, [r7, #12]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	221c      	movs	r2, #28
 801999a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 801999c:	68fb      	ldr	r3, [r7, #12]
 801999e:	2200      	movs	r2, #0
 80199a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80199a4:	68fb      	ldr	r3, [r7, #12]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	685a      	ldr	r2, [r3, #4]
 80199aa:	68fb      	ldr	r3, [r7, #12]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f042 0210 	orr.w	r2, r2, #16
 80199b2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	68da      	ldr	r2, [r3, #12]
 80199ba:	68fb      	ldr	r3, [r7, #12]
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	f042 0201 	orr.w	r2, r2, #1
 80199c2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80199c8:	68fb      	ldr	r3, [r7, #12]
 80199ca:	681b      	ldr	r3, [r3, #0]
 80199cc:	3340      	adds	r3, #64	; 0x40
 80199ce:	4619      	mov	r1, r3
 80199d0:	68ba      	ldr	r2, [r7, #8]
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	f001 fcb4 	bl	801b340 <HAL_DMA_Start_IT>
 80199d8:	4603      	mov	r3, r0
 80199da:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	4618      	mov	r0, r3
 80199e2:	f7ff fb51 	bl	8019088 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80199e6:	e00d      	b.n	8019a04 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	2200      	movs	r2, #0
 80199ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80199f0:	e008      	b.n	8019a04 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80199f2:	2301      	movs	r3, #1
 80199f4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	2200      	movs	r2, #0
 80199fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80199fe:	e001      	b.n	8019a04 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8019a00:	2302      	movs	r3, #2
 8019a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8019a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8019a06:	4618      	mov	r0, r3
 8019a08:	3718      	adds	r7, #24
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	bd80      	pop	{r7, pc}
 8019a0e:	bf00      	nop
 8019a10:	50000100 	.word	0x50000100
 8019a14:	50000300 	.word	0x50000300
 8019a18:	50000700 	.word	0x50000700
 8019a1c:	50000400 	.word	0x50000400
 8019a20:	0801ab0b 	.word	0x0801ab0b
 8019a24:	0801abe3 	.word	0x0801abe3
 8019a28:	0801abff 	.word	0x0801abff

08019a2c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b084      	sub	sp, #16
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019a3a:	2b01      	cmp	r3, #1
 8019a3c:	d101      	bne.n	8019a42 <HAL_ADC_Stop_DMA+0x16>
 8019a3e:	2302      	movs	r3, #2
 8019a40:	e051      	b.n	8019ae6 <HAL_ADC_Stop_DMA+0xba>
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	2201      	movs	r2, #1
 8019a46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8019a4a:	2103      	movs	r1, #3
 8019a4c:	6878      	ldr	r0, [r7, #4]
 8019a4e:	f000 fedf 	bl	801a810 <ADC_ConversionStop>
 8019a52:	4603      	mov	r3, r0
 8019a54:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8019a56:	7bfb      	ldrb	r3, [r7, #15]
 8019a58:	2b00      	cmp	r3, #0
 8019a5a:	d13f      	bne.n	8019adc <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	68da      	ldr	r2, [r3, #12]
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	681b      	ldr	r3, [r3, #0]
 8019a66:	f022 0201 	bic.w	r2, r2, #1
 8019a6a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8019a74:	b2db      	uxtb	r3, r3
 8019a76:	2b02      	cmp	r3, #2
 8019a78:	d10f      	bne.n	8019a9a <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a7e:	4618      	mov	r0, r3
 8019a80:	f001 fcd9 	bl	801b436 <HAL_DMA_Abort>
 8019a84:	4603      	mov	r3, r0
 8019a86:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8019a88:	7bfb      	ldrb	r3, [r7, #15]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d005      	beq.n	8019a9a <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019a92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	681b      	ldr	r3, [r3, #0]
 8019a9e:	685a      	ldr	r2, [r3, #4]
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	f022 0210 	bic.w	r2, r2, #16
 8019aa8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8019aaa:	7bfb      	ldrb	r3, [r7, #15]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d105      	bne.n	8019abc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8019ab0:	6878      	ldr	r0, [r7, #4]
 8019ab2:	f000 ffcb 	bl	801aa4c <ADC_Disable>
 8019ab6:	4603      	mov	r3, r0
 8019ab8:	73fb      	strb	r3, [r7, #15]
 8019aba:	e002      	b.n	8019ac2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f000 ffc5 	bl	801aa4c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8019ac2:	7bfb      	ldrb	r3, [r7, #15]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d109      	bne.n	8019adc <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8019ad0:	f023 0301 	bic.w	r3, r3, #1
 8019ad4:	f043 0201 	orr.w	r2, r3, #1
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	2200      	movs	r2, #0
 8019ae0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8019ae4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	3710      	adds	r7, #16
 8019aea:	46bd      	mov	sp, r7
 8019aec:	bd80      	pop	{r7, pc}

08019aee <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8019aee:	b480      	push	{r7}
 8019af0:	b083      	sub	sp, #12
 8019af2:	af00      	add	r7, sp, #0
 8019af4:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	681b      	ldr	r3, [r3, #0]
 8019afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8019afc:	4618      	mov	r0, r3
 8019afe:	370c      	adds	r7, #12
 8019b00:	46bd      	mov	sp, r7
 8019b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b06:	4770      	bx	lr

08019b08 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b08a      	sub	sp, #40	; 0x28
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8019b10:	2300      	movs	r3, #0
 8019b12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	681b      	ldr	r3, [r3, #0]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019b2c:	d004      	beq.n	8019b38 <HAL_ADC_IRQHandler+0x30>
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	681b      	ldr	r3, [r3, #0]
 8019b32:	4a87      	ldr	r2, [pc, #540]	; (8019d50 <HAL_ADC_IRQHandler+0x248>)
 8019b34:	4293      	cmp	r3, r2
 8019b36:	d101      	bne.n	8019b3c <HAL_ADC_IRQHandler+0x34>
 8019b38:	4b86      	ldr	r3, [pc, #536]	; (8019d54 <HAL_ADC_IRQHandler+0x24c>)
 8019b3a:	e000      	b.n	8019b3e <HAL_ADC_IRQHandler+0x36>
 8019b3c:	4b86      	ldr	r3, [pc, #536]	; (8019d58 <HAL_ADC_IRQHandler+0x250>)
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7ff f9ea 	bl	8018f18 <LL_ADC_GetMultimode>
 8019b44:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	f003 0302 	and.w	r3, r3, #2
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d017      	beq.n	8019b80 <HAL_ADC_IRQHandler+0x78>
 8019b50:	69bb      	ldr	r3, [r7, #24]
 8019b52:	f003 0302 	and.w	r3, r3, #2
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d012      	beq.n	8019b80 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019b5a:	687b      	ldr	r3, [r7, #4]
 8019b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b5e:	f003 0310 	and.w	r3, r3, #16
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d105      	bne.n	8019b72 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b6a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8019b72:	6878      	ldr	r0, [r7, #4]
 8019b74:	f001 f93a 	bl	801adec <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	2202      	movs	r2, #2
 8019b7e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019b80:	69fb      	ldr	r3, [r7, #28]
 8019b82:	f003 0304 	and.w	r3, r3, #4
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d004      	beq.n	8019b94 <HAL_ADC_IRQHandler+0x8c>
 8019b8a:	69bb      	ldr	r3, [r7, #24]
 8019b8c:	f003 0304 	and.w	r3, r3, #4
 8019b90:	2b00      	cmp	r3, #0
 8019b92:	d10a      	bne.n	8019baa <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019b94:	69fb      	ldr	r3, [r7, #28]
 8019b96:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	f000 8085 	beq.w	8019caa <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8019ba0:	69bb      	ldr	r3, [r7, #24]
 8019ba2:	f003 0308 	and.w	r3, r3, #8
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d07f      	beq.n	8019caa <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bae:	f003 0310 	and.w	r3, r3, #16
 8019bb2:	2b00      	cmp	r3, #0
 8019bb4:	d105      	bne.n	8019bc2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8019bb6:	687b      	ldr	r3, [r7, #4]
 8019bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	f7ff f900 	bl	8018dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d064      	beq.n	8019c9c <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	4a5e      	ldr	r2, [pc, #376]	; (8019d50 <HAL_ADC_IRQHandler+0x248>)
 8019bd8:	4293      	cmp	r3, r2
 8019bda:	d002      	beq.n	8019be2 <HAL_ADC_IRQHandler+0xda>
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	681b      	ldr	r3, [r3, #0]
 8019be0:	e001      	b.n	8019be6 <HAL_ADC_IRQHandler+0xde>
 8019be2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019be6:	687a      	ldr	r2, [r7, #4]
 8019be8:	6812      	ldr	r2, [r2, #0]
 8019bea:	4293      	cmp	r3, r2
 8019bec:	d008      	beq.n	8019c00 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019bee:	697b      	ldr	r3, [r7, #20]
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d005      	beq.n	8019c00 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	2b05      	cmp	r3, #5
 8019bf8:	d002      	beq.n	8019c00 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8019bfa:	697b      	ldr	r3, [r7, #20]
 8019bfc:	2b09      	cmp	r3, #9
 8019bfe:	d104      	bne.n	8019c0a <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	68db      	ldr	r3, [r3, #12]
 8019c06:	623b      	str	r3, [r7, #32]
 8019c08:	e00d      	b.n	8019c26 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	4a50      	ldr	r2, [pc, #320]	; (8019d50 <HAL_ADC_IRQHandler+0x248>)
 8019c10:	4293      	cmp	r3, r2
 8019c12:	d002      	beq.n	8019c1a <HAL_ADC_IRQHandler+0x112>
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	e001      	b.n	8019c1e <HAL_ADC_IRQHandler+0x116>
 8019c1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019c1e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019c20:	693b      	ldr	r3, [r7, #16]
 8019c22:	68db      	ldr	r3, [r3, #12]
 8019c24:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8019c26:	6a3b      	ldr	r3, [r7, #32]
 8019c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019c2c:	2b00      	cmp	r3, #0
 8019c2e:	d135      	bne.n	8019c9c <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	681b      	ldr	r3, [r3, #0]
 8019c34:	681b      	ldr	r3, [r3, #0]
 8019c36:	f003 0308 	and.w	r3, r3, #8
 8019c3a:	2b08      	cmp	r3, #8
 8019c3c:	d12e      	bne.n	8019c9c <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4618      	mov	r0, r3
 8019c44:	f7ff fa48 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 8019c48:	4603      	mov	r3, r0
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d11a      	bne.n	8019c84 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	681b      	ldr	r3, [r3, #0]
 8019c52:	685a      	ldr	r2, [r3, #4]
 8019c54:	687b      	ldr	r3, [r7, #4]
 8019c56:	681b      	ldr	r3, [r3, #0]
 8019c58:	f022 020c 	bic.w	r2, r2, #12
 8019c5c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d112      	bne.n	8019c9c <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c7a:	f043 0201 	orr.w	r2, r3, #1
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	65da      	str	r2, [r3, #92]	; 0x5c
 8019c82:	e00b      	b.n	8019c9c <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c88:	f043 0210 	orr.w	r2, r3, #16
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019c90:	687b      	ldr	r3, [r7, #4]
 8019c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019c94:	f043 0201 	orr.w	r2, r3, #1
 8019c98:	687b      	ldr	r3, [r7, #4]
 8019c9a:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8019c9c:	6878      	ldr	r0, [r7, #4]
 8019c9e:	f7ee faf3 	bl	8008288 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	681b      	ldr	r3, [r3, #0]
 8019ca6:	220c      	movs	r2, #12
 8019ca8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019caa:	69fb      	ldr	r3, [r7, #28]
 8019cac:	f003 0320 	and.w	r3, r3, #32
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d004      	beq.n	8019cbe <HAL_ADC_IRQHandler+0x1b6>
 8019cb4:	69bb      	ldr	r3, [r7, #24]
 8019cb6:	f003 0320 	and.w	r3, r3, #32
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d10b      	bne.n	8019cd6 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019cbe:	69fb      	ldr	r3, [r7, #28]
 8019cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8019cc4:	2b00      	cmp	r3, #0
 8019cc6:	f000 80a1 	beq.w	8019e0c <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8019cca:	69bb      	ldr	r3, [r7, #24]
 8019ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019cd0:	2b00      	cmp	r3, #0
 8019cd2:	f000 809b 	beq.w	8019e0c <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8019cd6:	687b      	ldr	r3, [r7, #4]
 8019cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019cda:	f003 0310 	and.w	r3, r3, #16
 8019cde:	2b00      	cmp	r3, #0
 8019ce0:	d105      	bne.n	8019cee <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ce6:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8019cea:	687b      	ldr	r3, [r7, #4]
 8019cec:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7ff f8a9 	bl	8018e4a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8019cf8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	4618      	mov	r0, r3
 8019d00:	f7ff f864 	bl	8018dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 8019d04:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	4a11      	ldr	r2, [pc, #68]	; (8019d50 <HAL_ADC_IRQHandler+0x248>)
 8019d0c:	4293      	cmp	r3, r2
 8019d0e:	d002      	beq.n	8019d16 <HAL_ADC_IRQHandler+0x20e>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	681b      	ldr	r3, [r3, #0]
 8019d14:	e001      	b.n	8019d1a <HAL_ADC_IRQHandler+0x212>
 8019d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d1a:	687a      	ldr	r2, [r7, #4]
 8019d1c:	6812      	ldr	r2, [r2, #0]
 8019d1e:	4293      	cmp	r3, r2
 8019d20:	d008      	beq.n	8019d34 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8019d22:	697b      	ldr	r3, [r7, #20]
 8019d24:	2b00      	cmp	r3, #0
 8019d26:	d005      	beq.n	8019d34 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8019d28:	697b      	ldr	r3, [r7, #20]
 8019d2a:	2b06      	cmp	r3, #6
 8019d2c:	d002      	beq.n	8019d34 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8019d2e:	697b      	ldr	r3, [r7, #20]
 8019d30:	2b07      	cmp	r3, #7
 8019d32:	d104      	bne.n	8019d3e <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	68db      	ldr	r3, [r3, #12]
 8019d3a:	623b      	str	r3, [r7, #32]
 8019d3c:	e014      	b.n	8019d68 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	4a03      	ldr	r2, [pc, #12]	; (8019d50 <HAL_ADC_IRQHandler+0x248>)
 8019d44:	4293      	cmp	r3, r2
 8019d46:	d009      	beq.n	8019d5c <HAL_ADC_IRQHandler+0x254>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	e008      	b.n	8019d60 <HAL_ADC_IRQHandler+0x258>
 8019d4e:	bf00      	nop
 8019d50:	50000100 	.word	0x50000100
 8019d54:	50000300 	.word	0x50000300
 8019d58:	50000700 	.word	0x50000700
 8019d5c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8019d60:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8019d62:	693b      	ldr	r3, [r7, #16]
 8019d64:	68db      	ldr	r3, [r3, #12]
 8019d66:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d047      	beq.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8019d6e:	6a3b      	ldr	r3, [r7, #32]
 8019d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d007      	beq.n	8019d88 <HAL_ADC_IRQHandler+0x280>
 8019d78:	68bb      	ldr	r3, [r7, #8]
 8019d7a:	2b00      	cmp	r3, #0
 8019d7c:	d03f      	beq.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8019d7e:	6a3b      	ldr	r3, [r7, #32]
 8019d80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d13a      	bne.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	681b      	ldr	r3, [r3, #0]
 8019d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019d92:	2b40      	cmp	r3, #64	; 0x40
 8019d94:	d133      	bne.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8019d96:	6a3b      	ldr	r3, [r7, #32]
 8019d98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019d9c:	2b00      	cmp	r3, #0
 8019d9e:	d12e      	bne.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8019da0:	687b      	ldr	r3, [r7, #4]
 8019da2:	681b      	ldr	r3, [r3, #0]
 8019da4:	4618      	mov	r0, r3
 8019da6:	f7ff f9be 	bl	8019126 <LL_ADC_INJ_IsConversionOngoing>
 8019daa:	4603      	mov	r3, r0
 8019dac:	2b00      	cmp	r3, #0
 8019dae:	d11a      	bne.n	8019de6 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	685a      	ldr	r2, [r3, #4]
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	681b      	ldr	r3, [r3, #0]
 8019dba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8019dbe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dc4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019dd4:	2b00      	cmp	r3, #0
 8019dd6:	d112      	bne.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019ddc:	f043 0201 	orr.w	r2, r3, #1
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	65da      	str	r2, [r3, #92]	; 0x5c
 8019de4:	e00b      	b.n	8019dfe <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019dea:	f043 0210 	orr.w	r2, r3, #16
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019df6:	f043 0201 	orr.w	r2, r3, #1
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f000 ffcc 	bl	801ad9c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	2260      	movs	r2, #96	; 0x60
 8019e0a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8019e0c:	69fb      	ldr	r3, [r7, #28]
 8019e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e12:	2b00      	cmp	r3, #0
 8019e14:	d011      	beq.n	8019e3a <HAL_ADC_IRQHandler+0x332>
 8019e16:	69bb      	ldr	r3, [r7, #24]
 8019e18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019e1c:	2b00      	cmp	r3, #0
 8019e1e:	d00c      	beq.n	8019e3a <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e24:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8019e2c:	6878      	ldr	r0, [r7, #4]
 8019e2e:	f000 f8af 	bl	8019f90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	2280      	movs	r2, #128	; 0x80
 8019e38:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8019e3a:	69fb      	ldr	r3, [r7, #28]
 8019e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e40:	2b00      	cmp	r3, #0
 8019e42:	d012      	beq.n	8019e6a <HAL_ADC_IRQHandler+0x362>
 8019e44:	69bb      	ldr	r3, [r7, #24]
 8019e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019e4a:	2b00      	cmp	r3, #0
 8019e4c:	d00d      	beq.n	8019e6a <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8019e4e:	687b      	ldr	r3, [r7, #4]
 8019e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8019e5a:	6878      	ldr	r0, [r7, #4]
 8019e5c:	f000 ffb2 	bl	801adc4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	681b      	ldr	r3, [r3, #0]
 8019e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019e68:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8019e6a:	69fb      	ldr	r3, [r7, #28]
 8019e6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d012      	beq.n	8019e9a <HAL_ADC_IRQHandler+0x392>
 8019e74:	69bb      	ldr	r3, [r7, #24]
 8019e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d00d      	beq.n	8019e9a <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8019e8a:	6878      	ldr	r0, [r7, #4]
 8019e8c:	f000 ffa4 	bl	801add8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019e98:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8019e9a:	69fb      	ldr	r3, [r7, #28]
 8019e9c:	f003 0310 	and.w	r3, r3, #16
 8019ea0:	2b00      	cmp	r3, #0
 8019ea2:	d043      	beq.n	8019f2c <HAL_ADC_IRQHandler+0x424>
 8019ea4:	69bb      	ldr	r3, [r7, #24]
 8019ea6:	f003 0310 	and.w	r3, r3, #16
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d03e      	beq.n	8019f2c <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d102      	bne.n	8019ebc <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8019eb6:	2301      	movs	r3, #1
 8019eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8019eba:	e021      	b.n	8019f00 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d015      	beq.n	8019eee <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019eca:	d004      	beq.n	8019ed6 <HAL_ADC_IRQHandler+0x3ce>
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	4a27      	ldr	r2, [pc, #156]	; (8019f70 <HAL_ADC_IRQHandler+0x468>)
 8019ed2:	4293      	cmp	r3, r2
 8019ed4:	d101      	bne.n	8019eda <HAL_ADC_IRQHandler+0x3d2>
 8019ed6:	4b27      	ldr	r3, [pc, #156]	; (8019f74 <HAL_ADC_IRQHandler+0x46c>)
 8019ed8:	e000      	b.n	8019edc <HAL_ADC_IRQHandler+0x3d4>
 8019eda:	4b27      	ldr	r3, [pc, #156]	; (8019f78 <HAL_ADC_IRQHandler+0x470>)
 8019edc:	4618      	mov	r0, r3
 8019ede:	f7ff f829 	bl	8018f34 <LL_ADC_GetMultiDMATransfer>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d00b      	beq.n	8019f00 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019ee8:	2301      	movs	r3, #1
 8019eea:	627b      	str	r3, [r7, #36]	; 0x24
 8019eec:	e008      	b.n	8019f00 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8019eee:	687b      	ldr	r3, [r7, #4]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	68db      	ldr	r3, [r3, #12]
 8019ef4:	f003 0301 	and.w	r3, r3, #1
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d001      	beq.n	8019f00 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8019efc:	2301      	movs	r3, #1
 8019efe:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8019f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	d10e      	bne.n	8019f24 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f0a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f16:	f043 0202 	orr.w	r2, r3, #2
 8019f1a:	687b      	ldr	r3, [r7, #4]
 8019f1c:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8019f1e:	6878      	ldr	r0, [r7, #4]
 8019f20:	f000 f840 	bl	8019fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	681b      	ldr	r3, [r3, #0]
 8019f28:	2210      	movs	r2, #16
 8019f2a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8019f2c:	69fb      	ldr	r3, [r7, #28]
 8019f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d018      	beq.n	8019f68 <HAL_ADC_IRQHandler+0x460>
 8019f36:	69bb      	ldr	r3, [r7, #24]
 8019f38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d013      	beq.n	8019f68 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8019f40:	687b      	ldr	r3, [r7, #4]
 8019f42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019f44:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8019f48:	687b      	ldr	r3, [r7, #4]
 8019f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8019f4c:	687b      	ldr	r3, [r7, #4]
 8019f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019f50:	f043 0208 	orr.w	r2, r3, #8
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8019f58:	687b      	ldr	r3, [r7, #4]
 8019f5a:	681b      	ldr	r3, [r3, #0]
 8019f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8019f60:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8019f62:	6878      	ldr	r0, [r7, #4]
 8019f64:	f000 ff24 	bl	801adb0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8019f68:	bf00      	nop
 8019f6a:	3728      	adds	r7, #40	; 0x28
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	bd80      	pop	{r7, pc}
 8019f70:	50000100 	.word	0x50000100
 8019f74:	50000300 	.word	0x50000300
 8019f78:	50000700 	.word	0x50000700

08019f7c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8019f7c:	b480      	push	{r7}
 8019f7e:	b083      	sub	sp, #12
 8019f80:	af00      	add	r7, sp, #0
 8019f82:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8019f84:	bf00      	nop
 8019f86:	370c      	adds	r7, #12
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f8e:	4770      	bx	lr

08019f90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8019f90:	b480      	push	{r7}
 8019f92:	b083      	sub	sp, #12
 8019f94:	af00      	add	r7, sp, #0
 8019f96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8019f98:	bf00      	nop
 8019f9a:	370c      	adds	r7, #12
 8019f9c:	46bd      	mov	sp, r7
 8019f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fa2:	4770      	bx	lr

08019fa4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8019fa4:	b480      	push	{r7}
 8019fa6:	b083      	sub	sp, #12
 8019fa8:	af00      	add	r7, sp, #0
 8019faa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8019fac:	bf00      	nop
 8019fae:	370c      	adds	r7, #12
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb6:	4770      	bx	lr

08019fb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8019fb8:	b580      	push	{r7, lr}
 8019fba:	b0b6      	sub	sp, #216	; 0xd8
 8019fbc:	af00      	add	r7, sp, #0
 8019fbe:	6078      	str	r0, [r7, #4]
 8019fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8019fc2:	2300      	movs	r3, #0
 8019fc4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8019fc8:	2300      	movs	r3, #0
 8019fca:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019fd2:	2b01      	cmp	r3, #1
 8019fd4:	d102      	bne.n	8019fdc <HAL_ADC_ConfigChannel+0x24>
 8019fd6:	2302      	movs	r3, #2
 8019fd8:	f000 bc04 	b.w	801a7e4 <HAL_ADC_ConfigChannel+0x82c>
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	2201      	movs	r2, #1
 8019fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	4618      	mov	r0, r3
 8019fea:	f7ff f875 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	2b00      	cmp	r3, #0
 8019ff2:	f040 83e8 	bne.w	801a7c6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6818      	ldr	r0, [r3, #0]
 8019ffa:	683b      	ldr	r3, [r7, #0]
 8019ffc:	6859      	ldr	r1, [r3, #4]
 8019ffe:	683b      	ldr	r3, [r7, #0]
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	461a      	mov	r2, r3
 801a004:	f7fe fef5 	bl	8018df2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	4618      	mov	r0, r3
 801a00e:	f7ff f863 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 801a012:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4618      	mov	r0, r3
 801a01c:	f7ff f883 	bl	8019126 <LL_ADC_INJ_IsConversionOngoing>
 801a020:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801a024:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801a028:	2b00      	cmp	r3, #0
 801a02a:	f040 81d9 	bne.w	801a3e0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 801a02e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801a032:	2b00      	cmp	r3, #0
 801a034:	f040 81d4 	bne.w	801a3e0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 801a038:	683b      	ldr	r3, [r7, #0]
 801a03a:	689b      	ldr	r3, [r3, #8]
 801a03c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801a040:	d10f      	bne.n	801a062 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	6818      	ldr	r0, [r3, #0]
 801a046:	683b      	ldr	r3, [r7, #0]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	2200      	movs	r2, #0
 801a04c:	4619      	mov	r1, r3
 801a04e:	f7fe ff0f 	bl	8018e70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a05a:	4618      	mov	r0, r3
 801a05c:	f7fe fea3 	bl	8018da6 <LL_ADC_SetSamplingTimeCommonConfig>
 801a060:	e00e      	b.n	801a080 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801a062:	687b      	ldr	r3, [r7, #4]
 801a064:	6818      	ldr	r0, [r3, #0]
 801a066:	683b      	ldr	r3, [r7, #0]
 801a068:	6819      	ldr	r1, [r3, #0]
 801a06a:	683b      	ldr	r3, [r7, #0]
 801a06c:	689b      	ldr	r3, [r3, #8]
 801a06e:	461a      	mov	r2, r3
 801a070:	f7fe fefe 	bl	8018e70 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801a074:	687b      	ldr	r3, [r7, #4]
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	2100      	movs	r1, #0
 801a07a:	4618      	mov	r0, r3
 801a07c:	f7fe fe93 	bl	8018da6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801a080:	683b      	ldr	r3, [r7, #0]
 801a082:	695a      	ldr	r2, [r3, #20]
 801a084:	687b      	ldr	r3, [r7, #4]
 801a086:	681b      	ldr	r3, [r3, #0]
 801a088:	68db      	ldr	r3, [r3, #12]
 801a08a:	08db      	lsrs	r3, r3, #3
 801a08c:	f003 0303 	and.w	r3, r3, #3
 801a090:	005b      	lsls	r3, r3, #1
 801a092:	fa02 f303 	lsl.w	r3, r2, r3
 801a096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 801a09a:	683b      	ldr	r3, [r7, #0]
 801a09c:	691b      	ldr	r3, [r3, #16]
 801a09e:	2b04      	cmp	r3, #4
 801a0a0:	d022      	beq.n	801a0e8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	6818      	ldr	r0, [r3, #0]
 801a0a6:	683b      	ldr	r3, [r7, #0]
 801a0a8:	6919      	ldr	r1, [r3, #16]
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	681a      	ldr	r2, [r3, #0]
 801a0ae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801a0b2:	f7fe fded 	bl	8018c90 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	6818      	ldr	r0, [r3, #0]
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	6919      	ldr	r1, [r3, #16]
 801a0be:	683b      	ldr	r3, [r7, #0]
 801a0c0:	699b      	ldr	r3, [r3, #24]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	f7fe fe39 	bl	8018d3a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	6818      	ldr	r0, [r3, #0]
 801a0cc:	683b      	ldr	r3, [r7, #0]
 801a0ce:	6919      	ldr	r1, [r3, #16]
 801a0d0:	683b      	ldr	r3, [r7, #0]
 801a0d2:	7f1b      	ldrb	r3, [r3, #28]
 801a0d4:	2b01      	cmp	r3, #1
 801a0d6:	d102      	bne.n	801a0de <HAL_ADC_ConfigChannel+0x126>
 801a0d8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801a0dc:	e000      	b.n	801a0e0 <HAL_ADC_ConfigChannel+0x128>
 801a0de:	2300      	movs	r3, #0
 801a0e0:	461a      	mov	r2, r3
 801a0e2:	f7fe fe45 	bl	8018d70 <LL_ADC_SetOffsetSaturation>
 801a0e6:	e17b      	b.n	801a3e0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	681b      	ldr	r3, [r3, #0]
 801a0ec:	2100      	movs	r1, #0
 801a0ee:	4618      	mov	r0, r3
 801a0f0:	f7fe fdf2 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a0f4:	4603      	mov	r3, r0
 801a0f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d10a      	bne.n	801a114 <HAL_ADC_ConfigChannel+0x15c>
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	2100      	movs	r1, #0
 801a104:	4618      	mov	r0, r3
 801a106:	f7fe fde7 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a10a:	4603      	mov	r3, r0
 801a10c:	0e9b      	lsrs	r3, r3, #26
 801a10e:	f003 021f 	and.w	r2, r3, #31
 801a112:	e01e      	b.n	801a152 <HAL_ADC_ConfigChannel+0x19a>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	2100      	movs	r1, #0
 801a11a:	4618      	mov	r0, r3
 801a11c:	f7fe fddc 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a120:	4603      	mov	r3, r0
 801a122:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a126:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801a12a:	fa93 f3a3 	rbit	r3, r3
 801a12e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 801a132:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a136:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801a13a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d101      	bne.n	801a146 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 801a142:	2320      	movs	r3, #32
 801a144:	e004      	b.n	801a150 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 801a146:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801a14a:	fab3 f383 	clz	r3, r3
 801a14e:	b2db      	uxtb	r3, r3
 801a150:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a152:	683b      	ldr	r3, [r7, #0]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d105      	bne.n	801a16a <HAL_ADC_ConfigChannel+0x1b2>
 801a15e:	683b      	ldr	r3, [r7, #0]
 801a160:	681b      	ldr	r3, [r3, #0]
 801a162:	0e9b      	lsrs	r3, r3, #26
 801a164:	f003 031f 	and.w	r3, r3, #31
 801a168:	e018      	b.n	801a19c <HAL_ADC_ConfigChannel+0x1e4>
 801a16a:	683b      	ldr	r3, [r7, #0]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a172:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a176:	fa93 f3a3 	rbit	r3, r3
 801a17a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 801a17e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a182:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 801a186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d101      	bne.n	801a192 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 801a18e:	2320      	movs	r3, #32
 801a190:	e004      	b.n	801a19c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 801a192:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801a196:	fab3 f383 	clz	r3, r3
 801a19a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 801a19c:	429a      	cmp	r2, r3
 801a19e:	d106      	bne.n	801a1ae <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	2100      	movs	r1, #0
 801a1a8:	4618      	mov	r0, r3
 801a1aa:	f7fe fdab 	bl	8018d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a1ae:	687b      	ldr	r3, [r7, #4]
 801a1b0:	681b      	ldr	r3, [r3, #0]
 801a1b2:	2101      	movs	r1, #1
 801a1b4:	4618      	mov	r0, r3
 801a1b6:	f7fe fd8f 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a1ba:	4603      	mov	r3, r0
 801a1bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d10a      	bne.n	801a1da <HAL_ADC_ConfigChannel+0x222>
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	681b      	ldr	r3, [r3, #0]
 801a1c8:	2101      	movs	r1, #1
 801a1ca:	4618      	mov	r0, r3
 801a1cc:	f7fe fd84 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a1d0:	4603      	mov	r3, r0
 801a1d2:	0e9b      	lsrs	r3, r3, #26
 801a1d4:	f003 021f 	and.w	r2, r3, #31
 801a1d8:	e01e      	b.n	801a218 <HAL_ADC_ConfigChannel+0x260>
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	2101      	movs	r1, #1
 801a1e0:	4618      	mov	r0, r3
 801a1e2:	f7fe fd79 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a1e6:	4603      	mov	r3, r0
 801a1e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a1ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801a1f0:	fa93 f3a3 	rbit	r3, r3
 801a1f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 801a1f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801a1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 801a200:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a204:	2b00      	cmp	r3, #0
 801a206:	d101      	bne.n	801a20c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 801a208:	2320      	movs	r3, #32
 801a20a:	e004      	b.n	801a216 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 801a20c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801a210:	fab3 f383 	clz	r3, r3
 801a214:	b2db      	uxtb	r3, r3
 801a216:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a220:	2b00      	cmp	r3, #0
 801a222:	d105      	bne.n	801a230 <HAL_ADC_ConfigChannel+0x278>
 801a224:	683b      	ldr	r3, [r7, #0]
 801a226:	681b      	ldr	r3, [r3, #0]
 801a228:	0e9b      	lsrs	r3, r3, #26
 801a22a:	f003 031f 	and.w	r3, r3, #31
 801a22e:	e018      	b.n	801a262 <HAL_ADC_ConfigChannel+0x2aa>
 801a230:	683b      	ldr	r3, [r7, #0]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a238:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801a23c:	fa93 f3a3 	rbit	r3, r3
 801a240:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 801a244:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801a248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 801a24c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a250:	2b00      	cmp	r3, #0
 801a252:	d101      	bne.n	801a258 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 801a254:	2320      	movs	r3, #32
 801a256:	e004      	b.n	801a262 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 801a258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801a25c:	fab3 f383 	clz	r3, r3
 801a260:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 801a262:	429a      	cmp	r2, r3
 801a264:	d106      	bne.n	801a274 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 801a266:	687b      	ldr	r3, [r7, #4]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2200      	movs	r2, #0
 801a26c:	2101      	movs	r1, #1
 801a26e:	4618      	mov	r0, r3
 801a270:	f7fe fd48 	bl	8018d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	2102      	movs	r1, #2
 801a27a:	4618      	mov	r0, r3
 801a27c:	f7fe fd2c 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a280:	4603      	mov	r3, r0
 801a282:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a286:	2b00      	cmp	r3, #0
 801a288:	d10a      	bne.n	801a2a0 <HAL_ADC_ConfigChannel+0x2e8>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	2102      	movs	r1, #2
 801a290:	4618      	mov	r0, r3
 801a292:	f7fe fd21 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a296:	4603      	mov	r3, r0
 801a298:	0e9b      	lsrs	r3, r3, #26
 801a29a:	f003 021f 	and.w	r2, r3, #31
 801a29e:	e01e      	b.n	801a2de <HAL_ADC_ConfigChannel+0x326>
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	2102      	movs	r1, #2
 801a2a6:	4618      	mov	r0, r3
 801a2a8:	f7fe fd16 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a2b6:	fa93 f3a3 	rbit	r3, r3
 801a2ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 801a2be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801a2c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 801a2c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d101      	bne.n	801a2d2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 801a2ce:	2320      	movs	r3, #32
 801a2d0:	e004      	b.n	801a2dc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 801a2d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801a2d6:	fab3 f383 	clz	r3, r3
 801a2da:	b2db      	uxtb	r3, r3
 801a2dc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a2de:	683b      	ldr	r3, [r7, #0]
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a2e6:	2b00      	cmp	r3, #0
 801a2e8:	d105      	bne.n	801a2f6 <HAL_ADC_ConfigChannel+0x33e>
 801a2ea:	683b      	ldr	r3, [r7, #0]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	0e9b      	lsrs	r3, r3, #26
 801a2f0:	f003 031f 	and.w	r3, r3, #31
 801a2f4:	e016      	b.n	801a324 <HAL_ADC_ConfigChannel+0x36c>
 801a2f6:	683b      	ldr	r3, [r7, #0]
 801a2f8:	681b      	ldr	r3, [r3, #0]
 801a2fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a2fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801a302:	fa93 f3a3 	rbit	r3, r3
 801a306:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 801a308:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801a30a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 801a30e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a312:	2b00      	cmp	r3, #0
 801a314:	d101      	bne.n	801a31a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 801a316:	2320      	movs	r3, #32
 801a318:	e004      	b.n	801a324 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 801a31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801a31e:	fab3 f383 	clz	r3, r3
 801a322:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 801a324:	429a      	cmp	r2, r3
 801a326:	d106      	bne.n	801a336 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801a328:	687b      	ldr	r3, [r7, #4]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	2200      	movs	r2, #0
 801a32e:	2102      	movs	r1, #2
 801a330:	4618      	mov	r0, r3
 801a332:	f7fe fce7 	bl	8018d04 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	2103      	movs	r1, #3
 801a33c:	4618      	mov	r0, r3
 801a33e:	f7fe fccb 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a342:	4603      	mov	r3, r0
 801a344:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a348:	2b00      	cmp	r3, #0
 801a34a:	d10a      	bne.n	801a362 <HAL_ADC_ConfigChannel+0x3aa>
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	2103      	movs	r1, #3
 801a352:	4618      	mov	r0, r3
 801a354:	f7fe fcc0 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a358:	4603      	mov	r3, r0
 801a35a:	0e9b      	lsrs	r3, r3, #26
 801a35c:	f003 021f 	and.w	r2, r3, #31
 801a360:	e017      	b.n	801a392 <HAL_ADC_ConfigChannel+0x3da>
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	2103      	movs	r1, #3
 801a368:	4618      	mov	r0, r3
 801a36a:	f7fe fcb5 	bl	8018cd8 <LL_ADC_GetOffsetChannel>
 801a36e:	4603      	mov	r3, r0
 801a370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801a374:	fa93 f3a3 	rbit	r3, r3
 801a378:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 801a37a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801a37c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 801a37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a380:	2b00      	cmp	r3, #0
 801a382:	d101      	bne.n	801a388 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 801a384:	2320      	movs	r3, #32
 801a386:	e003      	b.n	801a390 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 801a388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801a38a:	fab3 f383 	clz	r3, r3
 801a38e:	b2db      	uxtb	r3, r3
 801a390:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801a392:	683b      	ldr	r3, [r7, #0]
 801a394:	681b      	ldr	r3, [r3, #0]
 801a396:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d105      	bne.n	801a3aa <HAL_ADC_ConfigChannel+0x3f2>
 801a39e:	683b      	ldr	r3, [r7, #0]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	0e9b      	lsrs	r3, r3, #26
 801a3a4:	f003 031f 	and.w	r3, r3, #31
 801a3a8:	e011      	b.n	801a3ce <HAL_ADC_ConfigChannel+0x416>
 801a3aa:	683b      	ldr	r3, [r7, #0]
 801a3ac:	681b      	ldr	r3, [r3, #0]
 801a3ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a3b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801a3b2:	fa93 f3a3 	rbit	r3, r3
 801a3b6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 801a3b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801a3ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 801a3bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3be:	2b00      	cmp	r3, #0
 801a3c0:	d101      	bne.n	801a3c6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 801a3c2:	2320      	movs	r3, #32
 801a3c4:	e003      	b.n	801a3ce <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 801a3c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801a3c8:	fab3 f383 	clz	r3, r3
 801a3cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 801a3ce:	429a      	cmp	r2, r3
 801a3d0:	d106      	bne.n	801a3e0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	681b      	ldr	r3, [r3, #0]
 801a3d6:	2200      	movs	r2, #0
 801a3d8:	2103      	movs	r1, #3
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f7fe fc92 	bl	8018d04 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	4618      	mov	r0, r3
 801a3e6:	f7fe fe29 	bl	801903c <LL_ADC_IsEnabled>
 801a3ea:	4603      	mov	r3, r0
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	f040 813d 	bne.w	801a66c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	6818      	ldr	r0, [r3, #0]
 801a3f6:	683b      	ldr	r3, [r7, #0]
 801a3f8:	6819      	ldr	r1, [r3, #0]
 801a3fa:	683b      	ldr	r3, [r7, #0]
 801a3fc:	68db      	ldr	r3, [r3, #12]
 801a3fe:	461a      	mov	r2, r3
 801a400:	f7fe fd62 	bl	8018ec8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801a404:	683b      	ldr	r3, [r7, #0]
 801a406:	68db      	ldr	r3, [r3, #12]
 801a408:	4aa2      	ldr	r2, [pc, #648]	; (801a694 <HAL_ADC_ConfigChannel+0x6dc>)
 801a40a:	4293      	cmp	r3, r2
 801a40c:	f040 812e 	bne.w	801a66c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a414:	683b      	ldr	r3, [r7, #0]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d10b      	bne.n	801a438 <HAL_ADC_ConfigChannel+0x480>
 801a420:	683b      	ldr	r3, [r7, #0]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	0e9b      	lsrs	r3, r3, #26
 801a426:	3301      	adds	r3, #1
 801a428:	f003 031f 	and.w	r3, r3, #31
 801a42c:	2b09      	cmp	r3, #9
 801a42e:	bf94      	ite	ls
 801a430:	2301      	movls	r3, #1
 801a432:	2300      	movhi	r3, #0
 801a434:	b2db      	uxtb	r3, r3
 801a436:	e019      	b.n	801a46c <HAL_ADC_ConfigChannel+0x4b4>
 801a438:	683b      	ldr	r3, [r7, #0]
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a43e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801a440:	fa93 f3a3 	rbit	r3, r3
 801a444:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 801a446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801a448:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 801a44a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d101      	bne.n	801a454 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 801a450:	2320      	movs	r3, #32
 801a452:	e003      	b.n	801a45c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 801a454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801a456:	fab3 f383 	clz	r3, r3
 801a45a:	b2db      	uxtb	r3, r3
 801a45c:	3301      	adds	r3, #1
 801a45e:	f003 031f 	and.w	r3, r3, #31
 801a462:	2b09      	cmp	r3, #9
 801a464:	bf94      	ite	ls
 801a466:	2301      	movls	r3, #1
 801a468:	2300      	movhi	r3, #0
 801a46a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a46c:	2b00      	cmp	r3, #0
 801a46e:	d079      	beq.n	801a564 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a470:	683b      	ldr	r3, [r7, #0]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d107      	bne.n	801a48c <HAL_ADC_ConfigChannel+0x4d4>
 801a47c:	683b      	ldr	r3, [r7, #0]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	0e9b      	lsrs	r3, r3, #26
 801a482:	3301      	adds	r3, #1
 801a484:	069b      	lsls	r3, r3, #26
 801a486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a48a:	e015      	b.n	801a4b8 <HAL_ADC_ConfigChannel+0x500>
 801a48c:	683b      	ldr	r3, [r7, #0]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a494:	fa93 f3a3 	rbit	r3, r3
 801a498:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 801a49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a49c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 801a49e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4a0:	2b00      	cmp	r3, #0
 801a4a2:	d101      	bne.n	801a4a8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 801a4a4:	2320      	movs	r3, #32
 801a4a6:	e003      	b.n	801a4b0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 801a4a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a4aa:	fab3 f383 	clz	r3, r3
 801a4ae:	b2db      	uxtb	r3, r3
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	069b      	lsls	r3, r3, #26
 801a4b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a4b8:	683b      	ldr	r3, [r7, #0]
 801a4ba:	681b      	ldr	r3, [r3, #0]
 801a4bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d109      	bne.n	801a4d8 <HAL_ADC_ConfigChannel+0x520>
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	0e9b      	lsrs	r3, r3, #26
 801a4ca:	3301      	adds	r3, #1
 801a4cc:	f003 031f 	and.w	r3, r3, #31
 801a4d0:	2101      	movs	r1, #1
 801a4d2:	fa01 f303 	lsl.w	r3, r1, r3
 801a4d6:	e017      	b.n	801a508 <HAL_ADC_ConfigChannel+0x550>
 801a4d8:	683b      	ldr	r3, [r7, #0]
 801a4da:	681b      	ldr	r3, [r3, #0]
 801a4dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a4de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a4e0:	fa93 f3a3 	rbit	r3, r3
 801a4e4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 801a4e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a4e8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 801a4ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d101      	bne.n	801a4f4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 801a4f0:	2320      	movs	r3, #32
 801a4f2:	e003      	b.n	801a4fc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 801a4f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a4f6:	fab3 f383 	clz	r3, r3
 801a4fa:	b2db      	uxtb	r3, r3
 801a4fc:	3301      	adds	r3, #1
 801a4fe:	f003 031f 	and.w	r3, r3, #31
 801a502:	2101      	movs	r1, #1
 801a504:	fa01 f303 	lsl.w	r3, r1, r3
 801a508:	ea42 0103 	orr.w	r1, r2, r3
 801a50c:	683b      	ldr	r3, [r7, #0]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a514:	2b00      	cmp	r3, #0
 801a516:	d10a      	bne.n	801a52e <HAL_ADC_ConfigChannel+0x576>
 801a518:	683b      	ldr	r3, [r7, #0]
 801a51a:	681b      	ldr	r3, [r3, #0]
 801a51c:	0e9b      	lsrs	r3, r3, #26
 801a51e:	3301      	adds	r3, #1
 801a520:	f003 021f 	and.w	r2, r3, #31
 801a524:	4613      	mov	r3, r2
 801a526:	005b      	lsls	r3, r3, #1
 801a528:	4413      	add	r3, r2
 801a52a:	051b      	lsls	r3, r3, #20
 801a52c:	e018      	b.n	801a560 <HAL_ADC_ConfigChannel+0x5a8>
 801a52e:	683b      	ldr	r3, [r7, #0]
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a536:	fa93 f3a3 	rbit	r3, r3
 801a53a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 801a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a53e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 801a540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a542:	2b00      	cmp	r3, #0
 801a544:	d101      	bne.n	801a54a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 801a546:	2320      	movs	r3, #32
 801a548:	e003      	b.n	801a552 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 801a54a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a54c:	fab3 f383 	clz	r3, r3
 801a550:	b2db      	uxtb	r3, r3
 801a552:	3301      	adds	r3, #1
 801a554:	f003 021f 	and.w	r2, r3, #31
 801a558:	4613      	mov	r3, r2
 801a55a:	005b      	lsls	r3, r3, #1
 801a55c:	4413      	add	r3, r2
 801a55e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a560:	430b      	orrs	r3, r1
 801a562:	e07e      	b.n	801a662 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801a564:	683b      	ldr	r3, [r7, #0]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a56c:	2b00      	cmp	r3, #0
 801a56e:	d107      	bne.n	801a580 <HAL_ADC_ConfigChannel+0x5c8>
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	0e9b      	lsrs	r3, r3, #26
 801a576:	3301      	adds	r3, #1
 801a578:	069b      	lsls	r3, r3, #26
 801a57a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a57e:	e015      	b.n	801a5ac <HAL_ADC_ConfigChannel+0x5f4>
 801a580:	683b      	ldr	r3, [r7, #0]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a588:	fa93 f3a3 	rbit	r3, r3
 801a58c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 801a58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a590:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 801a592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a594:	2b00      	cmp	r3, #0
 801a596:	d101      	bne.n	801a59c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 801a598:	2320      	movs	r3, #32
 801a59a:	e003      	b.n	801a5a4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 801a59c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a59e:	fab3 f383 	clz	r3, r3
 801a5a2:	b2db      	uxtb	r3, r3
 801a5a4:	3301      	adds	r3, #1
 801a5a6:	069b      	lsls	r3, r3, #26
 801a5a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801a5ac:	683b      	ldr	r3, [r7, #0]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d109      	bne.n	801a5cc <HAL_ADC_ConfigChannel+0x614>
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	0e9b      	lsrs	r3, r3, #26
 801a5be:	3301      	adds	r3, #1
 801a5c0:	f003 031f 	and.w	r3, r3, #31
 801a5c4:	2101      	movs	r1, #1
 801a5c6:	fa01 f303 	lsl.w	r3, r1, r3
 801a5ca:	e017      	b.n	801a5fc <HAL_ADC_ConfigChannel+0x644>
 801a5cc:	683b      	ldr	r3, [r7, #0]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a5d2:	6a3b      	ldr	r3, [r7, #32]
 801a5d4:	fa93 f3a3 	rbit	r3, r3
 801a5d8:	61fb      	str	r3, [r7, #28]
  return result;
 801a5da:	69fb      	ldr	r3, [r7, #28]
 801a5dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 801a5de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d101      	bne.n	801a5e8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 801a5e4:	2320      	movs	r3, #32
 801a5e6:	e003      	b.n	801a5f0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 801a5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ea:	fab3 f383 	clz	r3, r3
 801a5ee:	b2db      	uxtb	r3, r3
 801a5f0:	3301      	adds	r3, #1
 801a5f2:	f003 031f 	and.w	r3, r3, #31
 801a5f6:	2101      	movs	r1, #1
 801a5f8:	fa01 f303 	lsl.w	r3, r1, r3
 801a5fc:	ea42 0103 	orr.w	r1, r2, r3
 801a600:	683b      	ldr	r3, [r7, #0]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d10d      	bne.n	801a628 <HAL_ADC_ConfigChannel+0x670>
 801a60c:	683b      	ldr	r3, [r7, #0]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	0e9b      	lsrs	r3, r3, #26
 801a612:	3301      	adds	r3, #1
 801a614:	f003 021f 	and.w	r2, r3, #31
 801a618:	4613      	mov	r3, r2
 801a61a:	005b      	lsls	r3, r3, #1
 801a61c:	4413      	add	r3, r2
 801a61e:	3b1e      	subs	r3, #30
 801a620:	051b      	lsls	r3, r3, #20
 801a622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801a626:	e01b      	b.n	801a660 <HAL_ADC_ConfigChannel+0x6a8>
 801a628:	683b      	ldr	r3, [r7, #0]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801a62e:	697b      	ldr	r3, [r7, #20]
 801a630:	fa93 f3a3 	rbit	r3, r3
 801a634:	613b      	str	r3, [r7, #16]
  return result;
 801a636:	693b      	ldr	r3, [r7, #16]
 801a638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 801a63a:	69bb      	ldr	r3, [r7, #24]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d101      	bne.n	801a644 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 801a640:	2320      	movs	r3, #32
 801a642:	e003      	b.n	801a64c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 801a644:	69bb      	ldr	r3, [r7, #24]
 801a646:	fab3 f383 	clz	r3, r3
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	3301      	adds	r3, #1
 801a64e:	f003 021f 	and.w	r2, r3, #31
 801a652:	4613      	mov	r3, r2
 801a654:	005b      	lsls	r3, r3, #1
 801a656:	4413      	add	r3, r2
 801a658:	3b1e      	subs	r3, #30
 801a65a:	051b      	lsls	r3, r3, #20
 801a65c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801a660:	430b      	orrs	r3, r1
 801a662:	683a      	ldr	r2, [r7, #0]
 801a664:	6892      	ldr	r2, [r2, #8]
 801a666:	4619      	mov	r1, r3
 801a668:	f7fe fc02 	bl	8018e70 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 801a66c:	683b      	ldr	r3, [r7, #0]
 801a66e:	681a      	ldr	r2, [r3, #0]
 801a670:	4b09      	ldr	r3, [pc, #36]	; (801a698 <HAL_ADC_ConfigChannel+0x6e0>)
 801a672:	4013      	ands	r3, r2
 801a674:	2b00      	cmp	r3, #0
 801a676:	f000 80af 	beq.w	801a7d8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a682:	d004      	beq.n	801a68e <HAL_ADC_ConfigChannel+0x6d6>
 801a684:	687b      	ldr	r3, [r7, #4]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	4a04      	ldr	r2, [pc, #16]	; (801a69c <HAL_ADC_ConfigChannel+0x6e4>)
 801a68a:	4293      	cmp	r3, r2
 801a68c:	d10a      	bne.n	801a6a4 <HAL_ADC_ConfigChannel+0x6ec>
 801a68e:	4b04      	ldr	r3, [pc, #16]	; (801a6a0 <HAL_ADC_ConfigChannel+0x6e8>)
 801a690:	e009      	b.n	801a6a6 <HAL_ADC_ConfigChannel+0x6ee>
 801a692:	bf00      	nop
 801a694:	407f0000 	.word	0x407f0000
 801a698:	80080000 	.word	0x80080000
 801a69c:	50000100 	.word	0x50000100
 801a6a0:	50000300 	.word	0x50000300
 801a6a4:	4b51      	ldr	r3, [pc, #324]	; (801a7ec <HAL_ADC_ConfigChannel+0x834>)
 801a6a6:	4618      	mov	r0, r3
 801a6a8:	f7fe fae4 	bl	8018c74 <LL_ADC_GetCommonPathInternalCh>
 801a6ac:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801a6b0:	683b      	ldr	r3, [r7, #0]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	4a4e      	ldr	r2, [pc, #312]	; (801a7f0 <HAL_ADC_ConfigChannel+0x838>)
 801a6b6:	4293      	cmp	r3, r2
 801a6b8:	d004      	beq.n	801a6c4 <HAL_ADC_ConfigChannel+0x70c>
 801a6ba:	683b      	ldr	r3, [r7, #0]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	4a4d      	ldr	r2, [pc, #308]	; (801a7f4 <HAL_ADC_ConfigChannel+0x83c>)
 801a6c0:	4293      	cmp	r3, r2
 801a6c2:	d134      	bne.n	801a72e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 801a6c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a6c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d12e      	bne.n	801a72e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a6d8:	d17e      	bne.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a6e2:	d004      	beq.n	801a6ee <HAL_ADC_ConfigChannel+0x736>
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	681b      	ldr	r3, [r3, #0]
 801a6e8:	4a43      	ldr	r2, [pc, #268]	; (801a7f8 <HAL_ADC_ConfigChannel+0x840>)
 801a6ea:	4293      	cmp	r3, r2
 801a6ec:	d101      	bne.n	801a6f2 <HAL_ADC_ConfigChannel+0x73a>
 801a6ee:	4a43      	ldr	r2, [pc, #268]	; (801a7fc <HAL_ADC_ConfigChannel+0x844>)
 801a6f0:	e000      	b.n	801a6f4 <HAL_ADC_ConfigChannel+0x73c>
 801a6f2:	4a3e      	ldr	r2, [pc, #248]	; (801a7ec <HAL_ADC_ConfigChannel+0x834>)
 801a6f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a6f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801a6fc:	4619      	mov	r1, r3
 801a6fe:	4610      	mov	r0, r2
 801a700:	f7fe faa5 	bl	8018c4e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801a704:	4b3e      	ldr	r3, [pc, #248]	; (801a800 <HAL_ADC_ConfigChannel+0x848>)
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	099b      	lsrs	r3, r3, #6
 801a70a:	4a3e      	ldr	r2, [pc, #248]	; (801a804 <HAL_ADC_ConfigChannel+0x84c>)
 801a70c:	fba2 2303 	umull	r2, r3, r2, r3
 801a710:	099b      	lsrs	r3, r3, #6
 801a712:	1c5a      	adds	r2, r3, #1
 801a714:	4613      	mov	r3, r2
 801a716:	005b      	lsls	r3, r3, #1
 801a718:	4413      	add	r3, r2
 801a71a:	009b      	lsls	r3, r3, #2
 801a71c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a71e:	e002      	b.n	801a726 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 801a720:	68fb      	ldr	r3, [r7, #12]
 801a722:	3b01      	subs	r3, #1
 801a724:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 801a726:	68fb      	ldr	r3, [r7, #12]
 801a728:	2b00      	cmp	r3, #0
 801a72a:	d1f9      	bne.n	801a720 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 801a72c:	e054      	b.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	4a35      	ldr	r2, [pc, #212]	; (801a808 <HAL_ADC_ConfigChannel+0x850>)
 801a734:	4293      	cmp	r3, r2
 801a736:	d120      	bne.n	801a77a <HAL_ADC_ConfigChannel+0x7c2>
 801a738:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a73c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801a740:	2b00      	cmp	r3, #0
 801a742:	d11a      	bne.n	801a77a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a74c:	d144      	bne.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a756:	d004      	beq.n	801a762 <HAL_ADC_ConfigChannel+0x7aa>
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	4a26      	ldr	r2, [pc, #152]	; (801a7f8 <HAL_ADC_ConfigChannel+0x840>)
 801a75e:	4293      	cmp	r3, r2
 801a760:	d101      	bne.n	801a766 <HAL_ADC_ConfigChannel+0x7ae>
 801a762:	4a26      	ldr	r2, [pc, #152]	; (801a7fc <HAL_ADC_ConfigChannel+0x844>)
 801a764:	e000      	b.n	801a768 <HAL_ADC_ConfigChannel+0x7b0>
 801a766:	4a21      	ldr	r2, [pc, #132]	; (801a7ec <HAL_ADC_ConfigChannel+0x834>)
 801a768:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a76c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801a770:	4619      	mov	r1, r3
 801a772:	4610      	mov	r0, r2
 801a774:	f7fe fa6b 	bl	8018c4e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 801a778:	e02e      	b.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 801a77a:	683b      	ldr	r3, [r7, #0]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4a23      	ldr	r2, [pc, #140]	; (801a80c <HAL_ADC_ConfigChannel+0x854>)
 801a780:	4293      	cmp	r3, r2
 801a782:	d129      	bne.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801a784:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a78c:	2b00      	cmp	r3, #0
 801a78e:	d123      	bne.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	4a18      	ldr	r2, [pc, #96]	; (801a7f8 <HAL_ADC_ConfigChannel+0x840>)
 801a796:	4293      	cmp	r3, r2
 801a798:	d01e      	beq.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a7a2:	d004      	beq.n	801a7ae <HAL_ADC_ConfigChannel+0x7f6>
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	4a13      	ldr	r2, [pc, #76]	; (801a7f8 <HAL_ADC_ConfigChannel+0x840>)
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	d101      	bne.n	801a7b2 <HAL_ADC_ConfigChannel+0x7fa>
 801a7ae:	4a13      	ldr	r2, [pc, #76]	; (801a7fc <HAL_ADC_ConfigChannel+0x844>)
 801a7b0:	e000      	b.n	801a7b4 <HAL_ADC_ConfigChannel+0x7fc>
 801a7b2:	4a0e      	ldr	r2, [pc, #56]	; (801a7ec <HAL_ADC_ConfigChannel+0x834>)
 801a7b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801a7b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801a7bc:	4619      	mov	r1, r3
 801a7be:	4610      	mov	r0, r2
 801a7c0:	f7fe fa45 	bl	8018c4e <LL_ADC_SetCommonPathInternalCh>
 801a7c4:	e008      	b.n	801a7d8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a7ca:	f043 0220 	orr.w	r2, r3, #32
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801a7d2:	2301      	movs	r3, #1
 801a7d4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	2200      	movs	r2, #0
 801a7dc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801a7e0:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 801a7e4:	4618      	mov	r0, r3
 801a7e6:	37d8      	adds	r7, #216	; 0xd8
 801a7e8:	46bd      	mov	sp, r7
 801a7ea:	bd80      	pop	{r7, pc}
 801a7ec:	50000700 	.word	0x50000700
 801a7f0:	c3210000 	.word	0xc3210000
 801a7f4:	90c00010 	.word	0x90c00010
 801a7f8:	50000100 	.word	0x50000100
 801a7fc:	50000300 	.word	0x50000300
 801a800:	20000000 	.word	0x20000000
 801a804:	053e2d63 	.word	0x053e2d63
 801a808:	c7520000 	.word	0xc7520000
 801a80c:	cb840000 	.word	0xcb840000

0801a810 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 801a810:	b580      	push	{r7, lr}
 801a812:	b088      	sub	sp, #32
 801a814:	af00      	add	r7, sp, #0
 801a816:	6078      	str	r0, [r7, #4]
 801a818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 801a81a:	2300      	movs	r3, #0
 801a81c:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 801a81e:	683b      	ldr	r3, [r7, #0]
 801a820:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801a822:	687b      	ldr	r3, [r7, #4]
 801a824:	681b      	ldr	r3, [r3, #0]
 801a826:	4618      	mov	r0, r3
 801a828:	f7fe fc56 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 801a82c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	4618      	mov	r0, r3
 801a834:	f7fe fc77 	bl	8019126 <LL_ADC_INJ_IsConversionOngoing>
 801a838:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 801a83a:	693b      	ldr	r3, [r7, #16]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d103      	bne.n	801a848 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 801a840:	68fb      	ldr	r3, [r7, #12]
 801a842:	2b00      	cmp	r3, #0
 801a844:	f000 8098 	beq.w	801a978 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	681b      	ldr	r3, [r3, #0]
 801a84c:	68db      	ldr	r3, [r3, #12]
 801a84e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801a852:	2b00      	cmp	r3, #0
 801a854:	d02a      	beq.n	801a8ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	7f5b      	ldrb	r3, [r3, #29]
 801a85a:	2b01      	cmp	r3, #1
 801a85c:	d126      	bne.n	801a8ac <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	7f1b      	ldrb	r3, [r3, #28]
 801a862:	2b01      	cmp	r3, #1
 801a864:	d122      	bne.n	801a8ac <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 801a866:	2301      	movs	r3, #1
 801a868:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a86a:	e014      	b.n	801a896 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 801a86c:	69fb      	ldr	r3, [r7, #28]
 801a86e:	4a45      	ldr	r2, [pc, #276]	; (801a984 <ADC_ConversionStop+0x174>)
 801a870:	4293      	cmp	r3, r2
 801a872:	d90d      	bls.n	801a890 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a874:	687b      	ldr	r3, [r7, #4]
 801a876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a878:	f043 0210 	orr.w	r2, r3, #16
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a884:	f043 0201 	orr.w	r2, r3, #1
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a88c:	2301      	movs	r3, #1
 801a88e:	e074      	b.n	801a97a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 801a890:	69fb      	ldr	r3, [r7, #28]
 801a892:	3301      	adds	r3, #1
 801a894:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 801a896:	687b      	ldr	r3, [r7, #4]
 801a898:	681b      	ldr	r3, [r3, #0]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a8a0:	2b40      	cmp	r3, #64	; 0x40
 801a8a2:	d1e3      	bne.n	801a86c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	2240      	movs	r2, #64	; 0x40
 801a8aa:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 801a8ac:	69bb      	ldr	r3, [r7, #24]
 801a8ae:	2b02      	cmp	r3, #2
 801a8b0:	d014      	beq.n	801a8dc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f7fe fc0e 	bl	80190d8 <LL_ADC_REG_IsConversionOngoing>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	2b00      	cmp	r3, #0
 801a8c0:	d00c      	beq.n	801a8dc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	681b      	ldr	r3, [r3, #0]
 801a8c6:	4618      	mov	r0, r3
 801a8c8:	f7fe fbcb 	bl	8019062 <LL_ADC_IsDisableOngoing>
 801a8cc:	4603      	mov	r3, r0
 801a8ce:	2b00      	cmp	r3, #0
 801a8d0:	d104      	bne.n	801a8dc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	f7fe fbea 	bl	80190b0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 801a8dc:	69bb      	ldr	r3, [r7, #24]
 801a8de:	2b01      	cmp	r3, #1
 801a8e0:	d014      	beq.n	801a90c <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	4618      	mov	r0, r3
 801a8e8:	f7fe fc1d 	bl	8019126 <LL_ADC_INJ_IsConversionOngoing>
 801a8ec:	4603      	mov	r3, r0
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d00c      	beq.n	801a90c <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	4618      	mov	r0, r3
 801a8f8:	f7fe fbb3 	bl	8019062 <LL_ADC_IsDisableOngoing>
 801a8fc:	4603      	mov	r3, r0
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d104      	bne.n	801a90c <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	4618      	mov	r0, r3
 801a908:	f7fe fbf9 	bl	80190fe <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 801a90c:	69bb      	ldr	r3, [r7, #24]
 801a90e:	2b02      	cmp	r3, #2
 801a910:	d005      	beq.n	801a91e <ADC_ConversionStop+0x10e>
 801a912:	69bb      	ldr	r3, [r7, #24]
 801a914:	2b03      	cmp	r3, #3
 801a916:	d105      	bne.n	801a924 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 801a918:	230c      	movs	r3, #12
 801a91a:	617b      	str	r3, [r7, #20]
        break;
 801a91c:	e005      	b.n	801a92a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 801a91e:	2308      	movs	r3, #8
 801a920:	617b      	str	r3, [r7, #20]
        break;
 801a922:	e002      	b.n	801a92a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 801a924:	2304      	movs	r3, #4
 801a926:	617b      	str	r3, [r7, #20]
        break;
 801a928:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 801a92a:	f7fe f94f 	bl	8018bcc <HAL_GetTick>
 801a92e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a930:	e01b      	b.n	801a96a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 801a932:	f7fe f94b 	bl	8018bcc <HAL_GetTick>
 801a936:	4602      	mov	r2, r0
 801a938:	68bb      	ldr	r3, [r7, #8]
 801a93a:	1ad3      	subs	r3, r2, r3
 801a93c:	2b05      	cmp	r3, #5
 801a93e:	d914      	bls.n	801a96a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	689a      	ldr	r2, [r3, #8]
 801a946:	697b      	ldr	r3, [r7, #20]
 801a948:	4013      	ands	r3, r2
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d00d      	beq.n	801a96a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a952:	f043 0210 	orr.w	r2, r3, #16
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a95e:	f043 0201 	orr.w	r2, r3, #1
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801a966:	2301      	movs	r3, #1
 801a968:	e007      	b.n	801a97a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	681b      	ldr	r3, [r3, #0]
 801a96e:	689a      	ldr	r2, [r3, #8]
 801a970:	697b      	ldr	r3, [r7, #20]
 801a972:	4013      	ands	r3, r2
 801a974:	2b00      	cmp	r3, #0
 801a976:	d1dc      	bne.n	801a932 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 801a978:	2300      	movs	r3, #0
}
 801a97a:	4618      	mov	r0, r3
 801a97c:	3720      	adds	r7, #32
 801a97e:	46bd      	mov	sp, r7
 801a980:	bd80      	pop	{r7, pc}
 801a982:	bf00      	nop
 801a984:	a33fffff 	.word	0xa33fffff

0801a988 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 801a988:	b580      	push	{r7, lr}
 801a98a:	b084      	sub	sp, #16
 801a98c:	af00      	add	r7, sp, #0
 801a98e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4618      	mov	r0, r3
 801a996:	f7fe fb51 	bl	801903c <LL_ADC_IsEnabled>
 801a99a:	4603      	mov	r3, r0
 801a99c:	2b00      	cmp	r3, #0
 801a99e:	d14d      	bne.n	801aa3c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	689a      	ldr	r2, [r3, #8]
 801a9a6:	4b28      	ldr	r3, [pc, #160]	; (801aa48 <ADC_Enable+0xc0>)
 801a9a8:	4013      	ands	r3, r2
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d00d      	beq.n	801a9ca <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a9b2:	f043 0210 	orr.w	r2, r3, #16
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9be:	f043 0201 	orr.w	r2, r3, #1
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 801a9c6:	2301      	movs	r3, #1
 801a9c8:	e039      	b.n	801aa3e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	681b      	ldr	r3, [r3, #0]
 801a9ce:	4618      	mov	r0, r3
 801a9d0:	f7fe fb0c 	bl	8018fec <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 801a9d4:	f7fe f8fa 	bl	8018bcc <HAL_GetTick>
 801a9d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801a9da:	e028      	b.n	801aa2e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	681b      	ldr	r3, [r3, #0]
 801a9e0:	4618      	mov	r0, r3
 801a9e2:	f7fe fb2b 	bl	801903c <LL_ADC_IsEnabled>
 801a9e6:	4603      	mov	r3, r0
 801a9e8:	2b00      	cmp	r3, #0
 801a9ea:	d104      	bne.n	801a9f6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4618      	mov	r0, r3
 801a9f2:	f7fe fafb 	bl	8018fec <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 801a9f6:	f7fe f8e9 	bl	8018bcc <HAL_GetTick>
 801a9fa:	4602      	mov	r2, r0
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	1ad3      	subs	r3, r2, r3
 801aa00:	2b02      	cmp	r3, #2
 801aa02:	d914      	bls.n	801aa2e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	f003 0301 	and.w	r3, r3, #1
 801aa0e:	2b01      	cmp	r3, #1
 801aa10:	d00d      	beq.n	801aa2e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aa16:	f043 0210 	orr.w	r2, r3, #16
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa22:	f043 0201 	orr.w	r2, r3, #1
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aa2a:	2301      	movs	r3, #1
 801aa2c:	e007      	b.n	801aa3e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	f003 0301 	and.w	r3, r3, #1
 801aa38:	2b01      	cmp	r3, #1
 801aa3a:	d1cf      	bne.n	801a9dc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801aa3c:	2300      	movs	r3, #0
}
 801aa3e:	4618      	mov	r0, r3
 801aa40:	3710      	adds	r7, #16
 801aa42:	46bd      	mov	sp, r7
 801aa44:	bd80      	pop	{r7, pc}
 801aa46:	bf00      	nop
 801aa48:	8000003f 	.word	0x8000003f

0801aa4c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 801aa4c:	b580      	push	{r7, lr}
 801aa4e:	b084      	sub	sp, #16
 801aa50:	af00      	add	r7, sp, #0
 801aa52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	4618      	mov	r0, r3
 801aa5a:	f7fe fb02 	bl	8019062 <LL_ADC_IsDisableOngoing>
 801aa5e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	4618      	mov	r0, r3
 801aa66:	f7fe fae9 	bl	801903c <LL_ADC_IsEnabled>
 801aa6a:	4603      	mov	r3, r0
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	d047      	beq.n	801ab00 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 801aa70:	68fb      	ldr	r3, [r7, #12]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d144      	bne.n	801ab00 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	689b      	ldr	r3, [r3, #8]
 801aa7c:	f003 030d 	and.w	r3, r3, #13
 801aa80:	2b01      	cmp	r3, #1
 801aa82:	d10c      	bne.n	801aa9e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 801aa84:	687b      	ldr	r3, [r7, #4]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	4618      	mov	r0, r3
 801aa8a:	f7fe fac3 	bl	8019014 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	2203      	movs	r2, #3
 801aa94:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 801aa96:	f7fe f899 	bl	8018bcc <HAL_GetTick>
 801aa9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801aa9c:	e029      	b.n	801aaf2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aaa2:	f043 0210 	orr.w	r2, r3, #16
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aaae:	f043 0201 	orr.w	r2, r3, #1
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 801aab6:	2301      	movs	r3, #1
 801aab8:	e023      	b.n	801ab02 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 801aaba:	f7fe f887 	bl	8018bcc <HAL_GetTick>
 801aabe:	4602      	mov	r2, r0
 801aac0:	68bb      	ldr	r3, [r7, #8]
 801aac2:	1ad3      	subs	r3, r2, r3
 801aac4:	2b02      	cmp	r3, #2
 801aac6:	d914      	bls.n	801aaf2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	689b      	ldr	r3, [r3, #8]
 801aace:	f003 0301 	and.w	r3, r3, #1
 801aad2:	2b00      	cmp	r3, #0
 801aad4:	d00d      	beq.n	801aaf2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aada:	f043 0210 	orr.w	r2, r3, #16
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801aae2:	687b      	ldr	r3, [r7, #4]
 801aae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aae6:	f043 0201 	orr.w	r2, r3, #1
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 801aaee:	2301      	movs	r3, #1
 801aaf0:	e007      	b.n	801ab02 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	689b      	ldr	r3, [r3, #8]
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	2b00      	cmp	r3, #0
 801aafe:	d1dc      	bne.n	801aaba <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 801ab00:	2300      	movs	r3, #0
}
 801ab02:	4618      	mov	r0, r3
 801ab04:	3710      	adds	r7, #16
 801ab06:	46bd      	mov	sp, r7
 801ab08:	bd80      	pop	{r7, pc}

0801ab0a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 801ab0a:	b580      	push	{r7, lr}
 801ab0c:	b084      	sub	sp, #16
 801ab0e:	af00      	add	r7, sp, #0
 801ab10:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ab16:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d14b      	bne.n	801abbc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 801ab2c:	68fb      	ldr	r3, [r7, #12]
 801ab2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	f003 0308 	and.w	r3, r3, #8
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	d021      	beq.n	801ab82 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	4618      	mov	r0, r3
 801ab44:	f7fe f942 	bl	8018dcc <LL_ADC_REG_IsTriggerSourceSWStart>
 801ab48:	4603      	mov	r3, r0
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d032      	beq.n	801abb4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	68db      	ldr	r3, [r3, #12]
 801ab54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d12b      	bne.n	801abb4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d11f      	bne.n	801abb4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab78:	f043 0201 	orr.w	r2, r3, #1
 801ab7c:	68fb      	ldr	r3, [r7, #12]
 801ab7e:	65da      	str	r2, [r3, #92]	; 0x5c
 801ab80:	e018      	b.n	801abb4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	68db      	ldr	r3, [r3, #12]
 801ab88:	f003 0302 	and.w	r3, r3, #2
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d111      	bne.n	801abb4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ab94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801aba0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aba4:	2b00      	cmp	r3, #0
 801aba6:	d105      	bne.n	801abb4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801aba8:	68fb      	ldr	r3, [r7, #12]
 801abaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abac:	f043 0201 	orr.w	r2, r3, #1
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801abb4:	68f8      	ldr	r0, [r7, #12]
 801abb6:	f7ed fb67 	bl	8008288 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 801abba:	e00e      	b.n	801abda <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801abc0:	f003 0310 	and.w	r3, r3, #16
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d003      	beq.n	801abd0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 801abc8:	68f8      	ldr	r0, [r7, #12]
 801abca:	f7ff f9eb 	bl	8019fa4 <HAL_ADC_ErrorCallback>
}
 801abce:	e004      	b.n	801abda <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801abd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801abd6:	6878      	ldr	r0, [r7, #4]
 801abd8:	4798      	blx	r3
}
 801abda:	bf00      	nop
 801abdc:	3710      	adds	r7, #16
 801abde:	46bd      	mov	sp, r7
 801abe0:	bd80      	pop	{r7, pc}

0801abe2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 801abe2:	b580      	push	{r7, lr}
 801abe4:	b084      	sub	sp, #16
 801abe6:	af00      	add	r7, sp, #0
 801abe8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801abee:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 801abf0:	68f8      	ldr	r0, [r7, #12]
 801abf2:	f7ff f9c3 	bl	8019f7c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801abf6:	bf00      	nop
 801abf8:	3710      	adds	r7, #16
 801abfa:	46bd      	mov	sp, r7
 801abfc:	bd80      	pop	{r7, pc}

0801abfe <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 801abfe:	b580      	push	{r7, lr}
 801ac00:	b084      	sub	sp, #16
 801ac02:	af00      	add	r7, sp, #0
 801ac04:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ac0a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ac10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ac1c:	f043 0204 	orr.w	r2, r3, #4
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 801ac24:	68f8      	ldr	r0, [r7, #12]
 801ac26:	f7ff f9bd 	bl	8019fa4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 801ac2a:	bf00      	nop
 801ac2c:	3710      	adds	r7, #16
 801ac2e:	46bd      	mov	sp, r7
 801ac30:	bd80      	pop	{r7, pc}

0801ac32 <LL_ADC_IsEnabled>:
{
 801ac32:	b480      	push	{r7}
 801ac34:	b083      	sub	sp, #12
 801ac36:	af00      	add	r7, sp, #0
 801ac38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	689b      	ldr	r3, [r3, #8]
 801ac3e:	f003 0301 	and.w	r3, r3, #1
 801ac42:	2b01      	cmp	r3, #1
 801ac44:	d101      	bne.n	801ac4a <LL_ADC_IsEnabled+0x18>
 801ac46:	2301      	movs	r3, #1
 801ac48:	e000      	b.n	801ac4c <LL_ADC_IsEnabled+0x1a>
 801ac4a:	2300      	movs	r3, #0
}
 801ac4c:	4618      	mov	r0, r3
 801ac4e:	370c      	adds	r7, #12
 801ac50:	46bd      	mov	sp, r7
 801ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac56:	4770      	bx	lr

0801ac58 <LL_ADC_StartCalibration>:
{
 801ac58:	b480      	push	{r7}
 801ac5a:	b083      	sub	sp, #12
 801ac5c:	af00      	add	r7, sp, #0
 801ac5e:	6078      	str	r0, [r7, #4]
 801ac60:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	689b      	ldr	r3, [r3, #8]
 801ac66:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801ac6a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 801ac6e:	683a      	ldr	r2, [r7, #0]
 801ac70:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 801ac74:	4313      	orrs	r3, r2
 801ac76:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	609a      	str	r2, [r3, #8]
}
 801ac7e:	bf00      	nop
 801ac80:	370c      	adds	r7, #12
 801ac82:	46bd      	mov	sp, r7
 801ac84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac88:	4770      	bx	lr

0801ac8a <LL_ADC_IsCalibrationOnGoing>:
{
 801ac8a:	b480      	push	{r7}
 801ac8c:	b083      	sub	sp, #12
 801ac8e:	af00      	add	r7, sp, #0
 801ac90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	689b      	ldr	r3, [r3, #8]
 801ac96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ac9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ac9e:	d101      	bne.n	801aca4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 801aca0:	2301      	movs	r3, #1
 801aca2:	e000      	b.n	801aca6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 801aca4:	2300      	movs	r3, #0
}
 801aca6:	4618      	mov	r0, r3
 801aca8:	370c      	adds	r7, #12
 801acaa:	46bd      	mov	sp, r7
 801acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb0:	4770      	bx	lr

0801acb2 <LL_ADC_REG_IsConversionOngoing>:
{
 801acb2:	b480      	push	{r7}
 801acb4:	b083      	sub	sp, #12
 801acb6:	af00      	add	r7, sp, #0
 801acb8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	689b      	ldr	r3, [r3, #8]
 801acbe:	f003 0304 	and.w	r3, r3, #4
 801acc2:	2b04      	cmp	r3, #4
 801acc4:	d101      	bne.n	801acca <LL_ADC_REG_IsConversionOngoing+0x18>
 801acc6:	2301      	movs	r3, #1
 801acc8:	e000      	b.n	801accc <LL_ADC_REG_IsConversionOngoing+0x1a>
 801acca:	2300      	movs	r3, #0
}
 801accc:	4618      	mov	r0, r3
 801acce:	370c      	adds	r7, #12
 801acd0:	46bd      	mov	sp, r7
 801acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acd6:	4770      	bx	lr

0801acd8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b084      	sub	sp, #16
 801acdc:	af00      	add	r7, sp, #0
 801acde:	6078      	str	r0, [r7, #4]
 801ace0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 801ace2:	2300      	movs	r3, #0
 801ace4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 801ace6:	687b      	ldr	r3, [r7, #4]
 801ace8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801acec:	2b01      	cmp	r3, #1
 801acee:	d101      	bne.n	801acf4 <HAL_ADCEx_Calibration_Start+0x1c>
 801acf0:	2302      	movs	r3, #2
 801acf2:	e04d      	b.n	801ad90 <HAL_ADCEx_Calibration_Start+0xb8>
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2201      	movs	r2, #1
 801acf8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 801acfc:	6878      	ldr	r0, [r7, #4]
 801acfe:	f7ff fea5 	bl	801aa4c <ADC_Disable>
 801ad02:	4603      	mov	r3, r0
 801ad04:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 801ad06:	7bfb      	ldrb	r3, [r7, #15]
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d136      	bne.n	801ad7a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad10:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 801ad14:	f023 0302 	bic.w	r3, r3, #2
 801ad18:	f043 0202 	orr.w	r2, r3, #2
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	6839      	ldr	r1, [r7, #0]
 801ad26:	4618      	mov	r0, r3
 801ad28:	f7ff ff96 	bl	801ac58 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ad2c:	e014      	b.n	801ad58 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	3301      	adds	r3, #1
 801ad32:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 801ad34:	68bb      	ldr	r3, [r7, #8]
 801ad36:	4a18      	ldr	r2, [pc, #96]	; (801ad98 <HAL_ADCEx_Calibration_Start+0xc0>)
 801ad38:	4293      	cmp	r3, r2
 801ad3a:	d90d      	bls.n	801ad58 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad40:	f023 0312 	bic.w	r3, r3, #18
 801ad44:	f043 0210 	orr.w	r2, r3, #16
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 801ad4c:	687b      	ldr	r3, [r7, #4]
 801ad4e:	2200      	movs	r2, #0
 801ad50:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 801ad54:	2301      	movs	r3, #1
 801ad56:	e01b      	b.n	801ad90 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	681b      	ldr	r3, [r3, #0]
 801ad5c:	4618      	mov	r0, r3
 801ad5e:	f7ff ff94 	bl	801ac8a <LL_ADC_IsCalibrationOnGoing>
 801ad62:	4603      	mov	r3, r0
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d1e2      	bne.n	801ad2e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801ad68:	687b      	ldr	r3, [r7, #4]
 801ad6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad6c:	f023 0303 	bic.w	r3, r3, #3
 801ad70:	f043 0201 	orr.w	r2, r3, #1
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	65da      	str	r2, [r3, #92]	; 0x5c
 801ad78:	e005      	b.n	801ad86 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ad7e:	f043 0210 	orr.w	r2, r3, #16
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	2200      	movs	r2, #0
 801ad8a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801ad8e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad90:	4618      	mov	r0, r3
 801ad92:	3710      	adds	r7, #16
 801ad94:	46bd      	mov	sp, r7
 801ad96:	bd80      	pop	{r7, pc}
 801ad98:	0004de01 	.word	0x0004de01

0801ad9c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801ad9c:	b480      	push	{r7}
 801ad9e:	b083      	sub	sp, #12
 801ada0:	af00      	add	r7, sp, #0
 801ada2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 801ada4:	bf00      	nop
 801ada6:	370c      	adds	r7, #12
 801ada8:	46bd      	mov	sp, r7
 801adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adae:	4770      	bx	lr

0801adb0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 801adb0:	b480      	push	{r7}
 801adb2:	b083      	sub	sp, #12
 801adb4:	af00      	add	r7, sp, #0
 801adb6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 801adb8:	bf00      	nop
 801adba:	370c      	adds	r7, #12
 801adbc:	46bd      	mov	sp, r7
 801adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adc2:	4770      	bx	lr

0801adc4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 801adc4:	b480      	push	{r7}
 801adc6:	b083      	sub	sp, #12
 801adc8:	af00      	add	r7, sp, #0
 801adca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801adcc:	bf00      	nop
 801adce:	370c      	adds	r7, #12
 801add0:	46bd      	mov	sp, r7
 801add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801add6:	4770      	bx	lr

0801add8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 801add8:	b480      	push	{r7}
 801adda:	b083      	sub	sp, #12
 801addc:	af00      	add	r7, sp, #0
 801adde:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801ade0:	bf00      	nop
 801ade2:	370c      	adds	r7, #12
 801ade4:	46bd      	mov	sp, r7
 801ade6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adea:	4770      	bx	lr

0801adec <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801adec:	b480      	push	{r7}
 801adee:	b083      	sub	sp, #12
 801adf0:	af00      	add	r7, sp, #0
 801adf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 801adf4:	bf00      	nop
 801adf6:	370c      	adds	r7, #12
 801adf8:	46bd      	mov	sp, r7
 801adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfe:	4770      	bx	lr

0801ae00 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801ae00:	b590      	push	{r4, r7, lr}
 801ae02:	b0a1      	sub	sp, #132	; 0x84
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801ae0a:	2300      	movs	r3, #0
 801ae0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801ae16:	2b01      	cmp	r3, #1
 801ae18:	d101      	bne.n	801ae1e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801ae1a:	2302      	movs	r3, #2
 801ae1c:	e0cb      	b.n	801afb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	2201      	movs	r2, #1
 801ae22:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 801ae26:	2300      	movs	r3, #0
 801ae28:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ae36:	d102      	bne.n	801ae3e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 801ae38:	4b61      	ldr	r3, [pc, #388]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ae3a:	60bb      	str	r3, [r7, #8]
 801ae3c:	e001      	b.n	801ae42 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801ae3e:	2300      	movs	r3, #0
 801ae40:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 801ae42:	68bb      	ldr	r3, [r7, #8]
 801ae44:	2b00      	cmp	r3, #0
 801ae46:	d10b      	bne.n	801ae60 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801ae48:	687b      	ldr	r3, [r7, #4]
 801ae4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801ae4c:	f043 0220 	orr.w	r2, r3, #32
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	2200      	movs	r2, #0
 801ae58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 801ae5c:	2301      	movs	r3, #1
 801ae5e:	e0aa      	b.n	801afb6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801ae60:	68bb      	ldr	r3, [r7, #8]
 801ae62:	4618      	mov	r0, r3
 801ae64:	f7ff ff25 	bl	801acb2 <LL_ADC_REG_IsConversionOngoing>
 801ae68:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	4618      	mov	r0, r3
 801ae70:	f7ff ff1f 	bl	801acb2 <LL_ADC_REG_IsConversionOngoing>
 801ae74:	4603      	mov	r3, r0
 801ae76:	2b00      	cmp	r3, #0
 801ae78:	f040 808c 	bne.w	801af94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 801ae7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	f040 8088 	bne.w	801af94 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801ae8c:	d004      	beq.n	801ae98 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	4a4b      	ldr	r2, [pc, #300]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801ae94:	4293      	cmp	r3, r2
 801ae96:	d101      	bne.n	801ae9c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 801ae98:	4b4a      	ldr	r3, [pc, #296]	; (801afc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 801ae9a:	e000      	b.n	801ae9e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801ae9c:	4b4a      	ldr	r3, [pc, #296]	; (801afc8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 801ae9e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801aea0:	683b      	ldr	r3, [r7, #0]
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	d041      	beq.n	801af2c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 801aea8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aeaa:	689b      	ldr	r3, [r3, #8]
 801aeac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801aeb0:	683b      	ldr	r3, [r7, #0]
 801aeb2:	6859      	ldr	r1, [r3, #4]
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801aeba:	035b      	lsls	r3, r3, #13
 801aebc:	430b      	orrs	r3, r1
 801aebe:	431a      	orrs	r2, r3
 801aec0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801aec2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801aecc:	d004      	beq.n	801aed8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	4a3b      	ldr	r2, [pc, #236]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801aed4:	4293      	cmp	r3, r2
 801aed6:	d10f      	bne.n	801aef8 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 801aed8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801aedc:	f7ff fea9 	bl	801ac32 <LL_ADC_IsEnabled>
 801aee0:	4604      	mov	r4, r0
 801aee2:	4837      	ldr	r0, [pc, #220]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801aee4:	f7ff fea5 	bl	801ac32 <LL_ADC_IsEnabled>
 801aee8:	4603      	mov	r3, r0
 801aeea:	4323      	orrs	r3, r4
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	bf0c      	ite	eq
 801aef0:	2301      	moveq	r3, #1
 801aef2:	2300      	movne	r3, #0
 801aef4:	b2db      	uxtb	r3, r3
 801aef6:	e008      	b.n	801af0a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 801aef8:	4834      	ldr	r0, [pc, #208]	; (801afcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801aefa:	f7ff fe9a 	bl	801ac32 <LL_ADC_IsEnabled>
 801aefe:	4603      	mov	r3, r0
 801af00:	2b00      	cmp	r3, #0
 801af02:	bf0c      	ite	eq
 801af04:	2301      	moveq	r3, #1
 801af06:	2300      	movne	r3, #0
 801af08:	b2db      	uxtb	r3, r3
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d04c      	beq.n	801afa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801af0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af10:	689b      	ldr	r3, [r3, #8]
 801af12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801af16:	f023 030f 	bic.w	r3, r3, #15
 801af1a:	683a      	ldr	r2, [r7, #0]
 801af1c:	6811      	ldr	r1, [r2, #0]
 801af1e:	683a      	ldr	r2, [r7, #0]
 801af20:	6892      	ldr	r2, [r2, #8]
 801af22:	430a      	orrs	r2, r1
 801af24:	431a      	orrs	r2, r3
 801af26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af28:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801af2a:	e03d      	b.n	801afa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 801af2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af2e:	689b      	ldr	r3, [r3, #8]
 801af30:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801af34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af36:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801af40:	d004      	beq.n	801af4c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a1e      	ldr	r2, [pc, #120]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d10f      	bne.n	801af6c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 801af4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 801af50:	f7ff fe6f 	bl	801ac32 <LL_ADC_IsEnabled>
 801af54:	4604      	mov	r4, r0
 801af56:	481a      	ldr	r0, [pc, #104]	; (801afc0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801af58:	f7ff fe6b 	bl	801ac32 <LL_ADC_IsEnabled>
 801af5c:	4603      	mov	r3, r0
 801af5e:	4323      	orrs	r3, r4
 801af60:	2b00      	cmp	r3, #0
 801af62:	bf0c      	ite	eq
 801af64:	2301      	moveq	r3, #1
 801af66:	2300      	movne	r3, #0
 801af68:	b2db      	uxtb	r3, r3
 801af6a:	e008      	b.n	801af7e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 801af6c:	4817      	ldr	r0, [pc, #92]	; (801afcc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 801af6e:	f7ff fe60 	bl	801ac32 <LL_ADC_IsEnabled>
 801af72:	4603      	mov	r3, r0
 801af74:	2b00      	cmp	r3, #0
 801af76:	bf0c      	ite	eq
 801af78:	2301      	moveq	r3, #1
 801af7a:	2300      	movne	r3, #0
 801af7c:	b2db      	uxtb	r3, r3
 801af7e:	2b00      	cmp	r3, #0
 801af80:	d012      	beq.n	801afa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801af82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801af84:	689b      	ldr	r3, [r3, #8]
 801af86:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 801af8a:	f023 030f 	bic.w	r3, r3, #15
 801af8e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801af90:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801af92:	e009      	b.n	801afa8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 801af94:	687b      	ldr	r3, [r7, #4]
 801af96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801af98:	f043 0220 	orr.w	r2, r3, #32
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 801afa0:	2301      	movs	r3, #1
 801afa2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 801afa6:	e000      	b.n	801afaa <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801afa8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2200      	movs	r2, #0
 801afae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 801afb2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	3784      	adds	r7, #132	; 0x84
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd90      	pop	{r4, r7, pc}
 801afbe:	bf00      	nop
 801afc0:	50000100 	.word	0x50000100
 801afc4:	50000300 	.word	0x50000300
 801afc8:	50000700 	.word	0x50000700
 801afcc:	50000400 	.word	0x50000400

0801afd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801afd0:	b480      	push	{r7}
 801afd2:	b085      	sub	sp, #20
 801afd4:	af00      	add	r7, sp, #0
 801afd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	f003 0307 	and.w	r3, r3, #7
 801afde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801afe0:	4b0c      	ldr	r3, [pc, #48]	; (801b014 <__NVIC_SetPriorityGrouping+0x44>)
 801afe2:	68db      	ldr	r3, [r3, #12]
 801afe4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801afe6:	68ba      	ldr	r2, [r7, #8]
 801afe8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801afec:	4013      	ands	r3, r2
 801afee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801aff4:	68bb      	ldr	r3, [r7, #8]
 801aff6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 801aff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 801affc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b000:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801b002:	4a04      	ldr	r2, [pc, #16]	; (801b014 <__NVIC_SetPriorityGrouping+0x44>)
 801b004:	68bb      	ldr	r3, [r7, #8]
 801b006:	60d3      	str	r3, [r2, #12]
}
 801b008:	bf00      	nop
 801b00a:	3714      	adds	r7, #20
 801b00c:	46bd      	mov	sp, r7
 801b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b012:	4770      	bx	lr
 801b014:	e000ed00 	.word	0xe000ed00

0801b018 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801b018:	b480      	push	{r7}
 801b01a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801b01c:	4b04      	ldr	r3, [pc, #16]	; (801b030 <__NVIC_GetPriorityGrouping+0x18>)
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	0a1b      	lsrs	r3, r3, #8
 801b022:	f003 0307 	and.w	r3, r3, #7
}
 801b026:	4618      	mov	r0, r3
 801b028:	46bd      	mov	sp, r7
 801b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02e:	4770      	bx	lr
 801b030:	e000ed00 	.word	0xe000ed00

0801b034 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b034:	b480      	push	{r7}
 801b036:	b083      	sub	sp, #12
 801b038:	af00      	add	r7, sp, #0
 801b03a:	4603      	mov	r3, r0
 801b03c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b03e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b042:	2b00      	cmp	r3, #0
 801b044:	db0b      	blt.n	801b05e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801b046:	79fb      	ldrb	r3, [r7, #7]
 801b048:	f003 021f 	and.w	r2, r3, #31
 801b04c:	4907      	ldr	r1, [pc, #28]	; (801b06c <__NVIC_EnableIRQ+0x38>)
 801b04e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b052:	095b      	lsrs	r3, r3, #5
 801b054:	2001      	movs	r0, #1
 801b056:	fa00 f202 	lsl.w	r2, r0, r2
 801b05a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801b05e:	bf00      	nop
 801b060:	370c      	adds	r7, #12
 801b062:	46bd      	mov	sp, r7
 801b064:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b068:	4770      	bx	lr
 801b06a:	bf00      	nop
 801b06c:	e000e100 	.word	0xe000e100

0801b070 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801b070:	b480      	push	{r7}
 801b072:	b083      	sub	sp, #12
 801b074:	af00      	add	r7, sp, #0
 801b076:	4603      	mov	r3, r0
 801b078:	6039      	str	r1, [r7, #0]
 801b07a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801b07c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b080:	2b00      	cmp	r3, #0
 801b082:	db0a      	blt.n	801b09a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b084:	683b      	ldr	r3, [r7, #0]
 801b086:	b2da      	uxtb	r2, r3
 801b088:	490c      	ldr	r1, [pc, #48]	; (801b0bc <__NVIC_SetPriority+0x4c>)
 801b08a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b08e:	0112      	lsls	r2, r2, #4
 801b090:	b2d2      	uxtb	r2, r2
 801b092:	440b      	add	r3, r1
 801b094:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801b098:	e00a      	b.n	801b0b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801b09a:	683b      	ldr	r3, [r7, #0]
 801b09c:	b2da      	uxtb	r2, r3
 801b09e:	4908      	ldr	r1, [pc, #32]	; (801b0c0 <__NVIC_SetPriority+0x50>)
 801b0a0:	79fb      	ldrb	r3, [r7, #7]
 801b0a2:	f003 030f 	and.w	r3, r3, #15
 801b0a6:	3b04      	subs	r3, #4
 801b0a8:	0112      	lsls	r2, r2, #4
 801b0aa:	b2d2      	uxtb	r2, r2
 801b0ac:	440b      	add	r3, r1
 801b0ae:	761a      	strb	r2, [r3, #24]
}
 801b0b0:	bf00      	nop
 801b0b2:	370c      	adds	r7, #12
 801b0b4:	46bd      	mov	sp, r7
 801b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0ba:	4770      	bx	lr
 801b0bc:	e000e100 	.word	0xe000e100
 801b0c0:	e000ed00 	.word	0xe000ed00

0801b0c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b0c4:	b480      	push	{r7}
 801b0c6:	b089      	sub	sp, #36	; 0x24
 801b0c8:	af00      	add	r7, sp, #0
 801b0ca:	60f8      	str	r0, [r7, #12]
 801b0cc:	60b9      	str	r1, [r7, #8]
 801b0ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801b0d0:	68fb      	ldr	r3, [r7, #12]
 801b0d2:	f003 0307 	and.w	r3, r3, #7
 801b0d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801b0d8:	69fb      	ldr	r3, [r7, #28]
 801b0da:	f1c3 0307 	rsb	r3, r3, #7
 801b0de:	2b04      	cmp	r3, #4
 801b0e0:	bf28      	it	cs
 801b0e2:	2304      	movcs	r3, #4
 801b0e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801b0e6:	69fb      	ldr	r3, [r7, #28]
 801b0e8:	3304      	adds	r3, #4
 801b0ea:	2b06      	cmp	r3, #6
 801b0ec:	d902      	bls.n	801b0f4 <NVIC_EncodePriority+0x30>
 801b0ee:	69fb      	ldr	r3, [r7, #28]
 801b0f0:	3b03      	subs	r3, #3
 801b0f2:	e000      	b.n	801b0f6 <NVIC_EncodePriority+0x32>
 801b0f4:	2300      	movs	r3, #0
 801b0f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b0f8:	f04f 32ff 	mov.w	r2, #4294967295
 801b0fc:	69bb      	ldr	r3, [r7, #24]
 801b0fe:	fa02 f303 	lsl.w	r3, r2, r3
 801b102:	43da      	mvns	r2, r3
 801b104:	68bb      	ldr	r3, [r7, #8]
 801b106:	401a      	ands	r2, r3
 801b108:	697b      	ldr	r3, [r7, #20]
 801b10a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801b10c:	f04f 31ff 	mov.w	r1, #4294967295
 801b110:	697b      	ldr	r3, [r7, #20]
 801b112:	fa01 f303 	lsl.w	r3, r1, r3
 801b116:	43d9      	mvns	r1, r3
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801b11c:	4313      	orrs	r3, r2
         );
}
 801b11e:	4618      	mov	r0, r3
 801b120:	3724      	adds	r7, #36	; 0x24
 801b122:	46bd      	mov	sp, r7
 801b124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b128:	4770      	bx	lr
	...

0801b12c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801b12c:	b580      	push	{r7, lr}
 801b12e:	b082      	sub	sp, #8
 801b130:	af00      	add	r7, sp, #0
 801b132:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	3b01      	subs	r3, #1
 801b138:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801b13c:	d301      	bcc.n	801b142 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801b13e:	2301      	movs	r3, #1
 801b140:	e00f      	b.n	801b162 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801b142:	4a0a      	ldr	r2, [pc, #40]	; (801b16c <SysTick_Config+0x40>)
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	3b01      	subs	r3, #1
 801b148:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801b14a:	210f      	movs	r1, #15
 801b14c:	f04f 30ff 	mov.w	r0, #4294967295
 801b150:	f7ff ff8e 	bl	801b070 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801b154:	4b05      	ldr	r3, [pc, #20]	; (801b16c <SysTick_Config+0x40>)
 801b156:	2200      	movs	r2, #0
 801b158:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801b15a:	4b04      	ldr	r3, [pc, #16]	; (801b16c <SysTick_Config+0x40>)
 801b15c:	2207      	movs	r2, #7
 801b15e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801b160:	2300      	movs	r3, #0
}
 801b162:	4618      	mov	r0, r3
 801b164:	3708      	adds	r7, #8
 801b166:	46bd      	mov	sp, r7
 801b168:	bd80      	pop	{r7, pc}
 801b16a:	bf00      	nop
 801b16c:	e000e010 	.word	0xe000e010

0801b170 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b082      	sub	sp, #8
 801b174:	af00      	add	r7, sp, #0
 801b176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801b178:	6878      	ldr	r0, [r7, #4]
 801b17a:	f7ff ff29 	bl	801afd0 <__NVIC_SetPriorityGrouping>
}
 801b17e:	bf00      	nop
 801b180:	3708      	adds	r7, #8
 801b182:	46bd      	mov	sp, r7
 801b184:	bd80      	pop	{r7, pc}

0801b186 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801b186:	b580      	push	{r7, lr}
 801b188:	b086      	sub	sp, #24
 801b18a:	af00      	add	r7, sp, #0
 801b18c:	4603      	mov	r3, r0
 801b18e:	60b9      	str	r1, [r7, #8]
 801b190:	607a      	str	r2, [r7, #4]
 801b192:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801b194:	f7ff ff40 	bl	801b018 <__NVIC_GetPriorityGrouping>
 801b198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801b19a:	687a      	ldr	r2, [r7, #4]
 801b19c:	68b9      	ldr	r1, [r7, #8]
 801b19e:	6978      	ldr	r0, [r7, #20]
 801b1a0:	f7ff ff90 	bl	801b0c4 <NVIC_EncodePriority>
 801b1a4:	4602      	mov	r2, r0
 801b1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b1aa:	4611      	mov	r1, r2
 801b1ac:	4618      	mov	r0, r3
 801b1ae:	f7ff ff5f 	bl	801b070 <__NVIC_SetPriority>
}
 801b1b2:	bf00      	nop
 801b1b4:	3718      	adds	r7, #24
 801b1b6:	46bd      	mov	sp, r7
 801b1b8:	bd80      	pop	{r7, pc}

0801b1ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801b1ba:	b580      	push	{r7, lr}
 801b1bc:	b082      	sub	sp, #8
 801b1be:	af00      	add	r7, sp, #0
 801b1c0:	4603      	mov	r3, r0
 801b1c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801b1c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b1c8:	4618      	mov	r0, r3
 801b1ca:	f7ff ff33 	bl	801b034 <__NVIC_EnableIRQ>
}
 801b1ce:	bf00      	nop
 801b1d0:	3708      	adds	r7, #8
 801b1d2:	46bd      	mov	sp, r7
 801b1d4:	bd80      	pop	{r7, pc}

0801b1d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801b1d6:	b580      	push	{r7, lr}
 801b1d8:	b082      	sub	sp, #8
 801b1da:	af00      	add	r7, sp, #0
 801b1dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801b1de:	6878      	ldr	r0, [r7, #4]
 801b1e0:	f7ff ffa4 	bl	801b12c <SysTick_Config>
 801b1e4:	4603      	mov	r3, r0
}
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	3708      	adds	r7, #8
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}
	...

0801b1f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801b1f0:	b580      	push	{r7, lr}
 801b1f2:	b084      	sub	sp, #16
 801b1f4:	af00      	add	r7, sp, #0
 801b1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d101      	bne.n	801b202 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 801b1fe:	2301      	movs	r3, #1
 801b200:	e08d      	b.n	801b31e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	461a      	mov	r2, r3
 801b208:	4b47      	ldr	r3, [pc, #284]	; (801b328 <HAL_DMA_Init+0x138>)
 801b20a:	429a      	cmp	r2, r3
 801b20c:	d80f      	bhi.n	801b22e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	461a      	mov	r2, r3
 801b214:	4b45      	ldr	r3, [pc, #276]	; (801b32c <HAL_DMA_Init+0x13c>)
 801b216:	4413      	add	r3, r2
 801b218:	4a45      	ldr	r2, [pc, #276]	; (801b330 <HAL_DMA_Init+0x140>)
 801b21a:	fba2 2303 	umull	r2, r3, r2, r3
 801b21e:	091b      	lsrs	r3, r3, #4
 801b220:	009a      	lsls	r2, r3, #2
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	4a42      	ldr	r2, [pc, #264]	; (801b334 <HAL_DMA_Init+0x144>)
 801b22a:	641a      	str	r2, [r3, #64]	; 0x40
 801b22c:	e00e      	b.n	801b24c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	461a      	mov	r2, r3
 801b234:	4b40      	ldr	r3, [pc, #256]	; (801b338 <HAL_DMA_Init+0x148>)
 801b236:	4413      	add	r3, r2
 801b238:	4a3d      	ldr	r2, [pc, #244]	; (801b330 <HAL_DMA_Init+0x140>)
 801b23a:	fba2 2303 	umull	r2, r3, r2, r3
 801b23e:	091b      	lsrs	r3, r3, #4
 801b240:	009a      	lsls	r2, r3, #2
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	4a3c      	ldr	r2, [pc, #240]	; (801b33c <HAL_DMA_Init+0x14c>)
 801b24a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	2202      	movs	r2, #2
 801b250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 801b254:	687b      	ldr	r3, [r7, #4]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801b262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801b266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801b270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	691b      	ldr	r3, [r3, #16]
 801b276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801b27c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	699b      	ldr	r3, [r3, #24]
 801b282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801b288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	6a1b      	ldr	r3, [r3, #32]
 801b28e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801b290:	68fa      	ldr	r2, [r7, #12]
 801b292:	4313      	orrs	r3, r2
 801b294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	68fa      	ldr	r2, [r7, #12]
 801b29c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b29e:	6878      	ldr	r0, [r7, #4]
 801b2a0:	f000 fa10 	bl	801b6c4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	689b      	ldr	r3, [r3, #8]
 801b2a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b2ac:	d102      	bne.n	801b2b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b2ae:	687b      	ldr	r3, [r7, #4]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	685a      	ldr	r2, [r3, #4]
 801b2b8:	687b      	ldr	r3, [r7, #4]
 801b2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b2bc:	b2d2      	uxtb	r2, r2
 801b2be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b2c4:	687a      	ldr	r2, [r7, #4]
 801b2c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b2c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	685b      	ldr	r3, [r3, #4]
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d010      	beq.n	801b2f4 <HAL_DMA_Init+0x104>
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	685b      	ldr	r3, [r3, #4]
 801b2d6:	2b04      	cmp	r3, #4
 801b2d8:	d80c      	bhi.n	801b2f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b2da:	6878      	ldr	r0, [r7, #4]
 801b2dc:	f000 fa30 	bl	801b740 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801b2e0:	687b      	ldr	r3, [r7, #4]
 801b2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b2e4:	2200      	movs	r2, #0
 801b2e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b2ec:	687a      	ldr	r2, [r7, #4]
 801b2ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b2f0:	605a      	str	r2, [r3, #4]
 801b2f2:	e008      	b.n	801b306 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	2200      	movs	r2, #0
 801b2fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2200      	movs	r2, #0
 801b304:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	2200      	movs	r2, #0
 801b30a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	2201      	movs	r2, #1
 801b310:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	2200      	movs	r2, #0
 801b318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801b31c:	2300      	movs	r3, #0
}
 801b31e:	4618      	mov	r0, r3
 801b320:	3710      	adds	r7, #16
 801b322:	46bd      	mov	sp, r7
 801b324:	bd80      	pop	{r7, pc}
 801b326:	bf00      	nop
 801b328:	40020407 	.word	0x40020407
 801b32c:	bffdfff8 	.word	0xbffdfff8
 801b330:	cccccccd 	.word	0xcccccccd
 801b334:	40020000 	.word	0x40020000
 801b338:	bffdfbf8 	.word	0xbffdfbf8
 801b33c:	40020400 	.word	0x40020400

0801b340 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b086      	sub	sp, #24
 801b344:	af00      	add	r7, sp, #0
 801b346:	60f8      	str	r0, [r7, #12]
 801b348:	60b9      	str	r1, [r7, #8]
 801b34a:	607a      	str	r2, [r7, #4]
 801b34c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801b34e:	2300      	movs	r3, #0
 801b350:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801b358:	2b01      	cmp	r3, #1
 801b35a:	d101      	bne.n	801b360 <HAL_DMA_Start_IT+0x20>
 801b35c:	2302      	movs	r3, #2
 801b35e:	e066      	b.n	801b42e <HAL_DMA_Start_IT+0xee>
 801b360:	68fb      	ldr	r3, [r7, #12]
 801b362:	2201      	movs	r2, #1
 801b364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b36e:	b2db      	uxtb	r3, r3
 801b370:	2b01      	cmp	r3, #1
 801b372:	d155      	bne.n	801b420 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801b374:	68fb      	ldr	r3, [r7, #12]
 801b376:	2202      	movs	r2, #2
 801b378:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b37c:	68fb      	ldr	r3, [r7, #12]
 801b37e:	2200      	movs	r2, #0
 801b380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801b382:	68fb      	ldr	r3, [r7, #12]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	681a      	ldr	r2, [r3, #0]
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	681b      	ldr	r3, [r3, #0]
 801b38c:	f022 0201 	bic.w	r2, r2, #1
 801b390:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 801b392:	683b      	ldr	r3, [r7, #0]
 801b394:	687a      	ldr	r2, [r7, #4]
 801b396:	68b9      	ldr	r1, [r7, #8]
 801b398:	68f8      	ldr	r0, [r7, #12]
 801b39a:	f000 f954 	bl	801b646 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 801b39e:	68fb      	ldr	r3, [r7, #12]
 801b3a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d008      	beq.n	801b3b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b3a6:	68fb      	ldr	r3, [r7, #12]
 801b3a8:	681b      	ldr	r3, [r3, #0]
 801b3aa:	681a      	ldr	r2, [r3, #0]
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	f042 020e 	orr.w	r2, r2, #14
 801b3b4:	601a      	str	r2, [r3, #0]
 801b3b6:	e00f      	b.n	801b3d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b3b8:	68fb      	ldr	r3, [r7, #12]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	681a      	ldr	r2, [r3, #0]
 801b3be:	68fb      	ldr	r3, [r7, #12]
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	f022 0204 	bic.w	r2, r2, #4
 801b3c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	681a      	ldr	r2, [r3, #0]
 801b3ce:	68fb      	ldr	r3, [r7, #12]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	f042 020a 	orr.w	r2, r2, #10
 801b3d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801b3d8:	68fb      	ldr	r3, [r7, #12]
 801b3da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b3e2:	2b00      	cmp	r3, #0
 801b3e4:	d007      	beq.n	801b3f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801b3e6:	68fb      	ldr	r3, [r7, #12]
 801b3e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3ea:	681a      	ldr	r2, [r3, #0]
 801b3ec:	68fb      	ldr	r3, [r7, #12]
 801b3ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b3f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b3f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 801b3f6:	68fb      	ldr	r3, [r7, #12]
 801b3f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d007      	beq.n	801b40e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 801b3fe:	68fb      	ldr	r3, [r7, #12]
 801b400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b402:	681a      	ldr	r2, [r3, #0]
 801b404:	68fb      	ldr	r3, [r7, #12]
 801b406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801b40c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 801b40e:	68fb      	ldr	r3, [r7, #12]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	681a      	ldr	r2, [r3, #0]
 801b414:	68fb      	ldr	r3, [r7, #12]
 801b416:	681b      	ldr	r3, [r3, #0]
 801b418:	f042 0201 	orr.w	r2, r2, #1
 801b41c:	601a      	str	r2, [r3, #0]
 801b41e:	e005      	b.n	801b42c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b420:	68fb      	ldr	r3, [r7, #12]
 801b422:	2200      	movs	r2, #0
 801b424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 801b428:	2302      	movs	r3, #2
 801b42a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 801b42c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b42e:	4618      	mov	r0, r3
 801b430:	3718      	adds	r7, #24
 801b432:	46bd      	mov	sp, r7
 801b434:	bd80      	pop	{r7, pc}

0801b436 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801b436:	b480      	push	{r7}
 801b438:	b085      	sub	sp, #20
 801b43a:	af00      	add	r7, sp, #0
 801b43c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b43e:	2300      	movs	r3, #0
 801b440:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b448:	b2db      	uxtb	r3, r3
 801b44a:	2b02      	cmp	r3, #2
 801b44c:	d005      	beq.n	801b45a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	2204      	movs	r2, #4
 801b452:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 801b454:	2301      	movs	r3, #1
 801b456:	73fb      	strb	r3, [r7, #15]
 801b458:	e037      	b.n	801b4ca <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	681b      	ldr	r3, [r3, #0]
 801b45e:	681a      	ldr	r2, [r3, #0]
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	f022 020e 	bic.w	r2, r2, #14
 801b468:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b46a:	687b      	ldr	r3, [r7, #4]
 801b46c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b46e:	681a      	ldr	r2, [r3, #0]
 801b470:	687b      	ldr	r3, [r7, #4]
 801b472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b478:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	681a      	ldr	r2, [r3, #0]
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	f022 0201 	bic.w	r2, r2, #1
 801b488:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b48e:	f003 021f 	and.w	r2, r3, #31
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b496:	2101      	movs	r1, #1
 801b498:	fa01 f202 	lsl.w	r2, r1, r2
 801b49c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b4a2:	687a      	ldr	r2, [r7, #4]
 801b4a4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b4a6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4ac:	2b00      	cmp	r3, #0
 801b4ae:	d00c      	beq.n	801b4ca <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4b4:	681a      	ldr	r2, [r3, #0]
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b4ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 801b4be:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b4c4:	687a      	ldr	r2, [r7, #4]
 801b4c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b4c8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b4ca:	687b      	ldr	r3, [r7, #4]
 801b4cc:	2201      	movs	r2, #1
 801b4ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	2200      	movs	r2, #0
 801b4d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 801b4da:	7bfb      	ldrb	r3, [r7, #15]
}
 801b4dc:	4618      	mov	r0, r3
 801b4de:	3714      	adds	r7, #20
 801b4e0:	46bd      	mov	sp, r7
 801b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4e6:	4770      	bx	lr

0801b4e8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b4e8:	b580      	push	{r7, lr}
 801b4ea:	b084      	sub	sp, #16
 801b4ec:	af00      	add	r7, sp, #0
 801b4ee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f4:	681b      	ldr	r3, [r3, #0]
 801b4f6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	681b      	ldr	r3, [r3, #0]
 801b4fe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 801b500:	687b      	ldr	r3, [r7, #4]
 801b502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b504:	f003 031f 	and.w	r3, r3, #31
 801b508:	2204      	movs	r2, #4
 801b50a:	409a      	lsls	r2, r3
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	4013      	ands	r3, r2
 801b510:	2b00      	cmp	r3, #0
 801b512:	d026      	beq.n	801b562 <HAL_DMA_IRQHandler+0x7a>
 801b514:	68bb      	ldr	r3, [r7, #8]
 801b516:	f003 0304 	and.w	r3, r3, #4
 801b51a:	2b00      	cmp	r3, #0
 801b51c:	d021      	beq.n	801b562 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b51e:	687b      	ldr	r3, [r7, #4]
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f003 0320 	and.w	r3, r3, #32
 801b528:	2b00      	cmp	r3, #0
 801b52a:	d107      	bne.n	801b53c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	681b      	ldr	r3, [r3, #0]
 801b530:	681a      	ldr	r2, [r3, #0]
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	f022 0204 	bic.w	r2, r2, #4
 801b53a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b540:	f003 021f 	and.w	r2, r3, #31
 801b544:	687b      	ldr	r3, [r7, #4]
 801b546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b548:	2104      	movs	r1, #4
 801b54a:	fa01 f202 	lsl.w	r2, r1, r2
 801b54e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 801b550:	687b      	ldr	r3, [r7, #4]
 801b552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b554:	2b00      	cmp	r3, #0
 801b556:	d071      	beq.n	801b63c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 801b560:	e06c      	b.n	801b63c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b566:	f003 031f 	and.w	r3, r3, #31
 801b56a:	2202      	movs	r2, #2
 801b56c:	409a      	lsls	r2, r3
 801b56e:	68fb      	ldr	r3, [r7, #12]
 801b570:	4013      	ands	r3, r2
 801b572:	2b00      	cmp	r3, #0
 801b574:	d02e      	beq.n	801b5d4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801b576:	68bb      	ldr	r3, [r7, #8]
 801b578:	f003 0302 	and.w	r3, r3, #2
 801b57c:	2b00      	cmp	r3, #0
 801b57e:	d029      	beq.n	801b5d4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	681b      	ldr	r3, [r3, #0]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	f003 0320 	and.w	r3, r3, #32
 801b58a:	2b00      	cmp	r3, #0
 801b58c:	d10b      	bne.n	801b5a6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b58e:	687b      	ldr	r3, [r7, #4]
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	681a      	ldr	r2, [r3, #0]
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	f022 020a 	bic.w	r2, r2, #10
 801b59c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b59e:	687b      	ldr	r3, [r7, #4]
 801b5a0:	2201      	movs	r2, #1
 801b5a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5aa:	f003 021f 	and.w	r2, r3, #31
 801b5ae:	687b      	ldr	r3, [r7, #4]
 801b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b5b2:	2102      	movs	r1, #2
 801b5b4:	fa01 f202 	lsl.w	r2, r1, r2
 801b5b8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	2200      	movs	r2, #0
 801b5be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 801b5c2:	687b      	ldr	r3, [r7, #4]
 801b5c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d038      	beq.n	801b63c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801b5d2:	e033      	b.n	801b63c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b5d8:	f003 031f 	and.w	r3, r3, #31
 801b5dc:	2208      	movs	r2, #8
 801b5de:	409a      	lsls	r2, r3
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	4013      	ands	r3, r2
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	d02a      	beq.n	801b63e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801b5e8:	68bb      	ldr	r3, [r7, #8]
 801b5ea:	f003 0308 	and.w	r3, r3, #8
 801b5ee:	2b00      	cmp	r3, #0
 801b5f0:	d025      	beq.n	801b63e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	681b      	ldr	r3, [r3, #0]
 801b5f6:	681a      	ldr	r2, [r3, #0]
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f022 020e 	bic.w	r2, r2, #14
 801b600:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b606:	f003 021f 	and.w	r2, r3, #31
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b60e:	2101      	movs	r1, #1
 801b610:	fa01 f202 	lsl.w	r2, r1, r2
 801b614:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	2201      	movs	r2, #1
 801b61a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	2201      	movs	r2, #1
 801b620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	2200      	movs	r2, #0
 801b628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b630:	2b00      	cmp	r3, #0
 801b632:	d004      	beq.n	801b63e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b638:	6878      	ldr	r0, [r7, #4]
 801b63a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 801b63c:	bf00      	nop
 801b63e:	bf00      	nop
}
 801b640:	3710      	adds	r7, #16
 801b642:	46bd      	mov	sp, r7
 801b644:	bd80      	pop	{r7, pc}

0801b646 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 801b646:	b480      	push	{r7}
 801b648:	b085      	sub	sp, #20
 801b64a:	af00      	add	r7, sp, #0
 801b64c:	60f8      	str	r0, [r7, #12]
 801b64e:	60b9      	str	r1, [r7, #8]
 801b650:	607a      	str	r2, [r7, #4]
 801b652:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b654:	68fb      	ldr	r3, [r7, #12]
 801b656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b658:	68fa      	ldr	r2, [r7, #12]
 801b65a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 801b65c:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 801b65e:	68fb      	ldr	r3, [r7, #12]
 801b660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b662:	2b00      	cmp	r3, #0
 801b664:	d004      	beq.n	801b670 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801b66a:	68fa      	ldr	r2, [r7, #12]
 801b66c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 801b66e:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b674:	f003 021f 	and.w	r2, r3, #31
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b67c:	2101      	movs	r1, #1
 801b67e:	fa01 f202 	lsl.w	r2, r1, r2
 801b682:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	683a      	ldr	r2, [r7, #0]
 801b68a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	689b      	ldr	r3, [r3, #8]
 801b690:	2b10      	cmp	r3, #16
 801b692:	d108      	bne.n	801b6a6 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	681b      	ldr	r3, [r3, #0]
 801b698:	687a      	ldr	r2, [r7, #4]
 801b69a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 801b69c:	68fb      	ldr	r3, [r7, #12]
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	68ba      	ldr	r2, [r7, #8]
 801b6a2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 801b6a4:	e007      	b.n	801b6b6 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	68ba      	ldr	r2, [r7, #8]
 801b6ac:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	687a      	ldr	r2, [r7, #4]
 801b6b4:	60da      	str	r2, [r3, #12]
}
 801b6b6:	bf00      	nop
 801b6b8:	3714      	adds	r7, #20
 801b6ba:	46bd      	mov	sp, r7
 801b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b6c0:	4770      	bx	lr
	...

0801b6c4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b6c4:	b480      	push	{r7}
 801b6c6:	b087      	sub	sp, #28
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	681b      	ldr	r3, [r3, #0]
 801b6d0:	461a      	mov	r2, r3
 801b6d2:	4b16      	ldr	r3, [pc, #88]	; (801b72c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 801b6d4:	429a      	cmp	r2, r3
 801b6d6:	d802      	bhi.n	801b6de <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 801b6d8:	4b15      	ldr	r3, [pc, #84]	; (801b730 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 801b6da:	617b      	str	r3, [r7, #20]
 801b6dc:	e001      	b.n	801b6e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 801b6de:	4b15      	ldr	r3, [pc, #84]	; (801b734 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 801b6e0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 801b6e2:	697b      	ldr	r3, [r7, #20]
 801b6e4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	b2db      	uxtb	r3, r3
 801b6ec:	3b08      	subs	r3, #8
 801b6ee:	4a12      	ldr	r2, [pc, #72]	; (801b738 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 801b6f0:	fba2 2303 	umull	r2, r3, r2, r3
 801b6f4:	091b      	lsrs	r3, r3, #4
 801b6f6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b6fc:	089b      	lsrs	r3, r3, #2
 801b6fe:	009a      	lsls	r2, r3, #2
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	4413      	add	r3, r2
 801b704:	461a      	mov	r2, r3
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	4a0b      	ldr	r2, [pc, #44]	; (801b73c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801b70e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801b710:	68fb      	ldr	r3, [r7, #12]
 801b712:	f003 031f 	and.w	r3, r3, #31
 801b716:	2201      	movs	r2, #1
 801b718:	409a      	lsls	r2, r3
 801b71a:	687b      	ldr	r3, [r7, #4]
 801b71c:	651a      	str	r2, [r3, #80]	; 0x50
}
 801b71e:	bf00      	nop
 801b720:	371c      	adds	r7, #28
 801b722:	46bd      	mov	sp, r7
 801b724:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b728:	4770      	bx	lr
 801b72a:	bf00      	nop
 801b72c:	40020407 	.word	0x40020407
 801b730:	40020800 	.word	0x40020800
 801b734:	40020820 	.word	0x40020820
 801b738:	cccccccd 	.word	0xcccccccd
 801b73c:	40020880 	.word	0x40020880

0801b740 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b740:	b480      	push	{r7}
 801b742:	b085      	sub	sp, #20
 801b744:	af00      	add	r7, sp, #0
 801b746:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b748:	687b      	ldr	r3, [r7, #4]
 801b74a:	685b      	ldr	r3, [r3, #4]
 801b74c:	b2db      	uxtb	r3, r3
 801b74e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b750:	68fa      	ldr	r2, [r7, #12]
 801b752:	4b0b      	ldr	r3, [pc, #44]	; (801b780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 801b754:	4413      	add	r3, r2
 801b756:	009b      	lsls	r3, r3, #2
 801b758:	461a      	mov	r2, r3
 801b75a:	687b      	ldr	r3, [r7, #4]
 801b75c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	4a08      	ldr	r2, [pc, #32]	; (801b784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801b762:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	3b01      	subs	r3, #1
 801b768:	f003 031f 	and.w	r3, r3, #31
 801b76c:	2201      	movs	r2, #1
 801b76e:	409a      	lsls	r2, r3
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	65da      	str	r2, [r3, #92]	; 0x5c
}
 801b774:	bf00      	nop
 801b776:	3714      	adds	r7, #20
 801b778:	46bd      	mov	sp, r7
 801b77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b77e:	4770      	bx	lr
 801b780:	1000823f 	.word	0x1000823f
 801b784:	40020940 	.word	0x40020940

0801b788 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b086      	sub	sp, #24
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	60f8      	str	r0, [r7, #12]
 801b790:	60b9      	str	r1, [r7, #8]
 801b792:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801b796:	2300      	movs	r3, #0
 801b798:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801b79a:	4b24      	ldr	r3, [pc, #144]	; (801b82c <HAL_FLASH_Program+0xa4>)
 801b79c:	781b      	ldrb	r3, [r3, #0]
 801b79e:	2b01      	cmp	r3, #1
 801b7a0:	d101      	bne.n	801b7a6 <HAL_FLASH_Program+0x1e>
 801b7a2:	2302      	movs	r3, #2
 801b7a4:	e03e      	b.n	801b824 <HAL_FLASH_Program+0x9c>
 801b7a6:	4b21      	ldr	r3, [pc, #132]	; (801b82c <HAL_FLASH_Program+0xa4>)
 801b7a8:	2201      	movs	r2, #1
 801b7aa:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b7ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b7b0:	f000 f87c 	bl	801b8ac <FLASH_WaitForLastOperation>
 801b7b4:	4603      	mov	r3, r0
 801b7b6:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 801b7b8:	7dfb      	ldrb	r3, [r7, #23]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d12e      	bne.n	801b81c <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801b7be:	4b1b      	ldr	r3, [pc, #108]	; (801b82c <HAL_FLASH_Program+0xa4>)
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d107      	bne.n	801b7da <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 801b7ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 801b7ce:	68b8      	ldr	r0, [r7, #8]
 801b7d0:	f000 f8c0 	bl	801b954 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 801b7d4:	2301      	movs	r3, #1
 801b7d6:	613b      	str	r3, [r7, #16]
 801b7d8:	e010      	b.n	801b7fc <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 801b7da:	68fb      	ldr	r3, [r7, #12]
 801b7dc:	2b01      	cmp	r3, #1
 801b7de:	d002      	beq.n	801b7e6 <HAL_FLASH_Program+0x5e>
 801b7e0:	68fb      	ldr	r3, [r7, #12]
 801b7e2:	2b02      	cmp	r3, #2
 801b7e4:	d10a      	bne.n	801b7fc <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801b7e6:	683b      	ldr	r3, [r7, #0]
 801b7e8:	4619      	mov	r1, r3
 801b7ea:	68b8      	ldr	r0, [r7, #8]
 801b7ec:	f000 f8d8 	bl	801b9a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 801b7f0:	68fb      	ldr	r3, [r7, #12]
 801b7f2:	2b02      	cmp	r3, #2
 801b7f4:	d102      	bne.n	801b7fc <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 801b7f6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801b7fa:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801b7fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801b800:	f000 f854 	bl	801b8ac <FLASH_WaitForLastOperation>
 801b804:	4603      	mov	r3, r0
 801b806:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d006      	beq.n	801b81c <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 801b80e:	4b08      	ldr	r3, [pc, #32]	; (801b830 <HAL_FLASH_Program+0xa8>)
 801b810:	695a      	ldr	r2, [r3, #20]
 801b812:	693b      	ldr	r3, [r7, #16]
 801b814:	43db      	mvns	r3, r3
 801b816:	4906      	ldr	r1, [pc, #24]	; (801b830 <HAL_FLASH_Program+0xa8>)
 801b818:	4013      	ands	r3, r2
 801b81a:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801b81c:	4b03      	ldr	r3, [pc, #12]	; (801b82c <HAL_FLASH_Program+0xa4>)
 801b81e:	2200      	movs	r2, #0
 801b820:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801b822:	7dfb      	ldrb	r3, [r7, #23]
}
 801b824:	4618      	mov	r0, r3
 801b826:	3718      	adds	r7, #24
 801b828:	46bd      	mov	sp, r7
 801b82a:	bd80      	pop	{r7, pc}
 801b82c:	2000000c 	.word	0x2000000c
 801b830:	40022000 	.word	0x40022000

0801b834 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 801b834:	b480      	push	{r7}
 801b836:	b083      	sub	sp, #12
 801b838:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 801b83a:	2300      	movs	r3, #0
 801b83c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b83e:	4b0b      	ldr	r3, [pc, #44]	; (801b86c <HAL_FLASH_Unlock+0x38>)
 801b840:	695b      	ldr	r3, [r3, #20]
 801b842:	2b00      	cmp	r3, #0
 801b844:	da0b      	bge.n	801b85e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 801b846:	4b09      	ldr	r3, [pc, #36]	; (801b86c <HAL_FLASH_Unlock+0x38>)
 801b848:	4a09      	ldr	r2, [pc, #36]	; (801b870 <HAL_FLASH_Unlock+0x3c>)
 801b84a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 801b84c:	4b07      	ldr	r3, [pc, #28]	; (801b86c <HAL_FLASH_Unlock+0x38>)
 801b84e:	4a09      	ldr	r2, [pc, #36]	; (801b874 <HAL_FLASH_Unlock+0x40>)
 801b850:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b852:	4b06      	ldr	r3, [pc, #24]	; (801b86c <HAL_FLASH_Unlock+0x38>)
 801b854:	695b      	ldr	r3, [r3, #20]
 801b856:	2b00      	cmp	r3, #0
 801b858:	da01      	bge.n	801b85e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 801b85a:	2301      	movs	r3, #1
 801b85c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801b85e:	79fb      	ldrb	r3, [r7, #7]
}
 801b860:	4618      	mov	r0, r3
 801b862:	370c      	adds	r7, #12
 801b864:	46bd      	mov	sp, r7
 801b866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b86a:	4770      	bx	lr
 801b86c:	40022000 	.word	0x40022000
 801b870:	45670123 	.word	0x45670123
 801b874:	cdef89ab 	.word	0xcdef89ab

0801b878 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 801b878:	b480      	push	{r7}
 801b87a:	b083      	sub	sp, #12
 801b87c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 801b87e:	2301      	movs	r3, #1
 801b880:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 801b882:	4b09      	ldr	r3, [pc, #36]	; (801b8a8 <HAL_FLASH_Lock+0x30>)
 801b884:	695b      	ldr	r3, [r3, #20]
 801b886:	4a08      	ldr	r2, [pc, #32]	; (801b8a8 <HAL_FLASH_Lock+0x30>)
 801b888:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801b88c:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801b88e:	4b06      	ldr	r3, [pc, #24]	; (801b8a8 <HAL_FLASH_Lock+0x30>)
 801b890:	695b      	ldr	r3, [r3, #20]
 801b892:	2b00      	cmp	r3, #0
 801b894:	da01      	bge.n	801b89a <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 801b896:	2300      	movs	r3, #0
 801b898:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801b89a:	79fb      	ldrb	r3, [r7, #7]
}
 801b89c:	4618      	mov	r0, r3
 801b89e:	370c      	adds	r7, #12
 801b8a0:	46bd      	mov	sp, r7
 801b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8a6:	4770      	bx	lr
 801b8a8:	40022000 	.word	0x40022000

0801b8ac <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 801b8ac:	b580      	push	{r7, lr}
 801b8ae:	b084      	sub	sp, #16
 801b8b0:	af00      	add	r7, sp, #0
 801b8b2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 801b8b4:	f7fd f98a 	bl	8018bcc <HAL_GetTick>
 801b8b8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b8ba:	e009      	b.n	801b8d0 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 801b8bc:	f7fd f986 	bl	8018bcc <HAL_GetTick>
 801b8c0:	4602      	mov	r2, r0
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	1ad3      	subs	r3, r2, r3
 801b8c6:	687a      	ldr	r2, [r7, #4]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d201      	bcs.n	801b8d0 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 801b8cc:	2303      	movs	r3, #3
 801b8ce:	e038      	b.n	801b942 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 801b8d0:	4b1e      	ldr	r3, [pc, #120]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b8d2:	691b      	ldr	r3, [r3, #16]
 801b8d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b8d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b8dc:	d0ee      	beq.n	801b8bc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801b8de:	4b1b      	ldr	r3, [pc, #108]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b8e0:	691a      	ldr	r2, [r3, #16]
 801b8e2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 801b8e6:	4013      	ands	r3, r2
 801b8e8:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 801b8ea:	68bb      	ldr	r3, [r7, #8]
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d01e      	beq.n	801b92e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801b8f0:	4b17      	ldr	r3, [pc, #92]	; (801b950 <FLASH_WaitForLastOperation+0xa4>)
 801b8f2:	685a      	ldr	r2, [r3, #4]
 801b8f4:	68bb      	ldr	r3, [r7, #8]
 801b8f6:	4313      	orrs	r3, r2
 801b8f8:	4a15      	ldr	r2, [pc, #84]	; (801b950 <FLASH_WaitForLastOperation+0xa4>)
 801b8fa:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 801b8fc:	68bb      	ldr	r3, [r7, #8]
 801b8fe:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b902:	2b00      	cmp	r3, #0
 801b904:	d007      	beq.n	801b916 <FLASH_WaitForLastOperation+0x6a>
 801b906:	4b11      	ldr	r3, [pc, #68]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b908:	699a      	ldr	r2, [r3, #24]
 801b90a:	68bb      	ldr	r3, [r7, #8]
 801b90c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 801b910:	490e      	ldr	r1, [pc, #56]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b912:	4313      	orrs	r3, r2
 801b914:	618b      	str	r3, [r1, #24]
 801b916:	68bb      	ldr	r3, [r7, #8]
 801b918:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d004      	beq.n	801b92a <FLASH_WaitForLastOperation+0x7e>
 801b920:	4a0a      	ldr	r2, [pc, #40]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b922:	68bb      	ldr	r3, [r7, #8]
 801b924:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 801b928:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 801b92a:	2301      	movs	r3, #1
 801b92c:	e009      	b.n	801b942 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 801b92e:	4b07      	ldr	r3, [pc, #28]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b930:	691b      	ldr	r3, [r3, #16]
 801b932:	f003 0301 	and.w	r3, r3, #1
 801b936:	2b01      	cmp	r3, #1
 801b938:	d102      	bne.n	801b940 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 801b93a:	4b04      	ldr	r3, [pc, #16]	; (801b94c <FLASH_WaitForLastOperation+0xa0>)
 801b93c:	2201      	movs	r2, #1
 801b93e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801b940:	2300      	movs	r3, #0
}
 801b942:	4618      	mov	r0, r3
 801b944:	3710      	adds	r7, #16
 801b946:	46bd      	mov	sp, r7
 801b948:	bd80      	pop	{r7, pc}
 801b94a:	bf00      	nop
 801b94c:	40022000 	.word	0x40022000
 801b950:	2000000c 	.word	0x2000000c

0801b954 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801b954:	b480      	push	{r7}
 801b956:	b085      	sub	sp, #20
 801b958:	af00      	add	r7, sp, #0
 801b95a:	60f8      	str	r0, [r7, #12]
 801b95c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 801b960:	4b0e      	ldr	r3, [pc, #56]	; (801b99c <FLASH_Program_DoubleWord+0x48>)
 801b962:	695b      	ldr	r3, [r3, #20]
 801b964:	4a0d      	ldr	r2, [pc, #52]	; (801b99c <FLASH_Program_DoubleWord+0x48>)
 801b966:	f043 0301 	orr.w	r3, r3, #1
 801b96a:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 801b96c:	68fb      	ldr	r3, [r7, #12]
 801b96e:	683a      	ldr	r2, [r7, #0]
 801b970:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 801b972:	f3bf 8f6f 	isb	sy
}
 801b976:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 801b978:	e9d7 0100 	ldrd	r0, r1, [r7]
 801b97c:	f04f 0200 	mov.w	r2, #0
 801b980:	f04f 0300 	mov.w	r3, #0
 801b984:	000a      	movs	r2, r1
 801b986:	2300      	movs	r3, #0
 801b988:	68f9      	ldr	r1, [r7, #12]
 801b98a:	3104      	adds	r1, #4
 801b98c:	4613      	mov	r3, r2
 801b98e:	600b      	str	r3, [r1, #0]
}
 801b990:	bf00      	nop
 801b992:	3714      	adds	r7, #20
 801b994:	46bd      	mov	sp, r7
 801b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b99a:	4770      	bx	lr
 801b99c:	40022000 	.word	0x40022000

0801b9a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801b9a0:	b480      	push	{r7}
 801b9a2:	b089      	sub	sp, #36	; 0x24
 801b9a4:	af00      	add	r7, sp, #0
 801b9a6:	6078      	str	r0, [r7, #4]
 801b9a8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 801b9aa:	2340      	movs	r3, #64	; 0x40
 801b9ac:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801b9ae:	687b      	ldr	r3, [r7, #4]
 801b9b0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801b9b2:	683b      	ldr	r3, [r7, #0]
 801b9b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801b9b6:	4b14      	ldr	r3, [pc, #80]	; (801ba08 <FLASH_Program_Fast+0x68>)
 801b9b8:	695b      	ldr	r3, [r3, #20]
 801b9ba:	4a13      	ldr	r2, [pc, #76]	; (801ba08 <FLASH_Program_Fast+0x68>)
 801b9bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b9c0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b9c2:	f3ef 8310 	mrs	r3, PRIMASK
 801b9c6:	60fb      	str	r3, [r7, #12]
  return(result);
 801b9c8:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 801b9ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b9cc:	b672      	cpsid	i
}
 801b9ce:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 801b9d0:	697b      	ldr	r3, [r7, #20]
 801b9d2:	681a      	ldr	r2, [r3, #0]
 801b9d4:	69bb      	ldr	r3, [r7, #24]
 801b9d6:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801b9d8:	69bb      	ldr	r3, [r7, #24]
 801b9da:	3304      	adds	r3, #4
 801b9dc:	61bb      	str	r3, [r7, #24]
    src_addr++;
 801b9de:	697b      	ldr	r3, [r7, #20]
 801b9e0:	3304      	adds	r3, #4
 801b9e2:	617b      	str	r3, [r7, #20]
    row_index--;
 801b9e4:	7ffb      	ldrb	r3, [r7, #31]
 801b9e6:	3b01      	subs	r3, #1
 801b9e8:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 801b9ea:	7ffb      	ldrb	r3, [r7, #31]
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d1ef      	bne.n	801b9d0 <FLASH_Program_Fast+0x30>
 801b9f0:	693b      	ldr	r3, [r7, #16]
 801b9f2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b9f4:	68bb      	ldr	r3, [r7, #8]
 801b9f6:	f383 8810 	msr	PRIMASK, r3
}
 801b9fa:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 801b9fc:	bf00      	nop
 801b9fe:	3724      	adds	r7, #36	; 0x24
 801ba00:	46bd      	mov	sp, r7
 801ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba06:	4770      	bx	lr
 801ba08:	40022000 	.word	0x40022000

0801ba0c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 801ba0c:	b580      	push	{r7, lr}
 801ba0e:	b084      	sub	sp, #16
 801ba10:	af00      	add	r7, sp, #0
 801ba12:	6078      	str	r0, [r7, #4]
 801ba14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 801ba16:	4b48      	ldr	r3, [pc, #288]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba18:	781b      	ldrb	r3, [r3, #0]
 801ba1a:	2b01      	cmp	r3, #1
 801ba1c:	d101      	bne.n	801ba22 <HAL_FLASHEx_Erase+0x16>
 801ba1e:	2302      	movs	r3, #2
 801ba20:	e085      	b.n	801bb2e <HAL_FLASHEx_Erase+0x122>
 801ba22:	4b45      	ldr	r3, [pc, #276]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba24:	2201      	movs	r2, #1
 801ba26:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801ba28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801ba2c:	f7ff ff3e 	bl	801b8ac <FLASH_WaitForLastOperation>
 801ba30:	4603      	mov	r3, r0
 801ba32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 801ba34:	7bfb      	ldrb	r3, [r7, #15]
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d175      	bne.n	801bb26 <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801ba3a:	4b3f      	ldr	r3, [pc, #252]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba3c:	2200      	movs	r2, #0
 801ba3e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 801ba40:	4b3e      	ldr	r3, [pc, #248]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d013      	beq.n	801ba74 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801ba4c:	4b3b      	ldr	r3, [pc, #236]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba4e:	681b      	ldr	r3, [r3, #0]
 801ba50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d009      	beq.n	801ba6c <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 801ba58:	4b38      	ldr	r3, [pc, #224]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba5a:	681b      	ldr	r3, [r3, #0]
 801ba5c:	4a37      	ldr	r2, [pc, #220]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ba62:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 801ba64:	4b34      	ldr	r3, [pc, #208]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba66:	2203      	movs	r2, #3
 801ba68:	771a      	strb	r2, [r3, #28]
 801ba6a:	e016      	b.n	801ba9a <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801ba6c:	4b32      	ldr	r3, [pc, #200]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba6e:	2201      	movs	r2, #1
 801ba70:	771a      	strb	r2, [r3, #28]
 801ba72:	e012      	b.n	801ba9a <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801ba74:	4b31      	ldr	r3, [pc, #196]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba76:	681b      	ldr	r3, [r3, #0]
 801ba78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	d009      	beq.n	801ba94 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 801ba80:	4b2e      	ldr	r3, [pc, #184]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	4a2d      	ldr	r2, [pc, #180]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801ba86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ba8a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801ba8c:	4b2a      	ldr	r3, [pc, #168]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba8e:	2202      	movs	r2, #2
 801ba90:	771a      	strb	r2, [r3, #28]
 801ba92:	e002      	b.n	801ba9a <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801ba94:	4b28      	ldr	r3, [pc, #160]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801ba96:	2200      	movs	r2, #0
 801ba98:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801ba9a:	687b      	ldr	r3, [r7, #4]
 801ba9c:	681b      	ldr	r3, [r3, #0]
 801ba9e:	2b01      	cmp	r3, #1
 801baa0:	d111      	bne.n	801bac6 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 801baa2:	687b      	ldr	r3, [r7, #4]
 801baa4:	685b      	ldr	r3, [r3, #4]
 801baa6:	4618      	mov	r0, r3
 801baa8:	f000 f84a 	bl	801bb40 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801baac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bab0:	f7ff fefc 	bl	801b8ac <FLASH_WaitForLastOperation>
 801bab4:	4603      	mov	r3, r0
 801bab6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 801bab8:	4b20      	ldr	r3, [pc, #128]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801baba:	695b      	ldr	r3, [r3, #20]
 801babc:	4a1f      	ldr	r2, [pc, #124]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801babe:	f023 0304 	bic.w	r3, r3, #4
 801bac2:	6153      	str	r3, [r2, #20]
 801bac4:	e02d      	b.n	801bb22 <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 801bac6:	683b      	ldr	r3, [r7, #0]
 801bac8:	f04f 32ff 	mov.w	r2, #4294967295
 801bacc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bace:	687b      	ldr	r3, [r7, #4]
 801bad0:	689b      	ldr	r3, [r3, #8]
 801bad2:	60bb      	str	r3, [r7, #8]
 801bad4:	e01d      	b.n	801bb12 <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	685b      	ldr	r3, [r3, #4]
 801bada:	4619      	mov	r1, r3
 801badc:	68b8      	ldr	r0, [r7, #8]
 801bade:	f000 f84d 	bl	801bb7c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801bae2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801bae6:	f7ff fee1 	bl	801b8ac <FLASH_WaitForLastOperation>
 801baea:	4603      	mov	r3, r0
 801baec:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 801baee:	4b13      	ldr	r3, [pc, #76]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801baf0:	695b      	ldr	r3, [r3, #20]
 801baf2:	4a12      	ldr	r2, [pc, #72]	; (801bb3c <HAL_FLASHEx_Erase+0x130>)
 801baf4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 801baf8:	f023 0302 	bic.w	r3, r3, #2
 801bafc:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 801bafe:	7bfb      	ldrb	r3, [r7, #15]
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d003      	beq.n	801bb0c <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 801bb04:	683b      	ldr	r3, [r7, #0]
 801bb06:	68ba      	ldr	r2, [r7, #8]
 801bb08:	601a      	str	r2, [r3, #0]
          break;
 801bb0a:	e00a      	b.n	801bb22 <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 801bb0c:	68bb      	ldr	r3, [r7, #8]
 801bb0e:	3301      	adds	r3, #1
 801bb10:	60bb      	str	r3, [r7, #8]
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	689a      	ldr	r2, [r3, #8]
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	68db      	ldr	r3, [r3, #12]
 801bb1a:	4413      	add	r3, r2
 801bb1c:	68ba      	ldr	r2, [r7, #8]
 801bb1e:	429a      	cmp	r2, r3
 801bb20:	d3d9      	bcc.n	801bad6 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801bb22:	f000 f84f 	bl	801bbc4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 801bb26:	4b04      	ldr	r3, [pc, #16]	; (801bb38 <HAL_FLASHEx_Erase+0x12c>)
 801bb28:	2200      	movs	r2, #0
 801bb2a:	701a      	strb	r2, [r3, #0]

  return status;
 801bb2c:	7bfb      	ldrb	r3, [r7, #15]
}
 801bb2e:	4618      	mov	r0, r3
 801bb30:	3710      	adds	r7, #16
 801bb32:	46bd      	mov	sp, r7
 801bb34:	bd80      	pop	{r7, pc}
 801bb36:	bf00      	nop
 801bb38:	2000000c 	.word	0x2000000c
 801bb3c:	40022000 	.word	0x40022000

0801bb40 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 801bb40:	b480      	push	{r7}
 801bb42:	b083      	sub	sp, #12
 801bb44:	af00      	add	r7, sp, #0
 801bb46:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	f003 0301 	and.w	r3, r3, #1
 801bb4e:	2b00      	cmp	r3, #0
 801bb50:	d005      	beq.n	801bb5e <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 801bb52:	4b09      	ldr	r3, [pc, #36]	; (801bb78 <FLASH_MassErase+0x38>)
 801bb54:	695b      	ldr	r3, [r3, #20]
 801bb56:	4a08      	ldr	r2, [pc, #32]	; (801bb78 <FLASH_MassErase+0x38>)
 801bb58:	f043 0304 	orr.w	r3, r3, #4
 801bb5c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bb5e:	4b06      	ldr	r3, [pc, #24]	; (801bb78 <FLASH_MassErase+0x38>)
 801bb60:	695b      	ldr	r3, [r3, #20]
 801bb62:	4a05      	ldr	r2, [pc, #20]	; (801bb78 <FLASH_MassErase+0x38>)
 801bb64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bb68:	6153      	str	r3, [r2, #20]
}
 801bb6a:	bf00      	nop
 801bb6c:	370c      	adds	r7, #12
 801bb6e:	46bd      	mov	sp, r7
 801bb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb74:	4770      	bx	lr
 801bb76:	bf00      	nop
 801bb78:	40022000 	.word	0x40022000

0801bb7c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801bb7c:	b480      	push	{r7}
 801bb7e:	b083      	sub	sp, #12
 801bb80:	af00      	add	r7, sp, #0
 801bb82:	6078      	str	r0, [r7, #4]
 801bb84:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 801bb86:	4b0e      	ldr	r3, [pc, #56]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bb88:	695b      	ldr	r3, [r3, #20]
 801bb8a:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	00db      	lsls	r3, r3, #3
 801bb92:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 801bb96:	490a      	ldr	r1, [pc, #40]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bb98:	4313      	orrs	r3, r2
 801bb9a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 801bb9c:	4b08      	ldr	r3, [pc, #32]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bb9e:	695b      	ldr	r3, [r3, #20]
 801bba0:	4a07      	ldr	r2, [pc, #28]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bba2:	f043 0302 	orr.w	r3, r3, #2
 801bba6:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801bba8:	4b05      	ldr	r3, [pc, #20]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bbaa:	695b      	ldr	r3, [r3, #20]
 801bbac:	4a04      	ldr	r2, [pc, #16]	; (801bbc0 <FLASH_PageErase+0x44>)
 801bbae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801bbb2:	6153      	str	r3, [r2, #20]
}
 801bbb4:	bf00      	nop
 801bbb6:	370c      	adds	r7, #12
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbbe:	4770      	bx	lr
 801bbc0:	40022000 	.word	0x40022000

0801bbc4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 801bbc4:	b480      	push	{r7}
 801bbc6:	b083      	sub	sp, #12
 801bbc8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 801bbca:	4b21      	ldr	r3, [pc, #132]	; (801bc50 <FLASH_FlushCaches+0x8c>)
 801bbcc:	7f1b      	ldrb	r3, [r3, #28]
 801bbce:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801bbd0:	79fb      	ldrb	r3, [r7, #7]
 801bbd2:	2b01      	cmp	r3, #1
 801bbd4:	d002      	beq.n	801bbdc <FLASH_FlushCaches+0x18>
 801bbd6:	79fb      	ldrb	r3, [r7, #7]
 801bbd8:	2b03      	cmp	r3, #3
 801bbda:	d117      	bne.n	801bc0c <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 801bbdc:	4b1d      	ldr	r3, [pc, #116]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbde:	681b      	ldr	r3, [r3, #0]
 801bbe0:	4a1c      	ldr	r2, [pc, #112]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbe2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801bbe6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 801bbe8:	4b1a      	ldr	r3, [pc, #104]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	4a19      	ldr	r2, [pc, #100]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801bbf2:	6013      	str	r3, [r2, #0]
 801bbf4:	4b17      	ldr	r3, [pc, #92]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbf6:	681b      	ldr	r3, [r3, #0]
 801bbf8:	4a16      	ldr	r2, [pc, #88]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bbfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801bbfe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801bc00:	4b14      	ldr	r3, [pc, #80]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	4a13      	ldr	r2, [pc, #76]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bc0a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 801bc0c:	79fb      	ldrb	r3, [r7, #7]
 801bc0e:	2b02      	cmp	r3, #2
 801bc10:	d002      	beq.n	801bc18 <FLASH_FlushCaches+0x54>
 801bc12:	79fb      	ldrb	r3, [r7, #7]
 801bc14:	2b03      	cmp	r3, #3
 801bc16:	d111      	bne.n	801bc3c <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 801bc18:	4b0e      	ldr	r3, [pc, #56]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc1a:	681b      	ldr	r3, [r3, #0]
 801bc1c:	4a0d      	ldr	r2, [pc, #52]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc1e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801bc22:	6013      	str	r3, [r2, #0]
 801bc24:	4b0b      	ldr	r3, [pc, #44]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc26:	681b      	ldr	r3, [r3, #0]
 801bc28:	4a0a      	ldr	r2, [pc, #40]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bc2e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801bc30:	4b08      	ldr	r3, [pc, #32]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	4a07      	ldr	r2, [pc, #28]	; (801bc54 <FLASH_FlushCaches+0x90>)
 801bc36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801bc3a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 801bc3c:	4b04      	ldr	r3, [pc, #16]	; (801bc50 <FLASH_FlushCaches+0x8c>)
 801bc3e:	2200      	movs	r2, #0
 801bc40:	771a      	strb	r2, [r3, #28]
}
 801bc42:	bf00      	nop
 801bc44:	370c      	adds	r7, #12
 801bc46:	46bd      	mov	sp, r7
 801bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc4c:	4770      	bx	lr
 801bc4e:	bf00      	nop
 801bc50:	2000000c 	.word	0x2000000c
 801bc54:	40022000 	.word	0x40022000

0801bc58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801bc58:	b480      	push	{r7}
 801bc5a:	b087      	sub	sp, #28
 801bc5c:	af00      	add	r7, sp, #0
 801bc5e:	6078      	str	r0, [r7, #4]
 801bc60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801bc62:	2300      	movs	r3, #0
 801bc64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bc66:	e15a      	b.n	801bf1e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801bc68:	683b      	ldr	r3, [r7, #0]
 801bc6a:	681a      	ldr	r2, [r3, #0]
 801bc6c:	2101      	movs	r1, #1
 801bc6e:	697b      	ldr	r3, [r7, #20]
 801bc70:	fa01 f303 	lsl.w	r3, r1, r3
 801bc74:	4013      	ands	r3, r2
 801bc76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	2b00      	cmp	r3, #0
 801bc7c:	f000 814c 	beq.w	801bf18 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bc80:	683b      	ldr	r3, [r7, #0]
 801bc82:	685b      	ldr	r3, [r3, #4]
 801bc84:	f003 0303 	and.w	r3, r3, #3
 801bc88:	2b01      	cmp	r3, #1
 801bc8a:	d005      	beq.n	801bc98 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	685b      	ldr	r3, [r3, #4]
 801bc90:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801bc94:	2b02      	cmp	r3, #2
 801bc96:	d130      	bne.n	801bcfa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	689b      	ldr	r3, [r3, #8]
 801bc9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801bc9e:	697b      	ldr	r3, [r7, #20]
 801bca0:	005b      	lsls	r3, r3, #1
 801bca2:	2203      	movs	r2, #3
 801bca4:	fa02 f303 	lsl.w	r3, r2, r3
 801bca8:	43db      	mvns	r3, r3
 801bcaa:	693a      	ldr	r2, [r7, #16]
 801bcac:	4013      	ands	r3, r2
 801bcae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801bcb0:	683b      	ldr	r3, [r7, #0]
 801bcb2:	68da      	ldr	r2, [r3, #12]
 801bcb4:	697b      	ldr	r3, [r7, #20]
 801bcb6:	005b      	lsls	r3, r3, #1
 801bcb8:	fa02 f303 	lsl.w	r3, r2, r3
 801bcbc:	693a      	ldr	r2, [r7, #16]
 801bcbe:	4313      	orrs	r3, r2
 801bcc0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801bcc2:	687b      	ldr	r3, [r7, #4]
 801bcc4:	693a      	ldr	r2, [r7, #16]
 801bcc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801bcc8:	687b      	ldr	r3, [r7, #4]
 801bcca:	685b      	ldr	r3, [r3, #4]
 801bccc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801bcce:	2201      	movs	r2, #1
 801bcd0:	697b      	ldr	r3, [r7, #20]
 801bcd2:	fa02 f303 	lsl.w	r3, r2, r3
 801bcd6:	43db      	mvns	r3, r3
 801bcd8:	693a      	ldr	r2, [r7, #16]
 801bcda:	4013      	ands	r3, r2
 801bcdc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801bcde:	683b      	ldr	r3, [r7, #0]
 801bce0:	685b      	ldr	r3, [r3, #4]
 801bce2:	091b      	lsrs	r3, r3, #4
 801bce4:	f003 0201 	and.w	r2, r3, #1
 801bce8:	697b      	ldr	r3, [r7, #20]
 801bcea:	fa02 f303 	lsl.w	r3, r2, r3
 801bcee:	693a      	ldr	r2, [r7, #16]
 801bcf0:	4313      	orrs	r3, r2
 801bcf2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801bcf4:	687b      	ldr	r3, [r7, #4]
 801bcf6:	693a      	ldr	r2, [r7, #16]
 801bcf8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801bcfa:	683b      	ldr	r3, [r7, #0]
 801bcfc:	685b      	ldr	r3, [r3, #4]
 801bcfe:	f003 0303 	and.w	r3, r3, #3
 801bd02:	2b03      	cmp	r3, #3
 801bd04:	d017      	beq.n	801bd36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	68db      	ldr	r3, [r3, #12]
 801bd0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801bd0c:	697b      	ldr	r3, [r7, #20]
 801bd0e:	005b      	lsls	r3, r3, #1
 801bd10:	2203      	movs	r2, #3
 801bd12:	fa02 f303 	lsl.w	r3, r2, r3
 801bd16:	43db      	mvns	r3, r3
 801bd18:	693a      	ldr	r2, [r7, #16]
 801bd1a:	4013      	ands	r3, r2
 801bd1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 801bd1e:	683b      	ldr	r3, [r7, #0]
 801bd20:	689a      	ldr	r2, [r3, #8]
 801bd22:	697b      	ldr	r3, [r7, #20]
 801bd24:	005b      	lsls	r3, r3, #1
 801bd26:	fa02 f303 	lsl.w	r3, r2, r3
 801bd2a:	693a      	ldr	r2, [r7, #16]
 801bd2c:	4313      	orrs	r3, r2
 801bd2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	693a      	ldr	r2, [r7, #16]
 801bd34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801bd36:	683b      	ldr	r3, [r7, #0]
 801bd38:	685b      	ldr	r3, [r3, #4]
 801bd3a:	f003 0303 	and.w	r3, r3, #3
 801bd3e:	2b02      	cmp	r3, #2
 801bd40:	d123      	bne.n	801bd8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	08da      	lsrs	r2, r3, #3
 801bd46:	687b      	ldr	r3, [r7, #4]
 801bd48:	3208      	adds	r2, #8
 801bd4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801bd4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801bd50:	697b      	ldr	r3, [r7, #20]
 801bd52:	f003 0307 	and.w	r3, r3, #7
 801bd56:	009b      	lsls	r3, r3, #2
 801bd58:	220f      	movs	r2, #15
 801bd5a:	fa02 f303 	lsl.w	r3, r2, r3
 801bd5e:	43db      	mvns	r3, r3
 801bd60:	693a      	ldr	r2, [r7, #16]
 801bd62:	4013      	ands	r3, r2
 801bd64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801bd66:	683b      	ldr	r3, [r7, #0]
 801bd68:	691a      	ldr	r2, [r3, #16]
 801bd6a:	697b      	ldr	r3, [r7, #20]
 801bd6c:	f003 0307 	and.w	r3, r3, #7
 801bd70:	009b      	lsls	r3, r3, #2
 801bd72:	fa02 f303 	lsl.w	r3, r2, r3
 801bd76:	693a      	ldr	r2, [r7, #16]
 801bd78:	4313      	orrs	r3, r2
 801bd7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801bd7c:	697b      	ldr	r3, [r7, #20]
 801bd7e:	08da      	lsrs	r2, r3, #3
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	3208      	adds	r2, #8
 801bd84:	6939      	ldr	r1, [r7, #16]
 801bd86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801bd90:	697b      	ldr	r3, [r7, #20]
 801bd92:	005b      	lsls	r3, r3, #1
 801bd94:	2203      	movs	r2, #3
 801bd96:	fa02 f303 	lsl.w	r3, r2, r3
 801bd9a:	43db      	mvns	r3, r3
 801bd9c:	693a      	ldr	r2, [r7, #16]
 801bd9e:	4013      	ands	r3, r2
 801bda0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801bda2:	683b      	ldr	r3, [r7, #0]
 801bda4:	685b      	ldr	r3, [r3, #4]
 801bda6:	f003 0203 	and.w	r2, r3, #3
 801bdaa:	697b      	ldr	r3, [r7, #20]
 801bdac:	005b      	lsls	r3, r3, #1
 801bdae:	fa02 f303 	lsl.w	r3, r2, r3
 801bdb2:	693a      	ldr	r2, [r7, #16]
 801bdb4:	4313      	orrs	r3, r2
 801bdb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	693a      	ldr	r2, [r7, #16]
 801bdbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801bdbe:	683b      	ldr	r3, [r7, #0]
 801bdc0:	685b      	ldr	r3, [r3, #4]
 801bdc2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	f000 80a6 	beq.w	801bf18 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801bdcc:	4b5b      	ldr	r3, [pc, #364]	; (801bf3c <HAL_GPIO_Init+0x2e4>)
 801bdce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bdd0:	4a5a      	ldr	r2, [pc, #360]	; (801bf3c <HAL_GPIO_Init+0x2e4>)
 801bdd2:	f043 0301 	orr.w	r3, r3, #1
 801bdd6:	6613      	str	r3, [r2, #96]	; 0x60
 801bdd8:	4b58      	ldr	r3, [pc, #352]	; (801bf3c <HAL_GPIO_Init+0x2e4>)
 801bdda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801bddc:	f003 0301 	and.w	r3, r3, #1
 801bde0:	60bb      	str	r3, [r7, #8]
 801bde2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 801bde4:	4a56      	ldr	r2, [pc, #344]	; (801bf40 <HAL_GPIO_Init+0x2e8>)
 801bde6:	697b      	ldr	r3, [r7, #20]
 801bde8:	089b      	lsrs	r3, r3, #2
 801bdea:	3302      	adds	r3, #2
 801bdec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bdf0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801bdf2:	697b      	ldr	r3, [r7, #20]
 801bdf4:	f003 0303 	and.w	r3, r3, #3
 801bdf8:	009b      	lsls	r3, r3, #2
 801bdfa:	220f      	movs	r2, #15
 801bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 801be00:	43db      	mvns	r3, r3
 801be02:	693a      	ldr	r2, [r7, #16]
 801be04:	4013      	ands	r3, r2
 801be06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 801be0e:	d01f      	beq.n	801be50 <HAL_GPIO_Init+0x1f8>
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	4a4c      	ldr	r2, [pc, #304]	; (801bf44 <HAL_GPIO_Init+0x2ec>)
 801be14:	4293      	cmp	r3, r2
 801be16:	d019      	beq.n	801be4c <HAL_GPIO_Init+0x1f4>
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	4a4b      	ldr	r2, [pc, #300]	; (801bf48 <HAL_GPIO_Init+0x2f0>)
 801be1c:	4293      	cmp	r3, r2
 801be1e:	d013      	beq.n	801be48 <HAL_GPIO_Init+0x1f0>
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	4a4a      	ldr	r2, [pc, #296]	; (801bf4c <HAL_GPIO_Init+0x2f4>)
 801be24:	4293      	cmp	r3, r2
 801be26:	d00d      	beq.n	801be44 <HAL_GPIO_Init+0x1ec>
 801be28:	687b      	ldr	r3, [r7, #4]
 801be2a:	4a49      	ldr	r2, [pc, #292]	; (801bf50 <HAL_GPIO_Init+0x2f8>)
 801be2c:	4293      	cmp	r3, r2
 801be2e:	d007      	beq.n	801be40 <HAL_GPIO_Init+0x1e8>
 801be30:	687b      	ldr	r3, [r7, #4]
 801be32:	4a48      	ldr	r2, [pc, #288]	; (801bf54 <HAL_GPIO_Init+0x2fc>)
 801be34:	4293      	cmp	r3, r2
 801be36:	d101      	bne.n	801be3c <HAL_GPIO_Init+0x1e4>
 801be38:	2305      	movs	r3, #5
 801be3a:	e00a      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be3c:	2306      	movs	r3, #6
 801be3e:	e008      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be40:	2304      	movs	r3, #4
 801be42:	e006      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be44:	2303      	movs	r3, #3
 801be46:	e004      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be48:	2302      	movs	r3, #2
 801be4a:	e002      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be4c:	2301      	movs	r3, #1
 801be4e:	e000      	b.n	801be52 <HAL_GPIO_Init+0x1fa>
 801be50:	2300      	movs	r3, #0
 801be52:	697a      	ldr	r2, [r7, #20]
 801be54:	f002 0203 	and.w	r2, r2, #3
 801be58:	0092      	lsls	r2, r2, #2
 801be5a:	4093      	lsls	r3, r2
 801be5c:	693a      	ldr	r2, [r7, #16]
 801be5e:	4313      	orrs	r3, r2
 801be60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801be62:	4937      	ldr	r1, [pc, #220]	; (801bf40 <HAL_GPIO_Init+0x2e8>)
 801be64:	697b      	ldr	r3, [r7, #20]
 801be66:	089b      	lsrs	r3, r3, #2
 801be68:	3302      	adds	r3, #2
 801be6a:	693a      	ldr	r2, [r7, #16]
 801be6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801be70:	4b39      	ldr	r3, [pc, #228]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801be72:	689b      	ldr	r3, [r3, #8]
 801be74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	43db      	mvns	r3, r3
 801be7a:	693a      	ldr	r2, [r7, #16]
 801be7c:	4013      	ands	r3, r2
 801be7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	685b      	ldr	r3, [r3, #4]
 801be84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801be88:	2b00      	cmp	r3, #0
 801be8a:	d003      	beq.n	801be94 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 801be8c:	693a      	ldr	r2, [r7, #16]
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	4313      	orrs	r3, r2
 801be92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 801be94:	4a30      	ldr	r2, [pc, #192]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801be96:	693b      	ldr	r3, [r7, #16]
 801be98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 801be9a:	4b2f      	ldr	r3, [pc, #188]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	43db      	mvns	r3, r3
 801bea4:	693a      	ldr	r2, [r7, #16]
 801bea6:	4013      	ands	r3, r2
 801bea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801beaa:	683b      	ldr	r3, [r7, #0]
 801beac:	685b      	ldr	r3, [r3, #4]
 801beae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d003      	beq.n	801bebe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 801beb6:	693a      	ldr	r2, [r7, #16]
 801beb8:	68fb      	ldr	r3, [r7, #12]
 801beba:	4313      	orrs	r3, r2
 801bebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 801bebe:	4a26      	ldr	r2, [pc, #152]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801bec0:	693b      	ldr	r3, [r7, #16]
 801bec2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 801bec4:	4b24      	ldr	r3, [pc, #144]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801bec6:	685b      	ldr	r3, [r3, #4]
 801bec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	43db      	mvns	r3, r3
 801bece:	693a      	ldr	r2, [r7, #16]
 801bed0:	4013      	ands	r3, r2
 801bed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801bed4:	683b      	ldr	r3, [r7, #0]
 801bed6:	685b      	ldr	r3, [r3, #4]
 801bed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801bedc:	2b00      	cmp	r3, #0
 801bede:	d003      	beq.n	801bee8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 801bee0:	693a      	ldr	r2, [r7, #16]
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	4313      	orrs	r3, r2
 801bee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801bee8:	4a1b      	ldr	r2, [pc, #108]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801beea:	693b      	ldr	r3, [r7, #16]
 801beec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 801beee:	4b1a      	ldr	r3, [pc, #104]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	43db      	mvns	r3, r3
 801bef8:	693a      	ldr	r2, [r7, #16]
 801befa:	4013      	ands	r3, r2
 801befc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801befe:	683b      	ldr	r3, [r7, #0]
 801bf00:	685b      	ldr	r3, [r3, #4]
 801bf02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d003      	beq.n	801bf12 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 801bf0a:	693a      	ldr	r2, [r7, #16]
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	4313      	orrs	r3, r2
 801bf10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 801bf12:	4a11      	ldr	r2, [pc, #68]	; (801bf58 <HAL_GPIO_Init+0x300>)
 801bf14:	693b      	ldr	r3, [r7, #16]
 801bf16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801bf18:	697b      	ldr	r3, [r7, #20]
 801bf1a:	3301      	adds	r3, #1
 801bf1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 801bf1e:	683b      	ldr	r3, [r7, #0]
 801bf20:	681a      	ldr	r2, [r3, #0]
 801bf22:	697b      	ldr	r3, [r7, #20]
 801bf24:	fa22 f303 	lsr.w	r3, r2, r3
 801bf28:	2b00      	cmp	r3, #0
 801bf2a:	f47f ae9d 	bne.w	801bc68 <HAL_GPIO_Init+0x10>
  }
}
 801bf2e:	bf00      	nop
 801bf30:	bf00      	nop
 801bf32:	371c      	adds	r7, #28
 801bf34:	46bd      	mov	sp, r7
 801bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf3a:	4770      	bx	lr
 801bf3c:	40021000 	.word	0x40021000
 801bf40:	40010000 	.word	0x40010000
 801bf44:	48000400 	.word	0x48000400
 801bf48:	48000800 	.word	0x48000800
 801bf4c:	48000c00 	.word	0x48000c00
 801bf50:	48001000 	.word	0x48001000
 801bf54:	48001400 	.word	0x48001400
 801bf58:	40010400 	.word	0x40010400

0801bf5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801bf5c:	b480      	push	{r7}
 801bf5e:	b083      	sub	sp, #12
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	6078      	str	r0, [r7, #4]
 801bf64:	460b      	mov	r3, r1
 801bf66:	807b      	strh	r3, [r7, #2]
 801bf68:	4613      	mov	r3, r2
 801bf6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801bf6c:	787b      	ldrb	r3, [r7, #1]
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d003      	beq.n	801bf7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 801bf72:	887a      	ldrh	r2, [r7, #2]
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 801bf78:	e002      	b.n	801bf80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 801bf7a:	887a      	ldrh	r2, [r7, #2]
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 801bf80:	bf00      	nop
 801bf82:	370c      	adds	r7, #12
 801bf84:	46bd      	mov	sp, r7
 801bf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf8a:	4770      	bx	lr

0801bf8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 801bf8c:	b480      	push	{r7}
 801bf8e:	b085      	sub	sp, #20
 801bf90:	af00      	add	r7, sp, #0
 801bf92:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	d141      	bne.n	801c01e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801bf9a:	4b4b      	ldr	r3, [pc, #300]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801bfa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bfa6:	d131      	bne.n	801c00c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801bfa8:	4b47      	ldr	r3, [pc, #284]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bfaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801bfae:	4a46      	ldr	r2, [pc, #280]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bfb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801bfb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801bfb8:	4b43      	ldr	r3, [pc, #268]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801bfc0:	4a41      	ldr	r2, [pc, #260]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bfc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801bfc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801bfc8:	4b40      	ldr	r3, [pc, #256]	; (801c0cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 801bfca:	681b      	ldr	r3, [r3, #0]
 801bfcc:	2232      	movs	r2, #50	; 0x32
 801bfce:	fb02 f303 	mul.w	r3, r2, r3
 801bfd2:	4a3f      	ldr	r2, [pc, #252]	; (801c0d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801bfd4:	fba2 2303 	umull	r2, r3, r2, r3
 801bfd8:	0c9b      	lsrs	r3, r3, #18
 801bfda:	3301      	adds	r3, #1
 801bfdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfde:	e002      	b.n	801bfe6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 801bfe0:	68fb      	ldr	r3, [r7, #12]
 801bfe2:	3b01      	subs	r3, #1
 801bfe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801bfe6:	4b38      	ldr	r3, [pc, #224]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bfe8:	695b      	ldr	r3, [r3, #20]
 801bfea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801bfee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801bff2:	d102      	bne.n	801bffa <HAL_PWREx_ControlVoltageScaling+0x6e>
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	2b00      	cmp	r3, #0
 801bff8:	d1f2      	bne.n	801bfe0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801bffa:	4b33      	ldr	r3, [pc, #204]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801bffc:	695b      	ldr	r3, [r3, #20]
 801bffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c002:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c006:	d158      	bne.n	801c0ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c008:	2303      	movs	r3, #3
 801c00a:	e057      	b.n	801c0bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c00c:	4b2e      	ldr	r3, [pc, #184]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c00e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c012:	4a2d      	ldr	r2, [pc, #180]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c01c:	e04d      	b.n	801c0ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 801c01e:	687b      	ldr	r3, [r7, #4]
 801c020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c024:	d141      	bne.n	801c0aa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 801c026:	4b28      	ldr	r3, [pc, #160]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c028:	681b      	ldr	r3, [r3, #0]
 801c02a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801c02e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c032:	d131      	bne.n	801c098 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c034:	4b24      	ldr	r3, [pc, #144]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c036:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c03a:	4a23      	ldr	r2, [pc, #140]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c03c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c040:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801c044:	4b20      	ldr	r3, [pc, #128]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c04c:	4a1e      	ldr	r2, [pc, #120]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c04e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 801c052:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801c054:	4b1d      	ldr	r3, [pc, #116]	; (801c0cc <HAL_PWREx_ControlVoltageScaling+0x140>)
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	2232      	movs	r2, #50	; 0x32
 801c05a:	fb02 f303 	mul.w	r3, r2, r3
 801c05e:	4a1c      	ldr	r2, [pc, #112]	; (801c0d0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 801c060:	fba2 2303 	umull	r2, r3, r2, r3
 801c064:	0c9b      	lsrs	r3, r3, #18
 801c066:	3301      	adds	r3, #1
 801c068:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c06a:	e002      	b.n	801c072 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 801c06c:	68fb      	ldr	r3, [r7, #12]
 801c06e:	3b01      	subs	r3, #1
 801c070:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801c072:	4b15      	ldr	r3, [pc, #84]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c074:	695b      	ldr	r3, [r3, #20]
 801c076:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c07a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c07e:	d102      	bne.n	801c086 <HAL_PWREx_ControlVoltageScaling+0xfa>
 801c080:	68fb      	ldr	r3, [r7, #12]
 801c082:	2b00      	cmp	r3, #0
 801c084:	d1f2      	bne.n	801c06c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 801c086:	4b10      	ldr	r3, [pc, #64]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c088:	695b      	ldr	r3, [r3, #20]
 801c08a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c08e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c092:	d112      	bne.n	801c0ba <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 801c094:	2303      	movs	r3, #3
 801c096:	e011      	b.n	801c0bc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801c098:	4b0b      	ldr	r3, [pc, #44]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c09a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c09e:	4a0a      	ldr	r2, [pc, #40]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c0a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 801c0a8:	e007      	b.n	801c0ba <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 801c0aa:	4b07      	ldr	r3, [pc, #28]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0ac:	681b      	ldr	r3, [r3, #0]
 801c0ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 801c0b2:	4a05      	ldr	r2, [pc, #20]	; (801c0c8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 801c0b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801c0b8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 801c0ba:	2300      	movs	r3, #0
}
 801c0bc:	4618      	mov	r0, r3
 801c0be:	3714      	adds	r7, #20
 801c0c0:	46bd      	mov	sp, r7
 801c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c6:	4770      	bx	lr
 801c0c8:	40007000 	.word	0x40007000
 801c0cc:	20000000 	.word	0x20000000
 801c0d0:	431bde83 	.word	0x431bde83

0801c0d4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 801c0d4:	b480      	push	{r7}
 801c0d6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 801c0d8:	4b05      	ldr	r3, [pc, #20]	; (801c0f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c0da:	689b      	ldr	r3, [r3, #8]
 801c0dc:	4a04      	ldr	r2, [pc, #16]	; (801c0f0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 801c0de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801c0e2:	6093      	str	r3, [r2, #8]
}
 801c0e4:	bf00      	nop
 801c0e6:	46bd      	mov	sp, r7
 801c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0ec:	4770      	bx	lr
 801c0ee:	bf00      	nop
 801c0f0:	40007000 	.word	0x40007000

0801c0f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c0f4:	b580      	push	{r7, lr}
 801c0f6:	b088      	sub	sp, #32
 801c0f8:	af00      	add	r7, sp, #0
 801c0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c0fc:	687b      	ldr	r3, [r7, #4]
 801c0fe:	2b00      	cmp	r3, #0
 801c100:	d101      	bne.n	801c106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801c102:	2301      	movs	r3, #1
 801c104:	e306      	b.n	801c714 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	f003 0301 	and.w	r3, r3, #1
 801c10e:	2b00      	cmp	r3, #0
 801c110:	d075      	beq.n	801c1fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c112:	4b97      	ldr	r3, [pc, #604]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c114:	689b      	ldr	r3, [r3, #8]
 801c116:	f003 030c 	and.w	r3, r3, #12
 801c11a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c11c:	4b94      	ldr	r3, [pc, #592]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c11e:	68db      	ldr	r3, [r3, #12]
 801c120:	f003 0303 	and.w	r3, r3, #3
 801c124:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 801c126:	69bb      	ldr	r3, [r7, #24]
 801c128:	2b0c      	cmp	r3, #12
 801c12a:	d102      	bne.n	801c132 <HAL_RCC_OscConfig+0x3e>
 801c12c:	697b      	ldr	r3, [r7, #20]
 801c12e:	2b03      	cmp	r3, #3
 801c130:	d002      	beq.n	801c138 <HAL_RCC_OscConfig+0x44>
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	2b08      	cmp	r3, #8
 801c136:	d10b      	bne.n	801c150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c138:	4b8d      	ldr	r3, [pc, #564]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c13a:	681b      	ldr	r3, [r3, #0]
 801c13c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c140:	2b00      	cmp	r3, #0
 801c142:	d05b      	beq.n	801c1fc <HAL_RCC_OscConfig+0x108>
 801c144:	687b      	ldr	r3, [r7, #4]
 801c146:	685b      	ldr	r3, [r3, #4]
 801c148:	2b00      	cmp	r3, #0
 801c14a:	d157      	bne.n	801c1fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 801c14c:	2301      	movs	r3, #1
 801c14e:	e2e1      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	685b      	ldr	r3, [r3, #4]
 801c154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c158:	d106      	bne.n	801c168 <HAL_RCC_OscConfig+0x74>
 801c15a:	4b85      	ldr	r3, [pc, #532]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c15c:	681b      	ldr	r3, [r3, #0]
 801c15e:	4a84      	ldr	r2, [pc, #528]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c164:	6013      	str	r3, [r2, #0]
 801c166:	e01d      	b.n	801c1a4 <HAL_RCC_OscConfig+0xb0>
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c170:	d10c      	bne.n	801c18c <HAL_RCC_OscConfig+0x98>
 801c172:	4b7f      	ldr	r3, [pc, #508]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c174:	681b      	ldr	r3, [r3, #0]
 801c176:	4a7e      	ldr	r2, [pc, #504]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c17c:	6013      	str	r3, [r2, #0]
 801c17e:	4b7c      	ldr	r3, [pc, #496]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	4a7b      	ldr	r2, [pc, #492]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c188:	6013      	str	r3, [r2, #0]
 801c18a:	e00b      	b.n	801c1a4 <HAL_RCC_OscConfig+0xb0>
 801c18c:	4b78      	ldr	r3, [pc, #480]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	4a77      	ldr	r2, [pc, #476]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c196:	6013      	str	r3, [r2, #0]
 801c198:	4b75      	ldr	r3, [pc, #468]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c19a:	681b      	ldr	r3, [r3, #0]
 801c19c:	4a74      	ldr	r2, [pc, #464]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c19e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c1a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	685b      	ldr	r3, [r3, #4]
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d013      	beq.n	801c1d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1ac:	f7fc fd0e 	bl	8018bcc <HAL_GetTick>
 801c1b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c1b2:	e008      	b.n	801c1c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1b4:	f7fc fd0a 	bl	8018bcc <HAL_GetTick>
 801c1b8:	4602      	mov	r2, r0
 801c1ba:	693b      	ldr	r3, [r7, #16]
 801c1bc:	1ad3      	subs	r3, r2, r3
 801c1be:	2b64      	cmp	r3, #100	; 0x64
 801c1c0:	d901      	bls.n	801c1c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801c1c2:	2303      	movs	r3, #3
 801c1c4:	e2a6      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c1c6:	4b6a      	ldr	r3, [pc, #424]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c1c8:	681b      	ldr	r3, [r3, #0]
 801c1ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	d0f0      	beq.n	801c1b4 <HAL_RCC_OscConfig+0xc0>
 801c1d2:	e014      	b.n	801c1fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c1d4:	f7fc fcfa 	bl	8018bcc <HAL_GetTick>
 801c1d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c1da:	e008      	b.n	801c1ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c1dc:	f7fc fcf6 	bl	8018bcc <HAL_GetTick>
 801c1e0:	4602      	mov	r2, r0
 801c1e2:	693b      	ldr	r3, [r7, #16]
 801c1e4:	1ad3      	subs	r3, r2, r3
 801c1e6:	2b64      	cmp	r3, #100	; 0x64
 801c1e8:	d901      	bls.n	801c1ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c1ea:	2303      	movs	r3, #3
 801c1ec:	e292      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 801c1ee:	4b60      	ldr	r3, [pc, #384]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c1f0:	681b      	ldr	r3, [r3, #0]
 801c1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d1f0      	bne.n	801c1dc <HAL_RCC_OscConfig+0xe8>
 801c1fa:	e000      	b.n	801c1fe <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c1fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	f003 0302 	and.w	r3, r3, #2
 801c206:	2b00      	cmp	r3, #0
 801c208:	d075      	beq.n	801c2f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c20a:	4b59      	ldr	r3, [pc, #356]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c20c:	689b      	ldr	r3, [r3, #8]
 801c20e:	f003 030c 	and.w	r3, r3, #12
 801c212:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 801c214:	4b56      	ldr	r3, [pc, #344]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c216:	68db      	ldr	r3, [r3, #12]
 801c218:	f003 0303 	and.w	r3, r3, #3
 801c21c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 801c21e:	69bb      	ldr	r3, [r7, #24]
 801c220:	2b0c      	cmp	r3, #12
 801c222:	d102      	bne.n	801c22a <HAL_RCC_OscConfig+0x136>
 801c224:	697b      	ldr	r3, [r7, #20]
 801c226:	2b02      	cmp	r3, #2
 801c228:	d002      	beq.n	801c230 <HAL_RCC_OscConfig+0x13c>
 801c22a:	69bb      	ldr	r3, [r7, #24]
 801c22c:	2b04      	cmp	r3, #4
 801c22e:	d11f      	bne.n	801c270 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c230:	4b4f      	ldr	r3, [pc, #316]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d005      	beq.n	801c248 <HAL_RCC_OscConfig+0x154>
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	68db      	ldr	r3, [r3, #12]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d101      	bne.n	801c248 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 801c244:	2301      	movs	r3, #1
 801c246:	e265      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c248:	4b49      	ldr	r3, [pc, #292]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c24a:	685b      	ldr	r3, [r3, #4]
 801c24c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	691b      	ldr	r3, [r3, #16]
 801c254:	061b      	lsls	r3, r3, #24
 801c256:	4946      	ldr	r1, [pc, #280]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c258:	4313      	orrs	r3, r2
 801c25a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 801c25c:	4b45      	ldr	r3, [pc, #276]	; (801c374 <HAL_RCC_OscConfig+0x280>)
 801c25e:	681b      	ldr	r3, [r3, #0]
 801c260:	4618      	mov	r0, r3
 801c262:	f7fc fc67 	bl	8018b34 <HAL_InitTick>
 801c266:	4603      	mov	r3, r0
 801c268:	2b00      	cmp	r3, #0
 801c26a:	d043      	beq.n	801c2f4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 801c26c:	2301      	movs	r3, #1
 801c26e:	e251      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 801c270:	687b      	ldr	r3, [r7, #4]
 801c272:	68db      	ldr	r3, [r3, #12]
 801c274:	2b00      	cmp	r3, #0
 801c276:	d023      	beq.n	801c2c0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c278:	4b3d      	ldr	r3, [pc, #244]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c27a:	681b      	ldr	r3, [r3, #0]
 801c27c:	4a3c      	ldr	r2, [pc, #240]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c27e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c284:	f7fc fca2 	bl	8018bcc <HAL_GetTick>
 801c288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c28a:	e008      	b.n	801c29e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c28c:	f7fc fc9e 	bl	8018bcc <HAL_GetTick>
 801c290:	4602      	mov	r2, r0
 801c292:	693b      	ldr	r3, [r7, #16]
 801c294:	1ad3      	subs	r3, r2, r3
 801c296:	2b02      	cmp	r3, #2
 801c298:	d901      	bls.n	801c29e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c29a:	2303      	movs	r3, #3
 801c29c:	e23a      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c29e:	4b34      	ldr	r3, [pc, #208]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c2a6:	2b00      	cmp	r3, #0
 801c2a8:	d0f0      	beq.n	801c28c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2aa:	4b31      	ldr	r3, [pc, #196]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2ac:	685b      	ldr	r3, [r3, #4]
 801c2ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	691b      	ldr	r3, [r3, #16]
 801c2b6:	061b      	lsls	r3, r3, #24
 801c2b8:	492d      	ldr	r1, [pc, #180]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2ba:	4313      	orrs	r3, r2
 801c2bc:	604b      	str	r3, [r1, #4]
 801c2be:	e01a      	b.n	801c2f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c2c0:	4b2b      	ldr	r3, [pc, #172]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2c2:	681b      	ldr	r3, [r3, #0]
 801c2c4:	4a2a      	ldr	r2, [pc, #168]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801c2ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2cc:	f7fc fc7e 	bl	8018bcc <HAL_GetTick>
 801c2d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c2d2:	e008      	b.n	801c2e6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c2d4:	f7fc fc7a 	bl	8018bcc <HAL_GetTick>
 801c2d8:	4602      	mov	r2, r0
 801c2da:	693b      	ldr	r3, [r7, #16]
 801c2dc:	1ad3      	subs	r3, r2, r3
 801c2de:	2b02      	cmp	r3, #2
 801c2e0:	d901      	bls.n	801c2e6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 801c2e2:	2303      	movs	r3, #3
 801c2e4:	e216      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801c2e6:	4b22      	ldr	r3, [pc, #136]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c2e8:	681b      	ldr	r3, [r3, #0]
 801c2ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c2ee:	2b00      	cmp	r3, #0
 801c2f0:	d1f0      	bne.n	801c2d4 <HAL_RCC_OscConfig+0x1e0>
 801c2f2:	e000      	b.n	801c2f6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c2f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c2f6:	687b      	ldr	r3, [r7, #4]
 801c2f8:	681b      	ldr	r3, [r3, #0]
 801c2fa:	f003 0308 	and.w	r3, r3, #8
 801c2fe:	2b00      	cmp	r3, #0
 801c300:	d041      	beq.n	801c386 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	695b      	ldr	r3, [r3, #20]
 801c306:	2b00      	cmp	r3, #0
 801c308:	d01c      	beq.n	801c344 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c30a:	4b19      	ldr	r3, [pc, #100]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c30c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c310:	4a17      	ldr	r2, [pc, #92]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c312:	f043 0301 	orr.w	r3, r3, #1
 801c316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c31a:	f7fc fc57 	bl	8018bcc <HAL_GetTick>
 801c31e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c320:	e008      	b.n	801c334 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c322:	f7fc fc53 	bl	8018bcc <HAL_GetTick>
 801c326:	4602      	mov	r2, r0
 801c328:	693b      	ldr	r3, [r7, #16]
 801c32a:	1ad3      	subs	r3, r2, r3
 801c32c:	2b02      	cmp	r3, #2
 801c32e:	d901      	bls.n	801c334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801c330:	2303      	movs	r3, #3
 801c332:	e1ef      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 801c334:	4b0e      	ldr	r3, [pc, #56]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c33a:	f003 0302 	and.w	r3, r3, #2
 801c33e:	2b00      	cmp	r3, #0
 801c340:	d0ef      	beq.n	801c322 <HAL_RCC_OscConfig+0x22e>
 801c342:	e020      	b.n	801c386 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c344:	4b0a      	ldr	r3, [pc, #40]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c346:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c34a:	4a09      	ldr	r2, [pc, #36]	; (801c370 <HAL_RCC_OscConfig+0x27c>)
 801c34c:	f023 0301 	bic.w	r3, r3, #1
 801c350:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c354:	f7fc fc3a 	bl	8018bcc <HAL_GetTick>
 801c358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c35a:	e00d      	b.n	801c378 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c35c:	f7fc fc36 	bl	8018bcc <HAL_GetTick>
 801c360:	4602      	mov	r2, r0
 801c362:	693b      	ldr	r3, [r7, #16]
 801c364:	1ad3      	subs	r3, r2, r3
 801c366:	2b02      	cmp	r3, #2
 801c368:	d906      	bls.n	801c378 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c36a:	2303      	movs	r3, #3
 801c36c:	e1d2      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
 801c36e:	bf00      	nop
 801c370:	40021000 	.word	0x40021000
 801c374:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801c378:	4b8c      	ldr	r3, [pc, #560]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c37a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c37e:	f003 0302 	and.w	r3, r3, #2
 801c382:	2b00      	cmp	r3, #0
 801c384:	d1ea      	bne.n	801c35c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	f003 0304 	and.w	r3, r3, #4
 801c38e:	2b00      	cmp	r3, #0
 801c390:	f000 80a6 	beq.w	801c4e0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 801c394:	2300      	movs	r3, #0
 801c396:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801c398:	4b84      	ldr	r3, [pc, #528]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c39a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c39c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c3a0:	2b00      	cmp	r3, #0
 801c3a2:	d101      	bne.n	801c3a8 <HAL_RCC_OscConfig+0x2b4>
 801c3a4:	2301      	movs	r3, #1
 801c3a6:	e000      	b.n	801c3aa <HAL_RCC_OscConfig+0x2b6>
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d00d      	beq.n	801c3ca <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801c3ae:	4b7f      	ldr	r3, [pc, #508]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3b2:	4a7e      	ldr	r2, [pc, #504]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c3b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c3b8:	6593      	str	r3, [r2, #88]	; 0x58
 801c3ba:	4b7c      	ldr	r3, [pc, #496]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c3c2:	60fb      	str	r3, [r7, #12]
 801c3c4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801c3c6:	2301      	movs	r3, #1
 801c3c8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c3ca:	4b79      	ldr	r3, [pc, #484]	; (801c5b0 <HAL_RCC_OscConfig+0x4bc>)
 801c3cc:	681b      	ldr	r3, [r3, #0]
 801c3ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c3d2:	2b00      	cmp	r3, #0
 801c3d4:	d118      	bne.n	801c408 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c3d6:	4b76      	ldr	r3, [pc, #472]	; (801c5b0 <HAL_RCC_OscConfig+0x4bc>)
 801c3d8:	681b      	ldr	r3, [r3, #0]
 801c3da:	4a75      	ldr	r2, [pc, #468]	; (801c5b0 <HAL_RCC_OscConfig+0x4bc>)
 801c3dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c3e2:	f7fc fbf3 	bl	8018bcc <HAL_GetTick>
 801c3e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c3e8:	e008      	b.n	801c3fc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c3ea:	f7fc fbef 	bl	8018bcc <HAL_GetTick>
 801c3ee:	4602      	mov	r2, r0
 801c3f0:	693b      	ldr	r3, [r7, #16]
 801c3f2:	1ad3      	subs	r3, r2, r3
 801c3f4:	2b02      	cmp	r3, #2
 801c3f6:	d901      	bls.n	801c3fc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 801c3f8:	2303      	movs	r3, #3
 801c3fa:	e18b      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c3fc:	4b6c      	ldr	r3, [pc, #432]	; (801c5b0 <HAL_RCC_OscConfig+0x4bc>)
 801c3fe:	681b      	ldr	r3, [r3, #0]
 801c400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c404:	2b00      	cmp	r3, #0
 801c406:	d0f0      	beq.n	801c3ea <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c408:	687b      	ldr	r3, [r7, #4]
 801c40a:	689b      	ldr	r3, [r3, #8]
 801c40c:	2b01      	cmp	r3, #1
 801c40e:	d108      	bne.n	801c422 <HAL_RCC_OscConfig+0x32e>
 801c410:	4b66      	ldr	r3, [pc, #408]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c416:	4a65      	ldr	r2, [pc, #404]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c418:	f043 0301 	orr.w	r3, r3, #1
 801c41c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c420:	e024      	b.n	801c46c <HAL_RCC_OscConfig+0x378>
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	689b      	ldr	r3, [r3, #8]
 801c426:	2b05      	cmp	r3, #5
 801c428:	d110      	bne.n	801c44c <HAL_RCC_OscConfig+0x358>
 801c42a:	4b60      	ldr	r3, [pc, #384]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c430:	4a5e      	ldr	r2, [pc, #376]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c432:	f043 0304 	orr.w	r3, r3, #4
 801c436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c43a:	4b5c      	ldr	r3, [pc, #368]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c43c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c440:	4a5a      	ldr	r2, [pc, #360]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c442:	f043 0301 	orr.w	r3, r3, #1
 801c446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c44a:	e00f      	b.n	801c46c <HAL_RCC_OscConfig+0x378>
 801c44c:	4b57      	ldr	r3, [pc, #348]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c44e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c452:	4a56      	ldr	r2, [pc, #344]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c454:	f023 0301 	bic.w	r3, r3, #1
 801c458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 801c45c:	4b53      	ldr	r3, [pc, #332]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c45e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c462:	4a52      	ldr	r2, [pc, #328]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c464:	f023 0304 	bic.w	r3, r3, #4
 801c468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 801c46c:	687b      	ldr	r3, [r7, #4]
 801c46e:	689b      	ldr	r3, [r3, #8]
 801c470:	2b00      	cmp	r3, #0
 801c472:	d016      	beq.n	801c4a2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c474:	f7fc fbaa 	bl	8018bcc <HAL_GetTick>
 801c478:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c47a:	e00a      	b.n	801c492 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c47c:	f7fc fba6 	bl	8018bcc <HAL_GetTick>
 801c480:	4602      	mov	r2, r0
 801c482:	693b      	ldr	r3, [r7, #16]
 801c484:	1ad3      	subs	r3, r2, r3
 801c486:	f241 3288 	movw	r2, #5000	; 0x1388
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d901      	bls.n	801c492 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 801c48e:	2303      	movs	r3, #3
 801c490:	e140      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801c492:	4b46      	ldr	r3, [pc, #280]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c498:	f003 0302 	and.w	r3, r3, #2
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d0ed      	beq.n	801c47c <HAL_RCC_OscConfig+0x388>
 801c4a0:	e015      	b.n	801c4ce <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4a2:	f7fc fb93 	bl	8018bcc <HAL_GetTick>
 801c4a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c4a8:	e00a      	b.n	801c4c0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c4aa:	f7fc fb8f 	bl	8018bcc <HAL_GetTick>
 801c4ae:	4602      	mov	r2, r0
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	1ad3      	subs	r3, r2, r3
 801c4b4:	f241 3288 	movw	r2, #5000	; 0x1388
 801c4b8:	4293      	cmp	r3, r2
 801c4ba:	d901      	bls.n	801c4c0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 801c4bc:	2303      	movs	r3, #3
 801c4be:	e129      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801c4c0:	4b3a      	ldr	r3, [pc, #232]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c4c6:	f003 0302 	and.w	r3, r3, #2
 801c4ca:	2b00      	cmp	r3, #0
 801c4cc:	d1ed      	bne.n	801c4aa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c4ce:	7ffb      	ldrb	r3, [r7, #31]
 801c4d0:	2b01      	cmp	r3, #1
 801c4d2:	d105      	bne.n	801c4e0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c4d4:	4b35      	ldr	r3, [pc, #212]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c4d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c4d8:	4a34      	ldr	r2, [pc, #208]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c4da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c4de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	f003 0320 	and.w	r3, r3, #32
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	d03c      	beq.n	801c566 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 801c4ec:	687b      	ldr	r3, [r7, #4]
 801c4ee:	699b      	ldr	r3, [r3, #24]
 801c4f0:	2b00      	cmp	r3, #0
 801c4f2:	d01c      	beq.n	801c52e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c4f4:	4b2d      	ldr	r3, [pc, #180]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c4f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c4fa:	4a2c      	ldr	r2, [pc, #176]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c4fc:	f043 0301 	orr.w	r3, r3, #1
 801c500:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c504:	f7fc fb62 	bl	8018bcc <HAL_GetTick>
 801c508:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c50a:	e008      	b.n	801c51e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c50c:	f7fc fb5e 	bl	8018bcc <HAL_GetTick>
 801c510:	4602      	mov	r2, r0
 801c512:	693b      	ldr	r3, [r7, #16]
 801c514:	1ad3      	subs	r3, r2, r3
 801c516:	2b02      	cmp	r3, #2
 801c518:	d901      	bls.n	801c51e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 801c51a:	2303      	movs	r3, #3
 801c51c:	e0fa      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801c51e:	4b23      	ldr	r3, [pc, #140]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c520:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c524:	f003 0302 	and.w	r3, r3, #2
 801c528:	2b00      	cmp	r3, #0
 801c52a:	d0ef      	beq.n	801c50c <HAL_RCC_OscConfig+0x418>
 801c52c:	e01b      	b.n	801c566 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c52e:	4b1f      	ldr	r3, [pc, #124]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c534:	4a1d      	ldr	r2, [pc, #116]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c536:	f023 0301 	bic.w	r3, r3, #1
 801c53a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c53e:	f7fc fb45 	bl	8018bcc <HAL_GetTick>
 801c542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c544:	e008      	b.n	801c558 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c546:	f7fc fb41 	bl	8018bcc <HAL_GetTick>
 801c54a:	4602      	mov	r2, r0
 801c54c:	693b      	ldr	r3, [r7, #16]
 801c54e:	1ad3      	subs	r3, r2, r3
 801c550:	2b02      	cmp	r3, #2
 801c552:	d901      	bls.n	801c558 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 801c554:	2303      	movs	r3, #3
 801c556:	e0dd      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 801c558:	4b14      	ldr	r3, [pc, #80]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c55a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c55e:	f003 0302 	and.w	r3, r3, #2
 801c562:	2b00      	cmp	r3, #0
 801c564:	d1ef      	bne.n	801c546 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	69db      	ldr	r3, [r3, #28]
 801c56a:	2b00      	cmp	r3, #0
 801c56c:	f000 80d1 	beq.w	801c712 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801c570:	4b0e      	ldr	r3, [pc, #56]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c572:	689b      	ldr	r3, [r3, #8]
 801c574:	f003 030c 	and.w	r3, r3, #12
 801c578:	2b0c      	cmp	r3, #12
 801c57a:	f000 808b 	beq.w	801c694 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	69db      	ldr	r3, [r3, #28]
 801c582:	2b02      	cmp	r3, #2
 801c584:	d15e      	bne.n	801c644 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c586:	4b09      	ldr	r3, [pc, #36]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	4a08      	ldr	r2, [pc, #32]	; (801c5ac <HAL_RCC_OscConfig+0x4b8>)
 801c58c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c592:	f7fc fb1b 	bl	8018bcc <HAL_GetTick>
 801c596:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c598:	e00c      	b.n	801c5b4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c59a:	f7fc fb17 	bl	8018bcc <HAL_GetTick>
 801c59e:	4602      	mov	r2, r0
 801c5a0:	693b      	ldr	r3, [r7, #16]
 801c5a2:	1ad3      	subs	r3, r2, r3
 801c5a4:	2b02      	cmp	r3, #2
 801c5a6:	d905      	bls.n	801c5b4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 801c5a8:	2303      	movs	r3, #3
 801c5aa:	e0b3      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
 801c5ac:	40021000 	.word	0x40021000
 801c5b0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c5b4:	4b59      	ldr	r3, [pc, #356]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c5b6:	681b      	ldr	r3, [r3, #0]
 801c5b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c5bc:	2b00      	cmp	r3, #0
 801c5be:	d1ec      	bne.n	801c59a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c5c0:	4b56      	ldr	r3, [pc, #344]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c5c2:	68da      	ldr	r2, [r3, #12]
 801c5c4:	4b56      	ldr	r3, [pc, #344]	; (801c720 <HAL_RCC_OscConfig+0x62c>)
 801c5c6:	4013      	ands	r3, r2
 801c5c8:	687a      	ldr	r2, [r7, #4]
 801c5ca:	6a11      	ldr	r1, [r2, #32]
 801c5cc:	687a      	ldr	r2, [r7, #4]
 801c5ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c5d0:	3a01      	subs	r2, #1
 801c5d2:	0112      	lsls	r2, r2, #4
 801c5d4:	4311      	orrs	r1, r2
 801c5d6:	687a      	ldr	r2, [r7, #4]
 801c5d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801c5da:	0212      	lsls	r2, r2, #8
 801c5dc:	4311      	orrs	r1, r2
 801c5de:	687a      	ldr	r2, [r7, #4]
 801c5e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 801c5e2:	0852      	lsrs	r2, r2, #1
 801c5e4:	3a01      	subs	r2, #1
 801c5e6:	0552      	lsls	r2, r2, #21
 801c5e8:	4311      	orrs	r1, r2
 801c5ea:	687a      	ldr	r2, [r7, #4]
 801c5ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801c5ee:	0852      	lsrs	r2, r2, #1
 801c5f0:	3a01      	subs	r2, #1
 801c5f2:	0652      	lsls	r2, r2, #25
 801c5f4:	4311      	orrs	r1, r2
 801c5f6:	687a      	ldr	r2, [r7, #4]
 801c5f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801c5fa:	06d2      	lsls	r2, r2, #27
 801c5fc:	430a      	orrs	r2, r1
 801c5fe:	4947      	ldr	r1, [pc, #284]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c600:	4313      	orrs	r3, r2
 801c602:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c604:	4b45      	ldr	r3, [pc, #276]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c606:	681b      	ldr	r3, [r3, #0]
 801c608:	4a44      	ldr	r2, [pc, #272]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c60a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c60e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 801c610:	4b42      	ldr	r3, [pc, #264]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c612:	68db      	ldr	r3, [r3, #12]
 801c614:	4a41      	ldr	r2, [pc, #260]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c61a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c61c:	f7fc fad6 	bl	8018bcc <HAL_GetTick>
 801c620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c622:	e008      	b.n	801c636 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c624:	f7fc fad2 	bl	8018bcc <HAL_GetTick>
 801c628:	4602      	mov	r2, r0
 801c62a:	693b      	ldr	r3, [r7, #16]
 801c62c:	1ad3      	subs	r3, r2, r3
 801c62e:	2b02      	cmp	r3, #2
 801c630:	d901      	bls.n	801c636 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 801c632:	2303      	movs	r3, #3
 801c634:	e06e      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c636:	4b39      	ldr	r3, [pc, #228]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c638:	681b      	ldr	r3, [r3, #0]
 801c63a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d0f0      	beq.n	801c624 <HAL_RCC_OscConfig+0x530>
 801c642:	e066      	b.n	801c712 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c644:	4b35      	ldr	r3, [pc, #212]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c646:	681b      	ldr	r3, [r3, #0]
 801c648:	4a34      	ldr	r2, [pc, #208]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c64a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c64e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 801c650:	4b32      	ldr	r3, [pc, #200]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c652:	68db      	ldr	r3, [r3, #12]
 801c654:	4a31      	ldr	r2, [pc, #196]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c656:	f023 0303 	bic.w	r3, r3, #3
 801c65a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801c65c:	4b2f      	ldr	r3, [pc, #188]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c65e:	68db      	ldr	r3, [r3, #12]
 801c660:	4a2e      	ldr	r2, [pc, #184]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c662:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 801c666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c66a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c66c:	f7fc faae 	bl	8018bcc <HAL_GetTick>
 801c670:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c672:	e008      	b.n	801c686 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c674:	f7fc faaa 	bl	8018bcc <HAL_GetTick>
 801c678:	4602      	mov	r2, r0
 801c67a:	693b      	ldr	r3, [r7, #16]
 801c67c:	1ad3      	subs	r3, r2, r3
 801c67e:	2b02      	cmp	r3, #2
 801c680:	d901      	bls.n	801c686 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 801c682:	2303      	movs	r3, #3
 801c684:	e046      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801c686:	4b25      	ldr	r3, [pc, #148]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c688:	681b      	ldr	r3, [r3, #0]
 801c68a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c68e:	2b00      	cmp	r3, #0
 801c690:	d1f0      	bne.n	801c674 <HAL_RCC_OscConfig+0x580>
 801c692:	e03e      	b.n	801c712 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	69db      	ldr	r3, [r3, #28]
 801c698:	2b01      	cmp	r3, #1
 801c69a:	d101      	bne.n	801c6a0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 801c69c:	2301      	movs	r3, #1
 801c69e:	e039      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801c6a0:	4b1e      	ldr	r3, [pc, #120]	; (801c71c <HAL_RCC_OscConfig+0x628>)
 801c6a2:	68db      	ldr	r3, [r3, #12]
 801c6a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c6a6:	697b      	ldr	r3, [r7, #20]
 801c6a8:	f003 0203 	and.w	r2, r3, #3
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	6a1b      	ldr	r3, [r3, #32]
 801c6b0:	429a      	cmp	r2, r3
 801c6b2:	d12c      	bne.n	801c70e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c6b4:	697b      	ldr	r3, [r7, #20]
 801c6b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c6be:	3b01      	subs	r3, #1
 801c6c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d123      	bne.n	801c70e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 801c6cc:	687b      	ldr	r3, [r7, #4]
 801c6ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c6d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 801c6d2:	429a      	cmp	r2, r3
 801c6d4:	d11b      	bne.n	801c70e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c6d6:	697b      	ldr	r3, [r7, #20]
 801c6d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c6e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 801c6e2:	429a      	cmp	r2, r3
 801c6e4:	d113      	bne.n	801c70e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c6e6:	697b      	ldr	r3, [r7, #20]
 801c6e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c6f0:	085b      	lsrs	r3, r3, #1
 801c6f2:	3b01      	subs	r3, #1
 801c6f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 801c6f6:	429a      	cmp	r2, r3
 801c6f8:	d109      	bne.n	801c70e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 801c6fa:	697b      	ldr	r3, [r7, #20]
 801c6fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 801c700:	687b      	ldr	r3, [r7, #4]
 801c702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c704:	085b      	lsrs	r3, r3, #1
 801c706:	3b01      	subs	r3, #1
 801c708:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c70a:	429a      	cmp	r2, r3
 801c70c:	d001      	beq.n	801c712 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 801c70e:	2301      	movs	r3, #1
 801c710:	e000      	b.n	801c714 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 801c712:	2300      	movs	r3, #0
}
 801c714:	4618      	mov	r0, r3
 801c716:	3720      	adds	r7, #32
 801c718:	46bd      	mov	sp, r7
 801c71a:	bd80      	pop	{r7, pc}
 801c71c:	40021000 	.word	0x40021000
 801c720:	019f800c 	.word	0x019f800c

0801c724 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b086      	sub	sp, #24
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 801c72e:	2300      	movs	r3, #0
 801c730:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	2b00      	cmp	r3, #0
 801c736:	d101      	bne.n	801c73c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c738:	2301      	movs	r3, #1
 801c73a:	e11e      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c73c:	4b91      	ldr	r3, [pc, #580]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c73e:	681b      	ldr	r3, [r3, #0]
 801c740:	f003 030f 	and.w	r3, r3, #15
 801c744:	683a      	ldr	r2, [r7, #0]
 801c746:	429a      	cmp	r2, r3
 801c748:	d910      	bls.n	801c76c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c74a:	4b8e      	ldr	r3, [pc, #568]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	f023 020f 	bic.w	r2, r3, #15
 801c752:	498c      	ldr	r1, [pc, #560]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c754:	683b      	ldr	r3, [r7, #0]
 801c756:	4313      	orrs	r3, r2
 801c758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c75a:	4b8a      	ldr	r3, [pc, #552]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	f003 030f 	and.w	r3, r3, #15
 801c762:	683a      	ldr	r2, [r7, #0]
 801c764:	429a      	cmp	r2, r3
 801c766:	d001      	beq.n	801c76c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c768:	2301      	movs	r3, #1
 801c76a:	e106      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c76c:	687b      	ldr	r3, [r7, #4]
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	f003 0301 	and.w	r3, r3, #1
 801c774:	2b00      	cmp	r3, #0
 801c776:	d073      	beq.n	801c860 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c778:	687b      	ldr	r3, [r7, #4]
 801c77a:	685b      	ldr	r3, [r3, #4]
 801c77c:	2b03      	cmp	r3, #3
 801c77e:	d129      	bne.n	801c7d4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801c780:	4b81      	ldr	r3, [pc, #516]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c782:	681b      	ldr	r3, [r3, #0]
 801c784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d101      	bne.n	801c790 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 801c78c:	2301      	movs	r3, #1
 801c78e:	e0f4      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 801c790:	f000 f99c 	bl	801cacc <RCC_GetSysClockFreqFromPLLSource>
 801c794:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801c796:	693b      	ldr	r3, [r7, #16]
 801c798:	4a7c      	ldr	r2, [pc, #496]	; (801c98c <HAL_RCC_ClockConfig+0x268>)
 801c79a:	4293      	cmp	r3, r2
 801c79c:	d93f      	bls.n	801c81e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c79e:	4b7a      	ldr	r3, [pc, #488]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c7a0:	689b      	ldr	r3, [r3, #8]
 801c7a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	d009      	beq.n	801c7be <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d033      	beq.n	801c81e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d12f      	bne.n	801c81e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c7be:	4b72      	ldr	r3, [pc, #456]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c7c0:	689b      	ldr	r3, [r3, #8]
 801c7c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c7c6:	4a70      	ldr	r2, [pc, #448]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c7c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c7cc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801c7ce:	2380      	movs	r3, #128	; 0x80
 801c7d0:	617b      	str	r3, [r7, #20]
 801c7d2:	e024      	b.n	801c81e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	685b      	ldr	r3, [r3, #4]
 801c7d8:	2b02      	cmp	r3, #2
 801c7da:	d107      	bne.n	801c7ec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801c7dc:	4b6a      	ldr	r3, [pc, #424]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c7de:	681b      	ldr	r3, [r3, #0]
 801c7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d109      	bne.n	801c7fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c7e8:	2301      	movs	r3, #1
 801c7ea:	e0c6      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801c7ec:	4b66      	ldr	r3, [pc, #408]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d101      	bne.n	801c7fc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 801c7f8:	2301      	movs	r3, #1
 801c7fa:	e0be      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801c7fc:	f000 f8ce 	bl	801c99c <HAL_RCC_GetSysClockFreq>
 801c800:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 801c802:	693b      	ldr	r3, [r7, #16]
 801c804:	4a61      	ldr	r2, [pc, #388]	; (801c98c <HAL_RCC_ClockConfig+0x268>)
 801c806:	4293      	cmp	r3, r2
 801c808:	d909      	bls.n	801c81e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801c80a:	4b5f      	ldr	r3, [pc, #380]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c80c:	689b      	ldr	r3, [r3, #8]
 801c80e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c812:	4a5d      	ldr	r2, [pc, #372]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c818:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801c81a:	2380      	movs	r3, #128	; 0x80
 801c81c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c81e:	4b5a      	ldr	r3, [pc, #360]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c820:	689b      	ldr	r3, [r3, #8]
 801c822:	f023 0203 	bic.w	r2, r3, #3
 801c826:	687b      	ldr	r3, [r7, #4]
 801c828:	685b      	ldr	r3, [r3, #4]
 801c82a:	4957      	ldr	r1, [pc, #348]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c82c:	4313      	orrs	r3, r2
 801c82e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c830:	f7fc f9cc 	bl	8018bcc <HAL_GetTick>
 801c834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c836:	e00a      	b.n	801c84e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c838:	f7fc f9c8 	bl	8018bcc <HAL_GetTick>
 801c83c:	4602      	mov	r2, r0
 801c83e:	68fb      	ldr	r3, [r7, #12]
 801c840:	1ad3      	subs	r3, r2, r3
 801c842:	f241 3288 	movw	r2, #5000	; 0x1388
 801c846:	4293      	cmp	r3, r2
 801c848:	d901      	bls.n	801c84e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 801c84a:	2303      	movs	r3, #3
 801c84c:	e095      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c84e:	4b4e      	ldr	r3, [pc, #312]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c850:	689b      	ldr	r3, [r3, #8]
 801c852:	f003 020c 	and.w	r2, r3, #12
 801c856:	687b      	ldr	r3, [r7, #4]
 801c858:	685b      	ldr	r3, [r3, #4]
 801c85a:	009b      	lsls	r3, r3, #2
 801c85c:	429a      	cmp	r2, r3
 801c85e:	d1eb      	bne.n	801c838 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c860:	687b      	ldr	r3, [r7, #4]
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	f003 0302 	and.w	r3, r3, #2
 801c868:	2b00      	cmp	r3, #0
 801c86a:	d023      	beq.n	801c8b4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c86c:	687b      	ldr	r3, [r7, #4]
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	f003 0304 	and.w	r3, r3, #4
 801c874:	2b00      	cmp	r3, #0
 801c876:	d005      	beq.n	801c884 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c878:	4b43      	ldr	r3, [pc, #268]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c87a:	689b      	ldr	r3, [r3, #8]
 801c87c:	4a42      	ldr	r2, [pc, #264]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c87e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c882:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	f003 0308 	and.w	r3, r3, #8
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d007      	beq.n	801c8a0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 801c890:	4b3d      	ldr	r3, [pc, #244]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c892:	689b      	ldr	r3, [r3, #8]
 801c894:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c898:	4a3b      	ldr	r2, [pc, #236]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c89a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 801c89e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c8a0:	4b39      	ldr	r3, [pc, #228]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c8a2:	689b      	ldr	r3, [r3, #8]
 801c8a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c8a8:	687b      	ldr	r3, [r7, #4]
 801c8aa:	689b      	ldr	r3, [r3, #8]
 801c8ac:	4936      	ldr	r1, [pc, #216]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c8ae:	4313      	orrs	r3, r2
 801c8b0:	608b      	str	r3, [r1, #8]
 801c8b2:	e008      	b.n	801c8c6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801c8b4:	697b      	ldr	r3, [r7, #20]
 801c8b6:	2b80      	cmp	r3, #128	; 0x80
 801c8b8:	d105      	bne.n	801c8c6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 801c8ba:	4b33      	ldr	r3, [pc, #204]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c8bc:	689b      	ldr	r3, [r3, #8]
 801c8be:	4a32      	ldr	r2, [pc, #200]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c8c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801c8c4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c8c6:	4b2f      	ldr	r3, [pc, #188]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c8c8:	681b      	ldr	r3, [r3, #0]
 801c8ca:	f003 030f 	and.w	r3, r3, #15
 801c8ce:	683a      	ldr	r2, [r7, #0]
 801c8d0:	429a      	cmp	r2, r3
 801c8d2:	d21d      	bcs.n	801c910 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c8d4:	4b2b      	ldr	r3, [pc, #172]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c8d6:	681b      	ldr	r3, [r3, #0]
 801c8d8:	f023 020f 	bic.w	r2, r3, #15
 801c8dc:	4929      	ldr	r1, [pc, #164]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c8de:	683b      	ldr	r3, [r7, #0]
 801c8e0:	4313      	orrs	r3, r2
 801c8e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 801c8e4:	f7fc f972 	bl	8018bcc <HAL_GetTick>
 801c8e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c8ea:	e00a      	b.n	801c902 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c8ec:	f7fc f96e 	bl	8018bcc <HAL_GetTick>
 801c8f0:	4602      	mov	r2, r0
 801c8f2:	68fb      	ldr	r3, [r7, #12]
 801c8f4:	1ad3      	subs	r3, r2, r3
 801c8f6:	f241 3288 	movw	r2, #5000	; 0x1388
 801c8fa:	4293      	cmp	r3, r2
 801c8fc:	d901      	bls.n	801c902 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 801c8fe:	2303      	movs	r3, #3
 801c900:	e03b      	b.n	801c97a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c902:	4b20      	ldr	r3, [pc, #128]	; (801c984 <HAL_RCC_ClockConfig+0x260>)
 801c904:	681b      	ldr	r3, [r3, #0]
 801c906:	f003 030f 	and.w	r3, r3, #15
 801c90a:	683a      	ldr	r2, [r7, #0]
 801c90c:	429a      	cmp	r2, r3
 801c90e:	d1ed      	bne.n	801c8ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	681b      	ldr	r3, [r3, #0]
 801c914:	f003 0304 	and.w	r3, r3, #4
 801c918:	2b00      	cmp	r3, #0
 801c91a:	d008      	beq.n	801c92e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c91c:	4b1a      	ldr	r3, [pc, #104]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c91e:	689b      	ldr	r3, [r3, #8]
 801c920:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	68db      	ldr	r3, [r3, #12]
 801c928:	4917      	ldr	r1, [pc, #92]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c92a:	4313      	orrs	r3, r2
 801c92c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	681b      	ldr	r3, [r3, #0]
 801c932:	f003 0308 	and.w	r3, r3, #8
 801c936:	2b00      	cmp	r3, #0
 801c938:	d009      	beq.n	801c94e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801c93a:	4b13      	ldr	r3, [pc, #76]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c93c:	689b      	ldr	r3, [r3, #8]
 801c93e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	691b      	ldr	r3, [r3, #16]
 801c946:	00db      	lsls	r3, r3, #3
 801c948:	490f      	ldr	r1, [pc, #60]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c94a:	4313      	orrs	r3, r2
 801c94c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 801c94e:	f000 f825 	bl	801c99c <HAL_RCC_GetSysClockFreq>
 801c952:	4602      	mov	r2, r0
 801c954:	4b0c      	ldr	r3, [pc, #48]	; (801c988 <HAL_RCC_ClockConfig+0x264>)
 801c956:	689b      	ldr	r3, [r3, #8]
 801c958:	091b      	lsrs	r3, r3, #4
 801c95a:	f003 030f 	and.w	r3, r3, #15
 801c95e:	490c      	ldr	r1, [pc, #48]	; (801c990 <HAL_RCC_ClockConfig+0x26c>)
 801c960:	5ccb      	ldrb	r3, [r1, r3]
 801c962:	f003 031f 	and.w	r3, r3, #31
 801c966:	fa22 f303 	lsr.w	r3, r2, r3
 801c96a:	4a0a      	ldr	r2, [pc, #40]	; (801c994 <HAL_RCC_ClockConfig+0x270>)
 801c96c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 801c96e:	4b0a      	ldr	r3, [pc, #40]	; (801c998 <HAL_RCC_ClockConfig+0x274>)
 801c970:	681b      	ldr	r3, [r3, #0]
 801c972:	4618      	mov	r0, r3
 801c974:	f7fc f8de 	bl	8018b34 <HAL_InitTick>
 801c978:	4603      	mov	r3, r0
}
 801c97a:	4618      	mov	r0, r3
 801c97c:	3718      	adds	r7, #24
 801c97e:	46bd      	mov	sp, r7
 801c980:	bd80      	pop	{r7, pc}
 801c982:	bf00      	nop
 801c984:	40022000 	.word	0x40022000
 801c988:	40021000 	.word	0x40021000
 801c98c:	04c4b400 	.word	0x04c4b400
 801c990:	080235a0 	.word	0x080235a0
 801c994:	20000000 	.word	0x20000000
 801c998:	20000004 	.word	0x20000004

0801c99c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c99c:	b480      	push	{r7}
 801c99e:	b087      	sub	sp, #28
 801c9a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801c9a2:	4b2c      	ldr	r3, [pc, #176]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9a4:	689b      	ldr	r3, [r3, #8]
 801c9a6:	f003 030c 	and.w	r3, r3, #12
 801c9aa:	2b04      	cmp	r3, #4
 801c9ac:	d102      	bne.n	801c9b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801c9ae:	4b2a      	ldr	r3, [pc, #168]	; (801ca58 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c9b0:	613b      	str	r3, [r7, #16]
 801c9b2:	e047      	b.n	801ca44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801c9b4:	4b27      	ldr	r3, [pc, #156]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9b6:	689b      	ldr	r3, [r3, #8]
 801c9b8:	f003 030c 	and.w	r3, r3, #12
 801c9bc:	2b08      	cmp	r3, #8
 801c9be:	d102      	bne.n	801c9c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 801c9c0:	4b25      	ldr	r3, [pc, #148]	; (801ca58 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c9c2:	613b      	str	r3, [r7, #16]
 801c9c4:	e03e      	b.n	801ca44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801c9c6:	4b23      	ldr	r3, [pc, #140]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9c8:	689b      	ldr	r3, [r3, #8]
 801c9ca:	f003 030c 	and.w	r3, r3, #12
 801c9ce:	2b0c      	cmp	r3, #12
 801c9d0:	d136      	bne.n	801ca40 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801c9d2:	4b20      	ldr	r3, [pc, #128]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9d4:	68db      	ldr	r3, [r3, #12]
 801c9d6:	f003 0303 	and.w	r3, r3, #3
 801c9da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801c9dc:	4b1d      	ldr	r3, [pc, #116]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9de:	68db      	ldr	r3, [r3, #12]
 801c9e0:	091b      	lsrs	r3, r3, #4
 801c9e2:	f003 030f 	and.w	r3, r3, #15
 801c9e6:	3301      	adds	r3, #1
 801c9e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801c9ea:	68fb      	ldr	r3, [r7, #12]
 801c9ec:	2b03      	cmp	r3, #3
 801c9ee:	d10c      	bne.n	801ca0a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801c9f0:	4a19      	ldr	r2, [pc, #100]	; (801ca58 <HAL_RCC_GetSysClockFreq+0xbc>)
 801c9f2:	68bb      	ldr	r3, [r7, #8]
 801c9f4:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9f8:	4a16      	ldr	r2, [pc, #88]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801c9fa:	68d2      	ldr	r2, [r2, #12]
 801c9fc:	0a12      	lsrs	r2, r2, #8
 801c9fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ca02:	fb02 f303 	mul.w	r3, r2, r3
 801ca06:	617b      	str	r3, [r7, #20]
      break;
 801ca08:	e00c      	b.n	801ca24 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801ca0a:	4a13      	ldr	r2, [pc, #76]	; (801ca58 <HAL_RCC_GetSysClockFreq+0xbc>)
 801ca0c:	68bb      	ldr	r3, [r7, #8]
 801ca0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca12:	4a10      	ldr	r2, [pc, #64]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ca14:	68d2      	ldr	r2, [r2, #12]
 801ca16:	0a12      	lsrs	r2, r2, #8
 801ca18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801ca1c:	fb02 f303 	mul.w	r3, r2, r3
 801ca20:	617b      	str	r3, [r7, #20]
      break;
 801ca22:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801ca24:	4b0b      	ldr	r3, [pc, #44]	; (801ca54 <HAL_RCC_GetSysClockFreq+0xb8>)
 801ca26:	68db      	ldr	r3, [r3, #12]
 801ca28:	0e5b      	lsrs	r3, r3, #25
 801ca2a:	f003 0303 	and.w	r3, r3, #3
 801ca2e:	3301      	adds	r3, #1
 801ca30:	005b      	lsls	r3, r3, #1
 801ca32:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 801ca34:	697a      	ldr	r2, [r7, #20]
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	fbb2 f3f3 	udiv	r3, r2, r3
 801ca3c:	613b      	str	r3, [r7, #16]
 801ca3e:	e001      	b.n	801ca44 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 801ca40:	2300      	movs	r3, #0
 801ca42:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 801ca44:	693b      	ldr	r3, [r7, #16]
}
 801ca46:	4618      	mov	r0, r3
 801ca48:	371c      	adds	r7, #28
 801ca4a:	46bd      	mov	sp, r7
 801ca4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca50:	4770      	bx	lr
 801ca52:	bf00      	nop
 801ca54:	40021000 	.word	0x40021000
 801ca58:	00f42400 	.word	0x00f42400

0801ca5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801ca5c:	b480      	push	{r7}
 801ca5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801ca60:	4b03      	ldr	r3, [pc, #12]	; (801ca70 <HAL_RCC_GetHCLKFreq+0x14>)
 801ca62:	681b      	ldr	r3, [r3, #0]
}
 801ca64:	4618      	mov	r0, r3
 801ca66:	46bd      	mov	sp, r7
 801ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca6c:	4770      	bx	lr
 801ca6e:	bf00      	nop
 801ca70:	20000000 	.word	0x20000000

0801ca74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ca74:	b580      	push	{r7, lr}
 801ca76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 801ca78:	f7ff fff0 	bl	801ca5c <HAL_RCC_GetHCLKFreq>
 801ca7c:	4602      	mov	r2, r0
 801ca7e:	4b06      	ldr	r3, [pc, #24]	; (801ca98 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ca80:	689b      	ldr	r3, [r3, #8]
 801ca82:	0a1b      	lsrs	r3, r3, #8
 801ca84:	f003 0307 	and.w	r3, r3, #7
 801ca88:	4904      	ldr	r1, [pc, #16]	; (801ca9c <HAL_RCC_GetPCLK1Freq+0x28>)
 801ca8a:	5ccb      	ldrb	r3, [r1, r3]
 801ca8c:	f003 031f 	and.w	r3, r3, #31
 801ca90:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ca94:	4618      	mov	r0, r3
 801ca96:	bd80      	pop	{r7, pc}
 801ca98:	40021000 	.word	0x40021000
 801ca9c:	080235b0 	.word	0x080235b0

0801caa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 801caa4:	f7ff ffda 	bl	801ca5c <HAL_RCC_GetHCLKFreq>
 801caa8:	4602      	mov	r2, r0
 801caaa:	4b06      	ldr	r3, [pc, #24]	; (801cac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 801caac:	689b      	ldr	r3, [r3, #8]
 801caae:	0adb      	lsrs	r3, r3, #11
 801cab0:	f003 0307 	and.w	r3, r3, #7
 801cab4:	4904      	ldr	r1, [pc, #16]	; (801cac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 801cab6:	5ccb      	ldrb	r3, [r1, r3]
 801cab8:	f003 031f 	and.w	r3, r3, #31
 801cabc:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cac0:	4618      	mov	r0, r3
 801cac2:	bd80      	pop	{r7, pc}
 801cac4:	40021000 	.word	0x40021000
 801cac8:	080235b0 	.word	0x080235b0

0801cacc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 801cacc:	b480      	push	{r7}
 801cace:	b087      	sub	sp, #28
 801cad0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801cad2:	4b1e      	ldr	r3, [pc, #120]	; (801cb4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cad4:	68db      	ldr	r3, [r3, #12]
 801cad6:	f003 0303 	and.w	r3, r3, #3
 801cada:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801cadc:	4b1b      	ldr	r3, [pc, #108]	; (801cb4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cade:	68db      	ldr	r3, [r3, #12]
 801cae0:	091b      	lsrs	r3, r3, #4
 801cae2:	f003 030f 	and.w	r3, r3, #15
 801cae6:	3301      	adds	r3, #1
 801cae8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 801caea:	693b      	ldr	r3, [r7, #16]
 801caec:	2b03      	cmp	r3, #3
 801caee:	d10c      	bne.n	801cb0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801caf0:	4a17      	ldr	r2, [pc, #92]	; (801cb50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801caf2:	68fb      	ldr	r3, [r7, #12]
 801caf4:	fbb2 f3f3 	udiv	r3, r2, r3
 801caf8:	4a14      	ldr	r2, [pc, #80]	; (801cb4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cafa:	68d2      	ldr	r2, [r2, #12]
 801cafc:	0a12      	lsrs	r2, r2, #8
 801cafe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb02:	fb02 f303 	mul.w	r3, r2, r3
 801cb06:	617b      	str	r3, [r7, #20]
    break;
 801cb08:	e00c      	b.n	801cb24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801cb0a:	4a11      	ldr	r2, [pc, #68]	; (801cb50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 801cb0c:	68fb      	ldr	r3, [r7, #12]
 801cb0e:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb12:	4a0e      	ldr	r2, [pc, #56]	; (801cb4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cb14:	68d2      	ldr	r2, [r2, #12]
 801cb16:	0a12      	lsrs	r2, r2, #8
 801cb18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 801cb1c:	fb02 f303 	mul.w	r3, r2, r3
 801cb20:	617b      	str	r3, [r7, #20]
    break;
 801cb22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801cb24:	4b09      	ldr	r3, [pc, #36]	; (801cb4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 801cb26:	68db      	ldr	r3, [r3, #12]
 801cb28:	0e5b      	lsrs	r3, r3, #25
 801cb2a:	f003 0303 	and.w	r3, r3, #3
 801cb2e:	3301      	adds	r3, #1
 801cb30:	005b      	lsls	r3, r3, #1
 801cb32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 801cb34:	697a      	ldr	r2, [r7, #20]
 801cb36:	68bb      	ldr	r3, [r7, #8]
 801cb38:	fbb2 f3f3 	udiv	r3, r2, r3
 801cb3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801cb3e:	687b      	ldr	r3, [r7, #4]
}
 801cb40:	4618      	mov	r0, r3
 801cb42:	371c      	adds	r7, #28
 801cb44:	46bd      	mov	sp, r7
 801cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb4a:	4770      	bx	lr
 801cb4c:	40021000 	.word	0x40021000
 801cb50:	00f42400 	.word	0x00f42400

0801cb54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cb54:	b580      	push	{r7, lr}
 801cb56:	b086      	sub	sp, #24
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cb60:	2300      	movs	r3, #0
 801cb62:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cb64:	687b      	ldr	r3, [r7, #4]
 801cb66:	681b      	ldr	r3, [r3, #0]
 801cb68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cb6c:	2b00      	cmp	r3, #0
 801cb6e:	f000 8098 	beq.w	801cca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801cb72:	2300      	movs	r3, #0
 801cb74:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801cb76:	4b43      	ldr	r3, [pc, #268]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d10d      	bne.n	801cb9e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801cb82:	4b40      	ldr	r3, [pc, #256]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb86:	4a3f      	ldr	r2, [pc, #252]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cb8c:	6593      	str	r3, [r2, #88]	; 0x58
 801cb8e:	4b3d      	ldr	r3, [pc, #244]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cb90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb96:	60bb      	str	r3, [r7, #8]
 801cb98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801cb9a:	2301      	movs	r3, #1
 801cb9c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cb9e:	4b3a      	ldr	r3, [pc, #232]	; (801cc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cba0:	681b      	ldr	r3, [r3, #0]
 801cba2:	4a39      	ldr	r2, [pc, #228]	; (801cc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cba8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cbaa:	f7fc f80f 	bl	8018bcc <HAL_GetTick>
 801cbae:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cbb0:	e009      	b.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cbb2:	f7fc f80b 	bl	8018bcc <HAL_GetTick>
 801cbb6:	4602      	mov	r2, r0
 801cbb8:	68fb      	ldr	r3, [r7, #12]
 801cbba:	1ad3      	subs	r3, r2, r3
 801cbbc:	2b02      	cmp	r3, #2
 801cbbe:	d902      	bls.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 801cbc0:	2303      	movs	r3, #3
 801cbc2:	74fb      	strb	r3, [r7, #19]
        break;
 801cbc4:	e005      	b.n	801cbd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cbc6:	4b30      	ldr	r3, [pc, #192]	; (801cc88 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 801cbc8:	681b      	ldr	r3, [r3, #0]
 801cbca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d0ef      	beq.n	801cbb2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 801cbd2:	7cfb      	ldrb	r3, [r7, #19]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d159      	bne.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 801cbd8:	4b2a      	ldr	r3, [pc, #168]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cbda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cbde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cbe2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 801cbe4:	697b      	ldr	r3, [r7, #20]
 801cbe6:	2b00      	cmp	r3, #0
 801cbe8:	d01e      	beq.n	801cc28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 801cbea:	687b      	ldr	r3, [r7, #4]
 801cbec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cbee:	697a      	ldr	r2, [r7, #20]
 801cbf0:	429a      	cmp	r2, r3
 801cbf2:	d019      	beq.n	801cc28 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 801cbf4:	4b23      	ldr	r3, [pc, #140]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cbf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cbfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cbfe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801cc00:	4b20      	ldr	r3, [pc, #128]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc06:	4a1f      	ldr	r2, [pc, #124]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cc0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 801cc10:	4b1c      	ldr	r3, [pc, #112]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc16:	4a1b      	ldr	r2, [pc, #108]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cc1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 801cc20:	4a18      	ldr	r2, [pc, #96]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc22:	697b      	ldr	r3, [r7, #20]
 801cc24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801cc28:	697b      	ldr	r3, [r7, #20]
 801cc2a:	f003 0301 	and.w	r3, r3, #1
 801cc2e:	2b00      	cmp	r3, #0
 801cc30:	d016      	beq.n	801cc60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cc32:	f7fb ffcb 	bl	8018bcc <HAL_GetTick>
 801cc36:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cc38:	e00b      	b.n	801cc52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cc3a:	f7fb ffc7 	bl	8018bcc <HAL_GetTick>
 801cc3e:	4602      	mov	r2, r0
 801cc40:	68fb      	ldr	r3, [r7, #12]
 801cc42:	1ad3      	subs	r3, r2, r3
 801cc44:	f241 3288 	movw	r2, #5000	; 0x1388
 801cc48:	4293      	cmp	r3, r2
 801cc4a:	d902      	bls.n	801cc52 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 801cc4c:	2303      	movs	r3, #3
 801cc4e:	74fb      	strb	r3, [r7, #19]
            break;
 801cc50:	e006      	b.n	801cc60 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801cc52:	4b0c      	ldr	r3, [pc, #48]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc58:	f003 0302 	and.w	r3, r3, #2
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d0ec      	beq.n	801cc3a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 801cc60:	7cfb      	ldrb	r3, [r7, #19]
 801cc62:	2b00      	cmp	r3, #0
 801cc64:	d10b      	bne.n	801cc7e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cc66:	4b07      	ldr	r3, [pc, #28]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cc70:	687b      	ldr	r3, [r7, #4]
 801cc72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc74:	4903      	ldr	r1, [pc, #12]	; (801cc84 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 801cc76:	4313      	orrs	r3, r2
 801cc78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801cc7c:	e008      	b.n	801cc90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cc7e:	7cfb      	ldrb	r3, [r7, #19]
 801cc80:	74bb      	strb	r3, [r7, #18]
 801cc82:	e005      	b.n	801cc90 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 801cc84:	40021000 	.word	0x40021000
 801cc88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc8c:	7cfb      	ldrb	r3, [r7, #19]
 801cc8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 801cc90:	7c7b      	ldrb	r3, [r7, #17]
 801cc92:	2b01      	cmp	r3, #1
 801cc94:	d105      	bne.n	801cca2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801cc96:	4ba7      	ldr	r3, [pc, #668]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc9a:	4aa6      	ldr	r2, [pc, #664]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cc9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801cca0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	f003 0301 	and.w	r3, r3, #1
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d00a      	beq.n	801ccc4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801ccae:	4ba1      	ldr	r3, [pc, #644]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccb4:	f023 0203 	bic.w	r2, r3, #3
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	685b      	ldr	r3, [r3, #4]
 801ccbc:	499d      	ldr	r1, [pc, #628]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccbe:	4313      	orrs	r3, r2
 801ccc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801ccc4:	687b      	ldr	r3, [r7, #4]
 801ccc6:	681b      	ldr	r3, [r3, #0]
 801ccc8:	f003 0302 	and.w	r3, r3, #2
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d00a      	beq.n	801cce6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801ccd0:	4b98      	ldr	r3, [pc, #608]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccd6:	f023 020c 	bic.w	r2, r3, #12
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	689b      	ldr	r3, [r3, #8]
 801ccde:	4995      	ldr	r1, [pc, #596]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cce0:	4313      	orrs	r3, r2
 801cce2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	681b      	ldr	r3, [r3, #0]
 801ccea:	f003 0304 	and.w	r3, r3, #4
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	d00a      	beq.n	801cd08 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801ccf2:	4b90      	ldr	r3, [pc, #576]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ccf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ccf8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	68db      	ldr	r3, [r3, #12]
 801cd00:	498c      	ldr	r1, [pc, #560]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd02:	4313      	orrs	r3, r2
 801cd04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	f003 0308 	and.w	r3, r3, #8
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	d00a      	beq.n	801cd2a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cd14:	4b87      	ldr	r3, [pc, #540]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	691b      	ldr	r3, [r3, #16]
 801cd22:	4984      	ldr	r1, [pc, #528]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd24:	4313      	orrs	r3, r2
 801cd26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	f003 0310 	and.w	r3, r3, #16
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	d00a      	beq.n	801cd4c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cd36:	4b7f      	ldr	r3, [pc, #508]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	695b      	ldr	r3, [r3, #20]
 801cd44:	497b      	ldr	r1, [pc, #492]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd46:	4313      	orrs	r3, r2
 801cd48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	681b      	ldr	r3, [r3, #0]
 801cd50:	f003 0320 	and.w	r3, r3, #32
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	d00a      	beq.n	801cd6e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801cd58:	4b76      	ldr	r3, [pc, #472]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd5e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cd62:	687b      	ldr	r3, [r7, #4]
 801cd64:	699b      	ldr	r3, [r3, #24]
 801cd66:	4973      	ldr	r1, [pc, #460]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd68:	4313      	orrs	r3, r2
 801cd6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cd6e:	687b      	ldr	r3, [r7, #4]
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d00a      	beq.n	801cd90 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cd7a:	4b6e      	ldr	r3, [pc, #440]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cd80:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	69db      	ldr	r3, [r3, #28]
 801cd88:	496a      	ldr	r1, [pc, #424]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd8a:	4313      	orrs	r3, r2
 801cd8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cd90:	687b      	ldr	r3, [r7, #4]
 801cd92:	681b      	ldr	r3, [r3, #0]
 801cd94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d00a      	beq.n	801cdb2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801cd9c:	4b65      	ldr	r3, [pc, #404]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cd9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cda2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801cda6:	687b      	ldr	r3, [r7, #4]
 801cda8:	6a1b      	ldr	r3, [r3, #32]
 801cdaa:	4962      	ldr	r1, [pc, #392]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdac:	4313      	orrs	r3, r2
 801cdae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801cdb2:	687b      	ldr	r3, [r7, #4]
 801cdb4:	681b      	ldr	r3, [r3, #0]
 801cdb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d00a      	beq.n	801cdd4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801cdbe:	4b5d      	ldr	r3, [pc, #372]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cdc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cdc8:	687b      	ldr	r3, [r7, #4]
 801cdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cdcc:	4959      	ldr	r1, [pc, #356]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdce:	4313      	orrs	r3, r2
 801cdd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801cdd4:	687b      	ldr	r3, [r7, #4]
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cddc:	2b00      	cmp	r3, #0
 801cdde:	d00a      	beq.n	801cdf6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801cde0:	4b54      	ldr	r3, [pc, #336]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cde2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cde6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801cdea:	687b      	ldr	r3, [r7, #4]
 801cdec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdee:	4951      	ldr	r1, [pc, #324]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cdf0:	4313      	orrs	r3, r2
 801cdf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cdf6:	687b      	ldr	r3, [r7, #4]
 801cdf8:	681b      	ldr	r3, [r3, #0]
 801cdfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d015      	beq.n	801ce2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ce02:	4b4c      	ldr	r3, [pc, #304]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce08:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ce0c:	687b      	ldr	r3, [r7, #4]
 801ce0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce10:	4948      	ldr	r1, [pc, #288]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce12:	4313      	orrs	r3, r2
 801ce14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 801ce18:	687b      	ldr	r3, [r7, #4]
 801ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce1c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ce20:	d105      	bne.n	801ce2e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ce22:	4b44      	ldr	r3, [pc, #272]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce24:	68db      	ldr	r3, [r3, #12]
 801ce26:	4a43      	ldr	r2, [pc, #268]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce2c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	681b      	ldr	r3, [r3, #0]
 801ce32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d015      	beq.n	801ce66 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801ce3a:	4b3e      	ldr	r3, [pc, #248]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce48:	493a      	ldr	r1, [pc, #232]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce4a:	4313      	orrs	r3, r2
 801ce4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ce54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801ce58:	d105      	bne.n	801ce66 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ce5a:	4b36      	ldr	r3, [pc, #216]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce5c:	68db      	ldr	r3, [r3, #12]
 801ce5e:	4a35      	ldr	r2, [pc, #212]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce64:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801ce6e:	2b00      	cmp	r3, #0
 801ce70:	d015      	beq.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801ce72:	4b30      	ldr	r3, [pc, #192]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce80:	492c      	ldr	r1, [pc, #176]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce82:	4313      	orrs	r3, r2
 801ce84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801ce88:	687b      	ldr	r3, [r7, #4]
 801ce8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ce8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801ce90:	d105      	bne.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ce92:	4b28      	ldr	r3, [pc, #160]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce94:	68db      	ldr	r3, [r3, #12]
 801ce96:	4a27      	ldr	r2, [pc, #156]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ce98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ce9c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	681b      	ldr	r3, [r3, #0]
 801cea2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d015      	beq.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ceaa:	4b22      	ldr	r3, [pc, #136]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ceb0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ceb8:	491e      	ldr	r1, [pc, #120]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ceba:	4313      	orrs	r3, r2
 801cebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cec4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cec8:	d105      	bne.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801ceca:	4b1a      	ldr	r3, [pc, #104]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cecc:	68db      	ldr	r3, [r3, #12]
 801cece:	4a19      	ldr	r2, [pc, #100]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801ced0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801ced4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 801ced6:	687b      	ldr	r3, [r7, #4]
 801ced8:	681b      	ldr	r3, [r3, #0]
 801ceda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cede:	2b00      	cmp	r3, #0
 801cee0:	d015      	beq.n	801cf0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cee2:	4b14      	ldr	r3, [pc, #80]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cee8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801ceec:	687b      	ldr	r3, [r7, #4]
 801ceee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cef0:	4910      	ldr	r1, [pc, #64]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cef2:	4313      	orrs	r3, r2
 801cef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cefc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801cf00:	d105      	bne.n	801cf0e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cf02:	4b0c      	ldr	r3, [pc, #48]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf04:	68db      	ldr	r3, [r3, #12]
 801cf06:	4a0b      	ldr	r2, [pc, #44]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cf0c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	681b      	ldr	r3, [r3, #0]
 801cf12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	d018      	beq.n	801cf4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801cf1a:	4b06      	ldr	r3, [pc, #24]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf20:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf28:	4902      	ldr	r1, [pc, #8]	; (801cf34 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 801cf2a:	4313      	orrs	r3, r2
 801cf2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	e001      	b.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 801cf34:	40021000 	.word	0x40021000
 801cf38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cf3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801cf3e:	d105      	bne.n	801cf4c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801cf40:	4b21      	ldr	r3, [pc, #132]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	4a20      	ldr	r2, [pc, #128]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cf4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 801cf4c:	687b      	ldr	r3, [r7, #4]
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801cf54:	2b00      	cmp	r3, #0
 801cf56:	d015      	beq.n	801cf84 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 801cf58:	4b1b      	ldr	r3, [pc, #108]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf5e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 801cf62:	687b      	ldr	r3, [r7, #4]
 801cf64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf66:	4918      	ldr	r1, [pc, #96]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf68:	4313      	orrs	r3, r2
 801cf6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 801cf6e:	687b      	ldr	r3, [r7, #4]
 801cf70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cf72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801cf76:	d105      	bne.n	801cf84 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801cf78:	4b13      	ldr	r3, [pc, #76]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf7a:	68db      	ldr	r3, [r3, #12]
 801cf7c:	4a12      	ldr	r2, [pc, #72]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cf82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	681b      	ldr	r3, [r3, #0]
 801cf88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d015      	beq.n	801cfbc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801cf90:	4b0d      	ldr	r3, [pc, #52]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cf92:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cf96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cf9a:	687b      	ldr	r3, [r7, #4]
 801cf9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cf9e:	490a      	ldr	r1, [pc, #40]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cfa0:	4313      	orrs	r3, r2
 801cfa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cfaa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cfae:	d105      	bne.n	801cfbc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801cfb0:	4b05      	ldr	r3, [pc, #20]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cfb2:	68db      	ldr	r3, [r3, #12]
 801cfb4:	4a04      	ldr	r2, [pc, #16]	; (801cfc8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 801cfb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cfba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801cfbc:	7cbb      	ldrb	r3, [r7, #18]
}
 801cfbe:	4618      	mov	r0, r3
 801cfc0:	3718      	adds	r7, #24
 801cfc2:	46bd      	mov	sp, r7
 801cfc4:	bd80      	pop	{r7, pc}
 801cfc6:	bf00      	nop
 801cfc8:	40021000 	.word	0x40021000

0801cfcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801cfcc:	b580      	push	{r7, lr}
 801cfce:	b084      	sub	sp, #16
 801cfd0:	af00      	add	r7, sp, #0
 801cfd2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801cfd4:	687b      	ldr	r3, [r7, #4]
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d101      	bne.n	801cfde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801cfda:	2301      	movs	r3, #1
 801cfdc:	e09d      	b.n	801d11a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d108      	bne.n	801cff8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	685b      	ldr	r3, [r3, #4]
 801cfea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801cfee:	d009      	beq.n	801d004 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	2200      	movs	r2, #0
 801cff4:	61da      	str	r2, [r3, #28]
 801cff6:	e005      	b.n	801d004 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	2200      	movs	r2, #0
 801cffc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	2200      	movs	r2, #0
 801d002:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d004:	687b      	ldr	r3, [r7, #4]
 801d006:	2200      	movs	r2, #0
 801d008:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d00a:	687b      	ldr	r3, [r7, #4]
 801d00c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d010:	b2db      	uxtb	r3, r3
 801d012:	2b00      	cmp	r3, #0
 801d014:	d106      	bne.n	801d024 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	2200      	movs	r2, #0
 801d01a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d01e:	6878      	ldr	r0, [r7, #4]
 801d020:	f7fa f908 	bl	8017234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	2202      	movs	r2, #2
 801d028:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	681a      	ldr	r2, [r3, #0]
 801d032:	687b      	ldr	r3, [r7, #4]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d03a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	68db      	ldr	r3, [r3, #12]
 801d040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d044:	d902      	bls.n	801d04c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d046:	2300      	movs	r3, #0
 801d048:	60fb      	str	r3, [r7, #12]
 801d04a:	e002      	b.n	801d052 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d04c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d050:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	68db      	ldr	r3, [r3, #12]
 801d056:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d05a:	d007      	beq.n	801d06c <HAL_SPI_Init+0xa0>
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	68db      	ldr	r3, [r3, #12]
 801d060:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d064:	d002      	beq.n	801d06c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d066:	687b      	ldr	r3, [r7, #4]
 801d068:	2200      	movs	r2, #0
 801d06a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	685b      	ldr	r3, [r3, #4]
 801d070:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	689b      	ldr	r3, [r3, #8]
 801d078:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d07c:	431a      	orrs	r2, r3
 801d07e:	687b      	ldr	r3, [r7, #4]
 801d080:	691b      	ldr	r3, [r3, #16]
 801d082:	f003 0302 	and.w	r3, r3, #2
 801d086:	431a      	orrs	r2, r3
 801d088:	687b      	ldr	r3, [r7, #4]
 801d08a:	695b      	ldr	r3, [r3, #20]
 801d08c:	f003 0301 	and.w	r3, r3, #1
 801d090:	431a      	orrs	r2, r3
 801d092:	687b      	ldr	r3, [r7, #4]
 801d094:	699b      	ldr	r3, [r3, #24]
 801d096:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d09a:	431a      	orrs	r2, r3
 801d09c:	687b      	ldr	r3, [r7, #4]
 801d09e:	69db      	ldr	r3, [r3, #28]
 801d0a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801d0a4:	431a      	orrs	r2, r3
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	6a1b      	ldr	r3, [r3, #32]
 801d0aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d0ae:	ea42 0103 	orr.w	r1, r2, r3
 801d0b2:	687b      	ldr	r3, [r7, #4]
 801d0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d0b6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	681b      	ldr	r3, [r3, #0]
 801d0be:	430a      	orrs	r2, r1
 801d0c0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d0c2:	687b      	ldr	r3, [r7, #4]
 801d0c4:	699b      	ldr	r3, [r3, #24]
 801d0c6:	0c1b      	lsrs	r3, r3, #16
 801d0c8:	f003 0204 	and.w	r2, r3, #4
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0d0:	f003 0310 	and.w	r3, r3, #16
 801d0d4:	431a      	orrs	r2, r3
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d0da:	f003 0308 	and.w	r3, r3, #8
 801d0de:	431a      	orrs	r2, r3
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	68db      	ldr	r3, [r3, #12]
 801d0e4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d0e8:	ea42 0103 	orr.w	r1, r2, r3
 801d0ec:	68fb      	ldr	r3, [r7, #12]
 801d0ee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	681b      	ldr	r3, [r3, #0]
 801d0f6:	430a      	orrs	r2, r1
 801d0f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	681b      	ldr	r3, [r3, #0]
 801d0fe:	69da      	ldr	r2, [r3, #28]
 801d100:	687b      	ldr	r3, [r7, #4]
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d10a:	687b      	ldr	r3, [r7, #4]
 801d10c:	2200      	movs	r2, #0
 801d10e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d110:	687b      	ldr	r3, [r7, #4]
 801d112:	2201      	movs	r2, #1
 801d114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d118:	2300      	movs	r3, #0
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3710      	adds	r7, #16
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}

0801d122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d122:	b580      	push	{r7, lr}
 801d124:	b088      	sub	sp, #32
 801d126:	af00      	add	r7, sp, #0
 801d128:	60f8      	str	r0, [r7, #12]
 801d12a:	60b9      	str	r1, [r7, #8]
 801d12c:	603b      	str	r3, [r7, #0]
 801d12e:	4613      	mov	r3, r2
 801d130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d132:	2300      	movs	r3, #0
 801d134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d136:	68fb      	ldr	r3, [r7, #12]
 801d138:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d13c:	2b01      	cmp	r3, #1
 801d13e:	d101      	bne.n	801d144 <HAL_SPI_Transmit+0x22>
 801d140:	2302      	movs	r3, #2
 801d142:	e158      	b.n	801d3f6 <HAL_SPI_Transmit+0x2d4>
 801d144:	68fb      	ldr	r3, [r7, #12]
 801d146:	2201      	movs	r2, #1
 801d148:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d14c:	f7fb fd3e 	bl	8018bcc <HAL_GetTick>
 801d150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d152:	88fb      	ldrh	r3, [r7, #6]
 801d154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d156:	68fb      	ldr	r3, [r7, #12]
 801d158:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d15c:	b2db      	uxtb	r3, r3
 801d15e:	2b01      	cmp	r3, #1
 801d160:	d002      	beq.n	801d168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d162:	2302      	movs	r3, #2
 801d164:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d166:	e13d      	b.n	801d3e4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d168:	68bb      	ldr	r3, [r7, #8]
 801d16a:	2b00      	cmp	r3, #0
 801d16c:	d002      	beq.n	801d174 <HAL_SPI_Transmit+0x52>
 801d16e:	88fb      	ldrh	r3, [r7, #6]
 801d170:	2b00      	cmp	r3, #0
 801d172:	d102      	bne.n	801d17a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d174:	2301      	movs	r3, #1
 801d176:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d178:	e134      	b.n	801d3e4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d17a:	68fb      	ldr	r3, [r7, #12]
 801d17c:	2203      	movs	r2, #3
 801d17e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d182:	68fb      	ldr	r3, [r7, #12]
 801d184:	2200      	movs	r2, #0
 801d186:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d188:	68fb      	ldr	r3, [r7, #12]
 801d18a:	68ba      	ldr	r2, [r7, #8]
 801d18c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d18e:	68fb      	ldr	r3, [r7, #12]
 801d190:	88fa      	ldrh	r2, [r7, #6]
 801d192:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d194:	68fb      	ldr	r3, [r7, #12]
 801d196:	88fa      	ldrh	r2, [r7, #6]
 801d198:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d19a:	68fb      	ldr	r3, [r7, #12]
 801d19c:	2200      	movs	r2, #0
 801d19e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d1a0:	68fb      	ldr	r3, [r7, #12]
 801d1a2:	2200      	movs	r2, #0
 801d1a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d1a8:	68fb      	ldr	r3, [r7, #12]
 801d1aa:	2200      	movs	r2, #0
 801d1ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d1b0:	68fb      	ldr	r3, [r7, #12]
 801d1b2:	2200      	movs	r2, #0
 801d1b4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d1b6:	68fb      	ldr	r3, [r7, #12]
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d1bc:	68fb      	ldr	r3, [r7, #12]
 801d1be:	689b      	ldr	r3, [r3, #8]
 801d1c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d1c4:	d10f      	bne.n	801d1e6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d1c6:	68fb      	ldr	r3, [r7, #12]
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	681a      	ldr	r2, [r3, #0]
 801d1cc:	68fb      	ldr	r3, [r7, #12]
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d1d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d1d6:	68fb      	ldr	r3, [r7, #12]
 801d1d8:	681b      	ldr	r3, [r3, #0]
 801d1da:	681a      	ldr	r2, [r3, #0]
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	681b      	ldr	r3, [r3, #0]
 801d1e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d1e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d1e6:	68fb      	ldr	r3, [r7, #12]
 801d1e8:	681b      	ldr	r3, [r3, #0]
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d1f0:	2b40      	cmp	r3, #64	; 0x40
 801d1f2:	d007      	beq.n	801d204 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d1f4:	68fb      	ldr	r3, [r7, #12]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	681a      	ldr	r2, [r3, #0]
 801d1fa:	68fb      	ldr	r3, [r7, #12]
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d202:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d204:	68fb      	ldr	r3, [r7, #12]
 801d206:	68db      	ldr	r3, [r3, #12]
 801d208:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d20c:	d94b      	bls.n	801d2a6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d20e:	68fb      	ldr	r3, [r7, #12]
 801d210:	685b      	ldr	r3, [r3, #4]
 801d212:	2b00      	cmp	r3, #0
 801d214:	d002      	beq.n	801d21c <HAL_SPI_Transmit+0xfa>
 801d216:	8afb      	ldrh	r3, [r7, #22]
 801d218:	2b01      	cmp	r3, #1
 801d21a:	d13e      	bne.n	801d29a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d220:	881a      	ldrh	r2, [r3, #0]
 801d222:	68fb      	ldr	r3, [r7, #12]
 801d224:	681b      	ldr	r3, [r3, #0]
 801d226:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d228:	68fb      	ldr	r3, [r7, #12]
 801d22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d22c:	1c9a      	adds	r2, r3, #2
 801d22e:	68fb      	ldr	r3, [r7, #12]
 801d230:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d232:	68fb      	ldr	r3, [r7, #12]
 801d234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d236:	b29b      	uxth	r3, r3
 801d238:	3b01      	subs	r3, #1
 801d23a:	b29a      	uxth	r2, r3
 801d23c:	68fb      	ldr	r3, [r7, #12]
 801d23e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d240:	e02b      	b.n	801d29a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d242:	68fb      	ldr	r3, [r7, #12]
 801d244:	681b      	ldr	r3, [r3, #0]
 801d246:	689b      	ldr	r3, [r3, #8]
 801d248:	f003 0302 	and.w	r3, r3, #2
 801d24c:	2b02      	cmp	r3, #2
 801d24e:	d112      	bne.n	801d276 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d250:	68fb      	ldr	r3, [r7, #12]
 801d252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d254:	881a      	ldrh	r2, [r3, #0]
 801d256:	68fb      	ldr	r3, [r7, #12]
 801d258:	681b      	ldr	r3, [r3, #0]
 801d25a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d25c:	68fb      	ldr	r3, [r7, #12]
 801d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d260:	1c9a      	adds	r2, r3, #2
 801d262:	68fb      	ldr	r3, [r7, #12]
 801d264:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d266:	68fb      	ldr	r3, [r7, #12]
 801d268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d26a:	b29b      	uxth	r3, r3
 801d26c:	3b01      	subs	r3, #1
 801d26e:	b29a      	uxth	r2, r3
 801d270:	68fb      	ldr	r3, [r7, #12]
 801d272:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d274:	e011      	b.n	801d29a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d276:	f7fb fca9 	bl	8018bcc <HAL_GetTick>
 801d27a:	4602      	mov	r2, r0
 801d27c:	69bb      	ldr	r3, [r7, #24]
 801d27e:	1ad3      	subs	r3, r2, r3
 801d280:	683a      	ldr	r2, [r7, #0]
 801d282:	429a      	cmp	r2, r3
 801d284:	d803      	bhi.n	801d28e <HAL_SPI_Transmit+0x16c>
 801d286:	683b      	ldr	r3, [r7, #0]
 801d288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d28c:	d102      	bne.n	801d294 <HAL_SPI_Transmit+0x172>
 801d28e:	683b      	ldr	r3, [r7, #0]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d102      	bne.n	801d29a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d294:	2303      	movs	r3, #3
 801d296:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d298:	e0a4      	b.n	801d3e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d29a:	68fb      	ldr	r3, [r7, #12]
 801d29c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d29e:	b29b      	uxth	r3, r3
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d1ce      	bne.n	801d242 <HAL_SPI_Transmit+0x120>
 801d2a4:	e07c      	b.n	801d3a0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d2a6:	68fb      	ldr	r3, [r7, #12]
 801d2a8:	685b      	ldr	r3, [r3, #4]
 801d2aa:	2b00      	cmp	r3, #0
 801d2ac:	d002      	beq.n	801d2b4 <HAL_SPI_Transmit+0x192>
 801d2ae:	8afb      	ldrh	r3, [r7, #22]
 801d2b0:	2b01      	cmp	r3, #1
 801d2b2:	d170      	bne.n	801d396 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d2b4:	68fb      	ldr	r3, [r7, #12]
 801d2b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d2b8:	b29b      	uxth	r3, r3
 801d2ba:	2b01      	cmp	r3, #1
 801d2bc:	d912      	bls.n	801d2e4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d2be:	68fb      	ldr	r3, [r7, #12]
 801d2c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2c2:	881a      	ldrh	r2, [r3, #0]
 801d2c4:	68fb      	ldr	r3, [r7, #12]
 801d2c6:	681b      	ldr	r3, [r3, #0]
 801d2c8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d2ca:	68fb      	ldr	r3, [r7, #12]
 801d2cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2ce:	1c9a      	adds	r2, r3, #2
 801d2d0:	68fb      	ldr	r3, [r7, #12]
 801d2d2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d2d4:	68fb      	ldr	r3, [r7, #12]
 801d2d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d2d8:	b29b      	uxth	r3, r3
 801d2da:	3b02      	subs	r3, #2
 801d2dc:	b29a      	uxth	r2, r3
 801d2de:	68fb      	ldr	r3, [r7, #12]
 801d2e0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d2e2:	e058      	b.n	801d396 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d2e4:	68fb      	ldr	r3, [r7, #12]
 801d2e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d2e8:	68fb      	ldr	r3, [r7, #12]
 801d2ea:	681b      	ldr	r3, [r3, #0]
 801d2ec:	330c      	adds	r3, #12
 801d2ee:	7812      	ldrb	r2, [r2, #0]
 801d2f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d2f2:	68fb      	ldr	r3, [r7, #12]
 801d2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d2f6:	1c5a      	adds	r2, r3, #1
 801d2f8:	68fb      	ldr	r3, [r7, #12]
 801d2fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d2fc:	68fb      	ldr	r3, [r7, #12]
 801d2fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d300:	b29b      	uxth	r3, r3
 801d302:	3b01      	subs	r3, #1
 801d304:	b29a      	uxth	r2, r3
 801d306:	68fb      	ldr	r3, [r7, #12]
 801d308:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d30a:	e044      	b.n	801d396 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d30c:	68fb      	ldr	r3, [r7, #12]
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	689b      	ldr	r3, [r3, #8]
 801d312:	f003 0302 	and.w	r3, r3, #2
 801d316:	2b02      	cmp	r3, #2
 801d318:	d12b      	bne.n	801d372 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d31a:	68fb      	ldr	r3, [r7, #12]
 801d31c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d31e:	b29b      	uxth	r3, r3
 801d320:	2b01      	cmp	r3, #1
 801d322:	d912      	bls.n	801d34a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d324:	68fb      	ldr	r3, [r7, #12]
 801d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d328:	881a      	ldrh	r2, [r3, #0]
 801d32a:	68fb      	ldr	r3, [r7, #12]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d330:	68fb      	ldr	r3, [r7, #12]
 801d332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d334:	1c9a      	adds	r2, r3, #2
 801d336:	68fb      	ldr	r3, [r7, #12]
 801d338:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d33e:	b29b      	uxth	r3, r3
 801d340:	3b02      	subs	r3, #2
 801d342:	b29a      	uxth	r2, r3
 801d344:	68fb      	ldr	r3, [r7, #12]
 801d346:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d348:	e025      	b.n	801d396 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d34a:	68fb      	ldr	r3, [r7, #12]
 801d34c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d34e:	68fb      	ldr	r3, [r7, #12]
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	330c      	adds	r3, #12
 801d354:	7812      	ldrb	r2, [r2, #0]
 801d356:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d358:	68fb      	ldr	r3, [r7, #12]
 801d35a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d35c:	1c5a      	adds	r2, r3, #1
 801d35e:	68fb      	ldr	r3, [r7, #12]
 801d360:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d362:	68fb      	ldr	r3, [r7, #12]
 801d364:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d366:	b29b      	uxth	r3, r3
 801d368:	3b01      	subs	r3, #1
 801d36a:	b29a      	uxth	r2, r3
 801d36c:	68fb      	ldr	r3, [r7, #12]
 801d36e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d370:	e011      	b.n	801d396 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d372:	f7fb fc2b 	bl	8018bcc <HAL_GetTick>
 801d376:	4602      	mov	r2, r0
 801d378:	69bb      	ldr	r3, [r7, #24]
 801d37a:	1ad3      	subs	r3, r2, r3
 801d37c:	683a      	ldr	r2, [r7, #0]
 801d37e:	429a      	cmp	r2, r3
 801d380:	d803      	bhi.n	801d38a <HAL_SPI_Transmit+0x268>
 801d382:	683b      	ldr	r3, [r7, #0]
 801d384:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d388:	d102      	bne.n	801d390 <HAL_SPI_Transmit+0x26e>
 801d38a:	683b      	ldr	r3, [r7, #0]
 801d38c:	2b00      	cmp	r3, #0
 801d38e:	d102      	bne.n	801d396 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d390:	2303      	movs	r3, #3
 801d392:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d394:	e026      	b.n	801d3e4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d396:	68fb      	ldr	r3, [r7, #12]
 801d398:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d39a:	b29b      	uxth	r3, r3
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d1b5      	bne.n	801d30c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d3a0:	69ba      	ldr	r2, [r7, #24]
 801d3a2:	6839      	ldr	r1, [r7, #0]
 801d3a4:	68f8      	ldr	r0, [r7, #12]
 801d3a6:	f000 fce3 	bl	801dd70 <SPI_EndRxTxTransaction>
 801d3aa:	4603      	mov	r3, r0
 801d3ac:	2b00      	cmp	r3, #0
 801d3ae:	d002      	beq.n	801d3b6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	2220      	movs	r2, #32
 801d3b4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d3b6:	68fb      	ldr	r3, [r7, #12]
 801d3b8:	689b      	ldr	r3, [r3, #8]
 801d3ba:	2b00      	cmp	r3, #0
 801d3bc:	d10a      	bne.n	801d3d4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d3be:	2300      	movs	r3, #0
 801d3c0:	613b      	str	r3, [r7, #16]
 801d3c2:	68fb      	ldr	r3, [r7, #12]
 801d3c4:	681b      	ldr	r3, [r3, #0]
 801d3c6:	68db      	ldr	r3, [r3, #12]
 801d3c8:	613b      	str	r3, [r7, #16]
 801d3ca:	68fb      	ldr	r3, [r7, #12]
 801d3cc:	681b      	ldr	r3, [r3, #0]
 801d3ce:	689b      	ldr	r3, [r3, #8]
 801d3d0:	613b      	str	r3, [r7, #16]
 801d3d2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d3d4:	68fb      	ldr	r3, [r7, #12]
 801d3d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d3d8:	2b00      	cmp	r3, #0
 801d3da:	d002      	beq.n	801d3e2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d3dc:	2301      	movs	r3, #1
 801d3de:	77fb      	strb	r3, [r7, #31]
 801d3e0:	e000      	b.n	801d3e4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d3e2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d3e4:	68fb      	ldr	r3, [r7, #12]
 801d3e6:	2201      	movs	r2, #1
 801d3e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	2200      	movs	r2, #0
 801d3f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d3f4:	7ffb      	ldrb	r3, [r7, #31]
}
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	3720      	adds	r7, #32
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}

0801d3fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d3fe:	b580      	push	{r7, lr}
 801d400:	b088      	sub	sp, #32
 801d402:	af02      	add	r7, sp, #8
 801d404:	60f8      	str	r0, [r7, #12]
 801d406:	60b9      	str	r1, [r7, #8]
 801d408:	603b      	str	r3, [r7, #0]
 801d40a:	4613      	mov	r3, r2
 801d40c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d40e:	2300      	movs	r3, #0
 801d410:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d412:	68fb      	ldr	r3, [r7, #12]
 801d414:	685b      	ldr	r3, [r3, #4]
 801d416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d41a:	d112      	bne.n	801d442 <HAL_SPI_Receive+0x44>
 801d41c:	68fb      	ldr	r3, [r7, #12]
 801d41e:	689b      	ldr	r3, [r3, #8]
 801d420:	2b00      	cmp	r3, #0
 801d422:	d10e      	bne.n	801d442 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d424:	68fb      	ldr	r3, [r7, #12]
 801d426:	2204      	movs	r2, #4
 801d428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d42c:	88fa      	ldrh	r2, [r7, #6]
 801d42e:	683b      	ldr	r3, [r7, #0]
 801d430:	9300      	str	r3, [sp, #0]
 801d432:	4613      	mov	r3, r2
 801d434:	68ba      	ldr	r2, [r7, #8]
 801d436:	68b9      	ldr	r1, [r7, #8]
 801d438:	68f8      	ldr	r0, [r7, #12]
 801d43a:	f000 f910 	bl	801d65e <HAL_SPI_TransmitReceive>
 801d43e:	4603      	mov	r3, r0
 801d440:	e109      	b.n	801d656 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d442:	68fb      	ldr	r3, [r7, #12]
 801d444:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d448:	2b01      	cmp	r3, #1
 801d44a:	d101      	bne.n	801d450 <HAL_SPI_Receive+0x52>
 801d44c:	2302      	movs	r3, #2
 801d44e:	e102      	b.n	801d656 <HAL_SPI_Receive+0x258>
 801d450:	68fb      	ldr	r3, [r7, #12]
 801d452:	2201      	movs	r2, #1
 801d454:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d458:	f7fb fbb8 	bl	8018bcc <HAL_GetTick>
 801d45c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d45e:	68fb      	ldr	r3, [r7, #12]
 801d460:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d464:	b2db      	uxtb	r3, r3
 801d466:	2b01      	cmp	r3, #1
 801d468:	d002      	beq.n	801d470 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d46a:	2302      	movs	r3, #2
 801d46c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d46e:	e0e9      	b.n	801d644 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d470:	68bb      	ldr	r3, [r7, #8]
 801d472:	2b00      	cmp	r3, #0
 801d474:	d002      	beq.n	801d47c <HAL_SPI_Receive+0x7e>
 801d476:	88fb      	ldrh	r3, [r7, #6]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d102      	bne.n	801d482 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d47c:	2301      	movs	r3, #1
 801d47e:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d480:	e0e0      	b.n	801d644 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	2204      	movs	r2, #4
 801d486:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d48a:	68fb      	ldr	r3, [r7, #12]
 801d48c:	2200      	movs	r2, #0
 801d48e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d490:	68fb      	ldr	r3, [r7, #12]
 801d492:	68ba      	ldr	r2, [r7, #8]
 801d494:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d496:	68fb      	ldr	r3, [r7, #12]
 801d498:	88fa      	ldrh	r2, [r7, #6]
 801d49a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d49e:	68fb      	ldr	r3, [r7, #12]
 801d4a0:	88fa      	ldrh	r2, [r7, #6]
 801d4a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d4a6:	68fb      	ldr	r3, [r7, #12]
 801d4a8:	2200      	movs	r2, #0
 801d4aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d4ac:	68fb      	ldr	r3, [r7, #12]
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d4b2:	68fb      	ldr	r3, [r7, #12]
 801d4b4:	2200      	movs	r2, #0
 801d4b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d4b8:	68fb      	ldr	r3, [r7, #12]
 801d4ba:	2200      	movs	r2, #0
 801d4bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	2200      	movs	r2, #0
 801d4c2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d4c4:	68fb      	ldr	r3, [r7, #12]
 801d4c6:	68db      	ldr	r3, [r3, #12]
 801d4c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d4cc:	d908      	bls.n	801d4e0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d4ce:	68fb      	ldr	r3, [r7, #12]
 801d4d0:	681b      	ldr	r3, [r3, #0]
 801d4d2:	685a      	ldr	r2, [r3, #4]
 801d4d4:	68fb      	ldr	r3, [r7, #12]
 801d4d6:	681b      	ldr	r3, [r3, #0]
 801d4d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d4dc:	605a      	str	r2, [r3, #4]
 801d4de:	e007      	b.n	801d4f0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	681b      	ldr	r3, [r3, #0]
 801d4e4:	685a      	ldr	r2, [r3, #4]
 801d4e6:	68fb      	ldr	r3, [r7, #12]
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d4ee:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d4f0:	68fb      	ldr	r3, [r7, #12]
 801d4f2:	689b      	ldr	r3, [r3, #8]
 801d4f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d4f8:	d10f      	bne.n	801d51a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	681b      	ldr	r3, [r3, #0]
 801d4fe:	681a      	ldr	r2, [r3, #0]
 801d500:	68fb      	ldr	r3, [r7, #12]
 801d502:	681b      	ldr	r3, [r3, #0]
 801d504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d508:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d50a:	68fb      	ldr	r3, [r7, #12]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	681a      	ldr	r2, [r3, #0]
 801d510:	68fb      	ldr	r3, [r7, #12]
 801d512:	681b      	ldr	r3, [r3, #0]
 801d514:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d518:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d51a:	68fb      	ldr	r3, [r7, #12]
 801d51c:	681b      	ldr	r3, [r3, #0]
 801d51e:	681b      	ldr	r3, [r3, #0]
 801d520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d524:	2b40      	cmp	r3, #64	; 0x40
 801d526:	d007      	beq.n	801d538 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d528:	68fb      	ldr	r3, [r7, #12]
 801d52a:	681b      	ldr	r3, [r3, #0]
 801d52c:	681a      	ldr	r2, [r3, #0]
 801d52e:	68fb      	ldr	r3, [r7, #12]
 801d530:	681b      	ldr	r3, [r3, #0]
 801d532:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d536:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d538:	68fb      	ldr	r3, [r7, #12]
 801d53a:	68db      	ldr	r3, [r3, #12]
 801d53c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d540:	d867      	bhi.n	801d612 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d542:	e030      	b.n	801d5a6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d544:	68fb      	ldr	r3, [r7, #12]
 801d546:	681b      	ldr	r3, [r3, #0]
 801d548:	689b      	ldr	r3, [r3, #8]
 801d54a:	f003 0301 	and.w	r3, r3, #1
 801d54e:	2b01      	cmp	r3, #1
 801d550:	d117      	bne.n	801d582 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d552:	68fb      	ldr	r3, [r7, #12]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	f103 020c 	add.w	r2, r3, #12
 801d55a:	68fb      	ldr	r3, [r7, #12]
 801d55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d55e:	7812      	ldrb	r2, [r2, #0]
 801d560:	b2d2      	uxtb	r2, r2
 801d562:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d564:	68fb      	ldr	r3, [r7, #12]
 801d566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d568:	1c5a      	adds	r2, r3, #1
 801d56a:	68fb      	ldr	r3, [r7, #12]
 801d56c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d56e:	68fb      	ldr	r3, [r7, #12]
 801d570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d574:	b29b      	uxth	r3, r3
 801d576:	3b01      	subs	r3, #1
 801d578:	b29a      	uxth	r2, r3
 801d57a:	68fb      	ldr	r3, [r7, #12]
 801d57c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d580:	e011      	b.n	801d5a6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d582:	f7fb fb23 	bl	8018bcc <HAL_GetTick>
 801d586:	4602      	mov	r2, r0
 801d588:	693b      	ldr	r3, [r7, #16]
 801d58a:	1ad3      	subs	r3, r2, r3
 801d58c:	683a      	ldr	r2, [r7, #0]
 801d58e:	429a      	cmp	r2, r3
 801d590:	d803      	bhi.n	801d59a <HAL_SPI_Receive+0x19c>
 801d592:	683b      	ldr	r3, [r7, #0]
 801d594:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d598:	d102      	bne.n	801d5a0 <HAL_SPI_Receive+0x1a2>
 801d59a:	683b      	ldr	r3, [r7, #0]
 801d59c:	2b00      	cmp	r3, #0
 801d59e:	d102      	bne.n	801d5a6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d5a0:	2303      	movs	r3, #3
 801d5a2:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d5a4:	e04e      	b.n	801d644 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d5a6:	68fb      	ldr	r3, [r7, #12]
 801d5a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5ac:	b29b      	uxth	r3, r3
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	d1c8      	bne.n	801d544 <HAL_SPI_Receive+0x146>
 801d5b2:	e034      	b.n	801d61e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d5b4:	68fb      	ldr	r3, [r7, #12]
 801d5b6:	681b      	ldr	r3, [r3, #0]
 801d5b8:	689b      	ldr	r3, [r3, #8]
 801d5ba:	f003 0301 	and.w	r3, r3, #1
 801d5be:	2b01      	cmp	r3, #1
 801d5c0:	d115      	bne.n	801d5ee <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d5c2:	68fb      	ldr	r3, [r7, #12]
 801d5c4:	681b      	ldr	r3, [r3, #0]
 801d5c6:	68da      	ldr	r2, [r3, #12]
 801d5c8:	68fb      	ldr	r3, [r7, #12]
 801d5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5cc:	b292      	uxth	r2, r2
 801d5ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d5d4:	1c9a      	adds	r2, r3, #2
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d5da:	68fb      	ldr	r3, [r7, #12]
 801d5dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d5e0:	b29b      	uxth	r3, r3
 801d5e2:	3b01      	subs	r3, #1
 801d5e4:	b29a      	uxth	r2, r3
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d5ec:	e011      	b.n	801d612 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d5ee:	f7fb faed 	bl	8018bcc <HAL_GetTick>
 801d5f2:	4602      	mov	r2, r0
 801d5f4:	693b      	ldr	r3, [r7, #16]
 801d5f6:	1ad3      	subs	r3, r2, r3
 801d5f8:	683a      	ldr	r2, [r7, #0]
 801d5fa:	429a      	cmp	r2, r3
 801d5fc:	d803      	bhi.n	801d606 <HAL_SPI_Receive+0x208>
 801d5fe:	683b      	ldr	r3, [r7, #0]
 801d600:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d604:	d102      	bne.n	801d60c <HAL_SPI_Receive+0x20e>
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	2b00      	cmp	r3, #0
 801d60a:	d102      	bne.n	801d612 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801d60c:	2303      	movs	r3, #3
 801d60e:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d610:	e018      	b.n	801d644 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d612:	68fb      	ldr	r3, [r7, #12]
 801d614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d618:	b29b      	uxth	r3, r3
 801d61a:	2b00      	cmp	r3, #0
 801d61c:	d1ca      	bne.n	801d5b4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d61e:	693a      	ldr	r2, [r7, #16]
 801d620:	6839      	ldr	r1, [r7, #0]
 801d622:	68f8      	ldr	r0, [r7, #12]
 801d624:	f000 fb4c 	bl	801dcc0 <SPI_EndRxTransaction>
 801d628:	4603      	mov	r3, r0
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	d002      	beq.n	801d634 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d62e:	68fb      	ldr	r3, [r7, #12]
 801d630:	2220      	movs	r2, #32
 801d632:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d638:	2b00      	cmp	r3, #0
 801d63a:	d002      	beq.n	801d642 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801d63c:	2301      	movs	r3, #1
 801d63e:	75fb      	strb	r3, [r7, #23]
 801d640:	e000      	b.n	801d644 <HAL_SPI_Receive+0x246>
  }

error :
 801d642:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d644:	68fb      	ldr	r3, [r7, #12]
 801d646:	2201      	movs	r2, #1
 801d648:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	2200      	movs	r2, #0
 801d650:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d654:	7dfb      	ldrb	r3, [r7, #23]
}
 801d656:	4618      	mov	r0, r3
 801d658:	3718      	adds	r7, #24
 801d65a:	46bd      	mov	sp, r7
 801d65c:	bd80      	pop	{r7, pc}

0801d65e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801d65e:	b580      	push	{r7, lr}
 801d660:	b08a      	sub	sp, #40	; 0x28
 801d662:	af00      	add	r7, sp, #0
 801d664:	60f8      	str	r0, [r7, #12]
 801d666:	60b9      	str	r1, [r7, #8]
 801d668:	607a      	str	r2, [r7, #4]
 801d66a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801d66c:	2301      	movs	r3, #1
 801d66e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801d670:	2300      	movs	r3, #0
 801d672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d676:	68fb      	ldr	r3, [r7, #12]
 801d678:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d67c:	2b01      	cmp	r3, #1
 801d67e:	d101      	bne.n	801d684 <HAL_SPI_TransmitReceive+0x26>
 801d680:	2302      	movs	r3, #2
 801d682:	e1fb      	b.n	801da7c <HAL_SPI_TransmitReceive+0x41e>
 801d684:	68fb      	ldr	r3, [r7, #12]
 801d686:	2201      	movs	r2, #1
 801d688:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d68c:	f7fb fa9e 	bl	8018bcc <HAL_GetTick>
 801d690:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801d692:	68fb      	ldr	r3, [r7, #12]
 801d694:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d698:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801d69a:	68fb      	ldr	r3, [r7, #12]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801d6a0:	887b      	ldrh	r3, [r7, #2]
 801d6a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801d6a4:	887b      	ldrh	r3, [r7, #2]
 801d6a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801d6a8:	7efb      	ldrb	r3, [r7, #27]
 801d6aa:	2b01      	cmp	r3, #1
 801d6ac:	d00e      	beq.n	801d6cc <HAL_SPI_TransmitReceive+0x6e>
 801d6ae:	697b      	ldr	r3, [r7, #20]
 801d6b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d6b4:	d106      	bne.n	801d6c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	689b      	ldr	r3, [r3, #8]
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d102      	bne.n	801d6c4 <HAL_SPI_TransmitReceive+0x66>
 801d6be:	7efb      	ldrb	r3, [r7, #27]
 801d6c0:	2b04      	cmp	r3, #4
 801d6c2:	d003      	beq.n	801d6cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801d6c4:	2302      	movs	r3, #2
 801d6c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d6ca:	e1cd      	b.n	801da68 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801d6cc:	68bb      	ldr	r3, [r7, #8]
 801d6ce:	2b00      	cmp	r3, #0
 801d6d0:	d005      	beq.n	801d6de <HAL_SPI_TransmitReceive+0x80>
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	2b00      	cmp	r3, #0
 801d6d6:	d002      	beq.n	801d6de <HAL_SPI_TransmitReceive+0x80>
 801d6d8:	887b      	ldrh	r3, [r7, #2]
 801d6da:	2b00      	cmp	r3, #0
 801d6dc:	d103      	bne.n	801d6e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801d6de:	2301      	movs	r3, #1
 801d6e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801d6e4:	e1c0      	b.n	801da68 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801d6e6:	68fb      	ldr	r3, [r7, #12]
 801d6e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d6ec:	b2db      	uxtb	r3, r3
 801d6ee:	2b04      	cmp	r3, #4
 801d6f0:	d003      	beq.n	801d6fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	2205      	movs	r2, #5
 801d6f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	2200      	movs	r2, #0
 801d6fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	687a      	ldr	r2, [r7, #4]
 801d704:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	887a      	ldrh	r2, [r7, #2]
 801d70a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801d70e:	68fb      	ldr	r3, [r7, #12]
 801d710:	887a      	ldrh	r2, [r7, #2]
 801d712:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	68ba      	ldr	r2, [r7, #8]
 801d71a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	887a      	ldrh	r2, [r7, #2]
 801d720:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	887a      	ldrh	r2, [r7, #2]
 801d726:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801d728:	68fb      	ldr	r3, [r7, #12]
 801d72a:	2200      	movs	r2, #0
 801d72c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	2200      	movs	r2, #0
 801d732:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	68db      	ldr	r3, [r3, #12]
 801d738:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d73c:	d802      	bhi.n	801d744 <HAL_SPI_TransmitReceive+0xe6>
 801d73e:	8a3b      	ldrh	r3, [r7, #16]
 801d740:	2b01      	cmp	r3, #1
 801d742:	d908      	bls.n	801d756 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	681b      	ldr	r3, [r3, #0]
 801d748:	685a      	ldr	r2, [r3, #4]
 801d74a:	68fb      	ldr	r3, [r7, #12]
 801d74c:	681b      	ldr	r3, [r3, #0]
 801d74e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d752:	605a      	str	r2, [r3, #4]
 801d754:	e007      	b.n	801d766 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	685a      	ldr	r2, [r3, #4]
 801d75c:	68fb      	ldr	r3, [r7, #12]
 801d75e:	681b      	ldr	r3, [r3, #0]
 801d760:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d764:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	681b      	ldr	r3, [r3, #0]
 801d76a:	681b      	ldr	r3, [r3, #0]
 801d76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d770:	2b40      	cmp	r3, #64	; 0x40
 801d772:	d007      	beq.n	801d784 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d774:	68fb      	ldr	r3, [r7, #12]
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	681a      	ldr	r2, [r3, #0]
 801d77a:	68fb      	ldr	r3, [r7, #12]
 801d77c:	681b      	ldr	r3, [r3, #0]
 801d77e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d782:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d784:	68fb      	ldr	r3, [r7, #12]
 801d786:	68db      	ldr	r3, [r3, #12]
 801d788:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d78c:	d97c      	bls.n	801d888 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	685b      	ldr	r3, [r3, #4]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d002      	beq.n	801d79c <HAL_SPI_TransmitReceive+0x13e>
 801d796:	8a7b      	ldrh	r3, [r7, #18]
 801d798:	2b01      	cmp	r3, #1
 801d79a:	d169      	bne.n	801d870 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7a0:	881a      	ldrh	r2, [r3, #0]
 801d7a2:	68fb      	ldr	r3, [r7, #12]
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7ac:	1c9a      	adds	r2, r3, #2
 801d7ae:	68fb      	ldr	r3, [r7, #12]
 801d7b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7b6:	b29b      	uxth	r3, r3
 801d7b8:	3b01      	subs	r3, #1
 801d7ba:	b29a      	uxth	r2, r3
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d7c0:	e056      	b.n	801d870 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d7c2:	68fb      	ldr	r3, [r7, #12]
 801d7c4:	681b      	ldr	r3, [r3, #0]
 801d7c6:	689b      	ldr	r3, [r3, #8]
 801d7c8:	f003 0302 	and.w	r3, r3, #2
 801d7cc:	2b02      	cmp	r3, #2
 801d7ce:	d11b      	bne.n	801d808 <HAL_SPI_TransmitReceive+0x1aa>
 801d7d0:	68fb      	ldr	r3, [r7, #12]
 801d7d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7d4:	b29b      	uxth	r3, r3
 801d7d6:	2b00      	cmp	r3, #0
 801d7d8:	d016      	beq.n	801d808 <HAL_SPI_TransmitReceive+0x1aa>
 801d7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7dc:	2b01      	cmp	r3, #1
 801d7de:	d113      	bne.n	801d808 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d7e0:	68fb      	ldr	r3, [r7, #12]
 801d7e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7e4:	881a      	ldrh	r2, [r3, #0]
 801d7e6:	68fb      	ldr	r3, [r7, #12]
 801d7e8:	681b      	ldr	r3, [r3, #0]
 801d7ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d7ec:	68fb      	ldr	r3, [r7, #12]
 801d7ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d7f0:	1c9a      	adds	r2, r3, #2
 801d7f2:	68fb      	ldr	r3, [r7, #12]
 801d7f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7fa:	b29b      	uxth	r3, r3
 801d7fc:	3b01      	subs	r3, #1
 801d7fe:	b29a      	uxth	r2, r3
 801d800:	68fb      	ldr	r3, [r7, #12]
 801d802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d804:	2300      	movs	r3, #0
 801d806:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d808:	68fb      	ldr	r3, [r7, #12]
 801d80a:	681b      	ldr	r3, [r3, #0]
 801d80c:	689b      	ldr	r3, [r3, #8]
 801d80e:	f003 0301 	and.w	r3, r3, #1
 801d812:	2b01      	cmp	r3, #1
 801d814:	d11c      	bne.n	801d850 <HAL_SPI_TransmitReceive+0x1f2>
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d81c:	b29b      	uxth	r3, r3
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d016      	beq.n	801d850 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d822:	68fb      	ldr	r3, [r7, #12]
 801d824:	681b      	ldr	r3, [r3, #0]
 801d826:	68da      	ldr	r2, [r3, #12]
 801d828:	68fb      	ldr	r3, [r7, #12]
 801d82a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d82c:	b292      	uxth	r2, r2
 801d82e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d830:	68fb      	ldr	r3, [r7, #12]
 801d832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d834:	1c9a      	adds	r2, r3, #2
 801d836:	68fb      	ldr	r3, [r7, #12]
 801d838:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d840:	b29b      	uxth	r3, r3
 801d842:	3b01      	subs	r3, #1
 801d844:	b29a      	uxth	r2, r3
 801d846:	68fb      	ldr	r3, [r7, #12]
 801d848:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801d84c:	2301      	movs	r3, #1
 801d84e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801d850:	f7fb f9bc 	bl	8018bcc <HAL_GetTick>
 801d854:	4602      	mov	r2, r0
 801d856:	69fb      	ldr	r3, [r7, #28]
 801d858:	1ad3      	subs	r3, r2, r3
 801d85a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d85c:	429a      	cmp	r2, r3
 801d85e:	d807      	bhi.n	801d870 <HAL_SPI_TransmitReceive+0x212>
 801d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d862:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d866:	d003      	beq.n	801d870 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801d868:	2303      	movs	r3, #3
 801d86a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801d86e:	e0fb      	b.n	801da68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d870:	68fb      	ldr	r3, [r7, #12]
 801d872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d874:	b29b      	uxth	r3, r3
 801d876:	2b00      	cmp	r3, #0
 801d878:	d1a3      	bne.n	801d7c2 <HAL_SPI_TransmitReceive+0x164>
 801d87a:	68fb      	ldr	r3, [r7, #12]
 801d87c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d880:	b29b      	uxth	r3, r3
 801d882:	2b00      	cmp	r3, #0
 801d884:	d19d      	bne.n	801d7c2 <HAL_SPI_TransmitReceive+0x164>
 801d886:	e0df      	b.n	801da48 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d888:	68fb      	ldr	r3, [r7, #12]
 801d88a:	685b      	ldr	r3, [r3, #4]
 801d88c:	2b00      	cmp	r3, #0
 801d88e:	d003      	beq.n	801d898 <HAL_SPI_TransmitReceive+0x23a>
 801d890:	8a7b      	ldrh	r3, [r7, #18]
 801d892:	2b01      	cmp	r3, #1
 801d894:	f040 80cb 	bne.w	801da2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801d898:	68fb      	ldr	r3, [r7, #12]
 801d89a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d89c:	b29b      	uxth	r3, r3
 801d89e:	2b01      	cmp	r3, #1
 801d8a0:	d912      	bls.n	801d8c8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d8a2:	68fb      	ldr	r3, [r7, #12]
 801d8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8a6:	881a      	ldrh	r2, [r3, #0]
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d8ae:	68fb      	ldr	r3, [r7, #12]
 801d8b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8b2:	1c9a      	adds	r2, r3, #2
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d8b8:	68fb      	ldr	r3, [r7, #12]
 801d8ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d8bc:	b29b      	uxth	r3, r3
 801d8be:	3b02      	subs	r3, #2
 801d8c0:	b29a      	uxth	r2, r3
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d8c6:	e0b2      	b.n	801da2e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d8cc:	68fb      	ldr	r3, [r7, #12]
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	330c      	adds	r3, #12
 801d8d2:	7812      	ldrb	r2, [r2, #0]
 801d8d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801d8d6:	68fb      	ldr	r3, [r7, #12]
 801d8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8da:	1c5a      	adds	r2, r3, #1
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d8e0:	68fb      	ldr	r3, [r7, #12]
 801d8e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d8e4:	b29b      	uxth	r3, r3
 801d8e6:	3b01      	subs	r3, #1
 801d8e8:	b29a      	uxth	r2, r3
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801d8ee:	e09e      	b.n	801da2e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	689b      	ldr	r3, [r3, #8]
 801d8f6:	f003 0302 	and.w	r3, r3, #2
 801d8fa:	2b02      	cmp	r3, #2
 801d8fc:	d134      	bne.n	801d968 <HAL_SPI_TransmitReceive+0x30a>
 801d8fe:	68fb      	ldr	r3, [r7, #12]
 801d900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d902:	b29b      	uxth	r3, r3
 801d904:	2b00      	cmp	r3, #0
 801d906:	d02f      	beq.n	801d968 <HAL_SPI_TransmitReceive+0x30a>
 801d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d90a:	2b01      	cmp	r3, #1
 801d90c:	d12c      	bne.n	801d968 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801d90e:	68fb      	ldr	r3, [r7, #12]
 801d910:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d912:	b29b      	uxth	r3, r3
 801d914:	2b01      	cmp	r3, #1
 801d916:	d912      	bls.n	801d93e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d918:	68fb      	ldr	r3, [r7, #12]
 801d91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d91c:	881a      	ldrh	r2, [r3, #0]
 801d91e:	68fb      	ldr	r3, [r7, #12]
 801d920:	681b      	ldr	r3, [r3, #0]
 801d922:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d928:	1c9a      	adds	r2, r3, #2
 801d92a:	68fb      	ldr	r3, [r7, #12]
 801d92c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d932:	b29b      	uxth	r3, r3
 801d934:	3b02      	subs	r3, #2
 801d936:	b29a      	uxth	r2, r3
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d93c:	e012      	b.n	801d964 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801d93e:	68fb      	ldr	r3, [r7, #12]
 801d940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	330c      	adds	r3, #12
 801d948:	7812      	ldrb	r2, [r2, #0]
 801d94a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d94c:	68fb      	ldr	r3, [r7, #12]
 801d94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d950:	1c5a      	adds	r2, r3, #1
 801d952:	68fb      	ldr	r3, [r7, #12]
 801d954:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d956:	68fb      	ldr	r3, [r7, #12]
 801d958:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d95a:	b29b      	uxth	r3, r3
 801d95c:	3b01      	subs	r3, #1
 801d95e:	b29a      	uxth	r2, r3
 801d960:	68fb      	ldr	r3, [r7, #12]
 801d962:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801d964:	2300      	movs	r3, #0
 801d966:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801d968:	68fb      	ldr	r3, [r7, #12]
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	689b      	ldr	r3, [r3, #8]
 801d96e:	f003 0301 	and.w	r3, r3, #1
 801d972:	2b01      	cmp	r3, #1
 801d974:	d148      	bne.n	801da08 <HAL_SPI_TransmitReceive+0x3aa>
 801d976:	68fb      	ldr	r3, [r7, #12]
 801d978:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d97c:	b29b      	uxth	r3, r3
 801d97e:	2b00      	cmp	r3, #0
 801d980:	d042      	beq.n	801da08 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801d982:	68fb      	ldr	r3, [r7, #12]
 801d984:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d988:	b29b      	uxth	r3, r3
 801d98a:	2b01      	cmp	r3, #1
 801d98c:	d923      	bls.n	801d9d6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d98e:	68fb      	ldr	r3, [r7, #12]
 801d990:	681b      	ldr	r3, [r3, #0]
 801d992:	68da      	ldr	r2, [r3, #12]
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d998:	b292      	uxth	r2, r2
 801d99a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801d99c:	68fb      	ldr	r3, [r7, #12]
 801d99e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9a0:	1c9a      	adds	r2, r3, #2
 801d9a2:	68fb      	ldr	r3, [r7, #12]
 801d9a4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801d9a6:	68fb      	ldr	r3, [r7, #12]
 801d9a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9ac:	b29b      	uxth	r3, r3
 801d9ae:	3b02      	subs	r3, #2
 801d9b0:	b29a      	uxth	r2, r3
 801d9b2:	68fb      	ldr	r3, [r7, #12]
 801d9b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801d9b8:	68fb      	ldr	r3, [r7, #12]
 801d9ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9be:	b29b      	uxth	r3, r3
 801d9c0:	2b01      	cmp	r3, #1
 801d9c2:	d81f      	bhi.n	801da04 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d9c4:	68fb      	ldr	r3, [r7, #12]
 801d9c6:	681b      	ldr	r3, [r3, #0]
 801d9c8:	685a      	ldr	r2, [r3, #4]
 801d9ca:	68fb      	ldr	r3, [r7, #12]
 801d9cc:	681b      	ldr	r3, [r3, #0]
 801d9ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d9d2:	605a      	str	r2, [r3, #4]
 801d9d4:	e016      	b.n	801da04 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d9d6:	68fb      	ldr	r3, [r7, #12]
 801d9d8:	681b      	ldr	r3, [r3, #0]
 801d9da:	f103 020c 	add.w	r2, r3, #12
 801d9de:	68fb      	ldr	r3, [r7, #12]
 801d9e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9e2:	7812      	ldrb	r2, [r2, #0]
 801d9e4:	b2d2      	uxtb	r2, r2
 801d9e6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801d9e8:	68fb      	ldr	r3, [r7, #12]
 801d9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9ec:	1c5a      	adds	r2, r3, #1
 801d9ee:	68fb      	ldr	r3, [r7, #12]
 801d9f0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801d9f2:	68fb      	ldr	r3, [r7, #12]
 801d9f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9f8:	b29b      	uxth	r3, r3
 801d9fa:	3b01      	subs	r3, #1
 801d9fc:	b29a      	uxth	r2, r3
 801d9fe:	68fb      	ldr	r3, [r7, #12]
 801da00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801da04:	2301      	movs	r3, #1
 801da06:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801da08:	f7fb f8e0 	bl	8018bcc <HAL_GetTick>
 801da0c:	4602      	mov	r2, r0
 801da0e:	69fb      	ldr	r3, [r7, #28]
 801da10:	1ad3      	subs	r3, r2, r3
 801da12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801da14:	429a      	cmp	r2, r3
 801da16:	d803      	bhi.n	801da20 <HAL_SPI_TransmitReceive+0x3c2>
 801da18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da1e:	d102      	bne.n	801da26 <HAL_SPI_TransmitReceive+0x3c8>
 801da20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801da22:	2b00      	cmp	r3, #0
 801da24:	d103      	bne.n	801da2e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801da26:	2303      	movs	r3, #3
 801da28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801da2c:	e01c      	b.n	801da68 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801da2e:	68fb      	ldr	r3, [r7, #12]
 801da30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801da32:	b29b      	uxth	r3, r3
 801da34:	2b00      	cmp	r3, #0
 801da36:	f47f af5b 	bne.w	801d8f0 <HAL_SPI_TransmitReceive+0x292>
 801da3a:	68fb      	ldr	r3, [r7, #12]
 801da3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801da40:	b29b      	uxth	r3, r3
 801da42:	2b00      	cmp	r3, #0
 801da44:	f47f af54 	bne.w	801d8f0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801da48:	69fa      	ldr	r2, [r7, #28]
 801da4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801da4c:	68f8      	ldr	r0, [r7, #12]
 801da4e:	f000 f98f 	bl	801dd70 <SPI_EndRxTxTransaction>
 801da52:	4603      	mov	r3, r0
 801da54:	2b00      	cmp	r3, #0
 801da56:	d006      	beq.n	801da66 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801da58:	2301      	movs	r3, #1
 801da5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801da5e:	68fb      	ldr	r3, [r7, #12]
 801da60:	2220      	movs	r2, #32
 801da62:	661a      	str	r2, [r3, #96]	; 0x60
 801da64:	e000      	b.n	801da68 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801da66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801da68:	68fb      	ldr	r3, [r7, #12]
 801da6a:	2201      	movs	r2, #1
 801da6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	2200      	movs	r2, #0
 801da74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801da78:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801da7c:	4618      	mov	r0, r3
 801da7e:	3728      	adds	r7, #40	; 0x28
 801da80:	46bd      	mov	sp, r7
 801da82:	bd80      	pop	{r7, pc}

0801da84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801da84:	b580      	push	{r7, lr}
 801da86:	b088      	sub	sp, #32
 801da88:	af00      	add	r7, sp, #0
 801da8a:	60f8      	str	r0, [r7, #12]
 801da8c:	60b9      	str	r1, [r7, #8]
 801da8e:	603b      	str	r3, [r7, #0]
 801da90:	4613      	mov	r3, r2
 801da92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801da94:	f7fb f89a 	bl	8018bcc <HAL_GetTick>
 801da98:	4602      	mov	r2, r0
 801da9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da9c:	1a9b      	subs	r3, r3, r2
 801da9e:	683a      	ldr	r2, [r7, #0]
 801daa0:	4413      	add	r3, r2
 801daa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801daa4:	f7fb f892 	bl	8018bcc <HAL_GetTick>
 801daa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801daaa:	4b39      	ldr	r3, [pc, #228]	; (801db90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	015b      	lsls	r3, r3, #5
 801dab0:	0d1b      	lsrs	r3, r3, #20
 801dab2:	69fa      	ldr	r2, [r7, #28]
 801dab4:	fb02 f303 	mul.w	r3, r2, r3
 801dab8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801daba:	e054      	b.n	801db66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dabc:	683b      	ldr	r3, [r7, #0]
 801dabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dac2:	d050      	beq.n	801db66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dac4:	f7fb f882 	bl	8018bcc <HAL_GetTick>
 801dac8:	4602      	mov	r2, r0
 801daca:	69bb      	ldr	r3, [r7, #24]
 801dacc:	1ad3      	subs	r3, r2, r3
 801dace:	69fa      	ldr	r2, [r7, #28]
 801dad0:	429a      	cmp	r2, r3
 801dad2:	d902      	bls.n	801dada <SPI_WaitFlagStateUntilTimeout+0x56>
 801dad4:	69fb      	ldr	r3, [r7, #28]
 801dad6:	2b00      	cmp	r3, #0
 801dad8:	d13d      	bne.n	801db56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dada:	68fb      	ldr	r3, [r7, #12]
 801dadc:	681b      	ldr	r3, [r3, #0]
 801dade:	685a      	ldr	r2, [r3, #4]
 801dae0:	68fb      	ldr	r3, [r7, #12]
 801dae2:	681b      	ldr	r3, [r3, #0]
 801dae4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dae8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801daea:	68fb      	ldr	r3, [r7, #12]
 801daec:	685b      	ldr	r3, [r3, #4]
 801daee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801daf2:	d111      	bne.n	801db18 <SPI_WaitFlagStateUntilTimeout+0x94>
 801daf4:	68fb      	ldr	r3, [r7, #12]
 801daf6:	689b      	ldr	r3, [r3, #8]
 801daf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dafc:	d004      	beq.n	801db08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dafe:	68fb      	ldr	r3, [r7, #12]
 801db00:	689b      	ldr	r3, [r3, #8]
 801db02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801db06:	d107      	bne.n	801db18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	681a      	ldr	r2, [r3, #0]
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	681b      	ldr	r3, [r3, #0]
 801db12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801db16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801db20:	d10f      	bne.n	801db42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	681b      	ldr	r3, [r3, #0]
 801db26:	681a      	ldr	r2, [r3, #0]
 801db28:	68fb      	ldr	r3, [r7, #12]
 801db2a:	681b      	ldr	r3, [r3, #0]
 801db2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801db30:	601a      	str	r2, [r3, #0]
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	681b      	ldr	r3, [r3, #0]
 801db36:	681a      	ldr	r2, [r3, #0]
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	681b      	ldr	r3, [r3, #0]
 801db3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801db40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801db42:	68fb      	ldr	r3, [r7, #12]
 801db44:	2201      	movs	r2, #1
 801db46:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	2200      	movs	r2, #0
 801db4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801db52:	2303      	movs	r3, #3
 801db54:	e017      	b.n	801db86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801db56:	697b      	ldr	r3, [r7, #20]
 801db58:	2b00      	cmp	r3, #0
 801db5a:	d101      	bne.n	801db60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801db5c:	2300      	movs	r3, #0
 801db5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801db60:	697b      	ldr	r3, [r7, #20]
 801db62:	3b01      	subs	r3, #1
 801db64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	689a      	ldr	r2, [r3, #8]
 801db6c:	68bb      	ldr	r3, [r7, #8]
 801db6e:	4013      	ands	r3, r2
 801db70:	68ba      	ldr	r2, [r7, #8]
 801db72:	429a      	cmp	r2, r3
 801db74:	bf0c      	ite	eq
 801db76:	2301      	moveq	r3, #1
 801db78:	2300      	movne	r3, #0
 801db7a:	b2db      	uxtb	r3, r3
 801db7c:	461a      	mov	r2, r3
 801db7e:	79fb      	ldrb	r3, [r7, #7]
 801db80:	429a      	cmp	r2, r3
 801db82:	d19b      	bne.n	801dabc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801db84:	2300      	movs	r3, #0
}
 801db86:	4618      	mov	r0, r3
 801db88:	3720      	adds	r7, #32
 801db8a:	46bd      	mov	sp, r7
 801db8c:	bd80      	pop	{r7, pc}
 801db8e:	bf00      	nop
 801db90:	20000000 	.word	0x20000000

0801db94 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801db94:	b580      	push	{r7, lr}
 801db96:	b08a      	sub	sp, #40	; 0x28
 801db98:	af00      	add	r7, sp, #0
 801db9a:	60f8      	str	r0, [r7, #12]
 801db9c:	60b9      	str	r1, [r7, #8]
 801db9e:	607a      	str	r2, [r7, #4]
 801dba0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dba2:	2300      	movs	r3, #0
 801dba4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dba6:	f7fb f811 	bl	8018bcc <HAL_GetTick>
 801dbaa:	4602      	mov	r2, r0
 801dbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dbae:	1a9b      	subs	r3, r3, r2
 801dbb0:	683a      	ldr	r2, [r7, #0]
 801dbb2:	4413      	add	r3, r2
 801dbb4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801dbb6:	f7fb f809 	bl	8018bcc <HAL_GetTick>
 801dbba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	681b      	ldr	r3, [r3, #0]
 801dbc0:	330c      	adds	r3, #12
 801dbc2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dbc4:	4b3d      	ldr	r3, [pc, #244]	; (801dcbc <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dbc6:	681a      	ldr	r2, [r3, #0]
 801dbc8:	4613      	mov	r3, r2
 801dbca:	009b      	lsls	r3, r3, #2
 801dbcc:	4413      	add	r3, r2
 801dbce:	00da      	lsls	r2, r3, #3
 801dbd0:	1ad3      	subs	r3, r2, r3
 801dbd2:	0d1b      	lsrs	r3, r3, #20
 801dbd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dbd6:	fb02 f303 	mul.w	r3, r2, r3
 801dbda:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dbdc:	e060      	b.n	801dca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dbde:	68bb      	ldr	r3, [r7, #8]
 801dbe0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801dbe4:	d107      	bne.n	801dbf6 <SPI_WaitFifoStateUntilTimeout+0x62>
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	2b00      	cmp	r3, #0
 801dbea:	d104      	bne.n	801dbf6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801dbec:	69fb      	ldr	r3, [r7, #28]
 801dbee:	781b      	ldrb	r3, [r3, #0]
 801dbf0:	b2db      	uxtb	r3, r3
 801dbf2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801dbf4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801dbf6:	683b      	ldr	r3, [r7, #0]
 801dbf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dbfc:	d050      	beq.n	801dca0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801dbfe:	f7fa ffe5 	bl	8018bcc <HAL_GetTick>
 801dc02:	4602      	mov	r2, r0
 801dc04:	6a3b      	ldr	r3, [r7, #32]
 801dc06:	1ad3      	subs	r3, r2, r3
 801dc08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dc0a:	429a      	cmp	r2, r3
 801dc0c:	d902      	bls.n	801dc14 <SPI_WaitFifoStateUntilTimeout+0x80>
 801dc0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	d13d      	bne.n	801dc90 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	681b      	ldr	r3, [r3, #0]
 801dc18:	685a      	ldr	r2, [r3, #4]
 801dc1a:	68fb      	ldr	r3, [r7, #12]
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801dc22:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dc24:	68fb      	ldr	r3, [r7, #12]
 801dc26:	685b      	ldr	r3, [r3, #4]
 801dc28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dc2c:	d111      	bne.n	801dc52 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801dc2e:	68fb      	ldr	r3, [r7, #12]
 801dc30:	689b      	ldr	r3, [r3, #8]
 801dc32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dc36:	d004      	beq.n	801dc42 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	689b      	ldr	r3, [r3, #8]
 801dc3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dc40:	d107      	bne.n	801dc52 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	681a      	ldr	r2, [r3, #0]
 801dc48:	68fb      	ldr	r3, [r7, #12]
 801dc4a:	681b      	ldr	r3, [r3, #0]
 801dc4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dc50:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801dc5a:	d10f      	bne.n	801dc7c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801dc5c:	68fb      	ldr	r3, [r7, #12]
 801dc5e:	681b      	ldr	r3, [r3, #0]
 801dc60:	681a      	ldr	r2, [r3, #0]
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	681b      	ldr	r3, [r3, #0]
 801dc66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801dc6a:	601a      	str	r2, [r3, #0]
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	681b      	ldr	r3, [r3, #0]
 801dc70:	681a      	ldr	r2, [r3, #0]
 801dc72:	68fb      	ldr	r3, [r7, #12]
 801dc74:	681b      	ldr	r3, [r3, #0]
 801dc76:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801dc7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	2201      	movs	r2, #1
 801dc80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	2200      	movs	r2, #0
 801dc88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801dc8c:	2303      	movs	r3, #3
 801dc8e:	e010      	b.n	801dcb2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801dc90:	69bb      	ldr	r3, [r7, #24]
 801dc92:	2b00      	cmp	r3, #0
 801dc94:	d101      	bne.n	801dc9a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801dc96:	2300      	movs	r3, #0
 801dc98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801dc9a:	69bb      	ldr	r3, [r7, #24]
 801dc9c:	3b01      	subs	r3, #1
 801dc9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801dca0:	68fb      	ldr	r3, [r7, #12]
 801dca2:	681b      	ldr	r3, [r3, #0]
 801dca4:	689a      	ldr	r2, [r3, #8]
 801dca6:	68bb      	ldr	r3, [r7, #8]
 801dca8:	4013      	ands	r3, r2
 801dcaa:	687a      	ldr	r2, [r7, #4]
 801dcac:	429a      	cmp	r2, r3
 801dcae:	d196      	bne.n	801dbde <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801dcb0:	2300      	movs	r3, #0
}
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	3728      	adds	r7, #40	; 0x28
 801dcb6:	46bd      	mov	sp, r7
 801dcb8:	bd80      	pop	{r7, pc}
 801dcba:	bf00      	nop
 801dcbc:	20000000 	.word	0x20000000

0801dcc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801dcc0:	b580      	push	{r7, lr}
 801dcc2:	b086      	sub	sp, #24
 801dcc4:	af02      	add	r7, sp, #8
 801dcc6:	60f8      	str	r0, [r7, #12]
 801dcc8:	60b9      	str	r1, [r7, #8]
 801dcca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	685b      	ldr	r3, [r3, #4]
 801dcd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dcd4:	d111      	bne.n	801dcfa <SPI_EndRxTransaction+0x3a>
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	689b      	ldr	r3, [r3, #8]
 801dcda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dcde:	d004      	beq.n	801dcea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	689b      	ldr	r3, [r3, #8]
 801dce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dce8:	d107      	bne.n	801dcfa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	681b      	ldr	r3, [r3, #0]
 801dcee:	681a      	ldr	r2, [r3, #0]
 801dcf0:	68fb      	ldr	r3, [r7, #12]
 801dcf2:	681b      	ldr	r3, [r3, #0]
 801dcf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801dcf8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dcfa:	687b      	ldr	r3, [r7, #4]
 801dcfc:	9300      	str	r3, [sp, #0]
 801dcfe:	68bb      	ldr	r3, [r7, #8]
 801dd00:	2200      	movs	r2, #0
 801dd02:	2180      	movs	r1, #128	; 0x80
 801dd04:	68f8      	ldr	r0, [r7, #12]
 801dd06:	f7ff febd 	bl	801da84 <SPI_WaitFlagStateUntilTimeout>
 801dd0a:	4603      	mov	r3, r0
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	d007      	beq.n	801dd20 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dd10:	68fb      	ldr	r3, [r7, #12]
 801dd12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd14:	f043 0220 	orr.w	r2, r3, #32
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dd1c:	2303      	movs	r3, #3
 801dd1e:	e023      	b.n	801dd68 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	685b      	ldr	r3, [r3, #4]
 801dd24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dd28:	d11d      	bne.n	801dd66 <SPI_EndRxTransaction+0xa6>
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	689b      	ldr	r3, [r3, #8]
 801dd2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801dd32:	d004      	beq.n	801dd3e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	689b      	ldr	r3, [r3, #8]
 801dd38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801dd3c:	d113      	bne.n	801dd66 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dd3e:	687b      	ldr	r3, [r7, #4]
 801dd40:	9300      	str	r3, [sp, #0]
 801dd42:	68bb      	ldr	r3, [r7, #8]
 801dd44:	2200      	movs	r2, #0
 801dd46:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801dd4a:	68f8      	ldr	r0, [r7, #12]
 801dd4c:	f7ff ff22 	bl	801db94 <SPI_WaitFifoStateUntilTimeout>
 801dd50:	4603      	mov	r3, r0
 801dd52:	2b00      	cmp	r3, #0
 801dd54:	d007      	beq.n	801dd66 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd5a:	f043 0220 	orr.w	r2, r3, #32
 801dd5e:	68fb      	ldr	r3, [r7, #12]
 801dd60:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801dd62:	2303      	movs	r3, #3
 801dd64:	e000      	b.n	801dd68 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 801dd66:	2300      	movs	r3, #0
}
 801dd68:	4618      	mov	r0, r3
 801dd6a:	3710      	adds	r7, #16
 801dd6c:	46bd      	mov	sp, r7
 801dd6e:	bd80      	pop	{r7, pc}

0801dd70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801dd70:	b580      	push	{r7, lr}
 801dd72:	b086      	sub	sp, #24
 801dd74:	af02      	add	r7, sp, #8
 801dd76:	60f8      	str	r0, [r7, #12]
 801dd78:	60b9      	str	r1, [r7, #8]
 801dd7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801dd7c:	687b      	ldr	r3, [r7, #4]
 801dd7e:	9300      	str	r3, [sp, #0]
 801dd80:	68bb      	ldr	r3, [r7, #8]
 801dd82:	2200      	movs	r2, #0
 801dd84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801dd88:	68f8      	ldr	r0, [r7, #12]
 801dd8a:	f7ff ff03 	bl	801db94 <SPI_WaitFifoStateUntilTimeout>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d007      	beq.n	801dda4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dd94:	68fb      	ldr	r3, [r7, #12]
 801dd96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd98:	f043 0220 	orr.w	r2, r3, #32
 801dd9c:	68fb      	ldr	r3, [r7, #12]
 801dd9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801dda0:	2303      	movs	r3, #3
 801dda2:	e027      	b.n	801ddf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	9300      	str	r3, [sp, #0]
 801dda8:	68bb      	ldr	r3, [r7, #8]
 801ddaa:	2200      	movs	r2, #0
 801ddac:	2180      	movs	r1, #128	; 0x80
 801ddae:	68f8      	ldr	r0, [r7, #12]
 801ddb0:	f7ff fe68 	bl	801da84 <SPI_WaitFlagStateUntilTimeout>
 801ddb4:	4603      	mov	r3, r0
 801ddb6:	2b00      	cmp	r3, #0
 801ddb8:	d007      	beq.n	801ddca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801ddba:	68fb      	ldr	r3, [r7, #12]
 801ddbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ddbe:	f043 0220 	orr.w	r2, r3, #32
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ddc6:	2303      	movs	r3, #3
 801ddc8:	e014      	b.n	801ddf4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801ddca:	687b      	ldr	r3, [r7, #4]
 801ddcc:	9300      	str	r3, [sp, #0]
 801ddce:	68bb      	ldr	r3, [r7, #8]
 801ddd0:	2200      	movs	r2, #0
 801ddd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801ddd6:	68f8      	ldr	r0, [r7, #12]
 801ddd8:	f7ff fedc 	bl	801db94 <SPI_WaitFifoStateUntilTimeout>
 801dddc:	4603      	mov	r3, r0
 801ddde:	2b00      	cmp	r3, #0
 801dde0:	d007      	beq.n	801ddf2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801dde2:	68fb      	ldr	r3, [r7, #12]
 801dde4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dde6:	f043 0220 	orr.w	r2, r3, #32
 801ddea:	68fb      	ldr	r3, [r7, #12]
 801ddec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801ddee:	2303      	movs	r3, #3
 801ddf0:	e000      	b.n	801ddf4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 801ddf2:	2300      	movs	r3, #0
}
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	3710      	adds	r7, #16
 801ddf8:	46bd      	mov	sp, r7
 801ddfa:	bd80      	pop	{r7, pc}

0801ddfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b082      	sub	sp, #8
 801de00:	af00      	add	r7, sp, #0
 801de02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d101      	bne.n	801de0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801de0a:	2301      	movs	r3, #1
 801de0c:	e049      	b.n	801dea2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801de0e:	687b      	ldr	r3, [r7, #4]
 801de10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801de14:	b2db      	uxtb	r3, r3
 801de16:	2b00      	cmp	r3, #0
 801de18:	d106      	bne.n	801de28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801de1a:	687b      	ldr	r3, [r7, #4]
 801de1c:	2200      	movs	r2, #0
 801de1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801de22:	6878      	ldr	r0, [r7, #4]
 801de24:	f7f9 fd46 	bl	80178b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801de28:	687b      	ldr	r3, [r7, #4]
 801de2a:	2202      	movs	r2, #2
 801de2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	681a      	ldr	r2, [r3, #0]
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	3304      	adds	r3, #4
 801de38:	4619      	mov	r1, r3
 801de3a:	4610      	mov	r0, r2
 801de3c:	f000 fd6c 	bl	801e918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	2201      	movs	r2, #1
 801de44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801de48:	687b      	ldr	r3, [r7, #4]
 801de4a:	2201      	movs	r2, #1
 801de4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801de50:	687b      	ldr	r3, [r7, #4]
 801de52:	2201      	movs	r2, #1
 801de54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	2201      	movs	r2, #1
 801de5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801de60:	687b      	ldr	r3, [r7, #4]
 801de62:	2201      	movs	r2, #1
 801de64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801de68:	687b      	ldr	r3, [r7, #4]
 801de6a:	2201      	movs	r2, #1
 801de6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801de70:	687b      	ldr	r3, [r7, #4]
 801de72:	2201      	movs	r2, #1
 801de74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	2201      	movs	r2, #1
 801de7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801de80:	687b      	ldr	r3, [r7, #4]
 801de82:	2201      	movs	r2, #1
 801de84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801de88:	687b      	ldr	r3, [r7, #4]
 801de8a:	2201      	movs	r2, #1
 801de8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	2201      	movs	r2, #1
 801de94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801de98:	687b      	ldr	r3, [r7, #4]
 801de9a:	2201      	movs	r2, #1
 801de9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801dea0:	2300      	movs	r3, #0
}
 801dea2:	4618      	mov	r0, r3
 801dea4:	3708      	adds	r7, #8
 801dea6:	46bd      	mov	sp, r7
 801dea8:	bd80      	pop	{r7, pc}
	...

0801deac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801deac:	b480      	push	{r7}
 801deae:	b085      	sub	sp, #20
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801deb4:	687b      	ldr	r3, [r7, #4]
 801deb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801deba:	b2db      	uxtb	r3, r3
 801debc:	2b01      	cmp	r3, #1
 801debe:	d001      	beq.n	801dec4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801dec0:	2301      	movs	r3, #1
 801dec2:	e04f      	b.n	801df64 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	2202      	movs	r2, #2
 801dec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801decc:	687b      	ldr	r3, [r7, #4]
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	68da      	ldr	r2, [r3, #12]
 801ded2:	687b      	ldr	r3, [r7, #4]
 801ded4:	681b      	ldr	r3, [r3, #0]
 801ded6:	f042 0201 	orr.w	r2, r2, #1
 801deda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801dedc:	687b      	ldr	r3, [r7, #4]
 801dede:	681b      	ldr	r3, [r3, #0]
 801dee0:	4a23      	ldr	r2, [pc, #140]	; (801df70 <HAL_TIM_Base_Start_IT+0xc4>)
 801dee2:	4293      	cmp	r3, r2
 801dee4:	d01d      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801dee6:	687b      	ldr	r3, [r7, #4]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801deee:	d018      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801def0:	687b      	ldr	r3, [r7, #4]
 801def2:	681b      	ldr	r3, [r3, #0]
 801def4:	4a1f      	ldr	r2, [pc, #124]	; (801df74 <HAL_TIM_Base_Start_IT+0xc8>)
 801def6:	4293      	cmp	r3, r2
 801def8:	d013      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	4a1e      	ldr	r2, [pc, #120]	; (801df78 <HAL_TIM_Base_Start_IT+0xcc>)
 801df00:	4293      	cmp	r3, r2
 801df02:	d00e      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	4a1c      	ldr	r2, [pc, #112]	; (801df7c <HAL_TIM_Base_Start_IT+0xd0>)
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d009      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	4a1b      	ldr	r2, [pc, #108]	; (801df80 <HAL_TIM_Base_Start_IT+0xd4>)
 801df14:	4293      	cmp	r3, r2
 801df16:	d004      	beq.n	801df22 <HAL_TIM_Base_Start_IT+0x76>
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	681b      	ldr	r3, [r3, #0]
 801df1c:	4a19      	ldr	r2, [pc, #100]	; (801df84 <HAL_TIM_Base_Start_IT+0xd8>)
 801df1e:	4293      	cmp	r3, r2
 801df20:	d115      	bne.n	801df4e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801df22:	687b      	ldr	r3, [r7, #4]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	689a      	ldr	r2, [r3, #8]
 801df28:	4b17      	ldr	r3, [pc, #92]	; (801df88 <HAL_TIM_Base_Start_IT+0xdc>)
 801df2a:	4013      	ands	r3, r2
 801df2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	2b06      	cmp	r3, #6
 801df32:	d015      	beq.n	801df60 <HAL_TIM_Base_Start_IT+0xb4>
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801df3a:	d011      	beq.n	801df60 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 801df3c:	687b      	ldr	r3, [r7, #4]
 801df3e:	681b      	ldr	r3, [r3, #0]
 801df40:	681a      	ldr	r2, [r3, #0]
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	f042 0201 	orr.w	r2, r2, #1
 801df4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df4c:	e008      	b.n	801df60 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	681b      	ldr	r3, [r3, #0]
 801df52:	681a      	ldr	r2, [r3, #0]
 801df54:	687b      	ldr	r3, [r7, #4]
 801df56:	681b      	ldr	r3, [r3, #0]
 801df58:	f042 0201 	orr.w	r2, r2, #1
 801df5c:	601a      	str	r2, [r3, #0]
 801df5e:	e000      	b.n	801df62 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801df60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801df62:	2300      	movs	r3, #0
}
 801df64:	4618      	mov	r0, r3
 801df66:	3714      	adds	r7, #20
 801df68:	46bd      	mov	sp, r7
 801df6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df6e:	4770      	bx	lr
 801df70:	40012c00 	.word	0x40012c00
 801df74:	40000400 	.word	0x40000400
 801df78:	40000800 	.word	0x40000800
 801df7c:	40013400 	.word	0x40013400
 801df80:	40014000 	.word	0x40014000
 801df84:	40015000 	.word	0x40015000
 801df88:	00010007 	.word	0x00010007

0801df8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801df8c:	b580      	push	{r7, lr}
 801df8e:	b082      	sub	sp, #8
 801df90:	af00      	add	r7, sp, #0
 801df92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801df94:	687b      	ldr	r3, [r7, #4]
 801df96:	2b00      	cmp	r3, #0
 801df98:	d101      	bne.n	801df9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801df9a:	2301      	movs	r3, #1
 801df9c:	e049      	b.n	801e032 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801dfa4:	b2db      	uxtb	r3, r3
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d106      	bne.n	801dfb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	2200      	movs	r2, #0
 801dfae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801dfb2:	6878      	ldr	r0, [r7, #4]
 801dfb4:	f7f9 fcb8 	bl	8017928 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801dfb8:	687b      	ldr	r3, [r7, #4]
 801dfba:	2202      	movs	r2, #2
 801dfbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801dfc0:	687b      	ldr	r3, [r7, #4]
 801dfc2:	681a      	ldr	r2, [r3, #0]
 801dfc4:	687b      	ldr	r3, [r7, #4]
 801dfc6:	3304      	adds	r3, #4
 801dfc8:	4619      	mov	r1, r3
 801dfca:	4610      	mov	r0, r2
 801dfcc:	f000 fca4 	bl	801e918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801dfd0:	687b      	ldr	r3, [r7, #4]
 801dfd2:	2201      	movs	r2, #1
 801dfd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801dfd8:	687b      	ldr	r3, [r7, #4]
 801dfda:	2201      	movs	r2, #1
 801dfdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801dfe0:	687b      	ldr	r3, [r7, #4]
 801dfe2:	2201      	movs	r2, #1
 801dfe4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	2201      	movs	r2, #1
 801dfec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801dff0:	687b      	ldr	r3, [r7, #4]
 801dff2:	2201      	movs	r2, #1
 801dff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	2201      	movs	r2, #1
 801dffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	2201      	movs	r2, #1
 801e004:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	2201      	movs	r2, #1
 801e00c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e010:	687b      	ldr	r3, [r7, #4]
 801e012:	2201      	movs	r2, #1
 801e014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	2201      	movs	r2, #1
 801e01c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	2201      	movs	r2, #1
 801e024:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2201      	movs	r2, #1
 801e02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e030:	2300      	movs	r3, #0
}
 801e032:	4618      	mov	r0, r3
 801e034:	3708      	adds	r7, #8
 801e036:	46bd      	mov	sp, r7
 801e038:	bd80      	pop	{r7, pc}
	...

0801e03c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b084      	sub	sp, #16
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
 801e044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e046:	683b      	ldr	r3, [r7, #0]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d109      	bne.n	801e060 <HAL_TIM_PWM_Start+0x24>
 801e04c:	687b      	ldr	r3, [r7, #4]
 801e04e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e052:	b2db      	uxtb	r3, r3
 801e054:	2b01      	cmp	r3, #1
 801e056:	bf14      	ite	ne
 801e058:	2301      	movne	r3, #1
 801e05a:	2300      	moveq	r3, #0
 801e05c:	b2db      	uxtb	r3, r3
 801e05e:	e03c      	b.n	801e0da <HAL_TIM_PWM_Start+0x9e>
 801e060:	683b      	ldr	r3, [r7, #0]
 801e062:	2b04      	cmp	r3, #4
 801e064:	d109      	bne.n	801e07a <HAL_TIM_PWM_Start+0x3e>
 801e066:	687b      	ldr	r3, [r7, #4]
 801e068:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e06c:	b2db      	uxtb	r3, r3
 801e06e:	2b01      	cmp	r3, #1
 801e070:	bf14      	ite	ne
 801e072:	2301      	movne	r3, #1
 801e074:	2300      	moveq	r3, #0
 801e076:	b2db      	uxtb	r3, r3
 801e078:	e02f      	b.n	801e0da <HAL_TIM_PWM_Start+0x9e>
 801e07a:	683b      	ldr	r3, [r7, #0]
 801e07c:	2b08      	cmp	r3, #8
 801e07e:	d109      	bne.n	801e094 <HAL_TIM_PWM_Start+0x58>
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e086:	b2db      	uxtb	r3, r3
 801e088:	2b01      	cmp	r3, #1
 801e08a:	bf14      	ite	ne
 801e08c:	2301      	movne	r3, #1
 801e08e:	2300      	moveq	r3, #0
 801e090:	b2db      	uxtb	r3, r3
 801e092:	e022      	b.n	801e0da <HAL_TIM_PWM_Start+0x9e>
 801e094:	683b      	ldr	r3, [r7, #0]
 801e096:	2b0c      	cmp	r3, #12
 801e098:	d109      	bne.n	801e0ae <HAL_TIM_PWM_Start+0x72>
 801e09a:	687b      	ldr	r3, [r7, #4]
 801e09c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e0a0:	b2db      	uxtb	r3, r3
 801e0a2:	2b01      	cmp	r3, #1
 801e0a4:	bf14      	ite	ne
 801e0a6:	2301      	movne	r3, #1
 801e0a8:	2300      	moveq	r3, #0
 801e0aa:	b2db      	uxtb	r3, r3
 801e0ac:	e015      	b.n	801e0da <HAL_TIM_PWM_Start+0x9e>
 801e0ae:	683b      	ldr	r3, [r7, #0]
 801e0b0:	2b10      	cmp	r3, #16
 801e0b2:	d109      	bne.n	801e0c8 <HAL_TIM_PWM_Start+0x8c>
 801e0b4:	687b      	ldr	r3, [r7, #4]
 801e0b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e0ba:	b2db      	uxtb	r3, r3
 801e0bc:	2b01      	cmp	r3, #1
 801e0be:	bf14      	ite	ne
 801e0c0:	2301      	movne	r3, #1
 801e0c2:	2300      	moveq	r3, #0
 801e0c4:	b2db      	uxtb	r3, r3
 801e0c6:	e008      	b.n	801e0da <HAL_TIM_PWM_Start+0x9e>
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e0ce:	b2db      	uxtb	r3, r3
 801e0d0:	2b01      	cmp	r3, #1
 801e0d2:	bf14      	ite	ne
 801e0d4:	2301      	movne	r3, #1
 801e0d6:	2300      	moveq	r3, #0
 801e0d8:	b2db      	uxtb	r3, r3
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d001      	beq.n	801e0e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e0de:	2301      	movs	r3, #1
 801e0e0:	e0a1      	b.n	801e226 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e0e2:	683b      	ldr	r3, [r7, #0]
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	d104      	bne.n	801e0f2 <HAL_TIM_PWM_Start+0xb6>
 801e0e8:	687b      	ldr	r3, [r7, #4]
 801e0ea:	2202      	movs	r2, #2
 801e0ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e0f0:	e023      	b.n	801e13a <HAL_TIM_PWM_Start+0xfe>
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	2b04      	cmp	r3, #4
 801e0f6:	d104      	bne.n	801e102 <HAL_TIM_PWM_Start+0xc6>
 801e0f8:	687b      	ldr	r3, [r7, #4]
 801e0fa:	2202      	movs	r2, #2
 801e0fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e100:	e01b      	b.n	801e13a <HAL_TIM_PWM_Start+0xfe>
 801e102:	683b      	ldr	r3, [r7, #0]
 801e104:	2b08      	cmp	r3, #8
 801e106:	d104      	bne.n	801e112 <HAL_TIM_PWM_Start+0xd6>
 801e108:	687b      	ldr	r3, [r7, #4]
 801e10a:	2202      	movs	r2, #2
 801e10c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e110:	e013      	b.n	801e13a <HAL_TIM_PWM_Start+0xfe>
 801e112:	683b      	ldr	r3, [r7, #0]
 801e114:	2b0c      	cmp	r3, #12
 801e116:	d104      	bne.n	801e122 <HAL_TIM_PWM_Start+0xe6>
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	2202      	movs	r2, #2
 801e11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e120:	e00b      	b.n	801e13a <HAL_TIM_PWM_Start+0xfe>
 801e122:	683b      	ldr	r3, [r7, #0]
 801e124:	2b10      	cmp	r3, #16
 801e126:	d104      	bne.n	801e132 <HAL_TIM_PWM_Start+0xf6>
 801e128:	687b      	ldr	r3, [r7, #4]
 801e12a:	2202      	movs	r2, #2
 801e12c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e130:	e003      	b.n	801e13a <HAL_TIM_PWM_Start+0xfe>
 801e132:	687b      	ldr	r3, [r7, #4]
 801e134:	2202      	movs	r2, #2
 801e136:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	681b      	ldr	r3, [r3, #0]
 801e13e:	2201      	movs	r2, #1
 801e140:	6839      	ldr	r1, [r7, #0]
 801e142:	4618      	mov	r0, r3
 801e144:	f000 ffb0 	bl	801f0a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e148:	687b      	ldr	r3, [r7, #4]
 801e14a:	681b      	ldr	r3, [r3, #0]
 801e14c:	4a38      	ldr	r2, [pc, #224]	; (801e230 <HAL_TIM_PWM_Start+0x1f4>)
 801e14e:	4293      	cmp	r3, r2
 801e150:	d018      	beq.n	801e184 <HAL_TIM_PWM_Start+0x148>
 801e152:	687b      	ldr	r3, [r7, #4]
 801e154:	681b      	ldr	r3, [r3, #0]
 801e156:	4a37      	ldr	r2, [pc, #220]	; (801e234 <HAL_TIM_PWM_Start+0x1f8>)
 801e158:	4293      	cmp	r3, r2
 801e15a:	d013      	beq.n	801e184 <HAL_TIM_PWM_Start+0x148>
 801e15c:	687b      	ldr	r3, [r7, #4]
 801e15e:	681b      	ldr	r3, [r3, #0]
 801e160:	4a35      	ldr	r2, [pc, #212]	; (801e238 <HAL_TIM_PWM_Start+0x1fc>)
 801e162:	4293      	cmp	r3, r2
 801e164:	d00e      	beq.n	801e184 <HAL_TIM_PWM_Start+0x148>
 801e166:	687b      	ldr	r3, [r7, #4]
 801e168:	681b      	ldr	r3, [r3, #0]
 801e16a:	4a34      	ldr	r2, [pc, #208]	; (801e23c <HAL_TIM_PWM_Start+0x200>)
 801e16c:	4293      	cmp	r3, r2
 801e16e:	d009      	beq.n	801e184 <HAL_TIM_PWM_Start+0x148>
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	4a32      	ldr	r2, [pc, #200]	; (801e240 <HAL_TIM_PWM_Start+0x204>)
 801e176:	4293      	cmp	r3, r2
 801e178:	d004      	beq.n	801e184 <HAL_TIM_PWM_Start+0x148>
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	4a31      	ldr	r2, [pc, #196]	; (801e244 <HAL_TIM_PWM_Start+0x208>)
 801e180:	4293      	cmp	r3, r2
 801e182:	d101      	bne.n	801e188 <HAL_TIM_PWM_Start+0x14c>
 801e184:	2301      	movs	r3, #1
 801e186:	e000      	b.n	801e18a <HAL_TIM_PWM_Start+0x14e>
 801e188:	2300      	movs	r3, #0
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d007      	beq.n	801e19e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e18e:	687b      	ldr	r3, [r7, #4]
 801e190:	681b      	ldr	r3, [r3, #0]
 801e192:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e19c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	681b      	ldr	r3, [r3, #0]
 801e1a2:	4a23      	ldr	r2, [pc, #140]	; (801e230 <HAL_TIM_PWM_Start+0x1f4>)
 801e1a4:	4293      	cmp	r3, r2
 801e1a6:	d01d      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	681b      	ldr	r3, [r3, #0]
 801e1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e1b0:	d018      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	681b      	ldr	r3, [r3, #0]
 801e1b6:	4a24      	ldr	r2, [pc, #144]	; (801e248 <HAL_TIM_PWM_Start+0x20c>)
 801e1b8:	4293      	cmp	r3, r2
 801e1ba:	d013      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1bc:	687b      	ldr	r3, [r7, #4]
 801e1be:	681b      	ldr	r3, [r3, #0]
 801e1c0:	4a22      	ldr	r2, [pc, #136]	; (801e24c <HAL_TIM_PWM_Start+0x210>)
 801e1c2:	4293      	cmp	r3, r2
 801e1c4:	d00e      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1c6:	687b      	ldr	r3, [r7, #4]
 801e1c8:	681b      	ldr	r3, [r3, #0]
 801e1ca:	4a1a      	ldr	r2, [pc, #104]	; (801e234 <HAL_TIM_PWM_Start+0x1f8>)
 801e1cc:	4293      	cmp	r3, r2
 801e1ce:	d009      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	681b      	ldr	r3, [r3, #0]
 801e1d4:	4a18      	ldr	r2, [pc, #96]	; (801e238 <HAL_TIM_PWM_Start+0x1fc>)
 801e1d6:	4293      	cmp	r3, r2
 801e1d8:	d004      	beq.n	801e1e4 <HAL_TIM_PWM_Start+0x1a8>
 801e1da:	687b      	ldr	r3, [r7, #4]
 801e1dc:	681b      	ldr	r3, [r3, #0]
 801e1de:	4a19      	ldr	r2, [pc, #100]	; (801e244 <HAL_TIM_PWM_Start+0x208>)
 801e1e0:	4293      	cmp	r3, r2
 801e1e2:	d115      	bne.n	801e210 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	681b      	ldr	r3, [r3, #0]
 801e1e8:	689a      	ldr	r2, [r3, #8]
 801e1ea:	4b19      	ldr	r3, [pc, #100]	; (801e250 <HAL_TIM_PWM_Start+0x214>)
 801e1ec:	4013      	ands	r3, r2
 801e1ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	2b06      	cmp	r3, #6
 801e1f4:	d015      	beq.n	801e222 <HAL_TIM_PWM_Start+0x1e6>
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e1fc:	d011      	beq.n	801e222 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 801e1fe:	687b      	ldr	r3, [r7, #4]
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	681a      	ldr	r2, [r3, #0]
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	f042 0201 	orr.w	r2, r2, #1
 801e20c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e20e:	e008      	b.n	801e222 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	681b      	ldr	r3, [r3, #0]
 801e214:	681a      	ldr	r2, [r3, #0]
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	f042 0201 	orr.w	r2, r2, #1
 801e21e:	601a      	str	r2, [r3, #0]
 801e220:	e000      	b.n	801e224 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e222:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e224:	2300      	movs	r3, #0
}
 801e226:	4618      	mov	r0, r3
 801e228:	3710      	adds	r7, #16
 801e22a:	46bd      	mov	sp, r7
 801e22c:	bd80      	pop	{r7, pc}
 801e22e:	bf00      	nop
 801e230:	40012c00 	.word	0x40012c00
 801e234:	40013400 	.word	0x40013400
 801e238:	40014000 	.word	0x40014000
 801e23c:	40014400 	.word	0x40014400
 801e240:	40014800 	.word	0x40014800
 801e244:	40015000 	.word	0x40015000
 801e248:	40000400 	.word	0x40000400
 801e24c:	40000800 	.word	0x40000800
 801e250:	00010007 	.word	0x00010007

0801e254 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e254:	b580      	push	{r7, lr}
 801e256:	b082      	sub	sp, #8
 801e258:	af00      	add	r7, sp, #0
 801e25a:	6078      	str	r0, [r7, #4]
 801e25c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	2200      	movs	r2, #0
 801e264:	6839      	ldr	r1, [r7, #0]
 801e266:	4618      	mov	r0, r3
 801e268:	f000 ff1e 	bl	801f0a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	681b      	ldr	r3, [r3, #0]
 801e270:	4a40      	ldr	r2, [pc, #256]	; (801e374 <HAL_TIM_PWM_Stop+0x120>)
 801e272:	4293      	cmp	r3, r2
 801e274:	d018      	beq.n	801e2a8 <HAL_TIM_PWM_Stop+0x54>
 801e276:	687b      	ldr	r3, [r7, #4]
 801e278:	681b      	ldr	r3, [r3, #0]
 801e27a:	4a3f      	ldr	r2, [pc, #252]	; (801e378 <HAL_TIM_PWM_Stop+0x124>)
 801e27c:	4293      	cmp	r3, r2
 801e27e:	d013      	beq.n	801e2a8 <HAL_TIM_PWM_Stop+0x54>
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	681b      	ldr	r3, [r3, #0]
 801e284:	4a3d      	ldr	r2, [pc, #244]	; (801e37c <HAL_TIM_PWM_Stop+0x128>)
 801e286:	4293      	cmp	r3, r2
 801e288:	d00e      	beq.n	801e2a8 <HAL_TIM_PWM_Stop+0x54>
 801e28a:	687b      	ldr	r3, [r7, #4]
 801e28c:	681b      	ldr	r3, [r3, #0]
 801e28e:	4a3c      	ldr	r2, [pc, #240]	; (801e380 <HAL_TIM_PWM_Stop+0x12c>)
 801e290:	4293      	cmp	r3, r2
 801e292:	d009      	beq.n	801e2a8 <HAL_TIM_PWM_Stop+0x54>
 801e294:	687b      	ldr	r3, [r7, #4]
 801e296:	681b      	ldr	r3, [r3, #0]
 801e298:	4a3a      	ldr	r2, [pc, #232]	; (801e384 <HAL_TIM_PWM_Stop+0x130>)
 801e29a:	4293      	cmp	r3, r2
 801e29c:	d004      	beq.n	801e2a8 <HAL_TIM_PWM_Stop+0x54>
 801e29e:	687b      	ldr	r3, [r7, #4]
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	4a39      	ldr	r2, [pc, #228]	; (801e388 <HAL_TIM_PWM_Stop+0x134>)
 801e2a4:	4293      	cmp	r3, r2
 801e2a6:	d101      	bne.n	801e2ac <HAL_TIM_PWM_Stop+0x58>
 801e2a8:	2301      	movs	r3, #1
 801e2aa:	e000      	b.n	801e2ae <HAL_TIM_PWM_Stop+0x5a>
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	2b00      	cmp	r3, #0
 801e2b0:	d017      	beq.n	801e2e2 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	681b      	ldr	r3, [r3, #0]
 801e2b6:	6a1a      	ldr	r2, [r3, #32]
 801e2b8:	f241 1311 	movw	r3, #4369	; 0x1111
 801e2bc:	4013      	ands	r3, r2
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	d10f      	bne.n	801e2e2 <HAL_TIM_PWM_Stop+0x8e>
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	6a1a      	ldr	r2, [r3, #32]
 801e2c8:	f244 4344 	movw	r3, #17476	; 0x4444
 801e2cc:	4013      	ands	r3, r2
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d107      	bne.n	801e2e2 <HAL_TIM_PWM_Stop+0x8e>
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	681b      	ldr	r3, [r3, #0]
 801e2d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801e2e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	681b      	ldr	r3, [r3, #0]
 801e2e6:	6a1a      	ldr	r2, [r3, #32]
 801e2e8:	f241 1311 	movw	r3, #4369	; 0x1111
 801e2ec:	4013      	ands	r3, r2
 801e2ee:	2b00      	cmp	r3, #0
 801e2f0:	d10f      	bne.n	801e312 <HAL_TIM_PWM_Stop+0xbe>
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	6a1a      	ldr	r2, [r3, #32]
 801e2f8:	f244 4344 	movw	r3, #17476	; 0x4444
 801e2fc:	4013      	ands	r3, r2
 801e2fe:	2b00      	cmp	r3, #0
 801e300:	d107      	bne.n	801e312 <HAL_TIM_PWM_Stop+0xbe>
 801e302:	687b      	ldr	r3, [r7, #4]
 801e304:	681b      	ldr	r3, [r3, #0]
 801e306:	681a      	ldr	r2, [r3, #0]
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	f022 0201 	bic.w	r2, r2, #1
 801e310:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801e312:	683b      	ldr	r3, [r7, #0]
 801e314:	2b00      	cmp	r3, #0
 801e316:	d104      	bne.n	801e322 <HAL_TIM_PWM_Stop+0xce>
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	2201      	movs	r2, #1
 801e31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e320:	e023      	b.n	801e36a <HAL_TIM_PWM_Stop+0x116>
 801e322:	683b      	ldr	r3, [r7, #0]
 801e324:	2b04      	cmp	r3, #4
 801e326:	d104      	bne.n	801e332 <HAL_TIM_PWM_Stop+0xde>
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2201      	movs	r2, #1
 801e32c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e330:	e01b      	b.n	801e36a <HAL_TIM_PWM_Stop+0x116>
 801e332:	683b      	ldr	r3, [r7, #0]
 801e334:	2b08      	cmp	r3, #8
 801e336:	d104      	bne.n	801e342 <HAL_TIM_PWM_Stop+0xee>
 801e338:	687b      	ldr	r3, [r7, #4]
 801e33a:	2201      	movs	r2, #1
 801e33c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e340:	e013      	b.n	801e36a <HAL_TIM_PWM_Stop+0x116>
 801e342:	683b      	ldr	r3, [r7, #0]
 801e344:	2b0c      	cmp	r3, #12
 801e346:	d104      	bne.n	801e352 <HAL_TIM_PWM_Stop+0xfe>
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	2201      	movs	r2, #1
 801e34c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e350:	e00b      	b.n	801e36a <HAL_TIM_PWM_Stop+0x116>
 801e352:	683b      	ldr	r3, [r7, #0]
 801e354:	2b10      	cmp	r3, #16
 801e356:	d104      	bne.n	801e362 <HAL_TIM_PWM_Stop+0x10e>
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	2201      	movs	r2, #1
 801e35c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e360:	e003      	b.n	801e36a <HAL_TIM_PWM_Stop+0x116>
 801e362:	687b      	ldr	r3, [r7, #4]
 801e364:	2201      	movs	r2, #1
 801e366:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 801e36a:	2300      	movs	r3, #0
}
 801e36c:	4618      	mov	r0, r3
 801e36e:	3708      	adds	r7, #8
 801e370:	46bd      	mov	sp, r7
 801e372:	bd80      	pop	{r7, pc}
 801e374:	40012c00 	.word	0x40012c00
 801e378:	40013400 	.word	0x40013400
 801e37c:	40014000 	.word	0x40014000
 801e380:	40014400 	.word	0x40014400
 801e384:	40014800 	.word	0x40014800
 801e388:	40015000 	.word	0x40015000

0801e38c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e38c:	b580      	push	{r7, lr}
 801e38e:	b082      	sub	sp, #8
 801e390:	af00      	add	r7, sp, #0
 801e392:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e394:	687b      	ldr	r3, [r7, #4]
 801e396:	681b      	ldr	r3, [r3, #0]
 801e398:	691b      	ldr	r3, [r3, #16]
 801e39a:	f003 0302 	and.w	r3, r3, #2
 801e39e:	2b02      	cmp	r3, #2
 801e3a0:	d122      	bne.n	801e3e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e3a2:	687b      	ldr	r3, [r7, #4]
 801e3a4:	681b      	ldr	r3, [r3, #0]
 801e3a6:	68db      	ldr	r3, [r3, #12]
 801e3a8:	f003 0302 	and.w	r3, r3, #2
 801e3ac:	2b02      	cmp	r3, #2
 801e3ae:	d11b      	bne.n	801e3e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	681b      	ldr	r3, [r3, #0]
 801e3b4:	f06f 0202 	mvn.w	r2, #2
 801e3b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	2201      	movs	r2, #1
 801e3be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	699b      	ldr	r3, [r3, #24]
 801e3c6:	f003 0303 	and.w	r3, r3, #3
 801e3ca:	2b00      	cmp	r3, #0
 801e3cc:	d003      	beq.n	801e3d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801e3ce:	6878      	ldr	r0, [r7, #4]
 801e3d0:	f000 fa84 	bl	801e8dc <HAL_TIM_IC_CaptureCallback>
 801e3d4:	e005      	b.n	801e3e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801e3d6:	6878      	ldr	r0, [r7, #4]
 801e3d8:	f000 fa76 	bl	801e8c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e3dc:	6878      	ldr	r0, [r7, #4]
 801e3de:	f000 fa87 	bl	801e8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e3e2:	687b      	ldr	r3, [r7, #4]
 801e3e4:	2200      	movs	r2, #0
 801e3e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e3e8:	687b      	ldr	r3, [r7, #4]
 801e3ea:	681b      	ldr	r3, [r3, #0]
 801e3ec:	691b      	ldr	r3, [r3, #16]
 801e3ee:	f003 0304 	and.w	r3, r3, #4
 801e3f2:	2b04      	cmp	r3, #4
 801e3f4:	d122      	bne.n	801e43c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	681b      	ldr	r3, [r3, #0]
 801e3fa:	68db      	ldr	r3, [r3, #12]
 801e3fc:	f003 0304 	and.w	r3, r3, #4
 801e400:	2b04      	cmp	r3, #4
 801e402:	d11b      	bne.n	801e43c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e404:	687b      	ldr	r3, [r7, #4]
 801e406:	681b      	ldr	r3, [r3, #0]
 801e408:	f06f 0204 	mvn.w	r2, #4
 801e40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	2202      	movs	r2, #2
 801e412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e414:	687b      	ldr	r3, [r7, #4]
 801e416:	681b      	ldr	r3, [r3, #0]
 801e418:	699b      	ldr	r3, [r3, #24]
 801e41a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e41e:	2b00      	cmp	r3, #0
 801e420:	d003      	beq.n	801e42a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e422:	6878      	ldr	r0, [r7, #4]
 801e424:	f000 fa5a 	bl	801e8dc <HAL_TIM_IC_CaptureCallback>
 801e428:	e005      	b.n	801e436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e42a:	6878      	ldr	r0, [r7, #4]
 801e42c:	f000 fa4c 	bl	801e8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e430:	6878      	ldr	r0, [r7, #4]
 801e432:	f000 fa5d 	bl	801e8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e436:	687b      	ldr	r3, [r7, #4]
 801e438:	2200      	movs	r2, #0
 801e43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	691b      	ldr	r3, [r3, #16]
 801e442:	f003 0308 	and.w	r3, r3, #8
 801e446:	2b08      	cmp	r3, #8
 801e448:	d122      	bne.n	801e490 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	68db      	ldr	r3, [r3, #12]
 801e450:	f003 0308 	and.w	r3, r3, #8
 801e454:	2b08      	cmp	r3, #8
 801e456:	d11b      	bne.n	801e490 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	681b      	ldr	r3, [r3, #0]
 801e45c:	f06f 0208 	mvn.w	r2, #8
 801e460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	2204      	movs	r2, #4
 801e466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e468:	687b      	ldr	r3, [r7, #4]
 801e46a:	681b      	ldr	r3, [r3, #0]
 801e46c:	69db      	ldr	r3, [r3, #28]
 801e46e:	f003 0303 	and.w	r3, r3, #3
 801e472:	2b00      	cmp	r3, #0
 801e474:	d003      	beq.n	801e47e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e476:	6878      	ldr	r0, [r7, #4]
 801e478:	f000 fa30 	bl	801e8dc <HAL_TIM_IC_CaptureCallback>
 801e47c:	e005      	b.n	801e48a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e47e:	6878      	ldr	r0, [r7, #4]
 801e480:	f000 fa22 	bl	801e8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e484:	6878      	ldr	r0, [r7, #4]
 801e486:	f000 fa33 	bl	801e8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	2200      	movs	r2, #0
 801e48e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	691b      	ldr	r3, [r3, #16]
 801e496:	f003 0310 	and.w	r3, r3, #16
 801e49a:	2b10      	cmp	r3, #16
 801e49c:	d122      	bne.n	801e4e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	68db      	ldr	r3, [r3, #12]
 801e4a4:	f003 0310 	and.w	r3, r3, #16
 801e4a8:	2b10      	cmp	r3, #16
 801e4aa:	d11b      	bne.n	801e4e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e4ac:	687b      	ldr	r3, [r7, #4]
 801e4ae:	681b      	ldr	r3, [r3, #0]
 801e4b0:	f06f 0210 	mvn.w	r2, #16
 801e4b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e4b6:	687b      	ldr	r3, [r7, #4]
 801e4b8:	2208      	movs	r2, #8
 801e4ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	69db      	ldr	r3, [r3, #28]
 801e4c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e4c6:	2b00      	cmp	r3, #0
 801e4c8:	d003      	beq.n	801e4d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801e4ca:	6878      	ldr	r0, [r7, #4]
 801e4cc:	f000 fa06 	bl	801e8dc <HAL_TIM_IC_CaptureCallback>
 801e4d0:	e005      	b.n	801e4de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801e4d2:	6878      	ldr	r0, [r7, #4]
 801e4d4:	f000 f9f8 	bl	801e8c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801e4d8:	6878      	ldr	r0, [r7, #4]
 801e4da:	f000 fa09 	bl	801e8f0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e4de:	687b      	ldr	r3, [r7, #4]
 801e4e0:	2200      	movs	r2, #0
 801e4e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	681b      	ldr	r3, [r3, #0]
 801e4e8:	691b      	ldr	r3, [r3, #16]
 801e4ea:	f003 0301 	and.w	r3, r3, #1
 801e4ee:	2b01      	cmp	r3, #1
 801e4f0:	d10e      	bne.n	801e510 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e4f2:	687b      	ldr	r3, [r7, #4]
 801e4f4:	681b      	ldr	r3, [r3, #0]
 801e4f6:	68db      	ldr	r3, [r3, #12]
 801e4f8:	f003 0301 	and.w	r3, r3, #1
 801e4fc:	2b01      	cmp	r3, #1
 801e4fe:	d107      	bne.n	801e510 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	681b      	ldr	r3, [r3, #0]
 801e504:	f06f 0201 	mvn.w	r2, #1
 801e508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801e50a:	6878      	ldr	r0, [r7, #4]
 801e50c:	f000 f9d2 	bl	801e8b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	681b      	ldr	r3, [r3, #0]
 801e514:	691b      	ldr	r3, [r3, #16]
 801e516:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e51a:	2b80      	cmp	r3, #128	; 0x80
 801e51c:	d10e      	bne.n	801e53c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e51e:	687b      	ldr	r3, [r7, #4]
 801e520:	681b      	ldr	r3, [r3, #0]
 801e522:	68db      	ldr	r3, [r3, #12]
 801e524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e528:	2b80      	cmp	r3, #128	; 0x80
 801e52a:	d107      	bne.n	801e53c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e52c:	687b      	ldr	r3, [r7, #4]
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801e536:	6878      	ldr	r0, [r7, #4]
 801e538:	f000 ff26 	bl	801f388 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	691b      	ldr	r3, [r3, #16]
 801e542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e54a:	d10e      	bne.n	801e56a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	681b      	ldr	r3, [r3, #0]
 801e550:	68db      	ldr	r3, [r3, #12]
 801e552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e556:	2b80      	cmp	r3, #128	; 0x80
 801e558:	d107      	bne.n	801e56a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801e564:	6878      	ldr	r0, [r7, #4]
 801e566:	f000 ff19 	bl	801f39c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e56a:	687b      	ldr	r3, [r7, #4]
 801e56c:	681b      	ldr	r3, [r3, #0]
 801e56e:	691b      	ldr	r3, [r3, #16]
 801e570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e574:	2b40      	cmp	r3, #64	; 0x40
 801e576:	d10e      	bne.n	801e596 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	68db      	ldr	r3, [r3, #12]
 801e57e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e582:	2b40      	cmp	r3, #64	; 0x40
 801e584:	d107      	bne.n	801e596 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801e590:	6878      	ldr	r0, [r7, #4]
 801e592:	f000 f9b7 	bl	801e904 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	691b      	ldr	r3, [r3, #16]
 801e59c:	f003 0320 	and.w	r3, r3, #32
 801e5a0:	2b20      	cmp	r3, #32
 801e5a2:	d10e      	bne.n	801e5c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	68db      	ldr	r3, [r3, #12]
 801e5aa:	f003 0320 	and.w	r3, r3, #32
 801e5ae:	2b20      	cmp	r3, #32
 801e5b0:	d107      	bne.n	801e5c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	f06f 0220 	mvn.w	r2, #32
 801e5ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801e5bc:	6878      	ldr	r0, [r7, #4]
 801e5be:	f000 fed9 	bl	801f374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	691b      	ldr	r3, [r3, #16]
 801e5c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e5cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e5d0:	d10f      	bne.n	801e5f2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	68db      	ldr	r3, [r3, #12]
 801e5d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801e5dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801e5e0:	d107      	bne.n	801e5f2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 801e5ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 801e5ec:	6878      	ldr	r0, [r7, #4]
 801e5ee:	f000 fedf 	bl	801f3b0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 801e5f2:	687b      	ldr	r3, [r7, #4]
 801e5f4:	681b      	ldr	r3, [r3, #0]
 801e5f6:	691b      	ldr	r3, [r3, #16]
 801e5f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e5fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e600:	d10f      	bne.n	801e622 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 801e602:	687b      	ldr	r3, [r7, #4]
 801e604:	681b      	ldr	r3, [r3, #0]
 801e606:	68db      	ldr	r3, [r3, #12]
 801e608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801e60c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801e610:	d107      	bne.n	801e622 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	681b      	ldr	r3, [r3, #0]
 801e616:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 801e61a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801e61c:	6878      	ldr	r0, [r7, #4]
 801e61e:	f000 fed1 	bl	801f3c4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	691b      	ldr	r3, [r3, #16]
 801e628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e62c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e630:	d10f      	bne.n	801e652 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	68db      	ldr	r3, [r3, #12]
 801e638:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801e63c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801e640:	d107      	bne.n	801e652 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	681b      	ldr	r3, [r3, #0]
 801e646:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 801e64a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 801e64c:	6878      	ldr	r0, [r7, #4]
 801e64e:	f000 fec3 	bl	801f3d8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	691b      	ldr	r3, [r3, #16]
 801e658:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e65c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e660:	d10f      	bne.n	801e682 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801e662:	687b      	ldr	r3, [r7, #4]
 801e664:	681b      	ldr	r3, [r3, #0]
 801e666:	68db      	ldr	r3, [r3, #12]
 801e668:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801e66c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801e670:	d107      	bne.n	801e682 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 801e67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801e67c:	6878      	ldr	r0, [r7, #4]
 801e67e:	f000 feb5 	bl	801f3ec <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e682:	bf00      	nop
 801e684:	3708      	adds	r7, #8
 801e686:	46bd      	mov	sp, r7
 801e688:	bd80      	pop	{r7, pc}
	...

0801e68c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801e68c:	b580      	push	{r7, lr}
 801e68e:	b086      	sub	sp, #24
 801e690:	af00      	add	r7, sp, #0
 801e692:	60f8      	str	r0, [r7, #12]
 801e694:	60b9      	str	r1, [r7, #8]
 801e696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e698:	2300      	movs	r3, #0
 801e69a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801e69c:	68fb      	ldr	r3, [r7, #12]
 801e69e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801e6a2:	2b01      	cmp	r3, #1
 801e6a4:	d101      	bne.n	801e6aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 801e6a6:	2302      	movs	r3, #2
 801e6a8:	e0ff      	b.n	801e8aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 801e6aa:	68fb      	ldr	r3, [r7, #12]
 801e6ac:	2201      	movs	r2, #1
 801e6ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801e6b2:	687b      	ldr	r3, [r7, #4]
 801e6b4:	2b14      	cmp	r3, #20
 801e6b6:	f200 80f0 	bhi.w	801e89a <HAL_TIM_PWM_ConfigChannel+0x20e>
 801e6ba:	a201      	add	r2, pc, #4	; (adr r2, 801e6c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801e6bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e6c0:	0801e715 	.word	0x0801e715
 801e6c4:	0801e89b 	.word	0x0801e89b
 801e6c8:	0801e89b 	.word	0x0801e89b
 801e6cc:	0801e89b 	.word	0x0801e89b
 801e6d0:	0801e755 	.word	0x0801e755
 801e6d4:	0801e89b 	.word	0x0801e89b
 801e6d8:	0801e89b 	.word	0x0801e89b
 801e6dc:	0801e89b 	.word	0x0801e89b
 801e6e0:	0801e797 	.word	0x0801e797
 801e6e4:	0801e89b 	.word	0x0801e89b
 801e6e8:	0801e89b 	.word	0x0801e89b
 801e6ec:	0801e89b 	.word	0x0801e89b
 801e6f0:	0801e7d7 	.word	0x0801e7d7
 801e6f4:	0801e89b 	.word	0x0801e89b
 801e6f8:	0801e89b 	.word	0x0801e89b
 801e6fc:	0801e89b 	.word	0x0801e89b
 801e700:	0801e819 	.word	0x0801e819
 801e704:	0801e89b 	.word	0x0801e89b
 801e708:	0801e89b 	.word	0x0801e89b
 801e70c:	0801e89b 	.word	0x0801e89b
 801e710:	0801e859 	.word	0x0801e859
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801e714:	68fb      	ldr	r3, [r7, #12]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	68b9      	ldr	r1, [r7, #8]
 801e71a:	4618      	mov	r0, r3
 801e71c:	f000 f99a 	bl	801ea54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801e720:	68fb      	ldr	r3, [r7, #12]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	699a      	ldr	r2, [r3, #24]
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	f042 0208 	orr.w	r2, r2, #8
 801e72e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801e730:	68fb      	ldr	r3, [r7, #12]
 801e732:	681b      	ldr	r3, [r3, #0]
 801e734:	699a      	ldr	r2, [r3, #24]
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	681b      	ldr	r3, [r3, #0]
 801e73a:	f022 0204 	bic.w	r2, r2, #4
 801e73e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801e740:	68fb      	ldr	r3, [r7, #12]
 801e742:	681b      	ldr	r3, [r3, #0]
 801e744:	6999      	ldr	r1, [r3, #24]
 801e746:	68bb      	ldr	r3, [r7, #8]
 801e748:	691a      	ldr	r2, [r3, #16]
 801e74a:	68fb      	ldr	r3, [r7, #12]
 801e74c:	681b      	ldr	r3, [r3, #0]
 801e74e:	430a      	orrs	r2, r1
 801e750:	619a      	str	r2, [r3, #24]
      break;
 801e752:	e0a5      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	681b      	ldr	r3, [r3, #0]
 801e758:	68b9      	ldr	r1, [r7, #8]
 801e75a:	4618      	mov	r0, r3
 801e75c:	f000 fa14 	bl	801eb88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801e760:	68fb      	ldr	r3, [r7, #12]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	699a      	ldr	r2, [r3, #24]
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	681b      	ldr	r3, [r3, #0]
 801e76a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e76e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801e770:	68fb      	ldr	r3, [r7, #12]
 801e772:	681b      	ldr	r3, [r3, #0]
 801e774:	699a      	ldr	r2, [r3, #24]
 801e776:	68fb      	ldr	r3, [r7, #12]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e77e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801e780:	68fb      	ldr	r3, [r7, #12]
 801e782:	681b      	ldr	r3, [r3, #0]
 801e784:	6999      	ldr	r1, [r3, #24]
 801e786:	68bb      	ldr	r3, [r7, #8]
 801e788:	691b      	ldr	r3, [r3, #16]
 801e78a:	021a      	lsls	r2, r3, #8
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	430a      	orrs	r2, r1
 801e792:	619a      	str	r2, [r3, #24]
      break;
 801e794:	e084      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	68b9      	ldr	r1, [r7, #8]
 801e79c:	4618      	mov	r0, r3
 801e79e:	f000 fa87 	bl	801ecb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801e7a2:	68fb      	ldr	r3, [r7, #12]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	69da      	ldr	r2, [r3, #28]
 801e7a8:	68fb      	ldr	r3, [r7, #12]
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	f042 0208 	orr.w	r2, r2, #8
 801e7b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801e7b2:	68fb      	ldr	r3, [r7, #12]
 801e7b4:	681b      	ldr	r3, [r3, #0]
 801e7b6:	69da      	ldr	r2, [r3, #28]
 801e7b8:	68fb      	ldr	r3, [r7, #12]
 801e7ba:	681b      	ldr	r3, [r3, #0]
 801e7bc:	f022 0204 	bic.w	r2, r2, #4
 801e7c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801e7c2:	68fb      	ldr	r3, [r7, #12]
 801e7c4:	681b      	ldr	r3, [r3, #0]
 801e7c6:	69d9      	ldr	r1, [r3, #28]
 801e7c8:	68bb      	ldr	r3, [r7, #8]
 801e7ca:	691a      	ldr	r2, [r3, #16]
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	681b      	ldr	r3, [r3, #0]
 801e7d0:	430a      	orrs	r2, r1
 801e7d2:	61da      	str	r2, [r3, #28]
      break;
 801e7d4:	e064      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801e7d6:	68fb      	ldr	r3, [r7, #12]
 801e7d8:	681b      	ldr	r3, [r3, #0]
 801e7da:	68b9      	ldr	r1, [r7, #8]
 801e7dc:	4618      	mov	r0, r3
 801e7de:	f000 faf9 	bl	801edd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	69da      	ldr	r2, [r3, #28]
 801e7e8:	68fb      	ldr	r3, [r7, #12]
 801e7ea:	681b      	ldr	r3, [r3, #0]
 801e7ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e7f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	681b      	ldr	r3, [r3, #0]
 801e7f6:	69da      	ldr	r2, [r3, #28]
 801e7f8:	68fb      	ldr	r3, [r7, #12]
 801e7fa:	681b      	ldr	r3, [r3, #0]
 801e7fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e800:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801e802:	68fb      	ldr	r3, [r7, #12]
 801e804:	681b      	ldr	r3, [r3, #0]
 801e806:	69d9      	ldr	r1, [r3, #28]
 801e808:	68bb      	ldr	r3, [r7, #8]
 801e80a:	691b      	ldr	r3, [r3, #16]
 801e80c:	021a      	lsls	r2, r3, #8
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	430a      	orrs	r2, r1
 801e814:	61da      	str	r2, [r3, #28]
      break;
 801e816:	e043      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	68b9      	ldr	r1, [r7, #8]
 801e81e:	4618      	mov	r0, r3
 801e820:	f000 fb6c 	bl	801eefc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801e824:	68fb      	ldr	r3, [r7, #12]
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e82a:	68fb      	ldr	r3, [r7, #12]
 801e82c:	681b      	ldr	r3, [r3, #0]
 801e82e:	f042 0208 	orr.w	r2, r2, #8
 801e832:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801e834:	68fb      	ldr	r3, [r7, #12]
 801e836:	681b      	ldr	r3, [r3, #0]
 801e838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e83a:	68fb      	ldr	r3, [r7, #12]
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	f022 0204 	bic.w	r2, r2, #4
 801e842:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	681b      	ldr	r3, [r3, #0]
 801e848:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e84a:	68bb      	ldr	r3, [r7, #8]
 801e84c:	691a      	ldr	r2, [r3, #16]
 801e84e:	68fb      	ldr	r3, [r7, #12]
 801e850:	681b      	ldr	r3, [r3, #0]
 801e852:	430a      	orrs	r2, r1
 801e854:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e856:	e023      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	681b      	ldr	r3, [r3, #0]
 801e85c:	68b9      	ldr	r1, [r7, #8]
 801e85e:	4618      	mov	r0, r3
 801e860:	f000 fbb6 	bl	801efd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e86a:	68fb      	ldr	r3, [r7, #12]
 801e86c:	681b      	ldr	r3, [r3, #0]
 801e86e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801e872:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	681b      	ldr	r3, [r3, #0]
 801e878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e87a:	68fb      	ldr	r3, [r7, #12]
 801e87c:	681b      	ldr	r3, [r3, #0]
 801e87e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801e882:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801e884:	68fb      	ldr	r3, [r7, #12]
 801e886:	681b      	ldr	r3, [r3, #0]
 801e888:	6d19      	ldr	r1, [r3, #80]	; 0x50
 801e88a:	68bb      	ldr	r3, [r7, #8]
 801e88c:	691b      	ldr	r3, [r3, #16]
 801e88e:	021a      	lsls	r2, r3, #8
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	430a      	orrs	r2, r1
 801e896:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 801e898:	e002      	b.n	801e8a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801e89a:	2301      	movs	r3, #1
 801e89c:	75fb      	strb	r3, [r7, #23]
      break;
 801e89e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801e8a0:	68fb      	ldr	r3, [r7, #12]
 801e8a2:	2200      	movs	r2, #0
 801e8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801e8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 801e8aa:	4618      	mov	r0, r3
 801e8ac:	3718      	adds	r7, #24
 801e8ae:	46bd      	mov	sp, r7
 801e8b0:	bd80      	pop	{r7, pc}
 801e8b2:	bf00      	nop

0801e8b4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e8b4:	b480      	push	{r7}
 801e8b6:	b083      	sub	sp, #12
 801e8b8:	af00      	add	r7, sp, #0
 801e8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801e8bc:	bf00      	nop
 801e8be:	370c      	adds	r7, #12
 801e8c0:	46bd      	mov	sp, r7
 801e8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8c6:	4770      	bx	lr

0801e8c8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801e8c8:	b480      	push	{r7}
 801e8ca:	b083      	sub	sp, #12
 801e8cc:	af00      	add	r7, sp, #0
 801e8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801e8d0:	bf00      	nop
 801e8d2:	370c      	adds	r7, #12
 801e8d4:	46bd      	mov	sp, r7
 801e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8da:	4770      	bx	lr

0801e8dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801e8dc:	b480      	push	{r7}
 801e8de:	b083      	sub	sp, #12
 801e8e0:	af00      	add	r7, sp, #0
 801e8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801e8e4:	bf00      	nop
 801e8e6:	370c      	adds	r7, #12
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8ee:	4770      	bx	lr

0801e8f0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801e8f0:	b480      	push	{r7}
 801e8f2:	b083      	sub	sp, #12
 801e8f4:	af00      	add	r7, sp, #0
 801e8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801e8f8:	bf00      	nop
 801e8fa:	370c      	adds	r7, #12
 801e8fc:	46bd      	mov	sp, r7
 801e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e902:	4770      	bx	lr

0801e904 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801e904:	b480      	push	{r7}
 801e906:	b083      	sub	sp, #12
 801e908:	af00      	add	r7, sp, #0
 801e90a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801e90c:	bf00      	nop
 801e90e:	370c      	adds	r7, #12
 801e910:	46bd      	mov	sp, r7
 801e912:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e916:	4770      	bx	lr

0801e918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801e918:	b480      	push	{r7}
 801e91a:	b085      	sub	sp, #20
 801e91c:	af00      	add	r7, sp, #0
 801e91e:	6078      	str	r0, [r7, #4]
 801e920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801e928:	687b      	ldr	r3, [r7, #4]
 801e92a:	4a42      	ldr	r2, [pc, #264]	; (801ea34 <TIM_Base_SetConfig+0x11c>)
 801e92c:	4293      	cmp	r3, r2
 801e92e:	d013      	beq.n	801e958 <TIM_Base_SetConfig+0x40>
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e936:	d00f      	beq.n	801e958 <TIM_Base_SetConfig+0x40>
 801e938:	687b      	ldr	r3, [r7, #4]
 801e93a:	4a3f      	ldr	r2, [pc, #252]	; (801ea38 <TIM_Base_SetConfig+0x120>)
 801e93c:	4293      	cmp	r3, r2
 801e93e:	d00b      	beq.n	801e958 <TIM_Base_SetConfig+0x40>
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	4a3e      	ldr	r2, [pc, #248]	; (801ea3c <TIM_Base_SetConfig+0x124>)
 801e944:	4293      	cmp	r3, r2
 801e946:	d007      	beq.n	801e958 <TIM_Base_SetConfig+0x40>
 801e948:	687b      	ldr	r3, [r7, #4]
 801e94a:	4a3d      	ldr	r2, [pc, #244]	; (801ea40 <TIM_Base_SetConfig+0x128>)
 801e94c:	4293      	cmp	r3, r2
 801e94e:	d003      	beq.n	801e958 <TIM_Base_SetConfig+0x40>
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	4a3c      	ldr	r2, [pc, #240]	; (801ea44 <TIM_Base_SetConfig+0x12c>)
 801e954:	4293      	cmp	r3, r2
 801e956:	d108      	bne.n	801e96a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801e958:	68fb      	ldr	r3, [r7, #12]
 801e95a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801e95e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801e960:	683b      	ldr	r3, [r7, #0]
 801e962:	685b      	ldr	r3, [r3, #4]
 801e964:	68fa      	ldr	r2, [r7, #12]
 801e966:	4313      	orrs	r3, r2
 801e968:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	4a31      	ldr	r2, [pc, #196]	; (801ea34 <TIM_Base_SetConfig+0x11c>)
 801e96e:	4293      	cmp	r3, r2
 801e970:	d01f      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e978:	d01b      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e97a:	687b      	ldr	r3, [r7, #4]
 801e97c:	4a2e      	ldr	r2, [pc, #184]	; (801ea38 <TIM_Base_SetConfig+0x120>)
 801e97e:	4293      	cmp	r3, r2
 801e980:	d017      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	4a2d      	ldr	r2, [pc, #180]	; (801ea3c <TIM_Base_SetConfig+0x124>)
 801e986:	4293      	cmp	r3, r2
 801e988:	d013      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	4a2c      	ldr	r2, [pc, #176]	; (801ea40 <TIM_Base_SetConfig+0x128>)
 801e98e:	4293      	cmp	r3, r2
 801e990:	d00f      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	4a2c      	ldr	r2, [pc, #176]	; (801ea48 <TIM_Base_SetConfig+0x130>)
 801e996:	4293      	cmp	r3, r2
 801e998:	d00b      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e99a:	687b      	ldr	r3, [r7, #4]
 801e99c:	4a2b      	ldr	r2, [pc, #172]	; (801ea4c <TIM_Base_SetConfig+0x134>)
 801e99e:	4293      	cmp	r3, r2
 801e9a0:	d007      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	4a2a      	ldr	r2, [pc, #168]	; (801ea50 <TIM_Base_SetConfig+0x138>)
 801e9a6:	4293      	cmp	r3, r2
 801e9a8:	d003      	beq.n	801e9b2 <TIM_Base_SetConfig+0x9a>
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	4a25      	ldr	r2, [pc, #148]	; (801ea44 <TIM_Base_SetConfig+0x12c>)
 801e9ae:	4293      	cmp	r3, r2
 801e9b0:	d108      	bne.n	801e9c4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801e9b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801e9ba:	683b      	ldr	r3, [r7, #0]
 801e9bc:	68db      	ldr	r3, [r3, #12]
 801e9be:	68fa      	ldr	r2, [r7, #12]
 801e9c0:	4313      	orrs	r3, r2
 801e9c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801e9c4:	68fb      	ldr	r3, [r7, #12]
 801e9c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801e9ca:	683b      	ldr	r3, [r7, #0]
 801e9cc:	695b      	ldr	r3, [r3, #20]
 801e9ce:	4313      	orrs	r3, r2
 801e9d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801e9d2:	687b      	ldr	r3, [r7, #4]
 801e9d4:	68fa      	ldr	r2, [r7, #12]
 801e9d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801e9d8:	683b      	ldr	r3, [r7, #0]
 801e9da:	689a      	ldr	r2, [r3, #8]
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801e9e0:	683b      	ldr	r3, [r7, #0]
 801e9e2:	681a      	ldr	r2, [r3, #0]
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801e9e8:	687b      	ldr	r3, [r7, #4]
 801e9ea:	4a12      	ldr	r2, [pc, #72]	; (801ea34 <TIM_Base_SetConfig+0x11c>)
 801e9ec:	4293      	cmp	r3, r2
 801e9ee:	d013      	beq.n	801ea18 <TIM_Base_SetConfig+0x100>
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	4a13      	ldr	r2, [pc, #76]	; (801ea40 <TIM_Base_SetConfig+0x128>)
 801e9f4:	4293      	cmp	r3, r2
 801e9f6:	d00f      	beq.n	801ea18 <TIM_Base_SetConfig+0x100>
 801e9f8:	687b      	ldr	r3, [r7, #4]
 801e9fa:	4a13      	ldr	r2, [pc, #76]	; (801ea48 <TIM_Base_SetConfig+0x130>)
 801e9fc:	4293      	cmp	r3, r2
 801e9fe:	d00b      	beq.n	801ea18 <TIM_Base_SetConfig+0x100>
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	4a12      	ldr	r2, [pc, #72]	; (801ea4c <TIM_Base_SetConfig+0x134>)
 801ea04:	4293      	cmp	r3, r2
 801ea06:	d007      	beq.n	801ea18 <TIM_Base_SetConfig+0x100>
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	4a11      	ldr	r2, [pc, #68]	; (801ea50 <TIM_Base_SetConfig+0x138>)
 801ea0c:	4293      	cmp	r3, r2
 801ea0e:	d003      	beq.n	801ea18 <TIM_Base_SetConfig+0x100>
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	4a0c      	ldr	r2, [pc, #48]	; (801ea44 <TIM_Base_SetConfig+0x12c>)
 801ea14:	4293      	cmp	r3, r2
 801ea16:	d103      	bne.n	801ea20 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801ea18:	683b      	ldr	r3, [r7, #0]
 801ea1a:	691a      	ldr	r2, [r3, #16]
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	2201      	movs	r2, #1
 801ea24:	615a      	str	r2, [r3, #20]
}
 801ea26:	bf00      	nop
 801ea28:	3714      	adds	r7, #20
 801ea2a:	46bd      	mov	sp, r7
 801ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea30:	4770      	bx	lr
 801ea32:	bf00      	nop
 801ea34:	40012c00 	.word	0x40012c00
 801ea38:	40000400 	.word	0x40000400
 801ea3c:	40000800 	.word	0x40000800
 801ea40:	40013400 	.word	0x40013400
 801ea44:	40015000 	.word	0x40015000
 801ea48:	40014000 	.word	0x40014000
 801ea4c:	40014400 	.word	0x40014400
 801ea50:	40014800 	.word	0x40014800

0801ea54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ea54:	b480      	push	{r7}
 801ea56:	b087      	sub	sp, #28
 801ea58:	af00      	add	r7, sp, #0
 801ea5a:	6078      	str	r0, [r7, #4]
 801ea5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	6a1b      	ldr	r3, [r3, #32]
 801ea62:	f023 0201 	bic.w	r2, r3, #1
 801ea66:	687b      	ldr	r3, [r7, #4]
 801ea68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	6a1b      	ldr	r3, [r3, #32]
 801ea6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ea70:	687b      	ldr	r3, [r7, #4]
 801ea72:	685b      	ldr	r3, [r3, #4]
 801ea74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	699b      	ldr	r3, [r3, #24]
 801ea7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801ea7c:	68fb      	ldr	r3, [r7, #12]
 801ea7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ea82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ea86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801ea88:	68fb      	ldr	r3, [r7, #12]
 801ea8a:	f023 0303 	bic.w	r3, r3, #3
 801ea8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ea90:	683b      	ldr	r3, [r7, #0]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	68fa      	ldr	r2, [r7, #12]
 801ea96:	4313      	orrs	r3, r2
 801ea98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801ea9a:	697b      	ldr	r3, [r7, #20]
 801ea9c:	f023 0302 	bic.w	r3, r3, #2
 801eaa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801eaa2:	683b      	ldr	r3, [r7, #0]
 801eaa4:	689b      	ldr	r3, [r3, #8]
 801eaa6:	697a      	ldr	r2, [r7, #20]
 801eaa8:	4313      	orrs	r3, r2
 801eaaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801eaac:	687b      	ldr	r3, [r7, #4]
 801eaae:	4a30      	ldr	r2, [pc, #192]	; (801eb70 <TIM_OC1_SetConfig+0x11c>)
 801eab0:	4293      	cmp	r3, r2
 801eab2:	d013      	beq.n	801eadc <TIM_OC1_SetConfig+0x88>
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	4a2f      	ldr	r2, [pc, #188]	; (801eb74 <TIM_OC1_SetConfig+0x120>)
 801eab8:	4293      	cmp	r3, r2
 801eaba:	d00f      	beq.n	801eadc <TIM_OC1_SetConfig+0x88>
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	4a2e      	ldr	r2, [pc, #184]	; (801eb78 <TIM_OC1_SetConfig+0x124>)
 801eac0:	4293      	cmp	r3, r2
 801eac2:	d00b      	beq.n	801eadc <TIM_OC1_SetConfig+0x88>
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	4a2d      	ldr	r2, [pc, #180]	; (801eb7c <TIM_OC1_SetConfig+0x128>)
 801eac8:	4293      	cmp	r3, r2
 801eaca:	d007      	beq.n	801eadc <TIM_OC1_SetConfig+0x88>
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	4a2c      	ldr	r2, [pc, #176]	; (801eb80 <TIM_OC1_SetConfig+0x12c>)
 801ead0:	4293      	cmp	r3, r2
 801ead2:	d003      	beq.n	801eadc <TIM_OC1_SetConfig+0x88>
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	4a2b      	ldr	r2, [pc, #172]	; (801eb84 <TIM_OC1_SetConfig+0x130>)
 801ead8:	4293      	cmp	r3, r2
 801eada:	d10c      	bne.n	801eaf6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801eadc:	697b      	ldr	r3, [r7, #20]
 801eade:	f023 0308 	bic.w	r3, r3, #8
 801eae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801eae4:	683b      	ldr	r3, [r7, #0]
 801eae6:	68db      	ldr	r3, [r3, #12]
 801eae8:	697a      	ldr	r2, [r7, #20]
 801eaea:	4313      	orrs	r3, r2
 801eaec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801eaee:	697b      	ldr	r3, [r7, #20]
 801eaf0:	f023 0304 	bic.w	r3, r3, #4
 801eaf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	4a1d      	ldr	r2, [pc, #116]	; (801eb70 <TIM_OC1_SetConfig+0x11c>)
 801eafa:	4293      	cmp	r3, r2
 801eafc:	d013      	beq.n	801eb26 <TIM_OC1_SetConfig+0xd2>
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	4a1c      	ldr	r2, [pc, #112]	; (801eb74 <TIM_OC1_SetConfig+0x120>)
 801eb02:	4293      	cmp	r3, r2
 801eb04:	d00f      	beq.n	801eb26 <TIM_OC1_SetConfig+0xd2>
 801eb06:	687b      	ldr	r3, [r7, #4]
 801eb08:	4a1b      	ldr	r2, [pc, #108]	; (801eb78 <TIM_OC1_SetConfig+0x124>)
 801eb0a:	4293      	cmp	r3, r2
 801eb0c:	d00b      	beq.n	801eb26 <TIM_OC1_SetConfig+0xd2>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	4a1a      	ldr	r2, [pc, #104]	; (801eb7c <TIM_OC1_SetConfig+0x128>)
 801eb12:	4293      	cmp	r3, r2
 801eb14:	d007      	beq.n	801eb26 <TIM_OC1_SetConfig+0xd2>
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	4a19      	ldr	r2, [pc, #100]	; (801eb80 <TIM_OC1_SetConfig+0x12c>)
 801eb1a:	4293      	cmp	r3, r2
 801eb1c:	d003      	beq.n	801eb26 <TIM_OC1_SetConfig+0xd2>
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	4a18      	ldr	r2, [pc, #96]	; (801eb84 <TIM_OC1_SetConfig+0x130>)
 801eb22:	4293      	cmp	r3, r2
 801eb24:	d111      	bne.n	801eb4a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801eb26:	693b      	ldr	r3, [r7, #16]
 801eb28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801eb2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801eb2e:	693b      	ldr	r3, [r7, #16]
 801eb30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801eb34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801eb36:	683b      	ldr	r3, [r7, #0]
 801eb38:	695b      	ldr	r3, [r3, #20]
 801eb3a:	693a      	ldr	r2, [r7, #16]
 801eb3c:	4313      	orrs	r3, r2
 801eb3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801eb40:	683b      	ldr	r3, [r7, #0]
 801eb42:	699b      	ldr	r3, [r3, #24]
 801eb44:	693a      	ldr	r2, [r7, #16]
 801eb46:	4313      	orrs	r3, r2
 801eb48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	693a      	ldr	r2, [r7, #16]
 801eb4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	68fa      	ldr	r2, [r7, #12]
 801eb54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801eb56:	683b      	ldr	r3, [r7, #0]
 801eb58:	685a      	ldr	r2, [r3, #4]
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	697a      	ldr	r2, [r7, #20]
 801eb62:	621a      	str	r2, [r3, #32]
}
 801eb64:	bf00      	nop
 801eb66:	371c      	adds	r7, #28
 801eb68:	46bd      	mov	sp, r7
 801eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb6e:	4770      	bx	lr
 801eb70:	40012c00 	.word	0x40012c00
 801eb74:	40013400 	.word	0x40013400
 801eb78:	40014000 	.word	0x40014000
 801eb7c:	40014400 	.word	0x40014400
 801eb80:	40014800 	.word	0x40014800
 801eb84:	40015000 	.word	0x40015000

0801eb88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801eb88:	b480      	push	{r7}
 801eb8a:	b087      	sub	sp, #28
 801eb8c:	af00      	add	r7, sp, #0
 801eb8e:	6078      	str	r0, [r7, #4]
 801eb90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	6a1b      	ldr	r3, [r3, #32]
 801eb96:	f023 0210 	bic.w	r2, r3, #16
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801eb9e:	687b      	ldr	r3, [r7, #4]
 801eba0:	6a1b      	ldr	r3, [r3, #32]
 801eba2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	685b      	ldr	r3, [r3, #4]
 801eba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	699b      	ldr	r3, [r3, #24]
 801ebae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801ebb0:	68fb      	ldr	r3, [r7, #12]
 801ebb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ebb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ebba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801ebbc:	68fb      	ldr	r3, [r7, #12]
 801ebbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ebc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ebc4:	683b      	ldr	r3, [r7, #0]
 801ebc6:	681b      	ldr	r3, [r3, #0]
 801ebc8:	021b      	lsls	r3, r3, #8
 801ebca:	68fa      	ldr	r2, [r7, #12]
 801ebcc:	4313      	orrs	r3, r2
 801ebce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801ebd0:	697b      	ldr	r3, [r7, #20]
 801ebd2:	f023 0320 	bic.w	r3, r3, #32
 801ebd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801ebd8:	683b      	ldr	r3, [r7, #0]
 801ebda:	689b      	ldr	r3, [r3, #8]
 801ebdc:	011b      	lsls	r3, r3, #4
 801ebde:	697a      	ldr	r2, [r7, #20]
 801ebe0:	4313      	orrs	r3, r2
 801ebe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	4a2c      	ldr	r2, [pc, #176]	; (801ec98 <TIM_OC2_SetConfig+0x110>)
 801ebe8:	4293      	cmp	r3, r2
 801ebea:	d007      	beq.n	801ebfc <TIM_OC2_SetConfig+0x74>
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	4a2b      	ldr	r2, [pc, #172]	; (801ec9c <TIM_OC2_SetConfig+0x114>)
 801ebf0:	4293      	cmp	r3, r2
 801ebf2:	d003      	beq.n	801ebfc <TIM_OC2_SetConfig+0x74>
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	4a2a      	ldr	r2, [pc, #168]	; (801eca0 <TIM_OC2_SetConfig+0x118>)
 801ebf8:	4293      	cmp	r3, r2
 801ebfa:	d10d      	bne.n	801ec18 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801ebfc:	697b      	ldr	r3, [r7, #20]
 801ebfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801ec02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801ec04:	683b      	ldr	r3, [r7, #0]
 801ec06:	68db      	ldr	r3, [r3, #12]
 801ec08:	011b      	lsls	r3, r3, #4
 801ec0a:	697a      	ldr	r2, [r7, #20]
 801ec0c:	4313      	orrs	r3, r2
 801ec0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801ec10:	697b      	ldr	r3, [r7, #20]
 801ec12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ec16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ec18:	687b      	ldr	r3, [r7, #4]
 801ec1a:	4a1f      	ldr	r2, [pc, #124]	; (801ec98 <TIM_OC2_SetConfig+0x110>)
 801ec1c:	4293      	cmp	r3, r2
 801ec1e:	d013      	beq.n	801ec48 <TIM_OC2_SetConfig+0xc0>
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	4a1e      	ldr	r2, [pc, #120]	; (801ec9c <TIM_OC2_SetConfig+0x114>)
 801ec24:	4293      	cmp	r3, r2
 801ec26:	d00f      	beq.n	801ec48 <TIM_OC2_SetConfig+0xc0>
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	4a1e      	ldr	r2, [pc, #120]	; (801eca4 <TIM_OC2_SetConfig+0x11c>)
 801ec2c:	4293      	cmp	r3, r2
 801ec2e:	d00b      	beq.n	801ec48 <TIM_OC2_SetConfig+0xc0>
 801ec30:	687b      	ldr	r3, [r7, #4]
 801ec32:	4a1d      	ldr	r2, [pc, #116]	; (801eca8 <TIM_OC2_SetConfig+0x120>)
 801ec34:	4293      	cmp	r3, r2
 801ec36:	d007      	beq.n	801ec48 <TIM_OC2_SetConfig+0xc0>
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	4a1c      	ldr	r2, [pc, #112]	; (801ecac <TIM_OC2_SetConfig+0x124>)
 801ec3c:	4293      	cmp	r3, r2
 801ec3e:	d003      	beq.n	801ec48 <TIM_OC2_SetConfig+0xc0>
 801ec40:	687b      	ldr	r3, [r7, #4]
 801ec42:	4a17      	ldr	r2, [pc, #92]	; (801eca0 <TIM_OC2_SetConfig+0x118>)
 801ec44:	4293      	cmp	r3, r2
 801ec46:	d113      	bne.n	801ec70 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801ec48:	693b      	ldr	r3, [r7, #16]
 801ec4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ec4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801ec50:	693b      	ldr	r3, [r7, #16]
 801ec52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ec56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801ec58:	683b      	ldr	r3, [r7, #0]
 801ec5a:	695b      	ldr	r3, [r3, #20]
 801ec5c:	009b      	lsls	r3, r3, #2
 801ec5e:	693a      	ldr	r2, [r7, #16]
 801ec60:	4313      	orrs	r3, r2
 801ec62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801ec64:	683b      	ldr	r3, [r7, #0]
 801ec66:	699b      	ldr	r3, [r3, #24]
 801ec68:	009b      	lsls	r3, r3, #2
 801ec6a:	693a      	ldr	r2, [r7, #16]
 801ec6c:	4313      	orrs	r3, r2
 801ec6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ec70:	687b      	ldr	r3, [r7, #4]
 801ec72:	693a      	ldr	r2, [r7, #16]
 801ec74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	68fa      	ldr	r2, [r7, #12]
 801ec7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801ec7c:	683b      	ldr	r3, [r7, #0]
 801ec7e:	685a      	ldr	r2, [r3, #4]
 801ec80:	687b      	ldr	r3, [r7, #4]
 801ec82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	697a      	ldr	r2, [r7, #20]
 801ec88:	621a      	str	r2, [r3, #32]
}
 801ec8a:	bf00      	nop
 801ec8c:	371c      	adds	r7, #28
 801ec8e:	46bd      	mov	sp, r7
 801ec90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec94:	4770      	bx	lr
 801ec96:	bf00      	nop
 801ec98:	40012c00 	.word	0x40012c00
 801ec9c:	40013400 	.word	0x40013400
 801eca0:	40015000 	.word	0x40015000
 801eca4:	40014000 	.word	0x40014000
 801eca8:	40014400 	.word	0x40014400
 801ecac:	40014800 	.word	0x40014800

0801ecb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801ecb0:	b480      	push	{r7}
 801ecb2:	b087      	sub	sp, #28
 801ecb4:	af00      	add	r7, sp, #0
 801ecb6:	6078      	str	r0, [r7, #4]
 801ecb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801ecba:	687b      	ldr	r3, [r7, #4]
 801ecbc:	6a1b      	ldr	r3, [r3, #32]
 801ecbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801ecc2:	687b      	ldr	r3, [r7, #4]
 801ecc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	6a1b      	ldr	r3, [r3, #32]
 801ecca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	685b      	ldr	r3, [r3, #4]
 801ecd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	69db      	ldr	r3, [r3, #28]
 801ecd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801ecd8:	68fb      	ldr	r3, [r7, #12]
 801ecda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ecde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ece2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801ece4:	68fb      	ldr	r3, [r7, #12]
 801ece6:	f023 0303 	bic.w	r3, r3, #3
 801ecea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ecec:	683b      	ldr	r3, [r7, #0]
 801ecee:	681b      	ldr	r3, [r3, #0]
 801ecf0:	68fa      	ldr	r2, [r7, #12]
 801ecf2:	4313      	orrs	r3, r2
 801ecf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801ecf6:	697b      	ldr	r3, [r7, #20]
 801ecf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801ecfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801ecfe:	683b      	ldr	r3, [r7, #0]
 801ed00:	689b      	ldr	r3, [r3, #8]
 801ed02:	021b      	lsls	r3, r3, #8
 801ed04:	697a      	ldr	r2, [r7, #20]
 801ed06:	4313      	orrs	r3, r2
 801ed08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	4a2b      	ldr	r2, [pc, #172]	; (801edbc <TIM_OC3_SetConfig+0x10c>)
 801ed0e:	4293      	cmp	r3, r2
 801ed10:	d007      	beq.n	801ed22 <TIM_OC3_SetConfig+0x72>
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	4a2a      	ldr	r2, [pc, #168]	; (801edc0 <TIM_OC3_SetConfig+0x110>)
 801ed16:	4293      	cmp	r3, r2
 801ed18:	d003      	beq.n	801ed22 <TIM_OC3_SetConfig+0x72>
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	4a29      	ldr	r2, [pc, #164]	; (801edc4 <TIM_OC3_SetConfig+0x114>)
 801ed1e:	4293      	cmp	r3, r2
 801ed20:	d10d      	bne.n	801ed3e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801ed22:	697b      	ldr	r3, [r7, #20]
 801ed24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801ed28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801ed2a:	683b      	ldr	r3, [r7, #0]
 801ed2c:	68db      	ldr	r3, [r3, #12]
 801ed2e:	021b      	lsls	r3, r3, #8
 801ed30:	697a      	ldr	r2, [r7, #20]
 801ed32:	4313      	orrs	r3, r2
 801ed34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801ed36:	697b      	ldr	r3, [r7, #20]
 801ed38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801ed3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	4a1e      	ldr	r2, [pc, #120]	; (801edbc <TIM_OC3_SetConfig+0x10c>)
 801ed42:	4293      	cmp	r3, r2
 801ed44:	d013      	beq.n	801ed6e <TIM_OC3_SetConfig+0xbe>
 801ed46:	687b      	ldr	r3, [r7, #4]
 801ed48:	4a1d      	ldr	r2, [pc, #116]	; (801edc0 <TIM_OC3_SetConfig+0x110>)
 801ed4a:	4293      	cmp	r3, r2
 801ed4c:	d00f      	beq.n	801ed6e <TIM_OC3_SetConfig+0xbe>
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	4a1d      	ldr	r2, [pc, #116]	; (801edc8 <TIM_OC3_SetConfig+0x118>)
 801ed52:	4293      	cmp	r3, r2
 801ed54:	d00b      	beq.n	801ed6e <TIM_OC3_SetConfig+0xbe>
 801ed56:	687b      	ldr	r3, [r7, #4]
 801ed58:	4a1c      	ldr	r2, [pc, #112]	; (801edcc <TIM_OC3_SetConfig+0x11c>)
 801ed5a:	4293      	cmp	r3, r2
 801ed5c:	d007      	beq.n	801ed6e <TIM_OC3_SetConfig+0xbe>
 801ed5e:	687b      	ldr	r3, [r7, #4]
 801ed60:	4a1b      	ldr	r2, [pc, #108]	; (801edd0 <TIM_OC3_SetConfig+0x120>)
 801ed62:	4293      	cmp	r3, r2
 801ed64:	d003      	beq.n	801ed6e <TIM_OC3_SetConfig+0xbe>
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	4a16      	ldr	r2, [pc, #88]	; (801edc4 <TIM_OC3_SetConfig+0x114>)
 801ed6a:	4293      	cmp	r3, r2
 801ed6c:	d113      	bne.n	801ed96 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801ed6e:	693b      	ldr	r3, [r7, #16]
 801ed70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ed74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801ed76:	693b      	ldr	r3, [r7, #16]
 801ed78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ed7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801ed7e:	683b      	ldr	r3, [r7, #0]
 801ed80:	695b      	ldr	r3, [r3, #20]
 801ed82:	011b      	lsls	r3, r3, #4
 801ed84:	693a      	ldr	r2, [r7, #16]
 801ed86:	4313      	orrs	r3, r2
 801ed88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801ed8a:	683b      	ldr	r3, [r7, #0]
 801ed8c:	699b      	ldr	r3, [r3, #24]
 801ed8e:	011b      	lsls	r3, r3, #4
 801ed90:	693a      	ldr	r2, [r7, #16]
 801ed92:	4313      	orrs	r3, r2
 801ed94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	693a      	ldr	r2, [r7, #16]
 801ed9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	68fa      	ldr	r2, [r7, #12]
 801eda0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801eda2:	683b      	ldr	r3, [r7, #0]
 801eda4:	685a      	ldr	r2, [r3, #4]
 801eda6:	687b      	ldr	r3, [r7, #4]
 801eda8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801edaa:	687b      	ldr	r3, [r7, #4]
 801edac:	697a      	ldr	r2, [r7, #20]
 801edae:	621a      	str	r2, [r3, #32]
}
 801edb0:	bf00      	nop
 801edb2:	371c      	adds	r7, #28
 801edb4:	46bd      	mov	sp, r7
 801edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edba:	4770      	bx	lr
 801edbc:	40012c00 	.word	0x40012c00
 801edc0:	40013400 	.word	0x40013400
 801edc4:	40015000 	.word	0x40015000
 801edc8:	40014000 	.word	0x40014000
 801edcc:	40014400 	.word	0x40014400
 801edd0:	40014800 	.word	0x40014800

0801edd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801edd4:	b480      	push	{r7}
 801edd6:	b087      	sub	sp, #28
 801edd8:	af00      	add	r7, sp, #0
 801edda:	6078      	str	r0, [r7, #4]
 801eddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801edde:	687b      	ldr	r3, [r7, #4]
 801ede0:	6a1b      	ldr	r3, [r3, #32]
 801ede2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801edea:	687b      	ldr	r3, [r7, #4]
 801edec:	6a1b      	ldr	r3, [r3, #32]
 801edee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	685b      	ldr	r3, [r3, #4]
 801edf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	69db      	ldr	r3, [r3, #28]
 801edfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801edfc:	68fb      	ldr	r3, [r7, #12]
 801edfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801ee02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801ee06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801ee08:	68fb      	ldr	r3, [r7, #12]
 801ee0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801ee0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801ee10:	683b      	ldr	r3, [r7, #0]
 801ee12:	681b      	ldr	r3, [r3, #0]
 801ee14:	021b      	lsls	r3, r3, #8
 801ee16:	68fa      	ldr	r2, [r7, #12]
 801ee18:	4313      	orrs	r3, r2
 801ee1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801ee1c:	697b      	ldr	r3, [r7, #20]
 801ee1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801ee22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801ee24:	683b      	ldr	r3, [r7, #0]
 801ee26:	689b      	ldr	r3, [r3, #8]
 801ee28:	031b      	lsls	r3, r3, #12
 801ee2a:	697a      	ldr	r2, [r7, #20]
 801ee2c:	4313      	orrs	r3, r2
 801ee2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	4a2c      	ldr	r2, [pc, #176]	; (801eee4 <TIM_OC4_SetConfig+0x110>)
 801ee34:	4293      	cmp	r3, r2
 801ee36:	d007      	beq.n	801ee48 <TIM_OC4_SetConfig+0x74>
 801ee38:	687b      	ldr	r3, [r7, #4]
 801ee3a:	4a2b      	ldr	r2, [pc, #172]	; (801eee8 <TIM_OC4_SetConfig+0x114>)
 801ee3c:	4293      	cmp	r3, r2
 801ee3e:	d003      	beq.n	801ee48 <TIM_OC4_SetConfig+0x74>
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	4a2a      	ldr	r2, [pc, #168]	; (801eeec <TIM_OC4_SetConfig+0x118>)
 801ee44:	4293      	cmp	r3, r2
 801ee46:	d10d      	bne.n	801ee64 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 801ee48:	697b      	ldr	r3, [r7, #20]
 801ee4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801ee4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 801ee50:	683b      	ldr	r3, [r7, #0]
 801ee52:	68db      	ldr	r3, [r3, #12]
 801ee54:	031b      	lsls	r3, r3, #12
 801ee56:	697a      	ldr	r2, [r7, #20]
 801ee58:	4313      	orrs	r3, r2
 801ee5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 801ee5c:	697b      	ldr	r3, [r7, #20]
 801ee5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ee62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	4a1f      	ldr	r2, [pc, #124]	; (801eee4 <TIM_OC4_SetConfig+0x110>)
 801ee68:	4293      	cmp	r3, r2
 801ee6a:	d013      	beq.n	801ee94 <TIM_OC4_SetConfig+0xc0>
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	4a1e      	ldr	r2, [pc, #120]	; (801eee8 <TIM_OC4_SetConfig+0x114>)
 801ee70:	4293      	cmp	r3, r2
 801ee72:	d00f      	beq.n	801ee94 <TIM_OC4_SetConfig+0xc0>
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	4a1e      	ldr	r2, [pc, #120]	; (801eef0 <TIM_OC4_SetConfig+0x11c>)
 801ee78:	4293      	cmp	r3, r2
 801ee7a:	d00b      	beq.n	801ee94 <TIM_OC4_SetConfig+0xc0>
 801ee7c:	687b      	ldr	r3, [r7, #4]
 801ee7e:	4a1d      	ldr	r2, [pc, #116]	; (801eef4 <TIM_OC4_SetConfig+0x120>)
 801ee80:	4293      	cmp	r3, r2
 801ee82:	d007      	beq.n	801ee94 <TIM_OC4_SetConfig+0xc0>
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	4a1c      	ldr	r2, [pc, #112]	; (801eef8 <TIM_OC4_SetConfig+0x124>)
 801ee88:	4293      	cmp	r3, r2
 801ee8a:	d003      	beq.n	801ee94 <TIM_OC4_SetConfig+0xc0>
 801ee8c:	687b      	ldr	r3, [r7, #4]
 801ee8e:	4a17      	ldr	r2, [pc, #92]	; (801eeec <TIM_OC4_SetConfig+0x118>)
 801ee90:	4293      	cmp	r3, r2
 801ee92:	d113      	bne.n	801eebc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801ee94:	693b      	ldr	r3, [r7, #16]
 801ee96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801ee9a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 801ee9c:	693b      	ldr	r3, [r7, #16]
 801ee9e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801eea2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801eea4:	683b      	ldr	r3, [r7, #0]
 801eea6:	695b      	ldr	r3, [r3, #20]
 801eea8:	019b      	lsls	r3, r3, #6
 801eeaa:	693a      	ldr	r2, [r7, #16]
 801eeac:	4313      	orrs	r3, r2
 801eeae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 801eeb0:	683b      	ldr	r3, [r7, #0]
 801eeb2:	699b      	ldr	r3, [r3, #24]
 801eeb4:	019b      	lsls	r3, r3, #6
 801eeb6:	693a      	ldr	r2, [r7, #16]
 801eeb8:	4313      	orrs	r3, r2
 801eeba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801eebc:	687b      	ldr	r3, [r7, #4]
 801eebe:	693a      	ldr	r2, [r7, #16]
 801eec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	68fa      	ldr	r2, [r7, #12]
 801eec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801eec8:	683b      	ldr	r3, [r7, #0]
 801eeca:	685a      	ldr	r2, [r3, #4]
 801eecc:	687b      	ldr	r3, [r7, #4]
 801eece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	697a      	ldr	r2, [r7, #20]
 801eed4:	621a      	str	r2, [r3, #32]
}
 801eed6:	bf00      	nop
 801eed8:	371c      	adds	r7, #28
 801eeda:	46bd      	mov	sp, r7
 801eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eee0:	4770      	bx	lr
 801eee2:	bf00      	nop
 801eee4:	40012c00 	.word	0x40012c00
 801eee8:	40013400 	.word	0x40013400
 801eeec:	40015000 	.word	0x40015000
 801eef0:	40014000 	.word	0x40014000
 801eef4:	40014400 	.word	0x40014400
 801eef8:	40014800 	.word	0x40014800

0801eefc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801eefc:	b480      	push	{r7}
 801eefe:	b087      	sub	sp, #28
 801ef00:	af00      	add	r7, sp, #0
 801ef02:	6078      	str	r0, [r7, #4]
 801ef04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	6a1b      	ldr	r3, [r3, #32]
 801ef0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ef0e:	687b      	ldr	r3, [r7, #4]
 801ef10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	6a1b      	ldr	r3, [r3, #32]
 801ef16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	685b      	ldr	r3, [r3, #4]
 801ef1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ef24:	68fb      	ldr	r3, [r7, #12]
 801ef26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ef2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ef2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ef30:	683b      	ldr	r3, [r7, #0]
 801ef32:	681b      	ldr	r3, [r3, #0]
 801ef34:	68fa      	ldr	r2, [r7, #12]
 801ef36:	4313      	orrs	r3, r2
 801ef38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ef3a:	693b      	ldr	r3, [r7, #16]
 801ef3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ef40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ef42:	683b      	ldr	r3, [r7, #0]
 801ef44:	689b      	ldr	r3, [r3, #8]
 801ef46:	041b      	lsls	r3, r3, #16
 801ef48:	693a      	ldr	r2, [r7, #16]
 801ef4a:	4313      	orrs	r3, r2
 801ef4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ef4e:	687b      	ldr	r3, [r7, #4]
 801ef50:	4a19      	ldr	r2, [pc, #100]	; (801efb8 <TIM_OC5_SetConfig+0xbc>)
 801ef52:	4293      	cmp	r3, r2
 801ef54:	d013      	beq.n	801ef7e <TIM_OC5_SetConfig+0x82>
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	4a18      	ldr	r2, [pc, #96]	; (801efbc <TIM_OC5_SetConfig+0xc0>)
 801ef5a:	4293      	cmp	r3, r2
 801ef5c:	d00f      	beq.n	801ef7e <TIM_OC5_SetConfig+0x82>
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	4a17      	ldr	r2, [pc, #92]	; (801efc0 <TIM_OC5_SetConfig+0xc4>)
 801ef62:	4293      	cmp	r3, r2
 801ef64:	d00b      	beq.n	801ef7e <TIM_OC5_SetConfig+0x82>
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	4a16      	ldr	r2, [pc, #88]	; (801efc4 <TIM_OC5_SetConfig+0xc8>)
 801ef6a:	4293      	cmp	r3, r2
 801ef6c:	d007      	beq.n	801ef7e <TIM_OC5_SetConfig+0x82>
 801ef6e:	687b      	ldr	r3, [r7, #4]
 801ef70:	4a15      	ldr	r2, [pc, #84]	; (801efc8 <TIM_OC5_SetConfig+0xcc>)
 801ef72:	4293      	cmp	r3, r2
 801ef74:	d003      	beq.n	801ef7e <TIM_OC5_SetConfig+0x82>
 801ef76:	687b      	ldr	r3, [r7, #4]
 801ef78:	4a14      	ldr	r2, [pc, #80]	; (801efcc <TIM_OC5_SetConfig+0xd0>)
 801ef7a:	4293      	cmp	r3, r2
 801ef7c:	d109      	bne.n	801ef92 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ef7e:	697b      	ldr	r3, [r7, #20]
 801ef80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ef84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ef86:	683b      	ldr	r3, [r7, #0]
 801ef88:	695b      	ldr	r3, [r3, #20]
 801ef8a:	021b      	lsls	r3, r3, #8
 801ef8c:	697a      	ldr	r2, [r7, #20]
 801ef8e:	4313      	orrs	r3, r2
 801ef90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ef92:	687b      	ldr	r3, [r7, #4]
 801ef94:	697a      	ldr	r2, [r7, #20]
 801ef96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ef98:	687b      	ldr	r3, [r7, #4]
 801ef9a:	68fa      	ldr	r2, [r7, #12]
 801ef9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ef9e:	683b      	ldr	r3, [r7, #0]
 801efa0:	685a      	ldr	r2, [r3, #4]
 801efa2:	687b      	ldr	r3, [r7, #4]
 801efa4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	693a      	ldr	r2, [r7, #16]
 801efaa:	621a      	str	r2, [r3, #32]
}
 801efac:	bf00      	nop
 801efae:	371c      	adds	r7, #28
 801efb0:	46bd      	mov	sp, r7
 801efb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efb6:	4770      	bx	lr
 801efb8:	40012c00 	.word	0x40012c00
 801efbc:	40013400 	.word	0x40013400
 801efc0:	40014000 	.word	0x40014000
 801efc4:	40014400 	.word	0x40014400
 801efc8:	40014800 	.word	0x40014800
 801efcc:	40015000 	.word	0x40015000

0801efd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 801efd0:	b480      	push	{r7}
 801efd2:	b087      	sub	sp, #28
 801efd4:	af00      	add	r7, sp, #0
 801efd6:	6078      	str	r0, [r7, #4]
 801efd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	6a1b      	ldr	r3, [r3, #32]
 801efde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801efe2:	687b      	ldr	r3, [r7, #4]
 801efe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801efe6:	687b      	ldr	r3, [r7, #4]
 801efe8:	6a1b      	ldr	r3, [r3, #32]
 801efea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	685b      	ldr	r3, [r3, #4]
 801eff0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801eff8:	68fb      	ldr	r3, [r7, #12]
 801effa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801effe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801f002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801f004:	683b      	ldr	r3, [r7, #0]
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	021b      	lsls	r3, r3, #8
 801f00a:	68fa      	ldr	r2, [r7, #12]
 801f00c:	4313      	orrs	r3, r2
 801f00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801f010:	693b      	ldr	r3, [r7, #16]
 801f012:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801f016:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801f018:	683b      	ldr	r3, [r7, #0]
 801f01a:	689b      	ldr	r3, [r3, #8]
 801f01c:	051b      	lsls	r3, r3, #20
 801f01e:	693a      	ldr	r2, [r7, #16]
 801f020:	4313      	orrs	r3, r2
 801f022:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	4a1a      	ldr	r2, [pc, #104]	; (801f090 <TIM_OC6_SetConfig+0xc0>)
 801f028:	4293      	cmp	r3, r2
 801f02a:	d013      	beq.n	801f054 <TIM_OC6_SetConfig+0x84>
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	4a19      	ldr	r2, [pc, #100]	; (801f094 <TIM_OC6_SetConfig+0xc4>)
 801f030:	4293      	cmp	r3, r2
 801f032:	d00f      	beq.n	801f054 <TIM_OC6_SetConfig+0x84>
 801f034:	687b      	ldr	r3, [r7, #4]
 801f036:	4a18      	ldr	r2, [pc, #96]	; (801f098 <TIM_OC6_SetConfig+0xc8>)
 801f038:	4293      	cmp	r3, r2
 801f03a:	d00b      	beq.n	801f054 <TIM_OC6_SetConfig+0x84>
 801f03c:	687b      	ldr	r3, [r7, #4]
 801f03e:	4a17      	ldr	r2, [pc, #92]	; (801f09c <TIM_OC6_SetConfig+0xcc>)
 801f040:	4293      	cmp	r3, r2
 801f042:	d007      	beq.n	801f054 <TIM_OC6_SetConfig+0x84>
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	4a16      	ldr	r2, [pc, #88]	; (801f0a0 <TIM_OC6_SetConfig+0xd0>)
 801f048:	4293      	cmp	r3, r2
 801f04a:	d003      	beq.n	801f054 <TIM_OC6_SetConfig+0x84>
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	4a15      	ldr	r2, [pc, #84]	; (801f0a4 <TIM_OC6_SetConfig+0xd4>)
 801f050:	4293      	cmp	r3, r2
 801f052:	d109      	bne.n	801f068 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801f054:	697b      	ldr	r3, [r7, #20]
 801f056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801f05a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801f05c:	683b      	ldr	r3, [r7, #0]
 801f05e:	695b      	ldr	r3, [r3, #20]
 801f060:	029b      	lsls	r3, r3, #10
 801f062:	697a      	ldr	r2, [r7, #20]
 801f064:	4313      	orrs	r3, r2
 801f066:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f068:	687b      	ldr	r3, [r7, #4]
 801f06a:	697a      	ldr	r2, [r7, #20]
 801f06c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	68fa      	ldr	r2, [r7, #12]
 801f072:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801f074:	683b      	ldr	r3, [r7, #0]
 801f076:	685a      	ldr	r2, [r3, #4]
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	693a      	ldr	r2, [r7, #16]
 801f080:	621a      	str	r2, [r3, #32]
}
 801f082:	bf00      	nop
 801f084:	371c      	adds	r7, #28
 801f086:	46bd      	mov	sp, r7
 801f088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f08c:	4770      	bx	lr
 801f08e:	bf00      	nop
 801f090:	40012c00 	.word	0x40012c00
 801f094:	40013400 	.word	0x40013400
 801f098:	40014000 	.word	0x40014000
 801f09c:	40014400 	.word	0x40014400
 801f0a0:	40014800 	.word	0x40014800
 801f0a4:	40015000 	.word	0x40015000

0801f0a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801f0a8:	b480      	push	{r7}
 801f0aa:	b087      	sub	sp, #28
 801f0ac:	af00      	add	r7, sp, #0
 801f0ae:	60f8      	str	r0, [r7, #12]
 801f0b0:	60b9      	str	r1, [r7, #8]
 801f0b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801f0b4:	68bb      	ldr	r3, [r7, #8]
 801f0b6:	f003 031f 	and.w	r3, r3, #31
 801f0ba:	2201      	movs	r2, #1
 801f0bc:	fa02 f303 	lsl.w	r3, r2, r3
 801f0c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	6a1a      	ldr	r2, [r3, #32]
 801f0c6:	697b      	ldr	r3, [r7, #20]
 801f0c8:	43db      	mvns	r3, r3
 801f0ca:	401a      	ands	r2, r3
 801f0cc:	68fb      	ldr	r3, [r7, #12]
 801f0ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801f0d0:	68fb      	ldr	r3, [r7, #12]
 801f0d2:	6a1a      	ldr	r2, [r3, #32]
 801f0d4:	68bb      	ldr	r3, [r7, #8]
 801f0d6:	f003 031f 	and.w	r3, r3, #31
 801f0da:	6879      	ldr	r1, [r7, #4]
 801f0dc:	fa01 f303 	lsl.w	r3, r1, r3
 801f0e0:	431a      	orrs	r2, r3
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	621a      	str	r2, [r3, #32]
}
 801f0e6:	bf00      	nop
 801f0e8:	371c      	adds	r7, #28
 801f0ea:	46bd      	mov	sp, r7
 801f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f0f0:	4770      	bx	lr
	...

0801f0f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f0f4:	b480      	push	{r7}
 801f0f6:	b085      	sub	sp, #20
 801f0f8:	af00      	add	r7, sp, #0
 801f0fa:	6078      	str	r0, [r7, #4]
 801f0fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f0fe:	687b      	ldr	r3, [r7, #4]
 801f100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f104:	2b01      	cmp	r3, #1
 801f106:	d101      	bne.n	801f10c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f108:	2302      	movs	r3, #2
 801f10a:	e06f      	b.n	801f1ec <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 801f10c:	687b      	ldr	r3, [r7, #4]
 801f10e:	2201      	movs	r2, #1
 801f110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	2202      	movs	r2, #2
 801f118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f11c:	687b      	ldr	r3, [r7, #4]
 801f11e:	681b      	ldr	r3, [r3, #0]
 801f120:	685b      	ldr	r3, [r3, #4]
 801f122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	689b      	ldr	r3, [r3, #8]
 801f12a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f12c:	687b      	ldr	r3, [r7, #4]
 801f12e:	681b      	ldr	r3, [r3, #0]
 801f130:	4a31      	ldr	r2, [pc, #196]	; (801f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f132:	4293      	cmp	r3, r2
 801f134:	d009      	beq.n	801f14a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f136:	687b      	ldr	r3, [r7, #4]
 801f138:	681b      	ldr	r3, [r3, #0]
 801f13a:	4a30      	ldr	r2, [pc, #192]	; (801f1fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f13c:	4293      	cmp	r3, r2
 801f13e:	d004      	beq.n	801f14a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	4a2e      	ldr	r2, [pc, #184]	; (801f200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f146:	4293      	cmp	r3, r2
 801f148:	d108      	bne.n	801f15c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f14a:	68fb      	ldr	r3, [r7, #12]
 801f14c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801f150:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f152:	683b      	ldr	r3, [r7, #0]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	68fa      	ldr	r2, [r7, #12]
 801f158:	4313      	orrs	r3, r2
 801f15a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f15c:	68fb      	ldr	r3, [r7, #12]
 801f15e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 801f162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f166:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f168:	683b      	ldr	r3, [r7, #0]
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	68fa      	ldr	r2, [r7, #12]
 801f16e:	4313      	orrs	r3, r2
 801f170:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681b      	ldr	r3, [r3, #0]
 801f176:	68fa      	ldr	r2, [r7, #12]
 801f178:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	681b      	ldr	r3, [r3, #0]
 801f17e:	4a1e      	ldr	r2, [pc, #120]	; (801f1f8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f180:	4293      	cmp	r3, r2
 801f182:	d01d      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f18c:	d018      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	681b      	ldr	r3, [r3, #0]
 801f192:	4a1c      	ldr	r2, [pc, #112]	; (801f204 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f194:	4293      	cmp	r3, r2
 801f196:	d013      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	681b      	ldr	r3, [r3, #0]
 801f19c:	4a1a      	ldr	r2, [pc, #104]	; (801f208 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f19e:	4293      	cmp	r3, r2
 801f1a0:	d00e      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	681b      	ldr	r3, [r3, #0]
 801f1a6:	4a15      	ldr	r2, [pc, #84]	; (801f1fc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f1a8:	4293      	cmp	r3, r2
 801f1aa:	d009      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	4a16      	ldr	r2, [pc, #88]	; (801f20c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f1b2:	4293      	cmp	r3, r2
 801f1b4:	d004      	beq.n	801f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 801f1b6:	687b      	ldr	r3, [r7, #4]
 801f1b8:	681b      	ldr	r3, [r3, #0]
 801f1ba:	4a11      	ldr	r2, [pc, #68]	; (801f200 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f1bc:	4293      	cmp	r3, r2
 801f1be:	d10c      	bne.n	801f1da <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f1c0:	68bb      	ldr	r3, [r7, #8]
 801f1c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801f1c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f1c8:	683b      	ldr	r3, [r7, #0]
 801f1ca:	689b      	ldr	r3, [r3, #8]
 801f1cc:	68ba      	ldr	r2, [r7, #8]
 801f1ce:	4313      	orrs	r3, r2
 801f1d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	68ba      	ldr	r2, [r7, #8]
 801f1d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2201      	movs	r2, #1
 801f1de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	2200      	movs	r2, #0
 801f1e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f1ea:	2300      	movs	r3, #0
}
 801f1ec:	4618      	mov	r0, r3
 801f1ee:	3714      	adds	r7, #20
 801f1f0:	46bd      	mov	sp, r7
 801f1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f1f6:	4770      	bx	lr
 801f1f8:	40012c00 	.word	0x40012c00
 801f1fc:	40013400 	.word	0x40013400
 801f200:	40015000 	.word	0x40015000
 801f204:	40000400 	.word	0x40000400
 801f208:	40000800 	.word	0x40000800
 801f20c:	40014000 	.word	0x40014000

0801f210 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801f210:	b480      	push	{r7}
 801f212:	b085      	sub	sp, #20
 801f214:	af00      	add	r7, sp, #0
 801f216:	6078      	str	r0, [r7, #4]
 801f218:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 801f21a:	2300      	movs	r3, #0
 801f21c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 801f21e:	687b      	ldr	r3, [r7, #4]
 801f220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f224:	2b01      	cmp	r3, #1
 801f226:	d101      	bne.n	801f22c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 801f228:	2302      	movs	r3, #2
 801f22a:	e096      	b.n	801f35a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	2201      	movs	r2, #1
 801f230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801f234:	68fb      	ldr	r3, [r7, #12]
 801f236:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801f23a:	683b      	ldr	r3, [r7, #0]
 801f23c:	68db      	ldr	r3, [r3, #12]
 801f23e:	4313      	orrs	r3, r2
 801f240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801f248:	683b      	ldr	r3, [r7, #0]
 801f24a:	689b      	ldr	r3, [r3, #8]
 801f24c:	4313      	orrs	r3, r2
 801f24e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 801f250:	68fb      	ldr	r3, [r7, #12]
 801f252:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801f256:	683b      	ldr	r3, [r7, #0]
 801f258:	685b      	ldr	r3, [r3, #4]
 801f25a:	4313      	orrs	r3, r2
 801f25c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 801f25e:	68fb      	ldr	r3, [r7, #12]
 801f260:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801f264:	683b      	ldr	r3, [r7, #0]
 801f266:	681b      	ldr	r3, [r3, #0]
 801f268:	4313      	orrs	r3, r2
 801f26a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 801f26c:	68fb      	ldr	r3, [r7, #12]
 801f26e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801f272:	683b      	ldr	r3, [r7, #0]
 801f274:	691b      	ldr	r3, [r3, #16]
 801f276:	4313      	orrs	r3, r2
 801f278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 801f27a:	68fb      	ldr	r3, [r7, #12]
 801f27c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801f280:	683b      	ldr	r3, [r7, #0]
 801f282:	695b      	ldr	r3, [r3, #20]
 801f284:	4313      	orrs	r3, r2
 801f286:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801f28e:	683b      	ldr	r3, [r7, #0]
 801f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f292:	4313      	orrs	r3, r2
 801f294:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 801f296:	68fb      	ldr	r3, [r7, #12]
 801f298:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 801f29c:	683b      	ldr	r3, [r7, #0]
 801f29e:	699b      	ldr	r3, [r3, #24]
 801f2a0:	041b      	lsls	r3, r3, #16
 801f2a2:	4313      	orrs	r3, r2
 801f2a4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f2a6:	687b      	ldr	r3, [r7, #4]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	4a2f      	ldr	r2, [pc, #188]	; (801f368 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f2ac:	4293      	cmp	r3, r2
 801f2ae:	d009      	beq.n	801f2c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	4a2d      	ldr	r2, [pc, #180]	; (801f36c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f2b6:	4293      	cmp	r3, r2
 801f2b8:	d004      	beq.n	801f2c4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 801f2ba:	687b      	ldr	r3, [r7, #4]
 801f2bc:	681b      	ldr	r3, [r3, #0]
 801f2be:	4a2c      	ldr	r2, [pc, #176]	; (801f370 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f2c0:	4293      	cmp	r3, r2
 801f2c2:	d106      	bne.n	801f2d2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 801f2c4:	68fb      	ldr	r3, [r7, #12]
 801f2c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801f2ca:	683b      	ldr	r3, [r7, #0]
 801f2cc:	69db      	ldr	r3, [r3, #28]
 801f2ce:	4313      	orrs	r3, r2
 801f2d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 801f2d2:	687b      	ldr	r3, [r7, #4]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	4a24      	ldr	r2, [pc, #144]	; (801f368 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f2d8:	4293      	cmp	r3, r2
 801f2da:	d009      	beq.n	801f2f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f2dc:	687b      	ldr	r3, [r7, #4]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	4a22      	ldr	r2, [pc, #136]	; (801f36c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f2e2:	4293      	cmp	r3, r2
 801f2e4:	d004      	beq.n	801f2f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 801f2e6:	687b      	ldr	r3, [r7, #4]
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	4a21      	ldr	r2, [pc, #132]	; (801f370 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f2ec:	4293      	cmp	r3, r2
 801f2ee:	d12b      	bne.n	801f348 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 801f2f0:	68fb      	ldr	r3, [r7, #12]
 801f2f2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801f2f6:	683b      	ldr	r3, [r7, #0]
 801f2f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f2fa:	051b      	lsls	r3, r3, #20
 801f2fc:	4313      	orrs	r3, r2
 801f2fe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 801f300:	68fb      	ldr	r3, [r7, #12]
 801f302:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801f306:	683b      	ldr	r3, [r7, #0]
 801f308:	6a1b      	ldr	r3, [r3, #32]
 801f30a:	4313      	orrs	r3, r2
 801f30c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 801f30e:	68fb      	ldr	r3, [r7, #12]
 801f310:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801f314:	683b      	ldr	r3, [r7, #0]
 801f316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f318:	4313      	orrs	r3, r2
 801f31a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	4a11      	ldr	r2, [pc, #68]	; (801f368 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 801f322:	4293      	cmp	r3, r2
 801f324:	d009      	beq.n	801f33a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f326:	687b      	ldr	r3, [r7, #4]
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	4a10      	ldr	r2, [pc, #64]	; (801f36c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 801f32c:	4293      	cmp	r3, r2
 801f32e:	d004      	beq.n	801f33a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	4a0e      	ldr	r2, [pc, #56]	; (801f370 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 801f336:	4293      	cmp	r3, r2
 801f338:	d106      	bne.n	801f348 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 801f33a:	68fb      	ldr	r3, [r7, #12]
 801f33c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801f340:	683b      	ldr	r3, [r7, #0]
 801f342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f344:	4313      	orrs	r3, r2
 801f346:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 801f348:	687b      	ldr	r3, [r7, #4]
 801f34a:	681b      	ldr	r3, [r3, #0]
 801f34c:	68fa      	ldr	r2, [r7, #12]
 801f34e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801f350:	687b      	ldr	r3, [r7, #4]
 801f352:	2200      	movs	r2, #0
 801f354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f358:	2300      	movs	r3, #0
}
 801f35a:	4618      	mov	r0, r3
 801f35c:	3714      	adds	r7, #20
 801f35e:	46bd      	mov	sp, r7
 801f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f364:	4770      	bx	lr
 801f366:	bf00      	nop
 801f368:	40012c00 	.word	0x40012c00
 801f36c:	40013400 	.word	0x40013400
 801f370:	40015000 	.word	0x40015000

0801f374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801f374:	b480      	push	{r7}
 801f376:	b083      	sub	sp, #12
 801f378:	af00      	add	r7, sp, #0
 801f37a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801f37c:	bf00      	nop
 801f37e:	370c      	adds	r7, #12
 801f380:	46bd      	mov	sp, r7
 801f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f386:	4770      	bx	lr

0801f388 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 801f388:	b480      	push	{r7}
 801f38a:	b083      	sub	sp, #12
 801f38c:	af00      	add	r7, sp, #0
 801f38e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 801f390:	bf00      	nop
 801f392:	370c      	adds	r7, #12
 801f394:	46bd      	mov	sp, r7
 801f396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f39a:	4770      	bx	lr

0801f39c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801f39c:	b480      	push	{r7}
 801f39e:	b083      	sub	sp, #12
 801f3a0:	af00      	add	r7, sp, #0
 801f3a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801f3a4:	bf00      	nop
 801f3a6:	370c      	adds	r7, #12
 801f3a8:	46bd      	mov	sp, r7
 801f3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ae:	4770      	bx	lr

0801f3b0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 801f3b0:	b480      	push	{r7}
 801f3b2:	b083      	sub	sp, #12
 801f3b4:	af00      	add	r7, sp, #0
 801f3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 801f3b8:	bf00      	nop
 801f3ba:	370c      	adds	r7, #12
 801f3bc:	46bd      	mov	sp, r7
 801f3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3c2:	4770      	bx	lr

0801f3c4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 801f3c4:	b480      	push	{r7}
 801f3c6:	b083      	sub	sp, #12
 801f3c8:	af00      	add	r7, sp, #0
 801f3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 801f3cc:	bf00      	nop
 801f3ce:	370c      	adds	r7, #12
 801f3d0:	46bd      	mov	sp, r7
 801f3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3d6:	4770      	bx	lr

0801f3d8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 801f3d8:	b480      	push	{r7}
 801f3da:	b083      	sub	sp, #12
 801f3dc:	af00      	add	r7, sp, #0
 801f3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 801f3e0:	bf00      	nop
 801f3e2:	370c      	adds	r7, #12
 801f3e4:	46bd      	mov	sp, r7
 801f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3ea:	4770      	bx	lr

0801f3ec <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 801f3ec:	b480      	push	{r7}
 801f3ee:	b083      	sub	sp, #12
 801f3f0:	af00      	add	r7, sp, #0
 801f3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 801f3f4:	bf00      	nop
 801f3f6:	370c      	adds	r7, #12
 801f3f8:	46bd      	mov	sp, r7
 801f3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f3fe:	4770      	bx	lr

0801f400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f400:	b580      	push	{r7, lr}
 801f402:	b082      	sub	sp, #8
 801f404:	af00      	add	r7, sp, #0
 801f406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f408:	687b      	ldr	r3, [r7, #4]
 801f40a:	2b00      	cmp	r3, #0
 801f40c:	d101      	bne.n	801f412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f40e:	2301      	movs	r3, #1
 801f410:	e042      	b.n	801f498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f412:	687b      	ldr	r3, [r7, #4]
 801f414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d106      	bne.n	801f42a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	2200      	movs	r2, #0
 801f420:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f424:	6878      	ldr	r0, [r7, #4]
 801f426:	f7f9 fae3 	bl	80189f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	2224      	movs	r2, #36	; 0x24
 801f42e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801f432:	687b      	ldr	r3, [r7, #4]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	681a      	ldr	r2, [r3, #0]
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	f022 0201 	bic.w	r2, r2, #1
 801f440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f442:	6878      	ldr	r0, [r7, #4]
 801f444:	f000 f8c2 	bl	801f5cc <UART_SetConfig>
 801f448:	4603      	mov	r3, r0
 801f44a:	2b01      	cmp	r3, #1
 801f44c:	d101      	bne.n	801f452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801f44e:	2301      	movs	r3, #1
 801f450:	e022      	b.n	801f498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f456:	2b00      	cmp	r3, #0
 801f458:	d002      	beq.n	801f460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 801f45a:	6878      	ldr	r0, [r7, #4]
 801f45c:	f000 fbb2 	bl	801fbc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	685a      	ldr	r2, [r3, #4]
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801f46e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	689a      	ldr	r2, [r3, #8]
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801f47e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f480:	687b      	ldr	r3, [r7, #4]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	681a      	ldr	r2, [r3, #0]
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	681b      	ldr	r3, [r3, #0]
 801f48a:	f042 0201 	orr.w	r2, r2, #1
 801f48e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f490:	6878      	ldr	r0, [r7, #4]
 801f492:	f000 fc39 	bl	801fd08 <UART_CheckIdleState>
 801f496:	4603      	mov	r3, r0
}
 801f498:	4618      	mov	r0, r3
 801f49a:	3708      	adds	r7, #8
 801f49c:	46bd      	mov	sp, r7
 801f49e:	bd80      	pop	{r7, pc}

0801f4a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801f4a0:	b580      	push	{r7, lr}
 801f4a2:	b08a      	sub	sp, #40	; 0x28
 801f4a4:	af02      	add	r7, sp, #8
 801f4a6:	60f8      	str	r0, [r7, #12]
 801f4a8:	60b9      	str	r1, [r7, #8]
 801f4aa:	603b      	str	r3, [r7, #0]
 801f4ac:	4613      	mov	r3, r2
 801f4ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801f4b0:	68fb      	ldr	r3, [r7, #12]
 801f4b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801f4b6:	2b20      	cmp	r3, #32
 801f4b8:	f040 8083 	bne.w	801f5c2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 801f4bc:	68bb      	ldr	r3, [r7, #8]
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d002      	beq.n	801f4c8 <HAL_UART_Transmit+0x28>
 801f4c2:	88fb      	ldrh	r3, [r7, #6]
 801f4c4:	2b00      	cmp	r3, #0
 801f4c6:	d101      	bne.n	801f4cc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 801f4c8:	2301      	movs	r3, #1
 801f4ca:	e07b      	b.n	801f5c4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801f4d2:	2b01      	cmp	r3, #1
 801f4d4:	d101      	bne.n	801f4da <HAL_UART_Transmit+0x3a>
 801f4d6:	2302      	movs	r3, #2
 801f4d8:	e074      	b.n	801f5c4 <HAL_UART_Transmit+0x124>
 801f4da:	68fb      	ldr	r3, [r7, #12]
 801f4dc:	2201      	movs	r2, #1
 801f4de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	2200      	movs	r2, #0
 801f4e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801f4ea:	68fb      	ldr	r3, [r7, #12]
 801f4ec:	2221      	movs	r2, #33	; 0x21
 801f4ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801f4f2:	f7f9 fb6b 	bl	8018bcc <HAL_GetTick>
 801f4f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801f4f8:	68fb      	ldr	r3, [r7, #12]
 801f4fa:	88fa      	ldrh	r2, [r7, #6]
 801f4fc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 801f500:	68fb      	ldr	r3, [r7, #12]
 801f502:	88fa      	ldrh	r2, [r7, #6]
 801f504:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	689b      	ldr	r3, [r3, #8]
 801f50c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f510:	d108      	bne.n	801f524 <HAL_UART_Transmit+0x84>
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	691b      	ldr	r3, [r3, #16]
 801f516:	2b00      	cmp	r3, #0
 801f518:	d104      	bne.n	801f524 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 801f51a:	2300      	movs	r3, #0
 801f51c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801f51e:	68bb      	ldr	r3, [r7, #8]
 801f520:	61bb      	str	r3, [r7, #24]
 801f522:	e003      	b.n	801f52c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801f524:	68bb      	ldr	r3, [r7, #8]
 801f526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801f528:	2300      	movs	r3, #0
 801f52a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 801f52c:	68fb      	ldr	r3, [r7, #12]
 801f52e:	2200      	movs	r2, #0
 801f530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 801f534:	e02c      	b.n	801f590 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801f536:	683b      	ldr	r3, [r7, #0]
 801f538:	9300      	str	r3, [sp, #0]
 801f53a:	697b      	ldr	r3, [r7, #20]
 801f53c:	2200      	movs	r2, #0
 801f53e:	2180      	movs	r1, #128	; 0x80
 801f540:	68f8      	ldr	r0, [r7, #12]
 801f542:	f000 fc2c 	bl	801fd9e <UART_WaitOnFlagUntilTimeout>
 801f546:	4603      	mov	r3, r0
 801f548:	2b00      	cmp	r3, #0
 801f54a:	d001      	beq.n	801f550 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 801f54c:	2303      	movs	r3, #3
 801f54e:	e039      	b.n	801f5c4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801f550:	69fb      	ldr	r3, [r7, #28]
 801f552:	2b00      	cmp	r3, #0
 801f554:	d10b      	bne.n	801f56e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801f556:	69bb      	ldr	r3, [r7, #24]
 801f558:	881b      	ldrh	r3, [r3, #0]
 801f55a:	461a      	mov	r2, r3
 801f55c:	68fb      	ldr	r3, [r7, #12]
 801f55e:	681b      	ldr	r3, [r3, #0]
 801f560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801f564:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801f566:	69bb      	ldr	r3, [r7, #24]
 801f568:	3302      	adds	r3, #2
 801f56a:	61bb      	str	r3, [r7, #24]
 801f56c:	e007      	b.n	801f57e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801f56e:	69fb      	ldr	r3, [r7, #28]
 801f570:	781a      	ldrb	r2, [r3, #0]
 801f572:	68fb      	ldr	r3, [r7, #12]
 801f574:	681b      	ldr	r3, [r3, #0]
 801f576:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801f578:	69fb      	ldr	r3, [r7, #28]
 801f57a:	3301      	adds	r3, #1
 801f57c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f584:	b29b      	uxth	r3, r3
 801f586:	3b01      	subs	r3, #1
 801f588:	b29a      	uxth	r2, r3
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 801f596:	b29b      	uxth	r3, r3
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d1cc      	bne.n	801f536 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801f59c:	683b      	ldr	r3, [r7, #0]
 801f59e:	9300      	str	r3, [sp, #0]
 801f5a0:	697b      	ldr	r3, [r7, #20]
 801f5a2:	2200      	movs	r2, #0
 801f5a4:	2140      	movs	r1, #64	; 0x40
 801f5a6:	68f8      	ldr	r0, [r7, #12]
 801f5a8:	f000 fbf9 	bl	801fd9e <UART_WaitOnFlagUntilTimeout>
 801f5ac:	4603      	mov	r3, r0
 801f5ae:	2b00      	cmp	r3, #0
 801f5b0:	d001      	beq.n	801f5b6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801f5b2:	2303      	movs	r3, #3
 801f5b4:	e006      	b.n	801f5c4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801f5b6:	68fb      	ldr	r3, [r7, #12]
 801f5b8:	2220      	movs	r2, #32
 801f5ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801f5be:	2300      	movs	r3, #0
 801f5c0:	e000      	b.n	801f5c4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 801f5c2:	2302      	movs	r3, #2
  }
}
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	3720      	adds	r7, #32
 801f5c8:	46bd      	mov	sp, r7
 801f5ca:	bd80      	pop	{r7, pc}

0801f5cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f5cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f5d0:	b08c      	sub	sp, #48	; 0x30
 801f5d2:	af00      	add	r7, sp, #0
 801f5d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f5d6:	2300      	movs	r3, #0
 801f5d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f5dc:	697b      	ldr	r3, [r7, #20]
 801f5de:	689a      	ldr	r2, [r3, #8]
 801f5e0:	697b      	ldr	r3, [r7, #20]
 801f5e2:	691b      	ldr	r3, [r3, #16]
 801f5e4:	431a      	orrs	r2, r3
 801f5e6:	697b      	ldr	r3, [r7, #20]
 801f5e8:	695b      	ldr	r3, [r3, #20]
 801f5ea:	431a      	orrs	r2, r3
 801f5ec:	697b      	ldr	r3, [r7, #20]
 801f5ee:	69db      	ldr	r3, [r3, #28]
 801f5f0:	4313      	orrs	r3, r2
 801f5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f5f4:	697b      	ldr	r3, [r7, #20]
 801f5f6:	681b      	ldr	r3, [r3, #0]
 801f5f8:	681a      	ldr	r2, [r3, #0]
 801f5fa:	4baa      	ldr	r3, [pc, #680]	; (801f8a4 <UART_SetConfig+0x2d8>)
 801f5fc:	4013      	ands	r3, r2
 801f5fe:	697a      	ldr	r2, [r7, #20]
 801f600:	6812      	ldr	r2, [r2, #0]
 801f602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f604:	430b      	orrs	r3, r1
 801f606:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f608:	697b      	ldr	r3, [r7, #20]
 801f60a:	681b      	ldr	r3, [r3, #0]
 801f60c:	685b      	ldr	r3, [r3, #4]
 801f60e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f612:	697b      	ldr	r3, [r7, #20]
 801f614:	68da      	ldr	r2, [r3, #12]
 801f616:	697b      	ldr	r3, [r7, #20]
 801f618:	681b      	ldr	r3, [r3, #0]
 801f61a:	430a      	orrs	r2, r1
 801f61c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f61e:	697b      	ldr	r3, [r7, #20]
 801f620:	699b      	ldr	r3, [r3, #24]
 801f622:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f624:	697b      	ldr	r3, [r7, #20]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	4a9f      	ldr	r2, [pc, #636]	; (801f8a8 <UART_SetConfig+0x2dc>)
 801f62a:	4293      	cmp	r3, r2
 801f62c:	d004      	beq.n	801f638 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f62e:	697b      	ldr	r3, [r7, #20]
 801f630:	6a1b      	ldr	r3, [r3, #32]
 801f632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f634:	4313      	orrs	r3, r2
 801f636:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f638:	697b      	ldr	r3, [r7, #20]
 801f63a:	681b      	ldr	r3, [r3, #0]
 801f63c:	689b      	ldr	r3, [r3, #8]
 801f63e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801f642:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 801f646:	697a      	ldr	r2, [r7, #20]
 801f648:	6812      	ldr	r2, [r2, #0]
 801f64a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f64c:	430b      	orrs	r3, r1
 801f64e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f650:	697b      	ldr	r3, [r7, #20]
 801f652:	681b      	ldr	r3, [r3, #0]
 801f654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f656:	f023 010f 	bic.w	r1, r3, #15
 801f65a:	697b      	ldr	r3, [r7, #20]
 801f65c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801f65e:	697b      	ldr	r3, [r7, #20]
 801f660:	681b      	ldr	r3, [r3, #0]
 801f662:	430a      	orrs	r2, r1
 801f664:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f666:	697b      	ldr	r3, [r7, #20]
 801f668:	681b      	ldr	r3, [r3, #0]
 801f66a:	4a90      	ldr	r2, [pc, #576]	; (801f8ac <UART_SetConfig+0x2e0>)
 801f66c:	4293      	cmp	r3, r2
 801f66e:	d125      	bne.n	801f6bc <UART_SetConfig+0xf0>
 801f670:	4b8f      	ldr	r3, [pc, #572]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f676:	f003 0303 	and.w	r3, r3, #3
 801f67a:	2b03      	cmp	r3, #3
 801f67c:	d81a      	bhi.n	801f6b4 <UART_SetConfig+0xe8>
 801f67e:	a201      	add	r2, pc, #4	; (adr r2, 801f684 <UART_SetConfig+0xb8>)
 801f680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f684:	0801f695 	.word	0x0801f695
 801f688:	0801f6a5 	.word	0x0801f6a5
 801f68c:	0801f69d 	.word	0x0801f69d
 801f690:	0801f6ad 	.word	0x0801f6ad
 801f694:	2301      	movs	r3, #1
 801f696:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f69a:	e116      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f69c:	2302      	movs	r3, #2
 801f69e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6a2:	e112      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f6a4:	2304      	movs	r3, #4
 801f6a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6aa:	e10e      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f6ac:	2308      	movs	r3, #8
 801f6ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6b2:	e10a      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f6b4:	2310      	movs	r3, #16
 801f6b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f6ba:	e106      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f6bc:	697b      	ldr	r3, [r7, #20]
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	4a7c      	ldr	r2, [pc, #496]	; (801f8b4 <UART_SetConfig+0x2e8>)
 801f6c2:	4293      	cmp	r3, r2
 801f6c4:	d138      	bne.n	801f738 <UART_SetConfig+0x16c>
 801f6c6:	4b7a      	ldr	r3, [pc, #488]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f6cc:	f003 030c 	and.w	r3, r3, #12
 801f6d0:	2b0c      	cmp	r3, #12
 801f6d2:	d82d      	bhi.n	801f730 <UART_SetConfig+0x164>
 801f6d4:	a201      	add	r2, pc, #4	; (adr r2, 801f6dc <UART_SetConfig+0x110>)
 801f6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6da:	bf00      	nop
 801f6dc:	0801f711 	.word	0x0801f711
 801f6e0:	0801f731 	.word	0x0801f731
 801f6e4:	0801f731 	.word	0x0801f731
 801f6e8:	0801f731 	.word	0x0801f731
 801f6ec:	0801f721 	.word	0x0801f721
 801f6f0:	0801f731 	.word	0x0801f731
 801f6f4:	0801f731 	.word	0x0801f731
 801f6f8:	0801f731 	.word	0x0801f731
 801f6fc:	0801f719 	.word	0x0801f719
 801f700:	0801f731 	.word	0x0801f731
 801f704:	0801f731 	.word	0x0801f731
 801f708:	0801f731 	.word	0x0801f731
 801f70c:	0801f729 	.word	0x0801f729
 801f710:	2300      	movs	r3, #0
 801f712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f716:	e0d8      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f718:	2302      	movs	r3, #2
 801f71a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f71e:	e0d4      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f720:	2304      	movs	r3, #4
 801f722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f726:	e0d0      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f728:	2308      	movs	r3, #8
 801f72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f72e:	e0cc      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f730:	2310      	movs	r3, #16
 801f732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f736:	e0c8      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f738:	697b      	ldr	r3, [r7, #20]
 801f73a:	681b      	ldr	r3, [r3, #0]
 801f73c:	4a5e      	ldr	r2, [pc, #376]	; (801f8b8 <UART_SetConfig+0x2ec>)
 801f73e:	4293      	cmp	r3, r2
 801f740:	d125      	bne.n	801f78e <UART_SetConfig+0x1c2>
 801f742:	4b5b      	ldr	r3, [pc, #364]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f748:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f74c:	2b30      	cmp	r3, #48	; 0x30
 801f74e:	d016      	beq.n	801f77e <UART_SetConfig+0x1b2>
 801f750:	2b30      	cmp	r3, #48	; 0x30
 801f752:	d818      	bhi.n	801f786 <UART_SetConfig+0x1ba>
 801f754:	2b20      	cmp	r3, #32
 801f756:	d00a      	beq.n	801f76e <UART_SetConfig+0x1a2>
 801f758:	2b20      	cmp	r3, #32
 801f75a:	d814      	bhi.n	801f786 <UART_SetConfig+0x1ba>
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d002      	beq.n	801f766 <UART_SetConfig+0x19a>
 801f760:	2b10      	cmp	r3, #16
 801f762:	d008      	beq.n	801f776 <UART_SetConfig+0x1aa>
 801f764:	e00f      	b.n	801f786 <UART_SetConfig+0x1ba>
 801f766:	2300      	movs	r3, #0
 801f768:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f76c:	e0ad      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f76e:	2302      	movs	r3, #2
 801f770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f774:	e0a9      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f776:	2304      	movs	r3, #4
 801f778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f77c:	e0a5      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f77e:	2308      	movs	r3, #8
 801f780:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f784:	e0a1      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f786:	2310      	movs	r3, #16
 801f788:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f78c:	e09d      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f78e:	697b      	ldr	r3, [r7, #20]
 801f790:	681b      	ldr	r3, [r3, #0]
 801f792:	4a4a      	ldr	r2, [pc, #296]	; (801f8bc <UART_SetConfig+0x2f0>)
 801f794:	4293      	cmp	r3, r2
 801f796:	d125      	bne.n	801f7e4 <UART_SetConfig+0x218>
 801f798:	4b45      	ldr	r3, [pc, #276]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f79a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f79e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f7a2:	2bc0      	cmp	r3, #192	; 0xc0
 801f7a4:	d016      	beq.n	801f7d4 <UART_SetConfig+0x208>
 801f7a6:	2bc0      	cmp	r3, #192	; 0xc0
 801f7a8:	d818      	bhi.n	801f7dc <UART_SetConfig+0x210>
 801f7aa:	2b80      	cmp	r3, #128	; 0x80
 801f7ac:	d00a      	beq.n	801f7c4 <UART_SetConfig+0x1f8>
 801f7ae:	2b80      	cmp	r3, #128	; 0x80
 801f7b0:	d814      	bhi.n	801f7dc <UART_SetConfig+0x210>
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	d002      	beq.n	801f7bc <UART_SetConfig+0x1f0>
 801f7b6:	2b40      	cmp	r3, #64	; 0x40
 801f7b8:	d008      	beq.n	801f7cc <UART_SetConfig+0x200>
 801f7ba:	e00f      	b.n	801f7dc <UART_SetConfig+0x210>
 801f7bc:	2300      	movs	r3, #0
 801f7be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7c2:	e082      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f7c4:	2302      	movs	r3, #2
 801f7c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7ca:	e07e      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f7cc:	2304      	movs	r3, #4
 801f7ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7d2:	e07a      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f7d4:	2308      	movs	r3, #8
 801f7d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7da:	e076      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f7dc:	2310      	movs	r3, #16
 801f7de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f7e2:	e072      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f7e4:	697b      	ldr	r3, [r7, #20]
 801f7e6:	681b      	ldr	r3, [r3, #0]
 801f7e8:	4a35      	ldr	r2, [pc, #212]	; (801f8c0 <UART_SetConfig+0x2f4>)
 801f7ea:	4293      	cmp	r3, r2
 801f7ec:	d12a      	bne.n	801f844 <UART_SetConfig+0x278>
 801f7ee:	4b30      	ldr	r3, [pc, #192]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f7f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f7f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f7f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f7fc:	d01a      	beq.n	801f834 <UART_SetConfig+0x268>
 801f7fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f802:	d81b      	bhi.n	801f83c <UART_SetConfig+0x270>
 801f804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f808:	d00c      	beq.n	801f824 <UART_SetConfig+0x258>
 801f80a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f80e:	d815      	bhi.n	801f83c <UART_SetConfig+0x270>
 801f810:	2b00      	cmp	r3, #0
 801f812:	d003      	beq.n	801f81c <UART_SetConfig+0x250>
 801f814:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f818:	d008      	beq.n	801f82c <UART_SetConfig+0x260>
 801f81a:	e00f      	b.n	801f83c <UART_SetConfig+0x270>
 801f81c:	2300      	movs	r3, #0
 801f81e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f822:	e052      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f824:	2302      	movs	r3, #2
 801f826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f82a:	e04e      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f82c:	2304      	movs	r3, #4
 801f82e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f832:	e04a      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f834:	2308      	movs	r3, #8
 801f836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f83a:	e046      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f83c:	2310      	movs	r3, #16
 801f83e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f842:	e042      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f844:	697b      	ldr	r3, [r7, #20]
 801f846:	681b      	ldr	r3, [r3, #0]
 801f848:	4a17      	ldr	r2, [pc, #92]	; (801f8a8 <UART_SetConfig+0x2dc>)
 801f84a:	4293      	cmp	r3, r2
 801f84c:	d13a      	bne.n	801f8c4 <UART_SetConfig+0x2f8>
 801f84e:	4b18      	ldr	r3, [pc, #96]	; (801f8b0 <UART_SetConfig+0x2e4>)
 801f850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801f854:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f858:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f85c:	d01a      	beq.n	801f894 <UART_SetConfig+0x2c8>
 801f85e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f862:	d81b      	bhi.n	801f89c <UART_SetConfig+0x2d0>
 801f864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f868:	d00c      	beq.n	801f884 <UART_SetConfig+0x2b8>
 801f86a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f86e:	d815      	bhi.n	801f89c <UART_SetConfig+0x2d0>
 801f870:	2b00      	cmp	r3, #0
 801f872:	d003      	beq.n	801f87c <UART_SetConfig+0x2b0>
 801f874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f878:	d008      	beq.n	801f88c <UART_SetConfig+0x2c0>
 801f87a:	e00f      	b.n	801f89c <UART_SetConfig+0x2d0>
 801f87c:	2300      	movs	r3, #0
 801f87e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f882:	e022      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f884:	2302      	movs	r3, #2
 801f886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f88a:	e01e      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f88c:	2304      	movs	r3, #4
 801f88e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f892:	e01a      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f894:	2308      	movs	r3, #8
 801f896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f89a:	e016      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f89c:	2310      	movs	r3, #16
 801f89e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801f8a2:	e012      	b.n	801f8ca <UART_SetConfig+0x2fe>
 801f8a4:	cfff69f3 	.word	0xcfff69f3
 801f8a8:	40008000 	.word	0x40008000
 801f8ac:	40013800 	.word	0x40013800
 801f8b0:	40021000 	.word	0x40021000
 801f8b4:	40004400 	.word	0x40004400
 801f8b8:	40004800 	.word	0x40004800
 801f8bc:	40004c00 	.word	0x40004c00
 801f8c0:	40005000 	.word	0x40005000
 801f8c4:	2310      	movs	r3, #16
 801f8c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f8ca:	697b      	ldr	r3, [r7, #20]
 801f8cc:	681b      	ldr	r3, [r3, #0]
 801f8ce:	4aae      	ldr	r2, [pc, #696]	; (801fb88 <UART_SetConfig+0x5bc>)
 801f8d0:	4293      	cmp	r3, r2
 801f8d2:	f040 8097 	bne.w	801fa04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f8d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801f8da:	2b08      	cmp	r3, #8
 801f8dc:	d823      	bhi.n	801f926 <UART_SetConfig+0x35a>
 801f8de:	a201      	add	r2, pc, #4	; (adr r2, 801f8e4 <UART_SetConfig+0x318>)
 801f8e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f8e4:	0801f909 	.word	0x0801f909
 801f8e8:	0801f927 	.word	0x0801f927
 801f8ec:	0801f911 	.word	0x0801f911
 801f8f0:	0801f927 	.word	0x0801f927
 801f8f4:	0801f917 	.word	0x0801f917
 801f8f8:	0801f927 	.word	0x0801f927
 801f8fc:	0801f927 	.word	0x0801f927
 801f900:	0801f927 	.word	0x0801f927
 801f904:	0801f91f 	.word	0x0801f91f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f908:	f7fd f8b4 	bl	801ca74 <HAL_RCC_GetPCLK1Freq>
 801f90c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f90e:	e010      	b.n	801f932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f910:	4b9e      	ldr	r3, [pc, #632]	; (801fb8c <UART_SetConfig+0x5c0>)
 801f912:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f914:	e00d      	b.n	801f932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f916:	f7fd f841 	bl	801c99c <HAL_RCC_GetSysClockFreq>
 801f91a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801f91c:	e009      	b.n	801f932 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f91e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f922:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801f924:	e005      	b.n	801f932 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 801f926:	2300      	movs	r3, #0
 801f928:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801f92a:	2301      	movs	r3, #1
 801f92c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801f930:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f934:	2b00      	cmp	r3, #0
 801f936:	f000 8130 	beq.w	801fb9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f93a:	697b      	ldr	r3, [r7, #20]
 801f93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f93e:	4a94      	ldr	r2, [pc, #592]	; (801fb90 <UART_SetConfig+0x5c4>)
 801f940:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f944:	461a      	mov	r2, r3
 801f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f948:	fbb3 f3f2 	udiv	r3, r3, r2
 801f94c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f94e:	697b      	ldr	r3, [r7, #20]
 801f950:	685a      	ldr	r2, [r3, #4]
 801f952:	4613      	mov	r3, r2
 801f954:	005b      	lsls	r3, r3, #1
 801f956:	4413      	add	r3, r2
 801f958:	69ba      	ldr	r2, [r7, #24]
 801f95a:	429a      	cmp	r2, r3
 801f95c:	d305      	bcc.n	801f96a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f95e:	697b      	ldr	r3, [r7, #20]
 801f960:	685b      	ldr	r3, [r3, #4]
 801f962:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f964:	69ba      	ldr	r2, [r7, #24]
 801f966:	429a      	cmp	r2, r3
 801f968:	d903      	bls.n	801f972 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 801f96a:	2301      	movs	r3, #1
 801f96c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801f970:	e113      	b.n	801fb9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f974:	2200      	movs	r2, #0
 801f976:	60bb      	str	r3, [r7, #8]
 801f978:	60fa      	str	r2, [r7, #12]
 801f97a:	697b      	ldr	r3, [r7, #20]
 801f97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f97e:	4a84      	ldr	r2, [pc, #528]	; (801fb90 <UART_SetConfig+0x5c4>)
 801f980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f984:	b29b      	uxth	r3, r3
 801f986:	2200      	movs	r2, #0
 801f988:	603b      	str	r3, [r7, #0]
 801f98a:	607a      	str	r2, [r7, #4]
 801f98c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f990:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f994:	f7e1 f980 	bl	8000c98 <__aeabi_uldivmod>
 801f998:	4602      	mov	r2, r0
 801f99a:	460b      	mov	r3, r1
 801f99c:	4610      	mov	r0, r2
 801f99e:	4619      	mov	r1, r3
 801f9a0:	f04f 0200 	mov.w	r2, #0
 801f9a4:	f04f 0300 	mov.w	r3, #0
 801f9a8:	020b      	lsls	r3, r1, #8
 801f9aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f9ae:	0202      	lsls	r2, r0, #8
 801f9b0:	6979      	ldr	r1, [r7, #20]
 801f9b2:	6849      	ldr	r1, [r1, #4]
 801f9b4:	0849      	lsrs	r1, r1, #1
 801f9b6:	2000      	movs	r0, #0
 801f9b8:	460c      	mov	r4, r1
 801f9ba:	4605      	mov	r5, r0
 801f9bc:	eb12 0804 	adds.w	r8, r2, r4
 801f9c0:	eb43 0905 	adc.w	r9, r3, r5
 801f9c4:	697b      	ldr	r3, [r7, #20]
 801f9c6:	685b      	ldr	r3, [r3, #4]
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	469a      	mov	sl, r3
 801f9cc:	4693      	mov	fp, r2
 801f9ce:	4652      	mov	r2, sl
 801f9d0:	465b      	mov	r3, fp
 801f9d2:	4640      	mov	r0, r8
 801f9d4:	4649      	mov	r1, r9
 801f9d6:	f7e1 f95f 	bl	8000c98 <__aeabi_uldivmod>
 801f9da:	4602      	mov	r2, r0
 801f9dc:	460b      	mov	r3, r1
 801f9de:	4613      	mov	r3, r2
 801f9e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f9e2:	6a3b      	ldr	r3, [r7, #32]
 801f9e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f9e8:	d308      	bcc.n	801f9fc <UART_SetConfig+0x430>
 801f9ea:	6a3b      	ldr	r3, [r7, #32]
 801f9ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f9f0:	d204      	bcs.n	801f9fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 801f9f2:	697b      	ldr	r3, [r7, #20]
 801f9f4:	681b      	ldr	r3, [r3, #0]
 801f9f6:	6a3a      	ldr	r2, [r7, #32]
 801f9f8:	60da      	str	r2, [r3, #12]
 801f9fa:	e0ce      	b.n	801fb9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 801f9fc:	2301      	movs	r3, #1
 801f9fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fa02:	e0ca      	b.n	801fb9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801fa04:	697b      	ldr	r3, [r7, #20]
 801fa06:	69db      	ldr	r3, [r3, #28]
 801fa08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801fa0c:	d166      	bne.n	801fadc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 801fa0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fa12:	2b08      	cmp	r3, #8
 801fa14:	d827      	bhi.n	801fa66 <UART_SetConfig+0x49a>
 801fa16:	a201      	add	r2, pc, #4	; (adr r2, 801fa1c <UART_SetConfig+0x450>)
 801fa18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fa1c:	0801fa41 	.word	0x0801fa41
 801fa20:	0801fa49 	.word	0x0801fa49
 801fa24:	0801fa51 	.word	0x0801fa51
 801fa28:	0801fa67 	.word	0x0801fa67
 801fa2c:	0801fa57 	.word	0x0801fa57
 801fa30:	0801fa67 	.word	0x0801fa67
 801fa34:	0801fa67 	.word	0x0801fa67
 801fa38:	0801fa67 	.word	0x0801fa67
 801fa3c:	0801fa5f 	.word	0x0801fa5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fa40:	f7fd f818 	bl	801ca74 <HAL_RCC_GetPCLK1Freq>
 801fa44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa46:	e014      	b.n	801fa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fa48:	f7fd f82a 	bl	801caa0 <HAL_RCC_GetPCLK2Freq>
 801fa4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa4e:	e010      	b.n	801fa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fa50:	4b4e      	ldr	r3, [pc, #312]	; (801fb8c <UART_SetConfig+0x5c0>)
 801fa52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa54:	e00d      	b.n	801fa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fa56:	f7fc ffa1 	bl	801c99c <HAL_RCC_GetSysClockFreq>
 801fa5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fa5c:	e009      	b.n	801fa72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fa5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fa62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fa64:	e005      	b.n	801fa72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 801fa66:	2300      	movs	r3, #0
 801fa68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fa6a:	2301      	movs	r3, #1
 801fa6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fa70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fa72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa74:	2b00      	cmp	r3, #0
 801fa76:	f000 8090 	beq.w	801fb9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fa7a:	697b      	ldr	r3, [r7, #20]
 801fa7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fa7e:	4a44      	ldr	r2, [pc, #272]	; (801fb90 <UART_SetConfig+0x5c4>)
 801fa80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fa84:	461a      	mov	r2, r3
 801fa86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fa88:	fbb3 f3f2 	udiv	r3, r3, r2
 801fa8c:	005a      	lsls	r2, r3, #1
 801fa8e:	697b      	ldr	r3, [r7, #20]
 801fa90:	685b      	ldr	r3, [r3, #4]
 801fa92:	085b      	lsrs	r3, r3, #1
 801fa94:	441a      	add	r2, r3
 801fa96:	697b      	ldr	r3, [r7, #20]
 801fa98:	685b      	ldr	r3, [r3, #4]
 801fa9a:	fbb2 f3f3 	udiv	r3, r2, r3
 801fa9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801faa0:	6a3b      	ldr	r3, [r7, #32]
 801faa2:	2b0f      	cmp	r3, #15
 801faa4:	d916      	bls.n	801fad4 <UART_SetConfig+0x508>
 801faa6:	6a3b      	ldr	r3, [r7, #32]
 801faa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801faac:	d212      	bcs.n	801fad4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801faae:	6a3b      	ldr	r3, [r7, #32]
 801fab0:	b29b      	uxth	r3, r3
 801fab2:	f023 030f 	bic.w	r3, r3, #15
 801fab6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fab8:	6a3b      	ldr	r3, [r7, #32]
 801faba:	085b      	lsrs	r3, r3, #1
 801fabc:	b29b      	uxth	r3, r3
 801fabe:	f003 0307 	and.w	r3, r3, #7
 801fac2:	b29a      	uxth	r2, r3
 801fac4:	8bfb      	ldrh	r3, [r7, #30]
 801fac6:	4313      	orrs	r3, r2
 801fac8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 801faca:	697b      	ldr	r3, [r7, #20]
 801facc:	681b      	ldr	r3, [r3, #0]
 801face:	8bfa      	ldrh	r2, [r7, #30]
 801fad0:	60da      	str	r2, [r3, #12]
 801fad2:	e062      	b.n	801fb9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 801fad4:	2301      	movs	r3, #1
 801fad6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801fada:	e05e      	b.n	801fb9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 801fadc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801fae0:	2b08      	cmp	r3, #8
 801fae2:	d828      	bhi.n	801fb36 <UART_SetConfig+0x56a>
 801fae4:	a201      	add	r2, pc, #4	; (adr r2, 801faec <UART_SetConfig+0x520>)
 801fae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801faea:	bf00      	nop
 801faec:	0801fb11 	.word	0x0801fb11
 801faf0:	0801fb19 	.word	0x0801fb19
 801faf4:	0801fb21 	.word	0x0801fb21
 801faf8:	0801fb37 	.word	0x0801fb37
 801fafc:	0801fb27 	.word	0x0801fb27
 801fb00:	0801fb37 	.word	0x0801fb37
 801fb04:	0801fb37 	.word	0x0801fb37
 801fb08:	0801fb37 	.word	0x0801fb37
 801fb0c:	0801fb2f 	.word	0x0801fb2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fb10:	f7fc ffb0 	bl	801ca74 <HAL_RCC_GetPCLK1Freq>
 801fb14:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb16:	e014      	b.n	801fb42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fb18:	f7fc ffc2 	bl	801caa0 <HAL_RCC_GetPCLK2Freq>
 801fb1c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb1e:	e010      	b.n	801fb42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801fb20:	4b1a      	ldr	r3, [pc, #104]	; (801fb8c <UART_SetConfig+0x5c0>)
 801fb22:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fb24:	e00d      	b.n	801fb42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801fb26:	f7fc ff39 	bl	801c99c <HAL_RCC_GetSysClockFreq>
 801fb2a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801fb2c:	e009      	b.n	801fb42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fb2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801fb32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801fb34:	e005      	b.n	801fb42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 801fb36:	2300      	movs	r3, #0
 801fb38:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 801fb3a:	2301      	movs	r3, #1
 801fb3c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801fb40:	bf00      	nop
    }

    if (pclk != 0U)
 801fb42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb44:	2b00      	cmp	r3, #0
 801fb46:	d028      	beq.n	801fb9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fb48:	697b      	ldr	r3, [r7, #20]
 801fb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fb4c:	4a10      	ldr	r2, [pc, #64]	; (801fb90 <UART_SetConfig+0x5c4>)
 801fb4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fb52:	461a      	mov	r2, r3
 801fb54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb56:	fbb3 f2f2 	udiv	r2, r3, r2
 801fb5a:	697b      	ldr	r3, [r7, #20]
 801fb5c:	685b      	ldr	r3, [r3, #4]
 801fb5e:	085b      	lsrs	r3, r3, #1
 801fb60:	441a      	add	r2, r3
 801fb62:	697b      	ldr	r3, [r7, #20]
 801fb64:	685b      	ldr	r3, [r3, #4]
 801fb66:	fbb2 f3f3 	udiv	r3, r2, r3
 801fb6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fb6c:	6a3b      	ldr	r3, [r7, #32]
 801fb6e:	2b0f      	cmp	r3, #15
 801fb70:	d910      	bls.n	801fb94 <UART_SetConfig+0x5c8>
 801fb72:	6a3b      	ldr	r3, [r7, #32]
 801fb74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801fb78:	d20c      	bcs.n	801fb94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fb7a:	6a3b      	ldr	r3, [r7, #32]
 801fb7c:	b29a      	uxth	r2, r3
 801fb7e:	697b      	ldr	r3, [r7, #20]
 801fb80:	681b      	ldr	r3, [r3, #0]
 801fb82:	60da      	str	r2, [r3, #12]
 801fb84:	e009      	b.n	801fb9a <UART_SetConfig+0x5ce>
 801fb86:	bf00      	nop
 801fb88:	40008000 	.word	0x40008000
 801fb8c:	00f42400 	.word	0x00f42400
 801fb90:	080235b8 	.word	0x080235b8
      }
      else
      {
        ret = HAL_ERROR;
 801fb94:	2301      	movs	r3, #1
 801fb96:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fb9a:	697b      	ldr	r3, [r7, #20]
 801fb9c:	2201      	movs	r2, #1
 801fb9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801fba2:	697b      	ldr	r3, [r7, #20]
 801fba4:	2201      	movs	r2, #1
 801fba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fbaa:	697b      	ldr	r3, [r7, #20]
 801fbac:	2200      	movs	r2, #0
 801fbae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801fbb0:	697b      	ldr	r3, [r7, #20]
 801fbb2:	2200      	movs	r2, #0
 801fbb4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 801fbb6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 801fbba:	4618      	mov	r0, r3
 801fbbc:	3730      	adds	r7, #48	; 0x30
 801fbbe:	46bd      	mov	sp, r7
 801fbc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0801fbc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fbc4:	b480      	push	{r7}
 801fbc6:	b083      	sub	sp, #12
 801fbc8:	af00      	add	r7, sp, #0
 801fbca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fbcc:	687b      	ldr	r3, [r7, #4]
 801fbce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fbd0:	f003 0301 	and.w	r3, r3, #1
 801fbd4:	2b00      	cmp	r3, #0
 801fbd6:	d00a      	beq.n	801fbee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fbd8:	687b      	ldr	r3, [r7, #4]
 801fbda:	681b      	ldr	r3, [r3, #0]
 801fbdc:	685b      	ldr	r3, [r3, #4]
 801fbde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	430a      	orrs	r2, r1
 801fbec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fbee:	687b      	ldr	r3, [r7, #4]
 801fbf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fbf2:	f003 0302 	and.w	r3, r3, #2
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d00a      	beq.n	801fc10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fbfa:	687b      	ldr	r3, [r7, #4]
 801fbfc:	681b      	ldr	r3, [r3, #0]
 801fbfe:	685b      	ldr	r3, [r3, #4]
 801fc00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801fc04:	687b      	ldr	r3, [r7, #4]
 801fc06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	681b      	ldr	r3, [r3, #0]
 801fc0c:	430a      	orrs	r2, r1
 801fc0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc14:	f003 0304 	and.w	r3, r3, #4
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	d00a      	beq.n	801fc32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fc1c:	687b      	ldr	r3, [r7, #4]
 801fc1e:	681b      	ldr	r3, [r3, #0]
 801fc20:	685b      	ldr	r3, [r3, #4]
 801fc22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801fc26:	687b      	ldr	r3, [r7, #4]
 801fc28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	681b      	ldr	r3, [r3, #0]
 801fc2e:	430a      	orrs	r2, r1
 801fc30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fc32:	687b      	ldr	r3, [r7, #4]
 801fc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc36:	f003 0308 	and.w	r3, r3, #8
 801fc3a:	2b00      	cmp	r3, #0
 801fc3c:	d00a      	beq.n	801fc54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	681b      	ldr	r3, [r3, #0]
 801fc42:	685b      	ldr	r3, [r3, #4]
 801fc44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801fc48:	687b      	ldr	r3, [r7, #4]
 801fc4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	430a      	orrs	r2, r1
 801fc52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fc54:	687b      	ldr	r3, [r7, #4]
 801fc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc58:	f003 0310 	and.w	r3, r3, #16
 801fc5c:	2b00      	cmp	r3, #0
 801fc5e:	d00a      	beq.n	801fc76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fc60:	687b      	ldr	r3, [r7, #4]
 801fc62:	681b      	ldr	r3, [r3, #0]
 801fc64:	689b      	ldr	r3, [r3, #8]
 801fc66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801fc6a:	687b      	ldr	r3, [r7, #4]
 801fc6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801fc6e:	687b      	ldr	r3, [r7, #4]
 801fc70:	681b      	ldr	r3, [r3, #0]
 801fc72:	430a      	orrs	r2, r1
 801fc74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc7a:	f003 0320 	and.w	r3, r3, #32
 801fc7e:	2b00      	cmp	r3, #0
 801fc80:	d00a      	beq.n	801fc98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	681b      	ldr	r3, [r3, #0]
 801fc86:	689b      	ldr	r3, [r3, #8]
 801fc88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	430a      	orrs	r2, r1
 801fc96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fc9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d01a      	beq.n	801fcda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	681b      	ldr	r3, [r3, #0]
 801fca8:	685b      	ldr	r3, [r3, #4]
 801fcaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801fcb2:	687b      	ldr	r3, [r7, #4]
 801fcb4:	681b      	ldr	r3, [r3, #0]
 801fcb6:	430a      	orrs	r2, r1
 801fcb8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fcba:	687b      	ldr	r3, [r7, #4]
 801fcbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801fcbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801fcc2:	d10a      	bne.n	801fcda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	681b      	ldr	r3, [r3, #0]
 801fcc8:	685b      	ldr	r3, [r3, #4]
 801fcca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	430a      	orrs	r2, r1
 801fcd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fcde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801fce2:	2b00      	cmp	r3, #0
 801fce4:	d00a      	beq.n	801fcfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fce6:	687b      	ldr	r3, [r7, #4]
 801fce8:	681b      	ldr	r3, [r3, #0]
 801fcea:	685b      	ldr	r3, [r3, #4]
 801fcec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	681b      	ldr	r3, [r3, #0]
 801fcf8:	430a      	orrs	r2, r1
 801fcfa:	605a      	str	r2, [r3, #4]
  }
}
 801fcfc:	bf00      	nop
 801fcfe:	370c      	adds	r7, #12
 801fd00:	46bd      	mov	sp, r7
 801fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd06:	4770      	bx	lr

0801fd08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fd08:	b580      	push	{r7, lr}
 801fd0a:	b086      	sub	sp, #24
 801fd0c:	af02      	add	r7, sp, #8
 801fd0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2200      	movs	r2, #0
 801fd14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fd18:	f7f8 ff58 	bl	8018bcc <HAL_GetTick>
 801fd1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	681b      	ldr	r3, [r3, #0]
 801fd22:	681b      	ldr	r3, [r3, #0]
 801fd24:	f003 0308 	and.w	r3, r3, #8
 801fd28:	2b08      	cmp	r3, #8
 801fd2a:	d10e      	bne.n	801fd4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fd2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fd30:	9300      	str	r3, [sp, #0]
 801fd32:	68fb      	ldr	r3, [r7, #12]
 801fd34:	2200      	movs	r2, #0
 801fd36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801fd3a:	6878      	ldr	r0, [r7, #4]
 801fd3c:	f000 f82f 	bl	801fd9e <UART_WaitOnFlagUntilTimeout>
 801fd40:	4603      	mov	r3, r0
 801fd42:	2b00      	cmp	r3, #0
 801fd44:	d001      	beq.n	801fd4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fd46:	2303      	movs	r3, #3
 801fd48:	e025      	b.n	801fd96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	681b      	ldr	r3, [r3, #0]
 801fd50:	f003 0304 	and.w	r3, r3, #4
 801fd54:	2b04      	cmp	r3, #4
 801fd56:	d10e      	bne.n	801fd76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fd58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801fd5c:	9300      	str	r3, [sp, #0]
 801fd5e:	68fb      	ldr	r3, [r7, #12]
 801fd60:	2200      	movs	r2, #0
 801fd62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801fd66:	6878      	ldr	r0, [r7, #4]
 801fd68:	f000 f819 	bl	801fd9e <UART_WaitOnFlagUntilTimeout>
 801fd6c:	4603      	mov	r3, r0
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d001      	beq.n	801fd76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801fd72:	2303      	movs	r3, #3
 801fd74:	e00f      	b.n	801fd96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	2220      	movs	r2, #32
 801fd7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	2220      	movs	r2, #32
 801fd82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	2200      	movs	r2, #0
 801fd8a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	2200      	movs	r2, #0
 801fd90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801fd94:	2300      	movs	r3, #0
}
 801fd96:	4618      	mov	r0, r3
 801fd98:	3710      	adds	r7, #16
 801fd9a:	46bd      	mov	sp, r7
 801fd9c:	bd80      	pop	{r7, pc}

0801fd9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801fd9e:	b580      	push	{r7, lr}
 801fda0:	b09c      	sub	sp, #112	; 0x70
 801fda2:	af00      	add	r7, sp, #0
 801fda4:	60f8      	str	r0, [r7, #12]
 801fda6:	60b9      	str	r1, [r7, #8]
 801fda8:	603b      	str	r3, [r7, #0]
 801fdaa:	4613      	mov	r3, r2
 801fdac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fdae:	e0a9      	b.n	801ff04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fdb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fdb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fdb6:	f000 80a5 	beq.w	801ff04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fdba:	f7f8 ff07 	bl	8018bcc <HAL_GetTick>
 801fdbe:	4602      	mov	r2, r0
 801fdc0:	683b      	ldr	r3, [r7, #0]
 801fdc2:	1ad3      	subs	r3, r2, r3
 801fdc4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fdc6:	429a      	cmp	r2, r3
 801fdc8:	d302      	bcc.n	801fdd0 <UART_WaitOnFlagUntilTimeout+0x32>
 801fdca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	d140      	bne.n	801fe52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fdd0:	68fb      	ldr	r3, [r7, #12]
 801fdd2:	681b      	ldr	r3, [r3, #0]
 801fdd4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fdd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fdd8:	e853 3f00 	ldrex	r3, [r3]
 801fddc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801fdde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fde0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fde4:	667b      	str	r3, [r7, #100]	; 0x64
 801fde6:	68fb      	ldr	r3, [r7, #12]
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	461a      	mov	r2, r3
 801fdec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fdee:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fdf0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fdf2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801fdf4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fdf6:	e841 2300 	strex	r3, r2, [r1]
 801fdfa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801fdfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d1e6      	bne.n	801fdd0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	681b      	ldr	r3, [r3, #0]
 801fe06:	3308      	adds	r3, #8
 801fe08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fe0c:	e853 3f00 	ldrex	r3, [r3]
 801fe10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fe12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fe14:	f023 0301 	bic.w	r3, r3, #1
 801fe18:	663b      	str	r3, [r7, #96]	; 0x60
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	3308      	adds	r3, #8
 801fe20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fe22:	64ba      	str	r2, [r7, #72]	; 0x48
 801fe24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fe28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fe2a:	e841 2300 	strex	r3, r2, [r1]
 801fe2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fe30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fe32:	2b00      	cmp	r3, #0
 801fe34:	d1e5      	bne.n	801fe02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801fe36:	68fb      	ldr	r3, [r7, #12]
 801fe38:	2220      	movs	r2, #32
 801fe3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	2220      	movs	r2, #32
 801fe42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801fe46:	68fb      	ldr	r3, [r7, #12]
 801fe48:	2200      	movs	r2, #0
 801fe4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 801fe4e:	2303      	movs	r3, #3
 801fe50:	e069      	b.n	801ff26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801fe52:	68fb      	ldr	r3, [r7, #12]
 801fe54:	681b      	ldr	r3, [r3, #0]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	f003 0304 	and.w	r3, r3, #4
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d051      	beq.n	801ff04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801fe60:	68fb      	ldr	r3, [r7, #12]
 801fe62:	681b      	ldr	r3, [r3, #0]
 801fe64:	69db      	ldr	r3, [r3, #28]
 801fe66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fe6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fe6e:	d149      	bne.n	801ff04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fe70:	68fb      	ldr	r3, [r7, #12]
 801fe72:	681b      	ldr	r3, [r3, #0]
 801fe74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801fe78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 801fe7a:	68fb      	ldr	r3, [r7, #12]
 801fe7c:	681b      	ldr	r3, [r3, #0]
 801fe7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fe82:	e853 3f00 	ldrex	r3, [r3]
 801fe86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fe88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fe8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fe8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801fe90:	68fb      	ldr	r3, [r7, #12]
 801fe92:	681b      	ldr	r3, [r3, #0]
 801fe94:	461a      	mov	r2, r3
 801fe96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fe98:	637b      	str	r3, [r7, #52]	; 0x34
 801fe9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fe9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fea0:	e841 2300 	strex	r3, r2, [r1]
 801fea4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fea8:	2b00      	cmp	r3, #0
 801feaa:	d1e6      	bne.n	801fe7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801feac:	68fb      	ldr	r3, [r7, #12]
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	3308      	adds	r3, #8
 801feb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801feb4:	697b      	ldr	r3, [r7, #20]
 801feb6:	e853 3f00 	ldrex	r3, [r3]
 801feba:	613b      	str	r3, [r7, #16]
   return(result);
 801febc:	693b      	ldr	r3, [r7, #16]
 801febe:	f023 0301 	bic.w	r3, r3, #1
 801fec2:	66bb      	str	r3, [r7, #104]	; 0x68
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	3308      	adds	r3, #8
 801feca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fecc:	623a      	str	r2, [r7, #32]
 801fece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fed0:	69f9      	ldr	r1, [r7, #28]
 801fed2:	6a3a      	ldr	r2, [r7, #32]
 801fed4:	e841 2300 	strex	r3, r2, [r1]
 801fed8:	61bb      	str	r3, [r7, #24]
   return(result);
 801feda:	69bb      	ldr	r3, [r7, #24]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d1e5      	bne.n	801feac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 801fee0:	68fb      	ldr	r3, [r7, #12]
 801fee2:	2220      	movs	r2, #32
 801fee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 801fee8:	68fb      	ldr	r3, [r7, #12]
 801feea:	2220      	movs	r2, #32
 801feec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801fef0:	68fb      	ldr	r3, [r7, #12]
 801fef2:	2220      	movs	r2, #32
 801fef4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fef8:	68fb      	ldr	r3, [r7, #12]
 801fefa:	2200      	movs	r2, #0
 801fefc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 801ff00:	2303      	movs	r3, #3
 801ff02:	e010      	b.n	801ff26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ff04:	68fb      	ldr	r3, [r7, #12]
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	69da      	ldr	r2, [r3, #28]
 801ff0a:	68bb      	ldr	r3, [r7, #8]
 801ff0c:	4013      	ands	r3, r2
 801ff0e:	68ba      	ldr	r2, [r7, #8]
 801ff10:	429a      	cmp	r2, r3
 801ff12:	bf0c      	ite	eq
 801ff14:	2301      	moveq	r3, #1
 801ff16:	2300      	movne	r3, #0
 801ff18:	b2db      	uxtb	r3, r3
 801ff1a:	461a      	mov	r2, r3
 801ff1c:	79fb      	ldrb	r3, [r7, #7]
 801ff1e:	429a      	cmp	r2, r3
 801ff20:	f43f af46 	beq.w	801fdb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801ff24:	2300      	movs	r3, #0
}
 801ff26:	4618      	mov	r0, r3
 801ff28:	3770      	adds	r7, #112	; 0x70
 801ff2a:	46bd      	mov	sp, r7
 801ff2c:	bd80      	pop	{r7, pc}

0801ff2e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801ff2e:	b480      	push	{r7}
 801ff30:	b085      	sub	sp, #20
 801ff32:	af00      	add	r7, sp, #0
 801ff34:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ff3c:	2b01      	cmp	r3, #1
 801ff3e:	d101      	bne.n	801ff44 <HAL_UARTEx_DisableFifoMode+0x16>
 801ff40:	2302      	movs	r3, #2
 801ff42:	e027      	b.n	801ff94 <HAL_UARTEx_DisableFifoMode+0x66>
 801ff44:	687b      	ldr	r3, [r7, #4]
 801ff46:	2201      	movs	r2, #1
 801ff48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	2224      	movs	r2, #36	; 0x24
 801ff50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	681b      	ldr	r3, [r3, #0]
 801ff58:	681b      	ldr	r3, [r3, #0]
 801ff5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	681b      	ldr	r3, [r3, #0]
 801ff60:	681a      	ldr	r2, [r3, #0]
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	f022 0201 	bic.w	r2, r2, #1
 801ff6a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ff6c:	68fb      	ldr	r3, [r7, #12]
 801ff6e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ff72:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	2200      	movs	r2, #0
 801ff78:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	681b      	ldr	r3, [r3, #0]
 801ff7e:	68fa      	ldr	r2, [r7, #12]
 801ff80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ff82:	687b      	ldr	r3, [r7, #4]
 801ff84:	2220      	movs	r2, #32
 801ff86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	2200      	movs	r2, #0
 801ff8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801ff92:	2300      	movs	r3, #0
}
 801ff94:	4618      	mov	r0, r3
 801ff96:	3714      	adds	r7, #20
 801ff98:	46bd      	mov	sp, r7
 801ff9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff9e:	4770      	bx	lr

0801ffa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ffa0:	b580      	push	{r7, lr}
 801ffa2:	b084      	sub	sp, #16
 801ffa4:	af00      	add	r7, sp, #0
 801ffa6:	6078      	str	r0, [r7, #4]
 801ffa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801ffb0:	2b01      	cmp	r3, #1
 801ffb2:	d101      	bne.n	801ffb8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ffb4:	2302      	movs	r3, #2
 801ffb6:	e02d      	b.n	8020014 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ffb8:	687b      	ldr	r3, [r7, #4]
 801ffba:	2201      	movs	r2, #1
 801ffbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	2224      	movs	r2, #36	; 0x24
 801ffc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	681b      	ldr	r3, [r3, #0]
 801ffcc:	681b      	ldr	r3, [r3, #0]
 801ffce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ffd0:	687b      	ldr	r3, [r7, #4]
 801ffd2:	681b      	ldr	r3, [r3, #0]
 801ffd4:	681a      	ldr	r2, [r3, #0]
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	681b      	ldr	r3, [r3, #0]
 801ffda:	f022 0201 	bic.w	r2, r2, #1
 801ffde:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	689b      	ldr	r3, [r3, #8]
 801ffe6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ffea:	687b      	ldr	r3, [r7, #4]
 801ffec:	681b      	ldr	r3, [r3, #0]
 801ffee:	683a      	ldr	r2, [r7, #0]
 801fff0:	430a      	orrs	r2, r1
 801fff2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801fff4:	6878      	ldr	r0, [r7, #4]
 801fff6:	f000 f84f 	bl	8020098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801fffa:	687b      	ldr	r3, [r7, #4]
 801fffc:	681b      	ldr	r3, [r3, #0]
 801fffe:	68fa      	ldr	r2, [r7, #12]
 8020000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	2220      	movs	r2, #32
 8020006:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	2200      	movs	r2, #0
 802000e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8020012:	2300      	movs	r3, #0
}
 8020014:	4618      	mov	r0, r3
 8020016:	3710      	adds	r7, #16
 8020018:	46bd      	mov	sp, r7
 802001a:	bd80      	pop	{r7, pc}

0802001c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802001c:	b580      	push	{r7, lr}
 802001e:	b084      	sub	sp, #16
 8020020:	af00      	add	r7, sp, #0
 8020022:	6078      	str	r0, [r7, #4]
 8020024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 802002c:	2b01      	cmp	r3, #1
 802002e:	d101      	bne.n	8020034 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020030:	2302      	movs	r3, #2
 8020032:	e02d      	b.n	8020090 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020034:	687b      	ldr	r3, [r7, #4]
 8020036:	2201      	movs	r2, #1
 8020038:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	2224      	movs	r2, #36	; 0x24
 8020040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	681b      	ldr	r3, [r3, #0]
 802004a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802004c:	687b      	ldr	r3, [r7, #4]
 802004e:	681b      	ldr	r3, [r3, #0]
 8020050:	681a      	ldr	r2, [r3, #0]
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	681b      	ldr	r3, [r3, #0]
 8020056:	f022 0201 	bic.w	r2, r2, #1
 802005a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	681b      	ldr	r3, [r3, #0]
 8020060:	689b      	ldr	r3, [r3, #8]
 8020062:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	683a      	ldr	r2, [r7, #0]
 802006c:	430a      	orrs	r2, r1
 802006e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020070:	6878      	ldr	r0, [r7, #4]
 8020072:	f000 f811 	bl	8020098 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020076:	687b      	ldr	r3, [r7, #4]
 8020078:	681b      	ldr	r3, [r3, #0]
 802007a:	68fa      	ldr	r2, [r7, #12]
 802007c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	2220      	movs	r2, #32
 8020082:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	2200      	movs	r2, #0
 802008a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 802008e:	2300      	movs	r3, #0
}
 8020090:	4618      	mov	r0, r3
 8020092:	3710      	adds	r7, #16
 8020094:	46bd      	mov	sp, r7
 8020096:	bd80      	pop	{r7, pc}

08020098 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020098:	b480      	push	{r7}
 802009a:	b085      	sub	sp, #20
 802009c:	af00      	add	r7, sp, #0
 802009e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80200a4:	2b00      	cmp	r3, #0
 80200a6:	d108      	bne.n	80200ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80200a8:	687b      	ldr	r3, [r7, #4]
 80200aa:	2201      	movs	r2, #1
 80200ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	2201      	movs	r2, #1
 80200b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80200b8:	e031      	b.n	802011e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80200ba:	2308      	movs	r3, #8
 80200bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80200be:	2308      	movs	r3, #8
 80200c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	689b      	ldr	r3, [r3, #8]
 80200c8:	0e5b      	lsrs	r3, r3, #25
 80200ca:	b2db      	uxtb	r3, r3
 80200cc:	f003 0307 	and.w	r3, r3, #7
 80200d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	689b      	ldr	r3, [r3, #8]
 80200d8:	0f5b      	lsrs	r3, r3, #29
 80200da:	b2db      	uxtb	r3, r3
 80200dc:	f003 0307 	and.w	r3, r3, #7
 80200e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80200e2:	7bbb      	ldrb	r3, [r7, #14]
 80200e4:	7b3a      	ldrb	r2, [r7, #12]
 80200e6:	4911      	ldr	r1, [pc, #68]	; (802012c <UARTEx_SetNbDataToProcess+0x94>)
 80200e8:	5c8a      	ldrb	r2, [r1, r2]
 80200ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80200ee:	7b3a      	ldrb	r2, [r7, #12]
 80200f0:	490f      	ldr	r1, [pc, #60]	; (8020130 <UARTEx_SetNbDataToProcess+0x98>)
 80200f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80200f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80200f8:	b29a      	uxth	r2, r3
 80200fa:	687b      	ldr	r3, [r7, #4]
 80200fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020100:	7bfb      	ldrb	r3, [r7, #15]
 8020102:	7b7a      	ldrb	r2, [r7, #13]
 8020104:	4909      	ldr	r1, [pc, #36]	; (802012c <UARTEx_SetNbDataToProcess+0x94>)
 8020106:	5c8a      	ldrb	r2, [r1, r2]
 8020108:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802010c:	7b7a      	ldrb	r2, [r7, #13]
 802010e:	4908      	ldr	r1, [pc, #32]	; (8020130 <UARTEx_SetNbDataToProcess+0x98>)
 8020110:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020112:	fb93 f3f2 	sdiv	r3, r3, r2
 8020116:	b29a      	uxth	r2, r3
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 802011e:	bf00      	nop
 8020120:	3714      	adds	r7, #20
 8020122:	46bd      	mov	sp, r7
 8020124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020128:	4770      	bx	lr
 802012a:	bf00      	nop
 802012c:	080235d0 	.word	0x080235d0
 8020130:	080235d8 	.word	0x080235d8

08020134 <__errno>:
 8020134:	4b01      	ldr	r3, [pc, #4]	; (802013c <__errno+0x8>)
 8020136:	6818      	ldr	r0, [r3, #0]
 8020138:	4770      	bx	lr
 802013a:	bf00      	nop
 802013c:	2000002c 	.word	0x2000002c

08020140 <__libc_init_array>:
 8020140:	b570      	push	{r4, r5, r6, lr}
 8020142:	4d0d      	ldr	r5, [pc, #52]	; (8020178 <__libc_init_array+0x38>)
 8020144:	4c0d      	ldr	r4, [pc, #52]	; (802017c <__libc_init_array+0x3c>)
 8020146:	1b64      	subs	r4, r4, r5
 8020148:	10a4      	asrs	r4, r4, #2
 802014a:	2600      	movs	r6, #0
 802014c:	42a6      	cmp	r6, r4
 802014e:	d109      	bne.n	8020164 <__libc_init_array+0x24>
 8020150:	4d0b      	ldr	r5, [pc, #44]	; (8020180 <__libc_init_array+0x40>)
 8020152:	4c0c      	ldr	r4, [pc, #48]	; (8020184 <__libc_init_array+0x44>)
 8020154:	f003 f8aa 	bl	80232ac <_init>
 8020158:	1b64      	subs	r4, r4, r5
 802015a:	10a4      	asrs	r4, r4, #2
 802015c:	2600      	movs	r6, #0
 802015e:	42a6      	cmp	r6, r4
 8020160:	d105      	bne.n	802016e <__libc_init_array+0x2e>
 8020162:	bd70      	pop	{r4, r5, r6, pc}
 8020164:	f855 3b04 	ldr.w	r3, [r5], #4
 8020168:	4798      	blx	r3
 802016a:	3601      	adds	r6, #1
 802016c:	e7ee      	b.n	802014c <__libc_init_array+0xc>
 802016e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020172:	4798      	blx	r3
 8020174:	3601      	adds	r6, #1
 8020176:	e7f2      	b.n	802015e <__libc_init_array+0x1e>
 8020178:	080239f8 	.word	0x080239f8
 802017c:	080239f8 	.word	0x080239f8
 8020180:	080239f8 	.word	0x080239f8
 8020184:	080239fc 	.word	0x080239fc

08020188 <memcpy>:
 8020188:	440a      	add	r2, r1
 802018a:	4291      	cmp	r1, r2
 802018c:	f100 33ff 	add.w	r3, r0, #4294967295
 8020190:	d100      	bne.n	8020194 <memcpy+0xc>
 8020192:	4770      	bx	lr
 8020194:	b510      	push	{r4, lr}
 8020196:	f811 4b01 	ldrb.w	r4, [r1], #1
 802019a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802019e:	4291      	cmp	r1, r2
 80201a0:	d1f9      	bne.n	8020196 <memcpy+0xe>
 80201a2:	bd10      	pop	{r4, pc}

080201a4 <memset>:
 80201a4:	4402      	add	r2, r0
 80201a6:	4603      	mov	r3, r0
 80201a8:	4293      	cmp	r3, r2
 80201aa:	d100      	bne.n	80201ae <memset+0xa>
 80201ac:	4770      	bx	lr
 80201ae:	f803 1b01 	strb.w	r1, [r3], #1
 80201b2:	e7f9      	b.n	80201a8 <memset+0x4>

080201b4 <__cvt>:
 80201b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80201b8:	ec55 4b10 	vmov	r4, r5, d0
 80201bc:	2d00      	cmp	r5, #0
 80201be:	460e      	mov	r6, r1
 80201c0:	4619      	mov	r1, r3
 80201c2:	462b      	mov	r3, r5
 80201c4:	bfbb      	ittet	lt
 80201c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80201ca:	461d      	movlt	r5, r3
 80201cc:	2300      	movge	r3, #0
 80201ce:	232d      	movlt	r3, #45	; 0x2d
 80201d0:	700b      	strb	r3, [r1, #0]
 80201d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80201d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80201d8:	4691      	mov	r9, r2
 80201da:	f023 0820 	bic.w	r8, r3, #32
 80201de:	bfbc      	itt	lt
 80201e0:	4622      	movlt	r2, r4
 80201e2:	4614      	movlt	r4, r2
 80201e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80201e8:	d005      	beq.n	80201f6 <__cvt+0x42>
 80201ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80201ee:	d100      	bne.n	80201f2 <__cvt+0x3e>
 80201f0:	3601      	adds	r6, #1
 80201f2:	2102      	movs	r1, #2
 80201f4:	e000      	b.n	80201f8 <__cvt+0x44>
 80201f6:	2103      	movs	r1, #3
 80201f8:	ab03      	add	r3, sp, #12
 80201fa:	9301      	str	r3, [sp, #4]
 80201fc:	ab02      	add	r3, sp, #8
 80201fe:	9300      	str	r3, [sp, #0]
 8020200:	ec45 4b10 	vmov	d0, r4, r5
 8020204:	4653      	mov	r3, sl
 8020206:	4632      	mov	r2, r6
 8020208:	f000 fe2e 	bl	8020e68 <_dtoa_r>
 802020c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8020210:	4607      	mov	r7, r0
 8020212:	d102      	bne.n	802021a <__cvt+0x66>
 8020214:	f019 0f01 	tst.w	r9, #1
 8020218:	d022      	beq.n	8020260 <__cvt+0xac>
 802021a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 802021e:	eb07 0906 	add.w	r9, r7, r6
 8020222:	d110      	bne.n	8020246 <__cvt+0x92>
 8020224:	783b      	ldrb	r3, [r7, #0]
 8020226:	2b30      	cmp	r3, #48	; 0x30
 8020228:	d10a      	bne.n	8020240 <__cvt+0x8c>
 802022a:	2200      	movs	r2, #0
 802022c:	2300      	movs	r3, #0
 802022e:	4620      	mov	r0, r4
 8020230:	4629      	mov	r1, r5
 8020232:	f7e0 fc71 	bl	8000b18 <__aeabi_dcmpeq>
 8020236:	b918      	cbnz	r0, 8020240 <__cvt+0x8c>
 8020238:	f1c6 0601 	rsb	r6, r6, #1
 802023c:	f8ca 6000 	str.w	r6, [sl]
 8020240:	f8da 3000 	ldr.w	r3, [sl]
 8020244:	4499      	add	r9, r3
 8020246:	2200      	movs	r2, #0
 8020248:	2300      	movs	r3, #0
 802024a:	4620      	mov	r0, r4
 802024c:	4629      	mov	r1, r5
 802024e:	f7e0 fc63 	bl	8000b18 <__aeabi_dcmpeq>
 8020252:	b108      	cbz	r0, 8020258 <__cvt+0xa4>
 8020254:	f8cd 900c 	str.w	r9, [sp, #12]
 8020258:	2230      	movs	r2, #48	; 0x30
 802025a:	9b03      	ldr	r3, [sp, #12]
 802025c:	454b      	cmp	r3, r9
 802025e:	d307      	bcc.n	8020270 <__cvt+0xbc>
 8020260:	9b03      	ldr	r3, [sp, #12]
 8020262:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020264:	1bdb      	subs	r3, r3, r7
 8020266:	4638      	mov	r0, r7
 8020268:	6013      	str	r3, [r2, #0]
 802026a:	b004      	add	sp, #16
 802026c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020270:	1c59      	adds	r1, r3, #1
 8020272:	9103      	str	r1, [sp, #12]
 8020274:	701a      	strb	r2, [r3, #0]
 8020276:	e7f0      	b.n	802025a <__cvt+0xa6>

08020278 <__exponent>:
 8020278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802027a:	4603      	mov	r3, r0
 802027c:	2900      	cmp	r1, #0
 802027e:	bfb8      	it	lt
 8020280:	4249      	neglt	r1, r1
 8020282:	f803 2b02 	strb.w	r2, [r3], #2
 8020286:	bfb4      	ite	lt
 8020288:	222d      	movlt	r2, #45	; 0x2d
 802028a:	222b      	movge	r2, #43	; 0x2b
 802028c:	2909      	cmp	r1, #9
 802028e:	7042      	strb	r2, [r0, #1]
 8020290:	dd2a      	ble.n	80202e8 <__exponent+0x70>
 8020292:	f10d 0407 	add.w	r4, sp, #7
 8020296:	46a4      	mov	ip, r4
 8020298:	270a      	movs	r7, #10
 802029a:	46a6      	mov	lr, r4
 802029c:	460a      	mov	r2, r1
 802029e:	fb91 f6f7 	sdiv	r6, r1, r7
 80202a2:	fb07 1516 	mls	r5, r7, r6, r1
 80202a6:	3530      	adds	r5, #48	; 0x30
 80202a8:	2a63      	cmp	r2, #99	; 0x63
 80202aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80202ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80202b2:	4631      	mov	r1, r6
 80202b4:	dcf1      	bgt.n	802029a <__exponent+0x22>
 80202b6:	3130      	adds	r1, #48	; 0x30
 80202b8:	f1ae 0502 	sub.w	r5, lr, #2
 80202bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80202c0:	1c44      	adds	r4, r0, #1
 80202c2:	4629      	mov	r1, r5
 80202c4:	4561      	cmp	r1, ip
 80202c6:	d30a      	bcc.n	80202de <__exponent+0x66>
 80202c8:	f10d 0209 	add.w	r2, sp, #9
 80202cc:	eba2 020e 	sub.w	r2, r2, lr
 80202d0:	4565      	cmp	r5, ip
 80202d2:	bf88      	it	hi
 80202d4:	2200      	movhi	r2, #0
 80202d6:	4413      	add	r3, r2
 80202d8:	1a18      	subs	r0, r3, r0
 80202da:	b003      	add	sp, #12
 80202dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80202de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80202e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80202e6:	e7ed      	b.n	80202c4 <__exponent+0x4c>
 80202e8:	2330      	movs	r3, #48	; 0x30
 80202ea:	3130      	adds	r1, #48	; 0x30
 80202ec:	7083      	strb	r3, [r0, #2]
 80202ee:	70c1      	strb	r1, [r0, #3]
 80202f0:	1d03      	adds	r3, r0, #4
 80202f2:	e7f1      	b.n	80202d8 <__exponent+0x60>

080202f4 <_printf_float>:
 80202f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202f8:	ed2d 8b02 	vpush	{d8}
 80202fc:	b08d      	sub	sp, #52	; 0x34
 80202fe:	460c      	mov	r4, r1
 8020300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8020304:	4616      	mov	r6, r2
 8020306:	461f      	mov	r7, r3
 8020308:	4605      	mov	r5, r0
 802030a:	f001 fd53 	bl	8021db4 <_localeconv_r>
 802030e:	f8d0 a000 	ldr.w	sl, [r0]
 8020312:	4650      	mov	r0, sl
 8020314:	f7df ff84 	bl	8000220 <strlen>
 8020318:	2300      	movs	r3, #0
 802031a:	930a      	str	r3, [sp, #40]	; 0x28
 802031c:	6823      	ldr	r3, [r4, #0]
 802031e:	9305      	str	r3, [sp, #20]
 8020320:	f8d8 3000 	ldr.w	r3, [r8]
 8020324:	f894 b018 	ldrb.w	fp, [r4, #24]
 8020328:	3307      	adds	r3, #7
 802032a:	f023 0307 	bic.w	r3, r3, #7
 802032e:	f103 0208 	add.w	r2, r3, #8
 8020332:	f8c8 2000 	str.w	r2, [r8]
 8020336:	e9d3 2300 	ldrd	r2, r3, [r3]
 802033a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802033e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8020342:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8020346:	9307      	str	r3, [sp, #28]
 8020348:	f8cd 8018 	str.w	r8, [sp, #24]
 802034c:	ee08 0a10 	vmov	s16, r0
 8020350:	4b9f      	ldr	r3, [pc, #636]	; (80205d0 <_printf_float+0x2dc>)
 8020352:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020356:	f04f 32ff 	mov.w	r2, #4294967295
 802035a:	f7e0 fc0f 	bl	8000b7c <__aeabi_dcmpun>
 802035e:	bb88      	cbnz	r0, 80203c4 <_printf_float+0xd0>
 8020360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8020364:	4b9a      	ldr	r3, [pc, #616]	; (80205d0 <_printf_float+0x2dc>)
 8020366:	f04f 32ff 	mov.w	r2, #4294967295
 802036a:	f7e0 fbe9 	bl	8000b40 <__aeabi_dcmple>
 802036e:	bb48      	cbnz	r0, 80203c4 <_printf_float+0xd0>
 8020370:	2200      	movs	r2, #0
 8020372:	2300      	movs	r3, #0
 8020374:	4640      	mov	r0, r8
 8020376:	4649      	mov	r1, r9
 8020378:	f7e0 fbd8 	bl	8000b2c <__aeabi_dcmplt>
 802037c:	b110      	cbz	r0, 8020384 <_printf_float+0x90>
 802037e:	232d      	movs	r3, #45	; 0x2d
 8020380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020384:	4b93      	ldr	r3, [pc, #588]	; (80205d4 <_printf_float+0x2e0>)
 8020386:	4894      	ldr	r0, [pc, #592]	; (80205d8 <_printf_float+0x2e4>)
 8020388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 802038c:	bf94      	ite	ls
 802038e:	4698      	movls	r8, r3
 8020390:	4680      	movhi	r8, r0
 8020392:	2303      	movs	r3, #3
 8020394:	6123      	str	r3, [r4, #16]
 8020396:	9b05      	ldr	r3, [sp, #20]
 8020398:	f023 0204 	bic.w	r2, r3, #4
 802039c:	6022      	str	r2, [r4, #0]
 802039e:	f04f 0900 	mov.w	r9, #0
 80203a2:	9700      	str	r7, [sp, #0]
 80203a4:	4633      	mov	r3, r6
 80203a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80203a8:	4621      	mov	r1, r4
 80203aa:	4628      	mov	r0, r5
 80203ac:	f000 f9d8 	bl	8020760 <_printf_common>
 80203b0:	3001      	adds	r0, #1
 80203b2:	f040 8090 	bne.w	80204d6 <_printf_float+0x1e2>
 80203b6:	f04f 30ff 	mov.w	r0, #4294967295
 80203ba:	b00d      	add	sp, #52	; 0x34
 80203bc:	ecbd 8b02 	vpop	{d8}
 80203c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c4:	4642      	mov	r2, r8
 80203c6:	464b      	mov	r3, r9
 80203c8:	4640      	mov	r0, r8
 80203ca:	4649      	mov	r1, r9
 80203cc:	f7e0 fbd6 	bl	8000b7c <__aeabi_dcmpun>
 80203d0:	b140      	cbz	r0, 80203e4 <_printf_float+0xf0>
 80203d2:	464b      	mov	r3, r9
 80203d4:	2b00      	cmp	r3, #0
 80203d6:	bfbc      	itt	lt
 80203d8:	232d      	movlt	r3, #45	; 0x2d
 80203da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80203de:	487f      	ldr	r0, [pc, #508]	; (80205dc <_printf_float+0x2e8>)
 80203e0:	4b7f      	ldr	r3, [pc, #508]	; (80205e0 <_printf_float+0x2ec>)
 80203e2:	e7d1      	b.n	8020388 <_printf_float+0x94>
 80203e4:	6863      	ldr	r3, [r4, #4]
 80203e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80203ea:	9206      	str	r2, [sp, #24]
 80203ec:	1c5a      	adds	r2, r3, #1
 80203ee:	d13f      	bne.n	8020470 <_printf_float+0x17c>
 80203f0:	2306      	movs	r3, #6
 80203f2:	6063      	str	r3, [r4, #4]
 80203f4:	9b05      	ldr	r3, [sp, #20]
 80203f6:	6861      	ldr	r1, [r4, #4]
 80203f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80203fc:	2300      	movs	r3, #0
 80203fe:	9303      	str	r3, [sp, #12]
 8020400:	ab0a      	add	r3, sp, #40	; 0x28
 8020402:	e9cd b301 	strd	fp, r3, [sp, #4]
 8020406:	ab09      	add	r3, sp, #36	; 0x24
 8020408:	ec49 8b10 	vmov	d0, r8, r9
 802040c:	9300      	str	r3, [sp, #0]
 802040e:	6022      	str	r2, [r4, #0]
 8020410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8020414:	4628      	mov	r0, r5
 8020416:	f7ff fecd 	bl	80201b4 <__cvt>
 802041a:	9b06      	ldr	r3, [sp, #24]
 802041c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802041e:	2b47      	cmp	r3, #71	; 0x47
 8020420:	4680      	mov	r8, r0
 8020422:	d108      	bne.n	8020436 <_printf_float+0x142>
 8020424:	1cc8      	adds	r0, r1, #3
 8020426:	db02      	blt.n	802042e <_printf_float+0x13a>
 8020428:	6863      	ldr	r3, [r4, #4]
 802042a:	4299      	cmp	r1, r3
 802042c:	dd41      	ble.n	80204b2 <_printf_float+0x1be>
 802042e:	f1ab 0b02 	sub.w	fp, fp, #2
 8020432:	fa5f fb8b 	uxtb.w	fp, fp
 8020436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 802043a:	d820      	bhi.n	802047e <_printf_float+0x18a>
 802043c:	3901      	subs	r1, #1
 802043e:	465a      	mov	r2, fp
 8020440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8020444:	9109      	str	r1, [sp, #36]	; 0x24
 8020446:	f7ff ff17 	bl	8020278 <__exponent>
 802044a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802044c:	1813      	adds	r3, r2, r0
 802044e:	2a01      	cmp	r2, #1
 8020450:	4681      	mov	r9, r0
 8020452:	6123      	str	r3, [r4, #16]
 8020454:	dc02      	bgt.n	802045c <_printf_float+0x168>
 8020456:	6822      	ldr	r2, [r4, #0]
 8020458:	07d2      	lsls	r2, r2, #31
 802045a:	d501      	bpl.n	8020460 <_printf_float+0x16c>
 802045c:	3301      	adds	r3, #1
 802045e:	6123      	str	r3, [r4, #16]
 8020460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8020464:	2b00      	cmp	r3, #0
 8020466:	d09c      	beq.n	80203a2 <_printf_float+0xae>
 8020468:	232d      	movs	r3, #45	; 0x2d
 802046a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802046e:	e798      	b.n	80203a2 <_printf_float+0xae>
 8020470:	9a06      	ldr	r2, [sp, #24]
 8020472:	2a47      	cmp	r2, #71	; 0x47
 8020474:	d1be      	bne.n	80203f4 <_printf_float+0x100>
 8020476:	2b00      	cmp	r3, #0
 8020478:	d1bc      	bne.n	80203f4 <_printf_float+0x100>
 802047a:	2301      	movs	r3, #1
 802047c:	e7b9      	b.n	80203f2 <_printf_float+0xfe>
 802047e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8020482:	d118      	bne.n	80204b6 <_printf_float+0x1c2>
 8020484:	2900      	cmp	r1, #0
 8020486:	6863      	ldr	r3, [r4, #4]
 8020488:	dd0b      	ble.n	80204a2 <_printf_float+0x1ae>
 802048a:	6121      	str	r1, [r4, #16]
 802048c:	b913      	cbnz	r3, 8020494 <_printf_float+0x1a0>
 802048e:	6822      	ldr	r2, [r4, #0]
 8020490:	07d0      	lsls	r0, r2, #31
 8020492:	d502      	bpl.n	802049a <_printf_float+0x1a6>
 8020494:	3301      	adds	r3, #1
 8020496:	440b      	add	r3, r1
 8020498:	6123      	str	r3, [r4, #16]
 802049a:	65a1      	str	r1, [r4, #88]	; 0x58
 802049c:	f04f 0900 	mov.w	r9, #0
 80204a0:	e7de      	b.n	8020460 <_printf_float+0x16c>
 80204a2:	b913      	cbnz	r3, 80204aa <_printf_float+0x1b6>
 80204a4:	6822      	ldr	r2, [r4, #0]
 80204a6:	07d2      	lsls	r2, r2, #31
 80204a8:	d501      	bpl.n	80204ae <_printf_float+0x1ba>
 80204aa:	3302      	adds	r3, #2
 80204ac:	e7f4      	b.n	8020498 <_printf_float+0x1a4>
 80204ae:	2301      	movs	r3, #1
 80204b0:	e7f2      	b.n	8020498 <_printf_float+0x1a4>
 80204b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80204b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80204b8:	4299      	cmp	r1, r3
 80204ba:	db05      	blt.n	80204c8 <_printf_float+0x1d4>
 80204bc:	6823      	ldr	r3, [r4, #0]
 80204be:	6121      	str	r1, [r4, #16]
 80204c0:	07d8      	lsls	r0, r3, #31
 80204c2:	d5ea      	bpl.n	802049a <_printf_float+0x1a6>
 80204c4:	1c4b      	adds	r3, r1, #1
 80204c6:	e7e7      	b.n	8020498 <_printf_float+0x1a4>
 80204c8:	2900      	cmp	r1, #0
 80204ca:	bfd4      	ite	le
 80204cc:	f1c1 0202 	rsble	r2, r1, #2
 80204d0:	2201      	movgt	r2, #1
 80204d2:	4413      	add	r3, r2
 80204d4:	e7e0      	b.n	8020498 <_printf_float+0x1a4>
 80204d6:	6823      	ldr	r3, [r4, #0]
 80204d8:	055a      	lsls	r2, r3, #21
 80204da:	d407      	bmi.n	80204ec <_printf_float+0x1f8>
 80204dc:	6923      	ldr	r3, [r4, #16]
 80204de:	4642      	mov	r2, r8
 80204e0:	4631      	mov	r1, r6
 80204e2:	4628      	mov	r0, r5
 80204e4:	47b8      	blx	r7
 80204e6:	3001      	adds	r0, #1
 80204e8:	d12c      	bne.n	8020544 <_printf_float+0x250>
 80204ea:	e764      	b.n	80203b6 <_printf_float+0xc2>
 80204ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80204f0:	f240 80e0 	bls.w	80206b4 <_printf_float+0x3c0>
 80204f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80204f8:	2200      	movs	r2, #0
 80204fa:	2300      	movs	r3, #0
 80204fc:	f7e0 fb0c 	bl	8000b18 <__aeabi_dcmpeq>
 8020500:	2800      	cmp	r0, #0
 8020502:	d034      	beq.n	802056e <_printf_float+0x27a>
 8020504:	4a37      	ldr	r2, [pc, #220]	; (80205e4 <_printf_float+0x2f0>)
 8020506:	2301      	movs	r3, #1
 8020508:	4631      	mov	r1, r6
 802050a:	4628      	mov	r0, r5
 802050c:	47b8      	blx	r7
 802050e:	3001      	adds	r0, #1
 8020510:	f43f af51 	beq.w	80203b6 <_printf_float+0xc2>
 8020514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020518:	429a      	cmp	r2, r3
 802051a:	db02      	blt.n	8020522 <_printf_float+0x22e>
 802051c:	6823      	ldr	r3, [r4, #0]
 802051e:	07d8      	lsls	r0, r3, #31
 8020520:	d510      	bpl.n	8020544 <_printf_float+0x250>
 8020522:	ee18 3a10 	vmov	r3, s16
 8020526:	4652      	mov	r2, sl
 8020528:	4631      	mov	r1, r6
 802052a:	4628      	mov	r0, r5
 802052c:	47b8      	blx	r7
 802052e:	3001      	adds	r0, #1
 8020530:	f43f af41 	beq.w	80203b6 <_printf_float+0xc2>
 8020534:	f04f 0800 	mov.w	r8, #0
 8020538:	f104 091a 	add.w	r9, r4, #26
 802053c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802053e:	3b01      	subs	r3, #1
 8020540:	4543      	cmp	r3, r8
 8020542:	dc09      	bgt.n	8020558 <_printf_float+0x264>
 8020544:	6823      	ldr	r3, [r4, #0]
 8020546:	079b      	lsls	r3, r3, #30
 8020548:	f100 8105 	bmi.w	8020756 <_printf_float+0x462>
 802054c:	68e0      	ldr	r0, [r4, #12]
 802054e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020550:	4298      	cmp	r0, r3
 8020552:	bfb8      	it	lt
 8020554:	4618      	movlt	r0, r3
 8020556:	e730      	b.n	80203ba <_printf_float+0xc6>
 8020558:	2301      	movs	r3, #1
 802055a:	464a      	mov	r2, r9
 802055c:	4631      	mov	r1, r6
 802055e:	4628      	mov	r0, r5
 8020560:	47b8      	blx	r7
 8020562:	3001      	adds	r0, #1
 8020564:	f43f af27 	beq.w	80203b6 <_printf_float+0xc2>
 8020568:	f108 0801 	add.w	r8, r8, #1
 802056c:	e7e6      	b.n	802053c <_printf_float+0x248>
 802056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020570:	2b00      	cmp	r3, #0
 8020572:	dc39      	bgt.n	80205e8 <_printf_float+0x2f4>
 8020574:	4a1b      	ldr	r2, [pc, #108]	; (80205e4 <_printf_float+0x2f0>)
 8020576:	2301      	movs	r3, #1
 8020578:	4631      	mov	r1, r6
 802057a:	4628      	mov	r0, r5
 802057c:	47b8      	blx	r7
 802057e:	3001      	adds	r0, #1
 8020580:	f43f af19 	beq.w	80203b6 <_printf_float+0xc2>
 8020584:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020588:	4313      	orrs	r3, r2
 802058a:	d102      	bne.n	8020592 <_printf_float+0x29e>
 802058c:	6823      	ldr	r3, [r4, #0]
 802058e:	07d9      	lsls	r1, r3, #31
 8020590:	d5d8      	bpl.n	8020544 <_printf_float+0x250>
 8020592:	ee18 3a10 	vmov	r3, s16
 8020596:	4652      	mov	r2, sl
 8020598:	4631      	mov	r1, r6
 802059a:	4628      	mov	r0, r5
 802059c:	47b8      	blx	r7
 802059e:	3001      	adds	r0, #1
 80205a0:	f43f af09 	beq.w	80203b6 <_printf_float+0xc2>
 80205a4:	f04f 0900 	mov.w	r9, #0
 80205a8:	f104 0a1a 	add.w	sl, r4, #26
 80205ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80205ae:	425b      	negs	r3, r3
 80205b0:	454b      	cmp	r3, r9
 80205b2:	dc01      	bgt.n	80205b8 <_printf_float+0x2c4>
 80205b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80205b6:	e792      	b.n	80204de <_printf_float+0x1ea>
 80205b8:	2301      	movs	r3, #1
 80205ba:	4652      	mov	r2, sl
 80205bc:	4631      	mov	r1, r6
 80205be:	4628      	mov	r0, r5
 80205c0:	47b8      	blx	r7
 80205c2:	3001      	adds	r0, #1
 80205c4:	f43f aef7 	beq.w	80203b6 <_printf_float+0xc2>
 80205c8:	f109 0901 	add.w	r9, r9, #1
 80205cc:	e7ee      	b.n	80205ac <_printf_float+0x2b8>
 80205ce:	bf00      	nop
 80205d0:	7fefffff 	.word	0x7fefffff
 80205d4:	080235e4 	.word	0x080235e4
 80205d8:	080235e8 	.word	0x080235e8
 80205dc:	080235f0 	.word	0x080235f0
 80205e0:	080235ec 	.word	0x080235ec
 80205e4:	080235f4 	.word	0x080235f4
 80205e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80205ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80205ec:	429a      	cmp	r2, r3
 80205ee:	bfa8      	it	ge
 80205f0:	461a      	movge	r2, r3
 80205f2:	2a00      	cmp	r2, #0
 80205f4:	4691      	mov	r9, r2
 80205f6:	dc37      	bgt.n	8020668 <_printf_float+0x374>
 80205f8:	f04f 0b00 	mov.w	fp, #0
 80205fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8020600:	f104 021a 	add.w	r2, r4, #26
 8020604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8020606:	9305      	str	r3, [sp, #20]
 8020608:	eba3 0309 	sub.w	r3, r3, r9
 802060c:	455b      	cmp	r3, fp
 802060e:	dc33      	bgt.n	8020678 <_printf_float+0x384>
 8020610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020614:	429a      	cmp	r2, r3
 8020616:	db3b      	blt.n	8020690 <_printf_float+0x39c>
 8020618:	6823      	ldr	r3, [r4, #0]
 802061a:	07da      	lsls	r2, r3, #31
 802061c:	d438      	bmi.n	8020690 <_printf_float+0x39c>
 802061e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020620:	9a05      	ldr	r2, [sp, #20]
 8020622:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020624:	1a9a      	subs	r2, r3, r2
 8020626:	eba3 0901 	sub.w	r9, r3, r1
 802062a:	4591      	cmp	r9, r2
 802062c:	bfa8      	it	ge
 802062e:	4691      	movge	r9, r2
 8020630:	f1b9 0f00 	cmp.w	r9, #0
 8020634:	dc35      	bgt.n	80206a2 <_printf_float+0x3ae>
 8020636:	f04f 0800 	mov.w	r8, #0
 802063a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 802063e:	f104 0a1a 	add.w	sl, r4, #26
 8020642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8020646:	1a9b      	subs	r3, r3, r2
 8020648:	eba3 0309 	sub.w	r3, r3, r9
 802064c:	4543      	cmp	r3, r8
 802064e:	f77f af79 	ble.w	8020544 <_printf_float+0x250>
 8020652:	2301      	movs	r3, #1
 8020654:	4652      	mov	r2, sl
 8020656:	4631      	mov	r1, r6
 8020658:	4628      	mov	r0, r5
 802065a:	47b8      	blx	r7
 802065c:	3001      	adds	r0, #1
 802065e:	f43f aeaa 	beq.w	80203b6 <_printf_float+0xc2>
 8020662:	f108 0801 	add.w	r8, r8, #1
 8020666:	e7ec      	b.n	8020642 <_printf_float+0x34e>
 8020668:	4613      	mov	r3, r2
 802066a:	4631      	mov	r1, r6
 802066c:	4642      	mov	r2, r8
 802066e:	4628      	mov	r0, r5
 8020670:	47b8      	blx	r7
 8020672:	3001      	adds	r0, #1
 8020674:	d1c0      	bne.n	80205f8 <_printf_float+0x304>
 8020676:	e69e      	b.n	80203b6 <_printf_float+0xc2>
 8020678:	2301      	movs	r3, #1
 802067a:	4631      	mov	r1, r6
 802067c:	4628      	mov	r0, r5
 802067e:	9205      	str	r2, [sp, #20]
 8020680:	47b8      	blx	r7
 8020682:	3001      	adds	r0, #1
 8020684:	f43f ae97 	beq.w	80203b6 <_printf_float+0xc2>
 8020688:	9a05      	ldr	r2, [sp, #20]
 802068a:	f10b 0b01 	add.w	fp, fp, #1
 802068e:	e7b9      	b.n	8020604 <_printf_float+0x310>
 8020690:	ee18 3a10 	vmov	r3, s16
 8020694:	4652      	mov	r2, sl
 8020696:	4631      	mov	r1, r6
 8020698:	4628      	mov	r0, r5
 802069a:	47b8      	blx	r7
 802069c:	3001      	adds	r0, #1
 802069e:	d1be      	bne.n	802061e <_printf_float+0x32a>
 80206a0:	e689      	b.n	80203b6 <_printf_float+0xc2>
 80206a2:	9a05      	ldr	r2, [sp, #20]
 80206a4:	464b      	mov	r3, r9
 80206a6:	4442      	add	r2, r8
 80206a8:	4631      	mov	r1, r6
 80206aa:	4628      	mov	r0, r5
 80206ac:	47b8      	blx	r7
 80206ae:	3001      	adds	r0, #1
 80206b0:	d1c1      	bne.n	8020636 <_printf_float+0x342>
 80206b2:	e680      	b.n	80203b6 <_printf_float+0xc2>
 80206b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80206b6:	2a01      	cmp	r2, #1
 80206b8:	dc01      	bgt.n	80206be <_printf_float+0x3ca>
 80206ba:	07db      	lsls	r3, r3, #31
 80206bc:	d538      	bpl.n	8020730 <_printf_float+0x43c>
 80206be:	2301      	movs	r3, #1
 80206c0:	4642      	mov	r2, r8
 80206c2:	4631      	mov	r1, r6
 80206c4:	4628      	mov	r0, r5
 80206c6:	47b8      	blx	r7
 80206c8:	3001      	adds	r0, #1
 80206ca:	f43f ae74 	beq.w	80203b6 <_printf_float+0xc2>
 80206ce:	ee18 3a10 	vmov	r3, s16
 80206d2:	4652      	mov	r2, sl
 80206d4:	4631      	mov	r1, r6
 80206d6:	4628      	mov	r0, r5
 80206d8:	47b8      	blx	r7
 80206da:	3001      	adds	r0, #1
 80206dc:	f43f ae6b 	beq.w	80203b6 <_printf_float+0xc2>
 80206e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80206e4:	2200      	movs	r2, #0
 80206e6:	2300      	movs	r3, #0
 80206e8:	f7e0 fa16 	bl	8000b18 <__aeabi_dcmpeq>
 80206ec:	b9d8      	cbnz	r0, 8020726 <_printf_float+0x432>
 80206ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206f0:	f108 0201 	add.w	r2, r8, #1
 80206f4:	3b01      	subs	r3, #1
 80206f6:	4631      	mov	r1, r6
 80206f8:	4628      	mov	r0, r5
 80206fa:	47b8      	blx	r7
 80206fc:	3001      	adds	r0, #1
 80206fe:	d10e      	bne.n	802071e <_printf_float+0x42a>
 8020700:	e659      	b.n	80203b6 <_printf_float+0xc2>
 8020702:	2301      	movs	r3, #1
 8020704:	4652      	mov	r2, sl
 8020706:	4631      	mov	r1, r6
 8020708:	4628      	mov	r0, r5
 802070a:	47b8      	blx	r7
 802070c:	3001      	adds	r0, #1
 802070e:	f43f ae52 	beq.w	80203b6 <_printf_float+0xc2>
 8020712:	f108 0801 	add.w	r8, r8, #1
 8020716:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020718:	3b01      	subs	r3, #1
 802071a:	4543      	cmp	r3, r8
 802071c:	dcf1      	bgt.n	8020702 <_printf_float+0x40e>
 802071e:	464b      	mov	r3, r9
 8020720:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8020724:	e6dc      	b.n	80204e0 <_printf_float+0x1ec>
 8020726:	f04f 0800 	mov.w	r8, #0
 802072a:	f104 0a1a 	add.w	sl, r4, #26
 802072e:	e7f2      	b.n	8020716 <_printf_float+0x422>
 8020730:	2301      	movs	r3, #1
 8020732:	4642      	mov	r2, r8
 8020734:	e7df      	b.n	80206f6 <_printf_float+0x402>
 8020736:	2301      	movs	r3, #1
 8020738:	464a      	mov	r2, r9
 802073a:	4631      	mov	r1, r6
 802073c:	4628      	mov	r0, r5
 802073e:	47b8      	blx	r7
 8020740:	3001      	adds	r0, #1
 8020742:	f43f ae38 	beq.w	80203b6 <_printf_float+0xc2>
 8020746:	f108 0801 	add.w	r8, r8, #1
 802074a:	68e3      	ldr	r3, [r4, #12]
 802074c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802074e:	1a5b      	subs	r3, r3, r1
 8020750:	4543      	cmp	r3, r8
 8020752:	dcf0      	bgt.n	8020736 <_printf_float+0x442>
 8020754:	e6fa      	b.n	802054c <_printf_float+0x258>
 8020756:	f04f 0800 	mov.w	r8, #0
 802075a:	f104 0919 	add.w	r9, r4, #25
 802075e:	e7f4      	b.n	802074a <_printf_float+0x456>

08020760 <_printf_common>:
 8020760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020764:	4616      	mov	r6, r2
 8020766:	4699      	mov	r9, r3
 8020768:	688a      	ldr	r2, [r1, #8]
 802076a:	690b      	ldr	r3, [r1, #16]
 802076c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8020770:	4293      	cmp	r3, r2
 8020772:	bfb8      	it	lt
 8020774:	4613      	movlt	r3, r2
 8020776:	6033      	str	r3, [r6, #0]
 8020778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802077c:	4607      	mov	r7, r0
 802077e:	460c      	mov	r4, r1
 8020780:	b10a      	cbz	r2, 8020786 <_printf_common+0x26>
 8020782:	3301      	adds	r3, #1
 8020784:	6033      	str	r3, [r6, #0]
 8020786:	6823      	ldr	r3, [r4, #0]
 8020788:	0699      	lsls	r1, r3, #26
 802078a:	bf42      	ittt	mi
 802078c:	6833      	ldrmi	r3, [r6, #0]
 802078e:	3302      	addmi	r3, #2
 8020790:	6033      	strmi	r3, [r6, #0]
 8020792:	6825      	ldr	r5, [r4, #0]
 8020794:	f015 0506 	ands.w	r5, r5, #6
 8020798:	d106      	bne.n	80207a8 <_printf_common+0x48>
 802079a:	f104 0a19 	add.w	sl, r4, #25
 802079e:	68e3      	ldr	r3, [r4, #12]
 80207a0:	6832      	ldr	r2, [r6, #0]
 80207a2:	1a9b      	subs	r3, r3, r2
 80207a4:	42ab      	cmp	r3, r5
 80207a6:	dc26      	bgt.n	80207f6 <_printf_common+0x96>
 80207a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80207ac:	1e13      	subs	r3, r2, #0
 80207ae:	6822      	ldr	r2, [r4, #0]
 80207b0:	bf18      	it	ne
 80207b2:	2301      	movne	r3, #1
 80207b4:	0692      	lsls	r2, r2, #26
 80207b6:	d42b      	bmi.n	8020810 <_printf_common+0xb0>
 80207b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80207bc:	4649      	mov	r1, r9
 80207be:	4638      	mov	r0, r7
 80207c0:	47c0      	blx	r8
 80207c2:	3001      	adds	r0, #1
 80207c4:	d01e      	beq.n	8020804 <_printf_common+0xa4>
 80207c6:	6823      	ldr	r3, [r4, #0]
 80207c8:	68e5      	ldr	r5, [r4, #12]
 80207ca:	6832      	ldr	r2, [r6, #0]
 80207cc:	f003 0306 	and.w	r3, r3, #6
 80207d0:	2b04      	cmp	r3, #4
 80207d2:	bf08      	it	eq
 80207d4:	1aad      	subeq	r5, r5, r2
 80207d6:	68a3      	ldr	r3, [r4, #8]
 80207d8:	6922      	ldr	r2, [r4, #16]
 80207da:	bf0c      	ite	eq
 80207dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80207e0:	2500      	movne	r5, #0
 80207e2:	4293      	cmp	r3, r2
 80207e4:	bfc4      	itt	gt
 80207e6:	1a9b      	subgt	r3, r3, r2
 80207e8:	18ed      	addgt	r5, r5, r3
 80207ea:	2600      	movs	r6, #0
 80207ec:	341a      	adds	r4, #26
 80207ee:	42b5      	cmp	r5, r6
 80207f0:	d11a      	bne.n	8020828 <_printf_common+0xc8>
 80207f2:	2000      	movs	r0, #0
 80207f4:	e008      	b.n	8020808 <_printf_common+0xa8>
 80207f6:	2301      	movs	r3, #1
 80207f8:	4652      	mov	r2, sl
 80207fa:	4649      	mov	r1, r9
 80207fc:	4638      	mov	r0, r7
 80207fe:	47c0      	blx	r8
 8020800:	3001      	adds	r0, #1
 8020802:	d103      	bne.n	802080c <_printf_common+0xac>
 8020804:	f04f 30ff 	mov.w	r0, #4294967295
 8020808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802080c:	3501      	adds	r5, #1
 802080e:	e7c6      	b.n	802079e <_printf_common+0x3e>
 8020810:	18e1      	adds	r1, r4, r3
 8020812:	1c5a      	adds	r2, r3, #1
 8020814:	2030      	movs	r0, #48	; 0x30
 8020816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802081a:	4422      	add	r2, r4
 802081c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8020820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8020824:	3302      	adds	r3, #2
 8020826:	e7c7      	b.n	80207b8 <_printf_common+0x58>
 8020828:	2301      	movs	r3, #1
 802082a:	4622      	mov	r2, r4
 802082c:	4649      	mov	r1, r9
 802082e:	4638      	mov	r0, r7
 8020830:	47c0      	blx	r8
 8020832:	3001      	adds	r0, #1
 8020834:	d0e6      	beq.n	8020804 <_printf_common+0xa4>
 8020836:	3601      	adds	r6, #1
 8020838:	e7d9      	b.n	80207ee <_printf_common+0x8e>
	...

0802083c <_printf_i>:
 802083c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020840:	7e0f      	ldrb	r7, [r1, #24]
 8020842:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020844:	2f78      	cmp	r7, #120	; 0x78
 8020846:	4691      	mov	r9, r2
 8020848:	4680      	mov	r8, r0
 802084a:	460c      	mov	r4, r1
 802084c:	469a      	mov	sl, r3
 802084e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8020852:	d807      	bhi.n	8020864 <_printf_i+0x28>
 8020854:	2f62      	cmp	r7, #98	; 0x62
 8020856:	d80a      	bhi.n	802086e <_printf_i+0x32>
 8020858:	2f00      	cmp	r7, #0
 802085a:	f000 80d8 	beq.w	8020a0e <_printf_i+0x1d2>
 802085e:	2f58      	cmp	r7, #88	; 0x58
 8020860:	f000 80a3 	beq.w	80209aa <_printf_i+0x16e>
 8020864:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8020868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802086c:	e03a      	b.n	80208e4 <_printf_i+0xa8>
 802086e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8020872:	2b15      	cmp	r3, #21
 8020874:	d8f6      	bhi.n	8020864 <_printf_i+0x28>
 8020876:	a101      	add	r1, pc, #4	; (adr r1, 802087c <_printf_i+0x40>)
 8020878:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802087c:	080208d5 	.word	0x080208d5
 8020880:	080208e9 	.word	0x080208e9
 8020884:	08020865 	.word	0x08020865
 8020888:	08020865 	.word	0x08020865
 802088c:	08020865 	.word	0x08020865
 8020890:	08020865 	.word	0x08020865
 8020894:	080208e9 	.word	0x080208e9
 8020898:	08020865 	.word	0x08020865
 802089c:	08020865 	.word	0x08020865
 80208a0:	08020865 	.word	0x08020865
 80208a4:	08020865 	.word	0x08020865
 80208a8:	080209f5 	.word	0x080209f5
 80208ac:	08020919 	.word	0x08020919
 80208b0:	080209d7 	.word	0x080209d7
 80208b4:	08020865 	.word	0x08020865
 80208b8:	08020865 	.word	0x08020865
 80208bc:	08020a17 	.word	0x08020a17
 80208c0:	08020865 	.word	0x08020865
 80208c4:	08020919 	.word	0x08020919
 80208c8:	08020865 	.word	0x08020865
 80208cc:	08020865 	.word	0x08020865
 80208d0:	080209df 	.word	0x080209df
 80208d4:	682b      	ldr	r3, [r5, #0]
 80208d6:	1d1a      	adds	r2, r3, #4
 80208d8:	681b      	ldr	r3, [r3, #0]
 80208da:	602a      	str	r2, [r5, #0]
 80208dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80208e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80208e4:	2301      	movs	r3, #1
 80208e6:	e0a3      	b.n	8020a30 <_printf_i+0x1f4>
 80208e8:	6820      	ldr	r0, [r4, #0]
 80208ea:	6829      	ldr	r1, [r5, #0]
 80208ec:	0606      	lsls	r6, r0, #24
 80208ee:	f101 0304 	add.w	r3, r1, #4
 80208f2:	d50a      	bpl.n	802090a <_printf_i+0xce>
 80208f4:	680e      	ldr	r6, [r1, #0]
 80208f6:	602b      	str	r3, [r5, #0]
 80208f8:	2e00      	cmp	r6, #0
 80208fa:	da03      	bge.n	8020904 <_printf_i+0xc8>
 80208fc:	232d      	movs	r3, #45	; 0x2d
 80208fe:	4276      	negs	r6, r6
 8020900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020904:	485e      	ldr	r0, [pc, #376]	; (8020a80 <_printf_i+0x244>)
 8020906:	230a      	movs	r3, #10
 8020908:	e019      	b.n	802093e <_printf_i+0x102>
 802090a:	680e      	ldr	r6, [r1, #0]
 802090c:	602b      	str	r3, [r5, #0]
 802090e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020912:	bf18      	it	ne
 8020914:	b236      	sxthne	r6, r6
 8020916:	e7ef      	b.n	80208f8 <_printf_i+0xbc>
 8020918:	682b      	ldr	r3, [r5, #0]
 802091a:	6820      	ldr	r0, [r4, #0]
 802091c:	1d19      	adds	r1, r3, #4
 802091e:	6029      	str	r1, [r5, #0]
 8020920:	0601      	lsls	r1, r0, #24
 8020922:	d501      	bpl.n	8020928 <_printf_i+0xec>
 8020924:	681e      	ldr	r6, [r3, #0]
 8020926:	e002      	b.n	802092e <_printf_i+0xf2>
 8020928:	0646      	lsls	r6, r0, #25
 802092a:	d5fb      	bpl.n	8020924 <_printf_i+0xe8>
 802092c:	881e      	ldrh	r6, [r3, #0]
 802092e:	4854      	ldr	r0, [pc, #336]	; (8020a80 <_printf_i+0x244>)
 8020930:	2f6f      	cmp	r7, #111	; 0x6f
 8020932:	bf0c      	ite	eq
 8020934:	2308      	moveq	r3, #8
 8020936:	230a      	movne	r3, #10
 8020938:	2100      	movs	r1, #0
 802093a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802093e:	6865      	ldr	r5, [r4, #4]
 8020940:	60a5      	str	r5, [r4, #8]
 8020942:	2d00      	cmp	r5, #0
 8020944:	bfa2      	ittt	ge
 8020946:	6821      	ldrge	r1, [r4, #0]
 8020948:	f021 0104 	bicge.w	r1, r1, #4
 802094c:	6021      	strge	r1, [r4, #0]
 802094e:	b90e      	cbnz	r6, 8020954 <_printf_i+0x118>
 8020950:	2d00      	cmp	r5, #0
 8020952:	d04d      	beq.n	80209f0 <_printf_i+0x1b4>
 8020954:	4615      	mov	r5, r2
 8020956:	fbb6 f1f3 	udiv	r1, r6, r3
 802095a:	fb03 6711 	mls	r7, r3, r1, r6
 802095e:	5dc7      	ldrb	r7, [r0, r7]
 8020960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8020964:	4637      	mov	r7, r6
 8020966:	42bb      	cmp	r3, r7
 8020968:	460e      	mov	r6, r1
 802096a:	d9f4      	bls.n	8020956 <_printf_i+0x11a>
 802096c:	2b08      	cmp	r3, #8
 802096e:	d10b      	bne.n	8020988 <_printf_i+0x14c>
 8020970:	6823      	ldr	r3, [r4, #0]
 8020972:	07de      	lsls	r6, r3, #31
 8020974:	d508      	bpl.n	8020988 <_printf_i+0x14c>
 8020976:	6923      	ldr	r3, [r4, #16]
 8020978:	6861      	ldr	r1, [r4, #4]
 802097a:	4299      	cmp	r1, r3
 802097c:	bfde      	ittt	le
 802097e:	2330      	movle	r3, #48	; 0x30
 8020980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8020984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8020988:	1b52      	subs	r2, r2, r5
 802098a:	6122      	str	r2, [r4, #16]
 802098c:	f8cd a000 	str.w	sl, [sp]
 8020990:	464b      	mov	r3, r9
 8020992:	aa03      	add	r2, sp, #12
 8020994:	4621      	mov	r1, r4
 8020996:	4640      	mov	r0, r8
 8020998:	f7ff fee2 	bl	8020760 <_printf_common>
 802099c:	3001      	adds	r0, #1
 802099e:	d14c      	bne.n	8020a3a <_printf_i+0x1fe>
 80209a0:	f04f 30ff 	mov.w	r0, #4294967295
 80209a4:	b004      	add	sp, #16
 80209a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80209aa:	4835      	ldr	r0, [pc, #212]	; (8020a80 <_printf_i+0x244>)
 80209ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80209b0:	6829      	ldr	r1, [r5, #0]
 80209b2:	6823      	ldr	r3, [r4, #0]
 80209b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80209b8:	6029      	str	r1, [r5, #0]
 80209ba:	061d      	lsls	r5, r3, #24
 80209bc:	d514      	bpl.n	80209e8 <_printf_i+0x1ac>
 80209be:	07df      	lsls	r7, r3, #31
 80209c0:	bf44      	itt	mi
 80209c2:	f043 0320 	orrmi.w	r3, r3, #32
 80209c6:	6023      	strmi	r3, [r4, #0]
 80209c8:	b91e      	cbnz	r6, 80209d2 <_printf_i+0x196>
 80209ca:	6823      	ldr	r3, [r4, #0]
 80209cc:	f023 0320 	bic.w	r3, r3, #32
 80209d0:	6023      	str	r3, [r4, #0]
 80209d2:	2310      	movs	r3, #16
 80209d4:	e7b0      	b.n	8020938 <_printf_i+0xfc>
 80209d6:	6823      	ldr	r3, [r4, #0]
 80209d8:	f043 0320 	orr.w	r3, r3, #32
 80209dc:	6023      	str	r3, [r4, #0]
 80209de:	2378      	movs	r3, #120	; 0x78
 80209e0:	4828      	ldr	r0, [pc, #160]	; (8020a84 <_printf_i+0x248>)
 80209e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80209e6:	e7e3      	b.n	80209b0 <_printf_i+0x174>
 80209e8:	0659      	lsls	r1, r3, #25
 80209ea:	bf48      	it	mi
 80209ec:	b2b6      	uxthmi	r6, r6
 80209ee:	e7e6      	b.n	80209be <_printf_i+0x182>
 80209f0:	4615      	mov	r5, r2
 80209f2:	e7bb      	b.n	802096c <_printf_i+0x130>
 80209f4:	682b      	ldr	r3, [r5, #0]
 80209f6:	6826      	ldr	r6, [r4, #0]
 80209f8:	6961      	ldr	r1, [r4, #20]
 80209fa:	1d18      	adds	r0, r3, #4
 80209fc:	6028      	str	r0, [r5, #0]
 80209fe:	0635      	lsls	r5, r6, #24
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	d501      	bpl.n	8020a08 <_printf_i+0x1cc>
 8020a04:	6019      	str	r1, [r3, #0]
 8020a06:	e002      	b.n	8020a0e <_printf_i+0x1d2>
 8020a08:	0670      	lsls	r0, r6, #25
 8020a0a:	d5fb      	bpl.n	8020a04 <_printf_i+0x1c8>
 8020a0c:	8019      	strh	r1, [r3, #0]
 8020a0e:	2300      	movs	r3, #0
 8020a10:	6123      	str	r3, [r4, #16]
 8020a12:	4615      	mov	r5, r2
 8020a14:	e7ba      	b.n	802098c <_printf_i+0x150>
 8020a16:	682b      	ldr	r3, [r5, #0]
 8020a18:	1d1a      	adds	r2, r3, #4
 8020a1a:	602a      	str	r2, [r5, #0]
 8020a1c:	681d      	ldr	r5, [r3, #0]
 8020a1e:	6862      	ldr	r2, [r4, #4]
 8020a20:	2100      	movs	r1, #0
 8020a22:	4628      	mov	r0, r5
 8020a24:	f7df fc04 	bl	8000230 <memchr>
 8020a28:	b108      	cbz	r0, 8020a2e <_printf_i+0x1f2>
 8020a2a:	1b40      	subs	r0, r0, r5
 8020a2c:	6060      	str	r0, [r4, #4]
 8020a2e:	6863      	ldr	r3, [r4, #4]
 8020a30:	6123      	str	r3, [r4, #16]
 8020a32:	2300      	movs	r3, #0
 8020a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8020a38:	e7a8      	b.n	802098c <_printf_i+0x150>
 8020a3a:	6923      	ldr	r3, [r4, #16]
 8020a3c:	462a      	mov	r2, r5
 8020a3e:	4649      	mov	r1, r9
 8020a40:	4640      	mov	r0, r8
 8020a42:	47d0      	blx	sl
 8020a44:	3001      	adds	r0, #1
 8020a46:	d0ab      	beq.n	80209a0 <_printf_i+0x164>
 8020a48:	6823      	ldr	r3, [r4, #0]
 8020a4a:	079b      	lsls	r3, r3, #30
 8020a4c:	d413      	bmi.n	8020a76 <_printf_i+0x23a>
 8020a4e:	68e0      	ldr	r0, [r4, #12]
 8020a50:	9b03      	ldr	r3, [sp, #12]
 8020a52:	4298      	cmp	r0, r3
 8020a54:	bfb8      	it	lt
 8020a56:	4618      	movlt	r0, r3
 8020a58:	e7a4      	b.n	80209a4 <_printf_i+0x168>
 8020a5a:	2301      	movs	r3, #1
 8020a5c:	4632      	mov	r2, r6
 8020a5e:	4649      	mov	r1, r9
 8020a60:	4640      	mov	r0, r8
 8020a62:	47d0      	blx	sl
 8020a64:	3001      	adds	r0, #1
 8020a66:	d09b      	beq.n	80209a0 <_printf_i+0x164>
 8020a68:	3501      	adds	r5, #1
 8020a6a:	68e3      	ldr	r3, [r4, #12]
 8020a6c:	9903      	ldr	r1, [sp, #12]
 8020a6e:	1a5b      	subs	r3, r3, r1
 8020a70:	42ab      	cmp	r3, r5
 8020a72:	dcf2      	bgt.n	8020a5a <_printf_i+0x21e>
 8020a74:	e7eb      	b.n	8020a4e <_printf_i+0x212>
 8020a76:	2500      	movs	r5, #0
 8020a78:	f104 0619 	add.w	r6, r4, #25
 8020a7c:	e7f5      	b.n	8020a6a <_printf_i+0x22e>
 8020a7e:	bf00      	nop
 8020a80:	080235f6 	.word	0x080235f6
 8020a84:	08023607 	.word	0x08023607

08020a88 <iprintf>:
 8020a88:	b40f      	push	{r0, r1, r2, r3}
 8020a8a:	4b0a      	ldr	r3, [pc, #40]	; (8020ab4 <iprintf+0x2c>)
 8020a8c:	b513      	push	{r0, r1, r4, lr}
 8020a8e:	681c      	ldr	r4, [r3, #0]
 8020a90:	b124      	cbz	r4, 8020a9c <iprintf+0x14>
 8020a92:	69a3      	ldr	r3, [r4, #24]
 8020a94:	b913      	cbnz	r3, 8020a9c <iprintf+0x14>
 8020a96:	4620      	mov	r0, r4
 8020a98:	f001 f8ee 	bl	8021c78 <__sinit>
 8020a9c:	ab05      	add	r3, sp, #20
 8020a9e:	9a04      	ldr	r2, [sp, #16]
 8020aa0:	68a1      	ldr	r1, [r4, #8]
 8020aa2:	9301      	str	r3, [sp, #4]
 8020aa4:	4620      	mov	r0, r4
 8020aa6:	f001 fe9d 	bl	80227e4 <_vfiprintf_r>
 8020aaa:	b002      	add	sp, #8
 8020aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ab0:	b004      	add	sp, #16
 8020ab2:	4770      	bx	lr
 8020ab4:	2000002c 	.word	0x2000002c

08020ab8 <putchar>:
 8020ab8:	4b09      	ldr	r3, [pc, #36]	; (8020ae0 <putchar+0x28>)
 8020aba:	b513      	push	{r0, r1, r4, lr}
 8020abc:	681c      	ldr	r4, [r3, #0]
 8020abe:	4601      	mov	r1, r0
 8020ac0:	b134      	cbz	r4, 8020ad0 <putchar+0x18>
 8020ac2:	69a3      	ldr	r3, [r4, #24]
 8020ac4:	b923      	cbnz	r3, 8020ad0 <putchar+0x18>
 8020ac6:	9001      	str	r0, [sp, #4]
 8020ac8:	4620      	mov	r0, r4
 8020aca:	f001 f8d5 	bl	8021c78 <__sinit>
 8020ace:	9901      	ldr	r1, [sp, #4]
 8020ad0:	68a2      	ldr	r2, [r4, #8]
 8020ad2:	4620      	mov	r0, r4
 8020ad4:	b002      	add	sp, #8
 8020ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020ada:	f001 bfb3 	b.w	8022a44 <_putc_r>
 8020ade:	bf00      	nop
 8020ae0:	2000002c 	.word	0x2000002c

08020ae4 <_puts_r>:
 8020ae4:	b570      	push	{r4, r5, r6, lr}
 8020ae6:	460e      	mov	r6, r1
 8020ae8:	4605      	mov	r5, r0
 8020aea:	b118      	cbz	r0, 8020af4 <_puts_r+0x10>
 8020aec:	6983      	ldr	r3, [r0, #24]
 8020aee:	b90b      	cbnz	r3, 8020af4 <_puts_r+0x10>
 8020af0:	f001 f8c2 	bl	8021c78 <__sinit>
 8020af4:	69ab      	ldr	r3, [r5, #24]
 8020af6:	68ac      	ldr	r4, [r5, #8]
 8020af8:	b913      	cbnz	r3, 8020b00 <_puts_r+0x1c>
 8020afa:	4628      	mov	r0, r5
 8020afc:	f001 f8bc 	bl	8021c78 <__sinit>
 8020b00:	4b2c      	ldr	r3, [pc, #176]	; (8020bb4 <_puts_r+0xd0>)
 8020b02:	429c      	cmp	r4, r3
 8020b04:	d120      	bne.n	8020b48 <_puts_r+0x64>
 8020b06:	686c      	ldr	r4, [r5, #4]
 8020b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b0a:	07db      	lsls	r3, r3, #31
 8020b0c:	d405      	bmi.n	8020b1a <_puts_r+0x36>
 8020b0e:	89a3      	ldrh	r3, [r4, #12]
 8020b10:	0598      	lsls	r0, r3, #22
 8020b12:	d402      	bmi.n	8020b1a <_puts_r+0x36>
 8020b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b16:	f001 f952 	bl	8021dbe <__retarget_lock_acquire_recursive>
 8020b1a:	89a3      	ldrh	r3, [r4, #12]
 8020b1c:	0719      	lsls	r1, r3, #28
 8020b1e:	d51d      	bpl.n	8020b5c <_puts_r+0x78>
 8020b20:	6923      	ldr	r3, [r4, #16]
 8020b22:	b1db      	cbz	r3, 8020b5c <_puts_r+0x78>
 8020b24:	3e01      	subs	r6, #1
 8020b26:	68a3      	ldr	r3, [r4, #8]
 8020b28:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8020b2c:	3b01      	subs	r3, #1
 8020b2e:	60a3      	str	r3, [r4, #8]
 8020b30:	bb39      	cbnz	r1, 8020b82 <_puts_r+0x9e>
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	da38      	bge.n	8020ba8 <_puts_r+0xc4>
 8020b36:	4622      	mov	r2, r4
 8020b38:	210a      	movs	r1, #10
 8020b3a:	4628      	mov	r0, r5
 8020b3c:	f000 f848 	bl	8020bd0 <__swbuf_r>
 8020b40:	3001      	adds	r0, #1
 8020b42:	d011      	beq.n	8020b68 <_puts_r+0x84>
 8020b44:	250a      	movs	r5, #10
 8020b46:	e011      	b.n	8020b6c <_puts_r+0x88>
 8020b48:	4b1b      	ldr	r3, [pc, #108]	; (8020bb8 <_puts_r+0xd4>)
 8020b4a:	429c      	cmp	r4, r3
 8020b4c:	d101      	bne.n	8020b52 <_puts_r+0x6e>
 8020b4e:	68ac      	ldr	r4, [r5, #8]
 8020b50:	e7da      	b.n	8020b08 <_puts_r+0x24>
 8020b52:	4b1a      	ldr	r3, [pc, #104]	; (8020bbc <_puts_r+0xd8>)
 8020b54:	429c      	cmp	r4, r3
 8020b56:	bf08      	it	eq
 8020b58:	68ec      	ldreq	r4, [r5, #12]
 8020b5a:	e7d5      	b.n	8020b08 <_puts_r+0x24>
 8020b5c:	4621      	mov	r1, r4
 8020b5e:	4628      	mov	r0, r5
 8020b60:	f000 f888 	bl	8020c74 <__swsetup_r>
 8020b64:	2800      	cmp	r0, #0
 8020b66:	d0dd      	beq.n	8020b24 <_puts_r+0x40>
 8020b68:	f04f 35ff 	mov.w	r5, #4294967295
 8020b6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8020b6e:	07da      	lsls	r2, r3, #31
 8020b70:	d405      	bmi.n	8020b7e <_puts_r+0x9a>
 8020b72:	89a3      	ldrh	r3, [r4, #12]
 8020b74:	059b      	lsls	r3, r3, #22
 8020b76:	d402      	bmi.n	8020b7e <_puts_r+0x9a>
 8020b78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8020b7a:	f001 f921 	bl	8021dc0 <__retarget_lock_release_recursive>
 8020b7e:	4628      	mov	r0, r5
 8020b80:	bd70      	pop	{r4, r5, r6, pc}
 8020b82:	2b00      	cmp	r3, #0
 8020b84:	da04      	bge.n	8020b90 <_puts_r+0xac>
 8020b86:	69a2      	ldr	r2, [r4, #24]
 8020b88:	429a      	cmp	r2, r3
 8020b8a:	dc06      	bgt.n	8020b9a <_puts_r+0xb6>
 8020b8c:	290a      	cmp	r1, #10
 8020b8e:	d004      	beq.n	8020b9a <_puts_r+0xb6>
 8020b90:	6823      	ldr	r3, [r4, #0]
 8020b92:	1c5a      	adds	r2, r3, #1
 8020b94:	6022      	str	r2, [r4, #0]
 8020b96:	7019      	strb	r1, [r3, #0]
 8020b98:	e7c5      	b.n	8020b26 <_puts_r+0x42>
 8020b9a:	4622      	mov	r2, r4
 8020b9c:	4628      	mov	r0, r5
 8020b9e:	f000 f817 	bl	8020bd0 <__swbuf_r>
 8020ba2:	3001      	adds	r0, #1
 8020ba4:	d1bf      	bne.n	8020b26 <_puts_r+0x42>
 8020ba6:	e7df      	b.n	8020b68 <_puts_r+0x84>
 8020ba8:	6823      	ldr	r3, [r4, #0]
 8020baa:	250a      	movs	r5, #10
 8020bac:	1c5a      	adds	r2, r3, #1
 8020bae:	6022      	str	r2, [r4, #0]
 8020bb0:	701d      	strb	r5, [r3, #0]
 8020bb2:	e7db      	b.n	8020b6c <_puts_r+0x88>
 8020bb4:	080236c8 	.word	0x080236c8
 8020bb8:	080236e8 	.word	0x080236e8
 8020bbc:	080236a8 	.word	0x080236a8

08020bc0 <puts>:
 8020bc0:	4b02      	ldr	r3, [pc, #8]	; (8020bcc <puts+0xc>)
 8020bc2:	4601      	mov	r1, r0
 8020bc4:	6818      	ldr	r0, [r3, #0]
 8020bc6:	f7ff bf8d 	b.w	8020ae4 <_puts_r>
 8020bca:	bf00      	nop
 8020bcc:	2000002c 	.word	0x2000002c

08020bd0 <__swbuf_r>:
 8020bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bd2:	460e      	mov	r6, r1
 8020bd4:	4614      	mov	r4, r2
 8020bd6:	4605      	mov	r5, r0
 8020bd8:	b118      	cbz	r0, 8020be2 <__swbuf_r+0x12>
 8020bda:	6983      	ldr	r3, [r0, #24]
 8020bdc:	b90b      	cbnz	r3, 8020be2 <__swbuf_r+0x12>
 8020bde:	f001 f84b 	bl	8021c78 <__sinit>
 8020be2:	4b21      	ldr	r3, [pc, #132]	; (8020c68 <__swbuf_r+0x98>)
 8020be4:	429c      	cmp	r4, r3
 8020be6:	d12b      	bne.n	8020c40 <__swbuf_r+0x70>
 8020be8:	686c      	ldr	r4, [r5, #4]
 8020bea:	69a3      	ldr	r3, [r4, #24]
 8020bec:	60a3      	str	r3, [r4, #8]
 8020bee:	89a3      	ldrh	r3, [r4, #12]
 8020bf0:	071a      	lsls	r2, r3, #28
 8020bf2:	d52f      	bpl.n	8020c54 <__swbuf_r+0x84>
 8020bf4:	6923      	ldr	r3, [r4, #16]
 8020bf6:	b36b      	cbz	r3, 8020c54 <__swbuf_r+0x84>
 8020bf8:	6923      	ldr	r3, [r4, #16]
 8020bfa:	6820      	ldr	r0, [r4, #0]
 8020bfc:	1ac0      	subs	r0, r0, r3
 8020bfe:	6963      	ldr	r3, [r4, #20]
 8020c00:	b2f6      	uxtb	r6, r6
 8020c02:	4283      	cmp	r3, r0
 8020c04:	4637      	mov	r7, r6
 8020c06:	dc04      	bgt.n	8020c12 <__swbuf_r+0x42>
 8020c08:	4621      	mov	r1, r4
 8020c0a:	4628      	mov	r0, r5
 8020c0c:	f000 ffa0 	bl	8021b50 <_fflush_r>
 8020c10:	bb30      	cbnz	r0, 8020c60 <__swbuf_r+0x90>
 8020c12:	68a3      	ldr	r3, [r4, #8]
 8020c14:	3b01      	subs	r3, #1
 8020c16:	60a3      	str	r3, [r4, #8]
 8020c18:	6823      	ldr	r3, [r4, #0]
 8020c1a:	1c5a      	adds	r2, r3, #1
 8020c1c:	6022      	str	r2, [r4, #0]
 8020c1e:	701e      	strb	r6, [r3, #0]
 8020c20:	6963      	ldr	r3, [r4, #20]
 8020c22:	3001      	adds	r0, #1
 8020c24:	4283      	cmp	r3, r0
 8020c26:	d004      	beq.n	8020c32 <__swbuf_r+0x62>
 8020c28:	89a3      	ldrh	r3, [r4, #12]
 8020c2a:	07db      	lsls	r3, r3, #31
 8020c2c:	d506      	bpl.n	8020c3c <__swbuf_r+0x6c>
 8020c2e:	2e0a      	cmp	r6, #10
 8020c30:	d104      	bne.n	8020c3c <__swbuf_r+0x6c>
 8020c32:	4621      	mov	r1, r4
 8020c34:	4628      	mov	r0, r5
 8020c36:	f000 ff8b 	bl	8021b50 <_fflush_r>
 8020c3a:	b988      	cbnz	r0, 8020c60 <__swbuf_r+0x90>
 8020c3c:	4638      	mov	r0, r7
 8020c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c40:	4b0a      	ldr	r3, [pc, #40]	; (8020c6c <__swbuf_r+0x9c>)
 8020c42:	429c      	cmp	r4, r3
 8020c44:	d101      	bne.n	8020c4a <__swbuf_r+0x7a>
 8020c46:	68ac      	ldr	r4, [r5, #8]
 8020c48:	e7cf      	b.n	8020bea <__swbuf_r+0x1a>
 8020c4a:	4b09      	ldr	r3, [pc, #36]	; (8020c70 <__swbuf_r+0xa0>)
 8020c4c:	429c      	cmp	r4, r3
 8020c4e:	bf08      	it	eq
 8020c50:	68ec      	ldreq	r4, [r5, #12]
 8020c52:	e7ca      	b.n	8020bea <__swbuf_r+0x1a>
 8020c54:	4621      	mov	r1, r4
 8020c56:	4628      	mov	r0, r5
 8020c58:	f000 f80c 	bl	8020c74 <__swsetup_r>
 8020c5c:	2800      	cmp	r0, #0
 8020c5e:	d0cb      	beq.n	8020bf8 <__swbuf_r+0x28>
 8020c60:	f04f 37ff 	mov.w	r7, #4294967295
 8020c64:	e7ea      	b.n	8020c3c <__swbuf_r+0x6c>
 8020c66:	bf00      	nop
 8020c68:	080236c8 	.word	0x080236c8
 8020c6c:	080236e8 	.word	0x080236e8
 8020c70:	080236a8 	.word	0x080236a8

08020c74 <__swsetup_r>:
 8020c74:	4b32      	ldr	r3, [pc, #200]	; (8020d40 <__swsetup_r+0xcc>)
 8020c76:	b570      	push	{r4, r5, r6, lr}
 8020c78:	681d      	ldr	r5, [r3, #0]
 8020c7a:	4606      	mov	r6, r0
 8020c7c:	460c      	mov	r4, r1
 8020c7e:	b125      	cbz	r5, 8020c8a <__swsetup_r+0x16>
 8020c80:	69ab      	ldr	r3, [r5, #24]
 8020c82:	b913      	cbnz	r3, 8020c8a <__swsetup_r+0x16>
 8020c84:	4628      	mov	r0, r5
 8020c86:	f000 fff7 	bl	8021c78 <__sinit>
 8020c8a:	4b2e      	ldr	r3, [pc, #184]	; (8020d44 <__swsetup_r+0xd0>)
 8020c8c:	429c      	cmp	r4, r3
 8020c8e:	d10f      	bne.n	8020cb0 <__swsetup_r+0x3c>
 8020c90:	686c      	ldr	r4, [r5, #4]
 8020c92:	89a3      	ldrh	r3, [r4, #12]
 8020c94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020c98:	0719      	lsls	r1, r3, #28
 8020c9a:	d42c      	bmi.n	8020cf6 <__swsetup_r+0x82>
 8020c9c:	06dd      	lsls	r5, r3, #27
 8020c9e:	d411      	bmi.n	8020cc4 <__swsetup_r+0x50>
 8020ca0:	2309      	movs	r3, #9
 8020ca2:	6033      	str	r3, [r6, #0]
 8020ca4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8020ca8:	81a3      	strh	r3, [r4, #12]
 8020caa:	f04f 30ff 	mov.w	r0, #4294967295
 8020cae:	e03e      	b.n	8020d2e <__swsetup_r+0xba>
 8020cb0:	4b25      	ldr	r3, [pc, #148]	; (8020d48 <__swsetup_r+0xd4>)
 8020cb2:	429c      	cmp	r4, r3
 8020cb4:	d101      	bne.n	8020cba <__swsetup_r+0x46>
 8020cb6:	68ac      	ldr	r4, [r5, #8]
 8020cb8:	e7eb      	b.n	8020c92 <__swsetup_r+0x1e>
 8020cba:	4b24      	ldr	r3, [pc, #144]	; (8020d4c <__swsetup_r+0xd8>)
 8020cbc:	429c      	cmp	r4, r3
 8020cbe:	bf08      	it	eq
 8020cc0:	68ec      	ldreq	r4, [r5, #12]
 8020cc2:	e7e6      	b.n	8020c92 <__swsetup_r+0x1e>
 8020cc4:	0758      	lsls	r0, r3, #29
 8020cc6:	d512      	bpl.n	8020cee <__swsetup_r+0x7a>
 8020cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8020cca:	b141      	cbz	r1, 8020cde <__swsetup_r+0x6a>
 8020ccc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8020cd0:	4299      	cmp	r1, r3
 8020cd2:	d002      	beq.n	8020cda <__swsetup_r+0x66>
 8020cd4:	4630      	mov	r0, r6
 8020cd6:	f001 fc7b 	bl	80225d0 <_free_r>
 8020cda:	2300      	movs	r3, #0
 8020cdc:	6363      	str	r3, [r4, #52]	; 0x34
 8020cde:	89a3      	ldrh	r3, [r4, #12]
 8020ce0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8020ce4:	81a3      	strh	r3, [r4, #12]
 8020ce6:	2300      	movs	r3, #0
 8020ce8:	6063      	str	r3, [r4, #4]
 8020cea:	6923      	ldr	r3, [r4, #16]
 8020cec:	6023      	str	r3, [r4, #0]
 8020cee:	89a3      	ldrh	r3, [r4, #12]
 8020cf0:	f043 0308 	orr.w	r3, r3, #8
 8020cf4:	81a3      	strh	r3, [r4, #12]
 8020cf6:	6923      	ldr	r3, [r4, #16]
 8020cf8:	b94b      	cbnz	r3, 8020d0e <__swsetup_r+0x9a>
 8020cfa:	89a3      	ldrh	r3, [r4, #12]
 8020cfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8020d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020d04:	d003      	beq.n	8020d0e <__swsetup_r+0x9a>
 8020d06:	4621      	mov	r1, r4
 8020d08:	4630      	mov	r0, r6
 8020d0a:	f001 f87f 	bl	8021e0c <__smakebuf_r>
 8020d0e:	89a0      	ldrh	r0, [r4, #12]
 8020d10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020d14:	f010 0301 	ands.w	r3, r0, #1
 8020d18:	d00a      	beq.n	8020d30 <__swsetup_r+0xbc>
 8020d1a:	2300      	movs	r3, #0
 8020d1c:	60a3      	str	r3, [r4, #8]
 8020d1e:	6963      	ldr	r3, [r4, #20]
 8020d20:	425b      	negs	r3, r3
 8020d22:	61a3      	str	r3, [r4, #24]
 8020d24:	6923      	ldr	r3, [r4, #16]
 8020d26:	b943      	cbnz	r3, 8020d3a <__swsetup_r+0xc6>
 8020d28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8020d2c:	d1ba      	bne.n	8020ca4 <__swsetup_r+0x30>
 8020d2e:	bd70      	pop	{r4, r5, r6, pc}
 8020d30:	0781      	lsls	r1, r0, #30
 8020d32:	bf58      	it	pl
 8020d34:	6963      	ldrpl	r3, [r4, #20]
 8020d36:	60a3      	str	r3, [r4, #8]
 8020d38:	e7f4      	b.n	8020d24 <__swsetup_r+0xb0>
 8020d3a:	2000      	movs	r0, #0
 8020d3c:	e7f7      	b.n	8020d2e <__swsetup_r+0xba>
 8020d3e:	bf00      	nop
 8020d40:	2000002c 	.word	0x2000002c
 8020d44:	080236c8 	.word	0x080236c8
 8020d48:	080236e8 	.word	0x080236e8
 8020d4c:	080236a8 	.word	0x080236a8

08020d50 <quorem>:
 8020d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d54:	6903      	ldr	r3, [r0, #16]
 8020d56:	690c      	ldr	r4, [r1, #16]
 8020d58:	42a3      	cmp	r3, r4
 8020d5a:	4607      	mov	r7, r0
 8020d5c:	f2c0 8081 	blt.w	8020e62 <quorem+0x112>
 8020d60:	3c01      	subs	r4, #1
 8020d62:	f101 0814 	add.w	r8, r1, #20
 8020d66:	f100 0514 	add.w	r5, r0, #20
 8020d6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020d6e:	9301      	str	r3, [sp, #4]
 8020d70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8020d74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020d78:	3301      	adds	r3, #1
 8020d7a:	429a      	cmp	r2, r3
 8020d7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020d80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020d84:	fbb2 f6f3 	udiv	r6, r2, r3
 8020d88:	d331      	bcc.n	8020dee <quorem+0x9e>
 8020d8a:	f04f 0e00 	mov.w	lr, #0
 8020d8e:	4640      	mov	r0, r8
 8020d90:	46ac      	mov	ip, r5
 8020d92:	46f2      	mov	sl, lr
 8020d94:	f850 2b04 	ldr.w	r2, [r0], #4
 8020d98:	b293      	uxth	r3, r2
 8020d9a:	fb06 e303 	mla	r3, r6, r3, lr
 8020d9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8020da2:	b29b      	uxth	r3, r3
 8020da4:	ebaa 0303 	sub.w	r3, sl, r3
 8020da8:	f8dc a000 	ldr.w	sl, [ip]
 8020dac:	0c12      	lsrs	r2, r2, #16
 8020dae:	fa13 f38a 	uxtah	r3, r3, sl
 8020db2:	fb06 e202 	mla	r2, r6, r2, lr
 8020db6:	9300      	str	r3, [sp, #0]
 8020db8:	9b00      	ldr	r3, [sp, #0]
 8020dba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020dbe:	b292      	uxth	r2, r2
 8020dc0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8020dc4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020dc8:	f8bd 3000 	ldrh.w	r3, [sp]
 8020dcc:	4581      	cmp	r9, r0
 8020dce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020dd2:	f84c 3b04 	str.w	r3, [ip], #4
 8020dd6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020dda:	d2db      	bcs.n	8020d94 <quorem+0x44>
 8020ddc:	f855 300b 	ldr.w	r3, [r5, fp]
 8020de0:	b92b      	cbnz	r3, 8020dee <quorem+0x9e>
 8020de2:	9b01      	ldr	r3, [sp, #4]
 8020de4:	3b04      	subs	r3, #4
 8020de6:	429d      	cmp	r5, r3
 8020de8:	461a      	mov	r2, r3
 8020dea:	d32e      	bcc.n	8020e4a <quorem+0xfa>
 8020dec:	613c      	str	r4, [r7, #16]
 8020dee:	4638      	mov	r0, r7
 8020df0:	f001 fad6 	bl	80223a0 <__mcmp>
 8020df4:	2800      	cmp	r0, #0
 8020df6:	db24      	blt.n	8020e42 <quorem+0xf2>
 8020df8:	3601      	adds	r6, #1
 8020dfa:	4628      	mov	r0, r5
 8020dfc:	f04f 0c00 	mov.w	ip, #0
 8020e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8020e04:	f8d0 e000 	ldr.w	lr, [r0]
 8020e08:	b293      	uxth	r3, r2
 8020e0a:	ebac 0303 	sub.w	r3, ip, r3
 8020e0e:	0c12      	lsrs	r2, r2, #16
 8020e10:	fa13 f38e 	uxtah	r3, r3, lr
 8020e14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020e18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020e1c:	b29b      	uxth	r3, r3
 8020e1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8020e22:	45c1      	cmp	r9, r8
 8020e24:	f840 3b04 	str.w	r3, [r0], #4
 8020e28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8020e2c:	d2e8      	bcs.n	8020e00 <quorem+0xb0>
 8020e2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8020e32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8020e36:	b922      	cbnz	r2, 8020e42 <quorem+0xf2>
 8020e38:	3b04      	subs	r3, #4
 8020e3a:	429d      	cmp	r5, r3
 8020e3c:	461a      	mov	r2, r3
 8020e3e:	d30a      	bcc.n	8020e56 <quorem+0x106>
 8020e40:	613c      	str	r4, [r7, #16]
 8020e42:	4630      	mov	r0, r6
 8020e44:	b003      	add	sp, #12
 8020e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020e4a:	6812      	ldr	r2, [r2, #0]
 8020e4c:	3b04      	subs	r3, #4
 8020e4e:	2a00      	cmp	r2, #0
 8020e50:	d1cc      	bne.n	8020dec <quorem+0x9c>
 8020e52:	3c01      	subs	r4, #1
 8020e54:	e7c7      	b.n	8020de6 <quorem+0x96>
 8020e56:	6812      	ldr	r2, [r2, #0]
 8020e58:	3b04      	subs	r3, #4
 8020e5a:	2a00      	cmp	r2, #0
 8020e5c:	d1f0      	bne.n	8020e40 <quorem+0xf0>
 8020e5e:	3c01      	subs	r4, #1
 8020e60:	e7eb      	b.n	8020e3a <quorem+0xea>
 8020e62:	2000      	movs	r0, #0
 8020e64:	e7ee      	b.n	8020e44 <quorem+0xf4>
	...

08020e68 <_dtoa_r>:
 8020e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e6c:	ed2d 8b04 	vpush	{d8-d9}
 8020e70:	ec57 6b10 	vmov	r6, r7, d0
 8020e74:	b093      	sub	sp, #76	; 0x4c
 8020e76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8020e78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8020e7c:	9106      	str	r1, [sp, #24]
 8020e7e:	ee10 aa10 	vmov	sl, s0
 8020e82:	4604      	mov	r4, r0
 8020e84:	9209      	str	r2, [sp, #36]	; 0x24
 8020e86:	930c      	str	r3, [sp, #48]	; 0x30
 8020e88:	46bb      	mov	fp, r7
 8020e8a:	b975      	cbnz	r5, 8020eaa <_dtoa_r+0x42>
 8020e8c:	2010      	movs	r0, #16
 8020e8e:	f000 fffd 	bl	8021e8c <malloc>
 8020e92:	4602      	mov	r2, r0
 8020e94:	6260      	str	r0, [r4, #36]	; 0x24
 8020e96:	b920      	cbnz	r0, 8020ea2 <_dtoa_r+0x3a>
 8020e98:	4ba7      	ldr	r3, [pc, #668]	; (8021138 <_dtoa_r+0x2d0>)
 8020e9a:	21ea      	movs	r1, #234	; 0xea
 8020e9c:	48a7      	ldr	r0, [pc, #668]	; (802113c <_dtoa_r+0x2d4>)
 8020e9e:	f001 fe7f 	bl	8022ba0 <__assert_func>
 8020ea2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020ea6:	6005      	str	r5, [r0, #0]
 8020ea8:	60c5      	str	r5, [r0, #12]
 8020eaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020eac:	6819      	ldr	r1, [r3, #0]
 8020eae:	b151      	cbz	r1, 8020ec6 <_dtoa_r+0x5e>
 8020eb0:	685a      	ldr	r2, [r3, #4]
 8020eb2:	604a      	str	r2, [r1, #4]
 8020eb4:	2301      	movs	r3, #1
 8020eb6:	4093      	lsls	r3, r2
 8020eb8:	608b      	str	r3, [r1, #8]
 8020eba:	4620      	mov	r0, r4
 8020ebc:	f001 f82e 	bl	8021f1c <_Bfree>
 8020ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020ec2:	2200      	movs	r2, #0
 8020ec4:	601a      	str	r2, [r3, #0]
 8020ec6:	1e3b      	subs	r3, r7, #0
 8020ec8:	bfaa      	itet	ge
 8020eca:	2300      	movge	r3, #0
 8020ecc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8020ed0:	f8c8 3000 	strge.w	r3, [r8]
 8020ed4:	4b9a      	ldr	r3, [pc, #616]	; (8021140 <_dtoa_r+0x2d8>)
 8020ed6:	bfbc      	itt	lt
 8020ed8:	2201      	movlt	r2, #1
 8020eda:	f8c8 2000 	strlt.w	r2, [r8]
 8020ede:	ea33 030b 	bics.w	r3, r3, fp
 8020ee2:	d11b      	bne.n	8020f1c <_dtoa_r+0xb4>
 8020ee4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020ee6:	f242 730f 	movw	r3, #9999	; 0x270f
 8020eea:	6013      	str	r3, [r2, #0]
 8020eec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020ef0:	4333      	orrs	r3, r6
 8020ef2:	f000 8592 	beq.w	8021a1a <_dtoa_r+0xbb2>
 8020ef6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ef8:	b963      	cbnz	r3, 8020f14 <_dtoa_r+0xac>
 8020efa:	4b92      	ldr	r3, [pc, #584]	; (8021144 <_dtoa_r+0x2dc>)
 8020efc:	e022      	b.n	8020f44 <_dtoa_r+0xdc>
 8020efe:	4b92      	ldr	r3, [pc, #584]	; (8021148 <_dtoa_r+0x2e0>)
 8020f00:	9301      	str	r3, [sp, #4]
 8020f02:	3308      	adds	r3, #8
 8020f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8020f06:	6013      	str	r3, [r2, #0]
 8020f08:	9801      	ldr	r0, [sp, #4]
 8020f0a:	b013      	add	sp, #76	; 0x4c
 8020f0c:	ecbd 8b04 	vpop	{d8-d9}
 8020f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f14:	4b8b      	ldr	r3, [pc, #556]	; (8021144 <_dtoa_r+0x2dc>)
 8020f16:	9301      	str	r3, [sp, #4]
 8020f18:	3303      	adds	r3, #3
 8020f1a:	e7f3      	b.n	8020f04 <_dtoa_r+0x9c>
 8020f1c:	2200      	movs	r2, #0
 8020f1e:	2300      	movs	r3, #0
 8020f20:	4650      	mov	r0, sl
 8020f22:	4659      	mov	r1, fp
 8020f24:	f7df fdf8 	bl	8000b18 <__aeabi_dcmpeq>
 8020f28:	ec4b ab19 	vmov	d9, sl, fp
 8020f2c:	4680      	mov	r8, r0
 8020f2e:	b158      	cbz	r0, 8020f48 <_dtoa_r+0xe0>
 8020f30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020f32:	2301      	movs	r3, #1
 8020f34:	6013      	str	r3, [r2, #0]
 8020f36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	f000 856b 	beq.w	8021a14 <_dtoa_r+0xbac>
 8020f3e:	4883      	ldr	r0, [pc, #524]	; (802114c <_dtoa_r+0x2e4>)
 8020f40:	6018      	str	r0, [r3, #0]
 8020f42:	1e43      	subs	r3, r0, #1
 8020f44:	9301      	str	r3, [sp, #4]
 8020f46:	e7df      	b.n	8020f08 <_dtoa_r+0xa0>
 8020f48:	ec4b ab10 	vmov	d0, sl, fp
 8020f4c:	aa10      	add	r2, sp, #64	; 0x40
 8020f4e:	a911      	add	r1, sp, #68	; 0x44
 8020f50:	4620      	mov	r0, r4
 8020f52:	f001 facb 	bl	80224ec <__d2b>
 8020f56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8020f5a:	ee08 0a10 	vmov	s16, r0
 8020f5e:	2d00      	cmp	r5, #0
 8020f60:	f000 8084 	beq.w	802106c <_dtoa_r+0x204>
 8020f64:	ee19 3a90 	vmov	r3, s19
 8020f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020f6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8020f70:	4656      	mov	r6, sl
 8020f72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8020f76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020f7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8020f7e:	4b74      	ldr	r3, [pc, #464]	; (8021150 <_dtoa_r+0x2e8>)
 8020f80:	2200      	movs	r2, #0
 8020f82:	4630      	mov	r0, r6
 8020f84:	4639      	mov	r1, r7
 8020f86:	f7df f9a7 	bl	80002d8 <__aeabi_dsub>
 8020f8a:	a365      	add	r3, pc, #404	; (adr r3, 8021120 <_dtoa_r+0x2b8>)
 8020f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f90:	f7df fb5a 	bl	8000648 <__aeabi_dmul>
 8020f94:	a364      	add	r3, pc, #400	; (adr r3, 8021128 <_dtoa_r+0x2c0>)
 8020f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020f9a:	f7df f99f 	bl	80002dc <__adddf3>
 8020f9e:	4606      	mov	r6, r0
 8020fa0:	4628      	mov	r0, r5
 8020fa2:	460f      	mov	r7, r1
 8020fa4:	f7df fae6 	bl	8000574 <__aeabi_i2d>
 8020fa8:	a361      	add	r3, pc, #388	; (adr r3, 8021130 <_dtoa_r+0x2c8>)
 8020faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020fae:	f7df fb4b 	bl	8000648 <__aeabi_dmul>
 8020fb2:	4602      	mov	r2, r0
 8020fb4:	460b      	mov	r3, r1
 8020fb6:	4630      	mov	r0, r6
 8020fb8:	4639      	mov	r1, r7
 8020fba:	f7df f98f 	bl	80002dc <__adddf3>
 8020fbe:	4606      	mov	r6, r0
 8020fc0:	460f      	mov	r7, r1
 8020fc2:	f7df fdf1 	bl	8000ba8 <__aeabi_d2iz>
 8020fc6:	2200      	movs	r2, #0
 8020fc8:	9000      	str	r0, [sp, #0]
 8020fca:	2300      	movs	r3, #0
 8020fcc:	4630      	mov	r0, r6
 8020fce:	4639      	mov	r1, r7
 8020fd0:	f7df fdac 	bl	8000b2c <__aeabi_dcmplt>
 8020fd4:	b150      	cbz	r0, 8020fec <_dtoa_r+0x184>
 8020fd6:	9800      	ldr	r0, [sp, #0]
 8020fd8:	f7df facc 	bl	8000574 <__aeabi_i2d>
 8020fdc:	4632      	mov	r2, r6
 8020fde:	463b      	mov	r3, r7
 8020fe0:	f7df fd9a 	bl	8000b18 <__aeabi_dcmpeq>
 8020fe4:	b910      	cbnz	r0, 8020fec <_dtoa_r+0x184>
 8020fe6:	9b00      	ldr	r3, [sp, #0]
 8020fe8:	3b01      	subs	r3, #1
 8020fea:	9300      	str	r3, [sp, #0]
 8020fec:	9b00      	ldr	r3, [sp, #0]
 8020fee:	2b16      	cmp	r3, #22
 8020ff0:	d85a      	bhi.n	80210a8 <_dtoa_r+0x240>
 8020ff2:	9a00      	ldr	r2, [sp, #0]
 8020ff4:	4b57      	ldr	r3, [pc, #348]	; (8021154 <_dtoa_r+0x2ec>)
 8020ff6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ffe:	ec51 0b19 	vmov	r0, r1, d9
 8021002:	f7df fd93 	bl	8000b2c <__aeabi_dcmplt>
 8021006:	2800      	cmp	r0, #0
 8021008:	d050      	beq.n	80210ac <_dtoa_r+0x244>
 802100a:	9b00      	ldr	r3, [sp, #0]
 802100c:	3b01      	subs	r3, #1
 802100e:	9300      	str	r3, [sp, #0]
 8021010:	2300      	movs	r3, #0
 8021012:	930b      	str	r3, [sp, #44]	; 0x2c
 8021014:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021016:	1b5d      	subs	r5, r3, r5
 8021018:	1e6b      	subs	r3, r5, #1
 802101a:	9305      	str	r3, [sp, #20]
 802101c:	bf45      	ittet	mi
 802101e:	f1c5 0301 	rsbmi	r3, r5, #1
 8021022:	9304      	strmi	r3, [sp, #16]
 8021024:	2300      	movpl	r3, #0
 8021026:	2300      	movmi	r3, #0
 8021028:	bf4c      	ite	mi
 802102a:	9305      	strmi	r3, [sp, #20]
 802102c:	9304      	strpl	r3, [sp, #16]
 802102e:	9b00      	ldr	r3, [sp, #0]
 8021030:	2b00      	cmp	r3, #0
 8021032:	db3d      	blt.n	80210b0 <_dtoa_r+0x248>
 8021034:	9b05      	ldr	r3, [sp, #20]
 8021036:	9a00      	ldr	r2, [sp, #0]
 8021038:	920a      	str	r2, [sp, #40]	; 0x28
 802103a:	4413      	add	r3, r2
 802103c:	9305      	str	r3, [sp, #20]
 802103e:	2300      	movs	r3, #0
 8021040:	9307      	str	r3, [sp, #28]
 8021042:	9b06      	ldr	r3, [sp, #24]
 8021044:	2b09      	cmp	r3, #9
 8021046:	f200 8089 	bhi.w	802115c <_dtoa_r+0x2f4>
 802104a:	2b05      	cmp	r3, #5
 802104c:	bfc4      	itt	gt
 802104e:	3b04      	subgt	r3, #4
 8021050:	9306      	strgt	r3, [sp, #24]
 8021052:	9b06      	ldr	r3, [sp, #24]
 8021054:	f1a3 0302 	sub.w	r3, r3, #2
 8021058:	bfcc      	ite	gt
 802105a:	2500      	movgt	r5, #0
 802105c:	2501      	movle	r5, #1
 802105e:	2b03      	cmp	r3, #3
 8021060:	f200 8087 	bhi.w	8021172 <_dtoa_r+0x30a>
 8021064:	e8df f003 	tbb	[pc, r3]
 8021068:	59383a2d 	.word	0x59383a2d
 802106c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8021070:	441d      	add	r5, r3
 8021072:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8021076:	2b20      	cmp	r3, #32
 8021078:	bfc1      	itttt	gt
 802107a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802107e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8021082:	fa0b f303 	lslgt.w	r3, fp, r3
 8021086:	fa26 f000 	lsrgt.w	r0, r6, r0
 802108a:	bfda      	itte	le
 802108c:	f1c3 0320 	rsble	r3, r3, #32
 8021090:	fa06 f003 	lslle.w	r0, r6, r3
 8021094:	4318      	orrgt	r0, r3
 8021096:	f7df fa5d 	bl	8000554 <__aeabi_ui2d>
 802109a:	2301      	movs	r3, #1
 802109c:	4606      	mov	r6, r0
 802109e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80210a2:	3d01      	subs	r5, #1
 80210a4:	930e      	str	r3, [sp, #56]	; 0x38
 80210a6:	e76a      	b.n	8020f7e <_dtoa_r+0x116>
 80210a8:	2301      	movs	r3, #1
 80210aa:	e7b2      	b.n	8021012 <_dtoa_r+0x1aa>
 80210ac:	900b      	str	r0, [sp, #44]	; 0x2c
 80210ae:	e7b1      	b.n	8021014 <_dtoa_r+0x1ac>
 80210b0:	9b04      	ldr	r3, [sp, #16]
 80210b2:	9a00      	ldr	r2, [sp, #0]
 80210b4:	1a9b      	subs	r3, r3, r2
 80210b6:	9304      	str	r3, [sp, #16]
 80210b8:	4253      	negs	r3, r2
 80210ba:	9307      	str	r3, [sp, #28]
 80210bc:	2300      	movs	r3, #0
 80210be:	930a      	str	r3, [sp, #40]	; 0x28
 80210c0:	e7bf      	b.n	8021042 <_dtoa_r+0x1da>
 80210c2:	2300      	movs	r3, #0
 80210c4:	9308      	str	r3, [sp, #32]
 80210c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	dc55      	bgt.n	8021178 <_dtoa_r+0x310>
 80210cc:	2301      	movs	r3, #1
 80210ce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80210d2:	461a      	mov	r2, r3
 80210d4:	9209      	str	r2, [sp, #36]	; 0x24
 80210d6:	e00c      	b.n	80210f2 <_dtoa_r+0x28a>
 80210d8:	2301      	movs	r3, #1
 80210da:	e7f3      	b.n	80210c4 <_dtoa_r+0x25c>
 80210dc:	2300      	movs	r3, #0
 80210de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80210e0:	9308      	str	r3, [sp, #32]
 80210e2:	9b00      	ldr	r3, [sp, #0]
 80210e4:	4413      	add	r3, r2
 80210e6:	9302      	str	r3, [sp, #8]
 80210e8:	3301      	adds	r3, #1
 80210ea:	2b01      	cmp	r3, #1
 80210ec:	9303      	str	r3, [sp, #12]
 80210ee:	bfb8      	it	lt
 80210f0:	2301      	movlt	r3, #1
 80210f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80210f4:	2200      	movs	r2, #0
 80210f6:	6042      	str	r2, [r0, #4]
 80210f8:	2204      	movs	r2, #4
 80210fa:	f102 0614 	add.w	r6, r2, #20
 80210fe:	429e      	cmp	r6, r3
 8021100:	6841      	ldr	r1, [r0, #4]
 8021102:	d93d      	bls.n	8021180 <_dtoa_r+0x318>
 8021104:	4620      	mov	r0, r4
 8021106:	f000 fec9 	bl	8021e9c <_Balloc>
 802110a:	9001      	str	r0, [sp, #4]
 802110c:	2800      	cmp	r0, #0
 802110e:	d13b      	bne.n	8021188 <_dtoa_r+0x320>
 8021110:	4b11      	ldr	r3, [pc, #68]	; (8021158 <_dtoa_r+0x2f0>)
 8021112:	4602      	mov	r2, r0
 8021114:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8021118:	e6c0      	b.n	8020e9c <_dtoa_r+0x34>
 802111a:	2301      	movs	r3, #1
 802111c:	e7df      	b.n	80210de <_dtoa_r+0x276>
 802111e:	bf00      	nop
 8021120:	636f4361 	.word	0x636f4361
 8021124:	3fd287a7 	.word	0x3fd287a7
 8021128:	8b60c8b3 	.word	0x8b60c8b3
 802112c:	3fc68a28 	.word	0x3fc68a28
 8021130:	509f79fb 	.word	0x509f79fb
 8021134:	3fd34413 	.word	0x3fd34413
 8021138:	08023625 	.word	0x08023625
 802113c:	0802363c 	.word	0x0802363c
 8021140:	7ff00000 	.word	0x7ff00000
 8021144:	08023621 	.word	0x08023621
 8021148:	08023618 	.word	0x08023618
 802114c:	080235f5 	.word	0x080235f5
 8021150:	3ff80000 	.word	0x3ff80000
 8021154:	08023790 	.word	0x08023790
 8021158:	08023697 	.word	0x08023697
 802115c:	2501      	movs	r5, #1
 802115e:	2300      	movs	r3, #0
 8021160:	9306      	str	r3, [sp, #24]
 8021162:	9508      	str	r5, [sp, #32]
 8021164:	f04f 33ff 	mov.w	r3, #4294967295
 8021168:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802116c:	2200      	movs	r2, #0
 802116e:	2312      	movs	r3, #18
 8021170:	e7b0      	b.n	80210d4 <_dtoa_r+0x26c>
 8021172:	2301      	movs	r3, #1
 8021174:	9308      	str	r3, [sp, #32]
 8021176:	e7f5      	b.n	8021164 <_dtoa_r+0x2fc>
 8021178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802117a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802117e:	e7b8      	b.n	80210f2 <_dtoa_r+0x28a>
 8021180:	3101      	adds	r1, #1
 8021182:	6041      	str	r1, [r0, #4]
 8021184:	0052      	lsls	r2, r2, #1
 8021186:	e7b8      	b.n	80210fa <_dtoa_r+0x292>
 8021188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802118a:	9a01      	ldr	r2, [sp, #4]
 802118c:	601a      	str	r2, [r3, #0]
 802118e:	9b03      	ldr	r3, [sp, #12]
 8021190:	2b0e      	cmp	r3, #14
 8021192:	f200 809d 	bhi.w	80212d0 <_dtoa_r+0x468>
 8021196:	2d00      	cmp	r5, #0
 8021198:	f000 809a 	beq.w	80212d0 <_dtoa_r+0x468>
 802119c:	9b00      	ldr	r3, [sp, #0]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	dd32      	ble.n	8021208 <_dtoa_r+0x3a0>
 80211a2:	4ab7      	ldr	r2, [pc, #732]	; (8021480 <_dtoa_r+0x618>)
 80211a4:	f003 030f 	and.w	r3, r3, #15
 80211a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80211ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80211b0:	9b00      	ldr	r3, [sp, #0]
 80211b2:	05d8      	lsls	r0, r3, #23
 80211b4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80211b8:	d516      	bpl.n	80211e8 <_dtoa_r+0x380>
 80211ba:	4bb2      	ldr	r3, [pc, #712]	; (8021484 <_dtoa_r+0x61c>)
 80211bc:	ec51 0b19 	vmov	r0, r1, d9
 80211c0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80211c4:	f7df fb6a 	bl	800089c <__aeabi_ddiv>
 80211c8:	f007 070f 	and.w	r7, r7, #15
 80211cc:	4682      	mov	sl, r0
 80211ce:	468b      	mov	fp, r1
 80211d0:	2503      	movs	r5, #3
 80211d2:	4eac      	ldr	r6, [pc, #688]	; (8021484 <_dtoa_r+0x61c>)
 80211d4:	b957      	cbnz	r7, 80211ec <_dtoa_r+0x384>
 80211d6:	4642      	mov	r2, r8
 80211d8:	464b      	mov	r3, r9
 80211da:	4650      	mov	r0, sl
 80211dc:	4659      	mov	r1, fp
 80211de:	f7df fb5d 	bl	800089c <__aeabi_ddiv>
 80211e2:	4682      	mov	sl, r0
 80211e4:	468b      	mov	fp, r1
 80211e6:	e028      	b.n	802123a <_dtoa_r+0x3d2>
 80211e8:	2502      	movs	r5, #2
 80211ea:	e7f2      	b.n	80211d2 <_dtoa_r+0x36a>
 80211ec:	07f9      	lsls	r1, r7, #31
 80211ee:	d508      	bpl.n	8021202 <_dtoa_r+0x39a>
 80211f0:	4640      	mov	r0, r8
 80211f2:	4649      	mov	r1, r9
 80211f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80211f8:	f7df fa26 	bl	8000648 <__aeabi_dmul>
 80211fc:	3501      	adds	r5, #1
 80211fe:	4680      	mov	r8, r0
 8021200:	4689      	mov	r9, r1
 8021202:	107f      	asrs	r7, r7, #1
 8021204:	3608      	adds	r6, #8
 8021206:	e7e5      	b.n	80211d4 <_dtoa_r+0x36c>
 8021208:	f000 809b 	beq.w	8021342 <_dtoa_r+0x4da>
 802120c:	9b00      	ldr	r3, [sp, #0]
 802120e:	4f9d      	ldr	r7, [pc, #628]	; (8021484 <_dtoa_r+0x61c>)
 8021210:	425e      	negs	r6, r3
 8021212:	4b9b      	ldr	r3, [pc, #620]	; (8021480 <_dtoa_r+0x618>)
 8021214:	f006 020f 	and.w	r2, r6, #15
 8021218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8021220:	ec51 0b19 	vmov	r0, r1, d9
 8021224:	f7df fa10 	bl	8000648 <__aeabi_dmul>
 8021228:	1136      	asrs	r6, r6, #4
 802122a:	4682      	mov	sl, r0
 802122c:	468b      	mov	fp, r1
 802122e:	2300      	movs	r3, #0
 8021230:	2502      	movs	r5, #2
 8021232:	2e00      	cmp	r6, #0
 8021234:	d17a      	bne.n	802132c <_dtoa_r+0x4c4>
 8021236:	2b00      	cmp	r3, #0
 8021238:	d1d3      	bne.n	80211e2 <_dtoa_r+0x37a>
 802123a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802123c:	2b00      	cmp	r3, #0
 802123e:	f000 8082 	beq.w	8021346 <_dtoa_r+0x4de>
 8021242:	4b91      	ldr	r3, [pc, #580]	; (8021488 <_dtoa_r+0x620>)
 8021244:	2200      	movs	r2, #0
 8021246:	4650      	mov	r0, sl
 8021248:	4659      	mov	r1, fp
 802124a:	f7df fc6f 	bl	8000b2c <__aeabi_dcmplt>
 802124e:	2800      	cmp	r0, #0
 8021250:	d079      	beq.n	8021346 <_dtoa_r+0x4de>
 8021252:	9b03      	ldr	r3, [sp, #12]
 8021254:	2b00      	cmp	r3, #0
 8021256:	d076      	beq.n	8021346 <_dtoa_r+0x4de>
 8021258:	9b02      	ldr	r3, [sp, #8]
 802125a:	2b00      	cmp	r3, #0
 802125c:	dd36      	ble.n	80212cc <_dtoa_r+0x464>
 802125e:	9b00      	ldr	r3, [sp, #0]
 8021260:	4650      	mov	r0, sl
 8021262:	4659      	mov	r1, fp
 8021264:	1e5f      	subs	r7, r3, #1
 8021266:	2200      	movs	r2, #0
 8021268:	4b88      	ldr	r3, [pc, #544]	; (802148c <_dtoa_r+0x624>)
 802126a:	f7df f9ed 	bl	8000648 <__aeabi_dmul>
 802126e:	9e02      	ldr	r6, [sp, #8]
 8021270:	4682      	mov	sl, r0
 8021272:	468b      	mov	fp, r1
 8021274:	3501      	adds	r5, #1
 8021276:	4628      	mov	r0, r5
 8021278:	f7df f97c 	bl	8000574 <__aeabi_i2d>
 802127c:	4652      	mov	r2, sl
 802127e:	465b      	mov	r3, fp
 8021280:	f7df f9e2 	bl	8000648 <__aeabi_dmul>
 8021284:	4b82      	ldr	r3, [pc, #520]	; (8021490 <_dtoa_r+0x628>)
 8021286:	2200      	movs	r2, #0
 8021288:	f7df f828 	bl	80002dc <__adddf3>
 802128c:	46d0      	mov	r8, sl
 802128e:	46d9      	mov	r9, fp
 8021290:	4682      	mov	sl, r0
 8021292:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8021296:	2e00      	cmp	r6, #0
 8021298:	d158      	bne.n	802134c <_dtoa_r+0x4e4>
 802129a:	4b7e      	ldr	r3, [pc, #504]	; (8021494 <_dtoa_r+0x62c>)
 802129c:	2200      	movs	r2, #0
 802129e:	4640      	mov	r0, r8
 80212a0:	4649      	mov	r1, r9
 80212a2:	f7df f819 	bl	80002d8 <__aeabi_dsub>
 80212a6:	4652      	mov	r2, sl
 80212a8:	465b      	mov	r3, fp
 80212aa:	4680      	mov	r8, r0
 80212ac:	4689      	mov	r9, r1
 80212ae:	f7df fc5b 	bl	8000b68 <__aeabi_dcmpgt>
 80212b2:	2800      	cmp	r0, #0
 80212b4:	f040 8295 	bne.w	80217e2 <_dtoa_r+0x97a>
 80212b8:	4652      	mov	r2, sl
 80212ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80212be:	4640      	mov	r0, r8
 80212c0:	4649      	mov	r1, r9
 80212c2:	f7df fc33 	bl	8000b2c <__aeabi_dcmplt>
 80212c6:	2800      	cmp	r0, #0
 80212c8:	f040 8289 	bne.w	80217de <_dtoa_r+0x976>
 80212cc:	ec5b ab19 	vmov	sl, fp, d9
 80212d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80212d2:	2b00      	cmp	r3, #0
 80212d4:	f2c0 8148 	blt.w	8021568 <_dtoa_r+0x700>
 80212d8:	9a00      	ldr	r2, [sp, #0]
 80212da:	2a0e      	cmp	r2, #14
 80212dc:	f300 8144 	bgt.w	8021568 <_dtoa_r+0x700>
 80212e0:	4b67      	ldr	r3, [pc, #412]	; (8021480 <_dtoa_r+0x618>)
 80212e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80212e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80212ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212ec:	2b00      	cmp	r3, #0
 80212ee:	f280 80d5 	bge.w	802149c <_dtoa_r+0x634>
 80212f2:	9b03      	ldr	r3, [sp, #12]
 80212f4:	2b00      	cmp	r3, #0
 80212f6:	f300 80d1 	bgt.w	802149c <_dtoa_r+0x634>
 80212fa:	f040 826f 	bne.w	80217dc <_dtoa_r+0x974>
 80212fe:	4b65      	ldr	r3, [pc, #404]	; (8021494 <_dtoa_r+0x62c>)
 8021300:	2200      	movs	r2, #0
 8021302:	4640      	mov	r0, r8
 8021304:	4649      	mov	r1, r9
 8021306:	f7df f99f 	bl	8000648 <__aeabi_dmul>
 802130a:	4652      	mov	r2, sl
 802130c:	465b      	mov	r3, fp
 802130e:	f7df fc21 	bl	8000b54 <__aeabi_dcmpge>
 8021312:	9e03      	ldr	r6, [sp, #12]
 8021314:	4637      	mov	r7, r6
 8021316:	2800      	cmp	r0, #0
 8021318:	f040 8245 	bne.w	80217a6 <_dtoa_r+0x93e>
 802131c:	9d01      	ldr	r5, [sp, #4]
 802131e:	2331      	movs	r3, #49	; 0x31
 8021320:	f805 3b01 	strb.w	r3, [r5], #1
 8021324:	9b00      	ldr	r3, [sp, #0]
 8021326:	3301      	adds	r3, #1
 8021328:	9300      	str	r3, [sp, #0]
 802132a:	e240      	b.n	80217ae <_dtoa_r+0x946>
 802132c:	07f2      	lsls	r2, r6, #31
 802132e:	d505      	bpl.n	802133c <_dtoa_r+0x4d4>
 8021330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021334:	f7df f988 	bl	8000648 <__aeabi_dmul>
 8021338:	3501      	adds	r5, #1
 802133a:	2301      	movs	r3, #1
 802133c:	1076      	asrs	r6, r6, #1
 802133e:	3708      	adds	r7, #8
 8021340:	e777      	b.n	8021232 <_dtoa_r+0x3ca>
 8021342:	2502      	movs	r5, #2
 8021344:	e779      	b.n	802123a <_dtoa_r+0x3d2>
 8021346:	9f00      	ldr	r7, [sp, #0]
 8021348:	9e03      	ldr	r6, [sp, #12]
 802134a:	e794      	b.n	8021276 <_dtoa_r+0x40e>
 802134c:	9901      	ldr	r1, [sp, #4]
 802134e:	4b4c      	ldr	r3, [pc, #304]	; (8021480 <_dtoa_r+0x618>)
 8021350:	4431      	add	r1, r6
 8021352:	910d      	str	r1, [sp, #52]	; 0x34
 8021354:	9908      	ldr	r1, [sp, #32]
 8021356:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802135a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802135e:	2900      	cmp	r1, #0
 8021360:	d043      	beq.n	80213ea <_dtoa_r+0x582>
 8021362:	494d      	ldr	r1, [pc, #308]	; (8021498 <_dtoa_r+0x630>)
 8021364:	2000      	movs	r0, #0
 8021366:	f7df fa99 	bl	800089c <__aeabi_ddiv>
 802136a:	4652      	mov	r2, sl
 802136c:	465b      	mov	r3, fp
 802136e:	f7de ffb3 	bl	80002d8 <__aeabi_dsub>
 8021372:	9d01      	ldr	r5, [sp, #4]
 8021374:	4682      	mov	sl, r0
 8021376:	468b      	mov	fp, r1
 8021378:	4649      	mov	r1, r9
 802137a:	4640      	mov	r0, r8
 802137c:	f7df fc14 	bl	8000ba8 <__aeabi_d2iz>
 8021380:	4606      	mov	r6, r0
 8021382:	f7df f8f7 	bl	8000574 <__aeabi_i2d>
 8021386:	4602      	mov	r2, r0
 8021388:	460b      	mov	r3, r1
 802138a:	4640      	mov	r0, r8
 802138c:	4649      	mov	r1, r9
 802138e:	f7de ffa3 	bl	80002d8 <__aeabi_dsub>
 8021392:	3630      	adds	r6, #48	; 0x30
 8021394:	f805 6b01 	strb.w	r6, [r5], #1
 8021398:	4652      	mov	r2, sl
 802139a:	465b      	mov	r3, fp
 802139c:	4680      	mov	r8, r0
 802139e:	4689      	mov	r9, r1
 80213a0:	f7df fbc4 	bl	8000b2c <__aeabi_dcmplt>
 80213a4:	2800      	cmp	r0, #0
 80213a6:	d163      	bne.n	8021470 <_dtoa_r+0x608>
 80213a8:	4642      	mov	r2, r8
 80213aa:	464b      	mov	r3, r9
 80213ac:	4936      	ldr	r1, [pc, #216]	; (8021488 <_dtoa_r+0x620>)
 80213ae:	2000      	movs	r0, #0
 80213b0:	f7de ff92 	bl	80002d8 <__aeabi_dsub>
 80213b4:	4652      	mov	r2, sl
 80213b6:	465b      	mov	r3, fp
 80213b8:	f7df fbb8 	bl	8000b2c <__aeabi_dcmplt>
 80213bc:	2800      	cmp	r0, #0
 80213be:	f040 80b5 	bne.w	802152c <_dtoa_r+0x6c4>
 80213c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213c4:	429d      	cmp	r5, r3
 80213c6:	d081      	beq.n	80212cc <_dtoa_r+0x464>
 80213c8:	4b30      	ldr	r3, [pc, #192]	; (802148c <_dtoa_r+0x624>)
 80213ca:	2200      	movs	r2, #0
 80213cc:	4650      	mov	r0, sl
 80213ce:	4659      	mov	r1, fp
 80213d0:	f7df f93a 	bl	8000648 <__aeabi_dmul>
 80213d4:	4b2d      	ldr	r3, [pc, #180]	; (802148c <_dtoa_r+0x624>)
 80213d6:	4682      	mov	sl, r0
 80213d8:	468b      	mov	fp, r1
 80213da:	4640      	mov	r0, r8
 80213dc:	4649      	mov	r1, r9
 80213de:	2200      	movs	r2, #0
 80213e0:	f7df f932 	bl	8000648 <__aeabi_dmul>
 80213e4:	4680      	mov	r8, r0
 80213e6:	4689      	mov	r9, r1
 80213e8:	e7c6      	b.n	8021378 <_dtoa_r+0x510>
 80213ea:	4650      	mov	r0, sl
 80213ec:	4659      	mov	r1, fp
 80213ee:	f7df f92b 	bl	8000648 <__aeabi_dmul>
 80213f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80213f4:	9d01      	ldr	r5, [sp, #4]
 80213f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80213f8:	4682      	mov	sl, r0
 80213fa:	468b      	mov	fp, r1
 80213fc:	4649      	mov	r1, r9
 80213fe:	4640      	mov	r0, r8
 8021400:	f7df fbd2 	bl	8000ba8 <__aeabi_d2iz>
 8021404:	4606      	mov	r6, r0
 8021406:	f7df f8b5 	bl	8000574 <__aeabi_i2d>
 802140a:	3630      	adds	r6, #48	; 0x30
 802140c:	4602      	mov	r2, r0
 802140e:	460b      	mov	r3, r1
 8021410:	4640      	mov	r0, r8
 8021412:	4649      	mov	r1, r9
 8021414:	f7de ff60 	bl	80002d8 <__aeabi_dsub>
 8021418:	f805 6b01 	strb.w	r6, [r5], #1
 802141c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802141e:	429d      	cmp	r5, r3
 8021420:	4680      	mov	r8, r0
 8021422:	4689      	mov	r9, r1
 8021424:	f04f 0200 	mov.w	r2, #0
 8021428:	d124      	bne.n	8021474 <_dtoa_r+0x60c>
 802142a:	4b1b      	ldr	r3, [pc, #108]	; (8021498 <_dtoa_r+0x630>)
 802142c:	4650      	mov	r0, sl
 802142e:	4659      	mov	r1, fp
 8021430:	f7de ff54 	bl	80002dc <__adddf3>
 8021434:	4602      	mov	r2, r0
 8021436:	460b      	mov	r3, r1
 8021438:	4640      	mov	r0, r8
 802143a:	4649      	mov	r1, r9
 802143c:	f7df fb94 	bl	8000b68 <__aeabi_dcmpgt>
 8021440:	2800      	cmp	r0, #0
 8021442:	d173      	bne.n	802152c <_dtoa_r+0x6c4>
 8021444:	4652      	mov	r2, sl
 8021446:	465b      	mov	r3, fp
 8021448:	4913      	ldr	r1, [pc, #76]	; (8021498 <_dtoa_r+0x630>)
 802144a:	2000      	movs	r0, #0
 802144c:	f7de ff44 	bl	80002d8 <__aeabi_dsub>
 8021450:	4602      	mov	r2, r0
 8021452:	460b      	mov	r3, r1
 8021454:	4640      	mov	r0, r8
 8021456:	4649      	mov	r1, r9
 8021458:	f7df fb68 	bl	8000b2c <__aeabi_dcmplt>
 802145c:	2800      	cmp	r0, #0
 802145e:	f43f af35 	beq.w	80212cc <_dtoa_r+0x464>
 8021462:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021464:	1e6b      	subs	r3, r5, #1
 8021466:	930f      	str	r3, [sp, #60]	; 0x3c
 8021468:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802146c:	2b30      	cmp	r3, #48	; 0x30
 802146e:	d0f8      	beq.n	8021462 <_dtoa_r+0x5fa>
 8021470:	9700      	str	r7, [sp, #0]
 8021472:	e049      	b.n	8021508 <_dtoa_r+0x6a0>
 8021474:	4b05      	ldr	r3, [pc, #20]	; (802148c <_dtoa_r+0x624>)
 8021476:	f7df f8e7 	bl	8000648 <__aeabi_dmul>
 802147a:	4680      	mov	r8, r0
 802147c:	4689      	mov	r9, r1
 802147e:	e7bd      	b.n	80213fc <_dtoa_r+0x594>
 8021480:	08023790 	.word	0x08023790
 8021484:	08023768 	.word	0x08023768
 8021488:	3ff00000 	.word	0x3ff00000
 802148c:	40240000 	.word	0x40240000
 8021490:	401c0000 	.word	0x401c0000
 8021494:	40140000 	.word	0x40140000
 8021498:	3fe00000 	.word	0x3fe00000
 802149c:	9d01      	ldr	r5, [sp, #4]
 802149e:	4656      	mov	r6, sl
 80214a0:	465f      	mov	r7, fp
 80214a2:	4642      	mov	r2, r8
 80214a4:	464b      	mov	r3, r9
 80214a6:	4630      	mov	r0, r6
 80214a8:	4639      	mov	r1, r7
 80214aa:	f7df f9f7 	bl	800089c <__aeabi_ddiv>
 80214ae:	f7df fb7b 	bl	8000ba8 <__aeabi_d2iz>
 80214b2:	4682      	mov	sl, r0
 80214b4:	f7df f85e 	bl	8000574 <__aeabi_i2d>
 80214b8:	4642      	mov	r2, r8
 80214ba:	464b      	mov	r3, r9
 80214bc:	f7df f8c4 	bl	8000648 <__aeabi_dmul>
 80214c0:	4602      	mov	r2, r0
 80214c2:	460b      	mov	r3, r1
 80214c4:	4630      	mov	r0, r6
 80214c6:	4639      	mov	r1, r7
 80214c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80214cc:	f7de ff04 	bl	80002d8 <__aeabi_dsub>
 80214d0:	f805 6b01 	strb.w	r6, [r5], #1
 80214d4:	9e01      	ldr	r6, [sp, #4]
 80214d6:	9f03      	ldr	r7, [sp, #12]
 80214d8:	1bae      	subs	r6, r5, r6
 80214da:	42b7      	cmp	r7, r6
 80214dc:	4602      	mov	r2, r0
 80214de:	460b      	mov	r3, r1
 80214e0:	d135      	bne.n	802154e <_dtoa_r+0x6e6>
 80214e2:	f7de fefb 	bl	80002dc <__adddf3>
 80214e6:	4642      	mov	r2, r8
 80214e8:	464b      	mov	r3, r9
 80214ea:	4606      	mov	r6, r0
 80214ec:	460f      	mov	r7, r1
 80214ee:	f7df fb3b 	bl	8000b68 <__aeabi_dcmpgt>
 80214f2:	b9d0      	cbnz	r0, 802152a <_dtoa_r+0x6c2>
 80214f4:	4642      	mov	r2, r8
 80214f6:	464b      	mov	r3, r9
 80214f8:	4630      	mov	r0, r6
 80214fa:	4639      	mov	r1, r7
 80214fc:	f7df fb0c 	bl	8000b18 <__aeabi_dcmpeq>
 8021500:	b110      	cbz	r0, 8021508 <_dtoa_r+0x6a0>
 8021502:	f01a 0f01 	tst.w	sl, #1
 8021506:	d110      	bne.n	802152a <_dtoa_r+0x6c2>
 8021508:	4620      	mov	r0, r4
 802150a:	ee18 1a10 	vmov	r1, s16
 802150e:	f000 fd05 	bl	8021f1c <_Bfree>
 8021512:	2300      	movs	r3, #0
 8021514:	9800      	ldr	r0, [sp, #0]
 8021516:	702b      	strb	r3, [r5, #0]
 8021518:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802151a:	3001      	adds	r0, #1
 802151c:	6018      	str	r0, [r3, #0]
 802151e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021520:	2b00      	cmp	r3, #0
 8021522:	f43f acf1 	beq.w	8020f08 <_dtoa_r+0xa0>
 8021526:	601d      	str	r5, [r3, #0]
 8021528:	e4ee      	b.n	8020f08 <_dtoa_r+0xa0>
 802152a:	9f00      	ldr	r7, [sp, #0]
 802152c:	462b      	mov	r3, r5
 802152e:	461d      	mov	r5, r3
 8021530:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8021534:	2a39      	cmp	r2, #57	; 0x39
 8021536:	d106      	bne.n	8021546 <_dtoa_r+0x6de>
 8021538:	9a01      	ldr	r2, [sp, #4]
 802153a:	429a      	cmp	r2, r3
 802153c:	d1f7      	bne.n	802152e <_dtoa_r+0x6c6>
 802153e:	9901      	ldr	r1, [sp, #4]
 8021540:	2230      	movs	r2, #48	; 0x30
 8021542:	3701      	adds	r7, #1
 8021544:	700a      	strb	r2, [r1, #0]
 8021546:	781a      	ldrb	r2, [r3, #0]
 8021548:	3201      	adds	r2, #1
 802154a:	701a      	strb	r2, [r3, #0]
 802154c:	e790      	b.n	8021470 <_dtoa_r+0x608>
 802154e:	4ba6      	ldr	r3, [pc, #664]	; (80217e8 <_dtoa_r+0x980>)
 8021550:	2200      	movs	r2, #0
 8021552:	f7df f879 	bl	8000648 <__aeabi_dmul>
 8021556:	2200      	movs	r2, #0
 8021558:	2300      	movs	r3, #0
 802155a:	4606      	mov	r6, r0
 802155c:	460f      	mov	r7, r1
 802155e:	f7df fadb 	bl	8000b18 <__aeabi_dcmpeq>
 8021562:	2800      	cmp	r0, #0
 8021564:	d09d      	beq.n	80214a2 <_dtoa_r+0x63a>
 8021566:	e7cf      	b.n	8021508 <_dtoa_r+0x6a0>
 8021568:	9a08      	ldr	r2, [sp, #32]
 802156a:	2a00      	cmp	r2, #0
 802156c:	f000 80d7 	beq.w	802171e <_dtoa_r+0x8b6>
 8021570:	9a06      	ldr	r2, [sp, #24]
 8021572:	2a01      	cmp	r2, #1
 8021574:	f300 80ba 	bgt.w	80216ec <_dtoa_r+0x884>
 8021578:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802157a:	2a00      	cmp	r2, #0
 802157c:	f000 80b2 	beq.w	80216e4 <_dtoa_r+0x87c>
 8021580:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8021584:	9e07      	ldr	r6, [sp, #28]
 8021586:	9d04      	ldr	r5, [sp, #16]
 8021588:	9a04      	ldr	r2, [sp, #16]
 802158a:	441a      	add	r2, r3
 802158c:	9204      	str	r2, [sp, #16]
 802158e:	9a05      	ldr	r2, [sp, #20]
 8021590:	2101      	movs	r1, #1
 8021592:	441a      	add	r2, r3
 8021594:	4620      	mov	r0, r4
 8021596:	9205      	str	r2, [sp, #20]
 8021598:	f000 fd78 	bl	802208c <__i2b>
 802159c:	4607      	mov	r7, r0
 802159e:	2d00      	cmp	r5, #0
 80215a0:	dd0c      	ble.n	80215bc <_dtoa_r+0x754>
 80215a2:	9b05      	ldr	r3, [sp, #20]
 80215a4:	2b00      	cmp	r3, #0
 80215a6:	dd09      	ble.n	80215bc <_dtoa_r+0x754>
 80215a8:	42ab      	cmp	r3, r5
 80215aa:	9a04      	ldr	r2, [sp, #16]
 80215ac:	bfa8      	it	ge
 80215ae:	462b      	movge	r3, r5
 80215b0:	1ad2      	subs	r2, r2, r3
 80215b2:	9204      	str	r2, [sp, #16]
 80215b4:	9a05      	ldr	r2, [sp, #20]
 80215b6:	1aed      	subs	r5, r5, r3
 80215b8:	1ad3      	subs	r3, r2, r3
 80215ba:	9305      	str	r3, [sp, #20]
 80215bc:	9b07      	ldr	r3, [sp, #28]
 80215be:	b31b      	cbz	r3, 8021608 <_dtoa_r+0x7a0>
 80215c0:	9b08      	ldr	r3, [sp, #32]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	f000 80af 	beq.w	8021726 <_dtoa_r+0x8be>
 80215c8:	2e00      	cmp	r6, #0
 80215ca:	dd13      	ble.n	80215f4 <_dtoa_r+0x78c>
 80215cc:	4639      	mov	r1, r7
 80215ce:	4632      	mov	r2, r6
 80215d0:	4620      	mov	r0, r4
 80215d2:	f000 fe1b 	bl	802220c <__pow5mult>
 80215d6:	ee18 2a10 	vmov	r2, s16
 80215da:	4601      	mov	r1, r0
 80215dc:	4607      	mov	r7, r0
 80215de:	4620      	mov	r0, r4
 80215e0:	f000 fd6a 	bl	80220b8 <__multiply>
 80215e4:	ee18 1a10 	vmov	r1, s16
 80215e8:	4680      	mov	r8, r0
 80215ea:	4620      	mov	r0, r4
 80215ec:	f000 fc96 	bl	8021f1c <_Bfree>
 80215f0:	ee08 8a10 	vmov	s16, r8
 80215f4:	9b07      	ldr	r3, [sp, #28]
 80215f6:	1b9a      	subs	r2, r3, r6
 80215f8:	d006      	beq.n	8021608 <_dtoa_r+0x7a0>
 80215fa:	ee18 1a10 	vmov	r1, s16
 80215fe:	4620      	mov	r0, r4
 8021600:	f000 fe04 	bl	802220c <__pow5mult>
 8021604:	ee08 0a10 	vmov	s16, r0
 8021608:	2101      	movs	r1, #1
 802160a:	4620      	mov	r0, r4
 802160c:	f000 fd3e 	bl	802208c <__i2b>
 8021610:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021612:	2b00      	cmp	r3, #0
 8021614:	4606      	mov	r6, r0
 8021616:	f340 8088 	ble.w	802172a <_dtoa_r+0x8c2>
 802161a:	461a      	mov	r2, r3
 802161c:	4601      	mov	r1, r0
 802161e:	4620      	mov	r0, r4
 8021620:	f000 fdf4 	bl	802220c <__pow5mult>
 8021624:	9b06      	ldr	r3, [sp, #24]
 8021626:	2b01      	cmp	r3, #1
 8021628:	4606      	mov	r6, r0
 802162a:	f340 8081 	ble.w	8021730 <_dtoa_r+0x8c8>
 802162e:	f04f 0800 	mov.w	r8, #0
 8021632:	6933      	ldr	r3, [r6, #16]
 8021634:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8021638:	6918      	ldr	r0, [r3, #16]
 802163a:	f000 fcd7 	bl	8021fec <__hi0bits>
 802163e:	f1c0 0020 	rsb	r0, r0, #32
 8021642:	9b05      	ldr	r3, [sp, #20]
 8021644:	4418      	add	r0, r3
 8021646:	f010 001f 	ands.w	r0, r0, #31
 802164a:	f000 8092 	beq.w	8021772 <_dtoa_r+0x90a>
 802164e:	f1c0 0320 	rsb	r3, r0, #32
 8021652:	2b04      	cmp	r3, #4
 8021654:	f340 808a 	ble.w	802176c <_dtoa_r+0x904>
 8021658:	f1c0 001c 	rsb	r0, r0, #28
 802165c:	9b04      	ldr	r3, [sp, #16]
 802165e:	4403      	add	r3, r0
 8021660:	9304      	str	r3, [sp, #16]
 8021662:	9b05      	ldr	r3, [sp, #20]
 8021664:	4403      	add	r3, r0
 8021666:	4405      	add	r5, r0
 8021668:	9305      	str	r3, [sp, #20]
 802166a:	9b04      	ldr	r3, [sp, #16]
 802166c:	2b00      	cmp	r3, #0
 802166e:	dd07      	ble.n	8021680 <_dtoa_r+0x818>
 8021670:	ee18 1a10 	vmov	r1, s16
 8021674:	461a      	mov	r2, r3
 8021676:	4620      	mov	r0, r4
 8021678:	f000 fe22 	bl	80222c0 <__lshift>
 802167c:	ee08 0a10 	vmov	s16, r0
 8021680:	9b05      	ldr	r3, [sp, #20]
 8021682:	2b00      	cmp	r3, #0
 8021684:	dd05      	ble.n	8021692 <_dtoa_r+0x82a>
 8021686:	4631      	mov	r1, r6
 8021688:	461a      	mov	r2, r3
 802168a:	4620      	mov	r0, r4
 802168c:	f000 fe18 	bl	80222c0 <__lshift>
 8021690:	4606      	mov	r6, r0
 8021692:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021694:	2b00      	cmp	r3, #0
 8021696:	d06e      	beq.n	8021776 <_dtoa_r+0x90e>
 8021698:	ee18 0a10 	vmov	r0, s16
 802169c:	4631      	mov	r1, r6
 802169e:	f000 fe7f 	bl	80223a0 <__mcmp>
 80216a2:	2800      	cmp	r0, #0
 80216a4:	da67      	bge.n	8021776 <_dtoa_r+0x90e>
 80216a6:	9b00      	ldr	r3, [sp, #0]
 80216a8:	3b01      	subs	r3, #1
 80216aa:	ee18 1a10 	vmov	r1, s16
 80216ae:	9300      	str	r3, [sp, #0]
 80216b0:	220a      	movs	r2, #10
 80216b2:	2300      	movs	r3, #0
 80216b4:	4620      	mov	r0, r4
 80216b6:	f000 fc53 	bl	8021f60 <__multadd>
 80216ba:	9b08      	ldr	r3, [sp, #32]
 80216bc:	ee08 0a10 	vmov	s16, r0
 80216c0:	2b00      	cmp	r3, #0
 80216c2:	f000 81b1 	beq.w	8021a28 <_dtoa_r+0xbc0>
 80216c6:	2300      	movs	r3, #0
 80216c8:	4639      	mov	r1, r7
 80216ca:	220a      	movs	r2, #10
 80216cc:	4620      	mov	r0, r4
 80216ce:	f000 fc47 	bl	8021f60 <__multadd>
 80216d2:	9b02      	ldr	r3, [sp, #8]
 80216d4:	2b00      	cmp	r3, #0
 80216d6:	4607      	mov	r7, r0
 80216d8:	f300 808e 	bgt.w	80217f8 <_dtoa_r+0x990>
 80216dc:	9b06      	ldr	r3, [sp, #24]
 80216de:	2b02      	cmp	r3, #2
 80216e0:	dc51      	bgt.n	8021786 <_dtoa_r+0x91e>
 80216e2:	e089      	b.n	80217f8 <_dtoa_r+0x990>
 80216e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80216e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80216ea:	e74b      	b.n	8021584 <_dtoa_r+0x71c>
 80216ec:	9b03      	ldr	r3, [sp, #12]
 80216ee:	1e5e      	subs	r6, r3, #1
 80216f0:	9b07      	ldr	r3, [sp, #28]
 80216f2:	42b3      	cmp	r3, r6
 80216f4:	bfbf      	itttt	lt
 80216f6:	9b07      	ldrlt	r3, [sp, #28]
 80216f8:	9607      	strlt	r6, [sp, #28]
 80216fa:	1af2      	sublt	r2, r6, r3
 80216fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80216fe:	bfb6      	itet	lt
 8021700:	189b      	addlt	r3, r3, r2
 8021702:	1b9e      	subge	r6, r3, r6
 8021704:	930a      	strlt	r3, [sp, #40]	; 0x28
 8021706:	9b03      	ldr	r3, [sp, #12]
 8021708:	bfb8      	it	lt
 802170a:	2600      	movlt	r6, #0
 802170c:	2b00      	cmp	r3, #0
 802170e:	bfb7      	itett	lt
 8021710:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8021714:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8021718:	1a9d      	sublt	r5, r3, r2
 802171a:	2300      	movlt	r3, #0
 802171c:	e734      	b.n	8021588 <_dtoa_r+0x720>
 802171e:	9e07      	ldr	r6, [sp, #28]
 8021720:	9d04      	ldr	r5, [sp, #16]
 8021722:	9f08      	ldr	r7, [sp, #32]
 8021724:	e73b      	b.n	802159e <_dtoa_r+0x736>
 8021726:	9a07      	ldr	r2, [sp, #28]
 8021728:	e767      	b.n	80215fa <_dtoa_r+0x792>
 802172a:	9b06      	ldr	r3, [sp, #24]
 802172c:	2b01      	cmp	r3, #1
 802172e:	dc18      	bgt.n	8021762 <_dtoa_r+0x8fa>
 8021730:	f1ba 0f00 	cmp.w	sl, #0
 8021734:	d115      	bne.n	8021762 <_dtoa_r+0x8fa>
 8021736:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802173a:	b993      	cbnz	r3, 8021762 <_dtoa_r+0x8fa>
 802173c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8021740:	0d1b      	lsrs	r3, r3, #20
 8021742:	051b      	lsls	r3, r3, #20
 8021744:	b183      	cbz	r3, 8021768 <_dtoa_r+0x900>
 8021746:	9b04      	ldr	r3, [sp, #16]
 8021748:	3301      	adds	r3, #1
 802174a:	9304      	str	r3, [sp, #16]
 802174c:	9b05      	ldr	r3, [sp, #20]
 802174e:	3301      	adds	r3, #1
 8021750:	9305      	str	r3, [sp, #20]
 8021752:	f04f 0801 	mov.w	r8, #1
 8021756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021758:	2b00      	cmp	r3, #0
 802175a:	f47f af6a 	bne.w	8021632 <_dtoa_r+0x7ca>
 802175e:	2001      	movs	r0, #1
 8021760:	e76f      	b.n	8021642 <_dtoa_r+0x7da>
 8021762:	f04f 0800 	mov.w	r8, #0
 8021766:	e7f6      	b.n	8021756 <_dtoa_r+0x8ee>
 8021768:	4698      	mov	r8, r3
 802176a:	e7f4      	b.n	8021756 <_dtoa_r+0x8ee>
 802176c:	f43f af7d 	beq.w	802166a <_dtoa_r+0x802>
 8021770:	4618      	mov	r0, r3
 8021772:	301c      	adds	r0, #28
 8021774:	e772      	b.n	802165c <_dtoa_r+0x7f4>
 8021776:	9b03      	ldr	r3, [sp, #12]
 8021778:	2b00      	cmp	r3, #0
 802177a:	dc37      	bgt.n	80217ec <_dtoa_r+0x984>
 802177c:	9b06      	ldr	r3, [sp, #24]
 802177e:	2b02      	cmp	r3, #2
 8021780:	dd34      	ble.n	80217ec <_dtoa_r+0x984>
 8021782:	9b03      	ldr	r3, [sp, #12]
 8021784:	9302      	str	r3, [sp, #8]
 8021786:	9b02      	ldr	r3, [sp, #8]
 8021788:	b96b      	cbnz	r3, 80217a6 <_dtoa_r+0x93e>
 802178a:	4631      	mov	r1, r6
 802178c:	2205      	movs	r2, #5
 802178e:	4620      	mov	r0, r4
 8021790:	f000 fbe6 	bl	8021f60 <__multadd>
 8021794:	4601      	mov	r1, r0
 8021796:	4606      	mov	r6, r0
 8021798:	ee18 0a10 	vmov	r0, s16
 802179c:	f000 fe00 	bl	80223a0 <__mcmp>
 80217a0:	2800      	cmp	r0, #0
 80217a2:	f73f adbb 	bgt.w	802131c <_dtoa_r+0x4b4>
 80217a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80217a8:	9d01      	ldr	r5, [sp, #4]
 80217aa:	43db      	mvns	r3, r3
 80217ac:	9300      	str	r3, [sp, #0]
 80217ae:	f04f 0800 	mov.w	r8, #0
 80217b2:	4631      	mov	r1, r6
 80217b4:	4620      	mov	r0, r4
 80217b6:	f000 fbb1 	bl	8021f1c <_Bfree>
 80217ba:	2f00      	cmp	r7, #0
 80217bc:	f43f aea4 	beq.w	8021508 <_dtoa_r+0x6a0>
 80217c0:	f1b8 0f00 	cmp.w	r8, #0
 80217c4:	d005      	beq.n	80217d2 <_dtoa_r+0x96a>
 80217c6:	45b8      	cmp	r8, r7
 80217c8:	d003      	beq.n	80217d2 <_dtoa_r+0x96a>
 80217ca:	4641      	mov	r1, r8
 80217cc:	4620      	mov	r0, r4
 80217ce:	f000 fba5 	bl	8021f1c <_Bfree>
 80217d2:	4639      	mov	r1, r7
 80217d4:	4620      	mov	r0, r4
 80217d6:	f000 fba1 	bl	8021f1c <_Bfree>
 80217da:	e695      	b.n	8021508 <_dtoa_r+0x6a0>
 80217dc:	2600      	movs	r6, #0
 80217de:	4637      	mov	r7, r6
 80217e0:	e7e1      	b.n	80217a6 <_dtoa_r+0x93e>
 80217e2:	9700      	str	r7, [sp, #0]
 80217e4:	4637      	mov	r7, r6
 80217e6:	e599      	b.n	802131c <_dtoa_r+0x4b4>
 80217e8:	40240000 	.word	0x40240000
 80217ec:	9b08      	ldr	r3, [sp, #32]
 80217ee:	2b00      	cmp	r3, #0
 80217f0:	f000 80ca 	beq.w	8021988 <_dtoa_r+0xb20>
 80217f4:	9b03      	ldr	r3, [sp, #12]
 80217f6:	9302      	str	r3, [sp, #8]
 80217f8:	2d00      	cmp	r5, #0
 80217fa:	dd05      	ble.n	8021808 <_dtoa_r+0x9a0>
 80217fc:	4639      	mov	r1, r7
 80217fe:	462a      	mov	r2, r5
 8021800:	4620      	mov	r0, r4
 8021802:	f000 fd5d 	bl	80222c0 <__lshift>
 8021806:	4607      	mov	r7, r0
 8021808:	f1b8 0f00 	cmp.w	r8, #0
 802180c:	d05b      	beq.n	80218c6 <_dtoa_r+0xa5e>
 802180e:	6879      	ldr	r1, [r7, #4]
 8021810:	4620      	mov	r0, r4
 8021812:	f000 fb43 	bl	8021e9c <_Balloc>
 8021816:	4605      	mov	r5, r0
 8021818:	b928      	cbnz	r0, 8021826 <_dtoa_r+0x9be>
 802181a:	4b87      	ldr	r3, [pc, #540]	; (8021a38 <_dtoa_r+0xbd0>)
 802181c:	4602      	mov	r2, r0
 802181e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8021822:	f7ff bb3b 	b.w	8020e9c <_dtoa_r+0x34>
 8021826:	693a      	ldr	r2, [r7, #16]
 8021828:	3202      	adds	r2, #2
 802182a:	0092      	lsls	r2, r2, #2
 802182c:	f107 010c 	add.w	r1, r7, #12
 8021830:	300c      	adds	r0, #12
 8021832:	f7fe fca9 	bl	8020188 <memcpy>
 8021836:	2201      	movs	r2, #1
 8021838:	4629      	mov	r1, r5
 802183a:	4620      	mov	r0, r4
 802183c:	f000 fd40 	bl	80222c0 <__lshift>
 8021840:	9b01      	ldr	r3, [sp, #4]
 8021842:	f103 0901 	add.w	r9, r3, #1
 8021846:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802184a:	4413      	add	r3, r2
 802184c:	9305      	str	r3, [sp, #20]
 802184e:	f00a 0301 	and.w	r3, sl, #1
 8021852:	46b8      	mov	r8, r7
 8021854:	9304      	str	r3, [sp, #16]
 8021856:	4607      	mov	r7, r0
 8021858:	4631      	mov	r1, r6
 802185a:	ee18 0a10 	vmov	r0, s16
 802185e:	f7ff fa77 	bl	8020d50 <quorem>
 8021862:	4641      	mov	r1, r8
 8021864:	9002      	str	r0, [sp, #8]
 8021866:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802186a:	ee18 0a10 	vmov	r0, s16
 802186e:	f000 fd97 	bl	80223a0 <__mcmp>
 8021872:	463a      	mov	r2, r7
 8021874:	9003      	str	r0, [sp, #12]
 8021876:	4631      	mov	r1, r6
 8021878:	4620      	mov	r0, r4
 802187a:	f000 fdad 	bl	80223d8 <__mdiff>
 802187e:	68c2      	ldr	r2, [r0, #12]
 8021880:	f109 3bff 	add.w	fp, r9, #4294967295
 8021884:	4605      	mov	r5, r0
 8021886:	bb02      	cbnz	r2, 80218ca <_dtoa_r+0xa62>
 8021888:	4601      	mov	r1, r0
 802188a:	ee18 0a10 	vmov	r0, s16
 802188e:	f000 fd87 	bl	80223a0 <__mcmp>
 8021892:	4602      	mov	r2, r0
 8021894:	4629      	mov	r1, r5
 8021896:	4620      	mov	r0, r4
 8021898:	9207      	str	r2, [sp, #28]
 802189a:	f000 fb3f 	bl	8021f1c <_Bfree>
 802189e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80218a2:	ea43 0102 	orr.w	r1, r3, r2
 80218a6:	9b04      	ldr	r3, [sp, #16]
 80218a8:	430b      	orrs	r3, r1
 80218aa:	464d      	mov	r5, r9
 80218ac:	d10f      	bne.n	80218ce <_dtoa_r+0xa66>
 80218ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80218b2:	d02a      	beq.n	802190a <_dtoa_r+0xaa2>
 80218b4:	9b03      	ldr	r3, [sp, #12]
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	dd02      	ble.n	80218c0 <_dtoa_r+0xa58>
 80218ba:	9b02      	ldr	r3, [sp, #8]
 80218bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80218c0:	f88b a000 	strb.w	sl, [fp]
 80218c4:	e775      	b.n	80217b2 <_dtoa_r+0x94a>
 80218c6:	4638      	mov	r0, r7
 80218c8:	e7ba      	b.n	8021840 <_dtoa_r+0x9d8>
 80218ca:	2201      	movs	r2, #1
 80218cc:	e7e2      	b.n	8021894 <_dtoa_r+0xa2c>
 80218ce:	9b03      	ldr	r3, [sp, #12]
 80218d0:	2b00      	cmp	r3, #0
 80218d2:	db04      	blt.n	80218de <_dtoa_r+0xa76>
 80218d4:	9906      	ldr	r1, [sp, #24]
 80218d6:	430b      	orrs	r3, r1
 80218d8:	9904      	ldr	r1, [sp, #16]
 80218da:	430b      	orrs	r3, r1
 80218dc:	d122      	bne.n	8021924 <_dtoa_r+0xabc>
 80218de:	2a00      	cmp	r2, #0
 80218e0:	ddee      	ble.n	80218c0 <_dtoa_r+0xa58>
 80218e2:	ee18 1a10 	vmov	r1, s16
 80218e6:	2201      	movs	r2, #1
 80218e8:	4620      	mov	r0, r4
 80218ea:	f000 fce9 	bl	80222c0 <__lshift>
 80218ee:	4631      	mov	r1, r6
 80218f0:	ee08 0a10 	vmov	s16, r0
 80218f4:	f000 fd54 	bl	80223a0 <__mcmp>
 80218f8:	2800      	cmp	r0, #0
 80218fa:	dc03      	bgt.n	8021904 <_dtoa_r+0xa9c>
 80218fc:	d1e0      	bne.n	80218c0 <_dtoa_r+0xa58>
 80218fe:	f01a 0f01 	tst.w	sl, #1
 8021902:	d0dd      	beq.n	80218c0 <_dtoa_r+0xa58>
 8021904:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8021908:	d1d7      	bne.n	80218ba <_dtoa_r+0xa52>
 802190a:	2339      	movs	r3, #57	; 0x39
 802190c:	f88b 3000 	strb.w	r3, [fp]
 8021910:	462b      	mov	r3, r5
 8021912:	461d      	mov	r5, r3
 8021914:	3b01      	subs	r3, #1
 8021916:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802191a:	2a39      	cmp	r2, #57	; 0x39
 802191c:	d071      	beq.n	8021a02 <_dtoa_r+0xb9a>
 802191e:	3201      	adds	r2, #1
 8021920:	701a      	strb	r2, [r3, #0]
 8021922:	e746      	b.n	80217b2 <_dtoa_r+0x94a>
 8021924:	2a00      	cmp	r2, #0
 8021926:	dd07      	ble.n	8021938 <_dtoa_r+0xad0>
 8021928:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802192c:	d0ed      	beq.n	802190a <_dtoa_r+0xaa2>
 802192e:	f10a 0301 	add.w	r3, sl, #1
 8021932:	f88b 3000 	strb.w	r3, [fp]
 8021936:	e73c      	b.n	80217b2 <_dtoa_r+0x94a>
 8021938:	9b05      	ldr	r3, [sp, #20]
 802193a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802193e:	4599      	cmp	r9, r3
 8021940:	d047      	beq.n	80219d2 <_dtoa_r+0xb6a>
 8021942:	ee18 1a10 	vmov	r1, s16
 8021946:	2300      	movs	r3, #0
 8021948:	220a      	movs	r2, #10
 802194a:	4620      	mov	r0, r4
 802194c:	f000 fb08 	bl	8021f60 <__multadd>
 8021950:	45b8      	cmp	r8, r7
 8021952:	ee08 0a10 	vmov	s16, r0
 8021956:	f04f 0300 	mov.w	r3, #0
 802195a:	f04f 020a 	mov.w	r2, #10
 802195e:	4641      	mov	r1, r8
 8021960:	4620      	mov	r0, r4
 8021962:	d106      	bne.n	8021972 <_dtoa_r+0xb0a>
 8021964:	f000 fafc 	bl	8021f60 <__multadd>
 8021968:	4680      	mov	r8, r0
 802196a:	4607      	mov	r7, r0
 802196c:	f109 0901 	add.w	r9, r9, #1
 8021970:	e772      	b.n	8021858 <_dtoa_r+0x9f0>
 8021972:	f000 faf5 	bl	8021f60 <__multadd>
 8021976:	4639      	mov	r1, r7
 8021978:	4680      	mov	r8, r0
 802197a:	2300      	movs	r3, #0
 802197c:	220a      	movs	r2, #10
 802197e:	4620      	mov	r0, r4
 8021980:	f000 faee 	bl	8021f60 <__multadd>
 8021984:	4607      	mov	r7, r0
 8021986:	e7f1      	b.n	802196c <_dtoa_r+0xb04>
 8021988:	9b03      	ldr	r3, [sp, #12]
 802198a:	9302      	str	r3, [sp, #8]
 802198c:	9d01      	ldr	r5, [sp, #4]
 802198e:	ee18 0a10 	vmov	r0, s16
 8021992:	4631      	mov	r1, r6
 8021994:	f7ff f9dc 	bl	8020d50 <quorem>
 8021998:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802199c:	9b01      	ldr	r3, [sp, #4]
 802199e:	f805 ab01 	strb.w	sl, [r5], #1
 80219a2:	1aea      	subs	r2, r5, r3
 80219a4:	9b02      	ldr	r3, [sp, #8]
 80219a6:	4293      	cmp	r3, r2
 80219a8:	dd09      	ble.n	80219be <_dtoa_r+0xb56>
 80219aa:	ee18 1a10 	vmov	r1, s16
 80219ae:	2300      	movs	r3, #0
 80219b0:	220a      	movs	r2, #10
 80219b2:	4620      	mov	r0, r4
 80219b4:	f000 fad4 	bl	8021f60 <__multadd>
 80219b8:	ee08 0a10 	vmov	s16, r0
 80219bc:	e7e7      	b.n	802198e <_dtoa_r+0xb26>
 80219be:	9b02      	ldr	r3, [sp, #8]
 80219c0:	2b00      	cmp	r3, #0
 80219c2:	bfc8      	it	gt
 80219c4:	461d      	movgt	r5, r3
 80219c6:	9b01      	ldr	r3, [sp, #4]
 80219c8:	bfd8      	it	le
 80219ca:	2501      	movle	r5, #1
 80219cc:	441d      	add	r5, r3
 80219ce:	f04f 0800 	mov.w	r8, #0
 80219d2:	ee18 1a10 	vmov	r1, s16
 80219d6:	2201      	movs	r2, #1
 80219d8:	4620      	mov	r0, r4
 80219da:	f000 fc71 	bl	80222c0 <__lshift>
 80219de:	4631      	mov	r1, r6
 80219e0:	ee08 0a10 	vmov	s16, r0
 80219e4:	f000 fcdc 	bl	80223a0 <__mcmp>
 80219e8:	2800      	cmp	r0, #0
 80219ea:	dc91      	bgt.n	8021910 <_dtoa_r+0xaa8>
 80219ec:	d102      	bne.n	80219f4 <_dtoa_r+0xb8c>
 80219ee:	f01a 0f01 	tst.w	sl, #1
 80219f2:	d18d      	bne.n	8021910 <_dtoa_r+0xaa8>
 80219f4:	462b      	mov	r3, r5
 80219f6:	461d      	mov	r5, r3
 80219f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80219fc:	2a30      	cmp	r2, #48	; 0x30
 80219fe:	d0fa      	beq.n	80219f6 <_dtoa_r+0xb8e>
 8021a00:	e6d7      	b.n	80217b2 <_dtoa_r+0x94a>
 8021a02:	9a01      	ldr	r2, [sp, #4]
 8021a04:	429a      	cmp	r2, r3
 8021a06:	d184      	bne.n	8021912 <_dtoa_r+0xaaa>
 8021a08:	9b00      	ldr	r3, [sp, #0]
 8021a0a:	3301      	adds	r3, #1
 8021a0c:	9300      	str	r3, [sp, #0]
 8021a0e:	2331      	movs	r3, #49	; 0x31
 8021a10:	7013      	strb	r3, [r2, #0]
 8021a12:	e6ce      	b.n	80217b2 <_dtoa_r+0x94a>
 8021a14:	4b09      	ldr	r3, [pc, #36]	; (8021a3c <_dtoa_r+0xbd4>)
 8021a16:	f7ff ba95 	b.w	8020f44 <_dtoa_r+0xdc>
 8021a1a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8021a1c:	2b00      	cmp	r3, #0
 8021a1e:	f47f aa6e 	bne.w	8020efe <_dtoa_r+0x96>
 8021a22:	4b07      	ldr	r3, [pc, #28]	; (8021a40 <_dtoa_r+0xbd8>)
 8021a24:	f7ff ba8e 	b.w	8020f44 <_dtoa_r+0xdc>
 8021a28:	9b02      	ldr	r3, [sp, #8]
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	dcae      	bgt.n	802198c <_dtoa_r+0xb24>
 8021a2e:	9b06      	ldr	r3, [sp, #24]
 8021a30:	2b02      	cmp	r3, #2
 8021a32:	f73f aea8 	bgt.w	8021786 <_dtoa_r+0x91e>
 8021a36:	e7a9      	b.n	802198c <_dtoa_r+0xb24>
 8021a38:	08023697 	.word	0x08023697
 8021a3c:	080235f4 	.word	0x080235f4
 8021a40:	08023618 	.word	0x08023618

08021a44 <__sflush_r>:
 8021a44:	898a      	ldrh	r2, [r1, #12]
 8021a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a4a:	4605      	mov	r5, r0
 8021a4c:	0710      	lsls	r0, r2, #28
 8021a4e:	460c      	mov	r4, r1
 8021a50:	d458      	bmi.n	8021b04 <__sflush_r+0xc0>
 8021a52:	684b      	ldr	r3, [r1, #4]
 8021a54:	2b00      	cmp	r3, #0
 8021a56:	dc05      	bgt.n	8021a64 <__sflush_r+0x20>
 8021a58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8021a5a:	2b00      	cmp	r3, #0
 8021a5c:	dc02      	bgt.n	8021a64 <__sflush_r+0x20>
 8021a5e:	2000      	movs	r0, #0
 8021a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021a66:	2e00      	cmp	r6, #0
 8021a68:	d0f9      	beq.n	8021a5e <__sflush_r+0x1a>
 8021a6a:	2300      	movs	r3, #0
 8021a6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8021a70:	682f      	ldr	r7, [r5, #0]
 8021a72:	602b      	str	r3, [r5, #0]
 8021a74:	d032      	beq.n	8021adc <__sflush_r+0x98>
 8021a76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021a78:	89a3      	ldrh	r3, [r4, #12]
 8021a7a:	075a      	lsls	r2, r3, #29
 8021a7c:	d505      	bpl.n	8021a8a <__sflush_r+0x46>
 8021a7e:	6863      	ldr	r3, [r4, #4]
 8021a80:	1ac0      	subs	r0, r0, r3
 8021a82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8021a84:	b10b      	cbz	r3, 8021a8a <__sflush_r+0x46>
 8021a86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021a88:	1ac0      	subs	r0, r0, r3
 8021a8a:	2300      	movs	r3, #0
 8021a8c:	4602      	mov	r2, r0
 8021a8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021a90:	6a21      	ldr	r1, [r4, #32]
 8021a92:	4628      	mov	r0, r5
 8021a94:	47b0      	blx	r6
 8021a96:	1c43      	adds	r3, r0, #1
 8021a98:	89a3      	ldrh	r3, [r4, #12]
 8021a9a:	d106      	bne.n	8021aaa <__sflush_r+0x66>
 8021a9c:	6829      	ldr	r1, [r5, #0]
 8021a9e:	291d      	cmp	r1, #29
 8021aa0:	d82c      	bhi.n	8021afc <__sflush_r+0xb8>
 8021aa2:	4a2a      	ldr	r2, [pc, #168]	; (8021b4c <__sflush_r+0x108>)
 8021aa4:	40ca      	lsrs	r2, r1
 8021aa6:	07d6      	lsls	r6, r2, #31
 8021aa8:	d528      	bpl.n	8021afc <__sflush_r+0xb8>
 8021aaa:	2200      	movs	r2, #0
 8021aac:	6062      	str	r2, [r4, #4]
 8021aae:	04d9      	lsls	r1, r3, #19
 8021ab0:	6922      	ldr	r2, [r4, #16]
 8021ab2:	6022      	str	r2, [r4, #0]
 8021ab4:	d504      	bpl.n	8021ac0 <__sflush_r+0x7c>
 8021ab6:	1c42      	adds	r2, r0, #1
 8021ab8:	d101      	bne.n	8021abe <__sflush_r+0x7a>
 8021aba:	682b      	ldr	r3, [r5, #0]
 8021abc:	b903      	cbnz	r3, 8021ac0 <__sflush_r+0x7c>
 8021abe:	6560      	str	r0, [r4, #84]	; 0x54
 8021ac0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021ac2:	602f      	str	r7, [r5, #0]
 8021ac4:	2900      	cmp	r1, #0
 8021ac6:	d0ca      	beq.n	8021a5e <__sflush_r+0x1a>
 8021ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021acc:	4299      	cmp	r1, r3
 8021ace:	d002      	beq.n	8021ad6 <__sflush_r+0x92>
 8021ad0:	4628      	mov	r0, r5
 8021ad2:	f000 fd7d 	bl	80225d0 <_free_r>
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	6360      	str	r0, [r4, #52]	; 0x34
 8021ada:	e7c1      	b.n	8021a60 <__sflush_r+0x1c>
 8021adc:	6a21      	ldr	r1, [r4, #32]
 8021ade:	2301      	movs	r3, #1
 8021ae0:	4628      	mov	r0, r5
 8021ae2:	47b0      	blx	r6
 8021ae4:	1c41      	adds	r1, r0, #1
 8021ae6:	d1c7      	bne.n	8021a78 <__sflush_r+0x34>
 8021ae8:	682b      	ldr	r3, [r5, #0]
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d0c4      	beq.n	8021a78 <__sflush_r+0x34>
 8021aee:	2b1d      	cmp	r3, #29
 8021af0:	d001      	beq.n	8021af6 <__sflush_r+0xb2>
 8021af2:	2b16      	cmp	r3, #22
 8021af4:	d101      	bne.n	8021afa <__sflush_r+0xb6>
 8021af6:	602f      	str	r7, [r5, #0]
 8021af8:	e7b1      	b.n	8021a5e <__sflush_r+0x1a>
 8021afa:	89a3      	ldrh	r3, [r4, #12]
 8021afc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b00:	81a3      	strh	r3, [r4, #12]
 8021b02:	e7ad      	b.n	8021a60 <__sflush_r+0x1c>
 8021b04:	690f      	ldr	r7, [r1, #16]
 8021b06:	2f00      	cmp	r7, #0
 8021b08:	d0a9      	beq.n	8021a5e <__sflush_r+0x1a>
 8021b0a:	0793      	lsls	r3, r2, #30
 8021b0c:	680e      	ldr	r6, [r1, #0]
 8021b0e:	bf08      	it	eq
 8021b10:	694b      	ldreq	r3, [r1, #20]
 8021b12:	600f      	str	r7, [r1, #0]
 8021b14:	bf18      	it	ne
 8021b16:	2300      	movne	r3, #0
 8021b18:	eba6 0807 	sub.w	r8, r6, r7
 8021b1c:	608b      	str	r3, [r1, #8]
 8021b1e:	f1b8 0f00 	cmp.w	r8, #0
 8021b22:	dd9c      	ble.n	8021a5e <__sflush_r+0x1a>
 8021b24:	6a21      	ldr	r1, [r4, #32]
 8021b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8021b28:	4643      	mov	r3, r8
 8021b2a:	463a      	mov	r2, r7
 8021b2c:	4628      	mov	r0, r5
 8021b2e:	47b0      	blx	r6
 8021b30:	2800      	cmp	r0, #0
 8021b32:	dc06      	bgt.n	8021b42 <__sflush_r+0xfe>
 8021b34:	89a3      	ldrh	r3, [r4, #12]
 8021b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b3a:	81a3      	strh	r3, [r4, #12]
 8021b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8021b40:	e78e      	b.n	8021a60 <__sflush_r+0x1c>
 8021b42:	4407      	add	r7, r0
 8021b44:	eba8 0800 	sub.w	r8, r8, r0
 8021b48:	e7e9      	b.n	8021b1e <__sflush_r+0xda>
 8021b4a:	bf00      	nop
 8021b4c:	20400001 	.word	0x20400001

08021b50 <_fflush_r>:
 8021b50:	b538      	push	{r3, r4, r5, lr}
 8021b52:	690b      	ldr	r3, [r1, #16]
 8021b54:	4605      	mov	r5, r0
 8021b56:	460c      	mov	r4, r1
 8021b58:	b913      	cbnz	r3, 8021b60 <_fflush_r+0x10>
 8021b5a:	2500      	movs	r5, #0
 8021b5c:	4628      	mov	r0, r5
 8021b5e:	bd38      	pop	{r3, r4, r5, pc}
 8021b60:	b118      	cbz	r0, 8021b6a <_fflush_r+0x1a>
 8021b62:	6983      	ldr	r3, [r0, #24]
 8021b64:	b90b      	cbnz	r3, 8021b6a <_fflush_r+0x1a>
 8021b66:	f000 f887 	bl	8021c78 <__sinit>
 8021b6a:	4b14      	ldr	r3, [pc, #80]	; (8021bbc <_fflush_r+0x6c>)
 8021b6c:	429c      	cmp	r4, r3
 8021b6e:	d11b      	bne.n	8021ba8 <_fflush_r+0x58>
 8021b70:	686c      	ldr	r4, [r5, #4]
 8021b72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021b76:	2b00      	cmp	r3, #0
 8021b78:	d0ef      	beq.n	8021b5a <_fflush_r+0xa>
 8021b7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021b7c:	07d0      	lsls	r0, r2, #31
 8021b7e:	d404      	bmi.n	8021b8a <_fflush_r+0x3a>
 8021b80:	0599      	lsls	r1, r3, #22
 8021b82:	d402      	bmi.n	8021b8a <_fflush_r+0x3a>
 8021b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021b86:	f000 f91a 	bl	8021dbe <__retarget_lock_acquire_recursive>
 8021b8a:	4628      	mov	r0, r5
 8021b8c:	4621      	mov	r1, r4
 8021b8e:	f7ff ff59 	bl	8021a44 <__sflush_r>
 8021b92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021b94:	07da      	lsls	r2, r3, #31
 8021b96:	4605      	mov	r5, r0
 8021b98:	d4e0      	bmi.n	8021b5c <_fflush_r+0xc>
 8021b9a:	89a3      	ldrh	r3, [r4, #12]
 8021b9c:	059b      	lsls	r3, r3, #22
 8021b9e:	d4dd      	bmi.n	8021b5c <_fflush_r+0xc>
 8021ba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021ba2:	f000 f90d 	bl	8021dc0 <__retarget_lock_release_recursive>
 8021ba6:	e7d9      	b.n	8021b5c <_fflush_r+0xc>
 8021ba8:	4b05      	ldr	r3, [pc, #20]	; (8021bc0 <_fflush_r+0x70>)
 8021baa:	429c      	cmp	r4, r3
 8021bac:	d101      	bne.n	8021bb2 <_fflush_r+0x62>
 8021bae:	68ac      	ldr	r4, [r5, #8]
 8021bb0:	e7df      	b.n	8021b72 <_fflush_r+0x22>
 8021bb2:	4b04      	ldr	r3, [pc, #16]	; (8021bc4 <_fflush_r+0x74>)
 8021bb4:	429c      	cmp	r4, r3
 8021bb6:	bf08      	it	eq
 8021bb8:	68ec      	ldreq	r4, [r5, #12]
 8021bba:	e7da      	b.n	8021b72 <_fflush_r+0x22>
 8021bbc:	080236c8 	.word	0x080236c8
 8021bc0:	080236e8 	.word	0x080236e8
 8021bc4:	080236a8 	.word	0x080236a8

08021bc8 <std>:
 8021bc8:	2300      	movs	r3, #0
 8021bca:	b510      	push	{r4, lr}
 8021bcc:	4604      	mov	r4, r0
 8021bce:	e9c0 3300 	strd	r3, r3, [r0]
 8021bd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021bd6:	6083      	str	r3, [r0, #8]
 8021bd8:	8181      	strh	r1, [r0, #12]
 8021bda:	6643      	str	r3, [r0, #100]	; 0x64
 8021bdc:	81c2      	strh	r2, [r0, #14]
 8021bde:	6183      	str	r3, [r0, #24]
 8021be0:	4619      	mov	r1, r3
 8021be2:	2208      	movs	r2, #8
 8021be4:	305c      	adds	r0, #92	; 0x5c
 8021be6:	f7fe fadd 	bl	80201a4 <memset>
 8021bea:	4b05      	ldr	r3, [pc, #20]	; (8021c00 <std+0x38>)
 8021bec:	6263      	str	r3, [r4, #36]	; 0x24
 8021bee:	4b05      	ldr	r3, [pc, #20]	; (8021c04 <std+0x3c>)
 8021bf0:	62a3      	str	r3, [r4, #40]	; 0x28
 8021bf2:	4b05      	ldr	r3, [pc, #20]	; (8021c08 <std+0x40>)
 8021bf4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021bf6:	4b05      	ldr	r3, [pc, #20]	; (8021c0c <std+0x44>)
 8021bf8:	6224      	str	r4, [r4, #32]
 8021bfa:	6323      	str	r3, [r4, #48]	; 0x30
 8021bfc:	bd10      	pop	{r4, pc}
 8021bfe:	bf00      	nop
 8021c00:	08022af5 	.word	0x08022af5
 8021c04:	08022b17 	.word	0x08022b17
 8021c08:	08022b4f 	.word	0x08022b4f
 8021c0c:	08022b73 	.word	0x08022b73

08021c10 <_cleanup_r>:
 8021c10:	4901      	ldr	r1, [pc, #4]	; (8021c18 <_cleanup_r+0x8>)
 8021c12:	f000 b8af 	b.w	8021d74 <_fwalk_reent>
 8021c16:	bf00      	nop
 8021c18:	08021b51 	.word	0x08021b51

08021c1c <__sfmoreglue>:
 8021c1c:	b570      	push	{r4, r5, r6, lr}
 8021c1e:	2268      	movs	r2, #104	; 0x68
 8021c20:	1e4d      	subs	r5, r1, #1
 8021c22:	4355      	muls	r5, r2
 8021c24:	460e      	mov	r6, r1
 8021c26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021c2a:	f000 fd3d 	bl	80226a8 <_malloc_r>
 8021c2e:	4604      	mov	r4, r0
 8021c30:	b140      	cbz	r0, 8021c44 <__sfmoreglue+0x28>
 8021c32:	2100      	movs	r1, #0
 8021c34:	e9c0 1600 	strd	r1, r6, [r0]
 8021c38:	300c      	adds	r0, #12
 8021c3a:	60a0      	str	r0, [r4, #8]
 8021c3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021c40:	f7fe fab0 	bl	80201a4 <memset>
 8021c44:	4620      	mov	r0, r4
 8021c46:	bd70      	pop	{r4, r5, r6, pc}

08021c48 <__sfp_lock_acquire>:
 8021c48:	4801      	ldr	r0, [pc, #4]	; (8021c50 <__sfp_lock_acquire+0x8>)
 8021c4a:	f000 b8b8 	b.w	8021dbe <__retarget_lock_acquire_recursive>
 8021c4e:	bf00      	nop
 8021c50:	2000f90d 	.word	0x2000f90d

08021c54 <__sfp_lock_release>:
 8021c54:	4801      	ldr	r0, [pc, #4]	; (8021c5c <__sfp_lock_release+0x8>)
 8021c56:	f000 b8b3 	b.w	8021dc0 <__retarget_lock_release_recursive>
 8021c5a:	bf00      	nop
 8021c5c:	2000f90d 	.word	0x2000f90d

08021c60 <__sinit_lock_acquire>:
 8021c60:	4801      	ldr	r0, [pc, #4]	; (8021c68 <__sinit_lock_acquire+0x8>)
 8021c62:	f000 b8ac 	b.w	8021dbe <__retarget_lock_acquire_recursive>
 8021c66:	bf00      	nop
 8021c68:	2000f90e 	.word	0x2000f90e

08021c6c <__sinit_lock_release>:
 8021c6c:	4801      	ldr	r0, [pc, #4]	; (8021c74 <__sinit_lock_release+0x8>)
 8021c6e:	f000 b8a7 	b.w	8021dc0 <__retarget_lock_release_recursive>
 8021c72:	bf00      	nop
 8021c74:	2000f90e 	.word	0x2000f90e

08021c78 <__sinit>:
 8021c78:	b510      	push	{r4, lr}
 8021c7a:	4604      	mov	r4, r0
 8021c7c:	f7ff fff0 	bl	8021c60 <__sinit_lock_acquire>
 8021c80:	69a3      	ldr	r3, [r4, #24]
 8021c82:	b11b      	cbz	r3, 8021c8c <__sinit+0x14>
 8021c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c88:	f7ff bff0 	b.w	8021c6c <__sinit_lock_release>
 8021c8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021c90:	6523      	str	r3, [r4, #80]	; 0x50
 8021c92:	4b13      	ldr	r3, [pc, #76]	; (8021ce0 <__sinit+0x68>)
 8021c94:	4a13      	ldr	r2, [pc, #76]	; (8021ce4 <__sinit+0x6c>)
 8021c96:	681b      	ldr	r3, [r3, #0]
 8021c98:	62a2      	str	r2, [r4, #40]	; 0x28
 8021c9a:	42a3      	cmp	r3, r4
 8021c9c:	bf04      	itt	eq
 8021c9e:	2301      	moveq	r3, #1
 8021ca0:	61a3      	streq	r3, [r4, #24]
 8021ca2:	4620      	mov	r0, r4
 8021ca4:	f000 f820 	bl	8021ce8 <__sfp>
 8021ca8:	6060      	str	r0, [r4, #4]
 8021caa:	4620      	mov	r0, r4
 8021cac:	f000 f81c 	bl	8021ce8 <__sfp>
 8021cb0:	60a0      	str	r0, [r4, #8]
 8021cb2:	4620      	mov	r0, r4
 8021cb4:	f000 f818 	bl	8021ce8 <__sfp>
 8021cb8:	2200      	movs	r2, #0
 8021cba:	60e0      	str	r0, [r4, #12]
 8021cbc:	2104      	movs	r1, #4
 8021cbe:	6860      	ldr	r0, [r4, #4]
 8021cc0:	f7ff ff82 	bl	8021bc8 <std>
 8021cc4:	68a0      	ldr	r0, [r4, #8]
 8021cc6:	2201      	movs	r2, #1
 8021cc8:	2109      	movs	r1, #9
 8021cca:	f7ff ff7d 	bl	8021bc8 <std>
 8021cce:	68e0      	ldr	r0, [r4, #12]
 8021cd0:	2202      	movs	r2, #2
 8021cd2:	2112      	movs	r1, #18
 8021cd4:	f7ff ff78 	bl	8021bc8 <std>
 8021cd8:	2301      	movs	r3, #1
 8021cda:	61a3      	str	r3, [r4, #24]
 8021cdc:	e7d2      	b.n	8021c84 <__sinit+0xc>
 8021cde:	bf00      	nop
 8021ce0:	080235e0 	.word	0x080235e0
 8021ce4:	08021c11 	.word	0x08021c11

08021ce8 <__sfp>:
 8021ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cea:	4607      	mov	r7, r0
 8021cec:	f7ff ffac 	bl	8021c48 <__sfp_lock_acquire>
 8021cf0:	4b1e      	ldr	r3, [pc, #120]	; (8021d6c <__sfp+0x84>)
 8021cf2:	681e      	ldr	r6, [r3, #0]
 8021cf4:	69b3      	ldr	r3, [r6, #24]
 8021cf6:	b913      	cbnz	r3, 8021cfe <__sfp+0x16>
 8021cf8:	4630      	mov	r0, r6
 8021cfa:	f7ff ffbd 	bl	8021c78 <__sinit>
 8021cfe:	3648      	adds	r6, #72	; 0x48
 8021d00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021d04:	3b01      	subs	r3, #1
 8021d06:	d503      	bpl.n	8021d10 <__sfp+0x28>
 8021d08:	6833      	ldr	r3, [r6, #0]
 8021d0a:	b30b      	cbz	r3, 8021d50 <__sfp+0x68>
 8021d0c:	6836      	ldr	r6, [r6, #0]
 8021d0e:	e7f7      	b.n	8021d00 <__sfp+0x18>
 8021d10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021d14:	b9d5      	cbnz	r5, 8021d4c <__sfp+0x64>
 8021d16:	4b16      	ldr	r3, [pc, #88]	; (8021d70 <__sfp+0x88>)
 8021d18:	60e3      	str	r3, [r4, #12]
 8021d1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021d1e:	6665      	str	r5, [r4, #100]	; 0x64
 8021d20:	f000 f84c 	bl	8021dbc <__retarget_lock_init_recursive>
 8021d24:	f7ff ff96 	bl	8021c54 <__sfp_lock_release>
 8021d28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021d2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021d30:	6025      	str	r5, [r4, #0]
 8021d32:	61a5      	str	r5, [r4, #24]
 8021d34:	2208      	movs	r2, #8
 8021d36:	4629      	mov	r1, r5
 8021d38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021d3c:	f7fe fa32 	bl	80201a4 <memset>
 8021d40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021d44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021d48:	4620      	mov	r0, r4
 8021d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d4c:	3468      	adds	r4, #104	; 0x68
 8021d4e:	e7d9      	b.n	8021d04 <__sfp+0x1c>
 8021d50:	2104      	movs	r1, #4
 8021d52:	4638      	mov	r0, r7
 8021d54:	f7ff ff62 	bl	8021c1c <__sfmoreglue>
 8021d58:	4604      	mov	r4, r0
 8021d5a:	6030      	str	r0, [r6, #0]
 8021d5c:	2800      	cmp	r0, #0
 8021d5e:	d1d5      	bne.n	8021d0c <__sfp+0x24>
 8021d60:	f7ff ff78 	bl	8021c54 <__sfp_lock_release>
 8021d64:	230c      	movs	r3, #12
 8021d66:	603b      	str	r3, [r7, #0]
 8021d68:	e7ee      	b.n	8021d48 <__sfp+0x60>
 8021d6a:	bf00      	nop
 8021d6c:	080235e0 	.word	0x080235e0
 8021d70:	ffff0001 	.word	0xffff0001

08021d74 <_fwalk_reent>:
 8021d74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d78:	4606      	mov	r6, r0
 8021d7a:	4688      	mov	r8, r1
 8021d7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021d80:	2700      	movs	r7, #0
 8021d82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021d86:	f1b9 0901 	subs.w	r9, r9, #1
 8021d8a:	d505      	bpl.n	8021d98 <_fwalk_reent+0x24>
 8021d8c:	6824      	ldr	r4, [r4, #0]
 8021d8e:	2c00      	cmp	r4, #0
 8021d90:	d1f7      	bne.n	8021d82 <_fwalk_reent+0xe>
 8021d92:	4638      	mov	r0, r7
 8021d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d98:	89ab      	ldrh	r3, [r5, #12]
 8021d9a:	2b01      	cmp	r3, #1
 8021d9c:	d907      	bls.n	8021dae <_fwalk_reent+0x3a>
 8021d9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021da2:	3301      	adds	r3, #1
 8021da4:	d003      	beq.n	8021dae <_fwalk_reent+0x3a>
 8021da6:	4629      	mov	r1, r5
 8021da8:	4630      	mov	r0, r6
 8021daa:	47c0      	blx	r8
 8021dac:	4307      	orrs	r7, r0
 8021dae:	3568      	adds	r5, #104	; 0x68
 8021db0:	e7e9      	b.n	8021d86 <_fwalk_reent+0x12>
	...

08021db4 <_localeconv_r>:
 8021db4:	4800      	ldr	r0, [pc, #0]	; (8021db8 <_localeconv_r+0x4>)
 8021db6:	4770      	bx	lr
 8021db8:	20000180 	.word	0x20000180

08021dbc <__retarget_lock_init_recursive>:
 8021dbc:	4770      	bx	lr

08021dbe <__retarget_lock_acquire_recursive>:
 8021dbe:	4770      	bx	lr

08021dc0 <__retarget_lock_release_recursive>:
 8021dc0:	4770      	bx	lr

08021dc2 <__swhatbuf_r>:
 8021dc2:	b570      	push	{r4, r5, r6, lr}
 8021dc4:	460e      	mov	r6, r1
 8021dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021dca:	2900      	cmp	r1, #0
 8021dcc:	b096      	sub	sp, #88	; 0x58
 8021dce:	4614      	mov	r4, r2
 8021dd0:	461d      	mov	r5, r3
 8021dd2:	da08      	bge.n	8021de6 <__swhatbuf_r+0x24>
 8021dd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8021dd8:	2200      	movs	r2, #0
 8021dda:	602a      	str	r2, [r5, #0]
 8021ddc:	061a      	lsls	r2, r3, #24
 8021dde:	d410      	bmi.n	8021e02 <__swhatbuf_r+0x40>
 8021de0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8021de4:	e00e      	b.n	8021e04 <__swhatbuf_r+0x42>
 8021de6:	466a      	mov	r2, sp
 8021de8:	f000 ff1a 	bl	8022c20 <_fstat_r>
 8021dec:	2800      	cmp	r0, #0
 8021dee:	dbf1      	blt.n	8021dd4 <__swhatbuf_r+0x12>
 8021df0:	9a01      	ldr	r2, [sp, #4]
 8021df2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8021df6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8021dfa:	425a      	negs	r2, r3
 8021dfc:	415a      	adcs	r2, r3
 8021dfe:	602a      	str	r2, [r5, #0]
 8021e00:	e7ee      	b.n	8021de0 <__swhatbuf_r+0x1e>
 8021e02:	2340      	movs	r3, #64	; 0x40
 8021e04:	2000      	movs	r0, #0
 8021e06:	6023      	str	r3, [r4, #0]
 8021e08:	b016      	add	sp, #88	; 0x58
 8021e0a:	bd70      	pop	{r4, r5, r6, pc}

08021e0c <__smakebuf_r>:
 8021e0c:	898b      	ldrh	r3, [r1, #12]
 8021e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8021e10:	079d      	lsls	r5, r3, #30
 8021e12:	4606      	mov	r6, r0
 8021e14:	460c      	mov	r4, r1
 8021e16:	d507      	bpl.n	8021e28 <__smakebuf_r+0x1c>
 8021e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8021e1c:	6023      	str	r3, [r4, #0]
 8021e1e:	6123      	str	r3, [r4, #16]
 8021e20:	2301      	movs	r3, #1
 8021e22:	6163      	str	r3, [r4, #20]
 8021e24:	b002      	add	sp, #8
 8021e26:	bd70      	pop	{r4, r5, r6, pc}
 8021e28:	ab01      	add	r3, sp, #4
 8021e2a:	466a      	mov	r2, sp
 8021e2c:	f7ff ffc9 	bl	8021dc2 <__swhatbuf_r>
 8021e30:	9900      	ldr	r1, [sp, #0]
 8021e32:	4605      	mov	r5, r0
 8021e34:	4630      	mov	r0, r6
 8021e36:	f000 fc37 	bl	80226a8 <_malloc_r>
 8021e3a:	b948      	cbnz	r0, 8021e50 <__smakebuf_r+0x44>
 8021e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021e40:	059a      	lsls	r2, r3, #22
 8021e42:	d4ef      	bmi.n	8021e24 <__smakebuf_r+0x18>
 8021e44:	f023 0303 	bic.w	r3, r3, #3
 8021e48:	f043 0302 	orr.w	r3, r3, #2
 8021e4c:	81a3      	strh	r3, [r4, #12]
 8021e4e:	e7e3      	b.n	8021e18 <__smakebuf_r+0xc>
 8021e50:	4b0d      	ldr	r3, [pc, #52]	; (8021e88 <__smakebuf_r+0x7c>)
 8021e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8021e54:	89a3      	ldrh	r3, [r4, #12]
 8021e56:	6020      	str	r0, [r4, #0]
 8021e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021e5c:	81a3      	strh	r3, [r4, #12]
 8021e5e:	9b00      	ldr	r3, [sp, #0]
 8021e60:	6163      	str	r3, [r4, #20]
 8021e62:	9b01      	ldr	r3, [sp, #4]
 8021e64:	6120      	str	r0, [r4, #16]
 8021e66:	b15b      	cbz	r3, 8021e80 <__smakebuf_r+0x74>
 8021e68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021e6c:	4630      	mov	r0, r6
 8021e6e:	f000 fee9 	bl	8022c44 <_isatty_r>
 8021e72:	b128      	cbz	r0, 8021e80 <__smakebuf_r+0x74>
 8021e74:	89a3      	ldrh	r3, [r4, #12]
 8021e76:	f023 0303 	bic.w	r3, r3, #3
 8021e7a:	f043 0301 	orr.w	r3, r3, #1
 8021e7e:	81a3      	strh	r3, [r4, #12]
 8021e80:	89a0      	ldrh	r0, [r4, #12]
 8021e82:	4305      	orrs	r5, r0
 8021e84:	81a5      	strh	r5, [r4, #12]
 8021e86:	e7cd      	b.n	8021e24 <__smakebuf_r+0x18>
 8021e88:	08021c11 	.word	0x08021c11

08021e8c <malloc>:
 8021e8c:	4b02      	ldr	r3, [pc, #8]	; (8021e98 <malloc+0xc>)
 8021e8e:	4601      	mov	r1, r0
 8021e90:	6818      	ldr	r0, [r3, #0]
 8021e92:	f000 bc09 	b.w	80226a8 <_malloc_r>
 8021e96:	bf00      	nop
 8021e98:	2000002c 	.word	0x2000002c

08021e9c <_Balloc>:
 8021e9c:	b570      	push	{r4, r5, r6, lr}
 8021e9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021ea0:	4604      	mov	r4, r0
 8021ea2:	460d      	mov	r5, r1
 8021ea4:	b976      	cbnz	r6, 8021ec4 <_Balloc+0x28>
 8021ea6:	2010      	movs	r0, #16
 8021ea8:	f7ff fff0 	bl	8021e8c <malloc>
 8021eac:	4602      	mov	r2, r0
 8021eae:	6260      	str	r0, [r4, #36]	; 0x24
 8021eb0:	b920      	cbnz	r0, 8021ebc <_Balloc+0x20>
 8021eb2:	4b18      	ldr	r3, [pc, #96]	; (8021f14 <_Balloc+0x78>)
 8021eb4:	4818      	ldr	r0, [pc, #96]	; (8021f18 <_Balloc+0x7c>)
 8021eb6:	2166      	movs	r1, #102	; 0x66
 8021eb8:	f000 fe72 	bl	8022ba0 <__assert_func>
 8021ebc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021ec0:	6006      	str	r6, [r0, #0]
 8021ec2:	60c6      	str	r6, [r0, #12]
 8021ec4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021ec6:	68f3      	ldr	r3, [r6, #12]
 8021ec8:	b183      	cbz	r3, 8021eec <_Balloc+0x50>
 8021eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021ecc:	68db      	ldr	r3, [r3, #12]
 8021ece:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8021ed2:	b9b8      	cbnz	r0, 8021f04 <_Balloc+0x68>
 8021ed4:	2101      	movs	r1, #1
 8021ed6:	fa01 f605 	lsl.w	r6, r1, r5
 8021eda:	1d72      	adds	r2, r6, #5
 8021edc:	0092      	lsls	r2, r2, #2
 8021ede:	4620      	mov	r0, r4
 8021ee0:	f000 fb60 	bl	80225a4 <_calloc_r>
 8021ee4:	b160      	cbz	r0, 8021f00 <_Balloc+0x64>
 8021ee6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8021eea:	e00e      	b.n	8021f0a <_Balloc+0x6e>
 8021eec:	2221      	movs	r2, #33	; 0x21
 8021eee:	2104      	movs	r1, #4
 8021ef0:	4620      	mov	r0, r4
 8021ef2:	f000 fb57 	bl	80225a4 <_calloc_r>
 8021ef6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021ef8:	60f0      	str	r0, [r6, #12]
 8021efa:	68db      	ldr	r3, [r3, #12]
 8021efc:	2b00      	cmp	r3, #0
 8021efe:	d1e4      	bne.n	8021eca <_Balloc+0x2e>
 8021f00:	2000      	movs	r0, #0
 8021f02:	bd70      	pop	{r4, r5, r6, pc}
 8021f04:	6802      	ldr	r2, [r0, #0]
 8021f06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8021f0a:	2300      	movs	r3, #0
 8021f0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021f10:	e7f7      	b.n	8021f02 <_Balloc+0x66>
 8021f12:	bf00      	nop
 8021f14:	08023625 	.word	0x08023625
 8021f18:	08023708 	.word	0x08023708

08021f1c <_Bfree>:
 8021f1c:	b570      	push	{r4, r5, r6, lr}
 8021f1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021f20:	4605      	mov	r5, r0
 8021f22:	460c      	mov	r4, r1
 8021f24:	b976      	cbnz	r6, 8021f44 <_Bfree+0x28>
 8021f26:	2010      	movs	r0, #16
 8021f28:	f7ff ffb0 	bl	8021e8c <malloc>
 8021f2c:	4602      	mov	r2, r0
 8021f2e:	6268      	str	r0, [r5, #36]	; 0x24
 8021f30:	b920      	cbnz	r0, 8021f3c <_Bfree+0x20>
 8021f32:	4b09      	ldr	r3, [pc, #36]	; (8021f58 <_Bfree+0x3c>)
 8021f34:	4809      	ldr	r0, [pc, #36]	; (8021f5c <_Bfree+0x40>)
 8021f36:	218a      	movs	r1, #138	; 0x8a
 8021f38:	f000 fe32 	bl	8022ba0 <__assert_func>
 8021f3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021f40:	6006      	str	r6, [r0, #0]
 8021f42:	60c6      	str	r6, [r0, #12]
 8021f44:	b13c      	cbz	r4, 8021f56 <_Bfree+0x3a>
 8021f46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021f48:	6862      	ldr	r2, [r4, #4]
 8021f4a:	68db      	ldr	r3, [r3, #12]
 8021f4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021f50:	6021      	str	r1, [r4, #0]
 8021f52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021f56:	bd70      	pop	{r4, r5, r6, pc}
 8021f58:	08023625 	.word	0x08023625
 8021f5c:	08023708 	.word	0x08023708

08021f60 <__multadd>:
 8021f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f64:	690d      	ldr	r5, [r1, #16]
 8021f66:	4607      	mov	r7, r0
 8021f68:	460c      	mov	r4, r1
 8021f6a:	461e      	mov	r6, r3
 8021f6c:	f101 0c14 	add.w	ip, r1, #20
 8021f70:	2000      	movs	r0, #0
 8021f72:	f8dc 3000 	ldr.w	r3, [ip]
 8021f76:	b299      	uxth	r1, r3
 8021f78:	fb02 6101 	mla	r1, r2, r1, r6
 8021f7c:	0c1e      	lsrs	r6, r3, #16
 8021f7e:	0c0b      	lsrs	r3, r1, #16
 8021f80:	fb02 3306 	mla	r3, r2, r6, r3
 8021f84:	b289      	uxth	r1, r1
 8021f86:	3001      	adds	r0, #1
 8021f88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8021f8c:	4285      	cmp	r5, r0
 8021f8e:	f84c 1b04 	str.w	r1, [ip], #4
 8021f92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8021f96:	dcec      	bgt.n	8021f72 <__multadd+0x12>
 8021f98:	b30e      	cbz	r6, 8021fde <__multadd+0x7e>
 8021f9a:	68a3      	ldr	r3, [r4, #8]
 8021f9c:	42ab      	cmp	r3, r5
 8021f9e:	dc19      	bgt.n	8021fd4 <__multadd+0x74>
 8021fa0:	6861      	ldr	r1, [r4, #4]
 8021fa2:	4638      	mov	r0, r7
 8021fa4:	3101      	adds	r1, #1
 8021fa6:	f7ff ff79 	bl	8021e9c <_Balloc>
 8021faa:	4680      	mov	r8, r0
 8021fac:	b928      	cbnz	r0, 8021fba <__multadd+0x5a>
 8021fae:	4602      	mov	r2, r0
 8021fb0:	4b0c      	ldr	r3, [pc, #48]	; (8021fe4 <__multadd+0x84>)
 8021fb2:	480d      	ldr	r0, [pc, #52]	; (8021fe8 <__multadd+0x88>)
 8021fb4:	21b5      	movs	r1, #181	; 0xb5
 8021fb6:	f000 fdf3 	bl	8022ba0 <__assert_func>
 8021fba:	6922      	ldr	r2, [r4, #16]
 8021fbc:	3202      	adds	r2, #2
 8021fbe:	f104 010c 	add.w	r1, r4, #12
 8021fc2:	0092      	lsls	r2, r2, #2
 8021fc4:	300c      	adds	r0, #12
 8021fc6:	f7fe f8df 	bl	8020188 <memcpy>
 8021fca:	4621      	mov	r1, r4
 8021fcc:	4638      	mov	r0, r7
 8021fce:	f7ff ffa5 	bl	8021f1c <_Bfree>
 8021fd2:	4644      	mov	r4, r8
 8021fd4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8021fd8:	3501      	adds	r5, #1
 8021fda:	615e      	str	r6, [r3, #20]
 8021fdc:	6125      	str	r5, [r4, #16]
 8021fde:	4620      	mov	r0, r4
 8021fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021fe4:	08023697 	.word	0x08023697
 8021fe8:	08023708 	.word	0x08023708

08021fec <__hi0bits>:
 8021fec:	0c03      	lsrs	r3, r0, #16
 8021fee:	041b      	lsls	r3, r3, #16
 8021ff0:	b9d3      	cbnz	r3, 8022028 <__hi0bits+0x3c>
 8021ff2:	0400      	lsls	r0, r0, #16
 8021ff4:	2310      	movs	r3, #16
 8021ff6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021ffa:	bf04      	itt	eq
 8021ffc:	0200      	lsleq	r0, r0, #8
 8021ffe:	3308      	addeq	r3, #8
 8022000:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8022004:	bf04      	itt	eq
 8022006:	0100      	lsleq	r0, r0, #4
 8022008:	3304      	addeq	r3, #4
 802200a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802200e:	bf04      	itt	eq
 8022010:	0080      	lsleq	r0, r0, #2
 8022012:	3302      	addeq	r3, #2
 8022014:	2800      	cmp	r0, #0
 8022016:	db05      	blt.n	8022024 <__hi0bits+0x38>
 8022018:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802201c:	f103 0301 	add.w	r3, r3, #1
 8022020:	bf08      	it	eq
 8022022:	2320      	moveq	r3, #32
 8022024:	4618      	mov	r0, r3
 8022026:	4770      	bx	lr
 8022028:	2300      	movs	r3, #0
 802202a:	e7e4      	b.n	8021ff6 <__hi0bits+0xa>

0802202c <__lo0bits>:
 802202c:	6803      	ldr	r3, [r0, #0]
 802202e:	f013 0207 	ands.w	r2, r3, #7
 8022032:	4601      	mov	r1, r0
 8022034:	d00b      	beq.n	802204e <__lo0bits+0x22>
 8022036:	07da      	lsls	r2, r3, #31
 8022038:	d423      	bmi.n	8022082 <__lo0bits+0x56>
 802203a:	0798      	lsls	r0, r3, #30
 802203c:	bf49      	itett	mi
 802203e:	085b      	lsrmi	r3, r3, #1
 8022040:	089b      	lsrpl	r3, r3, #2
 8022042:	2001      	movmi	r0, #1
 8022044:	600b      	strmi	r3, [r1, #0]
 8022046:	bf5c      	itt	pl
 8022048:	600b      	strpl	r3, [r1, #0]
 802204a:	2002      	movpl	r0, #2
 802204c:	4770      	bx	lr
 802204e:	b298      	uxth	r0, r3
 8022050:	b9a8      	cbnz	r0, 802207e <__lo0bits+0x52>
 8022052:	0c1b      	lsrs	r3, r3, #16
 8022054:	2010      	movs	r0, #16
 8022056:	b2da      	uxtb	r2, r3
 8022058:	b90a      	cbnz	r2, 802205e <__lo0bits+0x32>
 802205a:	3008      	adds	r0, #8
 802205c:	0a1b      	lsrs	r3, r3, #8
 802205e:	071a      	lsls	r2, r3, #28
 8022060:	bf04      	itt	eq
 8022062:	091b      	lsreq	r3, r3, #4
 8022064:	3004      	addeq	r0, #4
 8022066:	079a      	lsls	r2, r3, #30
 8022068:	bf04      	itt	eq
 802206a:	089b      	lsreq	r3, r3, #2
 802206c:	3002      	addeq	r0, #2
 802206e:	07da      	lsls	r2, r3, #31
 8022070:	d403      	bmi.n	802207a <__lo0bits+0x4e>
 8022072:	085b      	lsrs	r3, r3, #1
 8022074:	f100 0001 	add.w	r0, r0, #1
 8022078:	d005      	beq.n	8022086 <__lo0bits+0x5a>
 802207a:	600b      	str	r3, [r1, #0]
 802207c:	4770      	bx	lr
 802207e:	4610      	mov	r0, r2
 8022080:	e7e9      	b.n	8022056 <__lo0bits+0x2a>
 8022082:	2000      	movs	r0, #0
 8022084:	4770      	bx	lr
 8022086:	2020      	movs	r0, #32
 8022088:	4770      	bx	lr
	...

0802208c <__i2b>:
 802208c:	b510      	push	{r4, lr}
 802208e:	460c      	mov	r4, r1
 8022090:	2101      	movs	r1, #1
 8022092:	f7ff ff03 	bl	8021e9c <_Balloc>
 8022096:	4602      	mov	r2, r0
 8022098:	b928      	cbnz	r0, 80220a6 <__i2b+0x1a>
 802209a:	4b05      	ldr	r3, [pc, #20]	; (80220b0 <__i2b+0x24>)
 802209c:	4805      	ldr	r0, [pc, #20]	; (80220b4 <__i2b+0x28>)
 802209e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80220a2:	f000 fd7d 	bl	8022ba0 <__assert_func>
 80220a6:	2301      	movs	r3, #1
 80220a8:	6144      	str	r4, [r0, #20]
 80220aa:	6103      	str	r3, [r0, #16]
 80220ac:	bd10      	pop	{r4, pc}
 80220ae:	bf00      	nop
 80220b0:	08023697 	.word	0x08023697
 80220b4:	08023708 	.word	0x08023708

080220b8 <__multiply>:
 80220b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80220bc:	4691      	mov	r9, r2
 80220be:	690a      	ldr	r2, [r1, #16]
 80220c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80220c4:	429a      	cmp	r2, r3
 80220c6:	bfb8      	it	lt
 80220c8:	460b      	movlt	r3, r1
 80220ca:	460c      	mov	r4, r1
 80220cc:	bfbc      	itt	lt
 80220ce:	464c      	movlt	r4, r9
 80220d0:	4699      	movlt	r9, r3
 80220d2:	6927      	ldr	r7, [r4, #16]
 80220d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80220d8:	68a3      	ldr	r3, [r4, #8]
 80220da:	6861      	ldr	r1, [r4, #4]
 80220dc:	eb07 060a 	add.w	r6, r7, sl
 80220e0:	42b3      	cmp	r3, r6
 80220e2:	b085      	sub	sp, #20
 80220e4:	bfb8      	it	lt
 80220e6:	3101      	addlt	r1, #1
 80220e8:	f7ff fed8 	bl	8021e9c <_Balloc>
 80220ec:	b930      	cbnz	r0, 80220fc <__multiply+0x44>
 80220ee:	4602      	mov	r2, r0
 80220f0:	4b44      	ldr	r3, [pc, #272]	; (8022204 <__multiply+0x14c>)
 80220f2:	4845      	ldr	r0, [pc, #276]	; (8022208 <__multiply+0x150>)
 80220f4:	f240 115d 	movw	r1, #349	; 0x15d
 80220f8:	f000 fd52 	bl	8022ba0 <__assert_func>
 80220fc:	f100 0514 	add.w	r5, r0, #20
 8022100:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8022104:	462b      	mov	r3, r5
 8022106:	2200      	movs	r2, #0
 8022108:	4543      	cmp	r3, r8
 802210a:	d321      	bcc.n	8022150 <__multiply+0x98>
 802210c:	f104 0314 	add.w	r3, r4, #20
 8022110:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8022114:	f109 0314 	add.w	r3, r9, #20
 8022118:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802211c:	9202      	str	r2, [sp, #8]
 802211e:	1b3a      	subs	r2, r7, r4
 8022120:	3a15      	subs	r2, #21
 8022122:	f022 0203 	bic.w	r2, r2, #3
 8022126:	3204      	adds	r2, #4
 8022128:	f104 0115 	add.w	r1, r4, #21
 802212c:	428f      	cmp	r7, r1
 802212e:	bf38      	it	cc
 8022130:	2204      	movcc	r2, #4
 8022132:	9201      	str	r2, [sp, #4]
 8022134:	9a02      	ldr	r2, [sp, #8]
 8022136:	9303      	str	r3, [sp, #12]
 8022138:	429a      	cmp	r2, r3
 802213a:	d80c      	bhi.n	8022156 <__multiply+0x9e>
 802213c:	2e00      	cmp	r6, #0
 802213e:	dd03      	ble.n	8022148 <__multiply+0x90>
 8022140:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8022144:	2b00      	cmp	r3, #0
 8022146:	d05a      	beq.n	80221fe <__multiply+0x146>
 8022148:	6106      	str	r6, [r0, #16]
 802214a:	b005      	add	sp, #20
 802214c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022150:	f843 2b04 	str.w	r2, [r3], #4
 8022154:	e7d8      	b.n	8022108 <__multiply+0x50>
 8022156:	f8b3 a000 	ldrh.w	sl, [r3]
 802215a:	f1ba 0f00 	cmp.w	sl, #0
 802215e:	d024      	beq.n	80221aa <__multiply+0xf2>
 8022160:	f104 0e14 	add.w	lr, r4, #20
 8022164:	46a9      	mov	r9, r5
 8022166:	f04f 0c00 	mov.w	ip, #0
 802216a:	f85e 2b04 	ldr.w	r2, [lr], #4
 802216e:	f8d9 1000 	ldr.w	r1, [r9]
 8022172:	fa1f fb82 	uxth.w	fp, r2
 8022176:	b289      	uxth	r1, r1
 8022178:	fb0a 110b 	mla	r1, sl, fp, r1
 802217c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8022180:	f8d9 2000 	ldr.w	r2, [r9]
 8022184:	4461      	add	r1, ip
 8022186:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802218a:	fb0a c20b 	mla	r2, sl, fp, ip
 802218e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8022192:	b289      	uxth	r1, r1
 8022194:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8022198:	4577      	cmp	r7, lr
 802219a:	f849 1b04 	str.w	r1, [r9], #4
 802219e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80221a2:	d8e2      	bhi.n	802216a <__multiply+0xb2>
 80221a4:	9a01      	ldr	r2, [sp, #4]
 80221a6:	f845 c002 	str.w	ip, [r5, r2]
 80221aa:	9a03      	ldr	r2, [sp, #12]
 80221ac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80221b0:	3304      	adds	r3, #4
 80221b2:	f1b9 0f00 	cmp.w	r9, #0
 80221b6:	d020      	beq.n	80221fa <__multiply+0x142>
 80221b8:	6829      	ldr	r1, [r5, #0]
 80221ba:	f104 0c14 	add.w	ip, r4, #20
 80221be:	46ae      	mov	lr, r5
 80221c0:	f04f 0a00 	mov.w	sl, #0
 80221c4:	f8bc b000 	ldrh.w	fp, [ip]
 80221c8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80221cc:	fb09 220b 	mla	r2, r9, fp, r2
 80221d0:	4492      	add	sl, r2
 80221d2:	b289      	uxth	r1, r1
 80221d4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80221d8:	f84e 1b04 	str.w	r1, [lr], #4
 80221dc:	f85c 2b04 	ldr.w	r2, [ip], #4
 80221e0:	f8be 1000 	ldrh.w	r1, [lr]
 80221e4:	0c12      	lsrs	r2, r2, #16
 80221e6:	fb09 1102 	mla	r1, r9, r2, r1
 80221ea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80221ee:	4567      	cmp	r7, ip
 80221f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80221f4:	d8e6      	bhi.n	80221c4 <__multiply+0x10c>
 80221f6:	9a01      	ldr	r2, [sp, #4]
 80221f8:	50a9      	str	r1, [r5, r2]
 80221fa:	3504      	adds	r5, #4
 80221fc:	e79a      	b.n	8022134 <__multiply+0x7c>
 80221fe:	3e01      	subs	r6, #1
 8022200:	e79c      	b.n	802213c <__multiply+0x84>
 8022202:	bf00      	nop
 8022204:	08023697 	.word	0x08023697
 8022208:	08023708 	.word	0x08023708

0802220c <__pow5mult>:
 802220c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022210:	4615      	mov	r5, r2
 8022212:	f012 0203 	ands.w	r2, r2, #3
 8022216:	4606      	mov	r6, r0
 8022218:	460f      	mov	r7, r1
 802221a:	d007      	beq.n	802222c <__pow5mult+0x20>
 802221c:	4c25      	ldr	r4, [pc, #148]	; (80222b4 <__pow5mult+0xa8>)
 802221e:	3a01      	subs	r2, #1
 8022220:	2300      	movs	r3, #0
 8022222:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022226:	f7ff fe9b 	bl	8021f60 <__multadd>
 802222a:	4607      	mov	r7, r0
 802222c:	10ad      	asrs	r5, r5, #2
 802222e:	d03d      	beq.n	80222ac <__pow5mult+0xa0>
 8022230:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8022232:	b97c      	cbnz	r4, 8022254 <__pow5mult+0x48>
 8022234:	2010      	movs	r0, #16
 8022236:	f7ff fe29 	bl	8021e8c <malloc>
 802223a:	4602      	mov	r2, r0
 802223c:	6270      	str	r0, [r6, #36]	; 0x24
 802223e:	b928      	cbnz	r0, 802224c <__pow5mult+0x40>
 8022240:	4b1d      	ldr	r3, [pc, #116]	; (80222b8 <__pow5mult+0xac>)
 8022242:	481e      	ldr	r0, [pc, #120]	; (80222bc <__pow5mult+0xb0>)
 8022244:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8022248:	f000 fcaa 	bl	8022ba0 <__assert_func>
 802224c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8022250:	6004      	str	r4, [r0, #0]
 8022252:	60c4      	str	r4, [r0, #12]
 8022254:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8022258:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802225c:	b94c      	cbnz	r4, 8022272 <__pow5mult+0x66>
 802225e:	f240 2171 	movw	r1, #625	; 0x271
 8022262:	4630      	mov	r0, r6
 8022264:	f7ff ff12 	bl	802208c <__i2b>
 8022268:	2300      	movs	r3, #0
 802226a:	f8c8 0008 	str.w	r0, [r8, #8]
 802226e:	4604      	mov	r4, r0
 8022270:	6003      	str	r3, [r0, #0]
 8022272:	f04f 0900 	mov.w	r9, #0
 8022276:	07eb      	lsls	r3, r5, #31
 8022278:	d50a      	bpl.n	8022290 <__pow5mult+0x84>
 802227a:	4639      	mov	r1, r7
 802227c:	4622      	mov	r2, r4
 802227e:	4630      	mov	r0, r6
 8022280:	f7ff ff1a 	bl	80220b8 <__multiply>
 8022284:	4639      	mov	r1, r7
 8022286:	4680      	mov	r8, r0
 8022288:	4630      	mov	r0, r6
 802228a:	f7ff fe47 	bl	8021f1c <_Bfree>
 802228e:	4647      	mov	r7, r8
 8022290:	106d      	asrs	r5, r5, #1
 8022292:	d00b      	beq.n	80222ac <__pow5mult+0xa0>
 8022294:	6820      	ldr	r0, [r4, #0]
 8022296:	b938      	cbnz	r0, 80222a8 <__pow5mult+0x9c>
 8022298:	4622      	mov	r2, r4
 802229a:	4621      	mov	r1, r4
 802229c:	4630      	mov	r0, r6
 802229e:	f7ff ff0b 	bl	80220b8 <__multiply>
 80222a2:	6020      	str	r0, [r4, #0]
 80222a4:	f8c0 9000 	str.w	r9, [r0]
 80222a8:	4604      	mov	r4, r0
 80222aa:	e7e4      	b.n	8022276 <__pow5mult+0x6a>
 80222ac:	4638      	mov	r0, r7
 80222ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80222b2:	bf00      	nop
 80222b4:	08023858 	.word	0x08023858
 80222b8:	08023625 	.word	0x08023625
 80222bc:	08023708 	.word	0x08023708

080222c0 <__lshift>:
 80222c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222c4:	460c      	mov	r4, r1
 80222c6:	6849      	ldr	r1, [r1, #4]
 80222c8:	6923      	ldr	r3, [r4, #16]
 80222ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80222ce:	68a3      	ldr	r3, [r4, #8]
 80222d0:	4607      	mov	r7, r0
 80222d2:	4691      	mov	r9, r2
 80222d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80222d8:	f108 0601 	add.w	r6, r8, #1
 80222dc:	42b3      	cmp	r3, r6
 80222de:	db0b      	blt.n	80222f8 <__lshift+0x38>
 80222e0:	4638      	mov	r0, r7
 80222e2:	f7ff fddb 	bl	8021e9c <_Balloc>
 80222e6:	4605      	mov	r5, r0
 80222e8:	b948      	cbnz	r0, 80222fe <__lshift+0x3e>
 80222ea:	4602      	mov	r2, r0
 80222ec:	4b2a      	ldr	r3, [pc, #168]	; (8022398 <__lshift+0xd8>)
 80222ee:	482b      	ldr	r0, [pc, #172]	; (802239c <__lshift+0xdc>)
 80222f0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80222f4:	f000 fc54 	bl	8022ba0 <__assert_func>
 80222f8:	3101      	adds	r1, #1
 80222fa:	005b      	lsls	r3, r3, #1
 80222fc:	e7ee      	b.n	80222dc <__lshift+0x1c>
 80222fe:	2300      	movs	r3, #0
 8022300:	f100 0114 	add.w	r1, r0, #20
 8022304:	f100 0210 	add.w	r2, r0, #16
 8022308:	4618      	mov	r0, r3
 802230a:	4553      	cmp	r3, sl
 802230c:	db37      	blt.n	802237e <__lshift+0xbe>
 802230e:	6920      	ldr	r0, [r4, #16]
 8022310:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8022314:	f104 0314 	add.w	r3, r4, #20
 8022318:	f019 091f 	ands.w	r9, r9, #31
 802231c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8022320:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8022324:	d02f      	beq.n	8022386 <__lshift+0xc6>
 8022326:	f1c9 0e20 	rsb	lr, r9, #32
 802232a:	468a      	mov	sl, r1
 802232c:	f04f 0c00 	mov.w	ip, #0
 8022330:	681a      	ldr	r2, [r3, #0]
 8022332:	fa02 f209 	lsl.w	r2, r2, r9
 8022336:	ea42 020c 	orr.w	r2, r2, ip
 802233a:	f84a 2b04 	str.w	r2, [sl], #4
 802233e:	f853 2b04 	ldr.w	r2, [r3], #4
 8022342:	4298      	cmp	r0, r3
 8022344:	fa22 fc0e 	lsr.w	ip, r2, lr
 8022348:	d8f2      	bhi.n	8022330 <__lshift+0x70>
 802234a:	1b03      	subs	r3, r0, r4
 802234c:	3b15      	subs	r3, #21
 802234e:	f023 0303 	bic.w	r3, r3, #3
 8022352:	3304      	adds	r3, #4
 8022354:	f104 0215 	add.w	r2, r4, #21
 8022358:	4290      	cmp	r0, r2
 802235a:	bf38      	it	cc
 802235c:	2304      	movcc	r3, #4
 802235e:	f841 c003 	str.w	ip, [r1, r3]
 8022362:	f1bc 0f00 	cmp.w	ip, #0
 8022366:	d001      	beq.n	802236c <__lshift+0xac>
 8022368:	f108 0602 	add.w	r6, r8, #2
 802236c:	3e01      	subs	r6, #1
 802236e:	4638      	mov	r0, r7
 8022370:	612e      	str	r6, [r5, #16]
 8022372:	4621      	mov	r1, r4
 8022374:	f7ff fdd2 	bl	8021f1c <_Bfree>
 8022378:	4628      	mov	r0, r5
 802237a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802237e:	f842 0f04 	str.w	r0, [r2, #4]!
 8022382:	3301      	adds	r3, #1
 8022384:	e7c1      	b.n	802230a <__lshift+0x4a>
 8022386:	3904      	subs	r1, #4
 8022388:	f853 2b04 	ldr.w	r2, [r3], #4
 802238c:	f841 2f04 	str.w	r2, [r1, #4]!
 8022390:	4298      	cmp	r0, r3
 8022392:	d8f9      	bhi.n	8022388 <__lshift+0xc8>
 8022394:	e7ea      	b.n	802236c <__lshift+0xac>
 8022396:	bf00      	nop
 8022398:	08023697 	.word	0x08023697
 802239c:	08023708 	.word	0x08023708

080223a0 <__mcmp>:
 80223a0:	b530      	push	{r4, r5, lr}
 80223a2:	6902      	ldr	r2, [r0, #16]
 80223a4:	690c      	ldr	r4, [r1, #16]
 80223a6:	1b12      	subs	r2, r2, r4
 80223a8:	d10e      	bne.n	80223c8 <__mcmp+0x28>
 80223aa:	f100 0314 	add.w	r3, r0, #20
 80223ae:	3114      	adds	r1, #20
 80223b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80223b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80223b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80223bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80223c0:	42a5      	cmp	r5, r4
 80223c2:	d003      	beq.n	80223cc <__mcmp+0x2c>
 80223c4:	d305      	bcc.n	80223d2 <__mcmp+0x32>
 80223c6:	2201      	movs	r2, #1
 80223c8:	4610      	mov	r0, r2
 80223ca:	bd30      	pop	{r4, r5, pc}
 80223cc:	4283      	cmp	r3, r0
 80223ce:	d3f3      	bcc.n	80223b8 <__mcmp+0x18>
 80223d0:	e7fa      	b.n	80223c8 <__mcmp+0x28>
 80223d2:	f04f 32ff 	mov.w	r2, #4294967295
 80223d6:	e7f7      	b.n	80223c8 <__mcmp+0x28>

080223d8 <__mdiff>:
 80223d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223dc:	460c      	mov	r4, r1
 80223de:	4606      	mov	r6, r0
 80223e0:	4611      	mov	r1, r2
 80223e2:	4620      	mov	r0, r4
 80223e4:	4690      	mov	r8, r2
 80223e6:	f7ff ffdb 	bl	80223a0 <__mcmp>
 80223ea:	1e05      	subs	r5, r0, #0
 80223ec:	d110      	bne.n	8022410 <__mdiff+0x38>
 80223ee:	4629      	mov	r1, r5
 80223f0:	4630      	mov	r0, r6
 80223f2:	f7ff fd53 	bl	8021e9c <_Balloc>
 80223f6:	b930      	cbnz	r0, 8022406 <__mdiff+0x2e>
 80223f8:	4b3a      	ldr	r3, [pc, #232]	; (80224e4 <__mdiff+0x10c>)
 80223fa:	4602      	mov	r2, r0
 80223fc:	f240 2132 	movw	r1, #562	; 0x232
 8022400:	4839      	ldr	r0, [pc, #228]	; (80224e8 <__mdiff+0x110>)
 8022402:	f000 fbcd 	bl	8022ba0 <__assert_func>
 8022406:	2301      	movs	r3, #1
 8022408:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802240c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022410:	bfa4      	itt	ge
 8022412:	4643      	movge	r3, r8
 8022414:	46a0      	movge	r8, r4
 8022416:	4630      	mov	r0, r6
 8022418:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802241c:	bfa6      	itte	ge
 802241e:	461c      	movge	r4, r3
 8022420:	2500      	movge	r5, #0
 8022422:	2501      	movlt	r5, #1
 8022424:	f7ff fd3a 	bl	8021e9c <_Balloc>
 8022428:	b920      	cbnz	r0, 8022434 <__mdiff+0x5c>
 802242a:	4b2e      	ldr	r3, [pc, #184]	; (80224e4 <__mdiff+0x10c>)
 802242c:	4602      	mov	r2, r0
 802242e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8022432:	e7e5      	b.n	8022400 <__mdiff+0x28>
 8022434:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8022438:	6926      	ldr	r6, [r4, #16]
 802243a:	60c5      	str	r5, [r0, #12]
 802243c:	f104 0914 	add.w	r9, r4, #20
 8022440:	f108 0514 	add.w	r5, r8, #20
 8022444:	f100 0e14 	add.w	lr, r0, #20
 8022448:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802244c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8022450:	f108 0210 	add.w	r2, r8, #16
 8022454:	46f2      	mov	sl, lr
 8022456:	2100      	movs	r1, #0
 8022458:	f859 3b04 	ldr.w	r3, [r9], #4
 802245c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8022460:	fa1f f883 	uxth.w	r8, r3
 8022464:	fa11 f18b 	uxtah	r1, r1, fp
 8022468:	0c1b      	lsrs	r3, r3, #16
 802246a:	eba1 0808 	sub.w	r8, r1, r8
 802246e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8022472:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8022476:	fa1f f888 	uxth.w	r8, r8
 802247a:	1419      	asrs	r1, r3, #16
 802247c:	454e      	cmp	r6, r9
 802247e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8022482:	f84a 3b04 	str.w	r3, [sl], #4
 8022486:	d8e7      	bhi.n	8022458 <__mdiff+0x80>
 8022488:	1b33      	subs	r3, r6, r4
 802248a:	3b15      	subs	r3, #21
 802248c:	f023 0303 	bic.w	r3, r3, #3
 8022490:	3304      	adds	r3, #4
 8022492:	3415      	adds	r4, #21
 8022494:	42a6      	cmp	r6, r4
 8022496:	bf38      	it	cc
 8022498:	2304      	movcc	r3, #4
 802249a:	441d      	add	r5, r3
 802249c:	4473      	add	r3, lr
 802249e:	469e      	mov	lr, r3
 80224a0:	462e      	mov	r6, r5
 80224a2:	4566      	cmp	r6, ip
 80224a4:	d30e      	bcc.n	80224c4 <__mdiff+0xec>
 80224a6:	f10c 0203 	add.w	r2, ip, #3
 80224aa:	1b52      	subs	r2, r2, r5
 80224ac:	f022 0203 	bic.w	r2, r2, #3
 80224b0:	3d03      	subs	r5, #3
 80224b2:	45ac      	cmp	ip, r5
 80224b4:	bf38      	it	cc
 80224b6:	2200      	movcc	r2, #0
 80224b8:	441a      	add	r2, r3
 80224ba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80224be:	b17b      	cbz	r3, 80224e0 <__mdiff+0x108>
 80224c0:	6107      	str	r7, [r0, #16]
 80224c2:	e7a3      	b.n	802240c <__mdiff+0x34>
 80224c4:	f856 8b04 	ldr.w	r8, [r6], #4
 80224c8:	fa11 f288 	uxtah	r2, r1, r8
 80224cc:	1414      	asrs	r4, r2, #16
 80224ce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80224d2:	b292      	uxth	r2, r2
 80224d4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80224d8:	f84e 2b04 	str.w	r2, [lr], #4
 80224dc:	1421      	asrs	r1, r4, #16
 80224de:	e7e0      	b.n	80224a2 <__mdiff+0xca>
 80224e0:	3f01      	subs	r7, #1
 80224e2:	e7ea      	b.n	80224ba <__mdiff+0xe2>
 80224e4:	08023697 	.word	0x08023697
 80224e8:	08023708 	.word	0x08023708

080224ec <__d2b>:
 80224ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80224f0:	4689      	mov	r9, r1
 80224f2:	2101      	movs	r1, #1
 80224f4:	ec57 6b10 	vmov	r6, r7, d0
 80224f8:	4690      	mov	r8, r2
 80224fa:	f7ff fccf 	bl	8021e9c <_Balloc>
 80224fe:	4604      	mov	r4, r0
 8022500:	b930      	cbnz	r0, 8022510 <__d2b+0x24>
 8022502:	4602      	mov	r2, r0
 8022504:	4b25      	ldr	r3, [pc, #148]	; (802259c <__d2b+0xb0>)
 8022506:	4826      	ldr	r0, [pc, #152]	; (80225a0 <__d2b+0xb4>)
 8022508:	f240 310a 	movw	r1, #778	; 0x30a
 802250c:	f000 fb48 	bl	8022ba0 <__assert_func>
 8022510:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8022514:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8022518:	bb35      	cbnz	r5, 8022568 <__d2b+0x7c>
 802251a:	2e00      	cmp	r6, #0
 802251c:	9301      	str	r3, [sp, #4]
 802251e:	d028      	beq.n	8022572 <__d2b+0x86>
 8022520:	4668      	mov	r0, sp
 8022522:	9600      	str	r6, [sp, #0]
 8022524:	f7ff fd82 	bl	802202c <__lo0bits>
 8022528:	9900      	ldr	r1, [sp, #0]
 802252a:	b300      	cbz	r0, 802256e <__d2b+0x82>
 802252c:	9a01      	ldr	r2, [sp, #4]
 802252e:	f1c0 0320 	rsb	r3, r0, #32
 8022532:	fa02 f303 	lsl.w	r3, r2, r3
 8022536:	430b      	orrs	r3, r1
 8022538:	40c2      	lsrs	r2, r0
 802253a:	6163      	str	r3, [r4, #20]
 802253c:	9201      	str	r2, [sp, #4]
 802253e:	9b01      	ldr	r3, [sp, #4]
 8022540:	61a3      	str	r3, [r4, #24]
 8022542:	2b00      	cmp	r3, #0
 8022544:	bf14      	ite	ne
 8022546:	2202      	movne	r2, #2
 8022548:	2201      	moveq	r2, #1
 802254a:	6122      	str	r2, [r4, #16]
 802254c:	b1d5      	cbz	r5, 8022584 <__d2b+0x98>
 802254e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8022552:	4405      	add	r5, r0
 8022554:	f8c9 5000 	str.w	r5, [r9]
 8022558:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802255c:	f8c8 0000 	str.w	r0, [r8]
 8022560:	4620      	mov	r0, r4
 8022562:	b003      	add	sp, #12
 8022564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802256c:	e7d5      	b.n	802251a <__d2b+0x2e>
 802256e:	6161      	str	r1, [r4, #20]
 8022570:	e7e5      	b.n	802253e <__d2b+0x52>
 8022572:	a801      	add	r0, sp, #4
 8022574:	f7ff fd5a 	bl	802202c <__lo0bits>
 8022578:	9b01      	ldr	r3, [sp, #4]
 802257a:	6163      	str	r3, [r4, #20]
 802257c:	2201      	movs	r2, #1
 802257e:	6122      	str	r2, [r4, #16]
 8022580:	3020      	adds	r0, #32
 8022582:	e7e3      	b.n	802254c <__d2b+0x60>
 8022584:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022588:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802258c:	f8c9 0000 	str.w	r0, [r9]
 8022590:	6918      	ldr	r0, [r3, #16]
 8022592:	f7ff fd2b 	bl	8021fec <__hi0bits>
 8022596:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802259a:	e7df      	b.n	802255c <__d2b+0x70>
 802259c:	08023697 	.word	0x08023697
 80225a0:	08023708 	.word	0x08023708

080225a4 <_calloc_r>:
 80225a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80225a6:	fba1 2402 	umull	r2, r4, r1, r2
 80225aa:	b94c      	cbnz	r4, 80225c0 <_calloc_r+0x1c>
 80225ac:	4611      	mov	r1, r2
 80225ae:	9201      	str	r2, [sp, #4]
 80225b0:	f000 f87a 	bl	80226a8 <_malloc_r>
 80225b4:	9a01      	ldr	r2, [sp, #4]
 80225b6:	4605      	mov	r5, r0
 80225b8:	b930      	cbnz	r0, 80225c8 <_calloc_r+0x24>
 80225ba:	4628      	mov	r0, r5
 80225bc:	b003      	add	sp, #12
 80225be:	bd30      	pop	{r4, r5, pc}
 80225c0:	220c      	movs	r2, #12
 80225c2:	6002      	str	r2, [r0, #0]
 80225c4:	2500      	movs	r5, #0
 80225c6:	e7f8      	b.n	80225ba <_calloc_r+0x16>
 80225c8:	4621      	mov	r1, r4
 80225ca:	f7fd fdeb 	bl	80201a4 <memset>
 80225ce:	e7f4      	b.n	80225ba <_calloc_r+0x16>

080225d0 <_free_r>:
 80225d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80225d2:	2900      	cmp	r1, #0
 80225d4:	d044      	beq.n	8022660 <_free_r+0x90>
 80225d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80225da:	9001      	str	r0, [sp, #4]
 80225dc:	2b00      	cmp	r3, #0
 80225de:	f1a1 0404 	sub.w	r4, r1, #4
 80225e2:	bfb8      	it	lt
 80225e4:	18e4      	addlt	r4, r4, r3
 80225e6:	f000 fb61 	bl	8022cac <__malloc_lock>
 80225ea:	4a1e      	ldr	r2, [pc, #120]	; (8022664 <_free_r+0x94>)
 80225ec:	9801      	ldr	r0, [sp, #4]
 80225ee:	6813      	ldr	r3, [r2, #0]
 80225f0:	b933      	cbnz	r3, 8022600 <_free_r+0x30>
 80225f2:	6063      	str	r3, [r4, #4]
 80225f4:	6014      	str	r4, [r2, #0]
 80225f6:	b003      	add	sp, #12
 80225f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80225fc:	f000 bb5c 	b.w	8022cb8 <__malloc_unlock>
 8022600:	42a3      	cmp	r3, r4
 8022602:	d908      	bls.n	8022616 <_free_r+0x46>
 8022604:	6825      	ldr	r5, [r4, #0]
 8022606:	1961      	adds	r1, r4, r5
 8022608:	428b      	cmp	r3, r1
 802260a:	bf01      	itttt	eq
 802260c:	6819      	ldreq	r1, [r3, #0]
 802260e:	685b      	ldreq	r3, [r3, #4]
 8022610:	1949      	addeq	r1, r1, r5
 8022612:	6021      	streq	r1, [r4, #0]
 8022614:	e7ed      	b.n	80225f2 <_free_r+0x22>
 8022616:	461a      	mov	r2, r3
 8022618:	685b      	ldr	r3, [r3, #4]
 802261a:	b10b      	cbz	r3, 8022620 <_free_r+0x50>
 802261c:	42a3      	cmp	r3, r4
 802261e:	d9fa      	bls.n	8022616 <_free_r+0x46>
 8022620:	6811      	ldr	r1, [r2, #0]
 8022622:	1855      	adds	r5, r2, r1
 8022624:	42a5      	cmp	r5, r4
 8022626:	d10b      	bne.n	8022640 <_free_r+0x70>
 8022628:	6824      	ldr	r4, [r4, #0]
 802262a:	4421      	add	r1, r4
 802262c:	1854      	adds	r4, r2, r1
 802262e:	42a3      	cmp	r3, r4
 8022630:	6011      	str	r1, [r2, #0]
 8022632:	d1e0      	bne.n	80225f6 <_free_r+0x26>
 8022634:	681c      	ldr	r4, [r3, #0]
 8022636:	685b      	ldr	r3, [r3, #4]
 8022638:	6053      	str	r3, [r2, #4]
 802263a:	4421      	add	r1, r4
 802263c:	6011      	str	r1, [r2, #0]
 802263e:	e7da      	b.n	80225f6 <_free_r+0x26>
 8022640:	d902      	bls.n	8022648 <_free_r+0x78>
 8022642:	230c      	movs	r3, #12
 8022644:	6003      	str	r3, [r0, #0]
 8022646:	e7d6      	b.n	80225f6 <_free_r+0x26>
 8022648:	6825      	ldr	r5, [r4, #0]
 802264a:	1961      	adds	r1, r4, r5
 802264c:	428b      	cmp	r3, r1
 802264e:	bf04      	itt	eq
 8022650:	6819      	ldreq	r1, [r3, #0]
 8022652:	685b      	ldreq	r3, [r3, #4]
 8022654:	6063      	str	r3, [r4, #4]
 8022656:	bf04      	itt	eq
 8022658:	1949      	addeq	r1, r1, r5
 802265a:	6021      	streq	r1, [r4, #0]
 802265c:	6054      	str	r4, [r2, #4]
 802265e:	e7ca      	b.n	80225f6 <_free_r+0x26>
 8022660:	b003      	add	sp, #12
 8022662:	bd30      	pop	{r4, r5, pc}
 8022664:	2000f910 	.word	0x2000f910

08022668 <sbrk_aligned>:
 8022668:	b570      	push	{r4, r5, r6, lr}
 802266a:	4e0e      	ldr	r6, [pc, #56]	; (80226a4 <sbrk_aligned+0x3c>)
 802266c:	460c      	mov	r4, r1
 802266e:	6831      	ldr	r1, [r6, #0]
 8022670:	4605      	mov	r5, r0
 8022672:	b911      	cbnz	r1, 802267a <sbrk_aligned+0x12>
 8022674:	f000 fa2e 	bl	8022ad4 <_sbrk_r>
 8022678:	6030      	str	r0, [r6, #0]
 802267a:	4621      	mov	r1, r4
 802267c:	4628      	mov	r0, r5
 802267e:	f000 fa29 	bl	8022ad4 <_sbrk_r>
 8022682:	1c43      	adds	r3, r0, #1
 8022684:	d00a      	beq.n	802269c <sbrk_aligned+0x34>
 8022686:	1cc4      	adds	r4, r0, #3
 8022688:	f024 0403 	bic.w	r4, r4, #3
 802268c:	42a0      	cmp	r0, r4
 802268e:	d007      	beq.n	80226a0 <sbrk_aligned+0x38>
 8022690:	1a21      	subs	r1, r4, r0
 8022692:	4628      	mov	r0, r5
 8022694:	f000 fa1e 	bl	8022ad4 <_sbrk_r>
 8022698:	3001      	adds	r0, #1
 802269a:	d101      	bne.n	80226a0 <sbrk_aligned+0x38>
 802269c:	f04f 34ff 	mov.w	r4, #4294967295
 80226a0:	4620      	mov	r0, r4
 80226a2:	bd70      	pop	{r4, r5, r6, pc}
 80226a4:	2000f914 	.word	0x2000f914

080226a8 <_malloc_r>:
 80226a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80226ac:	1ccd      	adds	r5, r1, #3
 80226ae:	f025 0503 	bic.w	r5, r5, #3
 80226b2:	3508      	adds	r5, #8
 80226b4:	2d0c      	cmp	r5, #12
 80226b6:	bf38      	it	cc
 80226b8:	250c      	movcc	r5, #12
 80226ba:	2d00      	cmp	r5, #0
 80226bc:	4607      	mov	r7, r0
 80226be:	db01      	blt.n	80226c4 <_malloc_r+0x1c>
 80226c0:	42a9      	cmp	r1, r5
 80226c2:	d905      	bls.n	80226d0 <_malloc_r+0x28>
 80226c4:	230c      	movs	r3, #12
 80226c6:	603b      	str	r3, [r7, #0]
 80226c8:	2600      	movs	r6, #0
 80226ca:	4630      	mov	r0, r6
 80226cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226d0:	4e2e      	ldr	r6, [pc, #184]	; (802278c <_malloc_r+0xe4>)
 80226d2:	f000 faeb 	bl	8022cac <__malloc_lock>
 80226d6:	6833      	ldr	r3, [r6, #0]
 80226d8:	461c      	mov	r4, r3
 80226da:	bb34      	cbnz	r4, 802272a <_malloc_r+0x82>
 80226dc:	4629      	mov	r1, r5
 80226de:	4638      	mov	r0, r7
 80226e0:	f7ff ffc2 	bl	8022668 <sbrk_aligned>
 80226e4:	1c43      	adds	r3, r0, #1
 80226e6:	4604      	mov	r4, r0
 80226e8:	d14d      	bne.n	8022786 <_malloc_r+0xde>
 80226ea:	6834      	ldr	r4, [r6, #0]
 80226ec:	4626      	mov	r6, r4
 80226ee:	2e00      	cmp	r6, #0
 80226f0:	d140      	bne.n	8022774 <_malloc_r+0xcc>
 80226f2:	6823      	ldr	r3, [r4, #0]
 80226f4:	4631      	mov	r1, r6
 80226f6:	4638      	mov	r0, r7
 80226f8:	eb04 0803 	add.w	r8, r4, r3
 80226fc:	f000 f9ea 	bl	8022ad4 <_sbrk_r>
 8022700:	4580      	cmp	r8, r0
 8022702:	d13a      	bne.n	802277a <_malloc_r+0xd2>
 8022704:	6821      	ldr	r1, [r4, #0]
 8022706:	3503      	adds	r5, #3
 8022708:	1a6d      	subs	r5, r5, r1
 802270a:	f025 0503 	bic.w	r5, r5, #3
 802270e:	3508      	adds	r5, #8
 8022710:	2d0c      	cmp	r5, #12
 8022712:	bf38      	it	cc
 8022714:	250c      	movcc	r5, #12
 8022716:	4629      	mov	r1, r5
 8022718:	4638      	mov	r0, r7
 802271a:	f7ff ffa5 	bl	8022668 <sbrk_aligned>
 802271e:	3001      	adds	r0, #1
 8022720:	d02b      	beq.n	802277a <_malloc_r+0xd2>
 8022722:	6823      	ldr	r3, [r4, #0]
 8022724:	442b      	add	r3, r5
 8022726:	6023      	str	r3, [r4, #0]
 8022728:	e00e      	b.n	8022748 <_malloc_r+0xa0>
 802272a:	6822      	ldr	r2, [r4, #0]
 802272c:	1b52      	subs	r2, r2, r5
 802272e:	d41e      	bmi.n	802276e <_malloc_r+0xc6>
 8022730:	2a0b      	cmp	r2, #11
 8022732:	d916      	bls.n	8022762 <_malloc_r+0xba>
 8022734:	1961      	adds	r1, r4, r5
 8022736:	42a3      	cmp	r3, r4
 8022738:	6025      	str	r5, [r4, #0]
 802273a:	bf18      	it	ne
 802273c:	6059      	strne	r1, [r3, #4]
 802273e:	6863      	ldr	r3, [r4, #4]
 8022740:	bf08      	it	eq
 8022742:	6031      	streq	r1, [r6, #0]
 8022744:	5162      	str	r2, [r4, r5]
 8022746:	604b      	str	r3, [r1, #4]
 8022748:	4638      	mov	r0, r7
 802274a:	f104 060b 	add.w	r6, r4, #11
 802274e:	f000 fab3 	bl	8022cb8 <__malloc_unlock>
 8022752:	f026 0607 	bic.w	r6, r6, #7
 8022756:	1d23      	adds	r3, r4, #4
 8022758:	1af2      	subs	r2, r6, r3
 802275a:	d0b6      	beq.n	80226ca <_malloc_r+0x22>
 802275c:	1b9b      	subs	r3, r3, r6
 802275e:	50a3      	str	r3, [r4, r2]
 8022760:	e7b3      	b.n	80226ca <_malloc_r+0x22>
 8022762:	6862      	ldr	r2, [r4, #4]
 8022764:	42a3      	cmp	r3, r4
 8022766:	bf0c      	ite	eq
 8022768:	6032      	streq	r2, [r6, #0]
 802276a:	605a      	strne	r2, [r3, #4]
 802276c:	e7ec      	b.n	8022748 <_malloc_r+0xa0>
 802276e:	4623      	mov	r3, r4
 8022770:	6864      	ldr	r4, [r4, #4]
 8022772:	e7b2      	b.n	80226da <_malloc_r+0x32>
 8022774:	4634      	mov	r4, r6
 8022776:	6876      	ldr	r6, [r6, #4]
 8022778:	e7b9      	b.n	80226ee <_malloc_r+0x46>
 802277a:	230c      	movs	r3, #12
 802277c:	603b      	str	r3, [r7, #0]
 802277e:	4638      	mov	r0, r7
 8022780:	f000 fa9a 	bl	8022cb8 <__malloc_unlock>
 8022784:	e7a1      	b.n	80226ca <_malloc_r+0x22>
 8022786:	6025      	str	r5, [r4, #0]
 8022788:	e7de      	b.n	8022748 <_malloc_r+0xa0>
 802278a:	bf00      	nop
 802278c:	2000f910 	.word	0x2000f910

08022790 <__sfputc_r>:
 8022790:	6893      	ldr	r3, [r2, #8]
 8022792:	3b01      	subs	r3, #1
 8022794:	2b00      	cmp	r3, #0
 8022796:	b410      	push	{r4}
 8022798:	6093      	str	r3, [r2, #8]
 802279a:	da08      	bge.n	80227ae <__sfputc_r+0x1e>
 802279c:	6994      	ldr	r4, [r2, #24]
 802279e:	42a3      	cmp	r3, r4
 80227a0:	db01      	blt.n	80227a6 <__sfputc_r+0x16>
 80227a2:	290a      	cmp	r1, #10
 80227a4:	d103      	bne.n	80227ae <__sfputc_r+0x1e>
 80227a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227aa:	f7fe ba11 	b.w	8020bd0 <__swbuf_r>
 80227ae:	6813      	ldr	r3, [r2, #0]
 80227b0:	1c58      	adds	r0, r3, #1
 80227b2:	6010      	str	r0, [r2, #0]
 80227b4:	7019      	strb	r1, [r3, #0]
 80227b6:	4608      	mov	r0, r1
 80227b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80227bc:	4770      	bx	lr

080227be <__sfputs_r>:
 80227be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227c0:	4606      	mov	r6, r0
 80227c2:	460f      	mov	r7, r1
 80227c4:	4614      	mov	r4, r2
 80227c6:	18d5      	adds	r5, r2, r3
 80227c8:	42ac      	cmp	r4, r5
 80227ca:	d101      	bne.n	80227d0 <__sfputs_r+0x12>
 80227cc:	2000      	movs	r0, #0
 80227ce:	e007      	b.n	80227e0 <__sfputs_r+0x22>
 80227d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80227d4:	463a      	mov	r2, r7
 80227d6:	4630      	mov	r0, r6
 80227d8:	f7ff ffda 	bl	8022790 <__sfputc_r>
 80227dc:	1c43      	adds	r3, r0, #1
 80227de:	d1f3      	bne.n	80227c8 <__sfputs_r+0xa>
 80227e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080227e4 <_vfiprintf_r>:
 80227e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80227e8:	460d      	mov	r5, r1
 80227ea:	b09d      	sub	sp, #116	; 0x74
 80227ec:	4614      	mov	r4, r2
 80227ee:	4698      	mov	r8, r3
 80227f0:	4606      	mov	r6, r0
 80227f2:	b118      	cbz	r0, 80227fc <_vfiprintf_r+0x18>
 80227f4:	6983      	ldr	r3, [r0, #24]
 80227f6:	b90b      	cbnz	r3, 80227fc <_vfiprintf_r+0x18>
 80227f8:	f7ff fa3e 	bl	8021c78 <__sinit>
 80227fc:	4b89      	ldr	r3, [pc, #548]	; (8022a24 <_vfiprintf_r+0x240>)
 80227fe:	429d      	cmp	r5, r3
 8022800:	d11b      	bne.n	802283a <_vfiprintf_r+0x56>
 8022802:	6875      	ldr	r5, [r6, #4]
 8022804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022806:	07d9      	lsls	r1, r3, #31
 8022808:	d405      	bmi.n	8022816 <_vfiprintf_r+0x32>
 802280a:	89ab      	ldrh	r3, [r5, #12]
 802280c:	059a      	lsls	r2, r3, #22
 802280e:	d402      	bmi.n	8022816 <_vfiprintf_r+0x32>
 8022810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022812:	f7ff fad4 	bl	8021dbe <__retarget_lock_acquire_recursive>
 8022816:	89ab      	ldrh	r3, [r5, #12]
 8022818:	071b      	lsls	r3, r3, #28
 802281a:	d501      	bpl.n	8022820 <_vfiprintf_r+0x3c>
 802281c:	692b      	ldr	r3, [r5, #16]
 802281e:	b9eb      	cbnz	r3, 802285c <_vfiprintf_r+0x78>
 8022820:	4629      	mov	r1, r5
 8022822:	4630      	mov	r0, r6
 8022824:	f7fe fa26 	bl	8020c74 <__swsetup_r>
 8022828:	b1c0      	cbz	r0, 802285c <_vfiprintf_r+0x78>
 802282a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802282c:	07dc      	lsls	r4, r3, #31
 802282e:	d50e      	bpl.n	802284e <_vfiprintf_r+0x6a>
 8022830:	f04f 30ff 	mov.w	r0, #4294967295
 8022834:	b01d      	add	sp, #116	; 0x74
 8022836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802283a:	4b7b      	ldr	r3, [pc, #492]	; (8022a28 <_vfiprintf_r+0x244>)
 802283c:	429d      	cmp	r5, r3
 802283e:	d101      	bne.n	8022844 <_vfiprintf_r+0x60>
 8022840:	68b5      	ldr	r5, [r6, #8]
 8022842:	e7df      	b.n	8022804 <_vfiprintf_r+0x20>
 8022844:	4b79      	ldr	r3, [pc, #484]	; (8022a2c <_vfiprintf_r+0x248>)
 8022846:	429d      	cmp	r5, r3
 8022848:	bf08      	it	eq
 802284a:	68f5      	ldreq	r5, [r6, #12]
 802284c:	e7da      	b.n	8022804 <_vfiprintf_r+0x20>
 802284e:	89ab      	ldrh	r3, [r5, #12]
 8022850:	0598      	lsls	r0, r3, #22
 8022852:	d4ed      	bmi.n	8022830 <_vfiprintf_r+0x4c>
 8022854:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022856:	f7ff fab3 	bl	8021dc0 <__retarget_lock_release_recursive>
 802285a:	e7e9      	b.n	8022830 <_vfiprintf_r+0x4c>
 802285c:	2300      	movs	r3, #0
 802285e:	9309      	str	r3, [sp, #36]	; 0x24
 8022860:	2320      	movs	r3, #32
 8022862:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022866:	f8cd 800c 	str.w	r8, [sp, #12]
 802286a:	2330      	movs	r3, #48	; 0x30
 802286c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022a30 <_vfiprintf_r+0x24c>
 8022870:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022874:	f04f 0901 	mov.w	r9, #1
 8022878:	4623      	mov	r3, r4
 802287a:	469a      	mov	sl, r3
 802287c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022880:	b10a      	cbz	r2, 8022886 <_vfiprintf_r+0xa2>
 8022882:	2a25      	cmp	r2, #37	; 0x25
 8022884:	d1f9      	bne.n	802287a <_vfiprintf_r+0x96>
 8022886:	ebba 0b04 	subs.w	fp, sl, r4
 802288a:	d00b      	beq.n	80228a4 <_vfiprintf_r+0xc0>
 802288c:	465b      	mov	r3, fp
 802288e:	4622      	mov	r2, r4
 8022890:	4629      	mov	r1, r5
 8022892:	4630      	mov	r0, r6
 8022894:	f7ff ff93 	bl	80227be <__sfputs_r>
 8022898:	3001      	adds	r0, #1
 802289a:	f000 80aa 	beq.w	80229f2 <_vfiprintf_r+0x20e>
 802289e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80228a0:	445a      	add	r2, fp
 80228a2:	9209      	str	r2, [sp, #36]	; 0x24
 80228a4:	f89a 3000 	ldrb.w	r3, [sl]
 80228a8:	2b00      	cmp	r3, #0
 80228aa:	f000 80a2 	beq.w	80229f2 <_vfiprintf_r+0x20e>
 80228ae:	2300      	movs	r3, #0
 80228b0:	f04f 32ff 	mov.w	r2, #4294967295
 80228b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80228b8:	f10a 0a01 	add.w	sl, sl, #1
 80228bc:	9304      	str	r3, [sp, #16]
 80228be:	9307      	str	r3, [sp, #28]
 80228c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80228c4:	931a      	str	r3, [sp, #104]	; 0x68
 80228c6:	4654      	mov	r4, sl
 80228c8:	2205      	movs	r2, #5
 80228ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228ce:	4858      	ldr	r0, [pc, #352]	; (8022a30 <_vfiprintf_r+0x24c>)
 80228d0:	f7dd fcae 	bl	8000230 <memchr>
 80228d4:	9a04      	ldr	r2, [sp, #16]
 80228d6:	b9d8      	cbnz	r0, 8022910 <_vfiprintf_r+0x12c>
 80228d8:	06d1      	lsls	r1, r2, #27
 80228da:	bf44      	itt	mi
 80228dc:	2320      	movmi	r3, #32
 80228de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228e2:	0713      	lsls	r3, r2, #28
 80228e4:	bf44      	itt	mi
 80228e6:	232b      	movmi	r3, #43	; 0x2b
 80228e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80228ec:	f89a 3000 	ldrb.w	r3, [sl]
 80228f0:	2b2a      	cmp	r3, #42	; 0x2a
 80228f2:	d015      	beq.n	8022920 <_vfiprintf_r+0x13c>
 80228f4:	9a07      	ldr	r2, [sp, #28]
 80228f6:	4654      	mov	r4, sl
 80228f8:	2000      	movs	r0, #0
 80228fa:	f04f 0c0a 	mov.w	ip, #10
 80228fe:	4621      	mov	r1, r4
 8022900:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022904:	3b30      	subs	r3, #48	; 0x30
 8022906:	2b09      	cmp	r3, #9
 8022908:	d94e      	bls.n	80229a8 <_vfiprintf_r+0x1c4>
 802290a:	b1b0      	cbz	r0, 802293a <_vfiprintf_r+0x156>
 802290c:	9207      	str	r2, [sp, #28]
 802290e:	e014      	b.n	802293a <_vfiprintf_r+0x156>
 8022910:	eba0 0308 	sub.w	r3, r0, r8
 8022914:	fa09 f303 	lsl.w	r3, r9, r3
 8022918:	4313      	orrs	r3, r2
 802291a:	9304      	str	r3, [sp, #16]
 802291c:	46a2      	mov	sl, r4
 802291e:	e7d2      	b.n	80228c6 <_vfiprintf_r+0xe2>
 8022920:	9b03      	ldr	r3, [sp, #12]
 8022922:	1d19      	adds	r1, r3, #4
 8022924:	681b      	ldr	r3, [r3, #0]
 8022926:	9103      	str	r1, [sp, #12]
 8022928:	2b00      	cmp	r3, #0
 802292a:	bfbb      	ittet	lt
 802292c:	425b      	neglt	r3, r3
 802292e:	f042 0202 	orrlt.w	r2, r2, #2
 8022932:	9307      	strge	r3, [sp, #28]
 8022934:	9307      	strlt	r3, [sp, #28]
 8022936:	bfb8      	it	lt
 8022938:	9204      	strlt	r2, [sp, #16]
 802293a:	7823      	ldrb	r3, [r4, #0]
 802293c:	2b2e      	cmp	r3, #46	; 0x2e
 802293e:	d10c      	bne.n	802295a <_vfiprintf_r+0x176>
 8022940:	7863      	ldrb	r3, [r4, #1]
 8022942:	2b2a      	cmp	r3, #42	; 0x2a
 8022944:	d135      	bne.n	80229b2 <_vfiprintf_r+0x1ce>
 8022946:	9b03      	ldr	r3, [sp, #12]
 8022948:	1d1a      	adds	r2, r3, #4
 802294a:	681b      	ldr	r3, [r3, #0]
 802294c:	9203      	str	r2, [sp, #12]
 802294e:	2b00      	cmp	r3, #0
 8022950:	bfb8      	it	lt
 8022952:	f04f 33ff 	movlt.w	r3, #4294967295
 8022956:	3402      	adds	r4, #2
 8022958:	9305      	str	r3, [sp, #20]
 802295a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022a40 <_vfiprintf_r+0x25c>
 802295e:	7821      	ldrb	r1, [r4, #0]
 8022960:	2203      	movs	r2, #3
 8022962:	4650      	mov	r0, sl
 8022964:	f7dd fc64 	bl	8000230 <memchr>
 8022968:	b140      	cbz	r0, 802297c <_vfiprintf_r+0x198>
 802296a:	2340      	movs	r3, #64	; 0x40
 802296c:	eba0 000a 	sub.w	r0, r0, sl
 8022970:	fa03 f000 	lsl.w	r0, r3, r0
 8022974:	9b04      	ldr	r3, [sp, #16]
 8022976:	4303      	orrs	r3, r0
 8022978:	3401      	adds	r4, #1
 802297a:	9304      	str	r3, [sp, #16]
 802297c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022980:	482c      	ldr	r0, [pc, #176]	; (8022a34 <_vfiprintf_r+0x250>)
 8022982:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022986:	2206      	movs	r2, #6
 8022988:	f7dd fc52 	bl	8000230 <memchr>
 802298c:	2800      	cmp	r0, #0
 802298e:	d03f      	beq.n	8022a10 <_vfiprintf_r+0x22c>
 8022990:	4b29      	ldr	r3, [pc, #164]	; (8022a38 <_vfiprintf_r+0x254>)
 8022992:	bb1b      	cbnz	r3, 80229dc <_vfiprintf_r+0x1f8>
 8022994:	9b03      	ldr	r3, [sp, #12]
 8022996:	3307      	adds	r3, #7
 8022998:	f023 0307 	bic.w	r3, r3, #7
 802299c:	3308      	adds	r3, #8
 802299e:	9303      	str	r3, [sp, #12]
 80229a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229a2:	443b      	add	r3, r7
 80229a4:	9309      	str	r3, [sp, #36]	; 0x24
 80229a6:	e767      	b.n	8022878 <_vfiprintf_r+0x94>
 80229a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80229ac:	460c      	mov	r4, r1
 80229ae:	2001      	movs	r0, #1
 80229b0:	e7a5      	b.n	80228fe <_vfiprintf_r+0x11a>
 80229b2:	2300      	movs	r3, #0
 80229b4:	3401      	adds	r4, #1
 80229b6:	9305      	str	r3, [sp, #20]
 80229b8:	4619      	mov	r1, r3
 80229ba:	f04f 0c0a 	mov.w	ip, #10
 80229be:	4620      	mov	r0, r4
 80229c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80229c4:	3a30      	subs	r2, #48	; 0x30
 80229c6:	2a09      	cmp	r2, #9
 80229c8:	d903      	bls.n	80229d2 <_vfiprintf_r+0x1ee>
 80229ca:	2b00      	cmp	r3, #0
 80229cc:	d0c5      	beq.n	802295a <_vfiprintf_r+0x176>
 80229ce:	9105      	str	r1, [sp, #20]
 80229d0:	e7c3      	b.n	802295a <_vfiprintf_r+0x176>
 80229d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80229d6:	4604      	mov	r4, r0
 80229d8:	2301      	movs	r3, #1
 80229da:	e7f0      	b.n	80229be <_vfiprintf_r+0x1da>
 80229dc:	ab03      	add	r3, sp, #12
 80229de:	9300      	str	r3, [sp, #0]
 80229e0:	462a      	mov	r2, r5
 80229e2:	4b16      	ldr	r3, [pc, #88]	; (8022a3c <_vfiprintf_r+0x258>)
 80229e4:	a904      	add	r1, sp, #16
 80229e6:	4630      	mov	r0, r6
 80229e8:	f7fd fc84 	bl	80202f4 <_printf_float>
 80229ec:	4607      	mov	r7, r0
 80229ee:	1c78      	adds	r0, r7, #1
 80229f0:	d1d6      	bne.n	80229a0 <_vfiprintf_r+0x1bc>
 80229f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80229f4:	07d9      	lsls	r1, r3, #31
 80229f6:	d405      	bmi.n	8022a04 <_vfiprintf_r+0x220>
 80229f8:	89ab      	ldrh	r3, [r5, #12]
 80229fa:	059a      	lsls	r2, r3, #22
 80229fc:	d402      	bmi.n	8022a04 <_vfiprintf_r+0x220>
 80229fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022a00:	f7ff f9de 	bl	8021dc0 <__retarget_lock_release_recursive>
 8022a04:	89ab      	ldrh	r3, [r5, #12]
 8022a06:	065b      	lsls	r3, r3, #25
 8022a08:	f53f af12 	bmi.w	8022830 <_vfiprintf_r+0x4c>
 8022a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022a0e:	e711      	b.n	8022834 <_vfiprintf_r+0x50>
 8022a10:	ab03      	add	r3, sp, #12
 8022a12:	9300      	str	r3, [sp, #0]
 8022a14:	462a      	mov	r2, r5
 8022a16:	4b09      	ldr	r3, [pc, #36]	; (8022a3c <_vfiprintf_r+0x258>)
 8022a18:	a904      	add	r1, sp, #16
 8022a1a:	4630      	mov	r0, r6
 8022a1c:	f7fd ff0e 	bl	802083c <_printf_i>
 8022a20:	e7e4      	b.n	80229ec <_vfiprintf_r+0x208>
 8022a22:	bf00      	nop
 8022a24:	080236c8 	.word	0x080236c8
 8022a28:	080236e8 	.word	0x080236e8
 8022a2c:	080236a8 	.word	0x080236a8
 8022a30:	08023864 	.word	0x08023864
 8022a34:	0802386e 	.word	0x0802386e
 8022a38:	080202f5 	.word	0x080202f5
 8022a3c:	080227bf 	.word	0x080227bf
 8022a40:	0802386a 	.word	0x0802386a

08022a44 <_putc_r>:
 8022a44:	b570      	push	{r4, r5, r6, lr}
 8022a46:	460d      	mov	r5, r1
 8022a48:	4614      	mov	r4, r2
 8022a4a:	4606      	mov	r6, r0
 8022a4c:	b118      	cbz	r0, 8022a56 <_putc_r+0x12>
 8022a4e:	6983      	ldr	r3, [r0, #24]
 8022a50:	b90b      	cbnz	r3, 8022a56 <_putc_r+0x12>
 8022a52:	f7ff f911 	bl	8021c78 <__sinit>
 8022a56:	4b1c      	ldr	r3, [pc, #112]	; (8022ac8 <_putc_r+0x84>)
 8022a58:	429c      	cmp	r4, r3
 8022a5a:	d124      	bne.n	8022aa6 <_putc_r+0x62>
 8022a5c:	6874      	ldr	r4, [r6, #4]
 8022a5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a60:	07d8      	lsls	r0, r3, #31
 8022a62:	d405      	bmi.n	8022a70 <_putc_r+0x2c>
 8022a64:	89a3      	ldrh	r3, [r4, #12]
 8022a66:	0599      	lsls	r1, r3, #22
 8022a68:	d402      	bmi.n	8022a70 <_putc_r+0x2c>
 8022a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022a6c:	f7ff f9a7 	bl	8021dbe <__retarget_lock_acquire_recursive>
 8022a70:	68a3      	ldr	r3, [r4, #8]
 8022a72:	3b01      	subs	r3, #1
 8022a74:	2b00      	cmp	r3, #0
 8022a76:	60a3      	str	r3, [r4, #8]
 8022a78:	da05      	bge.n	8022a86 <_putc_r+0x42>
 8022a7a:	69a2      	ldr	r2, [r4, #24]
 8022a7c:	4293      	cmp	r3, r2
 8022a7e:	db1c      	blt.n	8022aba <_putc_r+0x76>
 8022a80:	b2eb      	uxtb	r3, r5
 8022a82:	2b0a      	cmp	r3, #10
 8022a84:	d019      	beq.n	8022aba <_putc_r+0x76>
 8022a86:	6823      	ldr	r3, [r4, #0]
 8022a88:	1c5a      	adds	r2, r3, #1
 8022a8a:	6022      	str	r2, [r4, #0]
 8022a8c:	701d      	strb	r5, [r3, #0]
 8022a8e:	b2ed      	uxtb	r5, r5
 8022a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a92:	07da      	lsls	r2, r3, #31
 8022a94:	d405      	bmi.n	8022aa2 <_putc_r+0x5e>
 8022a96:	89a3      	ldrh	r3, [r4, #12]
 8022a98:	059b      	lsls	r3, r3, #22
 8022a9a:	d402      	bmi.n	8022aa2 <_putc_r+0x5e>
 8022a9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022a9e:	f7ff f98f 	bl	8021dc0 <__retarget_lock_release_recursive>
 8022aa2:	4628      	mov	r0, r5
 8022aa4:	bd70      	pop	{r4, r5, r6, pc}
 8022aa6:	4b09      	ldr	r3, [pc, #36]	; (8022acc <_putc_r+0x88>)
 8022aa8:	429c      	cmp	r4, r3
 8022aaa:	d101      	bne.n	8022ab0 <_putc_r+0x6c>
 8022aac:	68b4      	ldr	r4, [r6, #8]
 8022aae:	e7d6      	b.n	8022a5e <_putc_r+0x1a>
 8022ab0:	4b07      	ldr	r3, [pc, #28]	; (8022ad0 <_putc_r+0x8c>)
 8022ab2:	429c      	cmp	r4, r3
 8022ab4:	bf08      	it	eq
 8022ab6:	68f4      	ldreq	r4, [r6, #12]
 8022ab8:	e7d1      	b.n	8022a5e <_putc_r+0x1a>
 8022aba:	4629      	mov	r1, r5
 8022abc:	4622      	mov	r2, r4
 8022abe:	4630      	mov	r0, r6
 8022ac0:	f7fe f886 	bl	8020bd0 <__swbuf_r>
 8022ac4:	4605      	mov	r5, r0
 8022ac6:	e7e3      	b.n	8022a90 <_putc_r+0x4c>
 8022ac8:	080236c8 	.word	0x080236c8
 8022acc:	080236e8 	.word	0x080236e8
 8022ad0:	080236a8 	.word	0x080236a8

08022ad4 <_sbrk_r>:
 8022ad4:	b538      	push	{r3, r4, r5, lr}
 8022ad6:	4d06      	ldr	r5, [pc, #24]	; (8022af0 <_sbrk_r+0x1c>)
 8022ad8:	2300      	movs	r3, #0
 8022ada:	4604      	mov	r4, r0
 8022adc:	4608      	mov	r0, r1
 8022ade:	602b      	str	r3, [r5, #0]
 8022ae0:	f7f4 fd52 	bl	8017588 <_sbrk>
 8022ae4:	1c43      	adds	r3, r0, #1
 8022ae6:	d102      	bne.n	8022aee <_sbrk_r+0x1a>
 8022ae8:	682b      	ldr	r3, [r5, #0]
 8022aea:	b103      	cbz	r3, 8022aee <_sbrk_r+0x1a>
 8022aec:	6023      	str	r3, [r4, #0]
 8022aee:	bd38      	pop	{r3, r4, r5, pc}
 8022af0:	2000f918 	.word	0x2000f918

08022af4 <__sread>:
 8022af4:	b510      	push	{r4, lr}
 8022af6:	460c      	mov	r4, r1
 8022af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022afc:	f000 f8e2 	bl	8022cc4 <_read_r>
 8022b00:	2800      	cmp	r0, #0
 8022b02:	bfab      	itete	ge
 8022b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022b06:	89a3      	ldrhlt	r3, [r4, #12]
 8022b08:	181b      	addge	r3, r3, r0
 8022b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8022b0e:	bfac      	ite	ge
 8022b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8022b12:	81a3      	strhlt	r3, [r4, #12]
 8022b14:	bd10      	pop	{r4, pc}

08022b16 <__swrite>:
 8022b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022b1a:	461f      	mov	r7, r3
 8022b1c:	898b      	ldrh	r3, [r1, #12]
 8022b1e:	05db      	lsls	r3, r3, #23
 8022b20:	4605      	mov	r5, r0
 8022b22:	460c      	mov	r4, r1
 8022b24:	4616      	mov	r6, r2
 8022b26:	d505      	bpl.n	8022b34 <__swrite+0x1e>
 8022b28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b2c:	2302      	movs	r3, #2
 8022b2e:	2200      	movs	r2, #0
 8022b30:	f000 f898 	bl	8022c64 <_lseek_r>
 8022b34:	89a3      	ldrh	r3, [r4, #12]
 8022b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8022b3e:	81a3      	strh	r3, [r4, #12]
 8022b40:	4632      	mov	r2, r6
 8022b42:	463b      	mov	r3, r7
 8022b44:	4628      	mov	r0, r5
 8022b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8022b4a:	f000 b817 	b.w	8022b7c <_write_r>

08022b4e <__sseek>:
 8022b4e:	b510      	push	{r4, lr}
 8022b50:	460c      	mov	r4, r1
 8022b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b56:	f000 f885 	bl	8022c64 <_lseek_r>
 8022b5a:	1c43      	adds	r3, r0, #1
 8022b5c:	89a3      	ldrh	r3, [r4, #12]
 8022b5e:	bf15      	itete	ne
 8022b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8022b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8022b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8022b6a:	81a3      	strheq	r3, [r4, #12]
 8022b6c:	bf18      	it	ne
 8022b6e:	81a3      	strhne	r3, [r4, #12]
 8022b70:	bd10      	pop	{r4, pc}

08022b72 <__sclose>:
 8022b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022b76:	f000 b831 	b.w	8022bdc <_close_r>
	...

08022b7c <_write_r>:
 8022b7c:	b538      	push	{r3, r4, r5, lr}
 8022b7e:	4d07      	ldr	r5, [pc, #28]	; (8022b9c <_write_r+0x20>)
 8022b80:	4604      	mov	r4, r0
 8022b82:	4608      	mov	r0, r1
 8022b84:	4611      	mov	r1, r2
 8022b86:	2200      	movs	r2, #0
 8022b88:	602a      	str	r2, [r5, #0]
 8022b8a:	461a      	mov	r2, r3
 8022b8c:	f7f4 fca8 	bl	80174e0 <_write>
 8022b90:	1c43      	adds	r3, r0, #1
 8022b92:	d102      	bne.n	8022b9a <_write_r+0x1e>
 8022b94:	682b      	ldr	r3, [r5, #0]
 8022b96:	b103      	cbz	r3, 8022b9a <_write_r+0x1e>
 8022b98:	6023      	str	r3, [r4, #0]
 8022b9a:	bd38      	pop	{r3, r4, r5, pc}
 8022b9c:	2000f918 	.word	0x2000f918

08022ba0 <__assert_func>:
 8022ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022ba2:	4614      	mov	r4, r2
 8022ba4:	461a      	mov	r2, r3
 8022ba6:	4b09      	ldr	r3, [pc, #36]	; (8022bcc <__assert_func+0x2c>)
 8022ba8:	681b      	ldr	r3, [r3, #0]
 8022baa:	4605      	mov	r5, r0
 8022bac:	68d8      	ldr	r0, [r3, #12]
 8022bae:	b14c      	cbz	r4, 8022bc4 <__assert_func+0x24>
 8022bb0:	4b07      	ldr	r3, [pc, #28]	; (8022bd0 <__assert_func+0x30>)
 8022bb2:	9100      	str	r1, [sp, #0]
 8022bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022bb8:	4906      	ldr	r1, [pc, #24]	; (8022bd4 <__assert_func+0x34>)
 8022bba:	462b      	mov	r3, r5
 8022bbc:	f000 f81e 	bl	8022bfc <fiprintf>
 8022bc0:	f000 f89f 	bl	8022d02 <abort>
 8022bc4:	4b04      	ldr	r3, [pc, #16]	; (8022bd8 <__assert_func+0x38>)
 8022bc6:	461c      	mov	r4, r3
 8022bc8:	e7f3      	b.n	8022bb2 <__assert_func+0x12>
 8022bca:	bf00      	nop
 8022bcc:	2000002c 	.word	0x2000002c
 8022bd0:	08023875 	.word	0x08023875
 8022bd4:	08023882 	.word	0x08023882
 8022bd8:	080238b0 	.word	0x080238b0

08022bdc <_close_r>:
 8022bdc:	b538      	push	{r3, r4, r5, lr}
 8022bde:	4d06      	ldr	r5, [pc, #24]	; (8022bf8 <_close_r+0x1c>)
 8022be0:	2300      	movs	r3, #0
 8022be2:	4604      	mov	r4, r0
 8022be4:	4608      	mov	r0, r1
 8022be6:	602b      	str	r3, [r5, #0]
 8022be8:	f7f4 fc9a 	bl	8017520 <_close>
 8022bec:	1c43      	adds	r3, r0, #1
 8022bee:	d102      	bne.n	8022bf6 <_close_r+0x1a>
 8022bf0:	682b      	ldr	r3, [r5, #0]
 8022bf2:	b103      	cbz	r3, 8022bf6 <_close_r+0x1a>
 8022bf4:	6023      	str	r3, [r4, #0]
 8022bf6:	bd38      	pop	{r3, r4, r5, pc}
 8022bf8:	2000f918 	.word	0x2000f918

08022bfc <fiprintf>:
 8022bfc:	b40e      	push	{r1, r2, r3}
 8022bfe:	b503      	push	{r0, r1, lr}
 8022c00:	4601      	mov	r1, r0
 8022c02:	ab03      	add	r3, sp, #12
 8022c04:	4805      	ldr	r0, [pc, #20]	; (8022c1c <fiprintf+0x20>)
 8022c06:	f853 2b04 	ldr.w	r2, [r3], #4
 8022c0a:	6800      	ldr	r0, [r0, #0]
 8022c0c:	9301      	str	r3, [sp, #4]
 8022c0e:	f7ff fde9 	bl	80227e4 <_vfiprintf_r>
 8022c12:	b002      	add	sp, #8
 8022c14:	f85d eb04 	ldr.w	lr, [sp], #4
 8022c18:	b003      	add	sp, #12
 8022c1a:	4770      	bx	lr
 8022c1c:	2000002c 	.word	0x2000002c

08022c20 <_fstat_r>:
 8022c20:	b538      	push	{r3, r4, r5, lr}
 8022c22:	4d07      	ldr	r5, [pc, #28]	; (8022c40 <_fstat_r+0x20>)
 8022c24:	2300      	movs	r3, #0
 8022c26:	4604      	mov	r4, r0
 8022c28:	4608      	mov	r0, r1
 8022c2a:	4611      	mov	r1, r2
 8022c2c:	602b      	str	r3, [r5, #0]
 8022c2e:	f7f4 fc83 	bl	8017538 <_fstat>
 8022c32:	1c43      	adds	r3, r0, #1
 8022c34:	d102      	bne.n	8022c3c <_fstat_r+0x1c>
 8022c36:	682b      	ldr	r3, [r5, #0]
 8022c38:	b103      	cbz	r3, 8022c3c <_fstat_r+0x1c>
 8022c3a:	6023      	str	r3, [r4, #0]
 8022c3c:	bd38      	pop	{r3, r4, r5, pc}
 8022c3e:	bf00      	nop
 8022c40:	2000f918 	.word	0x2000f918

08022c44 <_isatty_r>:
 8022c44:	b538      	push	{r3, r4, r5, lr}
 8022c46:	4d06      	ldr	r5, [pc, #24]	; (8022c60 <_isatty_r+0x1c>)
 8022c48:	2300      	movs	r3, #0
 8022c4a:	4604      	mov	r4, r0
 8022c4c:	4608      	mov	r0, r1
 8022c4e:	602b      	str	r3, [r5, #0]
 8022c50:	f7f4 fc82 	bl	8017558 <_isatty>
 8022c54:	1c43      	adds	r3, r0, #1
 8022c56:	d102      	bne.n	8022c5e <_isatty_r+0x1a>
 8022c58:	682b      	ldr	r3, [r5, #0]
 8022c5a:	b103      	cbz	r3, 8022c5e <_isatty_r+0x1a>
 8022c5c:	6023      	str	r3, [r4, #0]
 8022c5e:	bd38      	pop	{r3, r4, r5, pc}
 8022c60:	2000f918 	.word	0x2000f918

08022c64 <_lseek_r>:
 8022c64:	b538      	push	{r3, r4, r5, lr}
 8022c66:	4d07      	ldr	r5, [pc, #28]	; (8022c84 <_lseek_r+0x20>)
 8022c68:	4604      	mov	r4, r0
 8022c6a:	4608      	mov	r0, r1
 8022c6c:	4611      	mov	r1, r2
 8022c6e:	2200      	movs	r2, #0
 8022c70:	602a      	str	r2, [r5, #0]
 8022c72:	461a      	mov	r2, r3
 8022c74:	f7f4 fc7b 	bl	801756e <_lseek>
 8022c78:	1c43      	adds	r3, r0, #1
 8022c7a:	d102      	bne.n	8022c82 <_lseek_r+0x1e>
 8022c7c:	682b      	ldr	r3, [r5, #0]
 8022c7e:	b103      	cbz	r3, 8022c82 <_lseek_r+0x1e>
 8022c80:	6023      	str	r3, [r4, #0]
 8022c82:	bd38      	pop	{r3, r4, r5, pc}
 8022c84:	2000f918 	.word	0x2000f918

08022c88 <__ascii_mbtowc>:
 8022c88:	b082      	sub	sp, #8
 8022c8a:	b901      	cbnz	r1, 8022c8e <__ascii_mbtowc+0x6>
 8022c8c:	a901      	add	r1, sp, #4
 8022c8e:	b142      	cbz	r2, 8022ca2 <__ascii_mbtowc+0x1a>
 8022c90:	b14b      	cbz	r3, 8022ca6 <__ascii_mbtowc+0x1e>
 8022c92:	7813      	ldrb	r3, [r2, #0]
 8022c94:	600b      	str	r3, [r1, #0]
 8022c96:	7812      	ldrb	r2, [r2, #0]
 8022c98:	1e10      	subs	r0, r2, #0
 8022c9a:	bf18      	it	ne
 8022c9c:	2001      	movne	r0, #1
 8022c9e:	b002      	add	sp, #8
 8022ca0:	4770      	bx	lr
 8022ca2:	4610      	mov	r0, r2
 8022ca4:	e7fb      	b.n	8022c9e <__ascii_mbtowc+0x16>
 8022ca6:	f06f 0001 	mvn.w	r0, #1
 8022caa:	e7f8      	b.n	8022c9e <__ascii_mbtowc+0x16>

08022cac <__malloc_lock>:
 8022cac:	4801      	ldr	r0, [pc, #4]	; (8022cb4 <__malloc_lock+0x8>)
 8022cae:	f7ff b886 	b.w	8021dbe <__retarget_lock_acquire_recursive>
 8022cb2:	bf00      	nop
 8022cb4:	2000f90c 	.word	0x2000f90c

08022cb8 <__malloc_unlock>:
 8022cb8:	4801      	ldr	r0, [pc, #4]	; (8022cc0 <__malloc_unlock+0x8>)
 8022cba:	f7ff b881 	b.w	8021dc0 <__retarget_lock_release_recursive>
 8022cbe:	bf00      	nop
 8022cc0:	2000f90c 	.word	0x2000f90c

08022cc4 <_read_r>:
 8022cc4:	b538      	push	{r3, r4, r5, lr}
 8022cc6:	4d07      	ldr	r5, [pc, #28]	; (8022ce4 <_read_r+0x20>)
 8022cc8:	4604      	mov	r4, r0
 8022cca:	4608      	mov	r0, r1
 8022ccc:	4611      	mov	r1, r2
 8022cce:	2200      	movs	r2, #0
 8022cd0:	602a      	str	r2, [r5, #0]
 8022cd2:	461a      	mov	r2, r3
 8022cd4:	f7f4 fbe6 	bl	80174a4 <_read>
 8022cd8:	1c43      	adds	r3, r0, #1
 8022cda:	d102      	bne.n	8022ce2 <_read_r+0x1e>
 8022cdc:	682b      	ldr	r3, [r5, #0]
 8022cde:	b103      	cbz	r3, 8022ce2 <_read_r+0x1e>
 8022ce0:	6023      	str	r3, [r4, #0]
 8022ce2:	bd38      	pop	{r3, r4, r5, pc}
 8022ce4:	2000f918 	.word	0x2000f918

08022ce8 <__ascii_wctomb>:
 8022ce8:	b149      	cbz	r1, 8022cfe <__ascii_wctomb+0x16>
 8022cea:	2aff      	cmp	r2, #255	; 0xff
 8022cec:	bf85      	ittet	hi
 8022cee:	238a      	movhi	r3, #138	; 0x8a
 8022cf0:	6003      	strhi	r3, [r0, #0]
 8022cf2:	700a      	strbls	r2, [r1, #0]
 8022cf4:	f04f 30ff 	movhi.w	r0, #4294967295
 8022cf8:	bf98      	it	ls
 8022cfa:	2001      	movls	r0, #1
 8022cfc:	4770      	bx	lr
 8022cfe:	4608      	mov	r0, r1
 8022d00:	4770      	bx	lr

08022d02 <abort>:
 8022d02:	b508      	push	{r3, lr}
 8022d04:	2006      	movs	r0, #6
 8022d06:	f000 f82b 	bl	8022d60 <raise>
 8022d0a:	2001      	movs	r0, #1
 8022d0c:	f7f4 fbc0 	bl	8017490 <_exit>

08022d10 <_raise_r>:
 8022d10:	291f      	cmp	r1, #31
 8022d12:	b538      	push	{r3, r4, r5, lr}
 8022d14:	4604      	mov	r4, r0
 8022d16:	460d      	mov	r5, r1
 8022d18:	d904      	bls.n	8022d24 <_raise_r+0x14>
 8022d1a:	2316      	movs	r3, #22
 8022d1c:	6003      	str	r3, [r0, #0]
 8022d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8022d22:	bd38      	pop	{r3, r4, r5, pc}
 8022d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022d26:	b112      	cbz	r2, 8022d2e <_raise_r+0x1e>
 8022d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022d2c:	b94b      	cbnz	r3, 8022d42 <_raise_r+0x32>
 8022d2e:	4620      	mov	r0, r4
 8022d30:	f000 f830 	bl	8022d94 <_getpid_r>
 8022d34:	462a      	mov	r2, r5
 8022d36:	4601      	mov	r1, r0
 8022d38:	4620      	mov	r0, r4
 8022d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022d3e:	f000 b817 	b.w	8022d70 <_kill_r>
 8022d42:	2b01      	cmp	r3, #1
 8022d44:	d00a      	beq.n	8022d5c <_raise_r+0x4c>
 8022d46:	1c59      	adds	r1, r3, #1
 8022d48:	d103      	bne.n	8022d52 <_raise_r+0x42>
 8022d4a:	2316      	movs	r3, #22
 8022d4c:	6003      	str	r3, [r0, #0]
 8022d4e:	2001      	movs	r0, #1
 8022d50:	e7e7      	b.n	8022d22 <_raise_r+0x12>
 8022d52:	2400      	movs	r4, #0
 8022d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022d58:	4628      	mov	r0, r5
 8022d5a:	4798      	blx	r3
 8022d5c:	2000      	movs	r0, #0
 8022d5e:	e7e0      	b.n	8022d22 <_raise_r+0x12>

08022d60 <raise>:
 8022d60:	4b02      	ldr	r3, [pc, #8]	; (8022d6c <raise+0xc>)
 8022d62:	4601      	mov	r1, r0
 8022d64:	6818      	ldr	r0, [r3, #0]
 8022d66:	f7ff bfd3 	b.w	8022d10 <_raise_r>
 8022d6a:	bf00      	nop
 8022d6c:	2000002c 	.word	0x2000002c

08022d70 <_kill_r>:
 8022d70:	b538      	push	{r3, r4, r5, lr}
 8022d72:	4d07      	ldr	r5, [pc, #28]	; (8022d90 <_kill_r+0x20>)
 8022d74:	2300      	movs	r3, #0
 8022d76:	4604      	mov	r4, r0
 8022d78:	4608      	mov	r0, r1
 8022d7a:	4611      	mov	r1, r2
 8022d7c:	602b      	str	r3, [r5, #0]
 8022d7e:	f7f4 fb77 	bl	8017470 <_kill>
 8022d82:	1c43      	adds	r3, r0, #1
 8022d84:	d102      	bne.n	8022d8c <_kill_r+0x1c>
 8022d86:	682b      	ldr	r3, [r5, #0]
 8022d88:	b103      	cbz	r3, 8022d8c <_kill_r+0x1c>
 8022d8a:	6023      	str	r3, [r4, #0]
 8022d8c:	bd38      	pop	{r3, r4, r5, pc}
 8022d8e:	bf00      	nop
 8022d90:	2000f918 	.word	0x2000f918

08022d94 <_getpid_r>:
 8022d94:	f7f4 bb64 	b.w	8017460 <_getpid>

08022d98 <ceil>:
 8022d98:	ec51 0b10 	vmov	r0, r1, d0
 8022d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022da0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8022da4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8022da8:	2e13      	cmp	r6, #19
 8022daa:	ee10 5a10 	vmov	r5, s0
 8022dae:	ee10 8a10 	vmov	r8, s0
 8022db2:	460c      	mov	r4, r1
 8022db4:	dc30      	bgt.n	8022e18 <ceil+0x80>
 8022db6:	2e00      	cmp	r6, #0
 8022db8:	da12      	bge.n	8022de0 <ceil+0x48>
 8022dba:	a335      	add	r3, pc, #212	; (adr r3, 8022e90 <ceil+0xf8>)
 8022dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022dc0:	f7dd fa8c 	bl	80002dc <__adddf3>
 8022dc4:	2200      	movs	r2, #0
 8022dc6:	2300      	movs	r3, #0
 8022dc8:	f7dd fece 	bl	8000b68 <__aeabi_dcmpgt>
 8022dcc:	b128      	cbz	r0, 8022dda <ceil+0x42>
 8022dce:	2c00      	cmp	r4, #0
 8022dd0:	db55      	blt.n	8022e7e <ceil+0xe6>
 8022dd2:	432c      	orrs	r4, r5
 8022dd4:	d057      	beq.n	8022e86 <ceil+0xee>
 8022dd6:	4c30      	ldr	r4, [pc, #192]	; (8022e98 <ceil+0x100>)
 8022dd8:	2500      	movs	r5, #0
 8022dda:	4621      	mov	r1, r4
 8022ddc:	4628      	mov	r0, r5
 8022dde:	e025      	b.n	8022e2c <ceil+0x94>
 8022de0:	4f2e      	ldr	r7, [pc, #184]	; (8022e9c <ceil+0x104>)
 8022de2:	4137      	asrs	r7, r6
 8022de4:	ea01 0307 	and.w	r3, r1, r7
 8022de8:	4303      	orrs	r3, r0
 8022dea:	d01f      	beq.n	8022e2c <ceil+0x94>
 8022dec:	a328      	add	r3, pc, #160	; (adr r3, 8022e90 <ceil+0xf8>)
 8022dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022df2:	f7dd fa73 	bl	80002dc <__adddf3>
 8022df6:	2200      	movs	r2, #0
 8022df8:	2300      	movs	r3, #0
 8022dfa:	f7dd feb5 	bl	8000b68 <__aeabi_dcmpgt>
 8022dfe:	2800      	cmp	r0, #0
 8022e00:	d0eb      	beq.n	8022dda <ceil+0x42>
 8022e02:	2c00      	cmp	r4, #0
 8022e04:	bfc2      	ittt	gt
 8022e06:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8022e0a:	fa43 f606 	asrgt.w	r6, r3, r6
 8022e0e:	19a4      	addgt	r4, r4, r6
 8022e10:	ea24 0407 	bic.w	r4, r4, r7
 8022e14:	2500      	movs	r5, #0
 8022e16:	e7e0      	b.n	8022dda <ceil+0x42>
 8022e18:	2e33      	cmp	r6, #51	; 0x33
 8022e1a:	dd0b      	ble.n	8022e34 <ceil+0x9c>
 8022e1c:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8022e20:	d104      	bne.n	8022e2c <ceil+0x94>
 8022e22:	ee10 2a10 	vmov	r2, s0
 8022e26:	460b      	mov	r3, r1
 8022e28:	f7dd fa58 	bl	80002dc <__adddf3>
 8022e2c:	ec41 0b10 	vmov	d0, r0, r1
 8022e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022e34:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8022e38:	f04f 33ff 	mov.w	r3, #4294967295
 8022e3c:	fa23 f707 	lsr.w	r7, r3, r7
 8022e40:	4207      	tst	r7, r0
 8022e42:	d0f3      	beq.n	8022e2c <ceil+0x94>
 8022e44:	a312      	add	r3, pc, #72	; (adr r3, 8022e90 <ceil+0xf8>)
 8022e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022e4a:	f7dd fa47 	bl	80002dc <__adddf3>
 8022e4e:	2200      	movs	r2, #0
 8022e50:	2300      	movs	r3, #0
 8022e52:	f7dd fe89 	bl	8000b68 <__aeabi_dcmpgt>
 8022e56:	2800      	cmp	r0, #0
 8022e58:	d0bf      	beq.n	8022dda <ceil+0x42>
 8022e5a:	2c00      	cmp	r4, #0
 8022e5c:	dd02      	ble.n	8022e64 <ceil+0xcc>
 8022e5e:	2e14      	cmp	r6, #20
 8022e60:	d103      	bne.n	8022e6a <ceil+0xd2>
 8022e62:	3401      	adds	r4, #1
 8022e64:	ea25 0507 	bic.w	r5, r5, r7
 8022e68:	e7b7      	b.n	8022dda <ceil+0x42>
 8022e6a:	2301      	movs	r3, #1
 8022e6c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8022e70:	fa03 f606 	lsl.w	r6, r3, r6
 8022e74:	4435      	add	r5, r6
 8022e76:	4545      	cmp	r5, r8
 8022e78:	bf38      	it	cc
 8022e7a:	18e4      	addcc	r4, r4, r3
 8022e7c:	e7f2      	b.n	8022e64 <ceil+0xcc>
 8022e7e:	2500      	movs	r5, #0
 8022e80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8022e84:	e7a9      	b.n	8022dda <ceil+0x42>
 8022e86:	4625      	mov	r5, r4
 8022e88:	e7a7      	b.n	8022dda <ceil+0x42>
 8022e8a:	bf00      	nop
 8022e8c:	f3af 8000 	nop.w
 8022e90:	8800759c 	.word	0x8800759c
 8022e94:	7e37e43c 	.word	0x7e37e43c
 8022e98:	3ff00000 	.word	0x3ff00000
 8022e9c:	000fffff 	.word	0x000fffff

08022ea0 <exp>:
 8022ea0:	b538      	push	{r3, r4, r5, lr}
 8022ea2:	ed2d 8b02 	vpush	{d8}
 8022ea6:	ec55 4b10 	vmov	r4, r5, d0
 8022eaa:	f000 f841 	bl	8022f30 <__ieee754_exp>
 8022eae:	eeb0 8a40 	vmov.f32	s16, s0
 8022eb2:	eef0 8a60 	vmov.f32	s17, s1
 8022eb6:	ec45 4b10 	vmov	d0, r4, r5
 8022eba:	f000 f9eb 	bl	8023294 <finite>
 8022ebe:	b168      	cbz	r0, 8022edc <exp+0x3c>
 8022ec0:	a317      	add	r3, pc, #92	; (adr r3, 8022f20 <exp+0x80>)
 8022ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ec6:	4620      	mov	r0, r4
 8022ec8:	4629      	mov	r1, r5
 8022eca:	f7dd fe4d 	bl	8000b68 <__aeabi_dcmpgt>
 8022ece:	b160      	cbz	r0, 8022eea <exp+0x4a>
 8022ed0:	f7fd f930 	bl	8020134 <__errno>
 8022ed4:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8022f10 <exp+0x70>
 8022ed8:	2322      	movs	r3, #34	; 0x22
 8022eda:	6003      	str	r3, [r0, #0]
 8022edc:	eeb0 0a48 	vmov.f32	s0, s16
 8022ee0:	eef0 0a68 	vmov.f32	s1, s17
 8022ee4:	ecbd 8b02 	vpop	{d8}
 8022ee8:	bd38      	pop	{r3, r4, r5, pc}
 8022eea:	a30f      	add	r3, pc, #60	; (adr r3, 8022f28 <exp+0x88>)
 8022eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022ef0:	4620      	mov	r0, r4
 8022ef2:	4629      	mov	r1, r5
 8022ef4:	f7dd fe1a 	bl	8000b2c <__aeabi_dcmplt>
 8022ef8:	2800      	cmp	r0, #0
 8022efa:	d0ef      	beq.n	8022edc <exp+0x3c>
 8022efc:	f7fd f91a 	bl	8020134 <__errno>
 8022f00:	2322      	movs	r3, #34	; 0x22
 8022f02:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8022f18 <exp+0x78>
 8022f06:	6003      	str	r3, [r0, #0]
 8022f08:	e7e8      	b.n	8022edc <exp+0x3c>
 8022f0a:	bf00      	nop
 8022f0c:	f3af 8000 	nop.w
 8022f10:	00000000 	.word	0x00000000
 8022f14:	7ff00000 	.word	0x7ff00000
	...
 8022f20:	fefa39ef 	.word	0xfefa39ef
 8022f24:	40862e42 	.word	0x40862e42
 8022f28:	d52d3051 	.word	0xd52d3051
 8022f2c:	c0874910 	.word	0xc0874910

08022f30 <__ieee754_exp>:
 8022f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022f34:	ec55 4b10 	vmov	r4, r5, d0
 8022f38:	49b5      	ldr	r1, [pc, #724]	; (8023210 <__ieee754_exp+0x2e0>)
 8022f3a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8022f3e:	428b      	cmp	r3, r1
 8022f40:	ed2d 8b04 	vpush	{d8-d9}
 8022f44:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8022f48:	d93d      	bls.n	8022fc6 <__ieee754_exp+0x96>
 8022f4a:	49b2      	ldr	r1, [pc, #712]	; (8023214 <__ieee754_exp+0x2e4>)
 8022f4c:	428b      	cmp	r3, r1
 8022f4e:	d918      	bls.n	8022f82 <__ieee754_exp+0x52>
 8022f50:	ee10 3a10 	vmov	r3, s0
 8022f54:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8022f58:	4313      	orrs	r3, r2
 8022f5a:	d009      	beq.n	8022f70 <__ieee754_exp+0x40>
 8022f5c:	ee10 2a10 	vmov	r2, s0
 8022f60:	462b      	mov	r3, r5
 8022f62:	4620      	mov	r0, r4
 8022f64:	4629      	mov	r1, r5
 8022f66:	f7dd f9b9 	bl	80002dc <__adddf3>
 8022f6a:	4604      	mov	r4, r0
 8022f6c:	460d      	mov	r5, r1
 8022f6e:	e002      	b.n	8022f76 <__ieee754_exp+0x46>
 8022f70:	b10e      	cbz	r6, 8022f76 <__ieee754_exp+0x46>
 8022f72:	2400      	movs	r4, #0
 8022f74:	2500      	movs	r5, #0
 8022f76:	ecbd 8b04 	vpop	{d8-d9}
 8022f7a:	ec45 4b10 	vmov	d0, r4, r5
 8022f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022f82:	a38d      	add	r3, pc, #564	; (adr r3, 80231b8 <__ieee754_exp+0x288>)
 8022f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022f88:	ee10 0a10 	vmov	r0, s0
 8022f8c:	4629      	mov	r1, r5
 8022f8e:	f7dd fdeb 	bl	8000b68 <__aeabi_dcmpgt>
 8022f92:	4607      	mov	r7, r0
 8022f94:	b130      	cbz	r0, 8022fa4 <__ieee754_exp+0x74>
 8022f96:	ecbd 8b04 	vpop	{d8-d9}
 8022f9a:	2000      	movs	r0, #0
 8022f9c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fa0:	f000 b96f 	b.w	8023282 <__math_oflow>
 8022fa4:	a386      	add	r3, pc, #536	; (adr r3, 80231c0 <__ieee754_exp+0x290>)
 8022fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022faa:	4620      	mov	r0, r4
 8022fac:	4629      	mov	r1, r5
 8022fae:	f7dd fdbd 	bl	8000b2c <__aeabi_dcmplt>
 8022fb2:	2800      	cmp	r0, #0
 8022fb4:	f000 808b 	beq.w	80230ce <__ieee754_exp+0x19e>
 8022fb8:	ecbd 8b04 	vpop	{d8-d9}
 8022fbc:	4638      	mov	r0, r7
 8022fbe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022fc2:	f000 b955 	b.w	8023270 <__math_uflow>
 8022fc6:	4a94      	ldr	r2, [pc, #592]	; (8023218 <__ieee754_exp+0x2e8>)
 8022fc8:	4293      	cmp	r3, r2
 8022fca:	f240 80ac 	bls.w	8023126 <__ieee754_exp+0x1f6>
 8022fce:	4a93      	ldr	r2, [pc, #588]	; (802321c <__ieee754_exp+0x2ec>)
 8022fd0:	4293      	cmp	r3, r2
 8022fd2:	d87c      	bhi.n	80230ce <__ieee754_exp+0x19e>
 8022fd4:	4b92      	ldr	r3, [pc, #584]	; (8023220 <__ieee754_exp+0x2f0>)
 8022fd6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8022fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8022fde:	ee10 0a10 	vmov	r0, s0
 8022fe2:	4629      	mov	r1, r5
 8022fe4:	f7dd f978 	bl	80002d8 <__aeabi_dsub>
 8022fe8:	4b8e      	ldr	r3, [pc, #568]	; (8023224 <__ieee754_exp+0x2f4>)
 8022fea:	00f7      	lsls	r7, r6, #3
 8022fec:	443b      	add	r3, r7
 8022fee:	ed93 7b00 	vldr	d7, [r3]
 8022ff2:	f1c6 0a01 	rsb	sl, r6, #1
 8022ff6:	4680      	mov	r8, r0
 8022ff8:	4689      	mov	r9, r1
 8022ffa:	ebaa 0a06 	sub.w	sl, sl, r6
 8022ffe:	eeb0 8a47 	vmov.f32	s16, s14
 8023002:	eef0 8a67 	vmov.f32	s17, s15
 8023006:	ec53 2b18 	vmov	r2, r3, d8
 802300a:	4640      	mov	r0, r8
 802300c:	4649      	mov	r1, r9
 802300e:	f7dd f963 	bl	80002d8 <__aeabi_dsub>
 8023012:	4604      	mov	r4, r0
 8023014:	460d      	mov	r5, r1
 8023016:	4622      	mov	r2, r4
 8023018:	462b      	mov	r3, r5
 802301a:	4620      	mov	r0, r4
 802301c:	4629      	mov	r1, r5
 802301e:	f7dd fb13 	bl	8000648 <__aeabi_dmul>
 8023022:	a369      	add	r3, pc, #420	; (adr r3, 80231c8 <__ieee754_exp+0x298>)
 8023024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023028:	4606      	mov	r6, r0
 802302a:	460f      	mov	r7, r1
 802302c:	f7dd fb0c 	bl	8000648 <__aeabi_dmul>
 8023030:	a367      	add	r3, pc, #412	; (adr r3, 80231d0 <__ieee754_exp+0x2a0>)
 8023032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023036:	f7dd f94f 	bl	80002d8 <__aeabi_dsub>
 802303a:	4632      	mov	r2, r6
 802303c:	463b      	mov	r3, r7
 802303e:	f7dd fb03 	bl	8000648 <__aeabi_dmul>
 8023042:	a365      	add	r3, pc, #404	; (adr r3, 80231d8 <__ieee754_exp+0x2a8>)
 8023044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023048:	f7dd f948 	bl	80002dc <__adddf3>
 802304c:	4632      	mov	r2, r6
 802304e:	463b      	mov	r3, r7
 8023050:	f7dd fafa 	bl	8000648 <__aeabi_dmul>
 8023054:	a362      	add	r3, pc, #392	; (adr r3, 80231e0 <__ieee754_exp+0x2b0>)
 8023056:	e9d3 2300 	ldrd	r2, r3, [r3]
 802305a:	f7dd f93d 	bl	80002d8 <__aeabi_dsub>
 802305e:	4632      	mov	r2, r6
 8023060:	463b      	mov	r3, r7
 8023062:	f7dd faf1 	bl	8000648 <__aeabi_dmul>
 8023066:	a360      	add	r3, pc, #384	; (adr r3, 80231e8 <__ieee754_exp+0x2b8>)
 8023068:	e9d3 2300 	ldrd	r2, r3, [r3]
 802306c:	f7dd f936 	bl	80002dc <__adddf3>
 8023070:	4632      	mov	r2, r6
 8023072:	463b      	mov	r3, r7
 8023074:	f7dd fae8 	bl	8000648 <__aeabi_dmul>
 8023078:	4602      	mov	r2, r0
 802307a:	460b      	mov	r3, r1
 802307c:	4620      	mov	r0, r4
 802307e:	4629      	mov	r1, r5
 8023080:	f7dd f92a 	bl	80002d8 <__aeabi_dsub>
 8023084:	4602      	mov	r2, r0
 8023086:	460b      	mov	r3, r1
 8023088:	4606      	mov	r6, r0
 802308a:	460f      	mov	r7, r1
 802308c:	4620      	mov	r0, r4
 802308e:	4629      	mov	r1, r5
 8023090:	f7dd fada 	bl	8000648 <__aeabi_dmul>
 8023094:	ec41 0b19 	vmov	d9, r0, r1
 8023098:	f1ba 0f00 	cmp.w	sl, #0
 802309c:	d15d      	bne.n	802315a <__ieee754_exp+0x22a>
 802309e:	2200      	movs	r2, #0
 80230a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80230a4:	4630      	mov	r0, r6
 80230a6:	4639      	mov	r1, r7
 80230a8:	f7dd f916 	bl	80002d8 <__aeabi_dsub>
 80230ac:	4602      	mov	r2, r0
 80230ae:	460b      	mov	r3, r1
 80230b0:	ec51 0b19 	vmov	r0, r1, d9
 80230b4:	f7dd fbf2 	bl	800089c <__aeabi_ddiv>
 80230b8:	4622      	mov	r2, r4
 80230ba:	462b      	mov	r3, r5
 80230bc:	f7dd f90c 	bl	80002d8 <__aeabi_dsub>
 80230c0:	4602      	mov	r2, r0
 80230c2:	460b      	mov	r3, r1
 80230c4:	2000      	movs	r0, #0
 80230c6:	4958      	ldr	r1, [pc, #352]	; (8023228 <__ieee754_exp+0x2f8>)
 80230c8:	f7dd f906 	bl	80002d8 <__aeabi_dsub>
 80230cc:	e74d      	b.n	8022f6a <__ieee754_exp+0x3a>
 80230ce:	4857      	ldr	r0, [pc, #348]	; (802322c <__ieee754_exp+0x2fc>)
 80230d0:	a347      	add	r3, pc, #284	; (adr r3, 80231f0 <__ieee754_exp+0x2c0>)
 80230d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230d6:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 80230da:	4629      	mov	r1, r5
 80230dc:	4620      	mov	r0, r4
 80230de:	f7dd fab3 	bl	8000648 <__aeabi_dmul>
 80230e2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80230e6:	f7dd f8f9 	bl	80002dc <__adddf3>
 80230ea:	f7dd fd5d 	bl	8000ba8 <__aeabi_d2iz>
 80230ee:	4682      	mov	sl, r0
 80230f0:	f7dd fa40 	bl	8000574 <__aeabi_i2d>
 80230f4:	a340      	add	r3, pc, #256	; (adr r3, 80231f8 <__ieee754_exp+0x2c8>)
 80230f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80230fa:	4606      	mov	r6, r0
 80230fc:	460f      	mov	r7, r1
 80230fe:	f7dd faa3 	bl	8000648 <__aeabi_dmul>
 8023102:	4602      	mov	r2, r0
 8023104:	460b      	mov	r3, r1
 8023106:	4620      	mov	r0, r4
 8023108:	4629      	mov	r1, r5
 802310a:	f7dd f8e5 	bl	80002d8 <__aeabi_dsub>
 802310e:	a33c      	add	r3, pc, #240	; (adr r3, 8023200 <__ieee754_exp+0x2d0>)
 8023110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023114:	4680      	mov	r8, r0
 8023116:	4689      	mov	r9, r1
 8023118:	4630      	mov	r0, r6
 802311a:	4639      	mov	r1, r7
 802311c:	f7dd fa94 	bl	8000648 <__aeabi_dmul>
 8023120:	ec41 0b18 	vmov	d8, r0, r1
 8023124:	e76f      	b.n	8023006 <__ieee754_exp+0xd6>
 8023126:	4a42      	ldr	r2, [pc, #264]	; (8023230 <__ieee754_exp+0x300>)
 8023128:	4293      	cmp	r3, r2
 802312a:	d811      	bhi.n	8023150 <__ieee754_exp+0x220>
 802312c:	a336      	add	r3, pc, #216	; (adr r3, 8023208 <__ieee754_exp+0x2d8>)
 802312e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023132:	ee10 0a10 	vmov	r0, s0
 8023136:	4629      	mov	r1, r5
 8023138:	f7dd f8d0 	bl	80002dc <__adddf3>
 802313c:	4b3a      	ldr	r3, [pc, #232]	; (8023228 <__ieee754_exp+0x2f8>)
 802313e:	2200      	movs	r2, #0
 8023140:	f7dd fd12 	bl	8000b68 <__aeabi_dcmpgt>
 8023144:	b138      	cbz	r0, 8023156 <__ieee754_exp+0x226>
 8023146:	4b38      	ldr	r3, [pc, #224]	; (8023228 <__ieee754_exp+0x2f8>)
 8023148:	2200      	movs	r2, #0
 802314a:	4620      	mov	r0, r4
 802314c:	4629      	mov	r1, r5
 802314e:	e70a      	b.n	8022f66 <__ieee754_exp+0x36>
 8023150:	f04f 0a00 	mov.w	sl, #0
 8023154:	e75f      	b.n	8023016 <__ieee754_exp+0xe6>
 8023156:	4682      	mov	sl, r0
 8023158:	e75d      	b.n	8023016 <__ieee754_exp+0xe6>
 802315a:	4632      	mov	r2, r6
 802315c:	463b      	mov	r3, r7
 802315e:	2000      	movs	r0, #0
 8023160:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8023164:	f7dd f8b8 	bl	80002d8 <__aeabi_dsub>
 8023168:	4602      	mov	r2, r0
 802316a:	460b      	mov	r3, r1
 802316c:	ec51 0b19 	vmov	r0, r1, d9
 8023170:	f7dd fb94 	bl	800089c <__aeabi_ddiv>
 8023174:	4602      	mov	r2, r0
 8023176:	460b      	mov	r3, r1
 8023178:	ec51 0b18 	vmov	r0, r1, d8
 802317c:	f7dd f8ac 	bl	80002d8 <__aeabi_dsub>
 8023180:	4642      	mov	r2, r8
 8023182:	464b      	mov	r3, r9
 8023184:	f7dd f8a8 	bl	80002d8 <__aeabi_dsub>
 8023188:	4602      	mov	r2, r0
 802318a:	460b      	mov	r3, r1
 802318c:	2000      	movs	r0, #0
 802318e:	4926      	ldr	r1, [pc, #152]	; (8023228 <__ieee754_exp+0x2f8>)
 8023190:	f7dd f8a2 	bl	80002d8 <__aeabi_dsub>
 8023194:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8023198:	4592      	cmp	sl, r2
 802319a:	db02      	blt.n	80231a2 <__ieee754_exp+0x272>
 802319c:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80231a0:	e6e3      	b.n	8022f6a <__ieee754_exp+0x3a>
 80231a2:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80231a6:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80231aa:	2200      	movs	r2, #0
 80231ac:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80231b0:	f7dd fa4a 	bl	8000648 <__aeabi_dmul>
 80231b4:	e6d9      	b.n	8022f6a <__ieee754_exp+0x3a>
 80231b6:	bf00      	nop
 80231b8:	fefa39ef 	.word	0xfefa39ef
 80231bc:	40862e42 	.word	0x40862e42
 80231c0:	d52d3051 	.word	0xd52d3051
 80231c4:	c0874910 	.word	0xc0874910
 80231c8:	72bea4d0 	.word	0x72bea4d0
 80231cc:	3e663769 	.word	0x3e663769
 80231d0:	c5d26bf1 	.word	0xc5d26bf1
 80231d4:	3ebbbd41 	.word	0x3ebbbd41
 80231d8:	af25de2c 	.word	0xaf25de2c
 80231dc:	3f11566a 	.word	0x3f11566a
 80231e0:	16bebd93 	.word	0x16bebd93
 80231e4:	3f66c16c 	.word	0x3f66c16c
 80231e8:	5555553e 	.word	0x5555553e
 80231ec:	3fc55555 	.word	0x3fc55555
 80231f0:	652b82fe 	.word	0x652b82fe
 80231f4:	3ff71547 	.word	0x3ff71547
 80231f8:	fee00000 	.word	0xfee00000
 80231fc:	3fe62e42 	.word	0x3fe62e42
 8023200:	35793c76 	.word	0x35793c76
 8023204:	3dea39ef 	.word	0x3dea39ef
 8023208:	8800759c 	.word	0x8800759c
 802320c:	7e37e43c 	.word	0x7e37e43c
 8023210:	40862e41 	.word	0x40862e41
 8023214:	7fefffff 	.word	0x7fefffff
 8023218:	3fd62e42 	.word	0x3fd62e42
 802321c:	3ff0a2b1 	.word	0x3ff0a2b1
 8023220:	080239d0 	.word	0x080239d0
 8023224:	080239e0 	.word	0x080239e0
 8023228:	3ff00000 	.word	0x3ff00000
 802322c:	080239c0 	.word	0x080239c0
 8023230:	3defffff 	.word	0x3defffff

08023234 <with_errno>:
 8023234:	b570      	push	{r4, r5, r6, lr}
 8023236:	4604      	mov	r4, r0
 8023238:	460d      	mov	r5, r1
 802323a:	4616      	mov	r6, r2
 802323c:	f7fc ff7a 	bl	8020134 <__errno>
 8023240:	4629      	mov	r1, r5
 8023242:	6006      	str	r6, [r0, #0]
 8023244:	4620      	mov	r0, r4
 8023246:	bd70      	pop	{r4, r5, r6, pc}

08023248 <xflow>:
 8023248:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802324a:	4614      	mov	r4, r2
 802324c:	461d      	mov	r5, r3
 802324e:	b108      	cbz	r0, 8023254 <xflow+0xc>
 8023250:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023254:	e9cd 2300 	strd	r2, r3, [sp]
 8023258:	e9dd 2300 	ldrd	r2, r3, [sp]
 802325c:	4620      	mov	r0, r4
 802325e:	4629      	mov	r1, r5
 8023260:	f7dd f9f2 	bl	8000648 <__aeabi_dmul>
 8023264:	2222      	movs	r2, #34	; 0x22
 8023266:	b003      	add	sp, #12
 8023268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802326c:	f7ff bfe2 	b.w	8023234 <with_errno>

08023270 <__math_uflow>:
 8023270:	b508      	push	{r3, lr}
 8023272:	2200      	movs	r2, #0
 8023274:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023278:	f7ff ffe6 	bl	8023248 <xflow>
 802327c:	ec41 0b10 	vmov	d0, r0, r1
 8023280:	bd08      	pop	{r3, pc}

08023282 <__math_oflow>:
 8023282:	b508      	push	{r3, lr}
 8023284:	2200      	movs	r2, #0
 8023286:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802328a:	f7ff ffdd 	bl	8023248 <xflow>
 802328e:	ec41 0b10 	vmov	d0, r0, r1
 8023292:	bd08      	pop	{r3, pc}

08023294 <finite>:
 8023294:	b082      	sub	sp, #8
 8023296:	ed8d 0b00 	vstr	d0, [sp]
 802329a:	9801      	ldr	r0, [sp, #4]
 802329c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80232a0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80232a4:	0fc0      	lsrs	r0, r0, #31
 80232a6:	b002      	add	sp, #8
 80232a8:	4770      	bx	lr
	...

080232ac <_init>:
 80232ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232ae:	bf00      	nop
 80232b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232b2:	bc08      	pop	{r3}
 80232b4:	469e      	mov	lr, r3
 80232b6:	4770      	bx	lr

080232b8 <_fini>:
 80232b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80232ba:	bf00      	nop
 80232bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80232be:	bc08      	pop	{r3}
 80232c0:	469e      	mov	lr, r3
 80232c2:	4770      	bx	lr
