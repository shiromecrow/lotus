
half_mouse2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014adc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a8  08014cc0  08014cc0  00024cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015268  08015268  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08015268  08015268  00025268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015270  08015270  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015270  08015270  00025270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015274  08015274  00025274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08015278  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c410  200001dc  08015454  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c5ec  08015454  0003c5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022c7f  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000510a  00000000  00000000  00052e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c10  00000000  00000000  00057f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001988  00000000  00000000  00059ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000271b9  00000000  00000000  0005b530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000292f5  00000000  00000000  000826e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9e74  00000000  00000000  000ab9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195852  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085ec  00000000  00000000  001958a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08014ca4 	.word	0x08014ca4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08014ca4 	.word	0x08014ca4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b974 	b.w	8000f98 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	468e      	mov	lr, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14d      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4694      	mov	ip, r2
 8000cda:	d969      	bls.n	8000db0 <__udivmoddi4+0xe8>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b152      	cbz	r2, 8000cf8 <__udivmoddi4+0x30>
 8000ce2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ce6:	f1c2 0120 	rsb	r1, r2, #32
 8000cea:	fa20 f101 	lsr.w	r1, r0, r1
 8000cee:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cf6:	4094      	lsls	r4, r2
 8000cf8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cfc:	0c21      	lsrs	r1, r4, #16
 8000cfe:	fbbe f6f8 	udiv	r6, lr, r8
 8000d02:	fa1f f78c 	uxth.w	r7, ip
 8000d06:	fb08 e316 	mls	r3, r8, r6, lr
 8000d0a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d0e:	fb06 f107 	mul.w	r1, r6, r7
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d1e:	f080 811f 	bcs.w	8000f60 <__udivmoddi4+0x298>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 811c 	bls.w	8000f60 <__udivmoddi4+0x298>
 8000d28:	3e02      	subs	r6, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d34:	fb08 3310 	mls	r3, r8, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 f707 	mul.w	r7, r0, r7
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x92>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4c:	f080 810a 	bcs.w	8000f64 <__udivmoddi4+0x29c>
 8000d50:	42a7      	cmp	r7, r4
 8000d52:	f240 8107 	bls.w	8000f64 <__udivmoddi4+0x29c>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d5e:	1be4      	subs	r4, r4, r7
 8000d60:	2600      	movs	r6, #0
 8000d62:	b11d      	cbz	r5, 8000d6c <__udivmoddi4+0xa4>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c5 4300 	strd	r4, r3, [r5]
 8000d6c:	4631      	mov	r1, r6
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xc2>
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	f000 80ef 	beq.w	8000f5a <__udivmoddi4+0x292>
 8000d7c:	2600      	movs	r6, #0
 8000d7e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d82:	4630      	mov	r0, r6
 8000d84:	4631      	mov	r1, r6
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f683 	clz	r6, r3
 8000d8e:	2e00      	cmp	r6, #0
 8000d90:	d14a      	bne.n	8000e28 <__udivmoddi4+0x160>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd4>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80f9 	bhi.w	8000f8e <__udivmoddi4+0x2c6>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	469e      	mov	lr, r3
 8000da6:	2d00      	cmp	r5, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa4>
 8000daa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xec>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 8092 	bne.w	8000ee2 <__udivmoddi4+0x21a>
 8000dbe:	eba1 010c 	sub.w	r1, r1, ip
 8000dc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc6:	fa1f fe8c 	uxth.w	lr, ip
 8000dca:	2601      	movs	r6, #1
 8000dcc:	0c20      	lsrs	r0, r4, #16
 8000dce:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dd2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dd6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dda:	fb0e f003 	mul.w	r0, lr, r3
 8000dde:	4288      	cmp	r0, r1
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x12c>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x12a>
 8000dec:	4288      	cmp	r0, r1
 8000dee:	f200 80cb 	bhi.w	8000f88 <__udivmoddi4+0x2c0>
 8000df2:	4643      	mov	r3, r8
 8000df4:	1a09      	subs	r1, r1, r0
 8000df6:	b2a4      	uxth	r4, r4
 8000df8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dfc:	fb07 1110 	mls	r1, r7, r0, r1
 8000e00:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e04:	fb0e fe00 	mul.w	lr, lr, r0
 8000e08:	45a6      	cmp	lr, r4
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x156>
 8000e0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e14:	d202      	bcs.n	8000e1c <__udivmoddi4+0x154>
 8000e16:	45a6      	cmp	lr, r4
 8000e18:	f200 80bb 	bhi.w	8000f92 <__udivmoddi4+0x2ca>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	eba4 040e 	sub.w	r4, r4, lr
 8000e22:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e26:	e79c      	b.n	8000d62 <__udivmoddi4+0x9a>
 8000e28:	f1c6 0720 	rsb	r7, r6, #32
 8000e2c:	40b3      	lsls	r3, r6
 8000e2e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e32:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e36:	fa20 f407 	lsr.w	r4, r0, r7
 8000e3a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3e:	431c      	orrs	r4, r3
 8000e40:	40f9      	lsrs	r1, r7
 8000e42:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e46:	fa00 f306 	lsl.w	r3, r0, r6
 8000e4a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e4e:	0c20      	lsrs	r0, r4, #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fb09 1118 	mls	r1, r9, r8, r1
 8000e58:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e5c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e60:	4288      	cmp	r0, r1
 8000e62:	fa02 f206 	lsl.w	r2, r2, r6
 8000e66:	d90b      	bls.n	8000e80 <__udivmoddi4+0x1b8>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e70:	f080 8088 	bcs.w	8000f84 <__udivmoddi4+0x2bc>
 8000e74:	4288      	cmp	r0, r1
 8000e76:	f240 8085 	bls.w	8000f84 <__udivmoddi4+0x2bc>
 8000e7a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e88:	fb09 1110 	mls	r1, r9, r0, r1
 8000e8c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e90:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e94:	458e      	cmp	lr, r1
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x1e2>
 8000e98:	eb1c 0101 	adds.w	r1, ip, r1
 8000e9c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea0:	d26c      	bcs.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea2:	458e      	cmp	lr, r1
 8000ea4:	d96a      	bls.n	8000f7c <__udivmoddi4+0x2b4>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4461      	add	r1, ip
 8000eaa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eae:	fba0 9402 	umull	r9, r4, r0, r2
 8000eb2:	eba1 010e 	sub.w	r1, r1, lr
 8000eb6:	42a1      	cmp	r1, r4
 8000eb8:	46c8      	mov	r8, r9
 8000eba:	46a6      	mov	lr, r4
 8000ebc:	d356      	bcc.n	8000f6c <__udivmoddi4+0x2a4>
 8000ebe:	d053      	beq.n	8000f68 <__udivmoddi4+0x2a0>
 8000ec0:	b15d      	cbz	r5, 8000eda <__udivmoddi4+0x212>
 8000ec2:	ebb3 0208 	subs.w	r2, r3, r8
 8000ec6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eca:	fa01 f707 	lsl.w	r7, r1, r7
 8000ece:	fa22 f306 	lsr.w	r3, r2, r6
 8000ed2:	40f1      	lsrs	r1, r6
 8000ed4:	431f      	orrs	r7, r3
 8000ed6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eda:	2600      	movs	r6, #0
 8000edc:	4631      	mov	r1, r6
 8000ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee2:	f1c2 0320 	rsb	r3, r2, #32
 8000ee6:	40d8      	lsrs	r0, r3
 8000ee8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eec:	fa21 f303 	lsr.w	r3, r1, r3
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	4301      	orrs	r1, r0
 8000ef4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ef8:	fa1f fe8c 	uxth.w	lr, ip
 8000efc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f00:	fb07 3610 	mls	r6, r7, r0, r3
 8000f04:	0c0b      	lsrs	r3, r1, #16
 8000f06:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f0a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f0e:	429e      	cmp	r6, r3
 8000f10:	fa04 f402 	lsl.w	r4, r4, r2
 8000f14:	d908      	bls.n	8000f28 <__udivmoddi4+0x260>
 8000f16:	eb1c 0303 	adds.w	r3, ip, r3
 8000f1a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f1e:	d22f      	bcs.n	8000f80 <__udivmoddi4+0x2b8>
 8000f20:	429e      	cmp	r6, r3
 8000f22:	d92d      	bls.n	8000f80 <__udivmoddi4+0x2b8>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4463      	add	r3, ip
 8000f28:	1b9b      	subs	r3, r3, r6
 8000f2a:	b289      	uxth	r1, r1
 8000f2c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f30:	fb07 3316 	mls	r3, r7, r6, r3
 8000f34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f38:	fb06 f30e 	mul.w	r3, r6, lr
 8000f3c:	428b      	cmp	r3, r1
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x28a>
 8000f40:	eb1c 0101 	adds.w	r1, ip, r1
 8000f44:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f48:	d216      	bcs.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d914      	bls.n	8000f78 <__udivmoddi4+0x2b0>
 8000f4e:	3e02      	subs	r6, #2
 8000f50:	4461      	add	r1, ip
 8000f52:	1ac9      	subs	r1, r1, r3
 8000f54:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f58:	e738      	b.n	8000dcc <__udivmoddi4+0x104>
 8000f5a:	462e      	mov	r6, r5
 8000f5c:	4628      	mov	r0, r5
 8000f5e:	e705      	b.n	8000d6c <__udivmoddi4+0xa4>
 8000f60:	4606      	mov	r6, r0
 8000f62:	e6e3      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f64:	4618      	mov	r0, r3
 8000f66:	e6f8      	b.n	8000d5a <__udivmoddi4+0x92>
 8000f68:	454b      	cmp	r3, r9
 8000f6a:	d2a9      	bcs.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f6c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f70:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f74:	3801      	subs	r0, #1
 8000f76:	e7a3      	b.n	8000ec0 <__udivmoddi4+0x1f8>
 8000f78:	4646      	mov	r6, r8
 8000f7a:	e7ea      	b.n	8000f52 <__udivmoddi4+0x28a>
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	e794      	b.n	8000eaa <__udivmoddi4+0x1e2>
 8000f80:	4640      	mov	r0, r8
 8000f82:	e7d1      	b.n	8000f28 <__udivmoddi4+0x260>
 8000f84:	46d0      	mov	r8, sl
 8000f86:	e77b      	b.n	8000e80 <__udivmoddi4+0x1b8>
 8000f88:	3b02      	subs	r3, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	e732      	b.n	8000df4 <__udivmoddi4+0x12c>
 8000f8e:	4630      	mov	r0, r6
 8000f90:	e709      	b.n	8000da6 <__udivmoddi4+0xde>
 8000f92:	4464      	add	r4, ip
 8000f94:	3802      	subs	r0, #2
 8000f96:	e742      	b.n	8000e1e <__udivmoddi4+0x156>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <reset_distance>:
float fusion_speedL,fusion_speedR;
float straight_alpha;
//float E_speedR0,E_speedL0;
//float E_accelerationR,E_accelerationL;

void reset_distance(void) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

	E_distanceL = 0;
 8000fa0:	4b13      	ldr	r3, [pc, #76]	; (8000ff0 <reset_distance+0x54>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
	E_distanceR = 0;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <reset_distance+0x58>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
	E_lpf_distanceL = 0;
 8000fb0:	4b11      	ldr	r3, [pc, #68]	; (8000ff8 <reset_distance+0x5c>)
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
	E_lpf_distanceR = 0;
 8000fb8:	4b10      	ldr	r3, [pc, #64]	; (8000ffc <reset_distance+0x60>)
 8000fba:	f04f 0200 	mov.w	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
	G_hpf_distanceL = 0;
 8000fc0:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <reset_distance+0x64>)
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
	G_hpf_distanceR = 0;
 8000fc8:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <reset_distance+0x68>)
 8000fca:	f04f 0200 	mov.w	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
	fusion_distanceL=0;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <reset_distance+0x6c>)
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
	fusion_distanceR=0;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <reset_distance+0x70>)
 8000fda:	f04f 0200 	mov.w	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <reset_distance+0x74>)
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <reset_distance+0x78>)
 8000fe4:	601a      	str	r2, [r3, #0]

}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	20000200 	.word	0x20000200
 8000ff4:	20000204 	.word	0x20000204
 8000ff8:	20000210 	.word	0x20000210
 8000ffc:	20000214 	.word	0x20000214
 8001000:	20000220 	.word	0x20000220
 8001004:	20000224 	.word	0x20000224
 8001008:	20000230 	.word	0x20000230
 800100c:	20000234 	.word	0x20000234
 8001010:	20000240 	.word	0x20000240
 8001014:	3f266666 	.word	0x3f266666

08001018 <reset_speed>:

void reset_speed(void) {
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

	G_hpf_speedL=0;
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <reset_speed+0x34>)
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
	G_hpf_speedR=0;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <reset_speed+0x38>)
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
	fusion_speedL=0;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <reset_speed+0x3c>)
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
	fusion_speedR=0;
 8001034:	4b08      	ldr	r3, [pc, #32]	; (8001058 <reset_speed+0x40>)
 8001036:	f04f 0200 	mov.w	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
	straight_alpha=0.65;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <reset_speed+0x44>)
 800103e:	4a08      	ldr	r2, [pc, #32]	; (8001060 <reset_speed+0x48>)
 8001040:	601a      	str	r2, [r3, #0]

}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	20000228 	.word	0x20000228
 8001050:	2000022c 	.word	0x2000022c
 8001054:	20000238 	.word	0x20000238
 8001058:	2000023c 	.word	0x2000023c
 800105c:	20000240 	.word	0x20000240
 8001060:	3f266666 	.word	0x3f266666
 8001064:	00000000 	.word	0x00000000

08001068 <interupt_calEncoder>:

void interupt_calEncoder(void) {
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
	float angle_R,angle_L;
	angle_R=encoder_R-encoder_R0;
 800106e:	4bd0      	ldr	r3, [pc, #832]	; (80013b0 <interupt_calEncoder+0x348>)
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	4bcf      	ldr	r3, [pc, #828]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001076:	edd3 7a00 	vldr	s15, [r3]
 800107a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800107e:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R>180){angle_R=angle_R-360;}
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ed9f 7acc 	vldr	s14, [pc, #816]	; 80013b8 <interupt_calEncoder+0x350>
 800108a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001092:	dd07      	ble.n	80010a4 <interupt_calEncoder+0x3c>
 8001094:	edd7 7a01 	vldr	s15, [r7, #4]
 8001098:	ed9f 7ac8 	vldr	s14, [pc, #800]	; 80013bc <interupt_calEncoder+0x354>
 800109c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a0:	edc7 7a01 	vstr	s15, [r7, #4]
	if(angle_R<-180){angle_R=angle_R+360;}
 80010a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80010a8:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 80013c0 <interupt_calEncoder+0x358>
 80010ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b4:	d507      	bpl.n	80010c6 <interupt_calEncoder+0x5e>
 80010b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010ba:	ed9f 7ac0 	vldr	s14, [pc, #768]	; 80013bc <interupt_calEncoder+0x354>
 80010be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c2:	edc7 7a01 	vstr	s15, [r7, #4]
	angle_L=-(encoder_L-encoder_L0);
 80010c6:	4bbf      	ldr	r3, [pc, #764]	; (80013c4 <interupt_calEncoder+0x35c>)
 80010c8:	ed93 7a00 	vldr	s14, [r3]
 80010cc:	4bbe      	ldr	r3, [pc, #760]	; (80013c8 <interupt_calEncoder+0x360>)
 80010ce:	edd3 7a00 	vldr	s15, [r3]
 80010d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010d6:	eef1 7a67 	vneg.f32	s15, s15
 80010da:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L>180){angle_L=angle_L-360;}
 80010de:	edd7 7a00 	vldr	s15, [r7]
 80010e2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80013b8 <interupt_calEncoder+0x350>
 80010e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ee:	dd07      	ble.n	8001100 <interupt_calEncoder+0x98>
 80010f0:	edd7 7a00 	vldr	s15, [r7]
 80010f4:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80013bc <interupt_calEncoder+0x354>
 80010f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010fc:	edc7 7a00 	vstr	s15, [r7]
	if(angle_L<-180){angle_L=angle_L+360;}
 8001100:	edd7 7a00 	vldr	s15, [r7]
 8001104:	ed9f 7aae 	vldr	s14, [pc, #696]	; 80013c0 <interupt_calEncoder+0x358>
 8001108:	eef4 7ac7 	vcmpe.f32	s15, s14
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001110:	d507      	bpl.n	8001122 <interupt_calEncoder+0xba>
 8001112:	edd7 7a00 	vldr	s15, [r7]
 8001116:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 80013bc <interupt_calEncoder+0x354>
 800111a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800111e:	edc7 7a00 	vstr	s15, [r7]

	//E_speedR0 = E_speedR;
	//E_speedL0 = E_speedL;
	//one_countL = pl_count_encoderL();
	//one_countR = pl_count_encoderR();
	E_speedL = (angle_L) * pi / 180 * TIRE_DIAMETER_L /2 * 1000  / INTERRUPT_TIME;
 8001122:	6838      	ldr	r0, [r7, #0]
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	a391      	add	r3, pc, #580	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa8b 	bl	8000648 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4ba3      	ldr	r3, [pc, #652]	; (80013cc <interupt_calEncoder+0x364>)
 8001140:	f7ff fbac 	bl	800089c <__aeabi_ddiv>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	4610      	mov	r0, r2
 800114a:	4619      	mov	r1, r3
 800114c:	a38a      	add	r3, pc, #552	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	f7ff fa79 	bl	8000648 <__aeabi_dmul>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	a388      	add	r3, pc, #544	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa70 	bl	8000648 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4610      	mov	r0, r2
 800116e:	4619      	mov	r1, r3
 8001170:	a385      	add	r3, pc, #532	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fa67 	bl	8000648 <__aeabi_dmul>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	a383      	add	r3, pc, #524	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fb88 	bl	800089c <__aeabi_ddiv>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b8d      	ldr	r3, [pc, #564]	; (80013d0 <interupt_calEncoder+0x368>)
 800119a:	f7ff fa55 	bl	8000648 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	a37c      	add	r3, pc, #496	; (adr r3, 8001398 <interupt_calEncoder+0x330>)
 80011a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ac:	f7ff fb76 	bl	800089c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011c0:	f7ff fb6c 	bl	800089c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b80      	ldr	r3, [pc, #512]	; (80013d4 <interupt_calEncoder+0x36c>)
 80011d2:	f7ff fa39 	bl	8000648 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	a370      	add	r3, pc, #448	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff fb5a 	bl	800089c <__aeabi_ddiv>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fd02 	bl	8000bf8 <__aeabi_d2f>
 80011f4:	4603      	mov	r3, r0
 80011f6:	4a78      	ldr	r2, [pc, #480]	; (80013d8 <interupt_calEncoder+0x370>)
 80011f8:	6013      	str	r3, [r2, #0]
	E_speedR = (angle_R) * pi / 180 * TIRE_DIAMETER_R /2 * 1000 / INTERRUPT_TIME;
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f7ff f9cc 	bl	8000598 <__aeabi_f2d>
 8001200:	a35b      	add	r3, pc, #364	; (adr r3, 8001370 <interupt_calEncoder+0x308>)
 8001202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001206:	f7ff fa1f 	bl	8000648 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f04f 0200 	mov.w	r2, #0
 8001216:	4b6d      	ldr	r3, [pc, #436]	; (80013cc <interupt_calEncoder+0x364>)
 8001218:	f7ff fb40 	bl	800089c <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	a354      	add	r3, pc, #336	; (adr r3, 8001378 <interupt_calEncoder+0x310>)
 8001226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122a:	f7ff fa0d 	bl	8000648 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	a352      	add	r3, pc, #328	; (adr r3, 8001380 <interupt_calEncoder+0x318>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fa04 	bl	8000648 <__aeabi_dmul>
 8001240:	4602      	mov	r2, r0
 8001242:	460b      	mov	r3, r1
 8001244:	4610      	mov	r0, r2
 8001246:	4619      	mov	r1, r3
 8001248:	a34f      	add	r3, pc, #316	; (adr r3, 8001388 <interupt_calEncoder+0x320>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f9fb 	bl	8000648 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	a34d      	add	r3, pc, #308	; (adr r3, 8001390 <interupt_calEncoder+0x328>)
 800125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001260:	f7ff fb1c 	bl	800089c <__aeabi_ddiv>
 8001264:	4602      	mov	r2, r0
 8001266:	460b      	mov	r3, r1
 8001268:	4610      	mov	r0, r2
 800126a:	4619      	mov	r1, r3
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	4b57      	ldr	r3, [pc, #348]	; (80013d0 <interupt_calEncoder+0x368>)
 8001272:	f7ff f9e9 	bl	8000648 <__aeabi_dmul>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4610      	mov	r0, r2
 800127c:	4619      	mov	r1, r3
 800127e:	a34a      	add	r3, pc, #296	; (adr r3, 80013a8 <interupt_calEncoder+0x340>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7ff fb0a 	bl	800089c <__aeabi_ddiv>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001298:	f7ff fb00 	bl	800089c <__aeabi_ddiv>
 800129c:	4602      	mov	r2, r0
 800129e:	460b      	mov	r3, r1
 80012a0:	4610      	mov	r0, r2
 80012a2:	4619      	mov	r1, r3
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4a      	ldr	r3, [pc, #296]	; (80013d4 <interupt_calEncoder+0x36c>)
 80012aa:	f7ff f9cd 	bl	8000648 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4610      	mov	r0, r2
 80012b4:	4619      	mov	r1, r3
 80012b6:	a33a      	add	r3, pc, #232	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012bc:	f7ff faee 	bl	800089c <__aeabi_ddiv>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fc96 	bl	8000bf8 <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a43      	ldr	r2, [pc, #268]	; (80013dc <interupt_calEncoder+0x374>)
 80012d0:	6013      	str	r3, [r2, #0]
	E_distanceL += E_speedL * INTERRUPT_TIME;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <interupt_calEncoder+0x378>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f95e 	bl	8000598 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b3d      	ldr	r3, [pc, #244]	; (80013d8 <interupt_calEncoder+0x370>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f957 	bl	8000598 <__aeabi_f2d>
 80012ea:	a32d      	add	r3, pc, #180	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f9aa 	bl	8000648 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ffee 	bl	80002dc <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff fc76 	bl	8000bf8 <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a34      	ldr	r2, [pc, #208]	; (80013e0 <interupt_calEncoder+0x378>)
 8001310:	6013      	str	r3, [r2, #0]
	E_distanceR += E_speedR * INTERRUPT_TIME;
 8001312:	4b34      	ldr	r3, [pc, #208]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f93e 	bl	8000598 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <interupt_calEncoder+0x374>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f937 	bl	8000598 <__aeabi_f2d>
 800132a:	a31d      	add	r3, pc, #116	; (adr r3, 80013a0 <interupt_calEncoder+0x338>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f98a 	bl	8000648 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ffce 	bl	80002dc <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fc56 	bl	8000bf8 <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <interupt_calEncoder+0x37c>)
 8001350:	6013      	str	r3, [r2, #0]

	encoder_L0=encoder_L;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <interupt_calEncoder+0x35c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a1c      	ldr	r2, [pc, #112]	; (80013c8 <interupt_calEncoder+0x360>)
 8001358:	6013      	str	r3, [r2, #0]
	encoder_R0=encoder_R;
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <interupt_calEncoder+0x348>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a15      	ldr	r2, [pc, #84]	; (80013b4 <interupt_calEncoder+0x34c>)
 8001360:	6013      	str	r3, [r2, #0]

}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	f3af 8000 	nop.w
 8001370:	54411744 	.word	0x54411744
 8001374:	400921fb 	.word	0x400921fb
 8001378:	4e70a65b 	.word	0x4e70a65b
 800137c:	3f882f36 	.word	0x3f882f36
 8001380:	a858793e 	.word	0xa858793e
 8001384:	3ff1cd35 	.word	0x3ff1cd35
 8001388:	00000000 	.word	0x00000000
 800138c:	4078c000 	.word	0x4078c000
 8001390:	147ae148 	.word	0x147ae148
 8001394:	4078fbae 	.word	0x4078fbae
 8001398:	0a3d70a4 	.word	0x0a3d70a4
 800139c:	4078efd7 	.word	0x4078efd7
 80013a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80013a4:	3f50624d 	.word	0x3f50624d
 80013a8:	5c28f5c3 	.word	0x5c28f5c3
 80013ac:	40792a8f 	.word	0x40792a8f
 80013b0:	200006b8 	.word	0x200006b8
 80013b4:	200001f8 	.word	0x200001f8
 80013b8:	43340000 	.word	0x43340000
 80013bc:	43b40000 	.word	0x43b40000
 80013c0:	c3340000 	.word	0xc3340000
 80013c4:	200006bc 	.word	0x200006bc
 80013c8:	200001fc 	.word	0x200001fc
 80013cc:	40668000 	.word	0x40668000
 80013d0:	40790000 	.word	0x40790000
 80013d4:	408f4000 	.word	0x408f4000
 80013d8:	20000208 	.word	0x20000208
 80013dc:	2000020c 	.word	0x2000020c
 80013e0:	20000200 	.word	0x20000200
 80013e4:	20000204 	.word	0x20000204

080013e8 <interupt_calFusion>:


void interupt_calFusion(void) {
 80013e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80013ec:	af00      	add	r7, sp, #0


	E_lpf_speedL = straight_alpha * E_lpf_speedL + (1 - straight_alpha) * E_speedL;
 80013ee:	4bca      	ldr	r3, [pc, #808]	; (8001718 <interupt_calFusion+0x330>)
 80013f0:	ed93 7a00 	vldr	s14, [r3]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <interupt_calFusion+0x334>)
 80013f6:	edd3 7a00 	vldr	s15, [r3]
 80013fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013fe:	4bc6      	ldr	r3, [pc, #792]	; (8001718 <interupt_calFusion+0x330>)
 8001400:	edd3 7a00 	vldr	s15, [r3]
 8001404:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800140c:	4bc4      	ldr	r3, [pc, #784]	; (8001720 <interupt_calFusion+0x338>)
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800141a:	4bc0      	ldr	r3, [pc, #768]	; (800171c <interupt_calFusion+0x334>)
 800141c:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_speedR = straight_alpha * E_lpf_speedR + (1 - straight_alpha) * E_speedR;
 8001420:	4bbd      	ldr	r3, [pc, #756]	; (8001718 <interupt_calFusion+0x330>)
 8001422:	ed93 7a00 	vldr	s14, [r3]
 8001426:	4bbf      	ldr	r3, [pc, #764]	; (8001724 <interupt_calFusion+0x33c>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001430:	4bb9      	ldr	r3, [pc, #740]	; (8001718 <interupt_calFusion+0x330>)
 8001432:	edd3 7a00 	vldr	s15, [r3]
 8001436:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800143a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800143e:	4bba      	ldr	r3, [pc, #744]	; (8001728 <interupt_calFusion+0x340>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800144c:	4bb5      	ldr	r3, [pc, #724]	; (8001724 <interupt_calFusion+0x33c>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
	E_lpf_distanceL += E_lpf_speedL * INTERRUPT_TIME;
 8001452:	4bb6      	ldr	r3, [pc, #728]	; (800172c <interupt_calFusion+0x344>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f89e 	bl	8000598 <__aeabi_f2d>
 800145c:	4604      	mov	r4, r0
 800145e:	460d      	mov	r5, r1
 8001460:	4bae      	ldr	r3, [pc, #696]	; (800171c <interupt_calFusion+0x334>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff f897 	bl	8000598 <__aeabi_f2d>
 800146a:	a3a9      	add	r3, pc, #676	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001470:	f7ff f8ea 	bl	8000648 <__aeabi_dmul>
 8001474:	4602      	mov	r2, r0
 8001476:	460b      	mov	r3, r1
 8001478:	4620      	mov	r0, r4
 800147a:	4629      	mov	r1, r5
 800147c:	f7fe ff2e 	bl	80002dc <__adddf3>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	f7ff fbb6 	bl	8000bf8 <__aeabi_d2f>
 800148c:	4603      	mov	r3, r0
 800148e:	4aa7      	ldr	r2, [pc, #668]	; (800172c <interupt_calFusion+0x344>)
 8001490:	6013      	str	r3, [r2, #0]
	E_lpf_distanceR += E_lpf_speedR * INTERRUPT_TIME;
 8001492:	4ba7      	ldr	r3, [pc, #668]	; (8001730 <interupt_calFusion+0x348>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff f87e 	bl	8000598 <__aeabi_f2d>
 800149c:	4604      	mov	r4, r0
 800149e:	460d      	mov	r5, r1
 80014a0:	4ba0      	ldr	r3, [pc, #640]	; (8001724 <interupt_calFusion+0x33c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff f877 	bl	8000598 <__aeabi_f2d>
 80014aa:	a399      	add	r3, pc, #612	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f8ca 	bl	8000648 <__aeabi_dmul>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe ff0e 	bl	80002dc <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb96 	bl	8000bf8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a98      	ldr	r2, [pc, #608]	; (8001730 <interupt_calFusion+0x348>)
 80014d0:	6013      	str	r3, [r2, #0]


	G_hpf_speedL = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 80014d2:	4b91      	ldr	r3, [pc, #580]	; (8001718 <interupt_calFusion+0x330>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff f85e 	bl	8000598 <__aeabi_f2d>
 80014dc:	4604      	mov	r4, r0
 80014de:	460d      	mov	r5, r1
 80014e0:	4b94      	ldr	r3, [pc, #592]	; (8001734 <interupt_calFusion+0x34c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f857 	bl	8000598 <__aeabi_f2d>
 80014ea:	4680      	mov	r8, r0
 80014ec:	4689      	mov	r9, r1
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <interupt_calFusion+0x350>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f850 	bl	8000598 <__aeabi_f2d>
 80014f8:	a385      	add	r3, pc, #532	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	f7ff f8a3 	bl	8000648 <__aeabi_dmul>
 8001502:	4602      	mov	r2, r0
 8001504:	460b      	mov	r3, r1
 8001506:	4640      	mov	r0, r8
 8001508:	4649      	mov	r1, r9
 800150a:	f7fe fee7 	bl	80002dc <__adddf3>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7ff f897 	bl	8000648 <__aeabi_dmul>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f7ff fb69 	bl	8000bf8 <__aeabi_d2f>
 8001526:	4603      	mov	r3, r0
 8001528:	4a82      	ldr	r2, [pc, #520]	; (8001734 <interupt_calFusion+0x34c>)
 800152a:	6013      	str	r3, [r2, #0]
	G_hpf_speedR = straight_alpha * (G_hpf_speedL + INTERRUPT_TIME * gf_accel);
 800152c:	4b7a      	ldr	r3, [pc, #488]	; (8001718 <interupt_calFusion+0x330>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f831 	bl	8000598 <__aeabi_f2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	4b7e      	ldr	r3, [pc, #504]	; (8001734 <interupt_calFusion+0x34c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff f82a 	bl	8000598 <__aeabi_f2d>
 8001544:	4680      	mov	r8, r0
 8001546:	4689      	mov	r9, r1
 8001548:	4b7b      	ldr	r3, [pc, #492]	; (8001738 <interupt_calFusion+0x350>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	a36f      	add	r3, pc, #444	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f876 	bl	8000648 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4640      	mov	r0, r8
 8001562:	4649      	mov	r1, r9
 8001564:	f7fe feba 	bl	80002dc <__adddf3>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f7ff f86a 	bl	8000648 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f7ff fb3c 	bl	8000bf8 <__aeabi_d2f>
 8001580:	4603      	mov	r3, r0
 8001582:	4a6e      	ldr	r2, [pc, #440]	; (800173c <interupt_calFusion+0x354>)
 8001584:	6013      	str	r3, [r2, #0]
	G_hpf_distanceL += G_hpf_speedL * INTERRUPT_TIME;
 8001586:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <interupt_calFusion+0x358>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff f804 	bl	8000598 <__aeabi_f2d>
 8001590:	4604      	mov	r4, r0
 8001592:	460d      	mov	r5, r1
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <interupt_calFusion+0x34c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fffd 	bl	8000598 <__aeabi_f2d>
 800159e:	a35c      	add	r3, pc, #368	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a4:	f7ff f850 	bl	8000648 <__aeabi_dmul>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4620      	mov	r0, r4
 80015ae:	4629      	mov	r1, r5
 80015b0:	f7fe fe94 	bl	80002dc <__adddf3>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff fb1c 	bl	8000bf8 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <interupt_calFusion+0x358>)
 80015c4:	6013      	str	r3, [r2, #0]
	G_hpf_distanceR += G_hpf_speedR * INTERRUPT_TIME;
 80015c6:	4b5f      	ldr	r3, [pc, #380]	; (8001744 <interupt_calFusion+0x35c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7fe ffe4 	bl	8000598 <__aeabi_f2d>
 80015d0:	4604      	mov	r4, r0
 80015d2:	460d      	mov	r5, r1
 80015d4:	4b59      	ldr	r3, [pc, #356]	; (800173c <interupt_calFusion+0x354>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ffdd 	bl	8000598 <__aeabi_f2d>
 80015de:	a34c      	add	r3, pc, #304	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80015e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e4:	f7ff f830 	bl	8000648 <__aeabi_dmul>
 80015e8:	4602      	mov	r2, r0
 80015ea:	460b      	mov	r3, r1
 80015ec:	4620      	mov	r0, r4
 80015ee:	4629      	mov	r1, r5
 80015f0:	f7fe fe74 	bl	80002dc <__adddf3>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	4610      	mov	r0, r2
 80015fa:	4619      	mov	r1, r3
 80015fc:	f7ff fafc 	bl	8000bf8 <__aeabi_d2f>
 8001600:	4603      	mov	r3, r0
 8001602:	4a50      	ldr	r2, [pc, #320]	; (8001744 <interupt_calFusion+0x35c>)
 8001604:	6013      	str	r3, [r2, #0]


	fusion_speedL = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedL;
 8001606:	4b44      	ldr	r3, [pc, #272]	; (8001718 <interupt_calFusion+0x330>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4604      	mov	r4, r0
 8001612:	460d      	mov	r5, r1
 8001614:	4b4c      	ldr	r3, [pc, #304]	; (8001748 <interupt_calFusion+0x360>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe ffbd 	bl	8000598 <__aeabi_f2d>
 800161e:	4680      	mov	r8, r0
 8001620:	4689      	mov	r9, r1
 8001622:	4b45      	ldr	r3, [pc, #276]	; (8001738 <interupt_calFusion+0x350>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb6 	bl	8000598 <__aeabi_f2d>
 800162c:	a338      	add	r3, pc, #224	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff f809 	bl	8000648 <__aeabi_dmul>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	4640      	mov	r0, r8
 800163c:	4649      	mov	r1, r9
 800163e:	f7fe fe4d 	bl	80002dc <__adddf3>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	4620      	mov	r0, r4
 8001648:	4629      	mov	r1, r5
 800164a:	f7fe fffd 	bl	8000648 <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4614      	mov	r4, r2
 8001654:	461d      	mov	r5, r3
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <interupt_calFusion+0x330>)
 8001658:	edd3 7a00 	vldr	s15, [r3]
 800165c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001660:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <interupt_calFusion+0x338>)
 8001666:	edd3 7a00 	vldr	s15, [r3]
 800166a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800166e:	ee17 0a90 	vmov	r0, s15
 8001672:	f7fe ff91 	bl	8000598 <__aeabi_f2d>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4620      	mov	r0, r4
 800167c:	4629      	mov	r1, r5
 800167e:	f7fe fe2d 	bl	80002dc <__adddf3>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f7ff fab5 	bl	8000bf8 <__aeabi_d2f>
 800168e:	4603      	mov	r3, r0
 8001690:	4a2d      	ldr	r2, [pc, #180]	; (8001748 <interupt_calFusion+0x360>)
 8001692:	6013      	str	r3, [r2, #0]
	fusion_speedR = straight_alpha * (fusion_speedL + INTERRUPT_TIME * gf_accel) + (1 - straight_alpha) * E_speedR;
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <interupt_calFusion+0x330>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f7fe ff7d 	bl	8000598 <__aeabi_f2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	4b29      	ldr	r3, [pc, #164]	; (8001748 <interupt_calFusion+0x360>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7fe ff76 	bl	8000598 <__aeabi_f2d>
 80016ac:	4680      	mov	r8, r0
 80016ae:	4689      	mov	r9, r1
 80016b0:	4b21      	ldr	r3, [pc, #132]	; (8001738 <interupt_calFusion+0x350>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7fe ff6f 	bl	8000598 <__aeabi_f2d>
 80016ba:	a315      	add	r3, pc, #84	; (adr r3, 8001710 <interupt_calFusion+0x328>)
 80016bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c0:	f7fe ffc2 	bl	8000648 <__aeabi_dmul>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4640      	mov	r0, r8
 80016ca:	4649      	mov	r1, r9
 80016cc:	f7fe fe06 	bl	80002dc <__adddf3>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	4620      	mov	r0, r4
 80016d6:	4629      	mov	r1, r5
 80016d8:	f7fe ffb6 	bl	8000648 <__aeabi_dmul>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4614      	mov	r4, r2
 80016e2:	461d      	mov	r5, r3
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <interupt_calFusion+0x330>)
 80016e6:	edd3 7a00 	vldr	s15, [r3]
 80016ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <interupt_calFusion+0x340>)
 80016f4:	edd3 7a00 	vldr	s15, [r3]
 80016f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016fc:	ee17 0a90 	vmov	r0, s15
 8001700:	f7fe ff4a 	bl	8000598 <__aeabi_f2d>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4620      	mov	r0, r4
 800170a:	4629      	mov	r1, r5
 800170c:	e01e      	b.n	800174c <interupt_calFusion+0x364>
 800170e:	bf00      	nop
 8001710:	d2f1a9fc 	.word	0xd2f1a9fc
 8001714:	3f50624d 	.word	0x3f50624d
 8001718:	20000240 	.word	0x20000240
 800171c:	20000218 	.word	0x20000218
 8001720:	20000208 	.word	0x20000208
 8001724:	2000021c 	.word	0x2000021c
 8001728:	2000020c 	.word	0x2000020c
 800172c:	20000210 	.word	0x20000210
 8001730:	20000214 	.word	0x20000214
 8001734:	20000228 	.word	0x20000228
 8001738:	20000260 	.word	0x20000260
 800173c:	2000022c 	.word	0x2000022c
 8001740:	20000220 	.word	0x20000220
 8001744:	20000224 	.word	0x20000224
 8001748:	20000238 	.word	0x20000238
 800174c:	f7fe fdc6 	bl	80002dc <__adddf3>
 8001750:	4602      	mov	r2, r0
 8001752:	460b      	mov	r3, r1
 8001754:	4610      	mov	r0, r2
 8001756:	4619      	mov	r1, r3
 8001758:	f7ff fa4e 	bl	8000bf8 <__aeabi_d2f>
 800175c:	4603      	mov	r3, r0
 800175e:	4a24      	ldr	r2, [pc, #144]	; (80017f0 <interupt_calFusion+0x408>)
 8001760:	6013      	str	r3, [r2, #0]
	fusion_distanceL += fusion_speedL * INTERRUPT_TIME;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <interupt_calFusion+0x40c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe ff16 	bl	8000598 <__aeabi_f2d>
 800176c:	4604      	mov	r4, r0
 800176e:	460d      	mov	r5, r1
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <interupt_calFusion+0x410>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe ff0f 	bl	8000598 <__aeabi_f2d>
 800177a:	a31b      	add	r3, pc, #108	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7fe ff62 	bl	8000648 <__aeabi_dmul>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe fda6 	bl	80002dc <__adddf3>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff fa2e 	bl	8000bf8 <__aeabi_d2f>
 800179c:	4603      	mov	r3, r0
 800179e:	4a15      	ldr	r2, [pc, #84]	; (80017f4 <interupt_calFusion+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	fusion_distanceR += fusion_speedR * INTERRUPT_TIME;
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <interupt_calFusion+0x414>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fef6 	bl	8000598 <__aeabi_f2d>
 80017ac:	4604      	mov	r4, r0
 80017ae:	460d      	mov	r5, r1
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <interupt_calFusion+0x408>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7fe feef 	bl	8000598 <__aeabi_f2d>
 80017ba:	a30b      	add	r3, pc, #44	; (adr r3, 80017e8 <interupt_calFusion+0x400>)
 80017bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c0:	f7fe ff42 	bl	8000648 <__aeabi_dmul>
 80017c4:	4602      	mov	r2, r0
 80017c6:	460b      	mov	r3, r1
 80017c8:	4620      	mov	r0, r4
 80017ca:	4629      	mov	r1, r5
 80017cc:	f7fe fd86 	bl	80002dc <__adddf3>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	f7ff fa0e 	bl	8000bf8 <__aeabi_d2f>
 80017dc:	4603      	mov	r3, r0
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <interupt_calFusion+0x414>)
 80017e0:	6013      	str	r3, [r2, #0]

}
 80017e2:	bf00      	nop
 80017e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80017e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80017ec:	3f50624d 	.word	0x3f50624d
 80017f0:	2000023c 	.word	0x2000023c
 80017f4:	20000230 	.word	0x20000230
 80017f8:	20000238 	.word	0x20000238
 80017fc:	20000234 	.word	0x20000234

08001800 <reset_gyro>:
float accelY_offset;

float angle_speed_ave[10];


void reset_gyro(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
	int s = 0;
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
	angle = 0;
 800180a:	4b3c      	ldr	r3, [pc, #240]	; (80018fc <reset_gyro+0xfc>)
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
	omegaZ_offset=0;
 8001812:	4b3b      	ldr	r3, [pc, #236]	; (8001900 <reset_gyro+0x100>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	601a      	str	r2, [r3, #0]

	for (s = 1; s <= 1000; s++) {
 800181a:	2301      	movs	r3, #1
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e026      	b.n	800186e <reset_gyro+0x6e>
		//ICM20602_DataUpdate();
		omegaZ_offset += gyro.omega_z;
 8001820:	4b38      	ldr	r3, [pc, #224]	; (8001904 <reset_gyro+0x104>)
 8001822:	ed93 7a02 	vldr	s14, [r3, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <reset_gyro+0x100>)
 8001828:	edd3 7a00 	vldr	s15, [r3]
 800182c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001830:	4b33      	ldr	r3, [pc, #204]	; (8001900 <reset_gyro+0x100>)
 8001832:	edc3 7a00 	vstr	s15, [r3]
		omegaX_offset += gyro.omega_x;
 8001836:	4b33      	ldr	r3, [pc, #204]	; (8001904 <reset_gyro+0x104>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <reset_gyro+0x108>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <reset_gyro+0x108>)
 8001848:	edc3 7a00 	vstr	s15, [r3]
		accelY_offset += gyro.accel_y;
 800184c:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <reset_gyro+0x104>)
 800184e:	ed93 7a04 	vldr	s14, [r3, #16]
 8001852:	4b2e      	ldr	r3, [pc, #184]	; (800190c <reset_gyro+0x10c>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	ee77 7a27 	vadd.f32	s15, s14, s15
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <reset_gyro+0x10c>)
 800185e:	edc3 7a00 	vstr	s15, [r3]
		wait_ms_NoReset(1);
 8001862:	2001      	movs	r0, #1
 8001864:	f005 fdbc 	bl	80073e0 <wait_ms_NoReset>
	for (s = 1; s <= 1000; s++) {
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3301      	adds	r3, #1
 800186c:	607b      	str	r3, [r7, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001874:	ddd4      	ble.n	8001820 <reset_gyro+0x20>
	}
	omegaZ_offset = omegaZ_offset / 1000;
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <reset_gyro+0x100>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	eddf 6a24 	vldr	s13, [pc, #144]	; 8001910 <reset_gyro+0x110>
 8001880:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <reset_gyro+0x100>)
 8001886:	edc3 7a00 	vstr	s15, [r3]
	omegaX_offset = omegaX_offset / 1000;
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <reset_gyro+0x108>)
 800188c:	ed93 7a00 	vldr	s14, [r3]
 8001890:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001910 <reset_gyro+0x110>
 8001894:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <reset_gyro+0x108>)
 800189a:	edc3 7a00 	vstr	s15, [r3]
	accelY_offset = accelY_offset / 1000;
 800189e:	4b1b      	ldr	r3, [pc, #108]	; (800190c <reset_gyro+0x10c>)
 80018a0:	ed93 7a00 	vldr	s14, [r3]
 80018a4:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001910 <reset_gyro+0x110>
 80018a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ac:	4b17      	ldr	r3, [pc, #92]	; (800190c <reset_gyro+0x10c>)
 80018ae:	edc3 7a00 	vstr	s15, [r3]
	//オフセットする文
	//printf("%f,%f\n",gyro.omega_z,omegaZ_offset);

	angle = 0;
 80018b2:	4b12      	ldr	r3, [pc, #72]	; (80018fc <reset_gyro+0xfc>)
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
	anglex = 0;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <reset_gyro+0x114>)
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
	gf_speed = 0;
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <reset_gyro+0x118>)
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
	gf_distance = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <reset_gyro+0x11c>)
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	e009      	b.n	80018ec <reset_gyro+0xec>
		angle_speed_ave[s] = 0;
 80018d8:	4a11      	ldr	r2, [pc, #68]	; (8001920 <reset_gyro+0x120>)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
	for (s = 0; s < 10; s++) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3301      	adds	r3, #1
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b09      	cmp	r3, #9
 80018f0:	ddf2      	ble.n	80018d8 <reset_gyro+0xd8>
	}
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000244 	.word	0x20000244
 8001900:	20000268 	.word	0x20000268
 8001904:	200006c4 	.word	0x200006c4
 8001908:	20000264 	.word	0x20000264
 800190c:	2000026c 	.word	0x2000026c
 8001910:	447a0000 	.word	0x447a0000
 8001914:	2000024c 	.word	0x2000024c
 8001918:	20000258 	.word	0x20000258
 800191c:	2000025c 	.word	0x2000025c
 8001920:	20000270 	.word	0x20000270
 8001924:	00000000 	.word	0x00000000

08001928 <interrupt_calGyro>:

void interrupt_calGyro(void) {
 8001928:	b5b0      	push	{r4, r5, r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
	int j = 9;
 800192e:	2309      	movs	r3, #9
 8001930:	607b      	str	r3, [r7, #4]
	//angle_speed0 = angle_speed;

	for (j = 9; j >= 1; j--) {
 8001932:	2309      	movs	r3, #9
 8001934:	607b      	str	r3, [r7, #4]
 8001936:	e00d      	b.n	8001954 <interrupt_calGyro+0x2c>
		angle_speed_ave[j] = angle_speed_ave[j - 1];
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	4aa6      	ldr	r2, [pc, #664]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	4413      	add	r3, r2
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	49a4      	ldr	r1, [pc, #656]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	440b      	add	r3, r1
 800194c:	601a      	str	r2, [r3, #0]
	for (j = 9; j >= 1; j--) {
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	3b01      	subs	r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dcee      	bgt.n	8001938 <interrupt_calGyro+0x10>
	}
	angle_speed_ave[0] = (gyro.omega_z - omegaZ_offset)*GYRO_COEFFICIENT;//*0.9525321206299 ;//* 90 / 96*3690/3600*(3600-17)/3600;
 800195a:	4ba0      	ldr	r3, [pc, #640]	; (8001bdc <interrupt_calGyro+0x2b4>)
 800195c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001960:	4b9f      	ldr	r3, [pc, #636]	; (8001be0 <interrupt_calGyro+0x2b8>)
 8001962:	edd3 7a00 	vldr	s15, [r3]
 8001966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196a:	ee17 0a90 	vmov	r0, s15
 800196e:	f7fe fe13 	bl	8000598 <__aeabi_f2d>
 8001972:	a387      	add	r3, pc, #540	; (adr r3, 8001b90 <interrupt_calGyro+0x268>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe fe66 	bl	8000648 <__aeabi_dmul>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4610      	mov	r0, r2
 8001982:	4619      	mov	r1, r3
 8001984:	a384      	add	r3, pc, #528	; (adr r3, 8001b98 <interrupt_calGyro+0x270>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fe5d 	bl	8000648 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	a382      	add	r3, pc, #520	; (adr r3, 8001ba0 <interrupt_calGyro+0x278>)
 8001998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199c:	f7fe ff7e 	bl	800089c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	4610      	mov	r0, r2
 80019a6:	4619      	mov	r1, r3
 80019a8:	f7ff f926 	bl	8000bf8 <__aeabi_d2f>
 80019ac:	4603      	mov	r3, r0
 80019ae:	4a8a      	ldr	r2, [pc, #552]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b0:	6013      	str	r3, [r2, #0]

	/*angle_speed = ((angle_speed_ave[0] + angle_speed_ave[1] + angle_speed_ave[2]
			+ angle_speed_ave[3] + angle_speed_ave[4] + angle_speed_ave[5]
			+ angle_speed_ave[6] + angle_speed_ave[7] + angle_speed_ave[8]
			+ angle_speed_ave[9]) / 10);*/
	angle_speed = angle_speed_ave[0];
 80019b2:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <interrupt_calGyro+0x2b0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a8b      	ldr	r2, [pc, #556]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019b8:	6013      	str	r3, [r2, #0]
	//angle_speed=(gyro.omega_z-omegaZ_offset)*90/94;//deg/sec
	angle_speedx=gyro.omega_x;
 80019ba:	4b88      	ldr	r3, [pc, #544]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a8a      	ldr	r2, [pc, #552]	; (8001be8 <interrupt_calGyro+0x2c0>)
 80019c0:	6013      	str	r3, [r2, #0]
	angle_speedx_set=(gyro.omega_x - omegaX_offset);
 80019c2:	4b86      	ldr	r3, [pc, #536]	; (8001bdc <interrupt_calGyro+0x2b4>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b88      	ldr	r3, [pc, #544]	; (8001bec <interrupt_calGyro+0x2c4>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d2:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <interrupt_calGyro+0x2c8>)
 80019d4:	edc3 7a00 	vstr	s15, [r3]
	angle += 0.001 * angle_speed; //deg
 80019d8:	4b86      	ldr	r3, [pc, #536]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4618      	mov	r0, r3
 80019de:	f7fe fddb 	bl	8000598 <__aeabi_f2d>
 80019e2:	4604      	mov	r4, r0
 80019e4:	460d      	mov	r5, r1
 80019e6:	4b7f      	ldr	r3, [pc, #508]	; (8001be4 <interrupt_calGyro+0x2bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fdd4 	bl	8000598 <__aeabi_f2d>
 80019f0:	a36d      	add	r3, pc, #436	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	f7fe fe27 	bl	8000648 <__aeabi_dmul>
 80019fa:	4602      	mov	r2, r0
 80019fc:	460b      	mov	r3, r1
 80019fe:	4620      	mov	r0, r4
 8001a00:	4629      	mov	r1, r5
 8001a02:	f7fe fc6b 	bl	80002dc <__adddf3>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	4610      	mov	r0, r2
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	f7ff f8f3 	bl	8000bf8 <__aeabi_d2f>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <interrupt_calGyro+0x2cc>)
 8001a16:	6013      	str	r3, [r2, #0]
	anglex += 0.001 * (gyro.omega_x - omegaX_offset); //deg
 8001a18:	4b77      	ldr	r3, [pc, #476]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fdbb 	bl	8000598 <__aeabi_f2d>
 8001a22:	4604      	mov	r4, r0
 8001a24:	460d      	mov	r5, r1
 8001a26:	4b6d      	ldr	r3, [pc, #436]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <interrupt_calGyro+0x2c4>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	ee17 0a90 	vmov	r0, s15
 8001a3a:	f7fe fdad 	bl	8000598 <__aeabi_f2d>
 8001a3e:	a35a      	add	r3, pc, #360	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe fe00 	bl	8000648 <__aeabi_dmul>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4620      	mov	r0, r4
 8001a4e:	4629      	mov	r1, r5
 8001a50:	f7fe fc44 	bl	80002dc <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f8cc 	bl	8000bf8 <__aeabi_d2f>
 8001a60:	4603      	mov	r3, r0
 8001a62:	4a65      	ldr	r2, [pc, #404]	; (8001bf8 <interrupt_calGyro+0x2d0>)
 8001a64:	6013      	str	r3, [r2, #0]
	//angle_acceleration = (angle_speed - angle_speed0) * 1000; //deg/sec^2
//+0.12*0.02*angle_speed*angle_speed
	gf_accel = (gyro.accel_y - accelY_offset)*ACCEL_COEFFICIENT*1000*GRAVITATION;
 8001a66:	4b5d      	ldr	r3, [pc, #372]	; (8001bdc <interrupt_calGyro+0x2b4>)
 8001a68:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a6c:	4b63      	ldr	r3, [pc, #396]	; (8001bfc <interrupt_calGyro+0x2d4>)
 8001a6e:	edd3 7a00 	vldr	s15, [r3]
 8001a72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a76:	ee17 0a90 	vmov	r0, s15
 8001a7a:	f7fe fd8d 	bl	8000598 <__aeabi_f2d>
 8001a7e:	a34c      	add	r3, pc, #304	; (adr r3, 8001bb0 <interrupt_calGyro+0x288>)
 8001a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a84:	f7fe fde0 	bl	8000648 <__aeabi_dmul>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4610      	mov	r0, r2
 8001a8e:	4619      	mov	r1, r3
 8001a90:	a349      	add	r3, pc, #292	; (adr r3, 8001bb8 <interrupt_calGyro+0x290>)
 8001a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a96:	f7fe fdd7 	bl	8000648 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	a347      	add	r3, pc, #284	; (adr r3, 8001bc0 <interrupt_calGyro+0x298>)
 8001aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa8:	f7fe fef8 	bl	800089c <__aeabi_ddiv>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	4b51      	ldr	r3, [pc, #324]	; (8001c00 <interrupt_calGyro+0x2d8>)
 8001aba:	f7fe fdc5 	bl	8000648 <__aeabi_dmul>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	4610      	mov	r0, r2
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	a340      	add	r3, pc, #256	; (adr r3, 8001bc8 <interrupt_calGyro+0x2a0>)
 8001ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001acc:	f7fe fee6 	bl	800089c <__aeabi_ddiv>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	4b49      	ldr	r3, [pc, #292]	; (8001c04 <interrupt_calGyro+0x2dc>)
 8001ade:	f7fe fdb3 	bl	8000648 <__aeabi_dmul>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a339      	add	r3, pc, #228	; (adr r3, 8001bd0 <interrupt_calGyro+0x2a8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fdaa 	bl	8000648 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	f7ff f87c 	bl	8000bf8 <__aeabi_d2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a41      	ldr	r2, [pc, #260]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b04:	6013      	str	r3, [r2, #0]
	gf_speed += gf_accel * INTERRUPT_TIME;
 8001b06:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd44 	bl	8000598 <__aeabi_f2d>
 8001b10:	4604      	mov	r4, r0
 8001b12:	460d      	mov	r5, r1
 8001b14:	4b3c      	ldr	r3, [pc, #240]	; (8001c08 <interrupt_calGyro+0x2e0>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3d 	bl	8000598 <__aeabi_f2d>
 8001b1e:	a322      	add	r3, pc, #136	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b24:	f7fe fd90 	bl	8000648 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	4629      	mov	r1, r5
 8001b30:	f7fe fbd4 	bl	80002dc <__adddf3>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f85c 	bl	8000bf8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a32      	ldr	r2, [pc, #200]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b44:	6013      	str	r3, [r2, #0]
	gf_distance += gf_speed * INTERRUPT_TIME;
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fd24 	bl	8000598 <__aeabi_f2d>
 8001b50:	4604      	mov	r4, r0
 8001b52:	460d      	mov	r5, r1
 8001b54:	4b2d      	ldr	r3, [pc, #180]	; (8001c0c <interrupt_calGyro+0x2e4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fd1d 	bl	8000598 <__aeabi_f2d>
 8001b5e:	a312      	add	r3, pc, #72	; (adr r3, 8001ba8 <interrupt_calGyro+0x280>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd70 	bl	8000648 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	4629      	mov	r1, r5
 8001b70:	f7fe fbb4 	bl	80002dc <__adddf3>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f83c 	bl	8000bf8 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4a23      	ldr	r2, [pc, #140]	; (8001c10 <interrupt_calGyro+0x2e8>)
 8001b84:	6013      	str	r3, [r2, #0]




}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	70a3d70a 	.word	0x70a3d70a
 8001b94:	3fef0a3d 	.word	0x3fef0a3d
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40acd400 	.word	0x40acd400
 8001ba0:	00000000 	.word	0x00000000
 8001ba4:	40ac2000 	.word	0x40ac2000
 8001ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8001bac:	3f50624d 	.word	0x3f50624d
 8001bb0:	0fcf80dc 	.word	0x0fcf80dc
 8001bb4:	3ff0a423 	.word	0x3ff0a423
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	4078c000 	.word	0x4078c000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	4077d000 	.word	0x4077d000
 8001bc8:	00000000 	.word	0x00000000
 8001bcc:	407a7000 	.word	0x407a7000
 8001bd0:	3a92a305 	.word	0x3a92a305
 8001bd4:	40239d01 	.word	0x40239d01
 8001bd8:	20000270 	.word	0x20000270
 8001bdc:	200006c4 	.word	0x200006c4
 8001be0:	20000268 	.word	0x20000268
 8001be4:	20000248 	.word	0x20000248
 8001be8:	20000250 	.word	0x20000250
 8001bec:	20000264 	.word	0x20000264
 8001bf0:	20000254 	.word	0x20000254
 8001bf4:	20000244 	.word	0x20000244
 8001bf8:	2000024c 	.word	0x2000024c
 8001bfc:	2000026c 	.word	0x2000026c
 8001c00:	40790000 	.word	0x40790000
 8001c04:	408f4000 	.word	0x408f4000
 8001c08:	20000260 	.word	0x20000260
 8001c0c:	20000258 	.word	0x20000258
 8001c10:	2000025c 	.word	0x2000025c
 8001c14:	00000000 	.word	0x00000000

08001c18 <battcheak>:
/*******************************************************************/
/*	バッテリーの確認				(battcheak)	*/
/*******************************************************************/
/*	バッテリーの残電圧のチェックし、小さい場合は機能の停止を行う．	．						*/
/*******************************************************************/
void battcheak(void){
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
int i;
	for(i = 0;i <= 20-1;i++){
 8001c1e:	2300      	movs	r3, #0
 8001c20:	607b      	str	r3, [r7, #4]
 8001c22:	e00f      	b.n	8001c44 <battcheak+0x2c>
		g_V_battery[i]=pl_getbatt();
 8001c24:	f005 f9ac 	bl	8006f80 <pl_getbatt>
 8001c28:	eef0 7a40 	vmov.f32	s15, s0
 8001c2c:	4a34      	ldr	r2, [pc, #208]	; (8001d00 <battcheak+0xe8>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	edc3 7a00 	vstr	s15, [r3]
		wait_ms(10);
 8001c38:	200a      	movs	r0, #10
 8001c3a:	f005 fb8d 	bl	8007358 <wait_ms>
	for(i = 0;i <= 20-1;i++){
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3301      	adds	r3, #1
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b13      	cmp	r3, #19
 8001c48:	ddec      	ble.n	8001c24 <battcheak+0xc>
	}

	g_V_battery_mean=0;
 8001c4a:	4b2e      	ldr	r3, [pc, #184]	; (8001d04 <battcheak+0xec>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	for(i = 0;i <= 20-1;i++){
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
 8001c56:	e010      	b.n	8001c7a <battcheak+0x62>
	g_V_battery_mean+=g_V_battery[i];
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <battcheak+0xe8>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	4413      	add	r3, r2
 8001c60:	ed93 7a00 	vldr	s14, [r3]
 8001c64:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <battcheak+0xec>)
 8001c66:	edd3 7a00 	vldr	s15, [r3]
 8001c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6e:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <battcheak+0xec>)
 8001c70:	edc3 7a00 	vstr	s15, [r3]
	for(i = 0;i <= 20-1;i++){
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	3301      	adds	r3, #1
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b13      	cmp	r3, #19
 8001c7e:	ddeb      	ble.n	8001c58 <battcheak+0x40>
	}
	g_V_battery_mean/=20;
 8001c80:	4b20      	ldr	r3, [pc, #128]	; (8001d04 <battcheak+0xec>)
 8001c82:	ed93 7a00 	vldr	s14, [r3]
 8001c86:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8001c8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8e:	4b1d      	ldr	r3, [pc, #116]	; (8001d04 <battcheak+0xec>)
 8001c90:	edc3 7a00 	vstr	s15, [r3]
	printf("BATT=%f\n",g_V_battery_mean);
 8001c94:	4b1b      	ldr	r3, [pc, #108]	; (8001d04 <battcheak+0xec>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7fe fc7d 	bl	8000598 <__aeabi_f2d>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4819      	ldr	r0, [pc, #100]	; (8001d08 <battcheak+0xf0>)
 8001ca4:	f010 fce6 	bl	8012674 <iprintf>
	//printf("%f",g_V_battery_mean);
	if(g_V_battery_mean <= BATTLIMIT){
 8001ca8:	4b16      	ldr	r3, [pc, #88]	; (8001d04 <battcheak+0xec>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fc73 	bl	8000598 <__aeabi_f2d>
 8001cb2:	a311      	add	r3, pc, #68	; (adr r3, 8001cf8 <battcheak+0xe0>)
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	f7fe ff42 	bl	8000b40 <__aeabi_dcmple>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d100      	bne.n	8001cc4 <battcheak+0xac>
		pl_r_blue_LED(OFF);
		pl_l_blue_LED(OFF);
		wait_ms(500);
		}
	}
}
 8001cc2:	e014      	b.n	8001cee <battcheak+0xd6>
		pl_r_blue_LED(ON);
 8001cc4:	2001      	movs	r0, #1
 8001cc6:	f004 fddb 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8001cca:	2001      	movs	r0, #1
 8001ccc:	f004 fdea 	bl	80068a4 <pl_l_blue_LED>
		wait_ms(500);
 8001cd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cd4:	f005 fb40 	bl	8007358 <wait_ms>
		pl_r_blue_LED(OFF);
 8001cd8:	2000      	movs	r0, #0
 8001cda:	f004 fdd1 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f004 fde0 	bl	80068a4 <pl_l_blue_LED>
		wait_ms(500);
 8001ce4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ce8:	f005 fb36 	bl	8007358 <wait_ms>
		pl_r_blue_LED(ON);
 8001cec:	e7ea      	b.n	8001cc4 <battcheak+0xac>
}
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	f3af 8000 	nop.w
 8001cf8:	9999999a 	.word	0x9999999a
 8001cfc:	400d9999 	.word	0x400d9999
 8001d00:	20000464 	.word	0x20000464
 8001d04:	200004b4 	.word	0x200004b4
 8001d08:	08014cc0 	.word	0x08014cc0

08001d0c <interupt_calSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー処理)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を処理する割り込み関数．						*/
/*******************************************************************/
void interupt_calSensor(void){
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	int j;

	pl_interupt_getSensor();
 8001d12:	f005 fad3 	bl	80072bc <pl_interupt_getSensor>

	for (j = 19; j >= 1; j--) {
 8001d16:	2313      	movs	r3, #19
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	e037      	b.n	8001d8c <interupt_calSensor+0x80>
		//g_V_battery[j] = g_V_battery[j - 1];
		g_sensor[0][j] = g_sensor[0][j - 1];
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d22:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d26:	4960      	ldr	r1, [pc, #384]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[1][j] = g_sensor[1][j - 1];
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3b01      	subs	r3, #1
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d34:	3314      	adds	r3, #20
 8001d36:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d3a:	495b      	ldr	r1, [pc, #364]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3314      	adds	r3, #20
 8001d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[2][j] = g_sensor[2][j - 1];
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3b01      	subs	r3, #1
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d4a:	3328      	adds	r3, #40	; 0x28
 8001d4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d50:	4955      	ldr	r1, [pc, #340]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3328      	adds	r3, #40	; 0x28
 8001d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[3][j] = g_sensor[3][j - 1];
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	4a52      	ldr	r2, [pc, #328]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d60:	333c      	adds	r3, #60	; 0x3c
 8001d62:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d66:	4950      	ldr	r1, [pc, #320]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	333c      	adds	r3, #60	; 0x3c
 8001d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor[4][j] = g_sensor[4][j - 1];
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d76:	3350      	adds	r3, #80	; 0x50
 8001d78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d7c:	494a      	ldr	r1, [pc, #296]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3350      	adds	r3, #80	; 0x50
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 19; j >= 1; j--) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	607b      	str	r3, [r7, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	dcc4      	bgt.n	8001d1c <interupt_calSensor+0x10>
	}
	//g_V_battery[0] = g_V_batt;
	g_sensor[0][0] = g_sensor_on[0] - g_sensor_off[0];
 8001d92:	4b46      	ldr	r3, [pc, #280]	; (8001eac <interupt_calSensor+0x1a0>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	4b45      	ldr	r3, [pc, #276]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	4a42      	ldr	r2, [pc, #264]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001da0:	6013      	str	r3, [r2, #0]
	g_sensor[1][0] = g_sensor_on[1] - g_sensor_off[1];
 8001da2:	4b42      	ldr	r3, [pc, #264]	; (8001eac <interupt_calSensor+0x1a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	461a      	mov	r2, r3
 8001da8:	4b41      	ldr	r3, [pc, #260]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001daa:	885b      	ldrh	r3, [r3, #2]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001db0:	6513      	str	r3, [r2, #80]	; 0x50
	g_sensor[2][0] = g_sensor_on[2] - g_sensor_off[2];
 8001db2:	4b3e      	ldr	r3, [pc, #248]	; (8001eac <interupt_calSensor+0x1a0>)
 8001db4:	889b      	ldrh	r3, [r3, #4]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4b3d      	ldr	r3, [pc, #244]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dba:	889b      	ldrh	r3, [r3, #4]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a3a      	ldr	r2, [pc, #232]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dc0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
	g_sensor[3][0] = g_sensor_on[3] - g_sensor_off[3];
 8001dc4:	4b39      	ldr	r3, [pc, #228]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dc6:	88db      	ldrh	r3, [r3, #6]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b39      	ldr	r3, [pc, #228]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dcc:	88db      	ldrh	r3, [r3, #6]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a35      	ldr	r2, [pc, #212]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001dd2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
	g_sensor[4][0] = g_sensor_on[4] - g_sensor_off[4];
 8001dd6:	4b35      	ldr	r3, [pc, #212]	; (8001eac <interupt_calSensor+0x1a0>)
 8001dd8:	891b      	ldrh	r3, [r3, #8]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b34      	ldr	r3, [pc, #208]	; (8001eb0 <interupt_calSensor+0x1a4>)
 8001dde:	891b      	ldrh	r3, [r3, #8]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	4a31      	ldr	r2, [pc, #196]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001de4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140

	for (j = 0; j <= 4; j++) {
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
 8001dec:	e053      	b.n	8001e96 <interupt_calSensor+0x18a>
		g_sensor_diff[j]=g_sensor[j][0]-g_sensor[j][11];
 8001dee:	492e      	ldr	r1, [pc, #184]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	009b      	lsls	r3, r3, #2
 8001df6:	4413      	add	r3, r2
 8001df8:	011b      	lsls	r3, r3, #4
 8001dfa:	440b      	add	r3, r1
 8001dfc:	6819      	ldr	r1, [r3, #0]
 8001dfe:	482a      	ldr	r0, [pc, #168]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	011b      	lsls	r3, r3, #4
 8001e0a:	4403      	add	r3, r0
 8001e0c:	332c      	adds	r3, #44	; 0x2c
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	1aca      	subs	r2, r1, r3
 8001e12:	4928      	ldr	r1, [pc, #160]	; (8001eb4 <interupt_calSensor+0x1a8>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_diff_wallcut[j]=g_sensor[j][0]-g_sensor[j][3];
 8001e1a:	4923      	ldr	r1, [pc, #140]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	440b      	add	r3, r1
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	481f      	ldr	r0, [pc, #124]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	4413      	add	r3, r2
 8001e34:	011b      	lsls	r3, r3, #4
 8001e36:	4403      	add	r3, r0
 8001e38:	330c      	adds	r3, #12
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	1aca      	subs	r2, r1, r3
 8001e3e:	491e      	ldr	r1, [pc, #120]	; (8001eb8 <interupt_calSensor+0x1ac>)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		g_sensor_mean[j] = (g_sensor[j][0] + g_sensor[j][1] + g_sensor[j][2]) / 3;
 8001e46:	4918      	ldr	r1, [pc, #96]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	011b      	lsls	r3, r3, #4
 8001e52:	440b      	add	r3, r1
 8001e54:	6819      	ldr	r1, [r3, #0]
 8001e56:	4814      	ldr	r0, [pc, #80]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	011b      	lsls	r3, r3, #4
 8001e62:	4403      	add	r3, r0
 8001e64:	3304      	adds	r3, #4
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4419      	add	r1, r3
 8001e6a:	480f      	ldr	r0, [pc, #60]	; (8001ea8 <interupt_calSensor+0x19c>)
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	011b      	lsls	r3, r3, #4
 8001e76:	4403      	add	r3, r0
 8001e78:	3308      	adds	r3, #8
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	440b      	add	r3, r1
 8001e7e:	4a0f      	ldr	r2, [pc, #60]	; (8001ebc <interupt_calSensor+0x1b0>)
 8001e80:	fb82 1203 	smull	r1, r2, r2, r3
 8001e84:	17db      	asrs	r3, r3, #31
 8001e86:	1ad2      	subs	r2, r2, r3
 8001e88:	490d      	ldr	r1, [pc, #52]	; (8001ec0 <interupt_calSensor+0x1b4>)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (j = 0; j <= 4; j++) {
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	dda8      	ble.n	8001dee <interupt_calSensor+0xe2>
//	}
//	g_V_battery_mean/=20;



}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	20000298 	.word	0x20000298
 8001eac:	200006ec 	.word	0x200006ec
 8001eb0:	200006f8 	.word	0x200006f8
 8001eb4:	20000428 	.word	0x20000428
 8001eb8:	2000043c 	.word	0x2000043c
 8001ebc:	55555556 	.word	0x55555556
 8001ec0:	20000450 	.word	0x20000450

08001ec4 <Control_mode_Init>:

uint8_t noGoalPillarMode;

float g_V_L,g_V_R;

void Control_mode_Init(void){
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0

	modeacc = 0;
 8001ec8:	4b08      	ldr	r3, [pc, #32]	; (8001eec <Control_mode_Init+0x28>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	701a      	strb	r2, [r3, #0]
	g_MotorEnd_flag=0;
 8001ece:	4b08      	ldr	r3, [pc, #32]	; (8001ef0 <Control_mode_Init+0x2c>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
	mollifier_timer=0;
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <Control_mode_Init+0x30>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
	noGoalPillarMode=0;
 8001edc:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <Control_mode_Init+0x34>)
 8001ede:	2200      	movs	r2, #0
 8001ee0:	701a      	strb	r2, [r3, #0]

}
 8001ee2:	bf00      	nop
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	20000508 	.word	0x20000508
 8001ef0:	200007e5 	.word	0x200007e5
 8001ef4:	200007e0 	.word	0x200007e0
 8001ef8:	20000509 	.word	0x20000509

08001efc <get_duty>:


void get_duty(float V_L, float V_R,int *duty_L,int *duty_R) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a03 	vstr	s0, [r7, #12]
 8001f06:	edc7 0a02 	vstr	s1, [r7, #8]
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
//トルクの方向決定
// BATT_MEANをいつか可変にしたい願望
	if (V_L >= 0) {
 8001f0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f12:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f1a:	db14      	blt.n	8001f46 <get_duty+0x4a>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f004 ff65 	bl	8006dec <pl_L_DriveMotor_mode>
		*duty_L = (int) (V_L / g_V_battery_mean * MAXMOTOR);
 8001f22:	4b39      	ldr	r3, [pc, #228]	; (8002008 <get_duty+0x10c>)
 8001f24:	ed93 7a00 	vldr	s14, [r3]
 8001f28:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f30:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800200c <get_duty+0x110>
 8001f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f3c:	ee17 2a90 	vmov	r2, s15
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	e015      	b.n	8001f72 <get_duty+0x76>
	}
	else{
		pl_L_DriveMotor_mode(MOTOR_BACK);
 8001f46:	2002      	movs	r0, #2
 8001f48:	f004 ff50 	bl	8006dec <pl_L_DriveMotor_mode>
	    *duty_L = (int) (-V_L / g_V_battery_mean * MAXMOTOR);
 8001f4c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f50:	eef1 6a67 	vneg.f32	s13, s15
 8001f54:	4b2c      	ldr	r3, [pc, #176]	; (8002008 <get_duty+0x10c>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f5e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800200c <get_duty+0x110>
 8001f62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 2a90 	vmov	r2, s15
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	601a      	str	r2, [r3, #0]
	}
	if (V_R >= 0) {
 8001f72:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f7e:	db14      	blt.n	8001faa <get_duty+0xae>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 8001f80:	2001      	movs	r0, #1
 8001f82:	f004 ff5b 	bl	8006e3c <pl_R_DriveMotor_mode>
		*duty_R = (int) (V_R / g_V_battery_mean * MAXMOTOR);
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <get_duty+0x10c>)
 8001f88:	ed93 7a00 	vldr	s14, [r3]
 8001f8c:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f94:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800200c <get_duty+0x110>
 8001f98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fa0:	ee17 2a90 	vmov	r2, s15
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	e015      	b.n	8001fd6 <get_duty+0xda>
	}
	else{
		pl_R_DriveMotor_mode(MOTOR_BACK);
 8001faa:	2002      	movs	r0, #2
 8001fac:	f004 ff46 	bl	8006e3c <pl_R_DriveMotor_mode>
	    *duty_R = (int) (-V_R / g_V_battery_mean * MAXMOTOR);
 8001fb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fb4:	eef1 6a67 	vneg.f32	s13, s15
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <get_duty+0x10c>)
 8001fba:	ed93 7a00 	vldr	s14, [r3]
 8001fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001fc2:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800200c <get_duty+0x110>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	ee17 2a90 	vmov	r2, s15
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	601a      	str	r2, [r3, #0]
	}

	//XX
	if (*duty_L >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f240 628c 	movw	r2, #1676	; 0x68c
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	dd03      	ble.n	8001fea <get_duty+0xee>
		*duty_L = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f240 628d 	movw	r2, #1677	; 0x68d
 8001fe8:	601a      	str	r2, [r3, #0]
//		pl_r_blue_LED(ON);
	}
	if (*duty_R >= (int)(MAXMOTOR*MAX_DUTY_RATIO)) {
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f240 628c 	movw	r2, #1676	; 0x68c
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	dd03      	ble.n	8001ffe <get_duty+0x102>
		*duty_R = (int)(MAXMOTOR*MAX_DUTY_RATIO);
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	f240 628d 	movw	r2, #1677	; 0x68d
 8001ffc:	601a      	str	r2, [r3, #0]
//		pl_l_blue_LED(ON);
	}

}
 8001ffe:	bf00      	nop
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	200004b4 	.word	0x200004b4
 800200c:	44d1e000 	.word	0x44d1e000

08002010 <interupt_DriveMotor>:



void interupt_DriveMotor(void){
 8002010:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002014:	b08c      	sub	sp, #48	; 0x30
 8002016:	af02      	add	r7, sp, #8
	int duty_L=0, duty_R=0;
 8002018:	2300      	movs	r3, #0
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	2300      	movs	r3, #0
 800201e:	617b      	str	r3, [r7, #20]
	float V_L=0, V_R=0;
 8002020:	f04f 0300 	mov.w	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
 8002026:	f04f 0300 	mov.w	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
	float PID_all_L,PID_all_R,PID_s,PID_t;
	float PID_w=0;
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
	float feedforward_straight=0,feedforward_turning=0;
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	60bb      	str	r3, [r7, #8]
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	607b      	str	r3, [r7, #4]

//	interrupt_WallCut();

	if (modeacc == 0) {
 800203e:	4bd2      	ldr	r3, [pc, #840]	; (8002388 <interupt_DriveMotor+0x378>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d108      	bne.n	8002058 <interupt_DriveMotor+0x48>
		g_acc_flag=4;
 8002046:	4bd1      	ldr	r3, [pc, #836]	; (800238c <interupt_DriveMotor+0x37c>)
 8002048:	2204      	movs	r2, #4
 800204a:	701a      	strb	r2, [r3, #0]
		g_WallControl_mode=0;
 800204c:	4bd0      	ldr	r3, [pc, #832]	; (8002390 <interupt_DriveMotor+0x380>)
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
		g_wallCut_mode=0;
 8002052:	4bd0      	ldr	r3, [pc, #832]	; (8002394 <interupt_DriveMotor+0x384>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]

	}
	if (modeacc == 1) {
 8002058:	4bcb      	ldr	r3, [pc, #812]	; (8002388 <interupt_DriveMotor+0x378>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	2b01      	cmp	r3, #1
 800205e:	f040 828b 	bne.w	8002578 <interupt_DriveMotor+0x568>
		g_MotorTimCount++;
 8002062:	4bcd      	ldr	r3, [pc, #820]	; (8002398 <interupt_DriveMotor+0x388>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	4acb      	ldr	r2, [pc, #812]	; (8002398 <interupt_DriveMotor+0x388>)
 800206a:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800206c:	4bcb      	ldr	r3, [pc, #812]	; (800239c <interupt_DriveMotor+0x38c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fa91 	bl	8000598 <__aeabi_f2d>
 8002076:	4604      	mov	r4, r0
 8002078:	460d      	mov	r5, r1
 800207a:	4bc8      	ldr	r3, [pc, #800]	; (800239c <interupt_DriveMotor+0x38c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa8a 	bl	8000598 <__aeabi_f2d>
 8002084:	a3bc      	add	r3, pc, #752	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fadd 	bl	8000648 <__aeabi_dmul>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4690      	mov	r8, r2
 8002094:	4699      	mov	r9, r3
 8002096:	4bc1      	ldr	r3, [pc, #772]	; (800239c <interupt_DriveMotor+0x38c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fa7c 	bl	8000598 <__aeabi_f2d>
 80020a0:	a3b5      	add	r3, pc, #724	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 80020a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a6:	f7fe facf 	bl	8000648 <__aeabi_dmul>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	a3b1      	add	r3, pc, #708	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 80020b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b8:	f7fe fac6 	bl	8000648 <__aeabi_dmul>
 80020bc:	4602      	mov	r2, r0
 80020be:	460b      	mov	r3, r1
 80020c0:	4610      	mov	r0, r2
 80020c2:	4619      	mov	r1, r3
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020cc:	f7fe fbe6 	bl	800089c <__aeabi_ddiv>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4640      	mov	r0, r8
 80020d6:	4649      	mov	r1, r9
 80020d8:	f7fe f900 	bl	80002dc <__adddf3>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4620      	mov	r0, r4
 80020e2:	4629      	mov	r1, r5
 80020e4:	f7fe f8fa 	bl	80002dc <__adddf3>
 80020e8:	4602      	mov	r2, r0
 80020ea:	460b      	mov	r3, r1
 80020ec:	4610      	mov	r0, r2
 80020ee:	4619      	mov	r1, r3
 80020f0:	f7fe fd82 	bl	8000bf8 <__aeabi_d2f>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4aa9      	ldr	r2, [pc, #676]	; (800239c <interupt_DriveMotor+0x38c>)
 80020f8:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 80020fa:	4ba8      	ldr	r3, [pc, #672]	; (800239c <interupt_DriveMotor+0x38c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fa4a 	bl	8000598 <__aeabi_f2d>
 8002104:	4604      	mov	r4, r0
 8002106:	460d      	mov	r5, r1
 8002108:	4ba4      	ldr	r3, [pc, #656]	; (800239c <interupt_DriveMotor+0x38c>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fa43 	bl	8000598 <__aeabi_f2d>
 8002112:	a399      	add	r3, pc, #612	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe fa96 	bl	8000648 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4620      	mov	r0, r4
 8002122:	4629      	mov	r1, r5
 8002124:	f7fe f8da 	bl	80002dc <__adddf3>
 8002128:	4602      	mov	r2, r0
 800212a:	460b      	mov	r3, r1
 800212c:	4610      	mov	r0, r2
 800212e:	4619      	mov	r1, r3
 8002130:	f7fe fd62 	bl	8000bf8 <__aeabi_d2f>
 8002134:	4603      	mov	r3, r0
 8002136:	4a99      	ldr	r2, [pc, #612]	; (800239c <interupt_DriveMotor+0x38c>)
 8002138:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 800213a:	4b99      	ldr	r3, [pc, #612]	; (80023a0 <interupt_DriveMotor+0x390>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe fa2a 	bl	8000598 <__aeabi_f2d>
 8002144:	4604      	mov	r4, r0
 8002146:	460d      	mov	r5, r1
 8002148:	4b95      	ldr	r3, [pc, #596]	; (80023a0 <interupt_DriveMotor+0x390>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa23 	bl	8000598 <__aeabi_f2d>
 8002152:	a389      	add	r3, pc, #548	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 8002154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002158:	f7fe fa76 	bl	8000648 <__aeabi_dmul>
 800215c:	4602      	mov	r2, r0
 800215e:	460b      	mov	r3, r1
 8002160:	4690      	mov	r8, r2
 8002162:	4699      	mov	r9, r3
 8002164:	4b8e      	ldr	r3, [pc, #568]	; (80023a0 <interupt_DriveMotor+0x390>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4618      	mov	r0, r3
 800216a:	f7fe fa15 	bl	8000598 <__aeabi_f2d>
 800216e:	a382      	add	r3, pc, #520	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 8002170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002174:	f7fe fa68 	bl	8000648 <__aeabi_dmul>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	4610      	mov	r0, r2
 800217e:	4619      	mov	r1, r3
 8002180:	a37d      	add	r3, pc, #500	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 8002182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002186:	f7fe fa5f 	bl	8000648 <__aeabi_dmul>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800219a:	f7fe fb7f 	bl	800089c <__aeabi_ddiv>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4640      	mov	r0, r8
 80021a4:	4649      	mov	r1, r9
 80021a6:	f7fe f899 	bl	80002dc <__adddf3>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe f893 	bl	80002dc <__adddf3>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fd1b 	bl	8000bf8 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a76      	ldr	r2, [pc, #472]	; (80023a0 <interupt_DriveMotor+0x390>)
 80021c6:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80021c8:	4b75      	ldr	r3, [pc, #468]	; (80023a0 <interupt_DriveMotor+0x390>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7fe f9e3 	bl	8000598 <__aeabi_f2d>
 80021d2:	4604      	mov	r4, r0
 80021d4:	460d      	mov	r5, r1
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <interupt_DriveMotor+0x390>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9dc 	bl	8000598 <__aeabi_f2d>
 80021e0:	a365      	add	r3, pc, #404	; (adr r3, 8002378 <interupt_DriveMotor+0x368>)
 80021e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e6:	f7fe fa2f 	bl	8000648 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe f873 	bl	80002dc <__adddf3>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fcfb 	bl	8000bf8 <__aeabi_d2f>
 8002202:	4603      	mov	r3, r0
 8002204:	4a66      	ldr	r2, [pc, #408]	; (80023a0 <interupt_DriveMotor+0x390>)
 8002206:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_straight,&straight);
 8002208:	4b66      	ldr	r3, [pc, #408]	; (80023a4 <interupt_DriveMotor+0x394>)
 800220a:	4a64      	ldr	r2, [pc, #400]	; (800239c <interupt_DriveMotor+0x38c>)
 800220c:	9201      	str	r2, [sp, #4]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	9200      	str	r2, [sp, #0]
 8002212:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002214:	f005 fa9e 	bl	8007754 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002218:	4b60      	ldr	r3, [pc, #384]	; (800239c <interupt_DriveMotor+0x38c>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	4b60      	ldr	r3, [pc, #384]	; (80023a0 <interupt_DriveMotor+0x390>)
 8002220:	ed93 7a00 	vldr	s14, [r3]
 8002224:	f107 020c 	add.w	r2, r7, #12
 8002228:	f107 0310 	add.w	r3, r7, #16
 800222c:	eef0 0a47 	vmov.f32	s1, s14
 8002230:	eeb0 0a67 	vmov.f32	s0, s15
 8002234:	4611      	mov	r1, r2
 8002236:	4618      	mov	r0, r3
 8002238:	f002 fc28 	bl	8004a8c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 800223c:	4b5a      	ldr	r3, [pc, #360]	; (80023a8 <interupt_DriveMotor+0x398>)
 800223e:	ed93 7a00 	vldr	s14, [r3]
 8002242:	4b5a      	ldr	r3, [pc, #360]	; (80023ac <interupt_DriveMotor+0x39c>)
 8002244:	edd3 7a00 	vldr	s15, [r3]
 8002248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800224c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002250:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002254:	4b51      	ldr	r3, [pc, #324]	; (800239c <interupt_DriveMotor+0x38c>)
 8002256:	edd3 7a01 	vldr	s15, [r3, #4]
 800225a:	4b55      	ldr	r3, [pc, #340]	; (80023b0 <interupt_DriveMotor+0x3a0>)
 800225c:	edd3 6a00 	vldr	s13, [r3]
 8002260:	4b4f      	ldr	r3, [pc, #316]	; (80023a0 <interupt_DriveMotor+0x390>)
 8002262:	ed93 6a01 	vldr	s12, [r3, #4]
 8002266:	1d3a      	adds	r2, r7, #4
 8002268:	f107 0308 	add.w	r3, r7, #8
 800226c:	eef0 1a46 	vmov.f32	s3, s12
 8002270:	eeb0 1a66 	vmov.f32	s2, s13
 8002274:	4611      	mov	r1, r2
 8002276:	eef0 0a67 	vmov.f32	s1, s15
 800227a:	eeb0 0a47 	vmov.f32	s0, s14
 800227e:	4618      	mov	r0, r3
 8002280:	f002 f92e 	bl	80044e0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		PID_w = calWallConrol();
 8002284:	f002 fdec 	bl	8004e60 <calWallConrol>
 8002288:	ed87 0a07 	vstr	s0, [r7, #28]
		V_L = PID_s-PID_t-PID_w+feedforward_straight-feedforward_turning;
 800228c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002290:	edd7 7a03 	vldr	s15, [r7, #12]
 8002294:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002298:	edd7 7a07 	vldr	s15, [r7, #28]
 800229c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+PID_w+feedforward_straight+feedforward_turning;
 80022b4:	ed97 7a04 	vldr	s14, [r7, #16]
 80022b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80022c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80022cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022d0:	edd7 7a01 	vldr	s15, [r7, #4]
 80022d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d8:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 80022dc:	ed97 7a04 	vldr	s14, [r7, #16]
 80022e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e8:	ee17 0a90 	vmov	r0, s15
 80022ec:	f7fe f954 	bl	8000598 <__aeabi_f2d>
 80022f0:	4604      	mov	r4, r0
 80022f2:	460d      	mov	r5, r1
 80022f4:	4b2f      	ldr	r3, [pc, #188]	; (80023b4 <interupt_DriveMotor+0x3a4>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe f94d 	bl	8000598 <__aeabi_f2d>
 80022fe:	a320      	add	r3, pc, #128	; (adr r3, 8002380 <interupt_DriveMotor+0x370>)
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	f7fe f9a0 	bl	8000648 <__aeabi_dmul>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4620      	mov	r0, r4
 800230e:	4629      	mov	r1, r5
 8002310:	f7fe fc2a 	bl	8000b68 <__aeabi_dcmpgt>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 808c 	beq.w	8002434 <interupt_DriveMotor+0x424>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800231c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800231e:	f7fe f93b 	bl	8000598 <__aeabi_f2d>
 8002322:	4604      	mov	r4, r0
 8002324:	460d      	mov	r5, r1
 8002326:	4b23      	ldr	r3, [pc, #140]	; (80023b4 <interupt_DriveMotor+0x3a4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7fe f934 	bl	8000598 <__aeabi_f2d>
 8002330:	a313      	add	r3, pc, #76	; (adr r3, 8002380 <interupt_DriveMotor+0x370>)
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f7fe f987 	bl	8000648 <__aeabi_dmul>
 800233a:	4602      	mov	r2, r0
 800233c:	460b      	mov	r3, r1
 800233e:	4690      	mov	r8, r2
 8002340:	4699      	mov	r9, r3
 8002342:	ed97 7a04 	vldr	s14, [r7, #16]
 8002346:	edd7 7a02 	vldr	s15, [r7, #8]
 800234a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800234e:	ee17 0a90 	vmov	r0, s15
 8002352:	f7fe f921 	bl	8000598 <__aeabi_f2d>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4640      	mov	r0, r8
 800235c:	4649      	mov	r1, r9
 800235e:	f7fd ffbb 	bl	80002d8 <__aeabi_dsub>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	4620      	mov	r0, r4
 8002368:	4629      	mov	r1, r5
 800236a:	f7fd ffb7 	bl	80002dc <__adddf3>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	e020      	b.n	80023b8 <interupt_DriveMotor+0x3a8>
 8002376:	bf00      	nop
 8002378:	d2f1a9fc 	.word	0xd2f1a9fc
 800237c:	3f50624d 	.word	0x3f50624d
 8002380:	d916872b 	.word	0xd916872b
 8002384:	3feff7ce 	.word	0x3feff7ce
 8002388:	20000508 	.word	0x20000508
 800238c:	200007e4 	.word	0x200007e4
 8002390:	20000570 	.word	0x20000570
 8002394:	20000572 	.word	0x20000572
 8002398:	20000504 	.word	0x20000504
 800239c:	200004b8 	.word	0x200004b8
 80023a0:	200004c4 	.word	0x200004c4
 80023a4:	200004d0 	.word	0x200004d0
 80023a8:	20000218 	.word	0x20000218
 80023ac:	2000021c 	.word	0x2000021c
 80023b0:	20000248 	.word	0x20000248
 80023b4:	200004b4 	.word	0x200004b4
 80023b8:	4619      	mov	r1, r3
 80023ba:	f7fe fc1d 	bl	8000bf8 <__aeabi_d2f>
 80023be:	4603      	mov	r3, r0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80023c2:	6a38      	ldr	r0, [r7, #32]
 80023c4:	f7fe f8e8 	bl	8000598 <__aeabi_f2d>
 80023c8:	4604      	mov	r4, r0
 80023ca:	460d      	mov	r5, r1
 80023cc:	4b18      	ldr	r3, [pc, #96]	; (8002430 <interupt_DriveMotor+0x420>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe f8e1 	bl	8000598 <__aeabi_f2d>
 80023d6:	a314      	add	r3, pc, #80	; (adr r3, 8002428 <interupt_DriveMotor+0x418>)
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fe f934 	bl	8000648 <__aeabi_dmul>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4690      	mov	r8, r2
 80023e6:	4699      	mov	r9, r3
 80023e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80023ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80023f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023f4:	ee17 0a90 	vmov	r0, s15
 80023f8:	f7fe f8ce 	bl	8000598 <__aeabi_f2d>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4640      	mov	r0, r8
 8002402:	4649      	mov	r1, r9
 8002404:	f7fd ff68 	bl	80002d8 <__aeabi_dsub>
 8002408:	4602      	mov	r2, r0
 800240a:	460b      	mov	r3, r1
 800240c:	4620      	mov	r0, r4
 800240e:	4629      	mov	r1, r5
 8002410:	f7fd ff64 	bl	80002dc <__adddf3>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4610      	mov	r0, r2
 800241a:	4619      	mov	r1, r3
 800241c:	f7fe fbec 	bl	8000bf8 <__aeabi_d2f>
 8002420:	4603      	mov	r3, r0
 8002422:	623b      	str	r3, [r7, #32]
 8002424:	e096      	b.n	8002554 <interupt_DriveMotor+0x544>
 8002426:	bf00      	nop
 8002428:	d916872b 	.word	0xd916872b
 800242c:	3feff7ce 	.word	0x3feff7ce
 8002430:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002434:	ed97 7a04 	vldr	s14, [r7, #16]
 8002438:	edd7 7a02 	vldr	s15, [r7, #8]
 800243c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002440:	ee17 0a90 	vmov	r0, s15
 8002444:	f7fe f8a8 	bl	8000598 <__aeabi_f2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
 800244c:	4bd0      	ldr	r3, [pc, #832]	; (8002790 <interupt_DriveMotor+0x780>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eef1 7a67 	vneg.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f89c 	bl	8000598 <__aeabi_f2d>
 8002460:	a3c7      	add	r3, pc, #796	; (adr r3, 8002780 <interupt_DriveMotor+0x770>)
 8002462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002466:	f7fe f8ef 	bl	8000648 <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f7fe fb5b 	bl	8000b2c <__aeabi_dcmplt>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d06b      	beq.n	8002554 <interupt_DriveMotor+0x544>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800247c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800247e:	f7fe f88b 	bl	8000598 <__aeabi_f2d>
 8002482:	4604      	mov	r4, r0
 8002484:	460d      	mov	r5, r1
 8002486:	4bc2      	ldr	r3, [pc, #776]	; (8002790 <interupt_DriveMotor+0x780>)
 8002488:	edd3 7a00 	vldr	s15, [r3]
 800248c:	eef1 7a67 	vneg.f32	s15, s15
 8002490:	ee17 3a90 	vmov	r3, s15
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f87f 	bl	8000598 <__aeabi_f2d>
 800249a:	a3b9      	add	r3, pc, #740	; (adr r3, 8002780 <interupt_DriveMotor+0x770>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fe f8d2 	bl	8000648 <__aeabi_dmul>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4690      	mov	r8, r2
 80024aa:	4699      	mov	r9, r3
 80024ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80024b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	ee17 0a90 	vmov	r0, s15
 80024bc:	f7fe f86c 	bl	8000598 <__aeabi_f2d>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4640      	mov	r0, r8
 80024c6:	4649      	mov	r1, r9
 80024c8:	f7fd ff06 	bl	80002d8 <__aeabi_dsub>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fd ff02 	bl	80002dc <__adddf3>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f7fe fb8a 	bl	8000bf8 <__aeabi_d2f>
 80024e4:	4603      	mov	r3, r0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80024e8:	6a38      	ldr	r0, [r7, #32]
 80024ea:	f7fe f855 	bl	8000598 <__aeabi_f2d>
 80024ee:	4604      	mov	r4, r0
 80024f0:	460d      	mov	r5, r1
 80024f2:	4ba7      	ldr	r3, [pc, #668]	; (8002790 <interupt_DriveMotor+0x780>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	eef1 7a67 	vneg.f32	s15, s15
 80024fc:	ee17 3a90 	vmov	r3, s15
 8002500:	4618      	mov	r0, r3
 8002502:	f7fe f849 	bl	8000598 <__aeabi_f2d>
 8002506:	a39e      	add	r3, pc, #632	; (adr r3, 8002780 <interupt_DriveMotor+0x770>)
 8002508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250c:	f7fe f89c 	bl	8000648 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4690      	mov	r8, r2
 8002516:	4699      	mov	r9, r3
 8002518:	ed97 7a04 	vldr	s14, [r7, #16]
 800251c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002524:	ee17 0a90 	vmov	r0, s15
 8002528:	f7fe f836 	bl	8000598 <__aeabi_f2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	4640      	mov	r0, r8
 8002532:	4649      	mov	r1, r9
 8002534:	f7fd fed0 	bl	80002d8 <__aeabi_dsub>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4620      	mov	r0, r4
 800253e:	4629      	mov	r1, r5
 8002540:	f7fd fecc 	bl	80002dc <__adddf3>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4610      	mov	r0, r2
 800254a:	4619      	mov	r1, r3
 800254c:	f7fe fb54 	bl	8000bf8 <__aeabi_d2f>
 8002550:	4603      	mov	r3, r0
 8002552:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002554:	f107 0214 	add.w	r2, r7, #20
 8002558:	f107 0318 	add.w	r3, r7, #24
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	edd7 0a08 	vldr	s1, [r7, #32]
 8002564:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002568:	f7ff fcc8 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f004 fca4 	bl	8006ec0 <pl_DriveMotor_duty>
	}
	if (modeacc == 2 || modeacc == 4) {//旋回とスラローム
 8002578:	4b86      	ldr	r3, [pc, #536]	; (8002794 <interupt_DriveMotor+0x784>)
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d004      	beq.n	800258a <interupt_DriveMotor+0x57a>
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <interupt_DriveMotor+0x784>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b04      	cmp	r3, #4
 8002586:	f040 827d 	bne.w	8002a84 <interupt_DriveMotor+0xa74>
		g_MotorTimCount++;
 800258a:	4b83      	ldr	r3, [pc, #524]	; (8002798 <interupt_DriveMotor+0x788>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	3301      	adds	r3, #1
 8002590:	4a81      	ldr	r2, [pc, #516]	; (8002798 <interupt_DriveMotor+0x788>)
 8002592:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002594:	4b81      	ldr	r3, [pc, #516]	; (800279c <interupt_DriveMotor+0x78c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fd fffd 	bl	8000598 <__aeabi_f2d>
 800259e:	4604      	mov	r4, r0
 80025a0:	460d      	mov	r5, r1
 80025a2:	4b7e      	ldr	r3, [pc, #504]	; (800279c <interupt_DriveMotor+0x78c>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fd fff6 	bl	8000598 <__aeabi_f2d>
 80025ac:	a376      	add	r3, pc, #472	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 80025ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b2:	f7fe f849 	bl	8000648 <__aeabi_dmul>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4690      	mov	r8, r2
 80025bc:	4699      	mov	r9, r3
 80025be:	4b77      	ldr	r3, [pc, #476]	; (800279c <interupt_DriveMotor+0x78c>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7fd ffe8 	bl	8000598 <__aeabi_f2d>
 80025c8:	a36f      	add	r3, pc, #444	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 80025ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ce:	f7fe f83b 	bl	8000648 <__aeabi_dmul>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4610      	mov	r0, r2
 80025d8:	4619      	mov	r1, r3
 80025da:	a36b      	add	r3, pc, #428	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fe f832 	bl	8000648 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f04f 0200 	mov.w	r2, #0
 80025f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025f4:	f7fe f952 	bl	800089c <__aeabi_ddiv>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	4640      	mov	r0, r8
 80025fe:	4649      	mov	r1, r9
 8002600:	f7fd fe6c 	bl	80002dc <__adddf3>
 8002604:	4602      	mov	r2, r0
 8002606:	460b      	mov	r3, r1
 8002608:	4620      	mov	r0, r4
 800260a:	4629      	mov	r1, r5
 800260c:	f7fd fe66 	bl	80002dc <__adddf3>
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	4610      	mov	r0, r2
 8002616:	4619      	mov	r1, r3
 8002618:	f7fe faee 	bl	8000bf8 <__aeabi_d2f>
 800261c:	4603      	mov	r3, r0
 800261e:	4a5f      	ldr	r2, [pc, #380]	; (800279c <interupt_DriveMotor+0x78c>)
 8002620:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002622:	4b5e      	ldr	r3, [pc, #376]	; (800279c <interupt_DriveMotor+0x78c>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd ffb6 	bl	8000598 <__aeabi_f2d>
 800262c:	4604      	mov	r4, r0
 800262e:	460d      	mov	r5, r1
 8002630:	4b5a      	ldr	r3, [pc, #360]	; (800279c <interupt_DriveMotor+0x78c>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4618      	mov	r0, r3
 8002636:	f7fd ffaf 	bl	8000598 <__aeabi_f2d>
 800263a:	a353      	add	r3, pc, #332	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 800263c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002640:	f7fe f802 	bl	8000648 <__aeabi_dmul>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd fe46 	bl	80002dc <__adddf3>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f7fe face 	bl	8000bf8 <__aeabi_d2f>
 800265c:	4603      	mov	r3, r0
 800265e:	4a4f      	ldr	r2, [pc, #316]	; (800279c <interupt_DriveMotor+0x78c>)
 8002660:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002662:	4b4f      	ldr	r3, [pc, #316]	; (80027a0 <interupt_DriveMotor+0x790>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff96 	bl	8000598 <__aeabi_f2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <interupt_DriveMotor+0x790>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff8f 	bl	8000598 <__aeabi_f2d>
 800267a:	a343      	add	r3, pc, #268	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 800267c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002680:	f7fd ffe2 	bl	8000648 <__aeabi_dmul>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4690      	mov	r8, r2
 800268a:	4699      	mov	r9, r3
 800268c:	4b44      	ldr	r3, [pc, #272]	; (80027a0 <interupt_DriveMotor+0x790>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd ff81 	bl	8000598 <__aeabi_f2d>
 8002696:	a33c      	add	r3, pc, #240	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 8002698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800269c:	f7fd ffd4 	bl	8000648 <__aeabi_dmul>
 80026a0:	4602      	mov	r2, r0
 80026a2:	460b      	mov	r3, r1
 80026a4:	4610      	mov	r0, r2
 80026a6:	4619      	mov	r1, r3
 80026a8:	a337      	add	r3, pc, #220	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 80026aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ae:	f7fd ffcb 	bl	8000648 <__aeabi_dmul>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4610      	mov	r0, r2
 80026b8:	4619      	mov	r1, r3
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026c2:	f7fe f8eb 	bl	800089c <__aeabi_ddiv>
 80026c6:	4602      	mov	r2, r0
 80026c8:	460b      	mov	r3, r1
 80026ca:	4640      	mov	r0, r8
 80026cc:	4649      	mov	r1, r9
 80026ce:	f7fd fe05 	bl	80002dc <__adddf3>
 80026d2:	4602      	mov	r2, r0
 80026d4:	460b      	mov	r3, r1
 80026d6:	4620      	mov	r0, r4
 80026d8:	4629      	mov	r1, r5
 80026da:	f7fd fdff 	bl	80002dc <__adddf3>
 80026de:	4602      	mov	r2, r0
 80026e0:	460b      	mov	r3, r1
 80026e2:	4610      	mov	r0, r2
 80026e4:	4619      	mov	r1, r3
 80026e6:	f7fe fa87 	bl	8000bf8 <__aeabi_d2f>
 80026ea:	4603      	mov	r3, r0
 80026ec:	4a2c      	ldr	r2, [pc, #176]	; (80027a0 <interupt_DriveMotor+0x790>)
 80026ee:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <interupt_DriveMotor+0x790>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd ff4f 	bl	8000598 <__aeabi_f2d>
 80026fa:	4604      	mov	r4, r0
 80026fc:	460d      	mov	r5, r1
 80026fe:	4b28      	ldr	r3, [pc, #160]	; (80027a0 <interupt_DriveMotor+0x790>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4618      	mov	r0, r3
 8002704:	f7fd ff48 	bl	8000598 <__aeabi_f2d>
 8002708:	a31f      	add	r3, pc, #124	; (adr r3, 8002788 <interupt_DriveMotor+0x778>)
 800270a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270e:	f7fd ff9b 	bl	8000648 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4620      	mov	r0, r4
 8002718:	4629      	mov	r1, r5
 800271a:	f7fd fddf 	bl	80002dc <__adddf3>
 800271e:	4602      	mov	r2, r0
 8002720:	460b      	mov	r3, r1
 8002722:	4610      	mov	r0, r2
 8002724:	4619      	mov	r1, r3
 8002726:	f7fe fa67 	bl	8000bf8 <__aeabi_d2f>
 800272a:	4603      	mov	r3, r0
 800272c:	4a1c      	ldr	r2, [pc, #112]	; (80027a0 <interupt_DriveMotor+0x790>)
 800272e:	6013      	str	r3, [r2, #0]
		cal_table(Trapezoid_turning,&turning);
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <interupt_DriveMotor+0x794>)
 8002732:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <interupt_DriveMotor+0x790>)
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	9200      	str	r2, [sp, #0]
 800273a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800273c:	f005 f80a 	bl	8007754 <cal_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002740:	4b16      	ldr	r3, [pc, #88]	; (800279c <interupt_DriveMotor+0x78c>)
 8002742:	edd3 7a00 	vldr	s15, [r3]
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <interupt_DriveMotor+0x790>)
 8002748:	ed93 7a00 	vldr	s14, [r3]
 800274c:	f107 020c 	add.w	r2, r7, #12
 8002750:	f107 0310 	add.w	r3, r7, #16
 8002754:	eef0 0a47 	vmov.f32	s1, s14
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	4611      	mov	r1, r2
 800275e:	4618      	mov	r0, r3
 8002760:	f002 f994 	bl	8004a8c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <interupt_DriveMotor+0x798>)
 8002766:	ed93 7a00 	vldr	s14, [r3]
 800276a:	4b10      	ldr	r3, [pc, #64]	; (80027ac <interupt_DriveMotor+0x79c>)
 800276c:	edd3 7a00 	vldr	s15, [r3]
 8002770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002774:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002778:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800277c:	e018      	b.n	80027b0 <interupt_DriveMotor+0x7a0>
 800277e:	bf00      	nop
 8002780:	d916872b 	.word	0xd916872b
 8002784:	3feff7ce 	.word	0x3feff7ce
 8002788:	d2f1a9fc 	.word	0xd2f1a9fc
 800278c:	3f50624d 	.word	0x3f50624d
 8002790:	200004b4 	.word	0x200004b4
 8002794:	20000508 	.word	0x20000508
 8002798:	20000504 	.word	0x20000504
 800279c:	200004b8 	.word	0x200004b8
 80027a0:	200004c4 	.word	0x200004c4
 80027a4:	200004e4 	.word	0x200004e4
 80027a8:	20000218 	.word	0x20000218
 80027ac:	2000021c 	.word	0x2000021c
 80027b0:	4b5f      	ldr	r3, [pc, #380]	; (8002930 <interupt_DriveMotor+0x920>)
 80027b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027b6:	4b5f      	ldr	r3, [pc, #380]	; (8002934 <interupt_DriveMotor+0x924>)
 80027b8:	edd3 6a00 	vldr	s13, [r3]
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <interupt_DriveMotor+0x928>)
 80027be:	ed93 6a01 	vldr	s12, [r3, #4]
 80027c2:	1d3a      	adds	r2, r7, #4
 80027c4:	f107 0308 	add.w	r3, r7, #8
 80027c8:	eef0 1a46 	vmov.f32	s3, s12
 80027cc:	eeb0 1a66 	vmov.f32	s2, s13
 80027d0:	4611      	mov	r1, r2
 80027d2:	eef0 0a67 	vmov.f32	s1, s15
 80027d6:	eeb0 0a47 	vmov.f32	s0, s14
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 fe80 	bl	80044e0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80027e0:	ed97 7a04 	vldr	s14, [r7, #16]
 80027e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80027e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80027f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027fc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002800:	ed97 7a04 	vldr	s14, [r7, #16]
 8002804:	edd7 7a03 	vldr	s15, [r7, #12]
 8002808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002810:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002814:	edd7 7a01 	vldr	s15, [r7, #4]
 8002818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281c:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002820:	ed97 7a04 	vldr	s14, [r7, #16]
 8002824:	edd7 7a02 	vldr	s15, [r7, #8]
 8002828:	ee77 7a27 	vadd.f32	s15, s14, s15
 800282c:	ee17 0a90 	vmov	r0, s15
 8002830:	f7fd feb2 	bl	8000598 <__aeabi_f2d>
 8002834:	4604      	mov	r4, r0
 8002836:	460d      	mov	r5, r1
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <interupt_DriveMotor+0x92c>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd feab 	bl	8000598 <__aeabi_f2d>
 8002842:	a339      	add	r3, pc, #228	; (adr r3, 8002928 <interupt_DriveMotor+0x918>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fefe 	bl	8000648 <__aeabi_dmul>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4620      	mov	r0, r4
 8002852:	4629      	mov	r1, r5
 8002854:	f7fe f988 	bl	8000b68 <__aeabi_dcmpgt>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d070      	beq.n	8002940 <interupt_DriveMotor+0x930>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 800285e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002860:	f7fd fe9a 	bl	8000598 <__aeabi_f2d>
 8002864:	4604      	mov	r4, r0
 8002866:	460d      	mov	r5, r1
 8002868:	4b34      	ldr	r3, [pc, #208]	; (800293c <interupt_DriveMotor+0x92c>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe93 	bl	8000598 <__aeabi_f2d>
 8002872:	a32d      	add	r3, pc, #180	; (adr r3, 8002928 <interupt_DriveMotor+0x918>)
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f7fd fee6 	bl	8000648 <__aeabi_dmul>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4690      	mov	r8, r2
 8002882:	4699      	mov	r9, r3
 8002884:	ed97 7a04 	vldr	s14, [r7, #16]
 8002888:	edd7 7a02 	vldr	s15, [r7, #8]
 800288c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002890:	ee17 0a90 	vmov	r0, s15
 8002894:	f7fd fe80 	bl	8000598 <__aeabi_f2d>
 8002898:	4602      	mov	r2, r0
 800289a:	460b      	mov	r3, r1
 800289c:	4640      	mov	r0, r8
 800289e:	4649      	mov	r1, r9
 80028a0:	f7fd fd1a 	bl	80002d8 <__aeabi_dsub>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fd16 	bl	80002dc <__adddf3>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f99e 	bl	8000bf8 <__aeabi_d2f>
 80028bc:	4603      	mov	r3, r0
 80028be:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80028c0:	6a38      	ldr	r0, [r7, #32]
 80028c2:	f7fd fe69 	bl	8000598 <__aeabi_f2d>
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4b1c      	ldr	r3, [pc, #112]	; (800293c <interupt_DriveMotor+0x92c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fd fe62 	bl	8000598 <__aeabi_f2d>
 80028d4:	a314      	add	r3, pc, #80	; (adr r3, 8002928 <interupt_DriveMotor+0x918>)
 80028d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028da:	f7fd feb5 	bl	8000648 <__aeabi_dmul>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4690      	mov	r8, r2
 80028e4:	4699      	mov	r9, r3
 80028e6:	ed97 7a04 	vldr	s14, [r7, #16]
 80028ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80028ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f2:	ee17 0a90 	vmov	r0, s15
 80028f6:	f7fd fe4f 	bl	8000598 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4640      	mov	r0, r8
 8002900:	4649      	mov	r1, r9
 8002902:	f7fd fce9 	bl	80002d8 <__aeabi_dsub>
 8002906:	4602      	mov	r2, r0
 8002908:	460b      	mov	r3, r1
 800290a:	4620      	mov	r0, r4
 800290c:	4629      	mov	r1, r5
 800290e:	f7fd fce5 	bl	80002dc <__adddf3>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fe f96d 	bl	8000bf8 <__aeabi_d2f>
 800291e:	4603      	mov	r3, r0
 8002920:	623b      	str	r3, [r7, #32]
 8002922:	e09d      	b.n	8002a60 <interupt_DriveMotor+0xa50>
 8002924:	f3af 8000 	nop.w
 8002928:	d916872b 	.word	0xd916872b
 800292c:	3feff7ce 	.word	0x3feff7ce
 8002930:	200004b8 	.word	0x200004b8
 8002934:	20000248 	.word	0x20000248
 8002938:	200004c4 	.word	0x200004c4
 800293c:	200004b4 	.word	0x200004b4
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002940:	ed97 7a04 	vldr	s14, [r7, #16]
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ee77 7a27 	vadd.f32	s15, s14, s15
 800294c:	ee17 0a90 	vmov	r0, s15
 8002950:	f7fd fe22 	bl	8000598 <__aeabi_f2d>
 8002954:	4604      	mov	r4, r0
 8002956:	460d      	mov	r5, r1
 8002958:	4bd7      	ldr	r3, [pc, #860]	; (8002cb8 <interupt_DriveMotor+0xca8>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef1 7a67 	vneg.f32	s15, s15
 8002962:	ee17 3a90 	vmov	r3, s15
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fe16 	bl	8000598 <__aeabi_f2d>
 800296c:	a3ce      	add	r3, pc, #824	; (adr r3, 8002ca8 <interupt_DriveMotor+0xc98>)
 800296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002972:	f7fd fe69 	bl	8000648 <__aeabi_dmul>
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	4620      	mov	r0, r4
 800297c:	4629      	mov	r1, r5
 800297e:	f7fe f8d5 	bl	8000b2c <__aeabi_dcmplt>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d06b      	beq.n	8002a60 <interupt_DriveMotor+0xa50>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800298a:	f7fd fe05 	bl	8000598 <__aeabi_f2d>
 800298e:	4604      	mov	r4, r0
 8002990:	460d      	mov	r5, r1
 8002992:	4bc9      	ldr	r3, [pc, #804]	; (8002cb8 <interupt_DriveMotor+0xca8>)
 8002994:	edd3 7a00 	vldr	s15, [r3]
 8002998:	eef1 7a67 	vneg.f32	s15, s15
 800299c:	ee17 3a90 	vmov	r3, s15
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fdf9 	bl	8000598 <__aeabi_f2d>
 80029a6:	a3c0      	add	r3, pc, #768	; (adr r3, 8002ca8 <interupt_DriveMotor+0xc98>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe4c 	bl	8000648 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4690      	mov	r8, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80029bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80029c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c4:	ee17 0a90 	vmov	r0, s15
 80029c8:	f7fd fde6 	bl	8000598 <__aeabi_f2d>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4640      	mov	r0, r8
 80029d2:	4649      	mov	r1, r9
 80029d4:	f7fd fc80 	bl	80002d8 <__aeabi_dsub>
 80029d8:	4602      	mov	r2, r0
 80029da:	460b      	mov	r3, r1
 80029dc:	4620      	mov	r0, r4
 80029de:	4629      	mov	r1, r5
 80029e0:	f7fd fc7c 	bl	80002dc <__adddf3>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4610      	mov	r0, r2
 80029ea:	4619      	mov	r1, r3
 80029ec:	f7fe f904 	bl	8000bf8 <__aeabi_d2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80029f4:	6a38      	ldr	r0, [r7, #32]
 80029f6:	f7fd fdcf 	bl	8000598 <__aeabi_f2d>
 80029fa:	4604      	mov	r4, r0
 80029fc:	460d      	mov	r5, r1
 80029fe:	4bae      	ldr	r3, [pc, #696]	; (8002cb8 <interupt_DriveMotor+0xca8>)
 8002a00:	edd3 7a00 	vldr	s15, [r3]
 8002a04:	eef1 7a67 	vneg.f32	s15, s15
 8002a08:	ee17 3a90 	vmov	r3, s15
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fdc3 	bl	8000598 <__aeabi_f2d>
 8002a12:	a3a5      	add	r3, pc, #660	; (adr r3, 8002ca8 <interupt_DriveMotor+0xc98>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fe16 	bl	8000648 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4690      	mov	r8, r2
 8002a22:	4699      	mov	r9, r3
 8002a24:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a30:	ee17 0a90 	vmov	r0, s15
 8002a34:	f7fd fdb0 	bl	8000598 <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4640      	mov	r0, r8
 8002a3e:	4649      	mov	r1, r9
 8002a40:	f7fd fc4a 	bl	80002d8 <__aeabi_dsub>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4620      	mov	r0, r4
 8002a4a:	4629      	mov	r1, r5
 8002a4c:	f7fd fc46 	bl	80002dc <__adddf3>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ce 	bl	8000bf8 <__aeabi_d2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002a60:	f107 0214 	add.w	r2, r7, #20
 8002a64:	f107 0318 	add.w	r3, r7, #24
 8002a68:	4611      	mov	r1, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002a70:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002a74:	f7ff fa42 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f004 fa1e 	bl	8006ec0 <pl_DriveMotor_duty>
	}
	if (modeacc == 3) {//宴会芸
 8002a84:	4b8d      	ldr	r3, [pc, #564]	; (8002cbc <interupt_DriveMotor+0xcac>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b03      	cmp	r3, #3
 8002a8a:	f040 812d 	bne.w	8002ce8 <interupt_DriveMotor+0xcd8>
		g_MotorTimCount++;
 8002a8e:	4b8c      	ldr	r3, [pc, #560]	; (8002cc0 <interupt_DriveMotor+0xcb0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3301      	adds	r3, #1
 8002a94:	4a8a      	ldr	r2, [pc, #552]	; (8002cc0 <interupt_DriveMotor+0xcb0>)
 8002a96:	6013      	str	r3, [r2, #0]
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002a98:	4b8a      	ldr	r3, [pc, #552]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd7b 	bl	8000598 <__aeabi_f2d>
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	460d      	mov	r5, r1
 8002aa6:	4b87      	ldr	r3, [pc, #540]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fd fd74 	bl	8000598 <__aeabi_f2d>
 8002ab0:	a37f      	add	r3, pc, #508	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fdc7 	bl	8000648 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4690      	mov	r8, r2
 8002ac0:	4699      	mov	r9, r3
 8002ac2:	4b80      	ldr	r3, [pc, #512]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fd fd66 	bl	8000598 <__aeabi_f2d>
 8002acc:	a378      	add	r3, pc, #480	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad2:	f7fd fdb9 	bl	8000648 <__aeabi_dmul>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	460b      	mov	r3, r1
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	a374      	add	r3, pc, #464	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f7fd fdb0 	bl	8000648 <__aeabi_dmul>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4610      	mov	r0, r2
 8002aee:	4619      	mov	r1, r3
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002af8:	f7fd fed0 	bl	800089c <__aeabi_ddiv>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4640      	mov	r0, r8
 8002b02:	4649      	mov	r1, r9
 8002b04:	f7fd fbea 	bl	80002dc <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	4629      	mov	r1, r5
 8002b10:	f7fd fbe4 	bl	80002dc <__adddf3>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fe f86c 	bl	8000bf8 <__aeabi_d2f>
 8002b20:	4603      	mov	r3, r0
 8002b22:	4a68      	ldr	r2, [pc, #416]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002b24:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002b26:	4b67      	ldr	r3, [pc, #412]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7fd fd34 	bl	8000598 <__aeabi_f2d>
 8002b30:	4604      	mov	r4, r0
 8002b32:	460d      	mov	r5, r1
 8002b34:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fd2d 	bl	8000598 <__aeabi_f2d>
 8002b3e:	a35c      	add	r3, pc, #368	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b44:	f7fd fd80 	bl	8000648 <__aeabi_dmul>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	4629      	mov	r1, r5
 8002b50:	f7fd fbc4 	bl	80002dc <__adddf3>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7fe f84c 	bl	8000bf8 <__aeabi_d2f>
 8002b60:	4603      	mov	r3, r0
 8002b62:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002b64:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002b66:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fd fd14 	bl	8000598 <__aeabi_f2d>
 8002b70:	4604      	mov	r4, r0
 8002b72:	460d      	mov	r5, r1
 8002b74:	4b54      	ldr	r3, [pc, #336]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7fd fd0d 	bl	8000598 <__aeabi_f2d>
 8002b7e:	a34c      	add	r3, pc, #304	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f7fd fd60 	bl	8000648 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4690      	mov	r8, r2
 8002b8e:	4699      	mov	r9, r3
 8002b90:	4b4d      	ldr	r3, [pc, #308]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7fd fcff 	bl	8000598 <__aeabi_f2d>
 8002b9a:	a345      	add	r3, pc, #276	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba0:	f7fd fd52 	bl	8000648 <__aeabi_dmul>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	a340      	add	r3, pc, #256	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fd49 	bl	8000648 <__aeabi_dmul>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f04f 0200 	mov.w	r2, #0
 8002bc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002bc6:	f7fd fe69 	bl	800089c <__aeabi_ddiv>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	f7fd fb83 	bl	80002dc <__adddf3>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4620      	mov	r0, r4
 8002bdc:	4629      	mov	r1, r5
 8002bde:	f7fd fb7d 	bl	80002dc <__adddf3>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4610      	mov	r0, r2
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7fe f805 	bl	8000bf8 <__aeabi_d2f>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4a35      	ldr	r2, [pc, #212]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002bf2:	6093      	str	r3, [r2, #8]
		turning.velocity += turning.acceleration*INTERRUPT_TIME;
 8002bf4:	4b34      	ldr	r3, [pc, #208]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fccd 	bl	8000598 <__aeabi_f2d>
 8002bfe:	4604      	mov	r4, r0
 8002c00:	460d      	mov	r5, r1
 8002c02:	4b31      	ldr	r3, [pc, #196]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fd fcc6 	bl	8000598 <__aeabi_f2d>
 8002c0c:	a328      	add	r3, pc, #160	; (adr r3, 8002cb0 <interupt_DriveMotor+0xca0>)
 8002c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c12:	f7fd fd19 	bl	8000648 <__aeabi_dmul>
 8002c16:	4602      	mov	r2, r0
 8002c18:	460b      	mov	r3, r1
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	f7fd fb5d 	bl	80002dc <__adddf3>
 8002c22:	4602      	mov	r2, r0
 8002c24:	460b      	mov	r3, r1
 8002c26:	4610      	mov	r0, r2
 8002c28:	4619      	mov	r1, r3
 8002c2a:	f7fd ffe5 	bl	8000bf8 <__aeabi_d2f>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4a25      	ldr	r2, [pc, #148]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002c32:	6013      	str	r3, [r2, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <interupt_DriveMotor+0xcb4>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	4b23      	ldr	r3, [pc, #140]	; (8002cc8 <interupt_DriveMotor+0xcb8>)
 8002c3c:	ed93 7a00 	vldr	s14, [r3]
 8002c40:	f107 020c 	add.w	r2, r7, #12
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	eef0 0a47 	vmov.f32	s1, s14
 8002c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c50:	4611      	mov	r1, r2
 8002c52:	4618      	mov	r0, r3
 8002c54:	f001 ff1a 	bl	8004a8c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002c58:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c64:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002c78:	ed97 7a04 	vldr	s14, [r7, #16]
 8002c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c94:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002c98:	f107 0214 	add.w	r2, r7, #20
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	e014      	b.n	8002ccc <interupt_DriveMotor+0xcbc>
 8002ca2:	bf00      	nop
 8002ca4:	f3af 8000 	nop.w
 8002ca8:	d916872b 	.word	0xd916872b
 8002cac:	3feff7ce 	.word	0x3feff7ce
 8002cb0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002cb4:	3f50624d 	.word	0x3f50624d
 8002cb8:	200004b4 	.word	0x200004b4
 8002cbc:	20000508 	.word	0x20000508
 8002cc0:	20000504 	.word	0x20000504
 8002cc4:	200004b8 	.word	0x200004b8
 8002cc8:	200004c4 	.word	0x200004c4
 8002ccc:	4611      	mov	r1, r2
 8002cce:	4618      	mov	r0, r3
 8002cd0:	edd7 0a08 	vldr	s1, [r7, #32]
 8002cd4:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002cd8:	f7ff f910 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f004 f8ec 	bl	8006ec0 <pl_DriveMotor_duty>
	}if (modeacc == 5) {//前壁制御
 8002ce8:	4bd9      	ldr	r3, [pc, #868]	; (8003050 <interupt_DriveMotor+0x1040>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b05      	cmp	r3, #5
 8002cee:	d131      	bne.n	8002d54 <interupt_DriveMotor+0xd44>
		//calFrontWallConrol(&PID_frontwall_l,&PID_frontwall_r);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002cf0:	ed97 7a04 	vldr	s14, [r7, #16]
 8002cf4:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cf8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002cfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d04:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002d10:	ed97 7a04 	vldr	s14, [r7, #16]
 8002d14:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d2c:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8002d30:	f107 0214 	add.w	r2, r7, #20
 8002d34:	f107 0318 	add.w	r3, r7, #24
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	edd7 0a08 	vldr	s1, [r7, #32]
 8002d40:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8002d44:	f7ff f8da 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	697a      	ldr	r2, [r7, #20]
 8002d4c:	4611      	mov	r1, r2
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f004 f8b6 	bl	8006ec0 <pl_DriveMotor_duty>
	}if (modeacc == 6) {//ネイピア加速
 8002d54:	4bbe      	ldr	r3, [pc, #760]	; (8003050 <interupt_DriveMotor+0x1040>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b06      	cmp	r3, #6
 8002d5a:	f040 822c 	bne.w	80031b6 <interupt_DriveMotor+0x11a6>
		straight.displacement += straight.velocity*INTERRUPT_TIME + straight.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002d5e:	4bbd      	ldr	r3, [pc, #756]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fc18 	bl	8000598 <__aeabi_f2d>
 8002d68:	4604      	mov	r4, r0
 8002d6a:	460d      	mov	r5, r1
 8002d6c:	4bb9      	ldr	r3, [pc, #740]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7fd fc11 	bl	8000598 <__aeabi_f2d>
 8002d76:	a3b2      	add	r3, pc, #712	; (adr r3, 8003040 <interupt_DriveMotor+0x1030>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fc64 	bl	8000648 <__aeabi_dmul>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4690      	mov	r8, r2
 8002d86:	4699      	mov	r9, r3
 8002d88:	4bb2      	ldr	r3, [pc, #712]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fc03 	bl	8000598 <__aeabi_f2d>
 8002d92:	a3ab      	add	r3, pc, #684	; (adr r3, 8003040 <interupt_DriveMotor+0x1030>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fc56 	bl	8000648 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	a3a6      	add	r3, pc, #664	; (adr r3, 8003040 <interupt_DriveMotor+0x1030>)
 8002da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002daa:	f7fd fc4d 	bl	8000648 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f04f 0200 	mov.w	r2, #0
 8002dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dbe:	f7fd fd6d 	bl	800089c <__aeabi_ddiv>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	4640      	mov	r0, r8
 8002dc8:	4649      	mov	r1, r9
 8002dca:	f7fd fa87 	bl	80002dc <__adddf3>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	f7fd fa81 	bl	80002dc <__adddf3>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4610      	mov	r0, r2
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7fd ff09 	bl	8000bf8 <__aeabi_d2f>
 8002de6:	4603      	mov	r3, r0
 8002de8:	4a9a      	ldr	r2, [pc, #616]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002dea:	6093      	str	r3, [r2, #8]
		straight.velocity += straight.acceleration*INTERRUPT_TIME;
 8002dec:	4b99      	ldr	r3, [pc, #612]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fbd1 	bl	8000598 <__aeabi_f2d>
 8002df6:	4604      	mov	r4, r0
 8002df8:	460d      	mov	r5, r1
 8002dfa:	4b96      	ldr	r3, [pc, #600]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fbca 	bl	8000598 <__aeabi_f2d>
 8002e04:	a38e      	add	r3, pc, #568	; (adr r3, 8003040 <interupt_DriveMotor+0x1030>)
 8002e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e0a:	f7fd fc1d 	bl	8000648 <__aeabi_dmul>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4620      	mov	r0, r4
 8002e14:	4629      	mov	r1, r5
 8002e16:	f7fd fa61 	bl	80002dc <__adddf3>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7fd fee9 	bl	8000bf8 <__aeabi_d2f>
 8002e26:	4603      	mov	r3, r0
 8002e28:	4a8a      	ldr	r2, [pc, #552]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002e2a:	6013      	str	r3, [r2, #0]
		turning.displacement += turning.velocity*INTERRUPT_TIME;// + turning.acceleration*INTERRUPT_TIME*INTERRUPT_TIME/2;
 8002e2c:	4b8a      	ldr	r3, [pc, #552]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7fd fbb1 	bl	8000598 <__aeabi_f2d>
 8002e36:	4604      	mov	r4, r0
 8002e38:	460d      	mov	r5, r1
 8002e3a:	4b87      	ldr	r3, [pc, #540]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fd fbaa 	bl	8000598 <__aeabi_f2d>
 8002e44:	a37e      	add	r3, pc, #504	; (adr r3, 8003040 <interupt_DriveMotor+0x1030>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fbfd 	bl	8000648 <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4620      	mov	r0, r4
 8002e54:	4629      	mov	r1, r5
 8002e56:	f7fd fa41 	bl	80002dc <__adddf3>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	4610      	mov	r0, r2
 8002e60:	4619      	mov	r1, r3
 8002e62:	f7fd fec9 	bl	8000bf8 <__aeabi_d2f>
 8002e66:	4603      	mov	r3, r0
 8002e68:	4a7b      	ldr	r2, [pc, #492]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002e6a:	6093      	str	r3, [r2, #8]
		cal_mollifier_table(Mollifier_turning,&turning);//角速度と角加速度はここで決定
 8002e6c:	4b7b      	ldr	r3, [pc, #492]	; (800305c <interupt_DriveMotor+0x104c>)
 8002e6e:	edd3 6a00 	vldr	s13, [r3]
 8002e72:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e76:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e7a:	4877      	ldr	r0, [pc, #476]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002e7c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e80:	eef0 0a47 	vmov.f32	s1, s14
 8002e84:	eeb0 1a67 	vmov.f32	s2, s15
 8002e88:	f004 ffbe 	bl	8007e08 <cal_mollifier_table>
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 8002e8c:	4b71      	ldr	r3, [pc, #452]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002e8e:	edd3 7a00 	vldr	s15, [r3]
 8002e92:	4b71      	ldr	r3, [pc, #452]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002e94:	ed93 7a00 	vldr	s14, [r3]
 8002e98:	f107 020c 	add.w	r2, r7, #12
 8002e9c:	f107 0310 	add.w	r3, r7, #16
 8002ea0:	eef0 0a47 	vmov.f32	s1, s14
 8002ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 fdee 	bl	8004a8c <EncoderGyro_PID>
		feedforward_const_accel(&feedforward_straight,(E_lpf_speedL+E_lpf_speedR)/2,
 8002eb0:	4b6b      	ldr	r3, [pc, #428]	; (8003060 <interupt_DriveMotor+0x1050>)
 8002eb2:	ed93 7a00 	vldr	s14, [r3]
 8002eb6:	4b6b      	ldr	r3, [pc, #428]	; (8003064 <interupt_DriveMotor+0x1054>)
 8002eb8:	edd3 7a00 	vldr	s15, [r3]
 8002ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002ec4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002ec8:	4b62      	ldr	r3, [pc, #392]	; (8003054 <interupt_DriveMotor+0x1044>)
 8002eca:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ece:	4b66      	ldr	r3, [pc, #408]	; (8003068 <interupt_DriveMotor+0x1058>)
 8002ed0:	edd3 6a00 	vldr	s13, [r3]
 8002ed4:	4b60      	ldr	r3, [pc, #384]	; (8003058 <interupt_DriveMotor+0x1048>)
 8002ed6:	ed93 6a01 	vldr	s12, [r3, #4]
 8002eda:	1d3a      	adds	r2, r7, #4
 8002edc:	f107 0308 	add.w	r3, r7, #8
 8002ee0:	eef0 1a46 	vmov.f32	s3, s12
 8002ee4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ee8:	4611      	mov	r1, r2
 8002eea:	eef0 0a67 	vmov.f32	s1, s15
 8002eee:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f001 faf4 	bl	80044e0 <feedforward_const_accel>
				straight.acceleration,&feedforward_turning,
					angle_speed,turning.acceleration);
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 8002ef8:	ed97 7a04 	vldr	s14, [r7, #16]
 8002efc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f04:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f14:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8002f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f34:	edc7 7a08 	vstr	s15, [r7, #32]
		if(PID_s+feedforward_straight>g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8002f38:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f44:	ee17 0a90 	vmov	r0, s15
 8002f48:	f7fd fb26 	bl	8000598 <__aeabi_f2d>
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	460d      	mov	r5, r1
 8002f50:	4b46      	ldr	r3, [pc, #280]	; (800306c <interupt_DriveMotor+0x105c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fd fb1f 	bl	8000598 <__aeabi_f2d>
 8002f5a:	a33b      	add	r3, pc, #236	; (adr r3, 8003048 <interupt_DriveMotor+0x1038>)
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f7fd fb72 	bl	8000648 <__aeabi_dmul>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	4620      	mov	r0, r4
 8002f6a:	4629      	mov	r1, r5
 8002f6c:	f7fd fdfc 	bl	8000b68 <__aeabi_dcmpgt>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d07d      	beq.n	8003072 <interupt_DriveMotor+0x1062>
			V_L+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002f76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f78:	f7fd fb0e 	bl	8000598 <__aeabi_f2d>
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	460d      	mov	r5, r1
 8002f80:	4b3a      	ldr	r3, [pc, #232]	; (800306c <interupt_DriveMotor+0x105c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fb07 	bl	8000598 <__aeabi_f2d>
 8002f8a:	a32f      	add	r3, pc, #188	; (adr r3, 8003048 <interupt_DriveMotor+0x1038>)
 8002f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f90:	f7fd fb5a 	bl	8000648 <__aeabi_dmul>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4690      	mov	r8, r2
 8002f9a:	4699      	mov	r9, r3
 8002f9c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fa8:	ee17 0a90 	vmov	r0, s15
 8002fac:	f7fd faf4 	bl	8000598 <__aeabi_f2d>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	4649      	mov	r1, r9
 8002fb8:	f7fd f98e 	bl	80002d8 <__aeabi_dsub>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	4629      	mov	r1, r5
 8002fc4:	f7fd f98a 	bl	80002dc <__adddf3>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	460b      	mov	r3, r1
 8002fcc:	4610      	mov	r0, r2
 8002fce:	4619      	mov	r1, r3
 8002fd0:	f7fd fe12 	bl	8000bf8 <__aeabi_d2f>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8002fd8:	6a38      	ldr	r0, [r7, #32]
 8002fda:	f7fd fadd 	bl	8000598 <__aeabi_f2d>
 8002fde:	4604      	mov	r4, r0
 8002fe0:	460d      	mov	r5, r1
 8002fe2:	4b22      	ldr	r3, [pc, #136]	; (800306c <interupt_DriveMotor+0x105c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7fd fad6 	bl	8000598 <__aeabi_f2d>
 8002fec:	a316      	add	r3, pc, #88	; (adr r3, 8003048 <interupt_DriveMotor+0x1038>)
 8002fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff2:	f7fd fb29 	bl	8000648 <__aeabi_dmul>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	4690      	mov	r8, r2
 8002ffc:	4699      	mov	r9, r3
 8002ffe:	ed97 7a04 	vldr	s14, [r7, #16]
 8003002:	edd7 7a02 	vldr	s15, [r7, #8]
 8003006:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300a:	ee17 0a90 	vmov	r0, s15
 800300e:	f7fd fac3 	bl	8000598 <__aeabi_f2d>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4640      	mov	r0, r8
 8003018:	4649      	mov	r1, r9
 800301a:	f7fd f95d 	bl	80002d8 <__aeabi_dsub>
 800301e:	4602      	mov	r2, r0
 8003020:	460b      	mov	r3, r1
 8003022:	4620      	mov	r0, r4
 8003024:	4629      	mov	r1, r5
 8003026:	f7fd f959 	bl	80002dc <__adddf3>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	f7fd fde1 	bl	8000bf8 <__aeabi_d2f>
 8003036:	4603      	mov	r3, r0
 8003038:	623b      	str	r3, [r7, #32]
 800303a:	e019      	b.n	8003070 <interupt_DriveMotor+0x1060>
 800303c:	f3af 8000 	nop.w
 8003040:	d2f1a9fc 	.word	0xd2f1a9fc
 8003044:	3f50624d 	.word	0x3f50624d
 8003048:	d916872b 	.word	0xd916872b
 800304c:	3feff7ce 	.word	0x3feff7ce
 8003050:	20000508 	.word	0x20000508
 8003054:	200004b8 	.word	0x200004b8
 8003058:	200004c4 	.word	0x200004c4
 800305c:	200004f8 	.word	0x200004f8
 8003060:	20000218 	.word	0x20000218
 8003064:	2000021c 	.word	0x2000021c
 8003068:	20000248 	.word	0x20000248
 800306c:	200004b4 	.word	0x200004b4
 8003070:	e08f      	b.n	8003192 <interupt_DriveMotor+0x1182>
		}else if(PID_s+feedforward_straight<-g_V_battery_mean*MAX_DUTY_RATIO_ST){
 8003072:	ed97 7a04 	vldr	s14, [r7, #16]
 8003076:	edd7 7a02 	vldr	s15, [r7, #8]
 800307a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307e:	ee17 0a90 	vmov	r0, s15
 8003082:	f7fd fa89 	bl	8000598 <__aeabi_f2d>
 8003086:	4604      	mov	r4, r0
 8003088:	460d      	mov	r5, r1
 800308a:	4b7b      	ldr	r3, [pc, #492]	; (8003278 <interupt_DriveMotor+0x1268>)
 800308c:	edd3 7a00 	vldr	s15, [r3]
 8003090:	eef1 7a67 	vneg.f32	s15, s15
 8003094:	ee17 3a90 	vmov	r3, s15
 8003098:	4618      	mov	r0, r3
 800309a:	f7fd fa7d 	bl	8000598 <__aeabi_f2d>
 800309e:	a374      	add	r3, pc, #464	; (adr r3, 8003270 <interupt_DriveMotor+0x1260>)
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f7fd fad0 	bl	8000648 <__aeabi_dmul>
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd fd3c 	bl	8000b2c <__aeabi_dcmplt>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d06b      	beq.n	8003192 <interupt_DriveMotor+0x1182>
			V_L+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 80030ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030bc:	f7fd fa6c 	bl	8000598 <__aeabi_f2d>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	4b6c      	ldr	r3, [pc, #432]	; (8003278 <interupt_DriveMotor+0x1268>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	eef1 7a67 	vneg.f32	s15, s15
 80030ce:	ee17 3a90 	vmov	r3, s15
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd fa60 	bl	8000598 <__aeabi_f2d>
 80030d8:	a365      	add	r3, pc, #404	; (adr r3, 8003270 <interupt_DriveMotor+0x1260>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd fab3 	bl	8000648 <__aeabi_dmul>
 80030e2:	4602      	mov	r2, r0
 80030e4:	460b      	mov	r3, r1
 80030e6:	4690      	mov	r8, r2
 80030e8:	4699      	mov	r9, r3
 80030ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80030ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030f6:	ee17 0a90 	vmov	r0, s15
 80030fa:	f7fd fa4d 	bl	8000598 <__aeabi_f2d>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4640      	mov	r0, r8
 8003104:	4649      	mov	r1, r9
 8003106:	f7fd f8e7 	bl	80002d8 <__aeabi_dsub>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4620      	mov	r0, r4
 8003110:	4629      	mov	r1, r5
 8003112:	f7fd f8e3 	bl	80002dc <__adddf3>
 8003116:	4602      	mov	r2, r0
 8003118:	460b      	mov	r3, r1
 800311a:	4610      	mov	r0, r2
 800311c:	4619      	mov	r1, r3
 800311e:	f7fd fd6b 	bl	8000bf8 <__aeabi_d2f>
 8003122:	4603      	mov	r3, r0
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
			V_R+=-g_V_battery_mean*MAX_DUTY_RATIO_ST-(PID_s+feedforward_straight);
 8003126:	6a38      	ldr	r0, [r7, #32]
 8003128:	f7fd fa36 	bl	8000598 <__aeabi_f2d>
 800312c:	4604      	mov	r4, r0
 800312e:	460d      	mov	r5, r1
 8003130:	4b51      	ldr	r3, [pc, #324]	; (8003278 <interupt_DriveMotor+0x1268>)
 8003132:	edd3 7a00 	vldr	s15, [r3]
 8003136:	eef1 7a67 	vneg.f32	s15, s15
 800313a:	ee17 3a90 	vmov	r3, s15
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fa2a 	bl	8000598 <__aeabi_f2d>
 8003144:	a34a      	add	r3, pc, #296	; (adr r3, 8003270 <interupt_DriveMotor+0x1260>)
 8003146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800314a:	f7fd fa7d 	bl	8000648 <__aeabi_dmul>
 800314e:	4602      	mov	r2, r0
 8003150:	460b      	mov	r3, r1
 8003152:	4690      	mov	r8, r2
 8003154:	4699      	mov	r9, r3
 8003156:	ed97 7a04 	vldr	s14, [r7, #16]
 800315a:	edd7 7a02 	vldr	s15, [r7, #8]
 800315e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003162:	ee17 0a90 	vmov	r0, s15
 8003166:	f7fd fa17 	bl	8000598 <__aeabi_f2d>
 800316a:	4602      	mov	r2, r0
 800316c:	460b      	mov	r3, r1
 800316e:	4640      	mov	r0, r8
 8003170:	4649      	mov	r1, r9
 8003172:	f7fd f8b1 	bl	80002d8 <__aeabi_dsub>
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	f7fd f8ad 	bl	80002dc <__adddf3>
 8003182:	4602      	mov	r2, r0
 8003184:	460b      	mov	r3, r1
 8003186:	4610      	mov	r0, r2
 8003188:	4619      	mov	r1, r3
 800318a:	f7fd fd35 	bl	8000bf8 <__aeabi_d2f>
 800318e:	4603      	mov	r3, r0
 8003190:	623b      	str	r3, [r7, #32]
		}
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003192:	f107 0214 	add.w	r2, r7, #20
 8003196:	f107 0318 	add.w	r3, r7, #24
 800319a:	4611      	mov	r1, r2
 800319c:	4618      	mov	r0, r3
 800319e:	edd7 0a08 	vldr	s1, [r7, #32]
 80031a2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80031a6:	f7fe fea9 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4611      	mov	r1, r2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f003 fe85 	bl	8006ec0 <pl_DriveMotor_duty>

	}if (modeacc == 100) {
 80031b6:	4b31      	ldr	r3, [pc, #196]	; (800327c <interupt_DriveMotor+0x126c>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d14b      	bne.n	8003256 <interupt_DriveMotor+0x1246>
		straight.velocity = 0;
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <interupt_DriveMotor+0x1270>)
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
		turning.velocity=0;
 80031c6:	4b2f      	ldr	r3, [pc, #188]	; (8003284 <interupt_DriveMotor+0x1274>)
 80031c8:	f04f 0200 	mov.w	r2, #0
 80031cc:	601a      	str	r2, [r3, #0]
		EncoderGyro_PID(&PID_s,&PID_t,straight.velocity,turning.velocity);
 80031ce:	4b2c      	ldr	r3, [pc, #176]	; (8003280 <interupt_DriveMotor+0x1270>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <interupt_DriveMotor+0x1274>)
 80031d6:	ed93 7a00 	vldr	s14, [r3]
 80031da:	f107 020c 	add.w	r2, r7, #12
 80031de:	f107 0310 	add.w	r3, r7, #16
 80031e2:	eef0 0a47 	vmov.f32	s1, s14
 80031e6:	eeb0 0a67 	vmov.f32	s0, s15
 80031ea:	4611      	mov	r1, r2
 80031ec:	4618      	mov	r0, r3
 80031ee:	f001 fc4d 	bl	8004a8c <EncoderGyro_PID>
		V_L = PID_s-PID_t+feedforward_straight-feedforward_turning;
 80031f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80031f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80031fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80031fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8003202:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003206:	edd7 7a01 	vldr	s15, [r7, #4]
 800320a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800320e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		V_R = PID_s+PID_t+feedforward_straight+feedforward_turning;
 8003212:	ed97 7a04 	vldr	s14, [r7, #16]
 8003216:	edd7 7a03 	vldr	s15, [r7, #12]
 800321a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800321e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003222:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003226:	edd7 7a01 	vldr	s15, [r7, #4]
 800322a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800322e:	edc7 7a08 	vstr	s15, [r7, #32]
		get_duty(V_L, V_R,&duty_L,&duty_R);
 8003232:	f107 0214 	add.w	r2, r7, #20
 8003236:	f107 0318 	add.w	r3, r7, #24
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	edd7 0a08 	vldr	s1, [r7, #32]
 8003242:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8003246:	f7fe fe59 	bl	8001efc <get_duty>
		pl_DriveMotor_duty(duty_L,duty_R);
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4611      	mov	r1, r2
 8003250:	4618      	mov	r0, r3
 8003252:	f003 fe35 	bl	8006ec0 <pl_DriveMotor_duty>
	}
		g_V_L=(float)(V_L);//V_L;
 8003256:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <interupt_DriveMotor+0x1278>)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	6013      	str	r3, [r2, #0]
		g_V_R=(float)(V_R);//V_R;
 800325c:	4a0b      	ldr	r2, [pc, #44]	; (800328c <interupt_DriveMotor+0x127c>)
 800325e:	6a3b      	ldr	r3, [r7, #32]
 8003260:	6013      	str	r3, [r2, #0]



}
 8003262:	bf00      	nop
 8003264:	3728      	adds	r7, #40	; 0x28
 8003266:	46bd      	mov	sp, r7
 8003268:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800326c:	f3af 8000 	nop.w
 8003270:	d916872b 	.word	0xd916872b
 8003274:	3feff7ce 	.word	0x3feff7ce
 8003278:	200004b4 	.word	0x200004b4
 800327c:	20000508 	.word	0x20000508
 8003280:	200004b8 	.word	0x200004b8
 8003284:	200004c4 	.word	0x200004c4
 8003288:	2000050c 	.word	0x2000050c
 800328c:	20000510 	.word	0x20000510

08003290 <straight_table2>:



float straight_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration,MOTOR_MODE motor_mode) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af00      	add	r7, sp, #0
 8003296:	ed87 0a05 	vstr	s0, [r7, #20]
 800329a:	edc7 0a04 	vstr	s1, [r7, #16]
 800329e:	ed87 1a03 	vstr	s2, [r7, #12]
 80032a2:	edc7 1a02 	vstr	s3, [r7, #8]
 80032a6:	ed87 2a01 	vstr	s4, [r7, #4]
 80032aa:	6038      	str	r0, [r7, #0]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80032ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80032b0:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80032b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80032b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032bc:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80032c0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80032c4:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80032c8:	ed97 7a01 	vldr	s14, [r7, #4]
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80032d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80032d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e0:	d505      	bpl.n	80032ee <straight_table2+0x5e>
 80032e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032e6:	eef1 7a67 	vneg.f32	s15, s15
 80032ea:	edc7 7a01 	vstr	s15, [r7, #4]
	if(noGoalPillarMode==1){
 80032ee:	4bb4      	ldr	r3, [pc, #720]	; (80035c0 <straight_table2+0x330>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <straight_table2+0x6a>
		motor_mode.WallCutMode=0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	70fb      	strb	r3, [r7, #3]
	}


	Trapezoid_straight.displacement = input_displacement;
 80032fa:	4ab2      	ldr	r2, [pc, #712]	; (80035c4 <straight_table2+0x334>)
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 8003300:	4ab0      	ldr	r2, [pc, #704]	; (80035c4 <straight_table2+0x334>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 8003306:	4aaf      	ldr	r2, [pc, #700]	; (80035c4 <straight_table2+0x334>)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 800330c:	4aad      	ldr	r2, [pc, #692]	; (80035c4 <straight_table2+0x334>)
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 8003312:	4aac      	ldr	r2, [pc, #688]	; (80035c4 <straight_table2+0x334>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003318:	edd7 7a02 	vldr	s15, [r7, #8]
 800331c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003324:	db03      	blt.n	800332e <straight_table2+0x9e>
 8003326:	4aa8      	ldr	r2, [pc, #672]	; (80035c8 <straight_table2+0x338>)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6053      	str	r3, [r2, #4]
 800332c:	e006      	b.n	800333c <straight_table2+0xac>
	}else{straight.acceleration = -input_acceleration;}
 800332e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003332:	eef1 7a67 	vneg.f32	s15, s15
 8003336:	4ba4      	ldr	r3, [pc, #656]	; (80035c8 <straight_table2+0x338>)
 8003338:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 800333c:	4aa2      	ldr	r2, [pc, #648]	; (80035c8 <straight_table2+0x338>)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 8003342:	4ba1      	ldr	r3, [pc, #644]	; (80035c8 <straight_table2+0x338>)
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 800334a:	4ba0      	ldr	r3, [pc, #640]	; (80035cc <straight_table2+0x33c>)
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 8003352:	4b9e      	ldr	r3, [pc, #632]	; (80035cc <straight_table2+0x33c>)
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 800335a:	4b9c      	ldr	r3, [pc, #624]	; (80035cc <straight_table2+0x33c>)
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003362:	4b9b      	ldr	r3, [pc, #620]	; (80035d0 <straight_table2+0x340>)
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003368:	4b9a      	ldr	r3, [pc, #616]	; (80035d4 <straight_table2+0x344>)
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800336e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	dd0e      	ble.n	800339a <straight_table2+0x10a>
 800337c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003380:	edd7 7a05 	vldr	s15, [r7, #20]
 8003384:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800338c:	dd05      	ble.n	800339a <straight_table2+0x10a>
 800338e:	4b91      	ldr	r3, [pc, #580]	; (80035d4 <straight_table2+0x344>)
 8003390:	2205      	movs	r2, #5
 8003392:	701a      	strb	r2, [r3, #0]
 8003394:	4a8c      	ldr	r2, [pc, #560]	; (80035c8 <straight_table2+0x338>)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800339a:	edd7 7a05 	vldr	s15, [r7, #20]
 800339e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	dd14      	ble.n	80033d2 <straight_table2+0x142>
 80033a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80033ac:	eef1 7a67 	vneg.f32	s15, s15
 80033b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80033b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033bc:	d509      	bpl.n	80033d2 <straight_table2+0x142>
 80033be:	4b85      	ldr	r3, [pc, #532]	; (80035d4 <straight_table2+0x344>)
 80033c0:	2206      	movs	r2, #6
 80033c2:	701a      	strb	r2, [r3, #0]
 80033c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80033c8:	eef1 7a67 	vneg.f32	s15, s15
 80033cc:	4b7e      	ldr	r3, [pc, #504]	; (80035c8 <straight_table2+0x338>)
 80033ce:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80033d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80033d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033de:	d514      	bpl.n	800340a <straight_table2+0x17a>
 80033e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80033e4:	eef1 7a67 	vneg.f32	s15, s15
 80033e8:	ed97 7a07 	vldr	s14, [r7, #28]
 80033ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f4:	dd09      	ble.n	800340a <straight_table2+0x17a>
 80033f6:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <straight_table2+0x344>)
 80033f8:	2205      	movs	r2, #5
 80033fa:	701a      	strb	r2, [r3, #0]
 80033fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003400:	eef1 7a67 	vneg.f32	s15, s15
 8003404:	4b70      	ldr	r3, [pc, #448]	; (80035c8 <straight_table2+0x338>)
 8003406:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800340a:	edd7 7a05 	vldr	s15, [r7, #20]
 800340e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003416:	d50e      	bpl.n	8003436 <straight_table2+0x1a6>
 8003418:	ed97 7a07 	vldr	s14, [r7, #28]
 800341c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003428:	d505      	bpl.n	8003436 <straight_table2+0x1a6>
 800342a:	4b6a      	ldr	r3, [pc, #424]	; (80035d4 <straight_table2+0x344>)
 800342c:	2206      	movs	r2, #6
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	4a65      	ldr	r2, [pc, #404]	; (80035c8 <straight_table2+0x338>)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 8003436:	4b68      	ldr	r3, [pc, #416]	; (80035d8 <straight_table2+0x348>)
 8003438:	2201      	movs	r2, #1
 800343a:	701a      	strb	r2, [r3, #0]
	g_WallControl_mode=motor_mode.WallControlMode;
 800343c:	783a      	ldrb	r2, [r7, #0]
 800343e:	4b67      	ldr	r3, [pc, #412]	; (80035dc <straight_table2+0x34c>)
 8003440:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 8003442:	f003 fd21 	bl	8006e88 <pl_DriveMotor_start>
	if(motor_mode.WallCutMode==1){
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	2b01      	cmp	r3, #1
 800344a:	f040 80d3 	bne.w	80035f4 <straight_table2+0x364>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 800344e:	4b64      	ldr	r3, [pc, #400]	; (80035e0 <straight_table2+0x350>)
 8003450:	f04f 0200 	mov.w	r2, #0
 8003454:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003456:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <straight_table2+0x344>)
 8003458:	2200      	movs	r2, #0
 800345a:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800345c:	4b5a      	ldr	r3, [pc, #360]	; (80035c8 <straight_table2+0x338>)
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003464:	bf00      	nop
 8003466:	4b5f      	ldr	r3, [pc, #380]	; (80035e4 <straight_table2+0x354>)
 8003468:	edd3 7a00 	vldr	s15, [r3]
 800346c:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8003470:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003478:	d409      	bmi.n	800348e <straight_table2+0x1fe>
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 800347a:	4b5a      	ldr	r3, [pc, #360]	; (80035e4 <straight_table2+0x354>)
 800347c:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR90<CUTPLACE_TO_CENTER_R90 ||
 8003480:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80035e8 <straight_table2+0x358>
 8003484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800348c:	dd18      	ble.n	80034c0 <straight_table2+0x230>
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 800348e:	4b57      	ldr	r3, [pc, #348]	; (80035ec <straight_table2+0x35c>)
 8003490:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R90) &&
 8003494:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8003498:	eef4 7ac7 	vcmpe.f32	s15, s14
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	d409      	bmi.n	80034b6 <straight_table2+0x226>
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80034a2:	4b52      	ldr	r3, [pc, #328]	; (80035ec <straight_table2+0x35c>)
 80034a4:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL90<CUTPLACE_TO_CENTER_L90 ||
 80034a8:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80035e8 <straight_table2+0x358>
 80034ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	dd04      	ble.n	80034c0 <straight_table2+0x230>
			  front_wall_break_90==0){}
 80034b6:	4b4e      	ldr	r3, [pc, #312]	; (80035f0 <straight_table2+0x360>)
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L90) &&
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d0d2      	beq.n	8003466 <straight_table2+0x1d6>
		straight.displacement=0;
 80034c0:	4b41      	ldr	r3, [pc, #260]	; (80035c8 <straight_table2+0x338>)
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80034c8:	edd7 7a02 	vldr	s15, [r7, #8]
 80034cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d4:	db03      	blt.n	80034de <straight_table2+0x24e>
 80034d6:	4a3c      	ldr	r2, [pc, #240]	; (80035c8 <straight_table2+0x338>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6053      	str	r3, [r2, #4]
 80034dc:	e006      	b.n	80034ec <straight_table2+0x25c>
			}else{straight.acceleration = -input_acceleration;}
 80034de:	edd7 7a01 	vldr	s15, [r7, #4]
 80034e2:	eef1 7a67 	vneg.f32	s15, s15
 80034e6:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <straight_table2+0x338>)
 80034e8:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80034ec:	4b39      	ldr	r3, [pc, #228]	; (80035d4 <straight_table2+0x344>)
 80034ee:	2201      	movs	r2, #1
 80034f0:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80034f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80034f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	dd0e      	ble.n	800351e <straight_table2+0x28e>
 8003500:	ed97 7a07 	vldr	s14, [r7, #28]
 8003504:	edd7 7a05 	vldr	s15, [r7, #20]
 8003508:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800350c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003510:	dd05      	ble.n	800351e <straight_table2+0x28e>
 8003512:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <straight_table2+0x344>)
 8003514:	2205      	movs	r2, #5
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <straight_table2+0x338>)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800351e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	dd14      	ble.n	8003556 <straight_table2+0x2c6>
 800352c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003530:	eef1 7a67 	vneg.f32	s15, s15
 8003534:	ed97 7a07 	vldr	s14, [r7, #28]
 8003538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d509      	bpl.n	8003556 <straight_table2+0x2c6>
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <straight_table2+0x344>)
 8003544:	2206      	movs	r2, #6
 8003546:	701a      	strb	r2, [r3, #0]
 8003548:	edd7 7a01 	vldr	s15, [r7, #4]
 800354c:	eef1 7a67 	vneg.f32	s15, s15
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <straight_table2+0x338>)
 8003552:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003556:	edd7 7a05 	vldr	s15, [r7, #20]
 800355a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d514      	bpl.n	800358e <straight_table2+0x2fe>
 8003564:	edd7 7a05 	vldr	s15, [r7, #20]
 8003568:	eef1 7a67 	vneg.f32	s15, s15
 800356c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003570:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	dd09      	ble.n	800358e <straight_table2+0x2fe>
 800357a:	4b16      	ldr	r3, [pc, #88]	; (80035d4 <straight_table2+0x344>)
 800357c:	2205      	movs	r2, #5
 800357e:	701a      	strb	r2, [r3, #0]
 8003580:	edd7 7a01 	vldr	s15, [r7, #4]
 8003584:	eef1 7a67 	vneg.f32	s15, s15
 8003588:	4b0f      	ldr	r3, [pc, #60]	; (80035c8 <straight_table2+0x338>)
 800358a:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800358e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	f140 825b 	bpl.w	8003a54 <straight_table2+0x7c4>
 800359e:	ed97 7a07 	vldr	s14, [r7, #28]
 80035a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80035a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ae:	f140 8251 	bpl.w	8003a54 <straight_table2+0x7c4>
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <straight_table2+0x344>)
 80035b4:	2206      	movs	r2, #6
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	4a03      	ldr	r2, [pc, #12]	; (80035c8 <straight_table2+0x338>)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6053      	str	r3, [r2, #4]
 80035be:	e249      	b.n	8003a54 <straight_table2+0x7c4>
 80035c0:	20000509 	.word	0x20000509
 80035c4:	200004d0 	.word	0x200004d0
 80035c8:	200004b8 	.word	0x200004b8
 80035cc:	200004c4 	.word	0x200004c4
 80035d0:	200007e5 	.word	0x200007e5
 80035d4:	200007e4 	.word	0x200007e4
 80035d8:	20000508 	.word	0x20000508
 80035dc:	20000570 	.word	0x20000570
 80035e0:	20000514 	.word	0x20000514
 80035e4:	200005ac 	.word	0x200005ac
 80035e8:	42dc0000 	.word	0x42dc0000
 80035ec:	200005b0 	.word	0x200005b0
 80035f0:	200005d2 	.word	0x200005d2
	}else if(motor_mode.WallCutMode==2){
 80035f4:	78fb      	ldrb	r3, [r7, #3]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	f040 80c9 	bne.w	800378e <straight_table2+0x4fe>
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 80035fc:	4bb8      	ldr	r3, [pc, #736]	; (80038e0 <straight_table2+0x650>)
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003604:	4bb7      	ldr	r3, [pc, #732]	; (80038e4 <straight_table2+0x654>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800360a:	4bb7      	ldr	r3, [pc, #732]	; (80038e8 <straight_table2+0x658>)
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 8003612:	bf00      	nop
 8003614:	4bb5      	ldr	r3, [pc, #724]	; (80038ec <straight_table2+0x65c>)
 8003616:	edd3 7a00 	vldr	s15, [r3]
 800361a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800361e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003622:	d913      	bls.n	800364c <straight_table2+0x3bc>
 8003624:	4bb1      	ldr	r3, [pc, #708]	; (80038ec <straight_table2+0x65c>)
 8003626:	edd3 7a00 	vldr	s15, [r3]
 800362a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	d909      	bls.n	800364c <straight_table2+0x3bc>
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003638:	4bac      	ldr	r3, [pc, #688]	; (80038ec <straight_table2+0x65c>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45<=0 || NoWallDisplacementR45<=CUTPLACE_TO_CENTER_R45 ||
 800363e:	ed9f 7aac 	vldr	s14, [pc, #688]	; 80038f0 <straight_table2+0x660>
 8003642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364a:	db20      	blt.n	800368e <straight_table2+0x3fe>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800364c:	4ba9      	ldr	r3, [pc, #676]	; (80038f4 <straight_table2+0x664>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
				NoWallDisplacementR45>=CUTPLACE_THRESHOLD_END_R45) &&
 8003652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800365a:	d913      	bls.n	8003684 <straight_table2+0x3f4>
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 800365c:	4ba5      	ldr	r3, [pc, #660]	; (80038f4 <straight_table2+0x664>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003666:	eef4 7ac7 	vcmpe.f32	s15, s14
 800366a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366e:	d909      	bls.n	8003684 <straight_table2+0x3f4>
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 8003670:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <straight_table2+0x664>)
 8003672:	edd3 7a00 	vldr	s15, [r3]
			  (NoWallDisplacementL45<=0 || NoWallDisplacementL45<=CUTPLACE_TO_CENTER_L45 ||
 8003676:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 80038f0 <straight_table2+0x660>
 800367a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	db04      	blt.n	800368e <straight_table2+0x3fe>
			  front_wall_break_45==0){}
 8003684:	4b9c      	ldr	r3, [pc, #624]	; (80038f8 <straight_table2+0x668>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45>=CUTPLACE_THRESHOLD_END_L45) &&
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0c2      	beq.n	8003614 <straight_table2+0x384>
//		while((NoWallDisplacementR90<=0 ||
//				NoWallDisplacementR90>CUTPLACE_THRESHOLD_END_R45) &&
//				(NoWallDisplacementL90<=0 ||
//			  NoWallDisplacementL90>CUTPLACE_THRESHOLD_END_L45) &&
//			  front_wall_break_90==0){}
		straight.displacement=0;
 800368e:	4b96      	ldr	r3, [pc, #600]	; (80038e8 <straight_table2+0x658>)
 8003690:	f04f 0200 	mov.w	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003696:	edd7 7a02 	vldr	s15, [r7, #8]
 800369a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800369e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a2:	db03      	blt.n	80036ac <straight_table2+0x41c>
 80036a4:	4a90      	ldr	r2, [pc, #576]	; (80038e8 <straight_table2+0x658>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6053      	str	r3, [r2, #4]
 80036aa:	e006      	b.n	80036ba <straight_table2+0x42a>
			}else{straight.acceleration = -input_acceleration;}
 80036ac:	edd7 7a01 	vldr	s15, [r7, #4]
 80036b0:	eef1 7a67 	vneg.f32	s15, s15
 80036b4:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <straight_table2+0x658>)
 80036b6:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 80036ba:	4b8a      	ldr	r3, [pc, #552]	; (80038e4 <straight_table2+0x654>)
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 80036c0:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036cc:	dd0e      	ble.n	80036ec <straight_table2+0x45c>
 80036ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80036d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80036d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	dd05      	ble.n	80036ec <straight_table2+0x45c>
 80036e0:	4b80      	ldr	r3, [pc, #512]	; (80038e4 <straight_table2+0x654>)
 80036e2:	2205      	movs	r2, #5
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	4a80      	ldr	r2, [pc, #512]	; (80038e8 <straight_table2+0x658>)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f8:	dd14      	ble.n	8003724 <straight_table2+0x494>
 80036fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80036fe:	eef1 7a67 	vneg.f32	s15, s15
 8003702:	ed97 7a07 	vldr	s14, [r7, #28]
 8003706:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800370a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370e:	d509      	bpl.n	8003724 <straight_table2+0x494>
 8003710:	4b74      	ldr	r3, [pc, #464]	; (80038e4 <straight_table2+0x654>)
 8003712:	2206      	movs	r2, #6
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	edd7 7a01 	vldr	s15, [r7, #4]
 800371a:	eef1 7a67 	vneg.f32	s15, s15
 800371e:	4b72      	ldr	r3, [pc, #456]	; (80038e8 <straight_table2+0x658>)
 8003720:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003724:	edd7 7a05 	vldr	s15, [r7, #20]
 8003728:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800372c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003730:	d514      	bpl.n	800375c <straight_table2+0x4cc>
 8003732:	edd7 7a05 	vldr	s15, [r7, #20]
 8003736:	eef1 7a67 	vneg.f32	s15, s15
 800373a:	ed97 7a07 	vldr	s14, [r7, #28]
 800373e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003746:	dd09      	ble.n	800375c <straight_table2+0x4cc>
 8003748:	4b66      	ldr	r3, [pc, #408]	; (80038e4 <straight_table2+0x654>)
 800374a:	2205      	movs	r2, #5
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003752:	eef1 7a67 	vneg.f32	s15, s15
 8003756:	4b64      	ldr	r3, [pc, #400]	; (80038e8 <straight_table2+0x658>)
 8003758:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 800375c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003760:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003768:	f140 8174 	bpl.w	8003a54 <straight_table2+0x7c4>
 800376c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003770:	edd7 7a05 	vldr	s15, [r7, #20]
 8003774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800377c:	f140 816a 	bpl.w	8003a54 <straight_table2+0x7c4>
 8003780:	4b58      	ldr	r3, [pc, #352]	; (80038e4 <straight_table2+0x654>)
 8003782:	2206      	movs	r2, #6
 8003784:	701a      	strb	r2, [r3, #0]
 8003786:	4a58      	ldr	r2, [pc, #352]	; (80038e8 <straight_table2+0x658>)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6053      	str	r3, [r2, #4]
 800378c:	e162      	b.n	8003a54 <straight_table2+0x7c4>
	}else if(motor_mode.WallCutMode==3){
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	2b03      	cmp	r3, #3
 8003792:	f040 80b9 	bne.w	8003908 <straight_table2+0x678>
		//斜めの右旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003796:	4b52      	ldr	r3, [pc, #328]	; (80038e0 <straight_table2+0x650>)
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 800379e:	4b51      	ldr	r3, [pc, #324]	; (80038e4 <straight_table2+0x654>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 80037a4:	4b50      	ldr	r3, [pc, #320]	; (80038e8 <straight_table2+0x658>)
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80037ac:	bf00      	nop
 80037ae:	4b53      	ldr	r3, [pc, #332]	; (80038fc <straight_table2+0x66c>)
 80037b0:	edd3 7a00 	vldr	s15, [r3]
 80037b4:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80037b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d409      	bmi.n	80037d6 <straight_table2+0x546>
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80037c2:	4b4e      	ldr	r3, [pc, #312]	; (80038fc <straight_table2+0x66c>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementR45slant2<CUTPLACE_TO_CENTER_R45_SLANT ||
 80037c8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8003900 <straight_table2+0x670>
 80037cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	dd04      	ble.n	80037e0 <straight_table2+0x550>
				  front_wall_break_45slant==0){}
 80037d6:	4b4b      	ldr	r3, [pc, #300]	; (8003904 <straight_table2+0x674>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	b2db      	uxtb	r3, r3
				NoWallDisplacementR45slant2>CUTPLACE_THRESHOLD_END_R45_SLANT) &&
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d0e6      	beq.n	80037ae <straight_table2+0x51e>
		straight.displacement=0;
 80037e0:	4b41      	ldr	r3, [pc, #260]	; (80038e8 <straight_table2+0x658>)
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80037e8:	edd7 7a02 	vldr	s15, [r7, #8]
 80037ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	db03      	blt.n	80037fe <straight_table2+0x56e>
 80037f6:	4a3c      	ldr	r2, [pc, #240]	; (80038e8 <straight_table2+0x658>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6053      	str	r3, [r2, #4]
 80037fc:	e006      	b.n	800380c <straight_table2+0x57c>
			}else{straight.acceleration = -input_acceleration;}
 80037fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8003802:	eef1 7a67 	vneg.f32	s15, s15
 8003806:	4b38      	ldr	r3, [pc, #224]	; (80038e8 <straight_table2+0x658>)
 8003808:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 800380c:	4b35      	ldr	r3, [pc, #212]	; (80038e4 <straight_table2+0x654>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8003812:	edd7 7a05 	vldr	s15, [r7, #20]
 8003816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	dd0e      	ble.n	800383e <straight_table2+0x5ae>
 8003820:	ed97 7a07 	vldr	s14, [r7, #28]
 8003824:	edd7 7a05 	vldr	s15, [r7, #20]
 8003828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800382c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003830:	dd05      	ble.n	800383e <straight_table2+0x5ae>
 8003832:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <straight_table2+0x654>)
 8003834:	2205      	movs	r2, #5
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <straight_table2+0x658>)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 800383e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384a:	dd14      	ble.n	8003876 <straight_table2+0x5e6>
 800384c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003850:	eef1 7a67 	vneg.f32	s15, s15
 8003854:	ed97 7a07 	vldr	s14, [r7, #28]
 8003858:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800385c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003860:	d509      	bpl.n	8003876 <straight_table2+0x5e6>
 8003862:	4b20      	ldr	r3, [pc, #128]	; (80038e4 <straight_table2+0x654>)
 8003864:	2206      	movs	r2, #6
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	edd7 7a01 	vldr	s15, [r7, #4]
 800386c:	eef1 7a67 	vneg.f32	s15, s15
 8003870:	4b1d      	ldr	r3, [pc, #116]	; (80038e8 <straight_table2+0x658>)
 8003872:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 8003876:	edd7 7a05 	vldr	s15, [r7, #20]
 800387a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800387e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003882:	d514      	bpl.n	80038ae <straight_table2+0x61e>
 8003884:	edd7 7a05 	vldr	s15, [r7, #20]
 8003888:	eef1 7a67 	vneg.f32	s15, s15
 800388c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003898:	dd09      	ble.n	80038ae <straight_table2+0x61e>
 800389a:	4b12      	ldr	r3, [pc, #72]	; (80038e4 <straight_table2+0x654>)
 800389c:	2205      	movs	r2, #5
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80038a4:	eef1 7a67 	vneg.f32	s15, s15
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <straight_table2+0x658>)
 80038aa:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80038ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80038b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ba:	f140 80cb 	bpl.w	8003a54 <straight_table2+0x7c4>
 80038be:	ed97 7a07 	vldr	s14, [r7, #28]
 80038c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80038c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ce:	f140 80c1 	bpl.w	8003a54 <straight_table2+0x7c4>
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <straight_table2+0x654>)
 80038d4:	2206      	movs	r2, #6
 80038d6:	701a      	strb	r2, [r3, #0]
 80038d8:	4a03      	ldr	r2, [pc, #12]	; (80038e8 <straight_table2+0x658>)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	e0b9      	b.n	8003a54 <straight_table2+0x7c4>
 80038e0:	20000514 	.word	0x20000514
 80038e4:	200007e4 	.word	0x200007e4
 80038e8:	200004b8 	.word	0x200004b8
 80038ec:	200005b4 	.word	0x200005b4
 80038f0:	42820000 	.word	0x42820000
 80038f4:	200005b8 	.word	0x200005b8
 80038f8:	200005d3 	.word	0x200005d3
 80038fc:	200005c4 	.word	0x200005c4
 8003900:	428c0000 	.word	0x428c0000
 8003904:	200005d4 	.word	0x200005d4
	}else if(motor_mode.WallCutMode==4){
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	2b04      	cmp	r3, #4
 800390c:	f040 80a2 	bne.w	8003a54 <straight_table2+0x7c4>
		//斜めの左旋回
		//左壁or右壁がstart～endの中にあれば抜ける
		enc.sigma_error=0;
 8003910:	4ba6      	ldr	r3, [pc, #664]	; (8003bac <straight_table2+0x91c>)
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
		g_acc_flag=0;
 8003918:	4ba5      	ldr	r3, [pc, #660]	; (8003bb0 <straight_table2+0x920>)
 800391a:	2200      	movs	r2, #0
 800391c:	701a      	strb	r2, [r3, #0]
		straight.acceleration = 0;
 800391e:	4ba5      	ldr	r3, [pc, #660]	; (8003bb4 <straight_table2+0x924>)
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	605a      	str	r2, [r3, #4]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003926:	bf00      	nop
 8003928:	4ba3      	ldr	r3, [pc, #652]	; (8003bb8 <straight_table2+0x928>)
 800392a:	edd3 7a00 	vldr	s15, [r3]
 800392e:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800393a:	d409      	bmi.n	8003950 <straight_table2+0x6c0>
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 800393c:	4b9e      	ldr	r3, [pc, #632]	; (8003bb8 <straight_table2+0x928>)
 800393e:	edd3 7a00 	vldr	s15, [r3]
		while((NoWallDisplacementL45slant2<CUTPLACE_TO_CENTER_L45_SLANT ||
 8003942:	ed9f 7a9e 	vldr	s14, [pc, #632]	; 8003bbc <straight_table2+0x92c>
 8003946:	eef4 7ac7 	vcmpe.f32	s15, s14
 800394a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394e:	dd04      	ble.n	800395a <straight_table2+0x6ca>
				  front_wall_break_45slant==0){}
 8003950:	4b9b      	ldr	r3, [pc, #620]	; (8003bc0 <straight_table2+0x930>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b2db      	uxtb	r3, r3
			  NoWallDisplacementL45slant2>CUTPLACE_THRESHOLD_END_L45_SLANT) &&
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0e6      	beq.n	8003928 <straight_table2+0x698>
		straight.displacement=0;
 800395a:	4b96      	ldr	r3, [pc, #600]	; (8003bb4 <straight_table2+0x924>)
 800395c:	f04f 0200 	mov.w	r2, #0
 8003960:	609a      	str	r2, [r3, #8]
		if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 8003962:	edd7 7a02 	vldr	s15, [r7, #8]
 8003966:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800396a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396e:	db03      	blt.n	8003978 <straight_table2+0x6e8>
 8003970:	4a90      	ldr	r2, [pc, #576]	; (8003bb4 <straight_table2+0x924>)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6053      	str	r3, [r2, #4]
 8003976:	e006      	b.n	8003986 <straight_table2+0x6f6>
			}else{straight.acceleration = -input_acceleration;}
 8003978:	edd7 7a01 	vldr	s15, [r7, #4]
 800397c:	eef1 7a67 	vneg.f32	s15, s15
 8003980:	4b8c      	ldr	r3, [pc, #560]	; (8003bb4 <straight_table2+0x924>)
 8003982:	edc3 7a01 	vstr	s15, [r3, #4]
		g_acc_flag=1;
 8003986:	4b8a      	ldr	r3, [pc, #552]	; (8003bb0 <straight_table2+0x920>)
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 800398c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003998:	dd0e      	ble.n	80039b8 <straight_table2+0x728>
 800399a:	ed97 7a07 	vldr	s14, [r7, #28]
 800399e:	edd7 7a05 	vldr	s15, [r7, #20]
 80039a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039aa:	dd05      	ble.n	80039b8 <straight_table2+0x728>
 80039ac:	4b80      	ldr	r3, [pc, #512]	; (8003bb0 <straight_table2+0x920>)
 80039ae:	2205      	movs	r2, #5
 80039b0:	701a      	strb	r2, [r3, #0]
 80039b2:	4a80      	ldr	r2, [pc, #512]	; (8003bb4 <straight_table2+0x924>)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 80039b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80039bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c4:	dd14      	ble.n	80039f0 <straight_table2+0x760>
 80039c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80039ca:	eef1 7a67 	vneg.f32	s15, s15
 80039ce:	ed97 7a07 	vldr	s14, [r7, #28]
 80039d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039da:	d509      	bpl.n	80039f0 <straight_table2+0x760>
 80039dc:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <straight_table2+0x920>)
 80039de:	2206      	movs	r2, #6
 80039e0:	701a      	strb	r2, [r3, #0]
 80039e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80039e6:	eef1 7a67 	vneg.f32	s15, s15
 80039ea:	4b72      	ldr	r3, [pc, #456]	; (8003bb4 <straight_table2+0x924>)
 80039ec:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 80039f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80039f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039fc:	d514      	bpl.n	8003a28 <straight_table2+0x798>
 80039fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a02:	eef1 7a67 	vneg.f32	s15, s15
 8003a06:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a12:	dd09      	ble.n	8003a28 <straight_table2+0x798>
 8003a14:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <straight_table2+0x920>)
 8003a16:	2205      	movs	r2, #5
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a1e:	eef1 7a67 	vneg.f32	s15, s15
 8003a22:	4b64      	ldr	r3, [pc, #400]	; (8003bb4 <straight_table2+0x924>)
 8003a24:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 8003a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d50e      	bpl.n	8003a54 <straight_table2+0x7c4>
 8003a36:	ed97 7a07 	vldr	s14, [r7, #28]
 8003a3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d505      	bpl.n	8003a54 <straight_table2+0x7c4>
 8003a48:	4b59      	ldr	r3, [pc, #356]	; (8003bb0 <straight_table2+0x920>)
 8003a4a:	2206      	movs	r2, #6
 8003a4c:	701a      	strb	r2, [r3, #0]
 8003a4e:	4a59      	ldr	r2, [pc, #356]	; (8003bb4 <straight_table2+0x924>)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6053      	str	r3, [r2, #4]
	}

	if(motor_mode.calMazeMode==0){
 8003a54:	78bb      	ldrb	r3, [r7, #2]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 809e 	bne.w	8003b98 <straight_table2+0x908>
	while (g_acc_flag!=4){
 8003a5c:	e074      	b.n	8003b48 <straight_table2+0x8b8>
		if(motor_mode.WallCutMode==1){
 8003a5e:	78fb      	ldrb	r3, [r7, #3]
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d120      	bne.n	8003aa6 <straight_table2+0x816>
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a68:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8003a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a70:	4b54      	ldr	r3, [pc, #336]	; (8003bc4 <straight_table2+0x934>)
 8003a72:	edd3 7a00 	vldr	s15, [r3]
 8003a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7e:	d90e      	bls.n	8003a9e <straight_table2+0x80e>
			   NoWallDisplacementR90>=input_displacement+CUTPLACE_TO_CENTER_R90)){
 8003a80:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a84:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 8003a88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a8c:	4b4e      	ldr	r3, [pc, #312]	; (8003bc8 <straight_table2+0x938>)
 8003a8e:	edd3 7a00 	vldr	s15, [r3]
			if((NoWallDisplacementL90>=input_displacement+CUTPLACE_TO_CENTER_L90 ||
 8003a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	d900      	bls.n	8003a9e <straight_table2+0x80e>
 8003a9c:	e054      	b.n	8003b48 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003a9e:	4b44      	ldr	r3, [pc, #272]	; (8003bb0 <straight_table2+0x920>)
 8003aa0:	2204      	movs	r2, #4
 8003aa2:	701a      	strb	r2, [r3, #0]
				break;
 8003aa4:	e055      	b.n	8003b52 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==2){
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d121      	bne.n	8003af0 <straight_table2+0x860>
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003aac:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ab0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8003ab4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ab8:	4b44      	ldr	r3, [pc, #272]	; (8003bcc <straight_table2+0x93c>)
 8003aba:	edd3 7a00 	vldr	s15, [r3]
 8003abe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac6:	d900      	bls.n	8003aca <straight_table2+0x83a>
 8003ac8:	e03e      	b.n	8003b48 <straight_table2+0x8b8>
			   NoWallDisplacementR45>=input_displacement+CUTPLACE_TO_CENTER_R45 ){
 8003aca:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ace:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad6:	4b3e      	ldr	r3, [pc, #248]	; (8003bd0 <straight_table2+0x940>)
 8003ad8:	edd3 7a00 	vldr	s15, [r3]
			if(NoWallDisplacementL45>=input_displacement+CUTPLACE_TO_CENTER_L45 &&
 8003adc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ae4:	d900      	bls.n	8003ae8 <straight_table2+0x858>
 8003ae6:	e02f      	b.n	8003b48 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003ae8:	4b31      	ldr	r3, [pc, #196]	; (8003bb0 <straight_table2+0x920>)
 8003aea:	2204      	movs	r2, #4
 8003aec:	701a      	strb	r2, [r3, #0]
				break;
 8003aee:	e030      	b.n	8003b52 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==3){
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	2b03      	cmp	r3, #3
 8003af4:	d112      	bne.n	8003b1c <straight_table2+0x88c>
			if(NoWallDisplacementR45slant2>=input_displacement+CUTPLACE_TO_CENTER_R45_SLANT ){
 8003af6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003afa:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8003afe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b02:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <straight_table2+0x944>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b10:	d900      	bls.n	8003b14 <straight_table2+0x884>
 8003b12:	e019      	b.n	8003b48 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003b14:	4b26      	ldr	r3, [pc, #152]	; (8003bb0 <straight_table2+0x920>)
 8003b16:	2204      	movs	r2, #4
 8003b18:	701a      	strb	r2, [r3, #0]
				break;
 8003b1a:	e01a      	b.n	8003b52 <straight_table2+0x8c2>
			}
		}else if(motor_mode.WallCutMode==4){
 8003b1c:	78fb      	ldrb	r3, [r7, #3]
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	d112      	bne.n	8003b48 <straight_table2+0x8b8>
			if(NoWallDisplacementL45slant2>=input_displacement+CUTPLACE_TO_CENTER_L45_SLANT){
 8003b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b26:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8003b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <straight_table2+0x928>)
 8003b30:	edd3 7a00 	vldr	s15, [r3]
 8003b34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3c:	d900      	bls.n	8003b40 <straight_table2+0x8b0>
 8003b3e:	e003      	b.n	8003b48 <straight_table2+0x8b8>
				g_acc_flag=4;
 8003b40:	4b1b      	ldr	r3, [pc, #108]	; (8003bb0 <straight_table2+0x920>)
 8003b42:	2204      	movs	r2, #4
 8003b44:	701a      	strb	r2, [r3, #0]
				break;
 8003b46:	e004      	b.n	8003b52 <straight_table2+0x8c2>
	while (g_acc_flag!=4){
 8003b48:	4b19      	ldr	r3, [pc, #100]	; (8003bb0 <straight_table2+0x920>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d185      	bne.n	8003a5e <straight_table2+0x7ce>
			}
		}

	}
	if(input_end_velocity==0){//BREAK
 8003b52:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b56:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b5e:	d105      	bne.n	8003b6c <straight_table2+0x8dc>
		wait_ms_NoReset(100);
 8003b60:	2064      	movs	r0, #100	; 0x64
 8003b62:	f003 fc3d 	bl	80073e0 <wait_ms_NoReset>
		modeacc = 0;
 8003b66:	4b1c      	ldr	r3, [pc, #112]	; (8003bd8 <straight_table2+0x948>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <straight_table2+0x94c>)
 8003b6e:	ed93 7a00 	vldr	s14, [r3]
 8003b72:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b7a:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <straight_table2+0x94c>)
 8003b7c:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8003b80:	4b17      	ldr	r3, [pc, #92]	; (8003be0 <straight_table2+0x950>)
 8003b82:	ed93 7a00 	vldr	s14, [r3]
 8003b86:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b8e:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <straight_table2+0x950>)
 8003b90:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8003b94:	f003 f986 	bl	8006ea4 <pl_DriveMotor_stop>

	}

	return straight.velocity;
 8003b98:	4b06      	ldr	r3, [pc, #24]	; (8003bb4 <straight_table2+0x924>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	ee07 3a90 	vmov	s15, r3



}
 8003ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8003ba4:	3720      	adds	r7, #32
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	bf00      	nop
 8003bac:	20000514 	.word	0x20000514
 8003bb0:	200007e4 	.word	0x200007e4
 8003bb4:	200004b8 	.word	0x200004b8
 8003bb8:	200005c8 	.word	0x200005c8
 8003bbc:	428c0000 	.word	0x428c0000
 8003bc0:	200005d4 	.word	0x200005d4
 8003bc4:	200005b0 	.word	0x200005b0
 8003bc8:	200005ac 	.word	0x200005ac
 8003bcc:	200005b8 	.word	0x200005b8
 8003bd0:	200005b4 	.word	0x200005b4
 8003bd4:	200005c4 	.word	0x200005c4
 8003bd8:	20000508 	.word	0x20000508
 8003bdc:	20000200 	.word	0x20000200
 8003be0:	20000204 	.word	0x20000204

08003be4 <turning_table2>:
	E_distanceR = E_distanceR - input_displacement;
	pl_DriveMotor_stop();//これは必要か？
}

float turning_table2(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	ed87 0a05 	vstr	s0, [r7, #20]
 8003bee:	edc7 0a04 	vstr	s1, [r7, #16]
 8003bf2:	ed87 1a03 	vstr	s2, [r7, #12]
 8003bf6:	edc7 1a02 	vstr	s3, [r7, #8]
 8003bfa:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8003bfe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c02:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 8003c06:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c0a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8003c12:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8003c16:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 8003c1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8003c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c22:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 8003c26:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c32:	d505      	bpl.n	8003c40 <turning_table2+0x5c>
 8003c34:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c38:	eef1 7a67 	vneg.f32	s15, s15
 8003c3c:	edc7 7a01 	vstr	s15, [r7, #4]

	Trapezoid_turning.displacement = input_displacement;
 8003c40:	4a65      	ldr	r2, [pc, #404]	; (8003dd8 <turning_table2+0x1f4>)
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 8003c46:	4a64      	ldr	r2, [pc, #400]	; (8003dd8 <turning_table2+0x1f4>)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8003c4c:	4a62      	ldr	r2, [pc, #392]	; (8003dd8 <turning_table2+0x1f4>)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8003c52:	4a61      	ldr	r2, [pc, #388]	; (8003dd8 <turning_table2+0x1f4>)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 8003c58:	4a5f      	ldr	r2, [pc, #380]	; (8003dd8 <turning_table2+0x1f4>)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8003c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c62:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c6a:	db03      	blt.n	8003c74 <turning_table2+0x90>
 8003c6c:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <turning_table2+0x1f8>)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6053      	str	r3, [r2, #4]
 8003c72:	e006      	b.n	8003c82 <turning_table2+0x9e>
	}else{turning.acceleration = -input_acceleration;}
 8003c74:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c78:	eef1 7a67 	vneg.f32	s15, s15
 8003c7c:	4b57      	ldr	r3, [pc, #348]	; (8003ddc <turning_table2+0x1f8>)
 8003c7e:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8003c82:	4a56      	ldr	r2, [pc, #344]	; (8003ddc <turning_table2+0x1f8>)
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 8003c88:	4b54      	ldr	r3, [pc, #336]	; (8003ddc <turning_table2+0x1f8>)
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <turning_table2+0x1fc>)
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003c98:	4b51      	ldr	r3, [pc, #324]	; (8003de0 <turning_table2+0x1fc>)
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ca0:	4b4f      	ldr	r3, [pc, #316]	; (8003de0 <turning_table2+0x1fc>)
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003ca8:	4b4e      	ldr	r3, [pc, #312]	; (8003de4 <turning_table2+0x200>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003cae:	4b4e      	ldr	r3, [pc, #312]	; (8003de8 <turning_table2+0x204>)
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8003cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc0:	dd0e      	ble.n	8003ce0 <turning_table2+0xfc>
 8003cc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cc6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cd2:	dd05      	ble.n	8003ce0 <turning_table2+0xfc>
 8003cd4:	4b44      	ldr	r3, [pc, #272]	; (8003de8 <turning_table2+0x204>)
 8003cd6:	2205      	movs	r2, #5
 8003cd8:	701a      	strb	r2, [r3, #0]
 8003cda:	4a40      	ldr	r2, [pc, #256]	; (8003ddc <turning_table2+0x1f8>)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 8003ce0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cec:	dd14      	ble.n	8003d18 <turning_table2+0x134>
 8003cee:	edd7 7a05 	vldr	s15, [r7, #20]
 8003cf2:	eef1 7a67 	vneg.f32	s15, s15
 8003cf6:	ed97 7a07 	vldr	s14, [r7, #28]
 8003cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d02:	d509      	bpl.n	8003d18 <turning_table2+0x134>
 8003d04:	4b38      	ldr	r3, [pc, #224]	; (8003de8 <turning_table2+0x204>)
 8003d06:	2206      	movs	r2, #6
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d0e:	eef1 7a67 	vneg.f32	s15, s15
 8003d12:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <turning_table2+0x1f8>)
 8003d14:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 8003d18:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d24:	d514      	bpl.n	8003d50 <turning_table2+0x16c>
 8003d26:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d2a:	eef1 7a67 	vneg.f32	s15, s15
 8003d2e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d3a:	dd09      	ble.n	8003d50 <turning_table2+0x16c>
 8003d3c:	4b2a      	ldr	r3, [pc, #168]	; (8003de8 <turning_table2+0x204>)
 8003d3e:	2205      	movs	r2, #5
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d46:	eef1 7a67 	vneg.f32	s15, s15
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <turning_table2+0x1f8>)
 8003d4c:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8003d50:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d5c:	d50e      	bpl.n	8003d7c <turning_table2+0x198>
 8003d5e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003d62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	d505      	bpl.n	8003d7c <turning_table2+0x198>
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <turning_table2+0x204>)
 8003d72:	2206      	movs	r2, #6
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	4a19      	ldr	r2, [pc, #100]	; (8003ddc <turning_table2+0x1f8>)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8003d7c:	4b1b      	ldr	r3, [pc, #108]	; (8003dec <turning_table2+0x208>)
 8003d7e:	2202      	movs	r2, #2
 8003d80:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003d82:	f003 f881 	bl	8006e88 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003d86:	bf00      	nop
 8003d88:	4b17      	ldr	r3, [pc, #92]	; (8003de8 <turning_table2+0x204>)
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d1fa      	bne.n	8003d88 <turning_table2+0x1a4>

	}
	if(input_end_velocity==0){//BREAK
 8003d92:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d96:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9e:	d106      	bne.n	8003dae <turning_table2+0x1ca>
		wait_ms_NoReset(300);
 8003da0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003da4:	f003 fb1c 	bl	80073e0 <wait_ms_NoReset>
		modeacc = 0;
 8003da8:	4b10      	ldr	r3, [pc, #64]	; (8003dec <turning_table2+0x208>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <turning_table2+0x20c>)
 8003db0:	ed93 7a00 	vldr	s14, [r3]
 8003db4:	edd7 7a05 	vldr	s15, [r7, #20]
 8003db8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dbc:	4b0c      	ldr	r3, [pc, #48]	; (8003df0 <turning_table2+0x20c>)
 8003dbe:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003dc2:	f003 f86f 	bl	8006ea4 <pl_DriveMotor_stop>

	return turning.velocity;
 8003dc6:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <turning_table2+0x1f8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	ee07 3a90 	vmov	s15, r3
}
 8003dce:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd2:	3720      	adds	r7, #32
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	200004e4 	.word	0x200004e4
 8003ddc:	200004c4 	.word	0x200004c4
 8003de0:	200004b8 	.word	0x200004b8
 8003de4:	200007e5 	.word	0x200007e5
 8003de8:	200007e4 	.word	0x200007e4
 8003dec:	20000508 	.word	0x20000508
 8003df0:	20000244 	.word	0x20000244

08003df4 <no_angle>:
	pl_DriveMotor_stop();

	return turning.velocity;
}

void no_angle(void){
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003df8:	4b1c      	ldr	r3, [pc, #112]	; (8003e6c <no_angle+0x78>)
 8003dfa:	f04f 0200 	mov.w	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003e00:	4b1a      	ldr	r3, [pc, #104]	; (8003e6c <no_angle+0x78>)
 8003e02:	f04f 0200 	mov.w	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <no_angle+0x78>)
 8003e0a:	f04f 0200 	mov.w	r2, #0
 8003e0e:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003e10:	4b17      	ldr	r3, [pc, #92]	; (8003e70 <no_angle+0x7c>)
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003e18:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <no_angle+0x7c>)
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003e20:	4b13      	ldr	r3, [pc, #76]	; (8003e70 <no_angle+0x7c>)
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	609a      	str	r2, [r3, #8]

	modeacc = 3;
 8003e28:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <no_angle+0x80>)
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003e2e:	f003 f82b 	bl	8006e88 <pl_DriveMotor_start>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e32:	e002      	b.n	8003e3a <no_angle+0x46>
		HAL_Delay(1);
 8003e34:	2001      	movs	r0, #1
 8003e36:	f006 ff33 	bl	800aca0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8003e3a:	4b0f      	ldr	r3, [pc, #60]	; (8003e78 <no_angle+0x84>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e42:	ddf7      	ble.n	8003e34 <no_angle+0x40>
 8003e44:	4b0c      	ldr	r3, [pc, #48]	; (8003e78 <no_angle+0x84>)
 8003e46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e4a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e4e:	ddf1      	ble.n	8003e34 <no_angle+0x40>
 8003e50:	4b09      	ldr	r3, [pc, #36]	; (8003e78 <no_angle+0x84>)
 8003e52:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8003e56:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8003e5a:	ddeb      	ble.n	8003e34 <no_angle+0x40>
//		if(record_time >= max_record_time){
//			break;
//		}
	}
	modeacc = 0;
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <no_angle+0x80>)
 8003e5e:	2200      	movs	r2, #0
 8003e60:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003e62:	f003 f81f 	bl	8006ea4 <pl_DriveMotor_stop>

}
 8003e66:	bf00      	nop
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	200004c4 	.word	0x200004c4
 8003e70:	200004b8 	.word	0x200004b8
 8003e74:	20000508 	.word	0x20000508
 8003e78:	20000298 	.word	0x20000298
 8003e7c:	00000000 	.word	0x00000000

08003e80 <mollifier_slalom_table>:


void mollifier_slalom_table(float input_center_velocity,float input_displacement, float input_max_turning_velocity) {
 8003e80:	b5b0      	push	{r4, r5, r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e8a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e8e:	ed87 1a01 	vstr	s2, [r7, #4]

	// 例外処理

	Mollifier_turning.center_velocity = input_center_velocity;
 8003e92:	4a3d      	ldr	r2, [pc, #244]	; (8003f88 <mollifier_slalom_table+0x108>)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6053      	str	r3, [r2, #4]
	Mollifier_turning.displacement = input_displacement;
 8003e98:	4a3b      	ldr	r2, [pc, #236]	; (8003f88 <mollifier_slalom_table+0x108>)
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	6013      	str	r3, [r2, #0]
	Mollifier_turning.max_turning_velocity = input_max_turning_velocity;
 8003e9e:	4a3a      	ldr	r2, [pc, #232]	; (8003f88 <mollifier_slalom_table+0x108>)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6093      	str	r3, [r2, #8]


	turning.velocity = 0;
 8003ea4:	4b39      	ldr	r3, [pc, #228]	; (8003f8c <mollifier_slalom_table+0x10c>)
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003eac:	4b37      	ldr	r3, [pc, #220]	; (8003f8c <mollifier_slalom_table+0x10c>)
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
	straight.velocity = input_center_velocity;
 8003eb4:	4a36      	ldr	r2, [pc, #216]	; (8003f90 <mollifier_slalom_table+0x110>)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6013      	str	r3, [r2, #0]
	straight.acceleration = 0;
 8003eba:	4b35      	ldr	r3, [pc, #212]	; (8003f90 <mollifier_slalom_table+0x110>)
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003ec2:	4b33      	ldr	r3, [pc, #204]	; (8003f90 <mollifier_slalom_table+0x110>)
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 8003eca:	4b32      	ldr	r3, [pc, #200]	; (8003f94 <mollifier_slalom_table+0x114>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8003ed0:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <mollifier_slalom_table+0x118>)
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	701a      	strb	r2, [r3, #0]
	mollifier_timer=-fabs(input_displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input_max_turning_velocity;
 8003ed6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003eda:	eef0 7ae7 	vabs.f32	s15, s15
 8003ede:	ee17 0a90 	vmov	r0, s15
 8003ee2:	f7fc fb59 	bl	8000598 <__aeabi_f2d>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4614      	mov	r4, r2
 8003eec:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003ef0:	a321      	add	r3, pc, #132	; (adr r3, 8003f78 <mollifier_slalom_table+0xf8>)
 8003ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef6:	4620      	mov	r0, r4
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f7fc fccf 	bl	800089c <__aeabi_ddiv>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4610      	mov	r0, r2
 8003f04:	4619      	mov	r1, r3
 8003f06:	a31e      	add	r3, pc, #120	; (adr r3, 8003f80 <mollifier_slalom_table+0x100>)
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f7fc fb9c 	bl	8000648 <__aeabi_dmul>
 8003f10:	4602      	mov	r2, r0
 8003f12:	460b      	mov	r3, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	461d      	mov	r5, r3
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f7fc fb3d 	bl	8000598 <__aeabi_f2d>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4620      	mov	r0, r4
 8003f24:	4629      	mov	r1, r5
 8003f26:	f7fc fcb9 	bl	800089c <__aeabi_ddiv>
 8003f2a:	4602      	mov	r2, r0
 8003f2c:	460b      	mov	r3, r1
 8003f2e:	4610      	mov	r0, r2
 8003f30:	4619      	mov	r1, r3
 8003f32:	f7fc fe61 	bl	8000bf8 <__aeabi_d2f>
 8003f36:	4603      	mov	r3, r0
 8003f38:	4a18      	ldr	r2, [pc, #96]	; (8003f9c <mollifier_slalom_table+0x11c>)
 8003f3a:	6013      	str	r3, [r2, #0]
	modeacc = 6;
 8003f3c:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <mollifier_slalom_table+0x120>)
 8003f3e:	2206      	movs	r2, #6
 8003f40:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003f42:	f002 ffa1 	bl	8006e88 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 8003f46:	bf00      	nop
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <mollifier_slalom_table+0x118>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d1fa      	bne.n	8003f48 <mollifier_slalom_table+0xc8>

	}
//	modeacc = 0;


	angle = angle - input_displacement;
 8003f52:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <mollifier_slalom_table+0x124>)
 8003f54:	ed93 7a00 	vldr	s14, [r3]
 8003f58:	edd7 7a02 	vldr	s15, [r7, #8]
 8003f5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f60:	4b10      	ldr	r3, [pc, #64]	; (8003fa4 <mollifier_slalom_table+0x124>)
 8003f62:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8003f66:	f002 ff9d 	bl	8006ea4 <pl_DriveMotor_stop>

}
 8003f6a:	bf00      	nop
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bdb0      	pop	{r4, r5, r7, pc}
 8003f72:	bf00      	nop
 8003f74:	f3af 8000 	nop.w
 8003f78:	f9db22d1 	.word	0xf9db22d1
 8003f7c:	3fdc6a7e 	.word	0x3fdc6a7e
 8003f80:	362cef38 	.word	0x362cef38
 8003f84:	3fd78b56 	.word	0x3fd78b56
 8003f88:	200004f8 	.word	0x200004f8
 8003f8c:	200004c4 	.word	0x200004c4
 8003f90:	200004b8 	.word	0x200004b8
 8003f94:	200007e5 	.word	0x200007e5
 8003f98:	200007e4 	.word	0x200007e4
 8003f9c:	200007e0 	.word	0x200007e0
 8003fa0:	20000508 	.word	0x20000508
 8003fa4:	20000244 	.word	0x20000244

08003fa8 <no_frontwall_straight>:


void no_frontwall_straight(void){
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
	turning.acceleration = 0;
 8003fac:	4b16      	ldr	r3, [pc, #88]	; (8004008 <no_frontwall_straight+0x60>)
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	605a      	str	r2, [r3, #4]
	turning.velocity = 0;
 8003fb4:	4b14      	ldr	r3, [pc, #80]	; (8004008 <no_frontwall_straight+0x60>)
 8003fb6:	f04f 0200 	mov.w	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
	turning.displacement = 0;
 8003fbc:	4b12      	ldr	r3, [pc, #72]	; (8004008 <no_frontwall_straight+0x60>)
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8003fc4:	4b11      	ldr	r3, [pc, #68]	; (800400c <no_frontwall_straight+0x64>)
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 8003fcc:	4b0f      	ldr	r3, [pc, #60]	; (800400c <no_frontwall_straight+0x64>)
 8003fce:	f04f 0200 	mov.w	r2, #0
 8003fd2:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8003fd4:	4b0d      	ldr	r3, [pc, #52]	; (800400c <no_frontwall_straight+0x64>)
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]

	g_FrontWallControl_mode=1;
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	; (8004010 <no_frontwall_straight+0x68>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	701a      	strb	r2, [r3, #0]
	modeacc = 5;
 8003fe2:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <no_frontwall_straight+0x6c>)
 8003fe4:	2205      	movs	r2, #5
 8003fe6:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8003fe8:	f002 ff4e 	bl	8006e88 <pl_DriveMotor_start>
	wait_ms_NoReset(150);
 8003fec:	2096      	movs	r0, #150	; 0x96
 8003fee:	f003 f9f7 	bl	80073e0 <wait_ms_NoReset>
//		HAL_Delay(1);
////		if(record_time >= max_record_time){
////			break;
////		}
//	}
	g_FrontWallControl_mode=0;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <no_frontwall_straight+0x68>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
	modeacc = 0;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <no_frontwall_straight+0x6c>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_stop();
 8003ffe:	f002 ff51 	bl	8006ea4 <pl_DriveMotor_stop>

}
 8004002:	bf00      	nop
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	200004c4 	.word	0x200004c4
 800400c:	200004b8 	.word	0x200004b8
 8004010:	20000571 	.word	0x20000571
 8004014:	20000508 	.word	0x20000508

08004018 <straight_table_ff>:




float straight_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b088      	sub	sp, #32
 800401c:	af00      	add	r7, sp, #0
 800401e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004022:	edc7 0a04 	vstr	s1, [r7, #16]
 8004026:	ed87 1a03 	vstr	s2, [r7, #12]
 800402a:	edc7 1a02 	vstr	s3, [r7, #8]
 800402e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 8004032:	edd7 7a03 	vldr	s15, [r7, #12]
 8004036:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 800403a:	edd7 7a04 	vldr	s15, [r7, #16]
 800403e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004042:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 8004046:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800404a:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 800404e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004056:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 800405a:	edd7 7a01 	vldr	s15, [r7, #4]
 800405e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004066:	d505      	bpl.n	8004074 <straight_table_ff+0x5c>
 8004068:	edd7 7a01 	vldr	s15, [r7, #4]
 800406c:	eef1 7a67 	vneg.f32	s15, s15
 8004070:	edc7 7a01 	vstr	s15, [r7, #4]
	Ksp = 0;//3//P項の制御量直進*****************************************************
 8004074:	4b76      	ldr	r3, [pc, #472]	; (8004250 <straight_table_ff+0x238>)
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
	Ksi = 0;//5//43//I項の制御量直進*****************************************************
 800407c:	4b75      	ldr	r3, [pc, #468]	; (8004254 <straight_table_ff+0x23c>)
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	601a      	str	r2, [r3, #0]
	Ksd = 0;//D項の制御量直進*****************************************************
 8004084:	4b74      	ldr	r3, [pc, #464]	; (8004258 <straight_table_ff+0x240>)
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
	Ktp = 0;//295//P項の制御量旋回*****************************************************
 800408c:	4b73      	ldr	r3, [pc, #460]	; (800425c <straight_table_ff+0x244>)
 800408e:	f04f 0200 	mov.w	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
	Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 8004094:	4b72      	ldr	r3, [pc, #456]	; (8004260 <straight_table_ff+0x248>)
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	601a      	str	r2, [r3, #0]
//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
	Ktd = 0;
 800409c:	4b71      	ldr	r3, [pc, #452]	; (8004264 <straight_table_ff+0x24c>)
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]


	Trapezoid_straight.displacement = input_displacement;
 80040a4:	4a70      	ldr	r2, [pc, #448]	; (8004268 <straight_table_ff+0x250>)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	6013      	str	r3, [r2, #0]
	Trapezoid_straight.start_velocity = input_start_velocity;
 80040aa:	4a6f      	ldr	r2, [pc, #444]	; (8004268 <straight_table_ff+0x250>)
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	6053      	str	r3, [r2, #4]
	Trapezoid_straight.end_velocity = input_end_velocity;
 80040b0:	4a6d      	ldr	r2, [pc, #436]	; (8004268 <straight_table_ff+0x250>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6093      	str	r3, [r2, #8]
	Trapezoid_straight.count_velocity = input_count_velocity;
 80040b6:	4a6c      	ldr	r2, [pc, #432]	; (8004268 <straight_table_ff+0x250>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	60d3      	str	r3, [r2, #12]
	Trapezoid_straight.acceleration = input_acceleration;
 80040bc:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <straight_table_ff+0x250>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){straight.acceleration = input_acceleration;
 80040c2:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ce:	db03      	blt.n	80040d8 <straight_table_ff+0xc0>
 80040d0:	4a66      	ldr	r2, [pc, #408]	; (800426c <straight_table_ff+0x254>)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6053      	str	r3, [r2, #4]
 80040d6:	e006      	b.n	80040e6 <straight_table_ff+0xce>
	}else{straight.acceleration = -input_acceleration;}
 80040d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80040dc:	eef1 7a67 	vneg.f32	s15, s15
 80040e0:	4b62      	ldr	r3, [pc, #392]	; (800426c <straight_table_ff+0x254>)
 80040e2:	edc3 7a01 	vstr	s15, [r3, #4]
	straight.velocity = input_start_velocity;
 80040e6:	4a61      	ldr	r2, [pc, #388]	; (800426c <straight_table_ff+0x254>)
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	6013      	str	r3, [r2, #0]
	straight.displacement = 0;
 80040ec:	4b5f      	ldr	r3, [pc, #380]	; (800426c <straight_table_ff+0x254>)
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	609a      	str	r2, [r3, #8]
	turning.velocity = 0;
 80040f4:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <straight_table_ff+0x258>)
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
	turning.acceleration = 0;
 80040fc:	4b5c      	ldr	r3, [pc, #368]	; (8004270 <straight_table_ff+0x258>)
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	605a      	str	r2, [r3, #4]
	turning.displacement = 0;
 8004104:	4b5a      	ldr	r3, [pc, #360]	; (8004270 <straight_table_ff+0x258>)
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <straight_table_ff+0x25c>)
 800410e:	2200      	movs	r2, #0
 8004110:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004112:	4b59      	ldr	r3, [pc, #356]	; (8004278 <straight_table_ff+0x260>)
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;straight.acceleration = input_acceleration;}
 8004118:	edd7 7a05 	vldr	s15, [r7, #20]
 800411c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004124:	dd0e      	ble.n	8004144 <straight_table_ff+0x12c>
 8004126:	ed97 7a07 	vldr	s14, [r7, #28]
 800412a:	edd7 7a05 	vldr	s15, [r7, #20]
 800412e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004136:	dd05      	ble.n	8004144 <straight_table_ff+0x12c>
 8004138:	4b4f      	ldr	r3, [pc, #316]	; (8004278 <straight_table_ff+0x260>)
 800413a:	2205      	movs	r2, #5
 800413c:	701a      	strb	r2, [r3, #0]
 800413e:	4a4b      	ldr	r2, [pc, #300]	; (800426c <straight_table_ff+0x254>)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;straight.acceleration = -input_acceleration;}
 8004144:	edd7 7a05 	vldr	s15, [r7, #20]
 8004148:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	dd14      	ble.n	800417c <straight_table_ff+0x164>
 8004152:	edd7 7a05 	vldr	s15, [r7, #20]
 8004156:	eef1 7a67 	vneg.f32	s15, s15
 800415a:	ed97 7a07 	vldr	s14, [r7, #28]
 800415e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004166:	d509      	bpl.n	800417c <straight_table_ff+0x164>
 8004168:	4b43      	ldr	r3, [pc, #268]	; (8004278 <straight_table_ff+0x260>)
 800416a:	2206      	movs	r2, #6
 800416c:	701a      	strb	r2, [r3, #0]
 800416e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004172:	eef1 7a67 	vneg.f32	s15, s15
 8004176:	4b3d      	ldr	r3, [pc, #244]	; (800426c <straight_table_ff+0x254>)
 8004178:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;straight.acceleration = -input_acceleration;}
 800417c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004180:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004188:	d514      	bpl.n	80041b4 <straight_table_ff+0x19c>
 800418a:	edd7 7a05 	vldr	s15, [r7, #20]
 800418e:	eef1 7a67 	vneg.f32	s15, s15
 8004192:	ed97 7a07 	vldr	s14, [r7, #28]
 8004196:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	dd09      	ble.n	80041b4 <straight_table_ff+0x19c>
 80041a0:	4b35      	ldr	r3, [pc, #212]	; (8004278 <straight_table_ff+0x260>)
 80041a2:	2205      	movs	r2, #5
 80041a4:	701a      	strb	r2, [r3, #0]
 80041a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80041aa:	eef1 7a67 	vneg.f32	s15, s15
 80041ae:	4b2f      	ldr	r3, [pc, #188]	; (800426c <straight_table_ff+0x254>)
 80041b0:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;straight.acceleration = input_acceleration;}
 80041b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80041b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041c0:	d50e      	bpl.n	80041e0 <straight_table_ff+0x1c8>
 80041c2:	ed97 7a07 	vldr	s14, [r7, #28]
 80041c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80041ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d2:	d505      	bpl.n	80041e0 <straight_table_ff+0x1c8>
 80041d4:	4b28      	ldr	r3, [pc, #160]	; (8004278 <straight_table_ff+0x260>)
 80041d6:	2206      	movs	r2, #6
 80041d8:	701a      	strb	r2, [r3, #0]
 80041da:	4a24      	ldr	r2, [pc, #144]	; (800426c <straight_table_ff+0x254>)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6053      	str	r3, [r2, #4]
	modeacc = 1;
 80041e0:	4b26      	ldr	r3, [pc, #152]	; (800427c <straight_table_ff+0x264>)
 80041e2:	2201      	movs	r2, #1
 80041e4:	701a      	strb	r2, [r3, #0]
	pl_DriveMotor_start();
 80041e6:	f002 fe4f 	bl	8006e88 <pl_DriveMotor_start>


	while (g_acc_flag!=4){
 80041ea:	bf00      	nop
 80041ec:	4b22      	ldr	r3, [pc, #136]	; (8004278 <straight_table_ff+0x260>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b04      	cmp	r3, #4
 80041f4:	d1fa      	bne.n	80041ec <straight_table_ff+0x1d4>


	}
	if(input_end_velocity==0){//BREAK
 80041f6:	edd7 7a03 	vldr	s15, [r7, #12]
 80041fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004202:	d105      	bne.n	8004210 <straight_table_ff+0x1f8>
		wait_ms_NoReset(100);
 8004204:	2064      	movs	r0, #100	; 0x64
 8004206:	f003 f8eb 	bl	80073e0 <wait_ms_NoReset>
		modeacc = 0;
 800420a:	4b1c      	ldr	r3, [pc, #112]	; (800427c <straight_table_ff+0x264>)
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	E_distanceL = E_distanceL - input_displacement;
 8004210:	4b1b      	ldr	r3, [pc, #108]	; (8004280 <straight_table_ff+0x268>)
 8004212:	ed93 7a00 	vldr	s14, [r3]
 8004216:	edd7 7a05 	vldr	s15, [r7, #20]
 800421a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421e:	4b18      	ldr	r3, [pc, #96]	; (8004280 <straight_table_ff+0x268>)
 8004220:	edc3 7a00 	vstr	s15, [r3]
	E_distanceR = E_distanceR - input_displacement;
 8004224:	4b17      	ldr	r3, [pc, #92]	; (8004284 <straight_table_ff+0x26c>)
 8004226:	ed93 7a00 	vldr	s14, [r3]
 800422a:	edd7 7a05 	vldr	s15, [r7, #20]
 800422e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <straight_table_ff+0x26c>)
 8004234:	edc3 7a00 	vstr	s15, [r3]
	pl_DriveMotor_stop();//これは必要か？
 8004238:	f002 fe34 	bl	8006ea4 <pl_DriveMotor_stop>



	return straight.velocity;
 800423c:	4b0b      	ldr	r3, [pc, #44]	; (800426c <straight_table_ff+0x254>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	ee07 3a90 	vmov	s15, r3



}
 8004244:	eeb0 0a67 	vmov.f32	s0, s15
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000534 	.word	0x20000534
 8004254:	20000538 	.word	0x20000538
 8004258:	2000053c 	.word	0x2000053c
 800425c:	20000540 	.word	0x20000540
 8004260:	20000544 	.word	0x20000544
 8004264:	20000548 	.word	0x20000548
 8004268:	200004d0 	.word	0x200004d0
 800426c:	200004b8 	.word	0x200004b8
 8004270:	200004c4 	.word	0x200004c4
 8004274:	200007e5 	.word	0x200007e5
 8004278:	200007e4 	.word	0x200007e4
 800427c:	20000508 	.word	0x20000508
 8004280:	20000200 	.word	0x20000200
 8004284:	20000204 	.word	0x20000204

08004288 <turning_table_ff>:



float turning_table_ff(float input_displacement, float input_start_velocity,
	float input_end_velocity, float input_count_velocity, float input_acceleration) {
 8004288:	b580      	push	{r7, lr}
 800428a:	b088      	sub	sp, #32
 800428c:	af00      	add	r7, sp, #0
 800428e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004292:	edc7 0a04 	vstr	s1, [r7, #16]
 8004296:	ed87 1a03 	vstr	s2, [r7, #12]
 800429a:	edc7 1a02 	vstr	s3, [r7, #8]
 800429e:	ed87 2a01 	vstr	s4, [r7, #4]

	float MinRequired_displacement=
			(input_end_velocity*input_end_velocity
 80042a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80042a6:	ee27 7aa7 	vmul.f32	s14, s15, s15
					-input_start_velocity*input_start_velocity
 80042aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80042ae:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80042b2:	ee77 7a67 	vsub.f32	s15, s14, s15
					)/2/input_acceleration;
 80042b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80042ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
	float MinRequired_displacement=
 80042be:	ed97 7a01 	vldr	s14, [r7, #4]
 80042c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042c6:	edc7 7a07 	vstr	s15, [r7, #28]
	// 例外処理
	if (input_acceleration < 0){input_acceleration=-input_acceleration;}//加速が負
 80042ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80042ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d505      	bpl.n	80042e4 <turning_table_ff+0x5c>
 80042d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80042dc:	eef1 7a67 	vneg.f32	s15, s15
 80042e0:	edc7 7a01 	vstr	s15, [r7, #4]

	Ksp = 0;//3//P項の制御量直進*****************************************************
 80042e4:	4b71      	ldr	r3, [pc, #452]	; (80044ac <turning_table_ff+0x224>)
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]
		Ksi = 0;//5//43//I項の制御量直進*****************************************************
 80042ec:	4b70      	ldr	r3, [pc, #448]	; (80044b0 <turning_table_ff+0x228>)
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
		Ksd = 0;//D項の制御量直進*****************************************************
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <turning_table_ff+0x22c>)
 80042f6:	f04f 0200 	mov.w	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]
		Ktp = 0;//295//P項の制御量旋回*****************************************************
 80042fc:	4b6e      	ldr	r3, [pc, #440]	; (80044b8 <turning_table_ff+0x230>)
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
		Kti = 0;//1//.6//I項の制御量旋回*****************************************************
 8004304:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <turning_table_ff+0x234>)
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	601a      	str	r2, [r3, #0]
	//	Ktifun = 0.01;//1//.6//I項の制御量旋回*****************************************************
		Ktd = 0;
 800430c:	4b6c      	ldr	r3, [pc, #432]	; (80044c0 <turning_table_ff+0x238>)
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

	Trapezoid_turning.displacement = input_displacement;
 8004314:	4a6b      	ldr	r2, [pc, #428]	; (80044c4 <turning_table_ff+0x23c>)
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6013      	str	r3, [r2, #0]
	Trapezoid_turning.start_velocity = input_start_velocity;
 800431a:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <turning_table_ff+0x23c>)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6053      	str	r3, [r2, #4]
	Trapezoid_turning.end_velocity = input_end_velocity;
 8004320:	4a68      	ldr	r2, [pc, #416]	; (80044c4 <turning_table_ff+0x23c>)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6093      	str	r3, [r2, #8]
	Trapezoid_turning.count_velocity = input_count_velocity;
 8004326:	4a67      	ldr	r2, [pc, #412]	; (80044c4 <turning_table_ff+0x23c>)
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	60d3      	str	r3, [r2, #12]
	Trapezoid_turning.acceleration = input_acceleration;
 800432c:	4a65      	ldr	r2, [pc, #404]	; (80044c4 <turning_table_ff+0x23c>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6113      	str	r3, [r2, #16]

	if (input_count_velocity>=0){turning.acceleration = input_acceleration;
 8004332:	edd7 7a02 	vldr	s15, [r7, #8]
 8004336:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800433a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433e:	db03      	blt.n	8004348 <turning_table_ff+0xc0>
 8004340:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <turning_table_ff+0x240>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6053      	str	r3, [r2, #4]
 8004346:	e006      	b.n	8004356 <turning_table_ff+0xce>
	}else{turning.acceleration = -input_acceleration;}
 8004348:	edd7 7a01 	vldr	s15, [r7, #4]
 800434c:	eef1 7a67 	vneg.f32	s15, s15
 8004350:	4b5d      	ldr	r3, [pc, #372]	; (80044c8 <turning_table_ff+0x240>)
 8004352:	edc3 7a01 	vstr	s15, [r3, #4]
	turning.velocity = input_start_velocity;
 8004356:	4a5c      	ldr	r2, [pc, #368]	; (80044c8 <turning_table_ff+0x240>)
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	6013      	str	r3, [r2, #0]
	turning.displacement = 0;
 800435c:	4b5a      	ldr	r3, [pc, #360]	; (80044c8 <turning_table_ff+0x240>)
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	609a      	str	r2, [r3, #8]
	straight.velocity = 0;
 8004364:	4b59      	ldr	r3, [pc, #356]	; (80044cc <turning_table_ff+0x244>)
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	601a      	str	r2, [r3, #0]
	straight.acceleration = 0;
 800436c:	4b57      	ldr	r3, [pc, #348]	; (80044cc <turning_table_ff+0x244>)
 800436e:	f04f 0200 	mov.w	r2, #0
 8004372:	605a      	str	r2, [r3, #4]
	straight.displacement = 0;
 8004374:	4b55      	ldr	r3, [pc, #340]	; (80044cc <turning_table_ff+0x244>)
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
	g_MotorEnd_flag=0;
 800437c:	4b54      	ldr	r3, [pc, #336]	; (80044d0 <turning_table_ff+0x248>)
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
	g_acc_flag=1;
 8004382:	4b54      	ldr	r3, [pc, #336]	; (80044d4 <turning_table_ff+0x24c>)
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
		if (input_displacement>0 && MinRequired_displacement>input_displacement){g_acc_flag=5;turning.acceleration = input_acceleration;}
 8004388:	edd7 7a05 	vldr	s15, [r7, #20]
 800438c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004394:	dd0e      	ble.n	80043b4 <turning_table_ff+0x12c>
 8004396:	ed97 7a07 	vldr	s14, [r7, #28]
 800439a:	edd7 7a05 	vldr	s15, [r7, #20]
 800439e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	dd05      	ble.n	80043b4 <turning_table_ff+0x12c>
 80043a8:	4b4a      	ldr	r3, [pc, #296]	; (80044d4 <turning_table_ff+0x24c>)
 80043aa:	2205      	movs	r2, #5
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	4a46      	ldr	r2, [pc, #280]	; (80044c8 <turning_table_ff+0x240>)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6053      	str	r3, [r2, #4]
		if (input_displacement>0 && MinRequired_displacement<-input_displacement){g_acc_flag=6;turning.acceleration = -input_acceleration;}
 80043b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80043b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	dd14      	ble.n	80043ec <turning_table_ff+0x164>
 80043c2:	edd7 7a05 	vldr	s15, [r7, #20]
 80043c6:	eef1 7a67 	vneg.f32	s15, s15
 80043ca:	ed97 7a07 	vldr	s14, [r7, #28]
 80043ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	d509      	bpl.n	80043ec <turning_table_ff+0x164>
 80043d8:	4b3e      	ldr	r3, [pc, #248]	; (80044d4 <turning_table_ff+0x24c>)
 80043da:	2206      	movs	r2, #6
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	edd7 7a01 	vldr	s15, [r7, #4]
 80043e2:	eef1 7a67 	vneg.f32	s15, s15
 80043e6:	4b38      	ldr	r3, [pc, #224]	; (80044c8 <turning_table_ff+0x240>)
 80043e8:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement>-input_displacement){g_acc_flag=5;turning.acceleration = -input_acceleration;}
 80043ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80043f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f8:	d514      	bpl.n	8004424 <turning_table_ff+0x19c>
 80043fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80043fe:	eef1 7a67 	vneg.f32	s15, s15
 8004402:	ed97 7a07 	vldr	s14, [r7, #28]
 8004406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800440a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800440e:	dd09      	ble.n	8004424 <turning_table_ff+0x19c>
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <turning_table_ff+0x24c>)
 8004412:	2205      	movs	r2, #5
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	edd7 7a01 	vldr	s15, [r7, #4]
 800441a:	eef1 7a67 	vneg.f32	s15, s15
 800441e:	4b2a      	ldr	r3, [pc, #168]	; (80044c8 <turning_table_ff+0x240>)
 8004420:	edc3 7a01 	vstr	s15, [r3, #4]
		if (input_displacement<0 && MinRequired_displacement<input_displacement){g_acc_flag=6;turning.acceleration = input_acceleration;}
 8004424:	edd7 7a05 	vldr	s15, [r7, #20]
 8004428:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	d50e      	bpl.n	8004450 <turning_table_ff+0x1c8>
 8004432:	ed97 7a07 	vldr	s14, [r7, #28]
 8004436:	edd7 7a05 	vldr	s15, [r7, #20]
 800443a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800443e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004442:	d505      	bpl.n	8004450 <turning_table_ff+0x1c8>
 8004444:	4b23      	ldr	r3, [pc, #140]	; (80044d4 <turning_table_ff+0x24c>)
 8004446:	2206      	movs	r2, #6
 8004448:	701a      	strb	r2, [r3, #0]
 800444a:	4a1f      	ldr	r2, [pc, #124]	; (80044c8 <turning_table_ff+0x240>)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6053      	str	r3, [r2, #4]
	modeacc = 2;
 8004450:	4b21      	ldr	r3, [pc, #132]	; (80044d8 <turning_table_ff+0x250>)
 8004452:	2202      	movs	r2, #2
 8004454:	701a      	strb	r2, [r3, #0]

	pl_DriveMotor_start();
 8004456:	f002 fd17 	bl	8006e88 <pl_DriveMotor_start>
	while (g_acc_flag!=4){
 800445a:	bf00      	nop
 800445c:	4b1d      	ldr	r3, [pc, #116]	; (80044d4 <turning_table_ff+0x24c>)
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b04      	cmp	r3, #4
 8004464:	d1fa      	bne.n	800445c <turning_table_ff+0x1d4>

	}
	if(input_end_velocity==0){//BREAK
 8004466:	edd7 7a03 	vldr	s15, [r7, #12]
 800446a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800446e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004472:	d106      	bne.n	8004482 <turning_table_ff+0x1fa>
		wait_ms_NoReset(300);
 8004474:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004478:	f002 ffb2 	bl	80073e0 <wait_ms_NoReset>
		modeacc = 0;
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <turning_table_ff+0x250>)
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
	}
//	modeacc = 0;

	angle = angle - input_displacement;
 8004482:	4b16      	ldr	r3, [pc, #88]	; (80044dc <turning_table_ff+0x254>)
 8004484:	ed93 7a00 	vldr	s14, [r3]
 8004488:	edd7 7a05 	vldr	s15, [r7, #20]
 800448c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <turning_table_ff+0x254>)
 8004492:	edc3 7a00 	vstr	s15, [r3]

	pl_DriveMotor_stop();
 8004496:	f002 fd05 	bl	8006ea4 <pl_DriveMotor_stop>

	return turning.velocity;
 800449a:	4b0b      	ldr	r3, [pc, #44]	; (80044c8 <turning_table_ff+0x240>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	ee07 3a90 	vmov	s15, r3
}
 80044a2:	eeb0 0a67 	vmov.f32	s0, s15
 80044a6:	3720      	adds	r7, #32
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000534 	.word	0x20000534
 80044b0:	20000538 	.word	0x20000538
 80044b4:	2000053c 	.word	0x2000053c
 80044b8:	20000540 	.word	0x20000540
 80044bc:	20000544 	.word	0x20000544
 80044c0:	20000548 	.word	0x20000548
 80044c4:	200004e4 	.word	0x200004e4
 80044c8:	200004c4 	.word	0x200004c4
 80044cc:	200004b8 	.word	0x200004b8
 80044d0:	200007e5 	.word	0x200007e5
 80044d4:	200007e4 	.word	0x200007e4
 80044d8:	20000508 	.word	0x20000508
 80044dc:	20000244 	.word	0x20000244

080044e0 <feedforward_const_accel>:
#include "CL_encoder.h"

void feedforward_const_accel(float *feedforward_straight,
		float straight_velocity, float straight_acceleration,
		float *feedforward_turning, float turning_velocity,
		float turning_acceleration) {
 80044e0:	b5b0      	push	{r4, r5, r7, lr}
 80044e2:	b086      	sub	sp, #24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6178      	str	r0, [r7, #20]
 80044e8:	ed87 0a04 	vstr	s0, [r7, #16]
 80044ec:	edc7 0a03 	vstr	s1, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	ed87 1a01 	vstr	s2, [r7, #4]
 80044f6:	edc7 1a00 	vstr	s3, [r7]

	if (straight_velocity >= 0) {
 80044fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80044fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004506:	db7c      	blt.n	8004602 <feedforward_const_accel+0x122>
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004508:	68f8      	ldr	r0, [r7, #12]
 800450a:	f7fc f845 	bl	8000598 <__aeabi_f2d>
 800450e:	a3d2      	add	r3, pc, #840	; (adr r3, 8004858 <feedforward_const_accel+0x378>)
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f7fc f898 	bl	8000648 <__aeabi_dmul>
 8004518:	4602      	mov	r2, r0
 800451a:	460b      	mov	r3, r1
 800451c:	4610      	mov	r0, r2
 800451e:	4619      	mov	r1, r3
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	4bd2      	ldr	r3, [pc, #840]	; (8004870 <feedforward_const_accel+0x390>)
 8004526:	f7fc f9b9 	bl	800089c <__aeabi_ddiv>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4610      	mov	r0, r2
 8004530:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004532:	a3bf      	add	r3, pc, #764	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 8004534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004538:	f7fc f9b0 	bl	800089c <__aeabi_ddiv>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4610      	mov	r0, r2
 8004542:	4619      	mov	r1, r3
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800454c:	f7fc f9a6 	bl	800089c <__aeabi_ddiv>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4610      	mov	r0, r2
 8004556:	4619      	mov	r1, r3
 8004558:	a3b7      	add	r3, pc, #732	; (adr r3, 8004838 <feedforward_const_accel+0x358>)
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f7fb febd 	bl	80002dc <__adddf3>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4610      	mov	r0, r2
 8004568:	4619      	mov	r1, r3
 800456a:	a3b5      	add	r3, pc, #724	; (adr r3, 8004840 <feedforward_const_accel+0x360>)
 800456c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004570:	f7fc f86a 	bl	8000648 <__aeabi_dmul>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4610      	mov	r0, r2
 800457a:	4619      	mov	r1, r3
 800457c:	a3b2      	add	r3, pc, #712	; (adr r3, 8004848 <feedforward_const_accel+0x368>)
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	f7fc f98b 	bl	800089c <__aeabi_ddiv>
 8004586:	4602      	mov	r2, r0
 8004588:	460b      	mov	r3, r1
 800458a:	4614      	mov	r4, r2
 800458c:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 800458e:	ed97 7a04 	vldr	s14, [r7, #16]
 8004592:	eddf 6ab8 	vldr	s13, [pc, #736]	; 8004874 <feedforward_const_accel+0x394>
 8004596:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800459a:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8004878 <feedforward_const_accel+0x398>
 800459e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045a2:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80045a6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80045aa:	ee16 0a90 	vmov	r0, s13
 80045ae:	f7fb fff3 	bl	8000598 <__aeabi_f2d>
 80045b2:	a3a7      	add	r3, pc, #668	; (adr r3, 8004850 <feedforward_const_accel+0x370>)
 80045b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b8:	f7fc f846 	bl	8000648 <__aeabi_dmul>
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	4610      	mov	r0, r2
 80045c2:	4619      	mov	r1, r3
 80045c4:	a39a      	add	r3, pc, #616	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	f7fc f967 	bl	800089c <__aeabi_ddiv>
 80045ce:	4602      	mov	r2, r0
 80045d0:	460b      	mov	r3, r1
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045de:	f7fc f95d 	bl	800089c <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4620      	mov	r0, r4
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7fb fe77 	bl	80002dc <__adddf3>
 80045ee:	4602      	mov	r2, r0
 80045f0:	460b      	mov	r3, r1
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	f7fc faff 	bl	8000bf8 <__aeabi_d2f>
 80045fa:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	e07b      	b.n	80046fa <feedforward_const_accel+0x21a>
	} else {
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f7fb ffc8 	bl	8000598 <__aeabi_f2d>
 8004608:	a393      	add	r3, pc, #588	; (adr r3, 8004858 <feedforward_const_accel+0x378>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fc f81b 	bl	8000648 <__aeabi_dmul>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4610      	mov	r0, r2
 8004618:	4619      	mov	r1, r3
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	4b94      	ldr	r3, [pc, #592]	; (8004870 <feedforward_const_accel+0x390>)
 8004620:	f7fc f93c 	bl	800089c <__aeabi_ddiv>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 800462c:	a380      	add	r3, pc, #512	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fc f933 	bl	800089c <__aeabi_ddiv>
 8004636:	4602      	mov	r2, r0
 8004638:	460b      	mov	r3, r1
 800463a:	4610      	mov	r0, r2
 800463c:	4619      	mov	r1, r3
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004646:	f7fc f929 	bl	800089c <__aeabi_ddiv>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4610      	mov	r0, r2
 8004650:	4619      	mov	r1, r3
 8004652:	a379      	add	r3, pc, #484	; (adr r3, 8004838 <feedforward_const_accel+0x358>)
 8004654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004658:	f7fb fe3e 	bl	80002d8 <__aeabi_dsub>
 800465c:	4602      	mov	r2, r0
 800465e:	460b      	mov	r3, r1
 8004660:	4610      	mov	r0, r2
 8004662:	4619      	mov	r1, r3
 8004664:	a376      	add	r3, pc, #472	; (adr r3, 8004840 <feedforward_const_accel+0x360>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb ffed 	bl	8000648 <__aeabi_dmul>
 800466e:	4602      	mov	r2, r0
 8004670:	460b      	mov	r3, r1
 8004672:	4610      	mov	r0, r2
 8004674:	4619      	mov	r1, r3
 8004676:	a374      	add	r3, pc, #464	; (adr r3, 8004848 <feedforward_const_accel+0x368>)
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	f7fc f90e 	bl	800089c <__aeabi_ddiv>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4614      	mov	r4, r2
 8004686:	461d      	mov	r5, r3
				+ (straight_velocity / 1000 * ng * kb / TIRE_DIAMETER);
 8004688:	ed97 7a04 	vldr	s14, [r7, #16]
 800468c:	eddf 6a79 	vldr	s13, [pc, #484]	; 8004874 <feedforward_const_accel+0x394>
 8004690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004694:	ed9f 7a78 	vldr	s14, [pc, #480]	; 8004878 <feedforward_const_accel+0x398>
 8004698:	ee67 7a87 	vmul.f32	s15, s15, s14
 800469c:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80046a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046a4:	ee16 0a90 	vmov	r0, s13
 80046a8:	f7fb ff76 	bl	8000598 <__aeabi_f2d>
 80046ac:	a368      	add	r3, pc, #416	; (adr r3, 8004850 <feedforward_const_accel+0x370>)
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	f7fb ffc9 	bl	8000648 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	a35c      	add	r3, pc, #368	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f7fc f8ea 	bl	800089c <__aeabi_ddiv>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4610      	mov	r0, r2
 80046ce:	4619      	mov	r1, r3
 80046d0:	f04f 0200 	mov.w	r2, #0
 80046d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046d8:	f7fc f8e0 	bl	800089c <__aeabi_ddiv>
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	4620      	mov	r0, r4
 80046e2:	4629      	mov	r1, r5
 80046e4:	f7fb fdfa 	bl	80002dc <__adddf3>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7fc fa82 	bl	8000bf8 <__aeabi_d2f>
 80046f4:	4602      	mov	r2, r0
		*feedforward_straight = (((Im * ng * straight_acceleration / 1000
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	601a      	str	r2, [r3, #0]
	}
	if (turning_velocity >= 0) {
 80046fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80046fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004706:	f2c0 80b9 	blt.w	800487c <feedforward_const_accel+0x39c>
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800470a:	6838      	ldr	r0, [r7, #0]
 800470c:	f7fb ff44 	bl	8000598 <__aeabi_f2d>
 8004710:	a353      	add	r3, pc, #332	; (adr r3, 8004860 <feedforward_const_accel+0x380>)
 8004712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004716:	f7fb ff97 	bl	8000648 <__aeabi_dmul>
 800471a:	4602      	mov	r2, r0
 800471c:	460b      	mov	r3, r1
 800471e:	4610      	mov	r0, r2
 8004720:	4619      	mov	r1, r3
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	4b52      	ldr	r3, [pc, #328]	; (8004870 <feedforward_const_accel+0x390>)
 8004728:	f7fc f8b8 	bl	800089c <__aeabi_ddiv>
 800472c:	4602      	mov	r2, r0
 800472e:	460b      	mov	r3, r1
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) + Tw) * Rm / kt)
 8004734:	a33e      	add	r3, pc, #248	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f7fc f8af 	bl	800089c <__aeabi_ddiv>
 800473e:	4602      	mov	r2, r0
 8004740:	460b      	mov	r3, r1
 8004742:	4610      	mov	r0, r2
 8004744:	4619      	mov	r1, r3
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800474e:	f7fc f8a5 	bl	800089c <__aeabi_ddiv>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	4610      	mov	r0, r2
 8004758:	4619      	mov	r1, r3
 800475a:	a337      	add	r3, pc, #220	; (adr r3, 8004838 <feedforward_const_accel+0x358>)
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb fdbc 	bl	80002dc <__adddf3>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4610      	mov	r0, r2
 800476a:	4619      	mov	r1, r3
 800476c:	a334      	add	r3, pc, #208	; (adr r3, 8004840 <feedforward_const_accel+0x360>)
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	f7fb ff69 	bl	8000648 <__aeabi_dmul>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	a332      	add	r3, pc, #200	; (adr r3, 8004848 <feedforward_const_accel+0x368>)
 8004780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004784:	f7fc f88a 	bl	800089c <__aeabi_ddiv>
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER)
 8004790:	ed97 7a01 	vldr	s14, [r7, #4]
 8004794:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004874 <feedforward_const_accel+0x394>
 8004798:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800479c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8004878 <feedforward_const_accel+0x398>
 80047a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a4:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 80047a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80047ac:	ee16 0a90 	vmov	r0, s13
 80047b0:	f7fb fef2 	bl	8000598 <__aeabi_f2d>
 80047b4:	a326      	add	r3, pc, #152	; (adr r3, 8004850 <feedforward_const_accel+0x370>)
 80047b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ba:	f7fb ff45 	bl	8000648 <__aeabi_dmul>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4610      	mov	r0, r2
 80047c4:	4619      	mov	r1, r3
 80047c6:	a31a      	add	r3, pc, #104	; (adr r3, 8004830 <feedforward_const_accel+0x350>)
 80047c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047cc:	f7fc f866 	bl	800089c <__aeabi_ddiv>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4610      	mov	r0, r2
 80047d6:	4619      	mov	r1, r3
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80047e0:	f7fc f85c 	bl	800089c <__aeabi_ddiv>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4620      	mov	r0, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	f7fb fd76 	bl	80002dc <__adddf3>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
				+*feedforward_straight*SS;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7fb fecb 	bl	8000598 <__aeabi_f2d>
 8004802:	a319      	add	r3, pc, #100	; (adr r3, 8004868 <feedforward_const_accel+0x388>)
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f7fb ff1e 	bl	8000648 <__aeabi_dmul>
 800480c:	4602      	mov	r2, r0
 800480e:	460b      	mov	r3, r1
 8004810:	4620      	mov	r0, r4
 8004812:	4629      	mov	r1, r5
 8004814:	f7fb fd62 	bl	80002dc <__adddf3>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4610      	mov	r0, r2
 800481e:	4619      	mov	r1, r3
 8004820:	f7fc f9ea 	bl	8000bf8 <__aeabi_d2f>
 8004824:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	601a      	str	r2, [r3, #0]
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER)
				+*feedforward_straight*SS;
	}

}
 800482a:	e0b7      	b.n	800499c <feedforward_const_accel+0x4bc>
 800482c:	f3af 8000 	nop.w
 8004830:	99e4ac6e 	.word	0x99e4ac6e
 8004834:	3f9a9a29 	.word	0x3f9a9a29
 8004838:	eb1c432d 	.word	0xeb1c432d
 800483c:	3f1a36e2 	.word	0x3f1a36e2
 8004840:	1eb851ec 	.word	0x1eb851ec
 8004844:	3ff5eb85 	.word	0x3ff5eb85
 8004848:	b7952d23 	.word	0xb7952d23
 800484c:	3f569c23 	.word	0x3f569c23
 8004850:	5f93e44e 	.word	0x5f93e44e
 8004854:	3f6ef050 	.word	0x3f6ef050
 8004858:	90531ee1 	.word	0x90531ee1
 800485c:	3ee7b802 	.word	0x3ee7b802
 8004860:	d64afad0 	.word	0xd64afad0
 8004864:	3ed05b97 	.word	0x3ed05b97
 8004868:	e147ae14 	.word	0xe147ae14
 800486c:	3fde147a 	.word	0x3fde147a
 8004870:	408f4000 	.word	0x408f4000
 8004874:	447a0000 	.word	0x447a0000
 8004878:	421c0000 	.word	0x421c0000
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 800487c:	6838      	ldr	r0, [r7, #0]
 800487e:	f7fb fe8b 	bl	8000598 <__aeabi_f2d>
 8004882:	a358      	add	r3, pc, #352	; (adr r3, 80049e4 <feedforward_const_accel+0x504>)
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f7fb fede 	bl	8000648 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4610      	mov	r0, r2
 8004892:	4619      	mov	r1, r3
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	4b4f      	ldr	r3, [pc, #316]	; (80049d8 <feedforward_const_accel+0x4f8>)
 800489a:	f7fb ffff 	bl	800089c <__aeabi_ddiv>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
				/ TIRE_DIAMETER) - Tw) * Rm / kt)
 80048a6:	a340      	add	r3, pc, #256	; (adr r3, 80049a8 <feedforward_const_accel+0x4c8>)
 80048a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ac:	f7fb fff6 	bl	800089c <__aeabi_ddiv>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4610      	mov	r0, r2
 80048b6:	4619      	mov	r1, r3
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80048c0:	f7fb ffec 	bl	800089c <__aeabi_ddiv>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4610      	mov	r0, r2
 80048ca:	4619      	mov	r1, r3
 80048cc:	a338      	add	r3, pc, #224	; (adr r3, 80049b0 <feedforward_const_accel+0x4d0>)
 80048ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d2:	f7fb fd01 	bl	80002d8 <__aeabi_dsub>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4610      	mov	r0, r2
 80048dc:	4619      	mov	r1, r3
 80048de:	a336      	add	r3, pc, #216	; (adr r3, 80049b8 <feedforward_const_accel+0x4d8>)
 80048e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e4:	f7fb feb0 	bl	8000648 <__aeabi_dmul>
 80048e8:	4602      	mov	r2, r0
 80048ea:	460b      	mov	r3, r1
 80048ec:	4610      	mov	r0, r2
 80048ee:	4619      	mov	r1, r3
 80048f0:	a333      	add	r3, pc, #204	; (adr r3, 80049c0 <feedforward_const_accel+0x4e0>)
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f7fb ffd1 	bl	800089c <__aeabi_ddiv>
 80048fa:	4602      	mov	r2, r0
 80048fc:	460b      	mov	r3, r1
 80048fe:	4614      	mov	r4, r2
 8004900:	461d      	mov	r5, r3
				+ (turning_velocity / 1000 * ng * kb / TIRE_DIAMETER)
 8004902:	ed97 7a01 	vldr	s14, [r7, #4]
 8004906:	eddf 6a35 	vldr	s13, [pc, #212]	; 80049dc <feedforward_const_accel+0x4fc>
 800490a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800490e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80049e0 <feedforward_const_accel+0x500>
 8004912:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004916:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 800491a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800491e:	ee16 0a90 	vmov	r0, s13
 8004922:	f7fb fe39 	bl	8000598 <__aeabi_f2d>
 8004926:	a328      	add	r3, pc, #160	; (adr r3, 80049c8 <feedforward_const_accel+0x4e8>)
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f7fb fe8c 	bl	8000648 <__aeabi_dmul>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	a31b      	add	r3, pc, #108	; (adr r3, 80049a8 <feedforward_const_accel+0x4c8>)
 800493a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800493e:	f7fb ffad 	bl	800089c <__aeabi_ddiv>
 8004942:	4602      	mov	r2, r0
 8004944:	460b      	mov	r3, r1
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004952:	f7fb ffa3 	bl	800089c <__aeabi_ddiv>
 8004956:	4602      	mov	r2, r0
 8004958:	460b      	mov	r3, r1
 800495a:	4620      	mov	r0, r4
 800495c:	4629      	mov	r1, r5
 800495e:	f7fb fcbd 	bl	80002dc <__adddf3>
 8004962:	4602      	mov	r2, r0
 8004964:	460b      	mov	r3, r1
 8004966:	4614      	mov	r4, r2
 8004968:	461d      	mov	r5, r3
				+*feedforward_straight*SS;
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f7fb fe12 	bl	8000598 <__aeabi_f2d>
 8004974:	a316      	add	r3, pc, #88	; (adr r3, 80049d0 <feedforward_const_accel+0x4f0>)
 8004976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497a:	f7fb fe65 	bl	8000648 <__aeabi_dmul>
 800497e:	4602      	mov	r2, r0
 8004980:	460b      	mov	r3, r1
 8004982:	4620      	mov	r0, r4
 8004984:	4629      	mov	r1, r5
 8004986:	f7fb fca9 	bl	80002dc <__adddf3>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	f7fc f931 	bl	8000bf8 <__aeabi_d2f>
 8004996:	4602      	mov	r2, r0
		*feedforward_turning = (((ImT * ng * turning_acceleration / 1000
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	601a      	str	r2, [r3, #0]
}
 800499c:	bf00      	nop
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bdb0      	pop	{r4, r5, r7, pc}
 80049a4:	f3af 8000 	nop.w
 80049a8:	99e4ac6e 	.word	0x99e4ac6e
 80049ac:	3f9a9a29 	.word	0x3f9a9a29
 80049b0:	eb1c432d 	.word	0xeb1c432d
 80049b4:	3f1a36e2 	.word	0x3f1a36e2
 80049b8:	1eb851ec 	.word	0x1eb851ec
 80049bc:	3ff5eb85 	.word	0x3ff5eb85
 80049c0:	b7952d23 	.word	0xb7952d23
 80049c4:	3f569c23 	.word	0x3f569c23
 80049c8:	5f93e44e 	.word	0x5f93e44e
 80049cc:	3f6ef050 	.word	0x3f6ef050
 80049d0:	e147ae14 	.word	0xe147ae14
 80049d4:	3fde147a 	.word	0x3fde147a
 80049d8:	408f4000 	.word	0x408f4000
 80049dc:	447a0000 	.word	0x447a0000
 80049e0:	421c0000 	.word	0x421c0000
 80049e4:	d64afad0 	.word	0xd64afad0
 80049e8:	3ed05b97 	.word	0x3ed05b97

080049ec <PID_Init>:
struct PID Gyro;

float Ksp, Ksi, Ksd;
float Ktp, Kti, Ktd;

void PID_Init(void) {
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0

	Ksp = 3.1; //3//P項の制御量直進*****************************************************
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <PID_Init+0x44>)
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <PID_Init+0x48>)
 80049f4:	601a      	str	r2, [r3, #0]
	Ksi = 0.08; //80//5//43//I項の制御量直進*****************************************************
 80049f6:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <PID_Init+0x4c>)
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <PID_Init+0x50>)
 80049fa:	601a      	str	r2, [r3, #0]
	Ksd = 0.00; //D項の制御量直進*****************************************************
 80049fc:	4b10      	ldr	r3, [pc, #64]	; (8004a40 <PID_Init+0x54>)
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	601a      	str	r2, [r3, #0]
	Ktp = 1.9; //295//P項の制御量旋回*****************************************************
 8004a04:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <PID_Init+0x58>)
 8004a06:	4a10      	ldr	r2, [pc, #64]	; (8004a48 <PID_Init+0x5c>)
 8004a08:	601a      	str	r2, [r3, #0]
	Kti = 0.13; //1//.6//I項の制御量旋回*****************************************************
 8004a0a:	4b10      	ldr	r3, [pc, #64]	; (8004a4c <PID_Init+0x60>)
 8004a0c:	4a10      	ldr	r2, [pc, #64]	; (8004a50 <PID_Init+0x64>)
 8004a0e:	601a      	str	r2, [r3, #0]
	Ktd = 0.002; //205//D項の制御量旋回*****************************************************
 8004a10:	4b10      	ldr	r3, [pc, #64]	; (8004a54 <PID_Init+0x68>)
 8004a12:	4a11      	ldr	r2, [pc, #68]	; (8004a58 <PID_Init+0x6c>)
 8004a14:	601a      	str	r2, [r3, #0]
	enc.sigma_error = 0;
 8004a16:	4b11      	ldr	r3, [pc, #68]	; (8004a5c <PID_Init+0x70>)
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <PID_Init+0x74>)
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	609a      	str	r2, [r3, #8]

}
 8004a26:	bf00      	nop
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	20000534 	.word	0x20000534
 8004a34:	40466666 	.word	0x40466666
 8004a38:	20000538 	.word	0x20000538
 8004a3c:	3da3d70a 	.word	0x3da3d70a
 8004a40:	2000053c 	.word	0x2000053c
 8004a44:	20000540 	.word	0x20000540
 8004a48:	3ff33333 	.word	0x3ff33333
 8004a4c:	20000544 	.word	0x20000544
 8004a50:	3e051eb8 	.word	0x3e051eb8
 8004a54:	20000548 	.word	0x20000548
 8004a58:	3b03126f 	.word	0x3b03126f
 8004a5c:	20000514 	.word	0x20000514
 8004a60:	20000524 	.word	0x20000524

08004a64 <clear_Ierror>:

void clear_Ierror(void) {
 8004a64:	b480      	push	{r7}
 8004a66:	af00      	add	r7, sp, #0
	enc.sigma_error = 0;
 8004a68:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <clear_Ierror+0x20>)
 8004a6a:	f04f 0200 	mov.w	r2, #0
 8004a6e:	609a      	str	r2, [r3, #8]
	Gyro.sigma_error = 0;
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <clear_Ierror+0x24>)
 8004a72:	f04f 0200 	mov.w	r2, #0
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	20000514 	.word	0x20000514
 8004a88:	20000524 	.word	0x20000524

08004a8c <EncoderGyro_PID>:


void EncoderGyro_PID(float *PID_s, float *PID_t,float straight_velocity,float turning_velocity) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	ed87 0a01 	vstr	s0, [r7, #4]
 8004a9a:	edc7 0a00 	vstr	s1, [r7]
	float PID_stra = 0;
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	617b      	str	r3, [r7, #20]
	float PID_turn = 0;
 8004aa4:	f04f 0300 	mov.w	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]


	if (straight_velocity == 0) {
 8004aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ab6:	d101      	bne.n	8004abc <EncoderGyro_PID+0x30>
		reset_speed();
 8004ab8:	f7fc faae 	bl	8001018 <reset_speed>
	}
	//straight.velocity>=2500 && fabs(angle_speed)<100
	if (fabs(angle_speed) < 120 && straight_velocity >= 100) {
 8004abc:	4b6e      	ldr	r3, [pc, #440]	; (8004c78 <EncoderGyro_PID+0x1ec>)
 8004abe:	edd3 7a00 	vldr	s15, [r3]
 8004ac2:	eef0 7ae7 	vabs.f32	s15, s15
 8004ac6:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004c7c <EncoderGyro_PID+0x1f0>
 8004aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ad2:	d51c      	bpl.n	8004b0e <EncoderGyro_PID+0x82>
 8004ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ad8:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004c80 <EncoderGyro_PID+0x1f4>
 8004adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae4:	db13      	blt.n	8004b0e <EncoderGyro_PID+0x82>
		enc.error = (straight_velocity - (fusion_speedR + fusion_speedL) / 2);
 8004ae6:	4b67      	ldr	r3, [pc, #412]	; (8004c84 <EncoderGyro_PID+0x1f8>)
 8004ae8:	ed93 7a00 	vldr	s14, [r3]
 8004aec:	4b66      	ldr	r3, [pc, #408]	; (8004c88 <EncoderGyro_PID+0x1fc>)
 8004aee:	edd3 7a00 	vldr	s15, [r3]
 8004af2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004af6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004afa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004afe:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b06:	4b61      	ldr	r3, [pc, #388]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b08:	edc3 7a00 	vstr	s15, [r3]
 8004b0c:	e01a      	b.n	8004b44 <EncoderGyro_PID+0xb8>
	} else {
		enc.error = (straight_velocity - (E_speedR + E_speedL) / 2);
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <EncoderGyro_PID+0x204>)
 8004b10:	ed93 7a00 	vldr	s14, [r3]
 8004b14:	4b5f      	ldr	r3, [pc, #380]	; (8004c94 <EncoderGyro_PID+0x208>)
 8004b16:	edd3 7a00 	vldr	s15, [r3]
 8004b1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b26:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b2e:	4b57      	ldr	r3, [pc, #348]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b30:	edc3 7a00 	vstr	s15, [r3]
		fusion_speedL = E_speedL;
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <EncoderGyro_PID+0x208>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a53      	ldr	r2, [pc, #332]	; (8004c88 <EncoderGyro_PID+0x1fc>)
 8004b3a:	6013      	str	r3, [r2, #0]
		fusion_speedR = E_speedR;
 8004b3c:	4b54      	ldr	r3, [pc, #336]	; (8004c90 <EncoderGyro_PID+0x204>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a50      	ldr	r2, [pc, #320]	; (8004c84 <EncoderGyro_PID+0x1f8>)
 8004b42:	6013      	str	r3, [r2, #0]
	}
	//enc.error = (straight.velocity - (fusion_speedR + fusion_speedL) / 2);
	enc.delta_error = enc.error - enc.old_error;
 8004b44:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b46:	ed93 7a00 	vldr	s14, [r3]
 8004b4a:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b4c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b56:	edc3 7a03 	vstr	s15, [r3, #12]
	enc.old_error = enc.error;
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b60:	6053      	str	r3, [r2, #4]
	enc.sigma_error += enc.error;
 8004b62:	4b4a      	ldr	r3, [pc, #296]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b64:	ed93 7a02 	vldr	s14, [r3, #8]
 8004b68:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b6a:	edd3 7a00 	vldr	s15, [r3]
 8004b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b72:	4b46      	ldr	r3, [pc, #280]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b74:	edc3 7a02 	vstr	s15, [r3, #8]
	PID_stra = Ksp * enc.error + Ksi * enc.sigma_error + Ksd * enc.delta_error;
 8004b78:	4b44      	ldr	r3, [pc, #272]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b7a:	ed93 7a00 	vldr	s14, [r3]
 8004b7e:	4b46      	ldr	r3, [pc, #280]	; (8004c98 <EncoderGyro_PID+0x20c>)
 8004b80:	edd3 7a00 	vldr	s15, [r3]
 8004b84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004b88:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b8a:	edd3 6a02 	vldr	s13, [r3, #8]
 8004b8e:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <EncoderGyro_PID+0x210>)
 8004b90:	edd3 7a00 	vldr	s15, [r3]
 8004b94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <EncoderGyro_PID+0x200>)
 8004b9e:	edd3 6a03 	vldr	s13, [r3, #12]
 8004ba2:	4b3f      	ldr	r3, [pc, #252]	; (8004ca0 <EncoderGyro_PID+0x214>)
 8004ba4:	edd3 7a00 	vldr	s15, [r3]
 8004ba8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004bac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb0:	edc7 7a05 	vstr	s15, [r7, #20]



//	if ((g_WallControl_mode == 3 || g_WallControl_mode == 1)
//			&& (highspeed_mode == 1)) {
		Gyro.error = (turning_velocity - angle_speed);
 8004bb4:	4b30      	ldr	r3, [pc, #192]	; (8004c78 <EncoderGyro_PID+0x1ec>)
 8004bb6:	edd3 7a00 	vldr	s15, [r3]
 8004bba:	ed97 7a00 	vldr	s14, [r7]
 8004bbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bc2:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bc4:	edc3 7a00 	vstr	s15, [r3]
		Gyro.delta_error = Gyro.error - Gyro.old_error;
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bca:	ed93 7a00 	vldr	s14, [r3]
 8004bce:	4b35      	ldr	r3, [pc, #212]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8004bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bda:	edc3 7a03 	vstr	s15, [r3, #12]
		Gyro.old_error = Gyro.error;
 8004bde:	4b31      	ldr	r3, [pc, #196]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a30      	ldr	r2, [pc, #192]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004be4:	6053      	str	r3, [r2, #4]
		Gyro.sigma_error += Gyro.error;
 8004be6:	4b2f      	ldr	r3, [pc, #188]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004be8:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bec:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bee:	edd3 7a00 	vldr	s15, [r3]
 8004bf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf6:	4b2b      	ldr	r3, [pc, #172]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bf8:	edc3 7a02 	vstr	s15, [r3, #8]
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004bfe:	ed93 7a00 	vldr	s14, [r3]
 8004c02:	4b29      	ldr	r3, [pc, #164]	; (8004ca8 <EncoderGyro_PID+0x21c>)
 8004c04:	edd3 7a00 	vldr	s15, [r3]
 8004c08:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004c0c:	4b25      	ldr	r3, [pc, #148]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004c0e:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c12:	4b26      	ldr	r3, [pc, #152]	; (8004cac <EncoderGyro_PID+0x220>)
 8004c14:	edd3 7a00 	vldr	s15, [r3]
 8004c18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004c1c:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ Ktd * Gyro.delta_error;
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <EncoderGyro_PID+0x218>)
 8004c22:	edd3 6a03 	vldr	s13, [r3, #12]
 8004c26:	4b22      	ldr	r3, [pc, #136]	; (8004cb0 <EncoderGyro_PID+0x224>)
 8004c28:	edd3 7a00 	vldr	s15, [r3]
 8004c2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
		PID_turn = Ktp * Gyro.error + Kti * Gyro.sigma_error
 8004c30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c34:	edc7 7a04 	vstr	s15, [r7, #16]
//
//		*PID_all_R += PID_turn;
//		*PID_all_L -= PID_turn;
//	}

	*PID_s = PID_stra / MAXMOTOR * g_V_battery_mean;
 8004c38:	edd7 7a05 	vldr	s15, [r7, #20]
 8004c3c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8004cb4 <EncoderGyro_PID+0x228>
 8004c40:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c44:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <EncoderGyro_PID+0x22c>)
 8004c46:	edd3 7a00 	vldr	s15, [r3]
 8004c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	edc3 7a00 	vstr	s15, [r3]
	*PID_t = PID_turn / MAXMOTOR * g_V_battery_mean;
 8004c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8004c58:	eddf 6a16 	vldr	s13, [pc, #88]	; 8004cb4 <EncoderGyro_PID+0x228>
 8004c5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004c60:	4b15      	ldr	r3, [pc, #84]	; (8004cb8 <EncoderGyro_PID+0x22c>)
 8004c62:	edd3 7a00 	vldr	s15, [r3]
 8004c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	edc3 7a00 	vstr	s15, [r3]

}
 8004c70:	bf00      	nop
 8004c72:	3718      	adds	r7, #24
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}
 8004c78:	20000248 	.word	0x20000248
 8004c7c:	42f00000 	.word	0x42f00000
 8004c80:	42c80000 	.word	0x42c80000
 8004c84:	2000023c 	.word	0x2000023c
 8004c88:	20000238 	.word	0x20000238
 8004c8c:	20000514 	.word	0x20000514
 8004c90:	2000020c 	.word	0x2000020c
 8004c94:	20000208 	.word	0x20000208
 8004c98:	20000534 	.word	0x20000534
 8004c9c:	20000538 	.word	0x20000538
 8004ca0:	2000053c 	.word	0x2000053c
 8004ca4:	20000524 	.word	0x20000524
 8004ca8:	20000540 	.word	0x20000540
 8004cac:	20000544 	.word	0x20000544
 8004cb0:	20000548 	.word	0x20000548
 8004cb4:	44d1e000 	.word	0x44d1e000
 8004cb8:	200004b4 	.word	0x200004b4

08004cbc <init_WallControl>:
float g_CenterSlantR90_diff, g_CenterSlantL90_diff, g_CenterSlantR45_diff,
		g_CenterSlantL45_diff;



void init_WallControl(void) {
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
	g_WallControl_mode = 0;
 8004cc0:	4b3e      	ldr	r3, [pc, #248]	; (8004dbc <init_WallControl+0x100>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	701a      	strb	r2, [r3, #0]
	g_FrontWallControl_mode = 0;
 8004cc6:	4b3e      	ldr	r3, [pc, #248]	; (8004dc0 <init_WallControl+0x104>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	g_WallControlStatus = 0;
 8004ccc:	4b3d      	ldr	r3, [pc, #244]	; (8004dc4 <init_WallControl+0x108>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
	g_wallCut_mode = 0;
 8004cd2:	4b3d      	ldr	r3, [pc, #244]	; (8004dc8 <init_WallControl+0x10c>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	701a      	strb	r2, [r3, #0]
	StabilityCount_reset = 0;
 8004cd8:	4b3c      	ldr	r3, [pc, #240]	; (8004dcc <init_WallControl+0x110>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	701a      	strb	r2, [r3, #0]
	StabilityCount_L = 0;
 8004cde:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <init_WallControl+0x114>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]
	StabilityCount_R = 0;
 8004ce4:	4b3b      	ldr	r3, [pc, #236]	; (8004dd4 <init_WallControl+0x118>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	701a      	strb	r2, [r3, #0]
	g_sensor_max_l = CENTER_L;
 8004cea:	4b3b      	ldr	r3, [pc, #236]	; (8004dd8 <init_WallControl+0x11c>)
 8004cec:	4a3b      	ldr	r2, [pc, #236]	; (8004ddc <init_WallControl+0x120>)
 8004cee:	601a      	str	r2, [r3, #0]
	g_sensor_max_r = CENTER_R;
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <init_WallControl+0x124>)
 8004cf2:	4a3c      	ldr	r2, [pc, #240]	; (8004de4 <init_WallControl+0x128>)
 8004cf4:	601a      	str	r2, [r3, #0]
	g_skewer_displacement = SKEWER_LIMIT;
 8004cf6:	4b3c      	ldr	r3, [pc, #240]	; (8004de8 <init_WallControl+0x12c>)
 8004cf8:	4a3c      	ldr	r2, [pc, #240]	; (8004dec <init_WallControl+0x130>)
 8004cfa:	601a      	str	r2, [r3, #0]

	NoWallCountL90 = 0;
 8004cfc:	4b3c      	ldr	r3, [pc, #240]	; (8004df0 <init_WallControl+0x134>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	601a      	str	r2, [r3, #0]
	NoWallCountR90 = 0;
 8004d02:	4b3c      	ldr	r3, [pc, #240]	; (8004df4 <init_WallControl+0x138>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]
	NoWallCountL45 = 0;
 8004d08:	4b3b      	ldr	r3, [pc, #236]	; (8004df8 <init_WallControl+0x13c>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
	NoWallCountR45 = 0;
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <init_WallControl+0x140>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
	NoWallCountL45slant = 0;
 8004d14:	4b3a      	ldr	r3, [pc, #232]	; (8004e00 <init_WallControl+0x144>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	601a      	str	r2, [r3, #0]
	NoWallCountR45slant = 0;
 8004d1a:	4b3a      	ldr	r3, [pc, #232]	; (8004e04 <init_WallControl+0x148>)
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	601a      	str	r2, [r3, #0]

	NoWallDisplacementL90 = 0;
 8004d20:	4b39      	ldr	r3, [pc, #228]	; (8004e08 <init_WallControl+0x14c>)
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR90 = 0;
 8004d28:	4b38      	ldr	r3, [pc, #224]	; (8004e0c <init_WallControl+0x150>)
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45 = CUTPLACE_THRESHOLD_END_L45;
 8004d30:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <init_WallControl+0x154>)
 8004d32:	4a38      	ldr	r2, [pc, #224]	; (8004e14 <init_WallControl+0x158>)
 8004d34:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45 = CUTPLACE_THRESHOLD_END_R45;
 8004d36:	4b38      	ldr	r3, [pc, #224]	; (8004e18 <init_WallControl+0x15c>)
 8004d38:	4a36      	ldr	r2, [pc, #216]	; (8004e14 <init_WallControl+0x158>)
 8004d3a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant = 0;
 8004d3c:	4b37      	ldr	r3, [pc, #220]	; (8004e1c <init_WallControl+0x160>)
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant = 0;
 8004d44:	4b36      	ldr	r3, [pc, #216]	; (8004e20 <init_WallControl+0x164>)
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
	NoWallDisplacementL45slant2 = 0;
 8004d4c:	4b35      	ldr	r3, [pc, #212]	; (8004e24 <init_WallControl+0x168>)
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]
	NoWallDisplacementR45slant2 = 0;
 8004d54:	4b34      	ldr	r3, [pc, #208]	; (8004e28 <init_WallControl+0x16c>)
 8004d56:	f04f 0200 	mov.w	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

	NoWallCountL45_flag = 0;
 8004d5c:	4b33      	ldr	r3, [pc, #204]	; (8004e2c <init_WallControl+0x170>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
	NoWallCountR45_flag = 0;
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <init_WallControl+0x174>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	701a      	strb	r2, [r3, #0]
	NoWallCountL45slant_flag = 0;
 8004d68:	4b32      	ldr	r3, [pc, #200]	; (8004e34 <init_WallControl+0x178>)
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	701a      	strb	r2, [r3, #0]
	NoWallCountR45slant_flag = 0;
 8004d6e:	4b32      	ldr	r3, [pc, #200]	; (8004e38 <init_WallControl+0x17c>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	701a      	strb	r2, [r3, #0]
	slantWallControlL_flag = 0;
 8004d74:	4b31      	ldr	r3, [pc, #196]	; (8004e3c <init_WallControl+0x180>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
	slantWallControlR_flag = 0;
 8004d7a:	4b31      	ldr	r3, [pc, #196]	; (8004e40 <init_WallControl+0x184>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]

	front_wall_break_90 = 0;
 8004d80:	4b30      	ldr	r3, [pc, #192]	; (8004e44 <init_WallControl+0x188>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	701a      	strb	r2, [r3, #0]
	front_wall_break_45 = 0;
 8004d86:	4b30      	ldr	r3, [pc, #192]	; (8004e48 <init_WallControl+0x18c>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	701a      	strb	r2, [r3, #0]
	front_wall_break_45slant = 0;
 8004d8c:	4b2f      	ldr	r3, [pc, #188]	; (8004e4c <init_WallControl+0x190>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	701a      	strb	r2, [r3, #0]

	g_sensor_max_fl = 0;
 8004d92:	4b2f      	ldr	r3, [pc, #188]	; (8004e50 <init_WallControl+0x194>)
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr = 0;
 8004d9a:	4b2e      	ldr	r3, [pc, #184]	; (8004e54 <init_WallControl+0x198>)
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	601a      	str	r2, [r3, #0]
	g_sensor_max_fl_slant = 0;
 8004da2:	4b2d      	ldr	r3, [pc, #180]	; (8004e58 <init_WallControl+0x19c>)
 8004da4:	f04f 0200 	mov.w	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
	g_sensor_max_fr_slant = 0;
 8004daa:	4b2c      	ldr	r3, [pc, #176]	; (8004e5c <init_WallControl+0x1a0>)
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	601a      	str	r2, [r3, #0]
}
 8004db2:	bf00      	nop
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	20000570 	.word	0x20000570
 8004dc0:	20000571 	.word	0x20000571
 8004dc4:	20000573 	.word	0x20000573
 8004dc8:	20000572 	.word	0x20000572
 8004dcc:	20000575 	.word	0x20000575
 8004dd0:	20000576 	.word	0x20000576
 8004dd4:	20000577 	.word	0x20000577
 8004dd8:	20000578 	.word	0x20000578
 8004ddc:	44c46000 	.word	0x44c46000
 8004de0:	2000057c 	.word	0x2000057c
 8004de4:	448d4000 	.word	0x448d4000
 8004de8:	20000580 	.word	0x20000580
 8004dec:	420c0000 	.word	0x420c0000
 8004df0:	20000598 	.word	0x20000598
 8004df4:	20000594 	.word	0x20000594
 8004df8:	200005a0 	.word	0x200005a0
 8004dfc:	2000059c 	.word	0x2000059c
 8004e00:	200005a8 	.word	0x200005a8
 8004e04:	200005a4 	.word	0x200005a4
 8004e08:	200005b0 	.word	0x200005b0
 8004e0c:	200005ac 	.word	0x200005ac
 8004e10:	200005b8 	.word	0x200005b8
 8004e14:	42820000 	.word	0x42820000
 8004e18:	200005b4 	.word	0x200005b4
 8004e1c:	200005c0 	.word	0x200005c0
 8004e20:	200005bc 	.word	0x200005bc
 8004e24:	200005c8 	.word	0x200005c8
 8004e28:	200005c4 	.word	0x200005c4
 8004e2c:	200005cc 	.word	0x200005cc
 8004e30:	200005cd 	.word	0x200005cd
 8004e34:	200005ce 	.word	0x200005ce
 8004e38:	200005cf 	.word	0x200005cf
 8004e3c:	200005d0 	.word	0x200005d0
 8004e40:	200005d1 	.word	0x200005d1
 8004e44:	200005d2 	.word	0x200005d2
 8004e48:	200005d3 	.word	0x200005d3
 8004e4c:	200005d4 	.word	0x200005d4
 8004e50:	200005d8 	.word	0x200005d8
 8004e54:	200005dc 	.word	0x200005dc
 8004e58:	200005e0 	.word	0x200005e0
 8004e5c:	200005e4 	.word	0x200005e4

08004e60 <calWallConrol>:


float calWallConrol(void) {
 8004e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e64:	b0aa      	sub	sp, #168	; 0xa8
 8004e66:	af00      	add	r7, sp, #0
	float PID_wall,PID_w;
	float sensor_gain_p, sensor_gain_d;
	float sensorWall_L, sensorWall_R;
	float wallcut_threshold_L, wallcut_threshold_R;

	if (highspeed_mode == 1) {
 8004e68:	4ba1      	ldr	r3, [pc, #644]	; (80050f0 <calWallConrol+0x290>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d13d      	bne.n	8004eec <calWallConrol+0x8c>
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_SHORT_L;
 8004e70:	4ba0      	ldr	r3, [pc, #640]	; (80050f4 <calWallConrol+0x294>)
 8004e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_SHORT_R;
 8004e76:	4ba0      	ldr	r3, [pc, #640]	; (80050f8 <calWallConrol+0x298>)
 8004e78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		if (straight.velocity > 2000) {
 8004e7c:	4b9f      	ldr	r3, [pc, #636]	; (80050fc <calWallConrol+0x29c>)
 8004e7e:	edd3 7a00 	vldr	s15, [r3]
 8004e82:	ed9f 7a9f 	vldr	s14, [pc, #636]	; 8005100 <calWallConrol+0x2a0>
 8004e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e8e:	dd06      	ble.n	8004e9e <calWallConrol+0x3e>
			sensor_gain_p = SENSOR_GAIN_SHORT_P * 2000;
 8004e90:	4b9c      	ldr	r3, [pc, #624]	; (8005104 <calWallConrol+0x2a4>)
 8004e92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * 2000;
 8004e96:	4b9c      	ldr	r3, [pc, #624]	; (8005108 <calWallConrol+0x2a8>)
 8004e98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e9c:	e052      	b.n	8004f44 <calWallConrol+0xe4>
		} else {
			sensor_gain_p = SENSOR_GAIN_SHORT_P * straight.velocity;
 8004e9e:	4b97      	ldr	r3, [pc, #604]	; (80050fc <calWallConrol+0x29c>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fb fb78 	bl	8000598 <__aeabi_f2d>
 8004ea8:	a389      	add	r3, pc, #548	; (adr r3, 80050d0 <calWallConrol+0x270>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	f7fb fbcb 	bl	8000648 <__aeabi_dmul>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	f7fb fe9d 	bl	8000bf8 <__aeabi_d2f>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
			sensor_gain_d = SENSOR_GAIN_SHORT_D * straight.velocity;
 8004ec4:	4b8d      	ldr	r3, [pc, #564]	; (80050fc <calWallConrol+0x29c>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb fb65 	bl	8000598 <__aeabi_f2d>
 8004ece:	a382      	add	r3, pc, #520	; (adr r3, 80050d8 <calWallConrol+0x278>)
 8004ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed4:	f7fb fbb8 	bl	8000648 <__aeabi_dmul>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4610      	mov	r0, r2
 8004ede:	4619      	mov	r1, r3
 8004ee0:	f7fb fe8a 	bl	8000bf8 <__aeabi_d2f>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eea:	e02b      	b.n	8004f44 <calWallConrol+0xe4>
		}
	} else {
		wallcut_threshold_L = CONTROLWALLCUT_THRESHOLD_L;
 8004eec:	4b87      	ldr	r3, [pc, #540]	; (800510c <calWallConrol+0x2ac>)
 8004eee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		wallcut_threshold_R = CONTROLWALLCUT_THRESHOLD_R;
 8004ef2:	4b87      	ldr	r3, [pc, #540]	; (8005110 <calWallConrol+0x2b0>)
 8004ef4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
		sensor_gain_p = SENSOR_GAIN_P * straight.velocity;
 8004ef8:	4b80      	ldr	r3, [pc, #512]	; (80050fc <calWallConrol+0x29c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f7fb fb4b 	bl	8000598 <__aeabi_f2d>
 8004f02:	a377      	add	r3, pc, #476	; (adr r3, 80050e0 <calWallConrol+0x280>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	f7fb fb9e 	bl	8000648 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f7fb fe70 	bl	8000bf8 <__aeabi_d2f>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
		sensor_gain_d = SENSOR_GAIN_D * straight.velocity;
 8004f1e:	4b77      	ldr	r3, [pc, #476]	; (80050fc <calWallConrol+0x29c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fb fb38 	bl	8000598 <__aeabi_f2d>
 8004f28:	a36f      	add	r3, pc, #444	; (adr r3, 80050e8 <calWallConrol+0x288>)
 8004f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2e:	f7fb fb8b 	bl	8000648 <__aeabi_dmul>
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	4610      	mov	r0, r2
 8004f38:	4619      	mov	r1, r3
 8004f3a:	f7fb fe5d 	bl	8000bf8 <__aeabi_d2f>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	}
	if (g_sensor[SENSOR_LEFT][0] < SENSOR_L_MIN) {
 8004f44:	4b73      	ldr	r3, [pc, #460]	; (8005114 <calWallConrol+0x2b4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f5b3 7f39 	cmp.w	r3, #740	; 0x2e4
 8004f4c:	da03      	bge.n	8004f56 <calWallConrol+0xf6>
		sensorWall_L = SENSOR_L_MIN;
 8004f4e:	4b72      	ldr	r3, [pc, #456]	; (8005118 <calWallConrol+0x2b8>)
 8004f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f54:	e011      	b.n	8004f7a <calWallConrol+0x11a>
	} else if (g_sensor[SENSOR_LEFT][0] > SENSOR_L_MAX) {
 8004f56:	4b6f      	ldr	r3, [pc, #444]	; (8005114 <calWallConrol+0x2b4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	dd03      	ble.n	8004f6a <calWallConrol+0x10a>
		sensorWall_L = SENSOR_L_MAX;
 8004f62:	4b6e      	ldr	r3, [pc, #440]	; (800511c <calWallConrol+0x2bc>)
 8004f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f68:	e007      	b.n	8004f7a <calWallConrol+0x11a>
	} else {
		sensorWall_L = (float) (g_sensor[SENSOR_LEFT][0]);
 8004f6a:	4b6a      	ldr	r3, [pc, #424]	; (8005114 <calWallConrol+0x2b4>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	ee07 3a90 	vmov	s15, r3
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f76:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
	}
	if (g_sensor[SENSOR_RIGHT][0] < SENSOR_R_MIN) {
 8004f7a:	4b66      	ldr	r3, [pc, #408]	; (8005114 <calWallConrol+0x2b4>)
 8004f7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f80:	f240 2289 	movw	r2, #649	; 0x289
 8004f84:	4293      	cmp	r3, r2
 8004f86:	dc03      	bgt.n	8004f90 <calWallConrol+0x130>
		sensorWall_R = SENSOR_R_MIN;
 8004f88:	4b65      	ldr	r3, [pc, #404]	; (8005120 <calWallConrol+0x2c0>)
 8004f8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f8e:	e012      	b.n	8004fb6 <calWallConrol+0x156>
	} else if (g_sensor[SENSOR_RIGHT][0] > SENSOR_R_MAX) {
 8004f90:	4b60      	ldr	r3, [pc, #384]	; (8005114 <calWallConrol+0x2b4>)
 8004f92:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004f96:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8004f9a:	dd03      	ble.n	8004fa4 <calWallConrol+0x144>
		sensorWall_R = SENSOR_R_MAX;
 8004f9c:	4b61      	ldr	r3, [pc, #388]	; (8005124 <calWallConrol+0x2c4>)
 8004f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004fa2:	e008      	b.n	8004fb6 <calWallConrol+0x156>
	} else {
		sensorWall_R = (float) (g_sensor[SENSOR_RIGHT][0]);
 8004fa4:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <calWallConrol+0x2b4>)
 8004fa6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8004faa:	ee07 3a90 	vmov	s15, r3
 8004fae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
//
//	SensorDistanceR = -0.0000001684 * g_sensor[2][0] * g_sensor[2][0] * g_sensor[2][0]
//				+ 0.0004061427 * g_sensor[2][0] * g_sensor[2][0] - 0.3784837856 * g_sensor[2][0]
//				+ 197.1162;

	PID_wall = 0;
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	PID_w = 0;
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	66bb      	str	r3, [r7, #104]	; 0x68
	if (g_WallControl_mode == 0) {
 8004fc4:	4b58      	ldr	r3, [pc, #352]	; (8005128 <calWallConrol+0x2c8>)
 8004fc6:	781b      	ldrb	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d11c      	bne.n	8005006 <calWallConrol+0x1a6>
		g_WallControlStatus = 0;
 8004fcc:	4b57      	ldr	r3, [pc, #348]	; (800512c <calWallConrol+0x2cc>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	701a      	strb	r2, [r3, #0]
		StabilityCount_reset = 0;
 8004fd2:	4b57      	ldr	r3, [pc, #348]	; (8005130 <calWallConrol+0x2d0>)
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	701a      	strb	r2, [r3, #0]
		StabilityCount_L = 0;
 8004fd8:	4b56      	ldr	r3, [pc, #344]	; (8005134 <calWallConrol+0x2d4>)
 8004fda:	2200      	movs	r2, #0
 8004fdc:	701a      	strb	r2, [r3, #0]
		StabilityCount_R = 0;
 8004fde:	4b56      	ldr	r3, [pc, #344]	; (8005138 <calWallConrol+0x2d8>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	701a      	strb	r2, [r3, #0]
		g_sensor_max_l = CENTER_L;
 8004fe4:	4b55      	ldr	r3, [pc, #340]	; (800513c <calWallConrol+0x2dc>)
 8004fe6:	4a56      	ldr	r2, [pc, #344]	; (8005140 <calWallConrol+0x2e0>)
 8004fe8:	601a      	str	r2, [r3, #0]
		g_sensor_max_r = CENTER_R;
 8004fea:	4b56      	ldr	r3, [pc, #344]	; (8005144 <calWallConrol+0x2e4>)
 8004fec:	4a56      	ldr	r2, [pc, #344]	; (8005148 <calWallConrol+0x2e8>)
 8004fee:	601a      	str	r2, [r3, #0]
		g_skewer_displacement = SKEWER_LIMIT;
 8004ff0:	4b56      	ldr	r3, [pc, #344]	; (800514c <calWallConrol+0x2ec>)
 8004ff2:	4a57      	ldr	r2, [pc, #348]	; (8005150 <calWallConrol+0x2f0>)
 8004ff4:	601a      	str	r2, [r3, #0]
		PID_wall = 0;
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		pl_yellow_LED_off();
 8004ffe:	f001 fb1b 	bl	8006638 <pl_yellow_LED_off>
 8005002:	f001 baae 	b.w	8006562 <calWallConrol+0x1702>

	} else if (g_WallControl_mode == 1) {
 8005006:	4b48      	ldr	r3, [pc, #288]	; (8005128 <calWallConrol+0x2c8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	f040 82ed 	bne.w	80055ea <calWallConrol+0x78a>

		// 左壁の有無の判定
		if (((g_WallControlStatus >> 0) & 1) == 1) {
 8005010:	4b46      	ldr	r3, [pc, #280]	; (800512c <calWallConrol+0x2cc>)
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	2b00      	cmp	r3, #0
 800501a:	f000 809d 	beq.w	8005158 <calWallConrol+0x2f8>
			//前回左壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_L
 800501e:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <calWallConrol+0x2b4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005026:	db16      	blt.n	8005056 <calWallConrol+0x1f6>
					|| fabs(g_sensor_diff[SENSOR_LEFT]) > wallcut_threshold_L) {
 8005028:	4b4a      	ldr	r3, [pc, #296]	; (8005154 <calWallConrol+0x2f4>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fb faa1 	bl	8000574 <__aeabi_i2d>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4690      	mov	r8, r2
 8005038:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 800503c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8005040:	f7fb faaa 	bl	8000598 <__aeabi_f2d>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4640      	mov	r0, r8
 800504a:	4649      	mov	r1, r9
 800504c:	f7fb fd8c 	bl	8000b68 <__aeabi_dcmpgt>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d037      	beq.n	80050c6 <calWallConrol+0x266>
				g_WallControlStatus = g_WallControlStatus - 1;
 8005056:	4b35      	ldr	r3, [pc, #212]	; (800512c <calWallConrol+0x2cc>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	3b01      	subs	r3, #1
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <calWallConrol+0x2cc>)
 8005060:	701a      	strb	r2, [r3, #0]
				g_sensor_max_l = 0;
 8005062:	4b36      	ldr	r3, [pc, #216]	; (800513c <calWallConrol+0x2dc>)
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 800506a:	2300      	movs	r3, #0
 800506c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005070:	e021      	b.n	80050b6 <calWallConrol+0x256>
					if (g_sensor_max_l < (float) (g_sensor[SENSOR_LEFT][i])) {
 8005072:	4a28      	ldr	r2, [pc, #160]	; (8005114 <calWallConrol+0x2b4>)
 8005074:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800507c:	ee07 3a90 	vmov	s15, r3
 8005080:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005084:	4b2d      	ldr	r3, [pc, #180]	; (800513c <calWallConrol+0x2dc>)
 8005086:	edd3 7a00 	vldr	s15, [r3]
 800508a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800508e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005092:	dd0b      	ble.n	80050ac <calWallConrol+0x24c>
						g_sensor_max_l = (float) (g_sensor[SENSOR_LEFT][i]);
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <calWallConrol+0x2b4>)
 8005096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800509a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800509e:	ee07 3a90 	vmov	s15, r3
 80050a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80050a6:	4b25      	ldr	r3, [pc, #148]	; (800513c <calWallConrol+0x2dc>)
 80050a8:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 80050ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050b0:	3301      	adds	r3, #1
 80050b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050ba:	2b13      	cmp	r3, #19
 80050bc:	ddd9      	ble.n	8005072 <calWallConrol+0x212>
					}
				}
				g_skewer_displacement = 0;
 80050be:	4b23      	ldr	r3, [pc, #140]	; (800514c <calWallConrol+0x2ec>)
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_L = 0;
 80050c6:	4b1b      	ldr	r3, [pc, #108]	; (8005134 <calWallConrol+0x2d4>)
 80050c8:	2200      	movs	r2, #0
 80050ca:	701a      	strb	r2, [r3, #0]
 80050cc:	e066      	b.n	800519c <calWallConrol+0x33c>
 80050ce:	bf00      	nop
 80050d0:	33333333 	.word	0x33333333
 80050d4:	3fe33333 	.word	0x3fe33333
 80050d8:	9999999a 	.word	0x9999999a
 80050dc:	bfa99999 	.word	0xbfa99999
 80050e0:	9999999a 	.word	0x9999999a
 80050e4:	3fe99999 	.word	0x3fe99999
 80050e8:	47ae147b 	.word	0x47ae147b
 80050ec:	3f847ae1 	.word	0x3f847ae1
 80050f0:	200007e8 	.word	0x200007e8
 80050f4:	43340000 	.word	0x43340000
 80050f8:	43020000 	.word	0x43020000
 80050fc:	200004b8 	.word	0x200004b8
 8005100:	44fa0000 	.word	0x44fa0000
 8005104:	44960000 	.word	0x44960000
 8005108:	c2c80000 	.word	0xc2c80000
 800510c:	431d0000 	.word	0x431d0000
 8005110:	42dc0000 	.word	0x42dc0000
 8005114:	20000298 	.word	0x20000298
 8005118:	44390000 	.word	0x44390000
 800511c:	450fc000 	.word	0x450fc000
 8005120:	44228000 	.word	0x44228000
 8005124:	44e10000 	.word	0x44e10000
 8005128:	20000570 	.word	0x20000570
 800512c:	20000573 	.word	0x20000573
 8005130:	20000575 	.word	0x20000575
 8005134:	20000576 	.word	0x20000576
 8005138:	20000577 	.word	0x20000577
 800513c:	20000578 	.word	0x20000578
 8005140:	44c46000 	.word	0x44c46000
 8005144:	2000057c 	.word	0x2000057c
 8005148:	448d4000 	.word	0x448d4000
 800514c:	20000580 	.word	0x20000580
 8005150:	420c0000 	.word	0x420c0000
 8005154:	20000428 	.word	0x20000428
		} else {
			//前回左壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_L
 8005158:	4bbd      	ldr	r3, [pc, #756]	; (8005450 <calWallConrol+0x5f0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 8005160:	dd1c      	ble.n	800519c <calWallConrol+0x33c>
					&& fabs(g_sensor_diff[SENSOR_LEFT]) < wallcut_threshold_L) {
 8005162:	4bbc      	ldr	r3, [pc, #752]	; (8005454 <calWallConrol+0x5f4>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb fa04 	bl	8000574 <__aeabi_i2d>
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4614      	mov	r4, r2
 8005172:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005176:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800517a:	f7fb fa0d 	bl	8000598 <__aeabi_f2d>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4620      	mov	r0, r4
 8005184:	4629      	mov	r1, r5
 8005186:	f7fb fcd1 	bl	8000b2c <__aeabi_dcmplt>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d005      	beq.n	800519c <calWallConrol+0x33c>
				g_WallControlStatus = g_WallControlStatus + 1;
 8005190:	4bb1      	ldr	r3, [pc, #708]	; (8005458 <calWallConrol+0x5f8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4baf      	ldr	r3, [pc, #700]	; (8005458 <calWallConrol+0x5f8>)
 800519a:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_L >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 1;
//			}
		}
		// 右壁の有無の判定
		if (((g_WallControlStatus >> 1) & 1) == 1) {
 800519c:	4bae      	ldr	r3, [pc, #696]	; (8005458 <calWallConrol+0x5f8>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d05b      	beq.n	8005264 <calWallConrol+0x404>
			//前回右壁あり
			//閾値を下回る　or 変化量の急増
			if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_R
 80051ac:	4ba8      	ldr	r3, [pc, #672]	; (8005450 <calWallConrol+0x5f0>)
 80051ae:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80051b2:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80051b6:	db17      	blt.n	80051e8 <calWallConrol+0x388>
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051b8:	4ba6      	ldr	r3, [pc, #664]	; (8005454 <calWallConrol+0x5f4>)
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	4618      	mov	r0, r3
 80051be:	f7fb f9d9 	bl	8000574 <__aeabi_i2d>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	613a      	str	r2, [r7, #16]
 80051c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051cc:	617b      	str	r3, [r7, #20]
							> wallcut_threshold_R) {
 80051ce:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80051d2:	f7fb f9e1 	bl	8000598 <__aeabi_f2d>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
					|| fabs(g_sensor_diff[SENSOR_RIGHT])
 80051da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80051de:	f7fb fcc3 	bl	8000b68 <__aeabi_dcmpgt>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d039      	beq.n	800525c <calWallConrol+0x3fc>
				g_WallControlStatus = g_WallControlStatus - 2;
 80051e8:	4b9b      	ldr	r3, [pc, #620]	; (8005458 <calWallConrol+0x5f8>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	3b02      	subs	r3, #2
 80051ee:	b2da      	uxtb	r2, r3
 80051f0:	4b99      	ldr	r3, [pc, #612]	; (8005458 <calWallConrol+0x5f8>)
 80051f2:	701a      	strb	r2, [r3, #0]
				g_sensor_max_r = 0;
 80051f4:	4b99      	ldr	r3, [pc, #612]	; (800545c <calWallConrol+0x5fc>)
 80051f6:	f04f 0200 	mov.w	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]
				for (int i = 0; i <= 19; i++) {
 80051fc:	2300      	movs	r3, #0
 80051fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005202:	e023      	b.n	800524c <calWallConrol+0x3ec>
					if (g_sensor_max_r < (float) (g_sensor[SENSOR_RIGHT][i])) {
 8005204:	4a92      	ldr	r2, [pc, #584]	; (8005450 <calWallConrol+0x5f0>)
 8005206:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800520a:	3350      	adds	r3, #80	; 0x50
 800520c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005210:	ee07 3a90 	vmov	s15, r3
 8005214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005218:	4b90      	ldr	r3, [pc, #576]	; (800545c <calWallConrol+0x5fc>)
 800521a:	edd3 7a00 	vldr	s15, [r3]
 800521e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005226:	dd0c      	ble.n	8005242 <calWallConrol+0x3e2>
						g_sensor_max_r = (float) (g_sensor[SENSOR_RIGHT][i]);
 8005228:	4a89      	ldr	r2, [pc, #548]	; (8005450 <calWallConrol+0x5f0>)
 800522a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800522e:	3350      	adds	r3, #80	; 0x50
 8005230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800523c:	4b87      	ldr	r3, [pc, #540]	; (800545c <calWallConrol+0x5fc>)
 800523e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i <= 19; i++) {
 8005242:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005246:	3301      	adds	r3, #1
 8005248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800524c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005250:	2b13      	cmp	r3, #19
 8005252:	ddd7      	ble.n	8005204 <calWallConrol+0x3a4>
					}
				}
				g_skewer_displacement = 0;
 8005254:	4b82      	ldr	r3, [pc, #520]	; (8005460 <calWallConrol+0x600>)
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
			}
			StabilityCount_R = 0;
 800525c:	4b81      	ldr	r3, [pc, #516]	; (8005464 <calWallConrol+0x604>)
 800525e:	2200      	movs	r2, #0
 8005260:	701a      	strb	r2, [r3, #0]
 8005262:	e023      	b.n	80052ac <calWallConrol+0x44c>
		} else {
			//前回右壁なし
			//閾値を上回る　and 変化量が落ち着く　+ その安定な状態が数回続く
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_R
 8005264:	4b7a      	ldr	r3, [pc, #488]	; (8005450 <calWallConrol+0x5f0>)
 8005266:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800526a:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 800526e:	dd1d      	ble.n	80052ac <calWallConrol+0x44c>
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005270:	4b78      	ldr	r3, [pc, #480]	; (8005454 <calWallConrol+0x5f4>)
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	4618      	mov	r0, r3
 8005276:	f7fb f97d 	bl	8000574 <__aeabi_i2d>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	60ba      	str	r2, [r7, #8]
 8005280:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005284:	60fb      	str	r3, [r7, #12]
							< wallcut_threshold_R) {
 8005286:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800528a:	f7fb f985 	bl	8000598 <__aeabi_f2d>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
					&& fabs(g_sensor_diff[SENSOR_RIGHT])
 8005292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005296:	f7fb fc49 	bl	8000b2c <__aeabi_dcmplt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d005      	beq.n	80052ac <calWallConrol+0x44c>
				//StabilityCount_R++;
				g_WallControlStatus = g_WallControlStatus + 2;			//安定消す
 80052a0:	4b6d      	ldr	r3, [pc, #436]	; (8005458 <calWallConrol+0x5f8>)
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	3302      	adds	r3, #2
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	4b6b      	ldr	r3, [pc, #428]	; (8005458 <calWallConrol+0x5f8>)
 80052aa:	701a      	strb	r2, [r3, #0]
//			if (StabilityCount_R >= 10) {
//				g_WallControlStatus = g_WallControlStatus + 2;
//			}
		}

		switch (g_WallControlStatus) {
 80052ac:	4b6a      	ldr	r3, [pc, #424]	; (8005458 <calWallConrol+0x5f8>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	f201 8156 	bhi.w	8006562 <calWallConrol+0x1702>
 80052b6:	a201      	add	r2, pc, #4	; (adr r2, 80052bc <calWallConrol+0x45c>)
 80052b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052bc:	080052cd 	.word	0x080052cd
 80052c0:	080053d3 	.word	0x080053d3
 80052c4:	08005481 	.word	0x08005481
 80052c8:	080054eb 	.word	0x080054eb
		case 0:			//両壁なし
			g_skewer_displacement += straight.velocity * INTERRUPT_TIME;
 80052cc:	4b64      	ldr	r3, [pc, #400]	; (8005460 <calWallConrol+0x600>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fb f961 	bl	8000598 <__aeabi_f2d>
 80052d6:	4604      	mov	r4, r0
 80052d8:	460d      	mov	r5, r1
 80052da:	4b63      	ldr	r3, [pc, #396]	; (8005468 <calWallConrol+0x608>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fb f95a 	bl	8000598 <__aeabi_f2d>
 80052e4:	a356      	add	r3, pc, #344	; (adr r3, 8005440 <calWallConrol+0x5e0>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	f7fb f9ad 	bl	8000648 <__aeabi_dmul>
 80052ee:	4602      	mov	r2, r0
 80052f0:	460b      	mov	r3, r1
 80052f2:	4620      	mov	r0, r4
 80052f4:	4629      	mov	r1, r5
 80052f6:	f7fa fff1 	bl	80002dc <__adddf3>
 80052fa:	4602      	mov	r2, r0
 80052fc:	460b      	mov	r3, r1
 80052fe:	4610      	mov	r0, r2
 8005300:	4619      	mov	r1, r3
 8005302:	f7fb fc79 	bl	8000bf8 <__aeabi_d2f>
 8005306:	4603      	mov	r3, r0
 8005308:	4a55      	ldr	r2, [pc, #340]	; (8005460 <calWallConrol+0x600>)
 800530a:	6013      	str	r3, [r2, #0]
			if (g_skewer_displacement < SKEWER_LIMIT) {
 800530c:	4b54      	ldr	r3, [pc, #336]	; (8005460 <calWallConrol+0x600>)
 800530e:	edd3 7a00 	vldr	s15, [r3]
 8005312:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800546c <calWallConrol+0x60c>
 8005316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800531a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800531e:	d52e      	bpl.n	800537e <calWallConrol+0x51e>
				wall_normal.error = 0.7
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005320:	4b53      	ldr	r3, [pc, #332]	; (8005470 <calWallConrol+0x610>)
 8005322:	edd3 7a00 	vldr	s15, [r3]
 8005326:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8005474 <calWallConrol+0x614>
 800532a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800532e:	eef1 6a67 	vneg.f32	s13, s15
 8005332:	4b4f      	ldr	r3, [pc, #316]	; (8005470 <calWallConrol+0x610>)
 8005334:	edd3 7a00 	vldr	s15, [r3]
 8005338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
								+ (g_sensor_max_r - CENTER_R) / g_sensor_max_r);
 800533c:	4b47      	ldr	r3, [pc, #284]	; (800545c <calWallConrol+0x5fc>)
 800533e:	edd3 7a00 	vldr	s15, [r3]
 8005342:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800547c <calWallConrol+0x61c>
 8005346:	ee37 6ae6 	vsub.f32	s12, s15, s13
 800534a:	4b44      	ldr	r3, [pc, #272]	; (800545c <calWallConrol+0x5fc>)
 800534c:	edd3 6a00 	vldr	s13, [r3]
 8005350:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8005354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005358:	ee17 0a90 	vmov	r0, s15
 800535c:	f7fb f91c 	bl	8000598 <__aeabi_f2d>
						* (-(g_sensor_max_l - CENTER_L) / g_sensor_max_l
 8005360:	a339      	add	r3, pc, #228	; (adr r3, 8005448 <calWallConrol+0x5e8>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fb f96f 	bl	8000648 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4610      	mov	r0, r2
 8005370:	4619      	mov	r1, r3
 8005372:	f7fb fc41 	bl	8000bf8 <__aeabi_d2f>
 8005376:	4603      	mov	r3, r0
				wall_normal.error = 0.7
 8005378:	4a3f      	ldr	r2, [pc, #252]	; (8005478 <calWallConrol+0x618>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	e003      	b.n	8005386 <calWallConrol+0x526>
			} else {
				wall_normal.error = 0;
 800537e:	4b3e      	ldr	r3, [pc, #248]	; (8005478 <calWallConrol+0x618>)
 8005380:	f04f 0200 	mov.w	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
			}
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005386:	4b3c      	ldr	r3, [pc, #240]	; (8005478 <calWallConrol+0x618>)
 8005388:	ed93 7a00 	vldr	s14, [r3]
 800538c:	4b3a      	ldr	r3, [pc, #232]	; (8005478 <calWallConrol+0x618>)
 800538e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005392:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005396:	4b38      	ldr	r3, [pc, #224]	; (8005478 <calWallConrol+0x618>)
 8005398:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800539c:	4b36      	ldr	r3, [pc, #216]	; (8005478 <calWallConrol+0x618>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a35      	ldr	r2, [pc, #212]	; (8005478 <calWallConrol+0x618>)
 80053a2:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80053a4:	4b34      	ldr	r3, [pc, #208]	; (8005478 <calWallConrol+0x618>)
 80053a6:	ed93 7a00 	vldr	s14, [r3]
 80053aa:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80053ae:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80053b2:	4b31      	ldr	r3, [pc, #196]	; (8005478 <calWallConrol+0x618>)
 80053b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80053b8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80053bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80053c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053c4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_count(0);
 80053c8:	2000      	movs	r0, #0
 80053ca:	f001 f9a9 	bl	8006720 <pl_yellow_LED_count>
			break;
 80053ce:	f001 b8c8 	b.w	8006562 <calWallConrol+0x1702>
		case 1:			//左壁のみ
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80053d2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80053d6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005474 <calWallConrol+0x614>
 80053da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80053de:	eeb8 7a00 	vmov.f32	s14, #128	; 0xc0000000 -2.0
 80053e2:	ee67 6a87 	vmul.f32	s13, s15, s14
					/ (float) (sensorWall_L));
 80053e6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80053ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (-2 * (float) (sensorWall_L - CENTER_L)
 80053ee:	4b22      	ldr	r3, [pc, #136]	; (8005478 <calWallConrol+0x618>)
 80053f0:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 80053f4:	4b20      	ldr	r3, [pc, #128]	; (8005478 <calWallConrol+0x618>)
 80053f6:	ed93 7a00 	vldr	s14, [r3]
 80053fa:	4b1f      	ldr	r3, [pc, #124]	; (8005478 <calWallConrol+0x618>)
 80053fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8005400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005404:	4b1c      	ldr	r3, [pc, #112]	; (8005478 <calWallConrol+0x618>)
 8005406:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 800540a:	4b1b      	ldr	r3, [pc, #108]	; (8005478 <calWallConrol+0x618>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a1a      	ldr	r2, [pc, #104]	; (8005478 <calWallConrol+0x618>)
 8005410:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 8005412:	4b19      	ldr	r3, [pc, #100]	; (8005478 <calWallConrol+0x618>)
 8005414:	ed93 7a00 	vldr	s14, [r3]
 8005418:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800541c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 8005420:	4b15      	ldr	r3, [pc, #84]	; (8005478 <calWallConrol+0x618>)
 8005422:	edd3 6a02 	vldr	s13, [r3, #8]
 8005426:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800542a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800542e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005432:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-2 * (float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0]));
			pl_yellow_LED_count(240);
 8005436:	20f0      	movs	r0, #240	; 0xf0
 8005438:	f001 f972 	bl	8006720 <pl_yellow_LED_count>
			break;
 800543c:	f001 b891 	b.w	8006562 <calWallConrol+0x1702>
 8005440:	d2f1a9fc 	.word	0xd2f1a9fc
 8005444:	3f50624d 	.word	0x3f50624d
 8005448:	66666666 	.word	0x66666666
 800544c:	3fe66666 	.word	0x3fe66666
 8005450:	20000298 	.word	0x20000298
 8005454:	20000428 	.word	0x20000428
 8005458:	20000573 	.word	0x20000573
 800545c:	2000057c 	.word	0x2000057c
 8005460:	20000580 	.word	0x20000580
 8005464:	20000577 	.word	0x20000577
 8005468:	200004b8 	.word	0x200004b8
 800546c:	420c0000 	.word	0x420c0000
 8005470:	20000578 	.word	0x20000578
 8005474:	44c46000 	.word	0x44c46000
 8005478:	2000054c 	.word	0x2000054c
 800547c:	448d4000 	.word	0x448d4000
		case 2:			//右壁のみ
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005480:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005484:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 800547c <calWallConrol+0x61c>
 8005488:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800548c:	ee77 6aa7 	vadd.f32	s13, s15, s15
					/ (float) (sensorWall_R));
 8005490:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8005494:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_normal.error = (2 * (float) (sensorWall_R - CENTER_R)
 8005498:	4bbd      	ldr	r3, [pc, #756]	; (8005790 <calWallConrol+0x930>)
 800549a:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 800549e:	4bbc      	ldr	r3, [pc, #752]	; (8005790 <calWallConrol+0x930>)
 80054a0:	ed93 7a00 	vldr	s14, [r3]
 80054a4:	4bba      	ldr	r3, [pc, #744]	; (8005790 <calWallConrol+0x930>)
 80054a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80054aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80054ae:	4bb8      	ldr	r3, [pc, #736]	; (8005790 <calWallConrol+0x930>)
 80054b0:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 80054b4:	4bb6      	ldr	r3, [pc, #728]	; (8005790 <calWallConrol+0x930>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4ab5      	ldr	r2, [pc, #724]	; (8005790 <calWallConrol+0x930>)
 80054ba:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 80054bc:	4bb4      	ldr	r3, [pc, #720]	; (8005790 <calWallConrol+0x930>)
 80054be:	ed93 7a00 	vldr	s14, [r3]
 80054c2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80054c6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 80054ca:	4bb1      	ldr	r3, [pc, #708]	; (8005790 <calWallConrol+0x930>)
 80054cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80054d0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80054d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 80054d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054dc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (2 * (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(15);
 80054e0:	200f      	movs	r0, #15
 80054e2:	f001 f91d 	bl	8006720 <pl_yellow_LED_count>
			break;
 80054e6:	f001 b83c 	b.w	8006562 <calWallConrol+0x1702>
		case 3:			//両壁あり
			wall_normal.error =
					(-(float) (sensorWall_L - CENTER_L) / (float) (sensorWall_L)
 80054ea:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054ee:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8005794 <calWallConrol+0x934>
 80054f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80054f6:	eef1 6a67 	vneg.f32	s13, s15
 80054fa:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80054fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
							+ (float) (sensorWall_R - CENTER_R)
 8005502:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8005506:	eddf 6aa4 	vldr	s13, [pc, #656]	; 8005798 <calWallConrol+0x938>
 800550a:	ee37 6ae6 	vsub.f32	s12, s15, s13
									/ (float) (sensorWall_R));
 800550e:	edd7 6a25 	vldr	s13, [r7, #148]	; 0x94
 8005512:	eec6 7a26 	vdiv.f32	s15, s12, s13
							+ (float) (sensorWall_R - CENTER_R)
 8005516:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_normal.error =
 800551a:	4b9d      	ldr	r3, [pc, #628]	; (8005790 <calWallConrol+0x930>)
 800551c:	edc3 7a00 	vstr	s15, [r3]
			wall_normal.delta_error = wall_normal.error - wall_normal.old_error;
 8005520:	4b9b      	ldr	r3, [pc, #620]	; (8005790 <calWallConrol+0x930>)
 8005522:	ed93 7a00 	vldr	s14, [r3]
 8005526:	4b9a      	ldr	r3, [pc, #616]	; (8005790 <calWallConrol+0x930>)
 8005528:	edd3 7a01 	vldr	s15, [r3, #4]
 800552c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005530:	4b97      	ldr	r3, [pc, #604]	; (8005790 <calWallConrol+0x930>)
 8005532:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_normal.old_error = wall_normal.error;
 8005536:	4b96      	ldr	r3, [pc, #600]	; (8005790 <calWallConrol+0x930>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a95      	ldr	r2, [pc, #596]	; (8005790 <calWallConrol+0x930>)
 800553c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_p * wall_normal.error
 800553e:	4b94      	ldr	r3, [pc, #592]	; (8005790 <calWallConrol+0x930>)
 8005540:	ed93 7a00 	vldr	s14, [r3]
 8005544:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8005548:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_d * wall_normal.delta_error;
 800554c:	4b90      	ldr	r3, [pc, #576]	; (8005790 <calWallConrol+0x930>)
 800554e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005552:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8005556:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_p * wall_normal.error
 800555a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800555e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
//			PID_wall = sensor_gain
//					* (-(float) (g_sensor[SENSOR_LEFT][0] - CENTER_L)/(float) (g_sensor[SENSOR_LEFT][0])
//							+ (float) (g_sensor[SENSOR_RIGHT][0] - CENTER_R)/(float) (g_sensor[SENSOR_RIGHT][0]));
			pl_yellow_LED_count(255);
 8005562:	20ff      	movs	r0, #255	; 0xff
 8005564:	f001 f8dc 	bl	8006720 <pl_yellow_LED_count>
			if ((fabs(g_sensor_diff[SENSOR_LEFT]) < 30)
 8005568:	4b8c      	ldr	r3, [pc, #560]	; (800579c <calWallConrol+0x93c>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4618      	mov	r0, r3
 800556e:	f7fb f801 	bl	8000574 <__aeabi_i2d>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	603a      	str	r2, [r7, #0]
 8005578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800557c:	607b      	str	r3, [r7, #4]
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <calWallConrol+0x940>)
 8005584:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005588:	f7fb fad0 	bl	8000b2c <__aeabi_dcmplt>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01a      	beq.n	80055c8 <calWallConrol+0x768>
					&& (fabs(g_sensor_diff[SENSOR_RIGHT]) < 30)) {
 8005592:	4b82      	ldr	r3, [pc, #520]	; (800579c <calWallConrol+0x93c>)
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa ffec 	bl	8000574 <__aeabi_i2d>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4692      	mov	sl, r2
 80055a2:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	4b7d      	ldr	r3, [pc, #500]	; (80057a0 <calWallConrol+0x940>)
 80055ac:	4650      	mov	r0, sl
 80055ae:	4659      	mov	r1, fp
 80055b0:	f7fb fabc 	bl	8000b2c <__aeabi_dcmplt>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d006      	beq.n	80055c8 <calWallConrol+0x768>
				StabilityCount_reset++;
 80055ba:	4b7a      	ldr	r3, [pc, #488]	; (80057a4 <calWallConrol+0x944>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	3301      	adds	r3, #1
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	4b78      	ldr	r3, [pc, #480]	; (80057a4 <calWallConrol+0x944>)
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	e002      	b.n	80055ce <calWallConrol+0x76e>
			} else {
				StabilityCount_reset = 0;
 80055c8:	4b76      	ldr	r3, [pc, #472]	; (80057a4 <calWallConrol+0x944>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
			}
			if (StabilityCount_reset >= 25) {
 80055ce:	4b75      	ldr	r3, [pc, #468]	; (80057a4 <calWallConrol+0x944>)
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	2b18      	cmp	r3, #24
 80055d4:	f240 87c4 	bls.w	8006560 <calWallConrol+0x1700>
				Gyro.sigma_error = 0;
 80055d8:	4b73      	ldr	r3, [pc, #460]	; (80057a8 <calWallConrol+0x948>)
 80055da:	f04f 0200 	mov.w	r2, #0
 80055de:	609a      	str	r2, [r3, #8]
				StabilityCount_reset = 0;
 80055e0:	4b70      	ldr	r3, [pc, #448]	; (80057a4 <calWallConrol+0x944>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80055e6:	f000 bfbb 	b.w	8006560 <calWallConrol+0x1700>
		}
//		if (highspeed_mode == 1) {
//			PID_wall = PID_wall * 0.7;
//		}

	} else if (g_WallControl_mode == 2) {
 80055ea:	4b70      	ldr	r3, [pc, #448]	; (80057ac <calWallConrol+0x94c>)
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d16b      	bne.n	80056ca <calWallConrol+0x86a>
// 斜めの制御
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_FRONT_L
 80055f2:	4b6f      	ldr	r3, [pc, #444]	; (80057b0 <calWallConrol+0x950>)
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	2b64      	cmp	r3, #100	; 0x64
 80055f8:	dd0a      	ble.n	8005610 <calWallConrol+0x7b0>
				&& g_sensor[SENSOR_FRONT_RIGHT][0]
 80055fa:	4b6d      	ldr	r3, [pc, #436]	; (80057b0 <calWallConrol+0x950>)
 80055fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005600:	2b96      	cmp	r3, #150	; 0x96
 8005602:	dd05      	ble.n	8005610 <calWallConrol+0x7b0>
						> CONTROLWALL_THRESHOLD_FRONT_R) {
			PID_wall = 0;
 8005604:	f04f 0300 	mov.w	r3, #0
 8005608:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800560c:	f000 bfa9 	b.w	8006562 <calWallConrol+0x1702>
		} else if (g_sensor[SENSOR_FRONT_LEFT][0]
 8005610:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <calWallConrol+0x950>)
 8005612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005614:	2b64      	cmp	r3, #100	; 0x64
 8005616:	dd1f      	ble.n	8005658 <calWallConrol+0x7f8>
				> CONTROLWALL_THRESHOLD_FRONT_L
				&& g_sensor[SENSOR_FRONT_RIGHT][0]
 8005618:	4b65      	ldr	r3, [pc, #404]	; (80057b0 <calWallConrol+0x950>)
 800561a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561e:	2b96      	cmp	r3, #150	; 0x96
 8005620:	dc1a      	bgt.n	8005658 <calWallConrol+0x7f8>
						<= CONTROLWALL_THRESHOLD_FRONT_R) {
			PID_wall = SENSOR_GAIN_SLANT
					* ((float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005622:	4b63      	ldr	r3, [pc, #396]	; (80057b0 <calWallConrol+0x950>)
 8005624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
							- CONTROLWALL_THRESHOLD_FRONT_L));
 8005626:	3b64      	subs	r3, #100	; 0x64
					* ((float) (g_sensor[SENSOR_FRONT_LEFT][0]
 8005628:	ee07 3a90 	vmov	s15, r3
 800562c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005630:	ee17 0a90 	vmov	r0, s15
 8005634:	f7fa ffb0 	bl	8000598 <__aeabi_f2d>
 8005638:	a34f      	add	r3, pc, #316	; (adr r3, 8005778 <calWallConrol+0x918>)
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	f7fb f803 	bl	8000648 <__aeabi_dmul>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
			PID_wall = SENSOR_GAIN_SLANT
 8005646:	4610      	mov	r0, r2
 8005648:	4619      	mov	r1, r3
 800564a:	f7fb fad5 	bl	8000bf8 <__aeabi_d2f>
 800564e:	4603      	mov	r3, r0
 8005650:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005654:	f000 bf85 	b.w	8006562 <calWallConrol+0x1702>
		} else if (g_sensor[SENSOR_FRONT_LEFT][0]
 8005658:	4b55      	ldr	r3, [pc, #340]	; (80057b0 <calWallConrol+0x950>)
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	2b64      	cmp	r3, #100	; 0x64
 800565e:	dc23      	bgt.n	80056a8 <calWallConrol+0x848>
				<= CONTROLWALL_THRESHOLD_FRONT_L
				&& g_sensor[SENSOR_FRONT_RIGHT][0]
 8005660:	4b53      	ldr	r3, [pc, #332]	; (80057b0 <calWallConrol+0x950>)
 8005662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005666:	2b96      	cmp	r3, #150	; 0x96
 8005668:	dd1e      	ble.n	80056a8 <calWallConrol+0x848>
						> CONTROLWALL_THRESHOLD_FRONT_R) {
			PID_wall = SENSOR_GAIN_SLANT
					* (-(float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 800566a:	4b51      	ldr	r3, [pc, #324]	; (80057b0 <calWallConrol+0x950>)
 800566c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
							- CONTROLWALL_THRESHOLD_FRONT_R));
 8005670:	3b96      	subs	r3, #150	; 0x96
					* (-(float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005672:	ee07 3a90 	vmov	s15, r3
 8005676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800567a:	eef1 7a67 	vneg.f32	s15, s15
 800567e:	ee17 3a90 	vmov	r3, s15
 8005682:	4618      	mov	r0, r3
 8005684:	f7fa ff88 	bl	8000598 <__aeabi_f2d>
 8005688:	a33b      	add	r3, pc, #236	; (adr r3, 8005778 <calWallConrol+0x918>)
 800568a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568e:	f7fa ffdb 	bl	8000648 <__aeabi_dmul>
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
			PID_wall = SENSOR_GAIN_SLANT
 8005696:	4610      	mov	r0, r2
 8005698:	4619      	mov	r1, r3
 800569a:	f7fb faad 	bl	8000bf8 <__aeabi_d2f>
 800569e:	4603      	mov	r3, r0
 80056a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056a4:	f000 bf5d 	b.w	8006562 <calWallConrol+0x1702>
		} else if (g_sensor[SENSOR_FRONT_LEFT][0]
 80056a8:	4b41      	ldr	r3, [pc, #260]	; (80057b0 <calWallConrol+0x950>)
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	2b64      	cmp	r3, #100	; 0x64
 80056ae:	f300 8758 	bgt.w	8006562 <calWallConrol+0x1702>
				<= CONTROLWALL_THRESHOLD_FRONT_L
				&& g_sensor[SENSOR_FRONT_RIGHT][0]
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <calWallConrol+0x950>)
 80056b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80056b8:	2b96      	cmp	r3, #150	; 0x96
 80056ba:	f300 8752 	bgt.w	8006562 <calWallConrol+0x1702>
						<= CONTROLWALL_THRESHOLD_FRONT_R) {
			PID_wall = 0;
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80056c6:	f000 bf4c 	b.w	8006562 <calWallConrol+0x1702>
		}

	} else if (g_WallControl_mode == 3) {
 80056ca:	4b38      	ldr	r3, [pc, #224]	; (80057ac <calWallConrol+0x94c>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b03      	cmp	r3, #3
 80056d0:	f040 8747 	bne.w	8006562 <calWallConrol+0x1702>
		//g_WallControlStatus=3;
		float CenterSlantR, CenterSlantL;
		float coefficientR[4];
		float coefficientL[4];
		float sensor_gain_slant90_p, sensor_gain_slant90_d;
		if (straight.velocity > 2000) {
 80056d4:	4b37      	ldr	r3, [pc, #220]	; (80057b4 <calWallConrol+0x954>)
 80056d6:	edd3 7a00 	vldr	s15, [r3]
 80056da:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80057b8 <calWallConrol+0x958>
 80056de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80056e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056e6:	dd05      	ble.n	80056f4 <calWallConrol+0x894>
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * 2000;
 80056e8:	4b34      	ldr	r3, [pc, #208]	; (80057bc <calWallConrol+0x95c>)
 80056ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * 2000;
 80056ee:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <calWallConrol+0x960>)
 80056f0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056f2:	e024      	b.n	800573e <calWallConrol+0x8de>
		} else {
			sensor_gain_slant90_p = SENSOR_GAIN_SLANT90_P * straight.velocity;
 80056f4:	4b2f      	ldr	r3, [pc, #188]	; (80057b4 <calWallConrol+0x954>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fa ff4d 	bl	8000598 <__aeabi_f2d>
 80056fe:	a320      	add	r3, pc, #128	; (adr r3, 8005780 <calWallConrol+0x920>)
 8005700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005704:	f7fa ffa0 	bl	8000648 <__aeabi_dmul>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4610      	mov	r0, r2
 800570e:	4619      	mov	r1, r3
 8005710:	f7fb fa72 	bl	8000bf8 <__aeabi_d2f>
 8005714:	4603      	mov	r3, r0
 8005716:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			sensor_gain_slant90_d = SENSOR_GAIN_SLANT90_D * straight.velocity;
 800571a:	4b26      	ldr	r3, [pc, #152]	; (80057b4 <calWallConrol+0x954>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7fa ff3a 	bl	8000598 <__aeabi_f2d>
 8005724:	a318      	add	r3, pc, #96	; (adr r3, 8005788 <calWallConrol+0x928>)
 8005726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572a:	f7fa ff8d 	bl	8000648 <__aeabi_dmul>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4610      	mov	r0, r2
 8005734:	4619      	mov	r1, r3
 8005736:	f7fb fa5f 	bl	8000bf8 <__aeabi_d2f>
 800573a:	4603      	mov	r3, r0
 800573c:	67fb      	str	r3, [r7, #124]	; 0x7c
		}

		if (NoWallDisplacementR45slant > AREAMIN_R0
 800573e:	4b21      	ldr	r3, [pc, #132]	; (80057c4 <calWallConrol+0x964>)
 8005740:	edd3 7a00 	vldr	s15, [r3]
 8005744:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005748:	eef4 7ac7 	vcmpe.f32	s15, s14
 800574c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005750:	dd42      	ble.n	80057d8 <calWallConrol+0x978>
				&& NoWallDisplacementR45slant <= AREAMAX_R0) {
 8005752:	4b1c      	ldr	r3, [pc, #112]	; (80057c4 <calWallConrol+0x964>)
 8005754:	edd3 7a00 	vldr	s15, [r3]
 8005758:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800575c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005764:	d838      	bhi.n	80057d8 <calWallConrol+0x978>
			coefficientR[0] = COEFFICIENT_R0_0;
 8005766:	4b18      	ldr	r3, [pc, #96]	; (80057c8 <calWallConrol+0x968>)
 8005768:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R0_1;
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <calWallConrol+0x96c>)
 800576c:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R0_2;
 800576e:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <calWallConrol+0x970>)
 8005770:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R0_3;
 8005772:	4b18      	ldr	r3, [pc, #96]	; (80057d4 <calWallConrol+0x974>)
 8005774:	657b      	str	r3, [r7, #84]	; 0x54
 8005776:	e08f      	b.n	8005898 <calWallConrol+0xa38>
 8005778:	47ae147b 	.word	0x47ae147b
 800577c:	3f847ae1 	.word	0x3f847ae1
 8005780:	66666666 	.word	0x66666666
 8005784:	3fee6666 	.word	0x3fee6666
 8005788:	47ae147b 	.word	0x47ae147b
 800578c:	bfb47ae1 	.word	0xbfb47ae1
 8005790:	2000054c 	.word	0x2000054c
 8005794:	44c46000 	.word	0x44c46000
 8005798:	448d4000 	.word	0x448d4000
 800579c:	20000428 	.word	0x20000428
 80057a0:	403e0000 	.word	0x403e0000
 80057a4:	20000575 	.word	0x20000575
 80057a8:	20000524 	.word	0x20000524
 80057ac:	20000570 	.word	0x20000570
 80057b0:	20000298 	.word	0x20000298
 80057b4:	200004b8 	.word	0x200004b8
 80057b8:	44fa0000 	.word	0x44fa0000
 80057bc:	44ed8000 	.word	0x44ed8000
 80057c0:	c3200000 	.word	0xc3200000
 80057c4:	200005bc 	.word	0x200005bc
 80057c8:	44129ffe 	.word	0x44129ffe
 80057cc:	40a2c583 	.word	0x40a2c583
 80057d0:	3efbe9c3 	.word	0x3efbe9c3
 80057d4:	bbad03da 	.word	0xbbad03da
		} else if (NoWallDisplacementR45slant > AREAMIN_R1
 80057d8:	4b9c      	ldr	r3, [pc, #624]	; (8005a4c <calWallConrol+0xbec>)
 80057da:	edd3 7a00 	vldr	s15, [r3]
 80057de:	ed9f 7a9c 	vldr	s14, [pc, #624]	; 8005a50 <calWallConrol+0xbf0>
 80057e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057ea:	dd12      	ble.n	8005812 <calWallConrol+0x9b2>
				&& NoWallDisplacementR45slant <= AREAMAX_R1) {
 80057ec:	4b97      	ldr	r3, [pc, #604]	; (8005a4c <calWallConrol+0xbec>)
 80057ee:	edd3 7a00 	vldr	s15, [r3]
 80057f2:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8005a54 <calWallConrol+0xbf4>
 80057f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80057fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057fe:	d808      	bhi.n	8005812 <calWallConrol+0x9b2>
			coefficientR[0] = COEFFICIENT_R1_0;
 8005800:	4b95      	ldr	r3, [pc, #596]	; (8005a58 <calWallConrol+0xbf8>)
 8005802:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R1_1;
 8005804:	4b95      	ldr	r3, [pc, #596]	; (8005a5c <calWallConrol+0xbfc>)
 8005806:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R1_2;
 8005808:	4b95      	ldr	r3, [pc, #596]	; (8005a60 <calWallConrol+0xc00>)
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R1_3;
 800580c:	4b95      	ldr	r3, [pc, #596]	; (8005a64 <calWallConrol+0xc04>)
 800580e:	657b      	str	r3, [r7, #84]	; 0x54
 8005810:	e042      	b.n	8005898 <calWallConrol+0xa38>
		} else if (NoWallDisplacementR45slant > AREAMIN_R2
 8005812:	4b8e      	ldr	r3, [pc, #568]	; (8005a4c <calWallConrol+0xbec>)
 8005814:	edd3 7a00 	vldr	s15, [r3]
 8005818:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8005a68 <calWallConrol+0xc08>
 800581c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005824:	dd12      	ble.n	800584c <calWallConrol+0x9ec>
				&& NoWallDisplacementR45slant <= AREAMAX_R2) {
 8005826:	4b89      	ldr	r3, [pc, #548]	; (8005a4c <calWallConrol+0xbec>)
 8005828:	edd3 7a00 	vldr	s15, [r3]
 800582c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8005a6c <calWallConrol+0xc0c>
 8005830:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005838:	d808      	bhi.n	800584c <calWallConrol+0x9ec>
			coefficientR[0] = COEFFICIENT_R2_0;
 800583a:	4b8d      	ldr	r3, [pc, #564]	; (8005a70 <calWallConrol+0xc10>)
 800583c:	64bb      	str	r3, [r7, #72]	; 0x48
			coefficientR[1] = COEFFICIENT_R2_1;
 800583e:	4b8d      	ldr	r3, [pc, #564]	; (8005a74 <calWallConrol+0xc14>)
 8005840:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = COEFFICIENT_R2_2;
 8005842:	4b8d      	ldr	r3, [pc, #564]	; (8005a78 <calWallConrol+0xc18>)
 8005844:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = COEFFICIENT_R2_3;
 8005846:	4b8d      	ldr	r3, [pc, #564]	; (8005a7c <calWallConrol+0xc1c>)
 8005848:	657b      	str	r3, [r7, #84]	; 0x54
 800584a:	e025      	b.n	8005898 <calWallConrol+0xa38>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R) {
 800584c:	4b8c      	ldr	r3, [pc, #560]	; (8005a80 <calWallConrol+0xc20>)
 800584e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005852:	2b5a      	cmp	r3, #90	; 0x5a
 8005854:	dd07      	ble.n	8005866 <calWallConrol+0xa06>
				g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005856:	4b8b      	ldr	r3, [pc, #556]	; (8005a84 <calWallConrol+0xc24>)
 8005858:	781b      	ldrb	r3, [r3, #0]
 800585a:	f043 0302 	orr.w	r3, r3, #2
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b88      	ldr	r3, [pc, #544]	; (8005a84 <calWallConrol+0xc24>)
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e006      	b.n	8005874 <calWallConrol+0xa14>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005866:	4b87      	ldr	r3, [pc, #540]	; (8005a84 <calWallConrol+0xc24>)
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	f023 0302 	bic.w	r3, r3, #2
 800586e:	b2da      	uxtb	r2, r3
 8005870:	4b84      	ldr	r3, [pc, #528]	; (8005a84 <calWallConrol+0xc24>)
 8005872:	701a      	strb	r2, [r3, #0]
			}
			coefficientR[0] = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005874:	4b82      	ldr	r3, [pc, #520]	; (8005a80 <calWallConrol+0xc20>)
 8005876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800587a:	ee07 3a90 	vmov	s15, r3
 800587e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005882:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			coefficientR[1] = 0;
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	64fb      	str	r3, [r7, #76]	; 0x4c
			coefficientR[2] = 0;
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	653b      	str	r3, [r7, #80]	; 0x50
			coefficientR[3] = 0;
 8005892:	f04f 0300 	mov.w	r3, #0
 8005896:	657b      	str	r3, [r7, #84]	; 0x54
		}

		if (NoWallDisplacementL45slant > AREAMIN_L0
 8005898:	4b7b      	ldr	r3, [pc, #492]	; (8005a88 <calWallConrol+0xc28>)
 800589a:	edd3 7a00 	vldr	s15, [r3]
 800589e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80058a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058aa:	dd12      	ble.n	80058d2 <calWallConrol+0xa72>
				&& NoWallDisplacementL45slant <= AREAMAX_L0) {
 80058ac:	4b76      	ldr	r3, [pc, #472]	; (8005a88 <calWallConrol+0xc28>)
 80058ae:	edd3 7a00 	vldr	s15, [r3]
 80058b2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80058b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058be:	d808      	bhi.n	80058d2 <calWallConrol+0xa72>
			coefficientL[0] = COEFFICIENT_L0_0;
 80058c0:	4b72      	ldr	r3, [pc, #456]	; (8005a8c <calWallConrol+0xc2c>)
 80058c2:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L0_1;
 80058c4:	4b72      	ldr	r3, [pc, #456]	; (8005a90 <calWallConrol+0xc30>)
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L0_2;
 80058c8:	4b72      	ldr	r3, [pc, #456]	; (8005a94 <calWallConrol+0xc34>)
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L0_3;
 80058cc:	4b72      	ldr	r3, [pc, #456]	; (8005a98 <calWallConrol+0xc38>)
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
 80058d0:	e05d      	b.n	800598e <calWallConrol+0xb2e>
		} else if (NoWallDisplacementL45slant > AREAMIN_L1
 80058d2:	4b6d      	ldr	r3, [pc, #436]	; (8005a88 <calWallConrol+0xc28>)
 80058d4:	edd3 7a00 	vldr	s15, [r3]
 80058d8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8005a50 <calWallConrol+0xbf0>
 80058dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058e4:	dd12      	ble.n	800590c <calWallConrol+0xaac>
				&& NoWallDisplacementL45slant <= AREAMAX_L1) {
 80058e6:	4b68      	ldr	r3, [pc, #416]	; (8005a88 <calWallConrol+0xc28>)
 80058e8:	edd3 7a00 	vldr	s15, [r3]
 80058ec:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005a54 <calWallConrol+0xbf4>
 80058f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f8:	d808      	bhi.n	800590c <calWallConrol+0xaac>
			coefficientL[0] = COEFFICIENT_L1_0;
 80058fa:	4b68      	ldr	r3, [pc, #416]	; (8005a9c <calWallConrol+0xc3c>)
 80058fc:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L1_1;
 80058fe:	4b68      	ldr	r3, [pc, #416]	; (8005aa0 <calWallConrol+0xc40>)
 8005900:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L1_2;
 8005902:	4b68      	ldr	r3, [pc, #416]	; (8005aa4 <calWallConrol+0xc44>)
 8005904:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L1_3;
 8005906:	4b68      	ldr	r3, [pc, #416]	; (8005aa8 <calWallConrol+0xc48>)
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
 800590a:	e040      	b.n	800598e <calWallConrol+0xb2e>
		} else if (NoWallDisplacementL45slant > AREAMIN_L2
 800590c:	4b5e      	ldr	r3, [pc, #376]	; (8005a88 <calWallConrol+0xc28>)
 800590e:	edd3 7a00 	vldr	s15, [r3]
 8005912:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8005a68 <calWallConrol+0xc08>
 8005916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800591a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800591e:	dd12      	ble.n	8005946 <calWallConrol+0xae6>
				&& NoWallDisplacementL45slant <= AREAMAX_L2) {
 8005920:	4b59      	ldr	r3, [pc, #356]	; (8005a88 <calWallConrol+0xc28>)
 8005922:	edd3 7a00 	vldr	s15, [r3]
 8005926:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8005a6c <calWallConrol+0xc0c>
 800592a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800592e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005932:	d808      	bhi.n	8005946 <calWallConrol+0xae6>
			coefficientL[0] = COEFFICIENT_L2_0;
 8005934:	4b5d      	ldr	r3, [pc, #372]	; (8005aac <calWallConrol+0xc4c>)
 8005936:	63bb      	str	r3, [r7, #56]	; 0x38
			coefficientL[1] = COEFFICIENT_L2_1;
 8005938:	4b5d      	ldr	r3, [pc, #372]	; (8005ab0 <calWallConrol+0xc50>)
 800593a:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = COEFFICIENT_L2_2;
 800593c:	4b5d      	ldr	r3, [pc, #372]	; (8005ab4 <calWallConrol+0xc54>)
 800593e:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = COEFFICIENT_L2_3;
 8005940:	4b5d      	ldr	r3, [pc, #372]	; (8005ab8 <calWallConrol+0xc58>)
 8005942:	647b      	str	r3, [r7, #68]	; 0x44
 8005944:	e023      	b.n	800598e <calWallConrol+0xb2e>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L) {
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <calWallConrol+0xc20>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b5a      	cmp	r3, #90	; 0x5a
 800594c:	dd07      	ble.n	800595e <calWallConrol+0xafe>
				g_WallControlStatus = g_WallControlStatus | (1 << 0);
 800594e:	4b4d      	ldr	r3, [pc, #308]	; (8005a84 <calWallConrol+0xc24>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	b2da      	uxtb	r2, r3
 8005958:	4b4a      	ldr	r3, [pc, #296]	; (8005a84 <calWallConrol+0xc24>)
 800595a:	701a      	strb	r2, [r3, #0]
 800595c:	e006      	b.n	800596c <calWallConrol+0xb0c>
			} else {
				g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 800595e:	4b49      	ldr	r3, [pc, #292]	; (8005a84 <calWallConrol+0xc24>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <calWallConrol+0xc24>)
 800596a:	701a      	strb	r2, [r3, #0]
			}
			coefficientL[0] = (float) (g_sensor[SENSOR_LEFT][0]);
 800596c:	4b44      	ldr	r3, [pc, #272]	; (8005a80 <calWallConrol+0xc20>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005978:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
			coefficientL[1] = 0;
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
			coefficientL[2] = 0;
 8005982:	f04f 0300 	mov.w	r3, #0
 8005986:	643b      	str	r3, [r7, #64]	; 0x40
			coefficientL[3] = 0;
 8005988:	f04f 0300 	mov.w	r3, #0
 800598c:	647b      	str	r3, [r7, #68]	; 0x44
		}

		CenterSlantR = coefficientR[0]
 800598e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
				+ coefficientR[1] * NoWallDisplacementR45slant
 8005992:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8005996:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <calWallConrol+0xbec>)
 8005998:	edd3 7a00 	vldr	s15, [r3]
 800599c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059a0:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80059a4:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80059a8:	4b28      	ldr	r3, [pc, #160]	; (8005a4c <calWallConrol+0xbec>)
 80059aa:	edd3 7a00 	vldr	s15, [r3]
 80059ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80059b2:	4b26      	ldr	r3, [pc, #152]	; (8005a4c <calWallConrol+0xbec>)
 80059b4:	edd3 7a00 	vldr	s15, [r3]
 80059b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR[2] * NoWallDisplacementR45slant
 80059bc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR[3] * NoWallDisplacementR45slant
 80059c0:	edd7 6a15 	vldr	s13, [r7, #84]	; 0x54
 80059c4:	4b21      	ldr	r3, [pc, #132]	; (8005a4c <calWallConrol+0xbec>)
 80059c6:	edd3 7a00 	vldr	s15, [r3]
 80059ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80059ce:	4b1f      	ldr	r3, [pc, #124]	; (8005a4c <calWallConrol+0xbec>)
 80059d0:	edd3 7a00 	vldr	s15, [r3]
 80059d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80059d8:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <calWallConrol+0xbec>)
 80059da:	edd3 7a00 	vldr	s15, [r3]
 80059de:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR = coefficientR[0]
 80059e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80059e6:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

		CenterSlantL = coefficientL[0]
 80059ea:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
				+ coefficientL[1] * NoWallDisplacementL45slant
 80059ee:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 80059f2:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <calWallConrol+0xc28>)
 80059f4:	edd3 7a00 	vldr	s15, [r3]
 80059f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80059fc:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005a00:	edd7 6a10 	vldr	s13, [r7, #64]	; 0x40
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <calWallConrol+0xc28>)
 8005a06:	edd3 7a00 	vldr	s15, [r3]
 8005a0a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005a0e:	4b1e      	ldr	r3, [pc, #120]	; (8005a88 <calWallConrol+0xc28>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL[2] * NoWallDisplacementL45slant
 8005a18:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL[3] * NoWallDisplacementL45slant
 8005a1c:	edd7 6a11 	vldr	s13, [r7, #68]	; 0x44
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <calWallConrol+0xc28>)
 8005a22:	edd3 7a00 	vldr	s15, [r3]
 8005a26:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <calWallConrol+0xc28>)
 8005a2c:	edd3 7a00 	vldr	s15, [r3]
 8005a30:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 8005a34:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <calWallConrol+0xc28>)
 8005a36:	edd3 7a00 	vldr	s15, [r3]
 8005a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL = coefficientL[0]
 8005a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a42:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
		for (int j = 11; j >= 1; j--) {
 8005a46:	230b      	movs	r3, #11
 8005a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a4a:	e050      	b.n	8005aee <calWallConrol+0xc8e>
 8005a4c:	200005bc 	.word	0x200005bc
 8005a50:	428c0000 	.word	0x428c0000
 8005a54:	42f00000 	.word	0x42f00000
 8005a58:	45738e20 	.word	0x45738e20
 8005a5c:	c2ab5142 	.word	0xc2ab5142
 8005a60:	3f2f9723 	.word	0x3f2f9723
 8005a64:	bafa0014 	.word	0xbafa0014
 8005a68:	43480000 	.word	0x43480000
 8005a6c:	43700000 	.word	0x43700000
 8005a70:	c5bb25b2 	.word	0xc5bb25b2
 8005a74:	42b29538 	.word	0x42b29538
 8005a78:	bee0db0f 	.word	0xbee0db0f
 8005a7c:	3a42c5e3 	.word	0x3a42c5e3
 8005a80:	20000298 	.word	0x20000298
 8005a84:	20000573 	.word	0x20000573
 8005a88:	200005c0 	.word	0x200005c0
 8005a8c:	4397e871 	.word	0x4397e871
 8005a90:	40c0cba7 	.word	0x40c0cba7
 8005a94:	bdb7434c 	.word	0xbdb7434c
 8005a98:	3b3ec2ab 	.word	0x3b3ec2ab
 8005a9c:	45484ed8 	.word	0x45484ed8
 8005aa0:	c293aa7b 	.word	0xc293aa7b
 8005aa4:	3f20dbb7 	.word	0x3f20dbb7
 8005aa8:	baf37bdb 	.word	0xbaf37bdb
 8005aac:	44c15b4c 	.word	0x44c15b4c
 8005ab0:	c1945e93 	.word	0xc1945e93
 8005ab4:	3d9b18cf 	.word	0x3d9b18cf
 8005ab8:	b8baa583 	.word	0xb8baa583
			g_CenterSlantR90[j] = g_CenterSlantR90[j - 1];
 8005abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	4a9c      	ldr	r2, [pc, #624]	; (8005d34 <calWallConrol+0xed4>)
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	499a      	ldr	r1, [pc, #616]	; (8005d34 <calWallConrol+0xed4>)
 8005aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	601a      	str	r2, [r3, #0]
			g_CenterSlantL90[j] = g_CenterSlantL90[j - 1];
 8005ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	4a98      	ldr	r2, [pc, #608]	; (8005d38 <calWallConrol+0xed8>)
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	4413      	add	r3, r2
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	4996      	ldr	r1, [pc, #600]	; (8005d38 <calWallConrol+0xed8>)
 8005ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	440b      	add	r3, r1
 8005ae6:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 8005ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005aea:	3b01      	subs	r3, #1
 8005aec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	dce3      	bgt.n	8005abc <calWallConrol+0xc5c>
		}
		g_CenterSlantR90[0] = CenterSlantR;
 8005af4:	4a8f      	ldr	r2, [pc, #572]	; (8005d34 <calWallConrol+0xed4>)
 8005af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005af8:	6013      	str	r3, [r2, #0]
		g_CenterSlantL90[0] = CenterSlantL;
 8005afa:	4a8f      	ldr	r2, [pc, #572]	; (8005d38 <calWallConrol+0xed8>)
 8005afc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005afe:	6013      	str	r3, [r2, #0]

		g_CenterSlantR90_diff = g_CenterSlantR90[0] - g_CenterSlantR90[11];
 8005b00:	4b8c      	ldr	r3, [pc, #560]	; (8005d34 <calWallConrol+0xed4>)
 8005b02:	ed93 7a00 	vldr	s14, [r3]
 8005b06:	4b8b      	ldr	r3, [pc, #556]	; (8005d34 <calWallConrol+0xed4>)
 8005b08:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b10:	4b8a      	ldr	r3, [pc, #552]	; (8005d3c <calWallConrol+0xedc>)
 8005b12:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL90_diff = g_CenterSlantL90[0] - g_CenterSlantL90[11];
 8005b16:	4b88      	ldr	r3, [pc, #544]	; (8005d38 <calWallConrol+0xed8>)
 8005b18:	ed93 7a00 	vldr	s14, [r3]
 8005b1c:	4b86      	ldr	r3, [pc, #536]	; (8005d38 <calWallConrol+0xed8>)
 8005b1e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b26:	4b86      	ldr	r3, [pc, #536]	; (8005d40 <calWallConrol+0xee0>)
 8005b28:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT_R
 8005b2c:	4b85      	ldr	r3, [pc, #532]	; (8005d44 <calWallConrol+0xee4>)
 8005b2e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005b32:	2b5a      	cmp	r3, #90	; 0x5a
 8005b34:	dd1a      	ble.n	8005b6c <calWallConrol+0xd0c>
				&& fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005b36:	4b84      	ldr	r3, [pc, #528]	; (8005d48 <calWallConrol+0xee8>)
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b42:	4b7e      	ldr	r3, [pc, #504]	; (8005d3c <calWallConrol+0xedc>)
 8005b44:	edd3 7a00 	vldr	s15, [r3]
 8005b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b4c:	eef0 7ae7 	vabs.f32	s15, s15
 8005b50:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005d4c <calWallConrol+0xeec>
 8005b54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b5c:	d506      	bpl.n	8005b6c <calWallConrol+0xd0c>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus | (1 << 1);
 8005b5e:	4b7c      	ldr	r3, [pc, #496]	; (8005d50 <calWallConrol+0xef0>)
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	f043 0302 	orr.w	r3, r3, #2
 8005b66:	b2da      	uxtb	r2, r3
 8005b68:	4b79      	ldr	r3, [pc, #484]	; (8005d50 <calWallConrol+0xef0>)
 8005b6a:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT_L
 8005b6c:	4b75      	ldr	r3, [pc, #468]	; (8005d44 <calWallConrol+0xee4>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b5a      	cmp	r3, #90	; 0x5a
 8005b72:	dd1a      	ble.n	8005baa <calWallConrol+0xd4a>
				&& fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005b74:	4b74      	ldr	r3, [pc, #464]	; (8005d48 <calWallConrol+0xee8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	ee07 3a90 	vmov	s15, r3
 8005b7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b80:	4b6f      	ldr	r3, [pc, #444]	; (8005d40 <calWallConrol+0xee0>)
 8005b82:	edd3 7a00 	vldr	s15, [r3]
 8005b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b8a:	eef0 7ae7 	vabs.f32	s15, s15
 8005b8e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005d4c <calWallConrol+0xeec>
 8005b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d506      	bpl.n	8005baa <calWallConrol+0xd4a>
						< CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus | (1 << 0);
 8005b9c:	4b6c      	ldr	r3, [pc, #432]	; (8005d50 <calWallConrol+0xef0>)
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f043 0301 	orr.w	r3, r3, #1
 8005ba4:	b2da      	uxtb	r2, r3
 8005ba6:	4b6a      	ldr	r3, [pc, #424]	; (8005d50 <calWallConrol+0xef0>)
 8005ba8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT_R
 8005baa:	4b66      	ldr	r3, [pc, #408]	; (8005d44 <calWallConrol+0xee4>)
 8005bac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005bb0:	2b59      	cmp	r3, #89	; 0x59
 8005bb2:	dd13      	ble.n	8005bdc <calWallConrol+0xd7c>
				|| fabs(g_sensor_diff[SENSOR_RIGHT] - g_CenterSlantR90_diff)
 8005bb4:	4b64      	ldr	r3, [pc, #400]	; (8005d48 <calWallConrol+0xee8>)
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	ee07 3a90 	vmov	s15, r3
 8005bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bc0:	4b5e      	ldr	r3, [pc, #376]	; (8005d3c <calWallConrol+0xedc>)
 8005bc2:	edd3 7a00 	vldr	s15, [r3]
 8005bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bca:	eef0 7ae7 	vabs.f32	s15, s15
 8005bce:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8005d4c <calWallConrol+0xeec>
 8005bd2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bda:	dd06      	ble.n	8005bea <calWallConrol+0xd8a>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_R) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 1);
 8005bdc:	4b5c      	ldr	r3, [pc, #368]	; (8005d50 <calWallConrol+0xef0>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	f023 0302 	bic.w	r3, r3, #2
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	4b5a      	ldr	r3, [pc, #360]	; (8005d50 <calWallConrol+0xef0>)
 8005be8:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT_L
 8005bea:	4b56      	ldr	r3, [pc, #344]	; (8005d44 <calWallConrol+0xee4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b59      	cmp	r3, #89	; 0x59
 8005bf0:	dd13      	ble.n	8005c1a <calWallConrol+0xdba>
				|| fabs(g_sensor_diff[SENSOR_LEFT] - g_CenterSlantL90_diff)
 8005bf2:	4b55      	ldr	r3, [pc, #340]	; (8005d48 <calWallConrol+0xee8>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bfe:	4b50      	ldr	r3, [pc, #320]	; (8005d40 <calWallConrol+0xee0>)
 8005c00:	edd3 7a00 	vldr	s15, [r3]
 8005c04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c08:	eef0 7ae7 	vabs.f32	s15, s15
 8005c0c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8005d4c <calWallConrol+0xeec>
 8005c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c18:	dd06      	ble.n	8005c28 <calWallConrol+0xdc8>
						> CONTROLWALLCUT_THRESHOLD_SLANT90_L) {
			g_WallControlStatus = g_WallControlStatus & ~(1 << 0);
 8005c1a:	4b4d      	ldr	r3, [pc, #308]	; (8005d50 <calWallConrol+0xef0>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	4b4a      	ldr	r3, [pc, #296]	; (8005d50 <calWallConrol+0xef0>)
 8005c26:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus) {
 8005c28:	4b49      	ldr	r3, [pc, #292]	; (8005d50 <calWallConrol+0xef0>)
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	2b03      	cmp	r3, #3
 8005c2e:	f200 813d 	bhi.w	8005eac <calWallConrol+0x104c>
 8005c32:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <calWallConrol+0xdd8>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c49 	.word	0x08005c49
 8005c3c:	08005c9d 	.word	0x08005c9d
 8005c40:	08005d61 	.word	0x08005d61
 8005c44:	08005df7 	.word	0x08005df7
		case 0:			//両壁なし
			PID_wall = 0;
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			pl_yellow_LED_1(0);
 8005c50:	2000      	movs	r0, #0
 8005c52:	f000 fca9 	bl	80065a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005c56:	2000      	movs	r0, #0
 8005c58:	f000 fcdc 	bl	8006614 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005c5c:	4b39      	ldr	r3, [pc, #228]	; (8005d44 <calWallConrol+0xee4>)
 8005c5e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005c62:	ee07 3a90 	vmov	s15, r3
 8005c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c6a:	4b3a      	ldr	r3, [pc, #232]	; (8005d54 <calWallConrol+0xef4>)
 8005c6c:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005c70:	4b34      	ldr	r3, [pc, #208]	; (8005d44 <calWallConrol+0xee4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	ee07 3a90 	vmov	s15, r3
 8005c78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c7c:	4b36      	ldr	r3, [pc, #216]	; (8005d58 <calWallConrol+0xef8>)
 8005c7e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = 0;
 8005c82:	4b36      	ldr	r3, [pc, #216]	; (8005d5c <calWallConrol+0xefc>)
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	601a      	str	r2, [r3, #0]
			wall_slant90.delta_error = 0;
 8005c8a:	4b34      	ldr	r3, [pc, #208]	; (8005d5c <calWallConrol+0xefc>)
 8005c8c:	f04f 0200 	mov.w	r2, #0
 8005c90:	609a      	str	r2, [r3, #8]
			wall_slant90.old_error = 0;
 8005c92:	4b32      	ldr	r3, [pc, #200]	; (8005d5c <calWallConrol+0xefc>)
 8005c94:	f04f 0200 	mov.w	r2, #0
 8005c98:	605a      	str	r2, [r3, #4]
			break;
 8005c9a:	e107      	b.n	8005eac <calWallConrol+0x104c>
		case 1:			//左壁のみ
			pl_yellow_LED_1(0);
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f000 fc83 	bl	80065a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005ca2:	2001      	movs	r0, #1
 8005ca4:	f000 fcb6 	bl	8006614 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = (float) (g_sensor[SENSOR_RIGHT][0]);
 8005ca8:	4b26      	ldr	r3, [pc, #152]	; (8005d44 <calWallConrol+0xee4>)
 8005caa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005cb6:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <calWallConrol+0xef4>)
 8005cb8:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL90 = CenterSlantL;
 8005cbc:	4a26      	ldr	r2, [pc, #152]	; (8005d58 <calWallConrol+0xef8>)
 8005cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cc0:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005cc2:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <calWallConrol+0xee4>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cce:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd6:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0]));
 8005cda:	4b1a      	ldr	r3, [pc, #104]	; (8005d44 <calWallConrol+0xee4>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	ee07 3a90 	vmov	s15, r3
 8005ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ce6:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005cea:	4b1c      	ldr	r3, [pc, #112]	; (8005d5c <calWallConrol+0xefc>)
 8005cec:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005cf0:	4b1a      	ldr	r3, [pc, #104]	; (8005d5c <calWallConrol+0xefc>)
 8005cf2:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005cf6:	4b19      	ldr	r3, [pc, #100]	; (8005d5c <calWallConrol+0xefc>)
 8005cf8:	edd3 7a01 	vldr	s15, [r3, #4]
 8005cfc:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <calWallConrol+0xefc>)
 8005d02:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005d06:	4b15      	ldr	r3, [pc, #84]	; (8005d5c <calWallConrol+0xefc>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a14      	ldr	r2, [pc, #80]	; (8005d5c <calWallConrol+0xefc>)
 8005d0c:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d0e:	4b13      	ldr	r3, [pc, #76]	; (8005d5c <calWallConrol+0xefc>)
 8005d10:	ed93 7a00 	vldr	s14, [r3]
 8005d14:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005d18:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005d1c:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <calWallConrol+0xefc>)
 8005d1e:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d22:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005d26:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005d32:	e0bb      	b.n	8005eac <calWallConrol+0x104c>
 8005d34:	200005e8 	.word	0x200005e8
 8005d38:	20000618 	.word	0x20000618
 8005d3c:	200006a8 	.word	0x200006a8
 8005d40:	200006ac 	.word	0x200006ac
 8005d44:	20000298 	.word	0x20000298
 8005d48:	20000428 	.word	0x20000428
 8005d4c:	42a00000 	.word	0x42a00000
 8005d50:	20000573 	.word	0x20000573
 8005d54:	2000058c 	.word	0x2000058c
 8005d58:	20000590 	.word	0x20000590
 8005d5c:	20000558 	.word	0x20000558
		case 2:			//右壁のみ
			pl_yellow_LED_1(1);
 8005d60:	2001      	movs	r0, #1
 8005d62:	f000 fc21 	bl	80065a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(0);
 8005d66:	2000      	movs	r0, #0
 8005d68:	f000 fc54 	bl	8006614 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005d6c:	4aa4      	ldr	r2, [pc, #656]	; (8006000 <calWallConrol+0x11a0>)
 8005d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d70:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = (float) (g_sensor[SENSOR_LEFT][0]);
 8005d72:	4ba4      	ldr	r3, [pc, #656]	; (8006004 <calWallConrol+0x11a4>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005d7e:	4ba2      	ldr	r3, [pc, #648]	; (8006008 <calWallConrol+0x11a8>)
 8005d80:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005d84:	4b9f      	ldr	r3, [pc, #636]	; (8006004 <calWallConrol+0x11a4>)
 8005d86:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005d8a:	ee07 3a90 	vmov	s15, r3
 8005d8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d92:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005d96:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR) / (float) (g_sensor[SENSOR_RIGHT][0]));
 8005d9a:	4b9a      	ldr	r3, [pc, #616]	; (8006004 <calWallConrol+0x11a4>)
 8005d9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005da0:	ee07 3a90 	vmov	s15, r3
 8005da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005da8:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant90.error = ((float) (g_sensor[SENSOR_RIGHT][0]
 8005dac:	4b97      	ldr	r3, [pc, #604]	; (800600c <calWallConrol+0x11ac>)
 8005dae:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005db2:	4b96      	ldr	r3, [pc, #600]	; (800600c <calWallConrol+0x11ac>)
 8005db4:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005db8:	4b94      	ldr	r3, [pc, #592]	; (800600c <calWallConrol+0x11ac>)
 8005dba:	edd3 7a01 	vldr	s15, [r3, #4]
 8005dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005dc2:	4b92      	ldr	r3, [pc, #584]	; (800600c <calWallConrol+0x11ac>)
 8005dc4:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005dc8:	4b90      	ldr	r3, [pc, #576]	; (800600c <calWallConrol+0x11ac>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a8f      	ldr	r2, [pc, #572]	; (800600c <calWallConrol+0x11ac>)
 8005dce:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005dd0:	4b8e      	ldr	r3, [pc, #568]	; (800600c <calWallConrol+0x11ac>)
 8005dd2:	ed93 7a00 	vldr	s14, [r3]
 8005dd6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005dda:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005dde:	4b8b      	ldr	r3, [pc, #556]	; (800600c <calWallConrol+0x11ac>)
 8005de0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005de4:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005de8:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005df4:	e05a      	b.n	8005eac <calWallConrol+0x104c>
		case 3:			//両壁あり
			pl_yellow_LED_1(1);
 8005df6:	2001      	movs	r0, #1
 8005df8:	f000 fbd6 	bl	80065a8 <pl_yellow_LED_1>
			pl_yellow_LED_8(1);
 8005dfc:	2001      	movs	r0, #1
 8005dfe:	f000 fc09 	bl	8006614 <pl_yellow_LED_8>
			g_log_CenterSlantR90 = CenterSlantR;
 8005e02:	4a7f      	ldr	r2, [pc, #508]	; (8006000 <calWallConrol+0x11a0>)
 8005e04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e06:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL90 = CenterSlantL;
 8005e08:	4a7f      	ldr	r2, [pc, #508]	; (8006008 <calWallConrol+0x11a8>)
 8005e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e0c:	6013      	str	r3, [r2, #0]
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005e0e:	4b7d      	ldr	r3, [pc, #500]	; (8006004 <calWallConrol+0x11a4>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	ee07 3a90 	vmov	s15, r3
 8005e16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e1a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8005e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e22:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL) / (float) (g_sensor[SENSOR_LEFT][0])
 8005e26:	4b77      	ldr	r3, [pc, #476]	; (8006004 <calWallConrol+0x11a4>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005e36:	4b73      	ldr	r3, [pc, #460]	; (8006004 <calWallConrol+0x11a4>)
 8005e38:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e3c:	ee07 3a90 	vmov	s15, r3
 8005e40:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e44:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8005e48:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_RIGHT][0]));
 8005e4c:	4b6d      	ldr	r3, [pc, #436]	; (8006004 <calWallConrol+0x11a4>)
 8005e4e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8005e52:	ee07 3a90 	vmov	s15, r3
 8005e56:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005e5a:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_RIGHT][0] - CenterSlantR)
 8005e5e:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant90.error = (-(float) (g_sensor[SENSOR_LEFT][0]
 8005e62:	4b6a      	ldr	r3, [pc, #424]	; (800600c <calWallConrol+0x11ac>)
 8005e64:	edc3 7a00 	vstr	s15, [r3]
			wall_slant90.delta_error = wall_slant90.error
 8005e68:	4b68      	ldr	r3, [pc, #416]	; (800600c <calWallConrol+0x11ac>)
 8005e6a:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant90.old_error;
 8005e6e:	4b67      	ldr	r3, [pc, #412]	; (800600c <calWallConrol+0x11ac>)
 8005e70:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e74:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant90.delta_error = wall_slant90.error
 8005e78:	4b64      	ldr	r3, [pc, #400]	; (800600c <calWallConrol+0x11ac>)
 8005e7a:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant90.old_error = wall_slant90.error;
 8005e7e:	4b63      	ldr	r3, [pc, #396]	; (800600c <calWallConrol+0x11ac>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a62      	ldr	r2, [pc, #392]	; (800600c <calWallConrol+0x11ac>)
 8005e84:	6053      	str	r3, [r2, #4]
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005e86:	4b61      	ldr	r3, [pc, #388]	; (800600c <calWallConrol+0x11ac>)
 8005e88:	ed93 7a00 	vldr	s14, [r3]
 8005e8c:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8005e90:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant90_d * wall_slant90.delta_error;
 8005e94:	4b5d      	ldr	r3, [pc, #372]	; (800600c <calWallConrol+0x11ac>)
 8005e96:	edd3 6a02 	vldr	s13, [r3, #8]
 8005e9a:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8005e9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			PID_wall = sensor_gain_slant90_p * wall_slant90.error
 8005ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ea6:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8005eaa:	bf00      	nop
// 斜め45度
		float CenterSlantR45, CenterSlantL45;
		float coefficientR45[4];
		float coefficientL45[4];
		float sensor_gain_slant45_p, sensor_gain_slant45_d;
		if (straight.velocity > 2000) {
 8005eac:	4b58      	ldr	r3, [pc, #352]	; (8006010 <calWallConrol+0x11b0>)
 8005eae:	edd3 7a00 	vldr	s15, [r3]
 8005eb2:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006014 <calWallConrol+0x11b4>
 8005eb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ebe:	dd04      	ble.n	8005eca <calWallConrol+0x106a>
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * 2000;
 8005ec0:	4b55      	ldr	r3, [pc, #340]	; (8006018 <calWallConrol+0x11b8>)
 8005ec2:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * 2000;
 8005ec4:	4b55      	ldr	r3, [pc, #340]	; (800601c <calWallConrol+0x11bc>)
 8005ec6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ec8:	e023      	b.n	8005f12 <calWallConrol+0x10b2>
		} else {
			sensor_gain_slant45_p = SENSOR_GAIN_SLANT45_P * straight.velocity;
 8005eca:	4b51      	ldr	r3, [pc, #324]	; (8006010 <calWallConrol+0x11b0>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7fa fb62 	bl	8000598 <__aeabi_f2d>
 8005ed4:	a346      	add	r3, pc, #280	; (adr r3, 8005ff0 <calWallConrol+0x1190>)
 8005ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eda:	f7fa fbb5 	bl	8000648 <__aeabi_dmul>
 8005ede:	4602      	mov	r2, r0
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	f7fa fe87 	bl	8000bf8 <__aeabi_d2f>
 8005eea:	4603      	mov	r3, r0
 8005eec:	677b      	str	r3, [r7, #116]	; 0x74
			sensor_gain_slant45_d = SENSOR_GAIN_SLANT45_D * straight.velocity;
 8005eee:	4b48      	ldr	r3, [pc, #288]	; (8006010 <calWallConrol+0x11b0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fa fb50 	bl	8000598 <__aeabi_f2d>
 8005ef8:	a33f      	add	r3, pc, #252	; (adr r3, 8005ff8 <calWallConrol+0x1198>)
 8005efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efe:	f7fa fba3 	bl	8000648 <__aeabi_dmul>
 8005f02:	4602      	mov	r2, r0
 8005f04:	460b      	mov	r3, r1
 8005f06:	4610      	mov	r0, r2
 8005f08:	4619      	mov	r1, r3
 8005f0a:	f7fa fe75 	bl	8000bf8 <__aeabi_d2f>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	673b      	str	r3, [r7, #112]	; 0x70
		}

		if (NoWallDisplacementR45slant > AREAMIN45_R0
 8005f12:	4b43      	ldr	r3, [pc, #268]	; (8006020 <calWallConrol+0x11c0>)
 8005f14:	edd3 7a00 	vldr	s15, [r3]
 8005f18:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006024 <calWallConrol+0x11c4>
 8005f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f24:	dd12      	ble.n	8005f4c <calWallConrol+0x10ec>
				&& NoWallDisplacementR45slant <= AREAMAX45_R0) {
 8005f26:	4b3e      	ldr	r3, [pc, #248]	; (8006020 <calWallConrol+0x11c0>)
 8005f28:	edd3 7a00 	vldr	s15, [r3]
 8005f2c:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006028 <calWallConrol+0x11c8>
 8005f30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f38:	d808      	bhi.n	8005f4c <calWallConrol+0x10ec>
			coefficientR45[0] = COEFFICIENT45_R0_0;
 8005f3a:	4b3c      	ldr	r3, [pc, #240]	; (800602c <calWallConrol+0x11cc>)
 8005f3c:	62bb      	str	r3, [r7, #40]	; 0x28
			coefficientR45[1] = COEFFICIENT45_R0_1;
 8005f3e:	4b3c      	ldr	r3, [pc, #240]	; (8006030 <calWallConrol+0x11d0>)
 8005f40:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = COEFFICIENT45_R0_2;
 8005f42:	4b3c      	ldr	r3, [pc, #240]	; (8006034 <calWallConrol+0x11d4>)
 8005f44:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = COEFFICIENT45_R0_3;
 8005f46:	4b3c      	ldr	r3, [pc, #240]	; (8006038 <calWallConrol+0x11d8>)
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4a:	e025      	b.n	8005f98 <calWallConrol+0x1138>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_RIGHT][0]
 8005f4c:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <calWallConrol+0x11a4>)
 8005f4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f52:	2b82      	cmp	r3, #130	; 0x82
 8005f54:	dd07      	ble.n	8005f66 <calWallConrol+0x1106>
					> CONTROLWALL_THRESHOLD_SLANT45_R) {
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 8005f56:	4b39      	ldr	r3, [pc, #228]	; (800603c <calWallConrol+0x11dc>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	f043 0302 	orr.w	r3, r3, #2
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	4b36      	ldr	r3, [pc, #216]	; (800603c <calWallConrol+0x11dc>)
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e006      	b.n	8005f74 <calWallConrol+0x1114>
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8005f66:	4b35      	ldr	r3, [pc, #212]	; (800603c <calWallConrol+0x11dc>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	f023 0302 	bic.w	r3, r3, #2
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	4b32      	ldr	r3, [pc, #200]	; (800603c <calWallConrol+0x11dc>)
 8005f72:	701a      	strb	r2, [r3, #0]
			}
			coefficientR45[0] = g_sensor[SENSOR_FRONT_RIGHT][0];
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <calWallConrol+0x11a4>)
 8005f76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f7a:	ee07 3a90 	vmov	s15, r3
 8005f7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005f82:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
			coefficientR45[1] = 0;
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
			coefficientR45[2] = 0;
 8005f8c:	f04f 0300 	mov.w	r3, #0
 8005f90:	633b      	str	r3, [r7, #48]	; 0x30
			coefficientR45[3] = 0;
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if (NoWallDisplacementL45slant > AREAMIN45_L0
 8005f98:	4b29      	ldr	r3, [pc, #164]	; (8006040 <calWallConrol+0x11e0>)
 8005f9a:	edd3 7a00 	vldr	s15, [r3]
 8005f9e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8006024 <calWallConrol+0x11c4>
 8005fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005faa:	dd12      	ble.n	8005fd2 <calWallConrol+0x1172>
				&& NoWallDisplacementL45slant <= AREAMAX45_L0) {
 8005fac:	4b24      	ldr	r3, [pc, #144]	; (8006040 <calWallConrol+0x11e0>)
 8005fae:	edd3 7a00 	vldr	s15, [r3]
 8005fb2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006028 <calWallConrol+0x11c8>
 8005fb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fbe:	d808      	bhi.n	8005fd2 <calWallConrol+0x1172>
			coefficientL45[0] = COEFFICIENT45_L0_0;
 8005fc0:	4b20      	ldr	r3, [pc, #128]	; (8006044 <calWallConrol+0x11e4>)
 8005fc2:	61bb      	str	r3, [r7, #24]
			coefficientL45[1] = COEFFICIENT45_L0_1;
 8005fc4:	4b20      	ldr	r3, [pc, #128]	; (8006048 <calWallConrol+0x11e8>)
 8005fc6:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = COEFFICIENT45_L0_2;
 8005fc8:	4b20      	ldr	r3, [pc, #128]	; (800604c <calWallConrol+0x11ec>)
 8005fca:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = COEFFICIENT45_L0_3;
 8005fcc:	4b20      	ldr	r3, [pc, #128]	; (8006050 <calWallConrol+0x11f0>)
 8005fce:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd0:	e058      	b.n	8006084 <calWallConrol+0x1224>
		} else {
			//制御の無効化
			if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L) {
 8005fd2:	4b0c      	ldr	r3, [pc, #48]	; (8006004 <calWallConrol+0x11a4>)
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	2b82      	cmp	r3, #130	; 0x82
 8005fd8:	dd3c      	ble.n	8006054 <calWallConrol+0x11f4>
				g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8005fda:	4b18      	ldr	r3, [pc, #96]	; (800603c <calWallConrol+0x11dc>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	f043 0301 	orr.w	r3, r3, #1
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	4b15      	ldr	r3, [pc, #84]	; (800603c <calWallConrol+0x11dc>)
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	e03b      	b.n	8006062 <calWallConrol+0x1202>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	9999999a 	.word	0x9999999a
 8005ff4:	3fe99999 	.word	0x3fe99999
 8005ff8:	47ae147b 	.word	0x47ae147b
 8005ffc:	bfb47ae1 	.word	0xbfb47ae1
 8006000:	2000058c 	.word	0x2000058c
 8006004:	20000298 	.word	0x20000298
 8006008:	20000590 	.word	0x20000590
 800600c:	20000558 	.word	0x20000558
 8006010:	200004b8 	.word	0x200004b8
 8006014:	44fa0000 	.word	0x44fa0000
 8006018:	44c80000 	.word	0x44c80000
 800601c:	c3200000 	.word	0xc3200000
 8006020:	200005bc 	.word	0x200005bc
 8006024:	420c0000 	.word	0x420c0000
 8006028:	43200000 	.word	0x43200000
 800602c:	43896a4d 	.word	0x43896a4d
 8006030:	40ca5bd3 	.word	0x40ca5bd3
 8006034:	bd6d2c96 	.word	0xbd6d2c96
 8006038:	39a9de8b 	.word	0x39a9de8b
 800603c:	20000574 	.word	0x20000574
 8006040:	200005c0 	.word	0x200005c0
 8006044:	4383070e 	.word	0x4383070e
 8006048:	3ff62494 	.word	0x3ff62494
 800604c:	bbc31628 	.word	0xbbc31628
 8006050:	38eae18b 	.word	0x38eae18b
			} else {
				g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 8006054:	4bb5      	ldr	r3, [pc, #724]	; (800632c <calWallConrol+0x14cc>)
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	f023 0301 	bic.w	r3, r3, #1
 800605c:	b2da      	uxtb	r2, r3
 800605e:	4bb3      	ldr	r3, [pc, #716]	; (800632c <calWallConrol+0x14cc>)
 8006060:	701a      	strb	r2, [r3, #0]
			}
			coefficientL45[0] = g_sensor[SENSOR_FRONT_LEFT][0];
 8006062:	4bb3      	ldr	r3, [pc, #716]	; (8006330 <calWallConrol+0x14d0>)
 8006064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006066:	ee07 3a90 	vmov	s15, r3
 800606a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800606e:	edc7 7a06 	vstr	s15, [r7, #24]
			coefficientL45[1] = 0;
 8006072:	f04f 0300 	mov.w	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
			coefficientL45[2] = 0;
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	623b      	str	r3, [r7, #32]
			coefficientL45[3] = 0;
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
		}
		CenterSlantR45 = coefficientR45[0]
 8006084:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
				+ coefficientR45[1] * NoWallDisplacementR45slant
 8006088:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 800608c:	4ba9      	ldr	r3, [pc, #676]	; (8006334 <calWallConrol+0x14d4>)
 800608e:	edd3 7a00 	vldr	s15, [r3]
 8006092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006096:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 800609a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800609e:	4ba5      	ldr	r3, [pc, #660]	; (8006334 <calWallConrol+0x14d4>)
 80060a0:	edd3 7a00 	vldr	s15, [r3]
 80060a4:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80060a8:	4ba2      	ldr	r3, [pc, #648]	; (8006334 <calWallConrol+0x14d4>)
 80060aa:	edd3 7a00 	vldr	s15, [r3]
 80060ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientR45[2] * NoWallDisplacementR45slant
 80060b2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientR45[3] * NoWallDisplacementR45slant
 80060b6:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 80060ba:	4b9e      	ldr	r3, [pc, #632]	; (8006334 <calWallConrol+0x14d4>)
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant
 80060c4:	4b9b      	ldr	r3, [pc, #620]	; (8006334 <calWallConrol+0x14d4>)
 80060c6:	edd3 7a00 	vldr	s15, [r3]
 80060ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementR45slant;
 80060ce:	4b99      	ldr	r3, [pc, #612]	; (8006334 <calWallConrol+0x14d4>)
 80060d0:	edd3 7a00 	vldr	s15, [r3]
 80060d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantR45 = coefficientR45[0]
 80060d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80060dc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
		CenterSlantL45 = coefficientL45[0]
 80060e0:	ed97 7a06 	vldr	s14, [r7, #24]
				+ coefficientL45[1] * NoWallDisplacementL45slant
 80060e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80060e8:	4b93      	ldr	r3, [pc, #588]	; (8006338 <calWallConrol+0x14d8>)
 80060ea:	edd3 7a00 	vldr	s15, [r3]
 80060ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80060f2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 80060f6:	edd7 6a08 	vldr	s13, [r7, #32]
 80060fa:	4b8f      	ldr	r3, [pc, #572]	; (8006338 <calWallConrol+0x14d8>)
 80060fc:	edd3 7a00 	vldr	s15, [r3]
 8006100:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006104:	4b8c      	ldr	r3, [pc, #560]	; (8006338 <calWallConrol+0x14d8>)
 8006106:	edd3 7a00 	vldr	s15, [r3]
 800610a:	ee66 7aa7 	vmul.f32	s15, s13, s15
				+ coefficientL45[2] * NoWallDisplacementL45slant
 800610e:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ coefficientL45[3] * NoWallDisplacementL45slant
 8006112:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8006116:	4b88      	ldr	r3, [pc, #544]	; (8006338 <calWallConrol+0x14d8>)
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant
 8006120:	4b85      	ldr	r3, [pc, #532]	; (8006338 <calWallConrol+0x14d8>)
 8006122:	edd3 7a00 	vldr	s15, [r3]
 8006126:	ee66 6aa7 	vmul.f32	s13, s13, s15
						* NoWallDisplacementL45slant;
 800612a:	4b83      	ldr	r3, [pc, #524]	; (8006338 <calWallConrol+0x14d8>)
 800612c:	edd3 7a00 	vldr	s15, [r3]
 8006130:	ee66 7aa7 	vmul.f32	s15, s13, s15
		CenterSlantL45 = coefficientL45[0]
 8006134:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006138:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58

		for (int j = 11; j >= 1; j--) {
 800613c:	230b      	movs	r3, #11
 800613e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006140:	e018      	b.n	8006174 <calWallConrol+0x1314>
			g_CenterSlantR45[j] = g_CenterSlantR45[j - 1];
 8006142:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006144:	3b01      	subs	r3, #1
 8006146:	4a7d      	ldr	r2, [pc, #500]	; (800633c <calWallConrol+0x14dc>)
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	497b      	ldr	r1, [pc, #492]	; (800633c <calWallConrol+0x14dc>)
 8006150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	601a      	str	r2, [r3, #0]
			g_CenterSlantL45[j] = g_CenterSlantL45[j - 1];
 8006158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800615a:	3b01      	subs	r3, #1
 800615c:	4a78      	ldr	r2, [pc, #480]	; (8006340 <calWallConrol+0x14e0>)
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	4976      	ldr	r1, [pc, #472]	; (8006340 <calWallConrol+0x14e0>)
 8006166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	601a      	str	r2, [r3, #0]
		for (int j = 11; j >= 1; j--) {
 800616e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006170:	3b01      	subs	r3, #1
 8006172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006176:	2b00      	cmp	r3, #0
 8006178:	dce3      	bgt.n	8006142 <calWallConrol+0x12e2>
		}
		g_CenterSlantR45[0] = CenterSlantR45;
 800617a:	4a70      	ldr	r2, [pc, #448]	; (800633c <calWallConrol+0x14dc>)
 800617c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800617e:	6013      	str	r3, [r2, #0]
		g_CenterSlantL45[0] = CenterSlantL45;
 8006180:	4a6f      	ldr	r2, [pc, #444]	; (8006340 <calWallConrol+0x14e0>)
 8006182:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006184:	6013      	str	r3, [r2, #0]

		g_CenterSlantR45_diff = g_CenterSlantR45[0] - g_CenterSlantR45[11];
 8006186:	4b6d      	ldr	r3, [pc, #436]	; (800633c <calWallConrol+0x14dc>)
 8006188:	ed93 7a00 	vldr	s14, [r3]
 800618c:	4b6b      	ldr	r3, [pc, #428]	; (800633c <calWallConrol+0x14dc>)
 800618e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8006192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006196:	4b6b      	ldr	r3, [pc, #428]	; (8006344 <calWallConrol+0x14e4>)
 8006198:	edc3 7a00 	vstr	s15, [r3]
		g_CenterSlantL45_diff = g_CenterSlantL45[0] - g_CenterSlantL45[11];
 800619c:	4b68      	ldr	r3, [pc, #416]	; (8006340 <calWallConrol+0x14e0>)
 800619e:	ed93 7a00 	vldr	s14, [r3]
 80061a2:	4b67      	ldr	r3, [pc, #412]	; (8006340 <calWallConrol+0x14e0>)
 80061a4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80061a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061ac:	4b66      	ldr	r3, [pc, #408]	; (8006348 <calWallConrol+0x14e8>)
 80061ae:	edc3 7a00 	vstr	s15, [r3]

		if (g_sensor[SENSOR_FRONT_RIGHT][0] > CONTROLWALL_THRESHOLD_SLANT45_R
 80061b2:	4b5f      	ldr	r3, [pc, #380]	; (8006330 <calWallConrol+0x14d0>)
 80061b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80061b8:	2b82      	cmp	r3, #130	; 0x82
 80061ba:	dd1a      	ble.n	80061f2 <calWallConrol+0x1392>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 80061bc:	4b63      	ldr	r3, [pc, #396]	; (800634c <calWallConrol+0x14ec>)
 80061be:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 80061c0:	ee07 3a90 	vmov	s15, r3
 80061c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061c8:	4b5e      	ldr	r3, [pc, #376]	; (8006344 <calWallConrol+0x14e4>)
 80061ca:	edd3 7a00 	vldr	s15, [r3]
 80061ce:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 80061d2:	eef0 7ae7 	vabs.f32	s15, s15
 80061d6:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8006350 <calWallConrol+0x14f0>
 80061da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80061de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e2:	d506      	bpl.n	80061f2 <calWallConrol+0x1392>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 1);
 80061e4:	4b51      	ldr	r3, [pc, #324]	; (800632c <calWallConrol+0x14cc>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	4b4f      	ldr	r3, [pc, #316]	; (800632c <calWallConrol+0x14cc>)
 80061f0:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] > CONTROLWALL_THRESHOLD_SLANT45_L
 80061f2:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <calWallConrol+0x14d0>)
 80061f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f6:	2b82      	cmp	r3, #130	; 0x82
 80061f8:	dd1a      	ble.n	8006230 <calWallConrol+0x13d0>
				&& fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 80061fa:	4b54      	ldr	r3, [pc, #336]	; (800634c <calWallConrol+0x14ec>)
 80061fc:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 80061fe:	ee07 3a90 	vmov	s15, r3
 8006202:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006206:	4b50      	ldr	r3, [pc, #320]	; (8006348 <calWallConrol+0x14e8>)
 8006208:	edd3 7a00 	vldr	s15, [r3]
 800620c:	ee77 7a67 	vsub.f32	s15, s14, s15
				&& fabs(
 8006210:	eef0 7ae7 	vabs.f32	s15, s15
 8006214:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8006350 <calWallConrol+0x14f0>
 8006218:	eef4 7ac7 	vcmpe.f32	s15, s14
 800621c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006220:	d506      	bpl.n	8006230 <calWallConrol+0x13d0>
						< CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 | (1 << 0);
 8006222:	4b42      	ldr	r3, [pc, #264]	; (800632c <calWallConrol+0x14cc>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	4b3f      	ldr	r3, [pc, #252]	; (800632c <calWallConrol+0x14cc>)
 800622e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_RIGHT][0] < CONTROLWALL_THRESHOLD_SLANT45_R
 8006230:	4b3f      	ldr	r3, [pc, #252]	; (8006330 <calWallConrol+0x14d0>)
 8006232:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006236:	2b81      	cmp	r3, #129	; 0x81
 8006238:	dd13      	ble.n	8006262 <calWallConrol+0x1402>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_RIGHT]
 800623a:	4b44      	ldr	r3, [pc, #272]	; (800634c <calWallConrol+0x14ec>)
 800623c:	68db      	ldr	r3, [r3, #12]
								- g_CenterSlantR45_diff)
 800623e:	ee07 3a90 	vmov	s15, r3
 8006242:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006246:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <calWallConrol+0x14e4>)
 8006248:	edd3 7a00 	vldr	s15, [r3]
 800624c:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 8006250:	eef0 7ae7 	vabs.f32	s15, s15
 8006254:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8006350 <calWallConrol+0x14f0>
 8006258:	eef4 7ac7 	vcmpe.f32	s15, s14
 800625c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006260:	dd06      	ble.n	8006270 <calWallConrol+0x1410>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_R) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 1);
 8006262:	4b32      	ldr	r3, [pc, #200]	; (800632c <calWallConrol+0x14cc>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	f023 0302 	bic.w	r3, r3, #2
 800626a:	b2da      	uxtb	r2, r3
 800626c:	4b2f      	ldr	r3, [pc, #188]	; (800632c <calWallConrol+0x14cc>)
 800626e:	701a      	strb	r2, [r3, #0]
		}
		if (g_sensor[SENSOR_FRONT_LEFT][0] < CONTROLWALL_THRESHOLD_SLANT45_L
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <calWallConrol+0x14d0>)
 8006272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006274:	2b81      	cmp	r3, #129	; 0x81
 8006276:	dd13      	ble.n	80062a0 <calWallConrol+0x1440>
				|| fabs(
						g_sensor_diff[SENSOR_FRONT_LEFT]
 8006278:	4b34      	ldr	r3, [pc, #208]	; (800634c <calWallConrol+0x14ec>)
 800627a:	685b      	ldr	r3, [r3, #4]
								- g_CenterSlantL45_diff)
 800627c:	ee07 3a90 	vmov	s15, r3
 8006280:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006284:	4b30      	ldr	r3, [pc, #192]	; (8006348 <calWallConrol+0x14e8>)
 8006286:	edd3 7a00 	vldr	s15, [r3]
 800628a:	ee77 7a67 	vsub.f32	s15, s14, s15
				|| fabs(
 800628e:	eef0 7ae7 	vabs.f32	s15, s15
 8006292:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8006350 <calWallConrol+0x14f0>
 8006296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800629a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800629e:	dd06      	ble.n	80062ae <calWallConrol+0x144e>
						> CONTROLWALLCUT_THRESHOLD_SLANT45_L) {
			g_WallControlStatus45 = g_WallControlStatus45 & ~(1 << 0);
 80062a0:	4b22      	ldr	r3, [pc, #136]	; (800632c <calWallConrol+0x14cc>)
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f023 0301 	bic.w	r3, r3, #1
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	4b20      	ldr	r3, [pc, #128]	; (800632c <calWallConrol+0x14cc>)
 80062ac:	701a      	strb	r2, [r3, #0]
		}

		switch (g_WallControlStatus45) {
 80062ae:	4b1f      	ldr	r3, [pc, #124]	; (800632c <calWallConrol+0x14cc>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	f200 8155 	bhi.w	8006562 <calWallConrol+0x1702>
 80062b8:	a201      	add	r2, pc, #4	; (adr r2, 80062c0 <calWallConrol+0x1460>)
 80062ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062be:	bf00      	nop
 80062c0:	080062d1 	.word	0x080062d1
 80062c4:	08006365 	.word	0x08006365
 80062c8:	08006405 	.word	0x08006405
 80062cc:	080064a3 	.word	0x080064a3
		case 0:			//両壁なし
			PID_wall += 0;
 80062d0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80062d4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006354 <calWallConrol+0x14f4>
 80062d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062dc:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			pl_yellow_LED_3(0);
 80062e0:	2000      	movs	r0, #0
 80062e2:	f000 f973 	bl	80065cc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 80062e6:	2000      	movs	r0, #0
 80062e8:	f000 f982 	bl	80065f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 80062ec:	4b10      	ldr	r3, [pc, #64]	; (8006330 <calWallConrol+0x14d0>)
 80062ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80062f2:	ee07 3a90 	vmov	s15, r3
 80062f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062fa:	4b17      	ldr	r3, [pc, #92]	; (8006358 <calWallConrol+0x14f8>)
 80062fc:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006300:	4b0b      	ldr	r3, [pc, #44]	; (8006330 <calWallConrol+0x14d0>)
 8006302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800630c:	4b13      	ldr	r3, [pc, #76]	; (800635c <calWallConrol+0x14fc>)
 800630e:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = 0;
 8006312:	4b13      	ldr	r3, [pc, #76]	; (8006360 <calWallConrol+0x1500>)
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	601a      	str	r2, [r3, #0]
			wall_slant45.delta_error = 0;
 800631a:	4b11      	ldr	r3, [pc, #68]	; (8006360 <calWallConrol+0x1500>)
 800631c:	f04f 0200 	mov.w	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
			wall_slant45.old_error = 0;
 8006322:	4b0f      	ldr	r3, [pc, #60]	; (8006360 <calWallConrol+0x1500>)
 8006324:	f04f 0200 	mov.w	r2, #0
 8006328:	605a      	str	r2, [r3, #4]
			break;
 800632a:	e11a      	b.n	8006562 <calWallConrol+0x1702>
 800632c:	20000574 	.word	0x20000574
 8006330:	20000298 	.word	0x20000298
 8006334:	200005bc 	.word	0x200005bc
 8006338:	200005c0 	.word	0x200005c0
 800633c:	20000648 	.word	0x20000648
 8006340:	20000678 	.word	0x20000678
 8006344:	200006b0 	.word	0x200006b0
 8006348:	200006b4 	.word	0x200006b4
 800634c:	20000428 	.word	0x20000428
 8006350:	42a00000 	.word	0x42a00000
 8006354:	00000000 	.word	0x00000000
 8006358:	20000584 	.word	0x20000584
 800635c:	20000588 	.word	0x20000588
 8006360:	20000564 	.word	0x20000564
		case 1:			//左壁のみ
			pl_yellow_LED_3(0);
 8006364:	2000      	movs	r0, #0
 8006366:	f000 f931 	bl	80065cc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 800636a:	2001      	movs	r0, #1
 800636c:	f000 f940 	bl	80065f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = (float) (g_sensor[SENSOR_FRONT_RIGHT][0]);
 8006370:	4b87      	ldr	r3, [pc, #540]	; (8006590 <calWallConrol+0x1730>)
 8006372:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800637e:	4b85      	ldr	r3, [pc, #532]	; (8006594 <calWallConrol+0x1734>)
 8006380:	edc3 7a00 	vstr	s15, [r3]
			g_log_CenterSlantL45 = CenterSlantL45;
 8006384:	4a84      	ldr	r2, [pc, #528]	; (8006598 <calWallConrol+0x1738>)
 8006386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006388:	6013      	str	r3, [r2, #0]
			wall_slant45.error =
					(-(float) (g_sensor[SENSOR_FRONT_LEFT][0] - CenterSlantL45)
 800638a:	4b81      	ldr	r3, [pc, #516]	; (8006590 <calWallConrol+0x1730>)
 800638c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006396:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800639a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800639e:	eef1 6a67 	vneg.f32	s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_LEFT][0]));
 80063a2:	4b7b      	ldr	r3, [pc, #492]	; (8006590 <calWallConrol+0x1730>)
 80063a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a6:	ee07 3a90 	vmov	s15, r3
 80063aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error =
 80063b2:	4b7a      	ldr	r3, [pc, #488]	; (800659c <calWallConrol+0x173c>)
 80063b4:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 80063b8:	4b78      	ldr	r3, [pc, #480]	; (800659c <calWallConrol+0x173c>)
 80063ba:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 80063be:	4b77      	ldr	r3, [pc, #476]	; (800659c <calWallConrol+0x173c>)
 80063c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80063c4:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 80063c8:	4b74      	ldr	r3, [pc, #464]	; (800659c <calWallConrol+0x173c>)
 80063ca:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 80063ce:	4b73      	ldr	r3, [pc, #460]	; (800659c <calWallConrol+0x173c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a72      	ldr	r2, [pc, #456]	; (800659c <calWallConrol+0x173c>)
 80063d4:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063d6:	4b71      	ldr	r3, [pc, #452]	; (800659c <calWallConrol+0x173c>)
 80063d8:	ed93 7a00 	vldr	s14, [r3]
 80063dc:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80063e0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 80063e4:	4b6d      	ldr	r3, [pc, #436]	; (800659c <calWallConrol+0x173c>)
 80063e6:	edd3 6a02 	vldr	s13, [r3, #8]
 80063ea:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80063ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80063f2:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 80063f6:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 80063fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063fe:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 8006402:	e0ae      	b.n	8006562 <calWallConrol+0x1702>
		case 2:			//右壁のみ
			pl_yellow_LED_3(1);
 8006404:	2001      	movs	r0, #1
 8006406:	f000 f8e1 	bl	80065cc <pl_yellow_LED_3>
			pl_yellow_LED_6(0);
 800640a:	2000      	movs	r0, #0
 800640c:	f000 f8f0 	bl	80065f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 8006410:	4a60      	ldr	r2, [pc, #384]	; (8006594 <calWallConrol+0x1734>)
 8006412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006414:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = (float) (g_sensor[SENSOR_FRONT_LEFT][0]);
 8006416:	4b5e      	ldr	r3, [pc, #376]	; (8006590 <calWallConrol+0x1730>)
 8006418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800641a:	ee07 3a90 	vmov	s15, r3
 800641e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006422:	4b5d      	ldr	r3, [pc, #372]	; (8006598 <calWallConrol+0x1738>)
 8006424:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006428:	4b59      	ldr	r3, [pc, #356]	; (8006590 <calWallConrol+0x1730>)
 800642a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006436:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800643a:	ee77 6a67 	vsub.f32	s13, s14, s15
					- CenterSlantR45)
					/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 800643e:	4b54      	ldr	r3, [pc, #336]	; (8006590 <calWallConrol+0x1730>)
 8006440:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800644c:	eec6 7a87 	vdiv.f32	s15, s13, s14
			wall_slant45.error = ((float) (g_sensor[SENSOR_FRONT_RIGHT][0]
 8006450:	4b52      	ldr	r3, [pc, #328]	; (800659c <calWallConrol+0x173c>)
 8006452:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006456:	4b51      	ldr	r3, [pc, #324]	; (800659c <calWallConrol+0x173c>)
 8006458:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800645c:	4b4f      	ldr	r3, [pc, #316]	; (800659c <calWallConrol+0x173c>)
 800645e:	edd3 7a01 	vldr	s15, [r3, #4]
 8006462:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006466:	4b4d      	ldr	r3, [pc, #308]	; (800659c <calWallConrol+0x173c>)
 8006468:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800646c:	4b4b      	ldr	r3, [pc, #300]	; (800659c <calWallConrol+0x173c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a4a      	ldr	r2, [pc, #296]	; (800659c <calWallConrol+0x173c>)
 8006472:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006474:	4b49      	ldr	r3, [pc, #292]	; (800659c <calWallConrol+0x173c>)
 8006476:	ed93 7a00 	vldr	s14, [r3]
 800647a:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800647e:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006482:	4b46      	ldr	r3, [pc, #280]	; (800659c <calWallConrol+0x173c>)
 8006484:	edd3 6a02 	vldr	s13, [r3, #8]
 8006488:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800648c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006490:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006494:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800649c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 80064a0:	e05f      	b.n	8006562 <calWallConrol+0x1702>
		case 3:			//両壁あり
			pl_yellow_LED_3(1);
 80064a2:	2001      	movs	r0, #1
 80064a4:	f000 f892 	bl	80065cc <pl_yellow_LED_3>
			pl_yellow_LED_6(1);
 80064a8:	2001      	movs	r0, #1
 80064aa:	f000 f8a1 	bl	80065f0 <pl_yellow_LED_6>
			g_log_CenterSlantR45 = CenterSlantR45;
 80064ae:	4a39      	ldr	r2, [pc, #228]	; (8006594 <calWallConrol+0x1734>)
 80064b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064b2:	6013      	str	r3, [r2, #0]
			g_log_CenterSlantL45 = CenterSlantL45;
 80064b4:	4a38      	ldr	r2, [pc, #224]	; (8006598 <calWallConrol+0x1738>)
 80064b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b8:	6013      	str	r3, [r2, #0]
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 80064ba:	4b35      	ldr	r3, [pc, #212]	; (8006590 <calWallConrol+0x1730>)
 80064bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064c6:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80064ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064ce:	eef1 6a67 	vneg.f32	s13, s15
					- CenterSlantL45) / (float) (g_sensor[SENSOR_FRONT_LEFT][0])
 80064d2:	4b2f      	ldr	r3, [pc, #188]	; (8006590 <calWallConrol+0x1730>)
 80064d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064d6:	ee07 3a90 	vmov	s15, r3
 80064da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 80064e2:	4b2b      	ldr	r3, [pc, #172]	; (8006590 <calWallConrol+0x1730>)
 80064e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064f0:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80064f4:	ee36 6ae7 	vsub.f32	s12, s13, s15
							/ (float) (g_sensor[SENSOR_FRONT_RIGHT][0]));
 80064f8:	4b25      	ldr	r3, [pc, #148]	; (8006590 <calWallConrol+0x1730>)
 80064fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80064fe:	ee07 3a90 	vmov	s15, r3
 8006502:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006506:	eec6 7a26 	vdiv.f32	s15, s12, s13
					+ (float) (g_sensor[SENSOR_FRONT_RIGHT][0] - CenterSlantR45)
 800650a:	ee77 7a27 	vadd.f32	s15, s14, s15
			wall_slant45.error = (-(float) (g_sensor[SENSOR_FRONT_LEFT][0]
 800650e:	4b23      	ldr	r3, [pc, #140]	; (800659c <calWallConrol+0x173c>)
 8006510:	edc3 7a00 	vstr	s15, [r3]
			wall_slant45.delta_error = wall_slant45.error
 8006514:	4b21      	ldr	r3, [pc, #132]	; (800659c <calWallConrol+0x173c>)
 8006516:	ed93 7a00 	vldr	s14, [r3]
					- wall_slant45.old_error;
 800651a:	4b20      	ldr	r3, [pc, #128]	; (800659c <calWallConrol+0x173c>)
 800651c:	edd3 7a01 	vldr	s15, [r3, #4]
 8006520:	ee77 7a67 	vsub.f32	s15, s14, s15
			wall_slant45.delta_error = wall_slant45.error
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <calWallConrol+0x173c>)
 8006526:	edc3 7a02 	vstr	s15, [r3, #8]
			wall_slant45.old_error = wall_slant45.error;
 800652a:	4b1c      	ldr	r3, [pc, #112]	; (800659c <calWallConrol+0x173c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1b      	ldr	r2, [pc, #108]	; (800659c <calWallConrol+0x173c>)
 8006530:	6053      	str	r3, [r2, #4]
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006532:	4b1a      	ldr	r3, [pc, #104]	; (800659c <calWallConrol+0x173c>)
 8006534:	ed93 7a00 	vldr	s14, [r3]
 8006538:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 800653c:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ sensor_gain_slant45_d * wall_slant45.delta_error;
 8006540:	4b16      	ldr	r3, [pc, #88]	; (800659c <calWallConrol+0x173c>)
 8006542:	edd3 6a02 	vldr	s13, [r3, #8]
 8006546:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 800654a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800654e:	ee77 7a27 	vadd.f32	s15, s14, s15
			PID_wall += sensor_gain_slant45_p * wall_slant45.error
 8006552:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8006556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800655a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
			break;
 800655e:	e000      	b.n	8006562 <calWallConrol+0x1702>
			break;
 8006560:	bf00      	nop
		}

	}
	PID_w = PID_wall / MAXMOTOR * g_V_battery_mean;
 8006562:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8006566:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80065a0 <calWallConrol+0x1740>
 800656a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800656e:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <calWallConrol+0x1744>)
 8006570:	edd3 7a00 	vldr	s15, [r3]
 8006574:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006578:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

	return PID_w;
 800657c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800657e:	ee07 3a90 	vmov	s15, r3
}
 8006582:	eeb0 0a67 	vmov.f32	s0, s15
 8006586:	37a8      	adds	r7, #168	; 0xa8
 8006588:	46bd      	mov	sp, r7
 800658a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800658e:	bf00      	nop
 8006590:	20000298 	.word	0x20000298
 8006594:	20000584 	.word	0x20000584
 8006598:	20000588 	.word	0x20000588
 800659c:	20000564 	.word	0x20000564
 80065a0:	44d1e000 	.word	0x44d1e000
 80065a4:	200004b4 	.word	0x200004b4

080065a8 <pl_yellow_LED_1>:
#include "gpio.h"
#include "main.h"



void pl_yellow_LED_1(int pin){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b082      	sub	sp, #8
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	461a      	mov	r2, r3
 80065b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065be:	f007 fac3 	bl	800db48 <HAL_GPIO_WritePin>
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
	...

080065cc <pl_yellow_LED_3>:
void pl_yellow_LED_2(int pin){
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,pin);
}
void pl_yellow_LED_3(int pin){
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,pin);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	b2db      	uxtb	r3, r3
 80065d8:	461a      	mov	r2, r3
 80065da:	2140      	movs	r1, #64	; 0x40
 80065dc:	4803      	ldr	r0, [pc, #12]	; (80065ec <pl_yellow_LED_3+0x20>)
 80065de:	f007 fab3 	bl	800db48 <HAL_GPIO_WritePin>
}
 80065e2:	bf00      	nop
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	48000800 	.word	0x48000800

080065f0 <pl_yellow_LED_6>:
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,pin);
}
void pl_yellow_LED_5(int pin){
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,pin);
}
void pl_yellow_LED_6(int pin){
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,pin);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	461a      	mov	r2, r3
 80065fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006602:	4803      	ldr	r0, [pc, #12]	; (8006610 <pl_yellow_LED_6+0x20>)
 8006604:	f007 faa0 	bl	800db48 <HAL_GPIO_WritePin>
}
 8006608:	bf00      	nop
 800660a:	3708      	adds	r7, #8
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	48000400 	.word	0x48000400

08006614 <pl_yellow_LED_8>:
void pl_yellow_LED_7(int pin){
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,pin);
}
void pl_yellow_LED_8(int pin){
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,pin);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	b2db      	uxtb	r3, r3
 8006620:	461a      	mov	r2, r3
 8006622:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006626:	4803      	ldr	r0, [pc, #12]	; (8006634 <pl_yellow_LED_8+0x20>)
 8006628:	f007 fa8e 	bl	800db48 <HAL_GPIO_WritePin>
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	48000400 	.word	0x48000400

08006638 <pl_yellow_LED_off>:




void pl_yellow_LED_off(void){
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 800663c:	2200      	movs	r2, #0
 800663e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006646:	f007 fa7f 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 800664a:	2200      	movs	r2, #0
 800664c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006654:	f007 fa78 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 8006658:	2200      	movs	r2, #0
 800665a:	2140      	movs	r1, #64	; 0x40
 800665c:	4811      	ldr	r0, [pc, #68]	; (80066a4 <pl_yellow_LED_off+0x6c>)
 800665e:	f007 fa73 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 8006662:	2200      	movs	r2, #0
 8006664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006668:	480f      	ldr	r0, [pc, #60]	; (80066a8 <pl_yellow_LED_off+0x70>)
 800666a:	f007 fa6d 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 800666e:	2200      	movs	r2, #0
 8006670:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006674:	480c      	ldr	r0, [pc, #48]	; (80066a8 <pl_yellow_LED_off+0x70>)
 8006676:	f007 fa67 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 800667a:	2200      	movs	r2, #0
 800667c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006680:	4809      	ldr	r0, [pc, #36]	; (80066a8 <pl_yellow_LED_off+0x70>)
 8006682:	f007 fa61 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006686:	2200      	movs	r2, #0
 8006688:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800668c:	4806      	ldr	r0, [pc, #24]	; (80066a8 <pl_yellow_LED_off+0x70>)
 800668e:	f007 fa5b 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006692:	2200      	movs	r2, #0
 8006694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006698:	4803      	ldr	r0, [pc, #12]	; (80066a8 <pl_yellow_LED_off+0x70>)
 800669a:	f007 fa55 	bl	800db48 <HAL_GPIO_WritePin>
}
 800669e:	bf00      	nop
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	48000800 	.word	0x48000800
 80066a8:	48000400 	.word	0x48000400

080066ac <pl_yellow_LED_on>:

void pl_yellow_LED_on(void){
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 80066b0:	2201      	movs	r2, #1
 80066b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066ba:	f007 fa45 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 80066be:	2201      	movs	r2, #1
 80066c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066c8:	f007 fa3e 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80066cc:	2201      	movs	r2, #1
 80066ce:	2140      	movs	r1, #64	; 0x40
 80066d0:	4811      	ldr	r0, [pc, #68]	; (8006718 <pl_yellow_LED_on+0x6c>)
 80066d2:	f007 fa39 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80066d6:	2201      	movs	r2, #1
 80066d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066dc:	480f      	ldr	r0, [pc, #60]	; (800671c <pl_yellow_LED_on+0x70>)
 80066de:	f007 fa33 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80066e2:	2201      	movs	r2, #1
 80066e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066e8:	480c      	ldr	r0, [pc, #48]	; (800671c <pl_yellow_LED_on+0x70>)
 80066ea:	f007 fa2d 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 80066ee:	2201      	movs	r2, #1
 80066f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066f4:	4809      	ldr	r0, [pc, #36]	; (800671c <pl_yellow_LED_on+0x70>)
 80066f6:	f007 fa27 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 80066fa:	2201      	movs	r2, #1
 80066fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006700:	4806      	ldr	r0, [pc, #24]	; (800671c <pl_yellow_LED_on+0x70>)
 8006702:	f007 fa21 	bl	800db48 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006706:	2201      	movs	r2, #1
 8006708:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800670c:	4803      	ldr	r0, [pc, #12]	; (800671c <pl_yellow_LED_on+0x70>)
 800670e:	f007 fa1b 	bl	800db48 <HAL_GPIO_WritePin>
}
 8006712:	bf00      	nop
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	48000800 	.word	0x48000800
 800671c:	48000400 	.word	0x48000400

08006720 <pl_yellow_LED_count>:


void pl_yellow_LED_count(unsigned char yy){
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	71fb      	strb	r3, [r7, #7]

unsigned char yy1,yy2,yy3,yy4,yy5,yy6,yy7,yy8;

yy1 = yy & 1;
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	f003 0301 	and.w	r3, r3, #1
 8006730:	73fb      	strb	r3, [r7, #15]
yy2 = yy & 2;
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	73bb      	strb	r3, [r7, #14]
yy3 = yy & 4;
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	737b      	strb	r3, [r7, #13]
yy4 = yy & 8;
 8006742:	79fb      	ldrb	r3, [r7, #7]
 8006744:	f003 0308 	and.w	r3, r3, #8
 8006748:	733b      	strb	r3, [r7, #12]
yy5 = yy & 16;
 800674a:	79fb      	ldrb	r3, [r7, #7]
 800674c:	f003 0310 	and.w	r3, r3, #16
 8006750:	72fb      	strb	r3, [r7, #11]
yy6 = yy & 32;
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	f003 0320 	and.w	r3, r3, #32
 8006758:	72bb      	strb	r3, [r7, #10]
yy7 = yy & 64;
 800675a:	79fb      	ldrb	r3, [r7, #7]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	727b      	strb	r3, [r7, #9]
yy8 = yy & 128;
 8006762:	79fb      	ldrb	r3, [r7, #7]
 8006764:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006768:	723b      	strb	r3, [r7, #8]

if(yy1 >= 1){
 800676a:	7bfb      	ldrb	r3, [r7, #15]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d007      	beq.n	8006780 <pl_yellow_LED_count+0x60>
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_SET);
 8006770:	2201      	movs	r2, #1
 8006772:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800677a:	f007 f9e5 	bl	800db48 <HAL_GPIO_WritePin>
 800677e:	e006      	b.n	800678e <pl_yellow_LED_count+0x6e>
}else{
	HAL_GPIO_WritePin(LED1_GPIO_Port,LED1_Pin,GPIO_PIN_RESET);
 8006780:	2200      	movs	r2, #0
 8006782:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800678a:	f007 f9dd 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy2 >= 1){
 800678e:	7bbb      	ldrb	r3, [r7, #14]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d007      	beq.n	80067a4 <pl_yellow_LED_count+0x84>
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_SET);
 8006794:	2201      	movs	r2, #1
 8006796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800679a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800679e:	f007 f9d3 	bl	800db48 <HAL_GPIO_WritePin>
 80067a2:	e006      	b.n	80067b2 <pl_yellow_LED_count+0x92>
}
else{
	HAL_GPIO_WritePin(LED2_GPIO_Port,LED2_Pin,GPIO_PIN_RESET);
 80067a4:	2200      	movs	r2, #0
 80067a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80067aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067ae:	f007 f9cb 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy3 >= 1){
 80067b2:	7b7b      	ldrb	r3, [r7, #13]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d005      	beq.n	80067c4 <pl_yellow_LED_count+0xa4>
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_SET);
 80067b8:	2201      	movs	r2, #1
 80067ba:	2140      	movs	r1, #64	; 0x40
 80067bc:	482e      	ldr	r0, [pc, #184]	; (8006878 <pl_yellow_LED_count+0x158>)
 80067be:	f007 f9c3 	bl	800db48 <HAL_GPIO_WritePin>
 80067c2:	e004      	b.n	80067ce <pl_yellow_LED_count+0xae>
}else{
	HAL_GPIO_WritePin(LED3_GPIO_Port,LED3_Pin,GPIO_PIN_RESET);
 80067c4:	2200      	movs	r2, #0
 80067c6:	2140      	movs	r1, #64	; 0x40
 80067c8:	482b      	ldr	r0, [pc, #172]	; (8006878 <pl_yellow_LED_count+0x158>)
 80067ca:	f007 f9bd 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy4 >= 1){
 80067ce:	7b3b      	ldrb	r3, [r7, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d006      	beq.n	80067e2 <pl_yellow_LED_count+0xc2>
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_SET);
 80067d4:	2201      	movs	r2, #1
 80067d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067da:	4828      	ldr	r0, [pc, #160]	; (800687c <pl_yellow_LED_count+0x15c>)
 80067dc:	f007 f9b4 	bl	800db48 <HAL_GPIO_WritePin>
 80067e0:	e005      	b.n	80067ee <pl_yellow_LED_count+0xce>
}else{
	HAL_GPIO_WritePin(LED4_GPIO_Port,LED4_Pin,GPIO_PIN_RESET);
 80067e2:	2200      	movs	r2, #0
 80067e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067e8:	4824      	ldr	r0, [pc, #144]	; (800687c <pl_yellow_LED_count+0x15c>)
 80067ea:	f007 f9ad 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy5 >= 1){
 80067ee:	7afb      	ldrb	r3, [r7, #11]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d006      	beq.n	8006802 <pl_yellow_LED_count+0xe2>
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_SET);
 80067f4:	2201      	movs	r2, #1
 80067f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067fa:	4820      	ldr	r0, [pc, #128]	; (800687c <pl_yellow_LED_count+0x15c>)
 80067fc:	f007 f9a4 	bl	800db48 <HAL_GPIO_WritePin>
 8006800:	e005      	b.n	800680e <pl_yellow_LED_count+0xee>
}else{
	HAL_GPIO_WritePin(LED5_GPIO_Port,LED5_Pin,GPIO_PIN_RESET);
 8006802:	2200      	movs	r2, #0
 8006804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006808:	481c      	ldr	r0, [pc, #112]	; (800687c <pl_yellow_LED_count+0x15c>)
 800680a:	f007 f99d 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy6 >= 1){
 800680e:	7abb      	ldrb	r3, [r7, #10]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d006      	beq.n	8006822 <pl_yellow_LED_count+0x102>
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_SET);
 8006814:	2201      	movs	r2, #1
 8006816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800681a:	4818      	ldr	r0, [pc, #96]	; (800687c <pl_yellow_LED_count+0x15c>)
 800681c:	f007 f994 	bl	800db48 <HAL_GPIO_WritePin>
 8006820:	e005      	b.n	800682e <pl_yellow_LED_count+0x10e>
}else{
	HAL_GPIO_WritePin(LED6_GPIO_Port,LED6_Pin,GPIO_PIN_RESET);
 8006822:	2200      	movs	r2, #0
 8006824:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006828:	4814      	ldr	r0, [pc, #80]	; (800687c <pl_yellow_LED_count+0x15c>)
 800682a:	f007 f98d 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy7 >= 1){
 800682e:	7a7b      	ldrb	r3, [r7, #9]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d006      	beq.n	8006842 <pl_yellow_LED_count+0x122>
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_SET);
 8006834:	2201      	movs	r2, #1
 8006836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800683a:	4810      	ldr	r0, [pc, #64]	; (800687c <pl_yellow_LED_count+0x15c>)
 800683c:	f007 f984 	bl	800db48 <HAL_GPIO_WritePin>
 8006840:	e005      	b.n	800684e <pl_yellow_LED_count+0x12e>
}else{
	HAL_GPIO_WritePin(LED7_GPIO_Port,LED7_Pin,GPIO_PIN_RESET);
 8006842:	2200      	movs	r2, #0
 8006844:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006848:	480c      	ldr	r0, [pc, #48]	; (800687c <pl_yellow_LED_count+0x15c>)
 800684a:	f007 f97d 	bl	800db48 <HAL_GPIO_WritePin>
}
if(yy8 >= 1){
 800684e:	7a3b      	ldrb	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d006      	beq.n	8006862 <pl_yellow_LED_count+0x142>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_SET);
 8006854:	2201      	movs	r2, #1
 8006856:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800685a:	4808      	ldr	r0, [pc, #32]	; (800687c <pl_yellow_LED_count+0x15c>)
 800685c:	f007 f974 	bl	800db48 <HAL_GPIO_WritePin>
}else{
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
}
}
 8006860:	e005      	b.n	800686e <pl_yellow_LED_count+0x14e>
	HAL_GPIO_WritePin(LED8_GPIO_Port,LED8_Pin,GPIO_PIN_RESET);
 8006862:	2200      	movs	r2, #0
 8006864:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006868:	4804      	ldr	r0, [pc, #16]	; (800687c <pl_yellow_LED_count+0x15c>)
 800686a:	f007 f96d 	bl	800db48 <HAL_GPIO_WritePin>
}
 800686e:	bf00      	nop
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	48000800 	.word	0x48000800
 800687c:	48000400 	.word	0x48000400

08006880 <pl_r_blue_LED>:


void pl_r_blue_LED(int pin){
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_R_LED_GPIO_Port,BLUE_R_LED_Pin,pin);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	b2db      	uxtb	r3, r3
 800688c:	461a      	mov	r2, r3
 800688e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006892:	4803      	ldr	r0, [pc, #12]	; (80068a0 <pl_r_blue_LED+0x20>)
 8006894:	f007 f958 	bl	800db48 <HAL_GPIO_WritePin>
}
 8006898:	bf00      	nop
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	48000800 	.word	0x48000800

080068a4 <pl_l_blue_LED>:

void pl_l_blue_LED(int pin){
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(BLUE_L_LED_GPIO_Port,BLUE_L_LED_Pin,pin);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	461a      	mov	r2, r3
 80068b2:	2104      	movs	r1, #4
 80068b4:	4803      	ldr	r0, [pc, #12]	; (80068c4 <pl_l_blue_LED+0x20>)
 80068b6:	f007 f947 	bl	800db48 <HAL_GPIO_WritePin>
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	48000400 	.word	0x48000400

080068c8 <encoder_read_byte_R>:
#include "spi.h"
#include <stdio.h>

float encoder_R,encoder_L;

uint16_t encoder_read_byte_R(uint16_t address,uint16_t data){
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	4603      	mov	r3, r0
 80068d0:	460a      	mov	r2, r1
 80068d2:	80fb      	strh	r3, [r7, #6]
 80068d4:	4613      	mov	r3, r2
 80068d6:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80068d8:	2200      	movs	r2, #0
 80068da:	2110      	movs	r1, #16
 80068dc:	4833      	ldr	r0, [pc, #204]	; (80069ac <encoder_read_byte_R+0xe4>)
 80068de:	f007 f933 	bl	800db48 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80068e2:	88fb      	ldrh	r3, [r7, #6]
 80068e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80068e8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80068ee:	2300      	movs	r3, #0
 80068f0:	61bb      	str	r3, [r7, #24]
 80068f2:	e00d      	b.n	8006910 <encoder_read_byte_R+0x48>
 80068f4:	88fa      	ldrh	r2, [r7, #6]
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	fa42 f303 	asr.w	r3, r2, r3
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	f003 0301 	and.w	r3, r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	8bfb      	ldrh	r3, [r7, #30]
 8006906:	4413      	add	r3, r2
 8006908:	83fb      	strh	r3, [r7, #30]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	3301      	adds	r3, #1
 800690e:	61bb      	str	r3, [r7, #24]
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b0e      	cmp	r3, #14
 8006914:	ddee      	ble.n	80068f4 <encoder_read_byte_R+0x2c>
	address = address | ((parity % 2) << 15);
 8006916:	8bfb      	ldrh	r3, [r7, #30]
 8006918:	03db      	lsls	r3, r3, #15
 800691a:	b21a      	sxth	r2, r3
 800691c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006920:	4313      	orrs	r3, r2
 8006922:	b21b      	sxth	r3, r3
 8006924:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8006926:	88fb      	ldrh	r3, [r7, #6]
 8006928:	0a1b      	lsrs	r3, r3, #8
 800692a:	b29b      	uxth	r3, r3
 800692c:	b2db      	uxtb	r3, r3
 800692e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	b2db      	uxtb	r3, r3
 8006934:	747b      	strb	r3, [r7, #17]


	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8006936:	f107 0110 	add.w	r1, r7, #16
 800693a:	2364      	movs	r3, #100	; 0x64
 800693c:	2202      	movs	r2, #2
 800693e:	481c      	ldr	r0, [pc, #112]	; (80069b0 <encoder_read_byte_R+0xe8>)
 8006940:	f008 f9e5 	bl	800ed0e <HAL_SPI_Transmit>
//	HAL_SPI_Transmit(&hspi3, address, 2, 100);

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006944:	2201      	movs	r2, #1
 8006946:	2110      	movs	r1, #16
 8006948:	4818      	ldr	r0, [pc, #96]	; (80069ac <encoder_read_byte_R+0xe4>)
 800694a:	f007 f8fd 	bl	800db48 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 800694e:	2300      	movs	r3, #0
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e002      	b.n	800695a <encoder_read_byte_R+0x92>
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3301      	adds	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b95      	cmp	r3, #149	; 0x95
 800695e:	ddf9      	ble.n	8006954 <encoder_read_byte_R+0x8c>

	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006960:	2200      	movs	r2, #0
 8006962:	2110      	movs	r1, #16
 8006964:	4811      	ldr	r0, [pc, #68]	; (80069ac <encoder_read_byte_R+0xe4>)
 8006966:	f007 f8ef 	bl	800db48 <HAL_GPIO_WritePin>

//	data=0xC000;
	dataBuffer[0]=data>>8;
 800696a:	88bb      	ldrh	r3, [r7, #4]
 800696c:	0a1b      	lsrs	r3, r3, #8
 800696e:	b29b      	uxth	r3, r3
 8006970:	b2db      	uxtb	r3, r3
 8006972:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8006974:	88bb      	ldrh	r3, [r7, #4]
 8006976:	b2db      	uxtb	r3, r3
 8006978:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 800697a:	f107 010c 	add.w	r1, r7, #12
 800697e:	2364      	movs	r3, #100	; 0x64
 8006980:	2202      	movs	r2, #2
 8006982:	480b      	ldr	r0, [pc, #44]	; (80069b0 <encoder_read_byte_R+0xe8>)
 8006984:	f008 fb31 	bl	800efea <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8006988:	7b3b      	ldrb	r3, [r7, #12]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	b21a      	sxth	r2, r3
 800698e:	7b7b      	ldrb	r3, [r7, #13]
 8006990:	b21b      	sxth	r3, r3
 8006992:	4313      	orrs	r3, r2
 8006994:	b21b      	sxth	r3, r3
 8006996:	80bb      	strh	r3, [r7, #4]
//	HAL_SPI_Transmit(&hspi3, data, 2, 100);
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006998:	2201      	movs	r2, #1
 800699a:	2110      	movs	r1, #16
 800699c:	4803      	ldr	r0, [pc, #12]	; (80069ac <encoder_read_byte_R+0xe4>)
 800699e:	f007 f8d3 	bl	800db48 <HAL_GPIO_WritePin>

	return data;
 80069a2:	88bb      	ldrh	r3, [r7, #4]

}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3720      	adds	r7, #32
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	48000400 	.word	0x48000400
 80069b0:	2000c3fc 	.word	0x2000c3fc

080069b4 <encoder_read_byte_L>:
	HAL_GPIO_WritePin( ENCODER_R_CS_GPIO_Port, ENCODER_R_CS_Pin, GPIO_PIN_SET); //cs = 1;

}


uint16_t encoder_read_byte_L(uint16_t address,uint16_t data){
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b088      	sub	sp, #32
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	4603      	mov	r3, r0
 80069bc:	460a      	mov	r2, r1
 80069be:	80fb      	strh	r3, [r7, #6]
 80069c0:	4613      	mov	r3, r2
 80069c2:	80bb      	strh	r3, [r7, #4]
	uint8_t addBuffer[2];
//	uint16_t data;
	uint8_t dataBuffer[2];
	uint16_t parity;

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 80069c4:	2200      	movs	r2, #0
 80069c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80069ce:	f007 f8bb 	bl	800db48 <HAL_GPIO_WritePin>

	address = address | 0x4000;//先頭から2つ目のbitを1に
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069d8:	80fb      	strh	r3, [r7, #6]
	parity=0;
 80069da:	2300      	movs	r3, #0
 80069dc:	83fb      	strh	r3, [r7, #30]
	for(int i=0;i<15;i++) parity += (address >> i) & 1;
 80069de:	2300      	movs	r3, #0
 80069e0:	61bb      	str	r3, [r7, #24]
 80069e2:	e00d      	b.n	8006a00 <encoder_read_byte_L+0x4c>
 80069e4:	88fa      	ldrh	r2, [r7, #6]
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	fa42 f303 	asr.w	r3, r2, r3
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	f003 0301 	and.w	r3, r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	8bfb      	ldrh	r3, [r7, #30]
 80069f6:	4413      	add	r3, r2
 80069f8:	83fb      	strh	r3, [r7, #30]
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3301      	adds	r3, #1
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2b0e      	cmp	r3, #14
 8006a04:	ddee      	ble.n	80069e4 <encoder_read_byte_L+0x30>
	address = address | ((parity % 2) << 15);
 8006a06:	8bfb      	ldrh	r3, [r7, #30]
 8006a08:	03db      	lsls	r3, r3, #15
 8006a0a:	b21a      	sxth	r2, r3
 8006a0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	b21b      	sxth	r3, r3
 8006a14:	80fb      	strh	r3, [r7, #6]
	addBuffer[0]=address>>8;
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	0a1b      	lsrs	r3, r3, #8
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	743b      	strb	r3, [r7, #16]
	addBuffer[1]=address & 0x00FF;
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	747b      	strb	r3, [r7, #17]

	HAL_SPI_Transmit(&hspi3, (uint8_t*)addBuffer, 2, 100);
 8006a26:	f107 0110 	add.w	r1, r7, #16
 8006a2a:	2364      	movs	r3, #100	; 0x64
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	481e      	ldr	r0, [pc, #120]	; (8006aa8 <encoder_read_byte_L+0xf4>)
 8006a30:	f008 f96d 	bl	800ed0e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006a34:	2201      	movs	r2, #1
 8006a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a3e:	f007 f883 	bl	800db48 <HAL_GPIO_WritePin>

	for(int i=0;i<150;i++){}
 8006a42:	2300      	movs	r3, #0
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e002      	b.n	8006a4e <encoder_read_byte_L+0x9a>
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b95      	cmp	r3, #149	; 0x95
 8006a52:	ddf9      	ble.n	8006a48 <encoder_read_byte_L+0x94>

	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006a54:	2200      	movs	r2, #0
 8006a56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a5e:	f007 f873 	bl	800db48 <HAL_GPIO_WritePin>

//	data=0x0000;
	dataBuffer[0]=data>>8;
 8006a62:	88bb      	ldrh	r3, [r7, #4]
 8006a64:	0a1b      	lsrs	r3, r3, #8
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	733b      	strb	r3, [r7, #12]
	dataBuffer[1]=data & 0x00FF;
 8006a6c:	88bb      	ldrh	r3, [r7, #4]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Receive(&hspi3, (uint8_t*)dataBuffer, 2, 100);
 8006a72:	f107 010c 	add.w	r1, r7, #12
 8006a76:	2364      	movs	r3, #100	; 0x64
 8006a78:	2202      	movs	r2, #2
 8006a7a:	480b      	ldr	r0, [pc, #44]	; (8006aa8 <encoder_read_byte_L+0xf4>)
 8006a7c:	f008 fab5 	bl	800efea <HAL_SPI_Receive>
	data=((uint16_t)(dataBuffer[0]) << 8) | (uint16_t)(dataBuffer[1]);
 8006a80:	7b3b      	ldrb	r3, [r7, #12]
 8006a82:	021b      	lsls	r3, r3, #8
 8006a84:	b21a      	sxth	r2, r3
 8006a86:	7b7b      	ldrb	r3, [r7, #13]
 8006a88:	b21b      	sxth	r3, r3
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	b21b      	sxth	r3, r3
 8006a8e:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin( ENCODER_L_CS_GPIO_Port, ENCODER_L_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006a90:	2201      	movs	r2, #1
 8006a92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a9a:	f007 f855 	bl	800db48 <HAL_GPIO_WritePin>

	return data;
 8006a9e:	88bb      	ldrh	r3, [r7, #4]

}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3720      	adds	r7, #32
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bd80      	pop	{r7, pc}
 8006aa8:	2000c3fc 	.word	0x2000c3fc

08006aac <AS5047_DataUpdate>:

}



void AS5047_DataUpdate(void){
 8006aac:	b580      	push	{r7, lr}
 8006aae:	af00      	add	r7, sp, #0

		//encoder_read_byte_L(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_R=(float)(encoder_read_byte_R(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8006ab0:	2100      	movs	r1, #0
 8006ab2:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8006ab6:	f7ff ff07 	bl	80068c8 <encoder_read_byte_R>
 8006aba:	4603      	mov	r3, r0
 8006abc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006ac0:	ee07 3a90 	vmov	s15, r3
 8006ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ac8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006b10 <AS5047_DataUpdate+0x64>
 8006acc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006ad0:	eddf 6a10 	vldr	s13, [pc, #64]	; 8006b14 <AS5047_DataUpdate+0x68>
 8006ad4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ad8:	4b0f      	ldr	r3, [pc, #60]	; (8006b18 <AS5047_DataUpdate+0x6c>)
 8006ada:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(500);

		//encoder_read_byte_R(0x3FFF,0xC000);
		//HAL_Delay(5);
		encoder_L=(float)(encoder_read_byte_L(0x3FFF,0x0000) & 0x3FFF) * 360 / 16384;
 8006ade:	2100      	movs	r1, #0
 8006ae0:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8006ae4:	f7ff ff66 	bl	80069b4 <encoder_read_byte_L>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006af6:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006b10 <AS5047_DataUpdate+0x64>
 8006afa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006afe:	eddf 6a05 	vldr	s13, [pc, #20]	; 8006b14 <AS5047_DataUpdate+0x68>
 8006b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b06:	4b05      	ldr	r3, [pc, #20]	; (8006b1c <AS5047_DataUpdate+0x70>)
 8006b08:	edc3 7a00 	vstr	s15, [r3]
		//HAL_Delay(5);

}
 8006b0c:	bf00      	nop
 8006b0e:	bd80      	pop	{r7, pc}
 8006b10:	43b40000 	.word	0x43b40000
 8006b14:	46800000 	.word	0x46800000
 8006b18:	200006b8 	.word	0x200006b8
 8006b1c:	200006bc 	.word	0x200006bc

08006b20 <gyro_read_byte>:

GYRO_DATA gyro;

uint8_t gyro_read_byte(uint8_t reg)

{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b084      	sub	sp, #16
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]

	uint8_t ret, val;

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET); //cs = 0;
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2110      	movs	r1, #16
 8006b2e:	4810      	ldr	r0, [pc, #64]	; (8006b70 <gyro_read_byte+0x50>)
 8006b30:	f007 f80a 	bl	800db48 <HAL_GPIO_WritePin>

	ret = reg | 0x80;//先頭のbitを1に
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	73fb      	strb	r3, [r7, #15]

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8006b3e:	f107 010f 	add.w	r1, r7, #15
 8006b42:	2364      	movs	r3, #100	; 0x64
 8006b44:	2201      	movs	r2, #1
 8006b46:	480b      	ldr	r0, [pc, #44]	; (8006b74 <gyro_read_byte+0x54>)
 8006b48:	f008 f8e1 	bl	800ed0e <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &val, 1, 100);
 8006b4c:	f107 010e 	add.w	r1, r7, #14
 8006b50:	2364      	movs	r3, #100	; 0x64
 8006b52:	2201      	movs	r2, #1
 8006b54:	4807      	ldr	r0, [pc, #28]	; (8006b74 <gyro_read_byte+0x54>)
 8006b56:	f008 fa48 	bl	800efea <HAL_SPI_Receive>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET); //cs = 1;
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	2110      	movs	r1, #16
 8006b5e:	4804      	ldr	r0, [pc, #16]	; (8006b70 <gyro_read_byte+0x50>)
 8006b60:	f006 fff2 	bl	800db48 <HAL_GPIO_WritePin>

	return val;
 8006b64:	7bbb      	ldrb	r3, [r7, #14]

}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	48000800 	.word	0x48000800
 8006b74:	2000c398 	.word	0x2000c398

08006b78 <gyro_write_byte>:

void gyro_write_byte(uint8_t reg, uint8_t val)

{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	460a      	mov	r2, r1
 8006b82:	71fb      	strb	r3, [r7, #7]
 8006b84:	4613      	mov	r3, r2
 8006b86:	71bb      	strb	r3, [r7, #6]

	uint8_t ret;

	ret = reg & 0x7F;//先頭のbitを0に
 8006b88:	79fb      	ldrb	r3, [r7, #7]
 8006b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8006b92:	2200      	movs	r2, #0
 8006b94:	2110      	movs	r1, #16
 8006b96:	480c      	ldr	r0, [pc, #48]	; (8006bc8 <gyro_write_byte+0x50>)
 8006b98:	f006 ffd6 	bl	800db48 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &ret, 1, 100);
 8006b9c:	f107 010f 	add.w	r1, r7, #15
 8006ba0:	2364      	movs	r3, #100	; 0x64
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	4809      	ldr	r0, [pc, #36]	; (8006bcc <gyro_write_byte+0x54>)
 8006ba6:	f008 f8b2 	bl	800ed0e <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, &val, 1, 100);
 8006baa:	1db9      	adds	r1, r7, #6
 8006bac:	2364      	movs	r3, #100	; 0x64
 8006bae:	2201      	movs	r2, #1
 8006bb0:	4806      	ldr	r0, [pc, #24]	; (8006bcc <gyro_write_byte+0x54>)
 8006bb2:	f008 f8ac 	bl	800ed0e <HAL_SPI_Transmit>

	HAL_GPIO_WritePin( GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_SET);
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2110      	movs	r1, #16
 8006bba:	4803      	ldr	r0, [pc, #12]	; (8006bc8 <gyro_write_byte+0x50>)
 8006bbc:	f006 ffc4 	bl	800db48 <HAL_GPIO_WritePin>

}
 8006bc0:	bf00      	nop
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	48000800 	.word	0x48000800
 8006bcc:	2000c398 	.word	0x2000c398

08006bd0 <pl_gyro_init>:

void pl_gyro_init(void)

{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0

	uint8_t who_am_i = 0;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	71fb      	strb	r3, [r7, #7]

// check WHO_AM_I (0x75)

	who_am_i = gyro_read_byte(0x75);
 8006bda:	2075      	movs	r0, #117	; 0x75
 8006bdc:	f7ff ffa0 	bl	8006b20 <gyro_read_byte>
 8006be0:	4603      	mov	r3, r0
 8006be2:	71fb      	strb	r3, [r7, #7]

// who am i = 0x12

	printf("\r\nwho_am_i = 0x%x\r\n", who_am_i);
 8006be4:	79fb      	ldrb	r3, [r7, #7]
 8006be6:	4619      	mov	r1, r3
 8006be8:	481b      	ldr	r0, [pc, #108]	; (8006c58 <pl_gyro_init+0x88>)
 8006bea:	f00b fd43 	bl	8012674 <iprintf>

// recheck

	if (who_am_i != 0x98) {
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	2b98      	cmp	r3, #152	; 0x98
 8006bf2:	d00e      	beq.n	8006c12 <pl_gyro_init+0x42>

		HAL_Delay(100);
 8006bf4:	2064      	movs	r0, #100	; 0x64
 8006bf6:	f004 f853 	bl	800aca0 <HAL_Delay>

		who_am_i = gyro_read_byte(0x75);
 8006bfa:	2075      	movs	r0, #117	; 0x75
 8006bfc:	f7ff ff90 	bl	8006b20 <gyro_read_byte>
 8006c00:	4603      	mov	r3, r0
 8006c02:	71fb      	strb	r3, [r7, #7]

		if (who_am_i != 0x98) {
 8006c04:	79fb      	ldrb	r3, [r7, #7]
 8006c06:	2b98      	cmp	r3, #152	; 0x98
 8006c08:	d003      	beq.n	8006c12 <pl_gyro_init+0x42>

			while (1) {

				printf("gyro_error\r");
 8006c0a:	4814      	ldr	r0, [pc, #80]	; (8006c5c <pl_gyro_init+0x8c>)
 8006c0c:	f00b fd32 	bl	8012674 <iprintf>
 8006c10:	e7fb      	b.n	8006c0a <pl_gyro_init+0x3a>

// set pwr might

// PWR_MIGHT_1 0x6B

	gyro_write_byte(0x6B, 0x00);
 8006c12:	2100      	movs	r1, #0
 8006c14:	206b      	movs	r0, #107	; 0x6b
 8006c16:	f7ff ffaf 	bl	8006b78 <gyro_write_byte>

	HAL_Delay(50);
 8006c1a:	2032      	movs	r0, #50	; 0x32
 8006c1c:	f004 f840 	bl	800aca0 <HAL_Delay>

// PWR_MIGHT_2 0x6C

	gyro_write_byte(0x6C, 0x00);
 8006c20:	2100      	movs	r1, #0
 8006c22:	206c      	movs	r0, #108	; 0x6c
 8006c24:	f7ff ffa8 	bl	8006b78 <gyro_write_byte>

	HAL_Delay(50);
 8006c28:	2032      	movs	r0, #50	; 0x32
 8006c2a:	f004 f839 	bl	800aca0 <HAL_Delay>

// set gyro config

// GYRO_CONFIG 0x1B

	gyro_write_byte(0x1B, 0x18); // use 2000 dps
 8006c2e:	2118      	movs	r1, #24
 8006c30:	201b      	movs	r0, #27
 8006c32:	f7ff ffa1 	bl	8006b78 <gyro_write_byte>

	HAL_Delay(50);
 8006c36:	2032      	movs	r0, #50	; 0x32
 8006c38:	f004 f832 	bl	800aca0 <HAL_Delay>

// ACCEL_CONFIG 0x1C

	gyro_write_byte(0x1C, 0x18); // use pm 16g
 8006c3c:	2118      	movs	r1, #24
 8006c3e:	201c      	movs	r0, #28
 8006c40:	f7ff ff9a 	bl	8006b78 <gyro_write_byte>

	HAL_Delay(50);
 8006c44:	2032      	movs	r0, #50	; 0x32
 8006c46:	f004 f82b 	bl	800aca0 <HAL_Delay>

	set_flag = 1;
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <pl_gyro_init+0x90>)
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	701a      	strb	r2, [r3, #0]

}
 8006c50:	bf00      	nop
 8006c52:	3708      	adds	r7, #8
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	08014d20 	.word	0x08014d20
 8006c5c:	08014d34 	.word	0x08014d34
 8006c60:	200006c0 	.word	0x200006c0

08006c64 <ICM20602_GYRO_READ>:

float ICM20602_GYRO_READ(uint8_t H_reg)

{
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7ff ff55 	bl	8006b20 <gyro_read_byte>
 8006c76:	4603      	mov	r3, r0
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8006c7c:	79fb      	ldrb	r3, [r7, #7]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7ff ff4c 	bl	8006b20 <gyro_read_byte>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8006c8c:	4323      	orrs	r3, r4
 8006c8e:	81fb      	strh	r3, [r7, #14]

	float omega = (float) (data / 16.4f);
 8006c90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c9c:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006cb8 <ICM20602_GYRO_READ+0x54>
 8006ca0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ca4:	edc7 7a02 	vstr	s15, [r7, #8]

	return omega;
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	ee07 3a90 	vmov	s15, r3

}
 8006cae:	eeb0 0a67 	vmov.f32	s0, s15
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}
 8006cb8:	41833333 	.word	0x41833333

08006cbc <ICM20602_ACCEL_READ>:

float ICM20602_ACCEL_READ(uint8_t H_reg)

{
 8006cbc:	b590      	push	{r4, r7, lr}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	71fb      	strb	r3, [r7, #7]

	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8006cc6:	79fb      	ldrb	r3, [r7, #7]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff ff29 	bl	8006b20 <gyro_read_byte>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	021b      	lsls	r3, r3, #8
 8006cd2:	b21c      	sxth	r4, r3
			| (uint8_t) gyro_read_byte(H_reg + 1));
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7ff ff20 	bl	8006b20 <gyro_read_byte>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	b21b      	sxth	r3, r3
	int16_t data = (int16_t) (((uint8_t) gyro_read_byte(H_reg) << 8)
 8006ce4:	4323      	orrs	r3, r4
 8006ce6:	81fb      	strh	r3, [r7, #14]

	float accel = (float) (data / 2048.0f);
 8006ce8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cf4:	eddf 6a06 	vldr	s13, [pc, #24]	; 8006d10 <ICM20602_ACCEL_READ+0x54>
 8006cf8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cfc:	edc7 7a02 	vstr	s15, [r7, #8]

	return accel;
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	ee07 3a90 	vmov	s15, r3

}
 8006d06:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd90      	pop	{r4, r7, pc}
 8006d10:	45000000 	.word	0x45000000

08006d14 <ICM20602_DataUpdate>:

void ICM20602_DataUpdate(void)

{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	af00      	add	r7, sp, #0

	if (set_flag == 1) {
 8006d18:	4b1a      	ldr	r3, [pc, #104]	; (8006d84 <ICM20602_DataUpdate+0x70>)
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d12f      	bne.n	8006d80 <ICM20602_DataUpdate+0x6c>

// get yawrate

		gyro.omega_y = ICM20602_GYRO_READ(0x43);
 8006d20:	2043      	movs	r0, #67	; 0x43
 8006d22:	f7ff ff9f 	bl	8006c64 <ICM20602_GYRO_READ>
 8006d26:	eef0 7a40 	vmov.f32	s15, s0
 8006d2a:	4b17      	ldr	r3, [pc, #92]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d2c:	edc3 7a01 	vstr	s15, [r3, #4]

		gyro.omega_x = ICM20602_GYRO_READ(0x45);
 8006d30:	2045      	movs	r0, #69	; 0x45
 8006d32:	f7ff ff97 	bl	8006c64 <ICM20602_GYRO_READ>
 8006d36:	eef0 7a40 	vmov.f32	s15, s0
 8006d3a:	4b13      	ldr	r3, [pc, #76]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d3c:	edc3 7a00 	vstr	s15, [r3]

		gyro.omega_z = ICM20602_GYRO_READ(0x47);
 8006d40:	2047      	movs	r0, #71	; 0x47
 8006d42:	f7ff ff8f 	bl	8006c64 <ICM20602_GYRO_READ>
 8006d46:	eef0 7a40 	vmov.f32	s15, s0
 8006d4a:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d4c:	edc3 7a02 	vstr	s15, [r3, #8]

// get accel

		gyro.accel_y = ICM20602_ACCEL_READ(0x3B);
 8006d50:	203b      	movs	r0, #59	; 0x3b
 8006d52:	f7ff ffb3 	bl	8006cbc <ICM20602_ACCEL_READ>
 8006d56:	eef0 7a40 	vmov.f32	s15, s0
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d5c:	edc3 7a04 	vstr	s15, [r3, #16]

		gyro.accel_x = ICM20602_ACCEL_READ(0x3D);
 8006d60:	203d      	movs	r0, #61	; 0x3d
 8006d62:	f7ff ffab 	bl	8006cbc <ICM20602_ACCEL_READ>
 8006d66:	eef0 7a40 	vmov.f32	s15, s0
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d6c:	edc3 7a03 	vstr	s15, [r3, #12]

		gyro.accel_z = ICM20602_ACCEL_READ(0x3F);
 8006d70:	203f      	movs	r0, #63	; 0x3f
 8006d72:	f7ff ffa3 	bl	8006cbc <ICM20602_ACCEL_READ>
 8006d76:	eef0 7a40 	vmov.f32	s15, s0
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <ICM20602_DataUpdate+0x74>)
 8006d7c:	edc3 7a05 	vstr	s15, [r3, #20]

	}

}
 8006d80:	bf00      	nop
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	200006c0 	.word	0x200006c0
 8006d88:	200006c4 	.word	0x200006c4

08006d8c <pl_motor_init>:
#include "PL_motor.h"
#include "tim.h"
#include "gpio.h"
#include "define.h"

void pl_motor_init(void){
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Start_IT(&htim8);//モータ
 8006d90:	480f      	ldr	r0, [pc, #60]	; (8006dd0 <pl_motor_init+0x44>)
 8006d92:	f008 fe81 	bl	800fa98 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim8);//モータ
 8006d96:	480e      	ldr	r0, [pc, #56]	; (8006dd0 <pl_motor_init+0x44>)
 8006d98:	f003 fdb6 	bl	800a908 <HAL_TIM_PWM_MspInit>
	  HAL_TIM_Base_Start_IT(&htim16);//吸
 8006d9c:	480d      	ldr	r0, [pc, #52]	; (8006dd4 <pl_motor_init+0x48>)
 8006d9e:	f008 fe7b 	bl	800fa98 <HAL_TIM_Base_Start_IT>
	  HAL_TIM_PWM_MspInit(&htim16);//吸
 8006da2:	480c      	ldr	r0, [pc, #48]	; (8006dd4 <pl_motor_init+0x48>)
 8006da4:	f003 fdb0 	bl	800a908 <HAL_TIM_PWM_MspInit>

	pl_L_DriveMotor_mode(MOTOR_FRONT);
 8006da8:	2001      	movs	r0, #1
 8006daa:	f000 f81f 	bl	8006dec <pl_L_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,90);
 8006dae:	4b08      	ldr	r3, [pc, #32]	; (8006dd0 <pl_motor_init+0x44>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	225a      	movs	r2, #90	; 0x5a
 8006db4:	63da      	str	r2, [r3, #60]	; 0x3c
	pl_R_DriveMotor_mode(MOTOR_FRONT);
 8006db6:	2001      	movs	r0, #1
 8006db8:	f000 f840 	bl	8006e3c <pl_R_DriveMotor_mode>
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,90);
 8006dbc:	4b04      	ldr	r3, [pc, #16]	; (8006dd0 <pl_motor_init+0x44>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	225a      	movs	r2, #90	; 0x5a
 8006dc2:	635a      	str	r2, [r3, #52]	; 0x34

	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,30);
 8006dc4:	4b03      	ldr	r3, [pc, #12]	; (8006dd4 <pl_motor_init+0x48>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	221e      	movs	r2, #30
 8006dca:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006dcc:	bf00      	nop
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	2000c4b0 	.word	0x2000c4b0
 8006dd4:	2000c4fc 	.word	0x2000c4fc

08006dd8 <pl_DriveMotor_standby>:

void pl_DriveMotor_standby(int pin){
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(STBY_GPIO_Port, STBY_Pin, pin);
}
 8006de0:	bf00      	nop
 8006de2:	370c      	adds	r7, #12
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <pl_L_DriveMotor_mode>:

void pl_L_DriveMotor_mode(int l_motor_mode){
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

switch (l_motor_mode){
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b03      	cmp	r3, #3
 8006df8:	d819      	bhi.n	8006e2e <pl_L_DriveMotor_mode+0x42>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <pl_L_DriveMotor_mode+0x14>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e2d 	.word	0x08006e2d
 8006e04:	08006e11 	.word	0x08006e11
 8006e08:	08006e1f 	.word	0x08006e1f
 8006e0c:	08006e2d 	.word	0x08006e2d
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_RESET);
 8006e10:	2200      	movs	r2, #0
 8006e12:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e16:	4808      	ldr	r0, [pc, #32]	; (8006e38 <pl_L_DriveMotor_mode+0x4c>)
 8006e18:	f006 fe96 	bl	800db48 <HAL_GPIO_WritePin>
break;
 8006e1c:	e007      	b.n	8006e2e <pl_L_DriveMotor_mode+0x42>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_L_CWCCW_GPIO_Port,MOTOR_L_CWCCW_Pin,GPIO_PIN_SET);
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006e24:	4804      	ldr	r0, [pc, #16]	; (8006e38 <pl_L_DriveMotor_mode+0x4c>)
 8006e26:	f006 fe8f 	bl	800db48 <HAL_GPIO_WritePin>
break;
 8006e2a:	e000      	b.n	8006e2e <pl_L_DriveMotor_mode+0x42>
break;
 8006e2c:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	48000800 	.word	0x48000800

08006e3c <pl_R_DriveMotor_mode>:

void pl_R_DriveMotor_mode(int r_motor_mode){
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]

switch (r_motor_mode){
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d817      	bhi.n	8006e7a <pl_R_DriveMotor_mode+0x3e>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <pl_R_DriveMotor_mode+0x14>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e61 	.word	0x08006e61
 8006e58:	08006e6d 	.word	0x08006e6d
 8006e5c:	08006e79 	.word	0x08006e79
case MOTOR_STOP:
	//pin_mode変更で実装したい
break;
case MOTOR_FRONT:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_SET);
 8006e60:	2201      	movs	r2, #1
 8006e62:	2180      	movs	r1, #128	; 0x80
 8006e64:	4807      	ldr	r0, [pc, #28]	; (8006e84 <pl_R_DriveMotor_mode+0x48>)
 8006e66:	f006 fe6f 	bl	800db48 <HAL_GPIO_WritePin>
break;
 8006e6a:	e006      	b.n	8006e7a <pl_R_DriveMotor_mode+0x3e>
case MOTOR_BACK:
	HAL_GPIO_WritePin(MOTOR_R_CWCCW_GPIO_Port,MOTOR_R_CWCCW_Pin,GPIO_PIN_RESET);
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	2180      	movs	r1, #128	; 0x80
 8006e70:	4804      	ldr	r0, [pc, #16]	; (8006e84 <pl_R_DriveMotor_mode+0x48>)
 8006e72:	f006 fe69 	bl	800db48 <HAL_GPIO_WritePin>
break;
 8006e76:	e000      	b.n	8006e7a <pl_R_DriveMotor_mode+0x3e>
break;
 8006e78:	bf00      	nop
case MOTOR_BREAK:
	//pin_mode変更で実装したい
break;
}

}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	48000400 	.word	0x48000400

08006e88 <pl_DriveMotor_start>:



void pl_DriveMotor_start(void){
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8006e8c:	2108      	movs	r1, #8
 8006e8e:	4804      	ldr	r0, [pc, #16]	; (8006ea0 <pl_DriveMotor_start+0x18>)
 8006e90:	f008 feca 	bl	800fc28 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8006e94:	2100      	movs	r1, #0
 8006e96:	4802      	ldr	r0, [pc, #8]	; (8006ea0 <pl_DriveMotor_start+0x18>)
 8006e98:	f008 fec6 	bl	800fc28 <HAL_TIM_PWM_Start>
}
 8006e9c:	bf00      	nop
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	2000c4b0 	.word	0x2000c4b0

08006ea4 <pl_DriveMotor_stop>:

void pl_DriveMotor_stop(void){
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_3);
 8006ea8:	2108      	movs	r1, #8
 8006eaa:	4804      	ldr	r0, [pc, #16]	; (8006ebc <pl_DriveMotor_stop+0x18>)
 8006eac:	f008 ffc8 	bl	800fe40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8006eb0:	2100      	movs	r1, #0
 8006eb2:	4802      	ldr	r0, [pc, #8]	; (8006ebc <pl_DriveMotor_stop+0x18>)
 8006eb4:	f008 ffc4 	bl	800fe40 <HAL_TIM_PWM_Stop>
}
 8006eb8:	bf00      	nop
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	2000c4b0 	.word	0x2000c4b0

08006ec0 <pl_DriveMotor_duty>:

void pl_DriveMotor_duty(int duty_l,int duty_r){
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3,duty_l);
 8006eca:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <pl_DriveMotor_duty+0x28>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	687a      	ldr	r2, [r7, #4]
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1,duty_r);
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <pl_DriveMotor_duty+0x28>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006eda:	bf00      	nop
 8006edc:	370c      	adds	r7, #12
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	2000c4b0 	.word	0x2000c4b0

08006eec <pl_FunMotor_start>:



void pl_FunMotor_start(void){
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	4802      	ldr	r0, [pc, #8]	; (8006efc <pl_FunMotor_start+0x10>)
 8006ef4:	f008 fe98 	bl	800fc28 <HAL_TIM_PWM_Start>
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	2000c4fc 	.word	0x2000c4fc

08006f00 <pl_FunMotor_stop>:

void pl_FunMotor_stop(void){
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim16, TIM_CHANNEL_1);
 8006f04:	2100      	movs	r1, #0
 8006f06:	4802      	ldr	r0, [pc, #8]	; (8006f10 <pl_FunMotor_stop+0x10>)
 8006f08:	f008 ff9a 	bl	800fe40 <HAL_TIM_PWM_Stop>
}
 8006f0c:	bf00      	nop
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	2000c4fc 	.word	0x2000c4fc

08006f14 <pl_FunMotor_duty>:

void pl_FunMotor_duty(float fun_ratio){
 8006f14:	b480      	push	{r7}
 8006f16:	b085      	sub	sp, #20
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	ed87 0a01 	vstr	s0, [r7, #4]
	int duty_fun=(int)(FUN_MAX_DUTY*fun_ratio);
 8006f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006f22:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006f58 <pl_FunMotor_duty+0x44>
 8006f26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f2e:	ee17 3a90 	vmov	r3, s15
 8006f32:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_AUTORELOAD(&htim16, FUN_MAX_DUTY);
 8006f34:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <pl_FunMotor_duty+0x48>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2264      	movs	r2, #100	; 0x64
 8006f3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f3c:	4b07      	ldr	r3, [pc, #28]	; (8006f5c <pl_FunMotor_duty+0x48>)
 8006f3e:	2264      	movs	r2, #100	; 0x64
 8006f40:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1,duty_fun);
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <pl_FunMotor_duty+0x48>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	635a      	str	r2, [r3, #52]	; 0x34

}
 8006f4a:	bf00      	nop
 8006f4c:	3714      	adds	r7, #20
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	42c80000 	.word	0x42c80000
 8006f5c:	2000c4fc 	.word	0x2000c4fc

08006f60 <pl_sensor_init>:
/*******************************************************************/
/*	sensorのinit					(pl_sensor_init)	*/
/*******************************************************************/
/*	sensorを初期設定						*/
/*******************************************************************/
void pl_sensor_init(void){
 8006f60:	b580      	push	{r7, lr}
 8006f62:	af00      	add	r7, sp, #0
	AD_step=0;
 8006f64:	4b04      	ldr	r3, [pc, #16]	; (8006f78 <pl_sensor_init+0x18>)
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
	//HAL_ADC_Init(&hadc1);
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8006f6a:	217f      	movs	r1, #127	; 0x7f
 8006f6c:	4803      	ldr	r0, [pc, #12]	; (8006f7c <pl_sensor_init+0x1c>)
 8006f6e:	f005 ff11 	bl	800cd94 <HAL_ADCEx_Calibration_Start>
	//HAL_ADC_ConfigChannel(&hadc1,&sConfig);
}
 8006f72:	bf00      	nop
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	200006e8 	.word	0x200006e8
 8006f7c:	20000714 	.word	0x20000714

08006f80 <pl_getbatt>:
/*******************************************************************/
/*	電圧の取得			(pl_getbatt)	*/
/*******************************************************************/
/*	戻り値に電圧を返す．						*/
/*******************************************************************/
float pl_getbatt(void){
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
	 float batt;
	 uint16_t battAD;


	HAL_ADC_Start(&hadc1);
 8006f86:	483c      	ldr	r0, [pc, #240]	; (8007078 <pl_getbatt+0xf8>)
 8006f88:	f004 faf2 	bl	800b570 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 50);
 8006f8c:	2132      	movs	r1, #50	; 0x32
 8006f8e:	483a      	ldr	r0, [pc, #232]	; (8007078 <pl_getbatt+0xf8>)
 8006f90:	f004 fbec 	bl	800b76c <HAL_ADC_PollForConversion>
	battAD = HAL_ADC_GetValue(&hadc1);
 8006f94:	4838      	ldr	r0, [pc, #224]	; (8007078 <pl_getbatt+0xf8>)
 8006f96:	f004 fe08 	bl	800bbaa <HAL_ADC_GetValue>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	80fb      	strh	r3, [r7, #6]
	HAL_ADC_Stop(&hadc1);
 8006f9e:	4836      	ldr	r0, [pc, #216]	; (8007078 <pl_getbatt+0xf8>)
 8006fa0:	f004 fbb0 	bl	800b704 <HAL_ADC_Stop>
	batt = 3.3 * (float) battAD / 4095 * (10.0 + 10.0) / 10.0*1.15*3.7/3.86;//* 1.2975
 8006fa4:	88fb      	ldrh	r3, [r7, #6]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	ee17 0a90 	vmov	r0, s15
 8006fb2:	f7f9 faf1 	bl	8000598 <__aeabi_f2d>
 8006fb6:	a326      	add	r3, pc, #152	; (adr r3, 8007050 <pl_getbatt+0xd0>)
 8006fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbc:	f7f9 fb44 	bl	8000648 <__aeabi_dmul>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	460b      	mov	r3, r1
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	a323      	add	r3, pc, #140	; (adr r3, 8007058 <pl_getbatt+0xd8>)
 8006fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fce:	f7f9 fc65 	bl	800089c <__aeabi_ddiv>
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	460b      	mov	r3, r1
 8006fd6:	4610      	mov	r0, r2
 8006fd8:	4619      	mov	r1, r3
 8006fda:	f04f 0200 	mov.w	r2, #0
 8006fde:	4b27      	ldr	r3, [pc, #156]	; (800707c <pl_getbatt+0xfc>)
 8006fe0:	f7f9 fb32 	bl	8000648 <__aeabi_dmul>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	4b23      	ldr	r3, [pc, #140]	; (8007080 <pl_getbatt+0x100>)
 8006ff2:	f7f9 fc53 	bl	800089c <__aeabi_ddiv>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	4610      	mov	r0, r2
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	a318      	add	r3, pc, #96	; (adr r3, 8007060 <pl_getbatt+0xe0>)
 8007000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007004:	f7f9 fb20 	bl	8000648 <__aeabi_dmul>
 8007008:	4602      	mov	r2, r0
 800700a:	460b      	mov	r3, r1
 800700c:	4610      	mov	r0, r2
 800700e:	4619      	mov	r1, r3
 8007010:	a315      	add	r3, pc, #84	; (adr r3, 8007068 <pl_getbatt+0xe8>)
 8007012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007016:	f7f9 fb17 	bl	8000648 <__aeabi_dmul>
 800701a:	4602      	mov	r2, r0
 800701c:	460b      	mov	r3, r1
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	a313      	add	r3, pc, #76	; (adr r3, 8007070 <pl_getbatt+0xf0>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fc38 	bl	800089c <__aeabi_ddiv>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4610      	mov	r0, r2
 8007032:	4619      	mov	r1, r3
 8007034:	f7f9 fde0 	bl	8000bf8 <__aeabi_d2f>
 8007038:	4603      	mov	r3, r0
 800703a:	603b      	str	r3, [r7, #0]
return batt;
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	ee07 3a90 	vmov	s15, r3
}
 8007042:	eeb0 0a67 	vmov.f32	s0, s15
 8007046:	3708      	adds	r7, #8
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	f3af 8000 	nop.w
 8007050:	66666666 	.word	0x66666666
 8007054:	400a6666 	.word	0x400a6666
 8007058:	00000000 	.word	0x00000000
 800705c:	40affe00 	.word	0x40affe00
 8007060:	66666666 	.word	0x66666666
 8007064:	3ff26666 	.word	0x3ff26666
 8007068:	9999999a 	.word	0x9999999a
 800706c:	400d9999 	.word	0x400d9999
 8007070:	ae147ae1 	.word	0xae147ae1
 8007074:	400ee147 	.word	0x400ee147
 8007078:	20000714 	.word	0x20000714
 800707c:	40340000 	.word	0x40340000
 8007080:	40240000 	.word	0x40240000
 8007084:	00000000 	.word	0x00000000

08007088 <pl_callback_getSensor>:
/*******************************************************************/
/*	callback用関数			(pl_callback_getSensor)	*/
/*******************************************************************/
/*	DMAがスタートしたら実行するコード					*/
/*******************************************************************/
void pl_callback_getSensor(void) {
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	uint16_t V_battAD;

	int j;
	HAL_ADC_Stop_DMA(&hadc1);
 800708e:	4882      	ldr	r0, [pc, #520]	; (8007298 <pl_callback_getSensor+0x210>)
 8007090:	f004 fd2a 	bl	800bae8 <HAL_ADC_Stop_DMA>


	switch (AD_step) {
 8007094:	4b81      	ldr	r3, [pc, #516]	; (800729c <pl_callback_getSensor+0x214>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	2b04      	cmp	r3, #4
 800709a:	f200 80d9 	bhi.w	8007250 <pl_callback_getSensor+0x1c8>
 800709e:	a201      	add	r2, pc, #4	; (adr r2, 80070a4 <pl_callback_getSensor+0x1c>)
 80070a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a4:	080070b9 	.word	0x080070b9
 80070a8:	080070f1 	.word	0x080070f1
 80070ac:	08007151 	.word	0x08007151
 80070b0:	08007191 	.word	0x08007191
 80070b4:	08007251 	.word	0x08007251
	case 0:
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin, GPIO_PIN_SET);
 80070b8:	2201      	movs	r2, #1
 80070ba:	2102      	movs	r1, #2
 80070bc:	4878      	ldr	r0, [pc, #480]	; (80072a0 <pl_callback_getSensor+0x218>)
 80070be:	f006 fd43 	bl	800db48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80070c2:	2200      	movs	r2, #0
 80070c4:	2110      	movs	r1, #16
 80070c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80070ca:	f006 fd3d 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80070ce:	2200      	movs	r2, #0
 80070d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070d4:	4873      	ldr	r0, [pc, #460]	; (80072a4 <pl_callback_getSensor+0x21c>)
 80070d6:	f006 fd37 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80070da:	2300      	movs	r3, #0
 80070dc:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 80070de:	e002      	b.n	80070e6 <pl_callback_getSensor+0x5e>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3301      	adds	r3, #1
 80070e4:	607b      	str	r3, [r7, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070ec:	ddf8      	ble.n	80070e0 <pl_callback_getSensor+0x58>
		break;
 80070ee:	e0af      	b.n	8007250 <pl_callback_getSensor+0x1c8>
	case 1:
		g_sensor_on[0] = g_ADCBuffer[1];
 80070f0:	4b6d      	ldr	r3, [pc, #436]	; (80072a8 <pl_callback_getSensor+0x220>)
 80070f2:	885a      	ldrh	r2, [r3, #2]
 80070f4:	4b6d      	ldr	r3, [pc, #436]	; (80072ac <pl_callback_getSensor+0x224>)
 80070f6:	801a      	strh	r2, [r3, #0]
		g_sensor_on[1] = g_ADCBuffer[2];
 80070f8:	4b6b      	ldr	r3, [pc, #428]	; (80072a8 <pl_callback_getSensor+0x220>)
 80070fa:	889a      	ldrh	r2, [r3, #4]
 80070fc:	4b6b      	ldr	r3, [pc, #428]	; (80072ac <pl_callback_getSensor+0x224>)
 80070fe:	805a      	strh	r2, [r3, #2]
		g_sensor_off[2] = g_ADCBuffer[3];
 8007100:	4b69      	ldr	r3, [pc, #420]	; (80072a8 <pl_callback_getSensor+0x220>)
 8007102:	88da      	ldrh	r2, [r3, #6]
 8007104:	4b6a      	ldr	r3, [pc, #424]	; (80072b0 <pl_callback_getSensor+0x228>)
 8007106:	809a      	strh	r2, [r3, #4]
		g_sensor_off[3] = g_ADCBuffer[4];
 8007108:	4b67      	ldr	r3, [pc, #412]	; (80072a8 <pl_callback_getSensor+0x220>)
 800710a:	891a      	ldrh	r2, [r3, #8]
 800710c:	4b68      	ldr	r3, [pc, #416]	; (80072b0 <pl_callback_getSensor+0x228>)
 800710e:	80da      	strh	r2, [r3, #6]
		g_sensor_off[4] = g_ADCBuffer[5];
 8007110:	4b65      	ldr	r3, [pc, #404]	; (80072a8 <pl_callback_getSensor+0x220>)
 8007112:	895a      	ldrh	r2, [r3, #10]
 8007114:	4b66      	ldr	r3, [pc, #408]	; (80072b0 <pl_callback_getSensor+0x228>)
 8007116:	811a      	strh	r2, [r3, #8]

		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007118:	2200      	movs	r2, #0
 800711a:	2102      	movs	r1, #2
 800711c:	4860      	ldr	r0, [pc, #384]	; (80072a0 <pl_callback_getSensor+0x218>)
 800711e:	f006 fd13 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin, GPIO_PIN_SET);
 8007122:	2201      	movs	r2, #1
 8007124:	2110      	movs	r1, #16
 8007126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800712a:	f006 fd0d 	bl	800db48 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 800712e:	2200      	movs	r2, #0
 8007130:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007134:	485b      	ldr	r0, [pc, #364]	; (80072a4 <pl_callback_getSensor+0x21c>)
 8007136:	f006 fd07 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 800713a:	2300      	movs	r3, #0
 800713c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800713e:	e002      	b.n	8007146 <pl_callback_getSensor+0xbe>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	3301      	adds	r3, #1
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800714c:	ddf8      	ble.n	8007140 <pl_callback_getSensor+0xb8>
		break;
 800714e:	e07f      	b.n	8007250 <pl_callback_getSensor+0x1c8>
	case 2:
		g_sensor_on[2] = g_ADCBuffer[3];
 8007150:	4b55      	ldr	r3, [pc, #340]	; (80072a8 <pl_callback_getSensor+0x220>)
 8007152:	88da      	ldrh	r2, [r3, #6]
 8007154:	4b55      	ldr	r3, [pc, #340]	; (80072ac <pl_callback_getSensor+0x224>)
 8007156:	809a      	strh	r2, [r3, #4]
		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 8007158:	2200      	movs	r2, #0
 800715a:	2102      	movs	r1, #2
 800715c:	4850      	ldr	r0, [pc, #320]	; (80072a0 <pl_callback_getSensor+0x218>)
 800715e:	f006 fcf3 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 8007162:	2200      	movs	r2, #0
 8007164:	2110      	movs	r1, #16
 8007166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800716a:	f006 fced 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin, GPIO_PIN_SET);
 800716e:	2201      	movs	r2, #1
 8007170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007174:	484b      	ldr	r0, [pc, #300]	; (80072a4 <pl_callback_getSensor+0x21c>)
 8007176:	f006 fce7 	bl	800db48 <HAL_GPIO_WritePin>
		j=0;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
		while (j <= 1000) {j++;}
 800717e:	e002      	b.n	8007186 <pl_callback_getSensor+0xfe>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	3301      	adds	r3, #1
 8007184:	607b      	str	r3, [r7, #4]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800718c:	ddf8      	ble.n	8007180 <pl_callback_getSensor+0xf8>
		break;
 800718e:	e05f      	b.n	8007250 <pl_callback_getSensor+0x1c8>
	case 3:
		g_sensor_off[0] = g_ADCBuffer[1];
 8007190:	4b45      	ldr	r3, [pc, #276]	; (80072a8 <pl_callback_getSensor+0x220>)
 8007192:	885a      	ldrh	r2, [r3, #2]
 8007194:	4b46      	ldr	r3, [pc, #280]	; (80072b0 <pl_callback_getSensor+0x228>)
 8007196:	801a      	strh	r2, [r3, #0]
		g_sensor_off[1] = g_ADCBuffer[2];
 8007198:	4b43      	ldr	r3, [pc, #268]	; (80072a8 <pl_callback_getSensor+0x220>)
 800719a:	889a      	ldrh	r2, [r3, #4]
 800719c:	4b44      	ldr	r3, [pc, #272]	; (80072b0 <pl_callback_getSensor+0x228>)
 800719e:	805a      	strh	r2, [r3, #2]
		g_sensor_on[3] = g_ADCBuffer[4];
 80071a0:	4b41      	ldr	r3, [pc, #260]	; (80072a8 <pl_callback_getSensor+0x220>)
 80071a2:	891a      	ldrh	r2, [r3, #8]
 80071a4:	4b41      	ldr	r3, [pc, #260]	; (80072ac <pl_callback_getSensor+0x224>)
 80071a6:	80da      	strh	r2, [r3, #6]
		g_sensor_on[4] = g_ADCBuffer[5];
 80071a8:	4b3f      	ldr	r3, [pc, #252]	; (80072a8 <pl_callback_getSensor+0x220>)
 80071aa:	895a      	ldrh	r2, [r3, #10]
 80071ac:	4b3f      	ldr	r3, [pc, #252]	; (80072ac <pl_callback_getSensor+0x224>)
 80071ae:	811a      	strh	r2, [r3, #8]


		HAL_GPIO_WritePin(SENSOR_LED1_GPIO_Port, SENSOR_LED1_Pin,
 80071b0:	2200      	movs	r2, #0
 80071b2:	2102      	movs	r1, #2
 80071b4:	483a      	ldr	r0, [pc, #232]	; (80072a0 <pl_callback_getSensor+0x218>)
 80071b6:	f006 fcc7 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED2_GPIO_Port, SENSOR_LED2_Pin,
 80071ba:	2200      	movs	r2, #0
 80071bc:	2110      	movs	r1, #16
 80071be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80071c2:	f006 fcc1 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		HAL_GPIO_WritePin(SENSOR_LED3_GPIO_Port, SENSOR_LED3_Pin,
 80071c6:	2200      	movs	r2, #0
 80071c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80071cc:	4835      	ldr	r0, [pc, #212]	; (80072a4 <pl_callback_getSensor+0x21c>)
 80071ce:	f006 fcbb 	bl	800db48 <HAL_GPIO_WritePin>
				GPIO_PIN_RESET);
		j=0;
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
		while (j <= 50) {j++;}
 80071d6:	e002      	b.n	80071de <pl_callback_getSensor+0x156>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3301      	adds	r3, #1
 80071dc:	607b      	str	r3, [r7, #4]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2b32      	cmp	r3, #50	; 0x32
 80071e2:	ddf9      	ble.n	80071d8 <pl_callback_getSensor+0x150>
		V_battAD = g_ADCBuffer[0];
 80071e4:	4b30      	ldr	r3, [pc, #192]	; (80072a8 <pl_callback_getSensor+0x220>)
 80071e6:	881b      	ldrh	r3, [r3, #0]
 80071e8:	807b      	strh	r3, [r7, #2]
		g_V_batt = 3.3 * (float) V_battAD / 4095.0 * (100.0 + 50.0) / 50.0;
 80071ea:	887b      	ldrh	r3, [r7, #2]
 80071ec:	ee07 3a90 	vmov	s15, r3
 80071f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071f4:	ee17 0a90 	vmov	r0, s15
 80071f8:	f7f9 f9ce 	bl	8000598 <__aeabi_f2d>
 80071fc:	a320      	add	r3, pc, #128	; (adr r3, 8007280 <pl_callback_getSensor+0x1f8>)
 80071fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007202:	f7f9 fa21 	bl	8000648 <__aeabi_dmul>
 8007206:	4602      	mov	r2, r0
 8007208:	460b      	mov	r3, r1
 800720a:	4610      	mov	r0, r2
 800720c:	4619      	mov	r1, r3
 800720e:	a31e      	add	r3, pc, #120	; (adr r3, 8007288 <pl_callback_getSensor+0x200>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f9 fb42 	bl	800089c <__aeabi_ddiv>
 8007218:	4602      	mov	r2, r0
 800721a:	460b      	mov	r3, r1
 800721c:	4610      	mov	r0, r2
 800721e:	4619      	mov	r1, r3
 8007220:	a31b      	add	r3, pc, #108	; (adr r3, 8007290 <pl_callback_getSensor+0x208>)
 8007222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007226:	f7f9 fa0f 	bl	8000648 <__aeabi_dmul>
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	f04f 0200 	mov.w	r2, #0
 8007236:	4b1f      	ldr	r3, [pc, #124]	; (80072b4 <pl_callback_getSensor+0x22c>)
 8007238:	f7f9 fb30 	bl	800089c <__aeabi_ddiv>
 800723c:	4602      	mov	r2, r0
 800723e:	460b      	mov	r3, r1
 8007240:	4610      	mov	r0, r2
 8007242:	4619      	mov	r1, r3
 8007244:	f7f9 fcd8 	bl	8000bf8 <__aeabi_d2f>
 8007248:	4603      	mov	r3, r0
 800724a:	4a1b      	ldr	r2, [pc, #108]	; (80072b8 <pl_callback_getSensor+0x230>)
 800724c:	6013      	str	r3, [r2, #0]
		break;
 800724e:	bf00      	nop

		break;
	}


	AD_step++;
 8007250:	4b12      	ldr	r3, [pc, #72]	; (800729c <pl_callback_getSensor+0x214>)
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	3301      	adds	r3, #1
 8007256:	b2da      	uxtb	r2, r3
 8007258:	4b10      	ldr	r3, [pc, #64]	; (800729c <pl_callback_getSensor+0x214>)
 800725a:	701a      	strb	r2, [r3, #0]
	//for(j=0;j<=2000;j++){}
	if (AD_step != 4) {
 800725c:	4b0f      	ldr	r3, [pc, #60]	; (800729c <pl_callback_getSensor+0x214>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d005      	beq.n	8007270 <pl_callback_getSensor+0x1e8>
		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 8007264:	2206      	movs	r2, #6
 8007266:	4910      	ldr	r1, [pc, #64]	; (80072a8 <pl_callback_getSensor+0x220>)
 8007268:	480b      	ldr	r0, [pc, #44]	; (8007298 <pl_callback_getSensor+0x210>)
 800726a:	f004 fb73 	bl	800b954 <HAL_ADC_Start_DMA>
	 the HAL_ADC_ConvCpltCallback could be implemented in the user file
	 */
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,sizeof(g_ADCBuffer)/sizeof(uint16_t));
	//HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer,
	//	sizeof(g_ADCBuffer) / sizeof(uint16_t));
}
 800726e:	e002      	b.n	8007276 <pl_callback_getSensor+0x1ee>
		AD_step = 0;
 8007270:	4b0a      	ldr	r3, [pc, #40]	; (800729c <pl_callback_getSensor+0x214>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
}
 8007276:	bf00      	nop
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	66666666 	.word	0x66666666
 8007284:	400a6666 	.word	0x400a6666
 8007288:	00000000 	.word	0x00000000
 800728c:	40affe00 	.word	0x40affe00
 8007290:	00000000 	.word	0x00000000
 8007294:	4062c000 	.word	0x4062c000
 8007298:	20000714 	.word	0x20000714
 800729c:	200006e8 	.word	0x200006e8
 80072a0:	48000400 	.word	0x48000400
 80072a4:	48000800 	.word	0x48000800
 80072a8:	200006dc 	.word	0x200006dc
 80072ac:	200006ec 	.word	0x200006ec
 80072b0:	200006f8 	.word	0x200006f8
 80072b4:	40490000 	.word	0x40490000
 80072b8:	20000704 	.word	0x20000704

080072bc <pl_interupt_getSensor>:
/*******************************************************************/
/*	割り込み用動作関数(センサー取得)			(interupt_calSensor)	*/
/*******************************************************************/
/*	センサーの情報を取得する割り込み関数．						*/
/*******************************************************************/
void pl_interupt_getSensor(void){
 80072bc:	b580      	push	{r7, lr}
 80072be:	af00      	add	r7, sp, #0

		HAL_ADC_Start_DMA(&hadc1, g_ADCBuffer, sizeof(g_ADCBuffer) / sizeof(uint16_t));
 80072c0:	2206      	movs	r2, #6
 80072c2:	4903      	ldr	r1, [pc, #12]	; (80072d0 <pl_interupt_getSensor+0x14>)
 80072c4:	4803      	ldr	r0, [pc, #12]	; (80072d4 <pl_interupt_getSensor+0x18>)
 80072c6:	f004 fb45 	bl	800b954 <HAL_ADC_Start_DMA>

}
 80072ca:	bf00      	nop
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	200006dc 	.word	0x200006dc
 80072d4:	20000714 	.word	0x20000714

080072d8 <pl_timer_init>:

volatile uint32_t g_timCount;
float g_timCount_sec;
uint8_t count_mode;

void pl_timer_init(void){
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	count_mode=0;
 80072dc:	4b05      	ldr	r3, [pc, #20]	; (80072f4 <pl_timer_init+0x1c>)
 80072de:	2200      	movs	r2, #0
 80072e0:	701a      	strb	r2, [r3, #0]
	g_timCount_sec=0;
 80072e2:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <pl_timer_init+0x20>)
 80072e4:	f04f 0200 	mov.w	r2, #0
 80072e8:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim6);//割り込み
 80072ea:	4804      	ldr	r0, [pc, #16]	; (80072fc <pl_timer_init+0x24>)
 80072ec:	f008 fbd4 	bl	800fa98 <HAL_TIM_Base_Start_IT>
}
 80072f0:	bf00      	nop
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20000710 	.word	0x20000710
 80072f8:	2000070c 	.word	0x2000070c
 80072fc:	2000c464 	.word	0x2000c464

08007300 <interrupt_timer>:

void interrupt_timer(void){
 8007300:	b580      	push	{r7, lr}
 8007302:	af00      	add	r7, sp, #0
	g_timCount++;
 8007304:	4b10      	ldr	r3, [pc, #64]	; (8007348 <interrupt_timer+0x48>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	3301      	adds	r3, #1
 800730a:	4a0f      	ldr	r2, [pc, #60]	; (8007348 <interrupt_timer+0x48>)
 800730c:	6013      	str	r3, [r2, #0]
	if(count_mode==1){
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <interrupt_timer+0x4c>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d112      	bne.n	800733c <interrupt_timer+0x3c>
	g_timCount_sec=g_timCount_sec + INTERRUPT_TIME;
 8007316:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <interrupt_timer+0x50>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4618      	mov	r0, r3
 800731c:	f7f9 f93c 	bl	8000598 <__aeabi_f2d>
 8007320:	a307      	add	r3, pc, #28	; (adr r3, 8007340 <interrupt_timer+0x40>)
 8007322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007326:	f7f8 ffd9 	bl	80002dc <__adddf3>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4610      	mov	r0, r2
 8007330:	4619      	mov	r1, r3
 8007332:	f7f9 fc61 	bl	8000bf8 <__aeabi_d2f>
 8007336:	4603      	mov	r3, r0
 8007338:	4a05      	ldr	r2, [pc, #20]	; (8007350 <interrupt_timer+0x50>)
 800733a:	6013      	str	r3, [r2, #0]
	}

}
 800733c:	bf00      	nop
 800733e:	bd80      	pop	{r7, pc}
 8007340:	d2f1a9fc 	.word	0xd2f1a9fc
 8007344:	3f50624d 	.word	0x3f50624d
 8007348:	20000708 	.word	0x20000708
 800734c:	20000710 	.word	0x20000710
 8007350:	2000070c 	.word	0x2000070c
 8007354:	00000000 	.word	0x00000000

08007358 <wait_ms>:
	count_mode=0;
	g_timCount_sec=0;
	return timer;
}

void wait_ms(uint32_t waitTime) {
 8007358:	b5b0      	push	{r4, r5, r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 8007360:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <wait_ms+0x80>)
 8007362:	2200      	movs	r2, #0
 8007364:	601a      	str	r2, [r3, #0]
        __HAL_TIM_SET_COUNTER(&htim6, 0);
 8007366:	4b1d      	ldr	r3, [pc, #116]	; (80073dc <wait_ms+0x84>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2200      	movs	r2, #0
 800736c:	625a      	str	r2, [r3, #36]	; 0x24
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 800736e:	bf00      	nop
 8007370:	4b19      	ldr	r3, [pc, #100]	; (80073d8 <wait_ms+0x80>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	ee07 3a90 	vmov	s15, r3
 8007378:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800737c:	ee17 0a90 	vmov	r0, s15
 8007380:	f7f9 f90a 	bl	8000598 <__aeabi_f2d>
 8007384:	a312      	add	r3, pc, #72	; (adr r3, 80073d0 <wait_ms+0x78>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	f7f9 f95d 	bl	8000648 <__aeabi_dmul>
 800738e:	4602      	mov	r2, r0
 8007390:	460b      	mov	r3, r1
 8007392:	4610      	mov	r0, r2
 8007394:	4619      	mov	r1, r3
 8007396:	a30e      	add	r3, pc, #56	; (adr r3, 80073d0 <wait_ms+0x78>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f7f9 fa7e 	bl	800089c <__aeabi_ddiv>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4614      	mov	r4, r2
 80073a6:	461d      	mov	r5, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7f9 f8d3 	bl	8000554 <__aeabi_ui2d>
 80073ae:	4602      	mov	r2, r0
 80073b0:	460b      	mov	r3, r1
 80073b2:	4620      	mov	r0, r4
 80073b4:	4629      	mov	r1, r5
 80073b6:	f7f9 fbb9 	bl	8000b2c <__aeabi_dcmplt>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d1d7      	bne.n	8007370 <wait_ms+0x18>
        }

}
 80073c0:	bf00      	nop
 80073c2:	bf00      	nop
 80073c4:	3708      	adds	r7, #8
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bdb0      	pop	{r4, r5, r7, pc}
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80073d4:	3f50624d 	.word	0x3f50624d
 80073d8:	20000708 	.word	0x20000708
 80073dc:	2000c464 	.word	0x2000c464

080073e0 <wait_ms_NoReset>:

void wait_ms_NoReset(uint32_t waitTime) {
 80073e0:	b5b0      	push	{r4, r5, r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]

        g_timCount = 0;
 80073e8:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <wait_ms_NoReset+0x78>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	601a      	str	r2, [r3, #0]
        while ((float)(g_timCount) * 0.001 / INTERRUPT_TIME < waitTime) {
 80073ee:	bf00      	nop
 80073f0:	4b19      	ldr	r3, [pc, #100]	; (8007458 <wait_ms_NoReset+0x78>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	ee07 3a90 	vmov	s15, r3
 80073f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073fc:	ee17 0a90 	vmov	r0, s15
 8007400:	f7f9 f8ca 	bl	8000598 <__aeabi_f2d>
 8007404:	a312      	add	r3, pc, #72	; (adr r3, 8007450 <wait_ms_NoReset+0x70>)
 8007406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800740a:	f7f9 f91d 	bl	8000648 <__aeabi_dmul>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4610      	mov	r0, r2
 8007414:	4619      	mov	r1, r3
 8007416:	a30e      	add	r3, pc, #56	; (adr r3, 8007450 <wait_ms_NoReset+0x70>)
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f7f9 fa3e 	bl	800089c <__aeabi_ddiv>
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	4614      	mov	r4, r2
 8007426:	461d      	mov	r5, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f7f9 f893 	bl	8000554 <__aeabi_ui2d>
 800742e:	4602      	mov	r2, r0
 8007430:	460b      	mov	r3, r1
 8007432:	4620      	mov	r0, r4
 8007434:	4629      	mov	r1, r5
 8007436:	f7f9 fb79 	bl	8000b2c <__aeabi_dcmplt>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d1d7      	bne.n	80073f0 <wait_ms_NoReset+0x10>
        }

}
 8007440:	bf00      	nop
 8007442:	bf00      	nop
 8007444:	3708      	adds	r7, #8
 8007446:	46bd      	mov	sp, r7
 8007448:	bdb0      	pop	{r4, r5, r7, pc}
 800744a:	bf00      	nop
 800744c:	f3af 8000 	nop.w
 8007450:	d2f1a9fc 	.word	0xd2f1a9fc
 8007454:	3f50624d 	.word	0x3f50624d
 8007458:	20000708 	.word	0x20000708

0800745c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08c      	sub	sp, #48	; 0x30
 8007460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8007462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007466:	2200      	movs	r2, #0
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	605a      	str	r2, [r3, #4]
 800746c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800746e:	1d3b      	adds	r3, r7, #4
 8007470:	2220      	movs	r2, #32
 8007472:	2100      	movs	r1, #0
 8007474:	4618      	mov	r0, r3
 8007476:	f00a fc8b 	bl	8011d90 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800747a:	4b56      	ldr	r3, [pc, #344]	; (80075d4 <MX_ADC1_Init+0x178>)
 800747c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007480:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007482:	4b54      	ldr	r3, [pc, #336]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007484:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007488:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800748a:	4b52      	ldr	r3, [pc, #328]	; (80075d4 <MX_ADC1_Init+0x178>)
 800748c:	2200      	movs	r2, #0
 800748e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007490:	4b50      	ldr	r3, [pc, #320]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007492:	2200      	movs	r2, #0
 8007494:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8007496:	4b4f      	ldr	r3, [pc, #316]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007498:	2200      	movs	r2, #0
 800749a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800749c:	4b4d      	ldr	r3, [pc, #308]	; (80075d4 <MX_ADC1_Init+0x178>)
 800749e:	2201      	movs	r2, #1
 80074a0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80074a2:	4b4c      	ldr	r3, [pc, #304]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074a4:	2208      	movs	r2, #8
 80074a6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80074a8:	4b4a      	ldr	r3, [pc, #296]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80074ae:	4b49      	ldr	r3, [pc, #292]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 6;
 80074b4:	4b47      	ldr	r3, [pc, #284]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074b6:	2206      	movs	r2, #6
 80074b8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80074ba:	4b46      	ldr	r3, [pc, #280]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80074c2:	4b44      	ldr	r3, [pc, #272]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80074c8:	4b42      	ldr	r3, [pc, #264]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80074ce:	4b41      	ldr	r3, [pc, #260]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80074d6:	4b3f      	ldr	r3, [pc, #252]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074d8:	2200      	movs	r2, #0
 80074da:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80074dc:	4b3d      	ldr	r3, [pc, #244]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80074e4:	483b      	ldr	r0, [pc, #236]	; (80075d4 <MX_ADC1_Init+0x178>)
 80074e6:	f003 fe8f 	bl	800b208 <HAL_ADC_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80074f0:	f001 fed1 	bl	8009296 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80074f4:	2300      	movs	r3, #0
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80074f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fc:	4619      	mov	r1, r3
 80074fe:	4835      	ldr	r0, [pc, #212]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007500:	f005 fcdc 	bl	800cebc <HAL_ADCEx_MultiModeConfigChannel>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800750a:	f001 fec4 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800750e:	4b32      	ldr	r3, [pc, #200]	; (80075d8 <MX_ADC1_Init+0x17c>)
 8007510:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8007512:	2306      	movs	r3, #6
 8007514:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8007516:	2301      	movs	r3, #1
 8007518:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800751a:	237f      	movs	r3, #127	; 0x7f
 800751c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800751e:	2304      	movs	r3, #4
 8007520:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007526:	1d3b      	adds	r3, r7, #4
 8007528:	4619      	mov	r1, r3
 800752a:	482a      	ldr	r0, [pc, #168]	; (80075d4 <MX_ADC1_Init+0x178>)
 800752c:	f004 fda2 	bl	800c074 <HAL_ADC_ConfigChannel>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8007536:	f001 feae 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800753a:	4b28      	ldr	r3, [pc, #160]	; (80075dc <MX_ADC1_Init+0x180>)
 800753c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800753e:	230c      	movs	r3, #12
 8007540:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007542:	1d3b      	adds	r3, r7, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4823      	ldr	r0, [pc, #140]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007548:	f004 fd94 	bl	800c074 <HAL_ADC_ConfigChannel>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8007552:	f001 fea0 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007556:	4b22      	ldr	r3, [pc, #136]	; (80075e0 <MX_ADC1_Init+0x184>)
 8007558:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800755a:	2312      	movs	r3, #18
 800755c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800755e:	1d3b      	adds	r3, r7, #4
 8007560:	4619      	mov	r1, r3
 8007562:	481c      	ldr	r0, [pc, #112]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007564:	f004 fd86 	bl	800c074 <HAL_ADC_ConfigChannel>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d001      	beq.n	8007572 <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800756e:	f001 fe92 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <MX_ADC1_Init+0x188>)
 8007574:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8007576:	2318      	movs	r3, #24
 8007578:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800757a:	1d3b      	adds	r3, r7, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4815      	ldr	r0, [pc, #84]	; (80075d4 <MX_ADC1_Init+0x178>)
 8007580:	f004 fd78 	bl	800c074 <HAL_ADC_ConfigChannel>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 800758a:	f001 fe84 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <MX_ADC1_Init+0x18c>)
 8007590:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8007592:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007596:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007598:	1d3b      	adds	r3, r7, #4
 800759a:	4619      	mov	r1, r3
 800759c:	480d      	ldr	r0, [pc, #52]	; (80075d4 <MX_ADC1_Init+0x178>)
 800759e:	f004 fd69 	bl	800c074 <HAL_ADC_ConfigChannel>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <MX_ADC1_Init+0x150>
  {
    Error_Handler();
 80075a8:	f001 fe75 	bl	8009296 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80075ac:	4b0f      	ldr	r3, [pc, #60]	; (80075ec <MX_ADC1_Init+0x190>)
 80075ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80075b0:	f44f 7383 	mov.w	r3, #262	; 0x106
 80075b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80075b6:	1d3b      	adds	r3, r7, #4
 80075b8:	4619      	mov	r1, r3
 80075ba:	4806      	ldr	r0, [pc, #24]	; (80075d4 <MX_ADC1_Init+0x178>)
 80075bc:	f004 fd5a 	bl	800c074 <HAL_ADC_ConfigChannel>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d001      	beq.n	80075ca <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 80075c6:	f001 fe66 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80075ca:	bf00      	nop
 80075cc:	3730      	adds	r7, #48	; 0x30
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20000714 	.word	0x20000714
 80075d8:	2e300800 	.word	0x2e300800
 80075dc:	3ef08000 	.word	0x3ef08000
 80075e0:	10c00010 	.word	0x10c00010
 80075e4:	0c900008 	.word	0x0c900008
 80075e8:	08600004 	.word	0x08600004
 80075ec:	04300002 	.word	0x04300002

080075f0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b09e      	sub	sp, #120	; 0x78
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	605a      	str	r2, [r3, #4]
 8007602:	609a      	str	r2, [r3, #8]
 8007604:	60da      	str	r2, [r3, #12]
 8007606:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007608:	f107 0314 	add.w	r3, r7, #20
 800760c:	2250      	movs	r2, #80	; 0x50
 800760e:	2100      	movs	r1, #0
 8007610:	4618      	mov	r0, r3
 8007612:	f00a fbbd 	bl	8011d90 <memset>
  if(adcHandle->Instance==ADC1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800761e:	f040 8082 	bne.w	8007726 <HAL_ADC_MspInit+0x136>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8007622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007626:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8007628:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800762c:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800762e:	f107 0314 	add.w	r3, r7, #20
 8007632:	4618      	mov	r0, r3
 8007634:	f007 f884 	bl	800e740 <HAL_RCCEx_PeriphCLKConfig>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d001      	beq.n	8007642 <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 800763e:	f001 fe2a 	bl	8009296 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007642:	4b3b      	ldr	r3, [pc, #236]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007646:	4a3a      	ldr	r2, [pc, #232]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007648:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800764c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800764e:	4b38      	ldr	r3, [pc, #224]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007656:	613b      	str	r3, [r7, #16]
 8007658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800765a:	4b35      	ldr	r3, [pc, #212]	; (8007730 <HAL_ADC_MspInit+0x140>)
 800765c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800765e:	4a34      	ldr	r2, [pc, #208]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007666:	4b32      	ldr	r3, [pc, #200]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	60fb      	str	r3, [r7, #12]
 8007670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007672:	4b2f      	ldr	r3, [pc, #188]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	4a2e      	ldr	r2, [pc, #184]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007678:	f043 0302 	orr.w	r3, r3, #2
 800767c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800767e:	4b2c      	ldr	r3, [pc, #176]	; (8007730 <HAL_ADC_MspInit+0x140>)
 8007680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	60bb      	str	r3, [r7, #8]
 8007688:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    PB12     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = SENSOR5_Pin|SENSOR4_Pin|SENSOR3_Pin|SENSOR2_Pin;
 800768a:	230f      	movs	r3, #15
 800768c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800768e:	2303      	movs	r3, #3
 8007690:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007692:	2300      	movs	r3, #0
 8007694:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007696:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800769a:	4619      	mov	r1, r3
 800769c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076a0:	f006 f8d0 	bl	800d844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SENSOR1_Pin|BATT_Pin;
 80076a4:	f241 0301 	movw	r3, #4097	; 0x1001
 80076a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80076aa:	2303      	movs	r3, #3
 80076ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076ae:	2300      	movs	r3, #0
 80076b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076b2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80076b6:	4619      	mov	r1, r3
 80076b8:	481e      	ldr	r0, [pc, #120]	; (8007734 <HAL_ADC_MspInit+0x144>)
 80076ba:	f006 f8c3 	bl	800d844 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80076be:	4b1e      	ldr	r3, [pc, #120]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076c0:	4a1e      	ldr	r2, [pc, #120]	; (800773c <HAL_ADC_MspInit+0x14c>)
 80076c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80076c4:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076c6:	2205      	movs	r2, #5
 80076c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076cc:	2200      	movs	r2, #0
 80076ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80076d0:	4b19      	ldr	r3, [pc, #100]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80076d6:	4b18      	ldr	r3, [pc, #96]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076d8:	2280      	movs	r2, #128	; 0x80
 80076da:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80076dc:	4b16      	ldr	r3, [pc, #88]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076e2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80076e4:	4b14      	ldr	r3, [pc, #80]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076ea:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80076ec:	4b12      	ldr	r3, [pc, #72]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076ee:	2220      	movs	r2, #32
 80076f0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80076f2:	4b11      	ldr	r3, [pc, #68]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80076f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80076fa:	480f      	ldr	r0, [pc, #60]	; (8007738 <HAL_ADC_MspInit+0x148>)
 80076fc:	f005 fdd6 	bl	800d2ac <HAL_DMA_Init>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d001      	beq.n	800770a <HAL_ADC_MspInit+0x11a>
    {
      Error_Handler();
 8007706:	f001 fdc6 	bl	8009296 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a0a      	ldr	r2, [pc, #40]	; (8007738 <HAL_ADC_MspInit+0x148>)
 800770e:	655a      	str	r2, [r3, #84]	; 0x54
 8007710:	4a09      	ldr	r2, [pc, #36]	; (8007738 <HAL_ADC_MspInit+0x148>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8007716:	2200      	movs	r2, #0
 8007718:	2100      	movs	r1, #0
 800771a:	2012      	movs	r0, #18
 800771c:	f005 fd91 	bl	800d242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8007720:	2012      	movs	r0, #18
 8007722:	f005 fda8 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007726:	bf00      	nop
 8007728:	3778      	adds	r7, #120	; 0x78
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	40021000 	.word	0x40021000
 8007734:	48000400 	.word	0x48000400
 8007738:	20000780 	.word	0x20000780
 800773c:	40020008 	.word	0x40020008

08007740 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
	pl_callback_getSensor();
 8007748:	f7ff fc9e 	bl	8007088 <pl_callback_getSensor>
}
 800774c:	bf00      	nop
 800774e:	3708      	adds	r7, #8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}

08007754 <cal_table>:

volatile char g_acc_flag;
volatile char g_MotorEnd_flag;


void cal_table(TRAPEZOID input,TARGET *target){
 8007754:	b084      	sub	sp, #16
 8007756:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	f107 0420 	add.w	r4, r7, #32
 8007762:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
float time_over;
if (input.displacement>=0){
 8007766:	edd7 7a08 	vldr	s15, [r7, #32]
 800776a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800776e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007772:	f2c0 819d 	blt.w	8007ab0 <cal_table+0x35c>
	switch (g_acc_flag) {
 8007776:	4bcd      	ldr	r3, [pc, #820]	; (8007aac <cal_table+0x358>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b06      	cmp	r3, #6
 800777e:	f200 833a 	bhi.w	8007df6 <cal_table+0x6a2>
 8007782:	a201      	add	r2, pc, #4	; (adr r2, 8007788 <cal_table+0x34>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007de9 	.word	0x08007de9
 800778c:	080077a5 	.word	0x080077a5
 8007790:	08007917 	.word	0x08007917
 8007794:	08007a35 	.word	0x08007a35
 8007798:	08007de9 	.word	0x08007de9
 800779c:	08007a61 	.word	0x08007a61
 80077a0:	08007a87 	.word	0x08007a87
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity >= input.count_velocity){
 80077a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077a6:	ed93 7a00 	vldr	s14, [r3]
 80077aa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80077ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	db0a      	blt.n	80077ce <cal_table+0x7a>
				target->velocity = input.count_velocity;
 80077b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077bc:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 80077be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077c0:	f04f 0200 	mov.w	r2, #0
 80077c4:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 80077c6:	4bb9      	ldr	r3, [pc, #740]	; (8007aac <cal_table+0x358>)
 80077c8:	2202      	movs	r2, #2
 80077ca:	701a      	strb	r2, [r3, #0]
				target->velocity -= input.acceleration*(2*time_over);

				target->acceleration = -input.acceleration;
				g_acc_flag=3;
			}
		break;
 80077cc:	e313      	b.n	8007df6 <cal_table+0x6a2>
			else if((input.displacement <= (2*target->velocity*target->velocity
 80077ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80077d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077d4:	edd3 7a00 	vldr	s15, [r3]
 80077d8:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	edd3 7a00 	vldr	s15, [r3]
 80077e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 80077e6:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80077ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80077ee:	ee66 7a27 	vmul.f32	s15, s12, s15
 80077f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 80077f6:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 80077fa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80077fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007802:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8007806:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800780a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 800780e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007812:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((input.displacement <= (2*target->velocity*target->velocity
 8007816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	d900      	bls.n	8007822 <cal_table+0xce>
		break;
 8007820:	e2e9      	b.n	8007df6 <cal_table+0x6a2>
				time_over=((2*target->velocity*target->velocity
 8007822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007824:	edd3 7a00 	vldr	s15, [r3]
 8007828:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	edd3 7a00 	vldr	s15, [r3]
 8007832:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8007836:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800783a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800783e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007842:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8007846:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 800784a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800784e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007852:	ee77 7a67 	vsub.f32	s15, s14, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8007856:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800785a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800785e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	edd7 7a08 	vldr	s15, [r7, #32]
 800786a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	ed93 7a00 	vldr	s14, [r3]
				time_over=((2*target->velocity*target->velocity
 8007874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007878:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 800787c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	4618      	mov	r0, r3
 8007882:	f7f8 fe89 	bl	8000598 <__aeabi_f2d>
 8007886:	4604      	mov	r4, r0
 8007888:	460d      	mov	r5, r1
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	4618      	mov	r0, r3
 800788e:	f7f8 fe83 	bl	8000598 <__aeabi_f2d>
 8007892:	f04f 0200 	mov.w	r2, #0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	f7f8 fed5 	bl	8000648 <__aeabi_dmul>
 800789e:	4602      	mov	r2, r0
 80078a0:	460b      	mov	r3, r1
 80078a2:	4690      	mov	r8, r2
 80078a4:	4699      	mov	r9, r3
 80078a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80078aa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80078ae:	ee17 0a90 	vmov	r0, s15
 80078b2:	f7f8 fe71 	bl	8000598 <__aeabi_f2d>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4640      	mov	r0, r8
 80078bc:	4649      	mov	r1, r9
 80078be:	f7f8 fec3 	bl	8000648 <__aeabi_dmul>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f8 fd05 	bl	80002d8 <__aeabi_dsub>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4610      	mov	r0, r2
 80078d4:	4619      	mov	r1, r3
 80078d6:	f7f9 f98f 	bl	8000bf8 <__aeabi_d2f>
 80078da:	4602      	mov	r2, r0
 80078dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078de:	609a      	str	r2, [r3, #8]
				target->velocity -= input.acceleration*(2*time_over);
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	ed93 7a00 	vldr	s14, [r3]
 80078e6:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 80078ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80078ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80078f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = -input.acceleration;
 8007900:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007904:	eef1 7a67 	vneg.f32	s15, s15
 8007908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790a:	edc3 7a01 	vstr	s15, [r3, #4]
				g_acc_flag=3;
 800790e:	4b67      	ldr	r3, [pc, #412]	; (8007aac <cal_table+0x358>)
 8007910:	2203      	movs	r2, #3
 8007912:	701a      	strb	r2, [r3, #0]
		break;
 8007914:	e26f      	b.n	8007df6 <cal_table+0x6a2>
	case 2:
		//定常
		if (input.displacement-target->displacement <=
 8007916:	ed97 7a08 	vldr	s14, [r7, #32]
 800791a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791c:	edd3 7a02 	vldr	s15, [r3, #8]
 8007920:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8007924:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007928:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800792c:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8007930:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8007934:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007938:	ee66 7a27 	vmul.f32	s15, s12, s15
 800793c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007940:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007944:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8007948:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800794c:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (input.displacement-target->displacement <=
 8007950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007958:	d900      	bls.n	800795c <cal_table+0x208>
			target->velocity -= input.acceleration*(time_over);

			target->acceleration = -input.acceleration;
			g_acc_flag=3;
		}
		break;
 800795a:	e24c      	b.n	8007df6 <cal_table+0x6a2>
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800795c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800795e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007962:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007966:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800796a:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 800796e:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8007972:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007976:	ee66 7a27 	vmul.f32	s15, s12, s15
 800797a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800797e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007982:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8007986:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800798a:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 800798e:	ee37 7a27 	vadd.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8007992:	edd7 7a08 	vldr	s15, [r7, #32]
 8007996:	ee77 6a67 	vsub.f32	s13, s14, s15
 800799a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800799c:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement+(input.count_velocity*input.count_velocity
 80079a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a4:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement -= 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 80079a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7f8 fdf3 	bl	8000598 <__aeabi_f2d>
 80079b2:	4604      	mov	r4, r0
 80079b4:	460d      	mov	r5, r1
 80079b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7f8 fded 	bl	8000598 <__aeabi_f2d>
 80079be:	f04f 0200 	mov.w	r2, #0
 80079c2:	f04f 0300 	mov.w	r3, #0
 80079c6:	f7f8 fe3f 	bl	8000648 <__aeabi_dmul>
 80079ca:	4602      	mov	r2, r0
 80079cc:	460b      	mov	r3, r1
 80079ce:	4690      	mov	r8, r2
 80079d0:	4699      	mov	r9, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7f8 fde0 	bl	8000598 <__aeabi_f2d>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4640      	mov	r0, r8
 80079de:	4649      	mov	r1, r9
 80079e0:	f7f8 fe32 	bl	8000648 <__aeabi_dmul>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4620      	mov	r0, r4
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7f8 fc74 	bl	80002d8 <__aeabi_dsub>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4610      	mov	r0, r2
 80079f6:	4619      	mov	r1, r3
 80079f8:	f7f9 f8fe 	bl	8000bf8 <__aeabi_d2f>
 80079fc:	4602      	mov	r2, r0
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	609a      	str	r2, [r3, #8]
			target->velocity -= input.acceleration*(time_over);
 8007a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a04:	ed93 7a00 	vldr	s14, [r3]
 8007a08:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8007a10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a1a:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = -input.acceleration;
 8007a1e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007a22:	eef1 7a67 	vneg.f32	s15, s15
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=3;
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <cal_table+0x358>)
 8007a2e:	2203      	movs	r2, #3
 8007a30:	701a      	strb	r2, [r3, #0]
		break;
 8007a32:	e1e0      	b.n	8007df6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity <= input.end_velocity){
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	ed93 7a00 	vldr	s14, [r3]
 8007a3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007a3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a46:	d900      	bls.n	8007a4a <cal_table+0x2f6>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007a48:	e1d5      	b.n	8007df6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8007a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a4e:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8007a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a52:	f04f 0200 	mov.w	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007a58:	4b14      	ldr	r3, [pc, #80]	; (8007aac <cal_table+0x358>)
 8007a5a:	2204      	movs	r2, #4
 8007a5c:	701a      	strb	r2, [r3, #0]
		break;
 8007a5e:	e1ca      	b.n	8007df6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		break;
	case 5:
		//加速のみ
		if (target->displacement >= input.displacement){
 8007a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a62:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a66:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a6a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a72:	da00      	bge.n	8007a76 <cal_table+0x322>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007a74:	e1bf      	b.n	8007df6 <cal_table+0x6a2>
			target->acceleration = 0;
 8007a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a78:	f04f 0200 	mov.w	r2, #0
 8007a7c:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	; (8007aac <cal_table+0x358>)
 8007a80:	2204      	movs	r2, #4
 8007a82:	701a      	strb	r2, [r3, #0]
		break;
 8007a84:	e1b7      	b.n	8007df6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement >= input.displacement){
 8007a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a88:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a8c:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a98:	da00      	bge.n	8007a9c <cal_table+0x348>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007a9a:	e1ac      	b.n	8007df6 <cal_table+0x6a2>
			target->acceleration = 0;
 8007a9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a9e:	f04f 0200 	mov.w	r2, #0
 8007aa2:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007aa4:	4b01      	ldr	r3, [pc, #4]	; (8007aac <cal_table+0x358>)
 8007aa6:	2204      	movs	r2, #4
 8007aa8:	701a      	strb	r2, [r3, #0]
		break;
 8007aaa:	e1a4      	b.n	8007df6 <cal_table+0x6a2>
 8007aac:	200007e4 	.word	0x200007e4
	}
}else{
	switch (g_acc_flag) {
 8007ab0:	4bce      	ldr	r3, [pc, #824]	; (8007dec <cal_table+0x698>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	b2db      	uxtb	r3, r3
 8007ab6:	2b06      	cmp	r3, #6
 8007ab8:	f200 819d 	bhi.w	8007df6 <cal_table+0x6a2>
 8007abc:	a201      	add	r2, pc, #4	; (adr r2, 8007ac4 <cal_table+0x370>)
 8007abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac2:	bf00      	nop
 8007ac4:	08007df5 	.word	0x08007df5
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007c53 	.word	0x08007c53
 8007ad0:	08007d69 	.word	0x08007d69
 8007ad4:	08007d95 	.word	0x08007d95
 8007ad8:	08007d9d 	.word	0x08007d9d
 8007adc:	08007dc3 	.word	0x08007dc3
	case 0:
		//速度FBなし
		break;
	case 1:
		//加速(減速)
			if (target->velocity <= input.count_velocity){
 8007ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae2:	ed93 7a00 	vldr	s14, [r3]
 8007ae6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af2:	d80a      	bhi.n	8007b0a <cal_table+0x3b6>
				target->velocity = input.count_velocity;
 8007af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af8:	601a      	str	r2, [r3, #0]
				target->acceleration = 0;
 8007afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007afc:	f04f 0200 	mov.w	r2, #0
 8007b00:	605a      	str	r2, [r3, #4]
				g_acc_flag=2;
 8007b02:	4bba      	ldr	r3, [pc, #744]	; (8007dec <cal_table+0x698>)
 8007b04:	2202      	movs	r2, #2
 8007b06:	701a      	strb	r2, [r3, #0]
				target->velocity += input.acceleration*(2*time_over);

				target->acceleration = input.acceleration;
				g_acc_flag=3;
			}
		break;
 8007b08:	e175      	b.n	8007df6 <cal_table+0x6a2>
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8007b0a:	edd7 7a08 	vldr	s15, [r7, #32]
 8007b0e:	eeb1 7a67 	vneg.f32	s14, s15
 8007b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b14:	edd3 7a00 	vldr	s15, [r3]
 8007b18:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8007b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b1e:	edd3 7a00 	vldr	s15, [r3]
 8007b22:	ee66 6aa7 	vmul.f32	s13, s13, s15
					-input.start_velocity*input.start_velocity
 8007b26:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 8007b2a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007b2e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007b32:	ee76 6ae7 	vsub.f32	s13, s13, s15
					-input.end_velocity*input.end_velocity)
 8007b36:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8007b3a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007b3e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007b42:	ee76 7ae7 	vsub.f32	s15, s13, s15
					/2/input.acceleration)){
 8007b46:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007b4a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8007b4e:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007b52:	eec6 7a26 	vdiv.f32	s15, s12, s13
			else if((-input.displacement <= (2*target->velocity*target->velocity
 8007b56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b5e:	d900      	bls.n	8007b62 <cal_table+0x40e>
		break;
 8007b60:	e149      	b.n	8007df6 <cal_table+0x6a2>
				time_over=(-(2*target->velocity*target->velocity
 8007b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b64:	edd3 7a00 	vldr	s15, [r3]
 8007b68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	edd3 7a00 	vldr	s15, [r3]
 8007b72:	ee27 7a27 	vmul.f32	s14, s14, s15
						-input.start_velocity*input.start_velocity
 8007b76:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8007b7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007b7e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b82:	ee37 7a67 	vsub.f32	s14, s14, s15
						-input.end_velocity*input.end_velocity)
 8007b86:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8007b8a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007b8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007b92:	ee77 7a67 	vsub.f32	s15, s14, s15
				time_over=(-(2*target->velocity*target->velocity
 8007b96:	eef1 7a67 	vneg.f32	s15, s15
						/2/input.acceleration-input.displacement)/target->velocity;
 8007b9a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007b9e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007ba2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8007ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8007bae:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb4:	ed93 7a00 	vldr	s14, [r3]
				time_over=(-(2*target->velocity*target->velocity
 8007bb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007bbc:	edc7 7a01 	vstr	s15, [r7, #4]
				target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*(2*time_over);
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	f7f8 fce7 	bl	8000598 <__aeabi_f2d>
 8007bca:	4604      	mov	r4, r0
 8007bcc:	460d      	mov	r5, r1
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7f8 fce1 	bl	8000598 <__aeabi_f2d>
 8007bd6:	f04f 0200 	mov.w	r2, #0
 8007bda:	f04f 0300 	mov.w	r3, #0
 8007bde:	f7f8 fd33 	bl	8000648 <__aeabi_dmul>
 8007be2:	4602      	mov	r2, r0
 8007be4:	460b      	mov	r3, r1
 8007be6:	4690      	mov	r8, r2
 8007be8:	4699      	mov	r9, r3
 8007bea:	edd7 7a01 	vldr	s15, [r7, #4]
 8007bee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007bf2:	ee17 0a90 	vmov	r0, s15
 8007bf6:	f7f8 fccf 	bl	8000598 <__aeabi_f2d>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	460b      	mov	r3, r1
 8007bfe:	4640      	mov	r0, r8
 8007c00:	4649      	mov	r1, r9
 8007c02:	f7f8 fd21 	bl	8000648 <__aeabi_dmul>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4620      	mov	r0, r4
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	f7f8 fb65 	bl	80002dc <__adddf3>
 8007c12:	4602      	mov	r2, r0
 8007c14:	460b      	mov	r3, r1
 8007c16:	4610      	mov	r0, r2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	f7f8 ffed 	bl	8000bf8 <__aeabi_d2f>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c22:	609a      	str	r2, [r3, #8]
				target->velocity += input.acceleration*(2*time_over);
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	ed93 7a00 	vldr	s14, [r3]
 8007c2a:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007c2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8007c32:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007c36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c40:	edc3 7a00 	vstr	s15, [r3]
				target->acceleration = input.acceleration;
 8007c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	605a      	str	r2, [r3, #4]
				g_acc_flag=3;
 8007c4a:	4b68      	ldr	r3, [pc, #416]	; (8007dec <cal_table+0x698>)
 8007c4c:	2203      	movs	r2, #3
 8007c4e:	701a      	strb	r2, [r3, #0]
		break;
 8007c50:	e0d1      	b.n	8007df6 <cal_table+0x6a2>
	case 2:
		//定常
		if (-input.displacement+target->displacement <=
 8007c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c54:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8007c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
				(input.count_velocity*input.count_velocity
 8007c60:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007c64:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007c68:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2/input.acceleration) {
 8007c6c:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8007c70:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007c74:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007c78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007c80:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8007c84:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007c88:	eec6 7a26 	vdiv.f32	s15, s12, s13
		if (-input.displacement+target->displacement <=
 8007c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	d900      	bls.n	8007c98 <cal_table+0x544>
			target->velocity += input.acceleration*(time_over);

			target->acceleration = input.acceleration;
			g_acc_flag=3;
		}
		break;
 8007c96:	e0ae      	b.n	8007df6 <cal_table+0x6a2>
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8007c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c9e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8007ca2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007ca6:	ee66 6aa7 	vmul.f32	s13, s13, s15
						-input.end_velocity*input.end_velocity)/2
 8007caa:	ed97 6a0a 	vldr	s12, [r7, #40]	; 0x28
 8007cae:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007cb2:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007cb6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007cba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007cbe:	ee87 6aa6 	vdiv.f32	s12, s15, s13
						/input.acceleration-input.displacement)/target->velocity;
 8007cc2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007cc6:	eec6 7a26 	vdiv.f32	s15, s12, s13
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8007cca:	ee37 7a67 	vsub.f32	s14, s14, s15
						/input.acceleration-input.displacement)/target->velocity;
 8007cce:	edd7 7a08 	vldr	s15, [r7, #32]
 8007cd2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd8:	ed93 7a00 	vldr	s14, [r3]
			time_over=(target->displacement-(input.count_velocity*input.count_velocity
 8007cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ce0:	edc7 7a01 	vstr	s15, [r7, #4]
			target->displacement += 1/2*INTERRUPT_TIME*input.acceleration*time_over;
 8007ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7f8 fc55 	bl	8000598 <__aeabi_f2d>
 8007cee:	4604      	mov	r4, r0
 8007cf0:	460d      	mov	r5, r1
 8007cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7f8 fc4f 	bl	8000598 <__aeabi_f2d>
 8007cfa:	f04f 0200 	mov.w	r2, #0
 8007cfe:	f04f 0300 	mov.w	r3, #0
 8007d02:	f7f8 fca1 	bl	8000648 <__aeabi_dmul>
 8007d06:	4602      	mov	r2, r0
 8007d08:	460b      	mov	r3, r1
 8007d0a:	4690      	mov	r8, r2
 8007d0c:	4699      	mov	r9, r3
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7f8 fc42 	bl	8000598 <__aeabi_f2d>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	4640      	mov	r0, r8
 8007d1a:	4649      	mov	r1, r9
 8007d1c:	f7f8 fc94 	bl	8000648 <__aeabi_dmul>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	4620      	mov	r0, r4
 8007d26:	4629      	mov	r1, r5
 8007d28:	f7f8 fad8 	bl	80002dc <__adddf3>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	f7f8 ff60 	bl	8000bf8 <__aeabi_d2f>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3c:	609a      	str	r2, [r3, #8]
			target->velocity += input.acceleration*(time_over);
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	ed93 7a00 	vldr	s14, [r3]
 8007d44:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8007d48:	edd7 7a01 	vldr	s15, [r7, #4]
 8007d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d56:	edc3 7a00 	vstr	s15, [r3]
			target->acceleration = input.acceleration;
 8007d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d5e:	605a      	str	r2, [r3, #4]
			g_acc_flag=3;
 8007d60:	4b22      	ldr	r3, [pc, #136]	; (8007dec <cal_table+0x698>)
 8007d62:	2203      	movs	r2, #3
 8007d64:	701a      	strb	r2, [r3, #0]
		break;
 8007d66:	e046      	b.n	8007df6 <cal_table+0x6a2>
	case 3:
		//減速(加速)
		if (target->velocity >= input.end_velocity){
 8007d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d6a:	ed93 7a00 	vldr	s14, [r3]
 8007d6e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8007d72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7a:	da00      	bge.n	8007d7e <cal_table+0x62a>
			target->velocity = input.end_velocity;
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007d7c:	e03b      	b.n	8007df6 <cal_table+0x6a2>
			target->velocity = input.end_velocity;
 8007d7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d82:	601a      	str	r2, [r3, #0]
			target->acceleration = 0;
 8007d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007d8c:	4b17      	ldr	r3, [pc, #92]	; (8007dec <cal_table+0x698>)
 8007d8e:	2204      	movs	r2, #4
 8007d90:	701a      	strb	r2, [r3, #0]
		break;
 8007d92:	e030      	b.n	8007df6 <cal_table+0x6a2>
	case 4:
		//終了(0でもいいかも)
		g_MotorEnd_flag=1;
 8007d94:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <cal_table+0x69c>)
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
		break;
 8007d9a:	e02c      	b.n	8007df6 <cal_table+0x6a2>
	case 5:
		//加速のみ
		if (target->displacement <= input.displacement){
 8007d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8007da6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dae:	d900      	bls.n	8007db2 <cal_table+0x65e>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007db0:	e021      	b.n	8007df6 <cal_table+0x6a2>
			target->acceleration = 0;
 8007db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db4:	f04f 0200 	mov.w	r2, #0
 8007db8:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007dba:	4b0c      	ldr	r3, [pc, #48]	; (8007dec <cal_table+0x698>)
 8007dbc:	2204      	movs	r2, #4
 8007dbe:	701a      	strb	r2, [r3, #0]
		break;
 8007dc0:	e019      	b.n	8007df6 <cal_table+0x6a2>
	case 6:
		//減速のみ
		if (target->displacement <= input.displacement){
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc4:	ed93 7a02 	vldr	s14, [r3, #8]
 8007dc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8007dcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dd4:	d900      	bls.n	8007dd8 <cal_table+0x684>
			target->acceleration = 0;
			g_acc_flag=4;
		}
		break;
 8007dd6:	e00e      	b.n	8007df6 <cal_table+0x6a2>
			target->acceleration = 0;
 8007dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	605a      	str	r2, [r3, #4]
			g_acc_flag=4;
 8007de0:	4b02      	ldr	r3, [pc, #8]	; (8007dec <cal_table+0x698>)
 8007de2:	2204      	movs	r2, #4
 8007de4:	701a      	strb	r2, [r3, #0]
		break;
 8007de6:	e006      	b.n	8007df6 <cal_table+0x6a2>
		break;
 8007de8:	bf00      	nop
 8007dea:	e004      	b.n	8007df6 <cal_table+0x6a2>
 8007dec:	200007e4 	.word	0x200007e4
 8007df0:	200007e5 	.word	0x200007e5
		break;
 8007df4:	bf00      	nop
	}

}

}
 8007df6:	bf00      	nop
 8007df8:	3708      	adds	r7, #8
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8007e00:	b004      	add	sp, #16
 8007e02:	4770      	bx	lr
 8007e04:	0000      	movs	r0, r0
	...

08007e08 <cal_mollifier_table>:





void cal_mollifier_table(MOLLIFIER input,TARGET *target){
 8007e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e0c:	b08c      	sub	sp, #48	; 0x30
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	eef0 6a40 	vmov.f32	s13, s0
 8007e14:	eeb0 7a60 	vmov.f32	s14, s1
 8007e18:	eef0 7a41 	vmov.f32	s15, s2
 8007e1c:	6138      	str	r0, [r7, #16]
 8007e1e:	edc7 6a05 	vstr	s13, [r7, #20]
 8007e22:	ed87 7a06 	vstr	s14, [r7, #24]
 8007e26:	edc7 7a07 	vstr	s15, [r7, #28]

float mollifier_T;
float old_velocity;
float time_delay=15;
 8007e2a:	4be7      	ldr	r3, [pc, #924]	; (80081c8 <cal_mollifier_table+0x3c0>)
 8007e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
float time_delay2=-15;
 8007e2e:	4be7      	ldr	r3, [pc, #924]	; (80081cc <cal_mollifier_table+0x3c4>)
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
	mollifier_timer+=INTERRUPT_TIME;
 8007e32:	4be7      	ldr	r3, [pc, #924]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7f8 fbae 	bl	8000598 <__aeabi_f2d>
 8007e3c:	a3da      	add	r3, pc, #872	; (adr r3, 80081a8 <cal_mollifier_table+0x3a0>)
 8007e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e42:	f7f8 fa4b 	bl	80002dc <__adddf3>
 8007e46:	4602      	mov	r2, r0
 8007e48:	460b      	mov	r3, r1
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	4619      	mov	r1, r3
 8007e4e:	f7f8 fed3 	bl	8000bf8 <__aeabi_d2f>
 8007e52:	4603      	mov	r3, r0
 8007e54:	4ade      	ldr	r2, [pc, #888]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007e56:	6013      	str	r3, [r2, #0]
		mollifier_T=2*fabs(input.displacement)/MOLLIFIER_INTEGRAL*exp(-1)/input.max_turning_velocity;
 8007e58:	edd7 7a05 	vldr	s15, [r7, #20]
 8007e5c:	eef0 7ae7 	vabs.f32	s15, s15
 8007e60:	ee17 0a90 	vmov	r0, s15
 8007e64:	f7f8 fb98 	bl	8000598 <__aeabi_f2d>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	f7f8 fa36 	bl	80002dc <__adddf3>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	4610      	mov	r0, r2
 8007e76:	4619      	mov	r1, r3
 8007e78:	a3cd      	add	r3, pc, #820	; (adr r3, 80081b0 <cal_mollifier_table+0x3a8>)
 8007e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e7e:	f7f8 fd0d 	bl	800089c <__aeabi_ddiv>
 8007e82:	4602      	mov	r2, r0
 8007e84:	460b      	mov	r3, r1
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	a3cb      	add	r3, pc, #812	; (adr r3, 80081b8 <cal_mollifier_table+0x3b0>)
 8007e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e90:	f7f8 fbda 	bl	8000648 <__aeabi_dmul>
 8007e94:	4602      	mov	r2, r0
 8007e96:	460b      	mov	r3, r1
 8007e98:	4614      	mov	r4, r2
 8007e9a:	461d      	mov	r5, r3
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7f8 fb7a 	bl	8000598 <__aeabi_f2d>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	4629      	mov	r1, r5
 8007eac:	f7f8 fcf6 	bl	800089c <__aeabi_ddiv>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	f7f8 fe9e 	bl	8000bf8 <__aeabi_d2f>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24
		if (mollifier_timer>-mollifier_T/2 && mollifier_timer<mollifier_T/2){
 8007ec0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007ec4:	eef1 7a67 	vneg.f32	s15, s15
 8007ec8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007ecc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007ed0:	4bbf      	ldr	r3, [pc, #764]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007ed2:	edd3 7a00 	vldr	s15, [r3]
 8007ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ede:	f140 8698 	bpl.w	8008c12 <cal_mollifier_table+0xe0a>
 8007ee2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007ee6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007eea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007eee:	4bb8      	ldr	r3, [pc, #736]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007ef0:	edd3 7a00 	vldr	s15, [r3]
 8007ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007efc:	f340 8689 	ble.w	8008c12 <cal_mollifier_table+0xe0a>
			old_velocity=target->velocity;
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	623b      	str	r3, [r7, #32]
			target->velocity = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-mollifier_timer*mollifier_timer));
 8007f06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007f0a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f12:	edd7 7a05 	vldr	s15, [r7, #20]
 8007f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f1a:	ee17 0a90 	vmov	r0, s15
 8007f1e:	f7f8 fb3b 	bl	8000598 <__aeabi_f2d>
 8007f22:	a3a3      	add	r3, pc, #652	; (adr r3, 80081b0 <cal_mollifier_table+0x3a8>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fcb8 	bl	800089c <__aeabi_ddiv>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	461d      	mov	r5, r3
 8007f34:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f38:	eeb1 7a67 	vneg.f32	s14, s15
 8007f3c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f44:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8007f48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007f4c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007f50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007f54:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 8007f58:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8007f5c:	4b9c      	ldr	r3, [pc, #624]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007f5e:	ed93 6a00 	vldr	s12, [r3]
 8007f62:	4b9b      	ldr	r3, [pc, #620]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007f64:	edd3 7a00 	vldr	s15, [r3]
 8007f68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007f6c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007f70:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007f74:	ee16 0a90 	vmov	r0, s13
 8007f78:	f7f8 fb0e 	bl	8000598 <__aeabi_f2d>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	460b      	mov	r3, r1
 8007f80:	ec43 2b10 	vmov	d0, r2, r3
 8007f84:	f00c fc88 	bl	8014898 <exp>
 8007f88:	ec53 2b10 	vmov	r2, r3, d0
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4629      	mov	r1, r5
 8007f90:	f7f8 fb5a 	bl	8000648 <__aeabi_dmul>
 8007f94:	4602      	mov	r2, r0
 8007f96:	460b      	mov	r3, r1
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	f7f8 fe2c 	bl	8000bf8 <__aeabi_d2f>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	601a      	str	r2, [r3, #0]
			//if(mollifier_timer<0){
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8007fa6:	4b8a      	ldr	r3, [pc, #552]	; (80081d0 <cal_mollifier_table+0x3c8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7f8 faf4 	bl	8000598 <__aeabi_f2d>
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	460d      	mov	r5, r1
 8007fb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8007fb8:	eef1 7a67 	vneg.f32	s15, s15
 8007fbc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8007fc0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007fc4:	ee16 0a90 	vmov	r0, s13
 8007fc8:	f7f8 fae6 	bl	8000598 <__aeabi_f2d>
 8007fcc:	a37c      	add	r3, pc, #496	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	f7f8 fc63 	bl	800089c <__aeabi_ddiv>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4690      	mov	r8, r2
 8007fdc:	4699      	mov	r9, r3
 8007fde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007fe0:	f7f8 fada 	bl	8000598 <__aeabi_f2d>
 8007fe4:	a370      	add	r3, pc, #448	; (adr r3, 80081a8 <cal_mollifier_table+0x3a0>)
 8007fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fea:	f7f8 fb2d 	bl	8000648 <__aeabi_dmul>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 f971 	bl	80002dc <__adddf3>
 8007ffa:	4602      	mov	r2, r0
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 fd93 	bl	8000b2c <__aeabi_dcmplt>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	f000 8163 	beq.w	80082d4 <cal_mollifier_table+0x4cc>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(-mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(-mollifier_T/2/1.316)*(-mollifier_T/2/1.316)));
 800800e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008012:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801a:	edd7 7a05 	vldr	s15, [r7, #20]
 800801e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008022:	ee17 0a90 	vmov	r0, s15
 8008026:	f7f8 fab7 	bl	8000598 <__aeabi_f2d>
 800802a:	a361      	add	r3, pc, #388	; (adr r3, 80081b0 <cal_mollifier_table+0x3a8>)
 800802c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008030:	f7f8 fc34 	bl	800089c <__aeabi_ddiv>
 8008034:	4602      	mov	r2, r0
 8008036:	460b      	mov	r3, r1
 8008038:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800803c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008040:	eeb1 7a67 	vneg.f32	s14, s15
 8008044:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800804c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008050:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008054:	ee16 0a90 	vmov	r0, s13
 8008058:	f7f8 fa9e 	bl	8000598 <__aeabi_f2d>
 800805c:	4604      	mov	r4, r0
 800805e:	460d      	mov	r5, r1
 8008060:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008064:	eef1 7a67 	vneg.f32	s15, s15
 8008068:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800806c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008070:	ee16 0a90 	vmov	r0, s13
 8008074:	f7f8 fa90 	bl	8000598 <__aeabi_f2d>
 8008078:	a351      	add	r3, pc, #324	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 800807a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807e:	f7f8 fc0d 	bl	800089c <__aeabi_ddiv>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4620      	mov	r0, r4
 8008088:	4629      	mov	r1, r5
 800808a:	f7f8 fadd 	bl	8000648 <__aeabi_dmul>
 800808e:	4602      	mov	r2, r0
 8008090:	460b      	mov	r3, r1
 8008092:	4690      	mov	r8, r2
 8008094:	4699      	mov	r9, r3
 8008096:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800809a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800809e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80080a2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080a6:	ee16 0a90 	vmov	r0, s13
 80080aa:	f7f8 fa75 	bl	8000598 <__aeabi_f2d>
 80080ae:	4604      	mov	r4, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80080b6:	eef1 7a67 	vneg.f32	s15, s15
 80080ba:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80080be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080c2:	ee16 0a90 	vmov	r0, s13
 80080c6:	f7f8 fa67 	bl	8000598 <__aeabi_f2d>
 80080ca:	a33d      	add	r3, pc, #244	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 80080cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d0:	f7f8 fbe4 	bl	800089c <__aeabi_ddiv>
 80080d4:	4602      	mov	r2, r0
 80080d6:	460b      	mov	r3, r1
 80080d8:	4692      	mov	sl, r2
 80080da:	469b      	mov	fp, r3
 80080dc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80080e0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80080e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80080e8:	ee16 0a90 	vmov	r0, s13
 80080ec:	f7f8 fa54 	bl	8000598 <__aeabi_f2d>
 80080f0:	a333      	add	r3, pc, #204	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 fbd1 	bl	800089c <__aeabi_ddiv>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4650      	mov	r0, sl
 8008100:	4659      	mov	r1, fp
 8008102:	f7f8 faa1 	bl	8000648 <__aeabi_dmul>
 8008106:	4602      	mov	r2, r0
 8008108:	460b      	mov	r3, r1
 800810a:	4620      	mov	r0, r4
 800810c:	4629      	mov	r1, r5
 800810e:	f7f8 f8e5 	bl	80002dc <__adddf3>
 8008112:	4602      	mov	r2, r0
 8008114:	460b      	mov	r3, r1
 8008116:	4640      	mov	r0, r8
 8008118:	4649      	mov	r1, r9
 800811a:	f7f8 fbbf 	bl	800089c <__aeabi_ddiv>
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4690      	mov	r8, r2
 8008124:	4699      	mov	r9, r3
 8008126:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800812a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800812e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008132:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008136:	ee16 0a90 	vmov	r0, s13
 800813a:	f7f8 fa2d 	bl	8000598 <__aeabi_f2d>
 800813e:	4604      	mov	r4, r0
 8008140:	460d      	mov	r5, r1
 8008142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008146:	eef1 7a67 	vneg.f32	s15, s15
 800814a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800814e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008152:	ee16 0a90 	vmov	r0, s13
 8008156:	f7f8 fa1f 	bl	8000598 <__aeabi_f2d>
 800815a:	a319      	add	r3, pc, #100	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 800815c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008160:	f7f8 fb9c 	bl	800089c <__aeabi_ddiv>
 8008164:	4602      	mov	r2, r0
 8008166:	460b      	mov	r3, r1
 8008168:	4692      	mov	sl, r2
 800816a:	469b      	mov	fp, r3
 800816c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008170:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008174:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008178:	ee16 0a90 	vmov	r0, s13
 800817c:	f7f8 fa0c 	bl	8000598 <__aeabi_f2d>
 8008180:	a30f      	add	r3, pc, #60	; (adr r3, 80081c0 <cal_mollifier_table+0x3b8>)
 8008182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008186:	f7f8 fb89 	bl	800089c <__aeabi_ddiv>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4650      	mov	r0, sl
 8008190:	4659      	mov	r1, fp
 8008192:	f7f8 fa59 	bl	8000648 <__aeabi_dmul>
 8008196:	4602      	mov	r2, r0
 8008198:	460b      	mov	r3, r1
 800819a:	4620      	mov	r0, r4
 800819c:	4629      	mov	r1, r5
 800819e:	f7f8 f89d 	bl	80002dc <__adddf3>
 80081a2:	4602      	mov	r2, r0
 80081a4:	e016      	b.n	80081d4 <cal_mollifier_table+0x3cc>
 80081a6:	bf00      	nop
 80081a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80081ac:	3f50624d 	.word	0x3f50624d
 80081b0:	f9db22d1 	.word	0xf9db22d1
 80081b4:	3fdc6a7e 	.word	0x3fdc6a7e
 80081b8:	362cef38 	.word	0x362cef38
 80081bc:	3fd78b56 	.word	0x3fd78b56
 80081c0:	04189375 	.word	0x04189375
 80081c4:	3ff50e56 	.word	0x3ff50e56
 80081c8:	41700000 	.word	0x41700000
 80081cc:	c1700000 	.word	0xc1700000
 80081d0:	200007e0 	.word	0x200007e0
 80081d4:	460b      	mov	r3, r1
 80081d6:	4640      	mov	r0, r8
 80081d8:	4649      	mov	r1, r9
 80081da:	f7f8 fb5f 	bl	800089c <__aeabi_ddiv>
 80081de:	4602      	mov	r2, r0
 80081e0:	460b      	mov	r3, r1
 80081e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081e6:	f7f8 fa2f 	bl	8000648 <__aeabi_dmul>
 80081ea:	4602      	mov	r2, r0
 80081ec:	460b      	mov	r3, r1
 80081ee:	4692      	mov	sl, r2
 80081f0:	469b      	mov	fp, r3
 80081f2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80081f6:	eeb1 7a67 	vneg.f32	s14, s15
 80081fa:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80081fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008202:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008206:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800820a:	ee16 0a90 	vmov	r0, s13
 800820e:	f7f8 f9c3 	bl	8000598 <__aeabi_f2d>
 8008212:	4604      	mov	r4, r0
 8008214:	460d      	mov	r5, r1
 8008216:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800821a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800821e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008222:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008226:	ee16 0a90 	vmov	r0, s13
 800822a:	f7f8 f9b5 	bl	8000598 <__aeabi_f2d>
 800822e:	4680      	mov	r8, r0
 8008230:	4689      	mov	r9, r1
 8008232:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008236:	eef1 7a67 	vneg.f32	s15, s15
 800823a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800823e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008242:	ee16 0a90 	vmov	r0, s13
 8008246:	f7f8 f9a7 	bl	8000598 <__aeabi_f2d>
 800824a:	a3e1      	add	r3, pc, #900	; (adr r3, 80085d0 <cal_mollifier_table+0x7c8>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 fb24 	bl	800089c <__aeabi_ddiv>
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800825c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008260:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008264:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008268:	ee16 0a90 	vmov	r0, s13
 800826c:	f7f8 f994 	bl	8000598 <__aeabi_f2d>
 8008270:	a3d7      	add	r3, pc, #860	; (adr r3, 80085d0 <cal_mollifier_table+0x7c8>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	f7f8 fb11 	bl	800089c <__aeabi_ddiv>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008282:	f7f8 f9e1 	bl	8000648 <__aeabi_dmul>
 8008286:	4602      	mov	r2, r0
 8008288:	460b      	mov	r3, r1
 800828a:	4640      	mov	r0, r8
 800828c:	4649      	mov	r1, r9
 800828e:	f7f8 f825 	bl	80002dc <__adddf3>
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	4620      	mov	r0, r4
 8008298:	4629      	mov	r1, r5
 800829a:	f7f8 faff 	bl	800089c <__aeabi_ddiv>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	ec43 2b17 	vmov	d7, r2, r3
 80082a6:	eeb0 0a47 	vmov.f32	s0, s14
 80082aa:	eef0 0a67 	vmov.f32	s1, s15
 80082ae:	f00c faf3 	bl	8014898 <exp>
 80082b2:	ec53 2b10 	vmov	r2, r3, d0
 80082b6:	4650      	mov	r0, sl
 80082b8:	4659      	mov	r1, fp
 80082ba:	f7f8 f9c5 	bl	8000648 <__aeabi_dmul>
 80082be:	4602      	mov	r2, r0
 80082c0:	460b      	mov	r3, r1
 80082c2:	4610      	mov	r0, r2
 80082c4:	4619      	mov	r1, r3
 80082c6:	f7f8 fc97 	bl	8000bf8 <__aeabi_d2f>
 80082ca:	4602      	mov	r2, r0
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80082d0:	f000 bcb4 	b.w	8008c3c <cal_mollifier_table+0xe34>
			}else if(mollifier_timer<0){
 80082d4:	4bc0      	ldr	r3, [pc, #768]	; (80085d8 <cal_mollifier_table+0x7d0>)
 80082d6:	edd3 7a00 	vldr	s15, [r3]
 80082da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80082de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082e2:	f140 817b 	bpl.w	80085dc <cal_mollifier_table+0x7d4>
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 80082e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80082ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80082ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80082f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082fa:	ee17 0a90 	vmov	r0, s15
 80082fe:	f7f8 f94b 	bl	8000598 <__aeabi_f2d>
 8008302:	a3af      	add	r3, pc, #700	; (adr r3, 80085c0 <cal_mollifier_table+0x7b8>)
 8008304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008308:	f7f8 fac8 	bl	800089c <__aeabi_ddiv>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008314:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008318:	eeb1 7a67 	vneg.f32	s14, s15
 800831c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008324:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008328:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800832c:	ee16 0a90 	vmov	r0, s13
 8008330:	f7f8 f932 	bl	8000598 <__aeabi_f2d>
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	4ba7      	ldr	r3, [pc, #668]	; (80085d8 <cal_mollifier_table+0x7d0>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4618      	mov	r0, r3
 800833e:	f7f8 f92b 	bl	8000598 <__aeabi_f2d>
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008348:	f7f8 f926 	bl	8000598 <__aeabi_f2d>
 800834c:	a39e      	add	r3, pc, #632	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f8 f979 	bl	8000648 <__aeabi_dmul>
 8008356:	4602      	mov	r2, r0
 8008358:	460b      	mov	r3, r1
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f7 ffbb 	bl	80002d8 <__aeabi_dsub>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4620      	mov	r0, r4
 8008368:	4629      	mov	r1, r5
 800836a:	f7f8 f96d 	bl	8000648 <__aeabi_dmul>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	e9c7 2300 	strd	r2, r3, [r7]
 8008376:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800837a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800837e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008382:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008386:	ee16 0a90 	vmov	r0, s13
 800838a:	f7f8 f905 	bl	8000598 <__aeabi_f2d>
 800838e:	4680      	mov	r8, r0
 8008390:	4689      	mov	r9, r1
 8008392:	4b91      	ldr	r3, [pc, #580]	; (80085d8 <cal_mollifier_table+0x7d0>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4618      	mov	r0, r3
 8008398:	f7f8 f8fe 	bl	8000598 <__aeabi_f2d>
 800839c:	4604      	mov	r4, r0
 800839e:	460d      	mov	r5, r1
 80083a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083a2:	f7f8 f8f9 	bl	8000598 <__aeabi_f2d>
 80083a6:	a388      	add	r3, pc, #544	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 80083a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ac:	f7f8 f94c 	bl	8000648 <__aeabi_dmul>
 80083b0:	4602      	mov	r2, r0
 80083b2:	460b      	mov	r3, r1
 80083b4:	4620      	mov	r0, r4
 80083b6:	4629      	mov	r1, r5
 80083b8:	f7f7 ff8e 	bl	80002d8 <__aeabi_dsub>
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	4692      	mov	sl, r2
 80083c2:	469b      	mov	fp, r3
 80083c4:	4b84      	ldr	r3, [pc, #528]	; (80085d8 <cal_mollifier_table+0x7d0>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4618      	mov	r0, r3
 80083ca:	f7f8 f8e5 	bl	8000598 <__aeabi_f2d>
 80083ce:	4604      	mov	r4, r0
 80083d0:	460d      	mov	r5, r1
 80083d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80083d4:	f7f8 f8e0 	bl	8000598 <__aeabi_f2d>
 80083d8:	a37b      	add	r3, pc, #492	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f8 f933 	bl	8000648 <__aeabi_dmul>
 80083e2:	4602      	mov	r2, r0
 80083e4:	460b      	mov	r3, r1
 80083e6:	4620      	mov	r0, r4
 80083e8:	4629      	mov	r1, r5
 80083ea:	f7f7 ff75 	bl	80002d8 <__aeabi_dsub>
 80083ee:	4602      	mov	r2, r0
 80083f0:	460b      	mov	r3, r1
 80083f2:	4650      	mov	r0, sl
 80083f4:	4659      	mov	r1, fp
 80083f6:	f7f8 f927 	bl	8000648 <__aeabi_dmul>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4640      	mov	r0, r8
 8008400:	4649      	mov	r1, r9
 8008402:	f7f7 ff69 	bl	80002d8 <__aeabi_dsub>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800840e:	f7f8 fa45 	bl	800089c <__aeabi_ddiv>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e9c7 2300 	strd	r2, r3, [r7]
 800841a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800841e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008422:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008426:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800842a:	ee16 0a90 	vmov	r0, s13
 800842e:	f7f8 f8b3 	bl	8000598 <__aeabi_f2d>
 8008432:	4680      	mov	r8, r0
 8008434:	4689      	mov	r9, r1
 8008436:	4b68      	ldr	r3, [pc, #416]	; (80085d8 <cal_mollifier_table+0x7d0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4618      	mov	r0, r3
 800843c:	f7f8 f8ac 	bl	8000598 <__aeabi_f2d>
 8008440:	4604      	mov	r4, r0
 8008442:	460d      	mov	r5, r1
 8008444:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008446:	f7f8 f8a7 	bl	8000598 <__aeabi_f2d>
 800844a:	a35f      	add	r3, pc, #380	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 800844c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008450:	f7f8 f8fa 	bl	8000648 <__aeabi_dmul>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4620      	mov	r0, r4
 800845a:	4629      	mov	r1, r5
 800845c:	f7f7 ff3c 	bl	80002d8 <__aeabi_dsub>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	4692      	mov	sl, r2
 8008466:	469b      	mov	fp, r3
 8008468:	4b5b      	ldr	r3, [pc, #364]	; (80085d8 <cal_mollifier_table+0x7d0>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4618      	mov	r0, r3
 800846e:	f7f8 f893 	bl	8000598 <__aeabi_f2d>
 8008472:	4604      	mov	r4, r0
 8008474:	460d      	mov	r5, r1
 8008476:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008478:	f7f8 f88e 	bl	8000598 <__aeabi_f2d>
 800847c:	a352      	add	r3, pc, #328	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 800847e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008482:	f7f8 f8e1 	bl	8000648 <__aeabi_dmul>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4620      	mov	r0, r4
 800848c:	4629      	mov	r1, r5
 800848e:	f7f7 ff23 	bl	80002d8 <__aeabi_dsub>
 8008492:	4602      	mov	r2, r0
 8008494:	460b      	mov	r3, r1
 8008496:	4650      	mov	r0, sl
 8008498:	4659      	mov	r1, fp
 800849a:	f7f8 f8d5 	bl	8000648 <__aeabi_dmul>
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	4640      	mov	r0, r8
 80084a4:	4649      	mov	r1, r9
 80084a6:	f7f7 ff17 	bl	80002d8 <__aeabi_dsub>
 80084aa:	4602      	mov	r2, r0
 80084ac:	460b      	mov	r3, r1
 80084ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80084b2:	f7f8 f9f3 	bl	800089c <__aeabi_ddiv>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80084be:	f7f8 f8c3 	bl	8000648 <__aeabi_dmul>
 80084c2:	4602      	mov	r2, r0
 80084c4:	460b      	mov	r3, r1
 80084c6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80084ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084ce:	eeb1 7a67 	vneg.f32	s14, s15
 80084d2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80084de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084e2:	ee16 0a90 	vmov	r0, s13
 80084e6:	f7f8 f857 	bl	8000598 <__aeabi_f2d>
 80084ea:	4680      	mov	r8, r0
 80084ec:	4689      	mov	r9, r1
 80084ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80084f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80084f6:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80084fa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084fe:	ee16 0a90 	vmov	r0, s13
 8008502:	f7f8 f849 	bl	8000598 <__aeabi_f2d>
 8008506:	4682      	mov	sl, r0
 8008508:	468b      	mov	fp, r1
 800850a:	4b33      	ldr	r3, [pc, #204]	; (80085d8 <cal_mollifier_table+0x7d0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4618      	mov	r0, r3
 8008510:	f7f8 f842 	bl	8000598 <__aeabi_f2d>
 8008514:	4604      	mov	r4, r0
 8008516:	460d      	mov	r5, r1
 8008518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800851a:	f7f8 f83d 	bl	8000598 <__aeabi_f2d>
 800851e:	a32a      	add	r3, pc, #168	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f8 f890 	bl	8000648 <__aeabi_dmul>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4620      	mov	r0, r4
 800852e:	4629      	mov	r1, r5
 8008530:	f7f7 fed2 	bl	80002d8 <__aeabi_dsub>
 8008534:	4602      	mov	r2, r0
 8008536:	460b      	mov	r3, r1
 8008538:	e9c7 2300 	strd	r2, r3, [r7]
 800853c:	4b26      	ldr	r3, [pc, #152]	; (80085d8 <cal_mollifier_table+0x7d0>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4618      	mov	r0, r3
 8008542:	f7f8 f829 	bl	8000598 <__aeabi_f2d>
 8008546:	4604      	mov	r4, r0
 8008548:	460d      	mov	r5, r1
 800854a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800854c:	f7f8 f824 	bl	8000598 <__aeabi_f2d>
 8008550:	a31d      	add	r3, pc, #116	; (adr r3, 80085c8 <cal_mollifier_table+0x7c0>)
 8008552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008556:	f7f8 f877 	bl	8000648 <__aeabi_dmul>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4620      	mov	r0, r4
 8008560:	4629      	mov	r1, r5
 8008562:	f7f7 feb9 	bl	80002d8 <__aeabi_dsub>
 8008566:	4602      	mov	r2, r0
 8008568:	460b      	mov	r3, r1
 800856a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800856e:	f7f8 f86b 	bl	8000648 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4650      	mov	r0, sl
 8008578:	4659      	mov	r1, fp
 800857a:	f7f7 fead 	bl	80002d8 <__aeabi_dsub>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4640      	mov	r0, r8
 8008584:	4649      	mov	r1, r9
 8008586:	f7f8 f989 	bl	800089c <__aeabi_ddiv>
 800858a:	4602      	mov	r2, r0
 800858c:	460b      	mov	r3, r1
 800858e:	ec43 2b17 	vmov	d7, r2, r3
 8008592:	eeb0 0a47 	vmov.f32	s0, s14
 8008596:	eef0 0a67 	vmov.f32	s1, s15
 800859a:	f00c f97d 	bl	8014898 <exp>
 800859e:	ec53 2b10 	vmov	r2, r3, d0
 80085a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085a6:	f7f8 f84f 	bl	8000648 <__aeabi_dmul>
 80085aa:	4602      	mov	r2, r0
 80085ac:	460b      	mov	r3, r1
 80085ae:	4610      	mov	r0, r2
 80085b0:	4619      	mov	r1, r3
 80085b2:	f7f8 fb21 	bl	8000bf8 <__aeabi_d2f>
 80085b6:	4602      	mov	r2, r0
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 80085bc:	e33e      	b.n	8008c3c <cal_mollifier_table+0xe34>
 80085be:	bf00      	nop
 80085c0:	f9db22d1 	.word	0xf9db22d1
 80085c4:	3fdc6a7e 	.word	0x3fdc6a7e
 80085c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80085cc:	3f50624d 	.word	0x3f50624d
 80085d0:	04189375 	.word	0x04189375
 80085d4:	3ff50e56 	.word	0x3ff50e56
 80085d8:	200007e0 	.word	0x200007e0
			}else if(mollifier_timer<mollifier_T/2/1.316+time_delay2*INTERRUPT_TIME){
 80085dc:	4bd4      	ldr	r3, [pc, #848]	; (8008930 <cal_mollifier_table+0xb28>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7f7 ffd9 	bl	8000598 <__aeabi_f2d>
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80085ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80085f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80085f6:	ee16 0a90 	vmov	r0, s13
 80085fa:	f7f7 ffcd 	bl	8000598 <__aeabi_f2d>
 80085fe:	a3c6      	add	r3, pc, #792	; (adr r3, 8008918 <cal_mollifier_table+0xb10>)
 8008600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008604:	f7f8 f94a 	bl	800089c <__aeabi_ddiv>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4690      	mov	r8, r2
 800860e:	4699      	mov	r9, r3
 8008610:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008612:	f7f7 ffc1 	bl	8000598 <__aeabi_f2d>
 8008616:	a3c2      	add	r3, pc, #776	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 8008618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861c:	f7f8 f814 	bl	8000648 <__aeabi_dmul>
 8008620:	4602      	mov	r2, r0
 8008622:	460b      	mov	r3, r1
 8008624:	4640      	mov	r0, r8
 8008626:	4649      	mov	r1, r9
 8008628:	f7f7 fe58 	bl	80002dc <__adddf3>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	f7f8 fa7a 	bl	8000b2c <__aeabi_dcmplt>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 817a 	beq.w	8008934 <cal_mollifier_table+0xb2c>
				//target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay2)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay2)*(mollifier_timer-INTERRUPT_TIME*time_delay2)));
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 8008640:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008644:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008648:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800864c:	edd7 7a05 	vldr	s15, [r7, #20]
 8008650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008654:	ee17 0a90 	vmov	r0, s15
 8008658:	f7f7 ff9e 	bl	8000598 <__aeabi_f2d>
 800865c:	a3b2      	add	r3, pc, #712	; (adr r3, 8008928 <cal_mollifier_table+0xb20>)
 800865e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008662:	f7f8 f91b 	bl	800089c <__aeabi_ddiv>
 8008666:	4602      	mov	r2, r0
 8008668:	460b      	mov	r3, r1
 800866a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800866e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008672:	eeb1 7a67 	vneg.f32	s14, s15
 8008676:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800867a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800867e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008682:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008686:	ee16 0a90 	vmov	r0, s13
 800868a:	f7f7 ff85 	bl	8000598 <__aeabi_f2d>
 800868e:	4604      	mov	r4, r0
 8008690:	460d      	mov	r5, r1
 8008692:	4ba7      	ldr	r3, [pc, #668]	; (8008930 <cal_mollifier_table+0xb28>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f7 ff7e 	bl	8000598 <__aeabi_f2d>
 800869c:	4680      	mov	r8, r0
 800869e:	4689      	mov	r9, r1
 80086a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086a2:	f7f7 ff79 	bl	8000598 <__aeabi_f2d>
 80086a6:	a39e      	add	r3, pc, #632	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f7 ffcc 	bl	8000648 <__aeabi_dmul>
 80086b0:	4602      	mov	r2, r0
 80086b2:	460b      	mov	r3, r1
 80086b4:	4640      	mov	r0, r8
 80086b6:	4649      	mov	r1, r9
 80086b8:	f7f7 fe0e 	bl	80002d8 <__aeabi_dsub>
 80086bc:	4602      	mov	r2, r0
 80086be:	460b      	mov	r3, r1
 80086c0:	4620      	mov	r0, r4
 80086c2:	4629      	mov	r1, r5
 80086c4:	f7f7 ffc0 	bl	8000648 <__aeabi_dmul>
 80086c8:	4602      	mov	r2, r0
 80086ca:	460b      	mov	r3, r1
 80086cc:	e9c7 2300 	strd	r2, r3, [r7]
 80086d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80086d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80086d8:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80086dc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80086e0:	ee16 0a90 	vmov	r0, s13
 80086e4:	f7f7 ff58 	bl	8000598 <__aeabi_f2d>
 80086e8:	4680      	mov	r8, r0
 80086ea:	4689      	mov	r9, r1
 80086ec:	4b90      	ldr	r3, [pc, #576]	; (8008930 <cal_mollifier_table+0xb28>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7f7 ff51 	bl	8000598 <__aeabi_f2d>
 80086f6:	4604      	mov	r4, r0
 80086f8:	460d      	mov	r5, r1
 80086fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80086fc:	f7f7 ff4c 	bl	8000598 <__aeabi_f2d>
 8008700:	a387      	add	r3, pc, #540	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	f7f7 ff9f 	bl	8000648 <__aeabi_dmul>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 fde1 	bl	80002d8 <__aeabi_dsub>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4692      	mov	sl, r2
 800871c:	469b      	mov	fp, r3
 800871e:	4b84      	ldr	r3, [pc, #528]	; (8008930 <cal_mollifier_table+0xb28>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4618      	mov	r0, r3
 8008724:	f7f7 ff38 	bl	8000598 <__aeabi_f2d>
 8008728:	4604      	mov	r4, r0
 800872a:	460d      	mov	r5, r1
 800872c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800872e:	f7f7 ff33 	bl	8000598 <__aeabi_f2d>
 8008732:	a37b      	add	r3, pc, #492	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	f7f7 ff86 	bl	8000648 <__aeabi_dmul>
 800873c:	4602      	mov	r2, r0
 800873e:	460b      	mov	r3, r1
 8008740:	4620      	mov	r0, r4
 8008742:	4629      	mov	r1, r5
 8008744:	f7f7 fdc8 	bl	80002d8 <__aeabi_dsub>
 8008748:	4602      	mov	r2, r0
 800874a:	460b      	mov	r3, r1
 800874c:	4650      	mov	r0, sl
 800874e:	4659      	mov	r1, fp
 8008750:	f7f7 ff7a 	bl	8000648 <__aeabi_dmul>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	4640      	mov	r0, r8
 800875a:	4649      	mov	r1, r9
 800875c:	f7f7 fdbc 	bl	80002d8 <__aeabi_dsub>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008768:	f7f8 f898 	bl	800089c <__aeabi_ddiv>
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	e9c7 2300 	strd	r2, r3, [r7]
 8008774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008778:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800877c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008780:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008784:	ee16 0a90 	vmov	r0, s13
 8008788:	f7f7 ff06 	bl	8000598 <__aeabi_f2d>
 800878c:	4680      	mov	r8, r0
 800878e:	4689      	mov	r9, r1
 8008790:	4b67      	ldr	r3, [pc, #412]	; (8008930 <cal_mollifier_table+0xb28>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4618      	mov	r0, r3
 8008796:	f7f7 feff 	bl	8000598 <__aeabi_f2d>
 800879a:	4604      	mov	r4, r0
 800879c:	460d      	mov	r5, r1
 800879e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087a0:	f7f7 fefa 	bl	8000598 <__aeabi_f2d>
 80087a4:	a35e      	add	r3, pc, #376	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 80087a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087aa:	f7f7 ff4d 	bl	8000648 <__aeabi_dmul>
 80087ae:	4602      	mov	r2, r0
 80087b0:	460b      	mov	r3, r1
 80087b2:	4620      	mov	r0, r4
 80087b4:	4629      	mov	r1, r5
 80087b6:	f7f7 fd8f 	bl	80002d8 <__aeabi_dsub>
 80087ba:	4602      	mov	r2, r0
 80087bc:	460b      	mov	r3, r1
 80087be:	4692      	mov	sl, r2
 80087c0:	469b      	mov	fp, r3
 80087c2:	4b5b      	ldr	r3, [pc, #364]	; (8008930 <cal_mollifier_table+0xb28>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f7 fee6 	bl	8000598 <__aeabi_f2d>
 80087cc:	4604      	mov	r4, r0
 80087ce:	460d      	mov	r5, r1
 80087d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80087d2:	f7f7 fee1 	bl	8000598 <__aeabi_f2d>
 80087d6:	a352      	add	r3, pc, #328	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 80087d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087dc:	f7f7 ff34 	bl	8000648 <__aeabi_dmul>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	4620      	mov	r0, r4
 80087e6:	4629      	mov	r1, r5
 80087e8:	f7f7 fd76 	bl	80002d8 <__aeabi_dsub>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	4650      	mov	r0, sl
 80087f2:	4659      	mov	r1, fp
 80087f4:	f7f7 ff28 	bl	8000648 <__aeabi_dmul>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4640      	mov	r0, r8
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fd6a 	bl	80002d8 <__aeabi_dsub>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	e9d7 0100 	ldrd	r0, r1, [r7]
 800880c:	f7f8 f846 	bl	800089c <__aeabi_ddiv>
 8008810:	4602      	mov	r2, r0
 8008812:	460b      	mov	r3, r1
 8008814:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008818:	f7f7 ff16 	bl	8000648 <__aeabi_dmul>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008824:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008828:	eeb1 7a67 	vneg.f32	s14, s15
 800882c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008834:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008838:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800883c:	ee16 0a90 	vmov	r0, s13
 8008840:	f7f7 feaa 	bl	8000598 <__aeabi_f2d>
 8008844:	4680      	mov	r8, r0
 8008846:	4689      	mov	r9, r1
 8008848:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800884c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008850:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008854:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008858:	ee16 0a90 	vmov	r0, s13
 800885c:	f7f7 fe9c 	bl	8000598 <__aeabi_f2d>
 8008860:	4682      	mov	sl, r0
 8008862:	468b      	mov	fp, r1
 8008864:	4b32      	ldr	r3, [pc, #200]	; (8008930 <cal_mollifier_table+0xb28>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4618      	mov	r0, r3
 800886a:	f7f7 fe95 	bl	8000598 <__aeabi_f2d>
 800886e:	4604      	mov	r4, r0
 8008870:	460d      	mov	r5, r1
 8008872:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008874:	f7f7 fe90 	bl	8000598 <__aeabi_f2d>
 8008878:	a329      	add	r3, pc, #164	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 800887a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887e:	f7f7 fee3 	bl	8000648 <__aeabi_dmul>
 8008882:	4602      	mov	r2, r0
 8008884:	460b      	mov	r3, r1
 8008886:	4620      	mov	r0, r4
 8008888:	4629      	mov	r1, r5
 800888a:	f7f7 fd25 	bl	80002d8 <__aeabi_dsub>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	e9c7 2300 	strd	r2, r3, [r7]
 8008896:	4b26      	ldr	r3, [pc, #152]	; (8008930 <cal_mollifier_table+0xb28>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4618      	mov	r0, r3
 800889c:	f7f7 fe7c 	bl	8000598 <__aeabi_f2d>
 80088a0:	4604      	mov	r4, r0
 80088a2:	460d      	mov	r5, r1
 80088a4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80088a6:	f7f7 fe77 	bl	8000598 <__aeabi_f2d>
 80088aa:	a31d      	add	r3, pc, #116	; (adr r3, 8008920 <cal_mollifier_table+0xb18>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 feca 	bl	8000648 <__aeabi_dmul>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	4620      	mov	r0, r4
 80088ba:	4629      	mov	r1, r5
 80088bc:	f7f7 fd0c 	bl	80002d8 <__aeabi_dsub>
 80088c0:	4602      	mov	r2, r0
 80088c2:	460b      	mov	r3, r1
 80088c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80088c8:	f7f7 febe 	bl	8000648 <__aeabi_dmul>
 80088cc:	4602      	mov	r2, r0
 80088ce:	460b      	mov	r3, r1
 80088d0:	4650      	mov	r0, sl
 80088d2:	4659      	mov	r1, fp
 80088d4:	f7f7 fd00 	bl	80002d8 <__aeabi_dsub>
 80088d8:	4602      	mov	r2, r0
 80088da:	460b      	mov	r3, r1
 80088dc:	4640      	mov	r0, r8
 80088de:	4649      	mov	r1, r9
 80088e0:	f7f7 ffdc 	bl	800089c <__aeabi_ddiv>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	ec43 2b17 	vmov	d7, r2, r3
 80088ec:	eeb0 0a47 	vmov.f32	s0, s14
 80088f0:	eef0 0a67 	vmov.f32	s1, s15
 80088f4:	f00b ffd0 	bl	8014898 <exp>
 80088f8:	ec53 2b10 	vmov	r2, r3, d0
 80088fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008900:	f7f7 fea2 	bl	8000648 <__aeabi_dmul>
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	f7f8 f974 	bl	8000bf8 <__aeabi_d2f>
 8008910:	4602      	mov	r2, r0
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008916:	e191      	b.n	8008c3c <cal_mollifier_table+0xe34>
 8008918:	04189375 	.word	0x04189375
 800891c:	3ff50e56 	.word	0x3ff50e56
 8008920:	d2f1a9fc 	.word	0xd2f1a9fc
 8008924:	3f50624d 	.word	0x3f50624d
 8008928:	f9db22d1 	.word	0xf9db22d1
 800892c:	3fdc6a7e 	.word	0x3fdc6a7e
 8008930:	200007e0 	.word	0x200007e0
			}else{
				time_delay=0;
 8008934:	f04f 0300 	mov.w	r3, #0
 8008938:	62fb      	str	r3, [r7, #44]	; 0x2c
				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_timer-INTERRUPT_TIME*time_delay)/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay))/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_timer-INTERRUPT_TIME*time_delay)*(mollifier_timer-INTERRUPT_TIME*time_delay)));
 800893a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800893e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008946:	edd7 7a05 	vldr	s15, [r7, #20]
 800894a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800894e:	ee17 0a90 	vmov	r0, s15
 8008952:	f7f7 fe21 	bl	8000598 <__aeabi_f2d>
 8008956:	a3c0      	add	r3, pc, #768	; (adr r3, 8008c58 <cal_mollifier_table+0xe50>)
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	f7f7 ff9e 	bl	800089c <__aeabi_ddiv>
 8008960:	4602      	mov	r2, r0
 8008962:	460b      	mov	r3, r1
 8008964:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008968:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800896c:	eeb1 7a67 	vneg.f32	s14, s15
 8008970:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008978:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800897c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008980:	ee16 0a90 	vmov	r0, s13
 8008984:	f7f7 fe08 	bl	8000598 <__aeabi_f2d>
 8008988:	4604      	mov	r4, r0
 800898a:	460d      	mov	r5, r1
 800898c:	4bb0      	ldr	r3, [pc, #704]	; (8008c50 <cal_mollifier_table+0xe48>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4618      	mov	r0, r3
 8008992:	f7f7 fe01 	bl	8000598 <__aeabi_f2d>
 8008996:	4680      	mov	r8, r0
 8008998:	4689      	mov	r9, r1
 800899a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800899c:	f7f7 fdfc 	bl	8000598 <__aeabi_f2d>
 80089a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 80089a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a6:	f7f7 fe4f 	bl	8000648 <__aeabi_dmul>
 80089aa:	4602      	mov	r2, r0
 80089ac:	460b      	mov	r3, r1
 80089ae:	4640      	mov	r0, r8
 80089b0:	4649      	mov	r1, r9
 80089b2:	f7f7 fc91 	bl	80002d8 <__aeabi_dsub>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4620      	mov	r0, r4
 80089bc:	4629      	mov	r1, r5
 80089be:	f7f7 fe43 	bl	8000648 <__aeabi_dmul>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9c7 2300 	strd	r2, r3, [r7]
 80089ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80089ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80089d2:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80089d6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80089da:	ee16 0a90 	vmov	r0, s13
 80089de:	f7f7 fddb 	bl	8000598 <__aeabi_f2d>
 80089e2:	4680      	mov	r8, r0
 80089e4:	4689      	mov	r9, r1
 80089e6:	4b9a      	ldr	r3, [pc, #616]	; (8008c50 <cal_mollifier_table+0xe48>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4618      	mov	r0, r3
 80089ec:	f7f7 fdd4 	bl	8000598 <__aeabi_f2d>
 80089f0:	4604      	mov	r4, r0
 80089f2:	460d      	mov	r5, r1
 80089f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089f6:	f7f7 fdcf 	bl	8000598 <__aeabi_f2d>
 80089fa:	a393      	add	r3, pc, #588	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	f7f7 fe22 	bl	8000648 <__aeabi_dmul>
 8008a04:	4602      	mov	r2, r0
 8008a06:	460b      	mov	r3, r1
 8008a08:	4620      	mov	r0, r4
 8008a0a:	4629      	mov	r1, r5
 8008a0c:	f7f7 fc64 	bl	80002d8 <__aeabi_dsub>
 8008a10:	4602      	mov	r2, r0
 8008a12:	460b      	mov	r3, r1
 8008a14:	4692      	mov	sl, r2
 8008a16:	469b      	mov	fp, r3
 8008a18:	4b8d      	ldr	r3, [pc, #564]	; (8008c50 <cal_mollifier_table+0xe48>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	f7f7 fdbb 	bl	8000598 <__aeabi_f2d>
 8008a22:	4604      	mov	r4, r0
 8008a24:	460d      	mov	r5, r1
 8008a26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a28:	f7f7 fdb6 	bl	8000598 <__aeabi_f2d>
 8008a2c:	a386      	add	r3, pc, #536	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	f7f7 fe09 	bl	8000648 <__aeabi_dmul>
 8008a36:	4602      	mov	r2, r0
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4620      	mov	r0, r4
 8008a3c:	4629      	mov	r1, r5
 8008a3e:	f7f7 fc4b 	bl	80002d8 <__aeabi_dsub>
 8008a42:	4602      	mov	r2, r0
 8008a44:	460b      	mov	r3, r1
 8008a46:	4650      	mov	r0, sl
 8008a48:	4659      	mov	r1, fp
 8008a4a:	f7f7 fdfd 	bl	8000648 <__aeabi_dmul>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	4640      	mov	r0, r8
 8008a54:	4649      	mov	r1, r9
 8008a56:	f7f7 fc3f 	bl	80002d8 <__aeabi_dsub>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a62:	f7f7 ff1b 	bl	800089c <__aeabi_ddiv>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9c7 2300 	strd	r2, r3, [r7]
 8008a6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008a72:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008a76:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008a7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008a7e:	ee16 0a90 	vmov	r0, s13
 8008a82:	f7f7 fd89 	bl	8000598 <__aeabi_f2d>
 8008a86:	4680      	mov	r8, r0
 8008a88:	4689      	mov	r9, r1
 8008a8a:	4b71      	ldr	r3, [pc, #452]	; (8008c50 <cal_mollifier_table+0xe48>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7f7 fd82 	bl	8000598 <__aeabi_f2d>
 8008a94:	4604      	mov	r4, r0
 8008a96:	460d      	mov	r5, r1
 8008a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008a9a:	f7f7 fd7d 	bl	8000598 <__aeabi_f2d>
 8008a9e:	a36a      	add	r3, pc, #424	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 8008aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa4:	f7f7 fdd0 	bl	8000648 <__aeabi_dmul>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	460b      	mov	r3, r1
 8008aac:	4620      	mov	r0, r4
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f7 fc12 	bl	80002d8 <__aeabi_dsub>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	4692      	mov	sl, r2
 8008aba:	469b      	mov	fp, r3
 8008abc:	4b64      	ldr	r3, [pc, #400]	; (8008c50 <cal_mollifier_table+0xe48>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f7f7 fd69 	bl	8000598 <__aeabi_f2d>
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	460d      	mov	r5, r1
 8008aca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008acc:	f7f7 fd64 	bl	8000598 <__aeabi_f2d>
 8008ad0:	a35d      	add	r3, pc, #372	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fdb7 	bl	8000648 <__aeabi_dmul>
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	4620      	mov	r0, r4
 8008ae0:	4629      	mov	r1, r5
 8008ae2:	f7f7 fbf9 	bl	80002d8 <__aeabi_dsub>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	460b      	mov	r3, r1
 8008aea:	4650      	mov	r0, sl
 8008aec:	4659      	mov	r1, fp
 8008aee:	f7f7 fdab 	bl	8000648 <__aeabi_dmul>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4640      	mov	r0, r8
 8008af8:	4649      	mov	r1, r9
 8008afa:	f7f7 fbed 	bl	80002d8 <__aeabi_dsub>
 8008afe:	4602      	mov	r2, r0
 8008b00:	460b      	mov	r3, r1
 8008b02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b06:	f7f7 fec9 	bl	800089c <__aeabi_ddiv>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008b12:	f7f7 fd99 	bl	8000648 <__aeabi_dmul>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8008b1e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b22:	eeb1 7a67 	vneg.f32	s14, s15
 8008b26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b2e:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008b32:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b36:	ee16 0a90 	vmov	r0, s13
 8008b3a:	f7f7 fd2d 	bl	8000598 <__aeabi_f2d>
 8008b3e:	4680      	mov	r8, r0
 8008b40:	4689      	mov	r9, r1
 8008b42:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8008b46:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008b4a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8008b4e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8008b52:	ee16 0a90 	vmov	r0, s13
 8008b56:	f7f7 fd1f 	bl	8000598 <__aeabi_f2d>
 8008b5a:	4682      	mov	sl, r0
 8008b5c:	468b      	mov	fp, r1
 8008b5e:	4b3c      	ldr	r3, [pc, #240]	; (8008c50 <cal_mollifier_table+0xe48>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fd18 	bl	8000598 <__aeabi_f2d>
 8008b68:	4604      	mov	r4, r0
 8008b6a:	460d      	mov	r5, r1
 8008b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008b6e:	f7f7 fd13 	bl	8000598 <__aeabi_f2d>
 8008b72:	a335      	add	r3, pc, #212	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 8008b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b78:	f7f7 fd66 	bl	8000648 <__aeabi_dmul>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	4620      	mov	r0, r4
 8008b82:	4629      	mov	r1, r5
 8008b84:	f7f7 fba8 	bl	80002d8 <__aeabi_dsub>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	e9c7 2300 	strd	r2, r3, [r7]
 8008b90:	4b2f      	ldr	r3, [pc, #188]	; (8008c50 <cal_mollifier_table+0xe48>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f7f7 fcff 	bl	8000598 <__aeabi_f2d>
 8008b9a:	4604      	mov	r4, r0
 8008b9c:	460d      	mov	r5, r1
 8008b9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008ba0:	f7f7 fcfa 	bl	8000598 <__aeabi_f2d>
 8008ba4:	a328      	add	r3, pc, #160	; (adr r3, 8008c48 <cal_mollifier_table+0xe40>)
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f7f7 fd4d 	bl	8000648 <__aeabi_dmul>
 8008bae:	4602      	mov	r2, r0
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f7 fb8f 	bl	80002d8 <__aeabi_dsub>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008bc2:	f7f7 fd41 	bl	8000648 <__aeabi_dmul>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4650      	mov	r0, sl
 8008bcc:	4659      	mov	r1, fp
 8008bce:	f7f7 fb83 	bl	80002d8 <__aeabi_dsub>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 fe5f 	bl	800089c <__aeabi_ddiv>
 8008bde:	4602      	mov	r2, r0
 8008be0:	460b      	mov	r3, r1
 8008be2:	ec43 2b17 	vmov	d7, r2, r3
 8008be6:	eeb0 0a47 	vmov.f32	s0, s14
 8008bea:	eef0 0a67 	vmov.f32	s1, s15
 8008bee:	f00b fe53 	bl	8014898 <exp>
 8008bf2:	ec53 2b10 	vmov	r2, r3, d0
 8008bf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008bfa:	f7f7 fd25 	bl	8000648 <__aeabi_dmul>
 8008bfe:	4602      	mov	r2, r0
 8008c00:	460b      	mov	r3, r1
 8008c02:	4610      	mov	r0, r2
 8008c04:	4619      	mov	r1, r3
 8008c06:	f7f7 fff7 	bl	8000bf8 <__aeabi_d2f>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	605a      	str	r2, [r3, #4]
			if(mollifier_timer<-mollifier_T/2/1.316+time_delay*INTERRUPT_TIME){
 8008c10:	e014      	b.n	8008c3c <cal_mollifier_table+0xe34>
//				target->acceleration = (2/mollifier_T)*input.displacement/MOLLIFIER_INTEGRAL*(-mollifier_T*mollifier_T/2*(mollifier_T/2/1.316)/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316))/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)))*exp(-mollifier_T*mollifier_T/4/(mollifier_T*mollifier_T/4-(mollifier_T/2/1.316)*(mollifier_T/2/1.316)));;
				//target->acceleration = 0;
			}
		}else{
			old_velocity=target->velocity;
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	623b      	str	r3, [r7, #32]
			target->velocity=0;
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	f04f 0200 	mov.w	r2, #0
 8008c1e:	601a      	str	r2, [r3, #0]
			target->acceleration = target->velocity-old_velocity;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	ed93 7a00 	vldr	s14, [r3]
 8008c26:	edd7 7a08 	vldr	s15, [r7, #32]
 8008c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	edc3 7a01 	vstr	s15, [r3, #4]
			g_acc_flag=4;
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <cal_mollifier_table+0xe4c>)
 8008c36:	2204      	movs	r2, #4
 8008c38:	701a      	strb	r2, [r3, #0]
		}

}
 8008c3a:	bf00      	nop
 8008c3c:	bf00      	nop
 8008c3e:	3730      	adds	r7, #48	; 0x30
 8008c40:	46bd      	mov	sp, r7
 8008c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c46:	bf00      	nop
 8008c48:	d2f1a9fc 	.word	0xd2f1a9fc
 8008c4c:	3f50624d 	.word	0x3f50624d
 8008c50:	200007e0 	.word	0x200007e0
 8008c54:	200007e4 	.word	0x200007e4
 8008c58:	f9db22d1 	.word	0xf9db22d1
 8008c5c:	3fdc6a7e 	.word	0x3fdc6a7e

08008c60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008c66:	4b16      	ldr	r3, [pc, #88]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	4a15      	ldr	r2, [pc, #84]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c6c:	f043 0304 	orr.w	r3, r3, #4
 8008c70:	6493      	str	r3, [r2, #72]	; 0x48
 8008c72:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c76:	f003 0304 	and.w	r3, r3, #4
 8008c7a:	607b      	str	r3, [r7, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008c7e:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c82:	4a0f      	ldr	r2, [pc, #60]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6493      	str	r3, [r2, #72]	; 0x48
 8008c8a:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <MX_DMA_Init+0x60>)
 8008c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	603b      	str	r3, [r7, #0]
 8008c94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8008c96:	2200      	movs	r2, #0
 8008c98:	2100      	movs	r1, #0
 8008c9a:	200b      	movs	r0, #11
 8008c9c:	f004 fad1 	bl	800d242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8008ca0:	200b      	movs	r0, #11
 8008ca2:	f004 fae8 	bl	800d276 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	2100      	movs	r1, #0
 8008caa:	205e      	movs	r0, #94	; 0x5e
 8008cac:	f004 fac9 	bl	800d242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8008cb0:	205e      	movs	r0, #94	; 0x5e
 8008cb2:	f004 fae0 	bl	800d276 <HAL_NVIC_EnableIRQ>

}
 8008cb6:	bf00      	nop
 8008cb8:	3708      	adds	r7, #8
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000

08008cc4 <init_FailSafe>:
float encoder_PID_error_highspeed;
float gyro_PID_error_highspeed;
float gyro_x_error_highspeed;
int error_time_count;

void init_FailSafe(void){
 8008cc4:	b480      	push	{r7}
 8008cc6:	af00      	add	r7, sp, #0
	error_mode=0;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <init_FailSafe+0x4c>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	701a      	strb	r2, [r3, #0]
	no_safty=0;
 8008cce:	4b11      	ldr	r3, [pc, #68]	; (8008d14 <init_FailSafe+0x50>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
	highspeed_mode = 0;
 8008cd4:	4b10      	ldr	r3, [pc, #64]	; (8008d18 <init_FailSafe+0x54>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	701a      	strb	r2, [r3, #0]
	error_time_count=0;
 8008cda:	4b10      	ldr	r3, [pc, #64]	; (8008d1c <init_FailSafe+0x58>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
	encoder_PID_error=1200;
 8008ce0:	4b0f      	ldr	r3, [pc, #60]	; (8008d20 <init_FailSafe+0x5c>)
 8008ce2:	4a10      	ldr	r2, [pc, #64]	; (8008d24 <init_FailSafe+0x60>)
 8008ce4:	601a      	str	r2, [r3, #0]
	gyro_PID_error=1200;
 8008ce6:	4b10      	ldr	r3, [pc, #64]	; (8008d28 <init_FailSafe+0x64>)
 8008ce8:	4a0e      	ldr	r2, [pc, #56]	; (8008d24 <init_FailSafe+0x60>)
 8008cea:	601a      	str	r2, [r3, #0]
	gyro_x_error=1200;
 8008cec:	4b0f      	ldr	r3, [pc, #60]	; (8008d2c <init_FailSafe+0x68>)
 8008cee:	4a0d      	ldr	r2, [pc, #52]	; (8008d24 <init_FailSafe+0x60>)
 8008cf0:	601a      	str	r2, [r3, #0]

	encoder_PID_error_highspeed=2000;//3000
 8008cf2:	4b0f      	ldr	r3, [pc, #60]	; (8008d30 <init_FailSafe+0x6c>)
 8008cf4:	4a0f      	ldr	r2, [pc, #60]	; (8008d34 <init_FailSafe+0x70>)
 8008cf6:	601a      	str	r2, [r3, #0]
	gyro_PID_error_highspeed=2000;
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	; (8008d38 <init_FailSafe+0x74>)
 8008cfa:	4a0e      	ldr	r2, [pc, #56]	; (8008d34 <init_FailSafe+0x70>)
 8008cfc:	601a      	str	r2, [r3, #0]
	gyro_x_error_highspeed=1500;
 8008cfe:	4b0f      	ldr	r3, [pc, #60]	; (8008d3c <init_FailSafe+0x78>)
 8008d00:	4a0f      	ldr	r2, [pc, #60]	; (8008d40 <init_FailSafe+0x7c>)
 8008d02:	601a      	str	r2, [r3, #0]
}
 8008d04:	bf00      	nop
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr
 8008d0e:	bf00      	nop
 8008d10:	200007e7 	.word	0x200007e7
 8008d14:	200007e6 	.word	0x200007e6
 8008d18:	200007e8 	.word	0x200007e8
 8008d1c:	20000804 	.word	0x20000804
 8008d20:	200007ec 	.word	0x200007ec
 8008d24:	44960000 	.word	0x44960000
 8008d28:	200007f0 	.word	0x200007f0
 8008d2c:	200007f4 	.word	0x200007f4
 8008d30:	200007f8 	.word	0x200007f8
 8008d34:	44fa0000 	.word	0x44fa0000
 8008d38:	200007fc 	.word	0x200007fc
 8008d3c:	20000800 	.word	0x20000800
 8008d40:	44bb8000 	.word	0x44bb8000

08008d44 <interrupt_FailSafe>:


void interrupt_FailSafe(void){
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b084      	sub	sp, #16
 8008d48:	af00      	add	r7, sp, #0
	float encoder_PID_error_in;
	float gyro_PID_error_in;
	float gyro_x_error_in;

	if (highspeed_mode == 0) {
 8008d4a:	4b6e      	ldr	r3, [pc, #440]	; (8008f04 <interrupt_FailSafe+0x1c0>)
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d109      	bne.n	8008d66 <interrupt_FailSafe+0x22>
		encoder_PID_error_in=encoder_PID_error;
 8008d52:	4b6d      	ldr	r3, [pc, #436]	; (8008f08 <interrupt_FailSafe+0x1c4>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error;
 8008d58:	4b6c      	ldr	r3, [pc, #432]	; (8008f0c <interrupt_FailSafe+0x1c8>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error;
 8008d5e:	4b6c      	ldr	r3, [pc, #432]	; (8008f10 <interrupt_FailSafe+0x1cc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	607b      	str	r3, [r7, #4]
 8008d64:	e008      	b.n	8008d78 <interrupt_FailSafe+0x34>
	}else{
		encoder_PID_error_in=encoder_PID_error_highspeed;
 8008d66:	4b6b      	ldr	r3, [pc, #428]	; (8008f14 <interrupt_FailSafe+0x1d0>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
		gyro_PID_error_in=gyro_PID_error_highspeed;
 8008d6c:	4b6a      	ldr	r3, [pc, #424]	; (8008f18 <interrupt_FailSafe+0x1d4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	60bb      	str	r3, [r7, #8]
		gyro_x_error_in=gyro_x_error_highspeed;
 8008d72:	4b6a      	ldr	r3, [pc, #424]	; (8008f1c <interrupt_FailSafe+0x1d8>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	607b      	str	r3, [r7, #4]
	}

	if (modeacc != 0 && modeacc != 3){
 8008d78:	4b69      	ldr	r3, [pc, #420]	; (8008f20 <interrupt_FailSafe+0x1dc>)
 8008d7a:	781b      	ldrb	r3, [r3, #0]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d062      	beq.n	8008e46 <interrupt_FailSafe+0x102>
 8008d80:	4b67      	ldr	r3, [pc, #412]	; (8008f20 <interrupt_FailSafe+0x1dc>)
 8008d82:	781b      	ldrb	r3, [r3, #0]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d05e      	beq.n	8008e46 <interrupt_FailSafe+0x102>
		if (no_safty == 0 && error_mode == 0) {
 8008d88:	4b66      	ldr	r3, [pc, #408]	; (8008f24 <interrupt_FailSafe+0x1e0>)
 8008d8a:	781b      	ldrb	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d15a      	bne.n	8008e46 <interrupt_FailSafe+0x102>
 8008d90:	4b65      	ldr	r3, [pc, #404]	; (8008f28 <interrupt_FailSafe+0x1e4>)
 8008d92:	781b      	ldrb	r3, [r3, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d156      	bne.n	8008e46 <interrupt_FailSafe+0x102>
			//ジャイロの誤差が一定以上
					if (fabs(turning.velocity - angle_speed) >= gyro_PID_error_in ) {
 8008d98:	4b64      	ldr	r3, [pc, #400]	; (8008f2c <interrupt_FailSafe+0x1e8>)
 8008d9a:	ed93 7a00 	vldr	s14, [r3]
 8008d9e:	4b64      	ldr	r3, [pc, #400]	; (8008f30 <interrupt_FailSafe+0x1ec>)
 8008da0:	edd3 7a00 	vldr	s15, [r3]
 8008da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008da8:	eef0 7ae7 	vabs.f32	s15, s15
 8008dac:	ed97 7a02 	vldr	s14, [r7, #8]
 8008db0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008db8:	d809      	bhi.n	8008dce <interrupt_FailSafe+0x8a>
						//(gyro.omega_x >= 320 && gyro.omega_y >= 320) ||
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8008dba:	f7fe f8a1 	bl	8006f00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(1);
 8008dbe:	2001      	movs	r0, #1
 8008dc0:	f7fd fcae 	bl	8006720 <pl_yellow_LED_count>
						error_mode = 1;
 8008dc4:	4b58      	ldr	r3, [pc, #352]	; (8008f28 <interrupt_FailSafe+0x1e4>)
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8008dca:	f7fb fe4b 	bl	8004a64 <clear_Ierror>
					}
					if (angle_speedx_set >= gyro_x_error_in) {
 8008dce:	4b59      	ldr	r3, [pc, #356]	; (8008f34 <interrupt_FailSafe+0x1f0>)
 8008dd0:	edd3 7a00 	vldr	s15, [r3]
 8008dd4:	ed97 7a01 	vldr	s14, [r7, #4]
 8008dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008de0:	d809      	bhi.n	8008df6 <interrupt_FailSafe+0xb2>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8008de2:	f7fe f88d 	bl	8006f00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(2);
 8008de6:	2002      	movs	r0, #2
 8008de8:	f7fd fc9a 	bl	8006720 <pl_yellow_LED_count>
						error_mode = 1;
 8008dec:	4b4e      	ldr	r3, [pc, #312]	; (8008f28 <interrupt_FailSafe+0x1e4>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8008df2:	f7fb fe37 	bl	8004a64 <clear_Ierror>
					}
					if(fabs(straight.velocity - (fusion_speedR+fusion_speedL)/2) >= encoder_PID_error_in && modeacc==1){
 8008df6:	4b50      	ldr	r3, [pc, #320]	; (8008f38 <interrupt_FailSafe+0x1f4>)
 8008df8:	ed93 7a00 	vldr	s14, [r3]
 8008dfc:	4b4f      	ldr	r3, [pc, #316]	; (8008f3c <interrupt_FailSafe+0x1f8>)
 8008dfe:	edd3 6a00 	vldr	s13, [r3]
 8008e02:	4b4f      	ldr	r3, [pc, #316]	; (8008f40 <interrupt_FailSafe+0x1fc>)
 8008e04:	edd3 7a00 	vldr	s15, [r3]
 8008e08:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008e0c:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8008e10:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8008e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008e18:	eef0 7ae7 	vabs.f32	s15, s15
 8008e1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8008e20:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e28:	d80d      	bhi.n	8008e46 <interrupt_FailSafe+0x102>
 8008e2a:	4b3d      	ldr	r3, [pc, #244]	; (8008f20 <interrupt_FailSafe+0x1dc>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d109      	bne.n	8008e46 <interrupt_FailSafe+0x102>
						//pl_DriveMotor_stop();
						pl_FunMotor_stop();
 8008e32:	f7fe f865 	bl	8006f00 <pl_FunMotor_stop>
						//pl_DriveMotor_standby(OFF);
						pl_yellow_LED_count(4);
 8008e36:	2004      	movs	r0, #4
 8008e38:	f7fd fc72 	bl	8006720 <pl_yellow_LED_count>
						error_mode = 1;
 8008e3c:	4b3a      	ldr	r3, [pc, #232]	; (8008f28 <interrupt_FailSafe+0x1e4>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	701a      	strb	r2, [r3, #0]
						clear_Ierror();
 8008e42:	f7fb fe0f 	bl	8004a64 <clear_Ierror>

				}

	}

	if(error_mode==1){
 8008e46:	4b38      	ldr	r3, [pc, #224]	; (8008f28 <interrupt_FailSafe+0x1e4>)
 8008e48:	781b      	ldrb	r3, [r3, #0]
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d153      	bne.n	8008ef6 <interrupt_FailSafe+0x1b2>
		record_mode=0;
 8008e4e:	4b3d      	ldr	r3, [pc, #244]	; (8008f44 <interrupt_FailSafe+0x200>)
 8008e50:	2200      	movs	r2, #0
 8008e52:	701a      	strb	r2, [r3, #0]
		error_time_count++;
 8008e54:	4b3c      	ldr	r3, [pc, #240]	; (8008f48 <interrupt_FailSafe+0x204>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	4a3b      	ldr	r2, [pc, #236]	; (8008f48 <interrupt_FailSafe+0x204>)
 8008e5c:	6013      	str	r3, [r2, #0]
		if(error_time_count<=1000){
 8008e5e:	4b3a      	ldr	r3, [pc, #232]	; (8008f48 <interrupt_FailSafe+0x204>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e66:	dc05      	bgt.n	8008e74 <interrupt_FailSafe+0x130>
			init_WallControl();
 8008e68:	f7fb ff28 	bl	8004cbc <init_WallControl>
			modeacc=100;//エラー用
 8008e6c:	4b2c      	ldr	r3, [pc, #176]	; (8008f20 <interrupt_FailSafe+0x1dc>)
 8008e6e:	2264      	movs	r2, #100	; 0x64
 8008e70:	701a      	strb	r2, [r3, #0]
 8008e72:	e009      	b.n	8008e88 <interrupt_FailSafe+0x144>
			//pl_R_DriveMotor_mode(MOTOR_BREAK);
			//pl_L_DriveMotor_mode(MOTOR_BREAK);
		}else{
			pl_DriveMotor_standby(OFF);
 8008e74:	2000      	movs	r0, #0
 8008e76:	f7fd ffaf 	bl	8006dd8 <pl_DriveMotor_standby>
			pl_DriveMotor_stop();
 8008e7a:	f7fe f813 	bl	8006ea4 <pl_DriveMotor_stop>
			pl_FunMotor_stop();
 8008e7e:	f7fe f83f 	bl	8006f00 <pl_FunMotor_stop>
			modeacc=0;
 8008e82:	4b27      	ldr	r3, [pc, #156]	; (8008f20 <interrupt_FailSafe+0x1dc>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	701a      	strb	r2, [r3, #0]
		}
					NoWallCountL90 = 4294967295;
 8008e88:	4b30      	ldr	r3, [pc, #192]	; (8008f4c <interrupt_FailSafe+0x208>)
 8008e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e8e:	601a      	str	r2, [r3, #0]
					NoWallCountR90 = 4294967295;
 8008e90:	4b2f      	ldr	r3, [pc, #188]	; (8008f50 <interrupt_FailSafe+0x20c>)
 8008e92:	f04f 32ff 	mov.w	r2, #4294967295
 8008e96:	601a      	str	r2, [r3, #0]
					NoWallCountL45 = 4294967295;
 8008e98:	4b2e      	ldr	r3, [pc, #184]	; (8008f54 <interrupt_FailSafe+0x210>)
 8008e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8008e9e:	601a      	str	r2, [r3, #0]
					NoWallCountR45 = 4294967295;
 8008ea0:	4b2d      	ldr	r3, [pc, #180]	; (8008f58 <interrupt_FailSafe+0x214>)
 8008ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea6:	601a      	str	r2, [r3, #0]
					NoWallCountL45slant = 4294967295;
 8008ea8:	4b2c      	ldr	r3, [pc, #176]	; (8008f5c <interrupt_FailSafe+0x218>)
 8008eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8008eae:	601a      	str	r2, [r3, #0]
					NoWallCountR45slant = 4294967295;
 8008eb0:	4b2b      	ldr	r3, [pc, #172]	; (8008f60 <interrupt_FailSafe+0x21c>)
 8008eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008eb6:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL90 = 100;
 8008eb8:	4b2a      	ldr	r3, [pc, #168]	; (8008f64 <interrupt_FailSafe+0x220>)
 8008eba:	4a2b      	ldr	r2, [pc, #172]	; (8008f68 <interrupt_FailSafe+0x224>)
 8008ebc:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR90 = 100;
 8008ebe:	4b2b      	ldr	r3, [pc, #172]	; (8008f6c <interrupt_FailSafe+0x228>)
 8008ec0:	4a29      	ldr	r2, [pc, #164]	; (8008f68 <interrupt_FailSafe+0x224>)
 8008ec2:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45 = 40;
 8008ec4:	4b2a      	ldr	r3, [pc, #168]	; (8008f70 <interrupt_FailSafe+0x22c>)
 8008ec6:	4a2b      	ldr	r2, [pc, #172]	; (8008f74 <interrupt_FailSafe+0x230>)
 8008ec8:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45 = 40;
 8008eca:	4b2b      	ldr	r3, [pc, #172]	; (8008f78 <interrupt_FailSafe+0x234>)
 8008ecc:	4a29      	ldr	r2, [pc, #164]	; (8008f74 <interrupt_FailSafe+0x230>)
 8008ece:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant = 70;
 8008ed0:	4b2a      	ldr	r3, [pc, #168]	; (8008f7c <interrupt_FailSafe+0x238>)
 8008ed2:	4a2b      	ldr	r2, [pc, #172]	; (8008f80 <interrupt_FailSafe+0x23c>)
 8008ed4:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant = 70;
 8008ed6:	4b2b      	ldr	r3, [pc, #172]	; (8008f84 <interrupt_FailSafe+0x240>)
 8008ed8:	4a29      	ldr	r2, [pc, #164]	; (8008f80 <interrupt_FailSafe+0x23c>)
 8008eda:	601a      	str	r2, [r3, #0]
					NoWallDisplacementL45slant2 = 70;
 8008edc:	4b2a      	ldr	r3, [pc, #168]	; (8008f88 <interrupt_FailSafe+0x244>)
 8008ede:	4a28      	ldr	r2, [pc, #160]	; (8008f80 <interrupt_FailSafe+0x23c>)
 8008ee0:	601a      	str	r2, [r3, #0]
					NoWallDisplacementR45slant2 = 70;
 8008ee2:	4b2a      	ldr	r3, [pc, #168]	; (8008f8c <interrupt_FailSafe+0x248>)
 8008ee4:	4a26      	ldr	r2, [pc, #152]	; (8008f80 <interrupt_FailSafe+0x23c>)
 8008ee6:	601a      	str	r2, [r3, #0]
					g_acc_flag=4;
 8008ee8:	4b29      	ldr	r3, [pc, #164]	; (8008f90 <interrupt_FailSafe+0x24c>)
 8008eea:	2204      	movs	r2, #4
 8008eec:	701a      	strb	r2, [r3, #0]
					g_wallCut_mode = 0;
 8008eee:	4b29      	ldr	r3, [pc, #164]	; (8008f94 <interrupt_FailSafe+0x250>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	701a      	strb	r2, [r3, #0]
	}else{
		error_time_count=0;
	}


}
 8008ef4:	e002      	b.n	8008efc <interrupt_FailSafe+0x1b8>
		error_time_count=0;
 8008ef6:	4b14      	ldr	r3, [pc, #80]	; (8008f48 <interrupt_FailSafe+0x204>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	601a      	str	r2, [r3, #0]
}
 8008efc:	bf00      	nop
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200007e8 	.word	0x200007e8
 8008f08:	200007ec 	.word	0x200007ec
 8008f0c:	200007f0 	.word	0x200007f0
 8008f10:	200007f4 	.word	0x200007f4
 8008f14:	200007f8 	.word	0x200007f8
 8008f18:	200007fc 	.word	0x200007fc
 8008f1c:	20000800 	.word	0x20000800
 8008f20:	20000508 	.word	0x20000508
 8008f24:	200007e6 	.word	0x200007e6
 8008f28:	200007e7 	.word	0x200007e7
 8008f2c:	200004c4 	.word	0x200004c4
 8008f30:	20000248 	.word	0x20000248
 8008f34:	20000254 	.word	0x20000254
 8008f38:	200004b8 	.word	0x200004b8
 8008f3c:	2000023c 	.word	0x2000023c
 8008f40:	20000238 	.word	0x20000238
 8008f44:	2000c388 	.word	0x2000c388
 8008f48:	20000804 	.word	0x20000804
 8008f4c:	20000598 	.word	0x20000598
 8008f50:	20000594 	.word	0x20000594
 8008f54:	200005a0 	.word	0x200005a0
 8008f58:	2000059c 	.word	0x2000059c
 8008f5c:	200005a8 	.word	0x200005a8
 8008f60:	200005a4 	.word	0x200005a4
 8008f64:	200005b0 	.word	0x200005b0
 8008f68:	42c80000 	.word	0x42c80000
 8008f6c:	200005ac 	.word	0x200005ac
 8008f70:	200005b8 	.word	0x200005b8
 8008f74:	42200000 	.word	0x42200000
 8008f78:	200005b4 	.word	0x200005b4
 8008f7c:	200005c0 	.word	0x200005c0
 8008f80:	428c0000 	.word	0x428c0000
 8008f84:	200005bc 	.word	0x200005bc
 8008f88:	200005c8 	.word	0x200005c8
 8008f8c:	200005c4 	.word	0x200005c4
 8008f90:	200007e4 	.word	0x200007e4
 8008f94:	20000572 	.word	0x20000572

08008f98 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b08a      	sub	sp, #40	; 0x28
 8008f9c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f9e:	f107 0314 	add.w	r3, r7, #20
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	605a      	str	r2, [r3, #4]
 8008fa8:	609a      	str	r2, [r3, #8]
 8008faa:	60da      	str	r2, [r3, #12]
 8008fac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008fae:	4b3a      	ldr	r3, [pc, #232]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fb2:	4a39      	ldr	r2, [pc, #228]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fb4:	f043 0304 	orr.w	r3, r3, #4
 8008fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fba:	4b37      	ldr	r3, [pc, #220]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008fc6:	4b34      	ldr	r3, [pc, #208]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fca:	4a33      	ldr	r2, [pc, #204]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fcc:	f043 0320 	orr.w	r3, r3, #32
 8008fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fd2:	4b31      	ldr	r3, [pc, #196]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fd6:	f003 0320 	and.w	r3, r3, #32
 8008fda:	60fb      	str	r3, [r7, #12]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fe2:	4a2d      	ldr	r2, [pc, #180]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fe4:	f043 0301 	orr.w	r3, r3, #1
 8008fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008fea:	4b2b      	ldr	r3, [pc, #172]	; (8009098 <MX_GPIO_Init+0x100>)
 8008fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	60bb      	str	r3, [r7, #8]
 8008ff4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ff6:	4b28      	ldr	r3, [pc, #160]	; (8009098 <MX_GPIO_Init+0x100>)
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffa:	4a27      	ldr	r2, [pc, #156]	; (8009098 <MX_GPIO_Init+0x100>)
 8008ffc:	f043 0302 	orr.w	r3, r3, #2
 8009000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009002:	4b25      	ldr	r3, [pc, #148]	; (8009098 <MX_GPIO_Init+0x100>)
 8009004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009006:	f003 0302 	and.w	r3, r3, #2
 800900a:	607b      	str	r3, [r7, #4]
 800900c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 800900e:	2200      	movs	r2, #0
 8009010:	f24e 0150 	movw	r1, #57424	; 0xe050
 8009014:	4821      	ldr	r0, [pc, #132]	; (800909c <MX_GPIO_Init+0x104>)
 8009016:	f004 fd97 	bl	800db48 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin, GPIO_PIN_RESET);
 800901a:	2200      	movs	r2, #0
 800901c:	f648 1110 	movw	r1, #35088	; 0x8910
 8009020:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009024:	f004 fd90 	bl	800db48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009028:	2200      	movs	r2, #0
 800902a:	f64e 4196 	movw	r1, #60566	; 0xec96
 800902e:	481c      	ldr	r0, [pc, #112]	; (80090a0 <MX_GPIO_Init+0x108>)
 8009030:	f004 fd8a 	bl	800db48 <HAL_GPIO_WritePin>
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = MOTOR_L_CWCCW_Pin|BLUE_R_LED_Pin|SENSOR_LED3_Pin|GYRO_CS_Pin
 8009034:	f24e 0350 	movw	r3, #57424	; 0xe050
 8009038:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800903a:	2301      	movs	r3, #1
 800903c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009042:	2300      	movs	r3, #0
 8009044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009046:	f107 0314 	add.w	r3, r7, #20
 800904a:	4619      	mov	r1, r3
 800904c:	4813      	ldr	r0, [pc, #76]	; (800909c <MX_GPIO_Init+0x104>)
 800904e:	f004 fbf9 	bl	800d844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENSOR_LED2_Pin|LED2_Pin|LED1_Pin|ENCODER_L_CS_Pin;
 8009052:	f648 1310 	movw	r3, #35088	; 0x8910
 8009056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009058:	2301      	movs	r3, #1
 800905a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800905c:	2300      	movs	r3, #0
 800905e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009060:	2300      	movs	r3, #0
 8009062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009064:	f107 0314 	add.w	r3, r7, #20
 8009068:	4619      	mov	r1, r3
 800906a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800906e:	f004 fbe9 	bl	800d844 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENSOR_LED1_Pin|BLUE_L_LED_Pin|LED8_Pin|LED7_Pin
 8009072:	f64e 4396 	movw	r3, #60566	; 0xec96
 8009076:	617b      	str	r3, [r7, #20]
                          |LED6_Pin|LED5_Pin|LED4_Pin|ENCODER_R_CS_Pin
                          |MOTOR_R_CWCCW_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009078:	2301      	movs	r3, #1
 800907a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800907c:	2300      	movs	r3, #0
 800907e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009080:	2300      	movs	r3, #0
 8009082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009084:	f107 0314 	add.w	r3, r7, #20
 8009088:	4619      	mov	r1, r3
 800908a:	4805      	ldr	r0, [pc, #20]	; (80090a0 <MX_GPIO_Init+0x108>)
 800908c:	f004 fbda 	bl	800d844 <HAL_GPIO_Init>

}
 8009090:	bf00      	nop
 8009092:	3728      	adds	r7, #40	; 0x28
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	40021000 	.word	0x40021000
 800909c:	48000800 	.word	0x48000800
 80090a0:	48000400 	.word	0x48000400

080090a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80090a4:	b590      	push	{r4, r7, lr}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80090aa:	f001 fd88 	bl	800abbe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80090ae:	f000 f8a7 	bl	8009200 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  MX_DMA_Init();
 80090b2:	f7ff fdd5 	bl	8008c60 <MX_DMA_Init>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80090b6:	f7ff ff6f 	bl	8008f98 <MX_GPIO_Init>
  MX_ADC1_Init();
 80090ba:	f7fe f9cf 	bl	800745c <MX_ADC1_Init>
  MX_SPI1_Init();
 80090be:	f001 f829 	bl	800a114 <MX_SPI1_Init>
  MX_TIM6_Init();
 80090c2:	f001 fa99 	bl	800a5f8 <MX_TIM6_Init>
  MX_TIM8_Init();
 80090c6:	f001 facd 	bl	800a664 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80090ca:	f001 fcab 	bl	800aa24 <MX_USART1_UART_Init>
  MX_DMA_Init();
 80090ce:	f7ff fdc7 	bl	8008c60 <MX_DMA_Init>
  MX_SPI3_Init();
 80090d2:	f001 f85d 	bl	800a190 <MX_SPI3_Init>
  MX_TIM16_Init();
 80090d6:	f001 fb65 	bl	800a7a4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  pl_timer_init();
 80090da:	f7fe f8fd 	bl	80072d8 <pl_timer_init>
  pl_gyro_init();
 80090de:	f7fd fd77 	bl	8006bd0 <pl_gyro_init>
  pl_sensor_init();
 80090e2:	f7fd ff3d 	bl	8006f60 <pl_sensor_init>
  reset_distance();
 80090e6:	f7f7 ff59 	bl	8000f9c <reset_distance>
  reset_gyro();
 80090ea:	f7f8 fb89 	bl	8001800 <reset_gyro>
  reset_speed();
 80090ee:	f7f7 ff93 	bl	8001018 <reset_speed>
  record_reset();
 80090f2:	f000 fe47 	bl	8009d84 <record_reset>
  pl_motor_init();
 80090f6:	f7fd fe49 	bl	8006d8c <pl_motor_init>
  PID_Init();
 80090fa:	f7fb fc77 	bl	80049ec <PID_Init>
  init_WallControl();
 80090fe:	f7fb fddd 	bl	8004cbc <init_WallControl>
  Control_mode_Init();
 8009102:	f7f8 fedf 	bl	8001ec4 <Control_mode_Init>
  init_FailSafe();
 8009106:	f7ff fddd 	bl	8008cc4 <init_FailSafe>

	//uint8_t hello[] = "Hello World\n\r";
  //float PI=3.14;
  //uint8_t hoge = 3;
  int mode=0;
 800910a:	2300      	movs	r3, #0
 800910c:	60fb      	str	r3, [r7, #12]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800910e:	4b37      	ldr	r3, [pc, #220]	; (80091ec <main+0x148>)
 8009110:	881b      	ldrh	r3, [r3, #0]
 8009112:	4619      	mov	r1, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009114:	4b35      	ldr	r3, [pc, #212]	; (80091ec <main+0x148>)
 8009116:	885b      	ldrh	r3, [r3, #2]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009118:	4618      	mov	r0, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 800911a:	4b34      	ldr	r3, [pc, #208]	; (80091ec <main+0x148>)
 800911c:	889b      	ldrh	r3, [r3, #4]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800911e:	461c      	mov	r4, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009120:	4b32      	ldr	r3, [pc, #200]	; (80091ec <main+0x148>)
 8009122:	88db      	ldrh	r3, [r3, #6]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 8009124:	461a      	mov	r2, r3
							g_sensor_on[1], g_sensor_on[2], g_sensor_on[3], g_sensor_on[4]);
 8009126:	4b31      	ldr	r3, [pc, #196]	; (80091ec <main+0x148>)
 8009128:	891b      	ldrh	r3, [r3, #8]
	printf("ON_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_on[0],
 800912a:	9301      	str	r3, [sp, #4]
 800912c:	9200      	str	r2, [sp, #0]
 800912e:	4623      	mov	r3, r4
 8009130:	4602      	mov	r2, r0
 8009132:	482f      	ldr	r0, [pc, #188]	; (80091f0 <main+0x14c>)
 8009134:	f009 fa9e 	bl	8012674 <iprintf>
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009138:	4b2e      	ldr	r3, [pc, #184]	; (80091f4 <main+0x150>)
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	4619      	mov	r1, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800913e:	4b2d      	ldr	r3, [pc, #180]	; (80091f4 <main+0x150>)
 8009140:	885b      	ldrh	r3, [r3, #2]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009142:	4618      	mov	r0, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009144:	4b2b      	ldr	r3, [pc, #172]	; (80091f4 <main+0x150>)
 8009146:	889b      	ldrh	r3, [r3, #4]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009148:	461c      	mov	r4, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 800914a:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <main+0x150>)
 800914c:	88db      	ldrh	r3, [r3, #6]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 800914e:	461a      	mov	r2, r3
							g_sensor_off[1], g_sensor_off[2], g_sensor_off[3], g_sensor_off[4]);
 8009150:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <main+0x150>)
 8009152:	891b      	ldrh	r3, [r3, #8]
	printf("OFF_SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor_off[0],
 8009154:	9301      	str	r3, [sp, #4]
 8009156:	9200      	str	r2, [sp, #0]
 8009158:	4623      	mov	r3, r4
 800915a:	4602      	mov	r2, r0
 800915c:	4826      	ldr	r0, [pc, #152]	; (80091f8 <main+0x154>)
 800915e:	f009 fa89 	bl	8012674 <iprintf>
	battcheak();
 8009162:	f7f8 fd59 	bl	8001c18 <battcheak>

//起動cheak
	int yellow_count=1;
 8009166:	2301      	movs	r3, #1
 8009168:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 800916a:	2300      	movs	r3, #0
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	e00d      	b.n	800918c <main+0xe8>
		pl_yellow_LED_count(yellow_count);
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	b2db      	uxtb	r3, r3
 8009174:	4618      	mov	r0, r3
 8009176:	f7fd fad3 	bl	8006720 <pl_yellow_LED_count>
		HAL_Delay(50);
 800917a:	2032      	movs	r0, #50	; 0x32
 800917c:	f001 fd90 	bl	800aca0 <HAL_Delay>
		yellow_count=yellow_count*2;
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	005b      	lsls	r3, r3, #1
 8009184:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<8;i++){
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	3301      	adds	r3, #1
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b07      	cmp	r3, #7
 8009190:	ddee      	ble.n	8009170 <main+0xcc>
	}
	for(int i=0;i<9;i++){
 8009192:	2300      	movs	r3, #0
 8009194:	603b      	str	r3, [r7, #0]
 8009196:	e00f      	b.n	80091b8 <main+0x114>
			pl_yellow_LED_count(yellow_count);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	b2db      	uxtb	r3, r3
 800919c:	4618      	mov	r0, r3
 800919e:	f7fd fabf 	bl	8006720 <pl_yellow_LED_count>
			HAL_Delay(50);
 80091a2:	2032      	movs	r0, #50	; 0x32
 80091a4:	f001 fd7c 	bl	800aca0 <HAL_Delay>
			yellow_count=yellow_count/2;
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	0fda      	lsrs	r2, r3, #31
 80091ac:	4413      	add	r3, r2
 80091ae:	105b      	asrs	r3, r3, #1
 80091b0:	60bb      	str	r3, [r7, #8]
	for(int i=0;i<9;i++){
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	3301      	adds	r3, #1
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	2b08      	cmp	r3, #8
 80091bc:	ddec      	ble.n	8009198 <main+0xf4>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  		mode=mode_decision(mode);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 f86c 	bl	80092a0 <mode_decision>
 80091c8:	4603      	mov	r3, r0
 80091ca:	60fb      	str	r3, [r7, #12]
//	  		clear_Ierror();
	  		reset_distance();
 80091cc:	f7f7 fee6 	bl	8000f9c <reset_distance>
	  		reset_gyro();
 80091d0:	f7f8 fb16 	bl	8001800 <reset_gyro>
	  		reset_speed();
 80091d4:	f7f7 ff20 	bl	8001018 <reset_speed>

	  		mode_execution(mode);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 f959 	bl	8009494 <mode_execution>

	  		error_mode = 0;
 80091e2:	4b06      	ldr	r3, [pc, #24]	; (80091fc <main+0x158>)
 80091e4:	2200      	movs	r2, #0
 80091e6:	701a      	strb	r2, [r3, #0]
	  		mode=mode_decision(mode);
 80091e8:	e7e9      	b.n	80091be <main+0x11a>
 80091ea:	bf00      	nop
 80091ec:	200006ec 	.word	0x200006ec
 80091f0:	08014d40 	.word	0x08014d40
 80091f4:	200006f8 	.word	0x200006f8
 80091f8:	08014d6c 	.word	0x08014d6c
 80091fc:	200007e7 	.word	0x200007e7

08009200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b094      	sub	sp, #80	; 0x50
 8009204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009206:	f107 0318 	add.w	r3, r7, #24
 800920a:	2238      	movs	r2, #56	; 0x38
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f008 fdbe 	bl	8011d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009214:	1d3b      	adds	r3, r7, #4
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
 800921a:	605a      	str	r2, [r3, #4]
 800921c:	609a      	str	r2, [r3, #8]
 800921e:	60da      	str	r2, [r3, #12]
 8009220:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8009222:	2000      	movs	r0, #0
 8009224:	f004 fca8 	bl	800db78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8009228:	2301      	movs	r3, #1
 800922a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800922c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009230:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009232:	2302      	movs	r3, #2
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009236:	2303      	movs	r3, #3
 8009238:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800923a:	2304      	movs	r3, #4
 800923c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800923e:	2355      	movs	r3, #85	; 0x55
 8009240:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009242:	2302      	movs	r3, #2
 8009244:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009246:	2302      	movs	r3, #2
 8009248:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800924a:	2302      	movs	r3, #2
 800924c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800924e:	f107 0318 	add.w	r3, r7, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f004 fd44 	bl	800dce0 <HAL_RCC_OscConfig>
 8009258:	4603      	mov	r3, r0
 800925a:	2b00      	cmp	r3, #0
 800925c:	d001      	beq.n	8009262 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800925e:	f000 f81a 	bl	8009296 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009262:	230f      	movs	r3, #15
 8009264:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009266:	2303      	movs	r3, #3
 8009268:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800926a:	2300      	movs	r3, #0
 800926c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800926e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009272:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8009274:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8009278:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800927a:	1d3b      	adds	r3, r7, #4
 800927c:	2104      	movs	r1, #4
 800927e:	4618      	mov	r0, r3
 8009280:	f005 f846 	bl	800e310 <HAL_RCC_ClockConfig>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800928a:	f000 f804 	bl	8009296 <Error_Handler>
  }
}
 800928e:	bf00      	nop
 8009290:	3750      	adds	r7, #80	; 0x50
 8009292:	46bd      	mov	sp, r7
 8009294:	bd80      	pop	{r7, pc}

08009296 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009296:	b480      	push	{r7}
 8009298:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800929a:	b672      	cpsid	i
}
 800929c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800929e:	e7fe      	b.n	800929e <Error_Handler+0x8>

080092a0 <mode_decision>:
#include "fail_safe.h"




unsigned char mode_decision(unsigned char now_mode){
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b084      	sub	sp, #16
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80092ae:	2300      	movs	r3, #0
 80092b0:	73bb      	strb	r3, [r7, #14]
unsigned char main_mode=0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	737b      	strb	r3, [r7, #13]
float dis8 =10;
 80092b6:	4b71      	ldr	r3, [pc, #452]	; (800947c <mode_decision+0x1dc>)
 80092b8:	60bb      	str	r3, [r7, #8]
main_modeR=now_mode & 0x0F;
 80092ba:	79fb      	ldrb	r3, [r7, #7]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80092c2:	79fb      	ldrb	r3, [r7, #7]
 80092c4:	091b      	lsrs	r3, r3, #4
 80092c6:	73bb      	strb	r3, [r7, #14]

	pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80092c8:	7bbb      	ldrb	r3, [r7, #14]
 80092ca:	011b      	lsls	r3, r3, #4
 80092cc:	b2da      	uxtb	r2, r3
 80092ce:	7bfb      	ldrb	r3, [r7, #15]
 80092d0:	4413      	add	r3, r2
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fd fa23 	bl	8006720 <pl_yellow_LED_count>
			//pl_play_oneSound(main_modeR);
			//モード選択*************************************************************************
			while (angle_speedx <= 400) {
 80092da:	e07f      	b.n	80093dc <mode_decision+0x13c>
				HAL_Delay(1);
 80092dc:	2001      	movs	r0, #1
 80092de:	f001 fcdf 	bl	800aca0 <HAL_Delay>
				if (E_distanceR >= dis8) {
 80092e2:	4b67      	ldr	r3, [pc, #412]	; (8009480 <mode_decision+0x1e0>)
 80092e4:	edd3 7a00 	vldr	s15, [r3]
 80092e8:	ed97 7a02 	vldr	s14, [r7, #8]
 80092ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80092f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f4:	d813      	bhi.n	800931e <mode_decision+0x7e>
					if (main_modeR == 15) {
 80092f6:	7bfb      	ldrb	r3, [r7, #15]
 80092f8:	2b0f      	cmp	r3, #15
 80092fa:	d102      	bne.n	8009302 <mode_decision+0x62>
						main_modeR = 0;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73fb      	strb	r3, [r7, #15]
 8009300:	e002      	b.n	8009308 <mode_decision+0x68>
					} else {
						main_modeR++;
 8009302:	7bfb      	ldrb	r3, [r7, #15]
 8009304:	3301      	adds	r3, #1
 8009306:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8009308:	f7f7 fe48 	bl	8000f9c <reset_distance>

					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	b2da      	uxtb	r2, r3
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	4413      	add	r3, r2
 8009316:	b2db      	uxtb	r3, r3
 8009318:	4618      	mov	r0, r3
 800931a:	f7fd fa01 	bl	8006720 <pl_yellow_LED_count>
				}
				if (E_distanceR <= -dis8) {
 800931e:	edd7 7a02 	vldr	s15, [r7, #8]
 8009322:	eeb1 7a67 	vneg.f32	s14, s15
 8009326:	4b56      	ldr	r3, [pc, #344]	; (8009480 <mode_decision+0x1e0>)
 8009328:	edd3 7a00 	vldr	s15, [r3]
 800932c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009334:	db13      	blt.n	800935e <mode_decision+0xbe>
					if (main_modeR == 0) {
 8009336:	7bfb      	ldrb	r3, [r7, #15]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d102      	bne.n	8009342 <mode_decision+0xa2>
						main_modeR = 15;
 800933c:	230f      	movs	r3, #15
 800933e:	73fb      	strb	r3, [r7, #15]
 8009340:	e002      	b.n	8009348 <mode_decision+0xa8>
					} else {
						main_modeR = main_modeR - 1;
 8009342:	7bfb      	ldrb	r3, [r7, #15]
 8009344:	3b01      	subs	r3, #1
 8009346:	73fb      	strb	r3, [r7, #15]
					}
					reset_distance();
 8009348:	f7f7 fe28 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 800934c:	7bbb      	ldrb	r3, [r7, #14]
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	b2da      	uxtb	r2, r3
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	4413      	add	r3, r2
 8009356:	b2db      	uxtb	r3, r3
 8009358:	4618      	mov	r0, r3
 800935a:	f7fd f9e1 	bl	8006720 <pl_yellow_LED_count>
				}
				if (E_distanceL >= dis8) {
 800935e:	4b49      	ldr	r3, [pc, #292]	; (8009484 <mode_decision+0x1e4>)
 8009360:	edd3 7a00 	vldr	s15, [r3]
 8009364:	ed97 7a02 	vldr	s14, [r7, #8]
 8009368:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009370:	d813      	bhi.n	800939a <mode_decision+0xfa>
					if (main_modeL == 15) {
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b0f      	cmp	r3, #15
 8009376:	d102      	bne.n	800937e <mode_decision+0xde>
						main_modeL = 0;
 8009378:	2300      	movs	r3, #0
 800937a:	73bb      	strb	r3, [r7, #14]
 800937c:	e002      	b.n	8009384 <mode_decision+0xe4>
					} else {
						main_modeL = main_modeL + 1;
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	3301      	adds	r3, #1
 8009382:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 8009384:	f7f7 fe0a 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 8009388:	7bbb      	ldrb	r3, [r7, #14]
 800938a:	011b      	lsls	r3, r3, #4
 800938c:	b2da      	uxtb	r2, r3
 800938e:	7bfb      	ldrb	r3, [r7, #15]
 8009390:	4413      	add	r3, r2
 8009392:	b2db      	uxtb	r3, r3
 8009394:	4618      	mov	r0, r3
 8009396:	f7fd f9c3 	bl	8006720 <pl_yellow_LED_count>
				}
				if (E_distanceL <= -dis8) {
 800939a:	edd7 7a02 	vldr	s15, [r7, #8]
 800939e:	eeb1 7a67 	vneg.f32	s14, s15
 80093a2:	4b38      	ldr	r3, [pc, #224]	; (8009484 <mode_decision+0x1e4>)
 80093a4:	edd3 7a00 	vldr	s15, [r3]
 80093a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	da00      	bge.n	80093b4 <mode_decision+0x114>
 80093b2:	e013      	b.n	80093dc <mode_decision+0x13c>
					if (main_modeL == 0) {
 80093b4:	7bbb      	ldrb	r3, [r7, #14]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <mode_decision+0x120>
						main_modeL = 15;
 80093ba:	230f      	movs	r3, #15
 80093bc:	73bb      	strb	r3, [r7, #14]
 80093be:	e002      	b.n	80093c6 <mode_decision+0x126>
					} else {
						main_modeL = main_modeL - 1;
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	3b01      	subs	r3, #1
 80093c4:	73bb      	strb	r3, [r7, #14]
					}
					reset_distance();
 80093c6:	f7f7 fde9 	bl	8000f9c <reset_distance>
					pl_yellow_LED_count(main_modeL * 16 + main_modeR);
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	011b      	lsls	r3, r3, #4
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	7bfb      	ldrb	r3, [r7, #15]
 80093d2:	4413      	add	r3, r2
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fd f9a2 	bl	8006720 <pl_yellow_LED_count>
			while (angle_speedx <= 400) {
 80093dc:	4b2a      	ldr	r3, [pc, #168]	; (8009488 <mode_decision+0x1e8>)
 80093de:	edd3 7a00 	vldr	s15, [r3]
 80093e2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800948c <mode_decision+0x1ec>
 80093e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80093ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093ee:	f67f af75 	bls.w	80092dc <mode_decision+0x3c>
				}
				//main_mode=main_modeL << 4 | main_modeR;
	//printf("main_mode=%x L=%x R=%x\n",main_mode,main_modeL,main_modeR);

			}
			pl_yellow_LED_on();
 80093f2:	f7fd f95b 	bl	80066ac <pl_yellow_LED_on>
			pl_r_blue_LED(ON);
 80093f6:	2001      	movs	r0, #1
 80093f8:	f7fd fa42 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 80093fc:	2001      	movs	r0, #1
 80093fe:	f7fd fa51 	bl	80068a4 <pl_l_blue_LED>
			HAL_Delay(1000);
 8009402:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009406:	f001 fc4b 	bl	800aca0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 800940a:	e011      	b.n	8009430 <mode_decision+0x190>

				if (angle_speedx >= 400) {
 800940c:	4b1e      	ldr	r3, [pc, #120]	; (8009488 <mode_decision+0x1e8>)
 800940e:	edd3 7a00 	vldr	s15, [r3]
 8009412:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800948c <mode_decision+0x1ec>
 8009416:	eef4 7ac7 	vcmpe.f32	s15, s14
 800941a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800941e:	db04      	blt.n	800942a <mode_decision+0x18a>
					main_modeL = 0;
 8009420:	2300      	movs	r3, #0
 8009422:	73bb      	strb	r3, [r7, #14]
					main_modeR = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	73fb      	strb	r3, [r7, #15]
					break;
 8009428:	e013      	b.n	8009452 <mode_decision+0x1b2>
				}
				HAL_Delay(1);
 800942a:	2001      	movs	r0, #1
 800942c:	f001 fc38 	bl	800aca0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {	//
 8009430:	4b17      	ldr	r3, [pc, #92]	; (8009490 <mode_decision+0x1f0>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009438:	dde8      	ble.n	800940c <mode_decision+0x16c>
 800943a:	4b15      	ldr	r3, [pc, #84]	; (8009490 <mode_decision+0x1f0>)
 800943c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009440:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009444:	dde2      	ble.n	800940c <mode_decision+0x16c>
 8009446:	4b12      	ldr	r3, [pc, #72]	; (8009490 <mode_decision+0x1f0>)
 8009448:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800944c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009450:	dddc      	ble.n	800940c <mode_decision+0x16c>
			}
			pl_r_blue_LED(OFF);
 8009452:	2000      	movs	r0, #0
 8009454:	f7fd fa14 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8009458:	2000      	movs	r0, #0
 800945a:	f7fd fa23 	bl	80068a4 <pl_l_blue_LED>
			pl_yellow_LED_off();
 800945e:	f7fd f8eb 	bl	8006638 <pl_yellow_LED_off>

			main_mode=main_modeL << 4 | main_modeR;
 8009462:	7bbb      	ldrb	r3, [r7, #14]
 8009464:	011b      	lsls	r3, r3, #4
 8009466:	b25a      	sxtb	r2, r3
 8009468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800946c:	4313      	orrs	r3, r2
 800946e:	b25b      	sxtb	r3, r3
 8009470:	737b      	strb	r3, [r7, #13]

return main_mode;
 8009472:	7b7b      	ldrb	r3, [r7, #13]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3710      	adds	r7, #16
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}
 800947c:	41200000 	.word	0x41200000
 8009480:	20000204 	.word	0x20000204
 8009484:	20000200 	.word	0x20000200
 8009488:	20000250 	.word	0x20000250
 800948c:	43c80000 	.word	0x43c80000
 8009490:	20000298 	.word	0x20000298

08009494 <mode_execution>:


void mode_execution(unsigned char now_mode){
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	4603      	mov	r3, r0
 800949c:	71fb      	strb	r3, [r7, #7]

unsigned char main_modeR=0;
 800949e:	2300      	movs	r3, #0
 80094a0:	73fb      	strb	r3, [r7, #15]
unsigned char main_modeL=0;
 80094a2:	2300      	movs	r3, #0
 80094a4:	73bb      	strb	r3, [r7, #14]

main_modeR=now_mode & 0x0F;
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	f003 030f 	and.w	r3, r3, #15
 80094ac:	73fb      	strb	r3, [r7, #15]
main_modeL=now_mode >> 4;
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	091b      	lsrs	r3, r3, #4
 80094b2:	73bb      	strb	r3, [r7, #14]


switch (main_modeL) {
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	2b0f      	cmp	r3, #15
 80094b8:	d82d      	bhi.n	8009516 <mode_execution+0x82>
 80094ba:	a201      	add	r2, pc, #4	; (adr r2, 80094c0 <mode_execution+0x2c>)
 80094bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c0:	08009501 	.word	0x08009501
 80094c4:	08009515 	.word	0x08009515
 80094c8:	08009515 	.word	0x08009515
 80094cc:	0800950b 	.word	0x0800950b
 80094d0:	08009515 	.word	0x08009515
 80094d4:	08009515 	.word	0x08009515
 80094d8:	08009515 	.word	0x08009515
 80094dc:	08009515 	.word	0x08009515
 80094e0:	08009515 	.word	0x08009515
 80094e4:	08009515 	.word	0x08009515
 80094e8:	08009515 	.word	0x08009515
 80094ec:	08009515 	.word	0x08009515
 80094f0:	08009515 	.word	0x08009515
 80094f4:	08009515 	.word	0x08009515
 80094f8:	08009515 	.word	0x08009515
 80094fc:	08009515 	.word	0x08009515
	case 0b0000://PLテストモード1
		mode_PLtest(main_modeR);
 8009500:	7bfb      	ldrb	r3, [r7, #15]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 f80c 	bl	8009520 <mode_PLtest>
	break;
 8009508:	e005      	b.n	8009516 <mode_execution+0x82>

	break;
	case 0b0010://実行モード2
	break;
	case 0b0011:
		mode_Tuning0(main_modeR);
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	4618      	mov	r0, r3
 800950e:	f000 f97b 	bl	8009808 <mode_Tuning0>
	break;
 8009512:	e000      	b.n	8009516 <mode_execution+0x82>
	break;
 8009514:	bf00      	nop
	case 0b1110:
	break;
	case 0b1111:
	break;
}
}
 8009516:	bf00      	nop
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop

08009520 <mode_PLtest>:



void mode_PLtest(unsigned char main_modeR) {
 8009520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009524:	b090      	sub	sp, #64	; 0x40
 8009526:	af0a      	add	r7, sp, #40	; 0x28
 8009528:	4603      	mov	r3, r0
 800952a:	75fb      	strb	r3, [r7, #23]

	switch (main_modeR) {
 800952c:	7dfb      	ldrb	r3, [r7, #23]
 800952e:	2b0f      	cmp	r3, #15
 8009530:	f200 8159 	bhi.w	80097e6 <mode_PLtest+0x2c6>
 8009534:	a201      	add	r2, pc, #4	; (adr r2, 800953c <mode_PLtest+0x1c>)
 8009536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800953a:	bf00      	nop
 800953c:	080097e5 	.word	0x080097e5
 8009540:	0800957d 	.word	0x0800957d
 8009544:	080095af 	.word	0x080095af
 8009548:	0800962b 	.word	0x0800962b
 800954c:	0800968f 	.word	0x0800968f
 8009550:	080097e7 	.word	0x080097e7
 8009554:	080097e7 	.word	0x080097e7
 8009558:	080097e7 	.word	0x080097e7
 800955c:	080097e7 	.word	0x080097e7
 8009560:	0800970f 	.word	0x0800970f
 8009564:	08009777 	.word	0x08009777
 8009568:	080097e7 	.word	0x080097e7
 800956c:	080097e7 	.word	0x080097e7
 8009570:	080097e7 	.word	0x080097e7
 8009574:	080097e7 	.word	0x080097e7
 8009578:	080097df 	.word	0x080097df
	case 0b0000:
		//飛ばすerror
		break;
	case 0b0001:	//sensor
		while (1) {
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 800957c:	4b9c      	ldr	r3, [pc, #624]	; (80097f0 <mode_PLtest+0x2d0>)
 800957e:	6819      	ldr	r1, [r3, #0]
 8009580:	4b9b      	ldr	r3, [pc, #620]	; (80097f0 <mode_PLtest+0x2d0>)
 8009582:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009584:	4b9a      	ldr	r3, [pc, #616]	; (80097f0 <mode_PLtest+0x2d0>)
 8009586:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800958a:	4b99      	ldr	r3, [pc, #612]	; (80097f0 <mode_PLtest+0x2d0>)
 800958c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009590:	4a97      	ldr	r2, [pc, #604]	; (80097f0 <mode_PLtest+0x2d0>)
 8009592:	f8d2 2140 	ldr.w	r2, [r2, #320]	; 0x140
 8009596:	9201      	str	r2, [sp, #4]
 8009598:	9300      	str	r3, [sp, #0]
 800959a:	4623      	mov	r3, r4
 800959c:	4602      	mov	r2, r0
 800959e:	4895      	ldr	r0, [pc, #596]	; (80097f4 <mode_PLtest+0x2d4>)
 80095a0:	f009 f868 	bl	8012674 <iprintf>
					g_sensor[1][0], g_sensor[2][0], g_sensor[3][0],
					g_sensor[4][0]);
			wait_ms(500);
 80095a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80095a8:	f7fd fed6 	bl	8007358 <wait_ms>
			printf("SEN1=%d,SEN2=%d,SEN3=%d,SEN4=%d,SEN5=%d\n", g_sensor[0][0],
 80095ac:	e7e6      	b.n	800957c <mode_PLtest+0x5c>
		}
		break;
	case 0b0010:	//encoder
		pl_r_blue_LED(ON);
 80095ae:	2001      	movs	r0, #1
 80095b0:	f7fd f966 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 80095b4:	2001      	movs	r0, #1
 80095b6:	f7fd f975 	bl	80068a4 <pl_l_blue_LED>
		record_mode = 1;
 80095ba:	4b8f      	ldr	r3, [pc, #572]	; (80097f8 <mode_PLtest+0x2d8>)
 80095bc:	2201      	movs	r2, #1
 80095be:	701a      	strb	r2, [r3, #0]
		pl_DriveMotor_duty(1200, 1200*1.3*0.9);
 80095c0:	f240 517c 	movw	r1, #1404	; 0x57c
 80095c4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80095c8:	f7fd fc7a 	bl	8006ec0 <pl_DriveMotor_duty>
		pl_R_DriveMotor_mode(MOTOR_FRONT);
 80095cc:	2001      	movs	r0, #1
 80095ce:	f7fd fc35 	bl	8006e3c <pl_R_DriveMotor_mode>
		pl_L_DriveMotor_mode(MOTOR_FRONT);
 80095d2:	2001      	movs	r0, #1
 80095d4:	f7fd fc0a 	bl	8006dec <pl_L_DriveMotor_mode>
		pl_DriveMotor_start();
 80095d8:	f7fd fc56 	bl	8006e88 <pl_DriveMotor_start>
		wait_ms(2500);
 80095dc:	f640 10c4 	movw	r0, #2500	; 0x9c4
 80095e0:	f7fd feba 	bl	8007358 <wait_ms>
		pl_DriveMotor_stop();
 80095e4:	f7fd fc5e 	bl	8006ea4 <pl_DriveMotor_stop>
		pl_r_blue_LED(OFF);
 80095e8:	2000      	movs	r0, #0
 80095ea:	f7fd f949 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 80095ee:	2000      	movs	r0, #0
 80095f0:	f7fd f958 	bl	80068a4 <pl_l_blue_LED>
		record_mode = 0;
 80095f4:	4b80      	ldr	r3, [pc, #512]	; (80097f8 <mode_PLtest+0x2d8>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 80095fa:	e002      	b.n	8009602 <mode_PLtest+0xe2>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7fd feab 	bl	8007358 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8009602:	4b7b      	ldr	r3, [pc, #492]	; (80097f0 <mode_PLtest+0x2d0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800960a:	ddf7      	ble.n	80095fc <mode_PLtest+0xdc>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 800960c:	4b78      	ldr	r3, [pc, #480]	; (80097f0 <mode_PLtest+0x2d0>)
 800960e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009612:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009616:	ddf1      	ble.n	80095fc <mode_PLtest+0xdc>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 8009618:	4b75      	ldr	r3, [pc, #468]	; (80097f0 <mode_PLtest+0x2d0>)
 800961a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800961e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009622:	ddeb      	ble.n	80095fc <mode_PLtest+0xdc>
		}
		record_print();
 8009624:	f000 fc0a 	bl	8009e3c <record_print>
		break;
 8009628:	e0dd      	b.n	80097e6 <mode_PLtest+0x2c6>
	case 0b0011:	//gyro
		reset_gyro();
 800962a:	f7f8 f8e9 	bl	8001800 <reset_gyro>
		reset_speed();
 800962e:	f7f7 fcf3 	bl	8001018 <reset_speed>
		pl_r_blue_LED(ON);
 8009632:	2001      	movs	r0, #1
 8009634:	f7fd f924 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(ON);
 8009638:	2001      	movs	r0, #1
 800963a:	f7fd f933 	bl	80068a4 <pl_l_blue_LED>
		record_mode = 2;
 800963e:	4b6e      	ldr	r3, [pc, #440]	; (80097f8 <mode_PLtest+0x2d8>)
 8009640:	2202      	movs	r2, #2
 8009642:	701a      	strb	r2, [r3, #0]
		wait_ms(2500);
 8009644:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8009648:	f7fd fe86 	bl	8007358 <wait_ms>
		pl_r_blue_LED(OFF);
 800964c:	2000      	movs	r0, #0
 800964e:	f7fd f917 	bl	8006880 <pl_r_blue_LED>
		pl_l_blue_LED(OFF);
 8009652:	2000      	movs	r0, #0
 8009654:	f7fd f926 	bl	80068a4 <pl_l_blue_LED>
		record_mode = 0;
 8009658:	4b67      	ldr	r3, [pc, #412]	; (80097f8 <mode_PLtest+0x2d8>)
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 800965e:	e002      	b.n	8009666 <mode_PLtest+0x146>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
			wait_ms(1);
 8009660:	2001      	movs	r0, #1
 8009662:	f7fd fe79 	bl	8007358 <wait_ms>
		while (g_sensor[0][0] <= SENSOR_FINGER_0
 8009666:	4b62      	ldr	r3, [pc, #392]	; (80097f0 <mode_PLtest+0x2d0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800966e:	ddf7      	ble.n	8009660 <mode_PLtest+0x140>
				|| g_sensor[2][0] <= SENSOR_FINGER_2
 8009670:	4b5f      	ldr	r3, [pc, #380]	; (80097f0 <mode_PLtest+0x2d0>)
 8009672:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009676:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800967a:	ddf1      	ble.n	8009660 <mode_PLtest+0x140>
				|| g_sensor[4][0] <= SENSOR_FINGER_4) {
 800967c:	4b5c      	ldr	r3, [pc, #368]	; (80097f0 <mode_PLtest+0x2d0>)
 800967e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009682:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009686:	ddeb      	ble.n	8009660 <mode_PLtest+0x140>
		}
		record_print();
 8009688:	f000 fbd8 	bl	8009e3c <record_print>
		break;
 800968c:	e0ab      	b.n	80097e6 <mode_PLtest+0x2c6>
	case 0b0100://speaker
		while (1) {
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800968e:	4b5b      	ldr	r3, [pc, #364]	; (80097fc <mode_PLtest+0x2dc>)
 8009690:	681b      	ldr	r3, [r3, #0]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 8009692:	4618      	mov	r0, r3
 8009694:	f7f6 ff80 	bl	8000598 <__aeabi_f2d>
 8009698:	e9c7 0102 	strd	r0, r1, [r7, #8]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 800969c:	4b57      	ldr	r3, [pc, #348]	; (80097fc <mode_PLtest+0x2dc>)
 800969e:	685b      	ldr	r3, [r3, #4]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7f6 ff79 	bl	8000598 <__aeabi_f2d>
 80096a6:	4604      	mov	r4, r0
 80096a8:	460d      	mov	r5, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80096aa:	4b54      	ldr	r3, [pc, #336]	; (80097fc <mode_PLtest+0x2dc>)
 80096ac:	689b      	ldr	r3, [r3, #8]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7f6 ff72 	bl	8000598 <__aeabi_f2d>
 80096b4:	4680      	mov	r8, r0
 80096b6:	4689      	mov	r9, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80096b8:	4b50      	ldr	r3, [pc, #320]	; (80097fc <mode_PLtest+0x2dc>)
 80096ba:	68db      	ldr	r3, [r3, #12]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80096bc:	4618      	mov	r0, r3
 80096be:	f7f6 ff6b 	bl	8000598 <__aeabi_f2d>
 80096c2:	4682      	mov	sl, r0
 80096c4:	468b      	mov	fp, r1
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80096c6:	4b4d      	ldr	r3, [pc, #308]	; (80097fc <mode_PLtest+0x2dc>)
 80096c8:	691b      	ldr	r3, [r3, #16]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7f6 ff64 	bl	8000598 <__aeabi_f2d>
 80096d0:	e9c7 0100 	strd	r0, r1, [r7]
				  			gyro.omega_x, gyro.omega_y, gyro.omega_z, gyro.accel_x,gyro.accel_y, gyro.accel_z);
 80096d4:	4b49      	ldr	r3, [pc, #292]	; (80097fc <mode_PLtest+0x2dc>)
 80096d6:	695b      	ldr	r3, [r3, #20]
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 80096d8:	4618      	mov	r0, r3
 80096da:	f7f6 ff5d 	bl	8000598 <__aeabi_f2d>
 80096de:	4602      	mov	r2, r0
 80096e0:	460b      	mov	r3, r1
 80096e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80096e6:	ed97 7b00 	vldr	d7, [r7]
 80096ea:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096ee:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80096f2:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80096f6:	e9cd 4500 	strd	r4, r5, [sp]
 80096fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80096fe:	4840      	ldr	r0, [pc, #256]	; (8009800 <mode_PLtest+0x2e0>)
 8009700:	f008 ffb8 	bl	8012674 <iprintf>
			wait_ms(500);
 8009704:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009708:	f7fd fe26 	bl	8007358 <wait_ms>
		  	printf("gyro x : %5.5f, y : %5.5f,z : %5.5f, accel x : %5.5f, y :%5.5f, z : %5.5f\r",
 800970c:	e7bf      	b.n	800968e <mode_PLtest+0x16e>
		}
	break;
	case 0b1001://fun
			pl_FunMotor_duty(0.5);
 800970e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8009712:	f7fd fbff 	bl	8006f14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8009716:	f7fd fbe9 	bl	8006eec <pl_FunMotor_start>
			HAL_Delay(2000);
 800971a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800971e:	f001 fabf 	bl	800aca0 <HAL_Delay>
			reset_gyro();
 8009722:	f7f8 f86d 	bl	8001800 <reset_gyro>
			reset_speed();
 8009726:	f7f7 fc77 	bl	8001018 <reset_speed>
			clear_Ierror();
 800972a:	f7fb f99b 	bl	8004a64 <clear_Ierror>
			pl_r_blue_LED(ON);
 800972e:	2001      	movs	r0, #1
 8009730:	f7fd f8a6 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8009734:	2001      	movs	r0, #1
 8009736:	f7fd f8b5 	bl	80068a4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 800973a:	e002      	b.n	8009742 <mode_PLtest+0x222>
				HAL_Delay(1);
 800973c:	2001      	movs	r0, #1
 800973e:	f001 faaf 	bl	800aca0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8009742:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <mode_PLtest+0x2d0>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800974a:	ddf7      	ble.n	800973c <mode_PLtest+0x21c>
 800974c:	4b28      	ldr	r3, [pc, #160]	; (80097f0 <mode_PLtest+0x2d0>)
 800974e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009752:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009756:	ddf1      	ble.n	800973c <mode_PLtest+0x21c>
 8009758:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <mode_PLtest+0x2d0>)
 800975a:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800975e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009762:	ddeb      	ble.n	800973c <mode_PLtest+0x21c>
			}
			pl_r_blue_LED(OFF);
 8009764:	2000      	movs	r0, #0
 8009766:	f7fd f88b 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 800976a:	2000      	movs	r0, #0
 800976c:	f7fd f89a 	bl	80068a4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 8009770:	f7fd fbc6 	bl	8006f00 <pl_FunMotor_stop>
		break;
 8009774:	e037      	b.n	80097e6 <mode_PLtest+0x2c6>
	case 0b1010://fun
			pl_FunMotor_duty(0.99);
 8009776:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8009804 <mode_PLtest+0x2e4>
 800977a:	f7fd fbcb 	bl	8006f14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 800977e:	f7fd fbb5 	bl	8006eec <pl_FunMotor_start>
			HAL_Delay(2000);
 8009782:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8009786:	f001 fa8b 	bl	800aca0 <HAL_Delay>
			reset_gyro();
 800978a:	f7f8 f839 	bl	8001800 <reset_gyro>
			reset_speed();
 800978e:	f7f7 fc43 	bl	8001018 <reset_speed>
			clear_Ierror();
 8009792:	f7fb f967 	bl	8004a64 <clear_Ierror>
			pl_r_blue_LED(ON);
 8009796:	2001      	movs	r0, #1
 8009798:	f7fd f872 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 800979c:	2001      	movs	r0, #1
 800979e:	f7fd f881 	bl	80068a4 <pl_l_blue_LED>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80097a2:	e002      	b.n	80097aa <mode_PLtest+0x28a>
				HAL_Delay(1);
 80097a4:	2001      	movs	r0, #1
 80097a6:	f001 fa7b 	bl	800aca0 <HAL_Delay>
			while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 80097aa:	4b11      	ldr	r3, [pc, #68]	; (80097f0 <mode_PLtest+0x2d0>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80097b2:	ddf7      	ble.n	80097a4 <mode_PLtest+0x284>
 80097b4:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <mode_PLtest+0x2d0>)
 80097b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80097ba:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80097be:	ddf1      	ble.n	80097a4 <mode_PLtest+0x284>
 80097c0:	4b0b      	ldr	r3, [pc, #44]	; (80097f0 <mode_PLtest+0x2d0>)
 80097c2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80097c6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80097ca:	ddeb      	ble.n	80097a4 <mode_PLtest+0x284>
			}
			pl_r_blue_LED(OFF);
 80097cc:	2000      	movs	r0, #0
 80097ce:	f7fd f857 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 80097d2:	2000      	movs	r0, #0
 80097d4:	f7fd f866 	bl	80068a4 <pl_l_blue_LED>
			pl_FunMotor_stop();
 80097d8:	f7fd fb92 	bl	8006f00 <pl_FunMotor_stop>
		break;
 80097dc:	e003      	b.n	80097e6 <mode_PLtest+0x2c6>
	case 0b1111:	//record_out
		record_print();
 80097de:	f000 fb2d 	bl	8009e3c <record_print>
		break;
 80097e2:	e000      	b.n	80097e6 <mode_PLtest+0x2c6>
		break;
 80097e4:	bf00      	nop
//			record_print();
//		break;
	}
//

}
 80097e6:	bf00      	nop
 80097e8:	3718      	adds	r7, #24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097f0:	20000298 	.word	0x20000298
 80097f4:	08014d9c 	.word	0x08014d9c
 80097f8:	2000c388 	.word	0x2000c388
 80097fc:	200006c4 	.word	0x200006c4
 8009800:	08014dc8 	.word	0x08014dc8
 8009804:	3f7d70a4 	.word	0x3f7d70a4

08009808 <mode_Tuning0>:



void mode_Tuning0(unsigned char main_modeR){
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	71fb      	strb	r3, [r7, #7]
	MOTOR_MODE mode;
	mode.WallControlMode=0;
 8009812:	2300      	movs	r3, #0
 8009814:	723b      	strb	r3, [r7, #8]
	mode.WallControlStatus=0;
 8009816:	2300      	movs	r3, #0
 8009818:	727b      	strb	r3, [r7, #9]
	mode.WallCutMode=0;
 800981a:	2300      	movs	r3, #0
 800981c:	72fb      	strb	r3, [r7, #11]
	mode.calMazeMode=0;
 800981e:	2300      	movs	r3, #0
 8009820:	72bb      	strb	r3, [r7, #10]
	//pl_FunMotor_duty(150);
	//pl_FunMotor_start();
	//HAL_Delay(1000);
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009822:	2003      	movs	r0, #3
 8009824:	f7fd fae2 	bl	8006dec <pl_L_DriveMotor_mode>
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009828:	2003      	movs	r0, #3
 800982a:	f7fd fb07 	bl	8006e3c <pl_R_DriveMotor_mode>
	reset_gyro();
 800982e:	f7f7 ffe7 	bl	8001800 <reset_gyro>
	reset_speed();
 8009832:	f7f7 fbf1 	bl	8001018 <reset_speed>
	reset_distance();
 8009836:	f7f7 fbb1 	bl	8000f9c <reset_distance>
	clear_Ierror();
 800983a:	f7fb f913 	bl	8004a64 <clear_Ierror>

	switch (main_modeR) {
 800983e:	79fb      	ldrb	r3, [r7, #7]
 8009840:	2b0f      	cmp	r3, #15
 8009842:	f200 8255 	bhi.w	8009cf0 <mode_Tuning0+0x4e8>
 8009846:	a201      	add	r2, pc, #4	; (adr r2, 800984c <mode_Tuning0+0x44>)
 8009848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800984c:	0800988d 	.word	0x0800988d
 8009850:	08009917 	.word	0x08009917
 8009854:	0800993d 	.word	0x0800993d
 8009858:	08009963 	.word	0x08009963
 800985c:	080099a9 	.word	0x080099a9
 8009860:	080099ef 	.word	0x080099ef
 8009864:	08009a15 	.word	0x08009a15
 8009868:	08009a3b 	.word	0x08009a3b
 800986c:	08009a61 	.word	0x08009a61
 8009870:	08009a85 	.word	0x08009a85
 8009874:	08009b05 	.word	0x08009b05
 8009878:	08009b85 	.word	0x08009b85
 800987c:	08009bab 	.word	0x08009bab
 8009880:	08009bdd 	.word	0x08009bdd
 8009884:	08009c55 	.word	0x08009c55
 8009888:	08009ca5 	.word	0x08009ca5
		case 0://タイヤ径　エンコーダ+PID
			record_mode=3;
 800988c:	4bdb      	ldr	r3, [pc, #876]	; (8009bfc <mode_Tuning0+0x3f4>)
 800988e:	2203      	movs	r2, #3
 8009890:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8009892:	2300      	movs	r3, #0
 8009894:	723b      	strb	r3, [r7, #8]
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			straight_table2(540, 0, 0, 1600, 13000,mode);
 8009896:	68b8      	ldr	r0, [r7, #8]
 8009898:	ed9f 2ad9 	vldr	s4, [pc, #868]	; 8009c00 <mode_Tuning0+0x3f8>
 800989c:	eddf 1ad9 	vldr	s3, [pc, #868]	; 8009c04 <mode_Tuning0+0x3fc>
 80098a0:	ed9f 1ad9 	vldr	s2, [pc, #868]	; 8009c08 <mode_Tuning0+0x400>
 80098a4:	eddf 0ad8 	vldr	s1, [pc, #864]	; 8009c08 <mode_Tuning0+0x400>
 80098a8:	ed9f 0ad8 	vldr	s0, [pc, #864]	; 8009c0c <mode_Tuning0+0x404>
 80098ac:	f7f9 fcf0 	bl	8003290 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80098b0:	ed9f 2ad7 	vldr	s4, [pc, #860]	; 8009c10 <mode_Tuning0+0x408>
 80098b4:	eddf 1ad7 	vldr	s3, [pc, #860]	; 8009c14 <mode_Tuning0+0x40c>
 80098b8:	ed9f 1ad3 	vldr	s2, [pc, #844]	; 8009c08 <mode_Tuning0+0x400>
 80098bc:	eddf 0ad2 	vldr	s1, [pc, #840]	; 8009c08 <mode_Tuning0+0x400>
 80098c0:	ed9f 0ad5 	vldr	s0, [pc, #852]	; 8009c18 <mode_Tuning0+0x410>
 80098c4:	f7fa f98e 	bl	8003be4 <turning_table2>
			straight_table2(540, 0, 0, 2000, 15000,mode);
 80098c8:	68b8      	ldr	r0, [r7, #8]
 80098ca:	ed9f 2ad4 	vldr	s4, [pc, #848]	; 8009c1c <mode_Tuning0+0x414>
 80098ce:	eddf 1ad4 	vldr	s3, [pc, #848]	; 8009c20 <mode_Tuning0+0x418>
 80098d2:	ed9f 1acd 	vldr	s2, [pc, #820]	; 8009c08 <mode_Tuning0+0x400>
 80098d6:	eddf 0acc 	vldr	s1, [pc, #816]	; 8009c08 <mode_Tuning0+0x400>
 80098da:	ed9f 0acc 	vldr	s0, [pc, #816]	; 8009c0c <mode_Tuning0+0x404>
 80098de:	f7f9 fcd7 	bl	8003290 <straight_table2>
			turning_table2(180, 0, 0, 400, 4000);
 80098e2:	ed9f 2acb 	vldr	s4, [pc, #812]	; 8009c10 <mode_Tuning0+0x408>
 80098e6:	eddf 1acb 	vldr	s3, [pc, #812]	; 8009c14 <mode_Tuning0+0x40c>
 80098ea:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 8009c08 <mode_Tuning0+0x400>
 80098ee:	eddf 0ac6 	vldr	s1, [pc, #792]	; 8009c08 <mode_Tuning0+0x400>
 80098f2:	ed9f 0ac9 	vldr	s0, [pc, #804]	; 8009c18 <mode_Tuning0+0x410>
 80098f6:	f7fa f975 	bl	8003be4 <turning_table2>
			straight_table2(540, 0, 0, 2400, 20000,mode);
 80098fa:	68b8      	ldr	r0, [r7, #8]
 80098fc:	ed9f 2ac9 	vldr	s4, [pc, #804]	; 8009c24 <mode_Tuning0+0x41c>
 8009900:	eddf 1ac9 	vldr	s3, [pc, #804]	; 8009c28 <mode_Tuning0+0x420>
 8009904:	ed9f 1ac0 	vldr	s2, [pc, #768]	; 8009c08 <mode_Tuning0+0x400>
 8009908:	eddf 0abf 	vldr	s1, [pc, #764]	; 8009c08 <mode_Tuning0+0x400>
 800990c:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8009c0c <mode_Tuning0+0x404>
 8009910:	f7f9 fcbe 	bl	8003290 <straight_table2>
			//straight_table2(720, 0, 0, 3000, 20000,mode);
			//straight_table2(450, 0, 0, 1000, 13000,mode);
			//control_test_motor2(0,0,10);
		break;
 8009914:	e1ec      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 1://トレッド幅??ジャイロ
			record_mode = 5;
 8009916:	4bb9      	ldr	r3, [pc, #740]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009918:	2205      	movs	r2, #5
 800991a:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 800991c:	2300      	movs	r3, #0
 800991e:	723b      	strb	r3, [r7, #8]
			straight_table2(400, 0, 0, 400, 3000,mode);
 8009920:	68b8      	ldr	r0, [r7, #8]
 8009922:	ed9f 2ac2 	vldr	s4, [pc, #776]	; 8009c2c <mode_Tuning0+0x424>
 8009926:	eddf 1abb 	vldr	s3, [pc, #748]	; 8009c14 <mode_Tuning0+0x40c>
 800992a:	ed9f 1ab7 	vldr	s2, [pc, #732]	; 8009c08 <mode_Tuning0+0x400>
 800992e:	eddf 0ab6 	vldr	s1, [pc, #728]	; 8009c08 <mode_Tuning0+0x400>
 8009932:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 8009c14 <mode_Tuning0+0x40c>
 8009936:	f7f9 fcab 	bl	8003290 <straight_table2>
			//turning_table2(360*10, 0, 0, 800, 8000);
			//control_test_motor2(1,0,5);
		break;
 800993a:	e1d9      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 2://壁制御
			record_mode=6;
 800993c:	4baf      	ldr	r3, [pc, #700]	; (8009bfc <mode_Tuning0+0x3f4>)
 800993e:	2206      	movs	r2, #6
 8009940:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=1;
 8009942:	2301      	movs	r3, #1
 8009944:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 300, 6000,mode);
 8009946:	68b8      	ldr	r0, [r7, #8]
 8009948:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8009c30 <mode_Tuning0+0x428>
 800994c:	eddf 1ab9 	vldr	s3, [pc, #740]	; 8009c34 <mode_Tuning0+0x42c>
 8009950:	ed9f 1aad 	vldr	s2, [pc, #692]	; 8009c08 <mode_Tuning0+0x400>
 8009954:	eddf 0aac 	vldr	s1, [pc, #688]	; 8009c08 <mode_Tuning0+0x400>
 8009958:	ed9f 0ab7 	vldr	s0, [pc, #732]	; 8009c38 <mode_Tuning0+0x430>
 800995c:	f7f9 fc98 	bl	8003290 <straight_table2>
			//control_test_motor2(0,1,6);
		break;
 8009960:	e1c6      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 3://右スラローム(探索)
			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
 8009962:	68b8      	ldr	r0, [r7, #8]
 8009964:	ed9f 2ab5 	vldr	s4, [pc, #724]	; 8009c3c <mode_Tuning0+0x434>
 8009968:	eddf 1ab2 	vldr	s3, [pc, #712]	; 8009c34 <mode_Tuning0+0x42c>
 800996c:	ed9f 1ab1 	vldr	s2, [pc, #708]	; 8009c34 <mode_Tuning0+0x42c>
 8009970:	eddf 0aa5 	vldr	s1, [pc, #660]	; 8009c08 <mode_Tuning0+0x400>
 8009974:	ed9f 0aa8 	vldr	s0, [pc, #672]	; 8009c18 <mode_Tuning0+0x410>
 8009978:	f7f9 fc8a 	bl	8003290 <straight_table2>
			mollifier_slalom_table(300,-90,500);
 800997c:	ed9f 1aaf 	vldr	s2, [pc, #700]	; 8009c3c <mode_Tuning0+0x434>
 8009980:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8009c40 <mode_Tuning0+0x438>
 8009984:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8009c34 <mode_Tuning0+0x42c>
 8009988:	f7fa fa7a 	bl	8003e80 <mollifier_slalom_table>
			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
 800998c:	68b8      	ldr	r0, [r7, #8]
 800998e:	ed9f 2aab 	vldr	s4, [pc, #684]	; 8009c3c <mode_Tuning0+0x434>
 8009992:	eddf 1aa8 	vldr	s3, [pc, #672]	; 8009c34 <mode_Tuning0+0x42c>
 8009996:	ed9f 1a9c 	vldr	s2, [pc, #624]	; 8009c08 <mode_Tuning0+0x400>
 800999a:	eddf 0aa6 	vldr	s1, [pc, #664]	; 8009c34 <mode_Tuning0+0x42c>
 800999e:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 8009c18 <mode_Tuning0+0x410>
 80099a2:	f7f9 fc75 	bl	8003290 <straight_table2>
			//testturning(speed500_exploration,0,0,0,0,0);
		break;
 80099a6:	e1a3      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 4://左スラローム(探索)
			straight_table2(180, 0, 300, 300,300 * 300  / 2 / 90,mode);
 80099a8:	68b8      	ldr	r0, [r7, #8]
 80099aa:	ed9f 2aa4 	vldr	s4, [pc, #656]	; 8009c3c <mode_Tuning0+0x434>
 80099ae:	eddf 1aa1 	vldr	s3, [pc, #644]	; 8009c34 <mode_Tuning0+0x42c>
 80099b2:	ed9f 1aa0 	vldr	s2, [pc, #640]	; 8009c34 <mode_Tuning0+0x42c>
 80099b6:	eddf 0a94 	vldr	s1, [pc, #592]	; 8009c08 <mode_Tuning0+0x400>
 80099ba:	ed9f 0a97 	vldr	s0, [pc, #604]	; 8009c18 <mode_Tuning0+0x410>
 80099be:	f7f9 fc67 	bl	8003290 <straight_table2>
			mollifier_slalom_table(300,90,500);
 80099c2:	ed9f 1a9e 	vldr	s2, [pc, #632]	; 8009c3c <mode_Tuning0+0x434>
 80099c6:	eddf 0a9f 	vldr	s1, [pc, #636]	; 8009c44 <mode_Tuning0+0x43c>
 80099ca:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 8009c34 <mode_Tuning0+0x42c>
 80099ce:	f7fa fa57 	bl	8003e80 <mollifier_slalom_table>
			straight_table2(180, 300, 0, 300,300 * 300  / 2 / 90,mode);
 80099d2:	68b8      	ldr	r0, [r7, #8]
 80099d4:	ed9f 2a99 	vldr	s4, [pc, #612]	; 8009c3c <mode_Tuning0+0x434>
 80099d8:	eddf 1a96 	vldr	s3, [pc, #600]	; 8009c34 <mode_Tuning0+0x42c>
 80099dc:	ed9f 1a8a 	vldr	s2, [pc, #552]	; 8009c08 <mode_Tuning0+0x400>
 80099e0:	eddf 0a94 	vldr	s1, [pc, #592]	; 8009c34 <mode_Tuning0+0x42c>
 80099e4:	ed9f 0a8c 	vldr	s0, [pc, #560]	; 8009c18 <mode_Tuning0+0x410>
 80099e8:	f7f9 fc52 	bl	8003290 <straight_table2>
			//testturning(speed500_exploration,1,0,0,0,0);
		break;
 80099ec:	e180      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 5://斜め直進(制御なし)
			record_mode=3;
 80099ee:	4b83      	ldr	r3, [pc, #524]	; (8009bfc <mode_Tuning0+0x3f4>)
 80099f0:	2203      	movs	r2, #3
 80099f2:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 80099f8:	68b8      	ldr	r0, [r7, #8]
 80099fa:	ed9f 2a8d 	vldr	s4, [pc, #564]	; 8009c30 <mode_Tuning0+0x428>
 80099fe:	eddf 1a8f 	vldr	s3, [pc, #572]	; 8009c3c <mode_Tuning0+0x434>
 8009a02:	ed9f 1a81 	vldr	s2, [pc, #516]	; 8009c08 <mode_Tuning0+0x400>
 8009a06:	eddf 0a80 	vldr	s1, [pc, #512]	; 8009c08 <mode_Tuning0+0x400>
 8009a0a:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8009c48 <mode_Tuning0+0x440>
 8009a0e:	f7f9 fc3f 	bl	8003290 <straight_table2>
		break;
 8009a12:	e16d      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 6://斜め直進(制御あり)
			record_mode=7;//or3
 8009a14:	4b79      	ldr	r3, [pc, #484]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009a16:	2207      	movs	r2, #7
 8009a18:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 500, 6000,mode);
 8009a1e:	68b8      	ldr	r0, [r7, #8]
 8009a20:	ed9f 2a83 	vldr	s4, [pc, #524]	; 8009c30 <mode_Tuning0+0x428>
 8009a24:	eddf 1a85 	vldr	s3, [pc, #532]	; 8009c3c <mode_Tuning0+0x434>
 8009a28:	ed9f 1a77 	vldr	s2, [pc, #476]	; 8009c08 <mode_Tuning0+0x400>
 8009a2c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8009c08 <mode_Tuning0+0x400>
 8009a30:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8009c48 <mode_Tuning0+0x440>
 8009a34:	f7f9 fc2c 	bl	8003290 <straight_table2>
		break;
 8009a38:	e15a      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 7://斜め直進(平松さん式制御あり)
			record_mode=7;
 8009a3a:	4b70      	ldr	r3, [pc, #448]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009a3c:	2207      	movs	r2, #7
 8009a3e:	701a      	strb	r2, [r3, #0]
			mode.WallControlMode=3;
 8009a40:	2303      	movs	r3, #3
 8009a42:	723b      	strb	r3, [r7, #8]
			straight_table2(180*3*sqrt(2), 0, 0, 2000, 6000,mode);
 8009a44:	68b8      	ldr	r0, [r7, #8]
 8009a46:	ed9f 2a7a 	vldr	s4, [pc, #488]	; 8009c30 <mode_Tuning0+0x428>
 8009a4a:	eddf 1a75 	vldr	s3, [pc, #468]	; 8009c20 <mode_Tuning0+0x418>
 8009a4e:	ed9f 1a6e 	vldr	s2, [pc, #440]	; 8009c08 <mode_Tuning0+0x400>
 8009a52:	eddf 0a6d 	vldr	s1, [pc, #436]	; 8009c08 <mode_Tuning0+0x400>
 8009a56:	ed9f 0a7c 	vldr	s0, [pc, #496]	; 8009c48 <mode_Tuning0+0x440>
 8009a5a:	f7f9 fc19 	bl	8003290 <straight_table2>
		break;
 8009a5e:	e147      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 8://宴会芸
			record_mode=2;
 8009a60:	4b66      	ldr	r3, [pc, #408]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009a62:	2202      	movs	r2, #2
 8009a64:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8009a66:	2001      	movs	r0, #1
 8009a68:	f7fc ff0a 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8009a6c:	2001      	movs	r0, #1
 8009a6e:	f7fc ff19 	bl	80068a4 <pl_l_blue_LED>
			no_angle();
 8009a72:	f7fa f9bf 	bl	8003df4 <no_angle>
			pl_r_blue_LED(OFF);
 8009a76:	2000      	movs	r0, #0
 8009a78:	f7fc ff02 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	f7fc ff11 	bl	80068a4 <pl_l_blue_LED>
		break;
 8009a82:	e135      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 9://システム同定enc
			record_mode=6;
 8009a84:	4b5d      	ldr	r3, [pc, #372]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009a86:	2206      	movs	r2, #6
 8009a88:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	f7fc fef8 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8009a90:	2001      	movs	r0, #1
 8009a92:	f7fc ff07 	bl	80068a4 <pl_l_blue_LED>
			straight_table_ff(90, 0, 300, 300, 500);
 8009a96:	ed9f 2a69 	vldr	s4, [pc, #420]	; 8009c3c <mode_Tuning0+0x434>
 8009a9a:	eddf 1a66 	vldr	s3, [pc, #408]	; 8009c34 <mode_Tuning0+0x42c>
 8009a9e:	ed9f 1a65 	vldr	s2, [pc, #404]	; 8009c34 <mode_Tuning0+0x42c>
 8009aa2:	eddf 0a59 	vldr	s1, [pc, #356]	; 8009c08 <mode_Tuning0+0x400>
 8009aa6:	ed9f 0a67 	vldr	s0, [pc, #412]	; 8009c44 <mode_Tuning0+0x43c>
 8009aaa:	f7fa fab5 	bl	8004018 <straight_table_ff>
			straight_table_ff(90, 300, 600, 600, 1500);
 8009aae:	ed9f 2a67 	vldr	s4, [pc, #412]	; 8009c4c <mode_Tuning0+0x444>
 8009ab2:	eddf 1a67 	vldr	s3, [pc, #412]	; 8009c50 <mode_Tuning0+0x448>
 8009ab6:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8009c50 <mode_Tuning0+0x448>
 8009aba:	eddf 0a5e 	vldr	s1, [pc, #376]	; 8009c34 <mode_Tuning0+0x42c>
 8009abe:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8009c44 <mode_Tuning0+0x43c>
 8009ac2:	f7fa faa9 	bl	8004018 <straight_table_ff>
			straight_table_ff(90, 600, 300, 600, 1500);
 8009ac6:	ed9f 2a61 	vldr	s4, [pc, #388]	; 8009c4c <mode_Tuning0+0x444>
 8009aca:	eddf 1a61 	vldr	s3, [pc, #388]	; 8009c50 <mode_Tuning0+0x448>
 8009ace:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8009c34 <mode_Tuning0+0x42c>
 8009ad2:	eddf 0a5f 	vldr	s1, [pc, #380]	; 8009c50 <mode_Tuning0+0x448>
 8009ad6:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8009c44 <mode_Tuning0+0x43c>
 8009ada:	f7fa fa9d 	bl	8004018 <straight_table_ff>
			straight_table_ff(90, 300, 0, 300, 500);
 8009ade:	ed9f 2a57 	vldr	s4, [pc, #348]	; 8009c3c <mode_Tuning0+0x434>
 8009ae2:	eddf 1a54 	vldr	s3, [pc, #336]	; 8009c34 <mode_Tuning0+0x42c>
 8009ae6:	ed9f 1a48 	vldr	s2, [pc, #288]	; 8009c08 <mode_Tuning0+0x400>
 8009aea:	eddf 0a52 	vldr	s1, [pc, #328]	; 8009c34 <mode_Tuning0+0x42c>
 8009aee:	ed9f 0a55 	vldr	s0, [pc, #340]	; 8009c44 <mode_Tuning0+0x43c>
 8009af2:	f7fa fa91 	bl	8004018 <straight_table_ff>
//				if(record_rupe_flag==1){
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 8009af6:	2000      	movs	r0, #0
 8009af8:	f7fc fec2 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8009afc:	2000      	movs	r0, #0
 8009afe:	f7fc fed1 	bl	80068a4 <pl_l_blue_LED>
		break;
 8009b02:	e0f5      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 10://システム同定gyro
			record_mode=2;
 8009b04:	4b3d      	ldr	r3, [pc, #244]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009b06:	2202      	movs	r2, #2
 8009b08:	701a      	strb	r2, [r3, #0]
			pl_r_blue_LED(ON);
 8009b0a:	2001      	movs	r0, #1
 8009b0c:	f7fc feb8 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8009b10:	2001      	movs	r0, #1
 8009b12:	f7fc fec7 	bl	80068a4 <pl_l_blue_LED>
			turning_table_ff(90, 0, 300, 300, 500);
 8009b16:	ed9f 2a49 	vldr	s4, [pc, #292]	; 8009c3c <mode_Tuning0+0x434>
 8009b1a:	eddf 1a46 	vldr	s3, [pc, #280]	; 8009c34 <mode_Tuning0+0x42c>
 8009b1e:	ed9f 1a45 	vldr	s2, [pc, #276]	; 8009c34 <mode_Tuning0+0x42c>
 8009b22:	eddf 0a39 	vldr	s1, [pc, #228]	; 8009c08 <mode_Tuning0+0x400>
 8009b26:	ed9f 0a47 	vldr	s0, [pc, #284]	; 8009c44 <mode_Tuning0+0x43c>
 8009b2a:	f7fa fbad 	bl	8004288 <turning_table_ff>
			turning_table_ff(90, 300, 600, 600, 1500);
 8009b2e:	ed9f 2a47 	vldr	s4, [pc, #284]	; 8009c4c <mode_Tuning0+0x444>
 8009b32:	eddf 1a47 	vldr	s3, [pc, #284]	; 8009c50 <mode_Tuning0+0x448>
 8009b36:	ed9f 1a46 	vldr	s2, [pc, #280]	; 8009c50 <mode_Tuning0+0x448>
 8009b3a:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8009c34 <mode_Tuning0+0x42c>
 8009b3e:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8009c44 <mode_Tuning0+0x43c>
 8009b42:	f7fa fba1 	bl	8004288 <turning_table_ff>
			turning_table_ff(90, 600, 300, 600, 1500);
 8009b46:	ed9f 2a41 	vldr	s4, [pc, #260]	; 8009c4c <mode_Tuning0+0x444>
 8009b4a:	eddf 1a41 	vldr	s3, [pc, #260]	; 8009c50 <mode_Tuning0+0x448>
 8009b4e:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8009c34 <mode_Tuning0+0x42c>
 8009b52:	eddf 0a3f 	vldr	s1, [pc, #252]	; 8009c50 <mode_Tuning0+0x448>
 8009b56:	ed9f 0a3b 	vldr	s0, [pc, #236]	; 8009c44 <mode_Tuning0+0x43c>
 8009b5a:	f7fa fb95 	bl	8004288 <turning_table_ff>
			turning_table_ff(90, 300, 0, 300, 500);
 8009b5e:	ed9f 2a37 	vldr	s4, [pc, #220]	; 8009c3c <mode_Tuning0+0x434>
 8009b62:	eddf 1a34 	vldr	s3, [pc, #208]	; 8009c34 <mode_Tuning0+0x42c>
 8009b66:	ed9f 1a28 	vldr	s2, [pc, #160]	; 8009c08 <mode_Tuning0+0x400>
 8009b6a:	eddf 0a32 	vldr	s1, [pc, #200]	; 8009c34 <mode_Tuning0+0x42c>
 8009b6e:	ed9f 0a35 	vldr	s0, [pc, #212]	; 8009c44 <mode_Tuning0+0x43c>
 8009b72:	f7fa fb89 	bl	8004288 <turning_table_ff>
//					record_mode=0;
//					break;
//				}
//			}
//			pl_DriveMotor_stop();
			pl_r_blue_LED(OFF);
 8009b76:	2000      	movs	r0, #0
 8009b78:	f7fc fe82 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8009b7c:	2000      	movs	r0, #0
 8009b7e:	f7fc fe91 	bl	80068a4 <pl_l_blue_LED>
		break;
 8009b82:	e0b5      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 11:
		record_mode=1;
 8009b84:	4b1d      	ldr	r3, [pc, #116]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009b86:	2201      	movs	r2, #1
 8009b88:	701a      	strb	r2, [r3, #0]
		mode.WallControlMode=0;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	723b      	strb	r3, [r7, #8]
		straight_table2(BACK_TO_CENTER, 0, 0, 300, 6000,mode);
 8009b8e:	68b8      	ldr	r0, [r7, #8]
 8009b90:	ed9f 2a27 	vldr	s4, [pc, #156]	; 8009c30 <mode_Tuning0+0x428>
 8009b94:	eddf 1a27 	vldr	s3, [pc, #156]	; 8009c34 <mode_Tuning0+0x42c>
 8009b98:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 8009c08 <mode_Tuning0+0x400>
 8009b9c:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8009c08 <mode_Tuning0+0x400>
 8009ba0:	eeb3 0a09 	vmov.f32	s0, #57	; 0x41c80000  25.0
 8009ba4:	f7f9 fb74 	bl	8003290 <straight_table2>
		break;
 8009ba8:	e0a2      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 12:
		record_mode=17;
 8009baa:	4b14      	ldr	r3, [pc, #80]	; (8009bfc <mode_Tuning0+0x3f4>)
 8009bac:	2211      	movs	r2, #17
 8009bae:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<40;i++){
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	60fb      	str	r3, [r7, #12]
 8009bb4:	e00e      	b.n	8009bd4 <mode_Tuning0+0x3cc>
		turning_table2(90, 0, 0, 400, 3000);
 8009bb6:	ed9f 2a1d 	vldr	s4, [pc, #116]	; 8009c2c <mode_Tuning0+0x424>
 8009bba:	eddf 1a16 	vldr	s3, [pc, #88]	; 8009c14 <mode_Tuning0+0x40c>
 8009bbe:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8009c08 <mode_Tuning0+0x400>
 8009bc2:	eddf 0a11 	vldr	s1, [pc, #68]	; 8009c08 <mode_Tuning0+0x400>
 8009bc6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8009c44 <mode_Tuning0+0x43c>
 8009bca:	f7fa f80b 	bl	8003be4 <turning_table2>
		for(int i=0;i<40;i++){
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	2b27      	cmp	r3, #39	; 0x27
 8009bd8:	dded      	ble.n	8009bb6 <mode_Tuning0+0x3ae>
		}
		break;
 8009bda:	e089      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 13:
			pl_r_blue_LED(ON);
 8009bdc:	2001      	movs	r0, #1
 8009bde:	f7fc fe4f 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(ON);
 8009be2:	2001      	movs	r0, #1
 8009be4:	f7fc fe5e 	bl	80068a4 <pl_l_blue_LED>
			no_frontwall_straight();
 8009be8:	f7fa f9de 	bl	8003fa8 <no_frontwall_straight>
			pl_r_blue_LED(OFF);
 8009bec:	2000      	movs	r0, #0
 8009bee:	f7fc fe47 	bl	8006880 <pl_r_blue_LED>
			pl_l_blue_LED(OFF);
 8009bf2:	2000      	movs	r0, #0
 8009bf4:	f7fc fe56 	bl	80068a4 <pl_l_blue_LED>
		break;
 8009bf8:	e07a      	b.n	8009cf0 <mode_Tuning0+0x4e8>
 8009bfa:	bf00      	nop
 8009bfc:	2000c388 	.word	0x2000c388
 8009c00:	464b2000 	.word	0x464b2000
 8009c04:	44c80000 	.word	0x44c80000
 8009c08:	00000000 	.word	0x00000000
 8009c0c:	44070000 	.word	0x44070000
 8009c10:	457a0000 	.word	0x457a0000
 8009c14:	43c80000 	.word	0x43c80000
 8009c18:	43340000 	.word	0x43340000
 8009c1c:	466a6000 	.word	0x466a6000
 8009c20:	44fa0000 	.word	0x44fa0000
 8009c24:	469c4000 	.word	0x469c4000
 8009c28:	45160000 	.word	0x45160000
 8009c2c:	453b8000 	.word	0x453b8000
 8009c30:	45bb8000 	.word	0x45bb8000
 8009c34:	43960000 	.word	0x43960000
 8009c38:	44340000 	.word	0x44340000
 8009c3c:	43fa0000 	.word	0x43fa0000
 8009c40:	c2b40000 	.word	0xc2b40000
 8009c44:	42b40000 	.word	0x42b40000
 8009c48:	443eeb39 	.word	0x443eeb39
 8009c4c:	44bb8000 	.word	0x44bb8000
 8009c50:	44160000 	.word	0x44160000
		case 14://宴会芸＋吸引
			highspeed_mode = 1;
 8009c54:	4b43      	ldr	r3, [pc, #268]	; (8009d64 <mode_Tuning0+0x55c>)
 8009c56:	2201      	movs	r2, #1
 8009c58:	701a      	strb	r2, [r3, #0]
			pl_FunMotor_duty(0.95);
 8009c5a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8009d68 <mode_Tuning0+0x560>
 8009c5e:	f7fd f959 	bl	8006f14 <pl_FunMotor_duty>
			pl_FunMotor_start();
 8009c62:	f7fd f943 	bl	8006eec <pl_FunMotor_start>
			HAL_Delay(600);
 8009c66:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009c6a:	f001 f819 	bl	800aca0 <HAL_Delay>
			reset_gyro();
 8009c6e:	f7f7 fdc7 	bl	8001800 <reset_gyro>
			reset_speed();
 8009c72:	f7f7 f9d1 	bl	8001018 <reset_speed>
			reset_distance();
 8009c76:	f7f7 f991 	bl	8000f9c <reset_distance>
			clear_Ierror();
 8009c7a:	f7fa fef3 	bl	8004a64 <clear_Ierror>
			record_mode=3;
 8009c7e:	4b3b      	ldr	r3, [pc, #236]	; (8009d6c <mode_Tuning0+0x564>)
 8009c80:	2203      	movs	r2, #3
 8009c82:	701a      	strb	r2, [r3, #0]
//			mode.WallControlMode=0;
//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
			mode.WallControlMode=1;
 8009c84:	2301      	movs	r3, #1
 8009c86:	723b      	strb	r3, [r7, #8]
			straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8009c88:	68b8      	ldr	r0, [r7, #8]
 8009c8a:	ed9f 2a39 	vldr	s4, [pc, #228]	; 8009d70 <mode_Tuning0+0x568>
 8009c8e:	eddf 1a39 	vldr	s3, [pc, #228]	; 8009d74 <mode_Tuning0+0x56c>
 8009c92:	ed9f 1a39 	vldr	s2, [pc, #228]	; 8009d78 <mode_Tuning0+0x570>
 8009c96:	eddf 0a38 	vldr	s1, [pc, #224]	; 8009d78 <mode_Tuning0+0x570>
 8009c9a:	ed9f 0a38 	vldr	s0, [pc, #224]	; 8009d7c <mode_Tuning0+0x574>
 8009c9e:	f7f9 faf7 	bl	8003290 <straight_table2>
		break;
 8009ca2:	e025      	b.n	8009cf0 <mode_Tuning0+0x4e8>
		case 15:
			highspeed_mode = 1;
 8009ca4:	4b2f      	ldr	r3, [pc, #188]	; (8009d64 <mode_Tuning0+0x55c>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	701a      	strb	r2, [r3, #0]
						pl_FunMotor_duty(0.95);
 8009caa:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8009d68 <mode_Tuning0+0x560>
 8009cae:	f7fd f931 	bl	8006f14 <pl_FunMotor_duty>
						//pl_FunMotor_start();
						HAL_Delay(600);
 8009cb2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8009cb6:	f000 fff3 	bl	800aca0 <HAL_Delay>
						reset_gyro();
 8009cba:	f7f7 fda1 	bl	8001800 <reset_gyro>
						reset_speed();
 8009cbe:	f7f7 f9ab 	bl	8001018 <reset_speed>
						reset_distance();
 8009cc2:	f7f7 f96b 	bl	8000f9c <reset_distance>
						clear_Ierror();
 8009cc6:	f7fa fecd 	bl	8004a64 <clear_Ierror>
						record_mode=3;
 8009cca:	4b28      	ldr	r3, [pc, #160]	; (8009d6c <mode_Tuning0+0x564>)
 8009ccc:	2203      	movs	r2, #3
 8009cce:	701a      	strb	r2, [r3, #0]
			//			mode.WallControlMode=0;
			//			straight_table2(90*32, 0, 0, 4000, 17000,mode);
						mode.WallControlMode=1;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	723b      	strb	r3, [r7, #8]
						straight_table2(90*8, 0, 0, 1000, 7000,mode);
 8009cd4:	68b8      	ldr	r0, [r7, #8]
 8009cd6:	ed9f 2a26 	vldr	s4, [pc, #152]	; 8009d70 <mode_Tuning0+0x568>
 8009cda:	eddf 1a26 	vldr	s3, [pc, #152]	; 8009d74 <mode_Tuning0+0x56c>
 8009cde:	ed9f 1a26 	vldr	s2, [pc, #152]	; 8009d78 <mode_Tuning0+0x570>
 8009ce2:	eddf 0a25 	vldr	s1, [pc, #148]	; 8009d78 <mode_Tuning0+0x570>
 8009ce6:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8009d7c <mode_Tuning0+0x574>
 8009cea:	f7f9 fad1 	bl	8003290 <straight_table2>
//			record_mode=1;
//			mode.WallControlMode=0;
//			straight_table2(BACK_TO_CENTER_SLANT, 0, 0, 300, 6000,mode);
		break;
 8009cee:	bf00      	nop
	}
	record_mode=0;
 8009cf0:	4b1e      	ldr	r3, [pc, #120]	; (8009d6c <mode_Tuning0+0x564>)
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	701a      	strb	r2, [r3, #0]
	pl_R_DriveMotor_mode(MOTOR_BREAK);
 8009cf6:	2003      	movs	r0, #3
 8009cf8:	f7fd f8a0 	bl	8006e3c <pl_R_DriveMotor_mode>
	pl_L_DriveMotor_mode(MOTOR_BREAK);
 8009cfc:	2003      	movs	r0, #3
 8009cfe:	f7fd f875 	bl	8006dec <pl_L_DriveMotor_mode>
	wait_ms_NoReset(500);
 8009d02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d06:	f7fd fb6b 	bl	80073e0 <wait_ms_NoReset>
	pl_FunMotor_stop();
 8009d0a:	f7fd f8f9 	bl	8006f00 <pl_FunMotor_stop>
	wait_ms_NoReset(500);
 8009d0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009d12:	f7fd fb65 	bl	80073e0 <wait_ms_NoReset>
	pl_DriveMotor_standby(OFF);
 8009d16:	2000      	movs	r0, #0
 8009d18:	f7fd f85e 	bl	8006dd8 <pl_DriveMotor_standby>
	record_mode=0;
 8009d1c:	4b13      	ldr	r3, [pc, #76]	; (8009d6c <mode_Tuning0+0x564>)
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
	//pl_FunMotor_stop();
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8009d22:	e002      	b.n	8009d2a <mode_Tuning0+0x522>
		HAL_Delay(1);
 8009d24:	2001      	movs	r0, #1
 8009d26:	f000 ffbb 	bl	800aca0 <HAL_Delay>
	while (g_sensor[0][0] <= SENSOR_FINGER_0 || g_sensor[2][0] <= SENSOR_FINGER_2 || g_sensor[4][0] <= SENSOR_FINGER_4) {
 8009d2a:	4b15      	ldr	r3, [pc, #84]	; (8009d80 <mode_Tuning0+0x578>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009d32:	ddf7      	ble.n	8009d24 <mode_Tuning0+0x51c>
 8009d34:	4b12      	ldr	r3, [pc, #72]	; (8009d80 <mode_Tuning0+0x578>)
 8009d36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009d3a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009d3e:	ddf1      	ble.n	8009d24 <mode_Tuning0+0x51c>
 8009d40:	4b0f      	ldr	r3, [pc, #60]	; (8009d80 <mode_Tuning0+0x578>)
 8009d42:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8009d46:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8009d4a:	ddeb      	ble.n	8009d24 <mode_Tuning0+0x51c>
	}
	pl_r_blue_LED(ON);
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7fc fd97 	bl	8006880 <pl_r_blue_LED>
	pl_l_blue_LED(ON);
 8009d52:	2001      	movs	r0, #1
 8009d54:	f7fc fda6 	bl	80068a4 <pl_l_blue_LED>
	record_print();
 8009d58:	f000 f870 	bl	8009e3c <record_print>



}
 8009d5c:	bf00      	nop
 8009d5e:	3710      	adds	r7, #16
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bd80      	pop	{r7, pc}
 8009d64:	200007e8 	.word	0x200007e8
 8009d68:	3f733333 	.word	0x3f733333
 8009d6c:	2000c388 	.word	0x2000c388
 8009d70:	45dac000 	.word	0x45dac000
 8009d74:	447a0000 	.word	0x447a0000
 8009d78:	00000000 	.word	0x00000000
 8009d7c:	44340000 	.word	0x44340000
 8009d80:	20000298 	.word	0x20000298

08009d84 <record_reset>:
char record_rupe_flag;

//int SEN_record[5][15];
//int SEN_recordD[5][15];

void record_reset(void) {
 8009d84:	b480      	push	{r7}
 8009d86:	af00      	add	r7, sp, #0
	record_mode = 0;
 8009d88:	4b06      	ldr	r3, [pc, #24]	; (8009da4 <record_reset+0x20>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	701a      	strb	r2, [r3, #0]
	record_time = 0;
 8009d8e:	4b06      	ldr	r3, [pc, #24]	; (8009da8 <record_reset+0x24>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	601a      	str	r2, [r3, #0]
	record_rupe_flag = 0;
 8009d94:	4b05      	ldr	r3, [pc, #20]	; (8009dac <record_reset+0x28>)
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
}
 8009d9a:	bf00      	nop
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr
 8009da4:	2000c388 	.word	0x2000c388
 8009da8:	2000c38c 	.word	0x2000c38c
 8009dac:	2000c394 	.word	0x2000c394

08009db0 <record_data>:

void record_data(float *input_record_data, int numlen) {
 8009db0:	b490      	push	{r4, r7}
 8009db2:	b084      	sub	sp, #16
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]

	for (int record_count = 0; record_count < numlen; record_count++) {
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e013      	b.n	8009de8 <record_data+0x38>
		record_value[record_count][record_time] =
				input_record_data[record_count];
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	441a      	add	r2, r3
		record_value[record_count][record_time] =
 8009dc8:	4b18      	ldr	r3, [pc, #96]	; (8009e2c <record_data+0x7c>)
 8009dca:	681b      	ldr	r3, [r3, #0]
				input_record_data[record_count];
 8009dcc:	6812      	ldr	r2, [r2, #0]
		record_value[record_count][record_time] =
 8009dce:	4818      	ldr	r0, [pc, #96]	; (8009e30 <record_data+0x80>)
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8009dd6:	fb04 f101 	mul.w	r1, r4, r1
 8009dda:	440b      	add	r3, r1
 8009ddc:	009b      	lsls	r3, r3, #2
 8009dde:	4403      	add	r3, r0
 8009de0:	601a      	str	r2, [r3, #0]
	for (int record_count = 0; record_count < numlen; record_count++) {
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	3301      	adds	r3, #1
 8009de6:	60fb      	str	r3, [r7, #12]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	dbe7      	blt.n	8009dc0 <record_data+0x10>
	}
	if (record_rupe_flag == 1) {
 8009df0:	4b10      	ldr	r3, [pc, #64]	; (8009e34 <record_data+0x84>)
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d103      	bne.n	8009e00 <record_data+0x50>
		record_end_point = record_time;
 8009df8:	4b0c      	ldr	r3, [pc, #48]	; (8009e2c <record_data+0x7c>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a0e      	ldr	r2, [pc, #56]	; (8009e38 <record_data+0x88>)
 8009dfe:	6013      	str	r3, [r2, #0]
	}
	record_time++;
 8009e00:	4b0a      	ldr	r3, [pc, #40]	; (8009e2c <record_data+0x7c>)
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	3301      	adds	r3, #1
 8009e06:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <record_data+0x7c>)
 8009e08:	6013      	str	r3, [r2, #0]
	if (record_time >= max_record_time) {
 8009e0a:	4b08      	ldr	r3, [pc, #32]	; (8009e2c <record_data+0x7c>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009e12:	4293      	cmp	r3, r2
 8009e14:	dd05      	ble.n	8009e22 <record_data+0x72>
		record_time = 0;
 8009e16:	4b05      	ldr	r3, [pc, #20]	; (8009e2c <record_data+0x7c>)
 8009e18:	2200      	movs	r2, #0
 8009e1a:	601a      	str	r2, [r3, #0]
		record_rupe_flag = 1;
 8009e1c:	4b05      	ldr	r3, [pc, #20]	; (8009e34 <record_data+0x84>)
 8009e1e:	2201      	movs	r2, #1
 8009e20:	701a      	strb	r2, [r3, #0]
	}

}
 8009e22:	bf00      	nop
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bc90      	pop	{r4, r7}
 8009e2a:	4770      	bx	lr
 8009e2c:	2000c38c 	.word	0x2000c38c
 8009e30:	20000808 	.word	0x20000808
 8009e34:	2000c394 	.word	0x2000c394
 8009e38:	2000c390 	.word	0x2000c390

08009e3c <record_print>:

void record_print(void) {
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
	int a, time_index;
	if (record_rupe_flag == 0) {
 8009e42:	4b3a      	ldr	r3, [pc, #232]	; (8009f2c <record_print+0xf0>)
 8009e44:	781b      	ldrb	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d12e      	bne.n	8009ea8 <record_print+0x6c>
		for (a = 0; a <= record_time - 1; a++) {
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
 8009e4e:	e025      	b.n	8009e9c <record_print+0x60>

			printf("%d", a);
 8009e50:	68f9      	ldr	r1, [r7, #12]
 8009e52:	4837      	ldr	r0, [pc, #220]	; (8009f30 <record_print+0xf4>)
 8009e54:	f008 fc0e 	bl	8012674 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	607b      	str	r3, [r7, #4]
 8009e5c:	e015      	b.n	8009e8a <record_print+0x4e>
					record_count++) {
				printf(",%f", record_value[record_count][a]);
 8009e5e:	4935      	ldr	r1, [pc, #212]	; (8009f34 <record_print+0xf8>)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009e66:	fb03 f202 	mul.w	r2, r3, r2
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7f6 fb8f 	bl	8000598 <__aeabi_f2d>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	482e      	ldr	r0, [pc, #184]	; (8009f38 <record_print+0xfc>)
 8009e80:	f008 fbf8 	bl	8012674 <iprintf>
					record_count++) {
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	3301      	adds	r3, #1
 8009e88:	607b      	str	r3, [r7, #4]
			for (int record_count = 0; record_count < max_record_num;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2b03      	cmp	r3, #3
 8009e8e:	dde6      	ble.n	8009e5e <record_print+0x22>
			}
			printf("\n");
 8009e90:	200a      	movs	r0, #10
 8009e92:	f008 fc07 	bl	80126a4 <putchar>
		for (a = 0; a <= record_time - 1; a++) {
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	4b27      	ldr	r3, [pc, #156]	; (8009f3c <record_print+0x100>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	68fa      	ldr	r2, [r7, #12]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	dbd4      	blt.n	8009e50 <record_print+0x14>
			}
			printf("\n");
		}
	}

}
 8009ea6:	e03c      	b.n	8009f22 <record_print+0xe6>
		for (a = 0; a <= max_record_time - 1; a++) {
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	e034      	b.n	8009f18 <record_print+0xdc>
			time_index = record_end_point + 1 + a;
 8009eae:	4b24      	ldr	r3, [pc, #144]	; (8009f40 <record_print+0x104>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	3301      	adds	r3, #1
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	60bb      	str	r3, [r7, #8]
			if (time_index >= max_record_time) {
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	dd03      	ble.n	8009ecc <record_print+0x90>
				time_index -= max_record_time;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	f6a3 33b8 	subw	r3, r3, #3000	; 0xbb8
 8009eca:	60bb      	str	r3, [r7, #8]
			printf("%d", a);
 8009ecc:	68f9      	ldr	r1, [r7, #12]
 8009ece:	4818      	ldr	r0, [pc, #96]	; (8009f30 <record_print+0xf4>)
 8009ed0:	f008 fbd0 	bl	8012674 <iprintf>
			for (int record_count = 0; record_count < max_record_num;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	603b      	str	r3, [r7, #0]
 8009ed8:	e015      	b.n	8009f06 <record_print+0xca>
				printf(",%f", record_value[record_count][time_index]);
 8009eda:	4916      	ldr	r1, [pc, #88]	; (8009f34 <record_print+0xf8>)
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8009ee2:	fb03 f202 	mul.w	r2, r3, r2
 8009ee6:	68bb      	ldr	r3, [r7, #8]
 8009ee8:	4413      	add	r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7f6 fb51 	bl	8000598 <__aeabi_f2d>
 8009ef6:	4602      	mov	r2, r0
 8009ef8:	460b      	mov	r3, r1
 8009efa:	480f      	ldr	r0, [pc, #60]	; (8009f38 <record_print+0xfc>)
 8009efc:	f008 fbba 	bl	8012674 <iprintf>
					record_count++) {
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	3301      	adds	r3, #1
 8009f04:	603b      	str	r3, [r7, #0]
			for (int record_count = 0; record_count < max_record_num;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	dde6      	ble.n	8009eda <record_print+0x9e>
			printf("\n");
 8009f0c:	200a      	movs	r0, #10
 8009f0e:	f008 fbc9 	bl	80126a4 <putchar>
		for (a = 0; a <= max_record_time - 1; a++) {
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	3301      	adds	r3, #1
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	ddc5      	ble.n	8009eae <record_print+0x72>
}
 8009f22:	bf00      	nop
 8009f24:	3710      	adds	r7, #16
 8009f26:	46bd      	mov	sp, r7
 8009f28:	bd80      	pop	{r7, pc}
 8009f2a:	bf00      	nop
 8009f2c:	2000c394 	.word	0x2000c394
 8009f30:	08014e14 	.word	0x08014e14
 8009f34:	20000808 	.word	0x20000808
 8009f38:	08014e18 	.word	0x08014e18
 8009f3c:	2000c38c 	.word	0x2000c38c
 8009f40:	2000c390 	.word	0x2000c390

08009f44 <interrupt_record>:

void interrupt_record(void) {
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0

	float r_data[4];

	if (record_mode == 1) {
 8009f4a:	4b61      	ldr	r3, [pc, #388]	; (800a0d0 <interrupt_record+0x18c>)
 8009f4c:	781b      	ldrb	r3, [r3, #0]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d110      	bne.n	8009f74 <interrupt_record+0x30>
			r_data[0] = E_speedR;
 8009f52:	4b60      	ldr	r3, [pc, #384]	; (800a0d4 <interrupt_record+0x190>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	603b      	str	r3, [r7, #0]
			r_data[1] = E_speedL;
 8009f58:	4b5f      	ldr	r3, [pc, #380]	; (800a0d8 <interrupt_record+0x194>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceR;
 8009f5e:	4b5f      	ldr	r3, [pc, #380]	; (800a0dc <interrupt_record+0x198>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60bb      	str	r3, [r7, #8]
			r_data[3] = E_distanceL;
 8009f64:	4b5e      	ldr	r3, [pc, #376]	; (800a0e0 <interrupt_record+0x19c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	2104      	movs	r1, #4
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ff1e 	bl	8009db0 <record_data>
		}
	if (record_mode == 2) {
 8009f74:	4b56      	ldr	r3, [pc, #344]	; (800a0d0 <interrupt_record+0x18c>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d110      	bne.n	8009f9e <interrupt_record+0x5a>
				r_data[0] = angle_speed;
 8009f7c:	4b59      	ldr	r3, [pc, #356]	; (800a0e4 <interrupt_record+0x1a0>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	603b      	str	r3, [r7, #0]
				r_data[1] = angle;
 8009f82:	4b59      	ldr	r3, [pc, #356]	; (800a0e8 <interrupt_record+0x1a4>)
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	607b      	str	r3, [r7, #4]
				r_data[2] = gf_speed;
 8009f88:	4b58      	ldr	r3, [pc, #352]	; (800a0ec <interrupt_record+0x1a8>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_distance;
 8009f8e:	4b58      	ldr	r3, [pc, #352]	; (800a0f0 <interrupt_record+0x1ac>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 8009f94:	463b      	mov	r3, r7
 8009f96:	2104      	movs	r1, #4
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f7ff ff09 	bl	8009db0 <record_data>
		}
	if (record_mode == 3) {
 8009f9e:	4b4c      	ldr	r3, [pc, #304]	; (800a0d0 <interrupt_record+0x18c>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	d126      	bne.n	8009ff4 <interrupt_record+0xb0>
			r_data[0] = straight.velocity;
 8009fa6:	4b53      	ldr	r3, [pc, #332]	; (800a0f4 <interrupt_record+0x1b0>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	603b      	str	r3, [r7, #0]
			r_data[1] = straight.displacement;
 8009fac:	4b51      	ldr	r3, [pc, #324]	; (800a0f4 <interrupt_record+0x1b0>)
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	607b      	str	r3, [r7, #4]
			r_data[2] = (fusion_speedR + fusion_speedL) / 2;
 8009fb2:	4b51      	ldr	r3, [pc, #324]	; (800a0f8 <interrupt_record+0x1b4>)
 8009fb4:	ed93 7a00 	vldr	s14, [r3]
 8009fb8:	4b50      	ldr	r3, [pc, #320]	; (800a0fc <interrupt_record+0x1b8>)
 8009fba:	edd3 7a00 	vldr	s15, [r3]
 8009fbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fc2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009fc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fca:	edc7 7a02 	vstr	s15, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 8009fce:	4b4c      	ldr	r3, [pc, #304]	; (800a100 <interrupt_record+0x1bc>)
 8009fd0:	ed93 7a00 	vldr	s14, [r3]
 8009fd4:	4b4b      	ldr	r3, [pc, #300]	; (800a104 <interrupt_record+0x1c0>)
 8009fd6:	edd3 7a00 	vldr	s15, [r3]
 8009fda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009fde:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8009fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009fe6:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 8009fea:	463b      	mov	r3, r7
 8009fec:	2104      	movs	r1, #4
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fede 	bl	8009db0 <record_data>
		}
	if (record_mode == 4) { //距離の比較
 8009ff4:	4b36      	ldr	r3, [pc, #216]	; (800a0d0 <interrupt_record+0x18c>)
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d126      	bne.n	800a04a <interrupt_record+0x106>
			r_data[0] = straight.displacement;
 8009ffc:	4b3d      	ldr	r3, [pc, #244]	; (800a0f4 <interrupt_record+0x1b0>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	603b      	str	r3, [r7, #0]
			r_data[1] = (E_distanceR + E_distanceL) / 2;
 800a002:	4b36      	ldr	r3, [pc, #216]	; (800a0dc <interrupt_record+0x198>)
 800a004:	ed93 7a00 	vldr	s14, [r3]
 800a008:	4b35      	ldr	r3, [pc, #212]	; (800a0e0 <interrupt_record+0x19c>)
 800a00a:	edd3 7a00 	vldr	s15, [r3]
 800a00e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a012:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a01a:	edc7 7a01 	vstr	s15, [r7, #4]
			r_data[2] = gf_distance;
 800a01e:	4b34      	ldr	r3, [pc, #208]	; (800a0f0 <interrupt_record+0x1ac>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	60bb      	str	r3, [r7, #8]
			r_data[3] = (fusion_distanceR + fusion_distanceL) / 2;
 800a024:	4b36      	ldr	r3, [pc, #216]	; (800a100 <interrupt_record+0x1bc>)
 800a026:	ed93 7a00 	vldr	s14, [r3]
 800a02a:	4b36      	ldr	r3, [pc, #216]	; (800a104 <interrupt_record+0x1c0>)
 800a02c:	edd3 7a00 	vldr	s15, [r3]
 800a030:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a034:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a03c:	edc7 7a03 	vstr	s15, [r7, #12]
			record_data(r_data, 4);
 800a040:	463b      	mov	r3, r7
 800a042:	2104      	movs	r1, #4
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff feb3 	bl	8009db0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800a04a:	4b21      	ldr	r3, [pc, #132]	; (800a0d0 <interrupt_record+0x18c>)
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b05      	cmp	r3, #5
 800a050:	d110      	bne.n	800a074 <interrupt_record+0x130>
			r_data[0] = straight.displacement;
 800a052:	4b28      	ldr	r3, [pc, #160]	; (800a0f4 <interrupt_record+0x1b0>)
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800a058:	4b20      	ldr	r3, [pc, #128]	; (800a0dc <interrupt_record+0x198>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800a05e:	4b20      	ldr	r3, [pc, #128]	; (800a0e0 <interrupt_record+0x19c>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800a064:	4b22      	ldr	r3, [pc, #136]	; (800a0f0 <interrupt_record+0x1ac>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800a06a:	463b      	mov	r3, r7
 800a06c:	2104      	movs	r1, #4
 800a06e:	4618      	mov	r0, r3
 800a070:	f7ff fe9e 	bl	8009db0 <record_data>
		}
	if (record_mode == 5) { //距離の比較
 800a074:	4b16      	ldr	r3, [pc, #88]	; (800a0d0 <interrupt_record+0x18c>)
 800a076:	781b      	ldrb	r3, [r3, #0]
 800a078:	2b05      	cmp	r3, #5
 800a07a:	d110      	bne.n	800a09e <interrupt_record+0x15a>
			r_data[0] = g_V_L;
 800a07c:	4b22      	ldr	r3, [pc, #136]	; (800a108 <interrupt_record+0x1c4>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	603b      	str	r3, [r7, #0]
			r_data[1] = E_distanceR;
 800a082:	4b16      	ldr	r3, [pc, #88]	; (800a0dc <interrupt_record+0x198>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	607b      	str	r3, [r7, #4]
			r_data[2] = E_distanceL;
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <interrupt_record+0x19c>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	60bb      	str	r3, [r7, #8]
			r_data[3] = gf_distance;
 800a08e:	4b18      	ldr	r3, [pc, #96]	; (800a0f0 <interrupt_record+0x1ac>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	60fb      	str	r3, [r7, #12]
			record_data(r_data, 4);
 800a094:	463b      	mov	r3, r7
 800a096:	2104      	movs	r1, #4
 800a098:	4618      	mov	r0, r3
 800a09a:	f7ff fe89 	bl	8009db0 <record_data>
		}
	if (record_mode == 6) { //距離の比較
 800a09e:	4b0c      	ldr	r3, [pc, #48]	; (800a0d0 <interrupt_record+0x18c>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	2b06      	cmp	r3, #6
 800a0a4:	d110      	bne.n	800a0c8 <interrupt_record+0x184>
				r_data[0] = straight.velocity;
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <interrupt_record+0x1b0>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	603b      	str	r3, [r7, #0]
				r_data[1] = E_lpf_speedL;
 800a0ac:	4b17      	ldr	r3, [pc, #92]	; (800a10c <interrupt_record+0x1c8>)
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	607b      	str	r3, [r7, #4]
				r_data[2] = E_lpf_speedR;
 800a0b2:	4b17      	ldr	r3, [pc, #92]	; (800a110 <interrupt_record+0x1cc>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	60bb      	str	r3, [r7, #8]
				r_data[3] = gf_speed;
 800a0b8:	4b0c      	ldr	r3, [pc, #48]	; (800a0ec <interrupt_record+0x1a8>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	60fb      	str	r3, [r7, #12]
				record_data(r_data, 4);
 800a0be:	463b      	mov	r3, r7
 800a0c0:	2104      	movs	r1, #4
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f7ff fe74 	bl	8009db0 <record_data>
		r_data[3] = g_V_L;
		record_data(r_data, 4);
	}
*/

}
 800a0c8:	bf00      	nop
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}
 800a0d0:	2000c388 	.word	0x2000c388
 800a0d4:	2000020c 	.word	0x2000020c
 800a0d8:	20000208 	.word	0x20000208
 800a0dc:	20000204 	.word	0x20000204
 800a0e0:	20000200 	.word	0x20000200
 800a0e4:	20000248 	.word	0x20000248
 800a0e8:	20000244 	.word	0x20000244
 800a0ec:	20000258 	.word	0x20000258
 800a0f0:	2000025c 	.word	0x2000025c
 800a0f4:	200004b8 	.word	0x200004b8
 800a0f8:	2000023c 	.word	0x2000023c
 800a0fc:	20000238 	.word	0x20000238
 800a100:	20000234 	.word	0x20000234
 800a104:	20000230 	.word	0x20000230
 800a108:	2000050c 	.word	0x2000050c
 800a10c:	20000218 	.word	0x20000218
 800a110:	2000021c 	.word	0x2000021c

0800a114 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi1;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a118:	4b1b      	ldr	r3, [pc, #108]	; (800a188 <MX_SPI1_Init+0x74>)
 800a11a:	4a1c      	ldr	r2, [pc, #112]	; (800a18c <MX_SPI1_Init+0x78>)
 800a11c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a11e:	4b1a      	ldr	r3, [pc, #104]	; (800a188 <MX_SPI1_Init+0x74>)
 800a120:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a126:	4b18      	ldr	r3, [pc, #96]	; (800a188 <MX_SPI1_Init+0x74>)
 800a128:	2200      	movs	r2, #0
 800a12a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a12c:	4b16      	ldr	r3, [pc, #88]	; (800a188 <MX_SPI1_Init+0x74>)
 800a12e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a134:	4b14      	ldr	r3, [pc, #80]	; (800a188 <MX_SPI1_Init+0x74>)
 800a136:	2200      	movs	r2, #0
 800a138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <MX_SPI1_Init+0x74>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a140:	4b11      	ldr	r3, [pc, #68]	; (800a188 <MX_SPI1_Init+0x74>)
 800a142:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a148:	4b0f      	ldr	r3, [pc, #60]	; (800a188 <MX_SPI1_Init+0x74>)
 800a14a:	2218      	movs	r2, #24
 800a14c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a14e:	4b0e      	ldr	r3, [pc, #56]	; (800a188 <MX_SPI1_Init+0x74>)
 800a150:	2200      	movs	r2, #0
 800a152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a154:	4b0c      	ldr	r3, [pc, #48]	; (800a188 <MX_SPI1_Init+0x74>)
 800a156:	2200      	movs	r2, #0
 800a158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a15a:	4b0b      	ldr	r3, [pc, #44]	; (800a188 <MX_SPI1_Init+0x74>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800a160:	4b09      	ldr	r3, [pc, #36]	; (800a188 <MX_SPI1_Init+0x74>)
 800a162:	2207      	movs	r2, #7
 800a164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a166:	4b08      	ldr	r3, [pc, #32]	; (800a188 <MX_SPI1_Init+0x74>)
 800a168:	2200      	movs	r2, #0
 800a16a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800a16c:	4b06      	ldr	r3, [pc, #24]	; (800a188 <MX_SPI1_Init+0x74>)
 800a16e:	2208      	movs	r2, #8
 800a170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a172:	4805      	ldr	r0, [pc, #20]	; (800a188 <MX_SPI1_Init+0x74>)
 800a174:	f004 fd20 	bl	800ebb8 <HAL_SPI_Init>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800a17e:	f7ff f88a 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a182:	bf00      	nop
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	2000c398 	.word	0x2000c398
 800a18c:	40013000 	.word	0x40013000

0800a190 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a194:	4b1b      	ldr	r3, [pc, #108]	; (800a204 <MX_SPI3_Init+0x74>)
 800a196:	4a1c      	ldr	r2, [pc, #112]	; (800a208 <MX_SPI3_Init+0x78>)
 800a198:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a19a:	4b1a      	ldr	r3, [pc, #104]	; (800a204 <MX_SPI3_Init+0x74>)
 800a19c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a1a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a1a2:	4b18      	ldr	r3, [pc, #96]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a1a8:	4b16      	ldr	r3, [pc, #88]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1aa:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800a1ae:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1b0:	4b14      	ldr	r3, [pc, #80]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a1b6:	4b13      	ldr	r3, [pc, #76]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1b8:	2201      	movs	r2, #1
 800a1ba:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a1bc:	4b11      	ldr	r3, [pc, #68]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a1c2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800a1c4:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1c6:	2218      	movs	r2, #24
 800a1c8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a1ca:	4b0e      	ldr	r3, [pc, #56]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a1d0:	4b0c      	ldr	r3, [pc, #48]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1d6:	4b0b      	ldr	r3, [pc, #44]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1d8:	2200      	movs	r2, #0
 800a1da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800a1dc:	4b09      	ldr	r3, [pc, #36]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1de:	2207      	movs	r2, #7
 800a1e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800a1e2:	4b08      	ldr	r3, [pc, #32]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800a1e8:	4b06      	ldr	r3, [pc, #24]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a1ee:	4805      	ldr	r0, [pc, #20]	; (800a204 <MX_SPI3_Init+0x74>)
 800a1f0:	f004 fce2 	bl	800ebb8 <HAL_SPI_Init>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d001      	beq.n	800a1fe <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800a1fa:	f7ff f84c 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	2000c3fc 	.word	0x2000c3fc
 800a208:	40003c00 	.word	0x40003c00

0800a20c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08c      	sub	sp, #48	; 0x30
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a214:	f107 031c 	add.w	r3, r7, #28
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a3d      	ldr	r2, [pc, #244]	; (800a320 <HAL_SPI_MspInit+0x114>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d129      	bne.n	800a282 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a22e:	4b3d      	ldr	r3, [pc, #244]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a232:	4a3c      	ldr	r2, [pc, #240]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a234:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a238:	6613      	str	r3, [r2, #96]	; 0x60
 800a23a:	4b3a      	ldr	r3, [pc, #232]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a23c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a23e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a242:	61bb      	str	r3, [r7, #24]
 800a244:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a246:	4b37      	ldr	r3, [pc, #220]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a24a:	4a36      	ldr	r2, [pc, #216]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a24c:	f043 0301 	orr.w	r3, r3, #1
 800a250:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a252:	4b34      	ldr	r3, [pc, #208]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	f003 0301 	and.w	r3, r3, #1
 800a25a:	617b      	str	r3, [r7, #20]
 800a25c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800a25e:	23e0      	movs	r3, #224	; 0xe0
 800a260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a262:	2302      	movs	r3, #2
 800a264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a26a:	2300      	movs	r3, #0
 800a26c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a26e:	2305      	movs	r3, #5
 800a270:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a272:	f107 031c 	add.w	r3, r7, #28
 800a276:	4619      	mov	r1, r3
 800a278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a27c:	f003 fae2 	bl	800d844 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800a280:	e049      	b.n	800a316 <HAL_SPI_MspInit+0x10a>
  else if(spiHandle->Instance==SPI3)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a28      	ldr	r2, [pc, #160]	; (800a328 <HAL_SPI_MspInit+0x11c>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d144      	bne.n	800a316 <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a28c:	4b25      	ldr	r3, [pc, #148]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a28e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a290:	4a24      	ldr	r2, [pc, #144]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a296:	6593      	str	r3, [r2, #88]	; 0x58
 800a298:	4b22      	ldr	r3, [pc, #136]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a29a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2a0:	613b      	str	r3, [r7, #16]
 800a2a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a2a4:	4b1f      	ldr	r3, [pc, #124]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2a8:	4a1e      	ldr	r2, [pc, #120]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2aa:	f043 0304 	orr.w	r3, r3, #4
 800a2ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2b0:	4b1c      	ldr	r3, [pc, #112]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a2bc:	4b19      	ldr	r3, [pc, #100]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2c0:	4a18      	ldr	r2, [pc, #96]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2c2:	f043 0302 	orr.w	r3, r3, #2
 800a2c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a2c8:	4b16      	ldr	r3, [pc, #88]	; (800a324 <HAL_SPI_MspInit+0x118>)
 800a2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	60bb      	str	r3, [r7, #8]
 800a2d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a2d4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a2d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2da:	2302      	movs	r3, #2
 800a2dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a2e6:	2306      	movs	r3, #6
 800a2e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a2ea:	f107 031c 	add.w	r3, r7, #28
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	480e      	ldr	r0, [pc, #56]	; (800a32c <HAL_SPI_MspInit+0x120>)
 800a2f2:	f003 faa7 	bl	800d844 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800a2f6:	2320      	movs	r3, #32
 800a2f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2fe:	2300      	movs	r3, #0
 800a300:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a302:	2300      	movs	r3, #0
 800a304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a306:	2306      	movs	r3, #6
 800a308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a30a:	f107 031c 	add.w	r3, r7, #28
 800a30e:	4619      	mov	r1, r3
 800a310:	4807      	ldr	r0, [pc, #28]	; (800a330 <HAL_SPI_MspInit+0x124>)
 800a312:	f003 fa97 	bl	800d844 <HAL_GPIO_Init>
}
 800a316:	bf00      	nop
 800a318:	3730      	adds	r7, #48	; 0x30
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	40013000 	.word	0x40013000
 800a324:	40021000 	.word	0x40021000
 800a328:	40003c00 	.word	0x40003c00
 800a32c:	48000800 	.word	0x48000800
 800a330:	48000400 	.word	0x48000400

0800a334 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a33a:	4b0f      	ldr	r3, [pc, #60]	; (800a378 <HAL_MspInit+0x44>)
 800a33c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a33e:	4a0e      	ldr	r2, [pc, #56]	; (800a378 <HAL_MspInit+0x44>)
 800a340:	f043 0301 	orr.w	r3, r3, #1
 800a344:	6613      	str	r3, [r2, #96]	; 0x60
 800a346:	4b0c      	ldr	r3, [pc, #48]	; (800a378 <HAL_MspInit+0x44>)
 800a348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a34a:	f003 0301 	and.w	r3, r3, #1
 800a34e:	607b      	str	r3, [r7, #4]
 800a350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a352:	4b09      	ldr	r3, [pc, #36]	; (800a378 <HAL_MspInit+0x44>)
 800a354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a356:	4a08      	ldr	r2, [pc, #32]	; (800a378 <HAL_MspInit+0x44>)
 800a358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a35c:	6593      	str	r3, [r2, #88]	; 0x58
 800a35e:	4b06      	ldr	r3, [pc, #24]	; (800a378 <HAL_MspInit+0x44>)
 800a360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a366:	603b      	str	r3, [r7, #0]
 800a368:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800a36a:	f003 fca9 	bl	800dcc0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}
 800a376:	bf00      	nop
 800a378:	40021000 	.word	0x40021000

0800a37c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800a380:	e7fe      	b.n	800a380 <NMI_Handler+0x4>

0800a382 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a382:	b480      	push	{r7}
 800a384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 800a386:	e7fe      	b.n	800a386 <HardFault_Handler+0x4>

0800a388 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a388:	b480      	push	{r7}
 800a38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a38c:	e7fe      	b.n	800a38c <MemManage_Handler+0x4>

0800a38e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a38e:	b480      	push	{r7}
 800a390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a392:	e7fe      	b.n	800a392 <BusFault_Handler+0x4>

0800a394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a394:	b480      	push	{r7}
 800a396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a398:	e7fe      	b.n	800a398 <UsageFault_Handler+0x4>

0800a39a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800a39a:	b480      	push	{r7}
 800a39c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800a39e:	bf00      	nop
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a3ac:	bf00      	nop
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr

0800a3b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800a3ba:	bf00      	nop
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800a3c8:	f000 fc4c 	bl	800ac64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800a3cc:	bf00      	nop
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800a3d4:	4802      	ldr	r0, [pc, #8]	; (800a3e0 <DMA1_Channel1_IRQHandler+0x10>)
 800a3d6:	f003 f8e5 	bl	800d5a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800a3da:	bf00      	nop
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	20000780 	.word	0x20000780

0800a3e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800a3e8:	4802      	ldr	r0, [pc, #8]	; (800a3f4 <ADC1_2_IRQHandler+0x10>)
 800a3ea:	f001 fbeb 	bl	800bbc4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */
//  pl_callback_getSensor();
  /* USER CODE END ADC1_2_IRQn 1 */
}
 800a3ee:	bf00      	nop
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop
 800a3f4:	20000714 	.word	0x20000714

0800a3f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800a3fc:	480c      	ldr	r0, [pc, #48]	; (800a430 <TIM6_DAC_IRQHandler+0x38>)
 800a3fe:	f005 fdbb 	bl	800ff78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  interrupt_timer();
 800a402:	f7fc ff7d 	bl	8007300 <interrupt_timer>
  interupt_calSensor();
 800a406:	f7f7 fc81 	bl	8001d0c <interupt_calSensor>
  ICM20602_DataUpdate();
 800a40a:	f7fc fc83 	bl	8006d14 <ICM20602_DataUpdate>
  interrupt_calGyro();
 800a40e:	f7f7 fa8b 	bl	8001928 <interrupt_calGyro>
  AS5047_DataUpdate();
 800a412:	f7fc fb4b 	bl	8006aac <AS5047_DataUpdate>
  interupt_calEncoder();
 800a416:	f7f6 fe27 	bl	8001068 <interupt_calEncoder>
  interupt_calFusion();
 800a41a:	f7f6 ffe5 	bl	80013e8 <interupt_calFusion>
  interupt_DriveMotor();
 800a41e:	f7f7 fdf7 	bl	8002010 <interupt_DriveMotor>


  interrupt_FailSafe();
 800a422:	f7fe fc8f 	bl	8008d44 <interrupt_FailSafe>
  interrupt_record();
 800a426:	f7ff fd8d 	bl	8009f44 <interrupt_record>

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800a42a:	bf00      	nop
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	2000c464 	.word	0x2000c464

0800a434 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 800a434:	b480      	push	{r7}
 800a436:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800a438:	bf00      	nop
 800a43a:	46bd      	mov	sp, r7
 800a43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a440:	4770      	bx	lr

0800a442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a442:	b480      	push	{r7}
 800a444:	af00      	add	r7, sp, #0
	return 1;
 800a446:	2301      	movs	r3, #1
}
 800a448:	4618      	mov	r0, r3
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr

0800a452 <_kill>:

int _kill(int pid, int sig)
{
 800a452:	b580      	push	{r7, lr}
 800a454:	b082      	sub	sp, #8
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
 800a45a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800a45c:	f007 fc60 	bl	8011d20 <__errno>
 800a460:	4603      	mov	r3, r0
 800a462:	2216      	movs	r2, #22
 800a464:	601a      	str	r2, [r3, #0]
	return -1;
 800a466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <_exit>:

void _exit (int status)
{
 800a472:	b580      	push	{r7, lr}
 800a474:	b082      	sub	sp, #8
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800a47a:	f04f 31ff 	mov.w	r1, #4294967295
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f7ff ffe7 	bl	800a452 <_kill>
	while (1) {}		/* Make sure we hang here */
 800a484:	e7fe      	b.n	800a484 <_exit+0x12>

0800a486 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b086      	sub	sp, #24
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a492:	2300      	movs	r3, #0
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e00a      	b.n	800a4ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800a498:	f3af 8000 	nop.w
 800a49c:	4601      	mov	r1, r0
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	60ba      	str	r2, [r7, #8]
 800a4a4:	b2ca      	uxtb	r2, r1
 800a4a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	3301      	adds	r3, #1
 800a4ac:	617b      	str	r3, [r7, #20]
 800a4ae:	697a      	ldr	r2, [r7, #20]
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	dbf0      	blt.n	800a498 <_read+0x12>
	}

return len;
 800a4b6:	687b      	ldr	r3, [r7, #4]
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3718      	adds	r7, #24
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b086      	sub	sp, #24
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	617b      	str	r3, [r7, #20]
 800a4d0:	e00a      	b.n	800a4e8 <_write+0x28>
	{
		HAL_UART_Transmit(&huart1, ptr++, 1, 1);
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	1c4b      	adds	r3, r1, #1
 800a4d6:	60bb      	str	r3, [r7, #8]
 800a4d8:	2301      	movs	r3, #1
 800a4da:	2201      	movs	r2, #1
 800a4dc:	4807      	ldr	r0, [pc, #28]	; (800a4fc <_write+0x3c>)
 800a4de:	f006 fdd5 	bl	801108c <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	617b      	str	r3, [r7, #20]
 800a4e8:	697a      	ldr	r2, [r7, #20]
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	dbf0      	blt.n	800a4d2 <_write+0x12>
	}
	return len;
 800a4f0:	687b      	ldr	r3, [r7, #4]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}
 800a4fa:	bf00      	nop
 800a4fc:	2000c548 	.word	0x2000c548

0800a500 <_close>:

int _close(int file)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
	return -1;
 800a508:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a50c:	4618      	mov	r0, r3
 800a50e:	370c      	adds	r7, #12
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
 800a520:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800a528:	605a      	str	r2, [r3, #4]
	return 0;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <_isatty>:

int _isatty(int file)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
	return 1;
 800a540:	2301      	movs	r3, #1
}
 800a542:	4618      	mov	r0, r3
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a54e:	b480      	push	{r7}
 800a550:	b085      	sub	sp, #20
 800a552:	af00      	add	r7, sp, #0
 800a554:	60f8      	str	r0, [r7, #12]
 800a556:	60b9      	str	r1, [r7, #8]
 800a558:	607a      	str	r2, [r7, #4]
	return 0;
 800a55a:	2300      	movs	r3, #0
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3714      	adds	r7, #20
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b086      	sub	sp, #24
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a570:	4a14      	ldr	r2, [pc, #80]	; (800a5c4 <_sbrk+0x5c>)
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <_sbrk+0x60>)
 800a574:	1ad3      	subs	r3, r2, r3
 800a576:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a57c:	4b13      	ldr	r3, [pc, #76]	; (800a5cc <_sbrk+0x64>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d102      	bne.n	800a58a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a584:	4b11      	ldr	r3, [pc, #68]	; (800a5cc <_sbrk+0x64>)
 800a586:	4a12      	ldr	r2, [pc, #72]	; (800a5d0 <_sbrk+0x68>)
 800a588:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a58a:	4b10      	ldr	r3, [pc, #64]	; (800a5cc <_sbrk+0x64>)
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4413      	add	r3, r2
 800a592:	693a      	ldr	r2, [r7, #16]
 800a594:	429a      	cmp	r2, r3
 800a596:	d207      	bcs.n	800a5a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a598:	f007 fbc2 	bl	8011d20 <__errno>
 800a59c:	4603      	mov	r3, r0
 800a59e:	220c      	movs	r2, #12
 800a5a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a5a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a6:	e009      	b.n	800a5bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a5a8:	4b08      	ldr	r3, [pc, #32]	; (800a5cc <_sbrk+0x64>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a5ae:	4b07      	ldr	r3, [pc, #28]	; (800a5cc <_sbrk+0x64>)
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4413      	add	r3, r2
 800a5b6:	4a05      	ldr	r2, [pc, #20]	; (800a5cc <_sbrk+0x64>)
 800a5b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3718      	adds	r7, #24
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}
 800a5c4:	2001c000 	.word	0x2001c000
 800a5c8:	00000400 	.word	0x00000400
 800a5cc:	2000c460 	.word	0x2000c460
 800a5d0:	2000c5f0 	.word	0x2000c5f0

0800a5d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800a5d8:	4b06      	ldr	r3, [pc, #24]	; (800a5f4 <SystemInit+0x20>)
 800a5da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5de:	4a05      	ldr	r2, [pc, #20]	; (800a5f4 <SystemInit+0x20>)
 800a5e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a5e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a5e8:	bf00      	nop
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	e000ed00 	.word	0xe000ed00

0800a5f8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim16;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a5fe:	1d3b      	adds	r3, r7, #4
 800a600:	2200      	movs	r2, #0
 800a602:	601a      	str	r2, [r3, #0]
 800a604:	605a      	str	r2, [r3, #4]
 800a606:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a608:	4b14      	ldr	r3, [pc, #80]	; (800a65c <MX_TIM6_Init+0x64>)
 800a60a:	4a15      	ldr	r2, [pc, #84]	; (800a660 <MX_TIM6_Init+0x68>)
 800a60c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 85-1;
 800a60e:	4b13      	ldr	r3, [pc, #76]	; (800a65c <MX_TIM6_Init+0x64>)
 800a610:	2254      	movs	r2, #84	; 0x54
 800a612:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a614:	4b11      	ldr	r3, [pc, #68]	; (800a65c <MX_TIM6_Init+0x64>)
 800a616:	2200      	movs	r2, #0
 800a618:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 800a61a:	4b10      	ldr	r3, [pc, #64]	; (800a65c <MX_TIM6_Init+0x64>)
 800a61c:	f240 32e7 	movw	r2, #999	; 0x3e7
 800a620:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <MX_TIM6_Init+0x64>)
 800a624:	2200      	movs	r2, #0
 800a626:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a628:	480c      	ldr	r0, [pc, #48]	; (800a65c <MX_TIM6_Init+0x64>)
 800a62a:	f005 f9dd 	bl	800f9e8 <HAL_TIM_Base_Init>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800a634:	f7fe fe2f 	bl	8009296 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a638:	2300      	movs	r3, #0
 800a63a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a640:	1d3b      	adds	r3, r7, #4
 800a642:	4619      	mov	r1, r3
 800a644:	4805      	ldr	r0, [pc, #20]	; (800a65c <MX_TIM6_Init+0x64>)
 800a646:	f006 fb4b 	bl	8010ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800a650:	f7fe fe21 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a654:	bf00      	nop
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	2000c464 	.word	0x2000c464
 800a660:	40001000 	.word	0x40001000

0800a664 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b098      	sub	sp, #96	; 0x60
 800a668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a66a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a66e:	2200      	movs	r2, #0
 800a670:	601a      	str	r2, [r3, #0]
 800a672:	605a      	str	r2, [r3, #4]
 800a674:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a67a:	2200      	movs	r2, #0
 800a67c:	601a      	str	r2, [r3, #0]
 800a67e:	605a      	str	r2, [r3, #4]
 800a680:	609a      	str	r2, [r3, #8]
 800a682:	60da      	str	r2, [r3, #12]
 800a684:	611a      	str	r2, [r3, #16]
 800a686:	615a      	str	r2, [r3, #20]
 800a688:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a68a:	1d3b      	adds	r3, r7, #4
 800a68c:	2234      	movs	r2, #52	; 0x34
 800a68e:	2100      	movs	r1, #0
 800a690:	4618      	mov	r0, r3
 800a692:	f007 fb7d 	bl	8011d90 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a696:	4b41      	ldr	r3, [pc, #260]	; (800a79c <MX_TIM8_Init+0x138>)
 800a698:	4a41      	ldr	r2, [pc, #260]	; (800a7a0 <MX_TIM8_Init+0x13c>)
 800a69a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 2-1;
 800a69c:	4b3f      	ldr	r3, [pc, #252]	; (800a79c <MX_TIM8_Init+0x138>)
 800a69e:	2201      	movs	r2, #1
 800a6a0:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a6a2:	4b3e      	ldr	r3, [pc, #248]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1679;
 800a6a8:	4b3c      	ldr	r3, [pc, #240]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6aa:	f240 628f 	movw	r2, #1679	; 0x68f
 800a6ae:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a6b0:	4b3a      	ldr	r3, [pc, #232]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a6b6:	4b39      	ldr	r3, [pc, #228]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a6bc:	4b37      	ldr	r3, [pc, #220]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800a6c2:	4836      	ldr	r0, [pc, #216]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6c4:	f005 fa58 	bl	800fb78 <HAL_TIM_PWM_Init>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d001      	beq.n	800a6d2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800a6ce:	f7fe fde2 	bl	8009296 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a6de:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	482d      	ldr	r0, [pc, #180]	; (800a79c <MX_TIM8_Init+0x138>)
 800a6e6:	f006 fafb 	bl	8010ce0 <HAL_TIMEx_MasterConfigSynchronization>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d001      	beq.n	800a6f4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800a6f0:	f7fe fdd1 	bl	8009296 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a6f4:	2360      	movs	r3, #96	; 0x60
 800a6f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 419;
 800a6f8:	f240 13a3 	movw	r3, #419	; 0x1a3
 800a6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a6fe:	2300      	movs	r3, #0
 800a700:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a702:	2300      	movs	r3, #0
 800a704:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a706:	2300      	movs	r3, #0
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a70a:	2300      	movs	r3, #0
 800a70c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a70e:	2300      	movs	r3, #0
 800a710:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a712:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a716:	2200      	movs	r2, #0
 800a718:	4619      	mov	r1, r3
 800a71a:	4820      	ldr	r0, [pc, #128]	; (800a79c <MX_TIM8_Init+0x138>)
 800a71c:	f005 fdac 	bl	8010278 <HAL_TIM_PWM_ConfigChannel>
 800a720:	4603      	mov	r3, r0
 800a722:	2b00      	cmp	r3, #0
 800a724:	d001      	beq.n	800a72a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800a726:	f7fe fdb6 	bl	8009296 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a72a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a72e:	2208      	movs	r2, #8
 800a730:	4619      	mov	r1, r3
 800a732:	481a      	ldr	r0, [pc, #104]	; (800a79c <MX_TIM8_Init+0x138>)
 800a734:	f005 fda0 	bl	8010278 <HAL_TIM_PWM_ConfigChannel>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d001      	beq.n	800a742 <MX_TIM8_Init+0xde>
  {
    Error_Handler();
 800a73e:	f7fe fdaa 	bl	8009296 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a742:	2300      	movs	r3, #0
 800a744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a746:	2300      	movs	r3, #0
 800a748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a74a:	2300      	movs	r3, #0
 800a74c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a74e:	2300      	movs	r3, #0
 800a750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a752:	2300      	movs	r3, #0
 800a754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a75a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800a760:	2300      	movs	r3, #0
 800a762:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800a764:	2300      	movs	r3, #0
 800a766:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800a768:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a76c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800a76e:	2300      	movs	r3, #0
 800a770:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800a772:	2300      	movs	r3, #0
 800a774:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a776:	2300      	movs	r3, #0
 800a778:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800a77a:	1d3b      	adds	r3, r7, #4
 800a77c:	4619      	mov	r1, r3
 800a77e:	4807      	ldr	r0, [pc, #28]	; (800a79c <MX_TIM8_Init+0x138>)
 800a780:	f006 fb3c 	bl	8010dfc <HAL_TIMEx_ConfigBreakDeadTime>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d001      	beq.n	800a78e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800a78a:	f7fe fd84 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800a78e:	4803      	ldr	r0, [pc, #12]	; (800a79c <MX_TIM8_Init+0x138>)
 800a790:	f000 f8da 	bl	800a948 <HAL_TIM_MspPostInit>

}
 800a794:	bf00      	nop
 800a796:	3760      	adds	r7, #96	; 0x60
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}
 800a79c:	2000c4b0 	.word	0x2000c4b0
 800a7a0:	40013400 	.word	0x40013400

0800a7a4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b094      	sub	sp, #80	; 0x50
 800a7a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800a7aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
 800a7b2:	605a      	str	r2, [r3, #4]
 800a7b4:	609a      	str	r2, [r3, #8]
 800a7b6:	60da      	str	r2, [r3, #12]
 800a7b8:	611a      	str	r2, [r3, #16]
 800a7ba:	615a      	str	r2, [r3, #20]
 800a7bc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a7be:	463b      	mov	r3, r7
 800a7c0:	2234      	movs	r2, #52	; 0x34
 800a7c2:	2100      	movs	r1, #0
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f007 fae3 	bl	8011d90 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800a7ca:	4b30      	ldr	r3, [pc, #192]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7cc:	4a30      	ldr	r2, [pc, #192]	; (800a890 <MX_TIM16_Init+0xec>)
 800a7ce:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 2-1;
 800a7d0:	4b2e      	ldr	r3, [pc, #184]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a7d6:	4b2d      	ldr	r3, [pc, #180]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7d8:	2200      	movs	r2, #0
 800a7da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100;
 800a7dc:	4b2b      	ldr	r3, [pc, #172]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7de:	2264      	movs	r2, #100	; 0x64
 800a7e0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a7e2:	4b2a      	ldr	r3, [pc, #168]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800a7e8:	4b28      	ldr	r3, [pc, #160]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a7ee:	4b27      	ldr	r3, [pc, #156]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800a7f4:	4825      	ldr	r0, [pc, #148]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a7f6:	f005 f8f7 	bl	800f9e8 <HAL_TIM_Base_Init>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <MX_TIM16_Init+0x60>
  {
    Error_Handler();
 800a800:	f7fe fd49 	bl	8009296 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800a804:	4821      	ldr	r0, [pc, #132]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a806:	f005 f9b7 	bl	800fb78 <HAL_TIM_PWM_Init>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d001      	beq.n	800a814 <MX_TIM16_Init+0x70>
  {
    Error_Handler();
 800a810:	f7fe fd41 	bl	8009296 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a814:	2360      	movs	r3, #96	; 0x60
 800a816:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 30;
 800a818:	231e      	movs	r3, #30
 800a81a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a81c:	2300      	movs	r3, #0
 800a81e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a820:	2300      	movs	r3, #0
 800a822:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a824:	2300      	movs	r3, #0
 800a826:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a828:	2300      	movs	r3, #0
 800a82a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a82c:	2300      	movs	r3, #0
 800a82e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a830:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a834:	2200      	movs	r2, #0
 800a836:	4619      	mov	r1, r3
 800a838:	4814      	ldr	r0, [pc, #80]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a83a:	f005 fd1d 	bl	8010278 <HAL_TIM_PWM_ConfigChannel>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d001      	beq.n	800a848 <MX_TIM16_Init+0xa4>
  {
    Error_Handler();
 800a844:	f7fe fd27 	bl	8009296 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a848:	2300      	movs	r3, #0
 800a84a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a84c:	2300      	movs	r3, #0
 800a84e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a850:	2300      	movs	r3, #0
 800a852:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a854:	2300      	movs	r3, #0
 800a856:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a858:	2300      	movs	r3, #0
 800a85a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a85c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a860:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800a862:	2300      	movs	r3, #0
 800a864:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a866:	2300      	movs	r3, #0
 800a868:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800a86a:	463b      	mov	r3, r7
 800a86c:	4619      	mov	r1, r3
 800a86e:	4807      	ldr	r0, [pc, #28]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a870:	f006 fac4 	bl	8010dfc <HAL_TIMEx_ConfigBreakDeadTime>
 800a874:	4603      	mov	r3, r0
 800a876:	2b00      	cmp	r3, #0
 800a878:	d001      	beq.n	800a87e <MX_TIM16_Init+0xda>
  {
    Error_Handler();
 800a87a:	f7fe fd0c 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800a87e:	4803      	ldr	r0, [pc, #12]	; (800a88c <MX_TIM16_Init+0xe8>)
 800a880:	f000 f862 	bl	800a948 <HAL_TIM_MspPostInit>

}
 800a884:	bf00      	nop
 800a886:	3750      	adds	r7, #80	; 0x50
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	2000c4fc 	.word	0x2000c4fc
 800a890:	40014400 	.word	0x40014400

0800a894 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a16      	ldr	r2, [pc, #88]	; (800a8fc <HAL_TIM_Base_MspInit+0x68>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d114      	bne.n	800a8d0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800a8a6:	4b16      	ldr	r3, [pc, #88]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8aa:	4a15      	ldr	r2, [pc, #84]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8ac:	f043 0310 	orr.w	r3, r3, #16
 800a8b0:	6593      	str	r3, [r2, #88]	; 0x58
 800a8b2:	4b13      	ldr	r3, [pc, #76]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8b6:	f003 0310 	and.w	r3, r3, #16
 800a8ba:	60fb      	str	r3, [r7, #12]
 800a8bc:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2103      	movs	r1, #3
 800a8c2:	2036      	movs	r0, #54	; 0x36
 800a8c4:	f002 fcbd 	bl	800d242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800a8c8:	2036      	movs	r0, #54	; 0x36
 800a8ca:	f002 fcd4 	bl	800d276 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800a8ce:	e010      	b.n	800a8f2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM16)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a0b      	ldr	r2, [pc, #44]	; (800a904 <HAL_TIM_Base_MspInit+0x70>)
 800a8d6:	4293      	cmp	r3, r2
 800a8d8:	d10b      	bne.n	800a8f2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800a8da:	4b09      	ldr	r3, [pc, #36]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8de:	4a08      	ldr	r2, [pc, #32]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8e4:	6613      	str	r3, [r2, #96]	; 0x60
 800a8e6:	4b06      	ldr	r3, [pc, #24]	; (800a900 <HAL_TIM_Base_MspInit+0x6c>)
 800a8e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ee:	60bb      	str	r3, [r7, #8]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
}
 800a8f2:	bf00      	nop
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	40001000 	.word	0x40001000
 800a900:	40021000 	.word	0x40021000
 800a904:	40014400 	.word	0x40014400

0800a908 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM8)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a0a      	ldr	r2, [pc, #40]	; (800a940 <HAL_TIM_PWM_MspInit+0x38>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d10b      	bne.n	800a932 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800a91a:	4b0a      	ldr	r3, [pc, #40]	; (800a944 <HAL_TIM_PWM_MspInit+0x3c>)
 800a91c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a91e:	4a09      	ldr	r2, [pc, #36]	; (800a944 <HAL_TIM_PWM_MspInit+0x3c>)
 800a920:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a924:	6613      	str	r3, [r2, #96]	; 0x60
 800a926:	4b07      	ldr	r3, [pc, #28]	; (800a944 <HAL_TIM_PWM_MspInit+0x3c>)
 800a928:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a92a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a92e:	60fb      	str	r3, [r7, #12]
 800a930:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800a932:	bf00      	nop
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	40013400 	.word	0x40013400
 800a944:	40021000 	.word	0x40021000

0800a948 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b08a      	sub	sp, #40	; 0x28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a950:	f107 0314 	add.w	r3, r7, #20
 800a954:	2200      	movs	r2, #0
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	605a      	str	r2, [r3, #4]
 800a95a:	609a      	str	r2, [r3, #8]
 800a95c:	60da      	str	r2, [r3, #12]
 800a95e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a2b      	ldr	r2, [pc, #172]	; (800aa14 <HAL_TIM_MspPostInit+0xcc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d12d      	bne.n	800a9c6 <HAL_TIM_MspPostInit+0x7e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a96a:	4b2b      	ldr	r3, [pc, #172]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a96c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a96e:	4a2a      	ldr	r2, [pc, #168]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a970:	f043 0302 	orr.w	r3, r3, #2
 800a974:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a976:	4b28      	ldr	r3, [pc, #160]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a97a:	f003 0302 	and.w	r3, r3, #2
 800a97e:	613b      	str	r3, [r7, #16]
 800a980:	693b      	ldr	r3, [r7, #16]
    /**TIM8 GPIO Configuration
    PB6     ------> TIM8_CH1
    PB9     ------> TIM8_CH3
    */
    GPIO_InitStruct.Pin = MOTOR_R_ENABLE_Pin;
 800a982:	2340      	movs	r3, #64	; 0x40
 800a984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a986:	2302      	movs	r3, #2
 800a988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a98e:	2300      	movs	r3, #0
 800a990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 800a992:	2305      	movs	r3, #5
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_R_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800a996:	f107 0314 	add.w	r3, r7, #20
 800a99a:	4619      	mov	r1, r3
 800a99c:	481f      	ldr	r0, [pc, #124]	; (800aa1c <HAL_TIM_MspPostInit+0xd4>)
 800a99e:	f002 ff51 	bl	800d844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_L_ENABLE_Pin;
 800a9a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a9a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9a8:	2302      	movs	r3, #2
 800a9aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 800a9b4:	230a      	movs	r3, #10
 800a9b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_L_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800a9b8:	f107 0314 	add.w	r3, r7, #20
 800a9bc:	4619      	mov	r1, r3
 800a9be:	4817      	ldr	r0, [pc, #92]	; (800aa1c <HAL_TIM_MspPostInit+0xd4>)
 800a9c0:	f002 ff40 	bl	800d844 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 800a9c4:	e022      	b.n	800aa0c <HAL_TIM_MspPostInit+0xc4>
  else if(timHandle->Instance==TIM16)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a15      	ldr	r2, [pc, #84]	; (800aa20 <HAL_TIM_MspPostInit+0xd8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d11d      	bne.n	800aa0c <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9d0:	4b11      	ldr	r3, [pc, #68]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d4:	4a10      	ldr	r2, [pc, #64]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a9d6:	f043 0301 	orr.w	r3, r3, #1
 800a9da:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a9dc:	4b0e      	ldr	r3, [pc, #56]	; (800aa18 <HAL_TIM_MspPostInit+0xd0>)
 800a9de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	60fb      	str	r3, [r7, #12]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FAN_MOTOR_Pin;
 800a9e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FAN_MOTOR_GPIO_Port, &GPIO_InitStruct);
 800a9fe:	f107 0314 	add.w	r3, r7, #20
 800aa02:	4619      	mov	r1, r3
 800aa04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aa08:	f002 ff1c 	bl	800d844 <HAL_GPIO_Init>
}
 800aa0c:	bf00      	nop
 800aa0e:	3728      	adds	r7, #40	; 0x28
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	40013400 	.word	0x40013400
 800aa18:	40021000 	.word	0x40021000
 800aa1c:	48000400 	.word	0x48000400
 800aa20:	40014400 	.word	0x40014400

0800aa24 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800aa28:	4b22      	ldr	r3, [pc, #136]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa2a:	4a23      	ldr	r2, [pc, #140]	; (800aab8 <MX_USART1_UART_Init+0x94>)
 800aa2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800aa2e:	4b21      	ldr	r3, [pc, #132]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800aa34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800aa36:	4b1f      	ldr	r3, [pc, #124]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800aa3c:	4b1d      	ldr	r3, [pc, #116]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800aa42:	4b1c      	ldr	r3, [pc, #112]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa44:	2200      	movs	r2, #0
 800aa46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800aa48:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa4a:	220c      	movs	r2, #12
 800aa4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aa4e:	4b19      	ldr	r3, [pc, #100]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa50:	2200      	movs	r2, #0
 800aa52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800aa54:	4b17      	ldr	r3, [pc, #92]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa56:	2200      	movs	r2, #0
 800aa58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800aa5a:	4b16      	ldr	r3, [pc, #88]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800aa60:	4b14      	ldr	r3, [pc, #80]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800aa66:	4b13      	ldr	r3, [pc, #76]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800aa6c:	4811      	ldr	r0, [pc, #68]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa6e:	f006 fabd 	bl	8010fec <HAL_UART_Init>
 800aa72:	4603      	mov	r3, r0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800aa78:	f7fe fc0d 	bl	8009296 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	480d      	ldr	r0, [pc, #52]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa80:	f007 f884 	bl	8011b8c <HAL_UARTEx_SetTxFifoThreshold>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d001      	beq.n	800aa8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800aa8a:	f7fe fc04 	bl	8009296 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800aa8e:	2100      	movs	r1, #0
 800aa90:	4808      	ldr	r0, [pc, #32]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aa92:	f007 f8b9 	bl	8011c08 <HAL_UARTEx_SetRxFifoThreshold>
 800aa96:	4603      	mov	r3, r0
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d001      	beq.n	800aaa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800aa9c:	f7fe fbfb 	bl	8009296 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800aaa0:	4804      	ldr	r0, [pc, #16]	; (800aab4 <MX_USART1_UART_Init+0x90>)
 800aaa2:	f007 f83a 	bl	8011b1a <HAL_UARTEx_DisableFifoMode>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d001      	beq.n	800aab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800aaac:	f7fe fbf3 	bl	8009296 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800aab0:	bf00      	nop
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	2000c548 	.word	0x2000c548
 800aab8:	40013800 	.word	0x40013800

0800aabc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b09e      	sub	sp, #120	; 0x78
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800aac8:	2200      	movs	r2, #0
 800aaca:	601a      	str	r2, [r3, #0]
 800aacc:	605a      	str	r2, [r3, #4]
 800aace:	609a      	str	r2, [r3, #8]
 800aad0:	60da      	str	r2, [r3, #12]
 800aad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	2250      	movs	r2, #80	; 0x50
 800aada:	2100      	movs	r1, #0
 800aadc:	4618      	mov	r0, r3
 800aade:	f007 f957 	bl	8011d90 <memset>
  if(uartHandle->Instance==USART1)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a1f      	ldr	r2, [pc, #124]	; (800ab64 <HAL_UART_MspInit+0xa8>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d137      	bne.n	800ab5c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800aaec:	2301      	movs	r3, #1
 800aaee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aaf4:	f107 0314 	add.w	r3, r7, #20
 800aaf8:	4618      	mov	r0, r3
 800aafa:	f003 fe21 	bl	800e740 <HAL_RCCEx_PeriphCLKConfig>
 800aafe:	4603      	mov	r3, r0
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d001      	beq.n	800ab08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800ab04:	f7fe fbc7 	bl	8009296 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800ab08:	4b17      	ldr	r3, [pc, #92]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab0c:	4a16      	ldr	r2, [pc, #88]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ab12:	6613      	str	r3, [r2, #96]	; 0x60
 800ab14:	4b14      	ldr	r3, [pc, #80]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab1c:	613b      	str	r3, [r7, #16]
 800ab1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ab20:	4b11      	ldr	r3, [pc, #68]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab24:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab2c:	4b0e      	ldr	r3, [pc, #56]	; (800ab68 <HAL_UART_MspInit+0xac>)
 800ab2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab30:	f003 0301 	and.w	r3, r3, #1
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800ab38:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800ab3c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab3e:	2302      	movs	r3, #2
 800ab40:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab42:	2300      	movs	r3, #0
 800ab44:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab46:	2300      	movs	r3, #0
 800ab48:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ab4a:	2307      	movs	r3, #7
 800ab4c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab4e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ab52:	4619      	mov	r1, r3
 800ab54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800ab58:	f002 fe74 	bl	800d844 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800ab5c:	bf00      	nop
 800ab5e:	3778      	adds	r7, #120	; 0x78
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	40013800 	.word	0x40013800
 800ab68:	40021000 	.word	0x40021000

0800ab6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800ab6c:	480d      	ldr	r0, [pc, #52]	; (800aba4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800ab6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ab70:	480d      	ldr	r0, [pc, #52]	; (800aba8 <LoopForever+0x6>)
  ldr r1, =_edata
 800ab72:	490e      	ldr	r1, [pc, #56]	; (800abac <LoopForever+0xa>)
  ldr r2, =_sidata
 800ab74:	4a0e      	ldr	r2, [pc, #56]	; (800abb0 <LoopForever+0xe>)
  movs r3, #0
 800ab76:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800ab78:	e002      	b.n	800ab80 <LoopCopyDataInit>

0800ab7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ab7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ab7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ab7e:	3304      	adds	r3, #4

0800ab80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ab80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ab82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ab84:	d3f9      	bcc.n	800ab7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ab86:	4a0b      	ldr	r2, [pc, #44]	; (800abb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800ab88:	4c0b      	ldr	r4, [pc, #44]	; (800abb8 <LoopForever+0x16>)
  movs r3, #0
 800ab8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ab8c:	e001      	b.n	800ab92 <LoopFillZerobss>

0800ab8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ab8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ab90:	3204      	adds	r2, #4

0800ab92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ab92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ab94:	d3fb      	bcc.n	800ab8e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ab96:	f7ff fd1d 	bl	800a5d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ab9a:	f007 f8c7 	bl	8011d2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ab9e:	f7fe fa81 	bl	80090a4 <main>

0800aba2 <LoopForever>:

LoopForever:
    b LoopForever
 800aba2:	e7fe      	b.n	800aba2 <LoopForever>
  ldr   r0, =_estack
 800aba4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 800aba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800abac:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 800abb0:	08015278 	.word	0x08015278
  ldr r2, =_sbss
 800abb4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 800abb8:	2000c5ec 	.word	0x2000c5ec

0800abbc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800abbc:	e7fe      	b.n	800abbc <ADC3_IRQHandler>

0800abbe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b082      	sub	sp, #8
 800abc2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800abc4:	2300      	movs	r3, #0
 800abc6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800abc8:	2003      	movs	r0, #3
 800abca:	f002 fb2f 	bl	800d22c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800abce:	200f      	movs	r0, #15
 800abd0:	f000 f80e 	bl	800abf0 <HAL_InitTick>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800abda:	2301      	movs	r3, #1
 800abdc:	71fb      	strb	r3, [r7, #7]
 800abde:	e001      	b.n	800abe4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800abe0:	f7ff fba8 	bl	800a334 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800abe4:	79fb      	ldrb	r3, [r7, #7]

}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3708      	adds	r7, #8
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
	...

0800abf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800abf8:	2300      	movs	r3, #0
 800abfa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800abfc:	4b16      	ldr	r3, [pc, #88]	; (800ac58 <HAL_InitTick+0x68>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d022      	beq.n	800ac4a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800ac04:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <HAL_InitTick+0x6c>)
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	4b13      	ldr	r3, [pc, #76]	; (800ac58 <HAL_InitTick+0x68>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800ac10:	fbb1 f3f3 	udiv	r3, r1, r3
 800ac14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 fb3a 	bl	800d292 <HAL_SYSTICK_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10f      	bne.n	800ac44 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d809      	bhi.n	800ac3e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	6879      	ldr	r1, [r7, #4]
 800ac2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ac32:	f002 fb06 	bl	800d242 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac36:	4a0a      	ldr	r2, [pc, #40]	; (800ac60 <HAL_InitTick+0x70>)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6013      	str	r3, [r2, #0]
 800ac3c:	e007      	b.n	800ac4e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800ac3e:	2301      	movs	r3, #1
 800ac40:	73fb      	strb	r3, [r7, #15]
 800ac42:	e004      	b.n	800ac4e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
 800ac46:	73fb      	strb	r3, [r7, #15]
 800ac48:	e001      	b.n	800ac4e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}
 800ac58:	20000008 	.word	0x20000008
 800ac5c:	20000000 	.word	0x20000000
 800ac60:	20000004 	.word	0x20000004

0800ac64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ac64:	b480      	push	{r7}
 800ac66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800ac68:	4b05      	ldr	r3, [pc, #20]	; (800ac80 <HAL_IncTick+0x1c>)
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <HAL_IncTick+0x20>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4413      	add	r3, r2
 800ac72:	4a03      	ldr	r2, [pc, #12]	; (800ac80 <HAL_IncTick+0x1c>)
 800ac74:	6013      	str	r3, [r2, #0]
}
 800ac76:	bf00      	nop
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	2000c5d8 	.word	0x2000c5d8
 800ac84:	20000008 	.word	0x20000008

0800ac88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	af00      	add	r7, sp, #0
  return uwTick;
 800ac8c:	4b03      	ldr	r3, [pc, #12]	; (800ac9c <HAL_GetTick+0x14>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
 800ac9a:	bf00      	nop
 800ac9c:	2000c5d8 	.word	0x2000c5d8

0800aca0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b084      	sub	sp, #16
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aca8:	f7ff ffee 	bl	800ac88 <HAL_GetTick>
 800acac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb8:	d004      	beq.n	800acc4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800acba:	4b09      	ldr	r3, [pc, #36]	; (800ace0 <HAL_Delay+0x40>)
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	4413      	add	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800acc4:	bf00      	nop
 800acc6:	f7ff ffdf 	bl	800ac88 <HAL_GetTick>
 800acca:	4602      	mov	r2, r0
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	1ad3      	subs	r3, r2, r3
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	429a      	cmp	r2, r3
 800acd4:	d8f7      	bhi.n	800acc6 <HAL_Delay+0x26>
  {
  }
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}
 800ace0:	20000008 	.word	0x20000008

0800ace4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b083      	sub	sp, #12
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	689b      	ldr	r3, [r3, #8]
 800acf2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	431a      	orrs	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	609a      	str	r2, [r3, #8]
}
 800acfe:	bf00      	nop
 800ad00:	370c      	adds	r7, #12
 800ad02:	46bd      	mov	sp, r7
 800ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad08:	4770      	bx	lr

0800ad0a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800ad0a:	b480      	push	{r7}
 800ad0c:	b083      	sub	sp, #12
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	431a      	orrs	r2, r3
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	609a      	str	r2, [r3, #8]
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800ad40:	4618      	mov	r0, r3
 800ad42:	370c      	adds	r7, #12
 800ad44:	46bd      	mov	sp, r7
 800ad46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4a:	4770      	bx	lr

0800ad4c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b087      	sub	sp, #28
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
 800ad58:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	3360      	adds	r3, #96	; 0x60
 800ad5e:	461a      	mov	r2, r3
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	009b      	lsls	r3, r3, #2
 800ad64:	4413      	add	r3, r2
 800ad66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	4b08      	ldr	r3, [pc, #32]	; (800ad90 <LL_ADC_SetOffset+0x44>)
 800ad6e:	4013      	ands	r3, r2
 800ad70:	687a      	ldr	r2, [r7, #4]
 800ad72:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800ad76:	683a      	ldr	r2, [r7, #0]
 800ad78:	430a      	orrs	r2, r1
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800ad84:	bf00      	nop
 800ad86:	371c      	adds	r7, #28
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8e:	4770      	bx	lr
 800ad90:	03fff000 	.word	0x03fff000

0800ad94 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3360      	adds	r3, #96	; 0x60
 800ada2:	461a      	mov	r2, r3
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	4413      	add	r3, r2
 800adaa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3714      	adds	r7, #20
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800adc0:	b480      	push	{r7}
 800adc2:	b087      	sub	sp, #28
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	3360      	adds	r3, #96	; 0x60
 800add0:	461a      	mov	r2, r3
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	4413      	add	r3, r2
 800add8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	431a      	orrs	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800adea:	bf00      	nop
 800adec:	371c      	adds	r7, #28
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr

0800adf6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800adf6:	b480      	push	{r7}
 800adf8:	b087      	sub	sp, #28
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	60f8      	str	r0, [r7, #12]
 800adfe:	60b9      	str	r1, [r7, #8]
 800ae00:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	3360      	adds	r3, #96	; 0x60
 800ae06:	461a      	mov	r2, r3
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	4413      	add	r3, r2
 800ae0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	431a      	orrs	r2, r3
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800ae20:	bf00      	nop
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr

0800ae2c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b087      	sub	sp, #28
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3360      	adds	r3, #96	; 0x60
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	4413      	add	r3, r2
 800ae44:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	431a      	orrs	r2, r3
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800ae56:	bf00      	nop
 800ae58:	371c      	adds	r7, #28
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae60:	4770      	bx	lr

0800ae62 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800ae62:	b480      	push	{r7}
 800ae64:	b083      	sub	sp, #12
 800ae66:	af00      	add	r7, sp, #0
 800ae68:	6078      	str	r0, [r7, #4]
 800ae6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	431a      	orrs	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	615a      	str	r2, [r3, #20]
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d101      	bne.n	800aea0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800ae9c:	2301      	movs	r3, #1
 800ae9e:	e000      	b.n	800aea2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800aea0:	2300      	movs	r3, #0
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	370c      	adds	r7, #12
 800aea6:	46bd      	mov	sp, r7
 800aea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeac:	4770      	bx	lr

0800aeae <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800aeae:	b480      	push	{r7}
 800aeb0:	b087      	sub	sp, #28
 800aeb2:	af00      	add	r7, sp, #0
 800aeb4:	60f8      	str	r0, [r7, #12]
 800aeb6:	60b9      	str	r1, [r7, #8]
 800aeb8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3330      	adds	r3, #48	; 0x30
 800aebe:	461a      	mov	r2, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	0a1b      	lsrs	r3, r3, #8
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	f003 030c 	and.w	r3, r3, #12
 800aeca:	4413      	add	r3, r2
 800aecc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	211f      	movs	r1, #31
 800aeda:	fa01 f303 	lsl.w	r3, r1, r3
 800aede:	43db      	mvns	r3, r3
 800aee0:	401a      	ands	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0e9b      	lsrs	r3, r3, #26
 800aee6:	f003 011f 	and.w	r1, r3, #31
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	f003 031f 	and.w	r3, r3, #31
 800aef0:	fa01 f303 	lsl.w	r3, r1, r3
 800aef4:	431a      	orrs	r2, r3
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800af06:	b480      	push	{r7}
 800af08:	b083      	sub	sp, #12
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af12:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800af16:	2b00      	cmp	r3, #0
 800af18:	d101      	bne.n	800af1e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800af1a:	2301      	movs	r3, #1
 800af1c:	e000      	b.n	800af20 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800af1e:	2300      	movs	r3, #0
}
 800af20:	4618      	mov	r0, r3
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr

0800af2c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	3314      	adds	r3, #20
 800af3c:	461a      	mov	r2, r3
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	0e5b      	lsrs	r3, r3, #25
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	f003 0304 	and.w	r3, r3, #4
 800af48:	4413      	add	r3, r2
 800af4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	681a      	ldr	r2, [r3, #0]
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	0d1b      	lsrs	r3, r3, #20
 800af54:	f003 031f 	and.w	r3, r3, #31
 800af58:	2107      	movs	r1, #7
 800af5a:	fa01 f303 	lsl.w	r3, r1, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	401a      	ands	r2, r3
 800af62:	68bb      	ldr	r3, [r7, #8]
 800af64:	0d1b      	lsrs	r3, r3, #20
 800af66:	f003 031f 	and.w	r3, r3, #31
 800af6a:	6879      	ldr	r1, [r7, #4]
 800af6c:	fa01 f303 	lsl.w	r3, r1, r3
 800af70:	431a      	orrs	r2, r3
 800af72:	697b      	ldr	r3, [r7, #20]
 800af74:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800af76:	bf00      	nop
 800af78:	371c      	adds	r7, #28
 800af7a:	46bd      	mov	sp, r7
 800af7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af80:	4770      	bx	lr
	...

0800af84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	4a0f      	ldr	r2, [pc, #60]	; (800afd0 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800af94:	4293      	cmp	r3, r2
 800af96:	d10a      	bne.n	800afae <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afa4:	431a      	orrs	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800afac:	e00a      	b.n	800afc4 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afba:	43db      	mvns	r3, r3
 800afbc:	401a      	ands	r2, r3
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800afc4:	bf00      	nop
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	407f0000 	.word	0x407f0000

0800afd4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b083      	sub	sp, #12
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	f003 031f 	and.w	r3, r3, #31
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800b000:	4618      	mov	r0, r3
 800b002:	370c      	adds	r7, #12
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	689b      	ldr	r3, [r3, #8]
 800b018:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800b01c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b020:	687a      	ldr	r2, [r7, #4]
 800b022:	6093      	str	r3, [r2, #8]
}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b040:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b044:	d101      	bne.n	800b04a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800b04a:	2300      	movs	r3, #0
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	370c      	adds	r7, #12
 800b050:	46bd      	mov	sp, r7
 800b052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b056:	4770      	bx	lr

0800b058 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	689b      	ldr	r3, [r3, #8]
 800b064:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800b068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b06c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800b074:	bf00      	nop
 800b076:	370c      	adds	r7, #12
 800b078:	46bd      	mov	sp, r7
 800b07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07e:	4770      	bx	lr

0800b080 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800b080:	b480      	push	{r7}
 800b082:	b083      	sub	sp, #12
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	689b      	ldr	r3, [r3, #8]
 800b08c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b090:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b094:	d101      	bne.n	800b09a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800b096:	2301      	movs	r3, #1
 800b098:	e000      	b.n	800b09c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	370c      	adds	r7, #12
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a6:	4770      	bx	lr

0800b0a8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b0bc:	f043 0201 	orr.w	r2, r3, #1
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800b0c4:	bf00      	nop
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800b0d0:	b480      	push	{r7}
 800b0d2:	b083      	sub	sp, #12
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	689b      	ldr	r3, [r3, #8]
 800b0dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b0e4:	f043 0202 	orr.w	r2, r3, #2
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800b0ec:	bf00      	nop
 800b0ee:	370c      	adds	r7, #12
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr

0800b0f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	689b      	ldr	r3, [r3, #8]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d101      	bne.n	800b110 <LL_ADC_IsEnabled+0x18>
 800b10c:	2301      	movs	r3, #1
 800b10e:	e000      	b.n	800b112 <LL_ADC_IsEnabled+0x1a>
 800b110:	2300      	movs	r3, #0
}
 800b112:	4618      	mov	r0, r3
 800b114:	370c      	adds	r7, #12
 800b116:	46bd      	mov	sp, r7
 800b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11c:	4770      	bx	lr

0800b11e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	f003 0302 	and.w	r3, r3, #2
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d101      	bne.n	800b136 <LL_ADC_IsDisableOngoing+0x18>
 800b132:	2301      	movs	r3, #1
 800b134:	e000      	b.n	800b138 <LL_ADC_IsDisableOngoing+0x1a>
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	370c      	adds	r7, #12
 800b13c:	46bd      	mov	sp, r7
 800b13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b142:	4770      	bx	lr

0800b144 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	689b      	ldr	r3, [r3, #8]
 800b150:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b154:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b158:	f043 0204 	orr.w	r2, r3, #4
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800b16c:	b480      	push	{r7}
 800b16e:	b083      	sub	sp, #12
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b17c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b180:	f043 0210 	orr.w	r2, r3, #16
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800b188:	bf00      	nop
 800b18a:	370c      	adds	r7, #12
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr

0800b194 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b194:	b480      	push	{r7}
 800b196:	b083      	sub	sp, #12
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	689b      	ldr	r3, [r3, #8]
 800b1a0:	f003 0304 	and.w	r3, r3, #4
 800b1a4:	2b04      	cmp	r3, #4
 800b1a6:	d101      	bne.n	800b1ac <LL_ADC_REG_IsConversionOngoing+0x18>
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e000      	b.n	800b1ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800b1ba:	b480      	push	{r7}
 800b1bc:	b083      	sub	sp, #12
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	689b      	ldr	r3, [r3, #8]
 800b1c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b1ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b1ce:	f043 0220 	orr.w	r2, r3, #32
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800b1d6:	bf00      	nop
 800b1d8:	370c      	adds	r7, #12
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e0:	4770      	bx	lr

0800b1e2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800b1e2:	b480      	push	{r7}
 800b1e4:	b083      	sub	sp, #12
 800b1e6:	af00      	add	r7, sp, #0
 800b1e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	f003 0308 	and.w	r3, r3, #8
 800b1f2:	2b08      	cmp	r3, #8
 800b1f4:	d101      	bne.n	800b1fa <LL_ADC_INJ_IsConversionOngoing+0x18>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e000      	b.n	800b1fc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800b208:	b590      	push	{r4, r7, lr}
 800b20a:	b089      	sub	sp, #36	; 0x24
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800b214:	2300      	movs	r3, #0
 800b216:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800b21e:	2301      	movs	r3, #1
 800b220:	e1a1      	b.n	800b566 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	695b      	ldr	r3, [r3, #20]
 800b226:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d109      	bne.n	800b244 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f7fc f9dd 	bl	80075f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2200      	movs	r2, #0
 800b23a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2200      	movs	r2, #0
 800b240:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff fef1 	bl	800b030 <LL_ADC_IsDeepPowerDownEnabled>
 800b24e:	4603      	mov	r3, r0
 800b250:	2b00      	cmp	r3, #0
 800b252:	d004      	beq.n	800b25e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4618      	mov	r0, r3
 800b25a:	f7ff fed7 	bl	800b00c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4618      	mov	r0, r3
 800b264:	f7ff ff0c 	bl	800b080 <LL_ADC_IsInternalRegulatorEnabled>
 800b268:	4603      	mov	r3, r0
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d115      	bne.n	800b29a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4618      	mov	r0, r3
 800b274:	f7ff fef0 	bl	800b058 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800b278:	4b9a      	ldr	r3, [pc, #616]	; (800b4e4 <HAL_ADC_Init+0x2dc>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	099b      	lsrs	r3, r3, #6
 800b27e:	4a9a      	ldr	r2, [pc, #616]	; (800b4e8 <HAL_ADC_Init+0x2e0>)
 800b280:	fba2 2303 	umull	r2, r3, r2, r3
 800b284:	099b      	lsrs	r3, r3, #6
 800b286:	3301      	adds	r3, #1
 800b288:	005b      	lsls	r3, r3, #1
 800b28a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b28c:	e002      	b.n	800b294 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	3b01      	subs	r3, #1
 800b292:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1f9      	bne.n	800b28e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f7ff feee 	bl	800b080 <LL_ADC_IsInternalRegulatorEnabled>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10d      	bne.n	800b2c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ae:	f043 0210 	orr.w	r2, r3, #16
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2ba:	f043 0201 	orr.w	r2, r3, #1
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	f7ff ff62 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800b2d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2d6:	f003 0310 	and.w	r3, r3, #16
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f040 813a 	bne.w	800b554 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f040 8136 	bne.w	800b554 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800b2f0:	f043 0202 	orr.w	r2, r3, #2
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7ff fefb 	bl	800b0f8 <LL_ADC_IsEnabled>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	d137      	bne.n	800b378 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b310:	d004      	beq.n	800b31c <HAL_ADC_Init+0x114>
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	4a75      	ldr	r2, [pc, #468]	; (800b4ec <HAL_ADC_Init+0x2e4>)
 800b318:	4293      	cmp	r3, r2
 800b31a:	d10f      	bne.n	800b33c <HAL_ADC_Init+0x134>
 800b31c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800b320:	f7ff feea 	bl	800b0f8 <LL_ADC_IsEnabled>
 800b324:	4604      	mov	r4, r0
 800b326:	4871      	ldr	r0, [pc, #452]	; (800b4ec <HAL_ADC_Init+0x2e4>)
 800b328:	f7ff fee6 	bl	800b0f8 <LL_ADC_IsEnabled>
 800b32c:	4603      	mov	r3, r0
 800b32e:	4323      	orrs	r3, r4
 800b330:	2b00      	cmp	r3, #0
 800b332:	bf0c      	ite	eq
 800b334:	2301      	moveq	r3, #1
 800b336:	2300      	movne	r3, #0
 800b338:	b2db      	uxtb	r3, r3
 800b33a:	e008      	b.n	800b34e <HAL_ADC_Init+0x146>
 800b33c:	486c      	ldr	r0, [pc, #432]	; (800b4f0 <HAL_ADC_Init+0x2e8>)
 800b33e:	f7ff fedb 	bl	800b0f8 <LL_ADC_IsEnabled>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	bf0c      	ite	eq
 800b348:	2301      	moveq	r3, #1
 800b34a:	2300      	movne	r3, #0
 800b34c:	b2db      	uxtb	r3, r3
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d012      	beq.n	800b378 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b35a:	d004      	beq.n	800b366 <HAL_ADC_Init+0x15e>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	4a62      	ldr	r2, [pc, #392]	; (800b4ec <HAL_ADC_Init+0x2e4>)
 800b362:	4293      	cmp	r3, r2
 800b364:	d101      	bne.n	800b36a <HAL_ADC_Init+0x162>
 800b366:	4a63      	ldr	r2, [pc, #396]	; (800b4f4 <HAL_ADC_Init+0x2ec>)
 800b368:	e000      	b.n	800b36c <HAL_ADC_Init+0x164>
 800b36a:	4a63      	ldr	r2, [pc, #396]	; (800b4f8 <HAL_ADC_Init+0x2f0>)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	4619      	mov	r1, r3
 800b372:	4610      	mov	r0, r2
 800b374:	f7ff fcb6 	bl	800ace4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	7f5b      	ldrb	r3, [r3, #29]
 800b37c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b382:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800b388:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800b38e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b396:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800b398:	4313      	orrs	r3, r2
 800b39a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d106      	bne.n	800b3b4 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3aa:	3b01      	subs	r3, #1
 800b3ac:	045b      	lsls	r3, r3, #17
 800b3ae:	69ba      	ldr	r2, [r7, #24]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d009      	beq.n	800b3d0 <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3c0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3c8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800b3ca:	69ba      	ldr	r2, [r7, #24]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	68da      	ldr	r2, [r3, #12]
 800b3d6:	4b49      	ldr	r3, [pc, #292]	; (800b4fc <HAL_ADC_Init+0x2f4>)
 800b3d8:	4013      	ands	r3, r2
 800b3da:	687a      	ldr	r2, [r7, #4]
 800b3dc:	6812      	ldr	r2, [r2, #0]
 800b3de:	69b9      	ldr	r1, [r7, #24]
 800b3e0:	430b      	orrs	r3, r1
 800b3e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	430a      	orrs	r2, r1
 800b3f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	4618      	mov	r0, r3
 800b400:	f7ff fec8 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800b404:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4618      	mov	r0, r3
 800b40c:	f7ff fee9 	bl	800b1e2 <LL_ADC_INJ_IsConversionOngoing>
 800b410:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d17b      	bne.n	800b510 <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d178      	bne.n	800b510 <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b422:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b42a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800b42c:	4313      	orrs	r3, r2
 800b42e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
 800b436:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b43a:	f023 0302 	bic.w	r3, r3, #2
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	6812      	ldr	r2, [r2, #0]
 800b442:	69b9      	ldr	r1, [r7, #24]
 800b444:	430b      	orrs	r3, r1
 800b446:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d017      	beq.n	800b480 <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b45e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b468:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b46c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6911      	ldr	r1, [r2, #16]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	6812      	ldr	r2, [r2, #0]
 800b478:	430b      	orrs	r3, r1
 800b47a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800b47e:	e013      	b.n	800b4a8 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b48e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	6812      	ldr	r2, [r2, #0]
 800b49c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800b4a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800b4a4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d126      	bne.n	800b500 <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	691b      	ldr	r3, [r3, #16]
 800b4b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b4bc:	f023 0304 	bic.w	r3, r3, #4
 800b4c0:	687a      	ldr	r2, [r7, #4]
 800b4c2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b4c8:	4311      	orrs	r1, r2
 800b4ca:	687a      	ldr	r2, [r7, #4]
 800b4cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800b4ce:	4311      	orrs	r1, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b4d4:	430a      	orrs	r2, r1
 800b4d6:	431a      	orrs	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f042 0201 	orr.w	r2, r2, #1
 800b4e0:	611a      	str	r2, [r3, #16]
 800b4e2:	e015      	b.n	800b510 <HAL_ADC_Init+0x308>
 800b4e4:	20000000 	.word	0x20000000
 800b4e8:	053e2d63 	.word	0x053e2d63
 800b4ec:	50000100 	.word	0x50000100
 800b4f0:	50000400 	.word	0x50000400
 800b4f4:	50000300 	.word	0x50000300
 800b4f8:	50000700 	.word	0x50000700
 800b4fc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 0201 	bic.w	r2, r2, #1
 800b50e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d10c      	bne.n	800b532 <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	f023 010f 	bic.w	r1, r3, #15
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a1b      	ldr	r3, [r3, #32]
 800b526:	1e5a      	subs	r2, r3, #1
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	430a      	orrs	r2, r1
 800b52e:	631a      	str	r2, [r3, #48]	; 0x30
 800b530:	e007      	b.n	800b542 <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f022 020f 	bic.w	r2, r2, #15
 800b540:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b546:	f023 0303 	bic.w	r3, r3, #3
 800b54a:	f043 0201 	orr.w	r2, r3, #1
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	65da      	str	r2, [r3, #92]	; 0x5c
 800b552:	e007      	b.n	800b564 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b558:	f043 0210 	orr.w	r2, r3, #16
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800b560:	2301      	movs	r3, #1
 800b562:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800b564:	7ffb      	ldrb	r3, [r7, #31]
}
 800b566:	4618      	mov	r0, r3
 800b568:	3724      	adds	r7, #36	; 0x24
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd90      	pop	{r4, r7, pc}
 800b56e:	bf00      	nop

0800b570 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b580:	d004      	beq.n	800b58c <HAL_ADC_Start+0x1c>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a5c      	ldr	r2, [pc, #368]	; (800b6f8 <HAL_ADC_Start+0x188>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d101      	bne.n	800b590 <HAL_ADC_Start+0x20>
 800b58c:	4b5b      	ldr	r3, [pc, #364]	; (800b6fc <HAL_ADC_Start+0x18c>)
 800b58e:	e000      	b.n	800b592 <HAL_ADC_Start+0x22>
 800b590:	4b5b      	ldr	r3, [pc, #364]	; (800b700 <HAL_ADC_Start+0x190>)
 800b592:	4618      	mov	r0, r3
 800b594:	f7ff fd1e 	bl	800afd4 <LL_ADC_GetMultimode>
 800b598:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	4618      	mov	r0, r3
 800b5a0:	f7ff fdf8 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	f040 809f 	bne.w	800b6ea <HAL_ADC_Start+0x17a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <HAL_ADC_Start+0x4a>
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e09a      	b.n	800b6f0 <HAL_ADC_Start+0x180>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2201      	movs	r2, #1
 800b5be:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f001 fa3e 	bl	800ca44 <ADC_Enable>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800b5cc:	7dfb      	ldrb	r3, [r7, #23]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	f040 8086 	bne.w	800b6e0 <HAL_ADC_Start+0x170>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b5dc:	f023 0301 	bic.w	r3, r3, #1
 800b5e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	4a42      	ldr	r2, [pc, #264]	; (800b6f8 <HAL_ADC_Start+0x188>)
 800b5ee:	4293      	cmp	r3, r2
 800b5f0:	d002      	beq.n	800b5f8 <HAL_ADC_Start+0x88>
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	e001      	b.n	800b5fc <HAL_ADC_Start+0x8c>
 800b5f8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b5fc:	687a      	ldr	r2, [r7, #4]
 800b5fe:	6812      	ldr	r2, [r2, #0]
 800b600:	4293      	cmp	r3, r2
 800b602:	d002      	beq.n	800b60a <HAL_ADC_Start+0x9a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d105      	bne.n	800b616 <HAL_ADC_Start+0xa6>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b60e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b61a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b622:	d106      	bne.n	800b632 <HAL_ADC_Start+0xc2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b628:	f023 0206 	bic.w	r2, r3, #6
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	661a      	str	r2, [r3, #96]	; 0x60
 800b630:	e002      	b.n	800b638 <HAL_ADC_Start+0xc8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2200      	movs	r2, #0
 800b636:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	221c      	movs	r2, #28
 800b63e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	4a2a      	ldr	r2, [pc, #168]	; (800b6f8 <HAL_ADC_Start+0x188>)
 800b64e:	4293      	cmp	r3, r2
 800b650:	d002      	beq.n	800b658 <HAL_ADC_Start+0xe8>
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	e001      	b.n	800b65c <HAL_ADC_Start+0xec>
 800b658:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	6812      	ldr	r2, [r2, #0]
 800b660:	4293      	cmp	r3, r2
 800b662:	d008      	beq.n	800b676 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d005      	beq.n	800b676 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b66a:	693b      	ldr	r3, [r7, #16]
 800b66c:	2b05      	cmp	r3, #5
 800b66e:	d002      	beq.n	800b676 <HAL_ADC_Start+0x106>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	2b09      	cmp	r3, #9
 800b674:	d114      	bne.n	800b6a0 <HAL_ADC_Start+0x130>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b680:	2b00      	cmp	r3, #0
 800b682:	d007      	beq.n	800b694 <HAL_ADC_Start+0x124>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b688:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b68c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7ff fd53 	bl	800b144 <LL_ADC_REG_StartConversion>
 800b69e:	e026      	b.n	800b6ee <HAL_ADC_Start+0x17e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	4a11      	ldr	r2, [pc, #68]	; (800b6f8 <HAL_ADC_Start+0x188>)
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d002      	beq.n	800b6bc <HAL_ADC_Start+0x14c>
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	e001      	b.n	800b6c0 <HAL_ADC_Start+0x150>
 800b6bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b6c0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00f      	beq.n	800b6ee <HAL_ADC_Start+0x17e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800b6d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b6de:	e006      	b.n	800b6ee <HAL_ADC_Start+0x17e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800b6e8:	e001      	b.n	800b6ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800b6ea:	2302      	movs	r3, #2
 800b6ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800b6ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	50000100 	.word	0x50000100
 800b6fc:	50000300 	.word	0x50000300
 800b700:	50000700 	.word	0x50000700

0800b704 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b712:	2b01      	cmp	r3, #1
 800b714:	d101      	bne.n	800b71a <HAL_ADC_Stop+0x16>
 800b716:	2302      	movs	r3, #2
 800b718:	e023      	b.n	800b762 <HAL_ADC_Stop+0x5e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	2201      	movs	r2, #1
 800b71e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800b722:	2103      	movs	r1, #3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f001 f8d1 	bl	800c8cc <ADC_ConversionStop>
 800b72a:	4603      	mov	r3, r0
 800b72c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d111      	bne.n	800b758 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f9e7 	bl	800cb08 <ADC_Disable>
 800b73a:	4603      	mov	r3, r0
 800b73c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800b73e:	7bfb      	ldrb	r3, [r7, #15]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d109      	bne.n	800b758 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b748:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800b74c:	f023 0301 	bic.w	r3, r3, #1
 800b750:	f043 0201 	orr.w	r2, r3, #1
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2200      	movs	r2, #0
 800b75c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800b760:	7bfb      	ldrb	r3, [r7, #15]
}
 800b762:	4618      	mov	r0, r3
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
	...

0800b76c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	b088      	sub	sp, #32
 800b770:	af00      	add	r7, sp, #0
 800b772:	6078      	str	r0, [r7, #4]
 800b774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b77e:	d004      	beq.n	800b78a <HAL_ADC_PollForConversion+0x1e>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	4a70      	ldr	r2, [pc, #448]	; (800b948 <HAL_ADC_PollForConversion+0x1dc>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d101      	bne.n	800b78e <HAL_ADC_PollForConversion+0x22>
 800b78a:	4b70      	ldr	r3, [pc, #448]	; (800b94c <HAL_ADC_PollForConversion+0x1e0>)
 800b78c:	e000      	b.n	800b790 <HAL_ADC_PollForConversion+0x24>
 800b78e:	4b70      	ldr	r3, [pc, #448]	; (800b950 <HAL_ADC_PollForConversion+0x1e4>)
 800b790:	4618      	mov	r0, r3
 800b792:	f7ff fc1f 	bl	800afd4 <LL_ADC_GetMultimode>
 800b796:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	699b      	ldr	r3, [r3, #24]
 800b79c:	2b08      	cmp	r3, #8
 800b79e:	d102      	bne.n	800b7a6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800b7a0:	2308      	movs	r3, #8
 800b7a2:	61fb      	str	r3, [r7, #28]
 800b7a4:	e037      	b.n	800b816 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b7a6:	697b      	ldr	r3, [r7, #20]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d005      	beq.n	800b7b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	d002      	beq.n	800b7b8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	2b09      	cmp	r3, #9
 800b7b6:	d111      	bne.n	800b7dc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	68db      	ldr	r3, [r3, #12]
 800b7be:	f003 0301 	and.w	r3, r3, #1
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d007      	beq.n	800b7d6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ca:	f043 0220 	orr.w	r2, r3, #32
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e0b3      	b.n	800b93e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800b7d6:	2304      	movs	r3, #4
 800b7d8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800b7da:	e01c      	b.n	800b816 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b7e4:	d004      	beq.n	800b7f0 <HAL_ADC_PollForConversion+0x84>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	4a57      	ldr	r2, [pc, #348]	; (800b948 <HAL_ADC_PollForConversion+0x1dc>)
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	d101      	bne.n	800b7f4 <HAL_ADC_PollForConversion+0x88>
 800b7f0:	4b56      	ldr	r3, [pc, #344]	; (800b94c <HAL_ADC_PollForConversion+0x1e0>)
 800b7f2:	e000      	b.n	800b7f6 <HAL_ADC_PollForConversion+0x8a>
 800b7f4:	4b56      	ldr	r3, [pc, #344]	; (800b950 <HAL_ADC_PollForConversion+0x1e4>)
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7ff fbfa 	bl	800aff0 <LL_ADC_GetMultiDMATransfer>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d007      	beq.n	800b812 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b806:	f043 0220 	orr.w	r2, r3, #32
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	e095      	b.n	800b93e <HAL_ADC_PollForConversion+0x1d2>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800b812:	2304      	movs	r3, #4
 800b814:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800b816:	f7ff fa37 	bl	800ac88 <HAL_GetTick>
 800b81a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b81c:	e021      	b.n	800b862 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b824:	d01d      	beq.n	800b862 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800b826:	f7ff fa2f 	bl	800ac88 <HAL_GetTick>
 800b82a:	4602      	mov	r2, r0
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	683a      	ldr	r2, [r7, #0]
 800b832:	429a      	cmp	r2, r3
 800b834:	d302      	bcc.n	800b83c <HAL_ADC_PollForConversion+0xd0>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d112      	bne.n	800b862 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	681a      	ldr	r2, [r3, #0]
 800b842:	69fb      	ldr	r3, [r7, #28]
 800b844:	4013      	ands	r3, r2
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10b      	bne.n	800b862 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84e:	f043 0204 	orr.w	r2, r3, #4
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e06d      	b.n	800b93e <HAL_ADC_PollForConversion+0x1d2>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	681a      	ldr	r2, [r3, #0]
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	4013      	ands	r3, r2
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0d6      	beq.n	800b81e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b874:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	4618      	mov	r0, r3
 800b882:	f7ff fb01 	bl	800ae88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d01c      	beq.n	800b8c6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	7f5b      	ldrb	r3, [r3, #29]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d118      	bne.n	800b8c6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0308 	and.w	r3, r3, #8
 800b89e:	2b08      	cmp	r3, #8
 800b8a0:	d111      	bne.n	800b8c6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d105      	bne.n	800b8c6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8be:	f043 0201 	orr.w	r2, r3, #1
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	4a1f      	ldr	r2, [pc, #124]	; (800b948 <HAL_ADC_PollForConversion+0x1dc>)
 800b8cc:	4293      	cmp	r3, r2
 800b8ce:	d002      	beq.n	800b8d6 <HAL_ADC_PollForConversion+0x16a>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	e001      	b.n	800b8da <HAL_ADC_PollForConversion+0x16e>
 800b8d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	6812      	ldr	r2, [r2, #0]
 800b8de:	4293      	cmp	r3, r2
 800b8e0:	d008      	beq.n	800b8f4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b8e2:	697b      	ldr	r3, [r7, #20]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d005      	beq.n	800b8f4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	2b05      	cmp	r3, #5
 800b8ec:	d002      	beq.n	800b8f4 <HAL_ADC_PollForConversion+0x188>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b8ee:	697b      	ldr	r3, [r7, #20]
 800b8f0:	2b09      	cmp	r3, #9
 800b8f2:	d104      	bne.n	800b8fe <HAL_ADC_PollForConversion+0x192>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68db      	ldr	r3, [r3, #12]
 800b8fa:	61bb      	str	r3, [r7, #24]
 800b8fc:	e00d      	b.n	800b91a <HAL_ADC_PollForConversion+0x1ae>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a11      	ldr	r2, [pc, #68]	; (800b948 <HAL_ADC_PollForConversion+0x1dc>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d002      	beq.n	800b90e <HAL_ADC_PollForConversion+0x1a2>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	e001      	b.n	800b912 <HAL_ADC_PollForConversion+0x1a6>
 800b90e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b912:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	68db      	ldr	r3, [r3, #12]
 800b918:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	2b08      	cmp	r3, #8
 800b91e:	d104      	bne.n	800b92a <HAL_ADC_PollForConversion+0x1be>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2208      	movs	r2, #8
 800b926:	601a      	str	r2, [r3, #0]
 800b928:	e008      	b.n	800b93c <HAL_ADC_PollForConversion+0x1d0>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800b92a:	69bb      	ldr	r3, [r7, #24]
 800b92c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b930:	2b00      	cmp	r3, #0
 800b932:	d103      	bne.n	800b93c <HAL_ADC_PollForConversion+0x1d0>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	220c      	movs	r2, #12
 800b93a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800b93c:	2300      	movs	r3, #0
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	50000100 	.word	0x50000100
 800b94c:	50000300 	.word	0x50000300
 800b950:	50000700 	.word	0x50000700

0800b954 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b086      	sub	sp, #24
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b968:	d004      	beq.n	800b974 <HAL_ADC_Start_DMA+0x20>
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a57      	ldr	r2, [pc, #348]	; (800bacc <HAL_ADC_Start_DMA+0x178>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d101      	bne.n	800b978 <HAL_ADC_Start_DMA+0x24>
 800b974:	4b56      	ldr	r3, [pc, #344]	; (800bad0 <HAL_ADC_Start_DMA+0x17c>)
 800b976:	e000      	b.n	800b97a <HAL_ADC_Start_DMA+0x26>
 800b978:	4b56      	ldr	r3, [pc, #344]	; (800bad4 <HAL_ADC_Start_DMA+0x180>)
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff fb2a 	bl	800afd4 <LL_ADC_GetMultimode>
 800b980:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4618      	mov	r0, r3
 800b988:	f7ff fc04 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	f040 8094 	bne.w	800babc <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b99a:	2b01      	cmp	r3, #1
 800b99c:	d101      	bne.n	800b9a2 <HAL_ADC_Start_DMA+0x4e>
 800b99e:	2302      	movs	r3, #2
 800b9a0:	e08f      	b.n	800bac2 <HAL_ADC_Start_DMA+0x16e>
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4a4a      	ldr	r2, [pc, #296]	; (800bad8 <HAL_ADC_Start_DMA+0x184>)
 800b9b0:	4293      	cmp	r3, r2
 800b9b2:	d008      	beq.n	800b9c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2b05      	cmp	r3, #5
 800b9be:	d002      	beq.n	800b9c6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b09      	cmp	r3, #9
 800b9c4:	d173      	bne.n	800baae <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800b9c6:	68f8      	ldr	r0, [r7, #12]
 800b9c8:	f001 f83c 	bl	800ca44 <ADC_Enable>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800b9d0:	7dfb      	ldrb	r3, [r7, #23]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d166      	bne.n	800baa4 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b9de:	f023 0301 	bic.w	r3, r3, #1
 800b9e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a37      	ldr	r2, [pc, #220]	; (800bacc <HAL_ADC_Start_DMA+0x178>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d002      	beq.n	800b9fa <HAL_ADC_Start_DMA+0xa6>
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	e001      	b.n	800b9fe <HAL_ADC_Start_DMA+0xaa>
 800b9fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	6812      	ldr	r2, [r2, #0]
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d002      	beq.n	800ba0c <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d105      	bne.n	800ba18 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ba1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d006      	beq.n	800ba32 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba28:	f023 0206 	bic.w	r2, r3, #6
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	661a      	str	r2, [r3, #96]	; 0x60
 800ba30:	e002      	b.n	800ba38 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2200      	movs	r2, #0
 800ba36:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba3c:	4a27      	ldr	r2, [pc, #156]	; (800badc <HAL_ADC_Start_DMA+0x188>)
 800ba3e:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba44:	4a26      	ldr	r2, [pc, #152]	; (800bae0 <HAL_ADC_Start_DMA+0x18c>)
 800ba46:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba4c:	4a25      	ldr	r2, [pc, #148]	; (800bae4 <HAL_ADC_Start_DMA+0x190>)
 800ba4e:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	221c      	movs	r2, #28
 800ba56:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	685a      	ldr	r2, [r3, #4]
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f042 0210 	orr.w	r2, r2, #16
 800ba6e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	68da      	ldr	r2, [r3, #12]
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f042 0201 	orr.w	r2, r2, #1
 800ba7e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	3340      	adds	r3, #64	; 0x40
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f001 fcb4 	bl	800d3fc <HAL_DMA_Start_IT>
 800ba94:	4603      	mov	r3, r0
 800ba96:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f7ff fb51 	bl	800b144 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800baa2:	e00d      	b.n	800bac0 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	2200      	movs	r2, #0
 800baa8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800baac:	e008      	b.n	800bac0 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800baba:	e001      	b.n	800bac0 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800babc:	2302      	movs	r3, #2
 800babe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800bac0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bac2:	4618      	mov	r0, r3
 800bac4:	3718      	adds	r7, #24
 800bac6:	46bd      	mov	sp, r7
 800bac8:	bd80      	pop	{r7, pc}
 800baca:	bf00      	nop
 800bacc:	50000100 	.word	0x50000100
 800bad0:	50000300 	.word	0x50000300
 800bad4:	50000700 	.word	0x50000700
 800bad8:	50000400 	.word	0x50000400
 800badc:	0800cbc7 	.word	0x0800cbc7
 800bae0:	0800cc9f 	.word	0x0800cc9f
 800bae4:	0800ccbb 	.word	0x0800ccbb

0800bae8 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b084      	sub	sp, #16
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d101      	bne.n	800bafe <HAL_ADC_Stop_DMA+0x16>
 800bafa:	2302      	movs	r3, #2
 800bafc:	e051      	b.n	800bba2 <HAL_ADC_Stop_DMA+0xba>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2201      	movs	r2, #1
 800bb02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800bb06:	2103      	movs	r1, #3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 fedf 	bl	800c8cc <ADC_ConversionStop>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800bb12:	7bfb      	ldrb	r3, [r7, #15]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d13f      	bne.n	800bb98 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f022 0201 	bic.w	r2, r2, #1
 800bb26:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb30:	b2db      	uxtb	r3, r3
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d10f      	bne.n	800bb56 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f001 fcd9 	bl	800d4f2 <HAL_DMA_Abort>
 800bb40:	4603      	mov	r3, r0
 800bb42:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800bb44:	7bfb      	ldrb	r3, [r7, #15]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	685a      	ldr	r2, [r3, #4]
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f022 0210 	bic.w	r2, r2, #16
 800bb64:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800bb66:	7bfb      	ldrb	r3, [r7, #15]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d105      	bne.n	800bb78 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f000 ffcb 	bl	800cb08 <ADC_Disable>
 800bb72:	4603      	mov	r3, r0
 800bb74:	73fb      	strb	r3, [r7, #15]
 800bb76:	e002      	b.n	800bb7e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 ffc5 	bl	800cb08 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800bb7e:	7bfb      	ldrb	r3, [r7, #15]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d109      	bne.n	800bb98 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800bb8c:	f023 0301 	bic.w	r3, r3, #1
 800bb90:	f043 0201 	orr.w	r2, r3, #1
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3710      	adds	r7, #16
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}

0800bbaa <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800bbaa:	b480      	push	{r7}
 800bbac:	b083      	sub	sp, #12
 800bbae:	af00      	add	r7, sp, #0
 800bbb0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800bbb8:	4618      	mov	r0, r3
 800bbba:	370c      	adds	r7, #12
 800bbbc:	46bd      	mov	sp, r7
 800bbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc2:	4770      	bx	lr

0800bbc4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b08a      	sub	sp, #40	; 0x28
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800bbcc:	2300      	movs	r3, #0
 800bbce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	685b      	ldr	r3, [r3, #4]
 800bbde:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bbe8:	d004      	beq.n	800bbf4 <HAL_ADC_IRQHandler+0x30>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	4a87      	ldr	r2, [pc, #540]	; (800be0c <HAL_ADC_IRQHandler+0x248>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d101      	bne.n	800bbf8 <HAL_ADC_IRQHandler+0x34>
 800bbf4:	4b86      	ldr	r3, [pc, #536]	; (800be10 <HAL_ADC_IRQHandler+0x24c>)
 800bbf6:	e000      	b.n	800bbfa <HAL_ADC_IRQHandler+0x36>
 800bbf8:	4b86      	ldr	r3, [pc, #536]	; (800be14 <HAL_ADC_IRQHandler+0x250>)
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7ff f9ea 	bl	800afd4 <LL_ADC_GetMultimode>
 800bc00:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d017      	beq.n	800bc3c <HAL_ADC_IRQHandler+0x78>
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	f003 0302 	and.w	r3, r3, #2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d012      	beq.n	800bc3c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc1a:	f003 0310 	and.w	r3, r3, #16
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d105      	bne.n	800bc2e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc26:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f001 f93a 	bl	800cea8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800bc3c:	69fb      	ldr	r3, [r7, #28]
 800bc3e:	f003 0304 	and.w	r3, r3, #4
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d004      	beq.n	800bc50 <HAL_ADC_IRQHandler+0x8c>
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	f003 0304 	and.w	r3, r3, #4
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10a      	bne.n	800bc66 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	f000 8085 	beq.w	800bd66 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800bc5c:	69bb      	ldr	r3, [r7, #24]
 800bc5e:	f003 0308 	and.w	r3, r3, #8
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d07f      	beq.n	800bd66 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc6a:	f003 0310 	and.w	r3, r3, #16
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d105      	bne.n	800bc7e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bc76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7ff f900 	bl	800ae88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d064      	beq.n	800bd58 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4a5e      	ldr	r2, [pc, #376]	; (800be0c <HAL_ADC_IRQHandler+0x248>)
 800bc94:	4293      	cmp	r3, r2
 800bc96:	d002      	beq.n	800bc9e <HAL_ADC_IRQHandler+0xda>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	e001      	b.n	800bca2 <HAL_ADC_IRQHandler+0xde>
 800bc9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800bca2:	687a      	ldr	r2, [r7, #4]
 800bca4:	6812      	ldr	r2, [r2, #0]
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d008      	beq.n	800bcbc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bcaa:	697b      	ldr	r3, [r7, #20]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d005      	beq.n	800bcbc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	2b05      	cmp	r3, #5
 800bcb4:	d002      	beq.n	800bcbc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800bcb6:	697b      	ldr	r3, [r7, #20]
 800bcb8:	2b09      	cmp	r3, #9
 800bcba:	d104      	bne.n	800bcc6 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	623b      	str	r3, [r7, #32]
 800bcc4:	e00d      	b.n	800bce2 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a50      	ldr	r2, [pc, #320]	; (800be0c <HAL_ADC_IRQHandler+0x248>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d002      	beq.n	800bcd6 <HAL_ADC_IRQHandler+0x112>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	e001      	b.n	800bcda <HAL_ADC_IRQHandler+0x116>
 800bcd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800bcda:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800bce2:	6a3b      	ldr	r3, [r7, #32]
 800bce4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d135      	bne.n	800bd58 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f003 0308 	and.w	r3, r3, #8
 800bcf6:	2b08      	cmp	r3, #8
 800bcf8:	d12e      	bne.n	800bd58 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f7ff fa48 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d11a      	bne.n	800bd40 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f022 020c 	bic.w	r2, r2, #12
 800bd18:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d112      	bne.n	800bd58 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd36:	f043 0201 	orr.w	r2, r3, #1
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800bd3e:	e00b      	b.n	800bd58 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd44:	f043 0210 	orr.w	r2, r3, #16
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd50:	f043 0201 	orr.w	r2, r3, #1
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800bd58:	6878      	ldr	r0, [r7, #4]
 800bd5a:	f7fb fcf1 	bl	8007740 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	220c      	movs	r2, #12
 800bd64:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	f003 0320 	and.w	r3, r3, #32
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d004      	beq.n	800bd7a <HAL_ADC_IRQHandler+0x1b6>
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	f003 0320 	and.w	r3, r3, #32
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d10b      	bne.n	800bd92 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	f000 80a1 	beq.w	800bec8 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	f000 809b 	beq.w	800bec8 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd96:	f003 0310 	and.w	r3, r3, #16
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d105      	bne.n	800bdaa <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bda2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff f8a9 	bl	800af06 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800bdb4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f7ff f864 	bl	800ae88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800bdc0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4a11      	ldr	r2, [pc, #68]	; (800be0c <HAL_ADC_IRQHandler+0x248>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d002      	beq.n	800bdd2 <HAL_ADC_IRQHandler+0x20e>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	e001      	b.n	800bdd6 <HAL_ADC_IRQHandler+0x212>
 800bdd2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800bdd6:	687a      	ldr	r2, [r7, #4]
 800bdd8:	6812      	ldr	r2, [r2, #0]
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d008      	beq.n	800bdf0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d005      	beq.n	800bdf0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	2b06      	cmp	r3, #6
 800bde8:	d002      	beq.n	800bdf0 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	2b07      	cmp	r3, #7
 800bdee:	d104      	bne.n	800bdfa <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	623b      	str	r3, [r7, #32]
 800bdf8:	e014      	b.n	800be24 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	4a03      	ldr	r2, [pc, #12]	; (800be0c <HAL_ADC_IRQHandler+0x248>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d009      	beq.n	800be18 <HAL_ADC_IRQHandler+0x254>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	e008      	b.n	800be1c <HAL_ADC_IRQHandler+0x258>
 800be0a:	bf00      	nop
 800be0c:	50000100 	.word	0x50000100
 800be10:	50000300 	.word	0x50000300
 800be14:	50000700 	.word	0x50000700
 800be18:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800be1c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	68db      	ldr	r3, [r3, #12]
 800be22:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d047      	beq.n	800beba <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800be2a:	6a3b      	ldr	r3, [r7, #32]
 800be2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <HAL_ADC_IRQHandler+0x280>
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d03f      	beq.n	800beba <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800be3a:	6a3b      	ldr	r3, [r7, #32]
 800be3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800be40:	2b00      	cmp	r3, #0
 800be42:	d13a      	bne.n	800beba <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be4e:	2b40      	cmp	r3, #64	; 0x40
 800be50:	d133      	bne.n	800beba <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d12e      	bne.n	800beba <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff f9be 	bl	800b1e2 <LL_ADC_INJ_IsConversionOngoing>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d11a      	bne.n	800bea2 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800be7a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be80:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be90:	2b00      	cmp	r3, #0
 800be92:	d112      	bne.n	800beba <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be98:	f043 0201 	orr.w	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	65da      	str	r2, [r3, #92]	; 0x5c
 800bea0:	e00b      	b.n	800beba <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bea6:	f043 0210 	orr.w	r2, r3, #16
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beb2:	f043 0201 	orr.w	r2, r3, #1
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800beba:	6878      	ldr	r0, [r7, #4]
 800bebc:	f000 ffcc 	bl	800ce58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2260      	movs	r2, #96	; 0x60
 800bec6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800bec8:	69fb      	ldr	r3, [r7, #28]
 800beca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d011      	beq.n	800bef6 <HAL_ADC_IRQHandler+0x332>
 800bed2:	69bb      	ldr	r3, [r7, #24]
 800bed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d00c      	beq.n	800bef6 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bee0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8af 	bl	800c04c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2280      	movs	r2, #128	; 0x80
 800bef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800befc:	2b00      	cmp	r3, #0
 800befe:	d012      	beq.n	800bf26 <HAL_ADC_IRQHandler+0x362>
 800bf00:	69bb      	ldr	r3, [r7, #24]
 800bf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00d      	beq.n	800bf26 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 ffb2 	bl	800ce80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bf24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800bf26:	69fb      	ldr	r3, [r7, #28]
 800bf28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d012      	beq.n	800bf56 <HAL_ADC_IRQHandler+0x392>
 800bf30:	69bb      	ldr	r3, [r7, #24]
 800bf32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00d      	beq.n	800bf56 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf3e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 ffa4 	bl	800ce94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf54:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800bf56:	69fb      	ldr	r3, [r7, #28]
 800bf58:	f003 0310 	and.w	r3, r3, #16
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d043      	beq.n	800bfe8 <HAL_ADC_IRQHandler+0x424>
 800bf60:	69bb      	ldr	r3, [r7, #24]
 800bf62:	f003 0310 	and.w	r3, r3, #16
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d03e      	beq.n	800bfe8 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d102      	bne.n	800bf78 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 800bf72:	2301      	movs	r3, #1
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
 800bf76:	e021      	b.n	800bfbc <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d015      	beq.n	800bfaa <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bf86:	d004      	beq.n	800bf92 <HAL_ADC_IRQHandler+0x3ce>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a27      	ldr	r2, [pc, #156]	; (800c02c <HAL_ADC_IRQHandler+0x468>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d101      	bne.n	800bf96 <HAL_ADC_IRQHandler+0x3d2>
 800bf92:	4b27      	ldr	r3, [pc, #156]	; (800c030 <HAL_ADC_IRQHandler+0x46c>)
 800bf94:	e000      	b.n	800bf98 <HAL_ADC_IRQHandler+0x3d4>
 800bf96:	4b27      	ldr	r3, [pc, #156]	; (800c034 <HAL_ADC_IRQHandler+0x470>)
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7ff f829 	bl	800aff0 <LL_ADC_GetMultiDMATransfer>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d00b      	beq.n	800bfbc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	627b      	str	r3, [r7, #36]	; 0x24
 800bfa8:	e008      	b.n	800bfbc <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68db      	ldr	r3, [r3, #12]
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d001      	beq.n	800bfbc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 800bfb8:	2301      	movs	r3, #1
 800bfba:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d10e      	bne.n	800bfe0 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bfc6:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bfd2:	f043 0202 	orr.w	r2, r3, #2
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f840 	bl	800c060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2210      	movs	r2, #16
 800bfe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800bfe8:	69fb      	ldr	r3, [r7, #28]
 800bfea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d018      	beq.n	800c024 <HAL_ADC_IRQHandler+0x460>
 800bff2:	69bb      	ldr	r3, [r7, #24]
 800bff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d013      	beq.n	800c024 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c000:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c00c:	f043 0208 	orr.w	r2, r3, #8
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c01c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 ff24 	bl	800ce6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800c024:	bf00      	nop
 800c026:	3728      	adds	r7, #40	; 0x28
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}
 800c02c:	50000100 	.word	0x50000100
 800c030:	50000300 	.word	0x50000300
 800c034:	50000700 	.word	0x50000700

0800c038 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800c038:	b480      	push	{r7}
 800c03a:	b083      	sub	sp, #12
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800c040:	bf00      	nop
 800c042:	370c      	adds	r7, #12
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b083      	sub	sp, #12
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800c054:	bf00      	nop
 800c056:	370c      	adds	r7, #12
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr

0800c060 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800c060:	b480      	push	{r7}
 800c062:	b083      	sub	sp, #12
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800c068:	bf00      	nop
 800c06a:	370c      	adds	r7, #12
 800c06c:	46bd      	mov	sp, r7
 800c06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c072:	4770      	bx	lr

0800c074 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b0b6      	sub	sp, #216	; 0xd8
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d102      	bne.n	800c098 <HAL_ADC_ConfigChannel+0x24>
 800c092:	2302      	movs	r3, #2
 800c094:	f000 bc04 	b.w	800c8a0 <HAL_ADC_ConfigChannel+0x82c>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2201      	movs	r2, #1
 800c09c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7ff f875 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800c0aa:	4603      	mov	r3, r0
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	f040 83e8 	bne.w	800c882 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6818      	ldr	r0, [r3, #0]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	6859      	ldr	r1, [r3, #4]
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	f7fe fef5 	bl	800aeae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7ff f863 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800c0ce:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f7ff f883 	bl	800b1e2 <LL_ADC_INJ_IsConversionOngoing>
 800c0dc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800c0e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f040 81d9 	bne.w	800c49c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800c0ea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f040 81d4 	bne.w	800c49c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	689b      	ldr	r3, [r3, #8]
 800c0f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0fc:	d10f      	bne.n	800c11e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2200      	movs	r2, #0
 800c108:	4619      	mov	r1, r3
 800c10a:	f7fe ff0f 	bl	800af2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800c116:	4618      	mov	r0, r3
 800c118:	f7fe fea3 	bl	800ae62 <LL_ADC_SetSamplingTimeCommonConfig>
 800c11c:	e00e      	b.n	800c13c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6818      	ldr	r0, [r3, #0]
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	6819      	ldr	r1, [r3, #0]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	689b      	ldr	r3, [r3, #8]
 800c12a:	461a      	mov	r2, r3
 800c12c:	f7fe fefe 	bl	800af2c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	2100      	movs	r1, #0
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fe93 	bl	800ae62 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	695a      	ldr	r2, [r3, #20]
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	68db      	ldr	r3, [r3, #12]
 800c146:	08db      	lsrs	r3, r3, #3
 800c148:	f003 0303 	and.w	r3, r3, #3
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	fa02 f303 	lsl.w	r3, r2, r3
 800c152:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	691b      	ldr	r3, [r3, #16]
 800c15a:	2b04      	cmp	r3, #4
 800c15c:	d022      	beq.n	800c1a4 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6818      	ldr	r0, [r3, #0]
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	6919      	ldr	r1, [r3, #16]
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c16e:	f7fe fded 	bl	800ad4c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6818      	ldr	r0, [r3, #0]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	6919      	ldr	r1, [r3, #16]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	461a      	mov	r2, r3
 800c180:	f7fe fe39 	bl	800adf6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6818      	ldr	r0, [r3, #0]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	6919      	ldr	r1, [r3, #16]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	7f1b      	ldrb	r3, [r3, #28]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d102      	bne.n	800c19a <HAL_ADC_ConfigChannel+0x126>
 800c194:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c198:	e000      	b.n	800c19c <HAL_ADC_ConfigChannel+0x128>
 800c19a:	2300      	movs	r3, #0
 800c19c:	461a      	mov	r2, r3
 800c19e:	f7fe fe45 	bl	800ae2c <LL_ADC_SetOffsetSaturation>
 800c1a2:	e17b      	b.n	800c49c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f7fe fdf2 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d10a      	bne.n	800c1d0 <HAL_ADC_ConfigChannel+0x15c>
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7fe fde7 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	0e9b      	lsrs	r3, r3, #26
 800c1ca:	f003 021f 	and.w	r2, r3, #31
 800c1ce:	e01e      	b.n	800c20e <HAL_ADC_ConfigChannel+0x19a>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2100      	movs	r1, #0
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe fddc 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c1e2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c1e6:	fa93 f3a3 	rbit	r3, r3
 800c1ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800c1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c1f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800c1f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800c1fe:	2320      	movs	r3, #32
 800c200:	e004      	b.n	800c20c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800c202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c206:	fab3 f383 	clz	r3, r3
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c216:	2b00      	cmp	r3, #0
 800c218:	d105      	bne.n	800c226 <HAL_ADC_ConfigChannel+0x1b2>
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	0e9b      	lsrs	r3, r3, #26
 800c220:	f003 031f 	and.w	r3, r3, #31
 800c224:	e018      	b.n	800c258 <HAL_ADC_ConfigChannel+0x1e4>
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c22e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c232:	fa93 f3a3 	rbit	r3, r3
 800c236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800c23a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c23e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800c242:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c246:	2b00      	cmp	r3, #0
 800c248:	d101      	bne.n	800c24e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800c24a:	2320      	movs	r3, #32
 800c24c:	e004      	b.n	800c258 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800c24e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c252:	fab3 f383 	clz	r3, r3
 800c256:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800c258:	429a      	cmp	r2, r3
 800c25a:	d106      	bne.n	800c26a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	2200      	movs	r2, #0
 800c262:	2100      	movs	r1, #0
 800c264:	4618      	mov	r0, r3
 800c266:	f7fe fdab 	bl	800adc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	2101      	movs	r1, #1
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe fd8f 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c276:	4603      	mov	r3, r0
 800c278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d10a      	bne.n	800c296 <HAL_ADC_ConfigChannel+0x222>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2101      	movs	r1, #1
 800c286:	4618      	mov	r0, r3
 800c288:	f7fe fd84 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c28c:	4603      	mov	r3, r0
 800c28e:	0e9b      	lsrs	r3, r3, #26
 800c290:	f003 021f 	and.w	r2, r3, #31
 800c294:	e01e      	b.n	800c2d4 <HAL_ADC_ConfigChannel+0x260>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	2101      	movs	r1, #1
 800c29c:	4618      	mov	r0, r3
 800c29e:	f7fe fd79 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c2ac:	fa93 f3a3 	rbit	r3, r3
 800c2b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800c2b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800c2bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800c2c4:	2320      	movs	r3, #32
 800c2c6:	e004      	b.n	800c2d2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800c2c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c2cc:	fab3 f383 	clz	r3, r3
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c2d4:	683b      	ldr	r3, [r7, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d105      	bne.n	800c2ec <HAL_ADC_ConfigChannel+0x278>
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	0e9b      	lsrs	r3, r3, #26
 800c2e6:	f003 031f 	and.w	r3, r3, #31
 800c2ea:	e018      	b.n	800c31e <HAL_ADC_ConfigChannel+0x2aa>
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c2f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2f8:	fa93 f3a3 	rbit	r3, r3
 800c2fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800c300:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800c308:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d101      	bne.n	800c314 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800c310:	2320      	movs	r3, #32
 800c312:	e004      	b.n	800c31e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800c314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c318:	fab3 f383 	clz	r3, r3
 800c31c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800c31e:	429a      	cmp	r2, r3
 800c320:	d106      	bne.n	800c330 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2200      	movs	r2, #0
 800c328:	2101      	movs	r1, #1
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7fe fd48 	bl	800adc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	2102      	movs	r1, #2
 800c336:	4618      	mov	r0, r3
 800c338:	f7fe fd2c 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c342:	2b00      	cmp	r3, #0
 800c344:	d10a      	bne.n	800c35c <HAL_ADC_ConfigChannel+0x2e8>
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	2102      	movs	r1, #2
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7fe fd21 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c352:	4603      	mov	r3, r0
 800c354:	0e9b      	lsrs	r3, r3, #26
 800c356:	f003 021f 	and.w	r2, r3, #31
 800c35a:	e01e      	b.n	800c39a <HAL_ADC_ConfigChannel+0x326>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2102      	movs	r1, #2
 800c362:	4618      	mov	r0, r3
 800c364:	f7fe fd16 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c368:	4603      	mov	r3, r0
 800c36a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c36e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c372:	fa93 f3a3 	rbit	r3, r3
 800c376:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800c37a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c37e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800c382:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c386:	2b00      	cmp	r3, #0
 800c388:	d101      	bne.n	800c38e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800c38a:	2320      	movs	r3, #32
 800c38c:	e004      	b.n	800c398 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800c38e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800c392:	fab3 f383 	clz	r3, r3
 800c396:	b2db      	uxtb	r3, r3
 800c398:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d105      	bne.n	800c3b2 <HAL_ADC_ConfigChannel+0x33e>
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	0e9b      	lsrs	r3, r3, #26
 800c3ac:	f003 031f 	and.w	r3, r3, #31
 800c3b0:	e016      	b.n	800c3e0 <HAL_ADC_ConfigChannel+0x36c>
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c3ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c3be:	fa93 f3a3 	rbit	r3, r3
 800c3c2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800c3c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c3c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800c3ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d101      	bne.n	800c3d6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800c3d2:	2320      	movs	r3, #32
 800c3d4:	e004      	b.n	800c3e0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800c3d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3da:	fab3 f383 	clz	r3, r3
 800c3de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d106      	bne.n	800c3f2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	2200      	movs	r2, #0
 800c3ea:	2102      	movs	r1, #2
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	f7fe fce7 	bl	800adc0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2103      	movs	r1, #3
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f7fe fccb 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c3fe:	4603      	mov	r3, r0
 800c400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c404:	2b00      	cmp	r3, #0
 800c406:	d10a      	bne.n	800c41e <HAL_ADC_ConfigChannel+0x3aa>
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2103      	movs	r1, #3
 800c40e:	4618      	mov	r0, r3
 800c410:	f7fe fcc0 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c414:	4603      	mov	r3, r0
 800c416:	0e9b      	lsrs	r3, r3, #26
 800c418:	f003 021f 	and.w	r2, r3, #31
 800c41c:	e017      	b.n	800c44e <HAL_ADC_ConfigChannel+0x3da>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	2103      	movs	r1, #3
 800c424:	4618      	mov	r0, r3
 800c426:	f7fe fcb5 	bl	800ad94 <LL_ADC_GetOffsetChannel>
 800c42a:	4603      	mov	r3, r0
 800c42c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c42e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c430:	fa93 f3a3 	rbit	r3, r3
 800c434:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800c436:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c438:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800c43a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d101      	bne.n	800c444 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800c440:	2320      	movs	r3, #32
 800c442:	e003      	b.n	800c44c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800c444:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c446:	fab3 f383 	clz	r3, r3
 800c44a:	b2db      	uxtb	r3, r3
 800c44c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c456:	2b00      	cmp	r3, #0
 800c458:	d105      	bne.n	800c466 <HAL_ADC_ConfigChannel+0x3f2>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	0e9b      	lsrs	r3, r3, #26
 800c460:	f003 031f 	and.w	r3, r3, #31
 800c464:	e011      	b.n	800c48a <HAL_ADC_ConfigChannel+0x416>
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c46c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c46e:	fa93 f3a3 	rbit	r3, r3
 800c472:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800c474:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c476:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800c478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d101      	bne.n	800c482 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800c47e:	2320      	movs	r3, #32
 800c480:	e003      	b.n	800c48a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800c482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c484:	fab3 f383 	clz	r3, r3
 800c488:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800c48a:	429a      	cmp	r2, r3
 800c48c:	d106      	bne.n	800c49c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2200      	movs	r2, #0
 800c494:	2103      	movs	r1, #3
 800c496:	4618      	mov	r0, r3
 800c498:	f7fe fc92 	bl	800adc0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7fe fe29 	bl	800b0f8 <LL_ADC_IsEnabled>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f040 813d 	bne.w	800c728 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6819      	ldr	r1, [r3, #0]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	461a      	mov	r2, r3
 800c4bc:	f7fe fd62 	bl	800af84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800c4c0:	683b      	ldr	r3, [r7, #0]
 800c4c2:	68db      	ldr	r3, [r3, #12]
 800c4c4:	4aa2      	ldr	r2, [pc, #648]	; (800c750 <HAL_ADC_ConfigChannel+0x6dc>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	f040 812e 	bne.w	800c728 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10b      	bne.n	800c4f4 <HAL_ADC_ConfigChannel+0x480>
 800c4dc:	683b      	ldr	r3, [r7, #0]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	0e9b      	lsrs	r3, r3, #26
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	f003 031f 	and.w	r3, r3, #31
 800c4e8:	2b09      	cmp	r3, #9
 800c4ea:	bf94      	ite	ls
 800c4ec:	2301      	movls	r3, #1
 800c4ee:	2300      	movhi	r3, #0
 800c4f0:	b2db      	uxtb	r3, r3
 800c4f2:	e019      	b.n	800c528 <HAL_ADC_ConfigChannel+0x4b4>
 800c4f4:	683b      	ldr	r3, [r7, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c4fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4fc:	fa93 f3a3 	rbit	r3, r3
 800c500:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800c502:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c504:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800c506:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d101      	bne.n	800c510 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800c50c:	2320      	movs	r3, #32
 800c50e:	e003      	b.n	800c518 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800c510:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c512:	fab3 f383 	clz	r3, r3
 800c516:	b2db      	uxtb	r3, r3
 800c518:	3301      	adds	r3, #1
 800c51a:	f003 031f 	and.w	r3, r3, #31
 800c51e:	2b09      	cmp	r3, #9
 800c520:	bf94      	ite	ls
 800c522:	2301      	movls	r3, #1
 800c524:	2300      	movhi	r3, #0
 800c526:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d079      	beq.n	800c620 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c534:	2b00      	cmp	r3, #0
 800c536:	d107      	bne.n	800c548 <HAL_ADC_ConfigChannel+0x4d4>
 800c538:	683b      	ldr	r3, [r7, #0]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	0e9b      	lsrs	r3, r3, #26
 800c53e:	3301      	adds	r3, #1
 800c540:	069b      	lsls	r3, r3, #26
 800c542:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c546:	e015      	b.n	800c574 <HAL_ADC_ConfigChannel+0x500>
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c54e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c550:	fa93 f3a3 	rbit	r3, r3
 800c554:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800c556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c558:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800c55a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d101      	bne.n	800c564 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800c560:	2320      	movs	r3, #32
 800c562:	e003      	b.n	800c56c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800c564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c566:	fab3 f383 	clz	r3, r3
 800c56a:	b2db      	uxtb	r3, r3
 800c56c:	3301      	adds	r3, #1
 800c56e:	069b      	lsls	r3, r3, #26
 800c570:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d109      	bne.n	800c594 <HAL_ADC_ConfigChannel+0x520>
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	0e9b      	lsrs	r3, r3, #26
 800c586:	3301      	adds	r3, #1
 800c588:	f003 031f 	and.w	r3, r3, #31
 800c58c:	2101      	movs	r1, #1
 800c58e:	fa01 f303 	lsl.w	r3, r1, r3
 800c592:	e017      	b.n	800c5c4 <HAL_ADC_ConfigChannel+0x550>
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c59a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c59c:	fa93 f3a3 	rbit	r3, r3
 800c5a0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800c5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5a4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800c5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800c5ac:	2320      	movs	r3, #32
 800c5ae:	e003      	b.n	800c5b8 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800c5b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5b2:	fab3 f383 	clz	r3, r3
 800c5b6:	b2db      	uxtb	r3, r3
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	f003 031f 	and.w	r3, r3, #31
 800c5be:	2101      	movs	r1, #1
 800c5c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c5c4:	ea42 0103 	orr.w	r1, r2, r3
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d10a      	bne.n	800c5ea <HAL_ADC_ConfigChannel+0x576>
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	0e9b      	lsrs	r3, r3, #26
 800c5da:	3301      	adds	r3, #1
 800c5dc:	f003 021f 	and.w	r2, r3, #31
 800c5e0:	4613      	mov	r3, r2
 800c5e2:	005b      	lsls	r3, r3, #1
 800c5e4:	4413      	add	r3, r2
 800c5e6:	051b      	lsls	r3, r3, #20
 800c5e8:	e018      	b.n	800c61c <HAL_ADC_ConfigChannel+0x5a8>
 800c5ea:	683b      	ldr	r3, [r7, #0]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c5f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5f2:	fa93 f3a3 	rbit	r3, r3
 800c5f6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800c5fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d101      	bne.n	800c606 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800c602:	2320      	movs	r3, #32
 800c604:	e003      	b.n	800c60e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800c606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c608:	fab3 f383 	clz	r3, r3
 800c60c:	b2db      	uxtb	r3, r3
 800c60e:	3301      	adds	r3, #1
 800c610:	f003 021f 	and.w	r2, r3, #31
 800c614:	4613      	mov	r3, r2
 800c616:	005b      	lsls	r3, r3, #1
 800c618:	4413      	add	r3, r2
 800c61a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c61c:	430b      	orrs	r3, r1
 800c61e:	e07e      	b.n	800c71e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d107      	bne.n	800c63c <HAL_ADC_ConfigChannel+0x5c8>
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	0e9b      	lsrs	r3, r3, #26
 800c632:	3301      	adds	r3, #1
 800c634:	069b      	lsls	r3, r3, #26
 800c636:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c63a:	e015      	b.n	800c668 <HAL_ADC_ConfigChannel+0x5f4>
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c644:	fa93 f3a3 	rbit	r3, r3
 800c648:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800c64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c64c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800c64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c650:	2b00      	cmp	r3, #0
 800c652:	d101      	bne.n	800c658 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800c654:	2320      	movs	r3, #32
 800c656:	e003      	b.n	800c660 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800c658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c65a:	fab3 f383 	clz	r3, r3
 800c65e:	b2db      	uxtb	r3, r3
 800c660:	3301      	adds	r3, #1
 800c662:	069b      	lsls	r3, r3, #26
 800c664:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c670:	2b00      	cmp	r3, #0
 800c672:	d109      	bne.n	800c688 <HAL_ADC_ConfigChannel+0x614>
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	0e9b      	lsrs	r3, r3, #26
 800c67a:	3301      	adds	r3, #1
 800c67c:	f003 031f 	and.w	r3, r3, #31
 800c680:	2101      	movs	r1, #1
 800c682:	fa01 f303 	lsl.w	r3, r1, r3
 800c686:	e017      	b.n	800c6b8 <HAL_ADC_ConfigChannel+0x644>
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c68e:	6a3b      	ldr	r3, [r7, #32]
 800c690:	fa93 f3a3 	rbit	r3, r3
 800c694:	61fb      	str	r3, [r7, #28]
  return result;
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d101      	bne.n	800c6a4 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800c6a0:	2320      	movs	r3, #32
 800c6a2:	e003      	b.n	800c6ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	fab3 f383 	clz	r3, r3
 800c6aa:	b2db      	uxtb	r3, r3
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	f003 031f 	and.w	r3, r3, #31
 800c6b2:	2101      	movs	r1, #1
 800c6b4:	fa01 f303 	lsl.w	r3, r1, r3
 800c6b8:	ea42 0103 	orr.w	r1, r2, r3
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d10d      	bne.n	800c6e4 <HAL_ADC_ConfigChannel+0x670>
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	0e9b      	lsrs	r3, r3, #26
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	f003 021f 	and.w	r2, r3, #31
 800c6d4:	4613      	mov	r3, r2
 800c6d6:	005b      	lsls	r3, r3, #1
 800c6d8:	4413      	add	r3, r2
 800c6da:	3b1e      	subs	r3, #30
 800c6dc:	051b      	lsls	r3, r3, #20
 800c6de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c6e2:	e01b      	b.n	800c71c <HAL_ADC_ConfigChannel+0x6a8>
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	fa93 f3a3 	rbit	r3, r3
 800c6f0:	613b      	str	r3, [r7, #16]
  return result;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800c6fc:	2320      	movs	r3, #32
 800c6fe:	e003      	b.n	800c708 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	fab3 f383 	clz	r3, r3
 800c706:	b2db      	uxtb	r3, r3
 800c708:	3301      	adds	r3, #1
 800c70a:	f003 021f 	and.w	r2, r3, #31
 800c70e:	4613      	mov	r3, r2
 800c710:	005b      	lsls	r3, r3, #1
 800c712:	4413      	add	r3, r2
 800c714:	3b1e      	subs	r3, #30
 800c716:	051b      	lsls	r3, r3, #20
 800c718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800c71c:	430b      	orrs	r3, r1
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	6892      	ldr	r2, [r2, #8]
 800c722:	4619      	mov	r1, r3
 800c724:	f7fe fc02 	bl	800af2c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	681a      	ldr	r2, [r3, #0]
 800c72c:	4b09      	ldr	r3, [pc, #36]	; (800c754 <HAL_ADC_ConfigChannel+0x6e0>)
 800c72e:	4013      	ands	r3, r2
 800c730:	2b00      	cmp	r3, #0
 800c732:	f000 80af 	beq.w	800c894 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c73e:	d004      	beq.n	800c74a <HAL_ADC_ConfigChannel+0x6d6>
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	4a04      	ldr	r2, [pc, #16]	; (800c758 <HAL_ADC_ConfigChannel+0x6e4>)
 800c746:	4293      	cmp	r3, r2
 800c748:	d10a      	bne.n	800c760 <HAL_ADC_ConfigChannel+0x6ec>
 800c74a:	4b04      	ldr	r3, [pc, #16]	; (800c75c <HAL_ADC_ConfigChannel+0x6e8>)
 800c74c:	e009      	b.n	800c762 <HAL_ADC_ConfigChannel+0x6ee>
 800c74e:	bf00      	nop
 800c750:	407f0000 	.word	0x407f0000
 800c754:	80080000 	.word	0x80080000
 800c758:	50000100 	.word	0x50000100
 800c75c:	50000300 	.word	0x50000300
 800c760:	4b51      	ldr	r3, [pc, #324]	; (800c8a8 <HAL_ADC_ConfigChannel+0x834>)
 800c762:	4618      	mov	r0, r3
 800c764:	f7fe fae4 	bl	800ad30 <LL_ADC_GetCommonPathInternalCh>
 800c768:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800c76c:	683b      	ldr	r3, [r7, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a4e      	ldr	r2, [pc, #312]	; (800c8ac <HAL_ADC_ConfigChannel+0x838>)
 800c772:	4293      	cmp	r3, r2
 800c774:	d004      	beq.n	800c780 <HAL_ADC_ConfigChannel+0x70c>
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4a4d      	ldr	r2, [pc, #308]	; (800c8b0 <HAL_ADC_ConfigChannel+0x83c>)
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d134      	bne.n	800c7ea <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800c780:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d12e      	bne.n	800c7ea <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c794:	d17e      	bne.n	800c894 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c79e:	d004      	beq.n	800c7aa <HAL_ADC_ConfigChannel+0x736>
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	4a43      	ldr	r2, [pc, #268]	; (800c8b4 <HAL_ADC_ConfigChannel+0x840>)
 800c7a6:	4293      	cmp	r3, r2
 800c7a8:	d101      	bne.n	800c7ae <HAL_ADC_ConfigChannel+0x73a>
 800c7aa:	4a43      	ldr	r2, [pc, #268]	; (800c8b8 <HAL_ADC_ConfigChannel+0x844>)
 800c7ac:	e000      	b.n	800c7b0 <HAL_ADC_ConfigChannel+0x73c>
 800c7ae:	4a3e      	ldr	r2, [pc, #248]	; (800c8a8 <HAL_ADC_ConfigChannel+0x834>)
 800c7b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c7b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c7b8:	4619      	mov	r1, r3
 800c7ba:	4610      	mov	r0, r2
 800c7bc:	f7fe faa5 	bl	800ad0a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800c7c0:	4b3e      	ldr	r3, [pc, #248]	; (800c8bc <HAL_ADC_ConfigChannel+0x848>)
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	099b      	lsrs	r3, r3, #6
 800c7c6:	4a3e      	ldr	r2, [pc, #248]	; (800c8c0 <HAL_ADC_ConfigChannel+0x84c>)
 800c7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800c7cc:	099b      	lsrs	r3, r3, #6
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	4613      	mov	r3, r2
 800c7d2:	005b      	lsls	r3, r3, #1
 800c7d4:	4413      	add	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c7da:	e002      	b.n	800c7e2 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	3b01      	subs	r3, #1
 800c7e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d1f9      	bne.n	800c7dc <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800c7e8:	e054      	b.n	800c894 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	4a35      	ldr	r2, [pc, #212]	; (800c8c4 <HAL_ADC_ConfigChannel+0x850>)
 800c7f0:	4293      	cmp	r3, r2
 800c7f2:	d120      	bne.n	800c836 <HAL_ADC_ConfigChannel+0x7c2>
 800c7f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c7f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d11a      	bne.n	800c836 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c808:	d144      	bne.n	800c894 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c812:	d004      	beq.n	800c81e <HAL_ADC_ConfigChannel+0x7aa>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a26      	ldr	r2, [pc, #152]	; (800c8b4 <HAL_ADC_ConfigChannel+0x840>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d101      	bne.n	800c822 <HAL_ADC_ConfigChannel+0x7ae>
 800c81e:	4a26      	ldr	r2, [pc, #152]	; (800c8b8 <HAL_ADC_ConfigChannel+0x844>)
 800c820:	e000      	b.n	800c824 <HAL_ADC_ConfigChannel+0x7b0>
 800c822:	4a21      	ldr	r2, [pc, #132]	; (800c8a8 <HAL_ADC_ConfigChannel+0x834>)
 800c824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c828:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c82c:	4619      	mov	r1, r3
 800c82e:	4610      	mov	r0, r2
 800c830:	f7fe fa6b 	bl	800ad0a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800c834:	e02e      	b.n	800c894 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4a23      	ldr	r2, [pc, #140]	; (800c8c8 <HAL_ADC_ConfigChannel+0x854>)
 800c83c:	4293      	cmp	r3, r2
 800c83e:	d129      	bne.n	800c894 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800c840:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d123      	bne.n	800c894 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4a18      	ldr	r2, [pc, #96]	; (800c8b4 <HAL_ADC_ConfigChannel+0x840>)
 800c852:	4293      	cmp	r3, r2
 800c854:	d01e      	beq.n	800c894 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c85e:	d004      	beq.n	800c86a <HAL_ADC_ConfigChannel+0x7f6>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a13      	ldr	r2, [pc, #76]	; (800c8b4 <HAL_ADC_ConfigChannel+0x840>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d101      	bne.n	800c86e <HAL_ADC_ConfigChannel+0x7fa>
 800c86a:	4a13      	ldr	r2, [pc, #76]	; (800c8b8 <HAL_ADC_ConfigChannel+0x844>)
 800c86c:	e000      	b.n	800c870 <HAL_ADC_ConfigChannel+0x7fc>
 800c86e:	4a0e      	ldr	r2, [pc, #56]	; (800c8a8 <HAL_ADC_ConfigChannel+0x834>)
 800c870:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c874:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c878:	4619      	mov	r1, r3
 800c87a:	4610      	mov	r0, r2
 800c87c:	f7fe fa45 	bl	800ad0a <LL_ADC_SetCommonPathInternalCh>
 800c880:	e008      	b.n	800c894 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c886:	f043 0220 	orr.w	r2, r3, #32
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800c88e:	2301      	movs	r3, #1
 800c890:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	2200      	movs	r2, #0
 800c898:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800c89c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	37d8      	adds	r7, #216	; 0xd8
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}
 800c8a8:	50000700 	.word	0x50000700
 800c8ac:	c3210000 	.word	0xc3210000
 800c8b0:	90c00010 	.word	0x90c00010
 800c8b4:	50000100 	.word	0x50000100
 800c8b8:	50000300 	.word	0x50000300
 800c8bc:	20000000 	.word	0x20000000
 800c8c0:	053e2d63 	.word	0x053e2d63
 800c8c4:	c7520000 	.word	0xc7520000
 800c8c8:	cb840000 	.word	0xcb840000

0800c8cc <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b088      	sub	sp, #32
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
 800c8d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	f7fe fc56 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800c8e8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f7fe fc77 	bl	800b1e2 <LL_ADC_INJ_IsConversionOngoing>
 800c8f4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d103      	bne.n	800c904 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	f000 8098 	beq.w	800ca34 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	68db      	ldr	r3, [r3, #12]
 800c90a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d02a      	beq.n	800c968 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	7f5b      	ldrb	r3, [r3, #29]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d126      	bne.n	800c968 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7f1b      	ldrb	r3, [r3, #28]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d122      	bne.n	800c968 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800c922:	2301      	movs	r3, #1
 800c924:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c926:	e014      	b.n	800c952 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	4a45      	ldr	r2, [pc, #276]	; (800ca40 <ADC_ConversionStop+0x174>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d90d      	bls.n	800c94c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c934:	f043 0210 	orr.w	r2, r3, #16
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c940:	f043 0201 	orr.w	r2, r3, #1
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800c948:	2301      	movs	r3, #1
 800c94a:	e074      	b.n	800ca36 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3301      	adds	r3, #1
 800c950:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c95c:	2b40      	cmp	r3, #64	; 0x40
 800c95e:	d1e3      	bne.n	800c928 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	2240      	movs	r2, #64	; 0x40
 800c966:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	2b02      	cmp	r3, #2
 800c96c:	d014      	beq.n	800c998 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	4618      	mov	r0, r3
 800c974:	f7fe fc0e 	bl	800b194 <LL_ADC_REG_IsConversionOngoing>
 800c978:	4603      	mov	r3, r0
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00c      	beq.n	800c998 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe fbcb 	bl	800b11e <LL_ADC_IsDisableOngoing>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d104      	bne.n	800c998 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4618      	mov	r0, r3
 800c994:	f7fe fbea 	bl	800b16c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800c998:	69bb      	ldr	r3, [r7, #24]
 800c99a:	2b01      	cmp	r3, #1
 800c99c:	d014      	beq.n	800c9c8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	f7fe fc1d 	bl	800b1e2 <LL_ADC_INJ_IsConversionOngoing>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d00c      	beq.n	800c9c8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	f7fe fbb3 	bl	800b11e <LL_ADC_IsDisableOngoing>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d104      	bne.n	800c9c8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7fe fbf9 	bl	800b1ba <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800c9c8:	69bb      	ldr	r3, [r7, #24]
 800c9ca:	2b02      	cmp	r3, #2
 800c9cc:	d005      	beq.n	800c9da <ADC_ConversionStop+0x10e>
 800c9ce:	69bb      	ldr	r3, [r7, #24]
 800c9d0:	2b03      	cmp	r3, #3
 800c9d2:	d105      	bne.n	800c9e0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800c9d4:	230c      	movs	r3, #12
 800c9d6:	617b      	str	r3, [r7, #20]
        break;
 800c9d8:	e005      	b.n	800c9e6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800c9da:	2308      	movs	r3, #8
 800c9dc:	617b      	str	r3, [r7, #20]
        break;
 800c9de:	e002      	b.n	800c9e6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800c9e0:	2304      	movs	r3, #4
 800c9e2:	617b      	str	r3, [r7, #20]
        break;
 800c9e4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800c9e6:	f7fe f94f 	bl	800ac88 <HAL_GetTick>
 800c9ea:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c9ec:	e01b      	b.n	800ca26 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800c9ee:	f7fe f94b 	bl	800ac88 <HAL_GetTick>
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	2b05      	cmp	r3, #5
 800c9fa:	d914      	bls.n	800ca26 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689a      	ldr	r2, [r3, #8]
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	4013      	ands	r3, r2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00d      	beq.n	800ca26 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca0e:	f043 0210 	orr.w	r2, r3, #16
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca1a:	f043 0201 	orr.w	r2, r3, #1
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	e007      	b.n	800ca36 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	689a      	ldr	r2, [r3, #8]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4013      	ands	r3, r2
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d1dc      	bne.n	800c9ee <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3720      	adds	r7, #32
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	a33fffff 	.word	0xa33fffff

0800ca44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4618      	mov	r0, r3
 800ca52:	f7fe fb51 	bl	800b0f8 <LL_ADC_IsEnabled>
 800ca56:	4603      	mov	r3, r0
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d14d      	bne.n	800caf8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	689a      	ldr	r2, [r3, #8]
 800ca62:	4b28      	ldr	r3, [pc, #160]	; (800cb04 <ADC_Enable+0xc0>)
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00d      	beq.n	800ca86 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ca6e:	f043 0210 	orr.w	r2, r3, #16
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca7a:	f043 0201 	orr.w	r2, r3, #1
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e039      	b.n	800cafa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f7fe fb0c 	bl	800b0a8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800ca90:	f7fe f8fa 	bl	800ac88 <HAL_GetTick>
 800ca94:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800ca96:	e028      	b.n	800caea <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fb2b 	bl	800b0f8 <LL_ADC_IsEnabled>
 800caa2:	4603      	mov	r3, r0
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d104      	bne.n	800cab2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4618      	mov	r0, r3
 800caae:	f7fe fafb 	bl	800b0a8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800cab2:	f7fe f8e9 	bl	800ac88 <HAL_GetTick>
 800cab6:	4602      	mov	r2, r0
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	2b02      	cmp	r3, #2
 800cabe:	d914      	bls.n	800caea <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	f003 0301 	and.w	r3, r3, #1
 800caca:	2b01      	cmp	r3, #1
 800cacc:	d00d      	beq.n	800caea <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cad2:	f043 0210 	orr.w	r2, r3, #16
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cade:	f043 0201 	orr.w	r2, r3, #1
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800cae6:	2301      	movs	r3, #1
 800cae8:	e007      	b.n	800cafa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 0301 	and.w	r3, r3, #1
 800caf4:	2b01      	cmp	r3, #1
 800caf6:	d1cf      	bne.n	800ca98 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800caf8:	2300      	movs	r3, #0
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3710      	adds	r7, #16
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	8000003f 	.word	0x8000003f

0800cb08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4618      	mov	r0, r3
 800cb16:	f7fe fb02 	bl	800b11e <LL_ADC_IsDisableOngoing>
 800cb1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fe fae9 	bl	800b0f8 <LL_ADC_IsEnabled>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d047      	beq.n	800cbbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d144      	bne.n	800cbbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	f003 030d 	and.w	r3, r3, #13
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d10c      	bne.n	800cb5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4618      	mov	r0, r3
 800cb46:	f7fe fac3 	bl	800b0d0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	2203      	movs	r2, #3
 800cb50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800cb52:	f7fe f899 	bl	800ac88 <HAL_GetTick>
 800cb56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800cb58:	e029      	b.n	800cbae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb5e:	f043 0210 	orr.w	r2, r3, #16
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb6a:	f043 0201 	orr.w	r2, r3, #1
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800cb72:	2301      	movs	r3, #1
 800cb74:	e023      	b.n	800cbbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800cb76:	f7fe f887 	bl	800ac88 <HAL_GetTick>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	68bb      	ldr	r3, [r7, #8]
 800cb7e:	1ad3      	subs	r3, r2, r3
 800cb80:	2b02      	cmp	r3, #2
 800cb82:	d914      	bls.n	800cbae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f003 0301 	and.w	r3, r3, #1
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d00d      	beq.n	800cbae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cb96:	f043 0210 	orr.w	r2, r3, #16
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cba2:	f043 0201 	orr.w	r2, r3, #1
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e007      	b.n	800cbbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	689b      	ldr	r3, [r3, #8]
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1dc      	bne.n	800cb76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800cbbc:	2300      	movs	r3, #0
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3710      	adds	r7, #16
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b084      	sub	sp, #16
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbd8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d14b      	bne.n	800cc78 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cbe4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0308 	and.w	r3, r3, #8
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d021      	beq.n	800cc3e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	4618      	mov	r0, r3
 800cc00:	f7fe f942 	bl	800ae88 <LL_ADC_REG_IsTriggerSourceSWStart>
 800cc04:	4603      	mov	r3, r0
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d032      	beq.n	800cc70 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68db      	ldr	r3, [r3, #12]
 800cc10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d12b      	bne.n	800cc70 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d11f      	bne.n	800cc70 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc34:	f043 0201 	orr.w	r2, r3, #1
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc3c:	e018      	b.n	800cc70 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	68db      	ldr	r3, [r3, #12]
 800cc44:	f003 0302 	and.w	r3, r3, #2
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d111      	bne.n	800cc70 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d105      	bne.n	800cc70 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc68:	f043 0201 	orr.w	r2, r3, #1
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800cc70:	68f8      	ldr	r0, [r7, #12]
 800cc72:	f7fa fd65 	bl	8007740 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800cc76:	e00e      	b.n	800cc96 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cc7c:	f003 0310 	and.w	r3, r3, #16
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d003      	beq.n	800cc8c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800cc84:	68f8      	ldr	r0, [r7, #12]
 800cc86:	f7ff f9eb 	bl	800c060 <HAL_ADC_ErrorCallback>
}
 800cc8a:	e004      	b.n	800cc96 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	4798      	blx	r3
}
 800cc96:	bf00      	nop
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800cc9e:	b580      	push	{r7, lr}
 800cca0:	b084      	sub	sp, #16
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800ccac:	68f8      	ldr	r0, [r7, #12]
 800ccae:	f7ff f9c3 	bl	800c038 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800ccb2:	bf00      	nop
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}

0800ccba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800ccba:	b580      	push	{r7, lr}
 800ccbc:	b084      	sub	sp, #16
 800ccbe:	af00      	add	r7, sp, #0
 800ccc0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cccc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccd8:	f043 0204 	orr.w	r2, r3, #4
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800cce0:	68f8      	ldr	r0, [r7, #12]
 800cce2:	f7ff f9bd 	bl	800c060 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800cce6:	bf00      	nop
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <LL_ADC_IsEnabled>:
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d101      	bne.n	800cd06 <LL_ADC_IsEnabled+0x18>
 800cd02:	2301      	movs	r3, #1
 800cd04:	e000      	b.n	800cd08 <LL_ADC_IsEnabled+0x1a>
 800cd06:	2300      	movs	r3, #0
}
 800cd08:	4618      	mov	r0, r3
 800cd0a:	370c      	adds	r7, #12
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd12:	4770      	bx	lr

0800cd14 <LL_ADC_StartCalibration>:
{
 800cd14:	b480      	push	{r7}
 800cd16:	b083      	sub	sp, #12
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	689b      	ldr	r3, [r3, #8]
 800cd22:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cd26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cd2a:	683a      	ldr	r2, [r7, #0]
 800cd2c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cd30:	4313      	orrs	r3, r2
 800cd32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	609a      	str	r2, [r3, #8]
}
 800cd3a:	bf00      	nop
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <LL_ADC_IsCalibrationOnGoing>:
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cd5a:	d101      	bne.n	800cd60 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e000      	b.n	800cd62 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <LL_ADC_REG_IsConversionOngoing>:
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	f003 0304 	and.w	r3, r3, #4
 800cd7e:	2b04      	cmp	r3, #4
 800cd80:	d101      	bne.n	800cd86 <LL_ADC_REG_IsConversionOngoing+0x18>
 800cd82:	2301      	movs	r3, #1
 800cd84:	e000      	b.n	800cd88 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800cd86:	2300      	movs	r3, #0
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	370c      	adds	r7, #12
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d101      	bne.n	800cdb0 <HAL_ADCEx_Calibration_Start+0x1c>
 800cdac:	2302      	movs	r3, #2
 800cdae:	e04d      	b.n	800ce4c <HAL_ADCEx_Calibration_Start+0xb8>
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2201      	movs	r2, #1
 800cdb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f7ff fea5 	bl	800cb08 <ADC_Disable>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800cdc2:	7bfb      	ldrb	r3, [r7, #15]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d136      	bne.n	800ce36 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdcc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800cdd0:	f023 0302 	bic.w	r3, r3, #2
 800cdd4:	f043 0202 	orr.w	r2, r3, #2
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	6839      	ldr	r1, [r7, #0]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff ff96 	bl	800cd14 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800cde8:	e014      	b.n	800ce14 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	3301      	adds	r3, #1
 800cdee:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	4a18      	ldr	r2, [pc, #96]	; (800ce54 <HAL_ADCEx_Calibration_Start+0xc0>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d90d      	bls.n	800ce14 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdfc:	f023 0312 	bic.w	r3, r3, #18
 800ce00:	f043 0210 	orr.w	r2, r3, #16
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800ce10:	2301      	movs	r3, #1
 800ce12:	e01b      	b.n	800ce4c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff ff94 	bl	800cd46 <LL_ADC_IsCalibrationOnGoing>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d1e2      	bne.n	800cdea <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce28:	f023 0303 	bic.w	r3, r3, #3
 800ce2c:	f043 0201 	orr.w	r2, r3, #1
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	65da      	str	r2, [r3, #92]	; 0x5c
 800ce34:	e005      	b.n	800ce42 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce3a:	f043 0210 	orr.w	r2, r3, #16
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800ce4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	0004de01 	.word	0x0004de01

0800ce58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800ce60:	bf00      	nop
 800ce62:	370c      	adds	r7, #12
 800ce64:	46bd      	mov	sp, r7
 800ce66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6a:	4770      	bx	lr

0800ce6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800ce74:	bf00      	nop
 800ce76:	370c      	adds	r7, #12
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800ce88:	bf00      	nop
 800ce8a:	370c      	adds	r7, #12
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce92:	4770      	bx	lr

0800ce94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800ce94:	b480      	push	{r7}
 800ce96:	b083      	sub	sp, #12
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800ce9c:	bf00      	nop
 800ce9e:	370c      	adds	r7, #12
 800cea0:	46bd      	mov	sp, r7
 800cea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea6:	4770      	bx	lr

0800cea8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800cebc:	b590      	push	{r4, r7, lr}
 800cebe:	b0a1      	sub	sp, #132	; 0x84
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
 800cec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800cec6:	2300      	movs	r3, #0
 800cec8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800ced2:	2b01      	cmp	r3, #1
 800ced4:	d101      	bne.n	800ceda <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800ced6:	2302      	movs	r3, #2
 800ced8:	e0cb      	b.n	800d072 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	2201      	movs	r2, #1
 800cede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800cee2:	2300      	movs	r3, #0
 800cee4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800cee6:	2300      	movs	r3, #0
 800cee8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cef2:	d102      	bne.n	800cefa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800cef4:	4b61      	ldr	r3, [pc, #388]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800cef6:	60bb      	str	r3, [r7, #8]
 800cef8:	e001      	b.n	800cefe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800cefa:	2300      	movs	r3, #0
 800cefc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d10b      	bne.n	800cf1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf08:	f043 0220 	orr.w	r2, r3, #32
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2200      	movs	r2, #0
 800cf14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e0aa      	b.n	800d072 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	4618      	mov	r0, r3
 800cf20:	f7ff ff25 	bl	800cd6e <LL_ADC_REG_IsConversionOngoing>
 800cf24:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7ff ff1f 	bl	800cd6e <LL_ADC_REG_IsConversionOngoing>
 800cf30:	4603      	mov	r3, r0
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f040 808c 	bne.w	800d050 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800cf38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	f040 8088 	bne.w	800d050 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf48:	d004      	beq.n	800cf54 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	4a4b      	ldr	r2, [pc, #300]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800cf50:	4293      	cmp	r3, r2
 800cf52:	d101      	bne.n	800cf58 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 800cf54:	4b4a      	ldr	r3, [pc, #296]	; (800d080 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 800cf56:	e000      	b.n	800cf5a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 800cf58:	4b4a      	ldr	r3, [pc, #296]	; (800d084 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800cf5a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d041      	beq.n	800cfe8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800cf64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf66:	689b      	ldr	r3, [r3, #8]
 800cf68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	6859      	ldr	r1, [r3, #4]
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800cf76:	035b      	lsls	r3, r3, #13
 800cf78:	430b      	orrs	r3, r1
 800cf7a:	431a      	orrs	r2, r3
 800cf7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf7e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cf88:	d004      	beq.n	800cf94 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a3b      	ldr	r2, [pc, #236]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d10f      	bne.n	800cfb4 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 800cf94:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800cf98:	f7ff fea9 	bl	800ccee <LL_ADC_IsEnabled>
 800cf9c:	4604      	mov	r4, r0
 800cf9e:	4837      	ldr	r0, [pc, #220]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800cfa0:	f7ff fea5 	bl	800ccee <LL_ADC_IsEnabled>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	4323      	orrs	r3, r4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bf0c      	ite	eq
 800cfac:	2301      	moveq	r3, #1
 800cfae:	2300      	movne	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	e008      	b.n	800cfc6 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 800cfb4:	4834      	ldr	r0, [pc, #208]	; (800d088 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800cfb6:	f7ff fe9a 	bl	800ccee <LL_ADC_IsEnabled>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	bf0c      	ite	eq
 800cfc0:	2301      	moveq	r3, #1
 800cfc2:	2300      	movne	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d04c      	beq.n	800d064 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800cfca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfcc:	689b      	ldr	r3, [r3, #8]
 800cfce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800cfd2:	f023 030f 	bic.w	r3, r3, #15
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	6811      	ldr	r1, [r2, #0]
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	6892      	ldr	r2, [r2, #8]
 800cfde:	430a      	orrs	r2, r1
 800cfe0:	431a      	orrs	r2, r3
 800cfe2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfe4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800cfe6:	e03d      	b.n	800d064 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800cfe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cfea:	689b      	ldr	r3, [r3, #8]
 800cfec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cff2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cffc:	d004      	beq.n	800d008 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4a1e      	ldr	r2, [pc, #120]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800d004:	4293      	cmp	r3, r2
 800d006:	d10f      	bne.n	800d028 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 800d008:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800d00c:	f7ff fe6f 	bl	800ccee <LL_ADC_IsEnabled>
 800d010:	4604      	mov	r4, r0
 800d012:	481a      	ldr	r0, [pc, #104]	; (800d07c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800d014:	f7ff fe6b 	bl	800ccee <LL_ADC_IsEnabled>
 800d018:	4603      	mov	r3, r0
 800d01a:	4323      	orrs	r3, r4
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	bf0c      	ite	eq
 800d020:	2301      	moveq	r3, #1
 800d022:	2300      	movne	r3, #0
 800d024:	b2db      	uxtb	r3, r3
 800d026:	e008      	b.n	800d03a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 800d028:	4817      	ldr	r0, [pc, #92]	; (800d088 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800d02a:	f7ff fe60 	bl	800ccee <LL_ADC_IsEnabled>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	bf0c      	ite	eq
 800d034:	2301      	moveq	r3, #1
 800d036:	2300      	movne	r3, #0
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d012      	beq.n	800d064 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800d03e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d040:	689b      	ldr	r3, [r3, #8]
 800d042:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800d046:	f023 030f 	bic.w	r3, r3, #15
 800d04a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d04c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d04e:	e009      	b.n	800d064 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d054:	f043 0220 	orr.w	r2, r3, #32
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800d05c:	2301      	movs	r3, #1
 800d05e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800d062:	e000      	b.n	800d066 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800d064:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	2200      	movs	r2, #0
 800d06a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800d06e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d072:	4618      	mov	r0, r3
 800d074:	3784      	adds	r7, #132	; 0x84
 800d076:	46bd      	mov	sp, r7
 800d078:	bd90      	pop	{r4, r7, pc}
 800d07a:	bf00      	nop
 800d07c:	50000100 	.word	0x50000100
 800d080:	50000300 	.word	0x50000300
 800d084:	50000700 	.word	0x50000700
 800d088:	50000400 	.word	0x50000400

0800d08c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b085      	sub	sp, #20
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d09c:	4b0c      	ldr	r3, [pc, #48]	; (800d0d0 <__NVIC_SetPriorityGrouping+0x44>)
 800d09e:	68db      	ldr	r3, [r3, #12]
 800d0a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d0a2:	68ba      	ldr	r2, [r7, #8]
 800d0a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d0b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d0b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d0be:	4a04      	ldr	r2, [pc, #16]	; (800d0d0 <__NVIC_SetPriorityGrouping+0x44>)
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	60d3      	str	r3, [r2, #12]
}
 800d0c4:	bf00      	nop
 800d0c6:	3714      	adds	r7, #20
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr
 800d0d0:	e000ed00 	.word	0xe000ed00

0800d0d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d0d4:	b480      	push	{r7}
 800d0d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d0d8:	4b04      	ldr	r3, [pc, #16]	; (800d0ec <__NVIC_GetPriorityGrouping+0x18>)
 800d0da:	68db      	ldr	r3, [r3, #12]
 800d0dc:	0a1b      	lsrs	r3, r3, #8
 800d0de:	f003 0307 	and.w	r3, r3, #7
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ea:	4770      	bx	lr
 800d0ec:	e000ed00 	.word	0xe000ed00

0800d0f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d0f0:	b480      	push	{r7}
 800d0f2:	b083      	sub	sp, #12
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d0fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	db0b      	blt.n	800d11a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d102:	79fb      	ldrb	r3, [r7, #7]
 800d104:	f003 021f 	and.w	r2, r3, #31
 800d108:	4907      	ldr	r1, [pc, #28]	; (800d128 <__NVIC_EnableIRQ+0x38>)
 800d10a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d10e:	095b      	lsrs	r3, r3, #5
 800d110:	2001      	movs	r0, #1
 800d112:	fa00 f202 	lsl.w	r2, r0, r2
 800d116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d11a:	bf00      	nop
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr
 800d126:	bf00      	nop
 800d128:	e000e100 	.word	0xe000e100

0800d12c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b083      	sub	sp, #12
 800d130:	af00      	add	r7, sp, #0
 800d132:	4603      	mov	r3, r0
 800d134:	6039      	str	r1, [r7, #0]
 800d136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	db0a      	blt.n	800d156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	b2da      	uxtb	r2, r3
 800d144:	490c      	ldr	r1, [pc, #48]	; (800d178 <__NVIC_SetPriority+0x4c>)
 800d146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d14a:	0112      	lsls	r2, r2, #4
 800d14c:	b2d2      	uxtb	r2, r2
 800d14e:	440b      	add	r3, r1
 800d150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d154:	e00a      	b.n	800d16c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	4908      	ldr	r1, [pc, #32]	; (800d17c <__NVIC_SetPriority+0x50>)
 800d15c:	79fb      	ldrb	r3, [r7, #7]
 800d15e:	f003 030f 	and.w	r3, r3, #15
 800d162:	3b04      	subs	r3, #4
 800d164:	0112      	lsls	r2, r2, #4
 800d166:	b2d2      	uxtb	r2, r2
 800d168:	440b      	add	r3, r1
 800d16a:	761a      	strb	r2, [r3, #24]
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	e000e100 	.word	0xe000e100
 800d17c:	e000ed00 	.word	0xe000ed00

0800d180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d180:	b480      	push	{r7}
 800d182:	b089      	sub	sp, #36	; 0x24
 800d184:	af00      	add	r7, sp, #0
 800d186:	60f8      	str	r0, [r7, #12]
 800d188:	60b9      	str	r1, [r7, #8]
 800d18a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	f003 0307 	and.w	r3, r3, #7
 800d192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	f1c3 0307 	rsb	r3, r3, #7
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	bf28      	it	cs
 800d19e:	2304      	movcs	r3, #4
 800d1a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	2b06      	cmp	r3, #6
 800d1a8:	d902      	bls.n	800d1b0 <NVIC_EncodePriority+0x30>
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	3b03      	subs	r3, #3
 800d1ae:	e000      	b.n	800d1b2 <NVIC_EncodePriority+0x32>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	fa02 f303 	lsl.w	r3, r2, r3
 800d1be:	43da      	mvns	r2, r3
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	401a      	ands	r2, r3
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d1c8:	f04f 31ff 	mov.w	r1, #4294967295
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d2:	43d9      	mvns	r1, r3
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d1d8:	4313      	orrs	r3, r2
         );
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	3724      	adds	r7, #36	; 0x24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr
	...

0800d1e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	3b01      	subs	r3, #1
 800d1f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d1f8:	d301      	bcc.n	800d1fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800d1fa:	2301      	movs	r3, #1
 800d1fc:	e00f      	b.n	800d21e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800d1fe:	4a0a      	ldr	r2, [pc, #40]	; (800d228 <SysTick_Config+0x40>)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	3b01      	subs	r3, #1
 800d204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800d206:	210f      	movs	r1, #15
 800d208:	f04f 30ff 	mov.w	r0, #4294967295
 800d20c:	f7ff ff8e 	bl	800d12c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800d210:	4b05      	ldr	r3, [pc, #20]	; (800d228 <SysTick_Config+0x40>)
 800d212:	2200      	movs	r2, #0
 800d214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800d216:	4b04      	ldr	r3, [pc, #16]	; (800d228 <SysTick_Config+0x40>)
 800d218:	2207      	movs	r2, #7
 800d21a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800d21c:	2300      	movs	r3, #0
}
 800d21e:	4618      	mov	r0, r3
 800d220:	3708      	adds	r7, #8
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
 800d226:	bf00      	nop
 800d228:	e000e010 	.word	0xe000e010

0800d22c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b082      	sub	sp, #8
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f7ff ff29 	bl	800d08c <__NVIC_SetPriorityGrouping>
}
 800d23a:	bf00      	nop
 800d23c:	3708      	adds	r7, #8
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}

0800d242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d242:	b580      	push	{r7, lr}
 800d244:	b086      	sub	sp, #24
 800d246:	af00      	add	r7, sp, #0
 800d248:	4603      	mov	r3, r0
 800d24a:	60b9      	str	r1, [r7, #8]
 800d24c:	607a      	str	r2, [r7, #4]
 800d24e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800d250:	f7ff ff40 	bl	800d0d4 <__NVIC_GetPriorityGrouping>
 800d254:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800d256:	687a      	ldr	r2, [r7, #4]
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	6978      	ldr	r0, [r7, #20]
 800d25c:	f7ff ff90 	bl	800d180 <NVIC_EncodePriority>
 800d260:	4602      	mov	r2, r0
 800d262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d266:	4611      	mov	r1, r2
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff ff5f 	bl	800d12c <__NVIC_SetPriority>
}
 800d26e:	bf00      	nop
 800d270:	3718      	adds	r7, #24
 800d272:	46bd      	mov	sp, r7
 800d274:	bd80      	pop	{r7, pc}

0800d276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d276:	b580      	push	{r7, lr}
 800d278:	b082      	sub	sp, #8
 800d27a:	af00      	add	r7, sp, #0
 800d27c:	4603      	mov	r3, r0
 800d27e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800d280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d284:	4618      	mov	r0, r3
 800d286:	f7ff ff33 	bl	800d0f0 <__NVIC_EnableIRQ>
}
 800d28a:	bf00      	nop
 800d28c:	3708      	adds	r7, #8
 800d28e:	46bd      	mov	sp, r7
 800d290:	bd80      	pop	{r7, pc}

0800d292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800d292:	b580      	push	{r7, lr}
 800d294:	b082      	sub	sp, #8
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f7ff ffa4 	bl	800d1e8 <SysTick_Config>
 800d2a0:	4603      	mov	r3, r0
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3708      	adds	r7, #8
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
	...

0800d2ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b084      	sub	sp, #16
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d101      	bne.n	800d2be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	e08d      	b.n	800d3da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	461a      	mov	r2, r3
 800d2c4:	4b47      	ldr	r3, [pc, #284]	; (800d3e4 <HAL_DMA_Init+0x138>)
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d80f      	bhi.n	800d2ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	461a      	mov	r2, r3
 800d2d0:	4b45      	ldr	r3, [pc, #276]	; (800d3e8 <HAL_DMA_Init+0x13c>)
 800d2d2:	4413      	add	r3, r2
 800d2d4:	4a45      	ldr	r2, [pc, #276]	; (800d3ec <HAL_DMA_Init+0x140>)
 800d2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2da:	091b      	lsrs	r3, r3, #4
 800d2dc:	009a      	lsls	r2, r3, #2
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a42      	ldr	r2, [pc, #264]	; (800d3f0 <HAL_DMA_Init+0x144>)
 800d2e6:	641a      	str	r2, [r3, #64]	; 0x40
 800d2e8:	e00e      	b.n	800d308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4b40      	ldr	r3, [pc, #256]	; (800d3f4 <HAL_DMA_Init+0x148>)
 800d2f2:	4413      	add	r3, r2
 800d2f4:	4a3d      	ldr	r2, [pc, #244]	; (800d3ec <HAL_DMA_Init+0x140>)
 800d2f6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2fa:	091b      	lsrs	r3, r3, #4
 800d2fc:	009a      	lsls	r2, r3, #2
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	4a3c      	ldr	r2, [pc, #240]	; (800d3f8 <HAL_DMA_Init+0x14c>)
 800d306:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2202      	movs	r2, #2
 800d30c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800d31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800d32c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	691b      	ldr	r3, [r3, #16]
 800d332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800d338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	699b      	ldr	r3, [r3, #24]
 800d33e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800d344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4313      	orrs	r3, r2
 800d350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68fa      	ldr	r2, [r7, #12]
 800d358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fa10 	bl	800d780 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d368:	d102      	bne.n	800d370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2200      	movs	r2, #0
 800d36e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	685a      	ldr	r2, [r3, #4]
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d378:	b2d2      	uxtb	r2, r2
 800d37a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d010      	beq.n	800d3b0 <HAL_DMA_Init+0x104>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d80c      	bhi.n	800d3b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fa30 	bl	800d7fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d3ac:	605a      	str	r2, [r3, #4]
 800d3ae:	e008      	b.n	800d3c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2201      	movs	r2, #1
 800d3cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	40020407 	.word	0x40020407
 800d3e8:	bffdfff8 	.word	0xbffdfff8
 800d3ec:	cccccccd 	.word	0xcccccccd
 800d3f0:	40020000 	.word	0x40020000
 800d3f4:	bffdfbf8 	.word	0xbffdfbf8
 800d3f8:	40020400 	.word	0x40020400

0800d3fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
 800d408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d40a:	2300      	movs	r3, #0
 800d40c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d414:	2b01      	cmp	r3, #1
 800d416:	d101      	bne.n	800d41c <HAL_DMA_Start_IT+0x20>
 800d418:	2302      	movs	r3, #2
 800d41a:	e066      	b.n	800d4ea <HAL_DMA_Start_IT+0xee>
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	2201      	movs	r2, #1
 800d420:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d42a:	b2db      	uxtb	r3, r3
 800d42c:	2b01      	cmp	r3, #1
 800d42e:	d155      	bne.n	800d4dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	2202      	movs	r2, #2
 800d434:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	2200      	movs	r2, #0
 800d43c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	681a      	ldr	r2, [r3, #0]
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f022 0201 	bic.w	r2, r2, #1
 800d44c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	68b9      	ldr	r1, [r7, #8]
 800d454:	68f8      	ldr	r0, [r7, #12]
 800d456:	f000 f954 	bl	800d702 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d008      	beq.n	800d474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681a      	ldr	r2, [r3, #0]
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	f042 020e 	orr.w	r2, r2, #14
 800d470:	601a      	str	r2, [r3, #0]
 800d472:	e00f      	b.n	800d494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	681a      	ldr	r2, [r3, #0]
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	f022 0204 	bic.w	r2, r2, #4
 800d482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800d484:	68fb      	ldr	r3, [r7, #12]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	681a      	ldr	r2, [r3, #0]
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	f042 020a 	orr.w	r2, r2, #10
 800d492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d007      	beq.n	800d4b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d007      	beq.n	800d4ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4be:	681a      	ldr	r2, [r3, #0]
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d4c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d4c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	f042 0201 	orr.w	r2, r2, #1
 800d4d8:	601a      	str	r2, [r3, #0]
 800d4da:	e005      	b.n	800d4e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800d4e4:	2302      	movs	r3, #2
 800d4e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800d4e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3718      	adds	r7, #24
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}

0800d4f2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800d4f2:	b480      	push	{r7}
 800d4f4:	b085      	sub	sp, #20
 800d4f6:	af00      	add	r7, sp, #0
 800d4f8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d504:	b2db      	uxtb	r3, r3
 800d506:	2b02      	cmp	r3, #2
 800d508:	d005      	beq.n	800d516 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2204      	movs	r2, #4
 800d50e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800d510:	2301      	movs	r3, #1
 800d512:	73fb      	strb	r3, [r7, #15]
 800d514:	e037      	b.n	800d586 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f022 020e 	bic.w	r2, r2, #14
 800d524:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d52a:	681a      	ldr	r2, [r3, #0]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d530:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d534:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681a      	ldr	r2, [r3, #0]
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	f022 0201 	bic.w	r2, r2, #1
 800d544:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d54a:	f003 021f 	and.w	r2, r3, #31
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d552:	2101      	movs	r1, #1
 800d554:	fa01 f202 	lsl.w	r2, r1, r2
 800d558:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d562:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d00c      	beq.n	800d586 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d570:	681a      	ldr	r2, [r3, #0]
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d576:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d57a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d584:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2201      	movs	r2, #1
 800d58a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800d596:	7bfb      	ldrb	r3, [r7, #15]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3714      	adds	r7, #20
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5c0:	f003 031f 	and.w	r3, r3, #31
 800d5c4:	2204      	movs	r2, #4
 800d5c6:	409a      	lsls	r2, r3
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	4013      	ands	r3, r2
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d026      	beq.n	800d61e <HAL_DMA_IRQHandler+0x7a>
 800d5d0:	68bb      	ldr	r3, [r7, #8]
 800d5d2:	f003 0304 	and.w	r3, r3, #4
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d021      	beq.n	800d61e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f003 0320 	and.w	r3, r3, #32
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d107      	bne.n	800d5f8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	681a      	ldr	r2, [r3, #0]
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	f022 0204 	bic.w	r2, r2, #4
 800d5f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5fc:	f003 021f 	and.w	r2, r3, #31
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d604:	2104      	movs	r1, #4
 800d606:	fa01 f202 	lsl.w	r2, r1, r2
 800d60a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d610:	2b00      	cmp	r3, #0
 800d612:	d071      	beq.n	800d6f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800d61c:	e06c      	b.n	800d6f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d622:	f003 031f 	and.w	r3, r3, #31
 800d626:	2202      	movs	r2, #2
 800d628:	409a      	lsls	r2, r3
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	4013      	ands	r3, r2
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d02e      	beq.n	800d690 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	f003 0302 	and.w	r3, r3, #2
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d029      	beq.n	800d690 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d10b      	bne.n	800d662 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	681a      	ldr	r2, [r3, #0]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	f022 020a 	bic.w	r2, r2, #10
 800d658:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2201      	movs	r2, #1
 800d65e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d666:	f003 021f 	and.w	r2, r3, #31
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d66e:	2102      	movs	r1, #2
 800d670:	fa01 f202 	lsl.w	r2, r1, r2
 800d674:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2200      	movs	r2, #0
 800d67a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d682:	2b00      	cmp	r3, #0
 800d684:	d038      	beq.n	800d6f8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800d68e:	e033      	b.n	800d6f8 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d694:	f003 031f 	and.w	r3, r3, #31
 800d698:	2208      	movs	r2, #8
 800d69a:	409a      	lsls	r2, r3
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	4013      	ands	r3, r2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d02a      	beq.n	800d6fa <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d025      	beq.n	800d6fa <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f022 020e 	bic.w	r2, r2, #14
 800d6bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6c2:	f003 021f 	and.w	r2, r3, #31
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	fa01 f202 	lsl.w	r2, r1, r2
 800d6d0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2201      	movs	r2, #1
 800d6d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d004      	beq.n	800d6fa <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800d6f8:	bf00      	nop
 800d6fa:	bf00      	nop
}
 800d6fc:	3710      	adds	r7, #16
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800d702:	b480      	push	{r7}
 800d704:	b085      	sub	sp, #20
 800d706:	af00      	add	r7, sp, #0
 800d708:	60f8      	str	r0, [r7, #12]
 800d70a:	60b9      	str	r1, [r7, #8]
 800d70c:	607a      	str	r2, [r7, #4]
 800d70e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d714:	68fa      	ldr	r2, [r7, #12]
 800d716:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d718:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d004      	beq.n	800d72c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d726:	68fa      	ldr	r2, [r7, #12]
 800d728:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800d72a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d730:	f003 021f 	and.w	r2, r3, #31
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d738:	2101      	movs	r1, #1
 800d73a:	fa01 f202 	lsl.w	r2, r1, r2
 800d73e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	683a      	ldr	r2, [r7, #0]
 800d746:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	689b      	ldr	r3, [r3, #8]
 800d74c:	2b10      	cmp	r3, #16
 800d74e:	d108      	bne.n	800d762 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	68ba      	ldr	r2, [r7, #8]
 800d75e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800d760:	e007      	b.n	800d772 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	60da      	str	r2, [r3, #12]
}
 800d772:	bf00      	nop
 800d774:	3714      	adds	r7, #20
 800d776:	46bd      	mov	sp, r7
 800d778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77c:	4770      	bx	lr
	...

0800d780 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d780:	b480      	push	{r7}
 800d782:	b087      	sub	sp, #28
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	461a      	mov	r2, r3
 800d78e:	4b16      	ldr	r3, [pc, #88]	; (800d7e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800d790:	429a      	cmp	r2, r3
 800d792:	d802      	bhi.n	800d79a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800d794:	4b15      	ldr	r3, [pc, #84]	; (800d7ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800d796:	617b      	str	r3, [r7, #20]
 800d798:	e001      	b.n	800d79e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800d79a:	4b15      	ldr	r3, [pc, #84]	; (800d7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800d79c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800d79e:	697b      	ldr	r3, [r7, #20]
 800d7a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	3b08      	subs	r3, #8
 800d7aa:	4a12      	ldr	r2, [pc, #72]	; (800d7f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800d7ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d7b0:	091b      	lsrs	r3, r3, #4
 800d7b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7b8:	089b      	lsrs	r3, r3, #2
 800d7ba:	009a      	lsls	r2, r3, #2
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	4413      	add	r3, r2
 800d7c0:	461a      	mov	r2, r3
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a0b      	ldr	r2, [pc, #44]	; (800d7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800d7ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f003 031f 	and.w	r3, r3, #31
 800d7d2:	2201      	movs	r2, #1
 800d7d4:	409a      	lsls	r2, r3
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800d7da:	bf00      	nop
 800d7dc:	371c      	adds	r7, #28
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e4:	4770      	bx	lr
 800d7e6:	bf00      	nop
 800d7e8:	40020407 	.word	0x40020407
 800d7ec:	40020800 	.word	0x40020800
 800d7f0:	40020820 	.word	0x40020820
 800d7f4:	cccccccd 	.word	0xcccccccd
 800d7f8:	40020880 	.word	0x40020880

0800d7fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b085      	sub	sp, #20
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	685b      	ldr	r3, [r3, #4]
 800d808:	b2db      	uxtb	r3, r3
 800d80a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800d80c:	68fa      	ldr	r2, [r7, #12]
 800d80e:	4b0b      	ldr	r3, [pc, #44]	; (800d83c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800d810:	4413      	add	r3, r2
 800d812:	009b      	lsls	r3, r3, #2
 800d814:	461a      	mov	r2, r3
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a08      	ldr	r2, [pc, #32]	; (800d840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800d81e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	3b01      	subs	r3, #1
 800d824:	f003 031f 	and.w	r3, r3, #31
 800d828:	2201      	movs	r2, #1
 800d82a:	409a      	lsls	r2, r3
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800d830:	bf00      	nop
 800d832:	3714      	adds	r7, #20
 800d834:	46bd      	mov	sp, r7
 800d836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83a:	4770      	bx	lr
 800d83c:	1000823f 	.word	0x1000823f
 800d840:	40020940 	.word	0x40020940

0800d844 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d844:	b480      	push	{r7}
 800d846:	b087      	sub	sp, #28
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d84e:	2300      	movs	r3, #0
 800d850:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800d852:	e15a      	b.n	800db0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	681a      	ldr	r2, [r3, #0]
 800d858:	2101      	movs	r1, #1
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	fa01 f303 	lsl.w	r3, r1, r3
 800d860:	4013      	ands	r3, r2
 800d862:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	2b00      	cmp	r3, #0
 800d868:	f000 814c 	beq.w	800db04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	685b      	ldr	r3, [r3, #4]
 800d870:	f003 0303 	and.w	r3, r3, #3
 800d874:	2b01      	cmp	r3, #1
 800d876:	d005      	beq.n	800d884 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d880:	2b02      	cmp	r3, #2
 800d882:	d130      	bne.n	800d8e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	689b      	ldr	r3, [r3, #8]
 800d888:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	005b      	lsls	r3, r3, #1
 800d88e:	2203      	movs	r2, #3
 800d890:	fa02 f303 	lsl.w	r3, r2, r3
 800d894:	43db      	mvns	r3, r3
 800d896:	693a      	ldr	r2, [r7, #16]
 800d898:	4013      	ands	r3, r2
 800d89a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	68da      	ldr	r2, [r3, #12]
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	005b      	lsls	r3, r3, #1
 800d8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8a8:	693a      	ldr	r2, [r7, #16]
 800d8aa:	4313      	orrs	r3, r2
 800d8ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	685b      	ldr	r3, [r3, #4]
 800d8b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	fa02 f303 	lsl.w	r3, r2, r3
 800d8c2:	43db      	mvns	r3, r3
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	4013      	ands	r3, r2
 800d8c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	685b      	ldr	r3, [r3, #4]
 800d8ce:	091b      	lsrs	r3, r3, #4
 800d8d0:	f003 0201 	and.w	r2, r3, #1
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d8da:	693a      	ldr	r2, [r7, #16]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	693a      	ldr	r2, [r7, #16]
 800d8e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	685b      	ldr	r3, [r3, #4]
 800d8ea:	f003 0303 	and.w	r3, r3, #3
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d017      	beq.n	800d922 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	68db      	ldr	r3, [r3, #12]
 800d8f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d8f8:	697b      	ldr	r3, [r7, #20]
 800d8fa:	005b      	lsls	r3, r3, #1
 800d8fc:	2203      	movs	r2, #3
 800d8fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d902:	43db      	mvns	r3, r3
 800d904:	693a      	ldr	r2, [r7, #16]
 800d906:	4013      	ands	r3, r2
 800d908:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	689a      	ldr	r2, [r3, #8]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	005b      	lsls	r3, r3, #1
 800d912:	fa02 f303 	lsl.w	r3, r2, r3
 800d916:	693a      	ldr	r2, [r7, #16]
 800d918:	4313      	orrs	r3, r2
 800d91a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	693a      	ldr	r2, [r7, #16]
 800d920:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	f003 0303 	and.w	r3, r3, #3
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d123      	bne.n	800d976 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d92e:	697b      	ldr	r3, [r7, #20]
 800d930:	08da      	lsrs	r2, r3, #3
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	3208      	adds	r2, #8
 800d936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d93a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d93c:	697b      	ldr	r3, [r7, #20]
 800d93e:	f003 0307 	and.w	r3, r3, #7
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	220f      	movs	r2, #15
 800d946:	fa02 f303 	lsl.w	r3, r2, r3
 800d94a:	43db      	mvns	r3, r3
 800d94c:	693a      	ldr	r2, [r7, #16]
 800d94e:	4013      	ands	r3, r2
 800d950:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	691a      	ldr	r2, [r3, #16]
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	f003 0307 	and.w	r3, r3, #7
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	fa02 f303 	lsl.w	r3, r2, r3
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	4313      	orrs	r3, r2
 800d966:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d968:	697b      	ldr	r3, [r7, #20]
 800d96a:	08da      	lsrs	r2, r3, #3
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	3208      	adds	r2, #8
 800d970:	6939      	ldr	r1, [r7, #16]
 800d972:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d97c:	697b      	ldr	r3, [r7, #20]
 800d97e:	005b      	lsls	r3, r3, #1
 800d980:	2203      	movs	r2, #3
 800d982:	fa02 f303 	lsl.w	r3, r2, r3
 800d986:	43db      	mvns	r3, r3
 800d988:	693a      	ldr	r2, [r7, #16]
 800d98a:	4013      	ands	r3, r2
 800d98c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d98e:	683b      	ldr	r3, [r7, #0]
 800d990:	685b      	ldr	r3, [r3, #4]
 800d992:	f003 0203 	and.w	r2, r3, #3
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	005b      	lsls	r3, r3, #1
 800d99a:	fa02 f303 	lsl.w	r3, r2, r3
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	4313      	orrs	r3, r2
 800d9a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	693a      	ldr	r2, [r7, #16]
 800d9a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	685b      	ldr	r3, [r3, #4]
 800d9ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	f000 80a6 	beq.w	800db04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d9b8:	4b5b      	ldr	r3, [pc, #364]	; (800db28 <HAL_GPIO_Init+0x2e4>)
 800d9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9bc:	4a5a      	ldr	r2, [pc, #360]	; (800db28 <HAL_GPIO_Init+0x2e4>)
 800d9be:	f043 0301 	orr.w	r3, r3, #1
 800d9c2:	6613      	str	r3, [r2, #96]	; 0x60
 800d9c4:	4b58      	ldr	r3, [pc, #352]	; (800db28 <HAL_GPIO_Init+0x2e4>)
 800d9c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	60bb      	str	r3, [r7, #8]
 800d9ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800d9d0:	4a56      	ldr	r2, [pc, #344]	; (800db2c <HAL_GPIO_Init+0x2e8>)
 800d9d2:	697b      	ldr	r3, [r7, #20]
 800d9d4:	089b      	lsrs	r3, r3, #2
 800d9d6:	3302      	adds	r3, #2
 800d9d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d9dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f003 0303 	and.w	r3, r3, #3
 800d9e4:	009b      	lsls	r3, r3, #2
 800d9e6:	220f      	movs	r2, #15
 800d9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ec:	43db      	mvns	r3, r3
 800d9ee:	693a      	ldr	r2, [r7, #16]
 800d9f0:	4013      	ands	r3, r2
 800d9f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800d9fa:	d01f      	beq.n	800da3c <HAL_GPIO_Init+0x1f8>
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	4a4c      	ldr	r2, [pc, #304]	; (800db30 <HAL_GPIO_Init+0x2ec>)
 800da00:	4293      	cmp	r3, r2
 800da02:	d019      	beq.n	800da38 <HAL_GPIO_Init+0x1f4>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	4a4b      	ldr	r2, [pc, #300]	; (800db34 <HAL_GPIO_Init+0x2f0>)
 800da08:	4293      	cmp	r3, r2
 800da0a:	d013      	beq.n	800da34 <HAL_GPIO_Init+0x1f0>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	4a4a      	ldr	r2, [pc, #296]	; (800db38 <HAL_GPIO_Init+0x2f4>)
 800da10:	4293      	cmp	r3, r2
 800da12:	d00d      	beq.n	800da30 <HAL_GPIO_Init+0x1ec>
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	4a49      	ldr	r2, [pc, #292]	; (800db3c <HAL_GPIO_Init+0x2f8>)
 800da18:	4293      	cmp	r3, r2
 800da1a:	d007      	beq.n	800da2c <HAL_GPIO_Init+0x1e8>
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	4a48      	ldr	r2, [pc, #288]	; (800db40 <HAL_GPIO_Init+0x2fc>)
 800da20:	4293      	cmp	r3, r2
 800da22:	d101      	bne.n	800da28 <HAL_GPIO_Init+0x1e4>
 800da24:	2305      	movs	r3, #5
 800da26:	e00a      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da28:	2306      	movs	r3, #6
 800da2a:	e008      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da2c:	2304      	movs	r3, #4
 800da2e:	e006      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da30:	2303      	movs	r3, #3
 800da32:	e004      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da34:	2302      	movs	r3, #2
 800da36:	e002      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da38:	2301      	movs	r3, #1
 800da3a:	e000      	b.n	800da3e <HAL_GPIO_Init+0x1fa>
 800da3c:	2300      	movs	r3, #0
 800da3e:	697a      	ldr	r2, [r7, #20]
 800da40:	f002 0203 	and.w	r2, r2, #3
 800da44:	0092      	lsls	r2, r2, #2
 800da46:	4093      	lsls	r3, r2
 800da48:	693a      	ldr	r2, [r7, #16]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800da4e:	4937      	ldr	r1, [pc, #220]	; (800db2c <HAL_GPIO_Init+0x2e8>)
 800da50:	697b      	ldr	r3, [r7, #20]
 800da52:	089b      	lsrs	r3, r3, #2
 800da54:	3302      	adds	r3, #2
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800da5c:	4b39      	ldr	r3, [pc, #228]	; (800db44 <HAL_GPIO_Init+0x300>)
 800da5e:	689b      	ldr	r3, [r3, #8]
 800da60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	43db      	mvns	r3, r3
 800da66:	693a      	ldr	r2, [r7, #16]
 800da68:	4013      	ands	r3, r2
 800da6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	685b      	ldr	r3, [r3, #4]
 800da70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da74:	2b00      	cmp	r3, #0
 800da76:	d003      	beq.n	800da80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800da78:	693a      	ldr	r2, [r7, #16]
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800da80:	4a30      	ldr	r2, [pc, #192]	; (800db44 <HAL_GPIO_Init+0x300>)
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800da86:	4b2f      	ldr	r3, [pc, #188]	; (800db44 <HAL_GPIO_Init+0x300>)
 800da88:	68db      	ldr	r3, [r3, #12]
 800da8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	43db      	mvns	r3, r3
 800da90:	693a      	ldr	r2, [r7, #16]
 800da92:	4013      	ands	r3, r2
 800da94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800da96:	683b      	ldr	r3, [r7, #0]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d003      	beq.n	800daaa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800daa2:	693a      	ldr	r2, [r7, #16]
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800daaa:	4a26      	ldr	r2, [pc, #152]	; (800db44 <HAL_GPIO_Init+0x300>)
 800daac:	693b      	ldr	r3, [r7, #16]
 800daae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800dab0:	4b24      	ldr	r3, [pc, #144]	; (800db44 <HAL_GPIO_Init+0x300>)
 800dab2:	685b      	ldr	r3, [r3, #4]
 800dab4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	43db      	mvns	r3, r3
 800daba:	693a      	ldr	r2, [r7, #16]
 800dabc:	4013      	ands	r3, r2
 800dabe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	685b      	ldr	r3, [r3, #4]
 800dac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d003      	beq.n	800dad4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800dacc:	693a      	ldr	r2, [r7, #16]
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	4313      	orrs	r3, r2
 800dad2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800dad4:	4a1b      	ldr	r2, [pc, #108]	; (800db44 <HAL_GPIO_Init+0x300>)
 800dad6:	693b      	ldr	r3, [r7, #16]
 800dad8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800dada:	4b1a      	ldr	r3, [pc, #104]	; (800db44 <HAL_GPIO_Init+0x300>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	43db      	mvns	r3, r3
 800dae4:	693a      	ldr	r2, [r7, #16]
 800dae6:	4013      	ands	r3, r2
 800dae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	685b      	ldr	r3, [r3, #4]
 800daee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d003      	beq.n	800dafe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800daf6:	693a      	ldr	r2, [r7, #16]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800dafe:	4a11      	ldr	r2, [pc, #68]	; (800db44 <HAL_GPIO_Init+0x300>)
 800db00:	693b      	ldr	r3, [r7, #16]
 800db02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800db04:	697b      	ldr	r3, [r7, #20]
 800db06:	3301      	adds	r3, #1
 800db08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	681a      	ldr	r2, [r3, #0]
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	fa22 f303 	lsr.w	r3, r2, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	f47f ae9d 	bne.w	800d854 <HAL_GPIO_Init+0x10>
  }
}
 800db1a:	bf00      	nop
 800db1c:	bf00      	nop
 800db1e:	371c      	adds	r7, #28
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	40021000 	.word	0x40021000
 800db2c:	40010000 	.word	0x40010000
 800db30:	48000400 	.word	0x48000400
 800db34:	48000800 	.word	0x48000800
 800db38:	48000c00 	.word	0x48000c00
 800db3c:	48001000 	.word	0x48001000
 800db40:	48001400 	.word	0x48001400
 800db44:	40010400 	.word	0x40010400

0800db48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800db48:	b480      	push	{r7}
 800db4a:	b083      	sub	sp, #12
 800db4c:	af00      	add	r7, sp, #0
 800db4e:	6078      	str	r0, [r7, #4]
 800db50:	460b      	mov	r3, r1
 800db52:	807b      	strh	r3, [r7, #2]
 800db54:	4613      	mov	r3, r2
 800db56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800db58:	787b      	ldrb	r3, [r7, #1]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d003      	beq.n	800db66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800db5e:	887a      	ldrh	r2, [r7, #2]
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800db64:	e002      	b.n	800db6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800db66:	887a      	ldrh	r2, [r7, #2]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800db78:	b480      	push	{r7}
 800db7a:	b085      	sub	sp, #20
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d141      	bne.n	800dc0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800db86:	4b4b      	ldr	r3, [pc, #300]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800db8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db92:	d131      	bne.n	800dbf8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800db94:	4b47      	ldr	r3, [pc, #284]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800db96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db9a:	4a46      	ldr	r2, [pc, #280]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800db9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800dba4:	4b43      	ldr	r3, [pc, #268]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dbac:	4a41      	ldr	r2, [pc, #260]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dbae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbb2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800dbb4:	4b40      	ldr	r3, [pc, #256]	; (800dcb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	2232      	movs	r2, #50	; 0x32
 800dbba:	fb02 f303 	mul.w	r3, r2, r3
 800dbbe:	4a3f      	ldr	r2, [pc, #252]	; (800dcbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800dbc0:	fba2 2303 	umull	r2, r3, r2, r3
 800dbc4:	0c9b      	lsrs	r3, r3, #18
 800dbc6:	3301      	adds	r3, #1
 800dbc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dbca:	e002      	b.n	800dbd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dbd2:	4b38      	ldr	r3, [pc, #224]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbde:	d102      	bne.n	800dbe6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d1f2      	bne.n	800dbcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dbe6:	4b33      	ldr	r3, [pc, #204]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dbe8:	695b      	ldr	r3, [r3, #20]
 800dbea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dbee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dbf2:	d158      	bne.n	800dca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800dbf4:	2303      	movs	r3, #3
 800dbf6:	e057      	b.n	800dca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800dbf8:	4b2e      	ldr	r3, [pc, #184]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dbfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dbfe:	4a2d      	ldr	r2, [pc, #180]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800dc08:	e04d      	b.n	800dca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc10:	d141      	bne.n	800dc96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800dc12:	4b28      	ldr	r3, [pc, #160]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800dc1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc1e:	d131      	bne.n	800dc84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800dc20:	4b24      	ldr	r3, [pc, #144]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc26:	4a23      	ldr	r2, [pc, #140]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800dc30:	4b20      	ldr	r3, [pc, #128]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dc38:	4a1e      	ldr	r2, [pc, #120]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dc3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800dc40:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	2232      	movs	r2, #50	; 0x32
 800dc46:	fb02 f303 	mul.w	r3, r2, r3
 800dc4a:	4a1c      	ldr	r2, [pc, #112]	; (800dcbc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800dc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc50:	0c9b      	lsrs	r3, r3, #18
 800dc52:	3301      	adds	r3, #1
 800dc54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dc56:	e002      	b.n	800dc5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	3b01      	subs	r3, #1
 800dc5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800dc5e:	4b15      	ldr	r3, [pc, #84]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc60:	695b      	ldr	r3, [r3, #20]
 800dc62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc6a:	d102      	bne.n	800dc72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1f2      	bne.n	800dc58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800dc72:	4b10      	ldr	r3, [pc, #64]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc74:	695b      	ldr	r3, [r3, #20]
 800dc76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc7e:	d112      	bne.n	800dca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800dc80:	2303      	movs	r3, #3
 800dc82:	e011      	b.n	800dca8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800dc84:	4b0b      	ldr	r3, [pc, #44]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc8a:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800dc94:	e007      	b.n	800dca6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800dc96:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800dc9e:	4a05      	ldr	r2, [pc, #20]	; (800dcb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800dca0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dca4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800dca6:	2300      	movs	r3, #0
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3714      	adds	r7, #20
 800dcac:	46bd      	mov	sp, r7
 800dcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb2:	4770      	bx	lr
 800dcb4:	40007000 	.word	0x40007000
 800dcb8:	20000000 	.word	0x20000000
 800dcbc:	431bde83 	.word	0x431bde83

0800dcc0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800dcc4:	4b05      	ldr	r3, [pc, #20]	; (800dcdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	4a04      	ldr	r2, [pc, #16]	; (800dcdc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800dcca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dcce:	6093      	str	r3, [r2, #8]
}
 800dcd0:	bf00      	nop
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd8:	4770      	bx	lr
 800dcda:	bf00      	nop
 800dcdc:	40007000 	.word	0x40007000

0800dce0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dce0:	b580      	push	{r7, lr}
 800dce2:	b088      	sub	sp, #32
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d101      	bne.n	800dcf2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e306      	b.n	800e300 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	f003 0301 	and.w	r3, r3, #1
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d075      	beq.n	800ddea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dcfe:	4b97      	ldr	r3, [pc, #604]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f003 030c 	and.w	r3, r3, #12
 800dd06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800dd08:	4b94      	ldr	r3, [pc, #592]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd0a:	68db      	ldr	r3, [r3, #12]
 800dd0c:	f003 0303 	and.w	r3, r3, #3
 800dd10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	2b0c      	cmp	r3, #12
 800dd16:	d102      	bne.n	800dd1e <HAL_RCC_OscConfig+0x3e>
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d002      	beq.n	800dd24 <HAL_RCC_OscConfig+0x44>
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	2b08      	cmp	r3, #8
 800dd22:	d10b      	bne.n	800dd3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd24:	4b8d      	ldr	r3, [pc, #564]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d05b      	beq.n	800dde8 <HAL_RCC_OscConfig+0x108>
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d157      	bne.n	800dde8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800dd38:	2301      	movs	r3, #1
 800dd3a:	e2e1      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd44:	d106      	bne.n	800dd54 <HAL_RCC_OscConfig+0x74>
 800dd46:	4b85      	ldr	r3, [pc, #532]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a84      	ldr	r2, [pc, #528]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd50:	6013      	str	r3, [r2, #0]
 800dd52:	e01d      	b.n	800dd90 <HAL_RCC_OscConfig+0xb0>
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	685b      	ldr	r3, [r3, #4]
 800dd58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dd5c:	d10c      	bne.n	800dd78 <HAL_RCC_OscConfig+0x98>
 800dd5e:	4b7f      	ldr	r3, [pc, #508]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4a7e      	ldr	r2, [pc, #504]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dd68:	6013      	str	r3, [r2, #0]
 800dd6a:	4b7c      	ldr	r3, [pc, #496]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a7b      	ldr	r2, [pc, #492]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dd74:	6013      	str	r3, [r2, #0]
 800dd76:	e00b      	b.n	800dd90 <HAL_RCC_OscConfig+0xb0>
 800dd78:	4b78      	ldr	r3, [pc, #480]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a77      	ldr	r2, [pc, #476]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dd82:	6013      	str	r3, [r2, #0]
 800dd84:	4b75      	ldr	r3, [pc, #468]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a74      	ldr	r2, [pc, #464]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dd8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dd8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	685b      	ldr	r3, [r3, #4]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d013      	beq.n	800ddc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd98:	f7fc ff76 	bl	800ac88 <HAL_GetTick>
 800dd9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800dd9e:	e008      	b.n	800ddb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dda0:	f7fc ff72 	bl	800ac88 <HAL_GetTick>
 800dda4:	4602      	mov	r2, r0
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	2b64      	cmp	r3, #100	; 0x64
 800ddac:	d901      	bls.n	800ddb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ddae:	2303      	movs	r3, #3
 800ddb0:	e2a6      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ddb2:	4b6a      	ldr	r3, [pc, #424]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d0f0      	beq.n	800dda0 <HAL_RCC_OscConfig+0xc0>
 800ddbe:	e014      	b.n	800ddea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddc0:	f7fc ff62 	bl	800ac88 <HAL_GetTick>
 800ddc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ddc6:	e008      	b.n	800ddda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ddc8:	f7fc ff5e 	bl	800ac88 <HAL_GetTick>
 800ddcc:	4602      	mov	r2, r0
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	1ad3      	subs	r3, r2, r3
 800ddd2:	2b64      	cmp	r3, #100	; 0x64
 800ddd4:	d901      	bls.n	800ddda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ddd6:	2303      	movs	r3, #3
 800ddd8:	e292      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ddda:	4b60      	ldr	r3, [pc, #384]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d1f0      	bne.n	800ddc8 <HAL_RCC_OscConfig+0xe8>
 800dde6:	e000      	b.n	800ddea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dde8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	f003 0302 	and.w	r3, r3, #2
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d075      	beq.n	800dee2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ddf6:	4b59      	ldr	r3, [pc, #356]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800ddf8:	689b      	ldr	r3, [r3, #8]
 800ddfa:	f003 030c 	and.w	r3, r3, #12
 800ddfe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800de00:	4b56      	ldr	r3, [pc, #344]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	f003 0303 	and.w	r3, r3, #3
 800de08:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800de0a:	69bb      	ldr	r3, [r7, #24]
 800de0c:	2b0c      	cmp	r3, #12
 800de0e:	d102      	bne.n	800de16 <HAL_RCC_OscConfig+0x136>
 800de10:	697b      	ldr	r3, [r7, #20]
 800de12:	2b02      	cmp	r3, #2
 800de14:	d002      	beq.n	800de1c <HAL_RCC_OscConfig+0x13c>
 800de16:	69bb      	ldr	r3, [r7, #24]
 800de18:	2b04      	cmp	r3, #4
 800de1a:	d11f      	bne.n	800de5c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800de1c:	4b4f      	ldr	r3, [pc, #316]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de24:	2b00      	cmp	r3, #0
 800de26:	d005      	beq.n	800de34 <HAL_RCC_OscConfig+0x154>
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	68db      	ldr	r3, [r3, #12]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d101      	bne.n	800de34 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800de30:	2301      	movs	r3, #1
 800de32:	e265      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de34:	4b49      	ldr	r3, [pc, #292]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	691b      	ldr	r3, [r3, #16]
 800de40:	061b      	lsls	r3, r3, #24
 800de42:	4946      	ldr	r1, [pc, #280]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de44:	4313      	orrs	r3, r2
 800de46:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800de48:	4b45      	ldr	r3, [pc, #276]	; (800df60 <HAL_RCC_OscConfig+0x280>)
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fc fecf 	bl	800abf0 <HAL_InitTick>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d043      	beq.n	800dee0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800de58:	2301      	movs	r3, #1
 800de5a:	e251      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d023      	beq.n	800deac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800de64:	4b3d      	ldr	r3, [pc, #244]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	4a3c      	ldr	r2, [pc, #240]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800de6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de70:	f7fc ff0a 	bl	800ac88 <HAL_GetTick>
 800de74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800de76:	e008      	b.n	800de8a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de78:	f7fc ff06 	bl	800ac88 <HAL_GetTick>
 800de7c:	4602      	mov	r2, r0
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	1ad3      	subs	r3, r2, r3
 800de82:	2b02      	cmp	r3, #2
 800de84:	d901      	bls.n	800de8a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800de86:	2303      	movs	r3, #3
 800de88:	e23a      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800de8a:	4b34      	ldr	r3, [pc, #208]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800de92:	2b00      	cmp	r3, #0
 800de94:	d0f0      	beq.n	800de78 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800de96:	4b31      	ldr	r3, [pc, #196]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	691b      	ldr	r3, [r3, #16]
 800dea2:	061b      	lsls	r3, r3, #24
 800dea4:	492d      	ldr	r1, [pc, #180]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800dea6:	4313      	orrs	r3, r2
 800dea8:	604b      	str	r3, [r1, #4]
 800deaa:	e01a      	b.n	800dee2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800deac:	4b2b      	ldr	r3, [pc, #172]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	4a2a      	ldr	r2, [pc, #168]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800deb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800deb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800deb8:	f7fc fee6 	bl	800ac88 <HAL_GetTick>
 800debc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800debe:	e008      	b.n	800ded2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800dec0:	f7fc fee2 	bl	800ac88 <HAL_GetTick>
 800dec4:	4602      	mov	r2, r0
 800dec6:	693b      	ldr	r3, [r7, #16]
 800dec8:	1ad3      	subs	r3, r2, r3
 800deca:	2b02      	cmp	r3, #2
 800decc:	d901      	bls.n	800ded2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800dece:	2303      	movs	r3, #3
 800ded0:	e216      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800ded2:	4b22      	ldr	r3, [pc, #136]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d1f0      	bne.n	800dec0 <HAL_RCC_OscConfig+0x1e0>
 800dede:	e000      	b.n	800dee2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800dee0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f003 0308 	and.w	r3, r3, #8
 800deea:	2b00      	cmp	r3, #0
 800deec:	d041      	beq.n	800df72 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	695b      	ldr	r3, [r3, #20]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d01c      	beq.n	800df30 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800def6:	4b19      	ldr	r3, [pc, #100]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800def8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800defc:	4a17      	ldr	r2, [pc, #92]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800defe:	f043 0301 	orr.w	r3, r3, #1
 800df02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df06:	f7fc febf 	bl	800ac88 <HAL_GetTick>
 800df0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df0c:	e008      	b.n	800df20 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df0e:	f7fc febb 	bl	800ac88 <HAL_GetTick>
 800df12:	4602      	mov	r2, r0
 800df14:	693b      	ldr	r3, [r7, #16]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	2b02      	cmp	r3, #2
 800df1a:	d901      	bls.n	800df20 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800df1c:	2303      	movs	r3, #3
 800df1e:	e1ef      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800df20:	4b0e      	ldr	r3, [pc, #56]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800df22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df26:	f003 0302 	and.w	r3, r3, #2
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d0ef      	beq.n	800df0e <HAL_RCC_OscConfig+0x22e>
 800df2e:	e020      	b.n	800df72 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800df30:	4b0a      	ldr	r3, [pc, #40]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800df32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df36:	4a09      	ldr	r2, [pc, #36]	; (800df5c <HAL_RCC_OscConfig+0x27c>)
 800df38:	f023 0301 	bic.w	r3, r3, #1
 800df3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800df40:	f7fc fea2 	bl	800ac88 <HAL_GetTick>
 800df44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800df46:	e00d      	b.n	800df64 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800df48:	f7fc fe9e 	bl	800ac88 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	2b02      	cmp	r3, #2
 800df54:	d906      	bls.n	800df64 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e1d2      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
 800df5a:	bf00      	nop
 800df5c:	40021000 	.word	0x40021000
 800df60:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800df64:	4b8c      	ldr	r3, [pc, #560]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800df66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800df6a:	f003 0302 	and.w	r3, r3, #2
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d1ea      	bne.n	800df48 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	f003 0304 	and.w	r3, r3, #4
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	f000 80a6 	beq.w	800e0cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800df80:	2300      	movs	r3, #0
 800df82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800df84:	4b84      	ldr	r3, [pc, #528]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800df86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d101      	bne.n	800df94 <HAL_RCC_OscConfig+0x2b4>
 800df90:	2301      	movs	r3, #1
 800df92:	e000      	b.n	800df96 <HAL_RCC_OscConfig+0x2b6>
 800df94:	2300      	movs	r3, #0
 800df96:	2b00      	cmp	r3, #0
 800df98:	d00d      	beq.n	800dfb6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800df9a:	4b7f      	ldr	r3, [pc, #508]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800df9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df9e:	4a7e      	ldr	r2, [pc, #504]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800dfa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dfa4:	6593      	str	r3, [r2, #88]	; 0x58
 800dfa6:	4b7c      	ldr	r3, [pc, #496]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800dfa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dfaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dfae:	60fb      	str	r3, [r7, #12]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dfb6:	4b79      	ldr	r3, [pc, #484]	; (800e19c <HAL_RCC_OscConfig+0x4bc>)
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d118      	bne.n	800dff4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800dfc2:	4b76      	ldr	r3, [pc, #472]	; (800e19c <HAL_RCC_OscConfig+0x4bc>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a75      	ldr	r2, [pc, #468]	; (800e19c <HAL_RCC_OscConfig+0x4bc>)
 800dfc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dfce:	f7fc fe5b 	bl	800ac88 <HAL_GetTick>
 800dfd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dfd4:	e008      	b.n	800dfe8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dfd6:	f7fc fe57 	bl	800ac88 <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d901      	bls.n	800dfe8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e18b      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dfe8:	4b6c      	ldr	r3, [pc, #432]	; (800e19c <HAL_RCC_OscConfig+0x4bc>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d0f0      	beq.n	800dfd6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	689b      	ldr	r3, [r3, #8]
 800dff8:	2b01      	cmp	r3, #1
 800dffa:	d108      	bne.n	800e00e <HAL_RCC_OscConfig+0x32e>
 800dffc:	4b66      	ldr	r3, [pc, #408]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800dffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e002:	4a65      	ldr	r2, [pc, #404]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e004:	f043 0301 	orr.w	r3, r3, #1
 800e008:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e00c:	e024      	b.n	800e058 <HAL_RCC_OscConfig+0x378>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	2b05      	cmp	r3, #5
 800e014:	d110      	bne.n	800e038 <HAL_RCC_OscConfig+0x358>
 800e016:	4b60      	ldr	r3, [pc, #384]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e01c:	4a5e      	ldr	r2, [pc, #376]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e01e:	f043 0304 	orr.w	r3, r3, #4
 800e022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e026:	4b5c      	ldr	r3, [pc, #368]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e02c:	4a5a      	ldr	r2, [pc, #360]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e02e:	f043 0301 	orr.w	r3, r3, #1
 800e032:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e036:	e00f      	b.n	800e058 <HAL_RCC_OscConfig+0x378>
 800e038:	4b57      	ldr	r3, [pc, #348]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e03a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e03e:	4a56      	ldr	r2, [pc, #344]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e040:	f023 0301 	bic.w	r3, r3, #1
 800e044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800e048:	4b53      	ldr	r3, [pc, #332]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e04e:	4a52      	ldr	r2, [pc, #328]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e050:	f023 0304 	bic.w	r3, r3, #4
 800e054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d016      	beq.n	800e08e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e060:	f7fc fe12 	bl	800ac88 <HAL_GetTick>
 800e064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e066:	e00a      	b.n	800e07e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e068:	f7fc fe0e 	bl	800ac88 <HAL_GetTick>
 800e06c:	4602      	mov	r2, r0
 800e06e:	693b      	ldr	r3, [r7, #16]
 800e070:	1ad3      	subs	r3, r2, r3
 800e072:	f241 3288 	movw	r2, #5000	; 0x1388
 800e076:	4293      	cmp	r3, r2
 800e078:	d901      	bls.n	800e07e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e140      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e07e:	4b46      	ldr	r3, [pc, #280]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e084:	f003 0302 	and.w	r3, r3, #2
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d0ed      	beq.n	800e068 <HAL_RCC_OscConfig+0x388>
 800e08c:	e015      	b.n	800e0ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e08e:	f7fc fdfb 	bl	800ac88 <HAL_GetTick>
 800e092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e094:	e00a      	b.n	800e0ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e096:	f7fc fdf7 	bl	800ac88 <HAL_GetTick>
 800e09a:	4602      	mov	r2, r0
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	1ad3      	subs	r3, r2, r3
 800e0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0a4:	4293      	cmp	r3, r2
 800e0a6:	d901      	bls.n	800e0ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	e129      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800e0ac:	4b3a      	ldr	r3, [pc, #232]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e0b2:	f003 0302 	and.w	r3, r3, #2
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d1ed      	bne.n	800e096 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800e0ba:	7ffb      	ldrb	r3, [r7, #31]
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d105      	bne.n	800e0cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e0c0:	4b35      	ldr	r3, [pc, #212]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e0c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0c4:	4a34      	ldr	r2, [pc, #208]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e0c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e0ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	f003 0320 	and.w	r3, r3, #32
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d03c      	beq.n	800e152 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	699b      	ldr	r3, [r3, #24]
 800e0dc:	2b00      	cmp	r3, #0
 800e0de:	d01c      	beq.n	800e11a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800e0e0:	4b2d      	ldr	r3, [pc, #180]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e0e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e0e6:	4a2c      	ldr	r2, [pc, #176]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e0e8:	f043 0301 	orr.w	r3, r3, #1
 800e0ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e0f0:	f7fc fdca 	bl	800ac88 <HAL_GetTick>
 800e0f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e0f6:	e008      	b.n	800e10a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e0f8:	f7fc fdc6 	bl	800ac88 <HAL_GetTick>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	693b      	ldr	r3, [r7, #16]
 800e100:	1ad3      	subs	r3, r2, r3
 800e102:	2b02      	cmp	r3, #2
 800e104:	d901      	bls.n	800e10a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800e106:	2303      	movs	r3, #3
 800e108:	e0fa      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800e10a:	4b23      	ldr	r3, [pc, #140]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e10c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e110:	f003 0302 	and.w	r3, r3, #2
 800e114:	2b00      	cmp	r3, #0
 800e116:	d0ef      	beq.n	800e0f8 <HAL_RCC_OscConfig+0x418>
 800e118:	e01b      	b.n	800e152 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800e11a:	4b1f      	ldr	r3, [pc, #124]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e11c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e120:	4a1d      	ldr	r2, [pc, #116]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e122:	f023 0301 	bic.w	r3, r3, #1
 800e126:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800e12a:	f7fc fdad 	bl	800ac88 <HAL_GetTick>
 800e12e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e130:	e008      	b.n	800e144 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800e132:	f7fc fda9 	bl	800ac88 <HAL_GetTick>
 800e136:	4602      	mov	r2, r0
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	1ad3      	subs	r3, r2, r3
 800e13c:	2b02      	cmp	r3, #2
 800e13e:	d901      	bls.n	800e144 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800e140:	2303      	movs	r3, #3
 800e142:	e0dd      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800e144:	4b14      	ldr	r3, [pc, #80]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e146:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800e14a:	f003 0302 	and.w	r3, r3, #2
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1ef      	bne.n	800e132 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	69db      	ldr	r3, [r3, #28]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 80d1 	beq.w	800e2fe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800e15c:	4b0e      	ldr	r3, [pc, #56]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e15e:	689b      	ldr	r3, [r3, #8]
 800e160:	f003 030c 	and.w	r3, r3, #12
 800e164:	2b0c      	cmp	r3, #12
 800e166:	f000 808b 	beq.w	800e280 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	69db      	ldr	r3, [r3, #28]
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d15e      	bne.n	800e230 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e172:	4b09      	ldr	r3, [pc, #36]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a08      	ldr	r2, [pc, #32]	; (800e198 <HAL_RCC_OscConfig+0x4b8>)
 800e178:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e17c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e17e:	f7fc fd83 	bl	800ac88 <HAL_GetTick>
 800e182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e184:	e00c      	b.n	800e1a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e186:	f7fc fd7f 	bl	800ac88 <HAL_GetTick>
 800e18a:	4602      	mov	r2, r0
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	1ad3      	subs	r3, r2, r3
 800e190:	2b02      	cmp	r3, #2
 800e192:	d905      	bls.n	800e1a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800e194:	2303      	movs	r3, #3
 800e196:	e0b3      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
 800e198:	40021000 	.word	0x40021000
 800e19c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e1a0:	4b59      	ldr	r3, [pc, #356]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1ec      	bne.n	800e186 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e1ac:	4b56      	ldr	r3, [pc, #344]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1ae:	68da      	ldr	r2, [r3, #12]
 800e1b0:	4b56      	ldr	r3, [pc, #344]	; (800e30c <HAL_RCC_OscConfig+0x62c>)
 800e1b2:	4013      	ands	r3, r2
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	6a11      	ldr	r1, [r2, #32]
 800e1b8:	687a      	ldr	r2, [r7, #4]
 800e1ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e1bc:	3a01      	subs	r2, #1
 800e1be:	0112      	lsls	r2, r2, #4
 800e1c0:	4311      	orrs	r1, r2
 800e1c2:	687a      	ldr	r2, [r7, #4]
 800e1c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e1c6:	0212      	lsls	r2, r2, #8
 800e1c8:	4311      	orrs	r1, r2
 800e1ca:	687a      	ldr	r2, [r7, #4]
 800e1cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e1ce:	0852      	lsrs	r2, r2, #1
 800e1d0:	3a01      	subs	r2, #1
 800e1d2:	0552      	lsls	r2, r2, #21
 800e1d4:	4311      	orrs	r1, r2
 800e1d6:	687a      	ldr	r2, [r7, #4]
 800e1d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e1da:	0852      	lsrs	r2, r2, #1
 800e1dc:	3a01      	subs	r2, #1
 800e1de:	0652      	lsls	r2, r2, #25
 800e1e0:	4311      	orrs	r1, r2
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800e1e6:	06d2      	lsls	r2, r2, #27
 800e1e8:	430a      	orrs	r2, r1
 800e1ea:	4947      	ldr	r1, [pc, #284]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1ec:	4313      	orrs	r3, r2
 800e1ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e1f0:	4b45      	ldr	r3, [pc, #276]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a44      	ldr	r2, [pc, #272]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e1fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800e1fc:	4b42      	ldr	r3, [pc, #264]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e1fe:	68db      	ldr	r3, [r3, #12]
 800e200:	4a41      	ldr	r2, [pc, #260]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e206:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e208:	f7fc fd3e 	bl	800ac88 <HAL_GetTick>
 800e20c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e20e:	e008      	b.n	800e222 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e210:	f7fc fd3a 	bl	800ac88 <HAL_GetTick>
 800e214:	4602      	mov	r2, r0
 800e216:	693b      	ldr	r3, [r7, #16]
 800e218:	1ad3      	subs	r3, r2, r3
 800e21a:	2b02      	cmp	r3, #2
 800e21c:	d901      	bls.n	800e222 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800e21e:	2303      	movs	r3, #3
 800e220:	e06e      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e222:	4b39      	ldr	r3, [pc, #228]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d0f0      	beq.n	800e210 <HAL_RCC_OscConfig+0x530>
 800e22e:	e066      	b.n	800e2fe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e230:	4b35      	ldr	r3, [pc, #212]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a34      	ldr	r2, [pc, #208]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e23a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800e23c:	4b32      	ldr	r3, [pc, #200]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	4a31      	ldr	r2, [pc, #196]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e242:	f023 0303 	bic.w	r3, r3, #3
 800e246:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800e248:	4b2f      	ldr	r3, [pc, #188]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	4a2e      	ldr	r2, [pc, #184]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e24e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800e252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e256:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e258:	f7fc fd16 	bl	800ac88 <HAL_GetTick>
 800e25c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e25e:	e008      	b.n	800e272 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e260:	f7fc fd12 	bl	800ac88 <HAL_GetTick>
 800e264:	4602      	mov	r2, r0
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	1ad3      	subs	r3, r2, r3
 800e26a:	2b02      	cmp	r3, #2
 800e26c:	d901      	bls.n	800e272 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800e26e:	2303      	movs	r3, #3
 800e270:	e046      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800e272:	4b25      	ldr	r3, [pc, #148]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d1f0      	bne.n	800e260 <HAL_RCC_OscConfig+0x580>
 800e27e:	e03e      	b.n	800e2fe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	69db      	ldr	r3, [r3, #28]
 800e284:	2b01      	cmp	r3, #1
 800e286:	d101      	bne.n	800e28c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800e288:	2301      	movs	r3, #1
 800e28a:	e039      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800e28c:	4b1e      	ldr	r3, [pc, #120]	; (800e308 <HAL_RCC_OscConfig+0x628>)
 800e28e:	68db      	ldr	r3, [r3, #12]
 800e290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e292:	697b      	ldr	r3, [r7, #20]
 800e294:	f003 0203 	and.w	r2, r3, #3
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6a1b      	ldr	r3, [r3, #32]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d12c      	bne.n	800e2fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2aa:	3b01      	subs	r3, #1
 800e2ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e2ae:	429a      	cmp	r2, r3
 800e2b0:	d123      	bne.n	800e2fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800e2be:	429a      	cmp	r2, r3
 800e2c0:	d11b      	bne.n	800e2fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e2c2:	697b      	ldr	r3, [r7, #20]
 800e2c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800e2ce:	429a      	cmp	r2, r3
 800e2d0:	d113      	bne.n	800e2fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2dc:	085b      	lsrs	r3, r3, #1
 800e2de:	3b01      	subs	r3, #1
 800e2e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d109      	bne.n	800e2fa <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2f0:	085b      	lsrs	r3, r3, #1
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d001      	beq.n	800e2fe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800e2fa:	2301      	movs	r3, #1
 800e2fc:	e000      	b.n	800e300 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800e2fe:	2300      	movs	r3, #0
}
 800e300:	4618      	mov	r0, r3
 800e302:	3720      	adds	r7, #32
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}
 800e308:	40021000 	.word	0x40021000
 800e30c:	019f800c 	.word	0x019f800c

0800e310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e310:	b580      	push	{r7, lr}
 800e312:	b086      	sub	sp, #24
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
 800e318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800e31a:	2300      	movs	r3, #0
 800e31c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d101      	bne.n	800e328 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e324:	2301      	movs	r3, #1
 800e326:	e11e      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e328:	4b91      	ldr	r3, [pc, #580]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	f003 030f 	and.w	r3, r3, #15
 800e330:	683a      	ldr	r2, [r7, #0]
 800e332:	429a      	cmp	r2, r3
 800e334:	d910      	bls.n	800e358 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e336:	4b8e      	ldr	r3, [pc, #568]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f023 020f 	bic.w	r2, r3, #15
 800e33e:	498c      	ldr	r1, [pc, #560]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	4313      	orrs	r3, r2
 800e344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e346:	4b8a      	ldr	r3, [pc, #552]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	f003 030f 	and.w	r3, r3, #15
 800e34e:	683a      	ldr	r2, [r7, #0]
 800e350:	429a      	cmp	r2, r3
 800e352:	d001      	beq.n	800e358 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e354:	2301      	movs	r3, #1
 800e356:	e106      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	f003 0301 	and.w	r3, r3, #1
 800e360:	2b00      	cmp	r3, #0
 800e362:	d073      	beq.n	800e44c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	2b03      	cmp	r3, #3
 800e36a:	d129      	bne.n	800e3c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800e36c:	4b81      	ldr	r3, [pc, #516]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e374:	2b00      	cmp	r3, #0
 800e376:	d101      	bne.n	800e37c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800e378:	2301      	movs	r3, #1
 800e37a:	e0f4      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800e37c:	f000 f99c 	bl	800e6b8 <RCC_GetSysClockFreqFromPLLSource>
 800e380:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800e382:	693b      	ldr	r3, [r7, #16]
 800e384:	4a7c      	ldr	r2, [pc, #496]	; (800e578 <HAL_RCC_ClockConfig+0x268>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d93f      	bls.n	800e40a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e38a:	4b7a      	ldr	r3, [pc, #488]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e38c:	689b      	ldr	r3, [r3, #8]
 800e38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e392:	2b00      	cmp	r3, #0
 800e394:	d009      	beq.n	800e3aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d033      	beq.n	800e40a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d12f      	bne.n	800e40a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e3aa:	4b72      	ldr	r3, [pc, #456]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e3ac:	689b      	ldr	r3, [r3, #8]
 800e3ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3b2:	4a70      	ldr	r2, [pc, #448]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800e3ba:	2380      	movs	r3, #128	; 0x80
 800e3bc:	617b      	str	r3, [r7, #20]
 800e3be:	e024      	b.n	800e40a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	2b02      	cmp	r3, #2
 800e3c6:	d107      	bne.n	800e3d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800e3c8:	4b6a      	ldr	r3, [pc, #424]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d109      	bne.n	800e3e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e0c6      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800e3d8:	4b66      	ldr	r3, [pc, #408]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d101      	bne.n	800e3e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	e0be      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800e3e8:	f000 f8ce 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 800e3ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800e3ee:	693b      	ldr	r3, [r7, #16]
 800e3f0:	4a61      	ldr	r2, [pc, #388]	; (800e578 <HAL_RCC_ClockConfig+0x268>)
 800e3f2:	4293      	cmp	r3, r2
 800e3f4:	d909      	bls.n	800e40a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800e3f6:	4b5f      	ldr	r3, [pc, #380]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e3f8:	689b      	ldr	r3, [r3, #8]
 800e3fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e3fe:	4a5d      	ldr	r2, [pc, #372]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e404:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800e406:	2380      	movs	r3, #128	; 0x80
 800e408:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800e40a:	4b5a      	ldr	r3, [pc, #360]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e40c:	689b      	ldr	r3, [r3, #8]
 800e40e:	f023 0203 	bic.w	r2, r3, #3
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	685b      	ldr	r3, [r3, #4]
 800e416:	4957      	ldr	r1, [pc, #348]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e418:	4313      	orrs	r3, r2
 800e41a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e41c:	f7fc fc34 	bl	800ac88 <HAL_GetTick>
 800e420:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e422:	e00a      	b.n	800e43a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e424:	f7fc fc30 	bl	800ac88 <HAL_GetTick>
 800e428:	4602      	mov	r2, r0
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	1ad3      	subs	r3, r2, r3
 800e42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e432:	4293      	cmp	r3, r2
 800e434:	d901      	bls.n	800e43a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800e436:	2303      	movs	r3, #3
 800e438:	e095      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e43a:	4b4e      	ldr	r3, [pc, #312]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f003 020c 	and.w	r2, r3, #12
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	685b      	ldr	r3, [r3, #4]
 800e446:	009b      	lsls	r3, r3, #2
 800e448:	429a      	cmp	r2, r3
 800e44a:	d1eb      	bne.n	800e424 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f003 0302 	and.w	r3, r3, #2
 800e454:	2b00      	cmp	r3, #0
 800e456:	d023      	beq.n	800e4a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 0304 	and.w	r3, r3, #4
 800e460:	2b00      	cmp	r3, #0
 800e462:	d005      	beq.n	800e470 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e464:	4b43      	ldr	r3, [pc, #268]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e466:	689b      	ldr	r3, [r3, #8]
 800e468:	4a42      	ldr	r2, [pc, #264]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e46a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e46e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	f003 0308 	and.w	r3, r3, #8
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d007      	beq.n	800e48c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800e47c:	4b3d      	ldr	r3, [pc, #244]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e47e:	689b      	ldr	r3, [r3, #8]
 800e480:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800e484:	4a3b      	ldr	r2, [pc, #236]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800e48a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e48c:	4b39      	ldr	r3, [pc, #228]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e48e:	689b      	ldr	r3, [r3, #8]
 800e490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	689b      	ldr	r3, [r3, #8]
 800e498:	4936      	ldr	r1, [pc, #216]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e49a:	4313      	orrs	r3, r2
 800e49c:	608b      	str	r3, [r1, #8]
 800e49e:	e008      	b.n	800e4b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	2b80      	cmp	r3, #128	; 0x80
 800e4a4:	d105      	bne.n	800e4b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800e4a6:	4b33      	ldr	r3, [pc, #204]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e4a8:	689b      	ldr	r3, [r3, #8]
 800e4aa:	4a32      	ldr	r2, [pc, #200]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e4ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e4b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e4b2:	4b2f      	ldr	r3, [pc, #188]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f003 030f 	and.w	r3, r3, #15
 800e4ba:	683a      	ldr	r2, [r7, #0]
 800e4bc:	429a      	cmp	r2, r3
 800e4be:	d21d      	bcs.n	800e4fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e4c0:	4b2b      	ldr	r3, [pc, #172]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f023 020f 	bic.w	r2, r3, #15
 800e4c8:	4929      	ldr	r1, [pc, #164]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	4313      	orrs	r3, r2
 800e4ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800e4d0:	f7fc fbda 	bl	800ac88 <HAL_GetTick>
 800e4d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4d6:	e00a      	b.n	800e4ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e4d8:	f7fc fbd6 	bl	800ac88 <HAL_GetTick>
 800e4dc:	4602      	mov	r2, r0
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	1ad3      	subs	r3, r2, r3
 800e4e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800e4e6:	4293      	cmp	r3, r2
 800e4e8:	d901      	bls.n	800e4ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800e4ea:	2303      	movs	r3, #3
 800e4ec:	e03b      	b.n	800e566 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e4ee:	4b20      	ldr	r3, [pc, #128]	; (800e570 <HAL_RCC_ClockConfig+0x260>)
 800e4f0:	681b      	ldr	r3, [r3, #0]
 800e4f2:	f003 030f 	and.w	r3, r3, #15
 800e4f6:	683a      	ldr	r2, [r7, #0]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d1ed      	bne.n	800e4d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	681b      	ldr	r3, [r3, #0]
 800e500:	f003 0304 	and.w	r3, r3, #4
 800e504:	2b00      	cmp	r3, #0
 800e506:	d008      	beq.n	800e51a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e508:	4b1a      	ldr	r3, [pc, #104]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e50a:	689b      	ldr	r3, [r3, #8]
 800e50c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68db      	ldr	r3, [r3, #12]
 800e514:	4917      	ldr	r1, [pc, #92]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e516:	4313      	orrs	r3, r2
 800e518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	f003 0308 	and.w	r3, r3, #8
 800e522:	2b00      	cmp	r3, #0
 800e524:	d009      	beq.n	800e53a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800e526:	4b13      	ldr	r3, [pc, #76]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e528:	689b      	ldr	r3, [r3, #8]
 800e52a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	691b      	ldr	r3, [r3, #16]
 800e532:	00db      	lsls	r3, r3, #3
 800e534:	490f      	ldr	r1, [pc, #60]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e536:	4313      	orrs	r3, r2
 800e538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800e53a:	f000 f825 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 800e53e:	4602      	mov	r2, r0
 800e540:	4b0c      	ldr	r3, [pc, #48]	; (800e574 <HAL_RCC_ClockConfig+0x264>)
 800e542:	689b      	ldr	r3, [r3, #8]
 800e544:	091b      	lsrs	r3, r3, #4
 800e546:	f003 030f 	and.w	r3, r3, #15
 800e54a:	490c      	ldr	r1, [pc, #48]	; (800e57c <HAL_RCC_ClockConfig+0x26c>)
 800e54c:	5ccb      	ldrb	r3, [r1, r3]
 800e54e:	f003 031f 	and.w	r3, r3, #31
 800e552:	fa22 f303 	lsr.w	r3, r2, r3
 800e556:	4a0a      	ldr	r2, [pc, #40]	; (800e580 <HAL_RCC_ClockConfig+0x270>)
 800e558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800e55a:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <HAL_RCC_ClockConfig+0x274>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	4618      	mov	r0, r3
 800e560:	f7fc fb46 	bl	800abf0 <HAL_InitTick>
 800e564:	4603      	mov	r3, r0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3718      	adds	r7, #24
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}
 800e56e:	bf00      	nop
 800e570:	40022000 	.word	0x40022000
 800e574:	40021000 	.word	0x40021000
 800e578:	04c4b400 	.word	0x04c4b400
 800e57c:	08014e1c 	.word	0x08014e1c
 800e580:	20000000 	.word	0x20000000
 800e584:	20000004 	.word	0x20000004

0800e588 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e588:	b480      	push	{r7}
 800e58a:	b087      	sub	sp, #28
 800e58c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800e58e:	4b2c      	ldr	r3, [pc, #176]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e590:	689b      	ldr	r3, [r3, #8]
 800e592:	f003 030c 	and.w	r3, r3, #12
 800e596:	2b04      	cmp	r3, #4
 800e598:	d102      	bne.n	800e5a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e59a:	4b2a      	ldr	r3, [pc, #168]	; (800e644 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e59c:	613b      	str	r3, [r7, #16]
 800e59e:	e047      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800e5a0:	4b27      	ldr	r3, [pc, #156]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e5a2:	689b      	ldr	r3, [r3, #8]
 800e5a4:	f003 030c 	and.w	r3, r3, #12
 800e5a8:	2b08      	cmp	r3, #8
 800e5aa:	d102      	bne.n	800e5b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800e5ac:	4b25      	ldr	r3, [pc, #148]	; (800e644 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	e03e      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800e5b2:	4b23      	ldr	r3, [pc, #140]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	f003 030c 	and.w	r3, r3, #12
 800e5ba:	2b0c      	cmp	r3, #12
 800e5bc:	d136      	bne.n	800e62c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e5be:	4b20      	ldr	r3, [pc, #128]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e5c0:	68db      	ldr	r3, [r3, #12]
 800e5c2:	f003 0303 	and.w	r3, r3, #3
 800e5c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e5c8:	4b1d      	ldr	r3, [pc, #116]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	091b      	lsrs	r3, r3, #4
 800e5ce:	f003 030f 	and.w	r3, r3, #15
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	2b03      	cmp	r3, #3
 800e5da:	d10c      	bne.n	800e5f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e5dc:	4a19      	ldr	r2, [pc, #100]	; (800e644 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e5de:	68bb      	ldr	r3, [r7, #8]
 800e5e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5e4:	4a16      	ldr	r2, [pc, #88]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e5e6:	68d2      	ldr	r2, [r2, #12]
 800e5e8:	0a12      	lsrs	r2, r2, #8
 800e5ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e5ee:	fb02 f303 	mul.w	r3, r2, r3
 800e5f2:	617b      	str	r3, [r7, #20]
      break;
 800e5f4:	e00c      	b.n	800e610 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e5f6:	4a13      	ldr	r2, [pc, #76]	; (800e644 <HAL_RCC_GetSysClockFreq+0xbc>)
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5fe:	4a10      	ldr	r2, [pc, #64]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e600:	68d2      	ldr	r2, [r2, #12]
 800e602:	0a12      	lsrs	r2, r2, #8
 800e604:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e608:	fb02 f303 	mul.w	r3, r2, r3
 800e60c:	617b      	str	r3, [r7, #20]
      break;
 800e60e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e610:	4b0b      	ldr	r3, [pc, #44]	; (800e640 <HAL_RCC_GetSysClockFreq+0xb8>)
 800e612:	68db      	ldr	r3, [r3, #12]
 800e614:	0e5b      	lsrs	r3, r3, #25
 800e616:	f003 0303 	and.w	r3, r3, #3
 800e61a:	3301      	adds	r3, #1
 800e61c:	005b      	lsls	r3, r3, #1
 800e61e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800e620:	697a      	ldr	r2, [r7, #20]
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	fbb2 f3f3 	udiv	r3, r2, r3
 800e628:	613b      	str	r3, [r7, #16]
 800e62a:	e001      	b.n	800e630 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800e62c:	2300      	movs	r3, #0
 800e62e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800e630:	693b      	ldr	r3, [r7, #16]
}
 800e632:	4618      	mov	r0, r3
 800e634:	371c      	adds	r7, #28
 800e636:	46bd      	mov	sp, r7
 800e638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop
 800e640:	40021000 	.word	0x40021000
 800e644:	00f42400 	.word	0x00f42400

0800e648 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e648:	b480      	push	{r7}
 800e64a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e64c:	4b03      	ldr	r3, [pc, #12]	; (800e65c <HAL_RCC_GetHCLKFreq+0x14>)
 800e64e:	681b      	ldr	r3, [r3, #0]
}
 800e650:	4618      	mov	r0, r3
 800e652:	46bd      	mov	sp, r7
 800e654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e658:	4770      	bx	lr
 800e65a:	bf00      	nop
 800e65c:	20000000 	.word	0x20000000

0800e660 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800e664:	f7ff fff0 	bl	800e648 <HAL_RCC_GetHCLKFreq>
 800e668:	4602      	mov	r2, r0
 800e66a:	4b06      	ldr	r3, [pc, #24]	; (800e684 <HAL_RCC_GetPCLK1Freq+0x24>)
 800e66c:	689b      	ldr	r3, [r3, #8]
 800e66e:	0a1b      	lsrs	r3, r3, #8
 800e670:	f003 0307 	and.w	r3, r3, #7
 800e674:	4904      	ldr	r1, [pc, #16]	; (800e688 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e676:	5ccb      	ldrb	r3, [r1, r3]
 800e678:	f003 031f 	and.w	r3, r3, #31
 800e67c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e680:	4618      	mov	r0, r3
 800e682:	bd80      	pop	{r7, pc}
 800e684:	40021000 	.word	0x40021000
 800e688:	08014e2c 	.word	0x08014e2c

0800e68c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800e690:	f7ff ffda 	bl	800e648 <HAL_RCC_GetHCLKFreq>
 800e694:	4602      	mov	r2, r0
 800e696:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e698:	689b      	ldr	r3, [r3, #8]
 800e69a:	0adb      	lsrs	r3, r3, #11
 800e69c:	f003 0307 	and.w	r3, r3, #7
 800e6a0:	4904      	ldr	r1, [pc, #16]	; (800e6b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e6a2:	5ccb      	ldrb	r3, [r1, r3]
 800e6a4:	f003 031f 	and.w	r3, r3, #31
 800e6a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	bd80      	pop	{r7, pc}
 800e6b0:	40021000 	.word	0x40021000
 800e6b4:	08014e2c 	.word	0x08014e2c

0800e6b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800e6be:	4b1e      	ldr	r3, [pc, #120]	; (800e738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e6c0:	68db      	ldr	r3, [r3, #12]
 800e6c2:	f003 0303 	and.w	r3, r3, #3
 800e6c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800e6c8:	4b1b      	ldr	r3, [pc, #108]	; (800e738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	091b      	lsrs	r3, r3, #4
 800e6ce:	f003 030f 	and.w	r3, r3, #15
 800e6d2:	3301      	adds	r3, #1
 800e6d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800e6d6:	693b      	ldr	r3, [r7, #16]
 800e6d8:	2b03      	cmp	r3, #3
 800e6da:	d10c      	bne.n	800e6f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e6dc:	4a17      	ldr	r2, [pc, #92]	; (800e73c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6e4:	4a14      	ldr	r2, [pc, #80]	; (800e738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e6e6:	68d2      	ldr	r2, [r2, #12]
 800e6e8:	0a12      	lsrs	r2, r2, #8
 800e6ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e6ee:	fb02 f303 	mul.w	r3, r2, r3
 800e6f2:	617b      	str	r3, [r7, #20]
    break;
 800e6f4:	e00c      	b.n	800e710 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800e6f6:	4a11      	ldr	r2, [pc, #68]	; (800e73c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6fe:	4a0e      	ldr	r2, [pc, #56]	; (800e738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e700:	68d2      	ldr	r2, [r2, #12]
 800e702:	0a12      	lsrs	r2, r2, #8
 800e704:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e708:	fb02 f303 	mul.w	r3, r2, r3
 800e70c:	617b      	str	r3, [r7, #20]
    break;
 800e70e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800e710:	4b09      	ldr	r3, [pc, #36]	; (800e738 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	0e5b      	lsrs	r3, r3, #25
 800e716:	f003 0303 	and.w	r3, r3, #3
 800e71a:	3301      	adds	r3, #1
 800e71c:	005b      	lsls	r3, r3, #1
 800e71e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800e720:	697a      	ldr	r2, [r7, #20]
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	fbb2 f3f3 	udiv	r3, r2, r3
 800e728:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800e72a:	687b      	ldr	r3, [r7, #4]
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	371c      	adds	r7, #28
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr
 800e738:	40021000 	.word	0x40021000
 800e73c:	00f42400 	.word	0x00f42400

0800e740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e740:	b580      	push	{r7, lr}
 800e742:	b086      	sub	sp, #24
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800e748:	2300      	movs	r3, #0
 800e74a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800e74c:	2300      	movs	r3, #0
 800e74e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	f000 8098 	beq.w	800e88e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800e75e:	2300      	movs	r3, #0
 800e760:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800e762:	4b43      	ldr	r3, [pc, #268]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d10d      	bne.n	800e78a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800e76e:	4b40      	ldr	r3, [pc, #256]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e772:	4a3f      	ldr	r2, [pc, #252]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e778:	6593      	str	r3, [r2, #88]	; 0x58
 800e77a:	4b3d      	ldr	r3, [pc, #244]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e77c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e77e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e782:	60bb      	str	r3, [r7, #8]
 800e784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800e786:	2301      	movs	r3, #1
 800e788:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800e78a:	4b3a      	ldr	r3, [pc, #232]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e78c:	681b      	ldr	r3, [r3, #0]
 800e78e:	4a39      	ldr	r2, [pc, #228]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e794:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800e796:	f7fc fa77 	bl	800ac88 <HAL_GetTick>
 800e79a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e79c:	e009      	b.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e79e:	f7fc fa73 	bl	800ac88 <HAL_GetTick>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	2b02      	cmp	r3, #2
 800e7aa:	d902      	bls.n	800e7b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800e7ac:	2303      	movs	r3, #3
 800e7ae:	74fb      	strb	r3, [r7, #19]
        break;
 800e7b0:	e005      	b.n	800e7be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800e7b2:	4b30      	ldr	r3, [pc, #192]	; (800e874 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d0ef      	beq.n	800e79e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800e7be:	7cfb      	ldrb	r3, [r7, #19]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d159      	bne.n	800e878 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800e7c4:	4b2a      	ldr	r3, [pc, #168]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e7c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e7ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800e7d0:	697b      	ldr	r3, [r7, #20]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d01e      	beq.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e7da:	697a      	ldr	r2, [r7, #20]
 800e7dc:	429a      	cmp	r2, r3
 800e7de:	d019      	beq.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800e7e0:	4b23      	ldr	r3, [pc, #140]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800e7ec:	4b20      	ldr	r3, [pc, #128]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e7ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f2:	4a1f      	ldr	r2, [pc, #124]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e7f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e7f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800e7fc:	4b1c      	ldr	r3, [pc, #112]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e7fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e802:	4a1b      	ldr	r2, [pc, #108]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800e80c:	4a18      	ldr	r2, [pc, #96]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800e814:	697b      	ldr	r3, [r7, #20]
 800e816:	f003 0301 	and.w	r3, r3, #1
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d016      	beq.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e81e:	f7fc fa33 	bl	800ac88 <HAL_GetTick>
 800e822:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e824:	e00b      	b.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e826:	f7fc fa2f 	bl	800ac88 <HAL_GetTick>
 800e82a:	4602      	mov	r2, r0
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	1ad3      	subs	r3, r2, r3
 800e830:	f241 3288 	movw	r2, #5000	; 0x1388
 800e834:	4293      	cmp	r3, r2
 800e836:	d902      	bls.n	800e83e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800e838:	2303      	movs	r3, #3
 800e83a:	74fb      	strb	r3, [r7, #19]
            break;
 800e83c:	e006      	b.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800e83e:	4b0c      	ldr	r3, [pc, #48]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e844:	f003 0302 	and.w	r3, r3, #2
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d0ec      	beq.n	800e826 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800e84c:	7cfb      	ldrb	r3, [r7, #19]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10b      	bne.n	800e86a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e852:	4b07      	ldr	r3, [pc, #28]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e860:	4903      	ldr	r1, [pc, #12]	; (800e870 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800e862:	4313      	orrs	r3, r2
 800e864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800e868:	e008      	b.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800e86a:	7cfb      	ldrb	r3, [r7, #19]
 800e86c:	74bb      	strb	r3, [r7, #18]
 800e86e:	e005      	b.n	800e87c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800e870:	40021000 	.word	0x40021000
 800e874:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e878:	7cfb      	ldrb	r3, [r7, #19]
 800e87a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800e87c:	7c7b      	ldrb	r3, [r7, #17]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d105      	bne.n	800e88e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800e882:	4ba7      	ldr	r3, [pc, #668]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e886:	4aa6      	ldr	r2, [pc, #664]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e888:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e88c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	f003 0301 	and.w	r3, r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00a      	beq.n	800e8b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e89a:	4ba1      	ldr	r3, [pc, #644]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8a0:	f023 0203 	bic.w	r2, r3, #3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	499d      	ldr	r1, [pc, #628]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f003 0302 	and.w	r3, r3, #2
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00a      	beq.n	800e8d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e8bc:	4b98      	ldr	r3, [pc, #608]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8c2:	f023 020c 	bic.w	r2, r3, #12
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	689b      	ldr	r3, [r3, #8]
 800e8ca:	4995      	ldr	r1, [pc, #596]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8cc:	4313      	orrs	r3, r2
 800e8ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f003 0304 	and.w	r3, r3, #4
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00a      	beq.n	800e8f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e8de:	4b90      	ldr	r3, [pc, #576]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e8e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	498c      	ldr	r1, [pc, #560]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f003 0308 	and.w	r3, r3, #8
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e900:	4b87      	ldr	r3, [pc, #540]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e906:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	691b      	ldr	r3, [r3, #16]
 800e90e:	4984      	ldr	r1, [pc, #528]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e910:	4313      	orrs	r3, r2
 800e912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	f003 0310 	and.w	r3, r3, #16
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d00a      	beq.n	800e938 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e922:	4b7f      	ldr	r3, [pc, #508]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e924:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	695b      	ldr	r3, [r3, #20]
 800e930:	497b      	ldr	r1, [pc, #492]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e932:	4313      	orrs	r3, r2
 800e934:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f003 0320 	and.w	r3, r3, #32
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00a      	beq.n	800e95a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e944:	4b76      	ldr	r3, [pc, #472]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e94a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	699b      	ldr	r3, [r3, #24]
 800e952:	4973      	ldr	r1, [pc, #460]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e954:	4313      	orrs	r3, r2
 800e956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e962:	2b00      	cmp	r3, #0
 800e964:	d00a      	beq.n	800e97c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e966:	4b6e      	ldr	r3, [pc, #440]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e96c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	69db      	ldr	r3, [r3, #28]
 800e974:	496a      	ldr	r1, [pc, #424]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e976:	4313      	orrs	r3, r2
 800e978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e984:	2b00      	cmp	r3, #0
 800e986:	d00a      	beq.n	800e99e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e988:	4b65      	ldr	r3, [pc, #404]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e98a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e98e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a1b      	ldr	r3, [r3, #32]
 800e996:	4962      	ldr	r1, [pc, #392]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e998:	4313      	orrs	r3, r2
 800e99a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00a      	beq.n	800e9c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e9aa:	4b5d      	ldr	r3, [pc, #372]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b8:	4959      	ldr	r1, [pc, #356]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9ba:	4313      	orrs	r3, r2
 800e9bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00a      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e9cc:	4b54      	ldr	r3, [pc, #336]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e9da:	4951      	ldr	r1, [pc, #324]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d015      	beq.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e9ee:	4b4c      	ldr	r3, [pc, #304]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e9f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9fc:	4948      	ldr	r1, [pc, #288]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ea0c:	d105      	bne.n	800ea1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ea0e:	4b44      	ldr	r3, [pc, #272]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea10:	68db      	ldr	r3, [r3, #12]
 800ea12:	4a43      	ldr	r2, [pc, #268]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea18:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d015      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ea26:	4b3e      	ldr	r3, [pc, #248]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea34:	493a      	ldr	r1, [pc, #232]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea36:	4313      	orrs	r3, r2
 800ea38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea44:	d105      	bne.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ea46:	4b36      	ldr	r3, [pc, #216]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea48:	68db      	ldr	r3, [r3, #12]
 800ea4a:	4a35      	ldr	r2, [pc, #212]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea50:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d015      	beq.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ea5e:	4b30      	ldr	r3, [pc, #192]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea64:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea6c:	492c      	ldr	r1, [pc, #176]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ea7c:	d105      	bne.n	800ea8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800ea7e:	4b28      	ldr	r3, [pc, #160]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea80:	68db      	ldr	r3, [r3, #12]
 800ea82:	4a27      	ldr	r2, [pc, #156]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea88:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d015      	beq.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ea96:	4b22      	ldr	r3, [pc, #136]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ea98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ea9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaa4:	491e      	ldr	r1, [pc, #120]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eaa6:	4313      	orrs	r3, r2
 800eaa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eab4:	d105      	bne.n	800eac2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eab6:	4b1a      	ldr	r3, [pc, #104]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eab8:	68db      	ldr	r3, [r3, #12]
 800eaba:	4a19      	ldr	r2, [pc, #100]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eabc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eac0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d015      	beq.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800eace:	4b14      	ldr	r3, [pc, #80]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800ead0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ead4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eadc:	4910      	ldr	r1, [pc, #64]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eade:	4313      	orrs	r3, r2
 800eae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800eaec:	d105      	bne.n	800eafa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eaee:	4b0c      	ldr	r3, [pc, #48]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eaf0:	68db      	ldr	r3, [r3, #12]
 800eaf2:	4a0b      	ldr	r2, [pc, #44]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eaf4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eaf8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d018      	beq.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800eb06:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb0c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb14:	4902      	ldr	r1, [pc, #8]	; (800eb20 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800eb16:	4313      	orrs	r3, r2
 800eb18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	e001      	b.n	800eb24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800eb20:	40021000 	.word	0x40021000
 800eb24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eb2a:	d105      	bne.n	800eb38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800eb2c:	4b21      	ldr	r3, [pc, #132]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	4a20      	ldr	r2, [pc, #128]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb36:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d015      	beq.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800eb44:	4b1b      	ldr	r3, [pc, #108]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb4a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb52:	4918      	ldr	r1, [pc, #96]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb54:	4313      	orrs	r3, r2
 800eb56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb62:	d105      	bne.n	800eb70 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800eb64:	4b13      	ldr	r3, [pc, #76]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb66:	68db      	ldr	r3, [r3, #12]
 800eb68:	4a12      	ldr	r2, [pc, #72]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb6e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d015      	beq.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800eb7c:	4b0d      	ldr	r3, [pc, #52]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800eb82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb8a:	490a      	ldr	r1, [pc, #40]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb8c:	4313      	orrs	r3, r2
 800eb8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800eb9a:	d105      	bne.n	800eba8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800eb9c:	4b05      	ldr	r3, [pc, #20]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	4a04      	ldr	r2, [pc, #16]	; (800ebb4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800eba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eba6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800eba8:	7cbb      	ldrb	r3, [r7, #18]
}
 800ebaa:	4618      	mov	r0, r3
 800ebac:	3718      	adds	r7, #24
 800ebae:	46bd      	mov	sp, r7
 800ebb0:	bd80      	pop	{r7, pc}
 800ebb2:	bf00      	nop
 800ebb4:	40021000 	.word	0x40021000

0800ebb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b084      	sub	sp, #16
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d101      	bne.n	800ebca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ebc6:	2301      	movs	r3, #1
 800ebc8:	e09d      	b.n	800ed06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d108      	bne.n	800ebe4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ebda:	d009      	beq.n	800ebf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2200      	movs	r2, #0
 800ebe0:	61da      	str	r2, [r3, #28]
 800ebe2:	e005      	b.n	800ebf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d106      	bne.n	800ec10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2200      	movs	r2, #0
 800ec06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f7fb fafe 	bl	800a20c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	2202      	movs	r2, #2
 800ec14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	68db      	ldr	r3, [r3, #12]
 800ec2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec30:	d902      	bls.n	800ec38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ec32:	2300      	movs	r3, #0
 800ec34:	60fb      	str	r3, [r7, #12]
 800ec36:	e002      	b.n	800ec3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ec38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ec3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800ec46:	d007      	beq.n	800ec58 <HAL_SPI_Init+0xa0>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	68db      	ldr	r3, [r3, #12]
 800ec4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ec50:	d002      	beq.n	800ec58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2200      	movs	r2, #0
 800ec56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	685b      	ldr	r3, [r3, #4]
 800ec5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	689b      	ldr	r3, [r3, #8]
 800ec64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800ec68:	431a      	orrs	r2, r3
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	691b      	ldr	r3, [r3, #16]
 800ec6e:	f003 0302 	and.w	r3, r3, #2
 800ec72:	431a      	orrs	r2, r3
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	695b      	ldr	r3, [r3, #20]
 800ec78:	f003 0301 	and.w	r3, r3, #1
 800ec7c:	431a      	orrs	r2, r3
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	699b      	ldr	r3, [r3, #24]
 800ec82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ec86:	431a      	orrs	r2, r3
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	69db      	ldr	r3, [r3, #28]
 800ec8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec90:	431a      	orrs	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a1b      	ldr	r3, [r3, #32]
 800ec96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec9a:	ea42 0103 	orr.w	r1, r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eca2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	681b      	ldr	r3, [r3, #0]
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	699b      	ldr	r3, [r3, #24]
 800ecb2:	0c1b      	lsrs	r3, r3, #16
 800ecb4:	f003 0204 	and.w	r2, r3, #4
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbc:	f003 0310 	and.w	r3, r3, #16
 800ecc0:	431a      	orrs	r2, r3
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc6:	f003 0308 	and.w	r3, r3, #8
 800ecca:	431a      	orrs	r2, r3
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	68db      	ldr	r3, [r3, #12]
 800ecd0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800ecd4:	ea42 0103 	orr.w	r1, r2, r3
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	430a      	orrs	r2, r1
 800ece4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	69da      	ldr	r2, [r3, #28]
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ecf4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800ed04:	2300      	movs	r3, #0
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3710      	adds	r7, #16
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b088      	sub	sp, #32
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	60f8      	str	r0, [r7, #12]
 800ed16:	60b9      	str	r1, [r7, #8]
 800ed18:	603b      	str	r3, [r7, #0]
 800ed1a:	4613      	mov	r3, r2
 800ed1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d101      	bne.n	800ed30 <HAL_SPI_Transmit+0x22>
 800ed2c:	2302      	movs	r3, #2
 800ed2e:	e158      	b.n	800efe2 <HAL_SPI_Transmit+0x2d4>
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	2201      	movs	r2, #1
 800ed34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ed38:	f7fb ffa6 	bl	800ac88 <HAL_GetTick>
 800ed3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ed3e:	88fb      	ldrh	r3, [r7, #6]
 800ed40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ed48:	b2db      	uxtb	r3, r3
 800ed4a:	2b01      	cmp	r3, #1
 800ed4c:	d002      	beq.n	800ed54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ed4e:	2302      	movs	r3, #2
 800ed50:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ed52:	e13d      	b.n	800efd0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <HAL_SPI_Transmit+0x52>
 800ed5a:	88fb      	ldrh	r3, [r7, #6]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d102      	bne.n	800ed66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ed60:	2301      	movs	r3, #1
 800ed62:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ed64:	e134      	b.n	800efd0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2203      	movs	r2, #3
 800ed6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2200      	movs	r2, #0
 800ed72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	68ba      	ldr	r2, [r7, #8]
 800ed78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	88fa      	ldrh	r2, [r7, #6]
 800ed7e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	88fa      	ldrh	r2, [r7, #6]
 800ed84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	2200      	movs	r2, #0
 800ed8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	2200      	movs	r2, #0
 800ed90:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	2200      	movs	r2, #0
 800eda6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800edb0:	d10f      	bne.n	800edd2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	681a      	ldr	r2, [r3, #0]
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800edc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	681a      	ldr	r2, [r3, #0]
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800edd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eddc:	2b40      	cmp	r3, #64	; 0x40
 800edde:	d007      	beq.n	800edf0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	68fb      	ldr	r3, [r7, #12]
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800edee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800edf0:	68fb      	ldr	r3, [r7, #12]
 800edf2:	68db      	ldr	r3, [r3, #12]
 800edf4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800edf8:	d94b      	bls.n	800ee92 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d002      	beq.n	800ee08 <HAL_SPI_Transmit+0xfa>
 800ee02:	8afb      	ldrh	r3, [r7, #22]
 800ee04:	2b01      	cmp	r3, #1
 800ee06:	d13e      	bne.n	800ee86 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee0c:	881a      	ldrh	r2, [r3, #0]
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee18:	1c9a      	adds	r2, r3, #2
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	3b01      	subs	r3, #1
 800ee26:	b29a      	uxth	r2, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800ee2c:	e02b      	b.n	800ee86 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	689b      	ldr	r3, [r3, #8]
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b02      	cmp	r3, #2
 800ee3a:	d112      	bne.n	800ee62 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee40:	881a      	ldrh	r2, [r3, #0]
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4c:	1c9a      	adds	r2, r3, #2
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	3b01      	subs	r3, #1
 800ee5a:	b29a      	uxth	r2, r3
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ee60:	e011      	b.n	800ee86 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee62:	f7fb ff11 	bl	800ac88 <HAL_GetTick>
 800ee66:	4602      	mov	r2, r0
 800ee68:	69bb      	ldr	r3, [r7, #24]
 800ee6a:	1ad3      	subs	r3, r2, r3
 800ee6c:	683a      	ldr	r2, [r7, #0]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d803      	bhi.n	800ee7a <HAL_SPI_Transmit+0x16c>
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee78:	d102      	bne.n	800ee80 <HAL_SPI_Transmit+0x172>
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d102      	bne.n	800ee86 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800ee80:	2303      	movs	r3, #3
 800ee82:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ee84:	e0a4      	b.n	800efd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ee8a:	b29b      	uxth	r3, r3
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d1ce      	bne.n	800ee2e <HAL_SPI_Transmit+0x120>
 800ee90:	e07c      	b.n	800ef8c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	685b      	ldr	r3, [r3, #4]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d002      	beq.n	800eea0 <HAL_SPI_Transmit+0x192>
 800ee9a:	8afb      	ldrh	r3, [r7, #22]
 800ee9c:	2b01      	cmp	r3, #1
 800ee9e:	d170      	bne.n	800ef82 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	2b01      	cmp	r3, #1
 800eea8:	d912      	bls.n	800eed0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeae:	881a      	ldrh	r2, [r3, #0]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeba:	1c9a      	adds	r2, r3, #2
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	3b02      	subs	r3, #2
 800eec8:	b29a      	uxth	r2, r3
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 800eece:	e058      	b.n	800ef82 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	330c      	adds	r3, #12
 800eeda:	7812      	ldrb	r2, [r2, #0]
 800eedc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eee2:	1c5a      	adds	r2, r3, #1
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800eeec:	b29b      	uxth	r3, r3
 800eeee:	3b01      	subs	r3, #1
 800eef0:	b29a      	uxth	r2, r3
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800eef6:	e044      	b.n	800ef82 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800eef8:	68fb      	ldr	r3, [r7, #12]
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
 800eefe:	f003 0302 	and.w	r3, r3, #2
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d12b      	bne.n	800ef5e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef0a:	b29b      	uxth	r3, r3
 800ef0c:	2b01      	cmp	r3, #1
 800ef0e:	d912      	bls.n	800ef36 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef14:	881a      	ldrh	r2, [r3, #0]
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef20:	1c9a      	adds	r2, r3, #2
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef2a:	b29b      	uxth	r3, r3
 800ef2c:	3b02      	subs	r3, #2
 800ef2e:	b29a      	uxth	r2, r3
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef34:	e025      	b.n	800ef82 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	330c      	adds	r3, #12
 800ef40:	7812      	ldrb	r2, [r2, #0]
 800ef42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef48:	1c5a      	adds	r2, r3, #1
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef52:	b29b      	uxth	r3, r3
 800ef54:	3b01      	subs	r3, #1
 800ef56:	b29a      	uxth	r2, r3
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800ef5c:	e011      	b.n	800ef82 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ef5e:	f7fb fe93 	bl	800ac88 <HAL_GetTick>
 800ef62:	4602      	mov	r2, r0
 800ef64:	69bb      	ldr	r3, [r7, #24]
 800ef66:	1ad3      	subs	r3, r2, r3
 800ef68:	683a      	ldr	r2, [r7, #0]
 800ef6a:	429a      	cmp	r2, r3
 800ef6c:	d803      	bhi.n	800ef76 <HAL_SPI_Transmit+0x268>
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef74:	d102      	bne.n	800ef7c <HAL_SPI_Transmit+0x26e>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d102      	bne.n	800ef82 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800ef7c:	2303      	movs	r3, #3
 800ef7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ef80:	e026      	b.n	800efd0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ef86:	b29b      	uxth	r3, r3
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d1b5      	bne.n	800eef8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ef8c:	69ba      	ldr	r2, [r7, #24]
 800ef8e:	6839      	ldr	r1, [r7, #0]
 800ef90:	68f8      	ldr	r0, [r7, #12]
 800ef92:	f000 fce3 	bl	800f95c <SPI_EndRxTxTransaction>
 800ef96:	4603      	mov	r3, r0
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d002      	beq.n	800efa2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	2220      	movs	r2, #32
 800efa0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10a      	bne.n	800efc0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efaa:	2300      	movs	r3, #0
 800efac:	613b      	str	r3, [r7, #16]
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	613b      	str	r3, [r7, #16]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	613b      	str	r3, [r7, #16]
 800efbe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800efc8:	2301      	movs	r3, #1
 800efca:	77fb      	strb	r3, [r7, #31]
 800efcc:	e000      	b.n	800efd0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800efce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2201      	movs	r2, #1
 800efd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800efe0:	7ffb      	ldrb	r3, [r7, #31]
}
 800efe2:	4618      	mov	r0, r3
 800efe4:	3720      	adds	r7, #32
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}

0800efea <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800efea:	b580      	push	{r7, lr}
 800efec:	b088      	sub	sp, #32
 800efee:	af02      	add	r7, sp, #8
 800eff0:	60f8      	str	r0, [r7, #12]
 800eff2:	60b9      	str	r1, [r7, #8]
 800eff4:	603b      	str	r3, [r7, #0]
 800eff6:	4613      	mov	r3, r2
 800eff8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800effa:	2300      	movs	r3, #0
 800effc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	685b      	ldr	r3, [r3, #4]
 800f002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f006:	d112      	bne.n	800f02e <HAL_SPI_Receive+0x44>
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	689b      	ldr	r3, [r3, #8]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	d10e      	bne.n	800f02e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	2204      	movs	r2, #4
 800f014:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f018:	88fa      	ldrh	r2, [r7, #6]
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	9300      	str	r3, [sp, #0]
 800f01e:	4613      	mov	r3, r2
 800f020:	68ba      	ldr	r2, [r7, #8]
 800f022:	68b9      	ldr	r1, [r7, #8]
 800f024:	68f8      	ldr	r0, [r7, #12]
 800f026:	f000 f910 	bl	800f24a <HAL_SPI_TransmitReceive>
 800f02a:	4603      	mov	r3, r0
 800f02c:	e109      	b.n	800f242 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f034:	2b01      	cmp	r3, #1
 800f036:	d101      	bne.n	800f03c <HAL_SPI_Receive+0x52>
 800f038:	2302      	movs	r3, #2
 800f03a:	e102      	b.n	800f242 <HAL_SPI_Receive+0x258>
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2201      	movs	r2, #1
 800f040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f044:	f7fb fe20 	bl	800ac88 <HAL_GetTick>
 800f048:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f050:	b2db      	uxtb	r3, r3
 800f052:	2b01      	cmp	r3, #1
 800f054:	d002      	beq.n	800f05c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800f056:	2302      	movs	r3, #2
 800f058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f05a:	e0e9      	b.n	800f230 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d002      	beq.n	800f068 <HAL_SPI_Receive+0x7e>
 800f062:	88fb      	ldrh	r3, [r7, #6]
 800f064:	2b00      	cmp	r3, #0
 800f066:	d102      	bne.n	800f06e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800f068:	2301      	movs	r3, #1
 800f06a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800f06c:	e0e0      	b.n	800f230 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	2204      	movs	r2, #4
 800f072:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2200      	movs	r2, #0
 800f07a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	68ba      	ldr	r2, [r7, #8]
 800f080:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	88fa      	ldrh	r2, [r7, #6]
 800f086:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	88fa      	ldrh	r2, [r7, #6]
 800f08e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	2200      	movs	r2, #0
 800f096:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800f098:	68fb      	ldr	r3, [r7, #12]
 800f09a:	2200      	movs	r2, #0
 800f09c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	2200      	movs	r2, #0
 800f0a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	68db      	ldr	r3, [r3, #12]
 800f0b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f0b8:	d908      	bls.n	800f0cc <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	685a      	ldr	r2, [r3, #4]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f0c8:	605a      	str	r2, [r3, #4]
 800f0ca:	e007      	b.n	800f0dc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	685a      	ldr	r2, [r3, #4]
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f0da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f0e4:	d10f      	bne.n	800f106 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	68fb      	ldr	r3, [r7, #12]
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f0f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	681a      	ldr	r2, [r3, #0]
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	681b      	ldr	r3, [r3, #0]
 800f100:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f104:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f110:	2b40      	cmp	r3, #64	; 0x40
 800f112:	d007      	beq.n	800f124 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	681a      	ldr	r2, [r3, #0]
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f122:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	68db      	ldr	r3, [r3, #12]
 800f128:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f12c:	d867      	bhi.n	800f1fe <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800f12e:	e030      	b.n	800f192 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	689b      	ldr	r3, [r3, #8]
 800f136:	f003 0301 	and.w	r3, r3, #1
 800f13a:	2b01      	cmp	r3, #1
 800f13c:	d117      	bne.n	800f16e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f103 020c 	add.w	r2, r3, #12
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f14a:	7812      	ldrb	r2, [r2, #0]
 800f14c:	b2d2      	uxtb	r2, r2
 800f14e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f154:	1c5a      	adds	r2, r3, #1
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f160:	b29b      	uxth	r3, r3
 800f162:	3b01      	subs	r3, #1
 800f164:	b29a      	uxth	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f16c:	e011      	b.n	800f192 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f16e:	f7fb fd8b 	bl	800ac88 <HAL_GetTick>
 800f172:	4602      	mov	r2, r0
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	1ad3      	subs	r3, r2, r3
 800f178:	683a      	ldr	r2, [r7, #0]
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d803      	bhi.n	800f186 <HAL_SPI_Receive+0x19c>
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f184:	d102      	bne.n	800f18c <HAL_SPI_Receive+0x1a2>
 800f186:	683b      	ldr	r3, [r7, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d102      	bne.n	800f192 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800f18c:	2303      	movs	r3, #3
 800f18e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f190:	e04e      	b.n	800f230 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f198:	b29b      	uxth	r3, r3
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d1c8      	bne.n	800f130 <HAL_SPI_Receive+0x146>
 800f19e:	e034      	b.n	800f20a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	f003 0301 	and.w	r3, r3, #1
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d115      	bne.n	800f1da <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	68da      	ldr	r2, [r3, #12]
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1b8:	b292      	uxth	r2, r2
 800f1ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1c0:	1c9a      	adds	r2, r3, #2
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	b29a      	uxth	r2, r3
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800f1d8:	e011      	b.n	800f1fe <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f1da:	f7fb fd55 	bl	800ac88 <HAL_GetTick>
 800f1de:	4602      	mov	r2, r0
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	1ad3      	subs	r3, r2, r3
 800f1e4:	683a      	ldr	r2, [r7, #0]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d803      	bhi.n	800f1f2 <HAL_SPI_Receive+0x208>
 800f1ea:	683b      	ldr	r3, [r7, #0]
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1f0:	d102      	bne.n	800f1f8 <HAL_SPI_Receive+0x20e>
 800f1f2:	683b      	ldr	r3, [r7, #0]
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d102      	bne.n	800f1fe <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	75fb      	strb	r3, [r7, #23]
          goto error;
 800f1fc:	e018      	b.n	800f230 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f204:	b29b      	uxth	r3, r3
 800f206:	2b00      	cmp	r3, #0
 800f208:	d1ca      	bne.n	800f1a0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f20a:	693a      	ldr	r2, [r7, #16]
 800f20c:	6839      	ldr	r1, [r7, #0]
 800f20e:	68f8      	ldr	r0, [r7, #12]
 800f210:	f000 fb4c 	bl	800f8ac <SPI_EndRxTransaction>
 800f214:	4603      	mov	r3, r0
 800f216:	2b00      	cmp	r3, #0
 800f218:	d002      	beq.n	800f220 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	2220      	movs	r2, #32
 800f21e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f224:	2b00      	cmp	r3, #0
 800f226:	d002      	beq.n	800f22e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800f228:	2301      	movs	r3, #1
 800f22a:	75fb      	strb	r3, [r7, #23]
 800f22c:	e000      	b.n	800f230 <HAL_SPI_Receive+0x246>
  }

error :
 800f22e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	2200      	movs	r2, #0
 800f23c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f240:	7dfb      	ldrb	r3, [r7, #23]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3718      	adds	r7, #24
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b08a      	sub	sp, #40	; 0x28
 800f24e:	af00      	add	r7, sp, #0
 800f250:	60f8      	str	r0, [r7, #12]
 800f252:	60b9      	str	r1, [r7, #8]
 800f254:	607a      	str	r2, [r7, #4]
 800f256:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f258:	2301      	movs	r3, #1
 800f25a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800f268:	2b01      	cmp	r3, #1
 800f26a:	d101      	bne.n	800f270 <HAL_SPI_TransmitReceive+0x26>
 800f26c:	2302      	movs	r3, #2
 800f26e:	e1fb      	b.n	800f668 <HAL_SPI_TransmitReceive+0x41e>
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2201      	movs	r2, #1
 800f274:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f278:	f7fb fd06 	bl	800ac88 <HAL_GetTick>
 800f27c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f284:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800f28c:	887b      	ldrh	r3, [r7, #2]
 800f28e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800f290:	887b      	ldrh	r3, [r7, #2]
 800f292:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f294:	7efb      	ldrb	r3, [r7, #27]
 800f296:	2b01      	cmp	r3, #1
 800f298:	d00e      	beq.n	800f2b8 <HAL_SPI_TransmitReceive+0x6e>
 800f29a:	697b      	ldr	r3, [r7, #20]
 800f29c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f2a0:	d106      	bne.n	800f2b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	689b      	ldr	r3, [r3, #8]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d102      	bne.n	800f2b0 <HAL_SPI_TransmitReceive+0x66>
 800f2aa:	7efb      	ldrb	r3, [r7, #27]
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d003      	beq.n	800f2b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800f2b0:	2302      	movs	r3, #2
 800f2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f2b6:	e1cd      	b.n	800f654 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d005      	beq.n	800f2ca <HAL_SPI_TransmitReceive+0x80>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <HAL_SPI_TransmitReceive+0x80>
 800f2c4:	887b      	ldrh	r3, [r7, #2]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d103      	bne.n	800f2d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800f2d0:	e1c0      	b.n	800f654 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b04      	cmp	r3, #4
 800f2dc:	d003      	beq.n	800f2e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	2205      	movs	r2, #5
 800f2e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	887a      	ldrh	r2, [r7, #2]
 800f2f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	887a      	ldrh	r2, [r7, #2]
 800f2fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	68ba      	ldr	r2, [r7, #8]
 800f306:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	887a      	ldrh	r2, [r7, #2]
 800f30c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	887a      	ldrh	r2, [r7, #2]
 800f312:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	2200      	movs	r2, #0
 800f318:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2200      	movs	r2, #0
 800f31e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f328:	d802      	bhi.n	800f330 <HAL_SPI_TransmitReceive+0xe6>
 800f32a:	8a3b      	ldrh	r3, [r7, #16]
 800f32c:	2b01      	cmp	r3, #1
 800f32e:	d908      	bls.n	800f342 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685a      	ldr	r2, [r3, #4]
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f33e:	605a      	str	r2, [r3, #4]
 800f340:	e007      	b.n	800f352 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f350:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f35c:	2b40      	cmp	r3, #64	; 0x40
 800f35e:	d007      	beq.n	800f370 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	681a      	ldr	r2, [r3, #0]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f36e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800f378:	d97c      	bls.n	800f474 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <HAL_SPI_TransmitReceive+0x13e>
 800f382:	8a7b      	ldrh	r3, [r7, #18]
 800f384:	2b01      	cmp	r3, #1
 800f386:	d169      	bne.n	800f45c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f38c:	881a      	ldrh	r2, [r3, #0]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f398:	1c9a      	adds	r2, r3, #2
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	3b01      	subs	r3, #1
 800f3a6:	b29a      	uxth	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f3ac:	e056      	b.n	800f45c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	681b      	ldr	r3, [r3, #0]
 800f3b2:	689b      	ldr	r3, [r3, #8]
 800f3b4:	f003 0302 	and.w	r3, r3, #2
 800f3b8:	2b02      	cmp	r3, #2
 800f3ba:	d11b      	bne.n	800f3f4 <HAL_SPI_TransmitReceive+0x1aa>
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3c0:	b29b      	uxth	r3, r3
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d016      	beq.n	800f3f4 <HAL_SPI_TransmitReceive+0x1aa>
 800f3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d113      	bne.n	800f3f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3d0:	881a      	ldrh	r2, [r3, #0]
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3dc:	1c9a      	adds	r2, r3, #2
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	3b01      	subs	r3, #1
 800f3ea:	b29a      	uxth	r2, r3
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	689b      	ldr	r3, [r3, #8]
 800f3fa:	f003 0301 	and.w	r3, r3, #1
 800f3fe:	2b01      	cmp	r3, #1
 800f400:	d11c      	bne.n	800f43c <HAL_SPI_TransmitReceive+0x1f2>
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f408:	b29b      	uxth	r3, r3
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d016      	beq.n	800f43c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	68da      	ldr	r2, [r3, #12]
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f418:	b292      	uxth	r2, r2
 800f41a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f420:	1c9a      	adds	r2, r3, #2
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	3b01      	subs	r3, #1
 800f430:	b29a      	uxth	r2, r3
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f438:	2301      	movs	r3, #1
 800f43a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f43c:	f7fb fc24 	bl	800ac88 <HAL_GetTick>
 800f440:	4602      	mov	r2, r0
 800f442:	69fb      	ldr	r3, [r7, #28]
 800f444:	1ad3      	subs	r3, r2, r3
 800f446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f448:	429a      	cmp	r2, r3
 800f44a:	d807      	bhi.n	800f45c <HAL_SPI_TransmitReceive+0x212>
 800f44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f452:	d003      	beq.n	800f45c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800f454:	2303      	movs	r3, #3
 800f456:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f45a:	e0fb      	b.n	800f654 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f460:	b29b      	uxth	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d1a3      	bne.n	800f3ae <HAL_SPI_TransmitReceive+0x164>
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d19d      	bne.n	800f3ae <HAL_SPI_TransmitReceive+0x164>
 800f472:	e0df      	b.n	800f634 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	685b      	ldr	r3, [r3, #4]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d003      	beq.n	800f484 <HAL_SPI_TransmitReceive+0x23a>
 800f47c:	8a7b      	ldrh	r3, [r7, #18]
 800f47e:	2b01      	cmp	r3, #1
 800f480:	f040 80cb 	bne.w	800f61a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f488:	b29b      	uxth	r3, r3
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d912      	bls.n	800f4b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f492:	881a      	ldrh	r2, [r3, #0]
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f49e:	1c9a      	adds	r2, r3, #2
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	3b02      	subs	r3, #2
 800f4ac:	b29a      	uxth	r2, r3
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f4b2:	e0b2      	b.n	800f61a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	330c      	adds	r3, #12
 800f4be:	7812      	ldrb	r2, [r2, #0]
 800f4c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4c6:	1c5a      	adds	r2, r3, #1
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f4da:	e09e      	b.n	800f61a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	689b      	ldr	r3, [r3, #8]
 800f4e2:	f003 0302 	and.w	r3, r3, #2
 800f4e6:	2b02      	cmp	r3, #2
 800f4e8:	d134      	bne.n	800f554 <HAL_SPI_TransmitReceive+0x30a>
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4ee:	b29b      	uxth	r3, r3
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d02f      	beq.n	800f554 <HAL_SPI_TransmitReceive+0x30a>
 800f4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f6:	2b01      	cmp	r3, #1
 800f4f8:	d12c      	bne.n	800f554 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f4fe:	b29b      	uxth	r3, r3
 800f500:	2b01      	cmp	r3, #1
 800f502:	d912      	bls.n	800f52a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f508:	881a      	ldrh	r2, [r3, #0]
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f514:	1c9a      	adds	r2, r3, #2
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f51e:	b29b      	uxth	r3, r3
 800f520:	3b02      	subs	r3, #2
 800f522:	b29a      	uxth	r2, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	87da      	strh	r2, [r3, #62]	; 0x3e
 800f528:	e012      	b.n	800f550 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	681b      	ldr	r3, [r3, #0]
 800f532:	330c      	adds	r3, #12
 800f534:	7812      	ldrb	r2, [r2, #0]
 800f536:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f538:	68fb      	ldr	r3, [r7, #12]
 800f53a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f53c:	1c5a      	adds	r2, r3, #1
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f546:	b29b      	uxth	r3, r3
 800f548:	3b01      	subs	r3, #1
 800f54a:	b29a      	uxth	r2, r3
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f550:	2300      	movs	r3, #0
 800f552:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	681b      	ldr	r3, [r3, #0]
 800f558:	689b      	ldr	r3, [r3, #8]
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	2b01      	cmp	r3, #1
 800f560:	d148      	bne.n	800f5f4 <HAL_SPI_TransmitReceive+0x3aa>
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f568:	b29b      	uxth	r3, r3
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d042      	beq.n	800f5f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f574:	b29b      	uxth	r3, r3
 800f576:	2b01      	cmp	r3, #1
 800f578:	d923      	bls.n	800f5c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	68da      	ldr	r2, [r3, #12]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f584:	b292      	uxth	r2, r2
 800f586:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f58c:	1c9a      	adds	r2, r3, #2
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f598:	b29b      	uxth	r3, r3
 800f59a:	3b02      	subs	r3, #2
 800f59c:	b29a      	uxth	r2, r3
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5aa:	b29b      	uxth	r3, r3
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d81f      	bhi.n	800f5f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685a      	ldr	r2, [r3, #4]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f5be:	605a      	str	r2, [r3, #4]
 800f5c0:	e016      	b.n	800f5f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f5c2:	68fb      	ldr	r3, [r7, #12]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	f103 020c 	add.w	r2, r3, #12
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5ce:	7812      	ldrb	r2, [r2, #0]
 800f5d0:	b2d2      	uxtb	r2, r2
 800f5d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5d8:	1c5a      	adds	r2, r3, #1
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f5e4:	b29b      	uxth	r3, r3
 800f5e6:	3b01      	subs	r3, #1
 800f5e8:	b29a      	uxth	r2, r3
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f5f4:	f7fb fb48 	bl	800ac88 <HAL_GetTick>
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	69fb      	ldr	r3, [r7, #28]
 800f5fc:	1ad3      	subs	r3, r2, r3
 800f5fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f600:	429a      	cmp	r2, r3
 800f602:	d803      	bhi.n	800f60c <HAL_SPI_TransmitReceive+0x3c2>
 800f604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f60a:	d102      	bne.n	800f612 <HAL_SPI_TransmitReceive+0x3c8>
 800f60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d103      	bne.n	800f61a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800f612:	2303      	movs	r3, #3
 800f614:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800f618:	e01c      	b.n	800f654 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800f61e:	b29b      	uxth	r3, r3
 800f620:	2b00      	cmp	r3, #0
 800f622:	f47f af5b 	bne.w	800f4dc <HAL_SPI_TransmitReceive+0x292>
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	2b00      	cmp	r3, #0
 800f630:	f47f af54 	bne.w	800f4dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f634:	69fa      	ldr	r2, [r7, #28]
 800f636:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f638:	68f8      	ldr	r0, [r7, #12]
 800f63a:	f000 f98f 	bl	800f95c <SPI_EndRxTxTransaction>
 800f63e:	4603      	mov	r3, r0
 800f640:	2b00      	cmp	r3, #0
 800f642:	d006      	beq.n	800f652 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800f644:	2301      	movs	r3, #1
 800f646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	2220      	movs	r2, #32
 800f64e:	661a      	str	r2, [r3, #96]	; 0x60
 800f650:	e000      	b.n	800f654 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800f652:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	2201      	movs	r2, #1
 800f658:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	2200      	movs	r2, #0
 800f660:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800f664:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800f668:	4618      	mov	r0, r3
 800f66a:	3728      	adds	r7, #40	; 0x28
 800f66c:	46bd      	mov	sp, r7
 800f66e:	bd80      	pop	{r7, pc}

0800f670 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b088      	sub	sp, #32
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	603b      	str	r3, [r7, #0]
 800f67c:	4613      	mov	r3, r2
 800f67e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f680:	f7fb fb02 	bl	800ac88 <HAL_GetTick>
 800f684:	4602      	mov	r2, r0
 800f686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f688:	1a9b      	subs	r3, r3, r2
 800f68a:	683a      	ldr	r2, [r7, #0]
 800f68c:	4413      	add	r3, r2
 800f68e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f690:	f7fb fafa 	bl	800ac88 <HAL_GetTick>
 800f694:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f696:	4b39      	ldr	r3, [pc, #228]	; (800f77c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	015b      	lsls	r3, r3, #5
 800f69c:	0d1b      	lsrs	r3, r3, #20
 800f69e:	69fa      	ldr	r2, [r7, #28]
 800f6a0:	fb02 f303 	mul.w	r3, r2, r3
 800f6a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f6a6:	e054      	b.n	800f752 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ae:	d050      	beq.n	800f752 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f6b0:	f7fb faea 	bl	800ac88 <HAL_GetTick>
 800f6b4:	4602      	mov	r2, r0
 800f6b6:	69bb      	ldr	r3, [r7, #24]
 800f6b8:	1ad3      	subs	r3, r2, r3
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	d902      	bls.n	800f6c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d13d      	bne.n	800f742 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f6d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f6de:	d111      	bne.n	800f704 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	689b      	ldr	r3, [r3, #8]
 800f6e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f6e8:	d004      	beq.n	800f6f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	689b      	ldr	r3, [r3, #8]
 800f6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f6f2:	d107      	bne.n	800f704 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f702:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f708:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f70c:	d10f      	bne.n	800f72e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	681a      	ldr	r2, [r3, #0]
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f71c:	601a      	str	r2, [r3, #0]
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	681a      	ldr	r2, [r3, #0]
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f72c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2201      	movs	r2, #1
 800f732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f73e:	2303      	movs	r3, #3
 800f740:	e017      	b.n	800f772 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f742:	697b      	ldr	r3, [r7, #20]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d101      	bne.n	800f74c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f748:	2300      	movs	r3, #0
 800f74a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f74c:	697b      	ldr	r3, [r7, #20]
 800f74e:	3b01      	subs	r3, #1
 800f750:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	689a      	ldr	r2, [r3, #8]
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	4013      	ands	r3, r2
 800f75c:	68ba      	ldr	r2, [r7, #8]
 800f75e:	429a      	cmp	r2, r3
 800f760:	bf0c      	ite	eq
 800f762:	2301      	moveq	r3, #1
 800f764:	2300      	movne	r3, #0
 800f766:	b2db      	uxtb	r3, r3
 800f768:	461a      	mov	r2, r3
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	429a      	cmp	r2, r3
 800f76e:	d19b      	bne.n	800f6a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f770:	2300      	movs	r3, #0
}
 800f772:	4618      	mov	r0, r3
 800f774:	3720      	adds	r7, #32
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20000000 	.word	0x20000000

0800f780 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b08a      	sub	sp, #40	; 0x28
 800f784:	af00      	add	r7, sp, #0
 800f786:	60f8      	str	r0, [r7, #12]
 800f788:	60b9      	str	r1, [r7, #8]
 800f78a:	607a      	str	r2, [r7, #4]
 800f78c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f78e:	2300      	movs	r3, #0
 800f790:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f792:	f7fb fa79 	bl	800ac88 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	683a      	ldr	r2, [r7, #0]
 800f79e:	4413      	add	r3, r2
 800f7a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800f7a2:	f7fb fa71 	bl	800ac88 <HAL_GetTick>
 800f7a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	330c      	adds	r3, #12
 800f7ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f7b0:	4b3d      	ldr	r3, [pc, #244]	; (800f8a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f7b2:	681a      	ldr	r2, [r3, #0]
 800f7b4:	4613      	mov	r3, r2
 800f7b6:	009b      	lsls	r3, r3, #2
 800f7b8:	4413      	add	r3, r2
 800f7ba:	00da      	lsls	r2, r3, #3
 800f7bc:	1ad3      	subs	r3, r2, r3
 800f7be:	0d1b      	lsrs	r3, r3, #20
 800f7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c2:	fb02 f303 	mul.w	r3, r2, r3
 800f7c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f7c8:	e060      	b.n	800f88c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f7d0:	d107      	bne.n	800f7e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d104      	bne.n	800f7e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f7d8:	69fb      	ldr	r3, [r7, #28]
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	b2db      	uxtb	r3, r3
 800f7de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f7e2:	683b      	ldr	r3, [r7, #0]
 800f7e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7e8:	d050      	beq.n	800f88c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f7ea:	f7fb fa4d 	bl	800ac88 <HAL_GetTick>
 800f7ee:	4602      	mov	r2, r0
 800f7f0:	6a3b      	ldr	r3, [r7, #32]
 800f7f2:	1ad3      	subs	r3, r2, r3
 800f7f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7f6:	429a      	cmp	r2, r3
 800f7f8:	d902      	bls.n	800f800 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d13d      	bne.n	800f87c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800f80e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f818:	d111      	bne.n	800f83e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	689b      	ldr	r3, [r3, #8]
 800f81e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f822:	d004      	beq.n	800f82e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f824:	68fb      	ldr	r3, [r7, #12]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f82c:	d107      	bne.n	800f83e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f83c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f842:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f846:	d10f      	bne.n	800f868 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	681a      	ldr	r2, [r3, #0]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	681a      	ldr	r2, [r3, #0]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f866:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2201      	movs	r2, #1
 800f86c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	2200      	movs	r2, #0
 800f874:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800f878:	2303      	movs	r3, #3
 800f87a:	e010      	b.n	800f89e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d101      	bne.n	800f886 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f882:	2300      	movs	r3, #0
 800f884:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	3b01      	subs	r3, #1
 800f88a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	689a      	ldr	r2, [r3, #8]
 800f892:	68bb      	ldr	r3, [r7, #8]
 800f894:	4013      	ands	r3, r2
 800f896:	687a      	ldr	r2, [r7, #4]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d196      	bne.n	800f7ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f89c:	2300      	movs	r3, #0
}
 800f89e:	4618      	mov	r0, r3
 800f8a0:	3728      	adds	r7, #40	; 0x28
 800f8a2:	46bd      	mov	sp, r7
 800f8a4:	bd80      	pop	{r7, pc}
 800f8a6:	bf00      	nop
 800f8a8:	20000000 	.word	0x20000000

0800f8ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b086      	sub	sp, #24
 800f8b0:	af02      	add	r7, sp, #8
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	685b      	ldr	r3, [r3, #4]
 800f8bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f8c0:	d111      	bne.n	800f8e6 <SPI_EndRxTransaction+0x3a>
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	689b      	ldr	r3, [r3, #8]
 800f8c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f8ca:	d004      	beq.n	800f8d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	689b      	ldr	r3, [r3, #8]
 800f8d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f8d4:	d107      	bne.n	800f8e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	681a      	ldr	r2, [r3, #0]
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f8e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	9300      	str	r3, [sp, #0]
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2200      	movs	r2, #0
 800f8ee:	2180      	movs	r1, #128	; 0x80
 800f8f0:	68f8      	ldr	r0, [r7, #12]
 800f8f2:	f7ff febd 	bl	800f670 <SPI_WaitFlagStateUntilTimeout>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d007      	beq.n	800f90c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f900:	f043 0220 	orr.w	r2, r3, #32
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f908:	2303      	movs	r3, #3
 800f90a:	e023      	b.n	800f954 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800f914:	d11d      	bne.n	800f952 <SPI_EndRxTransaction+0xa6>
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f91e:	d004      	beq.n	800f92a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	689b      	ldr	r3, [r3, #8]
 800f924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f928:	d113      	bne.n	800f952 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	9300      	str	r3, [sp, #0]
 800f92e:	68bb      	ldr	r3, [r7, #8]
 800f930:	2200      	movs	r2, #0
 800f932:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f936:	68f8      	ldr	r0, [r7, #12]
 800f938:	f7ff ff22 	bl	800f780 <SPI_WaitFifoStateUntilTimeout>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d007      	beq.n	800f952 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f946:	f043 0220 	orr.w	r2, r3, #32
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800f94e:	2303      	movs	r3, #3
 800f950:	e000      	b.n	800f954 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800f952:	2300      	movs	r3, #0
}
 800f954:	4618      	mov	r0, r3
 800f956:	3710      	adds	r7, #16
 800f958:	46bd      	mov	sp, r7
 800f95a:	bd80      	pop	{r7, pc}

0800f95c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af02      	add	r7, sp, #8
 800f962:	60f8      	str	r0, [r7, #12]
 800f964:	60b9      	str	r1, [r7, #8]
 800f966:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	9300      	str	r3, [sp, #0]
 800f96c:	68bb      	ldr	r3, [r7, #8]
 800f96e:	2200      	movs	r2, #0
 800f970:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800f974:	68f8      	ldr	r0, [r7, #12]
 800f976:	f7ff ff03 	bl	800f780 <SPI_WaitFifoStateUntilTimeout>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d007      	beq.n	800f990 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f984:	f043 0220 	orr.w	r2, r3, #32
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f98c:	2303      	movs	r3, #3
 800f98e:	e027      	b.n	800f9e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	9300      	str	r3, [sp, #0]
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	2200      	movs	r2, #0
 800f998:	2180      	movs	r1, #128	; 0x80
 800f99a:	68f8      	ldr	r0, [r7, #12]
 800f99c:	f7ff fe68 	bl	800f670 <SPI_WaitFlagStateUntilTimeout>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d007      	beq.n	800f9b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9aa:	f043 0220 	orr.w	r2, r3, #32
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f9b2:	2303      	movs	r3, #3
 800f9b4:	e014      	b.n	800f9e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	2200      	movs	r2, #0
 800f9be:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f7ff fedc 	bl	800f780 <SPI_WaitFifoStateUntilTimeout>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d007      	beq.n	800f9de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800f9d2:	f043 0220 	orr.w	r2, r3, #32
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800f9da:	2303      	movs	r3, #3
 800f9dc:	e000      	b.n	800f9e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800f9de:	2300      	movs	r3, #0
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e049      	b.n	800fa8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa00:	b2db      	uxtb	r3, r3
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d106      	bne.n	800fa14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	2200      	movs	r2, #0
 800fa0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7fa ff40 	bl	800a894 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	2202      	movs	r2, #2
 800fa18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681a      	ldr	r2, [r3, #0]
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	3304      	adds	r3, #4
 800fa24:	4619      	mov	r1, r3
 800fa26:	4610      	mov	r0, r2
 800fa28:	f000 fd6c 	bl	8010504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2201      	movs	r2, #1
 800fa30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	2201      	movs	r2, #1
 800fa38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	2201      	movs	r2, #1
 800fa48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	2201      	movs	r2, #1
 800fa50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2201      	movs	r2, #1
 800fa58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	2201      	movs	r2, #1
 800fa68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	2201      	movs	r2, #1
 800fa70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2201      	movs	r2, #1
 800fa78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2201      	movs	r2, #1
 800fa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3708      	adds	r7, #8
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
	...

0800fa98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800fa98:	b480      	push	{r7}
 800fa9a:	b085      	sub	sp, #20
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800faa6:	b2db      	uxtb	r3, r3
 800faa8:	2b01      	cmp	r3, #1
 800faaa:	d001      	beq.n	800fab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800faac:	2301      	movs	r3, #1
 800faae:	e04f      	b.n	800fb50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2202      	movs	r2, #2
 800fab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	68da      	ldr	r2, [r3, #12]
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	f042 0201 	orr.w	r2, r2, #1
 800fac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	681b      	ldr	r3, [r3, #0]
 800facc:	4a23      	ldr	r2, [pc, #140]	; (800fb5c <HAL_TIM_Base_Start_IT+0xc4>)
 800face:	4293      	cmp	r3, r2
 800fad0:	d01d      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fada:	d018      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a1f      	ldr	r2, [pc, #124]	; (800fb60 <HAL_TIM_Base_Start_IT+0xc8>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d013      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	4a1e      	ldr	r2, [pc, #120]	; (800fb64 <HAL_TIM_Base_Start_IT+0xcc>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d00e      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a1c      	ldr	r2, [pc, #112]	; (800fb68 <HAL_TIM_Base_Start_IT+0xd0>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d009      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a1b      	ldr	r2, [pc, #108]	; (800fb6c <HAL_TIM_Base_Start_IT+0xd4>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d004      	beq.n	800fb0e <HAL_TIM_Base_Start_IT+0x76>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a19      	ldr	r2, [pc, #100]	; (800fb70 <HAL_TIM_Base_Start_IT+0xd8>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d115      	bne.n	800fb3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	689a      	ldr	r2, [r3, #8]
 800fb14:	4b17      	ldr	r3, [pc, #92]	; (800fb74 <HAL_TIM_Base_Start_IT+0xdc>)
 800fb16:	4013      	ands	r3, r2
 800fb18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	2b06      	cmp	r3, #6
 800fb1e:	d015      	beq.n	800fb4c <HAL_TIM_Base_Start_IT+0xb4>
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb26:	d011      	beq.n	800fb4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	f042 0201 	orr.w	r2, r2, #1
 800fb36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb38:	e008      	b.n	800fb4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	681a      	ldr	r2, [r3, #0]
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	f042 0201 	orr.w	r2, r2, #1
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	e000      	b.n	800fb4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb4e:	2300      	movs	r3, #0
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3714      	adds	r7, #20
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr
 800fb5c:	40012c00 	.word	0x40012c00
 800fb60:	40000400 	.word	0x40000400
 800fb64:	40000800 	.word	0x40000800
 800fb68:	40013400 	.word	0x40013400
 800fb6c:	40014000 	.word	0x40014000
 800fb70:	40015000 	.word	0x40015000
 800fb74:	00010007 	.word	0x00010007

0800fb78 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d101      	bne.n	800fb8a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fb86:	2301      	movs	r3, #1
 800fb88:	e049      	b.n	800fc1e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fb90:	b2db      	uxtb	r3, r3
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d106      	bne.n	800fba4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	f7fa feb2 	bl	800a908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2202      	movs	r2, #2
 800fba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681a      	ldr	r2, [r3, #0]
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	f000 fca4 	bl	8010504 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	2201      	movs	r2, #1
 800fbc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2201      	movs	r2, #1
 800fbc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2201      	movs	r2, #1
 800fbd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	2201      	movs	r2, #1
 800fbd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2201      	movs	r2, #1
 800fbe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	2201      	movs	r2, #1
 800fbf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	2201      	movs	r2, #1
 800fc08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fc1c:	2300      	movs	r3, #0
}
 800fc1e:	4618      	mov	r0, r3
 800fc20:	3708      	adds	r7, #8
 800fc22:	46bd      	mov	sp, r7
 800fc24:	bd80      	pop	{r7, pc}
	...

0800fc28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
 800fc30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fc32:	683b      	ldr	r3, [r7, #0]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d109      	bne.n	800fc4c <HAL_TIM_PWM_Start+0x24>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	2b01      	cmp	r3, #1
 800fc42:	bf14      	ite	ne
 800fc44:	2301      	movne	r3, #1
 800fc46:	2300      	moveq	r3, #0
 800fc48:	b2db      	uxtb	r3, r3
 800fc4a:	e03c      	b.n	800fcc6 <HAL_TIM_PWM_Start+0x9e>
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	2b04      	cmp	r3, #4
 800fc50:	d109      	bne.n	800fc66 <HAL_TIM_PWM_Start+0x3e>
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fc58:	b2db      	uxtb	r3, r3
 800fc5a:	2b01      	cmp	r3, #1
 800fc5c:	bf14      	ite	ne
 800fc5e:	2301      	movne	r3, #1
 800fc60:	2300      	moveq	r3, #0
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	e02f      	b.n	800fcc6 <HAL_TIM_PWM_Start+0x9e>
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	2b08      	cmp	r3, #8
 800fc6a:	d109      	bne.n	800fc80 <HAL_TIM_PWM_Start+0x58>
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fc72:	b2db      	uxtb	r3, r3
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	bf14      	ite	ne
 800fc78:	2301      	movne	r3, #1
 800fc7a:	2300      	moveq	r3, #0
 800fc7c:	b2db      	uxtb	r3, r3
 800fc7e:	e022      	b.n	800fcc6 <HAL_TIM_PWM_Start+0x9e>
 800fc80:	683b      	ldr	r3, [r7, #0]
 800fc82:	2b0c      	cmp	r3, #12
 800fc84:	d109      	bne.n	800fc9a <HAL_TIM_PWM_Start+0x72>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fc8c:	b2db      	uxtb	r3, r3
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	bf14      	ite	ne
 800fc92:	2301      	movne	r3, #1
 800fc94:	2300      	moveq	r3, #0
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	e015      	b.n	800fcc6 <HAL_TIM_PWM_Start+0x9e>
 800fc9a:	683b      	ldr	r3, [r7, #0]
 800fc9c:	2b10      	cmp	r3, #16
 800fc9e:	d109      	bne.n	800fcb4 <HAL_TIM_PWM_Start+0x8c>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fca6:	b2db      	uxtb	r3, r3
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	bf14      	ite	ne
 800fcac:	2301      	movne	r3, #1
 800fcae:	2300      	moveq	r3, #0
 800fcb0:	b2db      	uxtb	r3, r3
 800fcb2:	e008      	b.n	800fcc6 <HAL_TIM_PWM_Start+0x9e>
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fcba:	b2db      	uxtb	r3, r3
 800fcbc:	2b01      	cmp	r3, #1
 800fcbe:	bf14      	ite	ne
 800fcc0:	2301      	movne	r3, #1
 800fcc2:	2300      	moveq	r3, #0
 800fcc4:	b2db      	uxtb	r3, r3
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d001      	beq.n	800fcce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	e0a1      	b.n	800fe12 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d104      	bne.n	800fcde <HAL_TIM_PWM_Start+0xb6>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2202      	movs	r2, #2
 800fcd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fcdc:	e023      	b.n	800fd26 <HAL_TIM_PWM_Start+0xfe>
 800fcde:	683b      	ldr	r3, [r7, #0]
 800fce0:	2b04      	cmp	r3, #4
 800fce2:	d104      	bne.n	800fcee <HAL_TIM_PWM_Start+0xc6>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2202      	movs	r2, #2
 800fce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fcec:	e01b      	b.n	800fd26 <HAL_TIM_PWM_Start+0xfe>
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	2b08      	cmp	r3, #8
 800fcf2:	d104      	bne.n	800fcfe <HAL_TIM_PWM_Start+0xd6>
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2202      	movs	r2, #2
 800fcf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fcfc:	e013      	b.n	800fd26 <HAL_TIM_PWM_Start+0xfe>
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	2b0c      	cmp	r3, #12
 800fd02:	d104      	bne.n	800fd0e <HAL_TIM_PWM_Start+0xe6>
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2202      	movs	r2, #2
 800fd08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fd0c:	e00b      	b.n	800fd26 <HAL_TIM_PWM_Start+0xfe>
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	2b10      	cmp	r3, #16
 800fd12:	d104      	bne.n	800fd1e <HAL_TIM_PWM_Start+0xf6>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2202      	movs	r2, #2
 800fd18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fd1c:	e003      	b.n	800fd26 <HAL_TIM_PWM_Start+0xfe>
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2202      	movs	r2, #2
 800fd22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	2201      	movs	r2, #1
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f000 ffb0 	bl	8010c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	681b      	ldr	r3, [r3, #0]
 800fd38:	4a38      	ldr	r2, [pc, #224]	; (800fe1c <HAL_TIM_PWM_Start+0x1f4>)
 800fd3a:	4293      	cmp	r3, r2
 800fd3c:	d018      	beq.n	800fd70 <HAL_TIM_PWM_Start+0x148>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	4a37      	ldr	r2, [pc, #220]	; (800fe20 <HAL_TIM_PWM_Start+0x1f8>)
 800fd44:	4293      	cmp	r3, r2
 800fd46:	d013      	beq.n	800fd70 <HAL_TIM_PWM_Start+0x148>
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a35      	ldr	r2, [pc, #212]	; (800fe24 <HAL_TIM_PWM_Start+0x1fc>)
 800fd4e:	4293      	cmp	r3, r2
 800fd50:	d00e      	beq.n	800fd70 <HAL_TIM_PWM_Start+0x148>
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	4a34      	ldr	r2, [pc, #208]	; (800fe28 <HAL_TIM_PWM_Start+0x200>)
 800fd58:	4293      	cmp	r3, r2
 800fd5a:	d009      	beq.n	800fd70 <HAL_TIM_PWM_Start+0x148>
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	4a32      	ldr	r2, [pc, #200]	; (800fe2c <HAL_TIM_PWM_Start+0x204>)
 800fd62:	4293      	cmp	r3, r2
 800fd64:	d004      	beq.n	800fd70 <HAL_TIM_PWM_Start+0x148>
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	4a31      	ldr	r2, [pc, #196]	; (800fe30 <HAL_TIM_PWM_Start+0x208>)
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d101      	bne.n	800fd74 <HAL_TIM_PWM_Start+0x14c>
 800fd70:	2301      	movs	r3, #1
 800fd72:	e000      	b.n	800fd76 <HAL_TIM_PWM_Start+0x14e>
 800fd74:	2300      	movs	r3, #0
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d007      	beq.n	800fd8a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fd88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a23      	ldr	r2, [pc, #140]	; (800fe1c <HAL_TIM_PWM_Start+0x1f4>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d01d      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fd9c:	d018      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	4a24      	ldr	r2, [pc, #144]	; (800fe34 <HAL_TIM_PWM_Start+0x20c>)
 800fda4:	4293      	cmp	r3, r2
 800fda6:	d013      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4a22      	ldr	r2, [pc, #136]	; (800fe38 <HAL_TIM_PWM_Start+0x210>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d00e      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	4a1a      	ldr	r2, [pc, #104]	; (800fe20 <HAL_TIM_PWM_Start+0x1f8>)
 800fdb8:	4293      	cmp	r3, r2
 800fdba:	d009      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	681b      	ldr	r3, [r3, #0]
 800fdc0:	4a18      	ldr	r2, [pc, #96]	; (800fe24 <HAL_TIM_PWM_Start+0x1fc>)
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d004      	beq.n	800fdd0 <HAL_TIM_PWM_Start+0x1a8>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	4a19      	ldr	r2, [pc, #100]	; (800fe30 <HAL_TIM_PWM_Start+0x208>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d115      	bne.n	800fdfc <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	689a      	ldr	r2, [r3, #8]
 800fdd6:	4b19      	ldr	r3, [pc, #100]	; (800fe3c <HAL_TIM_PWM_Start+0x214>)
 800fdd8:	4013      	ands	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b06      	cmp	r3, #6
 800fde0:	d015      	beq.n	800fe0e <HAL_TIM_PWM_Start+0x1e6>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fde8:	d011      	beq.n	800fe0e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	681a      	ldr	r2, [r3, #0]
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	f042 0201 	orr.w	r2, r2, #1
 800fdf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fdfa:	e008      	b.n	800fe0e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	681a      	ldr	r2, [r3, #0]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	f042 0201 	orr.w	r2, r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
 800fe0c:	e000      	b.n	800fe10 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fe0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fe10:	2300      	movs	r3, #0
}
 800fe12:	4618      	mov	r0, r3
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	40012c00 	.word	0x40012c00
 800fe20:	40013400 	.word	0x40013400
 800fe24:	40014000 	.word	0x40014000
 800fe28:	40014400 	.word	0x40014400
 800fe2c:	40014800 	.word	0x40014800
 800fe30:	40015000 	.word	0x40015000
 800fe34:	40000400 	.word	0x40000400
 800fe38:	40000800 	.word	0x40000800
 800fe3c:	00010007 	.word	0x00010007

0800fe40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	6078      	str	r0, [r7, #4]
 800fe48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2200      	movs	r2, #0
 800fe50:	6839      	ldr	r1, [r7, #0]
 800fe52:	4618      	mov	r0, r3
 800fe54:	f000 ff1e 	bl	8010c94 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4a40      	ldr	r2, [pc, #256]	; (800ff60 <HAL_TIM_PWM_Stop+0x120>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d018      	beq.n	800fe94 <HAL_TIM_PWM_Stop+0x54>
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	4a3f      	ldr	r2, [pc, #252]	; (800ff64 <HAL_TIM_PWM_Stop+0x124>)
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d013      	beq.n	800fe94 <HAL_TIM_PWM_Stop+0x54>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	4a3d      	ldr	r2, [pc, #244]	; (800ff68 <HAL_TIM_PWM_Stop+0x128>)
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d00e      	beq.n	800fe94 <HAL_TIM_PWM_Stop+0x54>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a3c      	ldr	r2, [pc, #240]	; (800ff6c <HAL_TIM_PWM_Stop+0x12c>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d009      	beq.n	800fe94 <HAL_TIM_PWM_Stop+0x54>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	4a3a      	ldr	r2, [pc, #232]	; (800ff70 <HAL_TIM_PWM_Stop+0x130>)
 800fe86:	4293      	cmp	r3, r2
 800fe88:	d004      	beq.n	800fe94 <HAL_TIM_PWM_Stop+0x54>
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	4a39      	ldr	r2, [pc, #228]	; (800ff74 <HAL_TIM_PWM_Stop+0x134>)
 800fe90:	4293      	cmp	r3, r2
 800fe92:	d101      	bne.n	800fe98 <HAL_TIM_PWM_Stop+0x58>
 800fe94:	2301      	movs	r3, #1
 800fe96:	e000      	b.n	800fe9a <HAL_TIM_PWM_Stop+0x5a>
 800fe98:	2300      	movs	r3, #0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d017      	beq.n	800fece <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	6a1a      	ldr	r2, [r3, #32]
 800fea4:	f241 1311 	movw	r3, #4369	; 0x1111
 800fea8:	4013      	ands	r3, r2
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d10f      	bne.n	800fece <HAL_TIM_PWM_Stop+0x8e>
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	6a1a      	ldr	r2, [r3, #32]
 800feb4:	f244 4344 	movw	r3, #17476	; 0x4444
 800feb8:	4013      	ands	r3, r2
 800feba:	2b00      	cmp	r3, #0
 800febc:	d107      	bne.n	800fece <HAL_TIM_PWM_Stop+0x8e>
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800fecc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	6a1a      	ldr	r2, [r3, #32]
 800fed4:	f241 1311 	movw	r3, #4369	; 0x1111
 800fed8:	4013      	ands	r3, r2
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d10f      	bne.n	800fefe <HAL_TIM_PWM_Stop+0xbe>
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	6a1a      	ldr	r2, [r3, #32]
 800fee4:	f244 4344 	movw	r3, #17476	; 0x4444
 800fee8:	4013      	ands	r3, r2
 800feea:	2b00      	cmp	r3, #0
 800feec:	d107      	bne.n	800fefe <HAL_TIM_PWM_Stop+0xbe>
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	681a      	ldr	r2, [r3, #0]
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f022 0201 	bic.w	r2, r2, #1
 800fefc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d104      	bne.n	800ff0e <HAL_TIM_PWM_Stop+0xce>
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	2201      	movs	r2, #1
 800ff08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff0c:	e023      	b.n	800ff56 <HAL_TIM_PWM_Stop+0x116>
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	2b04      	cmp	r3, #4
 800ff12:	d104      	bne.n	800ff1e <HAL_TIM_PWM_Stop+0xde>
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2201      	movs	r2, #1
 800ff18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff1c:	e01b      	b.n	800ff56 <HAL_TIM_PWM_Stop+0x116>
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	2b08      	cmp	r3, #8
 800ff22:	d104      	bne.n	800ff2e <HAL_TIM_PWM_Stop+0xee>
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	2201      	movs	r2, #1
 800ff28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff2c:	e013      	b.n	800ff56 <HAL_TIM_PWM_Stop+0x116>
 800ff2e:	683b      	ldr	r3, [r7, #0]
 800ff30:	2b0c      	cmp	r3, #12
 800ff32:	d104      	bne.n	800ff3e <HAL_TIM_PWM_Stop+0xfe>
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	2201      	movs	r2, #1
 800ff38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff3c:	e00b      	b.n	800ff56 <HAL_TIM_PWM_Stop+0x116>
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	2b10      	cmp	r3, #16
 800ff42:	d104      	bne.n	800ff4e <HAL_TIM_PWM_Stop+0x10e>
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	2201      	movs	r2, #1
 800ff48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff4c:	e003      	b.n	800ff56 <HAL_TIM_PWM_Stop+0x116>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2201      	movs	r2, #1
 800ff52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800ff56:	2300      	movs	r3, #0
}
 800ff58:	4618      	mov	r0, r3
 800ff5a:	3708      	adds	r7, #8
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	40012c00 	.word	0x40012c00
 800ff64:	40013400 	.word	0x40013400
 800ff68:	40014000 	.word	0x40014000
 800ff6c:	40014400 	.word	0x40014400
 800ff70:	40014800 	.word	0x40014800
 800ff74:	40015000 	.word	0x40015000

0800ff78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b082      	sub	sp, #8
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	691b      	ldr	r3, [r3, #16]
 800ff86:	f003 0302 	and.w	r3, r3, #2
 800ff8a:	2b02      	cmp	r3, #2
 800ff8c:	d122      	bne.n	800ffd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	681b      	ldr	r3, [r3, #0]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	f003 0302 	and.w	r3, r3, #2
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	d11b      	bne.n	800ffd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f06f 0202 	mvn.w	r2, #2
 800ffa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2201      	movs	r2, #1
 800ffaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	f003 0303 	and.w	r3, r3, #3
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d003      	beq.n	800ffc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f000 fa84 	bl	80104c8 <HAL_TIM_IC_CaptureCallback>
 800ffc0:	e005      	b.n	800ffce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ffc2:	6878      	ldr	r0, [r7, #4]
 800ffc4:	f000 fa76 	bl	80104b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 fa87 	bl	80104dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	691b      	ldr	r3, [r3, #16]
 800ffda:	f003 0304 	and.w	r3, r3, #4
 800ffde:	2b04      	cmp	r3, #4
 800ffe0:	d122      	bne.n	8010028 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	68db      	ldr	r3, [r3, #12]
 800ffe8:	f003 0304 	and.w	r3, r3, #4
 800ffec:	2b04      	cmp	r3, #4
 800ffee:	d11b      	bne.n	8010028 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f06f 0204 	mvn.w	r2, #4
 800fff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	2202      	movs	r2, #2
 800fffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	699b      	ldr	r3, [r3, #24]
 8010006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801000a:	2b00      	cmp	r3, #0
 801000c:	d003      	beq.n	8010016 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801000e:	6878      	ldr	r0, [r7, #4]
 8010010:	f000 fa5a 	bl	80104c8 <HAL_TIM_IC_CaptureCallback>
 8010014:	e005      	b.n	8010022 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fa4c 	bl	80104b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f000 fa5d 	bl	80104dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	2200      	movs	r2, #0
 8010026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	691b      	ldr	r3, [r3, #16]
 801002e:	f003 0308 	and.w	r3, r3, #8
 8010032:	2b08      	cmp	r3, #8
 8010034:	d122      	bne.n	801007c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	681b      	ldr	r3, [r3, #0]
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	f003 0308 	and.w	r3, r3, #8
 8010040:	2b08      	cmp	r3, #8
 8010042:	d11b      	bne.n	801007c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	f06f 0208 	mvn.w	r2, #8
 801004c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2204      	movs	r2, #4
 8010052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	69db      	ldr	r3, [r3, #28]
 801005a:	f003 0303 	and.w	r3, r3, #3
 801005e:	2b00      	cmp	r3, #0
 8010060:	d003      	beq.n	801006a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010062:	6878      	ldr	r0, [r7, #4]
 8010064:	f000 fa30 	bl	80104c8 <HAL_TIM_IC_CaptureCallback>
 8010068:	e005      	b.n	8010076 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fa22 	bl	80104b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f000 fa33 	bl	80104dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	2200      	movs	r2, #0
 801007a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	691b      	ldr	r3, [r3, #16]
 8010082:	f003 0310 	and.w	r3, r3, #16
 8010086:	2b10      	cmp	r3, #16
 8010088:	d122      	bne.n	80100d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	68db      	ldr	r3, [r3, #12]
 8010090:	f003 0310 	and.w	r3, r3, #16
 8010094:	2b10      	cmp	r3, #16
 8010096:	d11b      	bne.n	80100d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	f06f 0210 	mvn.w	r2, #16
 80100a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2208      	movs	r2, #8
 80100a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	69db      	ldr	r3, [r3, #28]
 80100ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d003      	beq.n	80100be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fa06 	bl	80104c8 <HAL_TIM_IC_CaptureCallback>
 80100bc:	e005      	b.n	80100ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f9f8 	bl	80104b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f000 fa09 	bl	80104dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	2200      	movs	r2, #0
 80100ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	681b      	ldr	r3, [r3, #0]
 80100d4:	691b      	ldr	r3, [r3, #16]
 80100d6:	f003 0301 	and.w	r3, r3, #1
 80100da:	2b01      	cmp	r3, #1
 80100dc:	d10e      	bne.n	80100fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	68db      	ldr	r3, [r3, #12]
 80100e4:	f003 0301 	and.w	r3, r3, #1
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d107      	bne.n	80100fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	f06f 0201 	mvn.w	r2, #1
 80100f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f000 f9d2 	bl	80104a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010106:	2b80      	cmp	r3, #128	; 0x80
 8010108:	d10e      	bne.n	8010128 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	68db      	ldr	r3, [r3, #12]
 8010110:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010114:	2b80      	cmp	r3, #128	; 0x80
 8010116:	d107      	bne.n	8010128 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010122:	6878      	ldr	r0, [r7, #4]
 8010124:	f000 ff26 	bl	8010f74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	691b      	ldr	r3, [r3, #16]
 801012e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010132:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010136:	d10e      	bne.n	8010156 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	68db      	ldr	r3, [r3, #12]
 801013e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010142:	2b80      	cmp	r3, #128	; 0x80
 8010144:	d107      	bne.n	8010156 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801014e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010150:	6878      	ldr	r0, [r7, #4]
 8010152:	f000 ff19 	bl	8010f88 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	691b      	ldr	r3, [r3, #16]
 801015c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010160:	2b40      	cmp	r3, #64	; 0x40
 8010162:	d10e      	bne.n	8010182 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801016e:	2b40      	cmp	r3, #64	; 0x40
 8010170:	d107      	bne.n	8010182 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801017a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f000 f9b7 	bl	80104f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	691b      	ldr	r3, [r3, #16]
 8010188:	f003 0320 	and.w	r3, r3, #32
 801018c:	2b20      	cmp	r3, #32
 801018e:	d10e      	bne.n	80101ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	68db      	ldr	r3, [r3, #12]
 8010196:	f003 0320 	and.w	r3, r3, #32
 801019a:	2b20      	cmp	r3, #32
 801019c:	d107      	bne.n	80101ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	681b      	ldr	r3, [r3, #0]
 80101a2:	f06f 0220 	mvn.w	r2, #32
 80101a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f000 fed9 	bl	8010f60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	691b      	ldr	r3, [r3, #16]
 80101b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80101b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101bc:	d10f      	bne.n	80101de <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	68db      	ldr	r3, [r3, #12]
 80101c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80101c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80101cc:	d107      	bne.n	80101de <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80101d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fedf 	bl	8010f9c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	691b      	ldr	r3, [r3, #16]
 80101e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80101e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101ec:	d10f      	bne.n	801020e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	68db      	ldr	r3, [r3, #12]
 80101f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80101f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80101fc:	d107      	bne.n	801020e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8010206:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fed1 	bl	8010fb0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	681b      	ldr	r3, [r3, #0]
 8010212:	691b      	ldr	r3, [r3, #16]
 8010214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801021c:	d10f      	bne.n	801023e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801022c:	d107      	bne.n	801023e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	681b      	ldr	r3, [r3, #0]
 8010232:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8010236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8010238:	6878      	ldr	r0, [r7, #4]
 801023a:	f000 fec3 	bl	8010fc4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	691b      	ldr	r3, [r3, #16]
 8010244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010248:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801024c:	d10f      	bne.n	801026e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	68db      	ldr	r3, [r3, #12]
 8010254:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801025c:	d107      	bne.n	801026e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8010266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f000 feb5 	bl	8010fd8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010284:	2300      	movs	r3, #0
 8010286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801028e:	2b01      	cmp	r3, #1
 8010290:	d101      	bne.n	8010296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010292:	2302      	movs	r3, #2
 8010294:	e0ff      	b.n	8010496 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	2201      	movs	r2, #1
 801029a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	2b14      	cmp	r3, #20
 80102a2:	f200 80f0 	bhi.w	8010486 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80102a6:	a201      	add	r2, pc, #4	; (adr r2, 80102ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80102a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ac:	08010301 	.word	0x08010301
 80102b0:	08010487 	.word	0x08010487
 80102b4:	08010487 	.word	0x08010487
 80102b8:	08010487 	.word	0x08010487
 80102bc:	08010341 	.word	0x08010341
 80102c0:	08010487 	.word	0x08010487
 80102c4:	08010487 	.word	0x08010487
 80102c8:	08010487 	.word	0x08010487
 80102cc:	08010383 	.word	0x08010383
 80102d0:	08010487 	.word	0x08010487
 80102d4:	08010487 	.word	0x08010487
 80102d8:	08010487 	.word	0x08010487
 80102dc:	080103c3 	.word	0x080103c3
 80102e0:	08010487 	.word	0x08010487
 80102e4:	08010487 	.word	0x08010487
 80102e8:	08010487 	.word	0x08010487
 80102ec:	08010405 	.word	0x08010405
 80102f0:	08010487 	.word	0x08010487
 80102f4:	08010487 	.word	0x08010487
 80102f8:	08010487 	.word	0x08010487
 80102fc:	08010445 	.word	0x08010445
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	68b9      	ldr	r1, [r7, #8]
 8010306:	4618      	mov	r0, r3
 8010308:	f000 f99a 	bl	8010640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	699a      	ldr	r2, [r3, #24]
 8010312:	68fb      	ldr	r3, [r7, #12]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	f042 0208 	orr.w	r2, r2, #8
 801031a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	699a      	ldr	r2, [r3, #24]
 8010322:	68fb      	ldr	r3, [r7, #12]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	f022 0204 	bic.w	r2, r2, #4
 801032a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	6999      	ldr	r1, [r3, #24]
 8010332:	68bb      	ldr	r3, [r7, #8]
 8010334:	691a      	ldr	r2, [r3, #16]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	430a      	orrs	r2, r1
 801033c:	619a      	str	r2, [r3, #24]
      break;
 801033e:	e0a5      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	681b      	ldr	r3, [r3, #0]
 8010344:	68b9      	ldr	r1, [r7, #8]
 8010346:	4618      	mov	r0, r3
 8010348:	f000 fa14 	bl	8010774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	699a      	ldr	r2, [r3, #24]
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801035a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	699a      	ldr	r2, [r3, #24]
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801036a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	6999      	ldr	r1, [r3, #24]
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	691b      	ldr	r3, [r3, #16]
 8010376:	021a      	lsls	r2, r3, #8
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	430a      	orrs	r2, r1
 801037e:	619a      	str	r2, [r3, #24]
      break;
 8010380:	e084      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	68b9      	ldr	r1, [r7, #8]
 8010388:	4618      	mov	r0, r3
 801038a:	f000 fa87 	bl	801089c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801038e:	68fb      	ldr	r3, [r7, #12]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	69da      	ldr	r2, [r3, #28]
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	f042 0208 	orr.w	r2, r2, #8
 801039c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	69da      	ldr	r2, [r3, #28]
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	f022 0204 	bic.w	r2, r2, #4
 80103ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80103ae:	68fb      	ldr	r3, [r7, #12]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	69d9      	ldr	r1, [r3, #28]
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	691a      	ldr	r2, [r3, #16]
 80103b8:	68fb      	ldr	r3, [r7, #12]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	430a      	orrs	r2, r1
 80103be:	61da      	str	r2, [r3, #28]
      break;
 80103c0:	e064      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	68b9      	ldr	r1, [r7, #8]
 80103c8:	4618      	mov	r0, r3
 80103ca:	f000 faf9 	bl	80109c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80103ce:	68fb      	ldr	r3, [r7, #12]
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	69da      	ldr	r2, [r3, #28]
 80103d4:	68fb      	ldr	r3, [r7, #12]
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80103dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	69da      	ldr	r2, [r3, #28]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80103ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	69d9      	ldr	r1, [r3, #28]
 80103f4:	68bb      	ldr	r3, [r7, #8]
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	021a      	lsls	r2, r3, #8
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	430a      	orrs	r2, r1
 8010400:	61da      	str	r2, [r3, #28]
      break;
 8010402:	e043      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	68b9      	ldr	r1, [r7, #8]
 801040a:	4618      	mov	r0, r3
 801040c:	f000 fb6c 	bl	8010ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	681b      	ldr	r3, [r3, #0]
 8010414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	f042 0208 	orr.w	r2, r2, #8
 801041e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	f022 0204 	bic.w	r2, r2, #4
 801042e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010436:	68bb      	ldr	r3, [r7, #8]
 8010438:	691a      	ldr	r2, [r3, #16]
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	430a      	orrs	r2, r1
 8010440:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010442:	e023      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	68b9      	ldr	r1, [r7, #8]
 801044a:	4618      	mov	r0, r3
 801044c:	f000 fbb6 	bl	8010bbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010456:	68fb      	ldr	r3, [r7, #12]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801045e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801046e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	691b      	ldr	r3, [r3, #16]
 801047a:	021a      	lsls	r2, r3, #8
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	430a      	orrs	r2, r1
 8010482:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8010484:	e002      	b.n	801048c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010486:	2301      	movs	r3, #1
 8010488:	75fb      	strb	r3, [r7, #23]
      break;
 801048a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	2200      	movs	r2, #0
 8010490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010494:	7dfb      	ldrb	r3, [r7, #23]
}
 8010496:	4618      	mov	r0, r3
 8010498:	3718      	adds	r7, #24
 801049a:	46bd      	mov	sp, r7
 801049c:	bd80      	pop	{r7, pc}
 801049e:	bf00      	nop

080104a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104a0:	b480      	push	{r7}
 80104a2:	b083      	sub	sp, #12
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80104a8:	bf00      	nop
 80104aa:	370c      	adds	r7, #12
 80104ac:	46bd      	mov	sp, r7
 80104ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104b2:	4770      	bx	lr

080104b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80104b4:	b480      	push	{r7}
 80104b6:	b083      	sub	sp, #12
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80104bc:	bf00      	nop
 80104be:	370c      	adds	r7, #12
 80104c0:	46bd      	mov	sp, r7
 80104c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c6:	4770      	bx	lr

080104c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80104d0:	bf00      	nop
 80104d2:	370c      	adds	r7, #12
 80104d4:	46bd      	mov	sp, r7
 80104d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104da:	4770      	bx	lr

080104dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80104e4:	bf00      	nop
 80104e6:	370c      	adds	r7, #12
 80104e8:	46bd      	mov	sp, r7
 80104ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ee:	4770      	bx	lr

080104f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80104f8:	bf00      	nop
 80104fa:	370c      	adds	r7, #12
 80104fc:	46bd      	mov	sp, r7
 80104fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010502:	4770      	bx	lr

08010504 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	4a42      	ldr	r2, [pc, #264]	; (8010620 <TIM_Base_SetConfig+0x11c>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d013      	beq.n	8010544 <TIM_Base_SetConfig+0x40>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010522:	d00f      	beq.n	8010544 <TIM_Base_SetConfig+0x40>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	4a3f      	ldr	r2, [pc, #252]	; (8010624 <TIM_Base_SetConfig+0x120>)
 8010528:	4293      	cmp	r3, r2
 801052a:	d00b      	beq.n	8010544 <TIM_Base_SetConfig+0x40>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	4a3e      	ldr	r2, [pc, #248]	; (8010628 <TIM_Base_SetConfig+0x124>)
 8010530:	4293      	cmp	r3, r2
 8010532:	d007      	beq.n	8010544 <TIM_Base_SetConfig+0x40>
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	4a3d      	ldr	r2, [pc, #244]	; (801062c <TIM_Base_SetConfig+0x128>)
 8010538:	4293      	cmp	r3, r2
 801053a:	d003      	beq.n	8010544 <TIM_Base_SetConfig+0x40>
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	4a3c      	ldr	r2, [pc, #240]	; (8010630 <TIM_Base_SetConfig+0x12c>)
 8010540:	4293      	cmp	r3, r2
 8010542:	d108      	bne.n	8010556 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801054a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	4313      	orrs	r3, r2
 8010554:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	4a31      	ldr	r2, [pc, #196]	; (8010620 <TIM_Base_SetConfig+0x11c>)
 801055a:	4293      	cmp	r3, r2
 801055c:	d01f      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010564:	d01b      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4a2e      	ldr	r2, [pc, #184]	; (8010624 <TIM_Base_SetConfig+0x120>)
 801056a:	4293      	cmp	r3, r2
 801056c:	d017      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4a2d      	ldr	r2, [pc, #180]	; (8010628 <TIM_Base_SetConfig+0x124>)
 8010572:	4293      	cmp	r3, r2
 8010574:	d013      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	4a2c      	ldr	r2, [pc, #176]	; (801062c <TIM_Base_SetConfig+0x128>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d00f      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	4a2c      	ldr	r2, [pc, #176]	; (8010634 <TIM_Base_SetConfig+0x130>)
 8010582:	4293      	cmp	r3, r2
 8010584:	d00b      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	4a2b      	ldr	r2, [pc, #172]	; (8010638 <TIM_Base_SetConfig+0x134>)
 801058a:	4293      	cmp	r3, r2
 801058c:	d007      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4a2a      	ldr	r2, [pc, #168]	; (801063c <TIM_Base_SetConfig+0x138>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d003      	beq.n	801059e <TIM_Base_SetConfig+0x9a>
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	4a25      	ldr	r2, [pc, #148]	; (8010630 <TIM_Base_SetConfig+0x12c>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d108      	bne.n	80105b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80105a6:	683b      	ldr	r3, [r7, #0]
 80105a8:	68db      	ldr	r3, [r3, #12]
 80105aa:	68fa      	ldr	r2, [r7, #12]
 80105ac:	4313      	orrs	r3, r2
 80105ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	695b      	ldr	r3, [r3, #20]
 80105ba:	4313      	orrs	r3, r2
 80105bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	689a      	ldr	r2, [r3, #8]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	681a      	ldr	r2, [r3, #0]
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	4a12      	ldr	r2, [pc, #72]	; (8010620 <TIM_Base_SetConfig+0x11c>)
 80105d8:	4293      	cmp	r3, r2
 80105da:	d013      	beq.n	8010604 <TIM_Base_SetConfig+0x100>
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	4a13      	ldr	r2, [pc, #76]	; (801062c <TIM_Base_SetConfig+0x128>)
 80105e0:	4293      	cmp	r3, r2
 80105e2:	d00f      	beq.n	8010604 <TIM_Base_SetConfig+0x100>
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	4a13      	ldr	r2, [pc, #76]	; (8010634 <TIM_Base_SetConfig+0x130>)
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d00b      	beq.n	8010604 <TIM_Base_SetConfig+0x100>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	4a12      	ldr	r2, [pc, #72]	; (8010638 <TIM_Base_SetConfig+0x134>)
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d007      	beq.n	8010604 <TIM_Base_SetConfig+0x100>
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	4a11      	ldr	r2, [pc, #68]	; (801063c <TIM_Base_SetConfig+0x138>)
 80105f8:	4293      	cmp	r3, r2
 80105fa:	d003      	beq.n	8010604 <TIM_Base_SetConfig+0x100>
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	4a0c      	ldr	r2, [pc, #48]	; (8010630 <TIM_Base_SetConfig+0x12c>)
 8010600:	4293      	cmp	r3, r2
 8010602:	d103      	bne.n	801060c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	691a      	ldr	r2, [r3, #16]
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2201      	movs	r2, #1
 8010610:	615a      	str	r2, [r3, #20]
}
 8010612:	bf00      	nop
 8010614:	3714      	adds	r7, #20
 8010616:	46bd      	mov	sp, r7
 8010618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801061c:	4770      	bx	lr
 801061e:	bf00      	nop
 8010620:	40012c00 	.word	0x40012c00
 8010624:	40000400 	.word	0x40000400
 8010628:	40000800 	.word	0x40000800
 801062c:	40013400 	.word	0x40013400
 8010630:	40015000 	.word	0x40015000
 8010634:	40014000 	.word	0x40014000
 8010638:	40014400 	.word	0x40014400
 801063c:	40014800 	.word	0x40014800

08010640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010640:	b480      	push	{r7}
 8010642:	b087      	sub	sp, #28
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
 8010648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	6a1b      	ldr	r3, [r3, #32]
 801064e:	f023 0201 	bic.w	r2, r3, #1
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6a1b      	ldr	r3, [r3, #32]
 801065a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	699b      	ldr	r3, [r3, #24]
 8010666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010668:	68fb      	ldr	r3, [r7, #12]
 801066a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801066e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f023 0303 	bic.w	r3, r3, #3
 801067a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801067c:	683b      	ldr	r3, [r7, #0]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	68fa      	ldr	r2, [r7, #12]
 8010682:	4313      	orrs	r3, r2
 8010684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010686:	697b      	ldr	r3, [r7, #20]
 8010688:	f023 0302 	bic.w	r3, r3, #2
 801068c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	689b      	ldr	r3, [r3, #8]
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	4313      	orrs	r3, r2
 8010696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	4a30      	ldr	r2, [pc, #192]	; (801075c <TIM_OC1_SetConfig+0x11c>)
 801069c:	4293      	cmp	r3, r2
 801069e:	d013      	beq.n	80106c8 <TIM_OC1_SetConfig+0x88>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	4a2f      	ldr	r2, [pc, #188]	; (8010760 <TIM_OC1_SetConfig+0x120>)
 80106a4:	4293      	cmp	r3, r2
 80106a6:	d00f      	beq.n	80106c8 <TIM_OC1_SetConfig+0x88>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	4a2e      	ldr	r2, [pc, #184]	; (8010764 <TIM_OC1_SetConfig+0x124>)
 80106ac:	4293      	cmp	r3, r2
 80106ae:	d00b      	beq.n	80106c8 <TIM_OC1_SetConfig+0x88>
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	4a2d      	ldr	r2, [pc, #180]	; (8010768 <TIM_OC1_SetConfig+0x128>)
 80106b4:	4293      	cmp	r3, r2
 80106b6:	d007      	beq.n	80106c8 <TIM_OC1_SetConfig+0x88>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4a2c      	ldr	r2, [pc, #176]	; (801076c <TIM_OC1_SetConfig+0x12c>)
 80106bc:	4293      	cmp	r3, r2
 80106be:	d003      	beq.n	80106c8 <TIM_OC1_SetConfig+0x88>
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4a2b      	ldr	r2, [pc, #172]	; (8010770 <TIM_OC1_SetConfig+0x130>)
 80106c4:	4293      	cmp	r3, r2
 80106c6:	d10c      	bne.n	80106e2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80106c8:	697b      	ldr	r3, [r7, #20]
 80106ca:	f023 0308 	bic.w	r3, r3, #8
 80106ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	68db      	ldr	r3, [r3, #12]
 80106d4:	697a      	ldr	r2, [r7, #20]
 80106d6:	4313      	orrs	r3, r2
 80106d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	f023 0304 	bic.w	r3, r3, #4
 80106e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a1d      	ldr	r2, [pc, #116]	; (801075c <TIM_OC1_SetConfig+0x11c>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d013      	beq.n	8010712 <TIM_OC1_SetConfig+0xd2>
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	4a1c      	ldr	r2, [pc, #112]	; (8010760 <TIM_OC1_SetConfig+0x120>)
 80106ee:	4293      	cmp	r3, r2
 80106f0:	d00f      	beq.n	8010712 <TIM_OC1_SetConfig+0xd2>
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	4a1b      	ldr	r2, [pc, #108]	; (8010764 <TIM_OC1_SetConfig+0x124>)
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d00b      	beq.n	8010712 <TIM_OC1_SetConfig+0xd2>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	4a1a      	ldr	r2, [pc, #104]	; (8010768 <TIM_OC1_SetConfig+0x128>)
 80106fe:	4293      	cmp	r3, r2
 8010700:	d007      	beq.n	8010712 <TIM_OC1_SetConfig+0xd2>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	4a19      	ldr	r2, [pc, #100]	; (801076c <TIM_OC1_SetConfig+0x12c>)
 8010706:	4293      	cmp	r3, r2
 8010708:	d003      	beq.n	8010712 <TIM_OC1_SetConfig+0xd2>
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	4a18      	ldr	r2, [pc, #96]	; (8010770 <TIM_OC1_SetConfig+0x130>)
 801070e:	4293      	cmp	r3, r2
 8010710:	d111      	bne.n	8010736 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801071a:	693b      	ldr	r3, [r7, #16]
 801071c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010722:	683b      	ldr	r3, [r7, #0]
 8010724:	695b      	ldr	r3, [r3, #20]
 8010726:	693a      	ldr	r2, [r7, #16]
 8010728:	4313      	orrs	r3, r2
 801072a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	699b      	ldr	r3, [r3, #24]
 8010730:	693a      	ldr	r2, [r7, #16]
 8010732:	4313      	orrs	r3, r2
 8010734:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	693a      	ldr	r2, [r7, #16]
 801073a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	68fa      	ldr	r2, [r7, #12]
 8010740:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010742:	683b      	ldr	r3, [r7, #0]
 8010744:	685a      	ldr	r2, [r3, #4]
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	697a      	ldr	r2, [r7, #20]
 801074e:	621a      	str	r2, [r3, #32]
}
 8010750:	bf00      	nop
 8010752:	371c      	adds	r7, #28
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr
 801075c:	40012c00 	.word	0x40012c00
 8010760:	40013400 	.word	0x40013400
 8010764:	40014000 	.word	0x40014000
 8010768:	40014400 	.word	0x40014400
 801076c:	40014800 	.word	0x40014800
 8010770:	40015000 	.word	0x40015000

08010774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8010774:	b480      	push	{r7}
 8010776:	b087      	sub	sp, #28
 8010778:	af00      	add	r7, sp, #0
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6a1b      	ldr	r3, [r3, #32]
 8010782:	f023 0210 	bic.w	r2, r3, #16
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6a1b      	ldr	r3, [r3, #32]
 801078e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	699b      	ldr	r3, [r3, #24]
 801079a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80107a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80107a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80107ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	021b      	lsls	r3, r3, #8
 80107b6:	68fa      	ldr	r2, [r7, #12]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	f023 0320 	bic.w	r3, r3, #32
 80107c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80107c4:	683b      	ldr	r3, [r7, #0]
 80107c6:	689b      	ldr	r3, [r3, #8]
 80107c8:	011b      	lsls	r3, r3, #4
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	4313      	orrs	r3, r2
 80107ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	4a2c      	ldr	r2, [pc, #176]	; (8010884 <TIM_OC2_SetConfig+0x110>)
 80107d4:	4293      	cmp	r3, r2
 80107d6:	d007      	beq.n	80107e8 <TIM_OC2_SetConfig+0x74>
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	4a2b      	ldr	r2, [pc, #172]	; (8010888 <TIM_OC2_SetConfig+0x114>)
 80107dc:	4293      	cmp	r3, r2
 80107de:	d003      	beq.n	80107e8 <TIM_OC2_SetConfig+0x74>
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	4a2a      	ldr	r2, [pc, #168]	; (801088c <TIM_OC2_SetConfig+0x118>)
 80107e4:	4293      	cmp	r3, r2
 80107e6:	d10d      	bne.n	8010804 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80107ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80107f0:	683b      	ldr	r3, [r7, #0]
 80107f2:	68db      	ldr	r3, [r3, #12]
 80107f4:	011b      	lsls	r3, r3, #4
 80107f6:	697a      	ldr	r2, [r7, #20]
 80107f8:	4313      	orrs	r3, r2
 80107fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010802:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	4a1f      	ldr	r2, [pc, #124]	; (8010884 <TIM_OC2_SetConfig+0x110>)
 8010808:	4293      	cmp	r3, r2
 801080a:	d013      	beq.n	8010834 <TIM_OC2_SetConfig+0xc0>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	4a1e      	ldr	r2, [pc, #120]	; (8010888 <TIM_OC2_SetConfig+0x114>)
 8010810:	4293      	cmp	r3, r2
 8010812:	d00f      	beq.n	8010834 <TIM_OC2_SetConfig+0xc0>
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	4a1e      	ldr	r2, [pc, #120]	; (8010890 <TIM_OC2_SetConfig+0x11c>)
 8010818:	4293      	cmp	r3, r2
 801081a:	d00b      	beq.n	8010834 <TIM_OC2_SetConfig+0xc0>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	4a1d      	ldr	r2, [pc, #116]	; (8010894 <TIM_OC2_SetConfig+0x120>)
 8010820:	4293      	cmp	r3, r2
 8010822:	d007      	beq.n	8010834 <TIM_OC2_SetConfig+0xc0>
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	4a1c      	ldr	r2, [pc, #112]	; (8010898 <TIM_OC2_SetConfig+0x124>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d003      	beq.n	8010834 <TIM_OC2_SetConfig+0xc0>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	4a17      	ldr	r2, [pc, #92]	; (801088c <TIM_OC2_SetConfig+0x118>)
 8010830:	4293      	cmp	r3, r2
 8010832:	d113      	bne.n	801085c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801083a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801083c:	693b      	ldr	r3, [r7, #16]
 801083e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010842:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	695b      	ldr	r3, [r3, #20]
 8010848:	009b      	lsls	r3, r3, #2
 801084a:	693a      	ldr	r2, [r7, #16]
 801084c:	4313      	orrs	r3, r2
 801084e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010850:	683b      	ldr	r3, [r7, #0]
 8010852:	699b      	ldr	r3, [r3, #24]
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	693a      	ldr	r2, [r7, #16]
 8010858:	4313      	orrs	r3, r2
 801085a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	693a      	ldr	r2, [r7, #16]
 8010860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	68fa      	ldr	r2, [r7, #12]
 8010866:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010868:	683b      	ldr	r3, [r7, #0]
 801086a:	685a      	ldr	r2, [r3, #4]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	697a      	ldr	r2, [r7, #20]
 8010874:	621a      	str	r2, [r3, #32]
}
 8010876:	bf00      	nop
 8010878:	371c      	adds	r7, #28
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	40012c00 	.word	0x40012c00
 8010888:	40013400 	.word	0x40013400
 801088c:	40015000 	.word	0x40015000
 8010890:	40014000 	.word	0x40014000
 8010894:	40014400 	.word	0x40014400
 8010898:	40014800 	.word	0x40014800

0801089c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 801089c:	b480      	push	{r7}
 801089e:	b087      	sub	sp, #28
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	6a1b      	ldr	r3, [r3, #32]
 80108aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6a1b      	ldr	r3, [r3, #32]
 80108b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	685b      	ldr	r3, [r3, #4]
 80108bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	69db      	ldr	r3, [r3, #28]
 80108c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80108ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f023 0303 	bic.w	r3, r3, #3
 80108d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80108d8:	683b      	ldr	r3, [r7, #0]
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	68fa      	ldr	r2, [r7, #12]
 80108de:	4313      	orrs	r3, r2
 80108e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80108e2:	697b      	ldr	r3, [r7, #20]
 80108e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80108e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80108ea:	683b      	ldr	r3, [r7, #0]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	021b      	lsls	r3, r3, #8
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	4313      	orrs	r3, r2
 80108f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	4a2b      	ldr	r2, [pc, #172]	; (80109a8 <TIM_OC3_SetConfig+0x10c>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d007      	beq.n	801090e <TIM_OC3_SetConfig+0x72>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	4a2a      	ldr	r2, [pc, #168]	; (80109ac <TIM_OC3_SetConfig+0x110>)
 8010902:	4293      	cmp	r3, r2
 8010904:	d003      	beq.n	801090e <TIM_OC3_SetConfig+0x72>
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	4a29      	ldr	r2, [pc, #164]	; (80109b0 <TIM_OC3_SetConfig+0x114>)
 801090a:	4293      	cmp	r3, r2
 801090c:	d10d      	bne.n	801092a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801090e:	697b      	ldr	r3, [r7, #20]
 8010910:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	021b      	lsls	r3, r3, #8
 801091c:	697a      	ldr	r2, [r7, #20]
 801091e:	4313      	orrs	r3, r2
 8010920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010928:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a1e      	ldr	r2, [pc, #120]	; (80109a8 <TIM_OC3_SetConfig+0x10c>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d013      	beq.n	801095a <TIM_OC3_SetConfig+0xbe>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a1d      	ldr	r2, [pc, #116]	; (80109ac <TIM_OC3_SetConfig+0x110>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d00f      	beq.n	801095a <TIM_OC3_SetConfig+0xbe>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a1d      	ldr	r2, [pc, #116]	; (80109b4 <TIM_OC3_SetConfig+0x118>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d00b      	beq.n	801095a <TIM_OC3_SetConfig+0xbe>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a1c      	ldr	r2, [pc, #112]	; (80109b8 <TIM_OC3_SetConfig+0x11c>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d007      	beq.n	801095a <TIM_OC3_SetConfig+0xbe>
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	4a1b      	ldr	r2, [pc, #108]	; (80109bc <TIM_OC3_SetConfig+0x120>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d003      	beq.n	801095a <TIM_OC3_SetConfig+0xbe>
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	4a16      	ldr	r2, [pc, #88]	; (80109b0 <TIM_OC3_SetConfig+0x114>)
 8010956:	4293      	cmp	r3, r2
 8010958:	d113      	bne.n	8010982 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801095a:	693b      	ldr	r3, [r7, #16]
 801095c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801096a:	683b      	ldr	r3, [r7, #0]
 801096c:	695b      	ldr	r3, [r3, #20]
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	693a      	ldr	r2, [r7, #16]
 8010972:	4313      	orrs	r3, r2
 8010974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010976:	683b      	ldr	r3, [r7, #0]
 8010978:	699b      	ldr	r3, [r3, #24]
 801097a:	011b      	lsls	r3, r3, #4
 801097c:	693a      	ldr	r2, [r7, #16]
 801097e:	4313      	orrs	r3, r2
 8010980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	693a      	ldr	r2, [r7, #16]
 8010986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68fa      	ldr	r2, [r7, #12]
 801098c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801098e:	683b      	ldr	r3, [r7, #0]
 8010990:	685a      	ldr	r2, [r3, #4]
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	697a      	ldr	r2, [r7, #20]
 801099a:	621a      	str	r2, [r3, #32]
}
 801099c:	bf00      	nop
 801099e:	371c      	adds	r7, #28
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr
 80109a8:	40012c00 	.word	0x40012c00
 80109ac:	40013400 	.word	0x40013400
 80109b0:	40015000 	.word	0x40015000
 80109b4:	40014000 	.word	0x40014000
 80109b8:	40014400 	.word	0x40014400
 80109bc:	40014800 	.word	0x40014800

080109c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80109c0:	b480      	push	{r7}
 80109c2:	b087      	sub	sp, #28
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	6a1b      	ldr	r3, [r3, #32]
 80109ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	6a1b      	ldr	r3, [r3, #32]
 80109da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	685b      	ldr	r3, [r3, #4]
 80109e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	69db      	ldr	r3, [r3, #28]
 80109e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80109ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80109f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80109fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80109fc:	683b      	ldr	r3, [r7, #0]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	021b      	lsls	r3, r3, #8
 8010a02:	68fa      	ldr	r2, [r7, #12]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010a0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	689b      	ldr	r3, [r3, #8]
 8010a14:	031b      	lsls	r3, r3, #12
 8010a16:	697a      	ldr	r2, [r7, #20]
 8010a18:	4313      	orrs	r3, r2
 8010a1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	4a2c      	ldr	r2, [pc, #176]	; (8010ad0 <TIM_OC4_SetConfig+0x110>)
 8010a20:	4293      	cmp	r3, r2
 8010a22:	d007      	beq.n	8010a34 <TIM_OC4_SetConfig+0x74>
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	4a2b      	ldr	r2, [pc, #172]	; (8010ad4 <TIM_OC4_SetConfig+0x114>)
 8010a28:	4293      	cmp	r3, r2
 8010a2a:	d003      	beq.n	8010a34 <TIM_OC4_SetConfig+0x74>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	4a2a      	ldr	r2, [pc, #168]	; (8010ad8 <TIM_OC4_SetConfig+0x118>)
 8010a30:	4293      	cmp	r3, r2
 8010a32:	d10d      	bne.n	8010a50 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8010a34:	697b      	ldr	r3, [r7, #20]
 8010a36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8010a3c:	683b      	ldr	r3, [r7, #0]
 8010a3e:	68db      	ldr	r3, [r3, #12]
 8010a40:	031b      	lsls	r3, r3, #12
 8010a42:	697a      	ldr	r2, [r7, #20]
 8010a44:	4313      	orrs	r3, r2
 8010a46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a1f      	ldr	r2, [pc, #124]	; (8010ad0 <TIM_OC4_SetConfig+0x110>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d013      	beq.n	8010a80 <TIM_OC4_SetConfig+0xc0>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a1e      	ldr	r2, [pc, #120]	; (8010ad4 <TIM_OC4_SetConfig+0x114>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d00f      	beq.n	8010a80 <TIM_OC4_SetConfig+0xc0>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a1e      	ldr	r2, [pc, #120]	; (8010adc <TIM_OC4_SetConfig+0x11c>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d00b      	beq.n	8010a80 <TIM_OC4_SetConfig+0xc0>
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	4a1d      	ldr	r2, [pc, #116]	; (8010ae0 <TIM_OC4_SetConfig+0x120>)
 8010a6c:	4293      	cmp	r3, r2
 8010a6e:	d007      	beq.n	8010a80 <TIM_OC4_SetConfig+0xc0>
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	4a1c      	ldr	r2, [pc, #112]	; (8010ae4 <TIM_OC4_SetConfig+0x124>)
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d003      	beq.n	8010a80 <TIM_OC4_SetConfig+0xc0>
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	4a17      	ldr	r2, [pc, #92]	; (8010ad8 <TIM_OC4_SetConfig+0x118>)
 8010a7c:	4293      	cmp	r3, r2
 8010a7e:	d113      	bne.n	8010aa8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010a86:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8010a88:	693b      	ldr	r3, [r7, #16]
 8010a8a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8010a8e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	695b      	ldr	r3, [r3, #20]
 8010a94:	019b      	lsls	r3, r3, #6
 8010a96:	693a      	ldr	r2, [r7, #16]
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	699b      	ldr	r3, [r3, #24]
 8010aa0:	019b      	lsls	r3, r3, #6
 8010aa2:	693a      	ldr	r2, [r7, #16]
 8010aa4:	4313      	orrs	r3, r2
 8010aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	693a      	ldr	r2, [r7, #16]
 8010aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	68fa      	ldr	r2, [r7, #12]
 8010ab2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	685a      	ldr	r2, [r3, #4]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	697a      	ldr	r2, [r7, #20]
 8010ac0:	621a      	str	r2, [r3, #32]
}
 8010ac2:	bf00      	nop
 8010ac4:	371c      	adds	r7, #28
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr
 8010ace:	bf00      	nop
 8010ad0:	40012c00 	.word	0x40012c00
 8010ad4:	40013400 	.word	0x40013400
 8010ad8:	40015000 	.word	0x40015000
 8010adc:	40014000 	.word	0x40014000
 8010ae0:	40014400 	.word	0x40014400
 8010ae4:	40014800 	.word	0x40014800

08010ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010ae8:	b480      	push	{r7}
 8010aea:	b087      	sub	sp, #28
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	6078      	str	r0, [r7, #4]
 8010af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	6a1b      	ldr	r3, [r3, #32]
 8010af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6a1b      	ldr	r3, [r3, #32]
 8010b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	685b      	ldr	r3, [r3, #4]
 8010b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010b1c:	683b      	ldr	r3, [r7, #0]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	4313      	orrs	r3, r2
 8010b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010b26:	693b      	ldr	r3, [r7, #16]
 8010b28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010b2e:	683b      	ldr	r3, [r7, #0]
 8010b30:	689b      	ldr	r3, [r3, #8]
 8010b32:	041b      	lsls	r3, r3, #16
 8010b34:	693a      	ldr	r2, [r7, #16]
 8010b36:	4313      	orrs	r3, r2
 8010b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	4a19      	ldr	r2, [pc, #100]	; (8010ba4 <TIM_OC5_SetConfig+0xbc>)
 8010b3e:	4293      	cmp	r3, r2
 8010b40:	d013      	beq.n	8010b6a <TIM_OC5_SetConfig+0x82>
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	4a18      	ldr	r2, [pc, #96]	; (8010ba8 <TIM_OC5_SetConfig+0xc0>)
 8010b46:	4293      	cmp	r3, r2
 8010b48:	d00f      	beq.n	8010b6a <TIM_OC5_SetConfig+0x82>
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	4a17      	ldr	r2, [pc, #92]	; (8010bac <TIM_OC5_SetConfig+0xc4>)
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	d00b      	beq.n	8010b6a <TIM_OC5_SetConfig+0x82>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4a16      	ldr	r2, [pc, #88]	; (8010bb0 <TIM_OC5_SetConfig+0xc8>)
 8010b56:	4293      	cmp	r3, r2
 8010b58:	d007      	beq.n	8010b6a <TIM_OC5_SetConfig+0x82>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4a15      	ldr	r2, [pc, #84]	; (8010bb4 <TIM_OC5_SetConfig+0xcc>)
 8010b5e:	4293      	cmp	r3, r2
 8010b60:	d003      	beq.n	8010b6a <TIM_OC5_SetConfig+0x82>
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	4a14      	ldr	r2, [pc, #80]	; (8010bb8 <TIM_OC5_SetConfig+0xd0>)
 8010b66:	4293      	cmp	r3, r2
 8010b68:	d109      	bne.n	8010b7e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010b6a:	697b      	ldr	r3, [r7, #20]
 8010b6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010b70:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010b72:	683b      	ldr	r3, [r7, #0]
 8010b74:	695b      	ldr	r3, [r3, #20]
 8010b76:	021b      	lsls	r3, r3, #8
 8010b78:	697a      	ldr	r2, [r7, #20]
 8010b7a:	4313      	orrs	r3, r2
 8010b7c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	697a      	ldr	r2, [r7, #20]
 8010b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	68fa      	ldr	r2, [r7, #12]
 8010b88:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	685a      	ldr	r2, [r3, #4]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	693a      	ldr	r2, [r7, #16]
 8010b96:	621a      	str	r2, [r3, #32]
}
 8010b98:	bf00      	nop
 8010b9a:	371c      	adds	r7, #28
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba2:	4770      	bx	lr
 8010ba4:	40012c00 	.word	0x40012c00
 8010ba8:	40013400 	.word	0x40013400
 8010bac:	40014000 	.word	0x40014000
 8010bb0:	40014400 	.word	0x40014400
 8010bb4:	40014800 	.word	0x40014800
 8010bb8:	40015000 	.word	0x40015000

08010bbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b087      	sub	sp, #28
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	6078      	str	r0, [r7, #4]
 8010bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6a1b      	ldr	r3, [r3, #32]
 8010bca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	6a1b      	ldr	r3, [r3, #32]
 8010bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010bf0:	683b      	ldr	r3, [r7, #0]
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	021b      	lsls	r3, r3, #8
 8010bf6:	68fa      	ldr	r2, [r7, #12]
 8010bf8:	4313      	orrs	r3, r2
 8010bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010bfc:	693b      	ldr	r3, [r7, #16]
 8010bfe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	689b      	ldr	r3, [r3, #8]
 8010c08:	051b      	lsls	r3, r3, #20
 8010c0a:	693a      	ldr	r2, [r7, #16]
 8010c0c:	4313      	orrs	r3, r2
 8010c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	4a1a      	ldr	r2, [pc, #104]	; (8010c7c <TIM_OC6_SetConfig+0xc0>)
 8010c14:	4293      	cmp	r3, r2
 8010c16:	d013      	beq.n	8010c40 <TIM_OC6_SetConfig+0x84>
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	4a19      	ldr	r2, [pc, #100]	; (8010c80 <TIM_OC6_SetConfig+0xc4>)
 8010c1c:	4293      	cmp	r3, r2
 8010c1e:	d00f      	beq.n	8010c40 <TIM_OC6_SetConfig+0x84>
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	4a18      	ldr	r2, [pc, #96]	; (8010c84 <TIM_OC6_SetConfig+0xc8>)
 8010c24:	4293      	cmp	r3, r2
 8010c26:	d00b      	beq.n	8010c40 <TIM_OC6_SetConfig+0x84>
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	4a17      	ldr	r2, [pc, #92]	; (8010c88 <TIM_OC6_SetConfig+0xcc>)
 8010c2c:	4293      	cmp	r3, r2
 8010c2e:	d007      	beq.n	8010c40 <TIM_OC6_SetConfig+0x84>
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	4a16      	ldr	r2, [pc, #88]	; (8010c8c <TIM_OC6_SetConfig+0xd0>)
 8010c34:	4293      	cmp	r3, r2
 8010c36:	d003      	beq.n	8010c40 <TIM_OC6_SetConfig+0x84>
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	4a15      	ldr	r2, [pc, #84]	; (8010c90 <TIM_OC6_SetConfig+0xd4>)
 8010c3c:	4293      	cmp	r3, r2
 8010c3e:	d109      	bne.n	8010c54 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010c46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	695b      	ldr	r3, [r3, #20]
 8010c4c:	029b      	lsls	r3, r3, #10
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	4313      	orrs	r3, r2
 8010c52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	697a      	ldr	r2, [r7, #20]
 8010c58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010c60:	683b      	ldr	r3, [r7, #0]
 8010c62:	685a      	ldr	r2, [r3, #4]
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	693a      	ldr	r2, [r7, #16]
 8010c6c:	621a      	str	r2, [r3, #32]
}
 8010c6e:	bf00      	nop
 8010c70:	371c      	adds	r7, #28
 8010c72:	46bd      	mov	sp, r7
 8010c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop
 8010c7c:	40012c00 	.word	0x40012c00
 8010c80:	40013400 	.word	0x40013400
 8010c84:	40014000 	.word	0x40014000
 8010c88:	40014400 	.word	0x40014400
 8010c8c:	40014800 	.word	0x40014800
 8010c90:	40015000 	.word	0x40015000

08010c94 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010c94:	b480      	push	{r7}
 8010c96:	b087      	sub	sp, #28
 8010c98:	af00      	add	r7, sp, #0
 8010c9a:	60f8      	str	r0, [r7, #12]
 8010c9c:	60b9      	str	r1, [r7, #8]
 8010c9e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010ca0:	68bb      	ldr	r3, [r7, #8]
 8010ca2:	f003 031f 	and.w	r3, r3, #31
 8010ca6:	2201      	movs	r2, #1
 8010ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8010cac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	6a1a      	ldr	r2, [r3, #32]
 8010cb2:	697b      	ldr	r3, [r7, #20]
 8010cb4:	43db      	mvns	r3, r3
 8010cb6:	401a      	ands	r2, r3
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	6a1a      	ldr	r2, [r3, #32]
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	f003 031f 	and.w	r3, r3, #31
 8010cc6:	6879      	ldr	r1, [r7, #4]
 8010cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8010ccc:	431a      	orrs	r2, r3
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	621a      	str	r2, [r3, #32]
}
 8010cd2:	bf00      	nop
 8010cd4:	371c      	adds	r7, #28
 8010cd6:	46bd      	mov	sp, r7
 8010cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cdc:	4770      	bx	lr
	...

08010ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010ce0:	b480      	push	{r7}
 8010ce2:	b085      	sub	sp, #20
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d101      	bne.n	8010cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	e06f      	b.n	8010dd8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2201      	movs	r2, #1
 8010cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2202      	movs	r2, #2
 8010d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	689b      	ldr	r3, [r3, #8]
 8010d16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	4a31      	ldr	r2, [pc, #196]	; (8010de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010d1e:	4293      	cmp	r3, r2
 8010d20:	d009      	beq.n	8010d36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	4a30      	ldr	r2, [pc, #192]	; (8010de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	d004      	beq.n	8010d36 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	4a2e      	ldr	r2, [pc, #184]	; (8010dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010d32:	4293      	cmp	r3, r2
 8010d34:	d108      	bne.n	8010d48 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010d3c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010d3e:	683b      	ldr	r3, [r7, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	68fa      	ldr	r2, [r7, #12]
 8010d44:	4313      	orrs	r3, r2
 8010d46:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8010d48:	68fb      	ldr	r3, [r7, #12]
 8010d4a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8010d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	4313      	orrs	r3, r2
 8010d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	68fa      	ldr	r2, [r7, #12]
 8010d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	4a1e      	ldr	r2, [pc, #120]	; (8010de4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8010d6c:	4293      	cmp	r3, r2
 8010d6e:	d01d      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	681b      	ldr	r3, [r3, #0]
 8010d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d78:	d018      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	4a1c      	ldr	r2, [pc, #112]	; (8010df0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8010d80:	4293      	cmp	r3, r2
 8010d82:	d013      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	681b      	ldr	r3, [r3, #0]
 8010d88:	4a1a      	ldr	r2, [pc, #104]	; (8010df4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	d00e      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	4a15      	ldr	r2, [pc, #84]	; (8010de8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d009      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4a16      	ldr	r2, [pc, #88]	; (8010df8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	d004      	beq.n	8010dac <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	4a11      	ldr	r2, [pc, #68]	; (8010dec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8010da8:	4293      	cmp	r3, r2
 8010daa:	d10c      	bne.n	8010dc6 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010dac:	68bb      	ldr	r3, [r7, #8]
 8010dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010db2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	689b      	ldr	r3, [r3, #8]
 8010db8:	68ba      	ldr	r2, [r7, #8]
 8010dba:	4313      	orrs	r3, r2
 8010dbc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	68ba      	ldr	r2, [r7, #8]
 8010dc4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	2201      	movs	r2, #1
 8010dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010dd6:	2300      	movs	r3, #0
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3714      	adds	r7, #20
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	40012c00 	.word	0x40012c00
 8010de8:	40013400 	.word	0x40013400
 8010dec:	40015000 	.word	0x40015000
 8010df0:	40000400 	.word	0x40000400
 8010df4:	40000800 	.word	0x40000800
 8010df8:	40014000 	.word	0x40014000

08010dfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b085      	sub	sp, #20
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8010e06:	2300      	movs	r3, #0
 8010e08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010e10:	2b01      	cmp	r3, #1
 8010e12:	d101      	bne.n	8010e18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8010e14:	2302      	movs	r3, #2
 8010e16:	e096      	b.n	8010f46 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	68db      	ldr	r3, [r3, #12]
 8010e2a:	4313      	orrs	r3, r2
 8010e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	689b      	ldr	r3, [r3, #8]
 8010e38:	4313      	orrs	r3, r2
 8010e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	685b      	ldr	r3, [r3, #4]
 8010e46:	4313      	orrs	r3, r2
 8010e48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8010e50:	683b      	ldr	r3, [r7, #0]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	4313      	orrs	r3, r2
 8010e56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010e5e:	683b      	ldr	r3, [r7, #0]
 8010e60:	691b      	ldr	r3, [r3, #16]
 8010e62:	4313      	orrs	r3, r2
 8010e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	695b      	ldr	r3, [r3, #20]
 8010e70:	4313      	orrs	r3, r2
 8010e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8010e74:	68fb      	ldr	r3, [r7, #12]
 8010e76:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8010e7a:	683b      	ldr	r3, [r7, #0]
 8010e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8010e88:	683b      	ldr	r3, [r7, #0]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	041b      	lsls	r3, r3, #16
 8010e8e:	4313      	orrs	r3, r2
 8010e90:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	4a2f      	ldr	r2, [pc, #188]	; (8010f54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010e98:	4293      	cmp	r3, r2
 8010e9a:	d009      	beq.n	8010eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	4a2d      	ldr	r2, [pc, #180]	; (8010f58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8010ea2:	4293      	cmp	r3, r2
 8010ea4:	d004      	beq.n	8010eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	4a2c      	ldr	r2, [pc, #176]	; (8010f5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010eac:	4293      	cmp	r3, r2
 8010eae:	d106      	bne.n	8010ebe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8010eb6:	683b      	ldr	r3, [r7, #0]
 8010eb8:	69db      	ldr	r3, [r3, #28]
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a24      	ldr	r2, [pc, #144]	; (8010f54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d009      	beq.n	8010edc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a22      	ldr	r2, [pc, #136]	; (8010f58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d004      	beq.n	8010edc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4a21      	ldr	r2, [pc, #132]	; (8010f5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d12b      	bne.n	8010f34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010ee2:	683b      	ldr	r3, [r7, #0]
 8010ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ee6:	051b      	lsls	r3, r3, #20
 8010ee8:	4313      	orrs	r3, r2
 8010eea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	6a1b      	ldr	r3, [r3, #32]
 8010ef6:	4313      	orrs	r3, r2
 8010ef8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f04:	4313      	orrs	r3, r2
 8010f06:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	4a11      	ldr	r2, [pc, #68]	; (8010f54 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d009      	beq.n	8010f26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a10      	ldr	r2, [pc, #64]	; (8010f58 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8010f18:	4293      	cmp	r3, r2
 8010f1a:	d004      	beq.n	8010f26 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	4a0e      	ldr	r2, [pc, #56]	; (8010f5c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8010f22:	4293      	cmp	r3, r2
 8010f24:	d106      	bne.n	8010f34 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8010f2c:	683b      	ldr	r3, [r7, #0]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f30:	4313      	orrs	r3, r2
 8010f32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2200      	movs	r2, #0
 8010f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010f44:	2300      	movs	r3, #0
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
 8010f52:	bf00      	nop
 8010f54:	40012c00 	.word	0x40012c00
 8010f58:	40013400 	.word	0x40013400
 8010f5c:	40015000 	.word	0x40015000

08010f60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b083      	sub	sp, #12
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010f68:	bf00      	nop
 8010f6a:	370c      	adds	r7, #12
 8010f6c:	46bd      	mov	sp, r7
 8010f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f72:	4770      	bx	lr

08010f74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010f7c:	bf00      	nop
 8010f7e:	370c      	adds	r7, #12
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8010f88:	b480      	push	{r7}
 8010f8a:	b083      	sub	sp, #12
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010f90:	bf00      	nop
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8010fa4:	bf00      	nop
 8010fa6:	370c      	adds	r7, #12
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fae:	4770      	bx	lr

08010fb0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8010fb0:	b480      	push	{r7}
 8010fb2:	b083      	sub	sp, #12
 8010fb4:	af00      	add	r7, sp, #0
 8010fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8010fb8:	bf00      	nop
 8010fba:	370c      	adds	r7, #12
 8010fbc:	46bd      	mov	sp, r7
 8010fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc2:	4770      	bx	lr

08010fc4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8010fc4:	b480      	push	{r7}
 8010fc6:	b083      	sub	sp, #12
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8010fcc:	bf00      	nop
 8010fce:	370c      	adds	r7, #12
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	4770      	bx	lr

08010fd8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8010fd8:	b480      	push	{r7}
 8010fda:	b083      	sub	sp, #12
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8010fe0:	bf00      	nop
 8010fe2:	370c      	adds	r7, #12
 8010fe4:	46bd      	mov	sp, r7
 8010fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fea:	4770      	bx	lr

08010fec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010fec:	b580      	push	{r7, lr}
 8010fee:	b082      	sub	sp, #8
 8010ff0:	af00      	add	r7, sp, #0
 8010ff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010ff4:	687b      	ldr	r3, [r7, #4]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d101      	bne.n	8010ffe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	e042      	b.n	8011084 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011004:	2b00      	cmp	r3, #0
 8011006:	d106      	bne.n	8011016 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2200      	movs	r2, #0
 801100c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f7f9 fd53 	bl	800aabc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	2224      	movs	r2, #36	; 0x24
 801101a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	681b      	ldr	r3, [r3, #0]
 8011022:	681a      	ldr	r2, [r3, #0]
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f022 0201 	bic.w	r2, r2, #1
 801102c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f000 f8c2 	bl	80111b8 <UART_SetConfig>
 8011034:	4603      	mov	r3, r0
 8011036:	2b01      	cmp	r3, #1
 8011038:	d101      	bne.n	801103e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	e022      	b.n	8011084 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011042:	2b00      	cmp	r3, #0
 8011044:	d002      	beq.n	801104c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 fbb2 	bl	80117b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801105a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	689a      	ldr	r2, [r3, #8]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	681b      	ldr	r3, [r3, #0]
 8011066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801106a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	681a      	ldr	r2, [r3, #0]
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	f042 0201 	orr.w	r2, r2, #1
 801107a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801107c:	6878      	ldr	r0, [r7, #4]
 801107e:	f000 fc39 	bl	80118f4 <UART_CheckIdleState>
 8011082:	4603      	mov	r3, r0
}
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b08a      	sub	sp, #40	; 0x28
 8011090:	af02      	add	r7, sp, #8
 8011092:	60f8      	str	r0, [r7, #12]
 8011094:	60b9      	str	r1, [r7, #8]
 8011096:	603b      	str	r3, [r7, #0]
 8011098:	4613      	mov	r3, r2
 801109a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801109c:	68fb      	ldr	r3, [r7, #12]
 801109e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110a2:	2b20      	cmp	r3, #32
 80110a4:	f040 8083 	bne.w	80111ae <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80110a8:	68bb      	ldr	r3, [r7, #8]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d002      	beq.n	80110b4 <HAL_UART_Transmit+0x28>
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d101      	bne.n	80110b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80110b4:	2301      	movs	r3, #1
 80110b6:	e07b      	b.n	80111b0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d101      	bne.n	80110c6 <HAL_UART_Transmit+0x3a>
 80110c2:	2302      	movs	r3, #2
 80110c4:	e074      	b.n	80111b0 <HAL_UART_Transmit+0x124>
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	2201      	movs	r2, #1
 80110ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	2200      	movs	r2, #0
 80110d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2221      	movs	r2, #33	; 0x21
 80110da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80110de:	f7f9 fdd3 	bl	800ac88 <HAL_GetTick>
 80110e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	88fa      	ldrh	r2, [r7, #6]
 80110e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80110ec:	68fb      	ldr	r3, [r7, #12]
 80110ee:	88fa      	ldrh	r2, [r7, #6]
 80110f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	689b      	ldr	r3, [r3, #8]
 80110f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80110fc:	d108      	bne.n	8011110 <HAL_UART_Transmit+0x84>
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	691b      	ldr	r3, [r3, #16]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d104      	bne.n	8011110 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8011106:	2300      	movs	r3, #0
 8011108:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	61bb      	str	r3, [r7, #24]
 801110e:	e003      	b.n	8011118 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8011110:	68bb      	ldr	r3, [r7, #8]
 8011112:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011114:	2300      	movs	r3, #0
 8011116:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	2200      	movs	r2, #0
 801111c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8011120:	e02c      	b.n	801117c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	9300      	str	r3, [sp, #0]
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	2200      	movs	r2, #0
 801112a:	2180      	movs	r1, #128	; 0x80
 801112c:	68f8      	ldr	r0, [r7, #12]
 801112e:	f000 fc2c 	bl	801198a <UART_WaitOnFlagUntilTimeout>
 8011132:	4603      	mov	r3, r0
 8011134:	2b00      	cmp	r3, #0
 8011136:	d001      	beq.n	801113c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8011138:	2303      	movs	r3, #3
 801113a:	e039      	b.n	80111b0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 801113c:	69fb      	ldr	r3, [r7, #28]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d10b      	bne.n	801115a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011142:	69bb      	ldr	r3, [r7, #24]
 8011144:	881b      	ldrh	r3, [r3, #0]
 8011146:	461a      	mov	r2, r3
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8011150:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011152:	69bb      	ldr	r3, [r7, #24]
 8011154:	3302      	adds	r3, #2
 8011156:	61bb      	str	r3, [r7, #24]
 8011158:	e007      	b.n	801116a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801115a:	69fb      	ldr	r3, [r7, #28]
 801115c:	781a      	ldrb	r2, [r3, #0]
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	3301      	adds	r3, #1
 8011168:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011170:	b29b      	uxth	r3, r3
 8011172:	3b01      	subs	r3, #1
 8011174:	b29a      	uxth	r2, r3
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8011182:	b29b      	uxth	r3, r3
 8011184:	2b00      	cmp	r3, #0
 8011186:	d1cc      	bne.n	8011122 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	9300      	str	r3, [sp, #0]
 801118c:	697b      	ldr	r3, [r7, #20]
 801118e:	2200      	movs	r2, #0
 8011190:	2140      	movs	r1, #64	; 0x40
 8011192:	68f8      	ldr	r0, [r7, #12]
 8011194:	f000 fbf9 	bl	801198a <UART_WaitOnFlagUntilTimeout>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 801119e:	2303      	movs	r3, #3
 80111a0:	e006      	b.n	80111b0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	2220      	movs	r2, #32
 80111a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80111aa:	2300      	movs	r3, #0
 80111ac:	e000      	b.n	80111b0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80111ae:	2302      	movs	r3, #2
  }
}
 80111b0:	4618      	mov	r0, r3
 80111b2:	3720      	adds	r7, #32
 80111b4:	46bd      	mov	sp, r7
 80111b6:	bd80      	pop	{r7, pc}

080111b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80111b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80111bc:	b08c      	sub	sp, #48	; 0x30
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80111c2:	2300      	movs	r3, #0
 80111c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	689a      	ldr	r2, [r3, #8]
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	431a      	orrs	r2, r3
 80111d2:	697b      	ldr	r3, [r7, #20]
 80111d4:	695b      	ldr	r3, [r3, #20]
 80111d6:	431a      	orrs	r2, r3
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	69db      	ldr	r3, [r3, #28]
 80111dc:	4313      	orrs	r3, r2
 80111de:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80111e0:	697b      	ldr	r3, [r7, #20]
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	4baa      	ldr	r3, [pc, #680]	; (8011490 <UART_SetConfig+0x2d8>)
 80111e8:	4013      	ands	r3, r2
 80111ea:	697a      	ldr	r2, [r7, #20]
 80111ec:	6812      	ldr	r2, [r2, #0]
 80111ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111f0:	430b      	orrs	r3, r1
 80111f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80111f4:	697b      	ldr	r3, [r7, #20]
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	685b      	ldr	r3, [r3, #4]
 80111fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	68da      	ldr	r2, [r3, #12]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	681b      	ldr	r3, [r3, #0]
 8011206:	430a      	orrs	r2, r1
 8011208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801120a:	697b      	ldr	r3, [r7, #20]
 801120c:	699b      	ldr	r3, [r3, #24]
 801120e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011210:	697b      	ldr	r3, [r7, #20]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	4a9f      	ldr	r2, [pc, #636]	; (8011494 <UART_SetConfig+0x2dc>)
 8011216:	4293      	cmp	r3, r2
 8011218:	d004      	beq.n	8011224 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801121a:	697b      	ldr	r3, [r7, #20]
 801121c:	6a1b      	ldr	r3, [r3, #32]
 801121e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011220:	4313      	orrs	r3, r2
 8011222:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011224:	697b      	ldr	r3, [r7, #20]
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	689b      	ldr	r3, [r3, #8]
 801122a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 801122e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8011232:	697a      	ldr	r2, [r7, #20]
 8011234:	6812      	ldr	r2, [r2, #0]
 8011236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011238:	430b      	orrs	r3, r1
 801123a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801123c:	697b      	ldr	r3, [r7, #20]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011242:	f023 010f 	bic.w	r1, r3, #15
 8011246:	697b      	ldr	r3, [r7, #20]
 8011248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	430a      	orrs	r2, r1
 8011250:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011252:	697b      	ldr	r3, [r7, #20]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	4a90      	ldr	r2, [pc, #576]	; (8011498 <UART_SetConfig+0x2e0>)
 8011258:	4293      	cmp	r3, r2
 801125a:	d125      	bne.n	80112a8 <UART_SetConfig+0xf0>
 801125c:	4b8f      	ldr	r3, [pc, #572]	; (801149c <UART_SetConfig+0x2e4>)
 801125e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011262:	f003 0303 	and.w	r3, r3, #3
 8011266:	2b03      	cmp	r3, #3
 8011268:	d81a      	bhi.n	80112a0 <UART_SetConfig+0xe8>
 801126a:	a201      	add	r2, pc, #4	; (adr r2, 8011270 <UART_SetConfig+0xb8>)
 801126c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011270:	08011281 	.word	0x08011281
 8011274:	08011291 	.word	0x08011291
 8011278:	08011289 	.word	0x08011289
 801127c:	08011299 	.word	0x08011299
 8011280:	2301      	movs	r3, #1
 8011282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011286:	e116      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011288:	2302      	movs	r3, #2
 801128a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801128e:	e112      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011290:	2304      	movs	r3, #4
 8011292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011296:	e10e      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011298:	2308      	movs	r3, #8
 801129a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801129e:	e10a      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80112a0:	2310      	movs	r3, #16
 80112a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80112a6:	e106      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80112a8:	697b      	ldr	r3, [r7, #20]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	4a7c      	ldr	r2, [pc, #496]	; (80114a0 <UART_SetConfig+0x2e8>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d138      	bne.n	8011324 <UART_SetConfig+0x16c>
 80112b2:	4b7a      	ldr	r3, [pc, #488]	; (801149c <UART_SetConfig+0x2e4>)
 80112b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80112b8:	f003 030c 	and.w	r3, r3, #12
 80112bc:	2b0c      	cmp	r3, #12
 80112be:	d82d      	bhi.n	801131c <UART_SetConfig+0x164>
 80112c0:	a201      	add	r2, pc, #4	; (adr r2, 80112c8 <UART_SetConfig+0x110>)
 80112c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112c6:	bf00      	nop
 80112c8:	080112fd 	.word	0x080112fd
 80112cc:	0801131d 	.word	0x0801131d
 80112d0:	0801131d 	.word	0x0801131d
 80112d4:	0801131d 	.word	0x0801131d
 80112d8:	0801130d 	.word	0x0801130d
 80112dc:	0801131d 	.word	0x0801131d
 80112e0:	0801131d 	.word	0x0801131d
 80112e4:	0801131d 	.word	0x0801131d
 80112e8:	08011305 	.word	0x08011305
 80112ec:	0801131d 	.word	0x0801131d
 80112f0:	0801131d 	.word	0x0801131d
 80112f4:	0801131d 	.word	0x0801131d
 80112f8:	08011315 	.word	0x08011315
 80112fc:	2300      	movs	r3, #0
 80112fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011302:	e0d8      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011304:	2302      	movs	r3, #2
 8011306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801130a:	e0d4      	b.n	80114b6 <UART_SetConfig+0x2fe>
 801130c:	2304      	movs	r3, #4
 801130e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011312:	e0d0      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011314:	2308      	movs	r3, #8
 8011316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801131a:	e0cc      	b.n	80114b6 <UART_SetConfig+0x2fe>
 801131c:	2310      	movs	r3, #16
 801131e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011322:	e0c8      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	4a5e      	ldr	r2, [pc, #376]	; (80114a4 <UART_SetConfig+0x2ec>)
 801132a:	4293      	cmp	r3, r2
 801132c:	d125      	bne.n	801137a <UART_SetConfig+0x1c2>
 801132e:	4b5b      	ldr	r3, [pc, #364]	; (801149c <UART_SetConfig+0x2e4>)
 8011330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011334:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011338:	2b30      	cmp	r3, #48	; 0x30
 801133a:	d016      	beq.n	801136a <UART_SetConfig+0x1b2>
 801133c:	2b30      	cmp	r3, #48	; 0x30
 801133e:	d818      	bhi.n	8011372 <UART_SetConfig+0x1ba>
 8011340:	2b20      	cmp	r3, #32
 8011342:	d00a      	beq.n	801135a <UART_SetConfig+0x1a2>
 8011344:	2b20      	cmp	r3, #32
 8011346:	d814      	bhi.n	8011372 <UART_SetConfig+0x1ba>
 8011348:	2b00      	cmp	r3, #0
 801134a:	d002      	beq.n	8011352 <UART_SetConfig+0x19a>
 801134c:	2b10      	cmp	r3, #16
 801134e:	d008      	beq.n	8011362 <UART_SetConfig+0x1aa>
 8011350:	e00f      	b.n	8011372 <UART_SetConfig+0x1ba>
 8011352:	2300      	movs	r3, #0
 8011354:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011358:	e0ad      	b.n	80114b6 <UART_SetConfig+0x2fe>
 801135a:	2302      	movs	r3, #2
 801135c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011360:	e0a9      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011362:	2304      	movs	r3, #4
 8011364:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011368:	e0a5      	b.n	80114b6 <UART_SetConfig+0x2fe>
 801136a:	2308      	movs	r3, #8
 801136c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011370:	e0a1      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011372:	2310      	movs	r3, #16
 8011374:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011378:	e09d      	b.n	80114b6 <UART_SetConfig+0x2fe>
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	4a4a      	ldr	r2, [pc, #296]	; (80114a8 <UART_SetConfig+0x2f0>)
 8011380:	4293      	cmp	r3, r2
 8011382:	d125      	bne.n	80113d0 <UART_SetConfig+0x218>
 8011384:	4b45      	ldr	r3, [pc, #276]	; (801149c <UART_SetConfig+0x2e4>)
 8011386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801138a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801138e:	2bc0      	cmp	r3, #192	; 0xc0
 8011390:	d016      	beq.n	80113c0 <UART_SetConfig+0x208>
 8011392:	2bc0      	cmp	r3, #192	; 0xc0
 8011394:	d818      	bhi.n	80113c8 <UART_SetConfig+0x210>
 8011396:	2b80      	cmp	r3, #128	; 0x80
 8011398:	d00a      	beq.n	80113b0 <UART_SetConfig+0x1f8>
 801139a:	2b80      	cmp	r3, #128	; 0x80
 801139c:	d814      	bhi.n	80113c8 <UART_SetConfig+0x210>
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d002      	beq.n	80113a8 <UART_SetConfig+0x1f0>
 80113a2:	2b40      	cmp	r3, #64	; 0x40
 80113a4:	d008      	beq.n	80113b8 <UART_SetConfig+0x200>
 80113a6:	e00f      	b.n	80113c8 <UART_SetConfig+0x210>
 80113a8:	2300      	movs	r3, #0
 80113aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113ae:	e082      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80113b0:	2302      	movs	r3, #2
 80113b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113b6:	e07e      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80113b8:	2304      	movs	r3, #4
 80113ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113be:	e07a      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80113c0:	2308      	movs	r3, #8
 80113c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113c6:	e076      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80113c8:	2310      	movs	r3, #16
 80113ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80113ce:	e072      	b.n	80114b6 <UART_SetConfig+0x2fe>
 80113d0:	697b      	ldr	r3, [r7, #20]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a35      	ldr	r2, [pc, #212]	; (80114ac <UART_SetConfig+0x2f4>)
 80113d6:	4293      	cmp	r3, r2
 80113d8:	d12a      	bne.n	8011430 <UART_SetConfig+0x278>
 80113da:	4b30      	ldr	r3, [pc, #192]	; (801149c <UART_SetConfig+0x2e4>)
 80113dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80113e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113e8:	d01a      	beq.n	8011420 <UART_SetConfig+0x268>
 80113ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113ee:	d81b      	bhi.n	8011428 <UART_SetConfig+0x270>
 80113f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113f4:	d00c      	beq.n	8011410 <UART_SetConfig+0x258>
 80113f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113fa:	d815      	bhi.n	8011428 <UART_SetConfig+0x270>
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d003      	beq.n	8011408 <UART_SetConfig+0x250>
 8011400:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011404:	d008      	beq.n	8011418 <UART_SetConfig+0x260>
 8011406:	e00f      	b.n	8011428 <UART_SetConfig+0x270>
 8011408:	2300      	movs	r3, #0
 801140a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801140e:	e052      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011410:	2302      	movs	r3, #2
 8011412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011416:	e04e      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011418:	2304      	movs	r3, #4
 801141a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801141e:	e04a      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011420:	2308      	movs	r3, #8
 8011422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011426:	e046      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011428:	2310      	movs	r3, #16
 801142a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801142e:	e042      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011430:	697b      	ldr	r3, [r7, #20]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	4a17      	ldr	r2, [pc, #92]	; (8011494 <UART_SetConfig+0x2dc>)
 8011436:	4293      	cmp	r3, r2
 8011438:	d13a      	bne.n	80114b0 <UART_SetConfig+0x2f8>
 801143a:	4b18      	ldr	r3, [pc, #96]	; (801149c <UART_SetConfig+0x2e4>)
 801143c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011440:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011444:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011448:	d01a      	beq.n	8011480 <UART_SetConfig+0x2c8>
 801144a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801144e:	d81b      	bhi.n	8011488 <UART_SetConfig+0x2d0>
 8011450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011454:	d00c      	beq.n	8011470 <UART_SetConfig+0x2b8>
 8011456:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801145a:	d815      	bhi.n	8011488 <UART_SetConfig+0x2d0>
 801145c:	2b00      	cmp	r3, #0
 801145e:	d003      	beq.n	8011468 <UART_SetConfig+0x2b0>
 8011460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011464:	d008      	beq.n	8011478 <UART_SetConfig+0x2c0>
 8011466:	e00f      	b.n	8011488 <UART_SetConfig+0x2d0>
 8011468:	2300      	movs	r3, #0
 801146a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801146e:	e022      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011470:	2302      	movs	r3, #2
 8011472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011476:	e01e      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011478:	2304      	movs	r3, #4
 801147a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801147e:	e01a      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011480:	2308      	movs	r3, #8
 8011482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8011486:	e016      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011488:	2310      	movs	r3, #16
 801148a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 801148e:	e012      	b.n	80114b6 <UART_SetConfig+0x2fe>
 8011490:	cfff69f3 	.word	0xcfff69f3
 8011494:	40008000 	.word	0x40008000
 8011498:	40013800 	.word	0x40013800
 801149c:	40021000 	.word	0x40021000
 80114a0:	40004400 	.word	0x40004400
 80114a4:	40004800 	.word	0x40004800
 80114a8:	40004c00 	.word	0x40004c00
 80114ac:	40005000 	.word	0x40005000
 80114b0:	2310      	movs	r3, #16
 80114b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80114b6:	697b      	ldr	r3, [r7, #20]
 80114b8:	681b      	ldr	r3, [r3, #0]
 80114ba:	4aae      	ldr	r2, [pc, #696]	; (8011774 <UART_SetConfig+0x5bc>)
 80114bc:	4293      	cmp	r3, r2
 80114be:	f040 8097 	bne.w	80115f0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80114c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80114c6:	2b08      	cmp	r3, #8
 80114c8:	d823      	bhi.n	8011512 <UART_SetConfig+0x35a>
 80114ca:	a201      	add	r2, pc, #4	; (adr r2, 80114d0 <UART_SetConfig+0x318>)
 80114cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114d0:	080114f5 	.word	0x080114f5
 80114d4:	08011513 	.word	0x08011513
 80114d8:	080114fd 	.word	0x080114fd
 80114dc:	08011513 	.word	0x08011513
 80114e0:	08011503 	.word	0x08011503
 80114e4:	08011513 	.word	0x08011513
 80114e8:	08011513 	.word	0x08011513
 80114ec:	08011513 	.word	0x08011513
 80114f0:	0801150b 	.word	0x0801150b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114f4:	f7fd f8b4 	bl	800e660 <HAL_RCC_GetPCLK1Freq>
 80114f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80114fa:	e010      	b.n	801151e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80114fc:	4b9e      	ldr	r3, [pc, #632]	; (8011778 <UART_SetConfig+0x5c0>)
 80114fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011500:	e00d      	b.n	801151e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011502:	f7fd f841 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 8011506:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011508:	e009      	b.n	801151e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801150a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801150e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011510:	e005      	b.n	801151e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8011512:	2300      	movs	r3, #0
 8011514:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011516:	2301      	movs	r3, #1
 8011518:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801151c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011520:	2b00      	cmp	r3, #0
 8011522:	f000 8130 	beq.w	8011786 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152a:	4a94      	ldr	r2, [pc, #592]	; (801177c <UART_SetConfig+0x5c4>)
 801152c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011530:	461a      	mov	r2, r3
 8011532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011534:	fbb3 f3f2 	udiv	r3, r3, r2
 8011538:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	685a      	ldr	r2, [r3, #4]
 801153e:	4613      	mov	r3, r2
 8011540:	005b      	lsls	r3, r3, #1
 8011542:	4413      	add	r3, r2
 8011544:	69ba      	ldr	r2, [r7, #24]
 8011546:	429a      	cmp	r2, r3
 8011548:	d305      	bcc.n	8011556 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011550:	69ba      	ldr	r2, [r7, #24]
 8011552:	429a      	cmp	r2, r3
 8011554:	d903      	bls.n	801155e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8011556:	2301      	movs	r3, #1
 8011558:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 801155c:	e113      	b.n	8011786 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801155e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011560:	2200      	movs	r2, #0
 8011562:	60bb      	str	r3, [r7, #8]
 8011564:	60fa      	str	r2, [r7, #12]
 8011566:	697b      	ldr	r3, [r7, #20]
 8011568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801156a:	4a84      	ldr	r2, [pc, #528]	; (801177c <UART_SetConfig+0x5c4>)
 801156c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011570:	b29b      	uxth	r3, r3
 8011572:	2200      	movs	r2, #0
 8011574:	603b      	str	r3, [r7, #0]
 8011576:	607a      	str	r2, [r7, #4]
 8011578:	e9d7 2300 	ldrd	r2, r3, [r7]
 801157c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011580:	f7ef fb8a 	bl	8000c98 <__aeabi_uldivmod>
 8011584:	4602      	mov	r2, r0
 8011586:	460b      	mov	r3, r1
 8011588:	4610      	mov	r0, r2
 801158a:	4619      	mov	r1, r3
 801158c:	f04f 0200 	mov.w	r2, #0
 8011590:	f04f 0300 	mov.w	r3, #0
 8011594:	020b      	lsls	r3, r1, #8
 8011596:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801159a:	0202      	lsls	r2, r0, #8
 801159c:	6979      	ldr	r1, [r7, #20]
 801159e:	6849      	ldr	r1, [r1, #4]
 80115a0:	0849      	lsrs	r1, r1, #1
 80115a2:	2000      	movs	r0, #0
 80115a4:	460c      	mov	r4, r1
 80115a6:	4605      	mov	r5, r0
 80115a8:	eb12 0804 	adds.w	r8, r2, r4
 80115ac:	eb43 0905 	adc.w	r9, r3, r5
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	685b      	ldr	r3, [r3, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	469a      	mov	sl, r3
 80115b8:	4693      	mov	fp, r2
 80115ba:	4652      	mov	r2, sl
 80115bc:	465b      	mov	r3, fp
 80115be:	4640      	mov	r0, r8
 80115c0:	4649      	mov	r1, r9
 80115c2:	f7ef fb69 	bl	8000c98 <__aeabi_uldivmod>
 80115c6:	4602      	mov	r2, r0
 80115c8:	460b      	mov	r3, r1
 80115ca:	4613      	mov	r3, r2
 80115cc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80115ce:	6a3b      	ldr	r3, [r7, #32]
 80115d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80115d4:	d308      	bcc.n	80115e8 <UART_SetConfig+0x430>
 80115d6:	6a3b      	ldr	r3, [r7, #32]
 80115d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80115dc:	d204      	bcs.n	80115e8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	6a3a      	ldr	r2, [r7, #32]
 80115e4:	60da      	str	r2, [r3, #12]
 80115e6:	e0ce      	b.n	8011786 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80115e8:	2301      	movs	r3, #1
 80115ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80115ee:	e0ca      	b.n	8011786 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80115f0:	697b      	ldr	r3, [r7, #20]
 80115f2:	69db      	ldr	r3, [r3, #28]
 80115f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80115f8:	d166      	bne.n	80116c8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80115fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80115fe:	2b08      	cmp	r3, #8
 8011600:	d827      	bhi.n	8011652 <UART_SetConfig+0x49a>
 8011602:	a201      	add	r2, pc, #4	; (adr r2, 8011608 <UART_SetConfig+0x450>)
 8011604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011608:	0801162d 	.word	0x0801162d
 801160c:	08011635 	.word	0x08011635
 8011610:	0801163d 	.word	0x0801163d
 8011614:	08011653 	.word	0x08011653
 8011618:	08011643 	.word	0x08011643
 801161c:	08011653 	.word	0x08011653
 8011620:	08011653 	.word	0x08011653
 8011624:	08011653 	.word	0x08011653
 8011628:	0801164b 	.word	0x0801164b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801162c:	f7fd f818 	bl	800e660 <HAL_RCC_GetPCLK1Freq>
 8011630:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011632:	e014      	b.n	801165e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011634:	f7fd f82a 	bl	800e68c <HAL_RCC_GetPCLK2Freq>
 8011638:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801163a:	e010      	b.n	801165e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801163c:	4b4e      	ldr	r3, [pc, #312]	; (8011778 <UART_SetConfig+0x5c0>)
 801163e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011640:	e00d      	b.n	801165e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011642:	f7fc ffa1 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 8011646:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011648:	e009      	b.n	801165e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801164a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801164e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011650:	e005      	b.n	801165e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8011652:	2300      	movs	r3, #0
 8011654:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011656:	2301      	movs	r3, #1
 8011658:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801165c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011660:	2b00      	cmp	r3, #0
 8011662:	f000 8090 	beq.w	8011786 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801166a:	4a44      	ldr	r2, [pc, #272]	; (801177c <UART_SetConfig+0x5c4>)
 801166c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011670:	461a      	mov	r2, r3
 8011672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011674:	fbb3 f3f2 	udiv	r3, r3, r2
 8011678:	005a      	lsls	r2, r3, #1
 801167a:	697b      	ldr	r3, [r7, #20]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	085b      	lsrs	r3, r3, #1
 8011680:	441a      	add	r2, r3
 8011682:	697b      	ldr	r3, [r7, #20]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	fbb2 f3f3 	udiv	r3, r2, r3
 801168a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801168c:	6a3b      	ldr	r3, [r7, #32]
 801168e:	2b0f      	cmp	r3, #15
 8011690:	d916      	bls.n	80116c0 <UART_SetConfig+0x508>
 8011692:	6a3b      	ldr	r3, [r7, #32]
 8011694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011698:	d212      	bcs.n	80116c0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801169a:	6a3b      	ldr	r3, [r7, #32]
 801169c:	b29b      	uxth	r3, r3
 801169e:	f023 030f 	bic.w	r3, r3, #15
 80116a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	085b      	lsrs	r3, r3, #1
 80116a8:	b29b      	uxth	r3, r3
 80116aa:	f003 0307 	and.w	r3, r3, #7
 80116ae:	b29a      	uxth	r2, r3
 80116b0:	8bfb      	ldrh	r3, [r7, #30]
 80116b2:	4313      	orrs	r3, r2
 80116b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80116b6:	697b      	ldr	r3, [r7, #20]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	8bfa      	ldrh	r2, [r7, #30]
 80116bc:	60da      	str	r2, [r3, #12]
 80116be:	e062      	b.n	8011786 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80116c0:	2301      	movs	r3, #1
 80116c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80116c6:	e05e      	b.n	8011786 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80116c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80116cc:	2b08      	cmp	r3, #8
 80116ce:	d828      	bhi.n	8011722 <UART_SetConfig+0x56a>
 80116d0:	a201      	add	r2, pc, #4	; (adr r2, 80116d8 <UART_SetConfig+0x520>)
 80116d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116d6:	bf00      	nop
 80116d8:	080116fd 	.word	0x080116fd
 80116dc:	08011705 	.word	0x08011705
 80116e0:	0801170d 	.word	0x0801170d
 80116e4:	08011723 	.word	0x08011723
 80116e8:	08011713 	.word	0x08011713
 80116ec:	08011723 	.word	0x08011723
 80116f0:	08011723 	.word	0x08011723
 80116f4:	08011723 	.word	0x08011723
 80116f8:	0801171b 	.word	0x0801171b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80116fc:	f7fc ffb0 	bl	800e660 <HAL_RCC_GetPCLK1Freq>
 8011700:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011702:	e014      	b.n	801172e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011704:	f7fc ffc2 	bl	800e68c <HAL_RCC_GetPCLK2Freq>
 8011708:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 801170a:	e010      	b.n	801172e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801170c:	4b1a      	ldr	r3, [pc, #104]	; (8011778 <UART_SetConfig+0x5c0>)
 801170e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011710:	e00d      	b.n	801172e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011712:	f7fc ff39 	bl	800e588 <HAL_RCC_GetSysClockFreq>
 8011716:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8011718:	e009      	b.n	801172e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801171a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801171e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8011720:	e005      	b.n	801172e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8011722:	2300      	movs	r3, #0
 8011724:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8011726:	2301      	movs	r3, #1
 8011728:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 801172c:	bf00      	nop
    }

    if (pclk != 0U)
 801172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011730:	2b00      	cmp	r3, #0
 8011732:	d028      	beq.n	8011786 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011734:	697b      	ldr	r3, [r7, #20]
 8011736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011738:	4a10      	ldr	r2, [pc, #64]	; (801177c <UART_SetConfig+0x5c4>)
 801173a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801173e:	461a      	mov	r2, r3
 8011740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011742:	fbb3 f2f2 	udiv	r2, r3, r2
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	085b      	lsrs	r3, r3, #1
 801174c:	441a      	add	r2, r3
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	685b      	ldr	r3, [r3, #4]
 8011752:	fbb2 f3f3 	udiv	r3, r2, r3
 8011756:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011758:	6a3b      	ldr	r3, [r7, #32]
 801175a:	2b0f      	cmp	r3, #15
 801175c:	d910      	bls.n	8011780 <UART_SetConfig+0x5c8>
 801175e:	6a3b      	ldr	r3, [r7, #32]
 8011760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011764:	d20c      	bcs.n	8011780 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011766:	6a3b      	ldr	r3, [r7, #32]
 8011768:	b29a      	uxth	r2, r3
 801176a:	697b      	ldr	r3, [r7, #20]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	60da      	str	r2, [r3, #12]
 8011770:	e009      	b.n	8011786 <UART_SetConfig+0x5ce>
 8011772:	bf00      	nop
 8011774:	40008000 	.word	0x40008000
 8011778:	00f42400 	.word	0x00f42400
 801177c:	08014e34 	.word	0x08014e34
      }
      else
      {
        ret = HAL_ERROR;
 8011780:	2301      	movs	r3, #1
 8011782:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011786:	697b      	ldr	r3, [r7, #20]
 8011788:	2201      	movs	r2, #1
 801178a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2201      	movs	r2, #1
 8011792:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	2200      	movs	r2, #0
 801179a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 801179c:	697b      	ldr	r3, [r7, #20]
 801179e:	2200      	movs	r2, #0
 80117a0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80117a2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3730      	adds	r7, #48	; 0x30
 80117aa:	46bd      	mov	sp, r7
 80117ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080117b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117bc:	f003 0301 	and.w	r3, r3, #1
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d00a      	beq.n	80117da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	685b      	ldr	r3, [r3, #4]
 80117ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	430a      	orrs	r2, r1
 80117d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117de:	f003 0302 	and.w	r3, r3, #2
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d00a      	beq.n	80117fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	685b      	ldr	r3, [r3, #4]
 80117ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	430a      	orrs	r2, r1
 80117fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011800:	f003 0304 	and.w	r3, r3, #4
 8011804:	2b00      	cmp	r3, #0
 8011806:	d00a      	beq.n	801181e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	685b      	ldr	r3, [r3, #4]
 801180e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	430a      	orrs	r2, r1
 801181c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011822:	f003 0308 	and.w	r3, r3, #8
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00a      	beq.n	8011840 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	685b      	ldr	r3, [r3, #4]
 8011830:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	430a      	orrs	r2, r1
 801183e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011844:	f003 0310 	and.w	r3, r3, #16
 8011848:	2b00      	cmp	r3, #0
 801184a:	d00a      	beq.n	8011862 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	689b      	ldr	r3, [r3, #8]
 8011852:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	681b      	ldr	r3, [r3, #0]
 801185e:	430a      	orrs	r2, r1
 8011860:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011866:	f003 0320 	and.w	r3, r3, #32
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00a      	beq.n	8011884 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	689b      	ldr	r3, [r3, #8]
 8011874:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	430a      	orrs	r2, r1
 8011882:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801188c:	2b00      	cmp	r3, #0
 801188e:	d01a      	beq.n	80118c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	430a      	orrs	r2, r1
 80118a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80118aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80118ae:	d10a      	bne.n	80118c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	681b      	ldr	r3, [r3, #0]
 80118b4:	685b      	ldr	r3, [r3, #4]
 80118b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	430a      	orrs	r2, r1
 80118c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80118ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d00a      	beq.n	80118e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	685b      	ldr	r3, [r3, #4]
 80118d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	430a      	orrs	r2, r1
 80118e6:	605a      	str	r2, [r3, #4]
  }
}
 80118e8:	bf00      	nop
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b086      	sub	sp, #24
 80118f8:	af02      	add	r7, sp, #8
 80118fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011904:	f7f9 f9c0 	bl	800ac88 <HAL_GetTick>
 8011908:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	f003 0308 	and.w	r3, r3, #8
 8011914:	2b08      	cmp	r3, #8
 8011916:	d10e      	bne.n	8011936 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011918:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801191c:	9300      	str	r3, [sp, #0]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2200      	movs	r2, #0
 8011922:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011926:	6878      	ldr	r0, [r7, #4]
 8011928:	f000 f82f 	bl	801198a <UART_WaitOnFlagUntilTimeout>
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d001      	beq.n	8011936 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011932:	2303      	movs	r3, #3
 8011934:	e025      	b.n	8011982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f003 0304 	and.w	r3, r3, #4
 8011940:	2b04      	cmp	r3, #4
 8011942:	d10e      	bne.n	8011962 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011944:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011948:	9300      	str	r3, [sp, #0]
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	2200      	movs	r2, #0
 801194e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f000 f819 	bl	801198a <UART_WaitOnFlagUntilTimeout>
 8011958:	4603      	mov	r3, r0
 801195a:	2b00      	cmp	r3, #0
 801195c:	d001      	beq.n	8011962 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801195e:	2303      	movs	r3, #3
 8011960:	e00f      	b.n	8011982 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	2220      	movs	r2, #32
 8011966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	2220      	movs	r2, #32
 801196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2200      	movs	r2, #0
 8011976:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	2200      	movs	r2, #0
 801197c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011980:	2300      	movs	r3, #0
}
 8011982:	4618      	mov	r0, r3
 8011984:	3710      	adds	r7, #16
 8011986:	46bd      	mov	sp, r7
 8011988:	bd80      	pop	{r7, pc}

0801198a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801198a:	b580      	push	{r7, lr}
 801198c:	b09c      	sub	sp, #112	; 0x70
 801198e:	af00      	add	r7, sp, #0
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	60b9      	str	r1, [r7, #8]
 8011994:	603b      	str	r3, [r7, #0]
 8011996:	4613      	mov	r3, r2
 8011998:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801199a:	e0a9      	b.n	8011af0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801199c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a2:	f000 80a5 	beq.w	8011af0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119a6:	f7f9 f96f 	bl	800ac88 <HAL_GetTick>
 80119aa:	4602      	mov	r2, r0
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	1ad3      	subs	r3, r2, r3
 80119b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80119b2:	429a      	cmp	r2, r3
 80119b4:	d302      	bcc.n	80119bc <UART_WaitOnFlagUntilTimeout+0x32>
 80119b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d140      	bne.n	8011a3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681b      	ldr	r3, [r3, #0]
 80119c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119c4:	e853 3f00 	ldrex	r3, [r3]
 80119c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80119ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80119cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80119d0:	667b      	str	r3, [r7, #100]	; 0x64
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	461a      	mov	r2, r3
 80119d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80119da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80119dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80119e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80119e2:	e841 2300 	strex	r3, r2, [r1]
 80119e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80119e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d1e6      	bne.n	80119bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	3308      	adds	r3, #8
 80119f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f8:	e853 3f00 	ldrex	r3, [r3]
 80119fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80119fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a00:	f023 0301 	bic.w	r3, r3, #1
 8011a04:	663b      	str	r3, [r7, #96]	; 0x60
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	3308      	adds	r3, #8
 8011a0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8011a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a16:	e841 2300 	strex	r3, r2, [r1]
 8011a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1e5      	bne.n	80119ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	2220      	movs	r2, #32
 8011a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	2220      	movs	r2, #32
 8011a2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2200      	movs	r2, #0
 8011a36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8011a3a:	2303      	movs	r3, #3
 8011a3c:	e069      	b.n	8011b12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	f003 0304 	and.w	r3, r3, #4
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d051      	beq.n	8011af0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a4c:	68fb      	ldr	r3, [r7, #12]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	69db      	ldr	r3, [r3, #28]
 8011a52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a5a:	d149      	bne.n	8011af0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a5c:	68fb      	ldr	r3, [r7, #12]
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	681b      	ldr	r3, [r3, #0]
 8011a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a6e:	e853 3f00 	ldrex	r3, [r3]
 8011a72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8011a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	681b      	ldr	r3, [r3, #0]
 8011a80:	461a      	mov	r2, r3
 8011a82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011a84:	637b      	str	r3, [r7, #52]	; 0x34
 8011a86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011a8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a8c:	e841 2300 	strex	r3, r2, [r1]
 8011a90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d1e6      	bne.n	8011a66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	3308      	adds	r3, #8
 8011a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	e853 3f00 	ldrex	r3, [r3]
 8011aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	f023 0301 	bic.w	r3, r3, #1
 8011aae:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	3308      	adds	r3, #8
 8011ab6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011ab8:	623a      	str	r2, [r7, #32]
 8011aba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011abc:	69f9      	ldr	r1, [r7, #28]
 8011abe:	6a3a      	ldr	r2, [r7, #32]
 8011ac0:	e841 2300 	strex	r3, r2, [r1]
 8011ac4:	61bb      	str	r3, [r7, #24]
   return(result);
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d1e5      	bne.n	8011a98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2220      	movs	r2, #32
 8011ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2220      	movs	r2, #32
 8011ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	2220      	movs	r2, #32
 8011ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8011aec:	2303      	movs	r3, #3
 8011aee:	e010      	b.n	8011b12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	69da      	ldr	r2, [r3, #28]
 8011af6:	68bb      	ldr	r3, [r7, #8]
 8011af8:	4013      	ands	r3, r2
 8011afa:	68ba      	ldr	r2, [r7, #8]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	bf0c      	ite	eq
 8011b00:	2301      	moveq	r3, #1
 8011b02:	2300      	movne	r3, #0
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	461a      	mov	r2, r3
 8011b08:	79fb      	ldrb	r3, [r7, #7]
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	f43f af46 	beq.w	801199c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011b10:	2300      	movs	r3, #0
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3770      	adds	r7, #112	; 0x70
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}

08011b1a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b1a:	b480      	push	{r7}
 8011b1c:	b085      	sub	sp, #20
 8011b1e:	af00      	add	r7, sp, #0
 8011b20:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b28:	2b01      	cmp	r3, #1
 8011b2a:	d101      	bne.n	8011b30 <HAL_UARTEx_DisableFifoMode+0x16>
 8011b2c:	2302      	movs	r3, #2
 8011b2e:	e027      	b.n	8011b80 <HAL_UARTEx_DisableFifoMode+0x66>
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	2201      	movs	r2, #1
 8011b34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	2224      	movs	r2, #36	; 0x24
 8011b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b40:	687b      	ldr	r3, [r7, #4]
 8011b42:	681b      	ldr	r3, [r3, #0]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	681a      	ldr	r2, [r3, #0]
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f022 0201 	bic.w	r2, r2, #1
 8011b56:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011b5e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2200      	movs	r2, #0
 8011b64:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	68fa      	ldr	r2, [r7, #12]
 8011b6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2220      	movs	r2, #32
 8011b72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2200      	movs	r2, #0
 8011b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3714      	adds	r7, #20
 8011b84:	46bd      	mov	sp, r7
 8011b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b8a:	4770      	bx	lr

08011b8c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b084      	sub	sp, #16
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	6078      	str	r0, [r7, #4]
 8011b94:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d101      	bne.n	8011ba4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011ba0:	2302      	movs	r3, #2
 8011ba2:	e02d      	b.n	8011c00 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2224      	movs	r2, #36	; 0x24
 8011bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	681a      	ldr	r2, [r3, #0]
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	f022 0201 	bic.w	r2, r2, #1
 8011bca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	689b      	ldr	r3, [r3, #8]
 8011bd2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	683a      	ldr	r2, [r7, #0]
 8011bdc:	430a      	orrs	r2, r1
 8011bde:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011be0:	6878      	ldr	r0, [r7, #4]
 8011be2:	f000 f84f 	bl	8011c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	68fa      	ldr	r2, [r7, #12]
 8011bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	2220      	movs	r2, #32
 8011bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3710      	adds	r7, #16
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}

08011c08 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b084      	sub	sp, #16
 8011c0c:	af00      	add	r7, sp, #0
 8011c0e:	6078      	str	r0, [r7, #4]
 8011c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d101      	bne.n	8011c20 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c1c:	2302      	movs	r3, #2
 8011c1e:	e02d      	b.n	8011c7c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	2201      	movs	r2, #1
 8011c24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2224      	movs	r2, #36	; 0x24
 8011c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	681a      	ldr	r2, [r3, #0]
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	f022 0201 	bic.w	r2, r2, #1
 8011c46:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	689b      	ldr	r3, [r3, #8]
 8011c4e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	683a      	ldr	r2, [r7, #0]
 8011c58:	430a      	orrs	r2, r1
 8011c5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c5c:	6878      	ldr	r0, [r7, #4]
 8011c5e:	f000 f811 	bl	8011c84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	68fa      	ldr	r2, [r7, #12]
 8011c68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	2220      	movs	r2, #32
 8011c6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	2200      	movs	r2, #0
 8011c76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011c7a:	2300      	movs	r3, #0
}
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	3710      	adds	r7, #16
 8011c80:	46bd      	mov	sp, r7
 8011c82:	bd80      	pop	{r7, pc}

08011c84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011c84:	b480      	push	{r7}
 8011c86:	b085      	sub	sp, #20
 8011c88:	af00      	add	r7, sp, #0
 8011c8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d108      	bne.n	8011ca6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	2201      	movs	r2, #1
 8011c98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2201      	movs	r2, #1
 8011ca0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011ca4:	e031      	b.n	8011d0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011ca6:	2308      	movs	r3, #8
 8011ca8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011caa:	2308      	movs	r3, #8
 8011cac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	0e5b      	lsrs	r3, r3, #25
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	f003 0307 	and.w	r3, r3, #7
 8011cbc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	0f5b      	lsrs	r3, r3, #29
 8011cc6:	b2db      	uxtb	r3, r3
 8011cc8:	f003 0307 	and.w	r3, r3, #7
 8011ccc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011cce:	7bbb      	ldrb	r3, [r7, #14]
 8011cd0:	7b3a      	ldrb	r2, [r7, #12]
 8011cd2:	4911      	ldr	r1, [pc, #68]	; (8011d18 <UARTEx_SetNbDataToProcess+0x94>)
 8011cd4:	5c8a      	ldrb	r2, [r1, r2]
 8011cd6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011cda:	7b3a      	ldrb	r2, [r7, #12]
 8011cdc:	490f      	ldr	r1, [pc, #60]	; (8011d1c <UARTEx_SetNbDataToProcess+0x98>)
 8011cde:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ce0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ce4:	b29a      	uxth	r2, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cec:	7bfb      	ldrb	r3, [r7, #15]
 8011cee:	7b7a      	ldrb	r2, [r7, #13]
 8011cf0:	4909      	ldr	r1, [pc, #36]	; (8011d18 <UARTEx_SetNbDataToProcess+0x94>)
 8011cf2:	5c8a      	ldrb	r2, [r1, r2]
 8011cf4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011cf8:	7b7a      	ldrb	r2, [r7, #13]
 8011cfa:	4908      	ldr	r1, [pc, #32]	; (8011d1c <UARTEx_SetNbDataToProcess+0x98>)
 8011cfc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011cfe:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d0a:	bf00      	nop
 8011d0c:	3714      	adds	r7, #20
 8011d0e:	46bd      	mov	sp, r7
 8011d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d14:	4770      	bx	lr
 8011d16:	bf00      	nop
 8011d18:	08014e4c 	.word	0x08014e4c
 8011d1c:	08014e54 	.word	0x08014e54

08011d20 <__errno>:
 8011d20:	4b01      	ldr	r3, [pc, #4]	; (8011d28 <__errno+0x8>)
 8011d22:	6818      	ldr	r0, [r3, #0]
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	2000000c 	.word	0x2000000c

08011d2c <__libc_init_array>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	4d0d      	ldr	r5, [pc, #52]	; (8011d64 <__libc_init_array+0x38>)
 8011d30:	4c0d      	ldr	r4, [pc, #52]	; (8011d68 <__libc_init_array+0x3c>)
 8011d32:	1b64      	subs	r4, r4, r5
 8011d34:	10a4      	asrs	r4, r4, #2
 8011d36:	2600      	movs	r6, #0
 8011d38:	42a6      	cmp	r6, r4
 8011d3a:	d109      	bne.n	8011d50 <__libc_init_array+0x24>
 8011d3c:	4d0b      	ldr	r5, [pc, #44]	; (8011d6c <__libc_init_array+0x40>)
 8011d3e:	4c0c      	ldr	r4, [pc, #48]	; (8011d70 <__libc_init_array+0x44>)
 8011d40:	f002 ffb0 	bl	8014ca4 <_init>
 8011d44:	1b64      	subs	r4, r4, r5
 8011d46:	10a4      	asrs	r4, r4, #2
 8011d48:	2600      	movs	r6, #0
 8011d4a:	42a6      	cmp	r6, r4
 8011d4c:	d105      	bne.n	8011d5a <__libc_init_array+0x2e>
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d54:	4798      	blx	r3
 8011d56:	3601      	adds	r6, #1
 8011d58:	e7ee      	b.n	8011d38 <__libc_init_array+0xc>
 8011d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d5e:	4798      	blx	r3
 8011d60:	3601      	adds	r6, #1
 8011d62:	e7f2      	b.n	8011d4a <__libc_init_array+0x1e>
 8011d64:	08015270 	.word	0x08015270
 8011d68:	08015270 	.word	0x08015270
 8011d6c:	08015270 	.word	0x08015270
 8011d70:	08015274 	.word	0x08015274

08011d74 <memcpy>:
 8011d74:	440a      	add	r2, r1
 8011d76:	4291      	cmp	r1, r2
 8011d78:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d7c:	d100      	bne.n	8011d80 <memcpy+0xc>
 8011d7e:	4770      	bx	lr
 8011d80:	b510      	push	{r4, lr}
 8011d82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d8a:	4291      	cmp	r1, r2
 8011d8c:	d1f9      	bne.n	8011d82 <memcpy+0xe>
 8011d8e:	bd10      	pop	{r4, pc}

08011d90 <memset>:
 8011d90:	4402      	add	r2, r0
 8011d92:	4603      	mov	r3, r0
 8011d94:	4293      	cmp	r3, r2
 8011d96:	d100      	bne.n	8011d9a <memset+0xa>
 8011d98:	4770      	bx	lr
 8011d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8011d9e:	e7f9      	b.n	8011d94 <memset+0x4>

08011da0 <__cvt>:
 8011da0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011da4:	ec55 4b10 	vmov	r4, r5, d0
 8011da8:	2d00      	cmp	r5, #0
 8011daa:	460e      	mov	r6, r1
 8011dac:	4619      	mov	r1, r3
 8011dae:	462b      	mov	r3, r5
 8011db0:	bfbb      	ittet	lt
 8011db2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011db6:	461d      	movlt	r5, r3
 8011db8:	2300      	movge	r3, #0
 8011dba:	232d      	movlt	r3, #45	; 0x2d
 8011dbc:	700b      	strb	r3, [r1, #0]
 8011dbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011dc0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011dc4:	4691      	mov	r9, r2
 8011dc6:	f023 0820 	bic.w	r8, r3, #32
 8011dca:	bfbc      	itt	lt
 8011dcc:	4622      	movlt	r2, r4
 8011dce:	4614      	movlt	r4, r2
 8011dd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011dd4:	d005      	beq.n	8011de2 <__cvt+0x42>
 8011dd6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011dda:	d100      	bne.n	8011dde <__cvt+0x3e>
 8011ddc:	3601      	adds	r6, #1
 8011dde:	2102      	movs	r1, #2
 8011de0:	e000      	b.n	8011de4 <__cvt+0x44>
 8011de2:	2103      	movs	r1, #3
 8011de4:	ab03      	add	r3, sp, #12
 8011de6:	9301      	str	r3, [sp, #4]
 8011de8:	ab02      	add	r3, sp, #8
 8011dea:	9300      	str	r3, [sp, #0]
 8011dec:	ec45 4b10 	vmov	d0, r4, r5
 8011df0:	4653      	mov	r3, sl
 8011df2:	4632      	mov	r2, r6
 8011df4:	f000 fdb8 	bl	8012968 <_dtoa_r>
 8011df8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011dfc:	4607      	mov	r7, r0
 8011dfe:	d102      	bne.n	8011e06 <__cvt+0x66>
 8011e00:	f019 0f01 	tst.w	r9, #1
 8011e04:	d022      	beq.n	8011e4c <__cvt+0xac>
 8011e06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011e0a:	eb07 0906 	add.w	r9, r7, r6
 8011e0e:	d110      	bne.n	8011e32 <__cvt+0x92>
 8011e10:	783b      	ldrb	r3, [r7, #0]
 8011e12:	2b30      	cmp	r3, #48	; 0x30
 8011e14:	d10a      	bne.n	8011e2c <__cvt+0x8c>
 8011e16:	2200      	movs	r2, #0
 8011e18:	2300      	movs	r3, #0
 8011e1a:	4620      	mov	r0, r4
 8011e1c:	4629      	mov	r1, r5
 8011e1e:	f7ee fe7b 	bl	8000b18 <__aeabi_dcmpeq>
 8011e22:	b918      	cbnz	r0, 8011e2c <__cvt+0x8c>
 8011e24:	f1c6 0601 	rsb	r6, r6, #1
 8011e28:	f8ca 6000 	str.w	r6, [sl]
 8011e2c:	f8da 3000 	ldr.w	r3, [sl]
 8011e30:	4499      	add	r9, r3
 8011e32:	2200      	movs	r2, #0
 8011e34:	2300      	movs	r3, #0
 8011e36:	4620      	mov	r0, r4
 8011e38:	4629      	mov	r1, r5
 8011e3a:	f7ee fe6d 	bl	8000b18 <__aeabi_dcmpeq>
 8011e3e:	b108      	cbz	r0, 8011e44 <__cvt+0xa4>
 8011e40:	f8cd 900c 	str.w	r9, [sp, #12]
 8011e44:	2230      	movs	r2, #48	; 0x30
 8011e46:	9b03      	ldr	r3, [sp, #12]
 8011e48:	454b      	cmp	r3, r9
 8011e4a:	d307      	bcc.n	8011e5c <__cvt+0xbc>
 8011e4c:	9b03      	ldr	r3, [sp, #12]
 8011e4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011e50:	1bdb      	subs	r3, r3, r7
 8011e52:	4638      	mov	r0, r7
 8011e54:	6013      	str	r3, [r2, #0]
 8011e56:	b004      	add	sp, #16
 8011e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e5c:	1c59      	adds	r1, r3, #1
 8011e5e:	9103      	str	r1, [sp, #12]
 8011e60:	701a      	strb	r2, [r3, #0]
 8011e62:	e7f0      	b.n	8011e46 <__cvt+0xa6>

08011e64 <__exponent>:
 8011e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e66:	4603      	mov	r3, r0
 8011e68:	2900      	cmp	r1, #0
 8011e6a:	bfb8      	it	lt
 8011e6c:	4249      	neglt	r1, r1
 8011e6e:	f803 2b02 	strb.w	r2, [r3], #2
 8011e72:	bfb4      	ite	lt
 8011e74:	222d      	movlt	r2, #45	; 0x2d
 8011e76:	222b      	movge	r2, #43	; 0x2b
 8011e78:	2909      	cmp	r1, #9
 8011e7a:	7042      	strb	r2, [r0, #1]
 8011e7c:	dd2a      	ble.n	8011ed4 <__exponent+0x70>
 8011e7e:	f10d 0407 	add.w	r4, sp, #7
 8011e82:	46a4      	mov	ip, r4
 8011e84:	270a      	movs	r7, #10
 8011e86:	46a6      	mov	lr, r4
 8011e88:	460a      	mov	r2, r1
 8011e8a:	fb91 f6f7 	sdiv	r6, r1, r7
 8011e8e:	fb07 1516 	mls	r5, r7, r6, r1
 8011e92:	3530      	adds	r5, #48	; 0x30
 8011e94:	2a63      	cmp	r2, #99	; 0x63
 8011e96:	f104 34ff 	add.w	r4, r4, #4294967295
 8011e9a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8011e9e:	4631      	mov	r1, r6
 8011ea0:	dcf1      	bgt.n	8011e86 <__exponent+0x22>
 8011ea2:	3130      	adds	r1, #48	; 0x30
 8011ea4:	f1ae 0502 	sub.w	r5, lr, #2
 8011ea8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8011eac:	1c44      	adds	r4, r0, #1
 8011eae:	4629      	mov	r1, r5
 8011eb0:	4561      	cmp	r1, ip
 8011eb2:	d30a      	bcc.n	8011eca <__exponent+0x66>
 8011eb4:	f10d 0209 	add.w	r2, sp, #9
 8011eb8:	eba2 020e 	sub.w	r2, r2, lr
 8011ebc:	4565      	cmp	r5, ip
 8011ebe:	bf88      	it	hi
 8011ec0:	2200      	movhi	r2, #0
 8011ec2:	4413      	add	r3, r2
 8011ec4:	1a18      	subs	r0, r3, r0
 8011ec6:	b003      	add	sp, #12
 8011ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011ece:	f804 2f01 	strb.w	r2, [r4, #1]!
 8011ed2:	e7ed      	b.n	8011eb0 <__exponent+0x4c>
 8011ed4:	2330      	movs	r3, #48	; 0x30
 8011ed6:	3130      	adds	r1, #48	; 0x30
 8011ed8:	7083      	strb	r3, [r0, #2]
 8011eda:	70c1      	strb	r1, [r0, #3]
 8011edc:	1d03      	adds	r3, r0, #4
 8011ede:	e7f1      	b.n	8011ec4 <__exponent+0x60>

08011ee0 <_printf_float>:
 8011ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ee4:	ed2d 8b02 	vpush	{d8}
 8011ee8:	b08d      	sub	sp, #52	; 0x34
 8011eea:	460c      	mov	r4, r1
 8011eec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011ef0:	4616      	mov	r6, r2
 8011ef2:	461f      	mov	r7, r3
 8011ef4:	4605      	mov	r5, r0
 8011ef6:	f001 fcdd 	bl	80138b4 <_localeconv_r>
 8011efa:	f8d0 a000 	ldr.w	sl, [r0]
 8011efe:	4650      	mov	r0, sl
 8011f00:	f7ee f98e 	bl	8000220 <strlen>
 8011f04:	2300      	movs	r3, #0
 8011f06:	930a      	str	r3, [sp, #40]	; 0x28
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	9305      	str	r3, [sp, #20]
 8011f0c:	f8d8 3000 	ldr.w	r3, [r8]
 8011f10:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011f14:	3307      	adds	r3, #7
 8011f16:	f023 0307 	bic.w	r3, r3, #7
 8011f1a:	f103 0208 	add.w	r2, r3, #8
 8011f1e:	f8c8 2000 	str.w	r2, [r8]
 8011f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f26:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011f2a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011f2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8011f32:	9307      	str	r3, [sp, #28]
 8011f34:	f8cd 8018 	str.w	r8, [sp, #24]
 8011f38:	ee08 0a10 	vmov	s16, r0
 8011f3c:	4b9f      	ldr	r3, [pc, #636]	; (80121bc <_printf_float+0x2dc>)
 8011f3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f42:	f04f 32ff 	mov.w	r2, #4294967295
 8011f46:	f7ee fe19 	bl	8000b7c <__aeabi_dcmpun>
 8011f4a:	bb88      	cbnz	r0, 8011fb0 <_printf_float+0xd0>
 8011f4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f50:	4b9a      	ldr	r3, [pc, #616]	; (80121bc <_printf_float+0x2dc>)
 8011f52:	f04f 32ff 	mov.w	r2, #4294967295
 8011f56:	f7ee fdf3 	bl	8000b40 <__aeabi_dcmple>
 8011f5a:	bb48      	cbnz	r0, 8011fb0 <_printf_float+0xd0>
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	2300      	movs	r3, #0
 8011f60:	4640      	mov	r0, r8
 8011f62:	4649      	mov	r1, r9
 8011f64:	f7ee fde2 	bl	8000b2c <__aeabi_dcmplt>
 8011f68:	b110      	cbz	r0, 8011f70 <_printf_float+0x90>
 8011f6a:	232d      	movs	r3, #45	; 0x2d
 8011f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011f70:	4b93      	ldr	r3, [pc, #588]	; (80121c0 <_printf_float+0x2e0>)
 8011f72:	4894      	ldr	r0, [pc, #592]	; (80121c4 <_printf_float+0x2e4>)
 8011f74:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011f78:	bf94      	ite	ls
 8011f7a:	4698      	movls	r8, r3
 8011f7c:	4680      	movhi	r8, r0
 8011f7e:	2303      	movs	r3, #3
 8011f80:	6123      	str	r3, [r4, #16]
 8011f82:	9b05      	ldr	r3, [sp, #20]
 8011f84:	f023 0204 	bic.w	r2, r3, #4
 8011f88:	6022      	str	r2, [r4, #0]
 8011f8a:	f04f 0900 	mov.w	r9, #0
 8011f8e:	9700      	str	r7, [sp, #0]
 8011f90:	4633      	mov	r3, r6
 8011f92:	aa0b      	add	r2, sp, #44	; 0x2c
 8011f94:	4621      	mov	r1, r4
 8011f96:	4628      	mov	r0, r5
 8011f98:	f000 f9d8 	bl	801234c <_printf_common>
 8011f9c:	3001      	adds	r0, #1
 8011f9e:	f040 8090 	bne.w	80120c2 <_printf_float+0x1e2>
 8011fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8011fa6:	b00d      	add	sp, #52	; 0x34
 8011fa8:	ecbd 8b02 	vpop	{d8}
 8011fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fb0:	4642      	mov	r2, r8
 8011fb2:	464b      	mov	r3, r9
 8011fb4:	4640      	mov	r0, r8
 8011fb6:	4649      	mov	r1, r9
 8011fb8:	f7ee fde0 	bl	8000b7c <__aeabi_dcmpun>
 8011fbc:	b140      	cbz	r0, 8011fd0 <_printf_float+0xf0>
 8011fbe:	464b      	mov	r3, r9
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	bfbc      	itt	lt
 8011fc4:	232d      	movlt	r3, #45	; 0x2d
 8011fc6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011fca:	487f      	ldr	r0, [pc, #508]	; (80121c8 <_printf_float+0x2e8>)
 8011fcc:	4b7f      	ldr	r3, [pc, #508]	; (80121cc <_printf_float+0x2ec>)
 8011fce:	e7d1      	b.n	8011f74 <_printf_float+0x94>
 8011fd0:	6863      	ldr	r3, [r4, #4]
 8011fd2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8011fd6:	9206      	str	r2, [sp, #24]
 8011fd8:	1c5a      	adds	r2, r3, #1
 8011fda:	d13f      	bne.n	801205c <_printf_float+0x17c>
 8011fdc:	2306      	movs	r3, #6
 8011fde:	6063      	str	r3, [r4, #4]
 8011fe0:	9b05      	ldr	r3, [sp, #20]
 8011fe2:	6861      	ldr	r1, [r4, #4]
 8011fe4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011fe8:	2300      	movs	r3, #0
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	ab0a      	add	r3, sp, #40	; 0x28
 8011fee:	e9cd b301 	strd	fp, r3, [sp, #4]
 8011ff2:	ab09      	add	r3, sp, #36	; 0x24
 8011ff4:	ec49 8b10 	vmov	d0, r8, r9
 8011ff8:	9300      	str	r3, [sp, #0]
 8011ffa:	6022      	str	r2, [r4, #0]
 8011ffc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012000:	4628      	mov	r0, r5
 8012002:	f7ff fecd 	bl	8011da0 <__cvt>
 8012006:	9b06      	ldr	r3, [sp, #24]
 8012008:	9909      	ldr	r1, [sp, #36]	; 0x24
 801200a:	2b47      	cmp	r3, #71	; 0x47
 801200c:	4680      	mov	r8, r0
 801200e:	d108      	bne.n	8012022 <_printf_float+0x142>
 8012010:	1cc8      	adds	r0, r1, #3
 8012012:	db02      	blt.n	801201a <_printf_float+0x13a>
 8012014:	6863      	ldr	r3, [r4, #4]
 8012016:	4299      	cmp	r1, r3
 8012018:	dd41      	ble.n	801209e <_printf_float+0x1be>
 801201a:	f1ab 0b02 	sub.w	fp, fp, #2
 801201e:	fa5f fb8b 	uxtb.w	fp, fp
 8012022:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012026:	d820      	bhi.n	801206a <_printf_float+0x18a>
 8012028:	3901      	subs	r1, #1
 801202a:	465a      	mov	r2, fp
 801202c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012030:	9109      	str	r1, [sp, #36]	; 0x24
 8012032:	f7ff ff17 	bl	8011e64 <__exponent>
 8012036:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012038:	1813      	adds	r3, r2, r0
 801203a:	2a01      	cmp	r2, #1
 801203c:	4681      	mov	r9, r0
 801203e:	6123      	str	r3, [r4, #16]
 8012040:	dc02      	bgt.n	8012048 <_printf_float+0x168>
 8012042:	6822      	ldr	r2, [r4, #0]
 8012044:	07d2      	lsls	r2, r2, #31
 8012046:	d501      	bpl.n	801204c <_printf_float+0x16c>
 8012048:	3301      	adds	r3, #1
 801204a:	6123      	str	r3, [r4, #16]
 801204c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012050:	2b00      	cmp	r3, #0
 8012052:	d09c      	beq.n	8011f8e <_printf_float+0xae>
 8012054:	232d      	movs	r3, #45	; 0x2d
 8012056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801205a:	e798      	b.n	8011f8e <_printf_float+0xae>
 801205c:	9a06      	ldr	r2, [sp, #24]
 801205e:	2a47      	cmp	r2, #71	; 0x47
 8012060:	d1be      	bne.n	8011fe0 <_printf_float+0x100>
 8012062:	2b00      	cmp	r3, #0
 8012064:	d1bc      	bne.n	8011fe0 <_printf_float+0x100>
 8012066:	2301      	movs	r3, #1
 8012068:	e7b9      	b.n	8011fde <_printf_float+0xfe>
 801206a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801206e:	d118      	bne.n	80120a2 <_printf_float+0x1c2>
 8012070:	2900      	cmp	r1, #0
 8012072:	6863      	ldr	r3, [r4, #4]
 8012074:	dd0b      	ble.n	801208e <_printf_float+0x1ae>
 8012076:	6121      	str	r1, [r4, #16]
 8012078:	b913      	cbnz	r3, 8012080 <_printf_float+0x1a0>
 801207a:	6822      	ldr	r2, [r4, #0]
 801207c:	07d0      	lsls	r0, r2, #31
 801207e:	d502      	bpl.n	8012086 <_printf_float+0x1a6>
 8012080:	3301      	adds	r3, #1
 8012082:	440b      	add	r3, r1
 8012084:	6123      	str	r3, [r4, #16]
 8012086:	65a1      	str	r1, [r4, #88]	; 0x58
 8012088:	f04f 0900 	mov.w	r9, #0
 801208c:	e7de      	b.n	801204c <_printf_float+0x16c>
 801208e:	b913      	cbnz	r3, 8012096 <_printf_float+0x1b6>
 8012090:	6822      	ldr	r2, [r4, #0]
 8012092:	07d2      	lsls	r2, r2, #31
 8012094:	d501      	bpl.n	801209a <_printf_float+0x1ba>
 8012096:	3302      	adds	r3, #2
 8012098:	e7f4      	b.n	8012084 <_printf_float+0x1a4>
 801209a:	2301      	movs	r3, #1
 801209c:	e7f2      	b.n	8012084 <_printf_float+0x1a4>
 801209e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80120a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120a4:	4299      	cmp	r1, r3
 80120a6:	db05      	blt.n	80120b4 <_printf_float+0x1d4>
 80120a8:	6823      	ldr	r3, [r4, #0]
 80120aa:	6121      	str	r1, [r4, #16]
 80120ac:	07d8      	lsls	r0, r3, #31
 80120ae:	d5ea      	bpl.n	8012086 <_printf_float+0x1a6>
 80120b0:	1c4b      	adds	r3, r1, #1
 80120b2:	e7e7      	b.n	8012084 <_printf_float+0x1a4>
 80120b4:	2900      	cmp	r1, #0
 80120b6:	bfd4      	ite	le
 80120b8:	f1c1 0202 	rsble	r2, r1, #2
 80120bc:	2201      	movgt	r2, #1
 80120be:	4413      	add	r3, r2
 80120c0:	e7e0      	b.n	8012084 <_printf_float+0x1a4>
 80120c2:	6823      	ldr	r3, [r4, #0]
 80120c4:	055a      	lsls	r2, r3, #21
 80120c6:	d407      	bmi.n	80120d8 <_printf_float+0x1f8>
 80120c8:	6923      	ldr	r3, [r4, #16]
 80120ca:	4642      	mov	r2, r8
 80120cc:	4631      	mov	r1, r6
 80120ce:	4628      	mov	r0, r5
 80120d0:	47b8      	blx	r7
 80120d2:	3001      	adds	r0, #1
 80120d4:	d12c      	bne.n	8012130 <_printf_float+0x250>
 80120d6:	e764      	b.n	8011fa2 <_printf_float+0xc2>
 80120d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80120dc:	f240 80e0 	bls.w	80122a0 <_printf_float+0x3c0>
 80120e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80120e4:	2200      	movs	r2, #0
 80120e6:	2300      	movs	r3, #0
 80120e8:	f7ee fd16 	bl	8000b18 <__aeabi_dcmpeq>
 80120ec:	2800      	cmp	r0, #0
 80120ee:	d034      	beq.n	801215a <_printf_float+0x27a>
 80120f0:	4a37      	ldr	r2, [pc, #220]	; (80121d0 <_printf_float+0x2f0>)
 80120f2:	2301      	movs	r3, #1
 80120f4:	4631      	mov	r1, r6
 80120f6:	4628      	mov	r0, r5
 80120f8:	47b8      	blx	r7
 80120fa:	3001      	adds	r0, #1
 80120fc:	f43f af51 	beq.w	8011fa2 <_printf_float+0xc2>
 8012100:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012104:	429a      	cmp	r2, r3
 8012106:	db02      	blt.n	801210e <_printf_float+0x22e>
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	07d8      	lsls	r0, r3, #31
 801210c:	d510      	bpl.n	8012130 <_printf_float+0x250>
 801210e:	ee18 3a10 	vmov	r3, s16
 8012112:	4652      	mov	r2, sl
 8012114:	4631      	mov	r1, r6
 8012116:	4628      	mov	r0, r5
 8012118:	47b8      	blx	r7
 801211a:	3001      	adds	r0, #1
 801211c:	f43f af41 	beq.w	8011fa2 <_printf_float+0xc2>
 8012120:	f04f 0800 	mov.w	r8, #0
 8012124:	f104 091a 	add.w	r9, r4, #26
 8012128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801212a:	3b01      	subs	r3, #1
 801212c:	4543      	cmp	r3, r8
 801212e:	dc09      	bgt.n	8012144 <_printf_float+0x264>
 8012130:	6823      	ldr	r3, [r4, #0]
 8012132:	079b      	lsls	r3, r3, #30
 8012134:	f100 8105 	bmi.w	8012342 <_printf_float+0x462>
 8012138:	68e0      	ldr	r0, [r4, #12]
 801213a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801213c:	4298      	cmp	r0, r3
 801213e:	bfb8      	it	lt
 8012140:	4618      	movlt	r0, r3
 8012142:	e730      	b.n	8011fa6 <_printf_float+0xc6>
 8012144:	2301      	movs	r3, #1
 8012146:	464a      	mov	r2, r9
 8012148:	4631      	mov	r1, r6
 801214a:	4628      	mov	r0, r5
 801214c:	47b8      	blx	r7
 801214e:	3001      	adds	r0, #1
 8012150:	f43f af27 	beq.w	8011fa2 <_printf_float+0xc2>
 8012154:	f108 0801 	add.w	r8, r8, #1
 8012158:	e7e6      	b.n	8012128 <_printf_float+0x248>
 801215a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801215c:	2b00      	cmp	r3, #0
 801215e:	dc39      	bgt.n	80121d4 <_printf_float+0x2f4>
 8012160:	4a1b      	ldr	r2, [pc, #108]	; (80121d0 <_printf_float+0x2f0>)
 8012162:	2301      	movs	r3, #1
 8012164:	4631      	mov	r1, r6
 8012166:	4628      	mov	r0, r5
 8012168:	47b8      	blx	r7
 801216a:	3001      	adds	r0, #1
 801216c:	f43f af19 	beq.w	8011fa2 <_printf_float+0xc2>
 8012170:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012174:	4313      	orrs	r3, r2
 8012176:	d102      	bne.n	801217e <_printf_float+0x29e>
 8012178:	6823      	ldr	r3, [r4, #0]
 801217a:	07d9      	lsls	r1, r3, #31
 801217c:	d5d8      	bpl.n	8012130 <_printf_float+0x250>
 801217e:	ee18 3a10 	vmov	r3, s16
 8012182:	4652      	mov	r2, sl
 8012184:	4631      	mov	r1, r6
 8012186:	4628      	mov	r0, r5
 8012188:	47b8      	blx	r7
 801218a:	3001      	adds	r0, #1
 801218c:	f43f af09 	beq.w	8011fa2 <_printf_float+0xc2>
 8012190:	f04f 0900 	mov.w	r9, #0
 8012194:	f104 0a1a 	add.w	sl, r4, #26
 8012198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801219a:	425b      	negs	r3, r3
 801219c:	454b      	cmp	r3, r9
 801219e:	dc01      	bgt.n	80121a4 <_printf_float+0x2c4>
 80121a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121a2:	e792      	b.n	80120ca <_printf_float+0x1ea>
 80121a4:	2301      	movs	r3, #1
 80121a6:	4652      	mov	r2, sl
 80121a8:	4631      	mov	r1, r6
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b8      	blx	r7
 80121ae:	3001      	adds	r0, #1
 80121b0:	f43f aef7 	beq.w	8011fa2 <_printf_float+0xc2>
 80121b4:	f109 0901 	add.w	r9, r9, #1
 80121b8:	e7ee      	b.n	8012198 <_printf_float+0x2b8>
 80121ba:	bf00      	nop
 80121bc:	7fefffff 	.word	0x7fefffff
 80121c0:	08014e60 	.word	0x08014e60
 80121c4:	08014e64 	.word	0x08014e64
 80121c8:	08014e6c 	.word	0x08014e6c
 80121cc:	08014e68 	.word	0x08014e68
 80121d0:	08014e70 	.word	0x08014e70
 80121d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80121d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121d8:	429a      	cmp	r2, r3
 80121da:	bfa8      	it	ge
 80121dc:	461a      	movge	r2, r3
 80121de:	2a00      	cmp	r2, #0
 80121e0:	4691      	mov	r9, r2
 80121e2:	dc37      	bgt.n	8012254 <_printf_float+0x374>
 80121e4:	f04f 0b00 	mov.w	fp, #0
 80121e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121ec:	f104 021a 	add.w	r2, r4, #26
 80121f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80121f2:	9305      	str	r3, [sp, #20]
 80121f4:	eba3 0309 	sub.w	r3, r3, r9
 80121f8:	455b      	cmp	r3, fp
 80121fa:	dc33      	bgt.n	8012264 <_printf_float+0x384>
 80121fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012200:	429a      	cmp	r2, r3
 8012202:	db3b      	blt.n	801227c <_printf_float+0x39c>
 8012204:	6823      	ldr	r3, [r4, #0]
 8012206:	07da      	lsls	r2, r3, #31
 8012208:	d438      	bmi.n	801227c <_printf_float+0x39c>
 801220a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801220c:	9a05      	ldr	r2, [sp, #20]
 801220e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012210:	1a9a      	subs	r2, r3, r2
 8012212:	eba3 0901 	sub.w	r9, r3, r1
 8012216:	4591      	cmp	r9, r2
 8012218:	bfa8      	it	ge
 801221a:	4691      	movge	r9, r2
 801221c:	f1b9 0f00 	cmp.w	r9, #0
 8012220:	dc35      	bgt.n	801228e <_printf_float+0x3ae>
 8012222:	f04f 0800 	mov.w	r8, #0
 8012226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801222a:	f104 0a1a 	add.w	sl, r4, #26
 801222e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012232:	1a9b      	subs	r3, r3, r2
 8012234:	eba3 0309 	sub.w	r3, r3, r9
 8012238:	4543      	cmp	r3, r8
 801223a:	f77f af79 	ble.w	8012130 <_printf_float+0x250>
 801223e:	2301      	movs	r3, #1
 8012240:	4652      	mov	r2, sl
 8012242:	4631      	mov	r1, r6
 8012244:	4628      	mov	r0, r5
 8012246:	47b8      	blx	r7
 8012248:	3001      	adds	r0, #1
 801224a:	f43f aeaa 	beq.w	8011fa2 <_printf_float+0xc2>
 801224e:	f108 0801 	add.w	r8, r8, #1
 8012252:	e7ec      	b.n	801222e <_printf_float+0x34e>
 8012254:	4613      	mov	r3, r2
 8012256:	4631      	mov	r1, r6
 8012258:	4642      	mov	r2, r8
 801225a:	4628      	mov	r0, r5
 801225c:	47b8      	blx	r7
 801225e:	3001      	adds	r0, #1
 8012260:	d1c0      	bne.n	80121e4 <_printf_float+0x304>
 8012262:	e69e      	b.n	8011fa2 <_printf_float+0xc2>
 8012264:	2301      	movs	r3, #1
 8012266:	4631      	mov	r1, r6
 8012268:	4628      	mov	r0, r5
 801226a:	9205      	str	r2, [sp, #20]
 801226c:	47b8      	blx	r7
 801226e:	3001      	adds	r0, #1
 8012270:	f43f ae97 	beq.w	8011fa2 <_printf_float+0xc2>
 8012274:	9a05      	ldr	r2, [sp, #20]
 8012276:	f10b 0b01 	add.w	fp, fp, #1
 801227a:	e7b9      	b.n	80121f0 <_printf_float+0x310>
 801227c:	ee18 3a10 	vmov	r3, s16
 8012280:	4652      	mov	r2, sl
 8012282:	4631      	mov	r1, r6
 8012284:	4628      	mov	r0, r5
 8012286:	47b8      	blx	r7
 8012288:	3001      	adds	r0, #1
 801228a:	d1be      	bne.n	801220a <_printf_float+0x32a>
 801228c:	e689      	b.n	8011fa2 <_printf_float+0xc2>
 801228e:	9a05      	ldr	r2, [sp, #20]
 8012290:	464b      	mov	r3, r9
 8012292:	4442      	add	r2, r8
 8012294:	4631      	mov	r1, r6
 8012296:	4628      	mov	r0, r5
 8012298:	47b8      	blx	r7
 801229a:	3001      	adds	r0, #1
 801229c:	d1c1      	bne.n	8012222 <_printf_float+0x342>
 801229e:	e680      	b.n	8011fa2 <_printf_float+0xc2>
 80122a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80122a2:	2a01      	cmp	r2, #1
 80122a4:	dc01      	bgt.n	80122aa <_printf_float+0x3ca>
 80122a6:	07db      	lsls	r3, r3, #31
 80122a8:	d538      	bpl.n	801231c <_printf_float+0x43c>
 80122aa:	2301      	movs	r3, #1
 80122ac:	4642      	mov	r2, r8
 80122ae:	4631      	mov	r1, r6
 80122b0:	4628      	mov	r0, r5
 80122b2:	47b8      	blx	r7
 80122b4:	3001      	adds	r0, #1
 80122b6:	f43f ae74 	beq.w	8011fa2 <_printf_float+0xc2>
 80122ba:	ee18 3a10 	vmov	r3, s16
 80122be:	4652      	mov	r2, sl
 80122c0:	4631      	mov	r1, r6
 80122c2:	4628      	mov	r0, r5
 80122c4:	47b8      	blx	r7
 80122c6:	3001      	adds	r0, #1
 80122c8:	f43f ae6b 	beq.w	8011fa2 <_printf_float+0xc2>
 80122cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122d0:	2200      	movs	r2, #0
 80122d2:	2300      	movs	r3, #0
 80122d4:	f7ee fc20 	bl	8000b18 <__aeabi_dcmpeq>
 80122d8:	b9d8      	cbnz	r0, 8012312 <_printf_float+0x432>
 80122da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122dc:	f108 0201 	add.w	r2, r8, #1
 80122e0:	3b01      	subs	r3, #1
 80122e2:	4631      	mov	r1, r6
 80122e4:	4628      	mov	r0, r5
 80122e6:	47b8      	blx	r7
 80122e8:	3001      	adds	r0, #1
 80122ea:	d10e      	bne.n	801230a <_printf_float+0x42a>
 80122ec:	e659      	b.n	8011fa2 <_printf_float+0xc2>
 80122ee:	2301      	movs	r3, #1
 80122f0:	4652      	mov	r2, sl
 80122f2:	4631      	mov	r1, r6
 80122f4:	4628      	mov	r0, r5
 80122f6:	47b8      	blx	r7
 80122f8:	3001      	adds	r0, #1
 80122fa:	f43f ae52 	beq.w	8011fa2 <_printf_float+0xc2>
 80122fe:	f108 0801 	add.w	r8, r8, #1
 8012302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012304:	3b01      	subs	r3, #1
 8012306:	4543      	cmp	r3, r8
 8012308:	dcf1      	bgt.n	80122ee <_printf_float+0x40e>
 801230a:	464b      	mov	r3, r9
 801230c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012310:	e6dc      	b.n	80120cc <_printf_float+0x1ec>
 8012312:	f04f 0800 	mov.w	r8, #0
 8012316:	f104 0a1a 	add.w	sl, r4, #26
 801231a:	e7f2      	b.n	8012302 <_printf_float+0x422>
 801231c:	2301      	movs	r3, #1
 801231e:	4642      	mov	r2, r8
 8012320:	e7df      	b.n	80122e2 <_printf_float+0x402>
 8012322:	2301      	movs	r3, #1
 8012324:	464a      	mov	r2, r9
 8012326:	4631      	mov	r1, r6
 8012328:	4628      	mov	r0, r5
 801232a:	47b8      	blx	r7
 801232c:	3001      	adds	r0, #1
 801232e:	f43f ae38 	beq.w	8011fa2 <_printf_float+0xc2>
 8012332:	f108 0801 	add.w	r8, r8, #1
 8012336:	68e3      	ldr	r3, [r4, #12]
 8012338:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801233a:	1a5b      	subs	r3, r3, r1
 801233c:	4543      	cmp	r3, r8
 801233e:	dcf0      	bgt.n	8012322 <_printf_float+0x442>
 8012340:	e6fa      	b.n	8012138 <_printf_float+0x258>
 8012342:	f04f 0800 	mov.w	r8, #0
 8012346:	f104 0919 	add.w	r9, r4, #25
 801234a:	e7f4      	b.n	8012336 <_printf_float+0x456>

0801234c <_printf_common>:
 801234c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012350:	4616      	mov	r6, r2
 8012352:	4699      	mov	r9, r3
 8012354:	688a      	ldr	r2, [r1, #8]
 8012356:	690b      	ldr	r3, [r1, #16]
 8012358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801235c:	4293      	cmp	r3, r2
 801235e:	bfb8      	it	lt
 8012360:	4613      	movlt	r3, r2
 8012362:	6033      	str	r3, [r6, #0]
 8012364:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012368:	4607      	mov	r7, r0
 801236a:	460c      	mov	r4, r1
 801236c:	b10a      	cbz	r2, 8012372 <_printf_common+0x26>
 801236e:	3301      	adds	r3, #1
 8012370:	6033      	str	r3, [r6, #0]
 8012372:	6823      	ldr	r3, [r4, #0]
 8012374:	0699      	lsls	r1, r3, #26
 8012376:	bf42      	ittt	mi
 8012378:	6833      	ldrmi	r3, [r6, #0]
 801237a:	3302      	addmi	r3, #2
 801237c:	6033      	strmi	r3, [r6, #0]
 801237e:	6825      	ldr	r5, [r4, #0]
 8012380:	f015 0506 	ands.w	r5, r5, #6
 8012384:	d106      	bne.n	8012394 <_printf_common+0x48>
 8012386:	f104 0a19 	add.w	sl, r4, #25
 801238a:	68e3      	ldr	r3, [r4, #12]
 801238c:	6832      	ldr	r2, [r6, #0]
 801238e:	1a9b      	subs	r3, r3, r2
 8012390:	42ab      	cmp	r3, r5
 8012392:	dc26      	bgt.n	80123e2 <_printf_common+0x96>
 8012394:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012398:	1e13      	subs	r3, r2, #0
 801239a:	6822      	ldr	r2, [r4, #0]
 801239c:	bf18      	it	ne
 801239e:	2301      	movne	r3, #1
 80123a0:	0692      	lsls	r2, r2, #26
 80123a2:	d42b      	bmi.n	80123fc <_printf_common+0xb0>
 80123a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123a8:	4649      	mov	r1, r9
 80123aa:	4638      	mov	r0, r7
 80123ac:	47c0      	blx	r8
 80123ae:	3001      	adds	r0, #1
 80123b0:	d01e      	beq.n	80123f0 <_printf_common+0xa4>
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	68e5      	ldr	r5, [r4, #12]
 80123b6:	6832      	ldr	r2, [r6, #0]
 80123b8:	f003 0306 	and.w	r3, r3, #6
 80123bc:	2b04      	cmp	r3, #4
 80123be:	bf08      	it	eq
 80123c0:	1aad      	subeq	r5, r5, r2
 80123c2:	68a3      	ldr	r3, [r4, #8]
 80123c4:	6922      	ldr	r2, [r4, #16]
 80123c6:	bf0c      	ite	eq
 80123c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123cc:	2500      	movne	r5, #0
 80123ce:	4293      	cmp	r3, r2
 80123d0:	bfc4      	itt	gt
 80123d2:	1a9b      	subgt	r3, r3, r2
 80123d4:	18ed      	addgt	r5, r5, r3
 80123d6:	2600      	movs	r6, #0
 80123d8:	341a      	adds	r4, #26
 80123da:	42b5      	cmp	r5, r6
 80123dc:	d11a      	bne.n	8012414 <_printf_common+0xc8>
 80123de:	2000      	movs	r0, #0
 80123e0:	e008      	b.n	80123f4 <_printf_common+0xa8>
 80123e2:	2301      	movs	r3, #1
 80123e4:	4652      	mov	r2, sl
 80123e6:	4649      	mov	r1, r9
 80123e8:	4638      	mov	r0, r7
 80123ea:	47c0      	blx	r8
 80123ec:	3001      	adds	r0, #1
 80123ee:	d103      	bne.n	80123f8 <_printf_common+0xac>
 80123f0:	f04f 30ff 	mov.w	r0, #4294967295
 80123f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123f8:	3501      	adds	r5, #1
 80123fa:	e7c6      	b.n	801238a <_printf_common+0x3e>
 80123fc:	18e1      	adds	r1, r4, r3
 80123fe:	1c5a      	adds	r2, r3, #1
 8012400:	2030      	movs	r0, #48	; 0x30
 8012402:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012406:	4422      	add	r2, r4
 8012408:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801240c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012410:	3302      	adds	r3, #2
 8012412:	e7c7      	b.n	80123a4 <_printf_common+0x58>
 8012414:	2301      	movs	r3, #1
 8012416:	4622      	mov	r2, r4
 8012418:	4649      	mov	r1, r9
 801241a:	4638      	mov	r0, r7
 801241c:	47c0      	blx	r8
 801241e:	3001      	adds	r0, #1
 8012420:	d0e6      	beq.n	80123f0 <_printf_common+0xa4>
 8012422:	3601      	adds	r6, #1
 8012424:	e7d9      	b.n	80123da <_printf_common+0x8e>
	...

08012428 <_printf_i>:
 8012428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801242c:	7e0f      	ldrb	r7, [r1, #24]
 801242e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012430:	2f78      	cmp	r7, #120	; 0x78
 8012432:	4691      	mov	r9, r2
 8012434:	4680      	mov	r8, r0
 8012436:	460c      	mov	r4, r1
 8012438:	469a      	mov	sl, r3
 801243a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801243e:	d807      	bhi.n	8012450 <_printf_i+0x28>
 8012440:	2f62      	cmp	r7, #98	; 0x62
 8012442:	d80a      	bhi.n	801245a <_printf_i+0x32>
 8012444:	2f00      	cmp	r7, #0
 8012446:	f000 80d8 	beq.w	80125fa <_printf_i+0x1d2>
 801244a:	2f58      	cmp	r7, #88	; 0x58
 801244c:	f000 80a3 	beq.w	8012596 <_printf_i+0x16e>
 8012450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012454:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012458:	e03a      	b.n	80124d0 <_printf_i+0xa8>
 801245a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801245e:	2b15      	cmp	r3, #21
 8012460:	d8f6      	bhi.n	8012450 <_printf_i+0x28>
 8012462:	a101      	add	r1, pc, #4	; (adr r1, 8012468 <_printf_i+0x40>)
 8012464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012468:	080124c1 	.word	0x080124c1
 801246c:	080124d5 	.word	0x080124d5
 8012470:	08012451 	.word	0x08012451
 8012474:	08012451 	.word	0x08012451
 8012478:	08012451 	.word	0x08012451
 801247c:	08012451 	.word	0x08012451
 8012480:	080124d5 	.word	0x080124d5
 8012484:	08012451 	.word	0x08012451
 8012488:	08012451 	.word	0x08012451
 801248c:	08012451 	.word	0x08012451
 8012490:	08012451 	.word	0x08012451
 8012494:	080125e1 	.word	0x080125e1
 8012498:	08012505 	.word	0x08012505
 801249c:	080125c3 	.word	0x080125c3
 80124a0:	08012451 	.word	0x08012451
 80124a4:	08012451 	.word	0x08012451
 80124a8:	08012603 	.word	0x08012603
 80124ac:	08012451 	.word	0x08012451
 80124b0:	08012505 	.word	0x08012505
 80124b4:	08012451 	.word	0x08012451
 80124b8:	08012451 	.word	0x08012451
 80124bc:	080125cb 	.word	0x080125cb
 80124c0:	682b      	ldr	r3, [r5, #0]
 80124c2:	1d1a      	adds	r2, r3, #4
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	602a      	str	r2, [r5, #0]
 80124c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124d0:	2301      	movs	r3, #1
 80124d2:	e0a3      	b.n	801261c <_printf_i+0x1f4>
 80124d4:	6820      	ldr	r0, [r4, #0]
 80124d6:	6829      	ldr	r1, [r5, #0]
 80124d8:	0606      	lsls	r6, r0, #24
 80124da:	f101 0304 	add.w	r3, r1, #4
 80124de:	d50a      	bpl.n	80124f6 <_printf_i+0xce>
 80124e0:	680e      	ldr	r6, [r1, #0]
 80124e2:	602b      	str	r3, [r5, #0]
 80124e4:	2e00      	cmp	r6, #0
 80124e6:	da03      	bge.n	80124f0 <_printf_i+0xc8>
 80124e8:	232d      	movs	r3, #45	; 0x2d
 80124ea:	4276      	negs	r6, r6
 80124ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80124f0:	485e      	ldr	r0, [pc, #376]	; (801266c <_printf_i+0x244>)
 80124f2:	230a      	movs	r3, #10
 80124f4:	e019      	b.n	801252a <_printf_i+0x102>
 80124f6:	680e      	ldr	r6, [r1, #0]
 80124f8:	602b      	str	r3, [r5, #0]
 80124fa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80124fe:	bf18      	it	ne
 8012500:	b236      	sxthne	r6, r6
 8012502:	e7ef      	b.n	80124e4 <_printf_i+0xbc>
 8012504:	682b      	ldr	r3, [r5, #0]
 8012506:	6820      	ldr	r0, [r4, #0]
 8012508:	1d19      	adds	r1, r3, #4
 801250a:	6029      	str	r1, [r5, #0]
 801250c:	0601      	lsls	r1, r0, #24
 801250e:	d501      	bpl.n	8012514 <_printf_i+0xec>
 8012510:	681e      	ldr	r6, [r3, #0]
 8012512:	e002      	b.n	801251a <_printf_i+0xf2>
 8012514:	0646      	lsls	r6, r0, #25
 8012516:	d5fb      	bpl.n	8012510 <_printf_i+0xe8>
 8012518:	881e      	ldrh	r6, [r3, #0]
 801251a:	4854      	ldr	r0, [pc, #336]	; (801266c <_printf_i+0x244>)
 801251c:	2f6f      	cmp	r7, #111	; 0x6f
 801251e:	bf0c      	ite	eq
 8012520:	2308      	moveq	r3, #8
 8012522:	230a      	movne	r3, #10
 8012524:	2100      	movs	r1, #0
 8012526:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801252a:	6865      	ldr	r5, [r4, #4]
 801252c:	60a5      	str	r5, [r4, #8]
 801252e:	2d00      	cmp	r5, #0
 8012530:	bfa2      	ittt	ge
 8012532:	6821      	ldrge	r1, [r4, #0]
 8012534:	f021 0104 	bicge.w	r1, r1, #4
 8012538:	6021      	strge	r1, [r4, #0]
 801253a:	b90e      	cbnz	r6, 8012540 <_printf_i+0x118>
 801253c:	2d00      	cmp	r5, #0
 801253e:	d04d      	beq.n	80125dc <_printf_i+0x1b4>
 8012540:	4615      	mov	r5, r2
 8012542:	fbb6 f1f3 	udiv	r1, r6, r3
 8012546:	fb03 6711 	mls	r7, r3, r1, r6
 801254a:	5dc7      	ldrb	r7, [r0, r7]
 801254c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012550:	4637      	mov	r7, r6
 8012552:	42bb      	cmp	r3, r7
 8012554:	460e      	mov	r6, r1
 8012556:	d9f4      	bls.n	8012542 <_printf_i+0x11a>
 8012558:	2b08      	cmp	r3, #8
 801255a:	d10b      	bne.n	8012574 <_printf_i+0x14c>
 801255c:	6823      	ldr	r3, [r4, #0]
 801255e:	07de      	lsls	r6, r3, #31
 8012560:	d508      	bpl.n	8012574 <_printf_i+0x14c>
 8012562:	6923      	ldr	r3, [r4, #16]
 8012564:	6861      	ldr	r1, [r4, #4]
 8012566:	4299      	cmp	r1, r3
 8012568:	bfde      	ittt	le
 801256a:	2330      	movle	r3, #48	; 0x30
 801256c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012574:	1b52      	subs	r2, r2, r5
 8012576:	6122      	str	r2, [r4, #16]
 8012578:	f8cd a000 	str.w	sl, [sp]
 801257c:	464b      	mov	r3, r9
 801257e:	aa03      	add	r2, sp, #12
 8012580:	4621      	mov	r1, r4
 8012582:	4640      	mov	r0, r8
 8012584:	f7ff fee2 	bl	801234c <_printf_common>
 8012588:	3001      	adds	r0, #1
 801258a:	d14c      	bne.n	8012626 <_printf_i+0x1fe>
 801258c:	f04f 30ff 	mov.w	r0, #4294967295
 8012590:	b004      	add	sp, #16
 8012592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012596:	4835      	ldr	r0, [pc, #212]	; (801266c <_printf_i+0x244>)
 8012598:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801259c:	6829      	ldr	r1, [r5, #0]
 801259e:	6823      	ldr	r3, [r4, #0]
 80125a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80125a4:	6029      	str	r1, [r5, #0]
 80125a6:	061d      	lsls	r5, r3, #24
 80125a8:	d514      	bpl.n	80125d4 <_printf_i+0x1ac>
 80125aa:	07df      	lsls	r7, r3, #31
 80125ac:	bf44      	itt	mi
 80125ae:	f043 0320 	orrmi.w	r3, r3, #32
 80125b2:	6023      	strmi	r3, [r4, #0]
 80125b4:	b91e      	cbnz	r6, 80125be <_printf_i+0x196>
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	f023 0320 	bic.w	r3, r3, #32
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	2310      	movs	r3, #16
 80125c0:	e7b0      	b.n	8012524 <_printf_i+0xfc>
 80125c2:	6823      	ldr	r3, [r4, #0]
 80125c4:	f043 0320 	orr.w	r3, r3, #32
 80125c8:	6023      	str	r3, [r4, #0]
 80125ca:	2378      	movs	r3, #120	; 0x78
 80125cc:	4828      	ldr	r0, [pc, #160]	; (8012670 <_printf_i+0x248>)
 80125ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125d2:	e7e3      	b.n	801259c <_printf_i+0x174>
 80125d4:	0659      	lsls	r1, r3, #25
 80125d6:	bf48      	it	mi
 80125d8:	b2b6      	uxthmi	r6, r6
 80125da:	e7e6      	b.n	80125aa <_printf_i+0x182>
 80125dc:	4615      	mov	r5, r2
 80125de:	e7bb      	b.n	8012558 <_printf_i+0x130>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	6826      	ldr	r6, [r4, #0]
 80125e4:	6961      	ldr	r1, [r4, #20]
 80125e6:	1d18      	adds	r0, r3, #4
 80125e8:	6028      	str	r0, [r5, #0]
 80125ea:	0635      	lsls	r5, r6, #24
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	d501      	bpl.n	80125f4 <_printf_i+0x1cc>
 80125f0:	6019      	str	r1, [r3, #0]
 80125f2:	e002      	b.n	80125fa <_printf_i+0x1d2>
 80125f4:	0670      	lsls	r0, r6, #25
 80125f6:	d5fb      	bpl.n	80125f0 <_printf_i+0x1c8>
 80125f8:	8019      	strh	r1, [r3, #0]
 80125fa:	2300      	movs	r3, #0
 80125fc:	6123      	str	r3, [r4, #16]
 80125fe:	4615      	mov	r5, r2
 8012600:	e7ba      	b.n	8012578 <_printf_i+0x150>
 8012602:	682b      	ldr	r3, [r5, #0]
 8012604:	1d1a      	adds	r2, r3, #4
 8012606:	602a      	str	r2, [r5, #0]
 8012608:	681d      	ldr	r5, [r3, #0]
 801260a:	6862      	ldr	r2, [r4, #4]
 801260c:	2100      	movs	r1, #0
 801260e:	4628      	mov	r0, r5
 8012610:	f7ed fe0e 	bl	8000230 <memchr>
 8012614:	b108      	cbz	r0, 801261a <_printf_i+0x1f2>
 8012616:	1b40      	subs	r0, r0, r5
 8012618:	6060      	str	r0, [r4, #4]
 801261a:	6863      	ldr	r3, [r4, #4]
 801261c:	6123      	str	r3, [r4, #16]
 801261e:	2300      	movs	r3, #0
 8012620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012624:	e7a8      	b.n	8012578 <_printf_i+0x150>
 8012626:	6923      	ldr	r3, [r4, #16]
 8012628:	462a      	mov	r2, r5
 801262a:	4649      	mov	r1, r9
 801262c:	4640      	mov	r0, r8
 801262e:	47d0      	blx	sl
 8012630:	3001      	adds	r0, #1
 8012632:	d0ab      	beq.n	801258c <_printf_i+0x164>
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	079b      	lsls	r3, r3, #30
 8012638:	d413      	bmi.n	8012662 <_printf_i+0x23a>
 801263a:	68e0      	ldr	r0, [r4, #12]
 801263c:	9b03      	ldr	r3, [sp, #12]
 801263e:	4298      	cmp	r0, r3
 8012640:	bfb8      	it	lt
 8012642:	4618      	movlt	r0, r3
 8012644:	e7a4      	b.n	8012590 <_printf_i+0x168>
 8012646:	2301      	movs	r3, #1
 8012648:	4632      	mov	r2, r6
 801264a:	4649      	mov	r1, r9
 801264c:	4640      	mov	r0, r8
 801264e:	47d0      	blx	sl
 8012650:	3001      	adds	r0, #1
 8012652:	d09b      	beq.n	801258c <_printf_i+0x164>
 8012654:	3501      	adds	r5, #1
 8012656:	68e3      	ldr	r3, [r4, #12]
 8012658:	9903      	ldr	r1, [sp, #12]
 801265a:	1a5b      	subs	r3, r3, r1
 801265c:	42ab      	cmp	r3, r5
 801265e:	dcf2      	bgt.n	8012646 <_printf_i+0x21e>
 8012660:	e7eb      	b.n	801263a <_printf_i+0x212>
 8012662:	2500      	movs	r5, #0
 8012664:	f104 0619 	add.w	r6, r4, #25
 8012668:	e7f5      	b.n	8012656 <_printf_i+0x22e>
 801266a:	bf00      	nop
 801266c:	08014e72 	.word	0x08014e72
 8012670:	08014e83 	.word	0x08014e83

08012674 <iprintf>:
 8012674:	b40f      	push	{r0, r1, r2, r3}
 8012676:	4b0a      	ldr	r3, [pc, #40]	; (80126a0 <iprintf+0x2c>)
 8012678:	b513      	push	{r0, r1, r4, lr}
 801267a:	681c      	ldr	r4, [r3, #0]
 801267c:	b124      	cbz	r4, 8012688 <iprintf+0x14>
 801267e:	69a3      	ldr	r3, [r4, #24]
 8012680:	b913      	cbnz	r3, 8012688 <iprintf+0x14>
 8012682:	4620      	mov	r0, r4
 8012684:	f001 f878 	bl	8013778 <__sinit>
 8012688:	ab05      	add	r3, sp, #20
 801268a:	9a04      	ldr	r2, [sp, #16]
 801268c:	68a1      	ldr	r1, [r4, #8]
 801268e:	9301      	str	r3, [sp, #4]
 8012690:	4620      	mov	r0, r4
 8012692:	f001 fe27 	bl	80142e4 <_vfiprintf_r>
 8012696:	b002      	add	sp, #8
 8012698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801269c:	b004      	add	sp, #16
 801269e:	4770      	bx	lr
 80126a0:	2000000c 	.word	0x2000000c

080126a4 <putchar>:
 80126a4:	4b09      	ldr	r3, [pc, #36]	; (80126cc <putchar+0x28>)
 80126a6:	b513      	push	{r0, r1, r4, lr}
 80126a8:	681c      	ldr	r4, [r3, #0]
 80126aa:	4601      	mov	r1, r0
 80126ac:	b134      	cbz	r4, 80126bc <putchar+0x18>
 80126ae:	69a3      	ldr	r3, [r4, #24]
 80126b0:	b923      	cbnz	r3, 80126bc <putchar+0x18>
 80126b2:	9001      	str	r0, [sp, #4]
 80126b4:	4620      	mov	r0, r4
 80126b6:	f001 f85f 	bl	8013778 <__sinit>
 80126ba:	9901      	ldr	r1, [sp, #4]
 80126bc:	68a2      	ldr	r2, [r4, #8]
 80126be:	4620      	mov	r0, r4
 80126c0:	b002      	add	sp, #8
 80126c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126c6:	f001 bf3d 	b.w	8014544 <_putc_r>
 80126ca:	bf00      	nop
 80126cc:	2000000c 	.word	0x2000000c

080126d0 <__swbuf_r>:
 80126d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80126d2:	460e      	mov	r6, r1
 80126d4:	4614      	mov	r4, r2
 80126d6:	4605      	mov	r5, r0
 80126d8:	b118      	cbz	r0, 80126e2 <__swbuf_r+0x12>
 80126da:	6983      	ldr	r3, [r0, #24]
 80126dc:	b90b      	cbnz	r3, 80126e2 <__swbuf_r+0x12>
 80126de:	f001 f84b 	bl	8013778 <__sinit>
 80126e2:	4b21      	ldr	r3, [pc, #132]	; (8012768 <__swbuf_r+0x98>)
 80126e4:	429c      	cmp	r4, r3
 80126e6:	d12b      	bne.n	8012740 <__swbuf_r+0x70>
 80126e8:	686c      	ldr	r4, [r5, #4]
 80126ea:	69a3      	ldr	r3, [r4, #24]
 80126ec:	60a3      	str	r3, [r4, #8]
 80126ee:	89a3      	ldrh	r3, [r4, #12]
 80126f0:	071a      	lsls	r2, r3, #28
 80126f2:	d52f      	bpl.n	8012754 <__swbuf_r+0x84>
 80126f4:	6923      	ldr	r3, [r4, #16]
 80126f6:	b36b      	cbz	r3, 8012754 <__swbuf_r+0x84>
 80126f8:	6923      	ldr	r3, [r4, #16]
 80126fa:	6820      	ldr	r0, [r4, #0]
 80126fc:	1ac0      	subs	r0, r0, r3
 80126fe:	6963      	ldr	r3, [r4, #20]
 8012700:	b2f6      	uxtb	r6, r6
 8012702:	4283      	cmp	r3, r0
 8012704:	4637      	mov	r7, r6
 8012706:	dc04      	bgt.n	8012712 <__swbuf_r+0x42>
 8012708:	4621      	mov	r1, r4
 801270a:	4628      	mov	r0, r5
 801270c:	f000 ffa0 	bl	8013650 <_fflush_r>
 8012710:	bb30      	cbnz	r0, 8012760 <__swbuf_r+0x90>
 8012712:	68a3      	ldr	r3, [r4, #8]
 8012714:	3b01      	subs	r3, #1
 8012716:	60a3      	str	r3, [r4, #8]
 8012718:	6823      	ldr	r3, [r4, #0]
 801271a:	1c5a      	adds	r2, r3, #1
 801271c:	6022      	str	r2, [r4, #0]
 801271e:	701e      	strb	r6, [r3, #0]
 8012720:	6963      	ldr	r3, [r4, #20]
 8012722:	3001      	adds	r0, #1
 8012724:	4283      	cmp	r3, r0
 8012726:	d004      	beq.n	8012732 <__swbuf_r+0x62>
 8012728:	89a3      	ldrh	r3, [r4, #12]
 801272a:	07db      	lsls	r3, r3, #31
 801272c:	d506      	bpl.n	801273c <__swbuf_r+0x6c>
 801272e:	2e0a      	cmp	r6, #10
 8012730:	d104      	bne.n	801273c <__swbuf_r+0x6c>
 8012732:	4621      	mov	r1, r4
 8012734:	4628      	mov	r0, r5
 8012736:	f000 ff8b 	bl	8013650 <_fflush_r>
 801273a:	b988      	cbnz	r0, 8012760 <__swbuf_r+0x90>
 801273c:	4638      	mov	r0, r7
 801273e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012740:	4b0a      	ldr	r3, [pc, #40]	; (801276c <__swbuf_r+0x9c>)
 8012742:	429c      	cmp	r4, r3
 8012744:	d101      	bne.n	801274a <__swbuf_r+0x7a>
 8012746:	68ac      	ldr	r4, [r5, #8]
 8012748:	e7cf      	b.n	80126ea <__swbuf_r+0x1a>
 801274a:	4b09      	ldr	r3, [pc, #36]	; (8012770 <__swbuf_r+0xa0>)
 801274c:	429c      	cmp	r4, r3
 801274e:	bf08      	it	eq
 8012750:	68ec      	ldreq	r4, [r5, #12]
 8012752:	e7ca      	b.n	80126ea <__swbuf_r+0x1a>
 8012754:	4621      	mov	r1, r4
 8012756:	4628      	mov	r0, r5
 8012758:	f000 f80c 	bl	8012774 <__swsetup_r>
 801275c:	2800      	cmp	r0, #0
 801275e:	d0cb      	beq.n	80126f8 <__swbuf_r+0x28>
 8012760:	f04f 37ff 	mov.w	r7, #4294967295
 8012764:	e7ea      	b.n	801273c <__swbuf_r+0x6c>
 8012766:	bf00      	nop
 8012768:	08014f44 	.word	0x08014f44
 801276c:	08014f64 	.word	0x08014f64
 8012770:	08014f24 	.word	0x08014f24

08012774 <__swsetup_r>:
 8012774:	4b32      	ldr	r3, [pc, #200]	; (8012840 <__swsetup_r+0xcc>)
 8012776:	b570      	push	{r4, r5, r6, lr}
 8012778:	681d      	ldr	r5, [r3, #0]
 801277a:	4606      	mov	r6, r0
 801277c:	460c      	mov	r4, r1
 801277e:	b125      	cbz	r5, 801278a <__swsetup_r+0x16>
 8012780:	69ab      	ldr	r3, [r5, #24]
 8012782:	b913      	cbnz	r3, 801278a <__swsetup_r+0x16>
 8012784:	4628      	mov	r0, r5
 8012786:	f000 fff7 	bl	8013778 <__sinit>
 801278a:	4b2e      	ldr	r3, [pc, #184]	; (8012844 <__swsetup_r+0xd0>)
 801278c:	429c      	cmp	r4, r3
 801278e:	d10f      	bne.n	80127b0 <__swsetup_r+0x3c>
 8012790:	686c      	ldr	r4, [r5, #4]
 8012792:	89a3      	ldrh	r3, [r4, #12]
 8012794:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012798:	0719      	lsls	r1, r3, #28
 801279a:	d42c      	bmi.n	80127f6 <__swsetup_r+0x82>
 801279c:	06dd      	lsls	r5, r3, #27
 801279e:	d411      	bmi.n	80127c4 <__swsetup_r+0x50>
 80127a0:	2309      	movs	r3, #9
 80127a2:	6033      	str	r3, [r6, #0]
 80127a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80127a8:	81a3      	strh	r3, [r4, #12]
 80127aa:	f04f 30ff 	mov.w	r0, #4294967295
 80127ae:	e03e      	b.n	801282e <__swsetup_r+0xba>
 80127b0:	4b25      	ldr	r3, [pc, #148]	; (8012848 <__swsetup_r+0xd4>)
 80127b2:	429c      	cmp	r4, r3
 80127b4:	d101      	bne.n	80127ba <__swsetup_r+0x46>
 80127b6:	68ac      	ldr	r4, [r5, #8]
 80127b8:	e7eb      	b.n	8012792 <__swsetup_r+0x1e>
 80127ba:	4b24      	ldr	r3, [pc, #144]	; (801284c <__swsetup_r+0xd8>)
 80127bc:	429c      	cmp	r4, r3
 80127be:	bf08      	it	eq
 80127c0:	68ec      	ldreq	r4, [r5, #12]
 80127c2:	e7e6      	b.n	8012792 <__swsetup_r+0x1e>
 80127c4:	0758      	lsls	r0, r3, #29
 80127c6:	d512      	bpl.n	80127ee <__swsetup_r+0x7a>
 80127c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80127ca:	b141      	cbz	r1, 80127de <__swsetup_r+0x6a>
 80127cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80127d0:	4299      	cmp	r1, r3
 80127d2:	d002      	beq.n	80127da <__swsetup_r+0x66>
 80127d4:	4630      	mov	r0, r6
 80127d6:	f001 fc7b 	bl	80140d0 <_free_r>
 80127da:	2300      	movs	r3, #0
 80127dc:	6363      	str	r3, [r4, #52]	; 0x34
 80127de:	89a3      	ldrh	r3, [r4, #12]
 80127e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80127e4:	81a3      	strh	r3, [r4, #12]
 80127e6:	2300      	movs	r3, #0
 80127e8:	6063      	str	r3, [r4, #4]
 80127ea:	6923      	ldr	r3, [r4, #16]
 80127ec:	6023      	str	r3, [r4, #0]
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f043 0308 	orr.w	r3, r3, #8
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	6923      	ldr	r3, [r4, #16]
 80127f8:	b94b      	cbnz	r3, 801280e <__swsetup_r+0x9a>
 80127fa:	89a3      	ldrh	r3, [r4, #12]
 80127fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012804:	d003      	beq.n	801280e <__swsetup_r+0x9a>
 8012806:	4621      	mov	r1, r4
 8012808:	4630      	mov	r0, r6
 801280a:	f001 f87f 	bl	801390c <__smakebuf_r>
 801280e:	89a0      	ldrh	r0, [r4, #12]
 8012810:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8012814:	f010 0301 	ands.w	r3, r0, #1
 8012818:	d00a      	beq.n	8012830 <__swsetup_r+0xbc>
 801281a:	2300      	movs	r3, #0
 801281c:	60a3      	str	r3, [r4, #8]
 801281e:	6963      	ldr	r3, [r4, #20]
 8012820:	425b      	negs	r3, r3
 8012822:	61a3      	str	r3, [r4, #24]
 8012824:	6923      	ldr	r3, [r4, #16]
 8012826:	b943      	cbnz	r3, 801283a <__swsetup_r+0xc6>
 8012828:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801282c:	d1ba      	bne.n	80127a4 <__swsetup_r+0x30>
 801282e:	bd70      	pop	{r4, r5, r6, pc}
 8012830:	0781      	lsls	r1, r0, #30
 8012832:	bf58      	it	pl
 8012834:	6963      	ldrpl	r3, [r4, #20]
 8012836:	60a3      	str	r3, [r4, #8]
 8012838:	e7f4      	b.n	8012824 <__swsetup_r+0xb0>
 801283a:	2000      	movs	r0, #0
 801283c:	e7f7      	b.n	801282e <__swsetup_r+0xba>
 801283e:	bf00      	nop
 8012840:	2000000c 	.word	0x2000000c
 8012844:	08014f44 	.word	0x08014f44
 8012848:	08014f64 	.word	0x08014f64
 801284c:	08014f24 	.word	0x08014f24

08012850 <quorem>:
 8012850:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012854:	6903      	ldr	r3, [r0, #16]
 8012856:	690c      	ldr	r4, [r1, #16]
 8012858:	42a3      	cmp	r3, r4
 801285a:	4607      	mov	r7, r0
 801285c:	f2c0 8081 	blt.w	8012962 <quorem+0x112>
 8012860:	3c01      	subs	r4, #1
 8012862:	f101 0814 	add.w	r8, r1, #20
 8012866:	f100 0514 	add.w	r5, r0, #20
 801286a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801286e:	9301      	str	r3, [sp, #4]
 8012870:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012874:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012878:	3301      	adds	r3, #1
 801287a:	429a      	cmp	r2, r3
 801287c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012880:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012884:	fbb2 f6f3 	udiv	r6, r2, r3
 8012888:	d331      	bcc.n	80128ee <quorem+0x9e>
 801288a:	f04f 0e00 	mov.w	lr, #0
 801288e:	4640      	mov	r0, r8
 8012890:	46ac      	mov	ip, r5
 8012892:	46f2      	mov	sl, lr
 8012894:	f850 2b04 	ldr.w	r2, [r0], #4
 8012898:	b293      	uxth	r3, r2
 801289a:	fb06 e303 	mla	r3, r6, r3, lr
 801289e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128a2:	b29b      	uxth	r3, r3
 80128a4:	ebaa 0303 	sub.w	r3, sl, r3
 80128a8:	f8dc a000 	ldr.w	sl, [ip]
 80128ac:	0c12      	lsrs	r2, r2, #16
 80128ae:	fa13 f38a 	uxtah	r3, r3, sl
 80128b2:	fb06 e202 	mla	r2, r6, r2, lr
 80128b6:	9300      	str	r3, [sp, #0]
 80128b8:	9b00      	ldr	r3, [sp, #0]
 80128ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128be:	b292      	uxth	r2, r2
 80128c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80128c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128c8:	f8bd 3000 	ldrh.w	r3, [sp]
 80128cc:	4581      	cmp	r9, r0
 80128ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128d2:	f84c 3b04 	str.w	r3, [ip], #4
 80128d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128da:	d2db      	bcs.n	8012894 <quorem+0x44>
 80128dc:	f855 300b 	ldr.w	r3, [r5, fp]
 80128e0:	b92b      	cbnz	r3, 80128ee <quorem+0x9e>
 80128e2:	9b01      	ldr	r3, [sp, #4]
 80128e4:	3b04      	subs	r3, #4
 80128e6:	429d      	cmp	r5, r3
 80128e8:	461a      	mov	r2, r3
 80128ea:	d32e      	bcc.n	801294a <quorem+0xfa>
 80128ec:	613c      	str	r4, [r7, #16]
 80128ee:	4638      	mov	r0, r7
 80128f0:	f001 fad6 	bl	8013ea0 <__mcmp>
 80128f4:	2800      	cmp	r0, #0
 80128f6:	db24      	blt.n	8012942 <quorem+0xf2>
 80128f8:	3601      	adds	r6, #1
 80128fa:	4628      	mov	r0, r5
 80128fc:	f04f 0c00 	mov.w	ip, #0
 8012900:	f858 2b04 	ldr.w	r2, [r8], #4
 8012904:	f8d0 e000 	ldr.w	lr, [r0]
 8012908:	b293      	uxth	r3, r2
 801290a:	ebac 0303 	sub.w	r3, ip, r3
 801290e:	0c12      	lsrs	r2, r2, #16
 8012910:	fa13 f38e 	uxtah	r3, r3, lr
 8012914:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012918:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801291c:	b29b      	uxth	r3, r3
 801291e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012922:	45c1      	cmp	r9, r8
 8012924:	f840 3b04 	str.w	r3, [r0], #4
 8012928:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801292c:	d2e8      	bcs.n	8012900 <quorem+0xb0>
 801292e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012932:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012936:	b922      	cbnz	r2, 8012942 <quorem+0xf2>
 8012938:	3b04      	subs	r3, #4
 801293a:	429d      	cmp	r5, r3
 801293c:	461a      	mov	r2, r3
 801293e:	d30a      	bcc.n	8012956 <quorem+0x106>
 8012940:	613c      	str	r4, [r7, #16]
 8012942:	4630      	mov	r0, r6
 8012944:	b003      	add	sp, #12
 8012946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801294a:	6812      	ldr	r2, [r2, #0]
 801294c:	3b04      	subs	r3, #4
 801294e:	2a00      	cmp	r2, #0
 8012950:	d1cc      	bne.n	80128ec <quorem+0x9c>
 8012952:	3c01      	subs	r4, #1
 8012954:	e7c7      	b.n	80128e6 <quorem+0x96>
 8012956:	6812      	ldr	r2, [r2, #0]
 8012958:	3b04      	subs	r3, #4
 801295a:	2a00      	cmp	r2, #0
 801295c:	d1f0      	bne.n	8012940 <quorem+0xf0>
 801295e:	3c01      	subs	r4, #1
 8012960:	e7eb      	b.n	801293a <quorem+0xea>
 8012962:	2000      	movs	r0, #0
 8012964:	e7ee      	b.n	8012944 <quorem+0xf4>
	...

08012968 <_dtoa_r>:
 8012968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296c:	ed2d 8b04 	vpush	{d8-d9}
 8012970:	ec57 6b10 	vmov	r6, r7, d0
 8012974:	b093      	sub	sp, #76	; 0x4c
 8012976:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012978:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801297c:	9106      	str	r1, [sp, #24]
 801297e:	ee10 aa10 	vmov	sl, s0
 8012982:	4604      	mov	r4, r0
 8012984:	9209      	str	r2, [sp, #36]	; 0x24
 8012986:	930c      	str	r3, [sp, #48]	; 0x30
 8012988:	46bb      	mov	fp, r7
 801298a:	b975      	cbnz	r5, 80129aa <_dtoa_r+0x42>
 801298c:	2010      	movs	r0, #16
 801298e:	f000 fffd 	bl	801398c <malloc>
 8012992:	4602      	mov	r2, r0
 8012994:	6260      	str	r0, [r4, #36]	; 0x24
 8012996:	b920      	cbnz	r0, 80129a2 <_dtoa_r+0x3a>
 8012998:	4ba7      	ldr	r3, [pc, #668]	; (8012c38 <_dtoa_r+0x2d0>)
 801299a:	21ea      	movs	r1, #234	; 0xea
 801299c:	48a7      	ldr	r0, [pc, #668]	; (8012c3c <_dtoa_r+0x2d4>)
 801299e:	f001 fe7f 	bl	80146a0 <__assert_func>
 80129a2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129a6:	6005      	str	r5, [r0, #0]
 80129a8:	60c5      	str	r5, [r0, #12]
 80129aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129ac:	6819      	ldr	r1, [r3, #0]
 80129ae:	b151      	cbz	r1, 80129c6 <_dtoa_r+0x5e>
 80129b0:	685a      	ldr	r2, [r3, #4]
 80129b2:	604a      	str	r2, [r1, #4]
 80129b4:	2301      	movs	r3, #1
 80129b6:	4093      	lsls	r3, r2
 80129b8:	608b      	str	r3, [r1, #8]
 80129ba:	4620      	mov	r0, r4
 80129bc:	f001 f82e 	bl	8013a1c <_Bfree>
 80129c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129c2:	2200      	movs	r2, #0
 80129c4:	601a      	str	r2, [r3, #0]
 80129c6:	1e3b      	subs	r3, r7, #0
 80129c8:	bfaa      	itet	ge
 80129ca:	2300      	movge	r3, #0
 80129cc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80129d0:	f8c8 3000 	strge.w	r3, [r8]
 80129d4:	4b9a      	ldr	r3, [pc, #616]	; (8012c40 <_dtoa_r+0x2d8>)
 80129d6:	bfbc      	itt	lt
 80129d8:	2201      	movlt	r2, #1
 80129da:	f8c8 2000 	strlt.w	r2, [r8]
 80129de:	ea33 030b 	bics.w	r3, r3, fp
 80129e2:	d11b      	bne.n	8012a1c <_dtoa_r+0xb4>
 80129e4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80129e6:	f242 730f 	movw	r3, #9999	; 0x270f
 80129ea:	6013      	str	r3, [r2, #0]
 80129ec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80129f0:	4333      	orrs	r3, r6
 80129f2:	f000 8592 	beq.w	801351a <_dtoa_r+0xbb2>
 80129f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80129f8:	b963      	cbnz	r3, 8012a14 <_dtoa_r+0xac>
 80129fa:	4b92      	ldr	r3, [pc, #584]	; (8012c44 <_dtoa_r+0x2dc>)
 80129fc:	e022      	b.n	8012a44 <_dtoa_r+0xdc>
 80129fe:	4b92      	ldr	r3, [pc, #584]	; (8012c48 <_dtoa_r+0x2e0>)
 8012a00:	9301      	str	r3, [sp, #4]
 8012a02:	3308      	adds	r3, #8
 8012a04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a06:	6013      	str	r3, [r2, #0]
 8012a08:	9801      	ldr	r0, [sp, #4]
 8012a0a:	b013      	add	sp, #76	; 0x4c
 8012a0c:	ecbd 8b04 	vpop	{d8-d9}
 8012a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a14:	4b8b      	ldr	r3, [pc, #556]	; (8012c44 <_dtoa_r+0x2dc>)
 8012a16:	9301      	str	r3, [sp, #4]
 8012a18:	3303      	adds	r3, #3
 8012a1a:	e7f3      	b.n	8012a04 <_dtoa_r+0x9c>
 8012a1c:	2200      	movs	r2, #0
 8012a1e:	2300      	movs	r3, #0
 8012a20:	4650      	mov	r0, sl
 8012a22:	4659      	mov	r1, fp
 8012a24:	f7ee f878 	bl	8000b18 <__aeabi_dcmpeq>
 8012a28:	ec4b ab19 	vmov	d9, sl, fp
 8012a2c:	4680      	mov	r8, r0
 8012a2e:	b158      	cbz	r0, 8012a48 <_dtoa_r+0xe0>
 8012a30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a32:	2301      	movs	r3, #1
 8012a34:	6013      	str	r3, [r2, #0]
 8012a36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f000 856b 	beq.w	8013514 <_dtoa_r+0xbac>
 8012a3e:	4883      	ldr	r0, [pc, #524]	; (8012c4c <_dtoa_r+0x2e4>)
 8012a40:	6018      	str	r0, [r3, #0]
 8012a42:	1e43      	subs	r3, r0, #1
 8012a44:	9301      	str	r3, [sp, #4]
 8012a46:	e7df      	b.n	8012a08 <_dtoa_r+0xa0>
 8012a48:	ec4b ab10 	vmov	d0, sl, fp
 8012a4c:	aa10      	add	r2, sp, #64	; 0x40
 8012a4e:	a911      	add	r1, sp, #68	; 0x44
 8012a50:	4620      	mov	r0, r4
 8012a52:	f001 facb 	bl	8013fec <__d2b>
 8012a56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012a5a:	ee08 0a10 	vmov	s16, r0
 8012a5e:	2d00      	cmp	r5, #0
 8012a60:	f000 8084 	beq.w	8012b6c <_dtoa_r+0x204>
 8012a64:	ee19 3a90 	vmov	r3, s19
 8012a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012a70:	4656      	mov	r6, sl
 8012a72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012a76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012a7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012a7e:	4b74      	ldr	r3, [pc, #464]	; (8012c50 <_dtoa_r+0x2e8>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	4630      	mov	r0, r6
 8012a84:	4639      	mov	r1, r7
 8012a86:	f7ed fc27 	bl	80002d8 <__aeabi_dsub>
 8012a8a:	a365      	add	r3, pc, #404	; (adr r3, 8012c20 <_dtoa_r+0x2b8>)
 8012a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a90:	f7ed fdda 	bl	8000648 <__aeabi_dmul>
 8012a94:	a364      	add	r3, pc, #400	; (adr r3, 8012c28 <_dtoa_r+0x2c0>)
 8012a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a9a:	f7ed fc1f 	bl	80002dc <__adddf3>
 8012a9e:	4606      	mov	r6, r0
 8012aa0:	4628      	mov	r0, r5
 8012aa2:	460f      	mov	r7, r1
 8012aa4:	f7ed fd66 	bl	8000574 <__aeabi_i2d>
 8012aa8:	a361      	add	r3, pc, #388	; (adr r3, 8012c30 <_dtoa_r+0x2c8>)
 8012aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aae:	f7ed fdcb 	bl	8000648 <__aeabi_dmul>
 8012ab2:	4602      	mov	r2, r0
 8012ab4:	460b      	mov	r3, r1
 8012ab6:	4630      	mov	r0, r6
 8012ab8:	4639      	mov	r1, r7
 8012aba:	f7ed fc0f 	bl	80002dc <__adddf3>
 8012abe:	4606      	mov	r6, r0
 8012ac0:	460f      	mov	r7, r1
 8012ac2:	f7ee f871 	bl	8000ba8 <__aeabi_d2iz>
 8012ac6:	2200      	movs	r2, #0
 8012ac8:	9000      	str	r0, [sp, #0]
 8012aca:	2300      	movs	r3, #0
 8012acc:	4630      	mov	r0, r6
 8012ace:	4639      	mov	r1, r7
 8012ad0:	f7ee f82c 	bl	8000b2c <__aeabi_dcmplt>
 8012ad4:	b150      	cbz	r0, 8012aec <_dtoa_r+0x184>
 8012ad6:	9800      	ldr	r0, [sp, #0]
 8012ad8:	f7ed fd4c 	bl	8000574 <__aeabi_i2d>
 8012adc:	4632      	mov	r2, r6
 8012ade:	463b      	mov	r3, r7
 8012ae0:	f7ee f81a 	bl	8000b18 <__aeabi_dcmpeq>
 8012ae4:	b910      	cbnz	r0, 8012aec <_dtoa_r+0x184>
 8012ae6:	9b00      	ldr	r3, [sp, #0]
 8012ae8:	3b01      	subs	r3, #1
 8012aea:	9300      	str	r3, [sp, #0]
 8012aec:	9b00      	ldr	r3, [sp, #0]
 8012aee:	2b16      	cmp	r3, #22
 8012af0:	d85a      	bhi.n	8012ba8 <_dtoa_r+0x240>
 8012af2:	9a00      	ldr	r2, [sp, #0]
 8012af4:	4b57      	ldr	r3, [pc, #348]	; (8012c54 <_dtoa_r+0x2ec>)
 8012af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012afe:	ec51 0b19 	vmov	r0, r1, d9
 8012b02:	f7ee f813 	bl	8000b2c <__aeabi_dcmplt>
 8012b06:	2800      	cmp	r0, #0
 8012b08:	d050      	beq.n	8012bac <_dtoa_r+0x244>
 8012b0a:	9b00      	ldr	r3, [sp, #0]
 8012b0c:	3b01      	subs	r3, #1
 8012b0e:	9300      	str	r3, [sp, #0]
 8012b10:	2300      	movs	r3, #0
 8012b12:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b16:	1b5d      	subs	r5, r3, r5
 8012b18:	1e6b      	subs	r3, r5, #1
 8012b1a:	9305      	str	r3, [sp, #20]
 8012b1c:	bf45      	ittet	mi
 8012b1e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012b22:	9304      	strmi	r3, [sp, #16]
 8012b24:	2300      	movpl	r3, #0
 8012b26:	2300      	movmi	r3, #0
 8012b28:	bf4c      	ite	mi
 8012b2a:	9305      	strmi	r3, [sp, #20]
 8012b2c:	9304      	strpl	r3, [sp, #16]
 8012b2e:	9b00      	ldr	r3, [sp, #0]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	db3d      	blt.n	8012bb0 <_dtoa_r+0x248>
 8012b34:	9b05      	ldr	r3, [sp, #20]
 8012b36:	9a00      	ldr	r2, [sp, #0]
 8012b38:	920a      	str	r2, [sp, #40]	; 0x28
 8012b3a:	4413      	add	r3, r2
 8012b3c:	9305      	str	r3, [sp, #20]
 8012b3e:	2300      	movs	r3, #0
 8012b40:	9307      	str	r3, [sp, #28]
 8012b42:	9b06      	ldr	r3, [sp, #24]
 8012b44:	2b09      	cmp	r3, #9
 8012b46:	f200 8089 	bhi.w	8012c5c <_dtoa_r+0x2f4>
 8012b4a:	2b05      	cmp	r3, #5
 8012b4c:	bfc4      	itt	gt
 8012b4e:	3b04      	subgt	r3, #4
 8012b50:	9306      	strgt	r3, [sp, #24]
 8012b52:	9b06      	ldr	r3, [sp, #24]
 8012b54:	f1a3 0302 	sub.w	r3, r3, #2
 8012b58:	bfcc      	ite	gt
 8012b5a:	2500      	movgt	r5, #0
 8012b5c:	2501      	movle	r5, #1
 8012b5e:	2b03      	cmp	r3, #3
 8012b60:	f200 8087 	bhi.w	8012c72 <_dtoa_r+0x30a>
 8012b64:	e8df f003 	tbb	[pc, r3]
 8012b68:	59383a2d 	.word	0x59383a2d
 8012b6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012b70:	441d      	add	r5, r3
 8012b72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012b76:	2b20      	cmp	r3, #32
 8012b78:	bfc1      	itttt	gt
 8012b7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012b7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012b82:	fa0b f303 	lslgt.w	r3, fp, r3
 8012b86:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012b8a:	bfda      	itte	le
 8012b8c:	f1c3 0320 	rsble	r3, r3, #32
 8012b90:	fa06 f003 	lslle.w	r0, r6, r3
 8012b94:	4318      	orrgt	r0, r3
 8012b96:	f7ed fcdd 	bl	8000554 <__aeabi_ui2d>
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	4606      	mov	r6, r0
 8012b9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012ba2:	3d01      	subs	r5, #1
 8012ba4:	930e      	str	r3, [sp, #56]	; 0x38
 8012ba6:	e76a      	b.n	8012a7e <_dtoa_r+0x116>
 8012ba8:	2301      	movs	r3, #1
 8012baa:	e7b2      	b.n	8012b12 <_dtoa_r+0x1aa>
 8012bac:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bae:	e7b1      	b.n	8012b14 <_dtoa_r+0x1ac>
 8012bb0:	9b04      	ldr	r3, [sp, #16]
 8012bb2:	9a00      	ldr	r2, [sp, #0]
 8012bb4:	1a9b      	subs	r3, r3, r2
 8012bb6:	9304      	str	r3, [sp, #16]
 8012bb8:	4253      	negs	r3, r2
 8012bba:	9307      	str	r3, [sp, #28]
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	930a      	str	r3, [sp, #40]	; 0x28
 8012bc0:	e7bf      	b.n	8012b42 <_dtoa_r+0x1da>
 8012bc2:	2300      	movs	r3, #0
 8012bc4:	9308      	str	r3, [sp, #32]
 8012bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	dc55      	bgt.n	8012c78 <_dtoa_r+0x310>
 8012bcc:	2301      	movs	r3, #1
 8012bce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012bd2:	461a      	mov	r2, r3
 8012bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8012bd6:	e00c      	b.n	8012bf2 <_dtoa_r+0x28a>
 8012bd8:	2301      	movs	r3, #1
 8012bda:	e7f3      	b.n	8012bc4 <_dtoa_r+0x25c>
 8012bdc:	2300      	movs	r3, #0
 8012bde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012be0:	9308      	str	r3, [sp, #32]
 8012be2:	9b00      	ldr	r3, [sp, #0]
 8012be4:	4413      	add	r3, r2
 8012be6:	9302      	str	r3, [sp, #8]
 8012be8:	3301      	adds	r3, #1
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	9303      	str	r3, [sp, #12]
 8012bee:	bfb8      	it	lt
 8012bf0:	2301      	movlt	r3, #1
 8012bf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	6042      	str	r2, [r0, #4]
 8012bf8:	2204      	movs	r2, #4
 8012bfa:	f102 0614 	add.w	r6, r2, #20
 8012bfe:	429e      	cmp	r6, r3
 8012c00:	6841      	ldr	r1, [r0, #4]
 8012c02:	d93d      	bls.n	8012c80 <_dtoa_r+0x318>
 8012c04:	4620      	mov	r0, r4
 8012c06:	f000 fec9 	bl	801399c <_Balloc>
 8012c0a:	9001      	str	r0, [sp, #4]
 8012c0c:	2800      	cmp	r0, #0
 8012c0e:	d13b      	bne.n	8012c88 <_dtoa_r+0x320>
 8012c10:	4b11      	ldr	r3, [pc, #68]	; (8012c58 <_dtoa_r+0x2f0>)
 8012c12:	4602      	mov	r2, r0
 8012c14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c18:	e6c0      	b.n	801299c <_dtoa_r+0x34>
 8012c1a:	2301      	movs	r3, #1
 8012c1c:	e7df      	b.n	8012bde <_dtoa_r+0x276>
 8012c1e:	bf00      	nop
 8012c20:	636f4361 	.word	0x636f4361
 8012c24:	3fd287a7 	.word	0x3fd287a7
 8012c28:	8b60c8b3 	.word	0x8b60c8b3
 8012c2c:	3fc68a28 	.word	0x3fc68a28
 8012c30:	509f79fb 	.word	0x509f79fb
 8012c34:	3fd34413 	.word	0x3fd34413
 8012c38:	08014ea1 	.word	0x08014ea1
 8012c3c:	08014eb8 	.word	0x08014eb8
 8012c40:	7ff00000 	.word	0x7ff00000
 8012c44:	08014e9d 	.word	0x08014e9d
 8012c48:	08014e94 	.word	0x08014e94
 8012c4c:	08014e71 	.word	0x08014e71
 8012c50:	3ff80000 	.word	0x3ff80000
 8012c54:	08015008 	.word	0x08015008
 8012c58:	08014f13 	.word	0x08014f13
 8012c5c:	2501      	movs	r5, #1
 8012c5e:	2300      	movs	r3, #0
 8012c60:	9306      	str	r3, [sp, #24]
 8012c62:	9508      	str	r5, [sp, #32]
 8012c64:	f04f 33ff 	mov.w	r3, #4294967295
 8012c68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	2312      	movs	r3, #18
 8012c70:	e7b0      	b.n	8012bd4 <_dtoa_r+0x26c>
 8012c72:	2301      	movs	r3, #1
 8012c74:	9308      	str	r3, [sp, #32]
 8012c76:	e7f5      	b.n	8012c64 <_dtoa_r+0x2fc>
 8012c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012c7e:	e7b8      	b.n	8012bf2 <_dtoa_r+0x28a>
 8012c80:	3101      	adds	r1, #1
 8012c82:	6041      	str	r1, [r0, #4]
 8012c84:	0052      	lsls	r2, r2, #1
 8012c86:	e7b8      	b.n	8012bfa <_dtoa_r+0x292>
 8012c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c8a:	9a01      	ldr	r2, [sp, #4]
 8012c8c:	601a      	str	r2, [r3, #0]
 8012c8e:	9b03      	ldr	r3, [sp, #12]
 8012c90:	2b0e      	cmp	r3, #14
 8012c92:	f200 809d 	bhi.w	8012dd0 <_dtoa_r+0x468>
 8012c96:	2d00      	cmp	r5, #0
 8012c98:	f000 809a 	beq.w	8012dd0 <_dtoa_r+0x468>
 8012c9c:	9b00      	ldr	r3, [sp, #0]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	dd32      	ble.n	8012d08 <_dtoa_r+0x3a0>
 8012ca2:	4ab7      	ldr	r2, [pc, #732]	; (8012f80 <_dtoa_r+0x618>)
 8012ca4:	f003 030f 	and.w	r3, r3, #15
 8012ca8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012cac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cb0:	9b00      	ldr	r3, [sp, #0]
 8012cb2:	05d8      	lsls	r0, r3, #23
 8012cb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012cb8:	d516      	bpl.n	8012ce8 <_dtoa_r+0x380>
 8012cba:	4bb2      	ldr	r3, [pc, #712]	; (8012f84 <_dtoa_r+0x61c>)
 8012cbc:	ec51 0b19 	vmov	r0, r1, d9
 8012cc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012cc4:	f7ed fdea 	bl	800089c <__aeabi_ddiv>
 8012cc8:	f007 070f 	and.w	r7, r7, #15
 8012ccc:	4682      	mov	sl, r0
 8012cce:	468b      	mov	fp, r1
 8012cd0:	2503      	movs	r5, #3
 8012cd2:	4eac      	ldr	r6, [pc, #688]	; (8012f84 <_dtoa_r+0x61c>)
 8012cd4:	b957      	cbnz	r7, 8012cec <_dtoa_r+0x384>
 8012cd6:	4642      	mov	r2, r8
 8012cd8:	464b      	mov	r3, r9
 8012cda:	4650      	mov	r0, sl
 8012cdc:	4659      	mov	r1, fp
 8012cde:	f7ed fddd 	bl	800089c <__aeabi_ddiv>
 8012ce2:	4682      	mov	sl, r0
 8012ce4:	468b      	mov	fp, r1
 8012ce6:	e028      	b.n	8012d3a <_dtoa_r+0x3d2>
 8012ce8:	2502      	movs	r5, #2
 8012cea:	e7f2      	b.n	8012cd2 <_dtoa_r+0x36a>
 8012cec:	07f9      	lsls	r1, r7, #31
 8012cee:	d508      	bpl.n	8012d02 <_dtoa_r+0x39a>
 8012cf0:	4640      	mov	r0, r8
 8012cf2:	4649      	mov	r1, r9
 8012cf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012cf8:	f7ed fca6 	bl	8000648 <__aeabi_dmul>
 8012cfc:	3501      	adds	r5, #1
 8012cfe:	4680      	mov	r8, r0
 8012d00:	4689      	mov	r9, r1
 8012d02:	107f      	asrs	r7, r7, #1
 8012d04:	3608      	adds	r6, #8
 8012d06:	e7e5      	b.n	8012cd4 <_dtoa_r+0x36c>
 8012d08:	f000 809b 	beq.w	8012e42 <_dtoa_r+0x4da>
 8012d0c:	9b00      	ldr	r3, [sp, #0]
 8012d0e:	4f9d      	ldr	r7, [pc, #628]	; (8012f84 <_dtoa_r+0x61c>)
 8012d10:	425e      	negs	r6, r3
 8012d12:	4b9b      	ldr	r3, [pc, #620]	; (8012f80 <_dtoa_r+0x618>)
 8012d14:	f006 020f 	and.w	r2, r6, #15
 8012d18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d20:	ec51 0b19 	vmov	r0, r1, d9
 8012d24:	f7ed fc90 	bl	8000648 <__aeabi_dmul>
 8012d28:	1136      	asrs	r6, r6, #4
 8012d2a:	4682      	mov	sl, r0
 8012d2c:	468b      	mov	fp, r1
 8012d2e:	2300      	movs	r3, #0
 8012d30:	2502      	movs	r5, #2
 8012d32:	2e00      	cmp	r6, #0
 8012d34:	d17a      	bne.n	8012e2c <_dtoa_r+0x4c4>
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d1d3      	bne.n	8012ce2 <_dtoa_r+0x37a>
 8012d3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	f000 8082 	beq.w	8012e46 <_dtoa_r+0x4de>
 8012d42:	4b91      	ldr	r3, [pc, #580]	; (8012f88 <_dtoa_r+0x620>)
 8012d44:	2200      	movs	r2, #0
 8012d46:	4650      	mov	r0, sl
 8012d48:	4659      	mov	r1, fp
 8012d4a:	f7ed feef 	bl	8000b2c <__aeabi_dcmplt>
 8012d4e:	2800      	cmp	r0, #0
 8012d50:	d079      	beq.n	8012e46 <_dtoa_r+0x4de>
 8012d52:	9b03      	ldr	r3, [sp, #12]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d076      	beq.n	8012e46 <_dtoa_r+0x4de>
 8012d58:	9b02      	ldr	r3, [sp, #8]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	dd36      	ble.n	8012dcc <_dtoa_r+0x464>
 8012d5e:	9b00      	ldr	r3, [sp, #0]
 8012d60:	4650      	mov	r0, sl
 8012d62:	4659      	mov	r1, fp
 8012d64:	1e5f      	subs	r7, r3, #1
 8012d66:	2200      	movs	r2, #0
 8012d68:	4b88      	ldr	r3, [pc, #544]	; (8012f8c <_dtoa_r+0x624>)
 8012d6a:	f7ed fc6d 	bl	8000648 <__aeabi_dmul>
 8012d6e:	9e02      	ldr	r6, [sp, #8]
 8012d70:	4682      	mov	sl, r0
 8012d72:	468b      	mov	fp, r1
 8012d74:	3501      	adds	r5, #1
 8012d76:	4628      	mov	r0, r5
 8012d78:	f7ed fbfc 	bl	8000574 <__aeabi_i2d>
 8012d7c:	4652      	mov	r2, sl
 8012d7e:	465b      	mov	r3, fp
 8012d80:	f7ed fc62 	bl	8000648 <__aeabi_dmul>
 8012d84:	4b82      	ldr	r3, [pc, #520]	; (8012f90 <_dtoa_r+0x628>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	f7ed faa8 	bl	80002dc <__adddf3>
 8012d8c:	46d0      	mov	r8, sl
 8012d8e:	46d9      	mov	r9, fp
 8012d90:	4682      	mov	sl, r0
 8012d92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012d96:	2e00      	cmp	r6, #0
 8012d98:	d158      	bne.n	8012e4c <_dtoa_r+0x4e4>
 8012d9a:	4b7e      	ldr	r3, [pc, #504]	; (8012f94 <_dtoa_r+0x62c>)
 8012d9c:	2200      	movs	r2, #0
 8012d9e:	4640      	mov	r0, r8
 8012da0:	4649      	mov	r1, r9
 8012da2:	f7ed fa99 	bl	80002d8 <__aeabi_dsub>
 8012da6:	4652      	mov	r2, sl
 8012da8:	465b      	mov	r3, fp
 8012daa:	4680      	mov	r8, r0
 8012dac:	4689      	mov	r9, r1
 8012dae:	f7ed fedb 	bl	8000b68 <__aeabi_dcmpgt>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	f040 8295 	bne.w	80132e2 <_dtoa_r+0x97a>
 8012db8:	4652      	mov	r2, sl
 8012dba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	4649      	mov	r1, r9
 8012dc2:	f7ed feb3 	bl	8000b2c <__aeabi_dcmplt>
 8012dc6:	2800      	cmp	r0, #0
 8012dc8:	f040 8289 	bne.w	80132de <_dtoa_r+0x976>
 8012dcc:	ec5b ab19 	vmov	sl, fp, d9
 8012dd0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012dd2:	2b00      	cmp	r3, #0
 8012dd4:	f2c0 8148 	blt.w	8013068 <_dtoa_r+0x700>
 8012dd8:	9a00      	ldr	r2, [sp, #0]
 8012dda:	2a0e      	cmp	r2, #14
 8012ddc:	f300 8144 	bgt.w	8013068 <_dtoa_r+0x700>
 8012de0:	4b67      	ldr	r3, [pc, #412]	; (8012f80 <_dtoa_r+0x618>)
 8012de2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012de6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	f280 80d5 	bge.w	8012f9c <_dtoa_r+0x634>
 8012df2:	9b03      	ldr	r3, [sp, #12]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	f300 80d1 	bgt.w	8012f9c <_dtoa_r+0x634>
 8012dfa:	f040 826f 	bne.w	80132dc <_dtoa_r+0x974>
 8012dfe:	4b65      	ldr	r3, [pc, #404]	; (8012f94 <_dtoa_r+0x62c>)
 8012e00:	2200      	movs	r2, #0
 8012e02:	4640      	mov	r0, r8
 8012e04:	4649      	mov	r1, r9
 8012e06:	f7ed fc1f 	bl	8000648 <__aeabi_dmul>
 8012e0a:	4652      	mov	r2, sl
 8012e0c:	465b      	mov	r3, fp
 8012e0e:	f7ed fea1 	bl	8000b54 <__aeabi_dcmpge>
 8012e12:	9e03      	ldr	r6, [sp, #12]
 8012e14:	4637      	mov	r7, r6
 8012e16:	2800      	cmp	r0, #0
 8012e18:	f040 8245 	bne.w	80132a6 <_dtoa_r+0x93e>
 8012e1c:	9d01      	ldr	r5, [sp, #4]
 8012e1e:	2331      	movs	r3, #49	; 0x31
 8012e20:	f805 3b01 	strb.w	r3, [r5], #1
 8012e24:	9b00      	ldr	r3, [sp, #0]
 8012e26:	3301      	adds	r3, #1
 8012e28:	9300      	str	r3, [sp, #0]
 8012e2a:	e240      	b.n	80132ae <_dtoa_r+0x946>
 8012e2c:	07f2      	lsls	r2, r6, #31
 8012e2e:	d505      	bpl.n	8012e3c <_dtoa_r+0x4d4>
 8012e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e34:	f7ed fc08 	bl	8000648 <__aeabi_dmul>
 8012e38:	3501      	adds	r5, #1
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	1076      	asrs	r6, r6, #1
 8012e3e:	3708      	adds	r7, #8
 8012e40:	e777      	b.n	8012d32 <_dtoa_r+0x3ca>
 8012e42:	2502      	movs	r5, #2
 8012e44:	e779      	b.n	8012d3a <_dtoa_r+0x3d2>
 8012e46:	9f00      	ldr	r7, [sp, #0]
 8012e48:	9e03      	ldr	r6, [sp, #12]
 8012e4a:	e794      	b.n	8012d76 <_dtoa_r+0x40e>
 8012e4c:	9901      	ldr	r1, [sp, #4]
 8012e4e:	4b4c      	ldr	r3, [pc, #304]	; (8012f80 <_dtoa_r+0x618>)
 8012e50:	4431      	add	r1, r6
 8012e52:	910d      	str	r1, [sp, #52]	; 0x34
 8012e54:	9908      	ldr	r1, [sp, #32]
 8012e56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e5e:	2900      	cmp	r1, #0
 8012e60:	d043      	beq.n	8012eea <_dtoa_r+0x582>
 8012e62:	494d      	ldr	r1, [pc, #308]	; (8012f98 <_dtoa_r+0x630>)
 8012e64:	2000      	movs	r0, #0
 8012e66:	f7ed fd19 	bl	800089c <__aeabi_ddiv>
 8012e6a:	4652      	mov	r2, sl
 8012e6c:	465b      	mov	r3, fp
 8012e6e:	f7ed fa33 	bl	80002d8 <__aeabi_dsub>
 8012e72:	9d01      	ldr	r5, [sp, #4]
 8012e74:	4682      	mov	sl, r0
 8012e76:	468b      	mov	fp, r1
 8012e78:	4649      	mov	r1, r9
 8012e7a:	4640      	mov	r0, r8
 8012e7c:	f7ed fe94 	bl	8000ba8 <__aeabi_d2iz>
 8012e80:	4606      	mov	r6, r0
 8012e82:	f7ed fb77 	bl	8000574 <__aeabi_i2d>
 8012e86:	4602      	mov	r2, r0
 8012e88:	460b      	mov	r3, r1
 8012e8a:	4640      	mov	r0, r8
 8012e8c:	4649      	mov	r1, r9
 8012e8e:	f7ed fa23 	bl	80002d8 <__aeabi_dsub>
 8012e92:	3630      	adds	r6, #48	; 0x30
 8012e94:	f805 6b01 	strb.w	r6, [r5], #1
 8012e98:	4652      	mov	r2, sl
 8012e9a:	465b      	mov	r3, fp
 8012e9c:	4680      	mov	r8, r0
 8012e9e:	4689      	mov	r9, r1
 8012ea0:	f7ed fe44 	bl	8000b2c <__aeabi_dcmplt>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d163      	bne.n	8012f70 <_dtoa_r+0x608>
 8012ea8:	4642      	mov	r2, r8
 8012eaa:	464b      	mov	r3, r9
 8012eac:	4936      	ldr	r1, [pc, #216]	; (8012f88 <_dtoa_r+0x620>)
 8012eae:	2000      	movs	r0, #0
 8012eb0:	f7ed fa12 	bl	80002d8 <__aeabi_dsub>
 8012eb4:	4652      	mov	r2, sl
 8012eb6:	465b      	mov	r3, fp
 8012eb8:	f7ed fe38 	bl	8000b2c <__aeabi_dcmplt>
 8012ebc:	2800      	cmp	r0, #0
 8012ebe:	f040 80b5 	bne.w	801302c <_dtoa_r+0x6c4>
 8012ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ec4:	429d      	cmp	r5, r3
 8012ec6:	d081      	beq.n	8012dcc <_dtoa_r+0x464>
 8012ec8:	4b30      	ldr	r3, [pc, #192]	; (8012f8c <_dtoa_r+0x624>)
 8012eca:	2200      	movs	r2, #0
 8012ecc:	4650      	mov	r0, sl
 8012ece:	4659      	mov	r1, fp
 8012ed0:	f7ed fbba 	bl	8000648 <__aeabi_dmul>
 8012ed4:	4b2d      	ldr	r3, [pc, #180]	; (8012f8c <_dtoa_r+0x624>)
 8012ed6:	4682      	mov	sl, r0
 8012ed8:	468b      	mov	fp, r1
 8012eda:	4640      	mov	r0, r8
 8012edc:	4649      	mov	r1, r9
 8012ede:	2200      	movs	r2, #0
 8012ee0:	f7ed fbb2 	bl	8000648 <__aeabi_dmul>
 8012ee4:	4680      	mov	r8, r0
 8012ee6:	4689      	mov	r9, r1
 8012ee8:	e7c6      	b.n	8012e78 <_dtoa_r+0x510>
 8012eea:	4650      	mov	r0, sl
 8012eec:	4659      	mov	r1, fp
 8012eee:	f7ed fbab 	bl	8000648 <__aeabi_dmul>
 8012ef2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ef4:	9d01      	ldr	r5, [sp, #4]
 8012ef6:	930f      	str	r3, [sp, #60]	; 0x3c
 8012ef8:	4682      	mov	sl, r0
 8012efa:	468b      	mov	fp, r1
 8012efc:	4649      	mov	r1, r9
 8012efe:	4640      	mov	r0, r8
 8012f00:	f7ed fe52 	bl	8000ba8 <__aeabi_d2iz>
 8012f04:	4606      	mov	r6, r0
 8012f06:	f7ed fb35 	bl	8000574 <__aeabi_i2d>
 8012f0a:	3630      	adds	r6, #48	; 0x30
 8012f0c:	4602      	mov	r2, r0
 8012f0e:	460b      	mov	r3, r1
 8012f10:	4640      	mov	r0, r8
 8012f12:	4649      	mov	r1, r9
 8012f14:	f7ed f9e0 	bl	80002d8 <__aeabi_dsub>
 8012f18:	f805 6b01 	strb.w	r6, [r5], #1
 8012f1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f1e:	429d      	cmp	r5, r3
 8012f20:	4680      	mov	r8, r0
 8012f22:	4689      	mov	r9, r1
 8012f24:	f04f 0200 	mov.w	r2, #0
 8012f28:	d124      	bne.n	8012f74 <_dtoa_r+0x60c>
 8012f2a:	4b1b      	ldr	r3, [pc, #108]	; (8012f98 <_dtoa_r+0x630>)
 8012f2c:	4650      	mov	r0, sl
 8012f2e:	4659      	mov	r1, fp
 8012f30:	f7ed f9d4 	bl	80002dc <__adddf3>
 8012f34:	4602      	mov	r2, r0
 8012f36:	460b      	mov	r3, r1
 8012f38:	4640      	mov	r0, r8
 8012f3a:	4649      	mov	r1, r9
 8012f3c:	f7ed fe14 	bl	8000b68 <__aeabi_dcmpgt>
 8012f40:	2800      	cmp	r0, #0
 8012f42:	d173      	bne.n	801302c <_dtoa_r+0x6c4>
 8012f44:	4652      	mov	r2, sl
 8012f46:	465b      	mov	r3, fp
 8012f48:	4913      	ldr	r1, [pc, #76]	; (8012f98 <_dtoa_r+0x630>)
 8012f4a:	2000      	movs	r0, #0
 8012f4c:	f7ed f9c4 	bl	80002d8 <__aeabi_dsub>
 8012f50:	4602      	mov	r2, r0
 8012f52:	460b      	mov	r3, r1
 8012f54:	4640      	mov	r0, r8
 8012f56:	4649      	mov	r1, r9
 8012f58:	f7ed fde8 	bl	8000b2c <__aeabi_dcmplt>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	f43f af35 	beq.w	8012dcc <_dtoa_r+0x464>
 8012f62:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012f64:	1e6b      	subs	r3, r5, #1
 8012f66:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f68:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f6c:	2b30      	cmp	r3, #48	; 0x30
 8012f6e:	d0f8      	beq.n	8012f62 <_dtoa_r+0x5fa>
 8012f70:	9700      	str	r7, [sp, #0]
 8012f72:	e049      	b.n	8013008 <_dtoa_r+0x6a0>
 8012f74:	4b05      	ldr	r3, [pc, #20]	; (8012f8c <_dtoa_r+0x624>)
 8012f76:	f7ed fb67 	bl	8000648 <__aeabi_dmul>
 8012f7a:	4680      	mov	r8, r0
 8012f7c:	4689      	mov	r9, r1
 8012f7e:	e7bd      	b.n	8012efc <_dtoa_r+0x594>
 8012f80:	08015008 	.word	0x08015008
 8012f84:	08014fe0 	.word	0x08014fe0
 8012f88:	3ff00000 	.word	0x3ff00000
 8012f8c:	40240000 	.word	0x40240000
 8012f90:	401c0000 	.word	0x401c0000
 8012f94:	40140000 	.word	0x40140000
 8012f98:	3fe00000 	.word	0x3fe00000
 8012f9c:	9d01      	ldr	r5, [sp, #4]
 8012f9e:	4656      	mov	r6, sl
 8012fa0:	465f      	mov	r7, fp
 8012fa2:	4642      	mov	r2, r8
 8012fa4:	464b      	mov	r3, r9
 8012fa6:	4630      	mov	r0, r6
 8012fa8:	4639      	mov	r1, r7
 8012faa:	f7ed fc77 	bl	800089c <__aeabi_ddiv>
 8012fae:	f7ed fdfb 	bl	8000ba8 <__aeabi_d2iz>
 8012fb2:	4682      	mov	sl, r0
 8012fb4:	f7ed fade 	bl	8000574 <__aeabi_i2d>
 8012fb8:	4642      	mov	r2, r8
 8012fba:	464b      	mov	r3, r9
 8012fbc:	f7ed fb44 	bl	8000648 <__aeabi_dmul>
 8012fc0:	4602      	mov	r2, r0
 8012fc2:	460b      	mov	r3, r1
 8012fc4:	4630      	mov	r0, r6
 8012fc6:	4639      	mov	r1, r7
 8012fc8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012fcc:	f7ed f984 	bl	80002d8 <__aeabi_dsub>
 8012fd0:	f805 6b01 	strb.w	r6, [r5], #1
 8012fd4:	9e01      	ldr	r6, [sp, #4]
 8012fd6:	9f03      	ldr	r7, [sp, #12]
 8012fd8:	1bae      	subs	r6, r5, r6
 8012fda:	42b7      	cmp	r7, r6
 8012fdc:	4602      	mov	r2, r0
 8012fde:	460b      	mov	r3, r1
 8012fe0:	d135      	bne.n	801304e <_dtoa_r+0x6e6>
 8012fe2:	f7ed f97b 	bl	80002dc <__adddf3>
 8012fe6:	4642      	mov	r2, r8
 8012fe8:	464b      	mov	r3, r9
 8012fea:	4606      	mov	r6, r0
 8012fec:	460f      	mov	r7, r1
 8012fee:	f7ed fdbb 	bl	8000b68 <__aeabi_dcmpgt>
 8012ff2:	b9d0      	cbnz	r0, 801302a <_dtoa_r+0x6c2>
 8012ff4:	4642      	mov	r2, r8
 8012ff6:	464b      	mov	r3, r9
 8012ff8:	4630      	mov	r0, r6
 8012ffa:	4639      	mov	r1, r7
 8012ffc:	f7ed fd8c 	bl	8000b18 <__aeabi_dcmpeq>
 8013000:	b110      	cbz	r0, 8013008 <_dtoa_r+0x6a0>
 8013002:	f01a 0f01 	tst.w	sl, #1
 8013006:	d110      	bne.n	801302a <_dtoa_r+0x6c2>
 8013008:	4620      	mov	r0, r4
 801300a:	ee18 1a10 	vmov	r1, s16
 801300e:	f000 fd05 	bl	8013a1c <_Bfree>
 8013012:	2300      	movs	r3, #0
 8013014:	9800      	ldr	r0, [sp, #0]
 8013016:	702b      	strb	r3, [r5, #0]
 8013018:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801301a:	3001      	adds	r0, #1
 801301c:	6018      	str	r0, [r3, #0]
 801301e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013020:	2b00      	cmp	r3, #0
 8013022:	f43f acf1 	beq.w	8012a08 <_dtoa_r+0xa0>
 8013026:	601d      	str	r5, [r3, #0]
 8013028:	e4ee      	b.n	8012a08 <_dtoa_r+0xa0>
 801302a:	9f00      	ldr	r7, [sp, #0]
 801302c:	462b      	mov	r3, r5
 801302e:	461d      	mov	r5, r3
 8013030:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013034:	2a39      	cmp	r2, #57	; 0x39
 8013036:	d106      	bne.n	8013046 <_dtoa_r+0x6de>
 8013038:	9a01      	ldr	r2, [sp, #4]
 801303a:	429a      	cmp	r2, r3
 801303c:	d1f7      	bne.n	801302e <_dtoa_r+0x6c6>
 801303e:	9901      	ldr	r1, [sp, #4]
 8013040:	2230      	movs	r2, #48	; 0x30
 8013042:	3701      	adds	r7, #1
 8013044:	700a      	strb	r2, [r1, #0]
 8013046:	781a      	ldrb	r2, [r3, #0]
 8013048:	3201      	adds	r2, #1
 801304a:	701a      	strb	r2, [r3, #0]
 801304c:	e790      	b.n	8012f70 <_dtoa_r+0x608>
 801304e:	4ba6      	ldr	r3, [pc, #664]	; (80132e8 <_dtoa_r+0x980>)
 8013050:	2200      	movs	r2, #0
 8013052:	f7ed faf9 	bl	8000648 <__aeabi_dmul>
 8013056:	2200      	movs	r2, #0
 8013058:	2300      	movs	r3, #0
 801305a:	4606      	mov	r6, r0
 801305c:	460f      	mov	r7, r1
 801305e:	f7ed fd5b 	bl	8000b18 <__aeabi_dcmpeq>
 8013062:	2800      	cmp	r0, #0
 8013064:	d09d      	beq.n	8012fa2 <_dtoa_r+0x63a>
 8013066:	e7cf      	b.n	8013008 <_dtoa_r+0x6a0>
 8013068:	9a08      	ldr	r2, [sp, #32]
 801306a:	2a00      	cmp	r2, #0
 801306c:	f000 80d7 	beq.w	801321e <_dtoa_r+0x8b6>
 8013070:	9a06      	ldr	r2, [sp, #24]
 8013072:	2a01      	cmp	r2, #1
 8013074:	f300 80ba 	bgt.w	80131ec <_dtoa_r+0x884>
 8013078:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801307a:	2a00      	cmp	r2, #0
 801307c:	f000 80b2 	beq.w	80131e4 <_dtoa_r+0x87c>
 8013080:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013084:	9e07      	ldr	r6, [sp, #28]
 8013086:	9d04      	ldr	r5, [sp, #16]
 8013088:	9a04      	ldr	r2, [sp, #16]
 801308a:	441a      	add	r2, r3
 801308c:	9204      	str	r2, [sp, #16]
 801308e:	9a05      	ldr	r2, [sp, #20]
 8013090:	2101      	movs	r1, #1
 8013092:	441a      	add	r2, r3
 8013094:	4620      	mov	r0, r4
 8013096:	9205      	str	r2, [sp, #20]
 8013098:	f000 fd78 	bl	8013b8c <__i2b>
 801309c:	4607      	mov	r7, r0
 801309e:	2d00      	cmp	r5, #0
 80130a0:	dd0c      	ble.n	80130bc <_dtoa_r+0x754>
 80130a2:	9b05      	ldr	r3, [sp, #20]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	dd09      	ble.n	80130bc <_dtoa_r+0x754>
 80130a8:	42ab      	cmp	r3, r5
 80130aa:	9a04      	ldr	r2, [sp, #16]
 80130ac:	bfa8      	it	ge
 80130ae:	462b      	movge	r3, r5
 80130b0:	1ad2      	subs	r2, r2, r3
 80130b2:	9204      	str	r2, [sp, #16]
 80130b4:	9a05      	ldr	r2, [sp, #20]
 80130b6:	1aed      	subs	r5, r5, r3
 80130b8:	1ad3      	subs	r3, r2, r3
 80130ba:	9305      	str	r3, [sp, #20]
 80130bc:	9b07      	ldr	r3, [sp, #28]
 80130be:	b31b      	cbz	r3, 8013108 <_dtoa_r+0x7a0>
 80130c0:	9b08      	ldr	r3, [sp, #32]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	f000 80af 	beq.w	8013226 <_dtoa_r+0x8be>
 80130c8:	2e00      	cmp	r6, #0
 80130ca:	dd13      	ble.n	80130f4 <_dtoa_r+0x78c>
 80130cc:	4639      	mov	r1, r7
 80130ce:	4632      	mov	r2, r6
 80130d0:	4620      	mov	r0, r4
 80130d2:	f000 fe1b 	bl	8013d0c <__pow5mult>
 80130d6:	ee18 2a10 	vmov	r2, s16
 80130da:	4601      	mov	r1, r0
 80130dc:	4607      	mov	r7, r0
 80130de:	4620      	mov	r0, r4
 80130e0:	f000 fd6a 	bl	8013bb8 <__multiply>
 80130e4:	ee18 1a10 	vmov	r1, s16
 80130e8:	4680      	mov	r8, r0
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 fc96 	bl	8013a1c <_Bfree>
 80130f0:	ee08 8a10 	vmov	s16, r8
 80130f4:	9b07      	ldr	r3, [sp, #28]
 80130f6:	1b9a      	subs	r2, r3, r6
 80130f8:	d006      	beq.n	8013108 <_dtoa_r+0x7a0>
 80130fa:	ee18 1a10 	vmov	r1, s16
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fe04 	bl	8013d0c <__pow5mult>
 8013104:	ee08 0a10 	vmov	s16, r0
 8013108:	2101      	movs	r1, #1
 801310a:	4620      	mov	r0, r4
 801310c:	f000 fd3e 	bl	8013b8c <__i2b>
 8013110:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013112:	2b00      	cmp	r3, #0
 8013114:	4606      	mov	r6, r0
 8013116:	f340 8088 	ble.w	801322a <_dtoa_r+0x8c2>
 801311a:	461a      	mov	r2, r3
 801311c:	4601      	mov	r1, r0
 801311e:	4620      	mov	r0, r4
 8013120:	f000 fdf4 	bl	8013d0c <__pow5mult>
 8013124:	9b06      	ldr	r3, [sp, #24]
 8013126:	2b01      	cmp	r3, #1
 8013128:	4606      	mov	r6, r0
 801312a:	f340 8081 	ble.w	8013230 <_dtoa_r+0x8c8>
 801312e:	f04f 0800 	mov.w	r8, #0
 8013132:	6933      	ldr	r3, [r6, #16]
 8013134:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013138:	6918      	ldr	r0, [r3, #16]
 801313a:	f000 fcd7 	bl	8013aec <__hi0bits>
 801313e:	f1c0 0020 	rsb	r0, r0, #32
 8013142:	9b05      	ldr	r3, [sp, #20]
 8013144:	4418      	add	r0, r3
 8013146:	f010 001f 	ands.w	r0, r0, #31
 801314a:	f000 8092 	beq.w	8013272 <_dtoa_r+0x90a>
 801314e:	f1c0 0320 	rsb	r3, r0, #32
 8013152:	2b04      	cmp	r3, #4
 8013154:	f340 808a 	ble.w	801326c <_dtoa_r+0x904>
 8013158:	f1c0 001c 	rsb	r0, r0, #28
 801315c:	9b04      	ldr	r3, [sp, #16]
 801315e:	4403      	add	r3, r0
 8013160:	9304      	str	r3, [sp, #16]
 8013162:	9b05      	ldr	r3, [sp, #20]
 8013164:	4403      	add	r3, r0
 8013166:	4405      	add	r5, r0
 8013168:	9305      	str	r3, [sp, #20]
 801316a:	9b04      	ldr	r3, [sp, #16]
 801316c:	2b00      	cmp	r3, #0
 801316e:	dd07      	ble.n	8013180 <_dtoa_r+0x818>
 8013170:	ee18 1a10 	vmov	r1, s16
 8013174:	461a      	mov	r2, r3
 8013176:	4620      	mov	r0, r4
 8013178:	f000 fe22 	bl	8013dc0 <__lshift>
 801317c:	ee08 0a10 	vmov	s16, r0
 8013180:	9b05      	ldr	r3, [sp, #20]
 8013182:	2b00      	cmp	r3, #0
 8013184:	dd05      	ble.n	8013192 <_dtoa_r+0x82a>
 8013186:	4631      	mov	r1, r6
 8013188:	461a      	mov	r2, r3
 801318a:	4620      	mov	r0, r4
 801318c:	f000 fe18 	bl	8013dc0 <__lshift>
 8013190:	4606      	mov	r6, r0
 8013192:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013194:	2b00      	cmp	r3, #0
 8013196:	d06e      	beq.n	8013276 <_dtoa_r+0x90e>
 8013198:	ee18 0a10 	vmov	r0, s16
 801319c:	4631      	mov	r1, r6
 801319e:	f000 fe7f 	bl	8013ea0 <__mcmp>
 80131a2:	2800      	cmp	r0, #0
 80131a4:	da67      	bge.n	8013276 <_dtoa_r+0x90e>
 80131a6:	9b00      	ldr	r3, [sp, #0]
 80131a8:	3b01      	subs	r3, #1
 80131aa:	ee18 1a10 	vmov	r1, s16
 80131ae:	9300      	str	r3, [sp, #0]
 80131b0:	220a      	movs	r2, #10
 80131b2:	2300      	movs	r3, #0
 80131b4:	4620      	mov	r0, r4
 80131b6:	f000 fc53 	bl	8013a60 <__multadd>
 80131ba:	9b08      	ldr	r3, [sp, #32]
 80131bc:	ee08 0a10 	vmov	s16, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	f000 81b1 	beq.w	8013528 <_dtoa_r+0xbc0>
 80131c6:	2300      	movs	r3, #0
 80131c8:	4639      	mov	r1, r7
 80131ca:	220a      	movs	r2, #10
 80131cc:	4620      	mov	r0, r4
 80131ce:	f000 fc47 	bl	8013a60 <__multadd>
 80131d2:	9b02      	ldr	r3, [sp, #8]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	4607      	mov	r7, r0
 80131d8:	f300 808e 	bgt.w	80132f8 <_dtoa_r+0x990>
 80131dc:	9b06      	ldr	r3, [sp, #24]
 80131de:	2b02      	cmp	r3, #2
 80131e0:	dc51      	bgt.n	8013286 <_dtoa_r+0x91e>
 80131e2:	e089      	b.n	80132f8 <_dtoa_r+0x990>
 80131e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80131e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80131ea:	e74b      	b.n	8013084 <_dtoa_r+0x71c>
 80131ec:	9b03      	ldr	r3, [sp, #12]
 80131ee:	1e5e      	subs	r6, r3, #1
 80131f0:	9b07      	ldr	r3, [sp, #28]
 80131f2:	42b3      	cmp	r3, r6
 80131f4:	bfbf      	itttt	lt
 80131f6:	9b07      	ldrlt	r3, [sp, #28]
 80131f8:	9607      	strlt	r6, [sp, #28]
 80131fa:	1af2      	sublt	r2, r6, r3
 80131fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80131fe:	bfb6      	itet	lt
 8013200:	189b      	addlt	r3, r3, r2
 8013202:	1b9e      	subge	r6, r3, r6
 8013204:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013206:	9b03      	ldr	r3, [sp, #12]
 8013208:	bfb8      	it	lt
 801320a:	2600      	movlt	r6, #0
 801320c:	2b00      	cmp	r3, #0
 801320e:	bfb7      	itett	lt
 8013210:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013214:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013218:	1a9d      	sublt	r5, r3, r2
 801321a:	2300      	movlt	r3, #0
 801321c:	e734      	b.n	8013088 <_dtoa_r+0x720>
 801321e:	9e07      	ldr	r6, [sp, #28]
 8013220:	9d04      	ldr	r5, [sp, #16]
 8013222:	9f08      	ldr	r7, [sp, #32]
 8013224:	e73b      	b.n	801309e <_dtoa_r+0x736>
 8013226:	9a07      	ldr	r2, [sp, #28]
 8013228:	e767      	b.n	80130fa <_dtoa_r+0x792>
 801322a:	9b06      	ldr	r3, [sp, #24]
 801322c:	2b01      	cmp	r3, #1
 801322e:	dc18      	bgt.n	8013262 <_dtoa_r+0x8fa>
 8013230:	f1ba 0f00 	cmp.w	sl, #0
 8013234:	d115      	bne.n	8013262 <_dtoa_r+0x8fa>
 8013236:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801323a:	b993      	cbnz	r3, 8013262 <_dtoa_r+0x8fa>
 801323c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013240:	0d1b      	lsrs	r3, r3, #20
 8013242:	051b      	lsls	r3, r3, #20
 8013244:	b183      	cbz	r3, 8013268 <_dtoa_r+0x900>
 8013246:	9b04      	ldr	r3, [sp, #16]
 8013248:	3301      	adds	r3, #1
 801324a:	9304      	str	r3, [sp, #16]
 801324c:	9b05      	ldr	r3, [sp, #20]
 801324e:	3301      	adds	r3, #1
 8013250:	9305      	str	r3, [sp, #20]
 8013252:	f04f 0801 	mov.w	r8, #1
 8013256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013258:	2b00      	cmp	r3, #0
 801325a:	f47f af6a 	bne.w	8013132 <_dtoa_r+0x7ca>
 801325e:	2001      	movs	r0, #1
 8013260:	e76f      	b.n	8013142 <_dtoa_r+0x7da>
 8013262:	f04f 0800 	mov.w	r8, #0
 8013266:	e7f6      	b.n	8013256 <_dtoa_r+0x8ee>
 8013268:	4698      	mov	r8, r3
 801326a:	e7f4      	b.n	8013256 <_dtoa_r+0x8ee>
 801326c:	f43f af7d 	beq.w	801316a <_dtoa_r+0x802>
 8013270:	4618      	mov	r0, r3
 8013272:	301c      	adds	r0, #28
 8013274:	e772      	b.n	801315c <_dtoa_r+0x7f4>
 8013276:	9b03      	ldr	r3, [sp, #12]
 8013278:	2b00      	cmp	r3, #0
 801327a:	dc37      	bgt.n	80132ec <_dtoa_r+0x984>
 801327c:	9b06      	ldr	r3, [sp, #24]
 801327e:	2b02      	cmp	r3, #2
 8013280:	dd34      	ble.n	80132ec <_dtoa_r+0x984>
 8013282:	9b03      	ldr	r3, [sp, #12]
 8013284:	9302      	str	r3, [sp, #8]
 8013286:	9b02      	ldr	r3, [sp, #8]
 8013288:	b96b      	cbnz	r3, 80132a6 <_dtoa_r+0x93e>
 801328a:	4631      	mov	r1, r6
 801328c:	2205      	movs	r2, #5
 801328e:	4620      	mov	r0, r4
 8013290:	f000 fbe6 	bl	8013a60 <__multadd>
 8013294:	4601      	mov	r1, r0
 8013296:	4606      	mov	r6, r0
 8013298:	ee18 0a10 	vmov	r0, s16
 801329c:	f000 fe00 	bl	8013ea0 <__mcmp>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	f73f adbb 	bgt.w	8012e1c <_dtoa_r+0x4b4>
 80132a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132a8:	9d01      	ldr	r5, [sp, #4]
 80132aa:	43db      	mvns	r3, r3
 80132ac:	9300      	str	r3, [sp, #0]
 80132ae:	f04f 0800 	mov.w	r8, #0
 80132b2:	4631      	mov	r1, r6
 80132b4:	4620      	mov	r0, r4
 80132b6:	f000 fbb1 	bl	8013a1c <_Bfree>
 80132ba:	2f00      	cmp	r7, #0
 80132bc:	f43f aea4 	beq.w	8013008 <_dtoa_r+0x6a0>
 80132c0:	f1b8 0f00 	cmp.w	r8, #0
 80132c4:	d005      	beq.n	80132d2 <_dtoa_r+0x96a>
 80132c6:	45b8      	cmp	r8, r7
 80132c8:	d003      	beq.n	80132d2 <_dtoa_r+0x96a>
 80132ca:	4641      	mov	r1, r8
 80132cc:	4620      	mov	r0, r4
 80132ce:	f000 fba5 	bl	8013a1c <_Bfree>
 80132d2:	4639      	mov	r1, r7
 80132d4:	4620      	mov	r0, r4
 80132d6:	f000 fba1 	bl	8013a1c <_Bfree>
 80132da:	e695      	b.n	8013008 <_dtoa_r+0x6a0>
 80132dc:	2600      	movs	r6, #0
 80132de:	4637      	mov	r7, r6
 80132e0:	e7e1      	b.n	80132a6 <_dtoa_r+0x93e>
 80132e2:	9700      	str	r7, [sp, #0]
 80132e4:	4637      	mov	r7, r6
 80132e6:	e599      	b.n	8012e1c <_dtoa_r+0x4b4>
 80132e8:	40240000 	.word	0x40240000
 80132ec:	9b08      	ldr	r3, [sp, #32]
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	f000 80ca 	beq.w	8013488 <_dtoa_r+0xb20>
 80132f4:	9b03      	ldr	r3, [sp, #12]
 80132f6:	9302      	str	r3, [sp, #8]
 80132f8:	2d00      	cmp	r5, #0
 80132fa:	dd05      	ble.n	8013308 <_dtoa_r+0x9a0>
 80132fc:	4639      	mov	r1, r7
 80132fe:	462a      	mov	r2, r5
 8013300:	4620      	mov	r0, r4
 8013302:	f000 fd5d 	bl	8013dc0 <__lshift>
 8013306:	4607      	mov	r7, r0
 8013308:	f1b8 0f00 	cmp.w	r8, #0
 801330c:	d05b      	beq.n	80133c6 <_dtoa_r+0xa5e>
 801330e:	6879      	ldr	r1, [r7, #4]
 8013310:	4620      	mov	r0, r4
 8013312:	f000 fb43 	bl	801399c <_Balloc>
 8013316:	4605      	mov	r5, r0
 8013318:	b928      	cbnz	r0, 8013326 <_dtoa_r+0x9be>
 801331a:	4b87      	ldr	r3, [pc, #540]	; (8013538 <_dtoa_r+0xbd0>)
 801331c:	4602      	mov	r2, r0
 801331e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013322:	f7ff bb3b 	b.w	801299c <_dtoa_r+0x34>
 8013326:	693a      	ldr	r2, [r7, #16]
 8013328:	3202      	adds	r2, #2
 801332a:	0092      	lsls	r2, r2, #2
 801332c:	f107 010c 	add.w	r1, r7, #12
 8013330:	300c      	adds	r0, #12
 8013332:	f7fe fd1f 	bl	8011d74 <memcpy>
 8013336:	2201      	movs	r2, #1
 8013338:	4629      	mov	r1, r5
 801333a:	4620      	mov	r0, r4
 801333c:	f000 fd40 	bl	8013dc0 <__lshift>
 8013340:	9b01      	ldr	r3, [sp, #4]
 8013342:	f103 0901 	add.w	r9, r3, #1
 8013346:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801334a:	4413      	add	r3, r2
 801334c:	9305      	str	r3, [sp, #20]
 801334e:	f00a 0301 	and.w	r3, sl, #1
 8013352:	46b8      	mov	r8, r7
 8013354:	9304      	str	r3, [sp, #16]
 8013356:	4607      	mov	r7, r0
 8013358:	4631      	mov	r1, r6
 801335a:	ee18 0a10 	vmov	r0, s16
 801335e:	f7ff fa77 	bl	8012850 <quorem>
 8013362:	4641      	mov	r1, r8
 8013364:	9002      	str	r0, [sp, #8]
 8013366:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801336a:	ee18 0a10 	vmov	r0, s16
 801336e:	f000 fd97 	bl	8013ea0 <__mcmp>
 8013372:	463a      	mov	r2, r7
 8013374:	9003      	str	r0, [sp, #12]
 8013376:	4631      	mov	r1, r6
 8013378:	4620      	mov	r0, r4
 801337a:	f000 fdad 	bl	8013ed8 <__mdiff>
 801337e:	68c2      	ldr	r2, [r0, #12]
 8013380:	f109 3bff 	add.w	fp, r9, #4294967295
 8013384:	4605      	mov	r5, r0
 8013386:	bb02      	cbnz	r2, 80133ca <_dtoa_r+0xa62>
 8013388:	4601      	mov	r1, r0
 801338a:	ee18 0a10 	vmov	r0, s16
 801338e:	f000 fd87 	bl	8013ea0 <__mcmp>
 8013392:	4602      	mov	r2, r0
 8013394:	4629      	mov	r1, r5
 8013396:	4620      	mov	r0, r4
 8013398:	9207      	str	r2, [sp, #28]
 801339a:	f000 fb3f 	bl	8013a1c <_Bfree>
 801339e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80133a2:	ea43 0102 	orr.w	r1, r3, r2
 80133a6:	9b04      	ldr	r3, [sp, #16]
 80133a8:	430b      	orrs	r3, r1
 80133aa:	464d      	mov	r5, r9
 80133ac:	d10f      	bne.n	80133ce <_dtoa_r+0xa66>
 80133ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80133b2:	d02a      	beq.n	801340a <_dtoa_r+0xaa2>
 80133b4:	9b03      	ldr	r3, [sp, #12]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	dd02      	ble.n	80133c0 <_dtoa_r+0xa58>
 80133ba:	9b02      	ldr	r3, [sp, #8]
 80133bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80133c0:	f88b a000 	strb.w	sl, [fp]
 80133c4:	e775      	b.n	80132b2 <_dtoa_r+0x94a>
 80133c6:	4638      	mov	r0, r7
 80133c8:	e7ba      	b.n	8013340 <_dtoa_r+0x9d8>
 80133ca:	2201      	movs	r2, #1
 80133cc:	e7e2      	b.n	8013394 <_dtoa_r+0xa2c>
 80133ce:	9b03      	ldr	r3, [sp, #12]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	db04      	blt.n	80133de <_dtoa_r+0xa76>
 80133d4:	9906      	ldr	r1, [sp, #24]
 80133d6:	430b      	orrs	r3, r1
 80133d8:	9904      	ldr	r1, [sp, #16]
 80133da:	430b      	orrs	r3, r1
 80133dc:	d122      	bne.n	8013424 <_dtoa_r+0xabc>
 80133de:	2a00      	cmp	r2, #0
 80133e0:	ddee      	ble.n	80133c0 <_dtoa_r+0xa58>
 80133e2:	ee18 1a10 	vmov	r1, s16
 80133e6:	2201      	movs	r2, #1
 80133e8:	4620      	mov	r0, r4
 80133ea:	f000 fce9 	bl	8013dc0 <__lshift>
 80133ee:	4631      	mov	r1, r6
 80133f0:	ee08 0a10 	vmov	s16, r0
 80133f4:	f000 fd54 	bl	8013ea0 <__mcmp>
 80133f8:	2800      	cmp	r0, #0
 80133fa:	dc03      	bgt.n	8013404 <_dtoa_r+0xa9c>
 80133fc:	d1e0      	bne.n	80133c0 <_dtoa_r+0xa58>
 80133fe:	f01a 0f01 	tst.w	sl, #1
 8013402:	d0dd      	beq.n	80133c0 <_dtoa_r+0xa58>
 8013404:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013408:	d1d7      	bne.n	80133ba <_dtoa_r+0xa52>
 801340a:	2339      	movs	r3, #57	; 0x39
 801340c:	f88b 3000 	strb.w	r3, [fp]
 8013410:	462b      	mov	r3, r5
 8013412:	461d      	mov	r5, r3
 8013414:	3b01      	subs	r3, #1
 8013416:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801341a:	2a39      	cmp	r2, #57	; 0x39
 801341c:	d071      	beq.n	8013502 <_dtoa_r+0xb9a>
 801341e:	3201      	adds	r2, #1
 8013420:	701a      	strb	r2, [r3, #0]
 8013422:	e746      	b.n	80132b2 <_dtoa_r+0x94a>
 8013424:	2a00      	cmp	r2, #0
 8013426:	dd07      	ble.n	8013438 <_dtoa_r+0xad0>
 8013428:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801342c:	d0ed      	beq.n	801340a <_dtoa_r+0xaa2>
 801342e:	f10a 0301 	add.w	r3, sl, #1
 8013432:	f88b 3000 	strb.w	r3, [fp]
 8013436:	e73c      	b.n	80132b2 <_dtoa_r+0x94a>
 8013438:	9b05      	ldr	r3, [sp, #20]
 801343a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801343e:	4599      	cmp	r9, r3
 8013440:	d047      	beq.n	80134d2 <_dtoa_r+0xb6a>
 8013442:	ee18 1a10 	vmov	r1, s16
 8013446:	2300      	movs	r3, #0
 8013448:	220a      	movs	r2, #10
 801344a:	4620      	mov	r0, r4
 801344c:	f000 fb08 	bl	8013a60 <__multadd>
 8013450:	45b8      	cmp	r8, r7
 8013452:	ee08 0a10 	vmov	s16, r0
 8013456:	f04f 0300 	mov.w	r3, #0
 801345a:	f04f 020a 	mov.w	r2, #10
 801345e:	4641      	mov	r1, r8
 8013460:	4620      	mov	r0, r4
 8013462:	d106      	bne.n	8013472 <_dtoa_r+0xb0a>
 8013464:	f000 fafc 	bl	8013a60 <__multadd>
 8013468:	4680      	mov	r8, r0
 801346a:	4607      	mov	r7, r0
 801346c:	f109 0901 	add.w	r9, r9, #1
 8013470:	e772      	b.n	8013358 <_dtoa_r+0x9f0>
 8013472:	f000 faf5 	bl	8013a60 <__multadd>
 8013476:	4639      	mov	r1, r7
 8013478:	4680      	mov	r8, r0
 801347a:	2300      	movs	r3, #0
 801347c:	220a      	movs	r2, #10
 801347e:	4620      	mov	r0, r4
 8013480:	f000 faee 	bl	8013a60 <__multadd>
 8013484:	4607      	mov	r7, r0
 8013486:	e7f1      	b.n	801346c <_dtoa_r+0xb04>
 8013488:	9b03      	ldr	r3, [sp, #12]
 801348a:	9302      	str	r3, [sp, #8]
 801348c:	9d01      	ldr	r5, [sp, #4]
 801348e:	ee18 0a10 	vmov	r0, s16
 8013492:	4631      	mov	r1, r6
 8013494:	f7ff f9dc 	bl	8012850 <quorem>
 8013498:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801349c:	9b01      	ldr	r3, [sp, #4]
 801349e:	f805 ab01 	strb.w	sl, [r5], #1
 80134a2:	1aea      	subs	r2, r5, r3
 80134a4:	9b02      	ldr	r3, [sp, #8]
 80134a6:	4293      	cmp	r3, r2
 80134a8:	dd09      	ble.n	80134be <_dtoa_r+0xb56>
 80134aa:	ee18 1a10 	vmov	r1, s16
 80134ae:	2300      	movs	r3, #0
 80134b0:	220a      	movs	r2, #10
 80134b2:	4620      	mov	r0, r4
 80134b4:	f000 fad4 	bl	8013a60 <__multadd>
 80134b8:	ee08 0a10 	vmov	s16, r0
 80134bc:	e7e7      	b.n	801348e <_dtoa_r+0xb26>
 80134be:	9b02      	ldr	r3, [sp, #8]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	bfc8      	it	gt
 80134c4:	461d      	movgt	r5, r3
 80134c6:	9b01      	ldr	r3, [sp, #4]
 80134c8:	bfd8      	it	le
 80134ca:	2501      	movle	r5, #1
 80134cc:	441d      	add	r5, r3
 80134ce:	f04f 0800 	mov.w	r8, #0
 80134d2:	ee18 1a10 	vmov	r1, s16
 80134d6:	2201      	movs	r2, #1
 80134d8:	4620      	mov	r0, r4
 80134da:	f000 fc71 	bl	8013dc0 <__lshift>
 80134de:	4631      	mov	r1, r6
 80134e0:	ee08 0a10 	vmov	s16, r0
 80134e4:	f000 fcdc 	bl	8013ea0 <__mcmp>
 80134e8:	2800      	cmp	r0, #0
 80134ea:	dc91      	bgt.n	8013410 <_dtoa_r+0xaa8>
 80134ec:	d102      	bne.n	80134f4 <_dtoa_r+0xb8c>
 80134ee:	f01a 0f01 	tst.w	sl, #1
 80134f2:	d18d      	bne.n	8013410 <_dtoa_r+0xaa8>
 80134f4:	462b      	mov	r3, r5
 80134f6:	461d      	mov	r5, r3
 80134f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80134fc:	2a30      	cmp	r2, #48	; 0x30
 80134fe:	d0fa      	beq.n	80134f6 <_dtoa_r+0xb8e>
 8013500:	e6d7      	b.n	80132b2 <_dtoa_r+0x94a>
 8013502:	9a01      	ldr	r2, [sp, #4]
 8013504:	429a      	cmp	r2, r3
 8013506:	d184      	bne.n	8013412 <_dtoa_r+0xaaa>
 8013508:	9b00      	ldr	r3, [sp, #0]
 801350a:	3301      	adds	r3, #1
 801350c:	9300      	str	r3, [sp, #0]
 801350e:	2331      	movs	r3, #49	; 0x31
 8013510:	7013      	strb	r3, [r2, #0]
 8013512:	e6ce      	b.n	80132b2 <_dtoa_r+0x94a>
 8013514:	4b09      	ldr	r3, [pc, #36]	; (801353c <_dtoa_r+0xbd4>)
 8013516:	f7ff ba95 	b.w	8012a44 <_dtoa_r+0xdc>
 801351a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801351c:	2b00      	cmp	r3, #0
 801351e:	f47f aa6e 	bne.w	80129fe <_dtoa_r+0x96>
 8013522:	4b07      	ldr	r3, [pc, #28]	; (8013540 <_dtoa_r+0xbd8>)
 8013524:	f7ff ba8e 	b.w	8012a44 <_dtoa_r+0xdc>
 8013528:	9b02      	ldr	r3, [sp, #8]
 801352a:	2b00      	cmp	r3, #0
 801352c:	dcae      	bgt.n	801348c <_dtoa_r+0xb24>
 801352e:	9b06      	ldr	r3, [sp, #24]
 8013530:	2b02      	cmp	r3, #2
 8013532:	f73f aea8 	bgt.w	8013286 <_dtoa_r+0x91e>
 8013536:	e7a9      	b.n	801348c <_dtoa_r+0xb24>
 8013538:	08014f13 	.word	0x08014f13
 801353c:	08014e70 	.word	0x08014e70
 8013540:	08014e94 	.word	0x08014e94

08013544 <__sflush_r>:
 8013544:	898a      	ldrh	r2, [r1, #12]
 8013546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801354a:	4605      	mov	r5, r0
 801354c:	0710      	lsls	r0, r2, #28
 801354e:	460c      	mov	r4, r1
 8013550:	d458      	bmi.n	8013604 <__sflush_r+0xc0>
 8013552:	684b      	ldr	r3, [r1, #4]
 8013554:	2b00      	cmp	r3, #0
 8013556:	dc05      	bgt.n	8013564 <__sflush_r+0x20>
 8013558:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801355a:	2b00      	cmp	r3, #0
 801355c:	dc02      	bgt.n	8013564 <__sflush_r+0x20>
 801355e:	2000      	movs	r0, #0
 8013560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013564:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013566:	2e00      	cmp	r6, #0
 8013568:	d0f9      	beq.n	801355e <__sflush_r+0x1a>
 801356a:	2300      	movs	r3, #0
 801356c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013570:	682f      	ldr	r7, [r5, #0]
 8013572:	602b      	str	r3, [r5, #0]
 8013574:	d032      	beq.n	80135dc <__sflush_r+0x98>
 8013576:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013578:	89a3      	ldrh	r3, [r4, #12]
 801357a:	075a      	lsls	r2, r3, #29
 801357c:	d505      	bpl.n	801358a <__sflush_r+0x46>
 801357e:	6863      	ldr	r3, [r4, #4]
 8013580:	1ac0      	subs	r0, r0, r3
 8013582:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013584:	b10b      	cbz	r3, 801358a <__sflush_r+0x46>
 8013586:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013588:	1ac0      	subs	r0, r0, r3
 801358a:	2300      	movs	r3, #0
 801358c:	4602      	mov	r2, r0
 801358e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013590:	6a21      	ldr	r1, [r4, #32]
 8013592:	4628      	mov	r0, r5
 8013594:	47b0      	blx	r6
 8013596:	1c43      	adds	r3, r0, #1
 8013598:	89a3      	ldrh	r3, [r4, #12]
 801359a:	d106      	bne.n	80135aa <__sflush_r+0x66>
 801359c:	6829      	ldr	r1, [r5, #0]
 801359e:	291d      	cmp	r1, #29
 80135a0:	d82c      	bhi.n	80135fc <__sflush_r+0xb8>
 80135a2:	4a2a      	ldr	r2, [pc, #168]	; (801364c <__sflush_r+0x108>)
 80135a4:	40ca      	lsrs	r2, r1
 80135a6:	07d6      	lsls	r6, r2, #31
 80135a8:	d528      	bpl.n	80135fc <__sflush_r+0xb8>
 80135aa:	2200      	movs	r2, #0
 80135ac:	6062      	str	r2, [r4, #4]
 80135ae:	04d9      	lsls	r1, r3, #19
 80135b0:	6922      	ldr	r2, [r4, #16]
 80135b2:	6022      	str	r2, [r4, #0]
 80135b4:	d504      	bpl.n	80135c0 <__sflush_r+0x7c>
 80135b6:	1c42      	adds	r2, r0, #1
 80135b8:	d101      	bne.n	80135be <__sflush_r+0x7a>
 80135ba:	682b      	ldr	r3, [r5, #0]
 80135bc:	b903      	cbnz	r3, 80135c0 <__sflush_r+0x7c>
 80135be:	6560      	str	r0, [r4, #84]	; 0x54
 80135c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80135c2:	602f      	str	r7, [r5, #0]
 80135c4:	2900      	cmp	r1, #0
 80135c6:	d0ca      	beq.n	801355e <__sflush_r+0x1a>
 80135c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80135cc:	4299      	cmp	r1, r3
 80135ce:	d002      	beq.n	80135d6 <__sflush_r+0x92>
 80135d0:	4628      	mov	r0, r5
 80135d2:	f000 fd7d 	bl	80140d0 <_free_r>
 80135d6:	2000      	movs	r0, #0
 80135d8:	6360      	str	r0, [r4, #52]	; 0x34
 80135da:	e7c1      	b.n	8013560 <__sflush_r+0x1c>
 80135dc:	6a21      	ldr	r1, [r4, #32]
 80135de:	2301      	movs	r3, #1
 80135e0:	4628      	mov	r0, r5
 80135e2:	47b0      	blx	r6
 80135e4:	1c41      	adds	r1, r0, #1
 80135e6:	d1c7      	bne.n	8013578 <__sflush_r+0x34>
 80135e8:	682b      	ldr	r3, [r5, #0]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d0c4      	beq.n	8013578 <__sflush_r+0x34>
 80135ee:	2b1d      	cmp	r3, #29
 80135f0:	d001      	beq.n	80135f6 <__sflush_r+0xb2>
 80135f2:	2b16      	cmp	r3, #22
 80135f4:	d101      	bne.n	80135fa <__sflush_r+0xb6>
 80135f6:	602f      	str	r7, [r5, #0]
 80135f8:	e7b1      	b.n	801355e <__sflush_r+0x1a>
 80135fa:	89a3      	ldrh	r3, [r4, #12]
 80135fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013600:	81a3      	strh	r3, [r4, #12]
 8013602:	e7ad      	b.n	8013560 <__sflush_r+0x1c>
 8013604:	690f      	ldr	r7, [r1, #16]
 8013606:	2f00      	cmp	r7, #0
 8013608:	d0a9      	beq.n	801355e <__sflush_r+0x1a>
 801360a:	0793      	lsls	r3, r2, #30
 801360c:	680e      	ldr	r6, [r1, #0]
 801360e:	bf08      	it	eq
 8013610:	694b      	ldreq	r3, [r1, #20]
 8013612:	600f      	str	r7, [r1, #0]
 8013614:	bf18      	it	ne
 8013616:	2300      	movne	r3, #0
 8013618:	eba6 0807 	sub.w	r8, r6, r7
 801361c:	608b      	str	r3, [r1, #8]
 801361e:	f1b8 0f00 	cmp.w	r8, #0
 8013622:	dd9c      	ble.n	801355e <__sflush_r+0x1a>
 8013624:	6a21      	ldr	r1, [r4, #32]
 8013626:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013628:	4643      	mov	r3, r8
 801362a:	463a      	mov	r2, r7
 801362c:	4628      	mov	r0, r5
 801362e:	47b0      	blx	r6
 8013630:	2800      	cmp	r0, #0
 8013632:	dc06      	bgt.n	8013642 <__sflush_r+0xfe>
 8013634:	89a3      	ldrh	r3, [r4, #12]
 8013636:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801363a:	81a3      	strh	r3, [r4, #12]
 801363c:	f04f 30ff 	mov.w	r0, #4294967295
 8013640:	e78e      	b.n	8013560 <__sflush_r+0x1c>
 8013642:	4407      	add	r7, r0
 8013644:	eba8 0800 	sub.w	r8, r8, r0
 8013648:	e7e9      	b.n	801361e <__sflush_r+0xda>
 801364a:	bf00      	nop
 801364c:	20400001 	.word	0x20400001

08013650 <_fflush_r>:
 8013650:	b538      	push	{r3, r4, r5, lr}
 8013652:	690b      	ldr	r3, [r1, #16]
 8013654:	4605      	mov	r5, r0
 8013656:	460c      	mov	r4, r1
 8013658:	b913      	cbnz	r3, 8013660 <_fflush_r+0x10>
 801365a:	2500      	movs	r5, #0
 801365c:	4628      	mov	r0, r5
 801365e:	bd38      	pop	{r3, r4, r5, pc}
 8013660:	b118      	cbz	r0, 801366a <_fflush_r+0x1a>
 8013662:	6983      	ldr	r3, [r0, #24]
 8013664:	b90b      	cbnz	r3, 801366a <_fflush_r+0x1a>
 8013666:	f000 f887 	bl	8013778 <__sinit>
 801366a:	4b14      	ldr	r3, [pc, #80]	; (80136bc <_fflush_r+0x6c>)
 801366c:	429c      	cmp	r4, r3
 801366e:	d11b      	bne.n	80136a8 <_fflush_r+0x58>
 8013670:	686c      	ldr	r4, [r5, #4]
 8013672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d0ef      	beq.n	801365a <_fflush_r+0xa>
 801367a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801367c:	07d0      	lsls	r0, r2, #31
 801367e:	d404      	bmi.n	801368a <_fflush_r+0x3a>
 8013680:	0599      	lsls	r1, r3, #22
 8013682:	d402      	bmi.n	801368a <_fflush_r+0x3a>
 8013684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013686:	f000 f91a 	bl	80138be <__retarget_lock_acquire_recursive>
 801368a:	4628      	mov	r0, r5
 801368c:	4621      	mov	r1, r4
 801368e:	f7ff ff59 	bl	8013544 <__sflush_r>
 8013692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013694:	07da      	lsls	r2, r3, #31
 8013696:	4605      	mov	r5, r0
 8013698:	d4e0      	bmi.n	801365c <_fflush_r+0xc>
 801369a:	89a3      	ldrh	r3, [r4, #12]
 801369c:	059b      	lsls	r3, r3, #22
 801369e:	d4dd      	bmi.n	801365c <_fflush_r+0xc>
 80136a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80136a2:	f000 f90d 	bl	80138c0 <__retarget_lock_release_recursive>
 80136a6:	e7d9      	b.n	801365c <_fflush_r+0xc>
 80136a8:	4b05      	ldr	r3, [pc, #20]	; (80136c0 <_fflush_r+0x70>)
 80136aa:	429c      	cmp	r4, r3
 80136ac:	d101      	bne.n	80136b2 <_fflush_r+0x62>
 80136ae:	68ac      	ldr	r4, [r5, #8]
 80136b0:	e7df      	b.n	8013672 <_fflush_r+0x22>
 80136b2:	4b04      	ldr	r3, [pc, #16]	; (80136c4 <_fflush_r+0x74>)
 80136b4:	429c      	cmp	r4, r3
 80136b6:	bf08      	it	eq
 80136b8:	68ec      	ldreq	r4, [r5, #12]
 80136ba:	e7da      	b.n	8013672 <_fflush_r+0x22>
 80136bc:	08014f44 	.word	0x08014f44
 80136c0:	08014f64 	.word	0x08014f64
 80136c4:	08014f24 	.word	0x08014f24

080136c8 <std>:
 80136c8:	2300      	movs	r3, #0
 80136ca:	b510      	push	{r4, lr}
 80136cc:	4604      	mov	r4, r0
 80136ce:	e9c0 3300 	strd	r3, r3, [r0]
 80136d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80136d6:	6083      	str	r3, [r0, #8]
 80136d8:	8181      	strh	r1, [r0, #12]
 80136da:	6643      	str	r3, [r0, #100]	; 0x64
 80136dc:	81c2      	strh	r2, [r0, #14]
 80136de:	6183      	str	r3, [r0, #24]
 80136e0:	4619      	mov	r1, r3
 80136e2:	2208      	movs	r2, #8
 80136e4:	305c      	adds	r0, #92	; 0x5c
 80136e6:	f7fe fb53 	bl	8011d90 <memset>
 80136ea:	4b05      	ldr	r3, [pc, #20]	; (8013700 <std+0x38>)
 80136ec:	6263      	str	r3, [r4, #36]	; 0x24
 80136ee:	4b05      	ldr	r3, [pc, #20]	; (8013704 <std+0x3c>)
 80136f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80136f2:	4b05      	ldr	r3, [pc, #20]	; (8013708 <std+0x40>)
 80136f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80136f6:	4b05      	ldr	r3, [pc, #20]	; (801370c <std+0x44>)
 80136f8:	6224      	str	r4, [r4, #32]
 80136fa:	6323      	str	r3, [r4, #48]	; 0x30
 80136fc:	bd10      	pop	{r4, pc}
 80136fe:	bf00      	nop
 8013700:	080145f5 	.word	0x080145f5
 8013704:	08014617 	.word	0x08014617
 8013708:	0801464f 	.word	0x0801464f
 801370c:	08014673 	.word	0x08014673

08013710 <_cleanup_r>:
 8013710:	4901      	ldr	r1, [pc, #4]	; (8013718 <_cleanup_r+0x8>)
 8013712:	f000 b8af 	b.w	8013874 <_fwalk_reent>
 8013716:	bf00      	nop
 8013718:	08013651 	.word	0x08013651

0801371c <__sfmoreglue>:
 801371c:	b570      	push	{r4, r5, r6, lr}
 801371e:	2268      	movs	r2, #104	; 0x68
 8013720:	1e4d      	subs	r5, r1, #1
 8013722:	4355      	muls	r5, r2
 8013724:	460e      	mov	r6, r1
 8013726:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801372a:	f000 fd3d 	bl	80141a8 <_malloc_r>
 801372e:	4604      	mov	r4, r0
 8013730:	b140      	cbz	r0, 8013744 <__sfmoreglue+0x28>
 8013732:	2100      	movs	r1, #0
 8013734:	e9c0 1600 	strd	r1, r6, [r0]
 8013738:	300c      	adds	r0, #12
 801373a:	60a0      	str	r0, [r4, #8]
 801373c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013740:	f7fe fb26 	bl	8011d90 <memset>
 8013744:	4620      	mov	r0, r4
 8013746:	bd70      	pop	{r4, r5, r6, pc}

08013748 <__sfp_lock_acquire>:
 8013748:	4801      	ldr	r0, [pc, #4]	; (8013750 <__sfp_lock_acquire+0x8>)
 801374a:	f000 b8b8 	b.w	80138be <__retarget_lock_acquire_recursive>
 801374e:	bf00      	nop
 8013750:	2000c5dd 	.word	0x2000c5dd

08013754 <__sfp_lock_release>:
 8013754:	4801      	ldr	r0, [pc, #4]	; (801375c <__sfp_lock_release+0x8>)
 8013756:	f000 b8b3 	b.w	80138c0 <__retarget_lock_release_recursive>
 801375a:	bf00      	nop
 801375c:	2000c5dd 	.word	0x2000c5dd

08013760 <__sinit_lock_acquire>:
 8013760:	4801      	ldr	r0, [pc, #4]	; (8013768 <__sinit_lock_acquire+0x8>)
 8013762:	f000 b8ac 	b.w	80138be <__retarget_lock_acquire_recursive>
 8013766:	bf00      	nop
 8013768:	2000c5de 	.word	0x2000c5de

0801376c <__sinit_lock_release>:
 801376c:	4801      	ldr	r0, [pc, #4]	; (8013774 <__sinit_lock_release+0x8>)
 801376e:	f000 b8a7 	b.w	80138c0 <__retarget_lock_release_recursive>
 8013772:	bf00      	nop
 8013774:	2000c5de 	.word	0x2000c5de

08013778 <__sinit>:
 8013778:	b510      	push	{r4, lr}
 801377a:	4604      	mov	r4, r0
 801377c:	f7ff fff0 	bl	8013760 <__sinit_lock_acquire>
 8013780:	69a3      	ldr	r3, [r4, #24]
 8013782:	b11b      	cbz	r3, 801378c <__sinit+0x14>
 8013784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013788:	f7ff bff0 	b.w	801376c <__sinit_lock_release>
 801378c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013790:	6523      	str	r3, [r4, #80]	; 0x50
 8013792:	4b13      	ldr	r3, [pc, #76]	; (80137e0 <__sinit+0x68>)
 8013794:	4a13      	ldr	r2, [pc, #76]	; (80137e4 <__sinit+0x6c>)
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	62a2      	str	r2, [r4, #40]	; 0x28
 801379a:	42a3      	cmp	r3, r4
 801379c:	bf04      	itt	eq
 801379e:	2301      	moveq	r3, #1
 80137a0:	61a3      	streq	r3, [r4, #24]
 80137a2:	4620      	mov	r0, r4
 80137a4:	f000 f820 	bl	80137e8 <__sfp>
 80137a8:	6060      	str	r0, [r4, #4]
 80137aa:	4620      	mov	r0, r4
 80137ac:	f000 f81c 	bl	80137e8 <__sfp>
 80137b0:	60a0      	str	r0, [r4, #8]
 80137b2:	4620      	mov	r0, r4
 80137b4:	f000 f818 	bl	80137e8 <__sfp>
 80137b8:	2200      	movs	r2, #0
 80137ba:	60e0      	str	r0, [r4, #12]
 80137bc:	2104      	movs	r1, #4
 80137be:	6860      	ldr	r0, [r4, #4]
 80137c0:	f7ff ff82 	bl	80136c8 <std>
 80137c4:	68a0      	ldr	r0, [r4, #8]
 80137c6:	2201      	movs	r2, #1
 80137c8:	2109      	movs	r1, #9
 80137ca:	f7ff ff7d 	bl	80136c8 <std>
 80137ce:	68e0      	ldr	r0, [r4, #12]
 80137d0:	2202      	movs	r2, #2
 80137d2:	2112      	movs	r1, #18
 80137d4:	f7ff ff78 	bl	80136c8 <std>
 80137d8:	2301      	movs	r3, #1
 80137da:	61a3      	str	r3, [r4, #24]
 80137dc:	e7d2      	b.n	8013784 <__sinit+0xc>
 80137de:	bf00      	nop
 80137e0:	08014e5c 	.word	0x08014e5c
 80137e4:	08013711 	.word	0x08013711

080137e8 <__sfp>:
 80137e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80137ea:	4607      	mov	r7, r0
 80137ec:	f7ff ffac 	bl	8013748 <__sfp_lock_acquire>
 80137f0:	4b1e      	ldr	r3, [pc, #120]	; (801386c <__sfp+0x84>)
 80137f2:	681e      	ldr	r6, [r3, #0]
 80137f4:	69b3      	ldr	r3, [r6, #24]
 80137f6:	b913      	cbnz	r3, 80137fe <__sfp+0x16>
 80137f8:	4630      	mov	r0, r6
 80137fa:	f7ff ffbd 	bl	8013778 <__sinit>
 80137fe:	3648      	adds	r6, #72	; 0x48
 8013800:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013804:	3b01      	subs	r3, #1
 8013806:	d503      	bpl.n	8013810 <__sfp+0x28>
 8013808:	6833      	ldr	r3, [r6, #0]
 801380a:	b30b      	cbz	r3, 8013850 <__sfp+0x68>
 801380c:	6836      	ldr	r6, [r6, #0]
 801380e:	e7f7      	b.n	8013800 <__sfp+0x18>
 8013810:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013814:	b9d5      	cbnz	r5, 801384c <__sfp+0x64>
 8013816:	4b16      	ldr	r3, [pc, #88]	; (8013870 <__sfp+0x88>)
 8013818:	60e3      	str	r3, [r4, #12]
 801381a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801381e:	6665      	str	r5, [r4, #100]	; 0x64
 8013820:	f000 f84c 	bl	80138bc <__retarget_lock_init_recursive>
 8013824:	f7ff ff96 	bl	8013754 <__sfp_lock_release>
 8013828:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801382c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013830:	6025      	str	r5, [r4, #0]
 8013832:	61a5      	str	r5, [r4, #24]
 8013834:	2208      	movs	r2, #8
 8013836:	4629      	mov	r1, r5
 8013838:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801383c:	f7fe faa8 	bl	8011d90 <memset>
 8013840:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013844:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013848:	4620      	mov	r0, r4
 801384a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801384c:	3468      	adds	r4, #104	; 0x68
 801384e:	e7d9      	b.n	8013804 <__sfp+0x1c>
 8013850:	2104      	movs	r1, #4
 8013852:	4638      	mov	r0, r7
 8013854:	f7ff ff62 	bl	801371c <__sfmoreglue>
 8013858:	4604      	mov	r4, r0
 801385a:	6030      	str	r0, [r6, #0]
 801385c:	2800      	cmp	r0, #0
 801385e:	d1d5      	bne.n	801380c <__sfp+0x24>
 8013860:	f7ff ff78 	bl	8013754 <__sfp_lock_release>
 8013864:	230c      	movs	r3, #12
 8013866:	603b      	str	r3, [r7, #0]
 8013868:	e7ee      	b.n	8013848 <__sfp+0x60>
 801386a:	bf00      	nop
 801386c:	08014e5c 	.word	0x08014e5c
 8013870:	ffff0001 	.word	0xffff0001

08013874 <_fwalk_reent>:
 8013874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013878:	4606      	mov	r6, r0
 801387a:	4688      	mov	r8, r1
 801387c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013880:	2700      	movs	r7, #0
 8013882:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013886:	f1b9 0901 	subs.w	r9, r9, #1
 801388a:	d505      	bpl.n	8013898 <_fwalk_reent+0x24>
 801388c:	6824      	ldr	r4, [r4, #0]
 801388e:	2c00      	cmp	r4, #0
 8013890:	d1f7      	bne.n	8013882 <_fwalk_reent+0xe>
 8013892:	4638      	mov	r0, r7
 8013894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013898:	89ab      	ldrh	r3, [r5, #12]
 801389a:	2b01      	cmp	r3, #1
 801389c:	d907      	bls.n	80138ae <_fwalk_reent+0x3a>
 801389e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80138a2:	3301      	adds	r3, #1
 80138a4:	d003      	beq.n	80138ae <_fwalk_reent+0x3a>
 80138a6:	4629      	mov	r1, r5
 80138a8:	4630      	mov	r0, r6
 80138aa:	47c0      	blx	r8
 80138ac:	4307      	orrs	r7, r0
 80138ae:	3568      	adds	r5, #104	; 0x68
 80138b0:	e7e9      	b.n	8013886 <_fwalk_reent+0x12>
	...

080138b4 <_localeconv_r>:
 80138b4:	4800      	ldr	r0, [pc, #0]	; (80138b8 <_localeconv_r+0x4>)
 80138b6:	4770      	bx	lr
 80138b8:	20000160 	.word	0x20000160

080138bc <__retarget_lock_init_recursive>:
 80138bc:	4770      	bx	lr

080138be <__retarget_lock_acquire_recursive>:
 80138be:	4770      	bx	lr

080138c0 <__retarget_lock_release_recursive>:
 80138c0:	4770      	bx	lr

080138c2 <__swhatbuf_r>:
 80138c2:	b570      	push	{r4, r5, r6, lr}
 80138c4:	460e      	mov	r6, r1
 80138c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80138ca:	2900      	cmp	r1, #0
 80138cc:	b096      	sub	sp, #88	; 0x58
 80138ce:	4614      	mov	r4, r2
 80138d0:	461d      	mov	r5, r3
 80138d2:	da08      	bge.n	80138e6 <__swhatbuf_r+0x24>
 80138d4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80138d8:	2200      	movs	r2, #0
 80138da:	602a      	str	r2, [r5, #0]
 80138dc:	061a      	lsls	r2, r3, #24
 80138de:	d410      	bmi.n	8013902 <__swhatbuf_r+0x40>
 80138e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80138e4:	e00e      	b.n	8013904 <__swhatbuf_r+0x42>
 80138e6:	466a      	mov	r2, sp
 80138e8:	f000 ff1a 	bl	8014720 <_fstat_r>
 80138ec:	2800      	cmp	r0, #0
 80138ee:	dbf1      	blt.n	80138d4 <__swhatbuf_r+0x12>
 80138f0:	9a01      	ldr	r2, [sp, #4]
 80138f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80138f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80138fa:	425a      	negs	r2, r3
 80138fc:	415a      	adcs	r2, r3
 80138fe:	602a      	str	r2, [r5, #0]
 8013900:	e7ee      	b.n	80138e0 <__swhatbuf_r+0x1e>
 8013902:	2340      	movs	r3, #64	; 0x40
 8013904:	2000      	movs	r0, #0
 8013906:	6023      	str	r3, [r4, #0]
 8013908:	b016      	add	sp, #88	; 0x58
 801390a:	bd70      	pop	{r4, r5, r6, pc}

0801390c <__smakebuf_r>:
 801390c:	898b      	ldrh	r3, [r1, #12]
 801390e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013910:	079d      	lsls	r5, r3, #30
 8013912:	4606      	mov	r6, r0
 8013914:	460c      	mov	r4, r1
 8013916:	d507      	bpl.n	8013928 <__smakebuf_r+0x1c>
 8013918:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801391c:	6023      	str	r3, [r4, #0]
 801391e:	6123      	str	r3, [r4, #16]
 8013920:	2301      	movs	r3, #1
 8013922:	6163      	str	r3, [r4, #20]
 8013924:	b002      	add	sp, #8
 8013926:	bd70      	pop	{r4, r5, r6, pc}
 8013928:	ab01      	add	r3, sp, #4
 801392a:	466a      	mov	r2, sp
 801392c:	f7ff ffc9 	bl	80138c2 <__swhatbuf_r>
 8013930:	9900      	ldr	r1, [sp, #0]
 8013932:	4605      	mov	r5, r0
 8013934:	4630      	mov	r0, r6
 8013936:	f000 fc37 	bl	80141a8 <_malloc_r>
 801393a:	b948      	cbnz	r0, 8013950 <__smakebuf_r+0x44>
 801393c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013940:	059a      	lsls	r2, r3, #22
 8013942:	d4ef      	bmi.n	8013924 <__smakebuf_r+0x18>
 8013944:	f023 0303 	bic.w	r3, r3, #3
 8013948:	f043 0302 	orr.w	r3, r3, #2
 801394c:	81a3      	strh	r3, [r4, #12]
 801394e:	e7e3      	b.n	8013918 <__smakebuf_r+0xc>
 8013950:	4b0d      	ldr	r3, [pc, #52]	; (8013988 <__smakebuf_r+0x7c>)
 8013952:	62b3      	str	r3, [r6, #40]	; 0x28
 8013954:	89a3      	ldrh	r3, [r4, #12]
 8013956:	6020      	str	r0, [r4, #0]
 8013958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801395c:	81a3      	strh	r3, [r4, #12]
 801395e:	9b00      	ldr	r3, [sp, #0]
 8013960:	6163      	str	r3, [r4, #20]
 8013962:	9b01      	ldr	r3, [sp, #4]
 8013964:	6120      	str	r0, [r4, #16]
 8013966:	b15b      	cbz	r3, 8013980 <__smakebuf_r+0x74>
 8013968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801396c:	4630      	mov	r0, r6
 801396e:	f000 fee9 	bl	8014744 <_isatty_r>
 8013972:	b128      	cbz	r0, 8013980 <__smakebuf_r+0x74>
 8013974:	89a3      	ldrh	r3, [r4, #12]
 8013976:	f023 0303 	bic.w	r3, r3, #3
 801397a:	f043 0301 	orr.w	r3, r3, #1
 801397e:	81a3      	strh	r3, [r4, #12]
 8013980:	89a0      	ldrh	r0, [r4, #12]
 8013982:	4305      	orrs	r5, r0
 8013984:	81a5      	strh	r5, [r4, #12]
 8013986:	e7cd      	b.n	8013924 <__smakebuf_r+0x18>
 8013988:	08013711 	.word	0x08013711

0801398c <malloc>:
 801398c:	4b02      	ldr	r3, [pc, #8]	; (8013998 <malloc+0xc>)
 801398e:	4601      	mov	r1, r0
 8013990:	6818      	ldr	r0, [r3, #0]
 8013992:	f000 bc09 	b.w	80141a8 <_malloc_r>
 8013996:	bf00      	nop
 8013998:	2000000c 	.word	0x2000000c

0801399c <_Balloc>:
 801399c:	b570      	push	{r4, r5, r6, lr}
 801399e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80139a0:	4604      	mov	r4, r0
 80139a2:	460d      	mov	r5, r1
 80139a4:	b976      	cbnz	r6, 80139c4 <_Balloc+0x28>
 80139a6:	2010      	movs	r0, #16
 80139a8:	f7ff fff0 	bl	801398c <malloc>
 80139ac:	4602      	mov	r2, r0
 80139ae:	6260      	str	r0, [r4, #36]	; 0x24
 80139b0:	b920      	cbnz	r0, 80139bc <_Balloc+0x20>
 80139b2:	4b18      	ldr	r3, [pc, #96]	; (8013a14 <_Balloc+0x78>)
 80139b4:	4818      	ldr	r0, [pc, #96]	; (8013a18 <_Balloc+0x7c>)
 80139b6:	2166      	movs	r1, #102	; 0x66
 80139b8:	f000 fe72 	bl	80146a0 <__assert_func>
 80139bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80139c0:	6006      	str	r6, [r0, #0]
 80139c2:	60c6      	str	r6, [r0, #12]
 80139c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80139c6:	68f3      	ldr	r3, [r6, #12]
 80139c8:	b183      	cbz	r3, 80139ec <_Balloc+0x50>
 80139ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139cc:	68db      	ldr	r3, [r3, #12]
 80139ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80139d2:	b9b8      	cbnz	r0, 8013a04 <_Balloc+0x68>
 80139d4:	2101      	movs	r1, #1
 80139d6:	fa01 f605 	lsl.w	r6, r1, r5
 80139da:	1d72      	adds	r2, r6, #5
 80139dc:	0092      	lsls	r2, r2, #2
 80139de:	4620      	mov	r0, r4
 80139e0:	f000 fb60 	bl	80140a4 <_calloc_r>
 80139e4:	b160      	cbz	r0, 8013a00 <_Balloc+0x64>
 80139e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80139ea:	e00e      	b.n	8013a0a <_Balloc+0x6e>
 80139ec:	2221      	movs	r2, #33	; 0x21
 80139ee:	2104      	movs	r1, #4
 80139f0:	4620      	mov	r0, r4
 80139f2:	f000 fb57 	bl	80140a4 <_calloc_r>
 80139f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139f8:	60f0      	str	r0, [r6, #12]
 80139fa:	68db      	ldr	r3, [r3, #12]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d1e4      	bne.n	80139ca <_Balloc+0x2e>
 8013a00:	2000      	movs	r0, #0
 8013a02:	bd70      	pop	{r4, r5, r6, pc}
 8013a04:	6802      	ldr	r2, [r0, #0]
 8013a06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013a10:	e7f7      	b.n	8013a02 <_Balloc+0x66>
 8013a12:	bf00      	nop
 8013a14:	08014ea1 	.word	0x08014ea1
 8013a18:	08014f84 	.word	0x08014f84

08013a1c <_Bfree>:
 8013a1c:	b570      	push	{r4, r5, r6, lr}
 8013a1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013a20:	4605      	mov	r5, r0
 8013a22:	460c      	mov	r4, r1
 8013a24:	b976      	cbnz	r6, 8013a44 <_Bfree+0x28>
 8013a26:	2010      	movs	r0, #16
 8013a28:	f7ff ffb0 	bl	801398c <malloc>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	6268      	str	r0, [r5, #36]	; 0x24
 8013a30:	b920      	cbnz	r0, 8013a3c <_Bfree+0x20>
 8013a32:	4b09      	ldr	r3, [pc, #36]	; (8013a58 <_Bfree+0x3c>)
 8013a34:	4809      	ldr	r0, [pc, #36]	; (8013a5c <_Bfree+0x40>)
 8013a36:	218a      	movs	r1, #138	; 0x8a
 8013a38:	f000 fe32 	bl	80146a0 <__assert_func>
 8013a3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013a40:	6006      	str	r6, [r0, #0]
 8013a42:	60c6      	str	r6, [r0, #12]
 8013a44:	b13c      	cbz	r4, 8013a56 <_Bfree+0x3a>
 8013a46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013a48:	6862      	ldr	r2, [r4, #4]
 8013a4a:	68db      	ldr	r3, [r3, #12]
 8013a4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013a50:	6021      	str	r1, [r4, #0]
 8013a52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013a56:	bd70      	pop	{r4, r5, r6, pc}
 8013a58:	08014ea1 	.word	0x08014ea1
 8013a5c:	08014f84 	.word	0x08014f84

08013a60 <__multadd>:
 8013a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a64:	690d      	ldr	r5, [r1, #16]
 8013a66:	4607      	mov	r7, r0
 8013a68:	460c      	mov	r4, r1
 8013a6a:	461e      	mov	r6, r3
 8013a6c:	f101 0c14 	add.w	ip, r1, #20
 8013a70:	2000      	movs	r0, #0
 8013a72:	f8dc 3000 	ldr.w	r3, [ip]
 8013a76:	b299      	uxth	r1, r3
 8013a78:	fb02 6101 	mla	r1, r2, r1, r6
 8013a7c:	0c1e      	lsrs	r6, r3, #16
 8013a7e:	0c0b      	lsrs	r3, r1, #16
 8013a80:	fb02 3306 	mla	r3, r2, r6, r3
 8013a84:	b289      	uxth	r1, r1
 8013a86:	3001      	adds	r0, #1
 8013a88:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013a8c:	4285      	cmp	r5, r0
 8013a8e:	f84c 1b04 	str.w	r1, [ip], #4
 8013a92:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013a96:	dcec      	bgt.n	8013a72 <__multadd+0x12>
 8013a98:	b30e      	cbz	r6, 8013ade <__multadd+0x7e>
 8013a9a:	68a3      	ldr	r3, [r4, #8]
 8013a9c:	42ab      	cmp	r3, r5
 8013a9e:	dc19      	bgt.n	8013ad4 <__multadd+0x74>
 8013aa0:	6861      	ldr	r1, [r4, #4]
 8013aa2:	4638      	mov	r0, r7
 8013aa4:	3101      	adds	r1, #1
 8013aa6:	f7ff ff79 	bl	801399c <_Balloc>
 8013aaa:	4680      	mov	r8, r0
 8013aac:	b928      	cbnz	r0, 8013aba <__multadd+0x5a>
 8013aae:	4602      	mov	r2, r0
 8013ab0:	4b0c      	ldr	r3, [pc, #48]	; (8013ae4 <__multadd+0x84>)
 8013ab2:	480d      	ldr	r0, [pc, #52]	; (8013ae8 <__multadd+0x88>)
 8013ab4:	21b5      	movs	r1, #181	; 0xb5
 8013ab6:	f000 fdf3 	bl	80146a0 <__assert_func>
 8013aba:	6922      	ldr	r2, [r4, #16]
 8013abc:	3202      	adds	r2, #2
 8013abe:	f104 010c 	add.w	r1, r4, #12
 8013ac2:	0092      	lsls	r2, r2, #2
 8013ac4:	300c      	adds	r0, #12
 8013ac6:	f7fe f955 	bl	8011d74 <memcpy>
 8013aca:	4621      	mov	r1, r4
 8013acc:	4638      	mov	r0, r7
 8013ace:	f7ff ffa5 	bl	8013a1c <_Bfree>
 8013ad2:	4644      	mov	r4, r8
 8013ad4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013ad8:	3501      	adds	r5, #1
 8013ada:	615e      	str	r6, [r3, #20]
 8013adc:	6125      	str	r5, [r4, #16]
 8013ade:	4620      	mov	r0, r4
 8013ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ae4:	08014f13 	.word	0x08014f13
 8013ae8:	08014f84 	.word	0x08014f84

08013aec <__hi0bits>:
 8013aec:	0c03      	lsrs	r3, r0, #16
 8013aee:	041b      	lsls	r3, r3, #16
 8013af0:	b9d3      	cbnz	r3, 8013b28 <__hi0bits+0x3c>
 8013af2:	0400      	lsls	r0, r0, #16
 8013af4:	2310      	movs	r3, #16
 8013af6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013afa:	bf04      	itt	eq
 8013afc:	0200      	lsleq	r0, r0, #8
 8013afe:	3308      	addeq	r3, #8
 8013b00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013b04:	bf04      	itt	eq
 8013b06:	0100      	lsleq	r0, r0, #4
 8013b08:	3304      	addeq	r3, #4
 8013b0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013b0e:	bf04      	itt	eq
 8013b10:	0080      	lsleq	r0, r0, #2
 8013b12:	3302      	addeq	r3, #2
 8013b14:	2800      	cmp	r0, #0
 8013b16:	db05      	blt.n	8013b24 <__hi0bits+0x38>
 8013b18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013b1c:	f103 0301 	add.w	r3, r3, #1
 8013b20:	bf08      	it	eq
 8013b22:	2320      	moveq	r3, #32
 8013b24:	4618      	mov	r0, r3
 8013b26:	4770      	bx	lr
 8013b28:	2300      	movs	r3, #0
 8013b2a:	e7e4      	b.n	8013af6 <__hi0bits+0xa>

08013b2c <__lo0bits>:
 8013b2c:	6803      	ldr	r3, [r0, #0]
 8013b2e:	f013 0207 	ands.w	r2, r3, #7
 8013b32:	4601      	mov	r1, r0
 8013b34:	d00b      	beq.n	8013b4e <__lo0bits+0x22>
 8013b36:	07da      	lsls	r2, r3, #31
 8013b38:	d423      	bmi.n	8013b82 <__lo0bits+0x56>
 8013b3a:	0798      	lsls	r0, r3, #30
 8013b3c:	bf49      	itett	mi
 8013b3e:	085b      	lsrmi	r3, r3, #1
 8013b40:	089b      	lsrpl	r3, r3, #2
 8013b42:	2001      	movmi	r0, #1
 8013b44:	600b      	strmi	r3, [r1, #0]
 8013b46:	bf5c      	itt	pl
 8013b48:	600b      	strpl	r3, [r1, #0]
 8013b4a:	2002      	movpl	r0, #2
 8013b4c:	4770      	bx	lr
 8013b4e:	b298      	uxth	r0, r3
 8013b50:	b9a8      	cbnz	r0, 8013b7e <__lo0bits+0x52>
 8013b52:	0c1b      	lsrs	r3, r3, #16
 8013b54:	2010      	movs	r0, #16
 8013b56:	b2da      	uxtb	r2, r3
 8013b58:	b90a      	cbnz	r2, 8013b5e <__lo0bits+0x32>
 8013b5a:	3008      	adds	r0, #8
 8013b5c:	0a1b      	lsrs	r3, r3, #8
 8013b5e:	071a      	lsls	r2, r3, #28
 8013b60:	bf04      	itt	eq
 8013b62:	091b      	lsreq	r3, r3, #4
 8013b64:	3004      	addeq	r0, #4
 8013b66:	079a      	lsls	r2, r3, #30
 8013b68:	bf04      	itt	eq
 8013b6a:	089b      	lsreq	r3, r3, #2
 8013b6c:	3002      	addeq	r0, #2
 8013b6e:	07da      	lsls	r2, r3, #31
 8013b70:	d403      	bmi.n	8013b7a <__lo0bits+0x4e>
 8013b72:	085b      	lsrs	r3, r3, #1
 8013b74:	f100 0001 	add.w	r0, r0, #1
 8013b78:	d005      	beq.n	8013b86 <__lo0bits+0x5a>
 8013b7a:	600b      	str	r3, [r1, #0]
 8013b7c:	4770      	bx	lr
 8013b7e:	4610      	mov	r0, r2
 8013b80:	e7e9      	b.n	8013b56 <__lo0bits+0x2a>
 8013b82:	2000      	movs	r0, #0
 8013b84:	4770      	bx	lr
 8013b86:	2020      	movs	r0, #32
 8013b88:	4770      	bx	lr
	...

08013b8c <__i2b>:
 8013b8c:	b510      	push	{r4, lr}
 8013b8e:	460c      	mov	r4, r1
 8013b90:	2101      	movs	r1, #1
 8013b92:	f7ff ff03 	bl	801399c <_Balloc>
 8013b96:	4602      	mov	r2, r0
 8013b98:	b928      	cbnz	r0, 8013ba6 <__i2b+0x1a>
 8013b9a:	4b05      	ldr	r3, [pc, #20]	; (8013bb0 <__i2b+0x24>)
 8013b9c:	4805      	ldr	r0, [pc, #20]	; (8013bb4 <__i2b+0x28>)
 8013b9e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013ba2:	f000 fd7d 	bl	80146a0 <__assert_func>
 8013ba6:	2301      	movs	r3, #1
 8013ba8:	6144      	str	r4, [r0, #20]
 8013baa:	6103      	str	r3, [r0, #16]
 8013bac:	bd10      	pop	{r4, pc}
 8013bae:	bf00      	nop
 8013bb0:	08014f13 	.word	0x08014f13
 8013bb4:	08014f84 	.word	0x08014f84

08013bb8 <__multiply>:
 8013bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bbc:	4691      	mov	r9, r2
 8013bbe:	690a      	ldr	r2, [r1, #16]
 8013bc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013bc4:	429a      	cmp	r2, r3
 8013bc6:	bfb8      	it	lt
 8013bc8:	460b      	movlt	r3, r1
 8013bca:	460c      	mov	r4, r1
 8013bcc:	bfbc      	itt	lt
 8013bce:	464c      	movlt	r4, r9
 8013bd0:	4699      	movlt	r9, r3
 8013bd2:	6927      	ldr	r7, [r4, #16]
 8013bd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013bd8:	68a3      	ldr	r3, [r4, #8]
 8013bda:	6861      	ldr	r1, [r4, #4]
 8013bdc:	eb07 060a 	add.w	r6, r7, sl
 8013be0:	42b3      	cmp	r3, r6
 8013be2:	b085      	sub	sp, #20
 8013be4:	bfb8      	it	lt
 8013be6:	3101      	addlt	r1, #1
 8013be8:	f7ff fed8 	bl	801399c <_Balloc>
 8013bec:	b930      	cbnz	r0, 8013bfc <__multiply+0x44>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	4b44      	ldr	r3, [pc, #272]	; (8013d04 <__multiply+0x14c>)
 8013bf2:	4845      	ldr	r0, [pc, #276]	; (8013d08 <__multiply+0x150>)
 8013bf4:	f240 115d 	movw	r1, #349	; 0x15d
 8013bf8:	f000 fd52 	bl	80146a0 <__assert_func>
 8013bfc:	f100 0514 	add.w	r5, r0, #20
 8013c00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013c04:	462b      	mov	r3, r5
 8013c06:	2200      	movs	r2, #0
 8013c08:	4543      	cmp	r3, r8
 8013c0a:	d321      	bcc.n	8013c50 <__multiply+0x98>
 8013c0c:	f104 0314 	add.w	r3, r4, #20
 8013c10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013c14:	f109 0314 	add.w	r3, r9, #20
 8013c18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013c1c:	9202      	str	r2, [sp, #8]
 8013c1e:	1b3a      	subs	r2, r7, r4
 8013c20:	3a15      	subs	r2, #21
 8013c22:	f022 0203 	bic.w	r2, r2, #3
 8013c26:	3204      	adds	r2, #4
 8013c28:	f104 0115 	add.w	r1, r4, #21
 8013c2c:	428f      	cmp	r7, r1
 8013c2e:	bf38      	it	cc
 8013c30:	2204      	movcc	r2, #4
 8013c32:	9201      	str	r2, [sp, #4]
 8013c34:	9a02      	ldr	r2, [sp, #8]
 8013c36:	9303      	str	r3, [sp, #12]
 8013c38:	429a      	cmp	r2, r3
 8013c3a:	d80c      	bhi.n	8013c56 <__multiply+0x9e>
 8013c3c:	2e00      	cmp	r6, #0
 8013c3e:	dd03      	ble.n	8013c48 <__multiply+0x90>
 8013c40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d05a      	beq.n	8013cfe <__multiply+0x146>
 8013c48:	6106      	str	r6, [r0, #16]
 8013c4a:	b005      	add	sp, #20
 8013c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c50:	f843 2b04 	str.w	r2, [r3], #4
 8013c54:	e7d8      	b.n	8013c08 <__multiply+0x50>
 8013c56:	f8b3 a000 	ldrh.w	sl, [r3]
 8013c5a:	f1ba 0f00 	cmp.w	sl, #0
 8013c5e:	d024      	beq.n	8013caa <__multiply+0xf2>
 8013c60:	f104 0e14 	add.w	lr, r4, #20
 8013c64:	46a9      	mov	r9, r5
 8013c66:	f04f 0c00 	mov.w	ip, #0
 8013c6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013c6e:	f8d9 1000 	ldr.w	r1, [r9]
 8013c72:	fa1f fb82 	uxth.w	fp, r2
 8013c76:	b289      	uxth	r1, r1
 8013c78:	fb0a 110b 	mla	r1, sl, fp, r1
 8013c7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013c80:	f8d9 2000 	ldr.w	r2, [r9]
 8013c84:	4461      	add	r1, ip
 8013c86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013c8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8013c8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013c92:	b289      	uxth	r1, r1
 8013c94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013c98:	4577      	cmp	r7, lr
 8013c9a:	f849 1b04 	str.w	r1, [r9], #4
 8013c9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013ca2:	d8e2      	bhi.n	8013c6a <__multiply+0xb2>
 8013ca4:	9a01      	ldr	r2, [sp, #4]
 8013ca6:	f845 c002 	str.w	ip, [r5, r2]
 8013caa:	9a03      	ldr	r2, [sp, #12]
 8013cac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013cb0:	3304      	adds	r3, #4
 8013cb2:	f1b9 0f00 	cmp.w	r9, #0
 8013cb6:	d020      	beq.n	8013cfa <__multiply+0x142>
 8013cb8:	6829      	ldr	r1, [r5, #0]
 8013cba:	f104 0c14 	add.w	ip, r4, #20
 8013cbe:	46ae      	mov	lr, r5
 8013cc0:	f04f 0a00 	mov.w	sl, #0
 8013cc4:	f8bc b000 	ldrh.w	fp, [ip]
 8013cc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013ccc:	fb09 220b 	mla	r2, r9, fp, r2
 8013cd0:	4492      	add	sl, r2
 8013cd2:	b289      	uxth	r1, r1
 8013cd4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013cd8:	f84e 1b04 	str.w	r1, [lr], #4
 8013cdc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013ce0:	f8be 1000 	ldrh.w	r1, [lr]
 8013ce4:	0c12      	lsrs	r2, r2, #16
 8013ce6:	fb09 1102 	mla	r1, r9, r2, r1
 8013cea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013cee:	4567      	cmp	r7, ip
 8013cf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013cf4:	d8e6      	bhi.n	8013cc4 <__multiply+0x10c>
 8013cf6:	9a01      	ldr	r2, [sp, #4]
 8013cf8:	50a9      	str	r1, [r5, r2]
 8013cfa:	3504      	adds	r5, #4
 8013cfc:	e79a      	b.n	8013c34 <__multiply+0x7c>
 8013cfe:	3e01      	subs	r6, #1
 8013d00:	e79c      	b.n	8013c3c <__multiply+0x84>
 8013d02:	bf00      	nop
 8013d04:	08014f13 	.word	0x08014f13
 8013d08:	08014f84 	.word	0x08014f84

08013d0c <__pow5mult>:
 8013d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013d10:	4615      	mov	r5, r2
 8013d12:	f012 0203 	ands.w	r2, r2, #3
 8013d16:	4606      	mov	r6, r0
 8013d18:	460f      	mov	r7, r1
 8013d1a:	d007      	beq.n	8013d2c <__pow5mult+0x20>
 8013d1c:	4c25      	ldr	r4, [pc, #148]	; (8013db4 <__pow5mult+0xa8>)
 8013d1e:	3a01      	subs	r2, #1
 8013d20:	2300      	movs	r3, #0
 8013d22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013d26:	f7ff fe9b 	bl	8013a60 <__multadd>
 8013d2a:	4607      	mov	r7, r0
 8013d2c:	10ad      	asrs	r5, r5, #2
 8013d2e:	d03d      	beq.n	8013dac <__pow5mult+0xa0>
 8013d30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013d32:	b97c      	cbnz	r4, 8013d54 <__pow5mult+0x48>
 8013d34:	2010      	movs	r0, #16
 8013d36:	f7ff fe29 	bl	801398c <malloc>
 8013d3a:	4602      	mov	r2, r0
 8013d3c:	6270      	str	r0, [r6, #36]	; 0x24
 8013d3e:	b928      	cbnz	r0, 8013d4c <__pow5mult+0x40>
 8013d40:	4b1d      	ldr	r3, [pc, #116]	; (8013db8 <__pow5mult+0xac>)
 8013d42:	481e      	ldr	r0, [pc, #120]	; (8013dbc <__pow5mult+0xb0>)
 8013d44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013d48:	f000 fcaa 	bl	80146a0 <__assert_func>
 8013d4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013d50:	6004      	str	r4, [r0, #0]
 8013d52:	60c4      	str	r4, [r0, #12]
 8013d54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013d58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013d5c:	b94c      	cbnz	r4, 8013d72 <__pow5mult+0x66>
 8013d5e:	f240 2171 	movw	r1, #625	; 0x271
 8013d62:	4630      	mov	r0, r6
 8013d64:	f7ff ff12 	bl	8013b8c <__i2b>
 8013d68:	2300      	movs	r3, #0
 8013d6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8013d6e:	4604      	mov	r4, r0
 8013d70:	6003      	str	r3, [r0, #0]
 8013d72:	f04f 0900 	mov.w	r9, #0
 8013d76:	07eb      	lsls	r3, r5, #31
 8013d78:	d50a      	bpl.n	8013d90 <__pow5mult+0x84>
 8013d7a:	4639      	mov	r1, r7
 8013d7c:	4622      	mov	r2, r4
 8013d7e:	4630      	mov	r0, r6
 8013d80:	f7ff ff1a 	bl	8013bb8 <__multiply>
 8013d84:	4639      	mov	r1, r7
 8013d86:	4680      	mov	r8, r0
 8013d88:	4630      	mov	r0, r6
 8013d8a:	f7ff fe47 	bl	8013a1c <_Bfree>
 8013d8e:	4647      	mov	r7, r8
 8013d90:	106d      	asrs	r5, r5, #1
 8013d92:	d00b      	beq.n	8013dac <__pow5mult+0xa0>
 8013d94:	6820      	ldr	r0, [r4, #0]
 8013d96:	b938      	cbnz	r0, 8013da8 <__pow5mult+0x9c>
 8013d98:	4622      	mov	r2, r4
 8013d9a:	4621      	mov	r1, r4
 8013d9c:	4630      	mov	r0, r6
 8013d9e:	f7ff ff0b 	bl	8013bb8 <__multiply>
 8013da2:	6020      	str	r0, [r4, #0]
 8013da4:	f8c0 9000 	str.w	r9, [r0]
 8013da8:	4604      	mov	r4, r0
 8013daa:	e7e4      	b.n	8013d76 <__pow5mult+0x6a>
 8013dac:	4638      	mov	r0, r7
 8013dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013db2:	bf00      	nop
 8013db4:	080150d0 	.word	0x080150d0
 8013db8:	08014ea1 	.word	0x08014ea1
 8013dbc:	08014f84 	.word	0x08014f84

08013dc0 <__lshift>:
 8013dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	6849      	ldr	r1, [r1, #4]
 8013dc8:	6923      	ldr	r3, [r4, #16]
 8013dca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013dce:	68a3      	ldr	r3, [r4, #8]
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	4691      	mov	r9, r2
 8013dd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013dd8:	f108 0601 	add.w	r6, r8, #1
 8013ddc:	42b3      	cmp	r3, r6
 8013dde:	db0b      	blt.n	8013df8 <__lshift+0x38>
 8013de0:	4638      	mov	r0, r7
 8013de2:	f7ff fddb 	bl	801399c <_Balloc>
 8013de6:	4605      	mov	r5, r0
 8013de8:	b948      	cbnz	r0, 8013dfe <__lshift+0x3e>
 8013dea:	4602      	mov	r2, r0
 8013dec:	4b2a      	ldr	r3, [pc, #168]	; (8013e98 <__lshift+0xd8>)
 8013dee:	482b      	ldr	r0, [pc, #172]	; (8013e9c <__lshift+0xdc>)
 8013df0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013df4:	f000 fc54 	bl	80146a0 <__assert_func>
 8013df8:	3101      	adds	r1, #1
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	e7ee      	b.n	8013ddc <__lshift+0x1c>
 8013dfe:	2300      	movs	r3, #0
 8013e00:	f100 0114 	add.w	r1, r0, #20
 8013e04:	f100 0210 	add.w	r2, r0, #16
 8013e08:	4618      	mov	r0, r3
 8013e0a:	4553      	cmp	r3, sl
 8013e0c:	db37      	blt.n	8013e7e <__lshift+0xbe>
 8013e0e:	6920      	ldr	r0, [r4, #16]
 8013e10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013e14:	f104 0314 	add.w	r3, r4, #20
 8013e18:	f019 091f 	ands.w	r9, r9, #31
 8013e1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013e20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013e24:	d02f      	beq.n	8013e86 <__lshift+0xc6>
 8013e26:	f1c9 0e20 	rsb	lr, r9, #32
 8013e2a:	468a      	mov	sl, r1
 8013e2c:	f04f 0c00 	mov.w	ip, #0
 8013e30:	681a      	ldr	r2, [r3, #0]
 8013e32:	fa02 f209 	lsl.w	r2, r2, r9
 8013e36:	ea42 020c 	orr.w	r2, r2, ip
 8013e3a:	f84a 2b04 	str.w	r2, [sl], #4
 8013e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e42:	4298      	cmp	r0, r3
 8013e44:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013e48:	d8f2      	bhi.n	8013e30 <__lshift+0x70>
 8013e4a:	1b03      	subs	r3, r0, r4
 8013e4c:	3b15      	subs	r3, #21
 8013e4e:	f023 0303 	bic.w	r3, r3, #3
 8013e52:	3304      	adds	r3, #4
 8013e54:	f104 0215 	add.w	r2, r4, #21
 8013e58:	4290      	cmp	r0, r2
 8013e5a:	bf38      	it	cc
 8013e5c:	2304      	movcc	r3, #4
 8013e5e:	f841 c003 	str.w	ip, [r1, r3]
 8013e62:	f1bc 0f00 	cmp.w	ip, #0
 8013e66:	d001      	beq.n	8013e6c <__lshift+0xac>
 8013e68:	f108 0602 	add.w	r6, r8, #2
 8013e6c:	3e01      	subs	r6, #1
 8013e6e:	4638      	mov	r0, r7
 8013e70:	612e      	str	r6, [r5, #16]
 8013e72:	4621      	mov	r1, r4
 8013e74:	f7ff fdd2 	bl	8013a1c <_Bfree>
 8013e78:	4628      	mov	r0, r5
 8013e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013e82:	3301      	adds	r3, #1
 8013e84:	e7c1      	b.n	8013e0a <__lshift+0x4a>
 8013e86:	3904      	subs	r1, #4
 8013e88:	f853 2b04 	ldr.w	r2, [r3], #4
 8013e8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013e90:	4298      	cmp	r0, r3
 8013e92:	d8f9      	bhi.n	8013e88 <__lshift+0xc8>
 8013e94:	e7ea      	b.n	8013e6c <__lshift+0xac>
 8013e96:	bf00      	nop
 8013e98:	08014f13 	.word	0x08014f13
 8013e9c:	08014f84 	.word	0x08014f84

08013ea0 <__mcmp>:
 8013ea0:	b530      	push	{r4, r5, lr}
 8013ea2:	6902      	ldr	r2, [r0, #16]
 8013ea4:	690c      	ldr	r4, [r1, #16]
 8013ea6:	1b12      	subs	r2, r2, r4
 8013ea8:	d10e      	bne.n	8013ec8 <__mcmp+0x28>
 8013eaa:	f100 0314 	add.w	r3, r0, #20
 8013eae:	3114      	adds	r1, #20
 8013eb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013eb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013eb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ebc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ec0:	42a5      	cmp	r5, r4
 8013ec2:	d003      	beq.n	8013ecc <__mcmp+0x2c>
 8013ec4:	d305      	bcc.n	8013ed2 <__mcmp+0x32>
 8013ec6:	2201      	movs	r2, #1
 8013ec8:	4610      	mov	r0, r2
 8013eca:	bd30      	pop	{r4, r5, pc}
 8013ecc:	4283      	cmp	r3, r0
 8013ece:	d3f3      	bcc.n	8013eb8 <__mcmp+0x18>
 8013ed0:	e7fa      	b.n	8013ec8 <__mcmp+0x28>
 8013ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ed6:	e7f7      	b.n	8013ec8 <__mcmp+0x28>

08013ed8 <__mdiff>:
 8013ed8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013edc:	460c      	mov	r4, r1
 8013ede:	4606      	mov	r6, r0
 8013ee0:	4611      	mov	r1, r2
 8013ee2:	4620      	mov	r0, r4
 8013ee4:	4690      	mov	r8, r2
 8013ee6:	f7ff ffdb 	bl	8013ea0 <__mcmp>
 8013eea:	1e05      	subs	r5, r0, #0
 8013eec:	d110      	bne.n	8013f10 <__mdiff+0x38>
 8013eee:	4629      	mov	r1, r5
 8013ef0:	4630      	mov	r0, r6
 8013ef2:	f7ff fd53 	bl	801399c <_Balloc>
 8013ef6:	b930      	cbnz	r0, 8013f06 <__mdiff+0x2e>
 8013ef8:	4b3a      	ldr	r3, [pc, #232]	; (8013fe4 <__mdiff+0x10c>)
 8013efa:	4602      	mov	r2, r0
 8013efc:	f240 2132 	movw	r1, #562	; 0x232
 8013f00:	4839      	ldr	r0, [pc, #228]	; (8013fe8 <__mdiff+0x110>)
 8013f02:	f000 fbcd 	bl	80146a0 <__assert_func>
 8013f06:	2301      	movs	r3, #1
 8013f08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013f0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f10:	bfa4      	itt	ge
 8013f12:	4643      	movge	r3, r8
 8013f14:	46a0      	movge	r8, r4
 8013f16:	4630      	mov	r0, r6
 8013f18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013f1c:	bfa6      	itte	ge
 8013f1e:	461c      	movge	r4, r3
 8013f20:	2500      	movge	r5, #0
 8013f22:	2501      	movlt	r5, #1
 8013f24:	f7ff fd3a 	bl	801399c <_Balloc>
 8013f28:	b920      	cbnz	r0, 8013f34 <__mdiff+0x5c>
 8013f2a:	4b2e      	ldr	r3, [pc, #184]	; (8013fe4 <__mdiff+0x10c>)
 8013f2c:	4602      	mov	r2, r0
 8013f2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013f32:	e7e5      	b.n	8013f00 <__mdiff+0x28>
 8013f34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013f38:	6926      	ldr	r6, [r4, #16]
 8013f3a:	60c5      	str	r5, [r0, #12]
 8013f3c:	f104 0914 	add.w	r9, r4, #20
 8013f40:	f108 0514 	add.w	r5, r8, #20
 8013f44:	f100 0e14 	add.w	lr, r0, #20
 8013f48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013f4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013f50:	f108 0210 	add.w	r2, r8, #16
 8013f54:	46f2      	mov	sl, lr
 8013f56:	2100      	movs	r1, #0
 8013f58:	f859 3b04 	ldr.w	r3, [r9], #4
 8013f5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013f60:	fa1f f883 	uxth.w	r8, r3
 8013f64:	fa11 f18b 	uxtah	r1, r1, fp
 8013f68:	0c1b      	lsrs	r3, r3, #16
 8013f6a:	eba1 0808 	sub.w	r8, r1, r8
 8013f6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013f72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013f76:	fa1f f888 	uxth.w	r8, r8
 8013f7a:	1419      	asrs	r1, r3, #16
 8013f7c:	454e      	cmp	r6, r9
 8013f7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013f82:	f84a 3b04 	str.w	r3, [sl], #4
 8013f86:	d8e7      	bhi.n	8013f58 <__mdiff+0x80>
 8013f88:	1b33      	subs	r3, r6, r4
 8013f8a:	3b15      	subs	r3, #21
 8013f8c:	f023 0303 	bic.w	r3, r3, #3
 8013f90:	3304      	adds	r3, #4
 8013f92:	3415      	adds	r4, #21
 8013f94:	42a6      	cmp	r6, r4
 8013f96:	bf38      	it	cc
 8013f98:	2304      	movcc	r3, #4
 8013f9a:	441d      	add	r5, r3
 8013f9c:	4473      	add	r3, lr
 8013f9e:	469e      	mov	lr, r3
 8013fa0:	462e      	mov	r6, r5
 8013fa2:	4566      	cmp	r6, ip
 8013fa4:	d30e      	bcc.n	8013fc4 <__mdiff+0xec>
 8013fa6:	f10c 0203 	add.w	r2, ip, #3
 8013faa:	1b52      	subs	r2, r2, r5
 8013fac:	f022 0203 	bic.w	r2, r2, #3
 8013fb0:	3d03      	subs	r5, #3
 8013fb2:	45ac      	cmp	ip, r5
 8013fb4:	bf38      	it	cc
 8013fb6:	2200      	movcc	r2, #0
 8013fb8:	441a      	add	r2, r3
 8013fba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013fbe:	b17b      	cbz	r3, 8013fe0 <__mdiff+0x108>
 8013fc0:	6107      	str	r7, [r0, #16]
 8013fc2:	e7a3      	b.n	8013f0c <__mdiff+0x34>
 8013fc4:	f856 8b04 	ldr.w	r8, [r6], #4
 8013fc8:	fa11 f288 	uxtah	r2, r1, r8
 8013fcc:	1414      	asrs	r4, r2, #16
 8013fce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013fd2:	b292      	uxth	r2, r2
 8013fd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013fd8:	f84e 2b04 	str.w	r2, [lr], #4
 8013fdc:	1421      	asrs	r1, r4, #16
 8013fde:	e7e0      	b.n	8013fa2 <__mdiff+0xca>
 8013fe0:	3f01      	subs	r7, #1
 8013fe2:	e7ea      	b.n	8013fba <__mdiff+0xe2>
 8013fe4:	08014f13 	.word	0x08014f13
 8013fe8:	08014f84 	.word	0x08014f84

08013fec <__d2b>:
 8013fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013ff0:	4689      	mov	r9, r1
 8013ff2:	2101      	movs	r1, #1
 8013ff4:	ec57 6b10 	vmov	r6, r7, d0
 8013ff8:	4690      	mov	r8, r2
 8013ffa:	f7ff fccf 	bl	801399c <_Balloc>
 8013ffe:	4604      	mov	r4, r0
 8014000:	b930      	cbnz	r0, 8014010 <__d2b+0x24>
 8014002:	4602      	mov	r2, r0
 8014004:	4b25      	ldr	r3, [pc, #148]	; (801409c <__d2b+0xb0>)
 8014006:	4826      	ldr	r0, [pc, #152]	; (80140a0 <__d2b+0xb4>)
 8014008:	f240 310a 	movw	r1, #778	; 0x30a
 801400c:	f000 fb48 	bl	80146a0 <__assert_func>
 8014010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014018:	bb35      	cbnz	r5, 8014068 <__d2b+0x7c>
 801401a:	2e00      	cmp	r6, #0
 801401c:	9301      	str	r3, [sp, #4]
 801401e:	d028      	beq.n	8014072 <__d2b+0x86>
 8014020:	4668      	mov	r0, sp
 8014022:	9600      	str	r6, [sp, #0]
 8014024:	f7ff fd82 	bl	8013b2c <__lo0bits>
 8014028:	9900      	ldr	r1, [sp, #0]
 801402a:	b300      	cbz	r0, 801406e <__d2b+0x82>
 801402c:	9a01      	ldr	r2, [sp, #4]
 801402e:	f1c0 0320 	rsb	r3, r0, #32
 8014032:	fa02 f303 	lsl.w	r3, r2, r3
 8014036:	430b      	orrs	r3, r1
 8014038:	40c2      	lsrs	r2, r0
 801403a:	6163      	str	r3, [r4, #20]
 801403c:	9201      	str	r2, [sp, #4]
 801403e:	9b01      	ldr	r3, [sp, #4]
 8014040:	61a3      	str	r3, [r4, #24]
 8014042:	2b00      	cmp	r3, #0
 8014044:	bf14      	ite	ne
 8014046:	2202      	movne	r2, #2
 8014048:	2201      	moveq	r2, #1
 801404a:	6122      	str	r2, [r4, #16]
 801404c:	b1d5      	cbz	r5, 8014084 <__d2b+0x98>
 801404e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014052:	4405      	add	r5, r0
 8014054:	f8c9 5000 	str.w	r5, [r9]
 8014058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801405c:	f8c8 0000 	str.w	r0, [r8]
 8014060:	4620      	mov	r0, r4
 8014062:	b003      	add	sp, #12
 8014064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801406c:	e7d5      	b.n	801401a <__d2b+0x2e>
 801406e:	6161      	str	r1, [r4, #20]
 8014070:	e7e5      	b.n	801403e <__d2b+0x52>
 8014072:	a801      	add	r0, sp, #4
 8014074:	f7ff fd5a 	bl	8013b2c <__lo0bits>
 8014078:	9b01      	ldr	r3, [sp, #4]
 801407a:	6163      	str	r3, [r4, #20]
 801407c:	2201      	movs	r2, #1
 801407e:	6122      	str	r2, [r4, #16]
 8014080:	3020      	adds	r0, #32
 8014082:	e7e3      	b.n	801404c <__d2b+0x60>
 8014084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801408c:	f8c9 0000 	str.w	r0, [r9]
 8014090:	6918      	ldr	r0, [r3, #16]
 8014092:	f7ff fd2b 	bl	8013aec <__hi0bits>
 8014096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801409a:	e7df      	b.n	801405c <__d2b+0x70>
 801409c:	08014f13 	.word	0x08014f13
 80140a0:	08014f84 	.word	0x08014f84

080140a4 <_calloc_r>:
 80140a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140a6:	fba1 2402 	umull	r2, r4, r1, r2
 80140aa:	b94c      	cbnz	r4, 80140c0 <_calloc_r+0x1c>
 80140ac:	4611      	mov	r1, r2
 80140ae:	9201      	str	r2, [sp, #4]
 80140b0:	f000 f87a 	bl	80141a8 <_malloc_r>
 80140b4:	9a01      	ldr	r2, [sp, #4]
 80140b6:	4605      	mov	r5, r0
 80140b8:	b930      	cbnz	r0, 80140c8 <_calloc_r+0x24>
 80140ba:	4628      	mov	r0, r5
 80140bc:	b003      	add	sp, #12
 80140be:	bd30      	pop	{r4, r5, pc}
 80140c0:	220c      	movs	r2, #12
 80140c2:	6002      	str	r2, [r0, #0]
 80140c4:	2500      	movs	r5, #0
 80140c6:	e7f8      	b.n	80140ba <_calloc_r+0x16>
 80140c8:	4621      	mov	r1, r4
 80140ca:	f7fd fe61 	bl	8011d90 <memset>
 80140ce:	e7f4      	b.n	80140ba <_calloc_r+0x16>

080140d0 <_free_r>:
 80140d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140d2:	2900      	cmp	r1, #0
 80140d4:	d044      	beq.n	8014160 <_free_r+0x90>
 80140d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80140da:	9001      	str	r0, [sp, #4]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	f1a1 0404 	sub.w	r4, r1, #4
 80140e2:	bfb8      	it	lt
 80140e4:	18e4      	addlt	r4, r4, r3
 80140e6:	f000 fb61 	bl	80147ac <__malloc_lock>
 80140ea:	4a1e      	ldr	r2, [pc, #120]	; (8014164 <_free_r+0x94>)
 80140ec:	9801      	ldr	r0, [sp, #4]
 80140ee:	6813      	ldr	r3, [r2, #0]
 80140f0:	b933      	cbnz	r3, 8014100 <_free_r+0x30>
 80140f2:	6063      	str	r3, [r4, #4]
 80140f4:	6014      	str	r4, [r2, #0]
 80140f6:	b003      	add	sp, #12
 80140f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80140fc:	f000 bb5c 	b.w	80147b8 <__malloc_unlock>
 8014100:	42a3      	cmp	r3, r4
 8014102:	d908      	bls.n	8014116 <_free_r+0x46>
 8014104:	6825      	ldr	r5, [r4, #0]
 8014106:	1961      	adds	r1, r4, r5
 8014108:	428b      	cmp	r3, r1
 801410a:	bf01      	itttt	eq
 801410c:	6819      	ldreq	r1, [r3, #0]
 801410e:	685b      	ldreq	r3, [r3, #4]
 8014110:	1949      	addeq	r1, r1, r5
 8014112:	6021      	streq	r1, [r4, #0]
 8014114:	e7ed      	b.n	80140f2 <_free_r+0x22>
 8014116:	461a      	mov	r2, r3
 8014118:	685b      	ldr	r3, [r3, #4]
 801411a:	b10b      	cbz	r3, 8014120 <_free_r+0x50>
 801411c:	42a3      	cmp	r3, r4
 801411e:	d9fa      	bls.n	8014116 <_free_r+0x46>
 8014120:	6811      	ldr	r1, [r2, #0]
 8014122:	1855      	adds	r5, r2, r1
 8014124:	42a5      	cmp	r5, r4
 8014126:	d10b      	bne.n	8014140 <_free_r+0x70>
 8014128:	6824      	ldr	r4, [r4, #0]
 801412a:	4421      	add	r1, r4
 801412c:	1854      	adds	r4, r2, r1
 801412e:	42a3      	cmp	r3, r4
 8014130:	6011      	str	r1, [r2, #0]
 8014132:	d1e0      	bne.n	80140f6 <_free_r+0x26>
 8014134:	681c      	ldr	r4, [r3, #0]
 8014136:	685b      	ldr	r3, [r3, #4]
 8014138:	6053      	str	r3, [r2, #4]
 801413a:	4421      	add	r1, r4
 801413c:	6011      	str	r1, [r2, #0]
 801413e:	e7da      	b.n	80140f6 <_free_r+0x26>
 8014140:	d902      	bls.n	8014148 <_free_r+0x78>
 8014142:	230c      	movs	r3, #12
 8014144:	6003      	str	r3, [r0, #0]
 8014146:	e7d6      	b.n	80140f6 <_free_r+0x26>
 8014148:	6825      	ldr	r5, [r4, #0]
 801414a:	1961      	adds	r1, r4, r5
 801414c:	428b      	cmp	r3, r1
 801414e:	bf04      	itt	eq
 8014150:	6819      	ldreq	r1, [r3, #0]
 8014152:	685b      	ldreq	r3, [r3, #4]
 8014154:	6063      	str	r3, [r4, #4]
 8014156:	bf04      	itt	eq
 8014158:	1949      	addeq	r1, r1, r5
 801415a:	6021      	streq	r1, [r4, #0]
 801415c:	6054      	str	r4, [r2, #4]
 801415e:	e7ca      	b.n	80140f6 <_free_r+0x26>
 8014160:	b003      	add	sp, #12
 8014162:	bd30      	pop	{r4, r5, pc}
 8014164:	2000c5e0 	.word	0x2000c5e0

08014168 <sbrk_aligned>:
 8014168:	b570      	push	{r4, r5, r6, lr}
 801416a:	4e0e      	ldr	r6, [pc, #56]	; (80141a4 <sbrk_aligned+0x3c>)
 801416c:	460c      	mov	r4, r1
 801416e:	6831      	ldr	r1, [r6, #0]
 8014170:	4605      	mov	r5, r0
 8014172:	b911      	cbnz	r1, 801417a <sbrk_aligned+0x12>
 8014174:	f000 fa2e 	bl	80145d4 <_sbrk_r>
 8014178:	6030      	str	r0, [r6, #0]
 801417a:	4621      	mov	r1, r4
 801417c:	4628      	mov	r0, r5
 801417e:	f000 fa29 	bl	80145d4 <_sbrk_r>
 8014182:	1c43      	adds	r3, r0, #1
 8014184:	d00a      	beq.n	801419c <sbrk_aligned+0x34>
 8014186:	1cc4      	adds	r4, r0, #3
 8014188:	f024 0403 	bic.w	r4, r4, #3
 801418c:	42a0      	cmp	r0, r4
 801418e:	d007      	beq.n	80141a0 <sbrk_aligned+0x38>
 8014190:	1a21      	subs	r1, r4, r0
 8014192:	4628      	mov	r0, r5
 8014194:	f000 fa1e 	bl	80145d4 <_sbrk_r>
 8014198:	3001      	adds	r0, #1
 801419a:	d101      	bne.n	80141a0 <sbrk_aligned+0x38>
 801419c:	f04f 34ff 	mov.w	r4, #4294967295
 80141a0:	4620      	mov	r0, r4
 80141a2:	bd70      	pop	{r4, r5, r6, pc}
 80141a4:	2000c5e4 	.word	0x2000c5e4

080141a8 <_malloc_r>:
 80141a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141ac:	1ccd      	adds	r5, r1, #3
 80141ae:	f025 0503 	bic.w	r5, r5, #3
 80141b2:	3508      	adds	r5, #8
 80141b4:	2d0c      	cmp	r5, #12
 80141b6:	bf38      	it	cc
 80141b8:	250c      	movcc	r5, #12
 80141ba:	2d00      	cmp	r5, #0
 80141bc:	4607      	mov	r7, r0
 80141be:	db01      	blt.n	80141c4 <_malloc_r+0x1c>
 80141c0:	42a9      	cmp	r1, r5
 80141c2:	d905      	bls.n	80141d0 <_malloc_r+0x28>
 80141c4:	230c      	movs	r3, #12
 80141c6:	603b      	str	r3, [r7, #0]
 80141c8:	2600      	movs	r6, #0
 80141ca:	4630      	mov	r0, r6
 80141cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141d0:	4e2e      	ldr	r6, [pc, #184]	; (801428c <_malloc_r+0xe4>)
 80141d2:	f000 faeb 	bl	80147ac <__malloc_lock>
 80141d6:	6833      	ldr	r3, [r6, #0]
 80141d8:	461c      	mov	r4, r3
 80141da:	bb34      	cbnz	r4, 801422a <_malloc_r+0x82>
 80141dc:	4629      	mov	r1, r5
 80141de:	4638      	mov	r0, r7
 80141e0:	f7ff ffc2 	bl	8014168 <sbrk_aligned>
 80141e4:	1c43      	adds	r3, r0, #1
 80141e6:	4604      	mov	r4, r0
 80141e8:	d14d      	bne.n	8014286 <_malloc_r+0xde>
 80141ea:	6834      	ldr	r4, [r6, #0]
 80141ec:	4626      	mov	r6, r4
 80141ee:	2e00      	cmp	r6, #0
 80141f0:	d140      	bne.n	8014274 <_malloc_r+0xcc>
 80141f2:	6823      	ldr	r3, [r4, #0]
 80141f4:	4631      	mov	r1, r6
 80141f6:	4638      	mov	r0, r7
 80141f8:	eb04 0803 	add.w	r8, r4, r3
 80141fc:	f000 f9ea 	bl	80145d4 <_sbrk_r>
 8014200:	4580      	cmp	r8, r0
 8014202:	d13a      	bne.n	801427a <_malloc_r+0xd2>
 8014204:	6821      	ldr	r1, [r4, #0]
 8014206:	3503      	adds	r5, #3
 8014208:	1a6d      	subs	r5, r5, r1
 801420a:	f025 0503 	bic.w	r5, r5, #3
 801420e:	3508      	adds	r5, #8
 8014210:	2d0c      	cmp	r5, #12
 8014212:	bf38      	it	cc
 8014214:	250c      	movcc	r5, #12
 8014216:	4629      	mov	r1, r5
 8014218:	4638      	mov	r0, r7
 801421a:	f7ff ffa5 	bl	8014168 <sbrk_aligned>
 801421e:	3001      	adds	r0, #1
 8014220:	d02b      	beq.n	801427a <_malloc_r+0xd2>
 8014222:	6823      	ldr	r3, [r4, #0]
 8014224:	442b      	add	r3, r5
 8014226:	6023      	str	r3, [r4, #0]
 8014228:	e00e      	b.n	8014248 <_malloc_r+0xa0>
 801422a:	6822      	ldr	r2, [r4, #0]
 801422c:	1b52      	subs	r2, r2, r5
 801422e:	d41e      	bmi.n	801426e <_malloc_r+0xc6>
 8014230:	2a0b      	cmp	r2, #11
 8014232:	d916      	bls.n	8014262 <_malloc_r+0xba>
 8014234:	1961      	adds	r1, r4, r5
 8014236:	42a3      	cmp	r3, r4
 8014238:	6025      	str	r5, [r4, #0]
 801423a:	bf18      	it	ne
 801423c:	6059      	strne	r1, [r3, #4]
 801423e:	6863      	ldr	r3, [r4, #4]
 8014240:	bf08      	it	eq
 8014242:	6031      	streq	r1, [r6, #0]
 8014244:	5162      	str	r2, [r4, r5]
 8014246:	604b      	str	r3, [r1, #4]
 8014248:	4638      	mov	r0, r7
 801424a:	f104 060b 	add.w	r6, r4, #11
 801424e:	f000 fab3 	bl	80147b8 <__malloc_unlock>
 8014252:	f026 0607 	bic.w	r6, r6, #7
 8014256:	1d23      	adds	r3, r4, #4
 8014258:	1af2      	subs	r2, r6, r3
 801425a:	d0b6      	beq.n	80141ca <_malloc_r+0x22>
 801425c:	1b9b      	subs	r3, r3, r6
 801425e:	50a3      	str	r3, [r4, r2]
 8014260:	e7b3      	b.n	80141ca <_malloc_r+0x22>
 8014262:	6862      	ldr	r2, [r4, #4]
 8014264:	42a3      	cmp	r3, r4
 8014266:	bf0c      	ite	eq
 8014268:	6032      	streq	r2, [r6, #0]
 801426a:	605a      	strne	r2, [r3, #4]
 801426c:	e7ec      	b.n	8014248 <_malloc_r+0xa0>
 801426e:	4623      	mov	r3, r4
 8014270:	6864      	ldr	r4, [r4, #4]
 8014272:	e7b2      	b.n	80141da <_malloc_r+0x32>
 8014274:	4634      	mov	r4, r6
 8014276:	6876      	ldr	r6, [r6, #4]
 8014278:	e7b9      	b.n	80141ee <_malloc_r+0x46>
 801427a:	230c      	movs	r3, #12
 801427c:	603b      	str	r3, [r7, #0]
 801427e:	4638      	mov	r0, r7
 8014280:	f000 fa9a 	bl	80147b8 <__malloc_unlock>
 8014284:	e7a1      	b.n	80141ca <_malloc_r+0x22>
 8014286:	6025      	str	r5, [r4, #0]
 8014288:	e7de      	b.n	8014248 <_malloc_r+0xa0>
 801428a:	bf00      	nop
 801428c:	2000c5e0 	.word	0x2000c5e0

08014290 <__sfputc_r>:
 8014290:	6893      	ldr	r3, [r2, #8]
 8014292:	3b01      	subs	r3, #1
 8014294:	2b00      	cmp	r3, #0
 8014296:	b410      	push	{r4}
 8014298:	6093      	str	r3, [r2, #8]
 801429a:	da08      	bge.n	80142ae <__sfputc_r+0x1e>
 801429c:	6994      	ldr	r4, [r2, #24]
 801429e:	42a3      	cmp	r3, r4
 80142a0:	db01      	blt.n	80142a6 <__sfputc_r+0x16>
 80142a2:	290a      	cmp	r1, #10
 80142a4:	d103      	bne.n	80142ae <__sfputc_r+0x1e>
 80142a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142aa:	f7fe ba11 	b.w	80126d0 <__swbuf_r>
 80142ae:	6813      	ldr	r3, [r2, #0]
 80142b0:	1c58      	adds	r0, r3, #1
 80142b2:	6010      	str	r0, [r2, #0]
 80142b4:	7019      	strb	r1, [r3, #0]
 80142b6:	4608      	mov	r0, r1
 80142b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80142bc:	4770      	bx	lr

080142be <__sfputs_r>:
 80142be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80142c0:	4606      	mov	r6, r0
 80142c2:	460f      	mov	r7, r1
 80142c4:	4614      	mov	r4, r2
 80142c6:	18d5      	adds	r5, r2, r3
 80142c8:	42ac      	cmp	r4, r5
 80142ca:	d101      	bne.n	80142d0 <__sfputs_r+0x12>
 80142cc:	2000      	movs	r0, #0
 80142ce:	e007      	b.n	80142e0 <__sfputs_r+0x22>
 80142d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142d4:	463a      	mov	r2, r7
 80142d6:	4630      	mov	r0, r6
 80142d8:	f7ff ffda 	bl	8014290 <__sfputc_r>
 80142dc:	1c43      	adds	r3, r0, #1
 80142de:	d1f3      	bne.n	80142c8 <__sfputs_r+0xa>
 80142e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142e4 <_vfiprintf_r>:
 80142e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142e8:	460d      	mov	r5, r1
 80142ea:	b09d      	sub	sp, #116	; 0x74
 80142ec:	4614      	mov	r4, r2
 80142ee:	4698      	mov	r8, r3
 80142f0:	4606      	mov	r6, r0
 80142f2:	b118      	cbz	r0, 80142fc <_vfiprintf_r+0x18>
 80142f4:	6983      	ldr	r3, [r0, #24]
 80142f6:	b90b      	cbnz	r3, 80142fc <_vfiprintf_r+0x18>
 80142f8:	f7ff fa3e 	bl	8013778 <__sinit>
 80142fc:	4b89      	ldr	r3, [pc, #548]	; (8014524 <_vfiprintf_r+0x240>)
 80142fe:	429d      	cmp	r5, r3
 8014300:	d11b      	bne.n	801433a <_vfiprintf_r+0x56>
 8014302:	6875      	ldr	r5, [r6, #4]
 8014304:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014306:	07d9      	lsls	r1, r3, #31
 8014308:	d405      	bmi.n	8014316 <_vfiprintf_r+0x32>
 801430a:	89ab      	ldrh	r3, [r5, #12]
 801430c:	059a      	lsls	r2, r3, #22
 801430e:	d402      	bmi.n	8014316 <_vfiprintf_r+0x32>
 8014310:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014312:	f7ff fad4 	bl	80138be <__retarget_lock_acquire_recursive>
 8014316:	89ab      	ldrh	r3, [r5, #12]
 8014318:	071b      	lsls	r3, r3, #28
 801431a:	d501      	bpl.n	8014320 <_vfiprintf_r+0x3c>
 801431c:	692b      	ldr	r3, [r5, #16]
 801431e:	b9eb      	cbnz	r3, 801435c <_vfiprintf_r+0x78>
 8014320:	4629      	mov	r1, r5
 8014322:	4630      	mov	r0, r6
 8014324:	f7fe fa26 	bl	8012774 <__swsetup_r>
 8014328:	b1c0      	cbz	r0, 801435c <_vfiprintf_r+0x78>
 801432a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801432c:	07dc      	lsls	r4, r3, #31
 801432e:	d50e      	bpl.n	801434e <_vfiprintf_r+0x6a>
 8014330:	f04f 30ff 	mov.w	r0, #4294967295
 8014334:	b01d      	add	sp, #116	; 0x74
 8014336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801433a:	4b7b      	ldr	r3, [pc, #492]	; (8014528 <_vfiprintf_r+0x244>)
 801433c:	429d      	cmp	r5, r3
 801433e:	d101      	bne.n	8014344 <_vfiprintf_r+0x60>
 8014340:	68b5      	ldr	r5, [r6, #8]
 8014342:	e7df      	b.n	8014304 <_vfiprintf_r+0x20>
 8014344:	4b79      	ldr	r3, [pc, #484]	; (801452c <_vfiprintf_r+0x248>)
 8014346:	429d      	cmp	r5, r3
 8014348:	bf08      	it	eq
 801434a:	68f5      	ldreq	r5, [r6, #12]
 801434c:	e7da      	b.n	8014304 <_vfiprintf_r+0x20>
 801434e:	89ab      	ldrh	r3, [r5, #12]
 8014350:	0598      	lsls	r0, r3, #22
 8014352:	d4ed      	bmi.n	8014330 <_vfiprintf_r+0x4c>
 8014354:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014356:	f7ff fab3 	bl	80138c0 <__retarget_lock_release_recursive>
 801435a:	e7e9      	b.n	8014330 <_vfiprintf_r+0x4c>
 801435c:	2300      	movs	r3, #0
 801435e:	9309      	str	r3, [sp, #36]	; 0x24
 8014360:	2320      	movs	r3, #32
 8014362:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014366:	f8cd 800c 	str.w	r8, [sp, #12]
 801436a:	2330      	movs	r3, #48	; 0x30
 801436c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014530 <_vfiprintf_r+0x24c>
 8014370:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014374:	f04f 0901 	mov.w	r9, #1
 8014378:	4623      	mov	r3, r4
 801437a:	469a      	mov	sl, r3
 801437c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014380:	b10a      	cbz	r2, 8014386 <_vfiprintf_r+0xa2>
 8014382:	2a25      	cmp	r2, #37	; 0x25
 8014384:	d1f9      	bne.n	801437a <_vfiprintf_r+0x96>
 8014386:	ebba 0b04 	subs.w	fp, sl, r4
 801438a:	d00b      	beq.n	80143a4 <_vfiprintf_r+0xc0>
 801438c:	465b      	mov	r3, fp
 801438e:	4622      	mov	r2, r4
 8014390:	4629      	mov	r1, r5
 8014392:	4630      	mov	r0, r6
 8014394:	f7ff ff93 	bl	80142be <__sfputs_r>
 8014398:	3001      	adds	r0, #1
 801439a:	f000 80aa 	beq.w	80144f2 <_vfiprintf_r+0x20e>
 801439e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143a0:	445a      	add	r2, fp
 80143a2:	9209      	str	r2, [sp, #36]	; 0x24
 80143a4:	f89a 3000 	ldrb.w	r3, [sl]
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 80a2 	beq.w	80144f2 <_vfiprintf_r+0x20e>
 80143ae:	2300      	movs	r3, #0
 80143b0:	f04f 32ff 	mov.w	r2, #4294967295
 80143b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80143b8:	f10a 0a01 	add.w	sl, sl, #1
 80143bc:	9304      	str	r3, [sp, #16]
 80143be:	9307      	str	r3, [sp, #28]
 80143c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80143c4:	931a      	str	r3, [sp, #104]	; 0x68
 80143c6:	4654      	mov	r4, sl
 80143c8:	2205      	movs	r2, #5
 80143ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143ce:	4858      	ldr	r0, [pc, #352]	; (8014530 <_vfiprintf_r+0x24c>)
 80143d0:	f7eb ff2e 	bl	8000230 <memchr>
 80143d4:	9a04      	ldr	r2, [sp, #16]
 80143d6:	b9d8      	cbnz	r0, 8014410 <_vfiprintf_r+0x12c>
 80143d8:	06d1      	lsls	r1, r2, #27
 80143da:	bf44      	itt	mi
 80143dc:	2320      	movmi	r3, #32
 80143de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143e2:	0713      	lsls	r3, r2, #28
 80143e4:	bf44      	itt	mi
 80143e6:	232b      	movmi	r3, #43	; 0x2b
 80143e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ec:	f89a 3000 	ldrb.w	r3, [sl]
 80143f0:	2b2a      	cmp	r3, #42	; 0x2a
 80143f2:	d015      	beq.n	8014420 <_vfiprintf_r+0x13c>
 80143f4:	9a07      	ldr	r2, [sp, #28]
 80143f6:	4654      	mov	r4, sl
 80143f8:	2000      	movs	r0, #0
 80143fa:	f04f 0c0a 	mov.w	ip, #10
 80143fe:	4621      	mov	r1, r4
 8014400:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014404:	3b30      	subs	r3, #48	; 0x30
 8014406:	2b09      	cmp	r3, #9
 8014408:	d94e      	bls.n	80144a8 <_vfiprintf_r+0x1c4>
 801440a:	b1b0      	cbz	r0, 801443a <_vfiprintf_r+0x156>
 801440c:	9207      	str	r2, [sp, #28]
 801440e:	e014      	b.n	801443a <_vfiprintf_r+0x156>
 8014410:	eba0 0308 	sub.w	r3, r0, r8
 8014414:	fa09 f303 	lsl.w	r3, r9, r3
 8014418:	4313      	orrs	r3, r2
 801441a:	9304      	str	r3, [sp, #16]
 801441c:	46a2      	mov	sl, r4
 801441e:	e7d2      	b.n	80143c6 <_vfiprintf_r+0xe2>
 8014420:	9b03      	ldr	r3, [sp, #12]
 8014422:	1d19      	adds	r1, r3, #4
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	9103      	str	r1, [sp, #12]
 8014428:	2b00      	cmp	r3, #0
 801442a:	bfbb      	ittet	lt
 801442c:	425b      	neglt	r3, r3
 801442e:	f042 0202 	orrlt.w	r2, r2, #2
 8014432:	9307      	strge	r3, [sp, #28]
 8014434:	9307      	strlt	r3, [sp, #28]
 8014436:	bfb8      	it	lt
 8014438:	9204      	strlt	r2, [sp, #16]
 801443a:	7823      	ldrb	r3, [r4, #0]
 801443c:	2b2e      	cmp	r3, #46	; 0x2e
 801443e:	d10c      	bne.n	801445a <_vfiprintf_r+0x176>
 8014440:	7863      	ldrb	r3, [r4, #1]
 8014442:	2b2a      	cmp	r3, #42	; 0x2a
 8014444:	d135      	bne.n	80144b2 <_vfiprintf_r+0x1ce>
 8014446:	9b03      	ldr	r3, [sp, #12]
 8014448:	1d1a      	adds	r2, r3, #4
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	9203      	str	r2, [sp, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	bfb8      	it	lt
 8014452:	f04f 33ff 	movlt.w	r3, #4294967295
 8014456:	3402      	adds	r4, #2
 8014458:	9305      	str	r3, [sp, #20]
 801445a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014540 <_vfiprintf_r+0x25c>
 801445e:	7821      	ldrb	r1, [r4, #0]
 8014460:	2203      	movs	r2, #3
 8014462:	4650      	mov	r0, sl
 8014464:	f7eb fee4 	bl	8000230 <memchr>
 8014468:	b140      	cbz	r0, 801447c <_vfiprintf_r+0x198>
 801446a:	2340      	movs	r3, #64	; 0x40
 801446c:	eba0 000a 	sub.w	r0, r0, sl
 8014470:	fa03 f000 	lsl.w	r0, r3, r0
 8014474:	9b04      	ldr	r3, [sp, #16]
 8014476:	4303      	orrs	r3, r0
 8014478:	3401      	adds	r4, #1
 801447a:	9304      	str	r3, [sp, #16]
 801447c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014480:	482c      	ldr	r0, [pc, #176]	; (8014534 <_vfiprintf_r+0x250>)
 8014482:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014486:	2206      	movs	r2, #6
 8014488:	f7eb fed2 	bl	8000230 <memchr>
 801448c:	2800      	cmp	r0, #0
 801448e:	d03f      	beq.n	8014510 <_vfiprintf_r+0x22c>
 8014490:	4b29      	ldr	r3, [pc, #164]	; (8014538 <_vfiprintf_r+0x254>)
 8014492:	bb1b      	cbnz	r3, 80144dc <_vfiprintf_r+0x1f8>
 8014494:	9b03      	ldr	r3, [sp, #12]
 8014496:	3307      	adds	r3, #7
 8014498:	f023 0307 	bic.w	r3, r3, #7
 801449c:	3308      	adds	r3, #8
 801449e:	9303      	str	r3, [sp, #12]
 80144a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144a2:	443b      	add	r3, r7
 80144a4:	9309      	str	r3, [sp, #36]	; 0x24
 80144a6:	e767      	b.n	8014378 <_vfiprintf_r+0x94>
 80144a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80144ac:	460c      	mov	r4, r1
 80144ae:	2001      	movs	r0, #1
 80144b0:	e7a5      	b.n	80143fe <_vfiprintf_r+0x11a>
 80144b2:	2300      	movs	r3, #0
 80144b4:	3401      	adds	r4, #1
 80144b6:	9305      	str	r3, [sp, #20]
 80144b8:	4619      	mov	r1, r3
 80144ba:	f04f 0c0a 	mov.w	ip, #10
 80144be:	4620      	mov	r0, r4
 80144c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80144c4:	3a30      	subs	r2, #48	; 0x30
 80144c6:	2a09      	cmp	r2, #9
 80144c8:	d903      	bls.n	80144d2 <_vfiprintf_r+0x1ee>
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d0c5      	beq.n	801445a <_vfiprintf_r+0x176>
 80144ce:	9105      	str	r1, [sp, #20]
 80144d0:	e7c3      	b.n	801445a <_vfiprintf_r+0x176>
 80144d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80144d6:	4604      	mov	r4, r0
 80144d8:	2301      	movs	r3, #1
 80144da:	e7f0      	b.n	80144be <_vfiprintf_r+0x1da>
 80144dc:	ab03      	add	r3, sp, #12
 80144de:	9300      	str	r3, [sp, #0]
 80144e0:	462a      	mov	r2, r5
 80144e2:	4b16      	ldr	r3, [pc, #88]	; (801453c <_vfiprintf_r+0x258>)
 80144e4:	a904      	add	r1, sp, #16
 80144e6:	4630      	mov	r0, r6
 80144e8:	f7fd fcfa 	bl	8011ee0 <_printf_float>
 80144ec:	4607      	mov	r7, r0
 80144ee:	1c78      	adds	r0, r7, #1
 80144f0:	d1d6      	bne.n	80144a0 <_vfiprintf_r+0x1bc>
 80144f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144f4:	07d9      	lsls	r1, r3, #31
 80144f6:	d405      	bmi.n	8014504 <_vfiprintf_r+0x220>
 80144f8:	89ab      	ldrh	r3, [r5, #12]
 80144fa:	059a      	lsls	r2, r3, #22
 80144fc:	d402      	bmi.n	8014504 <_vfiprintf_r+0x220>
 80144fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014500:	f7ff f9de 	bl	80138c0 <__retarget_lock_release_recursive>
 8014504:	89ab      	ldrh	r3, [r5, #12]
 8014506:	065b      	lsls	r3, r3, #25
 8014508:	f53f af12 	bmi.w	8014330 <_vfiprintf_r+0x4c>
 801450c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801450e:	e711      	b.n	8014334 <_vfiprintf_r+0x50>
 8014510:	ab03      	add	r3, sp, #12
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	462a      	mov	r2, r5
 8014516:	4b09      	ldr	r3, [pc, #36]	; (801453c <_vfiprintf_r+0x258>)
 8014518:	a904      	add	r1, sp, #16
 801451a:	4630      	mov	r0, r6
 801451c:	f7fd ff84 	bl	8012428 <_printf_i>
 8014520:	e7e4      	b.n	80144ec <_vfiprintf_r+0x208>
 8014522:	bf00      	nop
 8014524:	08014f44 	.word	0x08014f44
 8014528:	08014f64 	.word	0x08014f64
 801452c:	08014f24 	.word	0x08014f24
 8014530:	080150dc 	.word	0x080150dc
 8014534:	080150e6 	.word	0x080150e6
 8014538:	08011ee1 	.word	0x08011ee1
 801453c:	080142bf 	.word	0x080142bf
 8014540:	080150e2 	.word	0x080150e2

08014544 <_putc_r>:
 8014544:	b570      	push	{r4, r5, r6, lr}
 8014546:	460d      	mov	r5, r1
 8014548:	4614      	mov	r4, r2
 801454a:	4606      	mov	r6, r0
 801454c:	b118      	cbz	r0, 8014556 <_putc_r+0x12>
 801454e:	6983      	ldr	r3, [r0, #24]
 8014550:	b90b      	cbnz	r3, 8014556 <_putc_r+0x12>
 8014552:	f7ff f911 	bl	8013778 <__sinit>
 8014556:	4b1c      	ldr	r3, [pc, #112]	; (80145c8 <_putc_r+0x84>)
 8014558:	429c      	cmp	r4, r3
 801455a:	d124      	bne.n	80145a6 <_putc_r+0x62>
 801455c:	6874      	ldr	r4, [r6, #4]
 801455e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014560:	07d8      	lsls	r0, r3, #31
 8014562:	d405      	bmi.n	8014570 <_putc_r+0x2c>
 8014564:	89a3      	ldrh	r3, [r4, #12]
 8014566:	0599      	lsls	r1, r3, #22
 8014568:	d402      	bmi.n	8014570 <_putc_r+0x2c>
 801456a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801456c:	f7ff f9a7 	bl	80138be <__retarget_lock_acquire_recursive>
 8014570:	68a3      	ldr	r3, [r4, #8]
 8014572:	3b01      	subs	r3, #1
 8014574:	2b00      	cmp	r3, #0
 8014576:	60a3      	str	r3, [r4, #8]
 8014578:	da05      	bge.n	8014586 <_putc_r+0x42>
 801457a:	69a2      	ldr	r2, [r4, #24]
 801457c:	4293      	cmp	r3, r2
 801457e:	db1c      	blt.n	80145ba <_putc_r+0x76>
 8014580:	b2eb      	uxtb	r3, r5
 8014582:	2b0a      	cmp	r3, #10
 8014584:	d019      	beq.n	80145ba <_putc_r+0x76>
 8014586:	6823      	ldr	r3, [r4, #0]
 8014588:	1c5a      	adds	r2, r3, #1
 801458a:	6022      	str	r2, [r4, #0]
 801458c:	701d      	strb	r5, [r3, #0]
 801458e:	b2ed      	uxtb	r5, r5
 8014590:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014592:	07da      	lsls	r2, r3, #31
 8014594:	d405      	bmi.n	80145a2 <_putc_r+0x5e>
 8014596:	89a3      	ldrh	r3, [r4, #12]
 8014598:	059b      	lsls	r3, r3, #22
 801459a:	d402      	bmi.n	80145a2 <_putc_r+0x5e>
 801459c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801459e:	f7ff f98f 	bl	80138c0 <__retarget_lock_release_recursive>
 80145a2:	4628      	mov	r0, r5
 80145a4:	bd70      	pop	{r4, r5, r6, pc}
 80145a6:	4b09      	ldr	r3, [pc, #36]	; (80145cc <_putc_r+0x88>)
 80145a8:	429c      	cmp	r4, r3
 80145aa:	d101      	bne.n	80145b0 <_putc_r+0x6c>
 80145ac:	68b4      	ldr	r4, [r6, #8]
 80145ae:	e7d6      	b.n	801455e <_putc_r+0x1a>
 80145b0:	4b07      	ldr	r3, [pc, #28]	; (80145d0 <_putc_r+0x8c>)
 80145b2:	429c      	cmp	r4, r3
 80145b4:	bf08      	it	eq
 80145b6:	68f4      	ldreq	r4, [r6, #12]
 80145b8:	e7d1      	b.n	801455e <_putc_r+0x1a>
 80145ba:	4629      	mov	r1, r5
 80145bc:	4622      	mov	r2, r4
 80145be:	4630      	mov	r0, r6
 80145c0:	f7fe f886 	bl	80126d0 <__swbuf_r>
 80145c4:	4605      	mov	r5, r0
 80145c6:	e7e3      	b.n	8014590 <_putc_r+0x4c>
 80145c8:	08014f44 	.word	0x08014f44
 80145cc:	08014f64 	.word	0x08014f64
 80145d0:	08014f24 	.word	0x08014f24

080145d4 <_sbrk_r>:
 80145d4:	b538      	push	{r3, r4, r5, lr}
 80145d6:	4d06      	ldr	r5, [pc, #24]	; (80145f0 <_sbrk_r+0x1c>)
 80145d8:	2300      	movs	r3, #0
 80145da:	4604      	mov	r4, r0
 80145dc:	4608      	mov	r0, r1
 80145de:	602b      	str	r3, [r5, #0]
 80145e0:	f7f5 ffc2 	bl	800a568 <_sbrk>
 80145e4:	1c43      	adds	r3, r0, #1
 80145e6:	d102      	bne.n	80145ee <_sbrk_r+0x1a>
 80145e8:	682b      	ldr	r3, [r5, #0]
 80145ea:	b103      	cbz	r3, 80145ee <_sbrk_r+0x1a>
 80145ec:	6023      	str	r3, [r4, #0]
 80145ee:	bd38      	pop	{r3, r4, r5, pc}
 80145f0:	2000c5e8 	.word	0x2000c5e8

080145f4 <__sread>:
 80145f4:	b510      	push	{r4, lr}
 80145f6:	460c      	mov	r4, r1
 80145f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145fc:	f000 f8e2 	bl	80147c4 <_read_r>
 8014600:	2800      	cmp	r0, #0
 8014602:	bfab      	itete	ge
 8014604:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014606:	89a3      	ldrhlt	r3, [r4, #12]
 8014608:	181b      	addge	r3, r3, r0
 801460a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801460e:	bfac      	ite	ge
 8014610:	6563      	strge	r3, [r4, #84]	; 0x54
 8014612:	81a3      	strhlt	r3, [r4, #12]
 8014614:	bd10      	pop	{r4, pc}

08014616 <__swrite>:
 8014616:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801461a:	461f      	mov	r7, r3
 801461c:	898b      	ldrh	r3, [r1, #12]
 801461e:	05db      	lsls	r3, r3, #23
 8014620:	4605      	mov	r5, r0
 8014622:	460c      	mov	r4, r1
 8014624:	4616      	mov	r6, r2
 8014626:	d505      	bpl.n	8014634 <__swrite+0x1e>
 8014628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801462c:	2302      	movs	r3, #2
 801462e:	2200      	movs	r2, #0
 8014630:	f000 f898 	bl	8014764 <_lseek_r>
 8014634:	89a3      	ldrh	r3, [r4, #12]
 8014636:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801463a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801463e:	81a3      	strh	r3, [r4, #12]
 8014640:	4632      	mov	r2, r6
 8014642:	463b      	mov	r3, r7
 8014644:	4628      	mov	r0, r5
 8014646:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801464a:	f000 b817 	b.w	801467c <_write_r>

0801464e <__sseek>:
 801464e:	b510      	push	{r4, lr}
 8014650:	460c      	mov	r4, r1
 8014652:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014656:	f000 f885 	bl	8014764 <_lseek_r>
 801465a:	1c43      	adds	r3, r0, #1
 801465c:	89a3      	ldrh	r3, [r4, #12]
 801465e:	bf15      	itete	ne
 8014660:	6560      	strne	r0, [r4, #84]	; 0x54
 8014662:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014666:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801466a:	81a3      	strheq	r3, [r4, #12]
 801466c:	bf18      	it	ne
 801466e:	81a3      	strhne	r3, [r4, #12]
 8014670:	bd10      	pop	{r4, pc}

08014672 <__sclose>:
 8014672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014676:	f000 b831 	b.w	80146dc <_close_r>
	...

0801467c <_write_r>:
 801467c:	b538      	push	{r3, r4, r5, lr}
 801467e:	4d07      	ldr	r5, [pc, #28]	; (801469c <_write_r+0x20>)
 8014680:	4604      	mov	r4, r0
 8014682:	4608      	mov	r0, r1
 8014684:	4611      	mov	r1, r2
 8014686:	2200      	movs	r2, #0
 8014688:	602a      	str	r2, [r5, #0]
 801468a:	461a      	mov	r2, r3
 801468c:	f7f5 ff18 	bl	800a4c0 <_write>
 8014690:	1c43      	adds	r3, r0, #1
 8014692:	d102      	bne.n	801469a <_write_r+0x1e>
 8014694:	682b      	ldr	r3, [r5, #0]
 8014696:	b103      	cbz	r3, 801469a <_write_r+0x1e>
 8014698:	6023      	str	r3, [r4, #0]
 801469a:	bd38      	pop	{r3, r4, r5, pc}
 801469c:	2000c5e8 	.word	0x2000c5e8

080146a0 <__assert_func>:
 80146a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80146a2:	4614      	mov	r4, r2
 80146a4:	461a      	mov	r2, r3
 80146a6:	4b09      	ldr	r3, [pc, #36]	; (80146cc <__assert_func+0x2c>)
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	4605      	mov	r5, r0
 80146ac:	68d8      	ldr	r0, [r3, #12]
 80146ae:	b14c      	cbz	r4, 80146c4 <__assert_func+0x24>
 80146b0:	4b07      	ldr	r3, [pc, #28]	; (80146d0 <__assert_func+0x30>)
 80146b2:	9100      	str	r1, [sp, #0]
 80146b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80146b8:	4906      	ldr	r1, [pc, #24]	; (80146d4 <__assert_func+0x34>)
 80146ba:	462b      	mov	r3, r5
 80146bc:	f000 f81e 	bl	80146fc <fiprintf>
 80146c0:	f000 f89f 	bl	8014802 <abort>
 80146c4:	4b04      	ldr	r3, [pc, #16]	; (80146d8 <__assert_func+0x38>)
 80146c6:	461c      	mov	r4, r3
 80146c8:	e7f3      	b.n	80146b2 <__assert_func+0x12>
 80146ca:	bf00      	nop
 80146cc:	2000000c 	.word	0x2000000c
 80146d0:	080150ed 	.word	0x080150ed
 80146d4:	080150fa 	.word	0x080150fa
 80146d8:	08015128 	.word	0x08015128

080146dc <_close_r>:
 80146dc:	b538      	push	{r3, r4, r5, lr}
 80146de:	4d06      	ldr	r5, [pc, #24]	; (80146f8 <_close_r+0x1c>)
 80146e0:	2300      	movs	r3, #0
 80146e2:	4604      	mov	r4, r0
 80146e4:	4608      	mov	r0, r1
 80146e6:	602b      	str	r3, [r5, #0]
 80146e8:	f7f5 ff0a 	bl	800a500 <_close>
 80146ec:	1c43      	adds	r3, r0, #1
 80146ee:	d102      	bne.n	80146f6 <_close_r+0x1a>
 80146f0:	682b      	ldr	r3, [r5, #0]
 80146f2:	b103      	cbz	r3, 80146f6 <_close_r+0x1a>
 80146f4:	6023      	str	r3, [r4, #0]
 80146f6:	bd38      	pop	{r3, r4, r5, pc}
 80146f8:	2000c5e8 	.word	0x2000c5e8

080146fc <fiprintf>:
 80146fc:	b40e      	push	{r1, r2, r3}
 80146fe:	b503      	push	{r0, r1, lr}
 8014700:	4601      	mov	r1, r0
 8014702:	ab03      	add	r3, sp, #12
 8014704:	4805      	ldr	r0, [pc, #20]	; (801471c <fiprintf+0x20>)
 8014706:	f853 2b04 	ldr.w	r2, [r3], #4
 801470a:	6800      	ldr	r0, [r0, #0]
 801470c:	9301      	str	r3, [sp, #4]
 801470e:	f7ff fde9 	bl	80142e4 <_vfiprintf_r>
 8014712:	b002      	add	sp, #8
 8014714:	f85d eb04 	ldr.w	lr, [sp], #4
 8014718:	b003      	add	sp, #12
 801471a:	4770      	bx	lr
 801471c:	2000000c 	.word	0x2000000c

08014720 <_fstat_r>:
 8014720:	b538      	push	{r3, r4, r5, lr}
 8014722:	4d07      	ldr	r5, [pc, #28]	; (8014740 <_fstat_r+0x20>)
 8014724:	2300      	movs	r3, #0
 8014726:	4604      	mov	r4, r0
 8014728:	4608      	mov	r0, r1
 801472a:	4611      	mov	r1, r2
 801472c:	602b      	str	r3, [r5, #0]
 801472e:	f7f5 fef3 	bl	800a518 <_fstat>
 8014732:	1c43      	adds	r3, r0, #1
 8014734:	d102      	bne.n	801473c <_fstat_r+0x1c>
 8014736:	682b      	ldr	r3, [r5, #0]
 8014738:	b103      	cbz	r3, 801473c <_fstat_r+0x1c>
 801473a:	6023      	str	r3, [r4, #0]
 801473c:	bd38      	pop	{r3, r4, r5, pc}
 801473e:	bf00      	nop
 8014740:	2000c5e8 	.word	0x2000c5e8

08014744 <_isatty_r>:
 8014744:	b538      	push	{r3, r4, r5, lr}
 8014746:	4d06      	ldr	r5, [pc, #24]	; (8014760 <_isatty_r+0x1c>)
 8014748:	2300      	movs	r3, #0
 801474a:	4604      	mov	r4, r0
 801474c:	4608      	mov	r0, r1
 801474e:	602b      	str	r3, [r5, #0]
 8014750:	f7f5 fef2 	bl	800a538 <_isatty>
 8014754:	1c43      	adds	r3, r0, #1
 8014756:	d102      	bne.n	801475e <_isatty_r+0x1a>
 8014758:	682b      	ldr	r3, [r5, #0]
 801475a:	b103      	cbz	r3, 801475e <_isatty_r+0x1a>
 801475c:	6023      	str	r3, [r4, #0]
 801475e:	bd38      	pop	{r3, r4, r5, pc}
 8014760:	2000c5e8 	.word	0x2000c5e8

08014764 <_lseek_r>:
 8014764:	b538      	push	{r3, r4, r5, lr}
 8014766:	4d07      	ldr	r5, [pc, #28]	; (8014784 <_lseek_r+0x20>)
 8014768:	4604      	mov	r4, r0
 801476a:	4608      	mov	r0, r1
 801476c:	4611      	mov	r1, r2
 801476e:	2200      	movs	r2, #0
 8014770:	602a      	str	r2, [r5, #0]
 8014772:	461a      	mov	r2, r3
 8014774:	f7f5 feeb 	bl	800a54e <_lseek>
 8014778:	1c43      	adds	r3, r0, #1
 801477a:	d102      	bne.n	8014782 <_lseek_r+0x1e>
 801477c:	682b      	ldr	r3, [r5, #0]
 801477e:	b103      	cbz	r3, 8014782 <_lseek_r+0x1e>
 8014780:	6023      	str	r3, [r4, #0]
 8014782:	bd38      	pop	{r3, r4, r5, pc}
 8014784:	2000c5e8 	.word	0x2000c5e8

08014788 <__ascii_mbtowc>:
 8014788:	b082      	sub	sp, #8
 801478a:	b901      	cbnz	r1, 801478e <__ascii_mbtowc+0x6>
 801478c:	a901      	add	r1, sp, #4
 801478e:	b142      	cbz	r2, 80147a2 <__ascii_mbtowc+0x1a>
 8014790:	b14b      	cbz	r3, 80147a6 <__ascii_mbtowc+0x1e>
 8014792:	7813      	ldrb	r3, [r2, #0]
 8014794:	600b      	str	r3, [r1, #0]
 8014796:	7812      	ldrb	r2, [r2, #0]
 8014798:	1e10      	subs	r0, r2, #0
 801479a:	bf18      	it	ne
 801479c:	2001      	movne	r0, #1
 801479e:	b002      	add	sp, #8
 80147a0:	4770      	bx	lr
 80147a2:	4610      	mov	r0, r2
 80147a4:	e7fb      	b.n	801479e <__ascii_mbtowc+0x16>
 80147a6:	f06f 0001 	mvn.w	r0, #1
 80147aa:	e7f8      	b.n	801479e <__ascii_mbtowc+0x16>

080147ac <__malloc_lock>:
 80147ac:	4801      	ldr	r0, [pc, #4]	; (80147b4 <__malloc_lock+0x8>)
 80147ae:	f7ff b886 	b.w	80138be <__retarget_lock_acquire_recursive>
 80147b2:	bf00      	nop
 80147b4:	2000c5dc 	.word	0x2000c5dc

080147b8 <__malloc_unlock>:
 80147b8:	4801      	ldr	r0, [pc, #4]	; (80147c0 <__malloc_unlock+0x8>)
 80147ba:	f7ff b881 	b.w	80138c0 <__retarget_lock_release_recursive>
 80147be:	bf00      	nop
 80147c0:	2000c5dc 	.word	0x2000c5dc

080147c4 <_read_r>:
 80147c4:	b538      	push	{r3, r4, r5, lr}
 80147c6:	4d07      	ldr	r5, [pc, #28]	; (80147e4 <_read_r+0x20>)
 80147c8:	4604      	mov	r4, r0
 80147ca:	4608      	mov	r0, r1
 80147cc:	4611      	mov	r1, r2
 80147ce:	2200      	movs	r2, #0
 80147d0:	602a      	str	r2, [r5, #0]
 80147d2:	461a      	mov	r2, r3
 80147d4:	f7f5 fe57 	bl	800a486 <_read>
 80147d8:	1c43      	adds	r3, r0, #1
 80147da:	d102      	bne.n	80147e2 <_read_r+0x1e>
 80147dc:	682b      	ldr	r3, [r5, #0]
 80147de:	b103      	cbz	r3, 80147e2 <_read_r+0x1e>
 80147e0:	6023      	str	r3, [r4, #0]
 80147e2:	bd38      	pop	{r3, r4, r5, pc}
 80147e4:	2000c5e8 	.word	0x2000c5e8

080147e8 <__ascii_wctomb>:
 80147e8:	b149      	cbz	r1, 80147fe <__ascii_wctomb+0x16>
 80147ea:	2aff      	cmp	r2, #255	; 0xff
 80147ec:	bf85      	ittet	hi
 80147ee:	238a      	movhi	r3, #138	; 0x8a
 80147f0:	6003      	strhi	r3, [r0, #0]
 80147f2:	700a      	strbls	r2, [r1, #0]
 80147f4:	f04f 30ff 	movhi.w	r0, #4294967295
 80147f8:	bf98      	it	ls
 80147fa:	2001      	movls	r0, #1
 80147fc:	4770      	bx	lr
 80147fe:	4608      	mov	r0, r1
 8014800:	4770      	bx	lr

08014802 <abort>:
 8014802:	b508      	push	{r3, lr}
 8014804:	2006      	movs	r0, #6
 8014806:	f000 f82b 	bl	8014860 <raise>
 801480a:	2001      	movs	r0, #1
 801480c:	f7f5 fe31 	bl	800a472 <_exit>

08014810 <_raise_r>:
 8014810:	291f      	cmp	r1, #31
 8014812:	b538      	push	{r3, r4, r5, lr}
 8014814:	4604      	mov	r4, r0
 8014816:	460d      	mov	r5, r1
 8014818:	d904      	bls.n	8014824 <_raise_r+0x14>
 801481a:	2316      	movs	r3, #22
 801481c:	6003      	str	r3, [r0, #0]
 801481e:	f04f 30ff 	mov.w	r0, #4294967295
 8014822:	bd38      	pop	{r3, r4, r5, pc}
 8014824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014826:	b112      	cbz	r2, 801482e <_raise_r+0x1e>
 8014828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801482c:	b94b      	cbnz	r3, 8014842 <_raise_r+0x32>
 801482e:	4620      	mov	r0, r4
 8014830:	f000 f830 	bl	8014894 <_getpid_r>
 8014834:	462a      	mov	r2, r5
 8014836:	4601      	mov	r1, r0
 8014838:	4620      	mov	r0, r4
 801483a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801483e:	f000 b817 	b.w	8014870 <_kill_r>
 8014842:	2b01      	cmp	r3, #1
 8014844:	d00a      	beq.n	801485c <_raise_r+0x4c>
 8014846:	1c59      	adds	r1, r3, #1
 8014848:	d103      	bne.n	8014852 <_raise_r+0x42>
 801484a:	2316      	movs	r3, #22
 801484c:	6003      	str	r3, [r0, #0]
 801484e:	2001      	movs	r0, #1
 8014850:	e7e7      	b.n	8014822 <_raise_r+0x12>
 8014852:	2400      	movs	r4, #0
 8014854:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014858:	4628      	mov	r0, r5
 801485a:	4798      	blx	r3
 801485c:	2000      	movs	r0, #0
 801485e:	e7e0      	b.n	8014822 <_raise_r+0x12>

08014860 <raise>:
 8014860:	4b02      	ldr	r3, [pc, #8]	; (801486c <raise+0xc>)
 8014862:	4601      	mov	r1, r0
 8014864:	6818      	ldr	r0, [r3, #0]
 8014866:	f7ff bfd3 	b.w	8014810 <_raise_r>
 801486a:	bf00      	nop
 801486c:	2000000c 	.word	0x2000000c

08014870 <_kill_r>:
 8014870:	b538      	push	{r3, r4, r5, lr}
 8014872:	4d07      	ldr	r5, [pc, #28]	; (8014890 <_kill_r+0x20>)
 8014874:	2300      	movs	r3, #0
 8014876:	4604      	mov	r4, r0
 8014878:	4608      	mov	r0, r1
 801487a:	4611      	mov	r1, r2
 801487c:	602b      	str	r3, [r5, #0]
 801487e:	f7f5 fde8 	bl	800a452 <_kill>
 8014882:	1c43      	adds	r3, r0, #1
 8014884:	d102      	bne.n	801488c <_kill_r+0x1c>
 8014886:	682b      	ldr	r3, [r5, #0]
 8014888:	b103      	cbz	r3, 801488c <_kill_r+0x1c>
 801488a:	6023      	str	r3, [r4, #0]
 801488c:	bd38      	pop	{r3, r4, r5, pc}
 801488e:	bf00      	nop
 8014890:	2000c5e8 	.word	0x2000c5e8

08014894 <_getpid_r>:
 8014894:	f7f5 bdd5 	b.w	800a442 <_getpid>

08014898 <exp>:
 8014898:	b538      	push	{r3, r4, r5, lr}
 801489a:	ed2d 8b02 	vpush	{d8}
 801489e:	ec55 4b10 	vmov	r4, r5, d0
 80148a2:	f000 f841 	bl	8014928 <__ieee754_exp>
 80148a6:	eeb0 8a40 	vmov.f32	s16, s0
 80148aa:	eef0 8a60 	vmov.f32	s17, s1
 80148ae:	ec45 4b10 	vmov	d0, r4, r5
 80148b2:	f000 f9eb 	bl	8014c8c <finite>
 80148b6:	b168      	cbz	r0, 80148d4 <exp+0x3c>
 80148b8:	a317      	add	r3, pc, #92	; (adr r3, 8014918 <exp+0x80>)
 80148ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148be:	4620      	mov	r0, r4
 80148c0:	4629      	mov	r1, r5
 80148c2:	f7ec f951 	bl	8000b68 <__aeabi_dcmpgt>
 80148c6:	b160      	cbz	r0, 80148e2 <exp+0x4a>
 80148c8:	f7fd fa2a 	bl	8011d20 <__errno>
 80148cc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8014908 <exp+0x70>
 80148d0:	2322      	movs	r3, #34	; 0x22
 80148d2:	6003      	str	r3, [r0, #0]
 80148d4:	eeb0 0a48 	vmov.f32	s0, s16
 80148d8:	eef0 0a68 	vmov.f32	s1, s17
 80148dc:	ecbd 8b02 	vpop	{d8}
 80148e0:	bd38      	pop	{r3, r4, r5, pc}
 80148e2:	a30f      	add	r3, pc, #60	; (adr r3, 8014920 <exp+0x88>)
 80148e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148e8:	4620      	mov	r0, r4
 80148ea:	4629      	mov	r1, r5
 80148ec:	f7ec f91e 	bl	8000b2c <__aeabi_dcmplt>
 80148f0:	2800      	cmp	r0, #0
 80148f2:	d0ef      	beq.n	80148d4 <exp+0x3c>
 80148f4:	f7fd fa14 	bl	8011d20 <__errno>
 80148f8:	2322      	movs	r3, #34	; 0x22
 80148fa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8014910 <exp+0x78>
 80148fe:	6003      	str	r3, [r0, #0]
 8014900:	e7e8      	b.n	80148d4 <exp+0x3c>
 8014902:	bf00      	nop
 8014904:	f3af 8000 	nop.w
 8014908:	00000000 	.word	0x00000000
 801490c:	7ff00000 	.word	0x7ff00000
	...
 8014918:	fefa39ef 	.word	0xfefa39ef
 801491c:	40862e42 	.word	0x40862e42
 8014920:	d52d3051 	.word	0xd52d3051
 8014924:	c0874910 	.word	0xc0874910

08014928 <__ieee754_exp>:
 8014928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801492c:	ec55 4b10 	vmov	r4, r5, d0
 8014930:	49b5      	ldr	r1, [pc, #724]	; (8014c08 <__ieee754_exp+0x2e0>)
 8014932:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014936:	428b      	cmp	r3, r1
 8014938:	ed2d 8b04 	vpush	{d8-d9}
 801493c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8014940:	d93d      	bls.n	80149be <__ieee754_exp+0x96>
 8014942:	49b2      	ldr	r1, [pc, #712]	; (8014c0c <__ieee754_exp+0x2e4>)
 8014944:	428b      	cmp	r3, r1
 8014946:	d918      	bls.n	801497a <__ieee754_exp+0x52>
 8014948:	ee10 3a10 	vmov	r3, s0
 801494c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 8014950:	4313      	orrs	r3, r2
 8014952:	d009      	beq.n	8014968 <__ieee754_exp+0x40>
 8014954:	ee10 2a10 	vmov	r2, s0
 8014958:	462b      	mov	r3, r5
 801495a:	4620      	mov	r0, r4
 801495c:	4629      	mov	r1, r5
 801495e:	f7eb fcbd 	bl	80002dc <__adddf3>
 8014962:	4604      	mov	r4, r0
 8014964:	460d      	mov	r5, r1
 8014966:	e002      	b.n	801496e <__ieee754_exp+0x46>
 8014968:	b10e      	cbz	r6, 801496e <__ieee754_exp+0x46>
 801496a:	2400      	movs	r4, #0
 801496c:	2500      	movs	r5, #0
 801496e:	ecbd 8b04 	vpop	{d8-d9}
 8014972:	ec45 4b10 	vmov	d0, r4, r5
 8014976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801497a:	a38d      	add	r3, pc, #564	; (adr r3, 8014bb0 <__ieee754_exp+0x288>)
 801497c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014980:	ee10 0a10 	vmov	r0, s0
 8014984:	4629      	mov	r1, r5
 8014986:	f7ec f8ef 	bl	8000b68 <__aeabi_dcmpgt>
 801498a:	4607      	mov	r7, r0
 801498c:	b130      	cbz	r0, 801499c <__ieee754_exp+0x74>
 801498e:	ecbd 8b04 	vpop	{d8-d9}
 8014992:	2000      	movs	r0, #0
 8014994:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014998:	f000 b96f 	b.w	8014c7a <__math_oflow>
 801499c:	a386      	add	r3, pc, #536	; (adr r3, 8014bb8 <__ieee754_exp+0x290>)
 801499e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149a2:	4620      	mov	r0, r4
 80149a4:	4629      	mov	r1, r5
 80149a6:	f7ec f8c1 	bl	8000b2c <__aeabi_dcmplt>
 80149aa:	2800      	cmp	r0, #0
 80149ac:	f000 808b 	beq.w	8014ac6 <__ieee754_exp+0x19e>
 80149b0:	ecbd 8b04 	vpop	{d8-d9}
 80149b4:	4638      	mov	r0, r7
 80149b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149ba:	f000 b955 	b.w	8014c68 <__math_uflow>
 80149be:	4a94      	ldr	r2, [pc, #592]	; (8014c10 <__ieee754_exp+0x2e8>)
 80149c0:	4293      	cmp	r3, r2
 80149c2:	f240 80ac 	bls.w	8014b1e <__ieee754_exp+0x1f6>
 80149c6:	4a93      	ldr	r2, [pc, #588]	; (8014c14 <__ieee754_exp+0x2ec>)
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d87c      	bhi.n	8014ac6 <__ieee754_exp+0x19e>
 80149cc:	4b92      	ldr	r3, [pc, #584]	; (8014c18 <__ieee754_exp+0x2f0>)
 80149ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80149d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149d6:	ee10 0a10 	vmov	r0, s0
 80149da:	4629      	mov	r1, r5
 80149dc:	f7eb fc7c 	bl	80002d8 <__aeabi_dsub>
 80149e0:	4b8e      	ldr	r3, [pc, #568]	; (8014c1c <__ieee754_exp+0x2f4>)
 80149e2:	00f7      	lsls	r7, r6, #3
 80149e4:	443b      	add	r3, r7
 80149e6:	ed93 7b00 	vldr	d7, [r3]
 80149ea:	f1c6 0a01 	rsb	sl, r6, #1
 80149ee:	4680      	mov	r8, r0
 80149f0:	4689      	mov	r9, r1
 80149f2:	ebaa 0a06 	sub.w	sl, sl, r6
 80149f6:	eeb0 8a47 	vmov.f32	s16, s14
 80149fa:	eef0 8a67 	vmov.f32	s17, s15
 80149fe:	ec53 2b18 	vmov	r2, r3, d8
 8014a02:	4640      	mov	r0, r8
 8014a04:	4649      	mov	r1, r9
 8014a06:	f7eb fc67 	bl	80002d8 <__aeabi_dsub>
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	460d      	mov	r5, r1
 8014a0e:	4622      	mov	r2, r4
 8014a10:	462b      	mov	r3, r5
 8014a12:	4620      	mov	r0, r4
 8014a14:	4629      	mov	r1, r5
 8014a16:	f7eb fe17 	bl	8000648 <__aeabi_dmul>
 8014a1a:	a369      	add	r3, pc, #420	; (adr r3, 8014bc0 <__ieee754_exp+0x298>)
 8014a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a20:	4606      	mov	r6, r0
 8014a22:	460f      	mov	r7, r1
 8014a24:	f7eb fe10 	bl	8000648 <__aeabi_dmul>
 8014a28:	a367      	add	r3, pc, #412	; (adr r3, 8014bc8 <__ieee754_exp+0x2a0>)
 8014a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a2e:	f7eb fc53 	bl	80002d8 <__aeabi_dsub>
 8014a32:	4632      	mov	r2, r6
 8014a34:	463b      	mov	r3, r7
 8014a36:	f7eb fe07 	bl	8000648 <__aeabi_dmul>
 8014a3a:	a365      	add	r3, pc, #404	; (adr r3, 8014bd0 <__ieee754_exp+0x2a8>)
 8014a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a40:	f7eb fc4c 	bl	80002dc <__adddf3>
 8014a44:	4632      	mov	r2, r6
 8014a46:	463b      	mov	r3, r7
 8014a48:	f7eb fdfe 	bl	8000648 <__aeabi_dmul>
 8014a4c:	a362      	add	r3, pc, #392	; (adr r3, 8014bd8 <__ieee754_exp+0x2b0>)
 8014a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a52:	f7eb fc41 	bl	80002d8 <__aeabi_dsub>
 8014a56:	4632      	mov	r2, r6
 8014a58:	463b      	mov	r3, r7
 8014a5a:	f7eb fdf5 	bl	8000648 <__aeabi_dmul>
 8014a5e:	a360      	add	r3, pc, #384	; (adr r3, 8014be0 <__ieee754_exp+0x2b8>)
 8014a60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a64:	f7eb fc3a 	bl	80002dc <__adddf3>
 8014a68:	4632      	mov	r2, r6
 8014a6a:	463b      	mov	r3, r7
 8014a6c:	f7eb fdec 	bl	8000648 <__aeabi_dmul>
 8014a70:	4602      	mov	r2, r0
 8014a72:	460b      	mov	r3, r1
 8014a74:	4620      	mov	r0, r4
 8014a76:	4629      	mov	r1, r5
 8014a78:	f7eb fc2e 	bl	80002d8 <__aeabi_dsub>
 8014a7c:	4602      	mov	r2, r0
 8014a7e:	460b      	mov	r3, r1
 8014a80:	4606      	mov	r6, r0
 8014a82:	460f      	mov	r7, r1
 8014a84:	4620      	mov	r0, r4
 8014a86:	4629      	mov	r1, r5
 8014a88:	f7eb fdde 	bl	8000648 <__aeabi_dmul>
 8014a8c:	ec41 0b19 	vmov	d9, r0, r1
 8014a90:	f1ba 0f00 	cmp.w	sl, #0
 8014a94:	d15d      	bne.n	8014b52 <__ieee754_exp+0x22a>
 8014a96:	2200      	movs	r2, #0
 8014a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014a9c:	4630      	mov	r0, r6
 8014a9e:	4639      	mov	r1, r7
 8014aa0:	f7eb fc1a 	bl	80002d8 <__aeabi_dsub>
 8014aa4:	4602      	mov	r2, r0
 8014aa6:	460b      	mov	r3, r1
 8014aa8:	ec51 0b19 	vmov	r0, r1, d9
 8014aac:	f7eb fef6 	bl	800089c <__aeabi_ddiv>
 8014ab0:	4622      	mov	r2, r4
 8014ab2:	462b      	mov	r3, r5
 8014ab4:	f7eb fc10 	bl	80002d8 <__aeabi_dsub>
 8014ab8:	4602      	mov	r2, r0
 8014aba:	460b      	mov	r3, r1
 8014abc:	2000      	movs	r0, #0
 8014abe:	4958      	ldr	r1, [pc, #352]	; (8014c20 <__ieee754_exp+0x2f8>)
 8014ac0:	f7eb fc0a 	bl	80002d8 <__aeabi_dsub>
 8014ac4:	e74d      	b.n	8014962 <__ieee754_exp+0x3a>
 8014ac6:	4857      	ldr	r0, [pc, #348]	; (8014c24 <__ieee754_exp+0x2fc>)
 8014ac8:	a347      	add	r3, pc, #284	; (adr r3, 8014be8 <__ieee754_exp+0x2c0>)
 8014aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ace:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8014ad2:	4629      	mov	r1, r5
 8014ad4:	4620      	mov	r0, r4
 8014ad6:	f7eb fdb7 	bl	8000648 <__aeabi_dmul>
 8014ada:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014ade:	f7eb fbfd 	bl	80002dc <__adddf3>
 8014ae2:	f7ec f861 	bl	8000ba8 <__aeabi_d2iz>
 8014ae6:	4682      	mov	sl, r0
 8014ae8:	f7eb fd44 	bl	8000574 <__aeabi_i2d>
 8014aec:	a340      	add	r3, pc, #256	; (adr r3, 8014bf0 <__ieee754_exp+0x2c8>)
 8014aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014af2:	4606      	mov	r6, r0
 8014af4:	460f      	mov	r7, r1
 8014af6:	f7eb fda7 	bl	8000648 <__aeabi_dmul>
 8014afa:	4602      	mov	r2, r0
 8014afc:	460b      	mov	r3, r1
 8014afe:	4620      	mov	r0, r4
 8014b00:	4629      	mov	r1, r5
 8014b02:	f7eb fbe9 	bl	80002d8 <__aeabi_dsub>
 8014b06:	a33c      	add	r3, pc, #240	; (adr r3, 8014bf8 <__ieee754_exp+0x2d0>)
 8014b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b0c:	4680      	mov	r8, r0
 8014b0e:	4689      	mov	r9, r1
 8014b10:	4630      	mov	r0, r6
 8014b12:	4639      	mov	r1, r7
 8014b14:	f7eb fd98 	bl	8000648 <__aeabi_dmul>
 8014b18:	ec41 0b18 	vmov	d8, r0, r1
 8014b1c:	e76f      	b.n	80149fe <__ieee754_exp+0xd6>
 8014b1e:	4a42      	ldr	r2, [pc, #264]	; (8014c28 <__ieee754_exp+0x300>)
 8014b20:	4293      	cmp	r3, r2
 8014b22:	d811      	bhi.n	8014b48 <__ieee754_exp+0x220>
 8014b24:	a336      	add	r3, pc, #216	; (adr r3, 8014c00 <__ieee754_exp+0x2d8>)
 8014b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b2a:	ee10 0a10 	vmov	r0, s0
 8014b2e:	4629      	mov	r1, r5
 8014b30:	f7eb fbd4 	bl	80002dc <__adddf3>
 8014b34:	4b3a      	ldr	r3, [pc, #232]	; (8014c20 <__ieee754_exp+0x2f8>)
 8014b36:	2200      	movs	r2, #0
 8014b38:	f7ec f816 	bl	8000b68 <__aeabi_dcmpgt>
 8014b3c:	b138      	cbz	r0, 8014b4e <__ieee754_exp+0x226>
 8014b3e:	4b38      	ldr	r3, [pc, #224]	; (8014c20 <__ieee754_exp+0x2f8>)
 8014b40:	2200      	movs	r2, #0
 8014b42:	4620      	mov	r0, r4
 8014b44:	4629      	mov	r1, r5
 8014b46:	e70a      	b.n	801495e <__ieee754_exp+0x36>
 8014b48:	f04f 0a00 	mov.w	sl, #0
 8014b4c:	e75f      	b.n	8014a0e <__ieee754_exp+0xe6>
 8014b4e:	4682      	mov	sl, r0
 8014b50:	e75d      	b.n	8014a0e <__ieee754_exp+0xe6>
 8014b52:	4632      	mov	r2, r6
 8014b54:	463b      	mov	r3, r7
 8014b56:	2000      	movs	r0, #0
 8014b58:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8014b5c:	f7eb fbbc 	bl	80002d8 <__aeabi_dsub>
 8014b60:	4602      	mov	r2, r0
 8014b62:	460b      	mov	r3, r1
 8014b64:	ec51 0b19 	vmov	r0, r1, d9
 8014b68:	f7eb fe98 	bl	800089c <__aeabi_ddiv>
 8014b6c:	4602      	mov	r2, r0
 8014b6e:	460b      	mov	r3, r1
 8014b70:	ec51 0b18 	vmov	r0, r1, d8
 8014b74:	f7eb fbb0 	bl	80002d8 <__aeabi_dsub>
 8014b78:	4642      	mov	r2, r8
 8014b7a:	464b      	mov	r3, r9
 8014b7c:	f7eb fbac 	bl	80002d8 <__aeabi_dsub>
 8014b80:	4602      	mov	r2, r0
 8014b82:	460b      	mov	r3, r1
 8014b84:	2000      	movs	r0, #0
 8014b86:	4926      	ldr	r1, [pc, #152]	; (8014c20 <__ieee754_exp+0x2f8>)
 8014b88:	f7eb fba6 	bl	80002d8 <__aeabi_dsub>
 8014b8c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8014b90:	4592      	cmp	sl, r2
 8014b92:	db02      	blt.n	8014b9a <__ieee754_exp+0x272>
 8014b94:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014b98:	e6e3      	b.n	8014962 <__ieee754_exp+0x3a>
 8014b9a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8014b9e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8014ba2:	2200      	movs	r2, #0
 8014ba4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8014ba8:	f7eb fd4e 	bl	8000648 <__aeabi_dmul>
 8014bac:	e6d9      	b.n	8014962 <__ieee754_exp+0x3a>
 8014bae:	bf00      	nop
 8014bb0:	fefa39ef 	.word	0xfefa39ef
 8014bb4:	40862e42 	.word	0x40862e42
 8014bb8:	d52d3051 	.word	0xd52d3051
 8014bbc:	c0874910 	.word	0xc0874910
 8014bc0:	72bea4d0 	.word	0x72bea4d0
 8014bc4:	3e663769 	.word	0x3e663769
 8014bc8:	c5d26bf1 	.word	0xc5d26bf1
 8014bcc:	3ebbbd41 	.word	0x3ebbbd41
 8014bd0:	af25de2c 	.word	0xaf25de2c
 8014bd4:	3f11566a 	.word	0x3f11566a
 8014bd8:	16bebd93 	.word	0x16bebd93
 8014bdc:	3f66c16c 	.word	0x3f66c16c
 8014be0:	5555553e 	.word	0x5555553e
 8014be4:	3fc55555 	.word	0x3fc55555
 8014be8:	652b82fe 	.word	0x652b82fe
 8014bec:	3ff71547 	.word	0x3ff71547
 8014bf0:	fee00000 	.word	0xfee00000
 8014bf4:	3fe62e42 	.word	0x3fe62e42
 8014bf8:	35793c76 	.word	0x35793c76
 8014bfc:	3dea39ef 	.word	0x3dea39ef
 8014c00:	8800759c 	.word	0x8800759c
 8014c04:	7e37e43c 	.word	0x7e37e43c
 8014c08:	40862e41 	.word	0x40862e41
 8014c0c:	7fefffff 	.word	0x7fefffff
 8014c10:	3fd62e42 	.word	0x3fd62e42
 8014c14:	3ff0a2b1 	.word	0x3ff0a2b1
 8014c18:	08015248 	.word	0x08015248
 8014c1c:	08015258 	.word	0x08015258
 8014c20:	3ff00000 	.word	0x3ff00000
 8014c24:	08015238 	.word	0x08015238
 8014c28:	3defffff 	.word	0x3defffff

08014c2c <with_errno>:
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	4604      	mov	r4, r0
 8014c30:	460d      	mov	r5, r1
 8014c32:	4616      	mov	r6, r2
 8014c34:	f7fd f874 	bl	8011d20 <__errno>
 8014c38:	4629      	mov	r1, r5
 8014c3a:	6006      	str	r6, [r0, #0]
 8014c3c:	4620      	mov	r0, r4
 8014c3e:	bd70      	pop	{r4, r5, r6, pc}

08014c40 <xflow>:
 8014c40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c42:	4614      	mov	r4, r2
 8014c44:	461d      	mov	r5, r3
 8014c46:	b108      	cbz	r0, 8014c4c <xflow+0xc>
 8014c48:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014c4c:	e9cd 2300 	strd	r2, r3, [sp]
 8014c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c54:	4620      	mov	r0, r4
 8014c56:	4629      	mov	r1, r5
 8014c58:	f7eb fcf6 	bl	8000648 <__aeabi_dmul>
 8014c5c:	2222      	movs	r2, #34	; 0x22
 8014c5e:	b003      	add	sp, #12
 8014c60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c64:	f7ff bfe2 	b.w	8014c2c <with_errno>

08014c68 <__math_uflow>:
 8014c68:	b508      	push	{r3, lr}
 8014c6a:	2200      	movs	r2, #0
 8014c6c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014c70:	f7ff ffe6 	bl	8014c40 <xflow>
 8014c74:	ec41 0b10 	vmov	d0, r0, r1
 8014c78:	bd08      	pop	{r3, pc}

08014c7a <__math_oflow>:
 8014c7a:	b508      	push	{r3, lr}
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8014c82:	f7ff ffdd 	bl	8014c40 <xflow>
 8014c86:	ec41 0b10 	vmov	d0, r0, r1
 8014c8a:	bd08      	pop	{r3, pc}

08014c8c <finite>:
 8014c8c:	b082      	sub	sp, #8
 8014c8e:	ed8d 0b00 	vstr	d0, [sp]
 8014c92:	9801      	ldr	r0, [sp, #4]
 8014c94:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8014c98:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014c9c:	0fc0      	lsrs	r0, r0, #31
 8014c9e:	b002      	add	sp, #8
 8014ca0:	4770      	bx	lr
	...

08014ca4 <_init>:
 8014ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014ca6:	bf00      	nop
 8014ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014caa:	bc08      	pop	{r3}
 8014cac:	469e      	mov	lr, r3
 8014cae:	4770      	bx	lr

08014cb0 <_fini>:
 8014cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb2:	bf00      	nop
 8014cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cb6:	bc08      	pop	{r3}
 8014cb8:	469e      	mov	lr, r3
 8014cba:	4770      	bx	lr
